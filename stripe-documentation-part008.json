[
  {
    "url": "https://docs.stripe.com/changelog",
    "markdown": "Changelog | Stripe DocumentationThe Stripe Docs logo\n\n[Skip to content](#main-content)\n\nChangelog\n\n[\n\nCreate account\n\n\n\n](https://dashboard.stripe.com/register)or[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fchangelog)\n\n[\n\n](/)\n\nSearch the docs or ask a question\n\n/\n\n[Create account](https://dashboard.stripe.com/register)\n\n[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fchangelog)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](/development)\n\n[\n\nNo-code\n\n\n\n](/no-code)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](/development)\n\nAPIs & SDKs\n\nHelp\n\n[Overview](/development)\n\nDeveloper tools\n\nSDKs\n\nAPI\n\n[API keys](/keys \"Learn how to use API keys\")\n\n[API upgrades](/upgrades \"API upgrades\")\n\nChangelog\n\n[Rate limits](/rate-limits \"Rate limits\")\n\n[Automated testing](/automated-testing \"Automated testing\")\n\n[Metadata](/metadata \"Save additional information\")\n\n[Expanding responses](/expand \"Expanding responses\")\n\n[Domains and IP addresses](/ips \"Domains and IP addresses\")\n\n[Search](/search \"Search\")\n\n[Error handling](/error-handling)\n\n[Error codes](/error-codes)\n\nTesting\n\nWebhooks\n\nEvent Destinations\n\nStripe CLI\n\nStripe Shell\n\nDeveloper Dashboard\n\nWorkbench\n\n[Stripe for Visual Studio Code](/stripe-vscode \"Stripe for Visual Studio Code\")[File uploads](/file-upload)[Feedback](/dev-tools-csat \"Tell us about your experience with Stripe developer tools\")\n\nSecurity\n\nSecurity\n\nExtend Stripe\n\nStripe Apps\n\nStripe Connectors\n\nPartners\n\n[Partner ecosystem](/partners \"Learn about the Stripe Partner Program\")[Partner certification](/partners/training-and-certification \"Become a Stripe-certified architect or developer\")\n\nUnited States\n\nEnglish (United States)\n\n[Home](/ \"Home\")[Developer tools](/development \"Developer tools\")API\n\n# Changelog\n\n## Keep track of every change to the Stripe API.\n\nThis changelog lists all additions and updates to the Stripe API, in chronological order.\n\n#### Caution\n\nFor breaking changes and steps for upgrading your Stripe API version, view the [upgrade guide](/upgrades).\n\n### July 11, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_method_options` on `ConfirmationToken`\n\n### July 9, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_element` on `CustomerSession#create.components` and `CustomerSession.components`\n*   Change `Plan.meter` and `Price.recurring.meter` to be required\n\n### July 8, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for value `payment_intent_fx_quote_invalid` from enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n*   Add support for `address_validation` on `Issuing.Card#create.shipping` and `Issuing.Card.shipping`\n*   Add support for `shipping` on `Issuing.Card#update`\n*   Remove support for values `billing_policy_remote_function_response_invalid`, `billing_policy_remote_function_timeout`, `billing_policy_remote_function_unexpected_status_code`, and `billing_policy_remote_function_unreachable` from enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n\n### July 5, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `posted_at` on `Tax.Transaction#create_from_calculation` and `Tax.Transaction`\n\n### July 3, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `payment_intent_fx_quote_invalid` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n\n### July 2, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `add_lines`, `remove_lines`, and `update_lines` methods on resource `Invoice`\n\n### June 27, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `filters` on `Checkout.Session.payment_method_options.us_bank_account.financial_connections`, `Invoice#create.payment_settings.payment_method_options.us_bank_account.financial_connections`, `Invoice#update.payment_settings.payment_method_options.us_bank_account.financial_connections`, `Invoice.payment_settings.payment_method_options.us_bank_account.financial_connections`, `PaymentIntent#confirm.payment_method_options.us_bank_account.financial_connections`, `PaymentIntent#create.payment_method_options.us_bank_account.financial_connections`, `PaymentIntent#update.payment_method_options.us_bank_account.financial_connections`, `PaymentIntent.payment_method_options.us_bank_account.financial_connections`, `SetupIntent#confirm.payment_method_options.us_bank_account.financial_connections`, `SetupIntent#create.payment_method_options.us_bank_account.financial_connections`, `SetupIntent#update.payment_method_options.us_bank_account.financial_connections`, `SetupIntent.payment_method_options.us_bank_account.financial_connections`, `Subscription#create.payment_settings.payment_method_options.us_bank_account.financial_connections`, `Subscription#update.payment_settings.payment_method_options.us_bank_account.financial_connections`, and `Subscription.payment_settings.payment_method_options.us_bank_account.financial_connections`\n*   Add support for `account_subcategories` on `FinancialConnections.Session#create.filters` and `FinancialConnections.Session.filters`\n\n### June 26, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `multibanco` and `twint` on enums `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]`\n\n### June 25, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `email_type` on `CreditNote#create`, `CreditNote#preview_lines`, and `CreditNote#preview`\n*   Add support for `reboot_window` on `Terminal.Configuration#create`, `Terminal.Configuration#update`, and `Terminal.Configuration`\n*   Add support for new value `zip` on enums `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]`\n\n### June 24, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `ch_uid` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, `Tax.Calculation.customer_details.tax_ids[].type`, `Tax.Transaction.customer_details.tax_ids[].type`, and `TaxId.type`\n*   Add support for new value `ch_uid` on enums `Customer#create.tax_id_data[].type`, `Invoice#create_preview.customer_details.tax_ids[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, `Tax.Calculation#create.customer_details.tax_ids[].type`, and `TaxId#create.type`\n\n### June 21, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `finalize_amount` test helper method on resource `Issuing.Authorization`\n*   Add support for `fleet` on `Issuing.Authorization.testHelpers#capture.purchase_details`, `Issuing.Authorization.testHelpers#create`, `Issuing.Authorization`, `Issuing.Transaction.purchase_details`, `Issuing.Transaction.testHelpers#create_force_capture.purchase_details`, and `Issuing.Transaction.testHelpers#create_unlinked_refund.purchase_details`\n*   Add support for `fuel` on `Issuing.Authorization.testHelpers#create` and `Issuing.Authorization`\n*   Add support for `industry_product_code` on `Issuing.Authorization.testHelpers#capture.purchase_details.fuel`, `Issuing.Transaction.purchase_details.fuel`, `Issuing.Transaction.testHelpers#create_force_capture.purchase_details.fuel`, and `Issuing.Transaction.testHelpers#create_unlinked_refund.purchase_details.fuel`\n*   Add support for new values `card_canceled`, `card_expired`, `cardholder_blocked`, `insecure_authorization_method`, and `pin_blocked` on enum `Issuing.Authorization.request_history[].reason`\n\n### June 18, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `2024-06-20` on enum `WebhookEndpoint#create.api_version`\n*   Add support for new values `charging_minute`, `imperial_gallon`, `kilogram`, `kilowatt_hour`, and `pound` on enums `Issuing.Authorization.testHelpers#capture.purchase_details.fuel.unit`, `Issuing.Transaction.testHelpers#create_force_capture.purchase_details.fuel.unit`, and `Issuing.Transaction.testHelpers#create_unlinked_refund.purchase_details.fuel.unit`\n*   Add support for `quantity_decimal` on `Issuing.Authorization.testHelpers#capture.purchase_details.fuel`, `Issuing.Transaction.purchase_details.fuel`, `Issuing.Transaction.testHelpers#create_force_capture.purchase_details.fuel`, and `Issuing.Transaction.testHelpers#create_unlinked_refund.purchase_details.fuel`\n*   Remove support for `volume_decimal` on `Issuing.Authorization.testHelpers#capture.purchase_details.fuel`, `Issuing.Transaction.purchase_details.fuel`, `Issuing.Transaction.testHelpers#create_force_capture.purchase_details.fuel`, and `Issuing.Transaction.testHelpers#create_unlinked_refund.purchase_details.fuel`\n\n### June 15, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `mobilepay` on enums `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]`\n\n### June 14, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `tax_id_collection` on `PaymentLink#update`\n\n### June 11, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `twint_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `twint` on `Charge.payment_method_details`, `ConfirmationToken.payment_method_preview`, `ConfirmationToken.testHelpers#create.payment_method_data`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `twint` on enums `Checkout.Session#create.payment_method_types[]`, `Customer#list_payment_methods.type`, `PaymentMethod#create.type`, and `PaymentMethod#list.type`\n*   Add support for new value `twint` on enums `ConfirmationToken.testHelpers#create.payment_method_data.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new value `twint` on enums `ConfirmationToken.payment_method_preview.type` and `PaymentMethod.type`\n\n### June 10, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `multibanco_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `multibanco` on `Checkout.Session#create.payment_method_options`, `Checkout.Session.payment_method_options`, `ConfirmationToken.payment_method_preview`, `ConfirmationToken.testHelpers#create.payment_method_data`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethodConfiguration#create`, `PaymentMethodConfiguration#update`, `PaymentMethodConfiguration`, `PaymentMethod`, `Refund.destination_details`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `multibanco` on enums `Checkout.Session#create.payment_method_types[]`, `Customer#list_payment_methods.type`, `PaymentMethod#create.type`, and `PaymentMethod#list.type`\n*   Add support for new value `multibanco` on enums `ConfirmationToken.testHelpers#create.payment_method_data.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new value `multibanco` on enums `ConfirmationToken.payment_method_preview.type` and `PaymentMethod.type`\n*   Add support for `multibanco_display_details` on `PaymentIntent.next_action`\n\n### June 7, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `de_stn` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, `Tax.Calculation.customer_details.tax_ids[].type`, `Tax.Transaction.customer_details.tax_ids[].type`, and `TaxId.type`\n*   Add support for new value `de_stn` on enums `Customer#create.tax_id_data[].type`, `Invoice#create_preview.customer_details.tax_ids[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, `Tax.Calculation#create.customer_details.tax_ids[].type`, and `TaxId#create.type`\n\n### June 6, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `swish` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n*   Add support for `invoice_settings` on `Subscription`\n\n### June 4, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for resource `PlatformTaxFee`\n\n### June 3, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `gb_bank_transfer_payments`, `jp_bank_transfer_payments`, `mx_bank_transfer_payments`, `sepa_bank_transfer_payments`, and `us_bank_transfer_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n\n### May 30, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `generated_from` on `ConfirmationToken.payment_method_preview.card` and `PaymentMethod.card`\n*   Add support for new value `verification_requires_additional_proof_of_registration` on enums `Account.future_requirements.errors[].code`, `Account.requirements.errors[].code`, `BankAccount.future_requirements.errors[].code`, and `BankAccount.requirements.errors[].code`\n\n### May 29, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `issuing_personalization_design.activated`, `issuing_personalization_design.deactivated`, `issuing_personalization_design.rejected`, and `issuing_personalization_design.updated` on enum `Event.type`\n*   Change `Issuing.Card.personalization_design` and `Issuing.PhysicalBundle.features` to be required\n*   Add support for new values `issuing_personalization_design.activated`, `issuing_personalization_design.deactivated`, `issuing_personalization_design.rejected`, and `issuing_personalization_design.updated` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### May 28, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `default_value` on `Checkout.Session#create.custom_fields[].dropdown`, `Checkout.Session#create.custom_fields[].numeric`, `Checkout.Session#create.custom_fields[].text`, `Checkout.Session.custom_fields[].dropdown`, `Checkout.Session.custom_fields[].numeric`, and `Checkout.Session.custom_fields[].text`\n\n### May 25, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `en-RO` and `ro-RO` on enums `PaymentIntent#confirm.payment_method_options.klarna.preferred_locale`, `PaymentIntent#create.payment_method_options.klarna.preferred_locale`, and `PaymentIntent#update.payment_method_options.klarna.preferred_locale`\n\n### May 22, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `external_account_collection` on `AccountSession#create.components.balances.features`, `AccountSession#create.components.payouts.features`, `AccountSession.components.balances.features`, and `AccountSession.components.payouts.features`\n*   Add support for `payment_method_remove` on `Checkout.Session.saved_payment_method_options`\n\n### May 17, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `terminal_reader_invalid_location_for_payment` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n\n### May 15, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `routing` on `PaymentIntent#confirm.payment_method_options.card_present`, `PaymentIntent#create.payment_method_options.card_present`, `PaymentIntent#update.payment_method_options.card_present`, and `PaymentIntent.payment_method_options.card_present`\n\n### May 14, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `stripe_s700` on `Terminal.Configuration#create`, `Terminal.Configuration#update`, and `Terminal.Configuration`\n*   Add support for `loss_reason` on `Issuing.Dispute`\n*   Add support for `fee_source` on `ApplicationFee`\n*   Add support for `net_available` on `Balance.instant_available[]`\n*   Add support for `application_fee_amount` and `application_fee` on `Payout`\n\n### May 13, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `klarna` on `Dispute.payment_method_details`\n*   Add support for new value `klarna` on enum `Dispute.payment_method_details.type`\n*   Remove support for `kr_market` on `Charge.payment_method_details`, `ConfirmationToken.payment_method_preview`, `ConfirmationToken.testHelpers#create.payment_method_data`, `Mandate.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod#update`, `PaymentMethod`, `SetupAttempt.payment_method_details`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Remove support for value `kr_market` from enums `ConfirmationToken.testHelpers#create.payment_method_data.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Remove support for value `kr_market` from enums `ConfirmationToken.payment_method_preview.type` and `PaymentMethod.type`\n*   Remove support for value `kr_market` from enums `Customer#list_payment_methods.type`, `PaymentMethod#create.type`, and `PaymentMethod#list.type`\n*   Add support for `kr_market` on `Charge.payment_method_details`, `ConfirmationToken.payment_method_preview`, `ConfirmationToken.testHelpers#create.payment_method_data`, `Mandate.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod#update`, `PaymentMethod`, `SetupAttempt.payment_method_details`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `kr_market` on enums `ConfirmationToken.testHelpers#create.payment_method_data.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new value `kr_market` on enums `ConfirmationToken.payment_method_preview.type` and `PaymentMethod.type`\n*   Add support for new value `kr_market` on enums `Customer#list_payment_methods.type`, `PaymentMethod#create.type`, and `PaymentMethod#list.type`\n\n### May 10, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `archived` and `lookup_key` on `Entitlements.Feature#list`\n*   Change `Treasury.OutboundPayment.tracking_details` and `Treasury.OutboundTransfer.tracking_details` to be required\n\n### May 9, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `preferred_locales` on `Charge.payment_method_details.card_present`, `ConfirmationToken.payment_method_preview.card_present`, and `PaymentMethod.card_present`\n*   Add support for `no_valid_authorization` on `Issuing.Dispute#create.evidence`, `Issuing.Dispute#update.evidence`, and `Issuing.Dispute.evidence`\n*   Add support for new value `no_valid_authorization` on enums `Issuing.Dispute#create.evidence.reason`, `Issuing.Dispute#update.evidence.reason`, and `Issuing.Dispute.evidence.reason`\n*   Change `FinancialConnections.Session#create.filters.countries` to be optional\n*   Remove support for `pending_invoice_items_behavior` on `Subscription#create`\n\n### May 8, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `preview_mode` on `Invoice#create_preview`, `Invoice#upcomingLines`, and `Invoice#upcoming`\n\n### May 7, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `pending_invoice_items_behavior` on `Subscription#create`\n\n### May 6, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `allow_redisplay` on `ConfirmationToken.payment_method_preview` and `PaymentMethod`\n*   Add support for `update` test helper method on resources `Treasury.OutboundPayment` and `Treasury.OutboundTransfer`\n*   Add support for new values `treasury.outbound_payment.tracking_details_updated` and `treasury.outbound_transfer.tracking_details_updated` on enum `Event.type`\n*   Add support for `tracking_details` on `Treasury.OutboundPayment` and `Treasury.OutboundTransfer`\n*   Add support for new values `treasury.outbound_payment.tracking_details_updated` and `treasury.outbound_transfer.tracking_details_updated` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### May 2, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `Entitlements.Feature#update.metadata` from `map(string: string)` to `emptyable(map(string: string))`\n*   Add support for `paypal` on `Dispute.payment_method_details`\n*   Change type of `Dispute.payment_method_details.type` from `literal('card')` to `enum('card'|'paypal')`\n\n### May 1, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `bh`, `eg`, `ge`, `ke`, `kz`, `ng`, and `om` on `Tax.Registration#create.country_options` and `Tax.Registration.country_options`\n\n### April 29, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_method_types` on `PaymentIntent#confirm`\n\n### April 26, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Apps.Secret.payload`, `BillingPortal.Configuration.features.subscription_update.products`, `Charge.refunds`, `ConfirmationToken.payment_method_preview.klarna.dob`, `Identity.VerificationReport.document.dob`, `Identity.VerificationReport.document.expiration_date`, `Identity.VerificationReport.document.number`, `Identity.VerificationReport.id_number.dob`, `Identity.VerificationReport.id_number.id_number`, `Identity.VerificationSession.provided_details`, `Identity.VerificationSession.verified_outputs.dob`, `Identity.VerificationSession.verified_outputs.id_number`, `Identity.VerificationSession.verified_outputs`, `Issuing.Dispute.balance_transactions`, `Issuing.Transaction.purchase_details`, `PaymentMethod.klarna.dob`, `Tax.Calculation.line_items`, `Tax.CalculationLineItem.tax_breakdown`, `Tax.Transaction.line_items`, `Treasury.FinancialAccount.financial_addresses[].aba.account_number`, `Treasury.ReceivedCredit.linked_flows.source_flow_details`, `Treasury.Transaction.entries`, `Treasury.Transaction.flow_details`, and `Treasury.TransactionEntry.flow_details` to be optional\n*   Add support for new value `shipping_address_invalid` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n*   Add support for `ship_from_details` on `Tax.Calculation#create`, `Tax.Calculation`, and `Tax.Transaction`\n\n### April 25, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `mobilepay` on `PaymentMethodConfiguration#create`, `PaymentMethodConfiguration#update`, and `PaymentMethodConfiguration`\n\n### April 24, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `setup_future_usage` on `Checkout.Session.payment_method_options.amazon_pay`, `Checkout.Session.payment_method_options.revolut_pay`, `PaymentIntent.payment_method_options.amazon_pay`, and `PaymentIntent.payment_method_options.revolut_pay`\n*   Add support for new values `amazon_pay` and `revolut_pay` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n*   Add support for `amazon_pay` and `revolut_pay` on `Mandate.payment_method_details` and `SetupAttempt.payment_method_details`\n\n### April 23, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `Entitlements.ActiveEntitlement.feature` from `string` to `expandable($Entitlements.Feature)`\n\n### April 22, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `email` and `phone` on `Identity.VerificationSession#create.options` and `Identity.VerificationSession#update.options`\n*   Change `Identity.VerificationSession.provided_details`, `Identity.VerificationSession.verified_outputs.email`, and `Identity.VerificationSession.verified_outputs.phone` to be required\n\n### April 19, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `ending_before`, `limit`, and `starting_after` on `PaymentMethodConfiguration#list`\n\n### April 18, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `mobilepay` on `Checkout.Session#create.payment_method_options` and `Checkout.Session.payment_method_options`\n*   Add support for new value `mobilepay` on enum `Checkout.Session#create.payment_method_types[]`\n*   Add support for `create_preview` method on resource `Invoice`\n*   Add support for `schedule_details` and `subscription_details` on `Invoice#upcomingLines` and `Invoice#upcoming`\n\n### April 17, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `other` on enums `Issuing.Authorization.testHelpers#capture.purchase_details.fuel.unit`, `Issuing.Transaction.testHelpers#create_force_capture.purchase_details.fuel.unit`, and `Issuing.Transaction.testHelpers#create_unlinked_refund.purchase_details.fuel.unit`\n*   Add support for `payment_method_data` on `Checkout.Session#create`\n*   Add support for `saved_payment_method_options` on `Checkout.Session#create` and `Checkout.Session`\n*   Add support for `allow_redisplay` on `ConfirmationToken.testHelpers#create.payment_method_data`, `Customer#list_payment_methods`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#update.payment_method_data`, `PaymentMethod#create`, `PaymentMethod#update`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n\n### April 15, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `config` on `Forwarding.Request#create` and `Forwarding.Request`\n*   Add support for `balances` and `payouts_list` on `AccountSession#create.components` and `AccountSession.components`\n*   Change `AccountSession.components.payment_details.features.destination_on_behalf_of_charge_management` and `AccountSession.components.payments.features.destination_on_behalf_of_charge_management` to be required\n*   Add support for `swish` on `PaymentMethodConfiguration#create`, `PaymentMethodConfiguration#update`, and `PaymentMethodConfiguration`\n*   Change type of `Dispute.payment_method_details.card` from `nullable(DisputePaymentMethodDetailsCard)` to `DisputePaymentMethodDetailsCard`\n*   Change `Dispute.payment_method_details.card` to be optional\n\n### April 13, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Billing.MeterEvent#create.timestamp` to be optional\n*   Add support for new resource `Entitlements.ActiveEntitlementSummary`\n*   Add support for new value `entitlements.active_entitlement_summary.updated` on enum `Event.type`\n*   Add support for new value `entitlements.active_entitlement_summary.updated` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### April 11, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `capture_method` on `PaymentIntent#confirm.payment_method_options.revolut_pay`, `PaymentIntent#create.payment_method_options.revolut_pay`, `PaymentIntent#update.payment_method_options.revolut_pay`, and `PaymentIntent.payment_method_options.revolut_pay`\n*   Add support for `account_management` and `notification_banner` on `AccountSession#create.components` and `AccountSession.components`\n*   Add support for `amazon_pay` on `Charge.payment_method_details`, `Checkout.Session#create.payment_method_options`, `Checkout.Session.payment_method_options`, `ConfirmationToken.payment_method_preview`, `ConfirmationToken.testHelpers#create.payment_method_data`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethodConfiguration#create`, `PaymentMethodConfiguration#update`, `PaymentMethodConfiguration`, `PaymentMethod`, `Refund.destination_details`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#confirm.payment_method_options`, `SetupIntent#create.payment_method_data`, `SetupIntent#create.payment_method_options`, `SetupIntent#update.payment_method_data`, `SetupIntent#update.payment_method_options`, and `SetupIntent.payment_method_options`\n*   Add support for new value `amazon_pay` on enum `Checkout.Session#create.payment_method_types[]`\n*   Add support for new value `amazon_pay` on enums `ConfirmationToken.testHelpers#create.payment_method_data.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new value `amazon_pay` on enums `ConfirmationToken.payment_method_preview.type` and `PaymentMethod.type`\n*   Add support for new value `amazon_pay` on enums `Customer#list_payment_methods.type`, `PaymentMethod#create.type`, and `PaymentMethod#list.type`\n*   Add support for new value `ownership` on enums `Checkout.Session#create.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Checkout.Session.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Invoice#create.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Invoice#update.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Invoice.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `PaymentIntent#confirm.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `PaymentIntent#create.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `PaymentIntent#update.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `PaymentIntent.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `SetupIntent#confirm.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `SetupIntent#create.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `SetupIntent#update.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `SetupIntent.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Subscription#create.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Subscription#update.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, and `Subscription.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`\n*   Add support for `next_refresh_available_at` on `FinancialConnections.Account.ownership_refresh`\n*   Add support for new value `ownership` on enums `Invoice.payment_settings.payment_method_options.us_bank_account.financial_connections.permissions[]` and `Subscription.payment_settings.payment_method_options.us_bank_account.financial_connections.permissions[]`\n*   Change `Billing.MeterEventAdjustment#create.cancel.identifier` and `Billing.MeterEventAdjustment#create.cancel` to be optional\n*   Change `Billing.MeterEventAdjustment#create.type` to be required\n*   Change type of `Billing.MeterEventAdjustment.cancel` from `BillingMeterResourceBillingMeterEventAdjustmentCancel` to `nullable(BillingMeterResourceBillingMeterEventAdjustmentCancel)`\n*   Add support for new values `billing_policy_remote_function_response_invalid`, `billing_policy_remote_function_timeout`, `billing_policy_remote_function_unexpected_status_code`, and `billing_policy_remote_function_unreachable` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n*   Add support for `external_account_collection` on `AccountSession#create.components.account_onboarding.features` and `AccountSession.components.account_onboarding.features`\n*   Add support for new values `bh_vat`, `kz_bin`, `ng_tin`, and `om_vat` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, `Tax.Calculation.customer_details.tax_ids[].type`, `Tax.Transaction.customer_details.tax_ids[].type`, and `TaxId.type`\n*   Add support for new values `bh_vat`, `kz_bin`, `ng_tin`, and `om_vat` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, `Tax.Calculation#create.customer_details.tax_ids[].type`, and `TaxId#create.type`\n\n### April 9, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `marketing_features` on `Product#create`, `Product#update`, and `Product`\n*   Remove support for `features` on `Product#create`, `Product#update`, and `Product`\n*   Add support for new resources `Entitlements.ActiveEntitlement` and `Entitlements.Feature`\n*   Add support for `list` and `retrieve` methods on resource `ActiveEntitlement`\n*   Add support for `create`, `list`, `retrieve`, and `update` methods on resource `Feature`\n\n### April 8, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `rendering_options` on `Invoice#create`, `Invoice#update`, and `Invoice`\n*   Add support for `controller` on `Account#create`\n*   Add support for `fees`, `losses`, `requirement_collection`, and `stripe_dashboard` on `Account.controller`\n*   Add support for new value `none` on enum `Account.type`\n\n### April 5, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `2024-04-10` on enum `WebhookEndpoint#create.api_version`\n*   Add support for `event_name` on `Billing.MeterEventAdjustment#create` and `Billing.MeterEventAdjustment`\n*   Add support for `cancel` and `type` on `Billing.MeterEventAdjustment`\n\n### April 4, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `mobile_phone_reader` on enums `Terminal.Reader#list.device_type` and `Terminal.Reader.device_type`\n*   Add support for `promotion_code` on `Quote#create.discounts[]`, `Quote#create.line_items[].discounts[]`, `Quote#update.discounts[]`, and `Quote#update.line_items[].discounts[]`\n\n### April 3, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `offline` on `SetupAttempt.payment_method_details.card_present`\n*   Add support for `card_present` on `SetupIntent#confirm.payment_method_options`, `SetupIntent#create.payment_method_options`, `SetupIntent#update.payment_method_options`, and `SetupIntent.payment_method_options`\n*   Add support for `email` and `phone` on `Identity.VerificationReport`, `Identity.VerificationSession#create.options`, `Identity.VerificationSession#update.options`, `Identity.VerificationSession.options`, and `Identity.VerificationSession.verified_outputs`\n*   Add support for `verification_flow` on `Identity.VerificationReport`, `Identity.VerificationSession#create`, and `Identity.VerificationSession`\n*   Add support for new value `verification_flow` on enums `Identity.VerificationReport.type` and `Identity.VerificationSession.type`\n*   Add support for `provided_details` on `Identity.VerificationSession#create`, `Identity.VerificationSession#update`, and `Identity.VerificationSession`\n*   Change `Identity.VerificationSession#create.type` to be optional\n*   Add support for new values `email_unverified_other`, `email_verification_declined`, `phone_unverified_other`, and `phone_verification_declined` on enum `Identity.VerificationSession.last_error.code`\n*   Add support for `zip` on `PaymentMethodConfiguration#create`, `PaymentMethodConfiguration#update`, and `PaymentMethodConfiguration`\n*   Add support for `subscription_item` on `Discount`\n*   Add support for `discounts` on `Invoice#upcoming.subscription_items[]`, `Invoice#upcomingLines.subscription_items[]`, `Quote#create.line_items[]`, `Quote#update.line_items[]`, `Subscription#create.add_invoice_items[]`, `Subscription#create.items[]`, `Subscription#create`, `Subscription#update.add_invoice_items[]`, `Subscription#update.items[]`, `Subscription#update`, `SubscriptionItem#create`, `SubscriptionItem#update`, `SubscriptionItem`, `SubscriptionSchedule#create.phases[].add_invoice_items[]`, `SubscriptionSchedule#create.phases[].items[]`, `SubscriptionSchedule#create.phases[]`, `SubscriptionSchedule#update.phases[].add_invoice_items[]`, `SubscriptionSchedule#update.phases[].items[]`, `SubscriptionSchedule#update.phases[]`, `SubscriptionSchedule.phases[].add_invoice_items[]`, `SubscriptionSchedule.phases[].items[]`, `SubscriptionSchedule.phases[]`, and `Subscription`\n*   Change type of `Invoice.discounts` from `nullable(array(expandable(deletable($Discount))))` to `array(expandable(deletable($Discount)))`\n\n### April 2, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for value `2024-04-03` from enum `WebhookEndpoint#create.api_version`\n*   Add support for `promotion_code` on `Invoice#create.discounts[]`, `Invoice#update.discounts[]`, `InvoiceItem#create.discounts[]`, and `InvoiceItem#update.discounts[]`\n*   Change type of `Checkout.Session#create.payment_method_options.swish.reference` from `emptyStringable(string)` to `string`\n*   Change `PaymentIntent.next_action.swish_handle_redirect_or_display_qr_code.hosted_instructions_url`, `PaymentIntent.next_action.swish_handle_redirect_or_display_qr_code.mobile_auth_url`, `PaymentIntent.next_action.swish_handle_redirect_or_display_qr_code.qr_code.data`, `PaymentIntent.next_action.swish_handle_redirect_or_display_qr_code.qr_code.image_url_png`, `PaymentIntent.next_action.swish_handle_redirect_or_display_qr_code.qr_code.image_url_svg`, `PaymentIntent.next_action.swish_handle_redirect_or_display_qr_code.qr_code`, and `PaymentIntent.payment_method_options.swish.reference` to be required\n\n### April 1, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `allowed_merchant_countries` and `blocked_merchant_countries` on `Issuing.Card#create.spending_controls`, `Issuing.Card#update.spending_controls`, `Issuing.Card.spending_controls`, `Issuing.Cardholder#create.spending_controls`, `Issuing.Cardholder#update.spending_controls`, and `Issuing.Cardholder.spending_controls`\n\n### March 29, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `subscription_pause` on `BillingPortal.Configuration#create.features`, `BillingPortal.Configuration#update.features`, and `BillingPortal.Configuration.features`\n*   Change `Charge.payment_method_details.us_bank_account.payment_reference` to be required\n\n### March 28, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `2024-04-03` on enum `WebhookEndpoint#create.api_version`\n*   Add support for new value `verification_failed_representative_authority` on enums `Account.future_requirements.errors[].code`, `Account.requirements.errors[].code`, `BankAccount.future_requirements.errors[].code`, and `BankAccount.requirements.errors[].code`\n\n### March 26, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resources `Billing.MeterEventAdjustment`, `Billing.MeterEvent`, and `Billing.Meter`\n*   Add support for `create`, `deactivate`, `list`, `reactivate`, `retrieve`, and `update` methods on resource `Meter`\n*   Add support for `create` method on resources `MeterEventAdjustment` and `MeterEvent`\n*   Add support for `meter` on `Plan#create`, `Plan`, `Price#create.recurring`, `Price#list.recurring`, and `Price.recurring`\n\n### March 25, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `amazon_pay_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `destination_on_behalf_of_charge_management` on `AccountSession#create.components.payment_details.features`, `AccountSession#create.components.payments.features`, `AccountSession.components.payment_details.features`, and `AccountSession.components.payments.features`\n*   Add support for `second_line` on `Issuing.Card#create`\n\n### March 21, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `mandate` on `Charge.payment_method_details.us_bank_account`, `Treasury.InboundTransfer.origin_payment_method_details.us_bank_account`, `Treasury.OutboundPayment.destination_payment_method_details.us_bank_account`, and `Treasury.OutboundTransfer.destination_payment_method_details.us_bank_account`\n*   Add support for `mobilepay` on `Charge.payment_method_details`, `ConfirmationToken.payment_method_preview`, `ConfirmationToken.testHelpers#create.payment_method_data`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `mobilepay` on enums `ConfirmationToken.testHelpers#create.payment_method_data.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new value `mobilepay` on enums `ConfirmationToken.payment_method_preview.type` and `PaymentMethod.type`\n*   Add support for new value `mobilepay` on enums `Customer#list_payment_methods.type`, `PaymentMethod#create.type`, and `PaymentMethod#list.type`\n*   Add support for new values `forwarding_api_inactive`, `forwarding_api_invalid_parameter`, `forwarding_api_upstream_connection_error`, and `forwarding_api_upstream_connection_timeout` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n\n### March 20, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_reference` on `Charge.payment_method_details.us_bank_account`\n*   Add support for new resource `Forwarding.Request`\n*   Add support for `create`, `list`, and `retrieve` methods on resource `Request`\n*   Add support for new resource `ConfirmationToken`\n*   Add support for `retrieve` method on resource `ConfirmationToken`\n*   Add support for `confirmation_token` on `PaymentIntent#confirm`, `PaymentIntent#create`, `SetupIntent#confirm`, and `SetupIntent#create`\n*   Add support for `mobilepay_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n\n### March 18, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `name` on `Terminal.Configuration#create`, `Terminal.Configuration#update`, and `Terminal.Configuration`\n*   Add support for `payout` on `Treasury.ReceivedDebit.linked_flows`\n\n### March 13, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `sepa_debit` on `Subscription#create.payment_settings.payment_method_options`, `Subscription#update.payment_settings.payment_method_options`, and `Subscription.payment_settings.payment_method_options`\n*   Add support for `second_line` on `Issuing.PhysicalBundle.features`\n\n### March 12, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `Subscription#create.application_fee_percent` and `Subscription#update.application_fee_percent` from `number` to `emptyStringable(number)`\n\n### March 8, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resources `Issuing.PersonalizationDesign` and `Issuing.PhysicalBundle`\n*   Add support for `create`, `list`, `retrieve`, and `update` methods on resource `PersonalizationDesign`\n*   Add support for `list` and `retrieve` methods on resource `PhysicalBundle`\n*   Add support for `personalization_design` on `Issuing.Card#create`, `Issuing.Card#list`, `Issuing.Card#update`, and `Issuing.Card`\n\n### March 7, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `documents` on `AccountSession.components`\n*   Add support for `sepa_debit` on `Invoice#create.payment_settings.payment_method_options`, `Invoice#update.payment_settings.payment_method_options`, and `Invoice.payment_settings.payment_method_options`\n\n### March 5, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `documents` on `AccountSession#create.components`\n\n### March 4, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `created` on `CreditNote#list`\n*   Add support for `request_three_d_secure` on `Checkout.Session#create.payment_method_options.card` and `Checkout.Session.payment_method_options.card`\n\n### February 29, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_method` on `Token#create.bank_account`\n\n### February 27, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Identity.VerificationReport.type` to be required\n*   Change type of `Identity.VerificationSession.type` from `nullable(enum('document'|'id_number'))` to `enum('document'|'id_number')`\n*   Add support for `enable_customer_cancellation` on `Terminal.Reader#process_payment_intent.process_config`, `Terminal.Reader#process_setup_intent.process_config`, `Terminal.Reader.action.process_payment_intent.process_config`, and `Terminal.Reader.action.process_setup_intent.process_config`\n*   Add support for `refund_payment_config` on `Terminal.Reader#refund_payment` and `Terminal.Reader.action.refund_payment`\n\n### February 26, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `SubscriptionSchedule.default_settings.invoice_settings.account_tax_ids`, `SubscriptionSchedule.phases[].invoice_settings.account_tax_ids`, and `TaxId.owner` to be required\n*   Add support for `number` on `Invoice#create` and `Invoice#update`\n\n### February 22, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `client_reference_id` on `Identity.VerificationReport#list`, `Identity.VerificationReport`, `Identity.VerificationSession#create`, `Identity.VerificationSession#list`, and `Identity.VerificationSession`\n\n### February 21, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `created` on `Treasury.OutboundPayment#list`\n*   Remove support for value `include_and_require` from enum `Invoice#create.pending_invoice_items_behavior`\n\n### February 16, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for value `service_tax` from enums `TaxRate#create.tax_type`, `TaxRate#update.tax_type`, and `TaxRate.tax_type`\n\n### February 14, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `PaymentMethod.card.display_brand` to be required\n*   Add support for new value `no_voec` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, `Tax.Calculation.customer_details.tax_ids[].type`, `Tax.Transaction.customer_details.tax_ids[].type`, and `TaxId.type`\n*   Add support for new value `no_voec` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, `Tax.Calculation#create.customer_details.tax_ids[].type`, and `TaxId#create.type`\n\n### February 13, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `networks` on `Card`, `PaymentMethod#create.card[0]`, `PaymentMethod#update.card`, and `Token#create.card[0]`\n*   Add support for `display_brand` on `PaymentMethod.card`\n\n### February 9, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `financial_connections.account.refreshed_ownership` on enum `Event.type`\n*   Add support for new value `financial_connections.account.refreshed_ownership` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n*   Add support for `mobile_auth_url` on `PaymentIntent.next_action.swish_handle_redirect_or_display_qr_code`\n*   Remove support for `mobile_auth_url` on `PaymentIntent.next_action.swish_handle_redirect_or_display_qr_code`\n\n### February 8, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `velobank` on enums `Charge.payment_method_details.p24.bank`, `PaymentIntent#confirm.payment_method_data.p24.bank`, `PaymentIntent#create.payment_method_data.p24.bank`, `PaymentIntent#update.payment_method_data.p24.bank`, `PaymentMethod#create.p24.bank`, `PaymentMethod.p24.bank`, `SetupIntent#confirm.payment_method_data.p24.bank`, `SetupIntent#create.payment_method_data.p24.bank`, and `SetupIntent#update.payment_method_data.p24.bank`\n\n### February 7, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `setup_future_usage` on `PaymentIntent#confirm.payment_method_options.blik`, `PaymentIntent#create.payment_method_options.blik`, `PaymentIntent#update.payment_method_options.blik`, and `PaymentIntent.payment_method_options.blik`\n\n### February 6, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `require_cvc_recollection` on `PaymentIntent#confirm.payment_method_options.card`, `PaymentIntent#create.payment_method_options.card`, `PaymentIntent#update.payment_method_options.card`, and `PaymentIntent.payment_method_options.card`\n\n### February 1, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `TaxId`\n*   Add support for `create`, `delete`, `list`, and `retrieve` methods on resource `TaxId`\n*   Add support for `invoices` on `Account#update.settings` and `Account.settings`\n*   Add support for `account_tax_ids` on `Subscription#create.invoice_settings`, `Subscription#update.invoice_settings`, `SubscriptionSchedule#create.default_settings.invoice_settings`, `SubscriptionSchedule#create.phases[].invoice_settings`, `SubscriptionSchedule#update.default_settings.invoice_settings`, `SubscriptionSchedule#update.phases[].invoice_settings`, `SubscriptionSchedule.default_settings.invoice_settings`, and `SubscriptionSchedule.phases[].invoice_settings`\n*   Add support for `swish_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `swish` on `Charge.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod`, `Refund.destination_details`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `swish` on enums `Customer#list_payment_methods.type`, `PaymentMethod#create.type`, and `PaymentMethod#list.type`\n*   Add support for new value `swish` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for `swish_handle_redirect_or_display_qr_code` on `PaymentIntent.next_action`\n*   Add support for new value `swish` on enum `PaymentMethod.type`\n*   Add support for `relationship` on `Account#create.individual`, `Account#update.individual`, and `Token#create.account.individual`\n\n### January 31, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `Terminal.Reader.status` from `string` to `enum('offline'|'online')`\n\n### January 30, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `swish` on `Checkout.Session#create.payment_method_options` and `Checkout.Session.payment_method_options`\n*   Add support for new value `swish` on enum `Checkout.Session#create.payment_method_types[]`\n*   Add support for new value `swish` on enums `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]`\n\n### January 29, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `jurisdiction_level` on `TaxRate`\n\n### January 24, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `liability` on `Quote#create.automatic_tax`, `Quote#update.automatic_tax`, and `Quote.automatic_tax`\n*   Add support for `issuer` on `Quote#create.invoice_settings`, `Quote#update.invoice_settings`, and `Quote.invoice_settings`\n*   Add support for `liability` on `PaymentLink#create.automatic_tax`, `PaymentLink#update.automatic_tax`, and `PaymentLink.automatic_tax`\n*   Add support for `issuer` on `PaymentLink#create.invoice_creation.invoice_data`, `PaymentLink#update.invoice_creation.invoice_data`, and `PaymentLink.invoice_creation.invoice_data`\n*   Add support for `invoice_settings` on `PaymentLink#create.subscription_data`, `PaymentLink#update.subscription_data`, and `PaymentLink.subscription_data`\n\n### January 23, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `account_type` on `PaymentMethod#update.us_bank_account`\n*   Add support for `annual_revenue` and `estimated_worker_count` on `Account#create.business_profile`, `Account#update.business_profile`, and `Account.business_profile`\n*   Add support for `liability` on `SubscriptionSchedule#create.default_settings.automatic_tax`, `SubscriptionSchedule#create.phases[].automatic_tax`, `SubscriptionSchedule#update.default_settings.automatic_tax`, `SubscriptionSchedule#update.phases[].automatic_tax`, `SubscriptionSchedule.default_settings.automatic_tax`, and `SubscriptionSchedule.phases[].automatic_tax`\n*   Add support for `issuer` on `SubscriptionSchedule#create.default_settings.invoice_settings`, `SubscriptionSchedule#create.phases[].invoice_settings`, `SubscriptionSchedule#update.default_settings.invoice_settings`, `SubscriptionSchedule#update.phases[].invoice_settings`, `SubscriptionSchedule.default_settings.invoice_settings`, and `SubscriptionSchedule.phases[].invoice_settings`\n*   Add support for `liability` on `Checkout.Session#create.automatic_tax` and `Checkout.Session.automatic_tax`\n*   Add support for `issuer` on `Checkout.Session#create.invoice_creation.invoice_data` and `Checkout.Session.invoice_creation.invoice_data`\n*   Add support for `invoice_settings` on `Checkout.Session#create.subscription_data`\n*   Add support for new value `registered_charity` on enums `Account#create.company.structure`, `Account#update.company.structure`, `Account.company.structure`, and `Token#create.account.company.structure`\n\n### January 22, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `collection_options` on `AccountLink#create`\n*   Add support for new value `challenge` on enums `Invoice#create.payment_settings.payment_method_options.card.request_three_d_secure`, `Invoice#update.payment_settings.payment_method_options.card.request_three_d_secure`, `Invoice.payment_settings.payment_method_options.card.request_three_d_secure`, `Subscription#create.payment_settings.payment_method_options.card.request_three_d_secure`, `Subscription#update.payment_settings.payment_method_options.card.request_three_d_secure`, and `Subscription.payment_settings.payment_method_options.card.request_three_d_secure`\n*   Add support for `promotion_code` on `Invoice#upcoming.discounts[]`, `Invoice#upcoming.invoice_items[].discounts[]`, `Invoice#upcomingLines.discounts[]`, and `Invoice#upcomingLines.invoice_items[].discounts[]`\n\n### January 18, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `CustomerSession.components.buy_button` and `CustomerSession.components.pricing_table` to be required\n*   Add support for `invoice_settings` on `Subscription#create` and `Subscription#update`\n*   Add support for `liability` on `Subscription#create.automatic_tax`, `Subscription#update.automatic_tax`, and `Subscription.automatic_tax`\n\n### January 17, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `customer_balance` on `PaymentMethodConfiguration#create`, `PaymentMethodConfiguration#update`, and `PaymentMethodConfiguration`\n*   Add support for `revocation_reason` on `Mandate.payment_method_details.bacs_debit`\n*   Add support for new value `nn` on enums `Charge.payment_method_details.ideal.bank`, `PaymentIntent#confirm.payment_method_data.ideal.bank`, `PaymentIntent#create.payment_method_data.ideal.bank`, `PaymentIntent#update.payment_method_data.ideal.bank`, `PaymentMethod#create.ideal.bank`, `PaymentMethod.ideal.bank`, `SetupAttempt.payment_method_details.ideal.bank`, `SetupIntent#confirm.payment_method_data.ideal.bank`, `SetupIntent#create.payment_method_data.ideal.bank`, and `SetupIntent#update.payment_method_data.ideal.bank`\n*   Add support for new value `NNBANL2G` on enums `Charge.payment_method_details.ideal.bic`, `PaymentMethod.ideal.bic`, and `SetupAttempt.payment_method_details.ideal.bic`\n*   Add support for `pin` on `Issuing.Card#create`\n\n### January 16, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Subscription.billing_cycle_anchor_config` to be required\n*   Add support for `issuer` and `on_behalf_of` on `Invoice#upcomingLines` and `Invoice#upcoming`\n*   Add support for `issuer` on `Invoice#create`, `Invoice#update`, and `Invoice`\n*   Add support for `liability` on `Invoice#create.automatic_tax`, `Invoice#upcoming.automatic_tax`, `Invoice#upcomingLines.automatic_tax`, `Invoice#update.automatic_tax`, and `Invoice.automatic_tax`\n\n### January 12, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `expand` on `BankAccount#delete` and `Card#delete`\n*   Add support for `account_type`, `default_for_currency`, and `documents` on `BankAccount#update` and `Card#update`\n*   Remove support for `owner` on `BankAccount#update` and `Card#update`\n*   Change type of `BankAccount#update.account_holder_type` and `Card#update.account_holder_type` from `enum('company'|'individual')` to `emptyStringable(enum('company'|'individual'))`\n\n### January 11, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `CustomerSession`\n*   Add support for `create` method on resource `CustomerSession`\n\n### January 10, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for values `obligation_inbound`, `obligation_payout_failure`, `obligation_payout`, and `obligation_reversal_outbound` from enum `BalanceTransaction.type`\n*   Remove support for value `obligation` from enum `Reporting.ReportRun#create.parameters.reporting_category`\n\n### January 9, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `billing_cycle_anchor_config` on `Subscription#create` and `Subscription`\n\n### January 8, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `eps` and `p24` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n\n### January 3, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `AccountSession.components.payment_details.features`, `AccountSession.components.payment_details`, `AccountSession.components.payments.features`, `AccountSession.components.payments`, `AccountSession.components.payouts.features`, and `AccountSession.components.payouts` to be required\n\n### January 2, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `PaymentLink.inactive_message` and `PaymentLink.restrictions` to be required\n*   Add support for `retrieve` method on resource `Tax.Registration`\n*   Change type of `SubscriptionSchedule.default_settings.invoice_settings` from `nullable(InvoiceSettingSubscriptionScheduleSetting)` to `InvoiceSettingSubscriptionScheduleSetting`\n\n### December 21, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `collection_method` on `Mandate.payment_method_details.us_bank_account`\n*   Add support for `mandate_options` on `PaymentIntent#confirm.payment_method_options.us_bank_account`, `PaymentIntent#create.payment_method_options.us_bank_account`, `PaymentIntent#update.payment_method_options.us_bank_account`, `PaymentIntent.payment_method_options.us_bank_account`, `SetupIntent#confirm.payment_method_options.us_bank_account`, `SetupIntent#create.payment_method_options.us_bank_account`, `SetupIntent#update.payment_method_options.us_bank_account`, and `SetupIntent.payment_method_options.us_bank_account`\n\n### December 20, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `FinancialConnections.Transaction`\n*   Add support for `list` and `retrieve` methods on resource `Transaction`\n*   Add support for `subscribe` and `unsubscribe` methods on resource `FinancialConnections.Account`\n*   Change type of `Checkout.Session#create.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Checkout.Session.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Invoice#create.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Invoice#update.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Invoice.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `PaymentIntent#confirm.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `PaymentIntent#create.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `PaymentIntent#update.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `PaymentIntent.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `SetupIntent#confirm.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `SetupIntent#create.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `SetupIntent#update.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `SetupIntent.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Subscription#create.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Subscription#update.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, and `Subscription.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]` from `literal('balances')` to `enum('balances'|'transactions')`\n*   Add support for new value `financial_connections.account.refreshed_transactions` on enum `Event.type`\n*   Add support for new value `transactions` on enum `FinancialConnections.Account#refresh.features[]`\n*   Add support for `subscriptions` and `transaction_refresh` on `FinancialConnections.Account`\n*   Add support for new value `transactions` on enums `FinancialConnections.Session#create.prefetch[]` and `FinancialConnections.Session.prefetch[]`\n*   Add support for new value `financial_connections.account.refreshed_transactions` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n*   Add support for new value `challenge` on enums `PaymentIntent#confirm.payment_method_options.card.request_three_d_secure`, `PaymentIntent#create.payment_method_options.card.request_three_d_secure`, `PaymentIntent#update.payment_method_options.card.request_three_d_secure`, `PaymentIntent.payment_method_options.card.request_three_d_secure`, `SetupIntent#confirm.payment_method_options.card.request_three_d_secure`, `SetupIntent#create.payment_method_options.card.request_three_d_secure`, `SetupIntent#update.payment_method_options.card.request_three_d_secure`, and `SetupIntent.payment_method_options.card.request_three_d_secure`\n*   Add support for new value `unknown` on enums `Issuing.Authorization.testHelpers#create.verification_data.authentication_exemption.type` and `Issuing.Authorization.verification_data.authentication_exemption.type`\n*   Add support for `features` on `AccountSession#create.components.payouts`\n*   Add support for `edit_payout_schedule`, `instant_payouts`, and `standard_payouts` on `AccountSession.components.payouts.features`\n\n### December 19, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `next_refresh_available_at` on `FinancialConnections.Account.balance_refresh`\n*   Change type of `Quote.invoice_settings` from `nullable(InvoiceSettingQuoteSetting)` to `InvoiceSettingQuoteSetting`\n\n### December 18, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `revolut_pay` on `PaymentMethodConfiguration#create`, `PaymentMethodConfiguration#update`, and `PaymentMethodConfiguration`\n\n### December 15, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `destination_details` on `Refund`\n\n### December 14, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `features` on `AccountSession#create.components.payouts`\n\n### December 13, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `created` on `Radar.EarlyFraudWarning#list`\n\n### December 8, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `id_bank_transfer`, `multibanco`, `netbanking`, `pay_by_bank`, and `upi` on `PaymentMethodConfiguration`\n*   Add support for `payment_method_reuse_agreement` on `Checkout.Session#create.consent_collection`, `Checkout.Session.consent_collection`, `PaymentLink#create.consent_collection`, and `PaymentLink.consent_collection`\n*   Add support for `after_submit` on `Checkout.Session#create.custom_text`, `Checkout.Session.custom_text`, `PaymentLink#create.custom_text`, `PaymentLink#update.custom_text`, and `PaymentLink.custom_text`\n*   Remove support for values `challenge_only` and `challenge` from enum `SetupIntent.payment_method_options.card.request_three_d_secure`\n\n### December 7, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `financial_connections_no_successful_transaction_refresh` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n*   Remove support for values `challenge_only` and `challenge` from enum `PaymentIntent.payment_method_options.card.request_three_d_secure`\n*   Add support for `transfer_group` on `PaymentLink#create.payment_intent_data`, `PaymentLink#update.payment_intent_data`, and `PaymentLink.payment_intent_data`\n\n### December 6, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for value `various` from enum `Climate.Supplier.removal_pathway`\n*   Add support for new value `customer_tax_location_invalid` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n\n### December 5, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_details`, `payments`, and `payouts` on `AccountSession#create.components` and `AccountSession.components`\n*   Add support for `features` on `AccountSession#create.components.account_onboarding` and `AccountSession.components.account_onboarding`\n\n### December 4, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `trial_settings` on `PaymentLink#create.subscription_data`, `PaymentLink#update.subscription_data`, and `PaymentLink.subscription_data`\n*   Add support for `inactive_message` and `restrictions` on `PaymentLink#create`, `PaymentLink#update`, and `PaymentLink`\n\n### December 1, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Climate.Product.metric_tons_available` to be required\n*   Add support for new values `payment_network_reserve_hold` and `payment_network_reserve_release` on enum `BalanceTransaction.type`\n\n### November 30, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `challenge` on enums `PaymentIntent.payment_method_options.card.request_three_d_secure` and `SetupIntent.payment_method_options.card.request_three_d_secure`\n*   Add support for `created` on `Checkout.Session#list`\n*   Add support for new value `enhanced_weathering` on enum `Climate.Supplier.removal_pathway`\n\n### November 29, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `climate_order_purchase` and `climate_order_refund` on enum `BalanceTransaction.type`\n*   Add support for new values `climate_order_purchase` and `climate_order_refund` on enum `Reporting.ReportRun#create.parameters.reporting_category`\n*   Change type of `Climate.Order.expected_delivery_year` from `nullable(longInteger)` to `longInteger`\n*   Add support for new values `climate.order.canceled`, `climate.order.created`, `climate.order.delayed`, `climate.order.delivered`, `climate.order.product_substituted`, `climate.product.created`, and `climate.product.pricing_updated` on enum `Event.type`\n*   Add support for new values `climate.order.canceled`, `climate.order.created`, `climate.order.delayed`, `climate.order.delivered`, `climate.order.product_substituted`, `climate.product.created`, and `climate.product.pricing_updated` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n*   Add support for `validate_location` on `Customer#create.tax` and `Customer#update.tax`\n\n### November 22, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resources `Climate.Order`, `Climate.Product`, and `Climate.Supplier`\n*   Add support for `cancel`, `create`, `list`, `retrieve`, and `update` methods on resource `Order`\n*   Add support for `list` and `retrieve` methods on resources `Product` and `Supplier`\n\n### November 21, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `financial_connections_account_inactive` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n\n### November 20, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `electronic_commerce_indicator` and `transaction_id` on `Charge.payment_method_details.card.three_d_secure` and `SetupAttempt.payment_method_details.card.three_d_secure`\n*   Add support for `exemption_indicator_applied` and `exemption_indicator` on `Charge.payment_method_details.card.three_d_secure`\n*   Add support for `three_d_secure` on `PaymentIntent#confirm.payment_method_options.card`, `PaymentIntent#create.payment_method_options.card`, `PaymentIntent#update.payment_method_options.card`, `SetupIntent#confirm.payment_method_options.card`, `SetupIntent#create.payment_method_options.card`, and `SetupIntent#update.payment_method_options.card`\n\n### November 18, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `system_trace_audit_number` on `Issuing.Authorization.network_data`\n*   Add support for `transaction_id` on `Issuing.Authorization.network_data` and `Issuing.Transaction.network_data`\n*   Add support for `network_risk_score` on `Issuing.Authorization.pending_request` and `Issuing.Authorization.request_history[]`\n*   Add support for `requested_at` on `Issuing.Authorization.request_history[]`\n*   Add support for `authorization_code` on `Issuing.Transaction.network_data`\n\n### November 17, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `offline` on `Charge.payment_method_details.card_present`\n\n### November 16, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `status` on `Checkout.Session#list`\n*   Add support for `bacs_debit_payments` on `Account#create.settings` and `Account#update.settings`\n*   Add support for `service_user_number` on `Account.settings.bacs_debit_payments`\n*   Change type of `Account.settings.bacs_debit_payments.display_name` from `string` to `nullable(string)`\n*   Change `Account.settings.bacs_debit_payments.display_name` to be required\n\n### November 15, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `SubscriptionSchedule#create.start_date[0]`, `SubscriptionSchedule#update.phases[].end_date[0]`, `SubscriptionSchedule#update.phases[].start_date[0]`, and `SubscriptionSchedule#update.phases[].trial_end[0]` from `longInteger` to `DateTime`\n*   Add support for `tax_amounts` on `CreditNote#create.lines[]`, `CreditNote#preview.lines[]`, and `CreditNote#preview_lines.lines[]`\n*   Add support for `capture_before` on `Charge.payment_method_details.card`\n*   Add support for `network_data` on `Issuing.Transaction`\n\n### November 14, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `paypal` on `Checkout.Session.payment_method_options`\n\n### November 8, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `terminal_reader_hardware_fault` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n*   Change `Charge.payment_method_details.card.amount_authorized` to be required\n\n### November 7, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `PaymentIntent.latest_charge` to be required\n*   Change `Product.features[].name` to be optional\n\n### November 3, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Checkout.Session.payment_method_configuration_details`, `PaymentIntent.payment_method_configuration_details`, and `SetupIntent.payment_method_configuration_details` to be required\n*   Add support for `metadata` on `Quote#create.subscription_data`, `Quote#update.subscription_data`, and `Quote.subscription_data`\n\n### November 2, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `payment_unreconciled` on enum `BalanceTransaction.type`\n*   Add support for new value `unreconciled_customer_funds` on enum `Reporting.ReportRun#create.parameters.reporting_category`\n*   Add support for `url` on `Issuing.Authorization.merchant_data`, `Issuing.Authorization.testHelpers#create.merchant_data`, `Issuing.Transaction.merchant_data`, `Issuing.Transaction.testHelpers#create_force_capture.merchant_data`, and `Issuing.Transaction.testHelpers#create_unlinked_refund.merchant_data`\n*   Add support for `authentication_exemption` and `three_d_secure` on `Issuing.Authorization.testHelpers#create.verification_data` and `Issuing.Authorization.verification_data`\n*   Add support for new value `token_card_network_invalid` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n*   Add support for `description` on `PaymentLink#create.payment_intent_data`, `PaymentLink#update.payment_intent_data`, and `PaymentLink.payment_intent_data`\n\n### November 1, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `revolut_pay_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `revolut_pay` on `Charge.payment_method_details`, `Checkout.Session#create.payment_method_options`, `Checkout.Session.payment_method_options`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `revolut_pay` on enums `Checkout.Session#create.payment_method_types[]`, `Customer#list_payment_methods.type`, `PaymentMethod#create.type`, and `PaymentMethod#list.type`\n*   Add support for new value `revolut_pay` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new value `revolut_pay` on enum `PaymentMethod.type`\n\n### October 31, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `Tax.Registration`\n*   Add support for `create`, `list`, and `update` methods on resource `Registration`\n*   Change `Charge.payment_method_details.paypal.payer_email`, `Charge.payment_method_details.paypal.payer_id`, `Charge.payment_method_details.paypal.payer_name`, `Charge.payment_method_details.paypal.seller_protection`, `Charge.payment_method_details.paypal.transaction_id`, `Mandate.payment_method_details.paypal.payer_id`, `PaymentIntent.payment_method_options.paypal.reference`, `PaymentMethod.paypal.payer_email`, and `PaymentMethod.paypal.payer_id` to be required\n\n### October 26, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `aba` and `swift` on `FundingInstructions.bank_transfer.financial_addresses[]` and `PaymentIntent.next_action.display_bank_transfer_instructions.financial_addresses[]`\n*   Add support for new values `ach`, `domestic_wire_us`, and `swift` on enums `FundingInstructions.bank_transfer.financial_addresses[].supported_networks[]` and `PaymentIntent.next_action.display_bank_transfer_instructions.financial_addresses[].supported_networks[]`\n*   Add support for new values `aba` and `swift` on enums `FundingInstructions.bank_transfer.financial_addresses[].type` and `PaymentIntent.next_action.display_bank_transfer_instructions.financial_addresses[].type`\n\n### October 25, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `balance_invalid_parameter` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n\n### October 24, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Issuing.Cardholder.individual.card_issuing` to be optional\n\n### October 18, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `request_incremental_authorization` on `PaymentIntent#confirm.payment_method_options.card_present`, `PaymentIntent#create.payment_method_options.card_present`, and `PaymentIntent#update.payment_method_options.card_present`\n\n### October 17, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `invalid_dob_age_under_minimum` on enums `Account.future_requirements.errors[].code`, `Account.requirements.errors[].code`, `BankAccount.future_requirements.errors[].code`, and `BankAccount.requirements.errors[].code`\n\n### October 16, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Checkout.Session.client_secret` and `Checkout.Session.ui_mode` to be required\n*   Add support for `legal_guardian` on `Account#persons.relationship` and `Token#create.person.relationship`\n*   Add support for new values `invalid_address_highway_contract_box`, `invalid_address_private_mailbox`, `invalid_business_profile_name_denylisted`, `invalid_business_profile_name`, `invalid_company_name_denylisted`, `invalid_dob_age_over_maximum`, `invalid_product_description_length`, `invalid_product_description_url_match`, `invalid_statement_descriptor_business_mismatch`, `invalid_statement_descriptor_denylisted`, `invalid_statement_descriptor_length`, `invalid_statement_descriptor_prefix_denylisted`, `invalid_statement_descriptor_prefix_mismatch`, `invalid_tax_id_format`, `invalid_tax_id`, `invalid_url_denylisted`, `invalid_url_format`, `invalid_url_length`, `invalid_url_web_presence_detected`, `invalid_url_website_business_information_mismatch`, `invalid_url_website_empty`, `invalid_url_website_inaccessible_geoblocked`, `invalid_url_website_inaccessible_password_protected`, `invalid_url_website_inaccessible`, `invalid_url_website_incomplete_cancellation_policy`, `invalid_url_website_incomplete_customer_service_details`, `invalid_url_website_incomplete_legal_restrictions`, `invalid_url_website_incomplete_refund_policy`, `invalid_url_website_incomplete_return_policy`, `invalid_url_website_incomplete_terms_and_conditions`, `invalid_url_website_incomplete_under_construction`, `invalid_url_website_incomplete`, and `invalid_url_website_other` on enums `Account.future_requirements.errors[].code`, `Account.requirements.errors[].code`, `BankAccount.future_requirements.errors[].code`, and `BankAccount.requirements.errors[].code`\n*   Add support for `additional_tos_acceptances` on `Token#create.person`\n*   Add support for new value `2023-10-16` on enum `WebhookEndpoint#create.api_version`\n\n### October 12, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `issuing_token.created` and `issuing_token.updated` on enum `Event.type`\n*   Add support for new values `issuing_token.created` and `issuing_token.updated` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### October 10, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `offline` on `Terminal.Configuration#create`, `Terminal.Configuration#update`, and `Terminal.Configuration`\n*   Change type of `Checkout.Session.custom_fields[].dropdown` from `nullable(PaymentPagesCheckoutSessionCustomFieldsDropdown)` to `PaymentPagesCheckoutSessionCustomFieldsDropdown`\n*   Change type of `Checkout.Session.custom_fields[].numeric` and `Checkout.Session.custom_fields[].text` from `nullable(PaymentPagesCheckoutSessionCustomFieldsNumeric)` to `PaymentPagesCheckoutSessionCustomFieldsNumeric`\n*   Change `Checkout.Session.custom_fields[].dropdown`, `Checkout.Session.custom_fields[].numeric`, `Checkout.Session.custom_fields[].text`, `PaymentLink.custom_fields[].dropdown`, `PaymentLink.custom_fields[].numeric`, and `PaymentLink.custom_fields[].text` to be optional\n*   Change type of `PaymentLink.custom_fields[].dropdown` from `nullable(PaymentLinksResourceCustomFieldsDropdown)` to `PaymentLinksResourceCustomFieldsDropdown`\n*   Change type of `PaymentLink.custom_fields[].numeric` and `PaymentLink.custom_fields[].text` from `nullable(PaymentLinksResourceCustomFieldsNumeric)` to `PaymentLinksResourceCustomFieldsNumeric`\n\n### October 6, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `postal_code` on `Issuing.Authorization.verification_data`\n*   Add support for `redirect_on_completion`, `return_url`, and `ui_mode` on `Checkout.Session#create` and `Checkout.Session`\n*   Change `Checkout.Session#create.success_url` to be optional\n*   Add support for `client_secret` on `Checkout.Session`\n\n### October 4, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for resource `Margin`\n*   Add support for `statement_descriptor_suffix` and `statement_descriptor` on `PaymentLink#create.payment_intent_data`, `PaymentLink#update.payment_intent_data`, and `PaymentLink.payment_intent_data`\n\n### October 3, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `PaymentLink.payment_intent_data.metadata` and `PaymentLink.subscription_data.metadata` to be required\n*   Add support for new resources `Issuing.Token` and `Margin`\n*   Add support for `list`, `retrieve`, and `update` methods on resource `Token`\n*   Add support for `amount_authorized`, `extended_authorization`, `incremental_authorization`, `multicapture`, and `overcapture` on `Charge.payment_method_details.card`\n*   Add support for `token` on `Issuing.Authorization` and `Issuing.Transaction`\n*   Add support for `request_extended_authorization`, `request_multicapture`, and `request_overcapture` on `PaymentIntent#confirm.payment_method_options.card`, `PaymentIntent#create.payment_method_options.card`, `PaymentIntent#update.payment_method_options.card`, and `PaymentIntent.payment_method_options.card`\n*   Add support for `request_incremental_authorization` on `PaymentIntent#confirm.payment_method_options.card_present`, `PaymentIntent#confirm.payment_method_options.card`, `PaymentIntent#create.payment_method_options.card_present`, `PaymentIntent#create.payment_method_options.card`, `PaymentIntent#update.payment_method_options.card_present`, `PaymentIntent#update.payment_method_options.card`, and `PaymentIntent.payment_method_options.card`\n*   Add support for `final_capture` on `PaymentIntent#capture`\n*   Add support for `metadata` on `PaymentLink#create.payment_intent_data`, `PaymentLink#create.subscription_data`, `PaymentLink.payment_intent_data`, and `PaymentLink.subscription_data`\n*   Add support for `payment_intent_data` and `subscription_data` on `PaymentLink#update`\n\n### September 29, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `authorization_code` on `Issuing.Authorization.request_history[]`\n\n### September 27, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `PaymentMethod.us_bank_account.financial_connections_account` to be required\n\n### September 26, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `PaymentMethod.us_bank_account.status_details` to be required\n\n### September 22, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for values `order.created`, `recipient.created`, `recipient.deleted`, `recipient.updated`, `sku.created`, `sku.deleted`, and `sku.updated` from enum `Event.type`\n*   Remove support for values `order.created`, `recipient.created`, `recipient.deleted`, `recipient.updated`, `sku.created`, `sku.deleted`, and `sku.updated` from enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n*   Add support for `rendering` on `Invoice#create`, `Invoice#update`, and `Invoice`\n\n### September 21, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Charge.payment_method_details.paypal.payer_email`, `Charge.payment_method_details.paypal.payer_id`, `Charge.payment_method_details.paypal.payer_name`, `Charge.payment_method_details.paypal.seller_protection`, `Charge.payment_method_details.paypal.transaction_id`, `Mandate.payment_method_details.paypal.payer_id`, `PaymentIntent.payment_method_options.paypal.reference`, `PaymentMethod.paypal.payer_email`, and `PaymentMethod.paypal.payer_id` to be optional\n*   Change `Charge.payment_method_details.paypal.payer_email`, `Charge.payment_method_details.paypal.payer_id`, `Charge.payment_method_details.paypal.payer_name`, `Charge.payment_method_details.paypal.seller_protection`, `Charge.payment_method_details.paypal.transaction_id`, `Mandate.payment_method_details.paypal.payer_id`, `PaymentIntent.payment_method_options.paypal.reference`, `PaymentMethod.paypal.payer_email`, and `PaymentMethod.paypal.payer_id` to be required\n\n### September 19, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `terms_of_service_acceptance` on `Checkout.Session#create.custom_text`, `Checkout.Session.custom_text`, `PaymentLink#create.custom_text`, `PaymentLink#update.custom_text`, and `PaymentLink.custom_text`\n\n### September 14, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `PaymentMethodConfiguration`\n*   Add support for `create`, `list`, `retrieve`, and `update` methods on resource `PaymentMethodConfiguration`\n*   Add support for `payment_method_configuration` on `Checkout.Session#create`, `PaymentIntent#create`, `PaymentIntent#update`, `SetupIntent#create`, and `SetupIntent#update`\n*   Add support for `payment_method_configuration_details` on `Checkout.Session`, `PaymentIntent`, and `SetupIntent`\n\n### September 12, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `nonce` on `EphemeralKey#create`\n\n### September 11, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `cashback_amount` on `Issuing.Authorization.amount_details`, `Issuing.Authorization.pending_request.amount_details`, `Issuing.Authorization.request_history[].amount_details`, `Issuing.Authorization.testHelpers#create.amount_details`, and `Issuing.Transaction.amount_details`\n*   Add support for `capture`, `create`, `expire`, `increment`, and `reverse` test helper methods on resource `Issuing.Authorization`\n*   Add support for `create_force_capture`, `create_unlinked_refund`, and `refund` test helper methods on resource `Issuing.Transaction`\n\n### September 8, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `stripe_tax_inactive` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n\n### September 7, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `serial_number` on `Terminal.Reader#list`\n\n### September 5, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `PaymentMethodDomain`\n*   Add support for `create`, `list`, `retrieve`, `update`, and `validate` methods on resource `PaymentMethodDomain`\n*   Add support for new value `n26` on enums `Charge.payment_method_details.ideal.bank`, `PaymentIntent#confirm.payment_method_data.ideal.bank`, `PaymentIntent#create.payment_method_data.ideal.bank`, `PaymentIntent#update.payment_method_data.ideal.bank`, `PaymentMethod#create.ideal.bank`, `PaymentMethod.ideal.bank`, `SetupAttempt.payment_method_details.ideal.bank`, `SetupIntent#confirm.payment_method_data.ideal.bank`, `SetupIntent#create.payment_method_data.ideal.bank`, and `SetupIntent#update.payment_method_data.ideal.bank`\n*   Add support for new value `NTSBDEB1` on enums `Charge.payment_method_details.ideal.bic`, `PaymentMethod.ideal.bic`, and `SetupAttempt.payment_method_details.ideal.bic`\n\n### September 4, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for value `invoiceitem.updated` from enum `Event.type`\n*   Remove support for value `invoiceitem.updated` from enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### September 1, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `treasury.credit_reversal.created`, `treasury.credit_reversal.posted`, `treasury.debit_reversal.completed`, `treasury.debit_reversal.created`, `treasury.debit_reversal.initial_credit_granted`, `treasury.financial_account.closed`, `treasury.financial_account.created`, `treasury.financial_account.features_status_updated`, `treasury.inbound_transfer.canceled`, `treasury.inbound_transfer.created`, `treasury.inbound_transfer.failed`, `treasury.inbound_transfer.succeeded`, `treasury.outbound_payment.canceled`, `treasury.outbound_payment.created`, `treasury.outbound_payment.expected_arrival_date_updated`, `treasury.outbound_payment.failed`, `treasury.outbound_payment.posted`, `treasury.outbound_payment.returned`, `treasury.outbound_transfer.canceled`, `treasury.outbound_transfer.created`, `treasury.outbound_transfer.expected_arrival_date_updated`, `treasury.outbound_transfer.failed`, `treasury.outbound_transfer.posted`, `treasury.outbound_transfer.returned`, `treasury.received_credit.created`, `treasury.received_credit.failed`, `treasury.received_credit.succeeded`, and `treasury.received_debit.created` on enum `Event.type`\n\n### August 31, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `features` on `Product#create`, `Product#update`, and `Product`\n\n### August 30, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `AccountSession`\n*   Add support for `create` method on resource `AccountSession`\n\n### August 29, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `obligation_inbound`, `obligation_outbound`, `obligation_payout_failure`, `obligation_payout`, `obligation_reversal_inbound`, and `obligation_reversal_outbound` on enum `BalanceTransaction.type`\n*   Add support for new value `obligation` on enum `Reporting.ReportRun#create.parameters.reporting_category`\n\n### August 28, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for values `obligation_inbound`, `obligation_outbound`, `obligation_payout_failure`, `obligation_payout`, `obligation_reversal_inbound`, and `obligation_reversal_outbound` from enum `BalanceTransaction.type`\n*   Remove support for value `obligation` from enum `Reporting.ReportRun#create.parameters.reporting_category`\n*   Add support for `application` on `PaymentLink`\n*   Change type of `Event.type` from `string` to `enum`\n*   Add support for new values `obligation_inbound`, `obligation_outbound`, `obligation_payout_failure`, `obligation_payout`, `obligation_reversal_inbound`, and `obligation_reversal_outbound` on enum `BalanceTransaction.type`\n*   Add support for new value `obligation` on enum `Reporting.ReportRun#create.parameters.reporting_category`\n\n### August 22, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `retention` on `BillingPortal.Session#create.flow_data.subscription_cancel` and `BillingPortal.Session.flow.subscription_cancel`\n\n### August 21, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `prefetch` on `Checkout.Session#create.payment_method_options.us_bank_account.financial_connections`, `Checkout.Session.payment_method_options.us_bank_account.financial_connections`, `FinancialConnections.Session#create`, `FinancialConnections.Session`, `Invoice#create.payment_settings.payment_method_options.us_bank_account.financial_connections`, `Invoice#update.payment_settings.payment_method_options.us_bank_account.financial_connections`, `Invoice.payment_settings.payment_method_options.us_bank_account.financial_connections`, `PaymentIntent#confirm.payment_method_options.us_bank_account.financial_connections`, `PaymentIntent#create.payment_method_options.us_bank_account.financial_connections`, `PaymentIntent#update.payment_method_options.us_bank_account.financial_connections`, `PaymentIntent.payment_method_options.us_bank_account.financial_connections`, `SetupIntent#confirm.payment_method_options.us_bank_account.financial_connections`, `SetupIntent#create.payment_method_options.us_bank_account.financial_connections`, `SetupIntent#update.payment_method_options.us_bank_account.financial_connections`, `SetupIntent.payment_method_options.us_bank_account.financial_connections`, `Subscription#create.payment_settings.payment_method_options.us_bank_account.financial_connections`, `Subscription#update.payment_settings.payment_method_options.us_bank_account.financial_connections`, and `Subscription.payment_settings.payment_method_options.us_bank_account.financial_connections`\n*   Change type of `SetupIntent#create.mandate_data` from `secret_key_param` to `emptyStringable(secret_key_param)`\n*   Change type of `SetupIntent#confirm.mandate_data` from `secret_key_param | client_key_param` to `emptyStringable(secret_key_param | client_key_param)`\n\n### August 20, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `PaymentIntent#create.mandate_data` from `secret_key_param` to `emptyStringable(secret_key_param)`\n*   Change type of `PaymentIntent#confirm.mandate_data` from `secret_key_param | client_key_param` to `emptyStringable(secret_key_param | client_key_param)`\n\n### August 18, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_method_details` on `Dispute`\n\n### August 17, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `flat_amount` on `Tax.Transaction#create_reversal`\n\n### August 16, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for values `custom_account_update` and `custom_account_verification` from enum `AccountLink#create.type`\n*   Remove support for `available_on` on `BalanceTransaction#list`\n*   Remove support for `alternate_statement_descriptors`, `destination`, and `dispute` on `Charge`\n*   Remove support for `shipping_rates` on `Checkout.Session#create`\n*   Remove support for `coupon` and `trial_from_plan` on `Checkout.Session#create.subscription_data`\n*   Remove support for value `card_present` from enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Remove support for value `charge_refunded` from enum `Dispute.status`\n*   Remove support for `blik` on `Mandate.payment_method_details`, `PaymentMethod#update`, `SetupAttempt.payment_method_details`, `SetupIntent#confirm.payment_method_options`, `SetupIntent#create.payment_method_options`, `SetupIntent#update.payment_method_options`, and `SetupIntent.payment_method_options`\n*   Remove support for `acss_debit`, `affirm`, `au_becs_debit`, `bacs_debit`, `cashapp`, `sepa_debit`, and `zip` on `PaymentMethod#update`\n*   Remove support for `country` on `PaymentMethod.link`\n*   Remove support for `recurring` on `Price#update`\n*   Remove support for `attributes`, `caption`, and `deactivate_on` on `Product#create`, `Product#update`, and `Product`\n*   Add support for new values `verification_directors_mismatch`, `verification_document_directors_mismatch`, `verification_extraneous_directors`, and `verification_missing_directors` on enums `Account.future_requirements.errors[].code`, `Account.requirements.errors[].code`, `BankAccount.future_requirements.errors[].code`, and `BankAccount.requirements.errors[].code`\n\n### August 14, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `2023-08-16` on enum `WebhookEndpoint#create.api_version`\n\n### August 11, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `process_config` on `Terminal.Reader#process_setup_intent` and `Terminal.Reader.action.process_setup_intent`\n*   Remove support for `rendering` on `Invoice#create`, `Invoice#update`, and `Invoice`\n\n### August 10, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `rendering` on `Invoice#create`, `Invoice#update`, and `Invoice`\n*   Add support for new values `incorporated_partnership` and `unincorporated_partnership` on enums `Account#create.company.structure`, `Account#update.company.structure`, `Account.company.structure`, and `Token#create.account.company.structure`\n\n### August 7, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `payment_reversal` on enum `BalanceTransaction.type`\n\n### August 4, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Invoice.subscription_details.metadata` and `Invoice.subscription_details` to be required\n\n### August 3, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `preferred_settlement_speed` on `PaymentIntent#confirm.payment_method_options.us_bank_account`, `PaymentIntent#create.payment_method_options.us_bank_account`, `PaymentIntent#update.payment_method_options.us_bank_account`, and `PaymentIntent.payment_method_options.us_bank_account`\n\n### August 2, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `sepa_debit_fingerprint` and `us_bank_account_fingerprint` on enums `Radar.ValueList#create.item_type` and `Radar.ValueList.item_type`\n\n### August 1, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `Account#create.settings.card_issuing.tos_acceptance.user_agent`, `Account#create.settings.treasury.tos_acceptance.user_agent`, `Account#update.settings.card_issuing.tos_acceptance.user_agent`, `Account#update.settings.treasury.tos_acceptance.user_agent`, `BillingPortal.Configuration#create.business_profile.headline`, `BillingPortal.Configuration#update.business_profile.headline`, `Invoice#create.payment_settings.default_mandate`, `Invoice#create.shipping_details.phone`, `Invoice#pay.mandate`, `Invoice#update.default_source`, `Invoice#update.payment_settings.default_mandate`, `Invoice#update.shipping_details.phone`, `Issuing.Cardholder#create.individual.card_issuing.user_terms_acceptance.user_agent`, `Issuing.Cardholder#update.individual.card_issuing.user_terms_acceptance.user_agent`, `Issuing.Dispute#create.evidence.canceled.cancellation_reason`, `Issuing.Dispute#create.evidence.canceled.explanation`, `Issuing.Dispute#create.evidence.canceled.product_description`, `Issuing.Dispute#create.evidence.duplicate.explanation`, `Issuing.Dispute#create.evidence.fraudulent.explanation`, `Issuing.Dispute#create.evidence.merchandise_not_as_described.explanation`, `Issuing.Dispute#create.evidence.merchandise_not_as_described.return_description`, `Issuing.Dispute#create.evidence.not_received.explanation`, `Issuing.Dispute#create.evidence.not_received.product_description`, `Issuing.Dispute#create.evidence.other.explanation`, `Issuing.Dispute#create.evidence.other.product_description`, `Issuing.Dispute#create.evidence.service_not_as_described.cancellation_reason`, `Issuing.Dispute#create.evidence.service_not_as_described.explanation`, `Issuing.Dispute#update.evidence.canceled.cancellation_reason`, `Issuing.Dispute#update.evidence.canceled.explanation`, `Issuing.Dispute#update.evidence.canceled.product_description`, `Issuing.Dispute#update.evidence.duplicate.explanation`, `Issuing.Dispute#update.evidence.fraudulent.explanation`, `Issuing.Dispute#update.evidence.merchandise_not_as_described.explanation`, `Issuing.Dispute#update.evidence.merchandise_not_as_described.return_description`, `Issuing.Dispute#update.evidence.not_received.explanation`, `Issuing.Dispute#update.evidence.not_received.product_description`, `Issuing.Dispute#update.evidence.other.explanation`, `Issuing.Dispute#update.evidence.other.product_description`, `Issuing.Dispute#update.evidence.service_not_as_described.cancellation_reason`, `Issuing.Dispute#update.evidence.service_not_as_described.explanation`, `PaymentIntent#confirm.payment_method_data.billing_details.name`, `PaymentIntent#confirm.payment_method_data.billing_details.phone`, `PaymentIntent#confirm.payment_method_options.konbini.confirmation_number`, `PaymentIntent#confirm.payment_method_options.konbini.product_description`, `PaymentIntent#create.payment_method_data.billing_details.name`, `PaymentIntent#create.payment_method_data.billing_details.phone`, `PaymentIntent#create.payment_method_options.konbini.confirmation_number`, `PaymentIntent#create.payment_method_options.konbini.product_description`, `PaymentIntent#update.payment_method_data.billing_details.name`, `PaymentIntent#update.payment_method_data.billing_details.phone`, `PaymentIntent#update.payment_method_options.konbini.confirmation_number`, `PaymentIntent#update.payment_method_options.konbini.product_description`, `PaymentMethod#create.billing_details.name`, `PaymentMethod#create.billing_details.phone`, `PaymentMethod#update.billing_details.name`, `PaymentMethod#update.billing_details.phone`, `Product#update.caption`, `Product#update.description`, `Product#update.unit_label`, `Quote#create.description`, `Quote#create.footer`, `Quote#create.header`, `Quote#update.description`, `Quote#update.footer`, `Quote#update.header`, `Quote#update.subscription_data.description`, `SetupIntent#confirm.payment_method_data.billing_details.name`, `SetupIntent#confirm.payment_method_data.billing_details.phone`, `SetupIntent#create.payment_method_data.billing_details.name`, `SetupIntent#create.payment_method_data.billing_details.phone`, `SetupIntent#update.payment_method_data.billing_details.name`, `SetupIntent#update.payment_method_data.billing_details.phone`, `Subscription#cancel.cancellation_details.comment`, `Subscription#update.cancellation_details.comment`, `Subscription#update.default_source`, `Subscription#update.description`, `SubscriptionSchedule#create.default_settings.description`, `SubscriptionSchedule#create.phases[].description`, `SubscriptionSchedule#update.default_settings.description`, `SubscriptionSchedule#update.phases[].description`, `Tax.Calculation#create.customer_details.address.city`, `Tax.Calculation#create.customer_details.address.line1`, `Tax.Calculation#create.customer_details.address.line2`, `Tax.Calculation#create.customer_details.address.postal_code`, `Tax.Calculation#create.customer_details.address.state`, `Terminal.Location#update.configuration_overrides`, `Terminal.Reader#update.label`, `Token#create.person.documents.company_authorization.files[]`, `Token#create.person.documents.passport.files[]`, `Token#create.person.documents.visa.files[]`, `Treasury.OutboundPayment#create.destination_payment_method_data.billing_details.name`, `Treasury.OutboundPayment#create.destination_payment_method_data.billing_details.phone`, `WebhookEndpoint#create.description`, and `WebhookEndpoint#update.description` from `string` to `emptyStringable(string)`\n\n### July 28, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `subscription_details` on `Invoice`\n\n### July 25, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `monthly_estimated_revenue` on `Account#create.business_profile`, `Account#update.business_profile`, and `Account.business_profile`\n\n### July 18, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for values `excluded_territory`, `jurisdiction_unsupported`, and `vat_exempt` from enums `Checkout.Session.shipping_cost.taxes[].taxability_reason`, `Checkout.Session.total_details.breakdown.taxes[].taxability_reason`, `CreditNote.shipping_cost.taxes[].taxability_reason`, `Invoice.shipping_cost.taxes[].taxability_reason`, `LineItem.taxes[].taxability_reason`, `Quote.computed.recurring.total_details.breakdown.taxes[].taxability_reason`, `Quote.computed.upfront.total_details.breakdown.taxes[].taxability_reason`, and `Quote.total_details.breakdown.taxes[].taxability_reason`\n\n### July 17, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `use_stripe_sdk` on `SetupIntent#confirm` and `SetupIntent#create`\n*   Add support for new value `service_tax` on enums `TaxRate#create.tax_type`, `TaxRate#update.tax_type`, and `TaxRate.tax_type`\n\n### July 14, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `ro_tin` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, `Tax.Calculation.customer_details.tax_ids[].type`, and `Tax.Transaction.customer_details.tax_ids[].type`\n*   Add support for new value `ro_tin` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, and `Tax.Calculation#create.customer_details.tax_ids[].type`\n\n### July 12, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `allow_redirects` on `PaymentIntent#create.automatic_payment_methods`, `PaymentIntent.automatic_payment_methods`, `SetupIntent#create.automatic_payment_methods`, and `SetupIntent.automatic_payment_methods`\n*   Add support for `order_id` on `Charge.payment_method_details.afterpay_clearpay`\n*   Add support for new values `amusement_tax` and `communications_tax` on enums `Tax.Calculation.shipping_cost.tax_breakdown[].tax_rate_details.tax_type`, `Tax.Calculation.tax_breakdown[].tax_rate_details.tax_type`, `Tax.CalculationLineItem.tax_breakdown[].tax_rate_details.tax_type`, and `Tax.Transaction.shipping_cost.tax_breakdown[].tax_rate_details.tax_type`\n\n### July 11, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `Tax.Settings`\n*   Add support for `retrieve` and `update` methods on resource `Settings`\n*   Add support for new value `invalid_tax_location` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n*   Add support for new value `tax.settings.updated` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n*   Add support for `product` on `Tax.TransactionLineItem`\n\n### July 3, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `automatic_tax` on `Subscription#list`\n*   Add support for `numeric` and `text` on `PaymentLink.custom_fields[]`\n\n### June 28, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `effective_at` on `CreditNote#create`, `CreditNote#preview_lines`, `CreditNote#preview`, `CreditNote`, `Invoice#create`, `Invoice#update`, and `Invoice`\n\n### June 27, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `application_fees_not_allowed` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n*   Add support for new values `ad_nrt`, `ar_cuit`, `bo_tin`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `pe_ruc`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, and `vn_tin` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, `Tax.Calculation.customer_details.tax_ids[].type`, and `Tax.Transaction.customer_details.tax_ids[].type`\n*   Add support for new values `ad_nrt`, `ar_cuit`, `bo_tin`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `pe_ruc`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, and `vn_tin` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, and `Tax.Calculation#create.customer_details.tax_ids[].type`\n\n### June 22, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `on_behalf_of` on `Mandate`\n\n### June 9, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `Checkout.Session.success_url` from `string` to `nullable(string)`\n\n### June 6, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `taxability_reason` on `Tax.Calculation.tax_breakdown[]`\n\n### June 2, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Charge.payment_method_details.cashapp.buyer_id`, `Charge.payment_method_details.cashapp.cashtag`, `PaymentMethod.cashapp.buyer_id`, and `PaymentMethod.cashapp.cashtag` to be required\n\n### June 1, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `numeric` and `text` on `Checkout.Session#create.custom_fields[]`, `PaymentLink#create.custom_fields[]`, and `PaymentLink#update.custom_fields[]`\n*   Add support for `maximum_length` and `minimum_length` on `Checkout.Session.custom_fields[].numeric` and `Checkout.Session.custom_fields[].text`\n*   Add support for `payer_email` on `PaymentMethod.paypal`\n*   Add support for new values `aba` and `swift` on enums `Checkout.Session#create.payment_method_options.customer_balance.bank_transfer.requested_address_types[]`, `Checkout.Session.payment_method_options.customer_balance.bank_transfer.requested_address_types[]`, `PaymentIntent#confirm.payment_method_options.customer_balance.bank_transfer.requested_address_types[]`, `PaymentIntent#create.payment_method_options.customer_balance.bank_transfer.requested_address_types[]`, `PaymentIntent#update.payment_method_options.customer_balance.bank_transfer.requested_address_types[]`, and `PaymentIntent.payment_method_options.customer_balance.bank_transfer.requested_address_types[]`\n*   Add support for new value `us_bank_transfer` on enums `Checkout.Session#create.payment_method_options.customer_balance.bank_transfer.type`, `Checkout.Session.payment_method_options.customer_balance.bank_transfer.type`, `Customer#create_funding_instructions.bank_transfer.type`, `PaymentIntent#confirm.payment_method_options.customer_balance.bank_transfer.type`, `PaymentIntent#create.payment_method_options.customer_balance.bank_transfer.type`, `PaymentIntent#update.payment_method_options.customer_balance.bank_transfer.type`, `PaymentIntent.next_action.display_bank_transfer_instructions.type`, and `PaymentIntent.payment_method_options.customer_balance.bank_transfer.type`\n\n### May 31, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `preferred_locales` on `Issuing.Cardholder#create`, `Issuing.Cardholder#update`, and `Issuing.Cardholder`\n\n### May 30, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `taxability_reason` on `Tax.Calculation.tax_breakdown[]`\n*   Add support for `taxability_reason` on `Tax.Calculation.tax_breakdown[]`\n\n### May 26, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `description`, `iin`, and `issuer` on `PaymentMethod.card_present` and `PaymentMethod.interac_present`\n\n### May 23, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `zip_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `zip` on `Charge.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod#update`, `PaymentMethod`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `zip` on enums `Checkout.Session#create.payment_method_types[]` and `PaymentMethod#create.type`\n*   Add support for new value `zip` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for new value `zip` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new value `zip` on enum `PaymentMethod.type`\n\n### May 22, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code` from `string` to `enum`\n\n### May 18, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `mandate_options` on `PaymentIntent#confirm.payment_method_options.blik`, `PaymentIntent#create.payment_method_options.blik`, `PaymentIntent#update.payment_method_options.blik`, `PaymentIntent.payment_method_options.blik`, `SetupIntent#confirm.payment_method_options.blik`, `SetupIntent#create.payment_method_options.blik`, and `SetupIntent#update.payment_method_options.blik`\n*   Add support for `mandate_options` on `PaymentIntent#confirm.payment_method_options.blik`, `PaymentIntent#create.payment_method_options.blik`, `PaymentIntent#update.payment_method_options.blik`, `PaymentIntent.payment_method_options.blik`, `SetupIntent#confirm.payment_method_options.blik`, `SetupIntent#create.payment_method_options.blik`, and `SetupIntent#update.payment_method_options.blik`\n\n### May 16, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `amusement_tax` and `communications_tax` on enums `TaxRate#create.tax_type`, `TaxRate#update.tax_type`, and `TaxRate.tax_type`\n\n### May 15, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `subscription_update_confirm` and `subscription_update` on `BillingPortal.Session#create.flow_data` and `BillingPortal.Session.flow`\n*   Add support for new values `subscription_update_confirm` and `subscription_update` on enums `BillingPortal.Session#create.flow_data.type` and `BillingPortal.Session.flow.type`\n*   Add support for `link` on `Charge.payment_method_details.card.wallet` and `PaymentMethod.card.wallet`\n\n### May 12, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `buyer_id` and `cashtag` on `Charge.payment_method_details.cashapp` and `PaymentMethod.cashapp`\n\n### May 11, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `taxability_reason` and `taxable_amount` on `Checkout.Session.shipping_cost.taxes[]`, `Checkout.Session.total_details.breakdown.taxes[]`, `CreditNote.shipping_cost.taxes[]`, `CreditNote.tax_amounts[]`, `Invoice.shipping_cost.taxes[]`, `Invoice.total_tax_amounts[]`, `LineItem.taxes[]`, `Quote.computed.recurring.total_details.breakdown.taxes[]`, `Quote.computed.upfront.total_details.breakdown.taxes[]`, and `Quote.total_details.breakdown.taxes[]`\n*   Add support for `effective_percentage` on `TaxRate`\n\n### May 10, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `brand`, `cardholder_name`, `country`, `exp_month`, `exp_year`, `fingerprint`, `funding`, `last4`, `networks`, and `read_method` on `PaymentMethod.card_present` and `PaymentMethod.interac_present`\n*   Add support for `preferred_locales` on `PaymentMethod.interac_present`\n*   Add support for `network_token` on `Charge.payment_method_details.card`\n\n### May 9, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `paypal` on `Charge.payment_method_details`, `Checkout.Session#create.payment_method_options`, `Mandate.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod`, `SetupAttempt.payment_method_details`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#confirm.payment_method_options`, `SetupIntent#create.payment_method_data`, `SetupIntent#create.payment_method_options`, `SetupIntent#update.payment_method_data`, `SetupIntent#update.payment_method_options`, and `SetupIntent.payment_method_options`\n*   Add support for new value `paypal` on enums `Checkout.Session#create.payment_method_types[]` and `PaymentMethod#create.type`\n*   Add support for new value `paypal` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for new value `paypal` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n*   Add support for new value `paypal` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new value `paypal` on enums `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]`\n*   Add support for new value `paypal` on enum `PaymentMethod.type`\n\n### May 8, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `eftpos_au` on enums `PaymentIntent#confirm.payment_method_options.card.network`, `PaymentIntent#create.payment_method_options.card.network`, `PaymentIntent#update.payment_method_options.card.network`, `PaymentIntent.payment_method_options.card.network`, `SetupIntent#confirm.payment_method_options.card.network`, `SetupIntent#create.payment_method_options.card.network`, `SetupIntent#update.payment_method_options.card.network`, `SetupIntent.payment_method_options.card.network`, `Subscription#create.payment_settings.payment_method_options.card.network`, `Subscription#update.payment_settings.payment_method_options.card.network`, and `Subscription.payment_settings.payment_method_options.card.network`\n\n### May 2, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `link` on `Checkout.Session#create.payment_method_options` and `Checkout.Session.payment_method_options`\n\n### May 1, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `brand`, `country`, `description`, `exp_month`, `exp_year`, `fingerprint`, `funding`, `iin`, `issuer`, `last4`, `network`, and `wallet` on `SetupAttempt.payment_method_details.card`\n\n### April 27, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `tax_breakdown` on `Tax.Calculation.shipping_cost` and `Tax.Transaction.shipping_cost`\n\n### April 26, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `billing_cycle_anchor` and `proration_behavior` on `Checkout.Session#create.subscription_data`\n\n### April 24, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `terminal_id` on `Issuing.Authorization.merchant_data` and `Issuing.Transaction.merchant_data`\n\n### April 22, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `checks` on `SetupAttempt.payment_method_details.card`\n\n### April 21, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `metadata` on `PaymentIntent#capture`\n\n### April 17, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Identity.VerificationReport.options` and `Identity.VerificationReport.type` to be optional\n*   Change type of `Identity.VerificationSession.options` from `GelatoVerificationSessionOptions` to `nullable(GelatoVerificationSessionOptions)`\n*   Change type of `Identity.VerificationSession.type` from `enum('document'|'id_number')` to `nullable(enum('document'|'id_number'))`\n\n### April 13, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Checkout.Session.currency_conversion` to be required\n*   Add support for new value `REVOIE23` on enums `Charge.payment_method_details.ideal.bic`, `PaymentMethod.ideal.bic`, and `SetupAttempt.payment_method_details.ideal.bic`\n\n### April 6, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `link` on enums `Charge.payment_method_details.card.wallet.type` and `PaymentMethod.card.wallet.type`\n*   Change `Issuing.Cardholder#create.type` to be optional\n*   Add support for `status_details` on `PaymentMethod.us_bank_account`\n\n### March 31, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `country` on `PaymentMethod.link`\n\n### March 30, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `create` method on resource `Tax.Transaction`\n*   Add support for `export_license_id` and `export_purpose_code` on `Account#create.company`, `Account#update.company`, `Account.company`, and `Token#create.account.company`\n\n### March 29, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `amount_tip` on `Terminal.Reader.testHelpers#present_payment_method`\n\n### March 27, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for value `deleted` from enum `Invoice.status`\n\n### March 23, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resources `Tax.CalculationLineItem`, `Tax.Calculation`, `Tax.TransactionLineItem`, and `Tax.Transaction`\n*   Add support for `create` and `list_line_items` methods on resource `Calculation`\n*   Add support for `create_from_calculation`, `create_reversal`, `create`, `list_line_items`, and `retrieve` methods on resource `Transaction`\n\n### March 22, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `currency_conversion` on `Checkout.Session`\n\n### March 20, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `link` on enums `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]`\n\n### March 17, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `automatic_payment_methods` on `SetupIntent#create` and `SetupIntent`\n*   Add support for new value `link` on enum `Checkout.Session#create.payment_method_types[]`\n\n### March 16, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `country` on `Charge.payment_method_details.link`\n*   Add support for new value `automatic_async` on enums `Checkout.Session#create.payment_intent_data.capture_method`, `PaymentIntent#confirm.capture_method`, `PaymentIntent#create.capture_method`, `PaymentIntent#update.capture_method`, `PaymentIntent.capture_method`, `PaymentLink#create.payment_intent_data.capture_method`, and `PaymentLink.payment_intent_data.capture_method`\n*   Add support for `future_requirements` and `requirements` on `BankAccount`\n\n### March 15, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `preferred_locale` on `PaymentIntent#confirm.payment_method_options.affirm`, `PaymentIntent#create.payment_method_options.affirm`, `PaymentIntent#update.payment_method_options.affirm`, and `PaymentIntent.payment_method_options.affirm`\n\n### March 14, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `cashapp_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `cashapp` on `Charge.payment_method_details`, `Mandate.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod#update`, `PaymentMethod`, `SetupAttempt.payment_method_details`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `cashapp` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for new value `cashapp` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n*   Add support for new value `cashapp` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for `cashapp_handle_redirect_or_display_qr_code` on `PaymentIntent.next_action` and `SetupIntent.next_action`\n*   Add support for new value `cashapp` on enum `PaymentMethod#create.type`\n*   Add support for new value `cashapp` on enum `PaymentMethod.type`\n\n### March 10, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `cashapp` on `Checkout.Session#create.payment_method_options` and `Checkout.Session.payment_method_options`\n*   Add support for new value `cashapp` on enum `Checkout.Session#create.payment_method_types[]`\n*   Add support for new value `cashapp` on enums `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]`\n\n### March 9, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `payout.reconciliation_completed` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### March 7, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `card_issuing` on `Issuing.Cardholder#create.individual` and `Issuing.Cardholder#update.individual`\n*   Add support for new value `requirements.past_due` on enum `Issuing.Cardholder.requirements.disabled_reason`\n*   Add support for new values `individual.card_issuing.user_terms_acceptance.date` and `individual.card_issuing.user_terms_acceptance.ip` on enum `Issuing.Cardholder.requirements.past_due[]`\n\n### March 3, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `cancellation_details` on `Subscription#cancel`, `Subscription#update`, and `Subscription`\n\n### March 2, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `lease_tax` on enums `TaxRate#create.tax_type`, `TaxRate#update.tax_type`, and `TaxRate.tax_type`\n*   Add support for `reconciliation_status` on `Payout`\n\n### March 1, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `electric_vehicle_charging`, `emergency_services_gcas_visa_use_only`, `government_licensed_horse_dog_racing_us_region_only`, `government_licensed_online_casions_online_gambling_us_region_only`, `government_owned_lotteries_non_us_region`, `government_owned_lotteries_us_region_only`, and `marketplaces` on enums `Issuing.Card#create.spending_controls.allowed_categories[]`, `Issuing.Card#create.spending_controls.blocked_categories[]`, `Issuing.Card#create.spending_controls.spending_limits[].categories[]`, `Issuing.Card#update.spending_controls.allowed_categories[]`, `Issuing.Card#update.spending_controls.blocked_categories[]`, `Issuing.Card#update.spending_controls.spending_limits[].categories[]`, `Issuing.Card.spending_controls.allowed_categories[]`, `Issuing.Card.spending_controls.blocked_categories[]`, `Issuing.Card.spending_controls.spending_limits[].categories[]`, `Issuing.Cardholder#create.spending_controls.allowed_categories[]`, `Issuing.Cardholder#create.spending_controls.blocked_categories[]`, `Issuing.Cardholder#create.spending_controls.spending_limits[].categories[]`, `Issuing.Cardholder#update.spending_controls.allowed_categories[]`, `Issuing.Cardholder#update.spending_controls.blocked_categories[]`, `Issuing.Cardholder#update.spending_controls.spending_limits[].categories[]`, `Issuing.Cardholder.spending_controls.allowed_categories[]`, `Issuing.Cardholder.spending_controls.blocked_categories[]`, and `Issuing.Cardholder.spending_controls.spending_limits[].categories[]`\n\n### February 22, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `igst` on enums `TaxRate#create.tax_type`, `TaxRate#update.tax_type`, and `TaxRate.tax_type`\n\n### February 21, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `yoursafe` on enums `Charge.payment_method_details.ideal.bank`, `PaymentIntent#confirm.payment_method_data.ideal.bank`, `PaymentIntent#create.payment_method_data.ideal.bank`, `PaymentIntent#update.payment_method_data.ideal.bank`, `PaymentMethod#create.ideal.bank`, `PaymentMethod.ideal.bank`, `SetupAttempt.payment_method_details.ideal.bank`, `SetupIntent#confirm.payment_method_data.ideal.bank`, `SetupIntent#create.payment_method_data.ideal.bank`, and `SetupIntent#update.payment_method_data.ideal.bank`\n*   Add support for new value `BITSNL2A` on enums `Charge.payment_method_details.ideal.bic`, `PaymentMethod.ideal.bic`, and `SetupAttempt.payment_method_details.ideal.bic`\n\n### February 16, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `name` on enums `BillingPortal.Configuration#create.features.customer_update.allowed_updates[]`, `BillingPortal.Configuration#update.features.customer_update.allowed_updates[]`, and `BillingPortal.Configuration.features.customer_update.allowed_updates[]`\n*   Add support for `refund_payment` method on resource `Terminal.Reader`\n*   Add support for `custom_fields` on `Checkout.Session#create`, `Checkout.Session`, `PaymentLink#create`, `PaymentLink#update`, and `PaymentLink`\n*   Add support for `interac_present` on `Terminal.Reader.testHelpers#present_payment_method`\n*   Change type of `Terminal.Reader.testHelpers#present_payment_method.type` from `literal('card_present')` to `enum('card_present'|'interac_present')`\n*   Add support for `refund_payment` on `Terminal.Reader.action`\n*   Add support for new value `refund_payment` on enum `Terminal.Reader.action.type`\n\n### February 13, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Subscription.trial_settings.end_behavior` and `Subscription.trial_settings` to be required\n\n### February 2, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_link` on `Checkout.Session#list`\n*   Add support for `shipping_cost` on `CreditNote#create`, `CreditNote#preview_lines`, `CreditNote#preview`, `CreditNote`, `Invoice#create`, `Invoice#update`, and `Invoice`\n*   Add support for `amount_shipping` on `CreditNote` and `Invoice`\n*   Add support for `shipping_details` on `Invoice#create`, `Invoice#update`, and `Invoice`\n*   Change `PaymentLink.invoice_creation` to be required\n*   Add support for new value `America/Ciudad_Juarez` on enum `Reporting.ReportRun#create.parameters.timezone`\n\n### February 1, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `resume` method on resource `Subscription`\n*   Add support for `trial_settings` on `CheckoutSessionCreateParams.subscription_data`, `SubscriptionCreateParams`, `SubscriptionUpdateParams`, and `Subscription`\n*   Add support for `subscription_resume_at` on `InvoiceUpcomingLinesParams` and `InvoiceUpcomingParams`\n*   Change `IssuingCardholderCreateParams.individual.first_name`, `IssuingCardholderCreateParams.individual.last_name`, `IssuingCardholderUpdateParams.individual.first_name`, and `IssuingCardholderUpdateParams.individual.last_name` to be optional\n*   Change type of `Issuing.Cardholder.individual.first_name` and `Issuing.Cardholder.individual.last_name` from `string` to `string | null`\n*   Add support for `invoice_creation` on `PaymentLinkCreateParams`, `PaymentLinkUpdateParams`, and `PaymentLink`\n*   Add support for new value `paused` on enum `SubscriptionListParams.status`\n*   Add support for new value `paused` on enum `Subscription.status`\n*   Add support for new values `customer.subscription.paused` and `customer.subscription.resumed` on enums `WebhookEndpointCreateParams.enabled_events[]` and `WebhookEndpointUpdateParams.enabled_events[]`\n\n### January 26, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `BE` on enums `Checkout.Session.payment_method_options.customer_balance.bank_transfer.eu_bank_transfer.country`, `Invoice.payment_settings.payment_method_options.customer_balance.bank_transfer.eu_bank_transfer.country`, `PaymentIntent.payment_method_options.customer_balance.bank_transfer.eu_bank_transfer.country`, and `Subscription.payment_settings.payment_method_options.customer_balance.bank_transfer.eu_bank_transfer.country`\n*   Add support for new values `cs-CZ`, `el-GR`, `en-CZ`, and `en-GR` on enums `PaymentIntent#confirm.payment_method_options.klarna.preferred_locale`, `PaymentIntent#create.payment_method_options.klarna.preferred_locale`, and `PaymentIntent#update.payment_method_options.klarna.preferred_locale`\n\n### January 18, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `verification_session` on `EphemeralKey#create`\n*   Add support for new values `refund.created` and `refund.updated` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### January 5, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `card_issuing` on `Issuing.Cardholder.individual`\n\n### December 22, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `merchant_default` on enums `CashBalance#update.settings.reconciliation_mode`, `Customer#create.cash_balance.settings.reconciliation_mode`, and `Customer#update.cash_balance.settings.reconciliation_mode`\n*   Add support for `using_merchant_default` on `CashBalance.settings`\n*   Change `Checkout.Session#create.cancel_url` to be optional\n*   Change type of `Checkout.Session.cancel_url` from `string` to `nullable(string)`\n\n### December 15, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `invoice_overpaid` on enum `CustomerBalanceTransaction.type`\n\n### December 8, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Customer#list_payment_methods.type` and `PaymentMethod#list.type` to be optional\n\n### December 6, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `flow_data` on `BillingPortal.Session#create`\n*   Add support for `flow` on `BillingPortal.Session`\n*   Add support for `india_international_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `invoice_creation` on `Checkout.Session#create` and `Checkout.Session`\n*   Add support for `invoice` on `Checkout.Session`\n*   Add support for `metadata` on `SubscriptionSchedule#create.phases[].items[]`, `SubscriptionSchedule#update.phases[].items[]`, and `SubscriptionSchedule.phases[].items[]`\n\n### November 17, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `hosted_instructions_url` on `PaymentIntent.next_action.wechat_pay_display_qr_code`\n\n### November 16, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `custom_text` on `Checkout.Session#create`, `Checkout.Session`, `PaymentLink#create`, `PaymentLink#update`, and `PaymentLink`\n*   Add support for `hosted_instructions_url` on `PaymentIntent.next_action.paynow_display_qr_code`\n*   Remove support for resources `Order` and `Sku`\n*   Remove support for `cancel`, `create`, `list_line_items`, `list`, `reopen`, `retrieve`, `submit`, and `update` methods on resource `Order`\n*   Remove support for `create`, `delete`, `list`, `retrieve`, and `update` methods on resource `Sku`\n*   Change type of `Charge.refunds` from `apiList($Refund)` to `nullable(apiList($Refund))`\n*   Change `Charge.refunds` to be required\n*   Remove support for `amount`, `currency`, `description`, `images`, and `name` on `Checkout.Session#create.line_items[]`\n*   Remove support for `items` on `Checkout.Session#create.subscription_data`\n*   Remove support for `product` on `LineItem`\n*   Add support for `latest_charge` on `PaymentIntent`\n*   Remove support for `charges` on `PaymentIntent`\n*   Add support for new value `2022-11-15` on enum `WebhookEndpoint#create.api_version`\n\n### November 10, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `tos_shown_and_accepted` on `Checkout.Session#create.payment_method_options.paynow`\n\n### November 7, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `reason_message` on `Issuing.Authorization.request_history[]`\n*   Add support for new value `webhook_error` on enum `Issuing.Authorization.request_history[].reason`\n\n### November 1, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `eg_tin`, `ph_tin`, and `tr_tin` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, `Order.tax_details.tax_ids[].type`, and `TaxId.type`\n*   Add support for new values `eg_tin`, `ph_tin`, and `tr_tin` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, `Order#create.tax_details.tax_ids[].type`, `Order#update.tax_details.tax_ids[].type`, and `TaxId#create.type`\n\n### October 31, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `on_behalf_of` on `Checkout.Session#create.subscription_data`, `Subscription#create`, `Subscription#update`, `SubscriptionSchedule#create.default_settings`, `SubscriptionSchedule#create.phases[]`, `SubscriptionSchedule#update.default_settings`, `SubscriptionSchedule#update.phases[]`, `SubscriptionSchedule.default_settings`, `SubscriptionSchedule.phases[]`, and `Subscription`\n*   Add support for `tax_behavior` and `tax_code` on `Invoice#upcoming.invoice_items[]`, `Invoice#upcomingLines.invoice_items[]`, `InvoiceItem#create`, and `InvoiceItem#update`\n\n### October 20, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `jp_trn` and `ke_pin` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, `Order.tax_details.tax_ids[].type`, and `TaxId.type`\n*   Add support for new values `jp_trn` and `ke_pin` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, `Order#create.tax_details.tax_ids[].type`, `Order#update.tax_details.tax_ids[].type`, and `TaxId#create.type`\n*   Add support for `tipping` on `Terminal.Reader#process_payment_intent.process_config` and `Terminal.Reader.action.process_payment_intent.process_config`\n\n### October 13, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `invalid_representative_country` and `verification_failed_residential_address` on enums `Account.future_requirements.errors[].code`, `Account.requirements.errors[].code`, `Capability.future_requirements.errors[].code`, `Capability.requirements.errors[].code`, `Person.future_requirements.errors[].code`, and `Person.requirements.errors[].code`\n*   Add support for `request_log_url` on `Invoice.last_finalization_error`, `PaymentIntent.last_payment_error`, `SetupAttempt.setup_error`, `SetupIntent.last_setup_error`, `StripeErrorResponse.error`, and `StripeError`\n*   Add support for `network_data` on `Issuing.Authorization`\n\n### October 4, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `invalid_dob_age_under_18` on enums `Account.future_requirements.errors[].code`, `Account.requirements.errors[].code`, `Capability.future_requirements.errors[].code`, `Capability.requirements.errors[].code`, `Person.future_requirements.errors[].code`, and `Person.requirements.errors[].code`\n*   Add support for new values `America/Nuuk`, `Europe/Kyiv`, and `Pacific/Kanton` on enum `Reporting.ReportRun#create.parameters.timezone`\n*   Add support for `klarna` on `SetupAttempt.payment_method_details`\n\n### September 28, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `Charge.payment_method_details.card_present.incremental_authorization_supported` and `Charge.payment_method_details.card_present.overcapture_supported` from `nullable(boolean)` to `boolean`\n*   Add support for `created` on `Checkout.Session`\n*   Add support for `setup_future_usage` on `PaymentIntent#confirm.payment_method_options.pix`, `PaymentIntent#create.payment_method_options.pix`, `PaymentIntent#update.payment_method_options.pix`, and `PaymentIntent.payment_method_options.pix`\n\n### September 22, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `statement_descriptor` on `PaymentIntent#increment_authorization`\n\n### September 20, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `terms_of_service` on `Checkout.Session#create.consent_collection`, `Checkout.Session.consent_collection`, `Checkout.Session.consent`, `PaymentLink#create.consent_collection`, and `PaymentLink.consent_collection`\n*   Remove support for `plan` on `Checkout.Session#create.payment_method_options.card.installments`\n*   Change `SubscriptionSchedule.phases[].currency` to be required\n\n### September 15, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `amount` on `Issuing.Dispute#create` and `Issuing.Dispute#update`\n\n### September 14, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `pix` on `Charge.payment_method_details`, `Checkout.Session#create.payment_method_options`, `Checkout.Session.payment_method_options`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `pix` on enum `Checkout.Session#create.payment_method_types[]`\n*   Add support for new value `pix` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for `from_invoice` on `Invoice#create` and `Invoice`\n*   Add support for `latest_revision` on `Invoice`\n*   Add support for new value `pix` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for `pix_display_qr_code` on `PaymentIntent.next_action`\n*   Add support for new value `pix` on enums `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]`\n*   Add support for new value `pix` on enum `PaymentMethod#create.type`\n*   Add support for new value `pix` on enum `PaymentMethod.type`\n*   Add support for `created` on `Treasury.DebitReversal`\n\n### September 8, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `require_signature` on `Issuing.Card#create.shipping` and `Issuing.Card.shipping`\n*   Add support for `proration_behavior=always_invoice` when creating a Subscription Schedule.\n\n### September 6, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `terminal_reader_splashscreen` on enums `File#list.purpose` and `File.purpose`\n\n### August 31, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `de-CH`, `en-CH`, `en-PL`, `en-PT`, `fr-CH`, `it-CH`, `pl-PL`, and `pt-PT` on enums `Order#create.payment.settings.payment_method_options.klarna.preferred_locale`, `Order#update.payment.settings.payment_method_options.klarna.preferred_locale`, `PaymentIntent#confirm.payment_method_options.klarna.preferred_locale`, `PaymentIntent#create.payment_method_options.klarna.preferred_locale`, and `PaymentIntent#update.payment_method_options.klarna.preferred_locale`\n*   Add support for `description` on `PaymentLink#create.subscription_data` and `PaymentLink.subscription_data`\n\n### August 26, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Account.company.name`, `Charge.refunds`, `PaymentIntent.charges`, `Product.caption`, `Product.statement_descriptor`, `Product.unit_label`, `Terminal.Configuration.tipping.aud.fixed_amounts`, `Terminal.Configuration.tipping.aud.percentages`, `Terminal.Configuration.tipping.cad.fixed_amounts`, `Terminal.Configuration.tipping.cad.percentages`, `Terminal.Configuration.tipping.chf.fixed_amounts`, `Terminal.Configuration.tipping.chf.percentages`, `Terminal.Configuration.tipping.czk.fixed_amounts`, `Terminal.Configuration.tipping.czk.percentages`, `Terminal.Configuration.tipping.dkk.fixed_amounts`, `Terminal.Configuration.tipping.dkk.percentages`, `Terminal.Configuration.tipping.eur.fixed_amounts`, `Terminal.Configuration.tipping.eur.percentages`, `Terminal.Configuration.tipping.gbp.fixed_amounts`, `Terminal.Configuration.tipping.gbp.percentages`, `Terminal.Configuration.tipping.hkd.fixed_amounts`, `Terminal.Configuration.tipping.hkd.percentages`, `Terminal.Configuration.tipping.myr.fixed_amounts`, `Terminal.Configuration.tipping.myr.percentages`, `Terminal.Configuration.tipping.nok.fixed_amounts`, `Terminal.Configuration.tipping.nok.percentages`, `Terminal.Configuration.tipping.nzd.fixed_amounts`, `Terminal.Configuration.tipping.nzd.percentages`, `Terminal.Configuration.tipping.sek.fixed_amounts`, `Terminal.Configuration.tipping.sek.percentages`, `Terminal.Configuration.tipping.sgd.fixed_amounts`, `Terminal.Configuration.tipping.sgd.percentages`, `Terminal.Configuration.tipping.usd.fixed_amounts`, `Terminal.Configuration.tipping.usd.percentages`, `Treasury.FinancialAccount.active_features`, `Treasury.FinancialAccount.pending_features`, `Treasury.FinancialAccount.platform_restrictions`, and `Treasury.FinancialAccount.restricted_features` to be optional\n*   Add support for `login_page` on `BillingPortal.Configuration#create`, `BillingPortal.Configuration#update`, and `BillingPortal.Configuration`\n*   Add support for new value `deutsche_bank_ag` on enums `Charge.payment_method_details.eps.bank`, `PaymentIntent#confirm.payment_method_data.eps.bank`, `PaymentIntent#create.payment_method_data.eps.bank`, `PaymentIntent#update.payment_method_data.eps.bank`, `PaymentMethod#create.eps.bank`, `PaymentMethod.eps.bank`, `SetupIntent#confirm.payment_method_data.eps.bank`, `SetupIntent#create.payment_method_data.eps.bank`, and `SetupIntent#update.payment_method_data.eps.bank`\n*   Add support for `description` on `Quote#create.subscription_data`, `Quote#update.subscription_data`, `Quote.subscription_data`, `SubscriptionSchedule#create.default_settings`, `SubscriptionSchedule#create.phases[]`, `SubscriptionSchedule#update.default_settings`, `SubscriptionSchedule#update.phases[]`, `SubscriptionSchedule.default_settings`, and `SubscriptionSchedule.phases[]`\n\n### August 24, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `customs` and `phone_number` on `Issuing.Card#create.shipping` and `Issuing.Card.shipping`\n\n### August 23, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Terminal.Reader.action` to be required\n*   Change `Treasury.OutboundTransfer#create.destination_payment_method` to be optional\n*   Change type of `Treasury.OutboundTransfer.destination_payment_method` from `string` to `nullable(string)`\n\n### August 18, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `CustomerCashBalanceTransaction`\n*   Remove support for value `paypal` from enums `Order#create.payment.settings.payment_method_types[]`, `Order#update.payment.settings.payment_method_types[]`, and `Order.payment.settings.payment_method_types[]`\n*   Add support for `network` on `SetupIntent#confirm.payment_method_options.card`, `SetupIntent#create.payment_method_options.card`, `SetupIntent#update.payment_method_options.card`, `Subscription#create.payment_settings.payment_method_options.card`, `Subscription#update.payment_settings.payment_method_options.card`, and `Subscription.payment_settings.payment_method_options.card`\n*   Add support for new value `customer_cash_balance_transaction.created` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### August 11, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_method_collection` on `Checkout.Session#create`, `Checkout.Session`, `PaymentLink#create`, `PaymentLink#update`, and `PaymentLink`\n\n### August 9, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `process_config` on `Terminal.Reader.action.process_payment_intent`\n\n### August 5, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `expires_at` on `Apps.Secret#create` and `Apps.Secret`\n\n### August 1, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for deprecated resources `AlipayAccount`, `BitcoinReceiver`, `BitcoinTransaction`, `IssuerFraudRecord`, `Recipient`, and `ThreeDSecure`\n*   Remove support for deprecated values `order.payment_failed`, `order.payment_succeeded`, `order.updated`, `order_return.created`, `transfer.failed`, and `transfer.paid` from enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n*   Remove support for `default_currency` on `Customer`\n*   Remove support for `list` method on resource `LineItem`\n*   Remove support for `recipient` on `Card`\n*   Remove support for `redirect_url` on `LoginLink#create`\n*   Remove support for `shipping_rate` and `shipping` on `Checkout.Session`\n*   Remove support for `trial_end` on `Customer#update`\n*   Add support for `list_line_items` method on resource `Checkout.Session`\n*   Add support for `shipping_cost` and `shipping_details` on `Checkout.Session`\n*   Add support for `validate` on `Customer#create`, `Customer#update`, and `PaymentSource#create`\n*   Add support for new value `2022-08-01` on enum `WebhookEndpoint#create.api_version`\n*   Add support for new value `design_rejected` on enum `Issuing.Card.cancellation_reason`\n*   Add support for new value `invalid_tos_acceptance` on enums `Account.future_requirements.errors[].code`, `Account.requirements.errors[].code`, `Capability.future_requirements.errors[].code`, `Capability.requirements.errors[].code`, `Person.future_requirements.errors[].code`, and `Person.requirements.errors[].code`\n\n### July 26, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `exempted` on enums `Charge.payment_method_details.card.three_d_secure.result` and `SetupAttempt.payment_method_details.card.three_d_secure.result`\n*   Add support for `customer_balance` on `Checkout.Session#create.payment_method_options` and `Checkout.Session.payment_method_options`\n*   Add support for new value `customer_balance` on enum `Checkout.Session#create.payment_method_types[]`\n*   Add support for new values `en-CA` and `fr-CA` on enums `Order#create.payment.settings.payment_method_options.klarna.preferred_locale`, `Order#update.payment.settings.payment_method_options.klarna.preferred_locale`, `PaymentIntent#confirm.payment_method_options.klarna.preferred_locale`, `PaymentIntent#create.payment_method_options.klarna.preferred_locale`, and `PaymentIntent#update.payment_method_options.klarna.preferred_locale`\n\n### July 22, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for resource `InstallmentsOptions`\n*   Add support for `installments` on `Invoice.payment_settings.payment_method_options.card`\n*   Add support for new resource `InstallmentsOptions`\n*   Add support for `installments` on `Checkout.Session#create.payment_method_options.card`, `Checkout.Session.payment_method_options.card`, `Invoice#create.payment_settings.payment_method_options.card`, `Invoice#update.payment_settings.payment_method_options.card`, and `PaymentIntentTypeSpecificPaymentMethodOptionsClient`\n*   Add support for `product_data` on `Order#create.line_items[]` and `Order#update.line_items[]`\n\n### July 21, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `default_mandate` on `Invoice#create.payment_settings`, `Invoice#update.payment_settings`, and `Invoice.payment_settings`\n*   Add support for `mandate` on `Invoice#pay`\n\n### July 20, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `default_currency` and `invoice_credit_balance` on `Customer`\n*   Add support for `currency` on `Invoice#create`\n\n### July 18, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `blik_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `blik` on `Charge.payment_method_details`, `Mandate.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod#update`, `PaymentMethod`, `SetupAttempt.payment_method_details`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#confirm.payment_method_options`, `SetupIntent#create.payment_method_data`, `SetupIntent#create.payment_method_options`, `SetupIntent#update.payment_method_data`, `SetupIntent#update.payment_method_options`, and `SetupIntent.payment_method_options`\n*   Change type of `Checkout.Session#create.consent_collection.promotions`, `Checkout.Session.consent_collection.promotions`, `PaymentLink#create.consent_collection.promotions`, and `PaymentLink.consent_collection.promotions` from `literal('auto')` to `enum('auto'|'none')`\n*   Add support for new value `blik` on enum `Checkout.Session#create.payment_method_types[]`\n*   Add support for new value `blik` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for new value `blik` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new value `blik` on enums `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]`\n*   Add support for new value `blik` on enum `PaymentMethod#create.type`\n*   Add support for new value `blik` on enum `PaymentMethod.type`\n\n### July 12, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `customer_details` on `Checkout.Session#list`\n*   Change `LineItem.amount_discount` and `LineItem.amount_tax` to be required\n*   Change type of `Transfer.source_type` from `nullable(string)` to `string`\n*   Change `Transfer.source_type` to be optional\n\n### July 7, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `currency` on `Checkout.Session#create`, `Invoice#upcomingLines`, `Invoice#upcoming`, `PaymentLink#create`, `Subscription#create`, `SubscriptionSchedule#create.phases[]`, `SubscriptionSchedule#update.phases[]`, `SubscriptionSchedule.phases[]`, and `Subscription`\n*   Add support for `currency_options` on `Checkout.Session#create.shipping_options[].shipping_rate_data.fixed_amount`, `Coupon#create`, `Coupon#update`, `Coupon`, `Order#create.shipping_cost.shipping_rate_data.fixed_amount`, `Order#update.shipping_cost.shipping_rate_data.fixed_amount`, `Price#create`, `Price#update`, `Price`, `Product#create.default_price_data`, `PromotionCode#create.restrictions`, `PromotionCode.restrictions`, `ShippingRate#create.fixed_amount`, and `ShippingRate.fixed_amount`\n*   Add support for `restrictions` on `PromotionCode#update`\n*   Add support for `fixed_amount` and `tax_behavior` on `ShippingRate#update`\n\n### July 6, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `customer` on `Checkout.Session#list` and `Refund#create`\n*   Add support for `currency` and `origin` on `Refund#create`\n*   Add support for new values `financial_connections.account.created`, `financial_connections.account.deactivated`, `financial_connections.account.disconnected`, `financial_connections.account.reactivated`, and `financial_connections.account.refreshed_balance` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### June 29, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `deliver_card`, `fail_card`, `return_card`, and `ship_card` test helper methods on resource `Issuing.Card`\n*   Change type of `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]` from `literal('card')` to `enum`\n*   Add support for `hosted_regulatory_receipt_url` on `Treasury.ReceivedCredit` and `Treasury.ReceivedDebit`\n*   Remove support for value `treasury.received_credit.reversed` from enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### June 23, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `capture_method` on `PaymentIntent#confirm` and `PaymentIntent#update`\n*   Change `Price.custom_unit_amount` to be required\n*   Add support for `reversal_details` on `Treasury.ReceivedCredit` and `Treasury.ReceivedDebit`\n*   Add support for `debit_reversal` on `Treasury.ReceivedDebit.linked_flows`\n\n### June 21, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `promptpay_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `promptpay` on `Charge.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `promptpay` on enum `Checkout.Session#create.payment_method_types[]`\n*   Add support for `subtotal_excluding_tax` on `CreditNote` and `Invoice`\n*   Add support for `amount_excluding_tax` and `unit_amount_excluding_tax` on `CreditNoteLineItem` and `InvoiceLineItem`\n*   Add support for new value `promptpay` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for `rendering_options` on `Invoice#create` and `Invoice#update`\n*   Add support for new value `promptpay` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n*   Add support for `total_excluding_tax` on `Invoice`\n*   Add support for `automatic_payment_methods` on `Order.payment.settings`\n*   Add support for new value `promptpay` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for `promptpay_display_qr_code` on `PaymentIntent.next_action`\n*   Add support for new value `promptpay` on enum `PaymentMethod#create.type`\n*   Add support for new value `promptpay` on enum `PaymentMethod.type`\n\n### June 17, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `fund_cash_balance` test helper method on resource `Customer`\n*   Remove support for `fund_cash_balance` test helper method on resource `CustomerBalanceTransaction`\n\n### June 16, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `list_funding_instructions` method on resource `Customer`\n\n### June 7, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `affirm`, `afterpay_clearpay`, `au_becs_debit`, `bacs_debit`, `bancontact`, `eps`, `fpx`, `giropay`, `grabpay`, `ideal`, `klarna`, `p24`, `paynow`, `sepa_debit`, and `sofort` on `Checkout.Session#create.payment_method_options`\n*   Add support for `card` on `Checkout.Session#create.payment_method_options` and `Checkout.Session.payment_method_options`\n*   Add support for `setup_future_usage` on `Checkout.Session#create.payment_method_options.acss_debit`, `Checkout.Session#create.payment_method_options.alipay`, `Checkout.Session#create.payment_method_options.boleto`, `Checkout.Session#create.payment_method_options.konbini`, `Checkout.Session#create.payment_method_options.oxxo`, `Checkout.Session#create.payment_method_options.us_bank_account`, `Checkout.Session#create.payment_method_options.wechat_pay`, `Checkout.Session.payment_method_options.acss_debit`, `Checkout.Session.payment_method_options.affirm`, `Checkout.Session.payment_method_options.afterpay_clearpay`, `Checkout.Session.payment_method_options.alipay`, `Checkout.Session.payment_method_options.au_becs_debit`, `Checkout.Session.payment_method_options.bacs_debit`, `Checkout.Session.payment_method_options.bancontact`, `Checkout.Session.payment_method_options.boleto`, `Checkout.Session.payment_method_options.eps`, `Checkout.Session.payment_method_options.fpx`, `Checkout.Session.payment_method_options.giropay`, `Checkout.Session.payment_method_options.grabpay`, `Checkout.Session.payment_method_options.ideal`, `Checkout.Session.payment_method_options.klarna`, `Checkout.Session.payment_method_options.konbini`, `Checkout.Session.payment_method_options.oxxo`, `Checkout.Session.payment_method_options.p24`, `Checkout.Session.payment_method_options.paynow`, `Checkout.Session.payment_method_options.sepa_debit`, `Checkout.Session.payment_method_options.sofort`, and `Checkout.Session.payment_method_options.us_bank_account`\n*   Change `PaymentMethod.us_bank_account.networks` and `SetupIntent.flow_directions` to be required\n*   Add support for `attach_to_self` on `SetupAttempt`, `SetupIntent#create`, `SetupIntent#list`, and `SetupIntent#update`\n*   Add support for `flow_directions` on `SetupAttempt`, `SetupIntent#create`, and `SetupIntent#update`\n\n### June 6, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `affirm`, `bancontact`, `ideal`, `p24`, and `sofort` on `Checkout.Session.payment_method_options`\n\n### June 1, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `radar_options` on `Charge#create`, `Charge`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create`, `PaymentIntent#update.payment_method_data`, `PaymentMethod#create`, `PaymentMethod`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for `account_holder_name`, `account_number`, `account_type`, `bank_code`, `bank_name`, `branch_code`, and `branch_name` on `FundingInstructions.bank_transfer.financial_addresses[].zengin` and `PaymentIntent.next_action.display_bank_transfer_instructions.financial_addresses[].zengin`\n*   Add support for new values `en-AU` and `en-NZ` on enums `Order#create.payment.settings.payment_method_options.klarna.preferred_locale`, `Order#update.payment.settings.payment_method_options.klarna.preferred_locale`, `PaymentIntent#confirm.payment_method_options.klarna.preferred_locale`, `PaymentIntent#create.payment_method_options.klarna.preferred_locale`, and `PaymentIntent#update.payment_method_options.klarna.preferred_locale`\n*   Change type of `Order.payment.settings.payment_method_options.customer_balance.bank_transfer.type` and `PaymentIntent.payment_method_options.customer_balance.bank_transfer.type` from `enum` to `literal('jp_bank_transfer')`\n*   Change `PaymentIntent.next_action.display_bank_transfer_instructions.hosted_instructions_url` to be required\n*   Add support for `network` on `SetupIntent.payment_method_options.card`\n*   Add support for new value `simulated_wisepos_e` on enums `Terminal.Reader#list.device_type` and `Terminal.Reader.device_type`\n\n### May 26, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `affirm_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `id_number_secondary` on `Account#create.individual`, `Account#update.individual`, `Person#create`, `Person#update`, `Token#create.account.individual`, and `Token#create.person`\n*   Add support for new value `affirm` on enum `Checkout.Session#create.payment_method_types[]`\n*   Add support for `hosted_instructions_url` on `PaymentIntent.next_action.display_bank_transfer_instructions`\n*   Add support for `id_number_secondary_provided` on `Person`\n*   Add support for `card_issuing` on `Treasury.FinancialAccount#create.features`, `Treasury.FinancialAccount#update.features`, and `Treasury.FinancialAccount#update_features`\n\n### May 25, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `persons` method on resource `Account`\n*   Add support for `balance_transactions` method on resource `Customer`\n*   Add support for `link_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n\n### May 23, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `treasury` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for new resource `Apps.Secret`\n*   Add support for `affirm` on `Charge.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod#update`, `PaymentMethod`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for `link` on `Charge.payment_method_details`, `Mandate.payment_method_details`, `Order#create.payment.settings.payment_method_options`, `Order#update.payment.settings.payment_method_options`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod#update`, `PaymentMethod`, `SetupAttempt.payment_method_details`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#confirm.payment_method_options`, `SetupIntent#create.payment_method_data`, `SetupIntent#create.payment_method_options`, `SetupIntent#update.payment_method_data`, `SetupIntent#update.payment_method_options`, and `SetupIntent.payment_method_options`\n*   Add support for new values `affirm` and `link` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for new value `link` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n*   Add support for new values `affirm` and `link` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new values `affirm` and `link` on enum `PaymentMethod#create.type`\n*   Add support for new values `affirm` and `link` on enum `PaymentMethod.type`\n\n### May 19, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `BillingPortal.Configuration#create.features.customer_update.allowed_updates` to be optional\n*   Add support for `financial_account` on `Issuing.Card`\n*   Add support for new values `treasury.credit_reversal.created`, `treasury.credit_reversal.posted`, `treasury.debit_reversal.completed`, `treasury.debit_reversal.created`, `treasury.debit_reversal.initial_credit_granted`, `treasury.financial_account.closed`, `treasury.financial_account.created`, `treasury.financial_account.features_status_updated`, `treasury.inbound_transfer.canceled`, `treasury.inbound_transfer.created`, `treasury.inbound_transfer.failed`, `treasury.inbound_transfer.succeeded`, `treasury.outbound_payment.canceled`, `treasury.outbound_payment.created`, `treasury.outbound_payment.expected_arrival_date_updated`, `treasury.outbound_payment.failed`, `treasury.outbound_payment.posted`, `treasury.outbound_payment.returned`, `treasury.outbound_transfer.canceled`, `treasury.outbound_transfer.created`, `treasury.outbound_transfer.expected_arrival_date_updated`, `treasury.outbound_transfer.failed`, `treasury.outbound_transfer.posted`, `treasury.outbound_transfer.returned`, `treasury.received_credit.created`, `treasury.received_credit.failed`, `treasury.received_credit.reversed`, `treasury.received_credit.succeeded`, and `treasury.received_debit.created` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n*   Remove support for resources `Treasury.BillingDetails` and `Treasury.InitiatingPaymentMethodDetails`\n*   Add support for `save_default_payment_method` on `Subscription#create.payment_settings`, `Subscription#update.payment_settings`, and `Subscription.payment_settings`\n*   Add support for `czk` on `Terminal.Configuration#create.tipping`, `Terminal.Configuration#update.tipping`, and `Terminal.Configuration.tipping`\n*   Change type of `Treasury.FinancialAccountFeatures.object` from `literal('treasury.financial_account.features')` to `literal('treasury.financial_account_features')`\n\n### May 17, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `Treasury.FinancialAccountFeatures`\n*   Add support for `retrieve_payment_method` method on resource `Customer`\n*   Change type of `BillingPortal.Session.return_url` from `string` to `nullable(string)`\n*   Change type of `Treasury.FinancialAccount.features` from `$Features` to `$Treasury.FinancialAccountFeatures`\n*   Add support for new value `issuing_authorization` on enum `Treasury.TransactionEntry.flow_type`\n*   Add support for new values `issuing_authorization_hold` and `issuing_authorization_release` on enum `Treasury.TransactionEntry.type`\n*   Remove support for values `received_hold_release` and `received_hold` from enum `Treasury.TransactionEntry.type`\n\n### May 13, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resources `Treasury.BillingDetails`, `Treasury.CreditReversal`, `Treasury.DebitReversal`, `Treasury.FinancialAccount`, `Treasury.FlowDetails`, `Treasury.InboundTransfer`, `Treasury.InitiatingPaymentMethodDetails`, `Treasury.OutboundPayment`, `Treasury.OutboundTransfer`, `Treasury.ReceivedCredit`, `Treasury.ReceivedDebit`, `Treasury.TransactionEntry`, and `Treasury.Transaction`\n*   Add support for `list_owners` and `list` methods on resource `FinancialConnections.Account`\n*   Add support for `afterpay_clearpay`, `au_becs_debit`, `bacs_debit`, `eps`, `fpx`, `giropay`, `grabpay`, `klarna`, `paynow`, and `sepa_debit` on `Checkout.Session.payment_method_options`\n*   Add support for `treasury` on `Issuing.Authorization`, `Issuing.Dispute#create`, `Issuing.Dispute`, and `Issuing.Transaction`\n*   Add support for `financial_account` on `Issuing.Card#create`\n*   Add support for `client_secret` on `Order`\n*   Add support for `networks` on `PaymentIntent#confirm.payment_method_options.us_bank_account`, `PaymentIntent#create.payment_method_options.us_bank_account`, `PaymentIntent#update.payment_method_options.us_bank_account`, `PaymentMethod.us_bank_account`, `SetupIntent#confirm.payment_method_options.us_bank_account`, `SetupIntent#create.payment_method_options.us_bank_account`, and `SetupIntent#update.payment_method_options.us_bank_account`\n*   Add support for `attach_to_self` and `flow_directions` on `SetupIntent`\n\n### May 11, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `description` on `Checkout.Session#create.subscription_data`, `Subscription#create`, `Subscription#update`, and `Subscription`\n*   Add support for `consent_collection`, `payment_intent_data`, `shipping_options`, `submit_type`, and `tax_id_collection` on `PaymentLink#create` and `PaymentLink`\n*   Add support for `customer_creation` on `PaymentLink#create`, `PaymentLink#update`, and `PaymentLink`\n*   Add support for `metadata` on `SubscriptionSchedule#create.phases[]`, `SubscriptionSchedule#update.phases[]`, and `SubscriptionSchedule.phases[]`\n*   Add support for new value `billing_portal.session.created` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### May 5, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `FinancialConnections.AccountOwnership`\n*   Change type of `FinancialConnections.Account.ownership` from `$Ownership` to `$FinancialConnections.AccountOwnership`\n*   Add support for `id` and `object` on `FinancialConnections.AccountOwner`\n*   Add support for `default_price_data` on `Product#create`\n*   Add support for `default_price` on `Product#update` and `Product`\n*   Add support for `instructions_email` on `Refund#create` and `Refund`\n\n### May 4, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resources `FinancialConnections.AccountOwner`, `FinancialConnections.Account`, and `FinancialConnections.Session`\n*   Add support for `financial_connections` on `Checkout.Session#create.payment_method_options.us_bank_account`, `Checkout.Session.payment_method_options.us_bank_account`, `Invoice#create.payment_settings.payment_method_options.us_bank_account`, `Invoice#update.payment_settings.payment_method_options.us_bank_account`, `Invoice.payment_settings.payment_method_options.us_bank_account`, `PaymentIntent#confirm.payment_method_options.us_bank_account`, `PaymentIntent#create.payment_method_options.us_bank_account`, `PaymentIntent#update.payment_method_options.us_bank_account`, `PaymentIntent.payment_method_options.us_bank_account`, `SetupIntent#confirm.payment_method_options.us_bank_account`, `SetupIntent#create.payment_method_options.us_bank_account`, `SetupIntent#update.payment_method_options.us_bank_account`, `SetupIntent.payment_method_options.us_bank_account`, `Subscription#create.payment_settings.payment_method_options.us_bank_account`, `Subscription#update.payment_settings.payment_method_options.us_bank_account`, and `Subscription.payment_settings.payment_method_options.us_bank_account`\n*   Add support for `financial_connections_account` on `PaymentIntent#confirm.payment_method_data.us_bank_account`, `PaymentIntent#create.payment_method_data.us_bank_account`, `PaymentIntent#update.payment_method_data.us_bank_account`, `PaymentMethod#create.us_bank_account`, `PaymentMethod.us_bank_account`, `SetupIntent#confirm.payment_method_data.us_bank_account`, `SetupIntent#create.payment_method_data.us_bank_account`, and `SetupIntent#update.payment_method_data.us_bank_account`\n*   Add support for `registered_address` on `Account#create.individual`, `Account#update.individual`, `Person#create`, `Person#update`, `Person`, `Token#create.account.individual`, and `Token#create.person`\n*   Change type of `PaymentIntent.amount_details.tip.amount` from `nullable(integer)` to `integer`\n*   Change `PaymentIntent.amount_details.tip.amount` to be optional\n*   Add support for `payment_method_data` on `SetupIntent#confirm`, `SetupIntent#create`, and `SetupIntent#update`\n\n### May 2, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `CashBalance`\n*   Change type of `BillingPortal.Configuration.application` from `$Application` to `deletable($Application)`\n*   Add support for `alipay` on `Checkout.Session#create.payment_method_options` and `Checkout.Session.payment_method_options`\n*   Change type of `Checkout.Session#create.payment_method_options.konbini.expires_after_days` from `emptyStringable(integer)` to `integer`\n*   Add support for new value `eu_oss_vat` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, and `TaxId.type`\n*   Add support for new value `eu_oss_vat` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, and `TaxId#create.type`\n*   Add support for `cash_balance` on `Customer`\n*   Add support for `application` on `Invoice`, `Quote`, `SubscriptionSchedule`, and `Subscription`\n\n### April 20, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `BillingPortal.Configuration.application` from `string` to `expandable($Application)`\n*   Change `Issuing.Dispute#create.transaction` to be optional\n\n### April 18, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `create_funding_instructions` method on resource `Customer`\n*   Remove support for `create` and `list` methods on resource `FundingInstructions`\n*   Add support for `amount_details` on `PaymentIntent`\n\n### April 15, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `verifone_p400` on `Terminal.Configuration#create`, `Terminal.Configuration#update`, and `Terminal.Configuration`\n*   Remove support for `verifone_P400` on `Terminal.Configuration#create`, `Terminal.Configuration#update`, and `Terminal.Configuration`\n\n### April 13, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `Terminal.Configuration`\n*   Add support for `configuration_overrides` on `Terminal.Location#create`, `Terminal.Location#update`, and `Terminal.Location`\n*   Add support for new resource `FundingInstructions`\n*   Add support for `customer_balance` on `Charge.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, and `PaymentMethod`\n*   Add support for `cash_balance` on `Customer#create` and `Customer#update`\n*   Add support for new value `customer_balance` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for new value `customer_balance` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, and `PaymentIntent#update.payment_method_data.type`\n*   Add support for `display_bank_transfer_instructions` on `PaymentIntent.next_action`\n*   Add support for new value `customer_balance` on enum `PaymentMethod#create.type`\n*   Add support for new value `customer_balance` on enum `PaymentMethod.type`\n*   Add support for `increment_authorization` method on resource `PaymentIntent`\n*   Add support for `incremental_authorization_supported` on `Charge.payment_method_details.card_present`\n*   Add support for `request_incremental_authorization_support` on `PaymentIntent#confirm.payment_method_options.card_present`, `PaymentIntent#create.payment_method_options.card_present`, `PaymentIntent#update.payment_method_options.card_present`, and `PaymentIntent.payment_method_options.card_present`\n\n### April 7, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `apply_customer_balance` method on resource `PaymentIntent`\n*   Add support for new value `cash_balance.funds_available` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### April 1, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `capture_before` on `Charge.payment_method_details.card_present`\n*   Remove support for `eu_bank_transfer` on `Invoice#create.payment_settings.payment_method_options.customer_balance.bank_transfer`, `Invoice#update.payment_settings.payment_method_options.customer_balance.bank_transfer`, `Invoice.payment_settings.payment_method_options.customer_balance.bank_transfer`, `Subscription#create.payment_settings.payment_method_options.customer_balance.bank_transfer`, `Subscription#update.payment_settings.payment_method_options.customer_balance.bank_transfer`, and `Subscription.payment_settings.payment_method_options.customer_balance.bank_transfer`\n*   Add support for `request_extended_authorization` on `PaymentIntent#confirm.payment_method_options.card_present`, `PaymentIntent#create.payment_method_options.card_present`, `PaymentIntent#update.payment_method_options.card_present`, and `PaymentIntent.payment_method_options.card_present`\n\n### March 31, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `bank_transfer_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `address` and `name` on `Checkout.Session.customer_details`\n*   Add support for `customer_balance` on `Invoice#create.payment_settings.payment_method_options`, `Invoice#update.payment_settings.payment_method_options`, `Invoice.payment_settings.payment_method_options`, `Subscription#create.payment_settings.payment_method_options`, `Subscription#update.payment_settings.payment_method_options`, and `Subscription.payment_settings.payment_method_options`\n*   Add support for new value `customer_balance` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n*   Add support for new values `payment_intent.partially_funded`, `terminal.reader.action_failed`, and `terminal.reader.action_succeeded` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### March 29, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `cancel_action`, `process_payment_intent`, `process_setup_intent`, and `set_reader_display` methods on resource `Terminal.Reader`\n*   Change `Charge.failure_balance_transaction`, `Invoice.payment_settings.payment_method_options.us_bank_account`, `PaymentIntent.next_action.verify_with_microdeposits.microdeposit_type`, `SetupIntent.next_action.verify_with_microdeposits.microdeposit_type`, and `Subscription.payment_settings.payment_method_options.us_bank_account` to be required\n*   Add support for `action` on `Terminal.Reader`\n\n### March 25, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `search` method on resources `Charge`, `Customer`, `Invoice`, `PaymentIntent`, `Price`, `Product`, and `Subscription`\n*   Add support for `us_bank_account_ach_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `test_clock` on `Subscription#list`\n\n### March 24, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `paynow_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `failure_balance_transaction` on `Charge`\n*   Add support for `paynow` on `Charge.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, and `PaymentMethod`\n*   Add support for `us_bank_account` on `Charge.payment_method_details`, `Checkout.Session#create.payment_method_options`, `Checkout.Session.payment_method_options`, `Invoice#create.payment_settings.payment_method_options`, `Invoice#update.payment_settings.payment_method_options`, `Invoice.payment_settings.payment_method_options`, `Mandate.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod#update`, `PaymentMethod`, `SetupAttempt.payment_method_details`, `SetupIntent#confirm.payment_method_options`, `SetupIntent#create.payment_method_options`, `SetupIntent#update.payment_method_options`, `SetupIntent.payment_method_options`, `Subscription#create.payment_settings.payment_method_options`, `Subscription#update.payment_settings.payment_method_options`, and `Subscription.payment_settings.payment_method_options`\n*   Add support for new values `paynow` and `us_bank_account` on enums `Checkout.Session#create.payment_method_types[]` and `PaymentMethod#create.type`\n*   Add support for new values `paynow` and `us_bank_account` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for new values `paynow` and `us_bank_account` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n*   Add support for new values `paynow` and `us_bank_account` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, and `PaymentIntent#update.payment_method_data.type`\n*   Add support for `capture_method` on `PaymentIntent#confirm.payment_method_options.afterpay_clearpay`, `PaymentIntent#confirm.payment_method_options.card`, `PaymentIntent#confirm.payment_method_options.klarna`, `PaymentIntent#create.payment_method_options.afterpay_clearpay`, `PaymentIntent#create.payment_method_options.card`, `PaymentIntent#create.payment_method_options.klarna`, `PaymentIntent#update.payment_method_options.afterpay_clearpay`, `PaymentIntent#update.payment_method_options.card`, `PaymentIntent#update.payment_method_options.klarna`, `PaymentIntent.payment_method_options.afterpay_clearpay`, `PaymentIntent.payment_method_options.card`, `PaymentIntent.payment_method_options.klarna`, and `PaymentIntentTypeSpecificPaymentMethodOptionsClient`\n*   Add support for `descriptor_code` on `PaymentIntent#verify_microdeposits` and `SetupIntent#verify_microdeposits`\n*   Add support for `paynow_display_qr_code` on `PaymentIntent.next_action`\n*   Add support for `microdeposit_type` on `PaymentIntent.next_action.verify_with_microdeposits` and `SetupIntent.next_action.verify_with_microdeposits`\n*   Add support for `verification_method` on `PaymentIntentTypeSpecificPaymentMethodOptionsClient` and `SetupIntentTypeSpecificPaymentMethodOptionsClient`\n*   Add support for new values `paynow` and `us_bank_account` on enum `PaymentMethod.type`\n\n### March 23, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `cancel` method on resource `Refund`\n*   Add support for new values `bg_uic`, `hu_tin`, and `si_tin` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, and `TaxId.type`\n*   Add support for new values `bg_uic`, `hu_tin`, and `si_tin` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, and `TaxId#create.type`\n*   Change `Invoice#create.customer` to be optional\n*   Add support for `test_clock` on `Quote#list`\n*   Add support for new values `test_helpers.test_clock.advancing`, `test_helpers.test_clock.created`, `test_helpers.test_clock.deleted`, `test_helpers.test_clock.internal_failure`, and `test_helpers.test_clock.ready` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### March 18, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `status` on `Card`\n\n### March 11, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `mandate` on `Charge.payment_method_details.card`\n*   Add support for `mandate_options` on `PaymentIntent#create.payment_method_options.card`, `PaymentIntent#update.payment_method_options.card`, `PaymentIntent#confirm.payment_method_options.card`, `PaymentIntent.payment_method_options.card`, `SetupIntent#create.payment_method_options.card`, `SetupIntent#update.payment_method_options.card`, `SetupIntent#confirm.payment_method_options.card`, and `SetupIntent.payment_method_options.card`\n*   Add support for `card_await_notification` on `PaymentIntent.next_action`\n*   Add support for `customer_notification` on `PaymentIntent.processing.card`\n*   Change `PaymentLink#create.line_items` to be required\n\n### March 9, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `test_clock` on `Customer#list`\n*   Change `Invoice.test_clock`, `InvoiceItem.test_clock`, `Quote.test_clock`, `Subscription.test_clock`, and `SubscriptionSchedule.test_clock` to be required\n\n### March 2, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resources `CreditedItems` and `ProrationDetails`\n*   Add support for `proration_details` on `InvoiceLineItem`\n\n### March 1, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `deletes_after` on `TestHelpers.TestClock`\n*   Add support for new resource `TestHelpers.TestClock`\n*   Add support for `test_clock` on `Customer#create`, `Customer`, `Invoice`, `InvoiceItem`, `Quote#create`, `Quote`, `Subscription`, and `SubscriptionSchedule`\n*   Add support for `pending_invoice_items_behavior` on `Invoice#create`\n*   Change type of `Product#update.url` from `string` to `emptyStringable(string)`\n*   Add support for `next_action` on `Refund`\n\n### February 25, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `SetupIntentTypeSpecificPaymentMethodOptionsClient`\n*   Add support for `konbini_payments` on `Account#update.capabilities`, `Account#create.capabilities`, and `Account.capabilities`\n*   Change `BillingPortal.Configuration#create.business_profile.privacy_policy_url` and `BillingPortal.Configuration#create.business_profile.terms_of_service_url` to be optional\n*   Change type of `BillingPortal.Configuration#update.business_profile.privacy_policy_url` and `BillingPortal.Configuration#update.business_profile.terms_of_service_url` from `string` to `emptyStringable(string)`\n*   Change type of `BillingPortal.Configuration.business_profile.privacy_policy_url` and `BillingPortal.Configuration.business_profile.terms_of_service_url` from `string` to `nullable(string)`\n*   Add support for `konbini` on `Charge.payment_method_details`, `Checkout.Session#create.payment_method_options`, `Checkout.Session.payment_method_options`, `Invoice#create.payment_settings.payment_method_options`, `Invoice#update.payment_settings.payment_method_options`, `Invoice.payment_settings.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod`, `Subscription#create.payment_settings.payment_method_options`, `Subscription#update.payment_settings.payment_method_options`, and `Subscription.payment_settings.payment_method_options`\n*   Add support for new value `konbini` on enums `Checkout.Session#create.payment_method_types[]` and `PaymentMethod#create.type`\n*   Add support for new value `konbini` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for new value `konbini` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n*   Add support for new value `konbini` on enums `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, and `PaymentIntent#confirm.payment_method_data.type`\n*   Add support for `konbini_display_details` on `PaymentIntent.next_action`\n*   Add support for new value `konbini` on enum `PaymentMethod.type`\n\n### February 23, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `setup_future_usage` on `PaymentIntent#create.payment_method_options.acss_debit`, `PaymentIntent#create.payment_method_options.afterpay_clearpay`, `PaymentIntent#create.payment_method_options.alipay`, `PaymentIntent#create.payment_method_options.au_becs_debit`, `PaymentIntent#create.payment_method_options.bacs_debit`, `PaymentIntent#create.payment_method_options.bancontact`, `PaymentIntent#create.payment_method_options.boleto`, `PaymentIntent#create.payment_method_options.eps`, `PaymentIntent#create.payment_method_options.fpx`, `PaymentIntent#create.payment_method_options.giropay`, `PaymentIntent#create.payment_method_options.grabpay`, `PaymentIntent#create.payment_method_options.ideal`, `PaymentIntent#create.payment_method_options.klarna`, `PaymentIntent#create.payment_method_options.oxxo`, `PaymentIntent#create.payment_method_options.p24`, `PaymentIntent#create.payment_method_options.sepa_debit`, `PaymentIntent#create.payment_method_options.sofort`, `PaymentIntent#create.payment_method_options.wechat_pay`, `PaymentIntent#update.payment_method_options.acss_debit`, `PaymentIntent#update.payment_method_options.afterpay_clearpay`, `PaymentIntent#update.payment_method_options.alipay`, `PaymentIntent#update.payment_method_options.au_becs_debit`, `PaymentIntent#update.payment_method_options.bacs_debit`, `PaymentIntent#update.payment_method_options.bancontact`, `PaymentIntent#update.payment_method_options.boleto`, `PaymentIntent#update.payment_method_options.eps`, `PaymentIntent#update.payment_method_options.fpx`, `PaymentIntent#update.payment_method_options.giropay`, `PaymentIntent#update.payment_method_options.grabpay`, `PaymentIntent#update.payment_method_options.ideal`, `PaymentIntent#update.payment_method_options.klarna`, `PaymentIntent#update.payment_method_options.oxxo`, `PaymentIntent#update.payment_method_options.p24`, `PaymentIntent#update.payment_method_options.sepa_debit`, `PaymentIntent#update.payment_method_options.sofort`, `PaymentIntent#update.payment_method_options.wechat_pay`, `PaymentIntent#confirm.payment_method_options.acss_debit`, `PaymentIntent#confirm.payment_method_options.afterpay_clearpay`, `PaymentIntent#confirm.payment_method_options.alipay`, `PaymentIntent#confirm.payment_method_options.au_becs_debit`, `PaymentIntent#confirm.payment_method_options.bacs_debit`, `PaymentIntent#confirm.payment_method_options.bancontact`, `PaymentIntent#confirm.payment_method_options.boleto`, `PaymentIntent#confirm.payment_method_options.eps`, `PaymentIntent#confirm.payment_method_options.fpx`, `PaymentIntent#confirm.payment_method_options.giropay`, `PaymentIntent#confirm.payment_method_options.grabpay`, `PaymentIntent#confirm.payment_method_options.ideal`, `PaymentIntent#confirm.payment_method_options.klarna`, `PaymentIntent#confirm.payment_method_options.oxxo`, `PaymentIntent#confirm.payment_method_options.p24`, `PaymentIntent#confirm.payment_method_options.sepa_debit`, `PaymentIntent#confirm.payment_method_options.sofort`, `PaymentIntent#confirm.payment_method_options.wechat_pay`, `PaymentIntent.payment_method_options.acss_debit`, `PaymentIntent.payment_method_options.afterpay_clearpay`, `PaymentIntent.payment_method_options.alipay`, `PaymentIntent.payment_method_options.au_becs_debit`, `PaymentIntent.payment_method_options.bacs_debit`, `PaymentIntent.payment_method_options.bancontact`, `PaymentIntent.payment_method_options.boleto`, `PaymentIntent.payment_method_options.eps`, `PaymentIntent.payment_method_options.fpx`, `PaymentIntent.payment_method_options.giropay`, `PaymentIntent.payment_method_options.grabpay`, `PaymentIntent.payment_method_options.ideal`, `PaymentIntent.payment_method_options.klarna`, `PaymentIntent.payment_method_options.oxxo`, `PaymentIntent.payment_method_options.p24`, `PaymentIntent.payment_method_options.sepa_debit`, `PaymentIntent.payment_method_options.sofort`, and `PaymentIntent.payment_method_options.wechat_pay`\n*   Add support for new values `bbpos_wisepad3` and `stripe_m2` on enums `Terminal.Reader#list.device_type` and `Terminal.Reader.device_type`\n\n### February 9, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `verify_microdeposits` method on resources `PaymentIntent` and `SetupIntent`\n*   Add support for new value `grabpay` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n\n### February 8, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `pin` on `Issuing.Card#update`\n\n### February 3, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `au_becs_debit` on enum `Checkout.Session#create.payment_method_types[]`\n*   Change type of `Refund.reason` from `string` to `enum('duplicate'|'expired_uncaptured_charge'|'fraudulent'|'requested_by_customer')`\n\n### January 25, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `is_vat` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, and `TaxId.type`\n*   Add support for new value `is_vat` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, and `TaxId#create.type`\n*   Change `Checkout.Session.payment_link` to be required\n*   Add support for `phone_number_collection` on `PaymentLink#create` and `PaymentLink`\n*   Add support for new values `payment_link.created` and `payment_link.updated` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### January 19, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `PaymentLink`\n*   Add support for `payment_link` on `Checkout.Session`\n*   Change type of `Charge.status` from `string` to `enum('failed'|'pending'|'succeeded')`\n*   Add support for `bacs_debit` and `eps` on `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#confirm.payment_method_options`, and `PaymentIntent.payment_method_options`\n*   Add support for `image_url_png` and `image_url_svg` on `PaymentIntent.next_action.wechat_pay_display_qr_code`\n\n### January 12, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `paid_out_of_band` on `Invoice`\n*   Add support for `customer_creation` on `Checkout.Session#create` and `Checkout.Session`\n*   Add support for `fpx` and `grabpay` on `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#confirm.payment_method_options`, and `PaymentIntent.payment_method_options`\n\n### December 23, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `mandate_options` on `Subscription#create.payment_settings.payment_method_options.card`, `Subscription#update.payment_settings.payment_method_options.card`, and `Subscription.payment_settings.payment_method_options.card`\n\n### December 22, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `au_becs_debit` on `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#confirm.payment_method_options`, and `PaymentIntent.payment_method_options`\n*   Change type of `PaymentIntent.processing.type` from `string` to `literal('card')`\n\n### December 21, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `en-FR`, `es-US`, and `fr-FR` on enums `PaymentIntent#create.payment_method_options.klarna.preferred_locale`, `PaymentIntent#update.payment_method_options.klarna.preferred_locale`, and `PaymentIntent#confirm.payment_method_options.klarna.preferred_locale`\n*   Add support for `boleto` on `SetupAttempt.payment_method_details`\n\n### December 17, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `processing` on `PaymentIntent`\n\n### December 15, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `PaymentIntentTypeSpecificPaymentMethodOptionsClient`\n*   Add support for `setup_future_usage` on `PaymentIntent#create.payment_method_options.card`, `PaymentIntent#update.payment_method_options.card`, `PaymentIntent#confirm.payment_method_options.card`, and `PaymentIntent.payment_method_options.card`\n\n### December 9, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `metadata` on `BillingPortal.Configuration#create`, `BillingPortal.Configuration#update`, and `BillingPortal.Configuration`\n*   Add support for new values `ge_vat` and `ua_vat` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, and `TaxId.type`\n*   Add support for new values `ge_vat` and `ua_vat` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, and `TaxId#create.type`\n*   Change type of `PaymentIntent#create.payment_method_data.billing_details.email`, `PaymentIntent#update.payment_method_data.billing_details.email`, `PaymentIntent#confirm.payment_method_data.billing_details.email`, `PaymentMethod#create.billing_details.email`, and `PaymentMethod#update.billing_details.email` from `string` to `emptyStringable(string)`\n*   Add support for `giropay` on `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#confirm.payment_method_options`, and `PaymentIntent.payment_method_options`\n*   Add support for new value `en-IE` on enums `PaymentIntent#create.payment_method_options.klarna.preferred_locale`, `PaymentIntent#update.payment_method_options.klarna.preferred_locale`, and `PaymentIntent#confirm.payment_method_options.klarna.preferred_locale`\n\n### November 19, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `wallets` on `Issuing.Card`\n*   Add support for `interac_present` on `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#confirm.payment_method_options`, and `PaymentIntent.payment_method_options`\n*   Add support for new value `jct` on enums `TaxRate#create.tax_type`, `TaxRate#update.tax_type`, and `TaxRate.tax_type`\n\n### November 17, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `AutomaticPaymentMethodsPaymentIntent`\n*   Add support for `automatic_payment_methods` on `PaymentIntent#create` and `PaymentIntent`\n\n### November 15, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `ShippingRate`\n*   Add support for `shipping_options` on `Checkout.Session#create` and `Checkout.Session`\n*   Add support for `shipping_rate` on `Checkout.Session`\n\n### November 12, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `agrobank` on enums `Charge.payment_method_details.fpx.bank`, `PaymentIntent#create.payment_method_data.fpx.bank`, `PaymentIntent#update.payment_method_data.fpx.bank`, `PaymentIntent#confirm.payment_method_data.fpx.bank`, `PaymentMethod#create.fpx.bank`, and `PaymentMethod.fpx.bank`\n\n### November 11, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `expire` method on resource `Checkout.Session`\n*   Add support for `status` on `Checkout.Session`\n\n### November 3, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `ownership_declaration_shown_and_signed` on `Token#create.account`(this API was unused)\n*   Add support for `ownership_declaration_shown_and_signed` on `Token#create.account.company`\n\n### November 1, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `ownership_declaration` on `Account#update.company`, `Account#create.company`, `Account.company`, and `Token#create.account.company`\n*   Add support for `proof_of_registration` on `Account#update.documents` and `Account#create.documents`\n*   Add support for `ownership_declaration_shown_and_signed` on `Token#create.account`\n*   Change type of `Account#update.individual.full_name_aliases`, `Account#create.individual.full_name_aliases`, `Person#create.full_name_aliases`, `Person#update.full_name_aliases`, `Token#create.account.individual.full_name_aliases`, and `Token#create.person.full_name_aliases` from `array(string)` to `emptyStringable(array(string))`\n*   Add support for new values `en-BE`, `en-ES`, and `en-IT` on enums `PaymentIntent#create.payment_method_options.klarna.preferred_locale`, `PaymentIntent#update.payment_method_options.klarna.preferred_locale`, and `PaymentIntent#confirm.payment_method_options.klarna.preferred_locale`\n\n### October 19, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Account.controller.type` to be required\n*   Add support for `buyer_id` on `Charge.payment_method_details.alipay`\n\n### October 15, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `UsageRecord#create.timestamp` from `integer` to `literal('now') | integer`\n*   Change `UsageRecord#create.timestamp` to be optional\n\n### October 14, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Charge.payment_method_details.klarna.payment_method_category`, `Charge.payment_method_details.klarna.preferred_locale`, `Checkout.Session.customer_details.phone`, and `PaymentMethod.klarna.dob` to be required\n*   Add support for new value `klarna` on enum `Checkout.Session#create.payment_method_types[]`\n\n### October 9, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_method_category` and `preferred_locale` on `Charge.payment_method_details.klarna`\n*   Add support for new value `klarna` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for `klarna` on `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, and `PaymentMethod`\n*   Add support for new value `klarna` on enums `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, and `PaymentIntent#confirm.payment_method_data.type`\n*   Add support for new value `klarna` on enum `PaymentMethod#create.type`\n*   Add support for new value `klarna` on enum `PaymentMethod.type`\n\n### October 8, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `list_payment_methods` method on resource `Customer`\n\n### October 7, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `phone_number_collection` on `Checkout.Session#create` and `Checkout.Session`\n*   Add support for `phone` on `Checkout.Session.customer_details`\n*   Change `PaymentMethod#list.customer` to be optional\n*   Add support for new value `customer_id` on enums `Radar.ValueList#create.item_type` and `Radar.ValueList.item_type`\n*   Add support for new value `bbpos_wisepos_e` on enums `Terminal.Reader#list.device_type` and `Terminal.Reader.device_type`\n\n### September 29, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `klarna_payments` on `Account#update.capabilities`, `Account#create.capabilities`, and `Account.capabilities`\n\n### September 24, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `amount_authorized` and `overcapture_supported` on `Charge.payment_method_details.card_present`\n\n### September 16, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `full_name_aliases` on `Account#update.individual`, `Account#create.individual`, `Person#create`, `Person#update`, `Person`, `Token#create.account.individual`, and `Token#create.person`\n\n### September 7, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Account.future_requirements.alternatives`, `Account.requirements.alternatives`, `Capability.future_requirements.alternatives`, `Capability.requirements.alternatives`, `Checkout.Session.after_expiration`, `Checkout.Session.consent`, `Checkout.Session.consent_collection`, `Checkout.Session.expires_at`, `Checkout.Session.recovered_from`, `Person.future_requirements.alternatives`, and `Person.requirements.alternatives` to be required\n*   Change type of `Capability.future_requirements.alternatives`, `Capability.requirements.alternatives`, `Person.future_requirements.alternatives`, and `Person.requirements.alternatives` from `array(AccountRequirementsAlternative)` to `nullable(array(AccountRequirementsAlternative))`\n*   Add support for new value `rst` on enums `TaxRate#create.tax_type`, `TaxRate#update.tax_type`, and `TaxRate.tax_type`\n*   Add support for new value `checkout.session.expired` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### September 1, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `future_requirements` on `Account`, `Capability`, and `Person`\n*   Add support for `alternatives` on `Account.requirements`, `Capability.requirements`, and `Person.requirements`\n*   Change type of `Checkout.Session.after_expiration.recovery.allow_promotion_codes` and `Checkout.Session.after_expiration.recovery.enabled` from `nullable(boolean)` to `boolean`\n\n### August 31, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `after_expiration`, `consent_collection`, and `expires_at` on `Checkout.Session#create` and `Checkout.Session`\n*   Add support for `consent` and `recovered_from` on `Checkout.Session`\n\n### August 26, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `BillingPortal.Configuration#create.features.subscription_cancel.cancellation_reason.options[]`, `BillingPortal.Configuration#update.features.subscription_cancel.cancellation_reason.options[]`, and `BillingPortal.Configuration.features.subscription_cancel.cancellation_reason.options[]` from `string` to `enum`\n\n### August 25, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `cancellation_reason` on `BillingPortal.Configuration.features.subscription_cancel`\n\n### August 24, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `cancellation_reason` on `BillingPortal.Configuration#create.features.subscription_cancel` and `BillingPortal.Configuration#update.features.subscription_cancel`\n\n### August 11, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `locale` on `BillingPortal.Session#create` and `BillingPortal.Session`\n*   Change type of `Invoice.collection_method` and `Subscription.collection_method` from `nullable(enum('charge_automatically'|'send_invoice'))` to `enum('charge_automatically'|'send_invoice')`\n\n### August 4, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Changed type of `PaymentIntent#create.payment_method_options.sofort.preferred_language`, `PaymentIntent#update.payment_method_options.sofort.preferred_language`, and `PaymentIntent#confirm.payment_method_options.sofort.preferred_language` from `enum` to `emptyStringable(enum)`\n\n### July 28, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `account_type` on `BankAccount`, `ExternalAccount#update`, and `Token#create.bank_account`\n\n### July 27, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `category_code` on `Issuing.Authorization.merchant_data` and `Issuing.Transaction.merchant_data`\n*   Add support for new value `redacted` on enum `Review.closed_reason`\n\n### July 22, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `payment_settings` on `Customer#create` and `Customer#update`\n\n### July 21, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `hr`, `ko`, and `vi` on enums `Checkout.Session#create.locale` and `Checkout.Session.locale`\n*   Add support for `payment_settings` on `Customer#create`, `Customer#update`, `Subscription#create`, `Subscription#update`, and `Subscription`\n*   Remove support for values `api_connection_error`, `authentication_error`, and `rate_limit_error` from enums `StripeError.type`, `StripeErrorResponse.error.type`, `Invoice.last_finalization_error.type`, `PaymentIntent.last_payment_error.type`, `SetupAttempt.setup_error.type`, and `SetupIntent.last_setup_error.type`\n*   Add support for `wallet` on `Issuing.Transaction`\n*   Add support for `ideal` on `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#confirm.payment_method_options`, and `PaymentIntent.payment_method_options`\n\n### July 14, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `quote.accepted`, `quote.canceled`, `quote.created`, and `quote.finalized` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### July 12, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `list_computed_upfront_line_items` method on resource `Quote`\n\n### July 8, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `finalize_quote` method on resource `Quote`\n*   Remove support for `finalize` method on resource `Quote`\n\n### July 7, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `Quote`\n*   Changed type of `Charge.payment_method_details.card.three_d_secure.result` and `SetupAttempt.payment_method_details.card.three_d_secure.result` from `enum` to `nullable(enum)`\n*   Changed type of `Charge.payment_method_details.card.three_d_secure.version` and `SetupAttempt.payment_method_details.card.three_d_secure.version` from `enum('1.0.2'|'2.1.0'|'2.2.0')` to `nullable(enum('1.0.2'|'2.1.0'|'2.2.0'))`\n*   Add support for `quote` on `Invoice`\n*   Add support for new value `quote_accept` on enum `Invoice.billing_reason`\n\n### June 30, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   `Invoice#update.payment_settings.payment_method_types[]`, `Invoice#create.payment_settings.payment_method_types[]` and `Invoice.payment_settings.payment_method_types[]` added new enum members: `boleto`\n\n### June 29, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `boleto_payments` on `Account#create.capabilities`, `Account#update.capabilities` and `Account.capabilities`\n*   Added support for `boleto` and `oxxo` on `Session#create.payment_method_options` and `Checkout.Session.payment_method_options`\n*   `Session#create.payment_method_types[]` added new enum members: `boleto and oxxo`\n\n### June 25, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `boleto` on `PaymentMethod#create`, `PaymentIntent.payment_method_options`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#create.payment_method_data`, `Charge.payment_method_details` and `PaymentMethod`\n*   Added support for `boleto_display_details` on `PaymentIntent.next_action`\n*   `TaxId#create.type`, `Invoice.customer_tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Customer#create.tax_id_data[].type`, `Checkout.Session.customer_details.tax_ids[].type` and `TaxId.type` added new enum members: `il_vat`\n*   `PaymentMethod#list.type`, `PaymentMethod#create.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type` and `PaymentMethod.type` added new enum members: `boleto`\n\n### June 18, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   `TaxId#create.type`, `Invoice.customer_tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Customer#create.tax_id_data[].type`, `Checkout.Session.customer_details.tax_ids[].type` and `TaxId.type` added new enum members: `ca_pst_mb, ca_pst_bc, ca_gst_hst and ca_pst_sk`\n\n### June 7, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `tax_id_collection` on `Session#create` and `Checkout.Session`\n*   `Terminal.Reader.location` changed from `string` to `expandable($Terminal.Location)`\n\n### June 4, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `controller` on `Account`\n\n### June 3, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for new resource `TaxCode`\n*   Added support for `automatic_tax` on `SubscriptionSchedule.default_settings`, `SubscriptionSchedule#update.phases[]`, `SubscriptionSchedule#update.default_settings`, `SubscriptionSchedule#create.phases[]`, `SubscriptionSchedule#create.default_settings`, `Subscription`, `Subscription#update`, `Subscription#create`, `Invoice`, `Invoice#upcomingLines`, `Invoice#update`, `Invoice#upcoming`, `Invoice#create`, `Checkout.Session`, `Session#create` and `SubscriptionSchedule.phases[]`\n*   Added support for `customer_update` on `Session#create`\n*   Added support for `tax_behavior` on `SubscriptionSchedule#update.phases[].add_invoice_items[].price_data`, `SubscriptionSchedule#create.phases[].items[].price_data`, `SubscriptionSchedule#create.phases[].add_invoice_items[].price_data`, `SubscriptionItem#update.price_data`, `SubscriptionItem#create.price_data`, `Subscription#update.items[].price_data`, `Subscription#update.add_invoice_items[].price_data`, `Subscription#create.items[].price_data`, `Subscription#create.add_invoice_items[].price_data`, `Price`, `Price#update`, `Price#create`, `InvoiceItem#update.price_data`, `InvoiceItem#create.price_data`, `Invoice#upcomingLines.subscription_items[].price_data`, `Invoice#upcomingLines.invoice_items[].price_data`, `Invoice#upcoming.subscription_items[].price_data`, `Invoice#upcoming.invoice_items[].price_data`, `Session#create.line_items[].price_data` and `SubscriptionSchedule#update.phases[].items[].price_data`\n*   Added support for `tax_code` on `Product#update`, `Product#create`, `Price#create.product_data`, `Plan#create.product[0]`, `Session#create.line_items[].price_data.product_data` and `Product`\n*   Added support for `tax` on `Customer#update`, `Customer#create` and `Customer`\n*   Added support for `customer_details` on `Invoice#upcoming` and `Invoice#upcomingLines`\n*   Added support for `tax_type` on `TaxRate#update`, `TaxRate#create` and `TaxRate`\n\n### May 26, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `documents` on `Person#update`, `Person#create` and `Token#create.person`\n*   `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]` added new enum members: `identity.verification_session.requires_input, identity.verification_session.redacted, identity.verification_session.processing, identity.verification_session.created, identity.verification_session.canceled and identity.verification_session.verified`\n\n### May 19, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `acss_debit` on `PaymentMethod#update`\n*   `Identity.VerificationReport.created` changed from `integer` to `DateTime`\n\n### May 18, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   `Identity.VerificationSession.client_secret` changed from `string` to `nullable(string)`\n\n### May 17, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Removed support for method: `PaymentIntent#verify_microdeposits`\n*   Removed support for method: `SetupIntent#verify_microdeposits`\n\n### May 13, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   New method: `PaymentIntent#verify_microdeposits`\n*   New method: `SetupIntent#verify_microdeposits`\n\n### May 11, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   `Account#update.business_profile.support_url` and `Account#create.business_profile.support_url` changed from `string` to `emptyStringable(string)`\n*   `File.purpose` added new enum members: `finance_report_run, document_provider_identity_document and sigma_scheduled_query`\n\n### May 6, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `reference` on `Charge.payment_method_details.afterpay_clearpay`\n*   Added support for `afterpay_clearpay` on `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#create.payment_method_options` and `PaymentIntent.payment_method_options`\n\n### May 5, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `payment_intent` on `EarlyFraudWarning#list` and `Radar.EarlyFraudWarning`\n\n### May 4, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `currency` on `Checkout.Session.payment_method_options.acss_debit`\n*   Added support for `card_present` on `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#create.payment_method_options` and `PaymentIntent.payment_method_options`\n*   `SubscriptionItem#create.payment_behavior`, `Subscription#update.payment_behavior`, `Subscription#create.payment_behavior` and `SubscriptionItem#update.payment_behavior` added new enum members: `default_incomplete`\n\n### April 21, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   `Account.company.structure`, `Account#create.company.structure`, `Account#update.company.structure` and `Token#create.account.company.structure` added new enum members: `single_member_llc`\n*   `Issuing.Card.shipping.carrier` added new enum members: `dhl and royal_mail`\n\n### April 8, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `acss_debit_payments` on `Account#create.capabilities`, `Account#update.capabilities` and `Account.capabilities`\n*   Added support for `payment_method_options` on `Session#create` and `Checkout.Session`\n*   Added support for `acss_debit` on `SetupIntent#confirm.payment_method_options`, `SetupIntent#update.payment_method_options`, `SetupIntent#create.payment_method_options`, `SetupAttempt.payment_method_details`, `PaymentMethod`, `PaymentMethod#create`, `PaymentIntent.payment_method_options`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#create.payment_method_data`, `Mandate.payment_method_details` and `SetupIntent.payment_method_options`\n*   Added support for `verify_with_microdeposits` on `PaymentIntent.next_action` and `SetupIntent.next_action`\n*   `PaymentMethod#list.type`, `PaymentMethod#create.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `Session#create.payment_method_types[]` and `PaymentMethod.type` added new enum members: `acss_debit`\n\n### April 2, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `subscription_pause` on `Configuration#update.features`, `Configuration#create.features` and `BillingPortal.Configuration.features`\n\n### March 31, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `transfer_data` on `Session#create.subscription_data`\n\n### March 26, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `card_issuing` on `Account#create.settings`, `Account#update.settings` and `Account.settings`\n\n### March 25, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   `Capability.requirements.errors[].code`, `Account.requirements.errors[].code` and `Person.requirements.errors[].code` added new enum members: `verification_missing_owners, verification_missing_executives and verification_requires_additional_memorandum_of_associations`\n*   `Session#create.locale` and `Checkout.Session.locale` added new enum members: `th`\n\n### February 19, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `prices` on `BillingPortal.Configuration.features.subscription_update.products[]`\n*   Added support for new resource `BillingPortal.Configuration`\n*   Added support for `configuration` and `on_behalf_of` on `Session#create` and `BillingPortal.Session`\n*   `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]` added new enum members: `billing_portal.configuration.created and billing_portal.configuration.updated`\n\n### February 17, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `on_behalf_of` on `Invoice#update`, `Invoice#create` and `Invoice`\n*   `PaymentMethod.ideal.bank`, `PaymentMethod#create.ideal.bank`, `PaymentIntent#confirm.payment_method_data.ideal.bank`, `PaymentIntent#update.payment_method_data.ideal.bank`, `PaymentIntent#create.payment_method_data.ideal.bank`, `Charge.payment_method_details.ideal.bank` and `SetupAttempt.payment_method_details.ideal.bank` added new enum members: `revolut`\n*   `PaymentMethod.ideal.bic`, `Charge.payment_method_details.ideal.bic` and `SetupAttempt.payment_method_details.ideal.bic` added new enum members: `REVOLT21`\n*   Added support for `afterpay_clearpay` on `PaymentMethod#create`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#create.payment_method_data`, `Charge.payment_method_details` and `PaymentMethod`\n*   Added support for `adjustable_quantity` on `Session#create.line_items[]`\n*   Added support for `bacs_debit`, `au_becs_debit` and `sepa_debit` on `SetupAttempt.payment_method_details`\n*   `PaymentMethod#list.type`, `PaymentMethod#create.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `Session#create.payment_method_types[]` and `PaymentMethod.type` added new enum members: `afterpay_clearpay`\n\n### February 9, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `afterpay_clearpay_payments` on `Account#create.capabilities`, `Account#update.capabilities` and `Account.capabilities`\n*   Added support for `payment_settings` on `Invoice#update`, `Invoice#create` and `Invoice`\n\n### February 5, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   `LineItem.amount_subtotal` and `LineItem.amount_total` changed from `nullable(integer)` to `integer`\n\n### February 2, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `nationality` on `Person`, `Person#update`, `Person#create` and `Token#create.person`\n*   `TaxId#create.type`, `Invoice.customer_tax_ids[].type`, `Customer#create.tax_id_data[].type`, `Checkout.Session.customer_details.tax_ids[].type` and `TaxId.type` added new enum members: `gb_vat`\n\n### January 22, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   `Issuing.Transaction.type` dropped enum members: ‘dispute’\n*   `LineItem.price` changed from `$Price` to `nullable($Price)`\n\n### January 14, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `dynamic_tax_rates` on `Session#create.line_items[]`\n*   Added support for `customer_details` on `Checkout.Session`\n*   Added support for `type` on `Transaction#list`\n*   Added support for `country` and `state` on `TaxRate#update`, `TaxRate#create` and `TaxRate`\n\n### January 7, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `company_registration_verification`, `company_ministerial_decree`, `company_memorandum_of_association`, `company_license` and `company_tax_id_verification` on `Account#update.documents` and `Account#create.documents`\n\n### December 15, 2020![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `card_present` on `SetupAttempt.payment_method_details`\n\n### December 10, 2020![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `bank` on `PaymentMethod#create.eps`, `PaymentIntent#confirm.payment_method_data.eps`, `PaymentIntent#update.payment_method_data.eps`, `PaymentIntent#create.payment_method_data.eps`, `Charge.payment_method_details.p24`, `Charge.payment_method_details.eps` and `PaymentMethod.eps`\n*   Added support for `tos_shown_and_accepted` on `PaymentIntent#update.payment_method_options.p24`, `PaymentIntent#create.payment_method_options.p24` and `PaymentIntent#confirm.payment_method_options.p24`\n*   Added support for `bacs_debit` on `PaymentMethod#update`\n*   Added support for `application_fee_percent` on `SubscriptionSchedule#update.default_settings`, `SubscriptionSchedule#create.default_settings` and `SubscriptionSchedule.default_settings`\n\n### December 4, 2020![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `documents` on `Account#update` and `Account#create`\n*   `File#list.purpose` and `File.purpose` added new enum members: `account_requirement`\n\n### November 24, 2020![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `account_tax_ids` on `Invoice#update`, `Invoice#create` and `Invoice`\n*   Added support for `sepa_debit` on `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#create.payment_method_options` and `PaymentIntent.payment_method_options`\n\n### November 20, 2020![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `grabpay_payments` on `Account#create.capabilities`, `Account#update.capabilities` and `Account.capabilities`\n\n### November 19, 2020![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `mandate_options` on `SetupIntent#confirm.payment_method_options.sepa_debit`, `SetupIntent#update.payment_method_options.sepa_debit`, `SetupIntent#create.payment_method_options.sepa_debit` and `SetupIntent.payment_method_options.sepa_debit`\n*   `PaymentMethod.type` added new enum members: `card_present and interac_present`\n\n### November 18, 2020![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `grabpay` on `PaymentMethod#create`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#create.payment_method_data`, `Charge.payment_method_details` and `PaymentMethod`\n*   `PaymentMethod#list.type`, `PaymentMethod#create.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `Session#create.payment_method_types[]` and `PaymentMethod.type` added new enum members: `grabpay`\n\nWas this page helpful?\n\nYesNo\n\nNeed help? [Contact Support](https://support.stripe.com/).\n\nJoin our [early access program](https://insiders.stripe.dev/).\n\nCheck out our [product changelog](https://stripe.com/blog/changelog).\n\nQuestions? [Contact Sales](https://stripe.com/contact/sales).\n\nPowered by [Markdoc](https://markdoc.dev)\n\nSign up for developer updates:\n\nSign up\n\nYou can unsubscribe at any time. Read our [privacy policy](https://stripe.com/privacy).",
    "title": "Changelog | Stripe Documentation",
    "description": "Keep track of every change to the Stripe API.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/development/dashboard/request-logs",
    "markdown": "# View API request logs | Stripe DocumentationThe Stripe Docs logo\n\n## Filter API request logs and view log entries in the Developers Dashboard.\n\nWhen you send an API request, Stripe creates an object and logs the request for your account. This page describes how to filter API request logs and view log entries for your account in the Developers Dashboard.\n\n## How requests are logged![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis table describes the different ways Stripe logs an API request for your account.\n\n| Source | API call | Logs |\n| --- | --- | --- |\n| API | When you manually trigger an event with the Stripe CLI. | Logs the API call on the [Logs](https://dashboard.stripe.com/logs) page. |\n| API | When user actions in your app or website result in an API call. | Logs the API call on the [Logs](https://dashboard.stripe.com/logs) page. |\n| API | When you call an API directly with the Stripe CLI. | Logs the API call on the [Logs](https://dashboard.stripe.com/logs) page. |\n| Dashboard | When you call an API by modifying your Stripe resources in the Dashboard. | Logs the API call on the [Logs](https://dashboard.stripe.com/logs) page. |\n\n## View your default API version![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you send requests to Stripe, you may specify an API version with the `Stripe-Version` header. If you don’t specify an API version, Stripe uses your account’s default API version. Use these steps to find all of the API versions used by your account within the last week. If you’re using the latest API version, the version is labeled `Latest`.\n\n1.  Open the [Developers Dashboard](https://dashboard.stripe.com/developers).\n2.  Your account’s default **API version** is labeled `Default`.\n\nTo view a list of versions, see the [API changelog](https://docs.stripe.com/upgrades#api-versions).\n\n## View API requests by source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse these steps to filter requests by an API call source.\n\n1.  Open the [Logs](https://dashboard.stripe.com/logs) page.\n2.  Click **More**.\n3.  In **Source**, select **Dashboard** or **API** to filter requests by source.\n4.  Click **Apply**.\n\n## Find common integration errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse this filter to discover common integration errors by error code and API endpoint.\n\n1.  Open the [Developers Dashboard](https://dashboard.stripe.com/).\n2.  In **Recent errors**, select the filter button ().\n3.  Select an error type.\n4.  Click an error to view the request payload that failed and the reason.\n\n## Filter by resource ID![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you create, update, or delete a Stripe resource using Stripe APIs, Stripe returns a resource ID in the response payload. For example, when you [Create a customer](https://docs.stripe.com/api/customers/create), Stripe returns a customer ID (in `id`), such as `cus_ImZZa3EEvvQQQU`. Use these steps to filter API requests by resource ID.\n\n1.  Open the [Logs](https://dashboard.stripe.com/logs) page.\n2.  Enter the resource ID in the **Filter by resource** ID text field.\n\n## Apply advanced filters![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the inline navigation to filter API requests by **Date**, **Status**, **Method** and **API endpoint**, or apply additional filters to troubleshoot requests. Use these steps to filter API requests by API version, error type, error code, and other filters, such as an IP address.\n\n1.  Open the [Logs](https://dashboard.stripe.com/logs) page.\n2.  Click **More**.\n    *   To filter by version, select an option in the **API version** dropdown menu. For example, `2024-06-20`.\n    *   To filter by error type, select an option in the **Error type** dropdown menu. For example, `card_error`.\n    *   To filter by error message, select an option in the **Error code** dropdown menu. For example, `bank_account_unverified`.\n3.  Click **Apply**.\n\n![Filter by API version](https://b.stripecdn.com/docs-statics-srv/assets/dashboard-api-version.2db0c042c6ecb829a34870d93a452aa1.png)",
    "title": "View API request logs | Stripe Documentation",
    "description": "Filter API request logs and view log entries in the Developers Dashboard.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/event-destinations/eventbridge",
    "markdown": "# Send events to Amazon EventBridge\n\n## Send events to Amazon EventBridgeInvite only\n\n## Consume Stripe events in your AWS infrastructure.\n\n[Amazon EventBridge](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-what-is.html) is a serverless, event-driven service provided by AWS that helps connect your applications together by ingesting, transforming, and delivering events. Integrating with EventBridge using an event destination allows you to receive event data from Stripe directly in your AWS account, instead of handling the traffic and managing integration code logic yourself. When events are received, EventBridge can route them to [20 supported targets](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-targets.html) to process or trigger business automations.\n\nComplete the steps below to receive events in EventBridge. This involves creating a new event destination in Workbench and setting up EventBridge configuration in the [AWS Management Console](https://docs.aws.amazon.com/awsconsolehelpdocs/latest/gsg/learn-whats-new.html).\n\n#### Warning\n\nYou won’t receive any event data in your Amazon EventBridge until you complete each step.\n\n[](#add-eventbridge-destination)\n\n#### Send events in your sandbox\n\nUse your live account or [sandboxes](https://docs.stripe.com/sandboxes) to send events to Amazon EventBridge. This feature isn’t supported in [Legacy Test mode](https://docs.stripe.com/sandboxes#test-mode-data).\n\n1.  Open **Workbench** from the Stripe Dashboard, then click the **Event destinations** tab.\n    \n2.  Click **Create new destination**.\n    \n3.  Select the events that you want to send to Amazon EventBridgeNext, then click **Continue**. If you use [Connect](https://docs.stripe.com/connect), you can select events that you want to receive from your connected accounts by selecting **Events on connected accounts**.\n    \n4.  Select **Amazon EventBridge** as your destination type, then click **Continue**.\n    \n5.  Enter the following information:\n    \n    *   [AWS account ID](https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-identifiers.html): The AWS account that hosts your EventBridge instance for receiving events.\n    *   [AWS region](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/): The AWS region that hosts your EventBridge instance for receiving events.\n    *   _(Optional)_ **Destination name**: A unique name of this event destination resource in Stripe. If you don’t provide one, we generate a random name for you. You can change it later.\n    *   _(Optional)_ **Description**: A description that distinguishes your event destination instance. You can modify this later.\n6.  Click **Create destination**.\n    \n\n[](#associate-partner-event-source)\n\nAfter you set up an event destination, Stripe creates a [partner event source](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_EventSource.html) in the AWS account and region you provided during configuration. To start receiving events, you need to associate this event source with an [event bus](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-bus.html) within 7 days of the event destination’s creation. If you don’t associate it within this time frame, Amazon automatically deletes the pending event source. After an event source is deleted, your Stripe event destination is automatically disabled and you must create a new destination to receive events.\n\n1.  Under **EventBridge** in your [AWS console](https://docs.aws.amazon.com/awsconsolehelpdocs/latest/gsg/learn-whats-new.html), navigate to the [Partner event sources page](https://console.aws.amazon.com/events/home#/partners) that’s listed in the **Integration** section of the left-hand panel.\n\n![Navigate to **Partner event sources**](https://b.stripecdn.com/docs-statics-srv/assets/aws-select-partner-event-source.14ff917248eeb4f333195e6b3a431447.png)\n\n1.  Use the **Region** dropdown list located at the top of the console to select the region you chose when configuring your [event destination in Workbench](https://docs.stripe.com/event-destinations/eventbridge#add-eventbridge-destination).\n\n![Select your AWS region](https://b.stripecdn.com/docs-statics-srv/assets/aws-region.6a68960287ba6356f8e856501295a039.png)\n\n1.  Choose the newly created partner event source in the dropdown. To find the Event Source ARN field in Workbench, select your event destination. Your partner source matches the part of the ARN that reads `event-source/aws.partner/stripe.com/{UNIQUE_ID}`. Then, click **Associate with event bus**.\n\n![Associate the partner event source with event bus](https://b.stripecdn.com/docs-statics-srv/assets/aws-associate-partner-event-source.c89d540961356ff06e3fb095956ba80f.png)\n\n1.  Select permissions you want to grant for this event bus as needed, then click **Associate**.\n\n![Select permissions and finalize association](https://b.stripecdn.com/docs-statics-srv/assets/aws-associate-event-bus.28dcbc4781d814799076258c8f1b9a04.png)\n\n[](#create-evenbridge-rule)\n\nEventBridge groups and routes events based on [rules](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-rules.html) you define. After you create an event destination and associate its partner event source to an event bus, you must define rules to make sure that EventBridge knows how to handle the events it receives on the event bus. You can repeat these steps multiple times to define multiple rules.\n\n1.  Navigate to the AWS management console, then click [Rules](https://console.aws.amazon.com/events/home#/events).\n\n![Navigate to **Rules**](https://b.stripecdn.com/docs-statics-srv/assets/aws-select-rules.f385d0e668caafc9614584e2ae635138.png)\n\n1.  Click **Create Rule**, then provide a rule name and description.\n\n![Provide rule name and description](https://b.stripecdn.com/docs-statics-srv/assets/aws-define-rule.ce885bcbea4d7492f082eba2f38fd840.png)\n\n1.  Select your event bus from the dropdown. To find your event bus, navigate to Workbench, select your destination in the **Event destination** tab, then view the **Event source ARN** field, which shares the same name as your event source ARN. Then, click **Next**.\n2.  Under **Event source**, select **AWS events or EventBridge partner events** because Stripe events are partner events.\n\n![Select event source](https://b.stripecdn.com/docs-statics-srv/assets/aws-event-source.29ee4d4e795b0f7d89db7163ab7b9ac5.png)\n\n1.  _(Optional)_ Include a sample Stripe event.\n2.  Under **Creation Method**, choose **Use pattern form** to use a predefined pattern. Alternatively, you can create a custom event pattern.\n\n![Use a predefined rule patter](https://b.stripecdn.com/docs-statics-srv/assets/aws-create-rule-pattern.3246a6c5a409b1b0571f56acc6e7b91b.png)\n\n1.  Under **Event Pattern**, select **EventBridge partners** as the **Event Source**.\n2.  Under **Event Pattern**, select **Stripe** as the **Partner**.\n3.  Select the appropriate event type you want to create a rule for or select **All events** to match this rule to all event types, then click **Next**.\n4.  Select the [target](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-targets.html) you want this rule to send events to, then click **Next**.\n\n#### Recommendation\n\n![Select rule target](https://b.stripecdn.com/docs-statics-srv/assets/aws-select-target.d9da569a26cf0d6fcc81f753b16d0e60.png)\n\n1.  Add optional tags, then click **Next**.\n2.  Review your rule and make changes as needed, then click **Create Rule**.\n\nYour Stripe events are now successfully delivered to EventBridge and its corresponding targets defined in your rule.\n\n## Trigger test events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo send test events, trigger an event type that your webhook is subscribed to by manually creating an object in the Stripe Dashboard. Alternatively, you can use the following command in either [Stripe Shell](https://docs.stripe.com/stripe-shell/overview) or [Stripe CLI](https://docs.stripe.com/stripe-cli).\n\nThis example triggers a `payment_intent.succeeded` event:\n\n`stripe trigger payment_intent.succeeded Running fixture for: payment_intent Trigger succeeded! Check dashboard for event details.`\n\nLearn how to trigger events with [Stripe for VS Code](https://docs.stripe.com/stripe-vscode).\n\n## Event delivery behaviors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis section helps you understand different behaviors to expect regarding how Stripe sends events to Amazon EventBridge.\n\n### Automatic retries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe attempts to deliver events to your destination for up to three days with an exponential back off in live mode. View when the next retry will occur, if applicable, in your event destination’s **Event deliveries** tab. We retry event deliveries created in a sandbox three times over the course of a few hours. If your destination has been disabled or deleted when we attempt a retry, we prevent future retries of that event. However, if you disable and then re-enable the event destination before we’re able to retry, you still see future retry attempts.\n\n### Manual retries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo manually retry event deliveries through the **Events** tab for an event destination, click the **Retry now** button in the **Delivery attempts** section.\n\n### Event ordering![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe doesn’t guarantee the delivery of events in the order that they’re generated. For example, creating a subscription might generate the following events:\n\n*   `customer.subscription.created`\n*   `invoice.created`\n*   `invoice.paid`\n*   `charge.created` (if there’s a charge)\n\nMake sure that your event destination isn’t dependent on receiving events in a specific order. Be prepared to manage their delivery appropriately. You can also use the API to retrieve any missing objects. For example, you can retrieve the invoice, charge, and subscription objects with the information from `invoice.paid` if you receive this event first.\n\n### API versioning![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe API version in your account settings when the event occurs dictates the API version, and therefore the structure of an [Event](https://docs.stripe.com/api/v1/events) sent to your destination. For example, if your account is set to an older API version, such as 2015-02-16, and you change the API version for a specific request with [versioning](https://docs.stripe.com/api#versioning), the [Event](https://docs.stripe.com/api/v1/events) object generated and sent to your destination is still based on the 2015-02-16 API version. You can’t change [Event](https://docs.stripe.com/api/v1/events) objects after creation. For example, if you update a charge, the original charge event remains unchanged. As a result, subsequent updates to your account’s API version don’t retroactively alter existing [Event](https://docs.stripe.com/api/v1/events) objects. Retrieving an older [Event](https://docs.stripe.com/api/v1/events) by calling `/v1/events` using a newer API version also has no impact on the structure of the received event. You can set test event destinations to either your default API version or the latest API version. The [Event](https://docs.stripe.com/api/v1/events) sent to the destination is structured for the event destination’s specified version.\n\n## Event destination statuses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAmazon EventBridge destination types have several status that describe its readiness to receive events:\n\n*   **Active**: The Amazon EventBridge instance is associated with an event bus successfully. If you’ve properly configured an EventBridge rule, you can receive the events in your desired event consumers.\n*   **Disabled**: Stripe isn’t sending Amazon EventBridge events. This might happen when you manually disabled or automatically disabled by Stripe. Similar to other destination types, you can manually disable Amazon EventBridge destinations. Re-enable destinations that you manually disable at any time to continue receiving events. Stripe might also automatically disable Amazon EventBridge destinations. This happens when a partner event source is deleted. Users can manually delete partner event sources in AWS, or Amazon might delete them automatically. Amazon deletes them automatically if you don’t associate the event source with an event bus within 7 days after event destination creation. When a partner source deletion automatically disables an event destination, you can’t re-enable the event destination. If you want to continue sending events to your AWS account, you need to create a new event destination.\n*   **Pending**: After the event destination successfully creates a partner event source in AWS, you need to associate that event source with an event bus. The destination remains in a pending state and won’t receive any events until you make this association, at which point the status of the destination changes to active.\n\n## Event structure![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEventBridge uses its own [event structure](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-events-structure.html) that wraps the Stripe `event` JSON object within a top-level `detail` field.\n\nThis example is a `customer.created` event payload from EventBridge:\n\n`{    \"version\":\"0\",    \"id\":\"17e8dff5-d6cd-3770-ace9-aeac02b6ac3f\",    \"detail-type\":\"customer.created\",    \"source\":\"aws.partner/stripe.com/ed_61PgtRTG5aTCIz98516PLsRGLISQK0Otk6FWKjBrcDia\",    \"account\":\"506417113029\",    \"time\":\"2024-03-07T18:27:56Z\",    \"region\":\"us-west-2\",    \"resources\":[`\n\n## Event types that change their behaviors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome event types alter their behaviors based on how you acknowledge them. When using EventBridge, these changes are either unsupported or might involve modified behaviors because Amazon EventBridge manages the acknowledgments.\n\n*   You can’t subscribe to the `issuing_authorization.request` event type in EventBridge. Instead, set up a [webhook endpoint](https://docs.stripe.com/webhooks) to subscribe to this event. Use `issuing_authorization.request` to authorize purchase requests in real-time. This requires your destination to approve or decline requests by responding to the event. EventBridge automatically returns a `200` status code when receiving any event. As a result, this event type can’t correctly authorize any payments.\n*   You can subscribe to `checkout_sessions.completed` when using Amazon EventBridge. However, this doesn’t [handle redirect behavior](https://docs.stripe.com/checkout/fulfillment#redirect-hosted-checkout) because Stripe-hosted [Checkout](https://docs.stripe.com/payments/checkout) doesn’t consider acknowledgement from EventBridge to redirect the user. To handle redirect behavior, process this event type with a webhook endpoint.\n\n## Common architecture patterns with EventBridge and Stripe events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConsider the following architectural patterns when you use Amazon EventBridge with Stripe:\n\n*   **Trigger serverless functions with [Lambda](https://aws.amazon.com/lambda/) to define business automations**: Send Stripe events from EventBridge to Lambda to trigger serverless compute functions, such as creating a shipping label after a payment succeeds.\n*   **Enable event monitoring with [CloudWatch](https://aws.amazon.com/cloudwatch/)**: Send events from EventBridge to CloudWatch Logs to store events as log data that you can interactively search and analyze. Monitor usage patterns and errors with CloudWatch. Consider setting up alerts for errors (for example, when an EventBridge rule is broken).\n*   **Trigger low and no code workflows with [Step Functions](https://aws.amazon.com/step-functions/)**: Send events to a StepFunction workflow that trigger your business scenarios, such as notifying your customers that their trial is about to end.\n*   **Fan out events to internal systems with [Simple Notification Service (SNS)](https://aws.amazon.com/sns/) or [Simple Queue Service (SQS)](https://aws.amazon.com/sqs/)**: Send Stripe events to SNS or SQS to fan out Stripe event data to your internal teams to make sure that they can own and process them.",
    "title": "Send events to Amazon EventBridge | Stripe Documentation",
    "description": "Consume Stripe events in your AWS infrastructure.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/v1/events",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/stripe-data/query-stripe-fees-data",
    "markdown": "# Query Stripe fees data | Stripe DocumentationThe Stripe Docs logo\n\n## Use Sigma or Data Pipeline to retrieve information about your Stripe fees.\n\nUse the `itemized_fees` table to get a comprehensive, granular breakdown of every fee charged or deducted from your Stripe balance. For example, if a balance transaction indicates a 2 USD fee for a card payment, you can query this transaction within the `itemized_fees` table to understand the breakdown. You can also use the table to understand the total fees paid to Stripe in a given period of time.\n\nHere is the list of columns available in the `itemized_fees` table:\n\n| Column | Description |\n| --- | --- |\n| balance\\_transaction\\_created | Time (in UTC) at which the balance transaction affected your Stripe balance. |\n| balance\\_transaction\\_id | The ID of the balance transaction that debited the fee from your balance. |\n| balance\\_transaction\\_description | The description of the balance transaction containing the fee. |\n| incurred\\_by | The ID of the object that incurred this fee, if any. Use the `incurred_by_type` field to determine the type of this object. |\n| incurred\\_by\\_type | The object type which `incurred_by` references. Matches the object field in the API ([Charge](https://docs.stripe.com/api/charges), [Refund](https://docs.stripe.com/api/refunds), [Invoice](https://docs.stripe.com/api/invoices), etc). |\n| amount | Fee incurred for this activity, expressed in major units of the currency. The amount excludes the tax amount. |\n| tax | Tax component of the fees paid, expressed in major units of the currency. |\n| currency | Three-letter [ISO code for the currency](https://docs.stripe.com/currencies) in which the amount and tax are defined. |\n| incurred\\_at | Time (in UTC) at which the fee was incurred, by the date of its originating event. |\n| activity\\_start\\_date | For fees calculated from activity spanning a period of time, this will be the activity’s starting date (in UTC). |\n| activity\\_end\\_date | For fees calculated from activity spanning a period of time, this will be the activity’s ending date (in UTC). |\n| product\\_feature\\_description | The product or feature associated with the fee. |\n\nThe following example shows how to extract information about the five most recent fee transactions:\n\n`select   date_format(date_trunc('day', incurred_at), '%m-%d-%Y') as day,   balance_transaction_id,   amount,   tax,   product_feature_description from   itemized_fees order by   incurred_at desc limit 5;`\n\nTo get a more granular view of your activity, join the `itemized_fees` table with other tables in the schema . For example, join the `balance_transactions` table with the `itemized_fees` table to retrieve fee information for each balance transaction.\n\nHere is an example of how to join these tables together, returning different types of fees applied, and detailed descriptions of the fees:\n\n`select   date_format(date_trunc('day', itemized_fees.balance_transaction_created), '%m-%d-%Y') as day,   balance_transactions.id as balance_transaction_id,   balance_transactions.reporting_category as reporting_category,   itemized_fees.amount as fee_amount,   itemized_fees.tax as tax_amount from   balance_transactions inner join   itemized_fees on balance_transactions.id = itemized_fees.balance_transaction_id order by   day desc limit 5;`\n\n## Fees paid by connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you have a platform account with Stripe Connect, use the `connected_account_itemized_fees` table to get insight on fees paid by your connected accounts.\n\nLike the `itemized_fees table`, the `connected_account_itemized_fees` table provides a granular record of fee transactions, but from the perspective of your connected accounts. These datasets mostly share common attributes, though the `connected_account_itemized_fees` dataset has an additional `account` column. This `account` column enables platform accounts to track and report on the fees paid by each of their connected accounts.\n\nTo identify all fee transactions associated with a specific connected account over a particular time period, use the `connected_account_itemized_fees` table . Here’s an example of a query that can retrieve the top 10 connected accounts based on the total fees they have paid:\n\n`select   account,   sum(amount) as total_fees from   connected_account_itemized_fees where   incurred_at between 'start_date' and 'end_date' group by   account order by   total_fees desc limit 10;`\n\nReplace `start_date` and `end_date` with the specific dates you want to analyze in the format `YYYY-MM-DD`. This query sums the total fees paid by each connected account within the specified date range and returns the top 10 accounts with the highest total fees.",
    "title": "Query Stripe fees data | Stripe Documentation",
    "description": "Use Sigma or Data Pipeline to retrieve information about your Stripe fees.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/global",
    "markdown": "# Integrating globally | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to integrate Issuing in different countries.\n\n[Get in touch](https://stripe.com/contact/sales) to set up Issuing in any of the following countries:\n\nAustria\n\nBelgium\n\nCroatia\n\nCyprus\n\nEstonia\n\nFinland\n\nFrance\n\nGermany\n\nGreece\n\nIreland\n\nItaly\n\nLatvia\n\nLithuania\n\nLuxembourg\n\nMalta\n\nNetherlands\n\nPortugal\n\nSlovakia\n\nSlovenia\n\nSpain\n\nUnited Kingdom\n\nUnited States\n\n### Where can cards be issued?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can issue cards to companies and individuals who reside in the same country where your business is established. If your business is established in the euro area, you can issue cards to any company or individual residing in any euro area country.\n\n### Where can cards be used?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCards can be used anywhere your chosen card network (Visa or Mastercard) is accepted. They are denominated in USD, EUR, or GBP depending on your business location, and automatic currency conversion occurs as necessary.",
    "title": "Integrating globally | Stripe Documentation",
    "description": "Learn how to integrate Issuing in different countries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-data/schedule-queries",
    "markdown": "# Schedule queries | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to schedule queries in Sigma that run on a recurring basis.\n\nYou can automate your Sigma queries by scheduling them to run on a daily, weekly, or monthly basis. Results for each scheduled query are sent with an [email](#subscribers) to specified team members or as [webhook events](#receiving-results-as-webhooks).\n\n## Scheduling a query![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith a query loaded into the editor, click **Schedule**. We recommend you uniquely name all your scheduled queries to avoid confusion. If your query doesn’t already have a name (or you wish to modify it), you can update it during the scheduling process.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/scheduled-query-sample.1725f09555d262a2bfe0be7385118d71.png)\n\n### Schedule![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach scheduled query can be run on a daily, weekly, or monthly basis. Queries run as soon as the data for that period is available.\n\n| Schedule | Description |\n| --- | --- |\n| Daily | Queries run as soon as the data for each day (ending at 12:00am UTC) is processed. Query results for the previous day are usually available by 2pm UTC. |\n| Weekly | Queries run every week as soon as the data for the previous week (ending on Sunday at 12:00am UTC) is processed. Query results for the previous week are usually available by 2pm UTC the following Monday. |\n| Monthly | Queries run every month as soon as the data for the previous month (ending at 12:00am UTC) is processed. Query results for the previous month are usually available by 2pm UTC on the 1st of the month. |\n\n## Subscribers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreators of scheduled queries are added as subscribers to email notifications by default. To notify other [team members](https://docs.stripe.com/get-started/account/teams) as well, enter their email addresses. Results sent with an email include the name and date of the scheduled query, and a link to download the results in CSV format. To preview what the email looks like, click **Preview email**.\n\nYou or your team members can stop receiving notifications at any time by clicking the **Unsubscribe** link in the email. You can also edit the scheduled query in the Dashboard and add or remove subscribers.\n\n### Timeline![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBased upon your chosen schedule, the timeline displays the date your query runs next, and the processing date of the data it uses (additional time is required to make your account data available to query).\n\nManaging scheduled queries Upcoming scheduled queries are displayed under **Scheduled** within the **Queries** tab. Schedules are grouped based on whether they were created by you or other members of your team.\n\nTo edit a scheduled query, select it and click **Edit schedule**. To delete it, click **—** and select **Delete**.\n\n### Receiving results as webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you make use of [webhooks](https://docs.stripe.com/webhooks), you can receive notifications for scheduled queries as webhook events. For example, Stripe sends the `sigma.scheduled_query_run.created` event each time a scheduled query is run. See below for a sample event.\n\nThe `data.object.file.url` subfield of the webhook payload contains the URL where you can access the results file **using your live secret API key**. For example, if your server received the webhook below, it could download the results using this `curl` command:\n\n`curl https://files.stripe.com/v1/files/{{ FILE ID }}/contents -u sk_live_XXXXXXX:`\n\nFor more on how to integrate webhooks, see our [webhook documentation](https://docs.stripe.com/webhooks).\n\n`// Sample payload of a sigma.scheduled_query_run.created webhook  {   \"object\": \"event\",   \"pending_webhooks\": 2,   \"created\": 1504794194,   \"type\": \"sigma.scheduled_query_run.created\",   \"livemode\": true,   \"request\": null,   \"data\": {     \"object\": {       \"id\": \"sqr_7YLDqqvxgFLPwKR4h0oM\",       \"object\": \"scheduled_query_run\",       \"status\": \"completed\",       \"data_load_time\": 1504656000,       \"file\": {         \"id\": \"{{ FILE ID }}\",         \"object\": \"file\",         \"url\": \"https://files.stripe.com/v1/files/{{ FILE ID }}/contents\",         \"created\": 1507841188,         \"purpose\": \"sigma_scheduled_query\",         \"size\": 53075,         \"type\": \"csv\"       },       \"title\": \"Scheduled Query Example\",       \"sql\": \"SELECT count(*) FROM charges WHERE created >= date('2017-01-01')\",       \"created\": 1504794194,       \"result_available_until\": 1505398933,       \"error\": null,       \"livemode\": true     }   } }`",
    "title": "Schedule queries | Stripe Documentation",
    "description": "Learn how to schedule queries in Sigma that run on a recurring basis.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/choose-cards",
    "markdown": "# Choose which type of card to issue\n\n## Decide on physical or virtual cards for your cardholders.\n\nStripe offers several options for the types of cards that can be issued to cardholders. This page describes these options at a high level, including tradeoffs and use cases for each.\n\nYou can issue multiple card types simultaneously for your card program and can also transition to different options as your business needs change. For example, if you wanted to create a custom card, you could issue an instant physical card while you’re working with the Stripe team to manufacture your custom design. The following options aren’t mutually exclusive.\n\n|     | Virtual cards | Physical cards |\n| --- | --- | --- |\n| **Overview** | Cards with no physical representation, but which include all the card information required for digital transactions. [Read more about virtual cards](https://docs.stripe.com/issuing/cards/virtual). | Cards that can be physically personalized and shipped to cardholders. [Read more about physical cards](https://docs.stripe.com/issuing/cards/physical). |\n| **Best for** | Virtual cards are best for use cases where card transactions are expected to be completely digitized, or if you plan to use your card to complete a backend process, such as fulfilling a customer’s order with a third party. Examples of use cases that would benefit from virtual cards would be B2B payments (a business is paying a supplier for a good or service) or buy now, pay later payments (a business is paying a merchant). | Physical cards are best when you expect to support a high degree of in-person point-of-sale transactions and you don’t want to rely on digital wallets alone. Use cases such as fleet or contractor purchases or expense management often require virtual cards. |\n| **Customization** | Not applicable for virtual cards. | Physical cards have two customization options:<br><br>*   Standard cards-black or white templated cards that you can personalize with your business name or logo and instantly send to cardholders. These are best if you want to prioritize speed-to-market, if basic branding is sufficient for your cardholders, or if you need to issue only a few cards.<br>*   Custom cards-you can fully customize cards to best feature your branding goals. These are best if your physical card is a core identifier of your business or if you want to build brand affinity with your cardholders. However, custom cards are subject to minimum orders of 2,500 cards and require significant planning and investment.<br><br>For more on the types of physical cards available, see [Physical cards](https://docs.stripe.com/issuing/cards/physical). |\n| **Creating cards** | Virtual cards can be created using the Dashboard or API. Once created, cards are immediately generated and available for use. | You can create physical cards using the Dashboard or API. After they’re created, cards are printed and shipped out within a few days. From there, time of delivery to the cardholder depends on the shipping speed you choose. See [Shipping your cards](https://docs.stripe.com/issuing/cards/physical/standard#shipping-your-cards) for more details.<br><br>_Note: Custom cards must be manufactured, tested, and stocked in inventory before they can be printed out and shipped. Lead times and prices will vary depending on the level of customization. See [Stripe Support](https://support.stripe.com/topics/issuing) for more details._ |\n| **Cost** | Virtual cards are 0.10 USD each in the US, 0.10 GBP in the UK and 0,10 EUR in the EU. | Standard cards are 3 USD each in the US, 3 GBP in the UK, and 3 EUR in the EU. Shipping costs apply for each region.<br><br>Custom card prices depend on the level of customization of your card design. See [Stripe Support](https://support.stripe.com/topics/issuing) for more details. |\n| **Digital Wallet support** | [Digital wallets](https://docs.stripe.com/issuing/cards/digital-wallets) support all of our card types. A cardholder can add a representation of your virtual or physical card to their digital wallet for Apple Pay, Google Pay, or Samsung Pay. Because of market variations, the lead times for digital wallets vary depending on region and might require partnering with Stripe. See [Stripe Support](https://support.stripe.com/topics/issuing) for more details. |     |",
    "title": "Choose which type of card to issue | Stripe Documentation",
    "description": "Decide on physical or virtual cards for your cardholders.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/atlas/partner-benefits",
    "markdown": "# Stripe Atlas partner benefits | Stripe DocumentationThe Stripe Docs logo\n\n## Access exclusive benefits through Stripe Atlas.\n\nStripe Atlas provides additional benefits to its users beyond helping them create a US company and obtain a US tax ID for the company. Stripe Atlas founders can activate a Stripe account, open a bank account with one of our banking partners, access free credits, and receive exclusive access to free products and discounted pricing from our partners (including up to 100,000 USD in credits).\n\nBe aware that our partners might have specific rules and expiration dates for offers relevant to their program—check with each benefit partner for the terms of each benefit.\n\n## Legal and bookkeeping ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Atlas users have access to legal guides and free annotated legal templates that you can customize for your company’s next steps after incorporation. You can find these in your [Dashboard](https://dashboard.stripe.com/atlas/resources). You also have access to a network of startup attorneys who can provide a short free consultation and flat-rate legal packages for Atlas users. You can contact us after forming your company to get in touch with our partner law firms.\n\nYou also have access to bookkeeping services at preferred pricing. To sign up for bookkeeping services, use the Dashboard after you form your company. See our guide on [bookkeeping and account](https://stripe.com/atlas/guides/bookkeeping-and-accounting) for more information.\n\n## Additional perks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAtlas provides recommendations and partner discounts to help you choose the best tools for your business. After incorporating, you can see recommendations for handling your company’s finances and cap table, and operations and engineering functions (including AWS credits). Perks and eligibility vary by partner.\n\n## Stripe Atlas Community ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Atlas members join the Stripe Atlas community, a global community of entrepreneurs where members can connect with founders and get practical advice. You’ll get access to the community after you receive your company’s EIN. After we grant you access, use your Stripe account details to log in. If you have co-founders, you can grant them access to the Stripe Atlas Community by [making them administrators](https://docs.stripe.com/get-started/account/teams/roles) of your Stripe account.",
    "title": "Stripe Atlas partner benefits | Stripe Documentation",
    "description": "Access exclusive benefits through Stripe Atlas.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-data/access-data-in-warehouse/cloud-storage",
    "markdown": "# Access data in your cloud storage destination with Data Pipeline\n\n## Sync your Stripe account with Google Cloud Storage, Azure Blob Storage, and other data storage services.\n\nWhen you set up Data Pipeline, Stripe sends [Parquet](https://parquet.apache.org/) files to your owned cloud storage location, such as Google Cloud Storage or Azure Blob Storage. After the initial load, your Stripe data [refreshes regularly](https://docs.stripe.com/stripe-data/available-data), delivering a new full load of your data every 6 hours.\n\n### Supported Destinations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Google Cloud Storage](https://docs.stripe.com/stripe-data/access-data-in-warehouse/cloud-storage/google-cloud-storage)\n*   [Azure Blob Storage](https://docs.stripe.com/stripe-data/access-data-in-warehouse/cloud-storage/azure-blob-storage)",
    "title": "Access data in your cloud storage destination with Data Pipeline | Stripe Documentation",
    "description": "Sync your Stripe account with Google Cloud Storage, Azure Blob Storage, and other data storage services.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-data/query-issuing-data",
    "markdown": "# Query Issuing data | Stripe DocumentationThe Stripe Docs logo\n\n## Use Sigma or Data Pipeline to retrieve information about Issuing.\n\nThe Issuing objects represented within Sigma or Data Pipeline includes [Authorizations](https://docs.stripe.com/api/issuing/authorizations/object), [Transactions](https://docs.stripe.com/api/issuing/transactions/object), [Cards](https://docs.stripe.com/api/issuing/cards/object), and [Cardholders](https://docs.stripe.com/api/issuing/cardholders/object). Issuing-specific tables can be found within the Issuing section of the schema.\n\nIssuing data for your connected accounts can be found within tables prefaced with `connected_account_`, for example,`connected_account_issuing_authorizations`. More information about using [Connect](https://docs.stripe.com/connect \"Connect\") with Sigma or Data Pipeline can be found in the [Connect](https://docs.stripe.com/stripe-data/query-connect-data) section of the documentation.\n\nWhenever an issued card is used to make a purchase, an [Authorization](https://docs.stripe.com/api/issuing/authorizations/object) object is created. Each row within the `issuing_authorizations` table represents data about this object. The same information can be retrieved through the API and is available in the [Stripe Dashboard](https://dashboard.stripe.com/test/issuing/authorizations). Note that the [request history](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-request_history) field isn’t currently available. Every authorization that has been created on your account is available in Sigma or Data Pipeline.\n\nThe `card_id` column of this table stores the ID of the card used to make the purchase. You can find additional information about the card that initiated the authorization by joining the column with the `issuing_cards` table.\n\nTo access the transactions associated with a particular authorization, you can join the `authorization_id` column in the `issuing_transactions` table.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/issuing-authorization.a2435f764c18d190f70797814eb62878.svg)\n\nThe following query computes counts of authorizations grouped by approval status.\n\n`select   date_trunc('month', created) as month,   count(case when approved then 1 end) as num_approved_authorizations,   count(*) as total_num_authorizations from issuing_authorizations where date_trunc('month', created) between date_trunc('month', date_add('month', -13, date(data_load_time)))                                         and date_trunc('month', date_add('month', -1, date(data_load_time))) group by 1 order by 1 desc, 2 limit 2`\n\n| month | approved | num\\_authorizations |\n| --- | --- | --- |\n| 2024-07-01 | false | 506 |\n| 2024-07-01 | true | 10,045 |\n\n## Transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAn Issuing [Transaction](https://docs.stripe.com/api/issuing/transactions/object) object represents any use of an issued card that results in funds entering or leaving your Stripe account, such as a completed purchase or refund. The `issuing_transactions` table stores information about these objects. You can retrieve the same information through the API, and it’s also available in the [Stripe Dashboard](https://dashboard.stripe.com/test/issuing/transactions).\n\nFor additional details about the transaction, such as the fee, you can access the associated [balance transaction](https://docs.stripe.com/api#balance_transaction_object). You can do this by joining the `balance_transaction_id` column with the `id` column of the `balance_transactions` table. Balance transactions are not Issuing-specific objects. More information about working with balance transactions in Sigma or Data Pipeline can be found in the [Transactions](https://docs.stripe.com/stripe-data/query-transactions) section of the documentation.\n\nThe `authorization_id` column allows you to access the [Authorization](https://docs.stripe.com/api/issuing/authorizations/object) object associated with the Transaction by joining on the `id` column of the `issuing_authorizations` table. This can provide additional details about how the transaction was authorized. The `authorization_id` column on an Issuing transaction can be empty in the event of [force capture](https://docs.stripe.com/issuing/purchases/transactions#handling-other-transactions) and for some instances of [refunds](https://docs.stripe.com/issuing/purchases/transactions).\n\nYou can also access both the card and cardholder involved in the transaction via the `card_id` and `cardholder_id` columns. Information about the card is stored in the `issuing_cards` table, and information about the cardholder is stored in the `issuing_cardholders` table. The [Card](https://docs.stripe.com/api/issuing/cards/object) and [Cardholder](https://docs.stripe.com/api/issuing/cardholders/object) objects can provide additional details about who initiated the transaction.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/issuing-transaction.64c38a1e0dfaec61d29a8a967a24efc8.svg)\n\nThe following query returns information about the three most recent [over captures](https://docs.stripe.com/issuing/purchases/transactions#handling-other-transactions). It joins the `issuing_authorizations` table to determine if this transaction is an over capture by comparing the amounts of the two objects.\n\n`select   date_format(it.created, '%Y-%m-%d') as day,   it.id,   ia.amount as authorized_amount,   -1 * it.amount as captured_amount from issuing_transactions it join issuing_authorizations ia on it.authorization_id=ia.id where   it.type='capture' and   -1 * it.amount > ia.amount --- This checks if this transaction was overcaptured order by day desc limit 3`\n\n| day | id  | authorized\\_amount | captured\\_amount |\n| --- | --- | --- | --- |\n| 2024-07-12 | ipi\\_b86KiVXNVH5X8s9 | 150 | 151 |\n| 2024-07-12 | ipi\\_niApqreR0hhcAmy | 0   | 1,000 |\n| 2024-07-12 | ipi\\_KklDQ2I5J0Ir243 | 1450 | 1050 |\n\nOne of the benefits of using Sigma or Data Pipeline with Issuing is the ability to aggregate data. The following example joins the `balance_transactions` table and aggregates each of the types of fees for Issuing transactions by month.\n\n`select   date_trunc('month', it.created) as month,   fd.type as fee_type,   sum(fd.amount) as net_fees,   sum(it.amount) as net_amount from issuing_transactions it inner join balance_transactions bt on bt.id=it.balance_transaction_id inner join balance_transaction_fee_details fd on fd.balance_transaction_id=bt.id group by 1,2 order by month desc, fee_type`\n\n| month | fee\\_type | net\\_fees | net\\_amount |\n| --- | --- | --- | --- |\n| 2024-07-01 | stripe-fee | 590 | 10,000 |\n| 2024-08-01 | stripe-fee | 59  | 1,000 |\n| 2024-09-01 | stripe-fee | 590 | 10,000 |\n\n## Cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `issuing_cards` table contains data about an individual [Card](https://docs.stripe.com/api/issuing/cards/object) object. The same information is available through the API and within the [Stripe Dashboard](https://dashboard.stripe.com/test/issuing/cards). The [spending controls](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-spending_controls) field isn’t currently available.\n\nEvery issued card has an associated [Cardholder](https://docs.stripe.com/api/issuing/cardholders), which can be accessed by joining the `issuing_cardholders` table on the `cardholder_id` column.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/issuing-card.bde34e4a064958836ff7c665a3e71814.svg)\n\n## Cardholders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Cardholder](https://docs.stripe.com/api/issuing/cardholders/object) data is stored within the `issuing_cardholders` table. The same information can be retrieved through the API or with the [Stripe Dashboard](https://dashboard.stripe.com/test/issuing/cardholders). The [spending controls](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-spending_controls) field isn’t currently available.\n\nThis table can be joined to other tables to provide information about the entity that initiated a transaction or owns an issued card.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/issuing-cardholder.ad6a5836bbdf5b37f497cddace2e1e01.svg)\n\nThe following example retrieves information about the three most recently created active cardholders.\n\n`select   date_format(created, '%Y-%m-%d') as day,   id,   email,   type from issuing_cardholders where status='active' limit 3`\n\n| day | id  | email | type |\n| --- | --- | --- | --- |\n| 2024-07-01 | ich\\_ZcjwaDfnTE5lm0C | j.smith@example.com | individual |\n| 2024-07-01 | ich\\_tuEV6PZYTlT1m4S | entity@example.com | business\\_entity |\n| 2024-07-01 | ich\\_I61SVldhLl1BTs2 | j.doe@example.com | individual |\n\n### Metadata![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMetadata for each Issuing object is stored in a separate table. The names of these tables is the name of the object’s table with the addition of `_metadata` to the end, for example, `issuing_transactions_metadata`. The metadata table contains a foreign key to the corresponding object in the primary table that you can use to join the two tables. For example, every row in the `issuing_transactions_metadata` table has the column `issuing_transaction_id` that references the `id` column of a row in the `issuing_transactions` table.\n\nThe following example creates a dictionary from the `issuing_transactions` table’s metadata table. It then uses it to access the value of the metadata key `'my_label'` for several transactions.\n\n`with transactions_metadata_dictionary as (   select     issuing_transaction_id,     map_agg(key, value) metadata_dictionary   from issuing_transactions_metadata   group by 1 )  select   date_format(it.created, '%Y-%m-%d') as day,   it.id,   it.amount,   metadata_dictionary['my_label'] as my_label_value from issuing_transactions it left join transactions_metadata_dictionary   on it.id = transactions_metadata_dictionary.issuing_transaction_id where element_at(metadata_dictionary, 'my_label') is not null order by day desc limit 3`\n\n| day | id  | amount | my\\_label\\_value |\n| --- | --- | --- | --- |\n| 2024-07-01 | ipi\\_4JOzxtV0OuaDSng | 2000 | true |\n| 2024-07-01 | ipi\\_GL345WwwsqlAOde | 100 | true |\n| 2024-07-01 | ipi\\_u8eIZC3fnZ6TICq | 10000 | false |",
    "title": "Query Issuing data | Stripe Documentation",
    "description": "Use Sigma or Data Pipeline to retrieve information about Issuing.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/atlas/company-types",
    "markdown": "# Company types | Stripe DocumentationThe Stripe Docs logo\n\n## Form a C Corporation or an LLC using Stripe Atlas.\n\nStripe Atlas supports two options for forming a US company in Delaware: C Corporations and Limited Liability Companies (LLC).\n\nWith Stripe Atlas, you can form a new C Corporation or a subsidiary of an existing corporation. The following list contains some of the characteristics of a C Corporation:\n\n*   **Defined governance structure**: A C Corporation has a well-known, regulated, management structure.\n*   **Ownership**: A C Corporation’s structure facilitates granting equity to employees, advisors, and investors.\n*   **Raising outside funding**: A Delaware C Corporation is the entity generally preferred by outside institutional investors who might be unable to invest in LLCs.\n*   **Tax treatment**: A C Corporation with early startup losses can generally use the losses in future years, subject to various limitations, to reduce future taxable income when the company becomes profitable.\n\n## When to form your company ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you plan to form your company near the end of the calendar year, it can make sense to wait until the start of the new year to form your company because of the tax implications. C Corporations active in Delaware any time before December 31 owe at least the minimum Delaware franchise tax for that year. LLCs active before December 31 owe the full annual LLC tax for that year.\n\nNeither the franchise tax nor the LLC tax is prorated. Your company might also owe US federal corporate income tax for the outgoing year. It might also owe taxes to a US state other than Delaware, depending on where the LLC operates.",
    "title": "Company types | Stripe Documentation",
    "description": "Form a C Corporation or an LLC using Stripe Atlas.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-data/query-billing-data",
    "markdown": "# Query Billing data | Stripe DocumentationThe Stripe Docs logo\n\n## Use Sigma or Data Pipeline to retrieve information about Billing.\n\nBilling is made up of different components that work together to provide one-off [invoices](https://docs.stripe.com/api/invoices \"invoices\") and periodic billing, with different aspects of billing data available across a number of tables. All billing-specific tables are in the **Billing** section of the schema, with the primary tables being `subscriptions` and `invoices`.\n\nTo explore billing data further, you can use the additional tables that represent the components of subscriptions and invoices, such as `prices`, `products`, or `coupons`. In addition, the `customers` table is a fundamental part of billing, and contains data you might need to report on.\n\n## Subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach row within the `subscriptions` table represents data about an individual [Subscription](https://docs.stripe.com/api#subscription_object) object—the same information that the API retrieves or is available in the [Stripe Dashboard](https://dashboard.stripe.com/test/subscriptions). You can report on every subscription that you create on your account.\n\nThis table is our recommended starting point for creating reports about your current subscribers. You can join this to other related tables, allowing you to explore your data in more detail.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/subscriptions.b2676e216021e4a013eb4da5f4f839ec.png)\n\nThe following example retrieves a list of subscriptions that have been marked as unpaid, along with any available contact information for the customer.\n\n`select   subscriptions.id,   subscriptions.customer_id,   customers.email from subscriptions inner join customers   on customers.id = subscriptions.customer_id where   subscriptions.status = 'unpaid' limit 5`\n\n| id  | customer\\_id | email |\n| --- | --- | --- |\n| sub\\_RipJzIO7jOFlZ6c | cus\\_GfYQ6IFif5BieLW | jenny.rosen@example.com |\n| sub\\_HNgaKPvWC98XHOX | cus\\_KcOVbLZ1XxIzcp4 | noah.wilson@example.com |\n| sub\\_Ahh9bhxuO4P3fWc | cus\\_Br2uNQ1u2N7ovzO | joshua.miller@example.com |\n| sub\\_vRwqAevJq2AYYnQ | cus\\_IQRbl4j1A3otLrV | madison.jackson@example.com |\n| sub\\_M8uzL92Y840k2x6 | cus\\_g5OsYT720OYG0t4 | elijah.smith@example.com |\n\n## Customers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nData about [Customer](https://docs.stripe.com/api#customers) objects are contained in the `customers` table (this isn’t part of the Billing Tables group). It’s commonly used as part of billing-based reports and can be joined to a number of tables. It’s also useful if you’re creating [charges](https://docs.stripe.com/stripe-data/query-transactions) with saved payment information.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/customers.60b1588c3375261e7f8b6ec1a4ab8302.svg)\n\nThe following example retrieves a list of customers with subscriptions that are currently in a trial period. It retrieves both the ID and email address for each customer.\n\n`select   customers.id,   customers.email,   subscriptions.price_id from subscriptions inner join customers on customers.id = subscriptions.customer_id where subscriptions.status = 'trialing' limit 5`\n\n| id  | email | price\\_id |\n| --- | --- | --- |\n| cus\\_dz65uLew00BLn51 | jenny.rosen@example.com | ruby-pro-522 |\n| cus\\_BEK3f7ZG5mKQzkp | noah.wilson@example.com | ruby-pro-522 |\n| cus\\_xJCI9sWRRU7p8iC | richard.jones@example.com | gold-basic-221 |\n| cus\\_yt74fs0d9lvfaxn | madison.jackson@example.com | gold-basic-221 |\n| cus\\_3kVEqwUTk3RYlpM | elijah.smith@example.com | silver-pro-498 |\n\n## Products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nProducts describe items that your customers can purchase with a subscription. Prices are tied to products and set out the cost, billing interval, and currency. When you view data from the `subscriptions` table, you can join it with `subscription_items`. Additionally, you can join it to `products.id` by using the `price_product_id` from the item.\n\nThe following example returns a list of active subscriptions along with the product name and its statement descriptor:\n\nactive\\_subscription\\_products.sql\n\n`with active_subscriptions as (   select     s.id as subscription_id,     p.name as product_name,     p.statement_descriptor   from subscriptions s   join subscription_items si on s.id = si.subscription_id   join products p on si.price_product_id = p.id   where s.status = 'active' ) select   subscription_id,   subscription_item_id,   price_id,   product_name,   statement_descriptor from active_subscriptions order by 1,2`\n\n| id  | name | statement\\_descriptor |\n| --- | --- | --- |\n| sub\\_CaDleDfrtVnW9ps | ruby-pro-522 | Ruby Pro |\n| sub\\_9LqZu7W5PKpuLod | gold-basic-221 | Gold Basic |\n| sub\\_XNjKj1JNYELPisJ | silver-pro-498 | Silver Pro |\n| sub\\_9l3Z0umSLEPPkLH | diamond-mid-244 | Diamond Mid |\n| sub\\_XRIqrNDjM9ltunU | ruby-standard-196 | Ruby Standard |\n\n## Price tiers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhile using prices with [tiers](https://docs.stripe.com/products-prices/pricing-models#tiered-pricing) in your subscriptions, the `price_tiers` table can provide specific data about each tier. For instance, if you want to understand the initial tier of your subscriptions, including the maximum quantity for the first tier and the used unit amount, refer to the following query:\n\n`with subscription_item_prices as (   select     si.subscription_id,     si.price_id,     p.currency   from     subscription_items si   join prices p on si.price_id = p.id ), price_tier_details as (   select     sp.subscription_id,     pt.price_id,     pt.upto,     stringify_amount(sp.currency, pt.amount, '.') as tier_price,     sp.currency   from     subscription_item_prices sp   join price_tiers pt on sp.price_id = pt.price_id ) select   ptd.subscription_id,   ptd.price_id,   ptd.upto,   ptd.tier_price,   ptd.currency from   price_tier_details ptd order by   ptd.subscription_id,   ptd.price_id,   ptd.upto asc`\n\n| subscription\\_id | price\\_id | upto | tier\\_price | currency |\n| --- | --- | --- | --- | --- |\n| sub\\_YSjTsJwWX4mB5x6 | price\\_ZH2jpna3Jd0XWo2 | 30  | 2.00 | usd |\n| sub\\_HzpihAn3dtgEdb6 | price\\_dBuWzELTN0EhC7j | 60  | 1.00 | usd |\n| sub\\_0vpzDG3bKCW2ibb | price\\_J7bmuJzHYzVRPYl | 90  | 0.50 | usd |\n\n## Invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `invoices` table contains data about individual [Invoice](https://docs.stripe.com/api#invoice_object) objects. Each subscription generates an invoice on a recurring basis that represents the amount the customer owes. This automatically includes the amount required for the subscription, and any additional [invoice items](https://docs.stripe.com/api#invoiceitems) that might have been created (listed as line items).\n\nInvoices are comprised of individual ([invoice) line items](https://docs.stripe.com/api#invoice_line_item_object). These line items represent any subscriptions that the customer is billed for, and invoice items that have been created and applied to the invoice. To break down an invoice and analyze each of its line items, use the `invoice_line_items` table.\n\nThe `source_id` column of this table contains the **ID** of either the subscription (for example, `sub_Z6d2HJGs4iXLiW5`) or invoice item (for example, `ii_zuMtT2sjObEwc06`) that the line item corresponds to. The `source_type` column reflects whether the line items represent a subscription or an invoice item.\n\nUnlike other foreign keys, the `subscription` column of the `invoice_line_items` table isn’t always populated. If the corresponding invoice item is a subscription, this column is blank—its **ID** already appears in the `source_id` column.\n\n### Invoice items![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nData about [Invoice items](https://docs.stripe.com/api#invoiceitems) is provided in the `invoice_items` table. Invoice items are commonly used to specify an additional amount (or deduct an amount) that’s applied on the next invoice at the beginning of the next billing cycle. For example, you would create an invoice item if you need to bill your customer for exceeding their monthly allowance, or if you need to provide a credit on the next invoice for unused service.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/invoices.ed8822925c41f368821ba104bd52efb1.svg)\n\nThe following example retrieves all the invoices and associated charge IDs for a particular subscription.\n\n`select   id,   charge_id,   amount_due from invoices where subscription_id = 'sub_ALJXL9gBYtv6GJ'`\n\n| id  | name |\n| --- | --- | --- |\n| in\\_3TEWI7F4tuWhmEG | ch\\_co9BdKwZiO5Ik1B | 1999 |\n| in\\_1fCdijn7EVEYHlQ | ch\\_bB12GxTtwuDsgdh | 1999 |\n| in\\_Wtcm4SeCeSPvEJ7 | 1999 | ch\\_LtPFoPcSQS5MLzV |\n| in\\_Y3TopFoOSTj3YGG | 1999 | ch\\_gOPIRKIORZds3iH |\n| in\\_lLtWf4QAVdcT34v | 1999 | ch\\_1FgdBVEtN9YodQU |\n\n### Invoice totals and discounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe invoice subtotal represents the amount of all subscriptions, invoice items, and prorations on the invoice before any discount is applied. The invoice total is the amount after discounts and tax have been applied:\n\n`invoice.total` = `invoice.subtotal` - `discount` + `invoice.tax`\n\nThere is no column to represent the discount amount on an invoice. Instead, you can calculate this by aggregating the line items’ discount amounts. The following query returns a list of invoices, their period start and end, the total discounted amount for the invoice.\n\n`with invoices_with_discounts as (   select     invoice_id,     sum(amount) as total_discount_amount   from     invoice_line_item_discount_amounts   group by     invoice_id ) select   i.id as invoice_id,   i.period_start,   i.period_end,   stringify_amount(i.currency, ilda.total_discount_amount, '.') as total_discount_amount   i.currency from   invoices i   join invoices_with_discounts ilda on i.id = ilda.invoice_id order by i.id`\n\n| invoice\\_id | period\\_start | period\\_end | total\\_discount\\_amount | currency |\n| --- | --- | --- | --- | --- |\n| in\\_cMHrtwNbj5mHMw8 | 2024-05-01 | 2024-06-01 | 24.66 | usd |\n| in\\_5chW1ZVyC4GuCIO | 2024-06-01 | 2024-07-01 | 24.34 | usd |\n| in\\_2NZuU5aKKr3JA4l | 2024-04-01 | 2024-05-01 | 45.96 | usd |\n\n### Working with invoice dates and periods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSubscription invoices are pre-billed, meaning the customer makes the payment at the beginning of a billing cycle. This is represented in a line item’s `period` value. For example, a customer with a monthly subscription is billed at the start of each month. If they choose to [cancel\\_at\\_period\\_end](https://docs.stripe.com/api/subscriptions/object#subscription_object-cancel_at_period_end), their subscription stays active until the month’s end, after which the subscription ends.\n\nThe `period_start` and `period_end` values of an invoice represents when invoice items might have been created–it’s not always definitive of the period of service that the customer is being billed for. For example, if a customer is billed on the 1st of each month and exceeds their monthly allowance on the 15th, you might create an invoice item for any additional costs that the customer is charged for. This invoice item is then included in the next invoice, which is created on the 1st of the next month. When the next invoice is generated, the `period_start` date would be the 15th of the previous month—the date the additional line item is first created.\n\n## Coupons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA [Coupon](https://docs.stripe.com/billing/subscriptions/coupons) object represents an amount or percentage-off discount that you can apply to subscriptions or customers.\n\n`select   coupons.id,   coupons.amount_off,   coupons.percent_off from coupons where valid = false limit 5`\n\n| id  | amount\\_off | percent\\_off |\n| --- | --- | --- |\n| 10FF |     | 10  |\n| SUMMER25 |     | 25  |\n| 10FREE | 10  |     |\n| 15OFF |     | 15  |\n| FALL30 | 30  |     |\n\n## Discounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA discount is the application of a coupon, represented by a [Discount](https://docs.stripe.com/api#discounts) object. The following query returns a list of subscriptions and their associated discounts and coupons:\n\n`select   subscriptions.id as subscription_id,   t.discount_id,   coupons.id as coupon_id from   subscriptions   cross join unnest(split(subscriptions.discounts, ',')) as t(discount_id)   join discounts on discounts.id = t.discount_id   join coupons on coupons.id = discounts.coupon_id limit 3`\n\n| subscription\\_id | discount\\_id | coupon\\_id |\n| --- | --- | --- |\n| sub\\_tDYuA4s5osPaGf3 | di\\_uKfXpDEUTvppE7O | 10OFF |\n| sub\\_BfUoKnWoViUVCO9 | di\\_b1iUDvYtr35BVRx | 25OFF |\n| sub\\_9lvCsUxiha5ijZ6 | di\\_YKEyl2YktUGtcAE | 10FREE |\n\nA [promotion code](https://docs.stripe.com/api/promotion_codes) represents a customer-redeemable code for a [coupon](https://docs.stripe.com/billing/subscriptions/coupons). The following query provides a list of promotion codes pertaining to a specific coupon and displays the number of times each code has been redeemed:\n\n`select   promotion_codes.id as promotion_code_id,   promotion_codes.code as promotion_code,   promotion_codes.times_redeemed from   promotion_codes limit 3`\n\n| promotion\\_code\\_id | code | times\\_redeemed |\n| --- | --- | --- |\n| promo\\_YAyQbASQgh4KkfB | 10OFF | 1   |\n| promo\\_zcWmNiiwNpU3pi4 | 25OFF | 2   |\n| promo\\_Y9mKuA9MjItlQJ1 | 10FREE | 3   |\n\n## Subscription Item Change Events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `subscription_item_change_events` table tracks changes to subscription items that affect [Monthly Recurring Revenue (MRR)](https://support.stripe.com/questions/calculating-monthly-recurring-revenue-(mrr)-in-billing). Use this table to calculate MRR for individual customers, products, plans, and to create custom metric definitions for your business models.\n\n#### Caution\n\nThis table provides more up-to-date data than the source driving the MRR metrics on the Billing overview in the Stripe Dashboard. This means the data for the last and current day’s MRR here could be more accurate and could differ from what you see in the Dashboard.\n\n### local\\_event\\_timestamp and event\\_timestamp![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis table includes two timestamp columns:\n\n*   `event_timestamp`: This is the UTC timestamp.\n*   `local_event_timestamp`: This timestamp is in your local timezone, typically the timezone of the person who created your Stripe account.\n\n### currency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHere, you’ll find the subscription item’s settlement currency as a three-letter [ISO currency code](https://docs.stripe.com/currencies) in lowercase. The currency must be one that Stripe [supports](https://docs.stripe.com/currencies).\n\n### mrr\\_change![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `mrr_change` column shows the positive or negative impact of an event on your MRR in the subscription item’s settlement currency’s minor unit (such as cents for USD).\n\n### event\\_type![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Event type | Definition |\n| --- | --- |\n| ACTIVE\\_START | The subscription item started contributing to MRR. |\n| ACTIVE\\_UPGRADE | The MRR contribution of the subscription item increased (for example, the quantity increased). |\n| ACTIVE\\_END | The subscription item stopped contributing to MRR. |\n| ACTIVE\\_DOWNGRADE | The MRR contribution of the subscription item decreased (for example, the quantity decreased). |\n\n#### Note\n\nSome user actions can create multiple events, so you could see an event with an `event_type` of `ACTIVE_END` on one item and then immediately an event with an `event_type` of `ACTIVE_START` on another item for the same `subscription_id`.\n\n### Other columns![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOther columns (`product_id`, `price_id`, `customer_id`, `subscription_id`, and `subscription_item_id`) hold IDs related to the subscription item change event.\n\n### Example queries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor additional and most up to date examples, please reference the [Subscriptions section of query template library in Sigma sidebar](https://dashboard.stripe.com/sigma/queries).\n\nTo calculate the monthly recurring revenue (MRR) and the number of active subscribers from this table, you’ll need to use window functions. Additionally, if you have customers using different currencies, you’ll need to perform foreign currency exchange calculations. The calculation aims to track monthly MRR and the evolution of active subscribers, distinguishing between new additions, reactivations, expansions, contractions, and churns. The final results are presented in minor currency units, such as cents for USD.\n\n`WITH ts_grouped_sub_item_events AS (   SELECT     local_event_timestamp,     customer_id,     currency,     sum(mrr_change) AS mrr_change   FROM     subscription_item_change_events   GROUP BY     1,     2,     3 ), ts_grouped_sub_item_events_with_mrr AS (   SELECT     *,     date_trunc(       'day',       date(local_event_timestamp)     ) AS local_event_date,     -- Stripe defines an \"active subscriber\" as a customer with non-zero MRR.     -- Therefore instead of summing up event_type to get subscription count (and its diff),     -- We count the amount of revenue on each customer instead and later check its movement from / to zero     sum(mrr_change) over (       PARTITION by customer_id       ORDER BY         local_event_timestamp ASC     ) AS mrr,     -- We count the # of times MRR has actually changed, and use nullif to ignore events that do not impact MRR     -- Otherwise we may confuse between new vs. reactivation     count(nullif(mrr_change, 0)) over (       PARTITION by customer_id       ORDER BY         local_event_timestamp ASC     ) AS mrr_change_count   FROM     ts_grouped_sub_item_events ), ts_grouped_sub_item_events_with_previous_mrr AS (   SELECT     *,     coalesce(       last_value(mrr) IGNORE nulls OVER (         PARTITION by customer_id         ORDER BY           local_event_timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING           AND 1 PRECEDING       ),       0     ) AS previous_mrr   FROM     ts_grouped_sub_item_events_with_mrr ), customer_events AS (   SELECT     *,     CASE       WHEN mrr = 0       AND previous_mrr > 0 THEN 'ACTIVE_END'       WHEN mrr > 0       AND previous_mrr = 0       AND mrr_change_count = 1 THEN 'ACTIVE_START'       WHEN mrr > 0       AND previous_mrr = 0       AND mrr_change_count > 1 THEN 'REACTIVATE'       WHEN mrr > previous_mrr THEN 'ACTIVE_UPGRADE'       WHEN mrr < previous_mrr THEN 'ACTIVE_DOWNGRADE'       ELSE NULL     END AS cus_event_type   FROM     ts_grouped_sub_item_events_with_previous_mrr ), date_grouped_customer_events AS (   SELECT     local_event_date,     currency,     sum(mrr_change) AS mrr_change,     sum(       CASE         cus_event_type         WHEN 'ACTIVE_START' THEN mrr_change         ELSE 0       END     ) AS new_mrr,     sum(       CASE         cus_event_type         WHEN 'REACTIVATE' THEN mrr_change         ELSE 0       END     ) AS reactivation_mrr,     sum(       CASE         cus_event_type         WHEN 'ACTIVE_UPGRADE' THEN mrr_change         ELSE 0       END     ) AS expansion_mrr,     sum(       CASE         cus_event_type         WHEN 'ACTIVE_DOWNGRADE' THEN mrr_change         ELSE 0       END     ) AS contraction_mrr,     sum(       CASE         cus_event_type         WHEN 'ACTIVE_END' THEN mrr_change         ELSE 0       END     ) AS churn_mrr,     sum(       CASE         WHEN mrr = 0         AND previous_mrr > 0 THEN -1         WHEN mrr > 0         AND previous_mrr = 0 THEN 1         ELSE 0       END     ) AS active_subscribers_change,     sum(       CASE         cus_event_type         WHEN 'ACTIVE_END' THEN 1         ELSE 0       END     ) AS churned_subscribers,     sum(       CASE         cus_event_type         WHEN 'ACTIVE_START' THEN 1         ELSE 0       END     ) AS new_subscribers,     sum(       CASE         cus_event_type         WHEN 'REACTIVATE' THEN 1         ELSE 0       END     ) AS reactivated_subscribers   FROM     customer_events   GROUP BY     1,     2 ), -- Prepare the multi dimensional table with all days + currency combinations and conversion rate metadata -- note that exchange_rates_from_usd contains one row for every date from 2010-01-07 until today -- which is why we don't need to generate a separate date series for the full table dates_with_rate_per_usd AS (   SELECT     -- We use previous day's closing rates in precomputed metrics     date - INTERVAL '1' DAY AS fx_date,     cast(       json_parse(buy_currency_exchange_rates) AS map(varchar, double)     ) AS rate_per_usd   FROM     exchange_rates_from_usd ), currencies AS (   SELECT     DISTINCT(currency)   FROM     subscription_item_change_events ), first_default_currency AS (   SELECT     default_currency   FROM     accounts   WHERE     default_currency IS NOT NULL   LIMIT     1 ), dates_x_currencies_with_conversion_rate AS (   SELECT     fx_date as local_date,     currency,     default_currency,     1 / rate_per_usd [currency] * rate_per_usd [coalesce(default_currency, 'usd')] AS conversion_rate   FROM     dates_with_rate_per_usd     CROSS JOIN currencies     CROSS JOIN first_default_currency   ORDER BY     1,     2 ), daily_metrics_by_currency AS (   SELECT     dpc.local_date,     dpc.currency,     dpc.conversion_rate,     coalesce(       sum(mrr_change) over (         PARTITION by dpc.currency         ORDER BY           dpc.local_date ASC       ),       0     ) AS mrr,     coalesce(       round(         sum(mrr_change) over (           PARTITION by dpc.currency           ORDER BY             dpc.local_date ASC         ) * dpc.conversion_rate       ),       0     ) AS converted_mrr,     coalesce(round(new_mrr * conversion_rate), 0) AS converted_new_mrr,     coalesce(round(reactivation_mrr * conversion_rate), 0) AS converted_reactivation_mrr,     coalesce(round(expansion_mrr * conversion_rate), 0) AS converted_expansion_mrr,     coalesce(round(contraction_mrr * conversion_rate), 0) AS converted_contraction_mrr,     coalesce(round(churn_mrr * conversion_rate), 0) AS converted_churn_mrr,     coalesce(dgce.mrr_change, 0) AS mrr_change,     coalesce(dgce.new_mrr, 0) AS new_mrr,     coalesce(dgce.reactivation_mrr, 0) AS reactivation_mrr,     coalesce(dgce.expansion_mrr, 0) AS expansion_mrr,     coalesce(dgce.contraction_mrr, 0) AS contraction_mrr,     coalesce(dgce.churn_mrr, 0) AS churn_mrr,     coalesce(       sum(active_subscribers_change) over (         PARTITION by dpc.currency         ORDER BY           dpc.local_date ASC       ),       0     ) AS active_subscribers,     coalesce(dgce.active_subscribers_change, 0) AS active_subscribers_change,     coalesce(dgce.churned_subscribers, 0) AS churned_subscribers,     coalesce(dgce.new_subscribers, 0) AS new_subscribers,     coalesce(dgce.reactivated_subscribers, 0) AS reactivated_subscribers   FROM     dates_x_currencies_with_conversion_rate dpc     LEFT JOIN date_grouped_customer_events dgce ON dpc.local_date = dgce.local_event_date     AND dpc.currency = dgce.currency ), daily_metrics AS (   SELECT     local_date,     sum(converted_mrr) AS mrr,     sum(converted_new_mrr) AS new_mrr,     sum(converted_reactivation_mrr) AS reactivation_mrr,     sum(converted_expansion_mrr) AS expansion_mrr,     sum(converted_contraction_mrr) AS contraction_mrr,     sum(converted_churn_mrr) AS churn_mrr,     -- Customer can only have active subscription in a single currency at a time, as a result this does not result in over-counting subscriber changes     -- This also matches the precomputed metrics logic in billing dashboard / CSV download     sum(active_subscribers) AS active_subscribers,     sum(churned_subscribers) AS churned_subscribers,     sum(new_subscribers) AS new_subscribers,     sum(reactivated_subscribers) AS reactivated_subscribers   FROM     daily_metrics_by_currency   GROUP BY     1 ), daily_metrics_with_derived AS (   SELECT     *,     mrr - lag(mrr) over (       ORDER BY         local_date     ) - new_mrr - reactivation_mrr - expansion_mrr - contraction_mrr - churn_mrr AS fx_adjustment_mrr,     lag(mrr) over (       ORDER BY         local_date     ) AS previous_mrr   FROM     daily_metrics ), -- Turn daily into monthly metrics monthly_metrics_with_derived AS (   SELECT     date_trunc('month', local_date) AS local_month_start,     max_by(mrr, local_date) AS ending_mrr,     sum(new_mrr) AS new_mrr,     sum(reactivation_mrr) AS reactivation_mrr,     sum(expansion_mrr) AS expansion_mrr,     sum(contraction_mrr) AS contraction_mrr,     sum(churn_mrr) AS churn_mrr,     sum(fx_adjustment_mrr) AS fx_adjustment_mrr,     max_by(active_subscribers, local_date) AS ending_subscribers,     sum(churned_subscribers) AS churned_subscribers,     sum(new_subscribers) AS new_subscribers,     sum(reactivated_subscribers) AS reactivated_subscribers   FROM     daily_metrics_with_derived   GROUP BY     1 ) SELECT   local_month_start,   ending_mrr - fx_adjustment_mrr - churn_mrr - contraction_mrr - expansion_mrr - reactivation_mrr - new_mrr AS beginning_mrr,   new_mrr,   reactivation_mrr,   expansion_mrr,   contraction_mrr,   churn_mrr,   fx_adjustment_mrr,   ending_mrr,   -- Churned subscribers is a positive number in CSV reports instead of negative for churn / contraction mrr   ending_subscribers - (-1 * churned_subscribers) - reactivated_subscribers - new_subscribers AS beginning_subscribers,   new_subscribers,   reactivated_subscribers,   churned_subscribers,   ending_subscribers FROM   monthly_metrics_with_derived ORDER BY   1 DESC`\n\n| local\\_month\\_start | beginning\\_mrr | new\\_mrr | reactivation\\_mrr | expansion\\_mrr | contraction\\_mrr | churn\\_mrr | fx\\_adjustment\\_mrr | ending\\_mrr | beginning\\_subscribers | new\\_subscribers | reactivated\\_subscribers | churned\\_subscribers | ending\\_subscribers |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 2024-05-01 | 100072149 | 104000 | 0   | 40000 | 0   | 0   | 0   | 100216149 | 9   | 3   | 0   | 0   | 12  |\n| 2024-04-01 | 100065149 | 7180 | 0   | 0   | 0   | \\-180 | 0   | 100072149 | 7   | 3   | 0   | 1   | 9   |\n| 2024-03-01 | 100066099 | 124 | 0   | 0   | 0   | \\-1074 | 0   | 100065149 | 7   | 2   | 0   | 2   | 7   |\n| 2024-02-01 | 100066099 | 1000 | 0   | 0   | 0   | \\-1000 | 0   | 100066099 | 7   | 1   | 0   | 1   | 7   |\n| 2024-01-01 | 100038102 | 29216 | 0   | 1998 | \\-175 | \\-3042 | 0   | 100066099 | 5   | 4   | 0   | 2   | 7   |\n| 2023-12-01 | 100038102 | 0   | 0   | 0   | 0   | 0   | 0   | 100038102 | 5   | 0   | 0   | 0   | 5   |\n| 2023-11-01 | 100037102 | 1000 | 0   | 0   | 0   | 0   | 0   | 100038102 | 4   | 1   | 0   | 0   | 5   |\n| 2023-10-01 | 100037102 | 0   | 0   | 0   | 0   | 0   | 0   | 100037102 | 4   | 0   | 0   | 0   | 4   |\n| 2023-09-01 | 100037102 | 0   | 0   | 0   | 0   | 0   | 0   | 100037102 | 4   | 0   | 0   | 0   | 4   |\n| 2023-08-01 | 100033902 | 0   | 0   | 5000 | 0   | \\-1800 | 0   | 100037102 | 5   | 0   | 0   | 1   | 4   |\n| 2023-07-01 | 100037065 | 0   | 0   | 0   | 0   | \\-3159 | \\-4 | 100033902 | 6   | 0   | 0   | 1   | 5   |\n| 2023-06-01 | 100036402 | 35  | 3369 | 0   | 0   | \\-2742 | 1   | 100037065 | 6   | 1   | 3   | 4   | 6   |\n| 2023-05-01 | 100034898 | 2748 | 0   | 30437 | \\-83 | \\-31598 | 0   | 100036402 | 7   | 3   | 0   | 4   | 6   |\n| 2023-04-01 | 100034065 | 933 | 0   | 0   | 0   | \\-100 | 0   | 100034898 | 6   | 2   | 0   | 1   | 7   |\n| 2023-03-01 | 100002715 | 31350 | 0   | 0   | 0   | 0   | 0   | 100034065 | 4   | 2   | 0   | 0   | 6   |\n| 2023-02-01 | 100006048 | 6086 | 0   | 6088 | 0   | \\-15507 | 0   | 100002715 | 5   | 2   | 0   | 3   | 4   |\n| 2023-01-01 | 100006048 | 3043 | 0   | 0   | 0   | \\-3043 | 0   | 100006048 | 5   | 1   | 0   | 1   | 5   |\n| 2022-12-01 | 100152134 | 25910 | 0   | 1363600 | \\-30000 | \\-1505574 | \\-22 | 100006048 | 9   | 6   | 0   | 10  | 5   |\n| 2022-11-01 | 100178232 | 48688 | 3333 | 621878 | \\-10600 | \\-689397 | 0   | 100152134 | 7   | 16  | 1   | 15  | 9   |\n| 2022-10-01 | 100036193 | 136333 | 120000 | 20600 | \\-10000 | \\-124894 | 0   | 100178232 | 7   | 4   | 2   | 6   | 7   |",
    "title": "Query Billing data | Stripe Documentation",
    "description": "Use Sigma or Data Pipeline to retrieve information about Billing.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/atlas/83b-elections-non-us-founders",
    "markdown": "# File Section 83(b) elections as a non-US founder\n\n## Learn how to file an 83b election as a non-US founder.\n\n#### 83(b) elections\n\nStripe isn’t an accounting firm and can’t provide tax or accounting advice. Consult legal and tax professionals for advice on how to meet ongoing legal, tax, and accounting obligations that apply to you and your company.\n\nThe [83(b) election](https://docs.stripe.com/atlas/83b-election) is a US tax provision that could reduce your future US taxes. If you expect to owe US taxes (for example, by moving to the US) while your shares are vesting, consider [making an 83(b) election](https://stripe.com/atlas/resources/templates/83b-election). If you file an 83(b) election, you must file within 30 days of your stock purchase date.\n\nThe 83(b) election requirements include having a US taxpayer identification number. A US taxpayer identification number can be either a Social Security Number (“SSN”) or a US Individual Taxpayer Identification Number (“ITIN”). If you don’t have an SSN, you can apply for an ITIN. ITINs are similar to SSNs but available only to people who aren’t eligible for an SSN, such as non-US residents.\n\nIf you don’t have an ITIN at the time of filing the 83(b) election, you can state in the election that you’re in the process of obtaining an ITIN and apply for an ITIN. While some tax professionals advise you to obtain an ITIN soon after you submit your 83(b) election, many other tax professionals believe that you don’t need to obtain an ITIN until you know you must move to the US during your shares’ vesting period. We recommend you consult with your tax adviser with respect to whether and when to obtain an ITIN.",
    "title": "File Section 83(b) elections as a non-US founder | Stripe Documentation",
    "description": "Learn how to file an 83b election as a non-US founder.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payouts",
    "markdown": "# Receive payouts | Stripe DocumentationThe Stripe Docs logo\n\n## Set up your bank account to receive payouts.\n\nYou receive funds when Stripe (or your platform) makes payouts to your bank account. Payout availability varies depending on your industry and country of operation. When you start processing live payments, Stripe typically schedules your initial payout for 7-14 days after you successfully receive your first payment. Your first payout might take longer, depending on your industry risk level and country of operation. Subsequent payouts follow your account’s [payout schedule](#payout-schedule).\n\nYou can see a comprehensive list of your payouts and the expected dates of deposit into your bank account in the [Dashboard](https://dashboard.stripe.com/test/payouts). If you’re a [Connect](https://docs.stripe.com/connect \"Connect\") platform, see [Connect payouts](https://docs.stripe.com/connect/payouts-connected-accounts).\n\n## Add or update your bank account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can update your account details or add a new bank account using the [Payout settings](https://dashboard.stripe.com/account/payouts) in the Dashboard. Based on your bank’s location, Stripe might require different kinds of account details to activate your bank account. To modify your banking information, click the **Edit** button next to the desired bank account.\n\nUse the following table to see the required bank details for specific countries:\n\n| Bank account information | Example data |\n| --- | --- |\n| Routing Number | 111000000 (9 characters) |\n| Account number | Format varies by bank |\n\n### Supported bank account types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou have the flexibility to link various types of bank accounts for your Stripe payouts. Supported options include traditional accounts offered by established financial institutions, including checking and savings accounts. Additionally, Stripe lets you use virtual bank accounts such as N26, Revolut, Wise, and others. If you’re eligible, you can also use a debit card for [instant payouts](#instant-payouts).\n\n#### Note\n\nWhile Stripe supports non-standard bank accounts, you might see higher payout failures for these accounts.\n\n### Supported accounts and settlement currencies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn most cases, bank accounts must be located in the country where the settlement currency is the official currency. For example, SEK bank accounts must be based in Sweden. Stripe also enables you to settle and pay out to banks in select alternative currencies, or pay out to non-domestic bank accounts in the local currency, for a fee. To learn more about presenting and settling in alternative currencies, see [Alternative currencies](https://docs.stripe.com/payouts/alternative-currencies).\n\nAt times, Stripe supports international currencies that don’t incur a fee. See the following table for the list of supported free currencies per country:\n\nViewing supported settlement currencies for Stripe accounts in:\n\n| Settlement currency | Can be paid out to banks in these countries |\n| --- | --- |\n| USD | United States |\n\nAcquiring fees, where applicable, are based on the settlement currency, and you can find these acquiring fees listed out by currency on your country’s pricing page.\n\n### Multiple bank accounts for different settlement currencies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn some countries, Stripe users can add extra bank accounts to enable settlements and payouts in additional currencies. You can add one bank account per supported settlement currency. If you use multiple bank accounts, you must select a default settlement currency, which you can change at any time.\n\nCharges that are [presented](https://docs.stripe.com/currencies#presentment-currencies \"presentment currency\") in any enabled settlement currency settle without [currency conversion](https://docs.stripe.com/currencies/conversions). However, payments presented in a currency that you haven’t configured an additional bank account for automatically convert to your default currency.\n\nFor example, consider a Stripe user in the United Kingdom who has added both GBP and USD bank accounts, with GBP selected as the default settlement currency. USD payments (where USD is the presentment currency) are automatically paid out to the USD bank account without conversion, whereas payments in all other currencies are converted into GBP.\n\nYou can manage your bank accounts and default settlement currency by visiting [Bank accounts and scheduling](https://dashboard.stripe.com/account/payouts) in the Dashboard.\n\n## Payout schedule ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour payout schedule refers to how often Stripe sends money to your bank account.\n\nIn supported countries, your default payout schedule is daily automatic. You can change this in the [Dashboard](https://dashboard.stripe.com/account/payouts) to weekly automatic, monthly automatic, or manual payouts. When selecting a weekly or monthly schedule, you can specify the day of the week or month that you want payouts to arrive in your bank account.\n\n*   For monthly payout schedules, if the payout arrival day you’ve selected is beyond the final day of a particular month, the payout automatically adjusts to the last day of that month.\n*   For both weekly and monthly payout schedules, if the chosen payout arrival day falls on a non-business day, the payout arrival day occurs on the following business day instead.\n\nWhen you select a payout schedule, it doesn’t change how long it takes your pending balance to become available. However, it allows you to control when your payouts occur. For example, if your account operates on a daily payout schedule with a 3 business day [payout speed](#payout-speed), Stripe pays out funds daily from transactions captured 3 business days earlier.\n\nCertain countries have restrictions on payout schedules:\n\n*   In Brazil and India, payouts are always automatic and daily.\n*   In Japan, daily payouts aren’t available. Default payout schedule is set to weekly (Friday).\n\nIf you’re using [Cross-border payouts](https://docs.stripe.com/connect/cross-border-payouts), these payout schedule restrictions don’t apply.\n\n### Manual payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you turn off automatic payouts in the [Dashboard](https://dashboard.stripe.com/settings/payouts), you must manually send funds to your bank account. You can do this either in the Dashboard or by [creating payouts](https://docs.stripe.com/api#create_payout) using the API. Manual payouts are available in all regions except Brazil and India, where payouts are always automatic and daily. In most regions, manual payouts typically take 1-4 business days to arrive in your bank account after initiating the manual payout.\n\nIf your Stripe account that operates in the United Kingdom has a standard [T+3 payout speed](#payout-speed) and you initiate a manual payout during business hours, the funds typically arrive in your bank account on the same business day. This payout is subject to an account limit of 10 manual payouts per day and a maximum transaction amount of £1 million. All other manual payouts typically arrive within two business days in your bank account.\n\n`curl https://api.stripe.com/v1/payouts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=5000 \\  -d currency=usd`\n\n## Payout speed ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhile payout schedule refers to the cadence your funds are paid out on (for example, day of the week), payout speed refers to the amount of time it takes for your funds to become available. The payout speed varies per country and is typically expressed as T+X days. Some payment processors might start “T” from their internal settlement time, meaning when the funds land in their bank accounts.\n\nIn Stripe, “T” refers to the transaction time, which indicates the time of the original payment confirmation or capture, and the counting starts earlier. If your Stripe account is in a country with a T+3 standard payout speed and you use a manual payout schedule, your Stripe balance is available for payout within three business days of capturing a payment. However, if you use a daily automatic payout schedule with a T+3 speed, Stripe pays out funds daily from transactions captured 3 business days earlier.\n\nMost banks deposit payouts into your bank account as soon as they receive them, though some might take a few extra days to make them available. The type of business and the country you’re in can also affect payout timing.\n\n### Accelerated payout speeds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe offers accelerated payout speeds for users and connected accounts where Stripe manages credit and fraud risk in Europe, the UK, Mexico, and Canada. With accelerated payout speeds, funds are available within 3 business days.\n\nUsers become eligible for accelerated payout speeds after meeting certain criteria based on risk and history with Stripe. When you’re eligible, you can choose to opt in or out of accelerated payout speeds in the Dashboard by updating your [Payout settings](https://dashboard.stripe.com/settings/payouts). You remain at the starting 7 calendar day payout speed until you meet the eligibility criteria. You can [configure accounts](https://docs.stripe.com/connect/manage-payout-schedule) where you manage fraud and dispute liability separately. Some high risk industries might not be eligible.\n\n### Delay behavior per account country ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAs the platform, you can set [delay\\_days](https://docs.stripe.com/connect/manage-payout-schedule#delay_days) on your connected accounts. The delay applies as a **business day** or **calendar day** delay based on the country of the connected account. The following table shows which countries apply the delay by business or calendar day.\n\n| Country | Delay type |\n| --- | --- |\n| Australia, India, Japan, Malaysia, New Zealand, Thailand, United Arab Emirates, United States | Business day (Monday - Friday) |\n| Brazil1, Canada, Gibraltar, Hong Kong, Liechtenstein, Mexico, Norway, Singapore2, Switzerland, United Kingdom, and supported EU countries | Calendar day (Sunday - Saturday) |\n\n### Payout speed by country ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the following table to determine your country’s payout speed. The initial payout speed applies until an account meets eligibility criteria for [accelerated payouts](#accelerated-payout-speeds). High-risk businesses have a payout speed of 14 calendar days.\n\n### Country and payout speed\n\n## Minimum payout amounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe minimum payout amount depends on the lowest amount we can support with our banking partners. For example, if you’re located in the US and you have less than 1 cent (0.01 of 1 dollar) USD in your Stripe account, you must wait until you accept more payments and increase your balance before you can receive a payout. If your available account balance is less than the minimum payout amount, it remains in your Stripe account until your balance increases.\n\nIf you’re in a supported country, you can use [alternative currency payouts](https://docs.stripe.com/payouts/alternative-currencies) to send a payout to your local bank accounts in a foreign currency. For example, a French user can now receive a USD payout in their French bank account instead of having to pay for multiple currency exchanges.\n\nMinimum payout amounts are typically one base unit of the local currency. See the following collapsed table for a list of countries and their minimum payout amounts:\n\n### Minimum payout amounts per country![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Cross-border minimum payout amounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCross-border minimum payout amounts are typically one base unit of the local currency in the recipient country’s currency. See the following collapsed table for a list of countries and their cross-border minimum payout amounts:\n\n### Cross-border minimum payout amounts per country![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Negative payouts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEach payout reflects your available account balance at the time it was created. In some cases, you might have a negative account balance. For example, if you receive 100 USD in payments but refund 200 USD of prior payments, your account balance would be -100 USD. If you don’t receive further payments to balance out the negative amount, Stripe creates a payout that _debits_ your bank account.\n\nYour bank account must support both credit and debit transactions so that Stripe can perform any required payouts.\n\n## Payout failures ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your bank account can’t receive a payout for any reason, your bank sends the funds back to us. This returns an error with the [reason for the failure](https://docs.stripe.com/api/payouts/failures). It can take up to 5 additional business days for your bank to return the payout and inform us that it failed. If this happens, you’re notified by email and in the [Dashboard](https://dashboard.stripe.com/test/payouts). To make sure that your bank account details are correct, you need to re-enter them if a payout fails. After you re-enter your bank account details, Stripe attempts to perform the payout again at the next scheduled payout interval.\n\n#### Caution\n\nWhen a payout fails, it’s possible that its state initially shows as `paid` but then changes to `failed` (within 5 business days).\n\nMake sure that the bank account information you provide is correct because Stripe sends the funds using the account information you enter. Therefore, if you provide incorrect information (for example, a mistyped account number or an incorrect routing number), Stripe might send payouts to the wrong bank account and might not be able to recover the funds.\n\nAny fees or losses that you incur due to incorrect information fall under your responsibility. If your banking details are correct and the payout failure is for other reasons, contact your bank. After you resolve any issues with your bank, you can reactivate the payouts by clicking **Resume Payouts**. If you don’t receive a payout from Stripe after clicking **Resume Payouts**, and haven’t received a failure notification within a reasonable time frame, please [contact us](https://support.stripe.com/contact).\n\n## Instant Payouts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith [Instant Payouts](https://docs.stripe.com/payouts/instant-payouts), you can instantly send funds to a supported debit card or bank account. You can request Instant Payouts any time, including weekends and holidays, and funds usually appear in the associated bank account within 30 minutes. New Stripe users aren’t immediately eligible for Instant Payouts. You can check your [eligibility](https://docs.stripe.com/payouts/instant-payouts#eligibility-and-daily-volume-limits) in the [Dashboard](https://dashboard.stripe.com/payouts/instant_payouts_eligibility).\n\n## Payout fees ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe’s fee structure includes payouts, which means Stripe won’t charge you anything additional to initiate payouts. One exception is if you want to settle your payments and receive a payout to a domestic bank in an alternative currency. However, Stripe supports some international currencies without an additional fee. This support depends on your bank account’s location and the currency that you want your payout denominated in. To learn more about various payout currencies and their associated fees, see [Alternative currencies](https://docs.stripe.com/payouts/alternative-currencies).",
    "title": "Receive payouts | Stripe Documentation",
    "description": "Set up your bank account to receive payouts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/reports/select-a-report",
    "markdown": "# Select a report | Stripe DocumentationThe Stripe Docs logo\n\n## Find the right report to fit your financial workflow.\n\nStripe has a variety of different reports that provide information about your transactions. Start with the task you’re looking to perform and use the table below to identify the best report.\n\n| Task | Suggested report |\n| --- | --- |\n| *   Download monthly transaction history<br>*   View monthly totals by transaction category<br>*   [Reconcile](https://docs.stripe.com/reports/select-a-report#reconciliation) your Stripe balance like a bank account<br>*   Download a list of your payouts | [Balance](https://docs.stripe.com/reports/balance) |\n| *   Break down the individual transactions included in each payout to your bank account<br>*   Download the detail for multiple payouts at a time | [Payout reconciliation](https://docs.stripe.com/reports/payout-reconciliation) |\n\n## Reconciling your cash ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Balance](https://docs.stripe.com/reports/balance) and [Payout reconciliation](https://docs.stripe.com/reports/payout-reconciliation) reports both provide downloadable transaction history including custom metadata, and you can use either to reconcile your cash. The reports group transactions in different ways to facilitate different types of reconciliation.\n\n### The Balance report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Balance report resembles a bank statement and is optimized for users who treat their Stripe account similar to a bank account in their accounting system. The Balance report helps you to record all activity that occurred in Stripe during a date range. Payouts are recorded as simple transfers between your Stripe account and your bank account, which don’t correspond to any specific payments. Like a bank account, the balance is reconciled at the end of the period to confirm that all transactions have been accounted for.\n\n### The Payout reconciliation report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payout reconciliation report is optimized for users on automatic payout plans who model their Stripe balance as a temporary clearing account in their accounting system. This report helps you to reconcile each payout against the transactions included in that batch after it settles.\n\n### Reconciling between the reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMost reconciliation workflows don’t require using both reports, but it can be helpful to understand how they fit together.\n\nThe following table shows an account on a [two day rolling schedule](https://docs.stripe.com/payouts#payout-schedule) with 5 days of activity. The account was opened on the 1st of the month and accepted 10 USD in charges from its customers on its first day. Those funds became available on the 3rd, and the account received its first payout to its bank account because of the 2 day payout schedule.\n\n| DAY | TRANSACTIONS | PAYOUTS | BALANCE AT EOD |\n| --- | --- | --- | --- |\n| 1st | 10 USD |     | 10 USD |\n| 2nd | 20 USD |     | 30 USD |\n| 3rd | 30 USD | 10 USD | 50 USD |\n| 4th | 50 USD | 20 USD | 80 USD |\n| 5th | 70 USD | 30 USD | 120 USD |\n\nGiven the above account activity and a [date range](https://docs.stripe.com/reports/options#date-range) of **3rd–5th**, the [Balance summary](https://docs.stripe.com/reports/balance) would include the following data.\n\n| BALANCE SUMMARY |     |\n| --- | --- |\n| Starting balance | 30 USD |\n| Balance change from activity | 150 USD |\n| Total payouts | \\-60 USD |\n| Ending balance | 120 USD |\n\nThe [Balance change from activity](https://docs.stripe.com/reports/balance) section of the Balance report includes all transactions that occurred from the 3rd through the 5th. The total of these transactions matches the **Balance change from activity** line item in the balance summary of 150 USD.\n\nThe [Payout reconciliation](https://docs.stripe.com/reports/payout-reconciliation) report includes transactions from the 1st through the 3rd because these transactions were paid out within the selected date range of 3rd–5th. The sum of these transactions matches the **Total Payouts** line item of the balance summary of -60 USD.\n\nThe [Ending balance reconciliation](https://docs.stripe.com/reports/payout-reconciliation) section at the bottom of the Payout reconciliation report includes transactions from the 4th and 5th because these transactions weren’t paid out within the selected date range of 3rd–5th. The sum of these transactions matches the **Ending balance** line item in the balance summary of 120 USD.\n\n## Including transactions in a given date range![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you run a report, you select the reporting period using the controls in the dashboard, or by specifying start and end dates via the API. Each report uses a different type of date to determine which transactions fall within the reporting period.\n\n| Report | Relevant Date | Report Column |\n| --- | --- | --- |\n| [Balance](https://docs.stripe.com/reports/balance) | Date of change in Stripe balance | Balance transaction `created` (\\*) |\n| [Payout reconciliation](https://docs.stripe.com/reports/payout-reconciliation) | Date automatic payout is available | `automatic_payout_effective_at` |\n\n(\\*) except automatic payout transactions, which impact your Stripe balance based on the `available_on` date",
    "title": "Select a report | Stripe Documentation",
    "description": "Find the right report to fit your financial workflow.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/atlas/83b-election",
    "markdown": "# Section 83(b) elections | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about common considerations for Section 83(b) elections.\n\nA Section 83(b) election is a letter that lets the Internal Revenue Service (IRS) know you’d like to have your founder stock taxed at the time of your stock purchase rather than at the time of vesting. In many cases, a Section 83(b) election can save you a significant amount on your future taxes.\n\nIf you make a Section 83(b) election, most importantly, you won’t pay taxes when your stock vests. Instead, you choose to pay very little (if any at all) taxes at the time of stock purchase, and you won’t owe taxes until you actually sell your stock.\n\nIf you don’t make a Section 83(b) election, you could owe a large amount of taxes every time your stock vests, especially if the stock value has increased. You’ll also have to pay taxes when you sell your stock. For an example, see [Tax impacts of a Section 83(b) election in detail](https://docs.stripe.com/atlas/83b-election#detailed-tax-impact).\n\n## Benefits of the Section 83(b) election for newly incorporated startups ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStartup lawyers almost always recommend filing a Section 83(b) election if founders purchase their stock when the company is still at its early stage. If you recently incorporated your startup, you should consider making a Section 83(b) election for your founder’s stock if you expect your stock value to go up in the future and you plan to stay employed with your company until all of your stock vests. Not all stock is eligible for a Section 83(b) election, but if you’re incorporating your company with co-founders through Atlas, your company’s stock is eligible because it’s subject to vesting.\n\nIf you choose to not pay money for your stock, you and your company will need to pay taxes for the stock issuance. We recommend that you talk to your tax advisor if you don’t plan to pay money for your stock purchase.\n\n## Reasons not to file a Section 83(b) election ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you believe the value of your company’s stock will decrease by the time it vests, or if you think you might not be employed by your company until your stock vests, then you might not want to make a Section 83(b) election.\n\nIf you’re not a US taxpayer and don’t plan to be, there’s no benefit from making a Section 83(b) election. For more information, see [Section 83(b) elections for non US residents](#non-us-residents).\n\n## Timing for Section 83(b) elections ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMail your election by no later than **30 calendar days** after the stock is issued to you. There are no exceptions to this rule—this is a strict deadline.\n\nThe 30th day is calculated by counting every day (including Saturdays, Sundays, and holidays) starting with the day after the date that you’re issued the stock. For example, if you’re issued stock on April 10 that’s subject to a vesting schedule, your Section 83(b) election must be postmarked no later than May 10. If the 30th day falls on a weekend or holiday, then the deadline is the next business day.\n\n## Section 83(b) elections for non US residents ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you live outside the US but file US tax returns, you should still consider making a Section 83(b) election because the election might save you US taxes in the future.\n\nIf you don’t file US tax returns, but think you might become a US taxpayer in the future, you should still consider making a Section 83(b) election and applying for an ITIN. If you don’t make the election and later become a US taxpayer when the stock vests, you could be subject to additional US tax liability as your stock vests.\n\nIf you’re not currently, and don’t plan to become a US taxpayer, making a Section 83(b) election doesn’t matter because a Section 83(b) affects only US tax liability. For foreign filing instructions, see [Filing Section 83(b) elections as a non-US founder](https://docs.stripe.com/atlas/83b-elections-non-us-founders).\n\n## How to file a Section 83(b) election ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou make a Section 83(b) election by first completing and signing the Section 83(b) election form provided to you. You can download the 83(b) form and instructions. You can download the [83(b) form and instructions here](https://stripe.com/atlas/resources/templates/83b-election).\n\nSend the originally signed Section 83(b) election to the [Internal Revenue Office with which you file your return](https://www.irs.gov/filing/where-to-file-paper-tax-returns-with-or-without-a-payment) by USPS Certified Mail with Return Receipt, within 30 days of the date of stock issuance. See the next section if you don’t have access to the USPS.\n\nOptionally, we also recommend including a copy of the election with a self-addressed, stamped envelope when mailing the original signed election. The IRS usually returns the date-stamped copy of your election using the self-addressed envelope, which is the best (while not required) proof of having made a timely election.\n\n## Delivering your election without USPS ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you can’t access a USPS office, there are limited [private delivery service alternatives](https://www.irs.gov/filing/private-delivery-services-pds) that you can use to deliver your election to the IRS.\n\n## Next steps after mailing your election ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nKeep a copy of the signed Section 83(b) election form and the green-and-white Certified Mail Receipt (with the date stamp showing that you put it in the USPS mail within 30 days of the date of stock issuance). When the IRS mails back the date-stamped green card (and additional 83(b) election form copy if you sent one), keep those as proof of timely filing. If you’re using one of the private delivery services approved by the IRS, make sure to get a date-stamped receipt from them. We suggest taking photos of these and saving a digital version as well.\n\nAlso send a copy of the Section 83(b) election to your company. It can be as simple as emailing the photos to your company’s email address or saving them in your company’s digital folder (you can also use other methods that better suit you).\n\n## Steps to take if you didn’t retain proof of timely delivery ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you don’t retain proof of timely filing of the Section 83(b) election, it might be difficult to prove that you filed this election on time and that you should be taxed accordingly. Consult with your tax advisor for further advice in this situation.\n\n## Extending the election timeline or revoking after the election ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you fail to make a Section 83(b) election within the 30-day time period, you’re not allowed to make a late election.\n\nAfter you make a Section 83(b) election, it can be revoked only under extremely limited circumstances. Specifically, the Internal Revenue Service Commissioner might consent for an election to be revoked within 60 days of the election if the election was made under a mistake of fact about the transaction.\n\n## Filing a Section 83(b) with co-founders ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Section 83(b) election is filed by an individual taxpayer, not by the company. Thus, each founder needs to make their own decision about whether to make an election and must file it for themselves. However, future investors might expect that all co-founders have filed a Section 83(b) election.\n\n## Whether to attach a copy of a Section 83(b) election income tax returns ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you mail the election to the IRS office where you regularly file your tax returns, you don’t need to submit the copy of the election again with your federal income tax returns. On your tax return, make sure you properly report your stock purchase.\n\n## Tax impact of a Section 83(b) election in detail, with an example ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe election impacts when you owe taxes and the amount that you’re taxed on your founder’s stock.\n\nWithout a Section 83(b) election, you aren’t taxed at the time stock is issued to you. However, every time your stock vests in the future, you have to pay ordinary income taxes to the extent your stock value (often referred to as “fair market value”) has increased from the date you purchased your stock. When you sell your stock, you will owe capital gains tax on the difference between the value of your stock at sale and the value you were taxed on at vesting. (Capital gains tax rates on property held for more than one year are generally lower than ordinary income tax rates. The length of time you hold your stock is called the “holding period.\" If you don’t make a Section 83(b) election, your holding period begins when the stock vests.)\n\nWith a Section 83(b) election, you only owe ordinary income taxes at the time of stock issuance to the extent the value of the purchased stock is greater than what you pay. If you pay fully for your stock at the time of your stock purchase, you should owe no additional income taxes. This is because our stock purchase agreement template presumes your stock value equals the issuance price (also called par value), reflecting that your company doesn’t have significant assets in it yet. If your company is beyond the “raw idea” stage, when the stock value might be higher than the issuance price, you should consult with your tax advisor. When you later sell your shares, you’re taxed on the capital gains, which is the difference between the stock’s value per share when you sell it and the value when the stock was issued to you. Another advantage of making a Section 83(b) election is that your holding period begins earlier (when you’re issued the stock), which is typically a year earlier than when you vest the first round of the initial grant.\n\nFor example, your company issues you 200,000 shares valued at 0.0001 USD per share and you pay 0.0001 USD per share using cash. With an 83(b), you don’t have an income inclusion in the year the stock is issued as you paid for the value of the shares. If you don’t pay for the value of the shares using cash or other assets, a Section 83(b) election means you choose to include as ordinary income in the year the shares are issued the full value of the stock (20 USD). If half of your stock vests one year later and the other half vests two years later, you have no tax consequences because you made a Section 83(b) election. If 3 years from now you sell your stock for 2.00 USD per share (total of 400,000 USD), then you pay capital gains taxes on 399,980 USD (400,000 USD minus 20 USD).\n\nIf you don’t make a Section 83(b) election, you don’t have tax consequences on issuance of stock subject to vesting. However, if the value of your shares is 0.50 USD per share when half vest in one year then you would pay ordinary income taxes on 49,990 USD (0.50 USD value minus 0.0001 USD paid per share, multiplied by 100,000 shares) at vesting. If the value of your shares is 1.00 USD per share when the second half vest in two years from issuance then you would pay ordinary income taxes on 99,990 USD (1.00 USD value minus 0.0001 USD paid per share, multiplied by 100,000 shares) at vesting. If you sell your stock in 3 years for 2.00 USD per share (total of 400,000 USD), then you pay capital gains taxes on 250,000 USD (400,000 USD minus 20.00 USD paid for the shares, minus 149,980 USD).\n\nNon-founder employees receiving stock subject to vesting are also eligible for a Section 83(b) election, but might have additional tax considerations at the time of stock issuance. We suggest they consult with their tax advisors before making the election.",
    "title": "Section 83(b) elections | Stripe Documentation",
    "description": "Learn about common considerations for Section 83(b) elections.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-data/available-data",
    "markdown": "# Data freshness | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the data freshness of Stripe data and the schema.\n\nSigma and Data Pipeline provide access to the Stripe data available with the [Stripe API](https://docs.stripe.com/api). You can also access data such as Stripe [financial reports](https://docs.stripe.com/reports), which isn’t available in the Stripe API.\n\n## Data freshness![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSigma and Data Pipeline make most of your transaction data available to query within one day.\n\nSigma makes most of your Stripe transaction data available to query within one day. All API activity for a given day (from 12:00am to 11:59pm UTC) is available to query by 12:00pm UTC the following day. For example, data for the end of day Sunday UTC time is available by Monday at 12:00pm UTC. Similarly, data for the last day of the month is available one day into the following month.\n\n### Query data load times with Sigma![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe interface in the Dashboard displays the date and time of the last payments data. You can use `data_load_time` as a value in your queries to represent when data is most recently processed on your account. For example, if payment tables were last updated on 7/12/2024, the `data_load_time` is interpreted as `2024-07-09 00:00:00 +0000`. At times, Sigma may reflect activity that is more recent than `data_load_time`. For example, a charge authorized just before midnight, but captured soon after, may show as captured.\n\nMaking data available requires additional time. You can use `data_load_time` as a value in your queries that represents when data is most recently processed on your account. Use this value to dynamically set a date range in your scheduled queries.\n\nFor example, consider the following scheduled query that returns a list of balance transactions created one month before `data_load_time`.\n\n`select   id,   amount,   fee,   currency from balance_transactions -- this table is the canonical record of changes to your Stripe balance where   created < data_load_time and   created >= data_load_time - interval '1' month order by created desc limit 10`\n\nThe following timeline illustrates how this works based on data availability.\n\n| Date | Timeline for results |\n| --- | --- |\n| 2024-07-09 | *   `data_load_time` is interpreted as `2024-07-09`<br>*   The scheduled query includes transaction data through EOD 2024-07-08<br>*   Query results are available on 2024-07-09 by 2pm UTC |\n\nNow, consider the following scheduled query that returns a list of charge\\_ids and interchange billing amounts associated with each fee balance debit created one month before `data_load_time`.\n\n`select   ic.charge_id,   ic.billing_currency,   ic.billing_amount,   ic.balance_transaction_id,   ic.balance_transaction_created_at from icplus_fees as ic join balance_transactions as bt   on ic.balance_transaction_id = bt.id where bt.created >= data_load_time - interval '1' month   and bt.created < data_load_time`\n\nIf this query is scheduled to recur daily, the following timeline illustrates when you can expect the results.\n\n| Date | Timeline for results |\n| --- | --- |\n| 2024-07-12 | *   `data_load_time` is interpreted as `2024-07-09 00:00:00 +0000`<br>*   The scheduled query includes transaction data through EOD 2024-07-08<br>*   Query results are available on 2024-07-12 by 2am UTC |\n\n## Data freshness for datasets![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nView the table below for information on data freshness for specific datasets.\n\n| Dataset | Example tables | Sigma freshness | Data Pipeline freshness |\n| --- | --- | --- | --- |\n| Core API tables (including Connect versions) | `balance_transactions`, `charges`, `connected_account_balance_transactions` | 12 hours | 12 hours |\n| Daily refreshed tables | `exchange_rates_from_usd`, `radar_rules`, `radar_rule_attributes` | 28 hours | 28 hours |\n\n## About the schema![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOur full-page [schema documentation](https://dashboard.stripe.com/stripe-schema) shows the schema in a split-view format and provides more details on table linkages.\n\nThe schema follows our API conventions as closely as possible. Many of the tables correspond to specific API objects, with each column representing a specific attribute that’s reported. For instance, the `charges` table represents information about [Charge](https://docs.stripe.com/api#charge_object) objects, which is displayed in the **Payments** section of the Dashboard.\n\nWhen you write queries, refer to the our [API reference](https://docs.stripe.com/api) for additional content and values.\n\n### Sigma schema tab![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Schema tab](https://dashboard.stripe.com/stripe-schema) in Sigma displays all the available data that you can use in your queries, organized by category. Each category contains a set of tables that represents the available data.\n\nYou can select a table to expand it and reveal its available columns, along with a description of the type of data it contains (for example: `Boolean` , `Varchar`, `Foreign key`, and so on). Hover the cursor over any column to reveal a description. Use the search field at the top of the schema to find specific tables and columns.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/schema.cbdde995d4375a496852405c9a897123.png)",
    "title": "Data freshness | Stripe Documentation",
    "description": "Learn about the data freshness of Stripe data and the schema.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/how-issuing-works",
    "markdown": "# How Issuing works | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to start building your commercial card program.\n\n[Stripe Issuing](https://stripe.com/issuing) is part of Stripe’s banking-as-a-service APIs that allows you to create, manage, and scale a commercial card program for your users without setup fees. You can get started quickly and programmatically control every detail of your program, from card design to approving transactions in real time. Many users build Stripe Issuing in conjunction with [Stripe Treasury](https://docs.stripe.com/treasury) to attach cards to open loop wallets to offer their users additional money movement functionalities.\n\n[Contact sales](https://stripe.com/contact/sales) to start the process and determine your eligibility to use Issuing. If you’re interested in using Treasury with your Issuing integration, fill out the [Treasury form](https://go.stripe.global/treasury-inquiry) instead.\n\nIssuing is currently available in the US, UK, and many [European Economic Area](https://en.wikipedia.org/wiki/European_Economic_Area \"European Economic Area\") (EEA) countries. Cards can be provided to individuals who reside in the same country where business is established. If your business is established in Europe, you can provide cards to individuals residing in EEA countries (this doesn’t include the UK). Read more about [global issuing](https://docs.stripe.com/issuing/global) and see a full list of supported countries.\n\nA common use case for Issuing is spend management, which enables customers to store funds on your platform and manage spending with branded cards.\n\n## Building blocks for financial offerings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Issuing provides the tools and components needed to build a full-featured financial offering for your customers.\n\n*   [Identity verification](https://docs.stripe.com/connect/identity-verification)\n    *   Reduce risk\n    *   Perform KYC checks\n    *   Run sanctions screening\n\nWe’ve partnered with multiple trusted banks to provide the banking-as-a-service infrastructure for you to build new financial service offerings.\n\nWe also partner with both Mastercard and Visa card networks so you can choose the network on which you want to issue cards. You can also issue cards on both networks.\n\n## Issuing architecture![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith Stripe [Connect](https://docs.stripe.com/connect \"Connect\"), you onboard customers to your platform with connected accounts. For each of these connected accounts, you can create accountholders and provide cards to authorized users. The following diagram demonstrates a platform with a Stripe Issuing integration using an Issuing balance and a Treasury balance:\n\n### Connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIssuing only supports connected accounts that don’t use a Stripe-hosted Dashboard, and where your platform is responsible for requirements collection and loss liability, also known as a Custom connected account. Learn how to [create connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct) that work with Issuing.\n\n### Issuing balance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAn Issuing balance is a funding source attached to a connected account that provides the funds for spending with the associated card account. Funds can be added to the connected account’s Issuing balance either by transferring from the connected account’s Stripe account balance, or through a top up from an external bank account. Funds can also be paid out from the Issuing balance to an external bank account.\n\nConnected accounts can also use a Stripe Treasury account to fund cards for a full banking-as-a-service solution.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Learn how to set up Issuing as a Connect platform](https://docs.stripe.com/issuing/connect)\n*   [Review compliance requirements pertaining to Issuing](https://docs.stripe.com/issuing/compliance-us)\n*   [Review best practices and tools for testing an Issuing integration](https://docs.stripe.com/issuing/testing)\n*   [Learn about setting card rules to control spending](https://docs.stripe.com/issuing/controls/spending-controls)\n*   [Learn about fraud controls and tools offered through Stripe Issuing](https://docs.stripe.com/issuing/manage-fraud)",
    "title": "How Issuing works | Stripe Documentation",
    "description": "Learn how to start building your commercial card program.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/reference/permissions",
    "markdown": "# Permissions reference | Stripe DocumentationThe Stripe Docs logo\n\nAccount`connected_account_read`Grants access to read [Accounts](https://docs.stripe.com/api/accounts)Account link`account_link_write`Grants access to [Account Links](https://docs.stripe.com/api/account_links)Apple Pay Domain`apple_pay_domain_read`, `apple_pay_domain_write`Grants access to Apple Pay Domain resources. To use Apple Pay, you need to register your web domains with Apple. See [domain registration](https://docs.stripe.com/payments/payment-methods/pmd-registration) for more information.Application Fee`application_fee_read`, `application_fee_write`Grants access to [Application Fees](https://docs.stripe.com/api/application_fees)Balance`balance_read`Grants access to [Balance](https://docs.stripe.com/api/balance)\n\nBalance transaction source\n\n`balance_transaction_source_read`\n\nGrants access to expand the `source` attribute when retrieving [Balance Transactions](https://docs.stripe.com/api/balance_transactions)\n\nThis permission also implies the following permissions: `application_fee_read`, `balance_read`, `transfer_read`\n\nBilling clock`billing_clock_read`, `billing_clock_write`Grants access to [Test clocks](https://docs.stripe.com/billing/testing/test-clocks)Charge`charge_read`, `charge_write`Grants access to [Charges](https://docs.stripe.com/api/charges)\n\nCheckout Session\n\n`checkout_session_read`, `checkout_session_write`\n\nGrants access to [Sessions](https://docs.stripe.com/api/checkout/sessions)\n\nThis permission also implies the following permissions: `mandate_read`, `payment_intent_read`, `payment_links_read`, `product_read`, `setup_intent_read`, `sku_read`\n\nConfiguration`terminal_configuration_read`, `terminal_configuration_write`Grants access to [Configurations](https://docs.stripe.com/api/terminal/configuration)Connection Token`terminal_connection_token_write`Grants access to [Connection Tokens](https://docs.stripe.com/api/terminal/connection_tokens)Coupon`coupon_read`, `coupon_write`Grants access to [Coupons](https://docs.stripe.com/api/coupons)\n\nCredit note\n\n`credit_note_read`, `credit_note_write`\n\nGrants access to [Credit Notes](https://docs.stripe.com/api/credit_notes)\n\nThis permission also implies the following permissions: `invoice_read`,\n\nCustomer portal\n\n`customer_portal_read`, `customer_portal_write`\n\nGrants access to the [customer portal](https://docs.stripe.com/api/customer_portal)\n\nIf you’re using the customer portal to manage subscriptions or payment methods, you must also request `elements_write`.\n\nCustomer\n\n`customer_read`, `customer_write`\n\nGrants access to [Customers](https://docs.stripe.com/api/customers)\n\nThis permission also implies the following permission: `billing_clock_read`.\n\nDispute`dispute_read`, `dispute_write`Grants access to [Disputes](https://docs.stripe.com/api/disputes)Edit link`edit_link_write`Grants access to [Login Links](https://docs.stripe.com/api/account/login_link)Elements`elements_write`Grants access to [Stripe.js Elements](https://docs.stripe.com/js/elements_object)Event`event_read`Grants access to [Events](https://docs.stripe.com/api/events)File`file_read`, `file_write`Grants access to [Files](https://docs.stripe.com/api/files)\n\nInvoice\n\n`invoice_read`, `invoice_write`\n\nGrants access to [Invoices](https://docs.stripe.com/api/invoices)\n\nThis permission also implies the following permission: `credit_note_read`\n\nIf you’re using the [hosted invoice page](https://docs.stripe.com/invoicing/hosted-invoice-page) to manage invoices or payment methods, you must also request `elements_write`.\n\nIssuing authorization`issuing_authorization_read`, `issuing_authorization_write`Grants access to [Authorizations](https://docs.stripe.com/api/issuing/authorizations)Issuing card`issuing_card_read`, `issuing_card_write`Grants access to [Cards](https://docs.stripe.com/api/issuing/cards)Issuing cardholder`issuing_cardholder_read`, `issuing_cardholder_write`Grants access to [Cardholders](https://docs.stripe.com/api/issuing/cardholders)Issuing dispute`issuing_dispute_read`, `issuing_dispute_write`Grants access to [Issuing Disputes](https://docs.stripe.com/api/issuing/disputes)Issuing transaction`issuing_transaction_read, issuing_transaction_write`Grants access to [Transactions](https://docs.stripe.com/api/issuing/transactions)Location`terminal_location_read`, `terminal_location_write`Grants access to [Locations](https://docs.stripe.com/api/terminal/locations)Mandate`mandate_read`, `mandate_write`Grants access to [Mandates](https://docs.stripe.com/api/mandates)Order`order_read`, `order_write`Grants access to [Orders](https://docs.stripe.com/api/orders_legacy)\n\nPayment intent\n\n`payment_intent_read`, `payment_intent_write`\n\nGrants access to [PaymentIntents](https://docs.stripe.com/api/payment_intents)\n\nIf you’re managing PaymentIntents with [Stripe.js Elements](https://docs.stripe.com/js/elements_object), you must also request `elements_write`.\n\nThis permission also implies the following permissions: `product_read`, `sku_read`\n\nPayment links\n\n`payment_links_read`, `payment_links_write`\n\nGrants access to [Payment Links](https://docs.stripe.com/payment-links)\n\nThis permission also implies the following permissions: `mandate_read`, `product_read`, `sku_read`\n\nPayment method\n\n`payment_method_read`, `payment_method_write`\n\nGrants access to [PaymentMethods](https://docs.stripe.com/api/payment_methods)\n\nThis permission also implies the following permission: `source_read`\n\nPayout`payout_read`, `payout_write`Grants access to [Payouts](https://docs.stripe.com/api/payouts)Plan`plan_read`, `plan_write`Grants access to [Plans](https://docs.stripe.com/api/plans) and [Prices](https://docs.stripe.com/api/prices)Product`product_read`, `product_write`Grants access to [Products](https://docs.stripe.com/api/products)Promotion Code`promotion_code_read`, `promotion_code_write`Grants access to [Promotion Codes](https://docs.stripe.com/api/promotion_codes)\n\nQuote\n\n`quote_read`, `quote_write`\n\nGrants access to [Quotes](https://docs.stripe.com/api/quotes)\n\nThis permission also implies the following permissions: `sku_read`, `product_read`\n\nReader`terminal_reader_read`, `terminal_reader_write`Grants access to [Readers](https://docs.stripe.com/api/terminal/readers)Report Runs and Report Types`report_runs_and_report_types_read`Grants read access to [Report Types](https://docs.stripe.com/api/reporting/report_type) and allows creation of [Report Runs](https://docs.stripe.com/api/reporting/report_run)Review`review_read`, `review_write`Grants access to [Reviews](https://docs.stripe.com/api/radar/reviews)Secret`secret_write`Grants access to [Secrets](https://docs.stripe.com/api/secret_management)\n\nSetup Intent\n\n`setup_intent_read`, `setup_intent_write`\n\nGrants access to [SetupIntents](https://docs.stripe.com/api/setup_intents)\n\nIf you’re managing SetupIntents with [Stripe.js Elements](https://docs.stripe.com/js/elements_object), you must also request `elements_write`.\n\nThis permission also implies the following permission: `mandate_read`\n\nShipping rate`shipping_rate_read`, `shipping_rate_write`Grants access to [Shipping Rates](https://docs.stripe.com/api/shipping_rates)SKU`sku_read`, `sku_write`Grants access to [SKUs](https://docs.stripe.com/api/skus)Source`source_read`, `source_write`Grants access to [Sources](https://docs.stripe.com/api/sources)Subscription`subscription_read`, `subscription_write`Grants access to [Subscriptions](https://docs.stripe.com/api/subscriptions)Tax rate`tax_rate_read`, `tax_rate_write`Grants access to [Tax Rates](https://docs.stripe.com/api/tax_rates)Tax settings`tax_settings_read`, `tax_settings_write`,Grants access to [Tax Settings](https://docs.stripe.com/api/tax/settings)Tax transaction`tax_calculations_and_transactions_read`, `tax_calculations_and_transactions_write`,Grants access to [Tax Calculations and Transactions](https://docs.stripe.com/api/tax/transactions)Token`token_read`, `token_write`Grants access to [Tokens](https://docs.stripe.com/api/tokens)Top up`top_up_read`, `top_up_write`Grants access to [Top-ups](https://docs.stripe.com/api/topups)\n\nTransfer\n\n`transfer_read`, `transfer_write`\n\nGrants access to [Transfers](https://docs.stripe.com/api/transfers)\n\nThis permission also implies the following permission: `payout_read`\n\nUsage record`usage_record_read`, `usage_record_write`Grants access to [Usage Records](https://docs.stripe.com/api/usage_records)User Email`user_email_read`Grants access to user emails\n\nWebhook\n\n`webhook_read`, `webhook_write`\n\nGrants access to [Webhook Endpoints](https://docs.stripe.com/api/webhook_endpoints)\n\nTo use `webhook_write` in your Stripe App, contact [stripe-apps@stripe.com](https://support.stripe.com/).",
    "title": "Permissions reference | Stripe Documentation",
    "description": "A list of available events and their required permissions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/reference/viewports",
    "markdown": "# Viewports reference | Stripe DocumentationThe Stripe Docs logo\n\n## A list of available viewports for Stripe Apps and how your end users see them.\n\nA viewport specifies the page in the Dashboard where your view can appear. A viewport can provide an `environment.objectContext` object that allows you to receive context on a current page’s Stripe object. For more information, see [Access Stripe objects in the Dashboard](https://docs.stripe.com/stripe-apps/build-ui#access-stripe-objects).\n\nAvailable viewports for your UI extension:\n\n| Viewport ID | Page | URLs | Object type |\n| --- | --- | --- | --- |\n| **`stripe.dashboard.payment.list`** | Payments page | `dashboard.stripe.com/payments` | `null` |\n| **`stripe.dashboard.payment.detail`** | Payment details page | `dashboard.stripe.com/payments/:id` | `charge`, `payment_intent` |\n| **`stripe.dashboard.customer.list`** | Customers page | `dashboard.stripe.com/customers` | `null` |\n| **`stripe.dashboard.customer.detail`** | Customer details page | `dashboard.stripe.com/customers/:id` | `customer` |\n| **`stripe.dashboard.invoice.list`** | Invoices page | `dashboard.stripe.com/invoices` | `null` |\n| **`stripe.dashboard.invoice.detail`** | Invoice details page | `dashboard.stripe.com/invoices/:id` | `invoice` |\n| **`stripe.dashboard.product.list`** | Products page | `dashboard.stripe.com/products/` | `null` |\n| **`stripe.dashboard.product.detail`** | Product details page | `dashboard.stripe.com/products/:id` | `product` |\n| **`stripe.dashboard.subscription.list`** | Subscriptions page | `dashboard.stripe.com/subscriptions` | `null` |\n| **`stripe.dashboard.subscription.detail`** | Subscription details page | `dashboard.stripe.com/subscriptions/:id` | `subscription` |\n| **`stripe.dashboard.payment-link.list`** | Payment Links page | `dashboard.stripe.com/payment-links` | `null` |\n| **`stripe.dashboard.payment-link.detail`** | Payment Link details page | `dashboard.stripe.com/payment-links/:id` | `payment_link` |\n| **`stripe.dashboard.home.overview`** | Dashboard homepage | `dashboard.stripe.com/dashboard` | `null` |\n| **`stripe.dashboard.balance.overview`** | Balance page | `dashboard.stripe.com/balance/overview` | `null` |\n| **`stripe.dashboard.billing.overview`** | Billing page | `dashboard.stripe.com/billing` | `null` |\n| **`stripe.dashboard.report.overview`** | Reports > Overview page | `dashboard.stripe.com/reports/hub` | `null` |\n| **`stripe.dashboard.revenue-recognition.overview`** | Revenue Recognition page | `dashboard.stripe.com/revenue-recognition` | `null` |\n| **`stripe.dashboard.shipping-rates.list`** | Shipping Rates page | `dashboard.stripe.com/shipping-rates` | `null` |\n| **`stripe.dashboard.shipping-rates.detail`** | Shipping Rate details page | `dashboard.stripe.com/shipping-rates/:id` | `shipping_rate` |\n| **`stripe.dashboard.tax-report.overview`** | Reports > Tax page | `dashboard.stripe.com/tax/reporting` | `null` |\n| **`stripe.dashboard.drawer.default`** | Available across all pages (For more information, see [Dashboard-wide availability](#dashboard-wide-availability)) |     | `null` |     |\n| **`settings`** | App settings page (For more information, learn how to [add an app settings page](https://docs.stripe.com/stripe-apps/app-settings).) |     | `null` |     |\n\n## Application availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can make your application available across all pages or specific to a single page in the Dashboard.\n\n### Dashboard-wide availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your app specifies a view for the `stripe.dashboard.drawer.default` viewport, this view appears on every page in the Dashboard except for where you have defined page-specific views.\n\nFor example, if the `ui_extension.views` field in your app’s `stripe-app.json` manifest is as follows:\n\n`{   \"id\": \"com.example.app\",   \"version\": \"1.2.3\",   \"name\": \"Example App\",   \"icon\": \"./example_icon_32.png\",   \"permissions\": [     {       \"permission\": \"customer_read\",       \"purpose\": \"Receive access to the customer information\"     }   ],   \"ui_extension\": {     \"views\": [       {         \"viewport\": \"stripe.dashboard.customer.detail\",         \"component\": \"CustomerView\"       },       {         \"viewport\": \"stripe.dashboard.drawer.default\",         \"component\": \"EverywhereElseView\"       }     ]   } }`\n\n“CustomerView” would appear when the application is open on the Customer details page, and “EverywhereElseView” would appear on every other page in the Dashboard.\n\nThe `stripe.dashboard.drawer.default` view doesn’t receive `objectContext` data the way that a page-specific view does. If your app needs to access information like the `id` of an invoice shown on an “Invoice details” page, you need to create a view that uses the `stripe.dashboard.invoice.detail` viewport. For more information, see [Page-specific availability](https://docs.stripe.com/stripe-apps/reference/viewports#page-specific-availability).\n\n### Page-specific availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPage-specific views relate to the current page the user is viewing, and allow apps to receive additional context about the page through the `environment` property. For more information, see [Access Stripe objects in the Dashboard](https://docs.stripe.com/stripe-apps/build-ui#access-stripe-objects).\n\nFor example, if your app has a view for the `stripe.dashboard.product.detail` viewport, when a user opens your app on the Product details page, that view appears in the app.\n\nIf your app doesn’t have either a page-specific view for the current page or an app-specific default view, the drawer displays a generic default view that shows the user how to access the app.\n\nFor example, if your app has two views on page-specific viewports, shown in the app manifest below:\n\n`{   \"id\": \"com.example.app\",   \"version\": \"1.2.3\",   \"name\": \"Example App\",   \"icon\": \"./example_icon_32.png\",   \"permissions\": [     {       \"permission\": \"customer_read\",       \"purpose\": \"Receive access to the customer information\"     }   ],   \"ui_extension\": {     \"views\": [       {         \"viewport\": \"stripe.dashboard.customer.detail\",         \"component\": \"CustomerView\"       },       {         \"viewport\": \"stripe.dashboard.product.detail\",         \"component\": \"ProductView\"       }     ]   } }`\n\nWhen the end user opens your app on the Dashboard homepage, the application displays links to the Customers and Products pages. If the user then navigates to the Customers page, the app displays a message prompting them to select a customer to see related information in your app.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Design your app](https://docs.stripe.com/stripe-apps/design)\n*   [How UI extensions work](https://docs.stripe.com/stripe-apps/how-ui-extensions-work)\n*   [Permissions reference](https://docs.stripe.com/stripe-apps/reference/permissions)\n*   [UI extension SDK reference](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api)",
    "title": "Viewports reference | Stripe Documentation",
    "description": "A list of available viewports for Stripe Apps and how your end users see them.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/components",
    "markdown": "# UI components | Stripe DocumentationThe Stripe Docs logo\n\n## Use Stripe’s library of components to quickly build your user interface.\n\nIf your app needs a frontend, use this reference documentation to compose a UI. Stripe’s library of prebuilt components has customizable properties to help you quickly build apps aligned to Stripe best practices. Use components to structure layouts and create graphical or interactive experiences in your apps.\n\nAll components are available in Figma at [@stripedesign](https://www.figma.com/community/file/1105918844720321397) on Figma Community.\n\n## Views![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery [view you add](https://docs.stripe.com/stripe-apps/build-ui) needs a view component. These determine which view of your app the user sees at different moments, similar to different HTML pages of a website.\n\nThe most common view is `ContextView`. When a user begins a workflow or task in your app, their view should switch to `FocusView` to hide the background details. To design your app settings page, use `SettingsView`. To design a sign in screen, use `SignInView`.\n\nSome views are root components. `ContextView`, `SettingsView`, and `SignInView` are view roots—the foundational components that contain all other UI elements—whereas `FocusView` is a child component of `ContextView`.\n\n| Component | Description |\n| --- | --- |\n| [ContextView](https://docs.stripe.com/stripe-apps/components/contextview) | ContextView allows apps to render next to Stripe content in a drawer so users can look at them side by side and share context. |\n| [SettingsView](https://docs.stripe.com/stripe-apps/components/settingsview) | Use SettingsView to let users to change details about how the app works with their account. |\n| [SignInView](https://docs.stripe.com/stripe-apps/components/signinview) | Use SignInView to display a sign in screen to users. |\n\n## Layout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse layout components to create the structure of your pages and elements.\n\n| Component | Description |\n| --- | --- |\n| [Box](https://docs.stripe.com/stripe-apps/components/box) | Use boxes to wrap other components and add custom styles and layouts. |\n| [Divider](https://docs.stripe.com/stripe-apps/components/divider) | Render a simple horizontal rule with the divider component. |\n\n## Navigation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse navigation components to help users wayfind and interact with your app.\n\n| Component | Description |\n| --- | --- |\n| [Button](https://docs.stripe.com/stripe-apps/components/button) | Buttons allow users to take actions in Stripe products, and you can use them to direct users’ attention or warn them of outcomes. |\n| [ButtonGroup](https://docs.stripe.com/stripe-apps/components/buttongroup) | Use ButtonGroup to handle the layout for multiple buttons and collapse them into an overflow menu when space is limited. |\n| [Link](https://docs.stripe.com/stripe-apps/components/link) | Links are used for navigating users from one page to another, and for actions that need more subtlety than a button provides. |\n| [Menu](https://docs.stripe.com/stripe-apps/components/menu) | A menu presents a group of actions that a user can choose from, often related to a particular object or context. |\n| [Tabs](https://docs.stripe.com/stripe-apps/components/tabs) | Use tabs to display sections of content. |\n\n## Content ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse content components to organize and place information within your app.\n\n| Component | Description |\n| --- | --- |\n| [Accordion](https://docs.stripe.com/stripe-apps/components/accordion) | Use accordions to split long or complex content into collapsible chunks. |\n| [Badge](https://docs.stripe.com/stripe-apps/components/badge) | Use badges to indicate states that an item or object might move through or change to. |\n| [Banner](https://docs.stripe.com/stripe-apps/components/banner) | Use the Banner to show a variety of alerts or messages you want to make explicit to the user. |\n| [Chip](https://docs.stripe.com/stripe-apps/components/chip) | Use chips to display and allow users to manipulate values. |\n| [FocusView](https://docs.stripe.com/stripe-apps/components/focusview) | Use FocusView to open a dedicated space for the end user to complete a specific task. |\n| [Icon](https://docs.stripe.com/stripe-apps/components/icon) | Display an icon graphic in a compatible format. |\n| [Img](https://docs.stripe.com/stripe-apps/components/img) | Display images with the Img UI component. |\n| [Inline](https://docs.stripe.com/stripe-apps/components/inline) | Use the inline component to style inline content such as text. |\n| [List](https://docs.stripe.com/stripe-apps/components/list) | Display a list of information in a variety of preconfigured formats. |\n| [Spinner](https://docs.stripe.com/stripe-apps/components/spinner) | Use the Spinner component to indicate something is loading. |\n| [Table](https://docs.stripe.com/stripe-apps/components/table) | Display rows and columns of data. |\n| [Toast](https://docs.stripe.com/stripe-apps/components/toast) | Inform users of temporary status. |\n| [Tooltip](https://docs.stripe.com/stripe-apps/components/tooltip) | Use Tooltips to provide additional contextual information about a particular element or subject. |\n\n## Forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse form components to compose input fields and controls that require user input. For example, use them to create checklists or to enable users to select settings.\n\n| Component | Description |\n| --- | --- |\n| [Checkbox](https://docs.stripe.com/stripe-apps/components/checkbox) | Use checkboxes to indicate or control boolean values. |\n| [DateField](https://docs.stripe.com/stripe-apps/components/datefield) | Use DateField to create a date input field. |\n| [FormFieldGroup](https://docs.stripe.com/stripe-apps/components/formfieldgroup) | Group form fields with the FormFieldGroup component. |\n| [Radio](https://docs.stripe.com/stripe-apps/components/radio) | Use Radios to make a selection from a mutually exclusive set of options. |\n| [Select](https://docs.stripe.com/stripe-apps/components/select) | Use Select to pick from a set of options in a dropdown. |\n| [Switch](https://docs.stripe.com/stripe-apps/components/switch) | Similar to Checkboxes, you can use Switches to indicate or control boolean values. |\n| [TextArea](https://docs.stripe.com/stripe-apps/components/textarea) | Use TextArea to create an input field for multiple lines of text. |\n| [TextField](https://docs.stripe.com/stripe-apps/components/textfield) | Use TextField to create a text input field. |\n\n## Charts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse chart components to map data points visually. For example, use a chart in your app to help users track payments data or compare progress over time.\n\n| Component | Description |\n| --- | --- |\n| [BarChart](https://docs.stripe.com/stripe-apps/components/barchart) | A bar chart visualizes data as a series of data points using bars. |\n| [LineChart](https://docs.stripe.com/stripe-apps/components/linechart) | A line chart visualizes data as a series of data points connected into a line. |\n| [Sparkline](https://docs.stripe.com/stripe-apps/components/sparkline) | A type of line chart to display data succinctly as a simple line. |",
    "title": "UI components | Stripe Documentation",
    "description": "Use Stripe’s library of components to quickly build your user interface.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/patterns",
    "markdown": "# Design patterns for Stripe Apps\n\n## Follow our recommended design patterns to expedite your Stripe app review.\n\nPatterns function as the foundation of your app design. Think of them as a combination of components—for example, combining the **Spinner** and other individual components to create a **Loading screen**. As we establish new patterns, we’ll add guidance to this section. Follow these patterns as you design your app so that it functions in a consistent, clear, and scalable manner.\n\n## Onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[\n\nActivation flow\n\nProvide users with a sign in or sign up flow that’s recognizable, secure, and intuitive.\n\n\n\n](https://docs.stripe.com/stripe-apps/patterns/activation-flow)[\n\nSign in\n\nApply this recommended sign in or sign up template as the first step in your onboarding flow.\n\n\n\n](https://docs.stripe.com/stripe-apps/patterns/sign-in)[\n\nSettings sign in\n\nWhen building a back-end only app, build your onboarding flow as part of the user’s Stripe settings.\n\n\n\n](https://docs.stripe.com/stripe-apps/patterns/settings-signin)[\n\nDemo content\n\nWhen showing demo content, follow this pattern to highlight the top functionality that your app offers.\n\n\n\n](https://docs.stripe.com/stripe-apps/patterns/demo)[\n\nAdditional context\n\nWhen providing users with additional context, dedicate a space for it on a separate screen.\n\n\n\n](https://docs.stripe.com/stripe-apps/patterns/additional-context)[\n\nRedirect to Stripe\n\nIf users need to open a new tab to complete the onboarding flow, use this pattern to provide users a clear path back to Stripe.\n\n\n\n](https://docs.stripe.com/stripe-apps/patterns/redirects)[\n\nSign out\n\nUse this pattern to provide users with a clear and universal flow when signing out of your app.\n\n\n\n](https://docs.stripe.com/stripe-apps/patterns/sign-out)\n\n## User actions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[\n\nBack link\n\nUse this pattern to allow users to navigate to a previous page.\n\n\n\n](https://docs.stripe.com/stripe-apps/patterns/back-link)[\n\nAction buttons\n\nUse this pattern to emphasize the primary action a user needs to complete.\n\n\n\n](https://docs.stripe.com/stripe-apps/patterns/action-buttons)\n\n## Status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[\n\nCommunicating state\n\nUse this pattern to clearly communicate the status of a request to users.\n\n\n\n](https://docs.stripe.com/stripe-apps/patterns/communicating-state)[\n\nEmpty state\n\nUse this pattern to make sure that users know that there’s no data available to load.\n\n\n\n](https://docs.stripe.com/stripe-apps/patterns/empty-state)[\n\nLoading\n\nUse this pattern to make sure that users know that data is being downloaded.\n\n\n\n](https://docs.stripe.com/stripe-apps/patterns/loading)[\n\nProgress stepping\n\nUse this pattern to make sure users can track step-by-step progress toward a specific task.\n\n\n\n](https://docs.stripe.com/stripe-apps/patterns/progress-stepping)[\n\nWaiting screens\n\nUse this pattern to make sure users clearly understand that they’re connecting to Stripe.\n\n\n\n](https://docs.stripe.com/stripe-apps/patterns/waiting-screens)\n\n## Layout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[\n\nLists\n\nUse this pattern to organize information as a list.\n\n\n\n](https://docs.stripe.com/stripe-apps/patterns/lists)",
    "title": "Design patterns for Stripe Apps | Stripe Documentation",
    "description": "Follow our recommended design patterns to expedite your Stripe app review.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/create-app",
    "markdown": "# Getting started with Stripe Apps\n\n## Learn the basics of app development by building, previewing, and updating a Stripe app.\n\nIn this guide, build a “Hello, world!” sample app with a UI extension on the Customer details page in the Stripe Dashboard.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  If you have an existing [Connect](https://docs.stripe.com/connect \"Connect\") extension, see [Migrate to Stripe Apps](https://docs.stripe.com/stripe-apps/migrate-extension).\n2.  Sign in to the [Stripe Dashboard](https://dashboard.stripe.com/).\n3.  If you haven’t already, install the Stripe CLI and log in using the same account.\n    \n    `# Install Homebrew to run this command: [https://brew.sh/](https://brew.sh/) brew install stripe/stripe-cli/stripe  # Connect the CLI to your dashboard stripe login`\n    \n    For additional install options, see [Get started with the Stripe CLI](https://docs.stripe.com/stripe-cli).\n    \n4.  Verify that you’re using CLI version 1.12.4 or newer. You can check by running:If your Stripe CLI version is older than 1.12.4, [update your Stripe CLI version to the latest version](https://docs.stripe.com/stripe-cli/upgrade).\n5.  Verify that node is installed and up to date.You can manage your app’s dependencies with NPM or Yarn. Use the latest stable version for the best development experience.\n\n[](#install-stripe-apps-cli)\n\nTo start building a Stripe app, install the Stripe Apps CLI plugin:\n\n`stripe plugin install apps`\n\nIf you already have the `apps` plugin installed, verify that you’re on version `1.5.12` or later.\n\n`stripe apps -v # apps version 1.5.12`\n\nIf you need to upgrade the `apps` plugin, you can run:\n\n`stripe plugin upgrade apps`\n\n[](#create-app)\n\n1.  Build the basic structure of your “Hello, world!” app:\n    \n    `stripe apps create helloworld`\n    \n2.  Follow the prompts by entering the following information:\n    \n    *   **ID**: You can accept the auto-generated app ID or customize one. This is how Stripe identifies your app. Your [app ID](https://docs.stripe.com/stripe-apps/reference/app-manifest#schema) must be globally unique.\n    *   **Display name**: Enter a display name. This is the name your Dashboard displays for your app. You can always change the name later.\n\n### Your directory file structure is now:\n\n[](#preview-app)\n\nYou can run your app locally, update it, and preview your changes in the Dashboard:\n\n1.  Go into the `helloworld` directory:\n    \n2.  To preview your app, start your local development server:\n    \n3.  Press **Enter** to open your browser.\n    \n    #### Note\n    \n4.  Click **Continue** to preview your app in your Stripe account:\n    \n    ![Screenshot of enabling preview mode](https://b.stripecdn.com/docs-statics-srv/assets/enable_app_preview.7d71712d107d581e0a25a4ebaf71484e.png)\n    \n    Enable app preview\n    \n    ![Hello World app](https://b.stripecdn.com/docs-statics-srv/assets/helloworld_app.7b1588ce22f93f72ab2ecd07c44dd041.png)\n    \n    Your app in the Dashboard\n    \n\nThe `App` view only renders on the Customer details page in the Dashboard. If you don’t see your app, make sure you [create a customer in the Dashboard](https://docs.stripe.com/invoicing/customer).\n\n[](#build-app)\n\nWhile you’re previewing your app in the Dashboard, the local development server enables real-time updates on your app:\n\n1.  In your `App.tsx` file, change the title while you keep the Stripe Dashboard page open and your development server running. Save the file to see your changes in your app.\n    \n2.  In the same file, remove `>` from the `</ContextView>` closing tag, and save the file to see an error:\n    \n    ![Hello World error](https://b.stripecdn.com/docs-statics-srv/assets/helloworld_error.ee7aeea9d33b54f1e17b108f61741e97.png)\n    \n    You can resolve the error in the Stripe Dashboard, your browser developer tools, or the Stripe CLI.\n    \n3.  To stop the development server, **Ctrl+C** from your command line.\n    \n\nYour sample app is complete. Next, start adding more features to your Stripe app.",
    "title": "Getting started with Stripe Apps | Stripe Documentation",
    "description": "Learn the basics of app development by building, previewing, and updating a Stripe app.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/sample-apps",
    "markdown": "# Sample apps | Stripe DocumentationThe Stripe Docs logo\n\n## See working apps from design to code.\n\nMany sample apps are available [on GitHub](https://github.com/stripe/stripe-apps/tree/main/examples) or as design files [in our Figma UI toolkit](https://www.figma.com/community/file/1105918844720321397). Use these as a starting point for your own app.\n\n## Complete sample app ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSuperTodo is a complete to-do list app you can [download from GitHub](https://github.com/stripe/stripe-apps/tree/main/examples/super-todo). It demonstrates:\n\n*   A [frontend-only app](https://docs.stripe.com/stripe-apps/how-stripe-apps-work#frontend-only-applications) that integrates with the Stripe API\n*   UI components, including [List](https://docs.stripe.com/stripe-apps/components/list), [Tab](https://docs.stripe.com/stripe-apps/components/tabs), and [Button](https://docs.stripe.com/stripe-apps/components/button)\n*   Design patterns, including [Action buttons](https://docs.stripe.com/stripe-apps/patterns/action-buttons) and [Communicating state](https://docs.stripe.com/stripe-apps/patterns/communicating-state)\n\n![Screens from the SuperTodo example app](https://b.stripecdn.com/docs-statics-srv/assets/supertodo.2647da490dc734af24defeb13356d902.png)\n\nThe SuperTodo example app shows you how to use lists, tabs, buttons, a creation screen, and a confirmation message\n\n## Sample design files ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOur [Figma UI toolkit](https://www.figma.com/community/file/1105918844720321397) includes design examples for SuperTodo and five other sample apps. Use these to see our [design patterns](https://docs.stripe.com/stripe-apps/patterns) and [UI components](https://docs.stripe.com/stripe-apps/components) in action.\n\n![All example apps side by side](https://b.stripecdn.com/docs-statics-srv/assets/app-examples.2b959be2502e11b7200649303a9096c1.png)\n\nExample apps you can use to get started\n\n## Minimal samples ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThese samples on GitHub demonstrate specific techniques. They don’t come with design files, and they might need additional features to be useful:",
    "title": "Sample apps | Stripe Documentation",
    "description": "See working apps from design to code.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/api-authentication",
    "markdown": "# API authentication methods | Stripe DocumentationThe Stripe Docs logo\n\n## Select the API authentication method that works best for your app's use case.\n\nYour app can use one of three methods to authenticate requests to the Stripe API on behalf of your users.\n\n| Method | Description | Use cases |\n| --- | --- | --- |\n| [Platform key](https://docs.stripe.com/stripe-apps/build-backend#using-stripe-apis) Default | Your account’s secret API key makes requests to the Stripe API on behalf of your user’s account. | *   You want to manage fewer keys per install.<br>*   Beta You want to distribute your app through Connect platforms. |\n| [OAuth 2.0](https://docs.stripe.com/stripe-apps/api-authentication/oauth) | Use industry standard OAuth 2.0 to generate access tokens to interact with the Stripe API. Initialize the Stripe SDK with the access token for the account you’re operating on behalf of. | *   You already use OAuth to interact with other systems.<br>*   Users need to manage the integration from your software. |\n| [Restricted API key](https://docs.stripe.com/stripe-apps/api-authentication/rak) | When a user installs your app, Stripe generates a permissioned, restricted API key that users need to copy and paste into your software to interact with Stripe. | *   Your software can’t support platform or OAuth onboarding.<br>*   Your users run your software on-premise. |\n\n## Configure![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo configure the API authentication method, edit `stripe_api_access_type` in the [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest). For setup instructions, refer to the pages linked in the table above.\n\n`{   \"id\": \"com.example.app\",   \"version\": \"0.0.1\",   \"name\": \"Your Stripe App\",   \"distribution_type\": \"public\",   \"permissions\": [],   \"stripe_api_access_type\": \"platform\" | \"oauth\" | \"restricted_api_key\", }`",
    "title": "API authentication methods | Stripe Documentation",
    "description": "Select the API authentication method that works best for your app's use case.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/store-secrets",
    "markdown": "# Store secret credentials and tokens in your app\n\n## Use the Secret Store API to persist sensitive data, like authentication credentials.\n\nThe [Secret Store API](https://docs.stripe.com/api/secret_management) is a way to securely set, find, list, and delete persistent secrets used in Stripe Apps. These credentials, also known as secrets, are only accessible to your app and the users who own them.\n\n## Overview ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Secret Store API enables your app to:\n\n*   Securely store and retrieve authentication credentials\n*   Keep users authenticated with third-party services, even if they sign out of `stripe.com` and sign in again\n*   Securely pass secrets between your UI extension and backend\n\n#### Caution\n\nStripe **does not** permit you to store sensitive personal data, personal account numbers such as credit card numbers, and other data within [PCI Compliance](https://docs.stripe.com/security/guide#validating-pci-compliance \"PCI compliance\") using the Secret Store API.\n\n### Scopes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe secrets of an uploaded app are only accessible by other apps that you’ve uploaded. You can only publish one app on an account, so published apps can never share secrets. Requests made by third-party apps can’t ever access your app’s secrets.\n\nUse scopes to further specify the accessibility of a given secret. A scope is a collection of secrets identified by its accessibility.\n\nThe Secret Store API supports the following scope types:\n\n| Scope type | Scope limits | Stores up to | Use for | Accessible to |\n| --- | --- | --- | --- | --- |\n| [account scope](https://docs.stripe.com/api/apps/secret_store/secret_resource#secret_object-scope) | There’s one `account` scope per app. Example: third-party API key | A maximum of 10 [Secrets](https://docs.stripe.com/api/apps/secret_store/secret_resource) | Secrets that apply to all users of a Stripe account that installs your app | All Dashboard users of a Stripe account and the app’s backend, on a per-app basis |\n| [user scope](https://docs.stripe.com/api/apps/secret_store/secret_resource#secret_object-scope) | Each user has one `user` scope per app. Example: OAuth access token | A maximum of 10 [Secrets](https://docs.stripe.com/api/apps/secret_store/secret_resource) | Secrets that only apply to a specific a user of a Stripe account | A specific Dashboard user of a Stripe account and the app’s backend, on a per-app basis |\n\nThe diagram below shows the secret scoping between the following:\n\n*   The Stripe account: “The Cactus Practice Stripe account”\n*   Two users sharing the same Stripe account: “User 1”, “User 2”\n*   Two different apps installed by the Stripe account: “Installed App A”, “Installed App B”\n*   `account` scoped secrets: “Foo API key” secret for App A, “Bar API key” for App B\n*   `user` scoped secrets: “OAuth access token”, “OAuth refresh token”\n\n![account secret relationship](https://b.stripecdn.com/docs-statics-srv/assets/secret_scoping_diagram.32c3c7d35e007d261389cf593bec470f.png)\n\nThe scoped secrets of two different apps installed by the Cactus Practice Stripe account.\n\n### Expiration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf a secret becomes invalid at some point in the future, you can specify an expiration time by setting the optional [`expires_at`](https://docs.stripe.com/api/apps/secret_store/secret_resource#secret_object-expires_at) parameter when you [set a secret](https://docs.stripe.com/stripe-apps/store-secrets#set-a-secret). This parameter takes in a Unix timestamp (the number of seconds elapsed since the Unix epoch).\n\nAfter the `expires_at` date has passed, the secret is automatically deleted from the Secret Store API.\n\nExpiration times can’t be in the past and can’t be more than 100 years in the future.\n\n[](#set-a-secret)\n\n1.  Add the `secret_write` permission to your app:\n    \n    `stripe apps grant permission \"secret_write\" \"Allows storing secrets between page reloads\"`\n    \n2.  Set a secret by name and scope in the Secret Store API. You can use the following example code in your app’s UI extension or backend:\n    \n    `import { createHttpClient, STRIPE_API_KEY } from '@stripe/ui-extension-sdk/http_client'; import Stripe from 'stripe'; import type { ExtensionContextValue } from '@stripe/ui-extension-sdk/context'; import { useEffect } from 'react';  // Create an instance of a Stripe object to access customer information. // You don't need an API Key here, because the app uses the // dashboard credentials to make requests. const stripe: Stripe = new Stripe(STRIPE_API_KEY, {   httpClient: createHttpClient() as Stripe.HttpClient,   apiVersion: '2024-06-20', });  const App = ({userContext}: ExtensionContextValue) => {   useEffect(() => {     stripe.apps.secrets.create({       scope: { type: 'user', user: userContext.id },       name: 'secret_name',       payload: 'secret value',       expires_at: 1956528000  // optional     }).then(resp => console.log(resp));   }, []);    return null; };  export default App;`\n    \n    For more information, see the API reference documentation on [setting a secret](https://docs.stripe.com/api/apps/secret_store/set).\n    \n\n[](#find-a-secret)\n\nYou can find a secret by name and scope in the Secret Store API. For example, use the following example code in your app’s UI extension or backend:\n\n`import Stripe from 'stripe'; import { createHttpClient, STRIPE_API_KEY } from '@stripe/ui-extension-sdk/http_client'; import type { ExtensionContextValue } from '@stripe/ui-extension-sdk/context'; import { useEffect } from 'react';  // Create an instance of a Stripe object to access customer information. // You don't need to use an API key, because the app uses the // dashboard credentials to make requests. const stripe: Stripe = new Stripe(STRIPE_API_KEY, {   httpClient: createHttpClient() as Stripe.HttpClient,   apiVersion: '2024-06-20', });  const App = ({userContext}: ExtensionContextValue) => {   useEffect(() => {     stripe.apps.secrets.find({       scope: { type: 'user', user: userContext.id },       name: 'secret_name',       expand: ['payload'],     }).then(resp => console.log(resp.payload));   }, []);    return null; };  export default App;`\n\nFor more information, see [Find a secret](https://docs.stripe.com/api/apps/secret_store/find).\n\n[](#delete-a-secret)\n\nTo delete a secret by name and scope in the Secret Store API, you can use the following example code in your app’s UI extension or backend:\n\n`import Stripe from 'stripe'; import { createHttpClient, STRIPE_API_KEY } from '@stripe/ui-extension-sdk/http_client'; import type { ExtensionContextValue } from '@stripe/ui-extension-sdk/context'; import { useEffect } from 'react';  // Create an instance of a Stripe object to access customer information. // Note that you don't need to use an API key, because the app uses the // dashboard credentials to make requests. const stripe: Stripe = new Stripe(STRIPE_API_KEY, {   httpClient: createHttpClient() as Stripe.HttpClient,   apiVersion: '2024-06-20', });  const App = ({userContext}: ExtensionContextValue) => {   useEffect(() => {     stripe.apps.secrets.deleteWhere({       scope: { type: 'user', user: userContext.id },       name: 'secret_name',     }).then(resp => console.log(resp));   }, []);    return null; };  export default App;`\n\nFor more information, see [Delete a secret](https://docs.stripe.com/api/apps/secret_store/delete).\n\n[](#list-secrets)\n\nIf you stored the maximum amount of secrets in an `account` or `user` scope and want to add another secret, you must delete at least 1 of the 10 secrets. To determine which secrets to delete, you can list all the secrets for a given scope.\n\nTo list the secrets of an `account` or `user` scope, you can use the following example code in your app’s UI extension or backend:\n\n`import Stripe from 'stripe'; import { createHttpClient, STRIPE_API_KEY } from '@stripe/ui-extension-sdk/http_client'; import type { ExtensionContextValue } from '@stripe/ui-extension-sdk/context'; import { useEffect } from 'react';  // Create an instance of a Stripe object to access customer information. // Note that you don't need to use an API key, because the app uses the // dashboard credentials to make requests. const stripe: Stripe = new Stripe(STRIPE_API_KEY, {   httpClient: createHttpClient() as Stripe.HttpClient,   apiVersion: '2024-06-20', });  const App = ({userContext}: ExtensionContextValue) => {   useEffect(() => {     stripe.apps.secrets.list({       scope: { type: 'user', user: userContext.id },     }).then(resp => console.log(resp.data));   }, []);    return null; };  export default App;`\n\nFor more information, see [List secrets](https://docs.stripe.com/api/apps/secret_store/list).\n\n## Example apps ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following example apps demonstrate how to use the Secret Store API:\n\n*   [Simple demo app](https://github.com/stripe/stripe-apps/tree/master/examples/secret-store)\n*   [Dropbox OAuth with PKCE app](https://github.com/stripe/stripe-apps/tree/master/examples/dropbox-oauth-pkce)",
    "title": "Store secret credentials and tokens in your app | Stripe Documentation",
    "description": "Use the Secret Store API to persist sensitive data, like authentication credentials.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/pkce-oauth-flow",
    "markdown": "# Add authorization flows | Stripe DocumentationThe Stripe Docs logo\n\n## Implement PKCE OAuth workflows in your Stripe app in the Stripe Dashboard.\n\nYou can implement OAuth with your UI extension in the Dashboard to retrieve access tokens from an OAuth provider instead of building an OAuth backend. If the user gives your Stripe App access to an OAuth provider, they can interact with the services of the OAuth provider directly from your Stripe App in the Dashboard.\n\n![A Stripe App's OAuth flow](https://b.stripecdn.com/docs-statics-srv/assets/oauth_pkce_flow_diagram_v2.491ae76870978963e8b69e82e2b1a1a1.png)\n\nOAuth flow with a Stripe App\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Ensure that your OAuth provider supports the [Proof Key for Code Exchange (PKCE)](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow-with-proof-key-for-code-exchange-pkce) flow.\n*   If you haven’t already, create an app with your OAuth provider to connect and use with your Stripe App.\n*   [Create a Stripe app](https://docs.stripe.com/stripe-apps/create-app) and [build a UI](https://docs.stripe.com/stripe-apps/build-ui). The UI extension retrieves the access token from the OAuth provider with the PKCE flow.\n\n[](#create-authorization-link)\n\nEnd users click on an authorization link from your app to start the OAuth flow and give your app access to the service of the OAuth provider.\n\n1.  Create the [test mode](https://docs.stripe.com/test-mode \"test mode\") and live mode OAuth redirect URLs. The redirect URL is unique to your app and includes your app `id` in the path. For example, if the `id` field in your [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest) is `\"id\": \"com.example.oauth-example\"`:\n    \n    *   The test mode URL is:\n    \n    `https://dashboard.stripe.com/test/apps-oauth/com.example.oauth-example`\n    \n    *   The live mode URL is:\n    \n    `https://dashboard.stripe.com/apps-oauth/com.example.oauth-example`\n    \n2.  Register the test and live OAuth redirect URLs with your OAuth provider.\n    \n3.  From your app’s UI extension, create a pathway that routes users from your Stripe app to authorize the OAuth provider by passing the following parameters in the OAuth redirect URLs:\n    \n    | Parameter | Value |\n    | --- | --- |\n    | `reponse_type` | This is always `code`. The PKCE flow uses `code` as the value to request an authorization code from the OAuth provider. |\n    | `client_id` | The ID of your OAuth app assigned from your OAuth provider. |\n    | `redirect_uri` | The Stripe app’s OAuth redirect URL. This is the URL the OAuth provider uses to redirect a user to your app. |\n    | `state` | The `state` return value from the [createOAuthState](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#createOAuthState) function. |\n    | `code_challenge` | The `challenge` return value from the [createOAuthState](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#createOAuthState) function. |\n    | `code_challenge_method` | This is always `S256`. |\n    \n\nYou can use the following code example to route users from your Stripe App to authorize a third-party app using the OAuth redirect URLs and the [Button](https://docs.stripe.com/stripe-apps/components/button) UI component:\n\n``import {   ContextView,   Button, } from '@stripe/ui-extension-sdk/ui'; import * as React from 'react'; import {createOAuthState} from '@stripe/ui-extension-sdk/oauth'; import type {ExtensionContextValue} from '@stripe/ui-extension-sdk/context';  const {useState, useEffect} = React;  const clientID = 'your_client_id'; const getRedirectURL = (mode: 'live' | 'test') => `[https://dashboard.stripe.com/${](https://dashboard.stripe.com/$%7B)   mode === 'test' ? 'test/' : '' }apps-oauth/com.example.oauth-example`; const getAuthURL = (state: string, challenge: string, mode: 'live' | 'test') =>   `[https://www.example.com/oauth2/authorize?response_type=code&client_id=${clientID}&redirect_uri=${getRedirectURL(mode)}&state=${state}&code_challenge=${challenge}&code_challenge_method=S256`;](https://www.example.com/oauth2/authorize?response_type=code&client_id=${clientID}&redirect_uri=${getRedirectURL(mode)}&state=${state}&code_challenge=${challenge}&code_challenge_method=S256`;)  const ExampleApp = ({environment}: ExtensionContextValue) => {   const {mode} = environment;   const [authURL, setAuthURL] = useState('');   useEffect(() => {     createOAuthState().then(({state, challenge}) => {       setAuthURL(getAuthURL(state, challenge, mode));     });   }, [mode]);    return (     <ContextView title=\"Example\">       <Button type=\"primary\" href={authURL} target=\"_blank\">Authorize ExampleApp</Button>     </ContextView>   ); }; export default ExampleApp;``\n\n[](#retrieve-an-access-token)\n\nYour app can only make requests on behalf of the current user. After the user authorizes your app, the Dashboard passes their OAuth data to your app through the `code` and `verifier` values of the `oauthContext` [context prop](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#props).\n\nOnly valid authorization attempts allow your app to read the `code`, `verifier`, and if applicable, custom `state` values. An authorization attempt is valid if the OAuth provider redirects to the `redirect_uri` and includes the `state` value in the matching query string parameter of the authorization link. The `state` value must be identical to the `state` value returned by `createOAuthState` function (when you created the authorization link).\n\nFrom your app’s UI extension, retrieve the access token from the OAuth provider with the following parameters:\n\n| Parameter | Value |\n| --- | --- |\n| `code` | The value of the `oauthContext.code` [React prop](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#props). |\n| `grant_type` | This is always `authorization_code`. |\n| `code_verifier` | The value of the `oauthContext.verifier` [React prop](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#props). |\n| `client_id` | Your client ID from the OAuth provider. |\n| `redirect_uri` | The Stripe app’s OAuth redirect URL. |\n\nYou can use the following code example to retrieve an access token from an OAuth provider:\n\n``import {ContextView} from '@stripe/ui-extension-sdk/ui'; import * as React from 'react'; import type {ExtensionContextValue} from '@stripe/ui-extension-sdk/context';  const {useState, useEffect} = React;  // Store the authorization token data. interface TokenData {   account_id: string;   access_token: string;   expires_in: number; }  const clientID = 'your_client_id'; const getRedirectURL = (mode: 'live' | 'test') => `[https://dashboard.stripe.com/${](https://dashboard.stripe.com/$%7B)   mode === 'test' ? 'test/' : '' }apps-oauth/com.example.oauth-example`;  // Fetch the authorization token from an example authorization server. const getTokenFromAuthServer = async ({code, verifier, mode}: {code: string, verifier: string, mode: 'live' | 'test'}): Promise<null | TokenData> => {   try {     const response = await fetch(`[https://api.example.com/oauth2/token?code=${code}&grant_type=authorization_code&code_verifier=${verifier}&client_id=${clientID}&redirect_uri=${getRedirectURL(mode)}`,](https://api.example.com/oauth2/token?code=${code}&grant_type=authorization_code&code_verifier=${verifier}&client_id=${clientID}&redirect_uri=${getRedirectURL(mode)}`,) {       method: 'POST',       headers: { 'Content-Type': 'application/x-www-form-urlencoded' },     });     if (response.ok) {       return await response.json();     }     throw new Error(await response.text());   } catch (e) {     console.error('Unable to retrieve token from authorization server:', (e as Error).message);     return null;   } };  const ExampleApp = ({environment, oauthContext}: ExtensionContextValue) => {   const [tokenData, setTokenData] = useState<TokenData | null>(null);   const code = oauthContext?.code || '';   const verifier = oauthContext?.verifier || '';   const {mode} = environment;    useEffect(() => {     if (code && verifier && !tokenData) {       getTokenFromAuthServer({code, verifier, mode}).then(setTokenData);     }   }, [code, verifier, mode, tokenData]);    return (     <ContextView title=\"Example\" />   ) }; export default ExampleApp;``\n\n[\n\n## Set and find an access token![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#set-and-find-access-token)\n\nSet and find the access token in the Secret Store API to enable your app to store and use it in later sessions:\n\n1.  Add the `secret_write` permission to your app:\n    \n    `stripe apps grant permission \"secret_write\" \"Allows storing secrets between page reloads\"`\n    \n2.  From your app’s UI extension, set the access token in the Secret Store API:\n    \n    ``import {ContextView} from '@stripe/ui-extension-sdk/ui'; import * as React from 'react'; import Stripe from 'stripe'; import {createHttpClient, STRIPE_API_KEY} from '@stripe/ui-extension-sdk/http_client'; import type {ExtensionContextValue} from '@stripe/ui-extension-sdk/context';  const {useState, useEffect} = React;  interface TokenData {   account_id: string;   access_token: string;   expires_in: number; }  const clientID = 'your_client_id'; const getRedirectURL = (mode: 'live' | 'test') => `[https://dashboard.stripe.com/${](https://dashboard.stripe.com/$%7B)   mode === 'test' ? 'test/' : '' }apps-oauth/com.example.oauth-example`;  // Fetch the authorization token from an example authorization server. const getTokenFromAuthServer = async ({code, verifier, mode}: {code: string, verifier: string, mode: 'live' | 'test'}): Promise<null | TokenData> => {   try {     const response = await fetch(`[https://api.example.com/oauth2/token?code=${code}&grant_type=authorization_code&code_verifier=${verifier}&client_id=${clientID}&redirect_uri=${getRedirectURL(mode)}`,](https://api.example.com/oauth2/token?code=${code}&grant_type=authorization_code&code_verifier=${verifier}&client_id=${clientID}&redirect_uri=${getRedirectURL(mode)}`,) {       method: 'POST',       headers: { 'Content-Type': 'application/x-www-form-urlencoded' },     });     if (response.ok) {       return await response.json();     }     throw new Error(await response.text());   } catch (e) {     console.error('Unable to retrieve token from authorization server:', (e as Error).message);     return null;   } };  const stripe = new Stripe(STRIPE_API_KEY, {   httpClient: createHttpClient(),   apiVersion: '2024-06-20', });  // Save the token to Secret Store API const saveTokenData = async ({userID, tokenData}: {userID: string, tokenData: TokenData}) => {   try {     await stripe.apps.secrets.create({       scope: { type: 'user', user: userID },       name: 'oauth_token',       payload: JSON.stringify(tokenData),     });   } catch (e) {     console.error('Unable to save token to Secret Store API:', (e as Error).message);   } }  const ExampleApp = ({userContext, environment, oauthContext}: ExtensionContextValue) => {   const [tokenData, setTokenData] = useState<TokenData | null>(null);   const code = oauthContext?.code || '';   const verifier = oauthContext?.verifier || '';   const {mode} = environment;   const {id: userID} = userContext;    useEffect(() => {     if (code && verifier && !tokenData) {       getTokenFromAuthServer({code, verifier, mode}).then(tokenData => {         if (tokenData) {           setTokenData(tokenData);           saveTokenData({userID, tokenData});         }       });     }   }, [code, verifier, mode, userID, tokenData]);    return (     <ContextView title=\"Example\" />   ) };  export default ExampleApp;``\n    \n    For more information, see [Set a secret](https://docs.stripe.com/api/apps/secret_store/set).\n    \n3.  From your app’s UI extension, find the access token in the Secret Store API:\n    \n    `import {ContextView} from '@stripe/ui-extension-sdk/ui'; import * as React from 'react'; import Stripe from 'stripe'; import {createHttpClient, STRIPE_API_KEY} from '@stripe/ui-extension-sdk/http_client'; import type {ExtensionContextValue} from '@stripe/ui-extension-sdk/context';  const {useState, useEffect} = React;  interface TokenData {   account_id: string;   access_token: string;   expires_in: number; }  const stripe = new Stripe(STRIPE_API_KEY, {   httpClient: createHttpClient(),   apiVersion: '2024-06-20', });  // Read the token from Secret Store API const getTokenFromSecretStore = async (userID: string): Promise<TokenData | null> => {   try {     const response = await stripe.apps.secrets.find({       scope: { type: 'user', user: userID },       name: 'oauth_token',       expand: ['payload'],     });     const secretValue: string = response.payload!;     return JSON.parse(secretValue) as TokenData;   } catch (e) {     console.error('Unable to retrieve token from Secret Store API:', (e as Error).message);     return null;   } };  const ExampleApp = ({userContext}: ExtensionContextValue) => {   const [tokenData, setTokenData] = useState<TokenData | null>(null);   const {id: userID} = userContext;    useEffect(() => {     if (!tokenData) {       getTokenFromSecretStore(userID).then(setTokenData);     }   }, [userID, tokenData]);    return (     <ContextView title=\"Example\" />   ) };  export default ExampleApp;`\n    \n    For more information, see [Find a secret](https://docs.stripe.com/api/apps/secret_store/find).",
    "title": "Add authorization flows | Stripe Documentation",
    "description": "Implement PKCE OAuth workflows in your Stripe app in the Stripe Dashboard.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/app-settings",
    "markdown": "# Add an app settings page\n\n## To let users configure settings for your app, create an app settings page in the Stripe Dashboard.\n\nWhen you upload your app to Stripe, we create an app settings page in the Stripe Dashboard. The rest of the page is open for you to create custom settings.\n\n## How to use app settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAn account administrator who installs your app can use the settings page in several ways:\n\n*   **Configuring your app for their use case**: For example, say a business on Stripe wants to synchronize payments data from the last seven days with another application. Your settings page can provide a dropdown menu to let admin users select 1 week as the time period. The configuration applies globally on the account, meaning all users on that Stripe account now see data from the past week in your app.\n*   **Authenticating users**: If your app connects to a different application—outside of Stripe—you need a place for Stripe users to log in to the other app, pass credentials, and handle authentication. The settings page is the best place for users to link accounts in this way. For example, an app that uses a third-party API like Zendesk needs a `SettingsView` to authenticate a user with their Zendesk account.\n*   **Uninstalling an app**: The only place to uninstall an app is the settings page. You can’t remove the uninstall button from the settings page. There are also buttons for users to report your app and view its marketplace listing if you have one.\n\n## What you can do with it![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the settings page includes buttons for uninstalling and reporting your app, plus various app details. To populate the page with custom settings, use `SettingsView`. This view root component renders in the settings page. Add UI components, like tabs and form fields, to create the user experience you want.\n\n![SettingsView in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/settingsview.ca0e43bcc311ea9819da61b2949e6ed1.png)\n\nWhat SettingsView looks like in the Stripe Dashboard\n\n## How to customize the settings page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPopulate your app’s empty settings page by defining a settings view and composing a UI to let your users set up and configure your app.\n\nYou have control over the design of your app settings page. In the developer preview mode, the settings page appears as a smaller view. In live mode, your settings page is a full screen.\n\n[](#define-settingsview)\n\nDefine a settings view with the CLI:\n\nYou can name your settings component anything you want. The generated settings view is available in the `src/views` directory. In the [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest), your new view is tied to the `settings` viewport in a `ui_extension` field:\n\n`{   ...,   \"ui_extension\": {     \"views\": [       ...,       {         \"viewport\": \"settings\",         \"component\": \"AppSettings\"       }     ],   } }`\n\nThis code shows how a view is a pairing of a React component plus a specified viewport. In this case, the `AppSettings` view root component appears on the settings page of the Stripe Dashboard—the `settings` viewport.\n\nThe `SettingsView` view root component isn’t tied to a specific object, but tied instead to the `settings` viewport. The `settings` viewport maps to predefined locations in the Dashboard, outside of the app drawer.\n\n[](#preview-settings-page)\n\nWhile previewing your app locally, test your `SettingsView` at [https://dashboard.stripe.com/apps/settings-preview](https://dashboard.stripe.com/apps/settings-preview) to see what it looks like.\n\nAfter you upload your app, your `SettingsView` renders on the app settings page in the Dashboard. To see it live, go to `https://dashboard.stripe.com/settings/apps/YOUR_APPLICATION_ID` and replace `YOUR_APPLICATION_ID` with the ID you specified when creating your app.\n\n[](#save-the-values)\n\nWhen a user configures their settings, your app needs to apply those settings. Provide a function to pass to the `SettingsView` component for handling the save event. Clicking the **Save** button triggers the save event.\n\nThe `onSave` callback function receives an object of `values`. This object maps any form elements into key value pairs where the element `name` attribute is the key and the element `value` attribute is the value:\n\n``/**   * An example app settings view that provides two settings fields of first & last name.   * The fields are combined into a single string value and passed to an external API.   */ import {SettingsView, TextField} from \"@stripe/ui-extension-sdk/ui\";  const ExampleAppSettings = () => {   // Define a callback function to pass to the onSave event.   const saveSettings = async (values: any) => {     try {       // Extract our fields from the values object. The key is the name attribute of the form element.       const { firstname, lastname } = values;       // Make a POST request to an external API       const result = await fetch(         '[https://www.my-api.com/](https://www.my-api.com/)',         {           method: 'POST',           body: JSON.stringify({             fullName: `${firstname} ${lastname}`,           }),         }       );       await result.text();     } catch (error) {       console.error(error);     }   };    return (     /* Assign our callback function to the onSave property */     <SettingsView onSave={saveSettings}>       { /* A name attribute for each field is required to handle the form data in the onSave callback */ }       <TextField         name=\"firstname\"         label=\"First name\"       />       <TextField         name=\"lastname\"         label=\"Last name\"       />     </SettingsView>   ); };  export default ExampleAppSettings;``\n\nFor more information, see the [`SettingsView` reference](https://docs.stripe.com/stripe-apps/components/settingsview).\n\n[\n\n## Store and retrieve settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#store-and-retrieve-settings)\n\nTo handle storage and retrieval of the settings values, connect the `SettingsView` component to an [app backend](https://docs.stripe.com/stripe-apps/build-backend) or a third-party service that includes application settings.\n\nSee a [settings UI example](https://github.com/stripe/stripe-apps/tree/master/examples/settings-view).\n\n[](#display-success-message)\n\nMake sure your UI tells users they’ve successfully saved their settings choices. Use the `statusMessage` property to display a success message when a user clicks the save button.\n\n![An example of SettingsView displaying a status message](https://b.stripecdn.com/docs-statics-srv/assets/settingsview-statusmessage.372f7befb8b2104ab42f2cc35ac021d3.png)\n\nAn example of SettingsView displaying a status message.\n\nHere’s the code for this example, where a `SettingsView` generates a status message to the left of the save button:\n\n``import {useState} from 'react'; import {SettingsView, TextField} from \"@stripe/ui-extension-sdk/ui\";  /**  * An example app settings view that provides two settings fields of first & last name.  * The fields are combined into a single string value and passed to an external API.  * The user is notified of the status of their settings form via the statusMessage property.  */ const ExampleAppSettings = () => {   // useState to track the status of the form. Changing the status value triggers a rerender.   const [status, setStatus] = useState('');    // Define a callback function to pass to the onSave event.   const saveSettings = async (values: any) => {     // Update the form status with a loading message.     setStatus('Saving...');     try {       const { firstname, lastname } = values;       const result = await fetch(         '[https://www.my-api.com/](https://www.my-api.com/)',         {           method: 'POST',           body: JSON.stringify({             fullName: `${firstname} ${lastname}`,           }),         }       );       await result.text();       // Update the form status with a success message.       setStatus('Saved!');     } catch (error) {       console.error(error);       // Update the form status with an error message.       setStatus('There was an error saving your settings.');     }   };    return (     // Assign our callback function to the onSave property & pass the current value of statusMessage     <SettingsView       onSave={saveSettings}       statusMessage={status}     >       <TextField         name=\"firstname\"         label=\"First name\"       />       <TextField         name=\"lastname\"         label=\"Last name\"       />     </SettingsView>   ); };  export default ExampleAppSettings;``\n\nYou can also create your own unique designs to communicate status to your app’s users using [UI components](https://docs.stripe.com/stripe-apps/components).",
    "title": "Add an app settings page | Stripe Documentation",
    "description": "To let users configure settings for your app, create an app settings page in the Stripe Dashboard.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/build-ui",
    "markdown": "# Build a UI | Stripe DocumentationThe Stripe Docs logo\n\nWhen you assign a component to a viewport, the component can receive context about the Stripe object on that page using the `environment.objectContext` object.\n\nFor example, if you create a view that uses the `stripe.dashboard.customer.detail` viewport, the `environment.objectContext` object returns a `customer` object type and the current customer’s ID. You can then use those values to get more information about the [Customer](https://docs.stripe.com/api/customers?lang=node) object and modify attributes like their address, description, and so on.\n\nFor an index of the objects that a viewport gives, see [viewports reference documentation](https://docs.stripe.com/stripe-apps/reference/viewports).\n\n### Example: Update customer name ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following code updates the customer name by using the [Stripe Node.js API client](https://docs.stripe.com/api?lang=node) and the viewport’s `environment.objectContext` ID:\n\n1.  Add the `customer_write` permission to your app:\n    \n    `stripe apps grant permission \"customer_write\" \"Allows the app to update the name of the customer.\"`\n    \n2.  Use the Stripe API in your app to update the customer’s name:\n    \n    `import {createHttpClient, STRIPE_API_KEY} from '@stripe/ui-extension-sdk/http_client'; import Stripe from 'stripe';  // Initiate communication with the stripe client. const stripe = new Stripe(STRIPE_API_KEY, {   httpClient: createHttpClient(),   apiVersion: '2022-08-01', })  const App = ({environment, userContext}) => {   // Call the Stripe API to make updates to customer details.   const updateCurrentCustomer = async (newCustomerName) => {     try {       // If the user has permission to update customers, this should succeed.       const updatedCustomer = await stripe.customers.update(         // We can use the current objectContext to get the customer ID.         environment.objectContext.id,         {name: newCustomerName}       );        console.log(updatedCustomer.name);     } catch (error) {}   }; }`\n    \n\n### Example: Update Dashboard data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your app changes data in the Dashboard, use the [useRefreshDashboardData](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#useRefreshDashboardData) function to generate a callback that refreshes the data:\n\n`import {useCallback} from 'react'; import {useRefreshDashboardData} from '@stripe/ui-extension-sdk/context';  const App = () => {   // Get the callback used to refresh the dashboard data   const refreshDashboardData = useRefreshDashboardData();    // Stripe API call   const updateCustomer = useCallback(async () => {     try {       await updateCurrentCustomer();        // Call to refresh the data in the Dashboard       refreshDashboardData();     } catch (error) {}   }, [refreshDashboardData]); }`",
    "title": "Build a UI | Stripe Documentation",
    "description": "Build, test, and edit a custom UI that extends the functionality of the Stripe Dashboard.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/onboarding",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Onboarding\n\n## Guide your users through your app's sign in and initial setup flows.\n\nOnboarding is the process your users go through to get your app set up after installation. It’s their first interaction with your app, and it needs to be intuitive and polished, with minimal friction before they can start using your app.\n\nThe required onboarding steps are different for every app, but we provide tools and best practices to help you.\n\n[](#display-your-view)\n\nWhen a user installs your app and goes to view it in the Dashboard, it’s important that the onboarding flow is the first thing they encounter. Make sure to:\n\n*   Create an onboarding component (using [SignInView](https://docs.stripe.com/stripe-apps/components/signinview), if a sign in flow is needed).\n*   In all of your [page-specific views](https://docs.stripe.com/stripe-apps/reference/viewports#page-specific-availability), check to see if the user has completed onboarding when the view first loads, and display your onboarding component appropriately. For example:\n    \n    `import {SignInView, ContextView} from '@stripe/ui-extension-sdk/ui'; import appIcon from './icon.svg';  // This component can be defined in a separate file for reuse between views const Onboarding = () => (   <SignInView     description=\"Connect your SuperTodo account to Stripe.\"     primaryAction={{label: 'Sign in', href: 'https://supertodo.example.com'}}     brandColor=\"#635bff\"     brandIcon={appIcon}   /> );  const CustomerDetailView = () => {   // The definition of \"isSignedIn\" is dependent upon your app's sign in method   if (!isSignedIn) {     return <Onboarding />   }    return (     <ContextView title=\"SuperTodo customer view\">       // your signed-in content here     </ContextView>   ); };`\n    \n*   Do the same in your [Dashboard default view](https://docs.stripe.com/stripe-apps/reference/viewports#dashboard-wide-availability). If you don’t have a default view, create one so that wherever the user is in the Dashboard, they’re presented with the right flow when they open your app. If you don’t need a Default view for purposes other than onboarding, you can return `null` from the view if the user has already completed onboarding and the Dashboard displays the Stripe Dashboard default drawer that guides users to a page-specific view. For example:\n    \n    `import {SignInView} from '@stripe/ui-extension-sdk/ui'; import appIcon from './icon.svg';  // This component can be defined in a separate file for reuse between views const Onboarding = () => (   <SignInView     description=\"Connect your SuperTodo account to Stripe.\"     primaryAction={{label: 'Sign in', href: 'https://supertodo.example.com'}}     brandColor=\"#635bff\"     brandIcon={appIcon}   /> );  const DashboardDefaultView = () => {   // The definition of \"isSignedIn\" is dependent upon your app's sign in method   if (!isSignedIn) {     return <Onboarding />   }    return null; };`\n    \n\n[](#rely-on-stripe-authentication)\n\nIf you’re building an app that stores data in an external backend but doesn’t need its own concept of user accounts, you can rely on Stripe’s authentication to offer zero-touch onboarding. Using this method, your app doesn’t require any onboarding and is usable immediately after installation.\n\nStart by setting up your backend to [authenticate requests from your app’s UI](https://docs.stripe.com/stripe-apps/build-backend#authenticate-ui-to-backend). With that in place, you can store information in your database with an added column for the user ID or account ID provided by Stripe. Users are already signed into the Stripe Dashboard when they use your app, so there’s no need for additional authentication.",
    "title": "Onboarding | Stripe Documentation",
    "description": "Guide your users through your app's sign in and initial setup flows.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/distribution-options",
    "markdown": "# Distribution options | Stripe DocumentationThe Stripe Docs logo\n\n## Learn what you need to know to share your Stripe Apps with users.\n\nStripe Apps gives you two ways to distribute your apps. You can make them publicly available or share them only with your [team members](https://docs.stripe.com/dashboard/teams \"team member\").\n\n## Publish your app on the Stripe App Marketplace ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Stripe App Marketplace is how you share your application with the Stripe user community.\n\nWhen you publish an app on the App Marketplace, make sure the app complies with all [app review requirements](https://docs.stripe.com/stripe-apps/review-requirements#app-review-requirements). We also recommend reviewing our [app listing guidelines](https://docs.stripe.com/stripe-apps/listing-guidelines) for best practices and recommended coding patterns. Stripe reviews all apps to make sure they comply with the published requirements before listing them in the marketplace.\n\nStripe can only support English language listings at this time. To support additional languages, reach out to Stripe.\n\nThe publishing process consists of these steps:\n\n1.  Select the version of the app that you want to publish.\n2.  Create an app listing that provides prospective users with information about your app and defines how your app appears in the App Marketplace.\n3.  Submit the application for review.\n4.  Publish the app to the App Marketplace.\n\nFor more information, learn how to [publish your app](https://docs.stripe.com/stripe-apps/publish-app).\n\nWith Stripe Apps, you have the option of sharing your app only with [team members](https://docs.stripe.com/dashboard/teams \"team member\"). For example, you might develop an app that sends sale data into your own custom accounting system. Or you might build an app that connects paid orders with your fulfillment system. For these and other situations, you can make the application only available to team members of your Stripe account.\n\nUnlike apps on the App Marketplace, apps shared with team members don’t go through a review process. However, we recommend reviewing our [app review requirements](https://docs.stripe.com/stripe-apps/review-requirements#app-review-requirements) and [app listing guidelines](https://docs.stripe.com/stripe-apps/listing-guidelines) when you build your app.\n\nSharing your app with team members consists of these steps:\n\n1.  Specify that you want to share your app only with members of your Stripe account.\n2.  Select the version of the app that you want to [upload and make available](https://docs.stripe.com/stripe-apps/upload-install-app).\n\nIf you later decide you want to publish your app on the Stripe App Marketplace, you must uninstall your app in [live mode](https://docs.stripe.com/stripe-apps/upload-install-app#install-in-live-mode) first.\n\n## Setting the distribution type for your app ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo set the distribution type for your app, run the following command:\n\n`stripe apps set distribution public`\n\n`stripe apps set distribution private`\n\nThis updates the app manifest to reflect the distribution type. The new distribution takes effect after you [upload your app](https://docs.stripe.com/stripe-apps/upload-install-app). The private distribution type is the default type, which you don’t need to explicitly set.\n\n#### Caution\n\nYou can continue to change the distribution type until you upload an app. After you upload an app with a public distribution, you can’t set a public distribution for another app within the same Stripe account. You can change the distribution type from private to public if there are no other public apps within the same Stripe account.\n\n### Updated app manifest:\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Publish your app](https://docs.stripe.com/stripe-apps/publish-app)\n*   [Upload your app](https://docs.stripe.com/stripe-apps/upload-install-app)\n*   [Invite team members or developers to access your Stripe account](https://support.stripe.com/questions/invite-team-members-or-developers-to-access-your-stripe-account)",
    "title": "Distribution options | Stripe Documentation",
    "description": "Learn what you need to know to share your Stripe Apps with users.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/build-backend",
    "markdown": "# Add server-side logic | Stripe DocumentationThe Stripe Docs logo\n\n## Validate and process user actions and data in your app using backend code.\n\nWith Stripe Apps, you can add server-side logic with a self-hosted backend. With a self-hosted backend service, you can:\n\n*   Integrate securely with third-party systems that require a server-side integration.\n*   Subscribe to [webhook](https://docs.stripe.com/webhooks \"webhook\") events from Stripe and synchronize Stripe with other systems.\n*   Use long-lived app logic that executes when the user closes the browser.\n*   Build apps that provide cron-job-like functionality to schedule specific actions.\n\n![App backend flowchart](https://b.stripecdn.com/docs-statics-srv/assets/app-backend.46a6d040d44872962a59728aaa65ee06.png)\n\nHow the self-hosted backend relates to the app\n\n[](#authenticate-ui-to-backend)\n\nTo authenticate a user from the Dashboard, the backend needs a signature with the shared secret and the account and user ID of the current, signed-in Dashboard user. If your user doesn’t have permission to call the API, Stripe returns a [Permission error](https://docs.stripe.com/error-handling?lang=node#permission-errors).\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Make sure your backend service can send and receive HTTP requests. If you haven’t built an API server before, consider trying the [interactive webhook endpoint builder](https://docs.stripe.com/webhooks/quickstart).\n    \n2.  Create your shared secret by [uploading your app](https://docs.stripe.com/stripe-apps/upload-install-app):\n    \n    Don’t worry if you haven’t finished developing the current version of your app, uploading won’t update your app in live mode.\n    \n3.  Get your app’s secret to verify the signature in your backend:\n    \n    a. Go to your Stripe app details page by selecting your app from [Apps](https://dashboard.stripe.com/apps).\n    \n    b. Under the application ID, click the overflow menu (), then click **Signing secret** to open the signing secret dialog.\n    \n    c. Click the clipboard to copy your app’s secret from the signing secret dialog.\n    \n\n### Send a signed request![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![Sending a signed request](https://b.stripecdn.com/docs-statics-srv/assets/authenticate-ui-extension.9e45231756741ade2e1a73f56585864c.png)\n\nTo send a signed request to the app’s backend:\n\n1.  Get the current signature using the [fetchStripeSignature](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#fetchStripeSignature) asynchronous function.\n2.  Add the signature to the `Stripe-Signature` header.\n3.  Include the `user_id` and `account_id` objects in the request.\n4.  On the app’s backend, verify that the request includes the signature, app secret, `user_id`, and `account_id`.\n\nSee an [example of sending a signed request with additional data](https://docs.stripe.com/stripe-apps/build-backend#send-a-signed-request-with-additional-data).\n\nAn example request from a Stripe app with the `Stripe-Signature` header:\n\n``import {fetchStripeSignature} from '@stripe/ui-extension-sdk/utils';  const App = ({ userContext, environment }: ExtensionContextValue) => {   const makeRequestToMyBackend = async (endpoint, requestData) => {     // By default the signature is signed with user id and account id.     const signaturePayload = {       user_id: userContext?.id,       account_id: userContext?.account.id,     };     return fetch(`[https://example.com/${endpoint}/`,](https://example.com/$%7Bendpoint%7D/%60,) {       method: 'POST',       headers: {         'Stripe-Signature': await fetchStripeSignature(),         'Content-Type': 'application/json',       },       // Include the account ID and user ID in the body to verify on backend.       body: JSON.stringify({         ...requestData,         ...signaturePayload,       }),     });   };   ... }``\n\nSample backend verifying the request:\n\nPlease be aware that the order and naming of the payload fields matters when performing signature verification. The `user_id` precedes the `account_id` and the resulting object is as follows: `{ user_id, account_id }`\n\n`// Set your secret key. Remember to switch to your live secret key in production. // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = require('stripe')(process.env.STRIPE_API_KEY); const express = require('express');  // Find your app's secret in your app settings page in the Developers Dashboard. const appSecret = 'absec_...';  // This example uses Express. const app = require('express')(); app.use(express.json());  // Match the raw body to content type application/json. app.post('/do_secret_stuff', (request, response) => {   const sig = request.headers['stripe-signature'];   // Retrieve user id and account id from the request body   const payload = JSON.stringify({     user_id: request.body['user_id'],     account_id: request.body['account_id']   });   try {     // Verify the payload and signature from the request with the app secret.     stripe.webhooks.signature.verifyHeader(payload, sig, appSecret);   } catch (error) {     response.status(400).send(error.message);   }   // Handle the request by returning a response   // to acknowledge receipt of the event.   response.json({ success: true }); });  app.listen(3000, () => console.log('Running on port 3000'));`\n\n### Send a signed request with additional data![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can authenticate a user by sending a signed request with a payload (additional data). When you call the `fetchStripeSignature` function with an additional payload request, you create a signature with `user_id`, `account_id` and the additional payload you passed into the function. By default, Stripe apps use `user_id` and `account_id` to generate the signature string.\n\nAn example of generating a secret with additional payload:\n\n``// A valid payload object has keys of type string // and values of type string, number, or boolean. const payload = {   \"transaction_id\": 'ipi_1KRmFUFRwUQjTSJEjRnCCPyV',   \"amount\": 100,   \"livemode\": false, };  fetch(`[https://example.com/do_more_secret_stuff/`,](https://example.com/do_more_secret_stuff/%60,) {   method: 'POST',   headers: {     'Stripe-Signature': await fetchStripeSignature(payload),     'Content-Type': 'application/json',   },   // Append the account ID and user ID in the body to verify on backend.   body: JSON.stringify({     ...payload,     user_id: 'usr_K6yd2CbXLO9A5G',     account_id: 'acct_1JSkf6FRwUQjTSJE',   }), });``\n\nSample backend verifying the signature generated with additional payload:\n\n`// Match the raw body to content type application/json. app.post('/do_more_secret_stuff', (request, response) => {   try {     // Verify the signature from the header and the request body that     // contains the additional data, user ID, and account ID with the app secret.     stripe.webhooks.signature.verifyHeader(request.body, sig, appSecret);   } catch (error) {     response.status(400).send(error.message);   }   // Handle the request by returning a response   // to acknowledge receipt of the event.   response.json({ success: true }); });`\n\n### Verify user roles (optional)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can verify the user roles assigned to a given `user_id` by including the `stripe_roles` key in the payload. Provide this with `userContext?.roles`, which returns a list of [RoleDefinitions](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#roledefinition). If any role in the payload isn’t assigned to the `user_id` provided, `fetchStripeSignature` returns an invalid request error (400).\n\n``// Provide this special key in the same way you'd // provide any other key to the additional payload. const payload = {   \"stripe_roles\": userContext?.roles, };  fetch(`[https://example.com/do_more_secret_stuff/`,](https://example.com/do_more_secret_stuff/%60,) {   method: 'POST',   headers: {     'Stripe-Signature': await fetchStripeSignature(payload),     'Content-Type': 'application/json',   },   // Append the account ID and user ID in the body to verify on backend.   body: JSON.stringify({     ...payload,     user_id: 'usr_K6yd2CbXLO9A5G',     account_id: 'acct_1JSkf6FRwUQjTSJE',   }), });``\n\n### Expire and create secrets![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your secret is compromised, you can expire your current app’s secret immediately for up to 24 hours to update the app’s secret on your backend. During this time, two secrets are active for the endpoint, the compromised secret and the newly generated secret. Stripe generates one signature per secret until expiration.\n\nTo expire and create an app secret:\n\n1.  Go to your Stripe app details page by selecting your app from [Apps](https://dashboard.stripe.com/apps).\n2.  On the page header, click the overflow menu (), then click **Signing secret** to open the Signing secret dialog.\n3.  Click **Expire secret** from the signing secret dialog to open the Expire secret dialog.\n4.  Select an expiration duration for your current’s app secret.\n5.  Click **Expire secret**.\n\n### Handle Cross-Origin Resource Sharing (CORS)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Cross-Origin Resource Sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is an important part of helping keep apps secure from [cross-site scripting attacks (XSS)](https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting). Because Stripe App UI extensions are, by necessity, cross-origin and sandboxed, you must employ a specific approach to handling cross-origin request headers.\n\nFor your UI extension to retrieve data from your backend service, you must configure your backend service to do the following:\n\n*   Allow requests using the [Options method](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS).\n*   To allow requests from `null` origins, set the `Access-Control-Allow-Origin` to `*`.\n\n#### Note\n\nUI extensions have a null origin because they run in a sandbox for security purposes.\n\nMany backend frameworks have libraries and guidance to help you handle CORS. Check the documentation for your framework for more specific guidance.\n\nTo authenticate that a request came from Stripe on behalf of a particular user or account, see [Authenticate users from your UI to your backend](https://docs.stripe.com/stripe-apps/build-backend#authenticate-ui-to-backend).\n\n#### Caution\n\nOnly configure authenticated endpoints and any endpoints the UI extension communicates with to use `Access-Control-Allow-Origin: *`. Unauthenticated endpoints are vulnerable to [CSRF](https://developer.mozilla.org/en-US/docs/Glossary/CSRF) attacks if no other measures are in place.\n\n[](#using-stripe-apis)\n\nTo interact with Stripe, you can use and authenticate your requests to the Stripe API.\n\n### Authenticating requests ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo authenticate your requests, use your existing merchant account API key to interact with Stripe and specify the user’s `stripeAccountId`.\n\nFor server-side API calls, you can make requests as connected accounts using the special header `Stripe-Account` with the Stripe account identifier (it starts with the prefix `acct_`) of your platform user. Here’s an example that shows how to [Create a PaymentIntent](https://docs.stripe.com/api/payment_intents/create) with your platform’s [API secret key](https://docs.stripe.com/keys) and your user’s [Account](https://docs.stripe.com/api/accounts) identifier.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card`\n\nThe `Stripe-Account` header approach is implied in any API request that includes the Stripe account ID in the URL. Here’s an example that shows how to [Retrieve an account](https://docs.stripe.com/api/accounts/retrieve) with your user’s [Account](https://docs.stripe.com/api/accounts) identifier in the URL.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nIn addition, all of Stripe’s server-side libraries support this approach on a per-request basis, as shown in the following example:\n\n`Stripe.api_key = \"{{PLATFORM_SECRET_KEY}}\" Stripe::Customer.create(   {email: 'person@example.edu'},   {stripe_account: '{{CONNECTED_STRIPE_ACCOUNT_ID}}'} )  # Fetching an account just needs the ID as a parameter Stripe::Account.retrieve('{{CONNECTED_STRIPE_ACCOUNT_ID}}')`\n\n### Call your self-hosted backend from your UI extension ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you make requests from your UI extension to your backend, [send a signature with your request](https://docs.stripe.com/stripe-apps/build-backend#authenticate-ui-to-backend) to validate the legitimacy of the requests. From the UI extension, pass the `stripeAccountId` for the current user so that you can make backend requests on behalf of that user.\n\n`// Set your secret key. Remember to switch to your live secret key in production. // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`); const express = require(\"express\"); const app = express();  app.use(express.static(\"public\")); app.use(express.json());  app.post(\"/api/data\", async (req, res) => {   const { stripeAccountId } = req.body;    const customer = await stripe.customers.create({     description: 'My First Test Customer (created for API docs)',   }, {     stripeAccount: stripeAccountId,   });    res.send({     data: []   }); });  app.listen(3000, () => console.log(\"Node server listening on port 3000!\"));`\n\n[](#call-other-apis)\n\nFrom your self-hosted backend, you can call any API—your own API or one built by another developer or company.\n\nFor more information, learn how to [store secret credentials and tokens in your app](https://docs.stripe.com/stripe-apps/store-secrets).\n\nIf you need to pass user information from Stripe to another service, use the `stripeAccountId` passed from your UI extension.\n\n`const express = require('express'); const fetch = require('isomorphic-fetch'); const app = express();  app.use(express.static('public')); app.use(express.json());  app.get('/api/time', async (req, res) => {   fetch('[http://worldclockapi.com/api/json/est/now](http://worldclockapi.com/api/json/est/now)')     .then((response) => response.json())     .then((data) => {       res.send({         data: data,       });     }); });  app.listen(3000, () => console.log('Node server listening on port 3000!'));`\n\nYou can also [call a third-party API from your UI extension](https://docs.stripe.com/stripe-apps/build-ui#use-third-party-apis).\n\n[](#receiving-events-webhooks)\n\nListen for events (such as user installs or uninstalls) on your Stripe app using incoming [webhooks](https://docs.stripe.com/webhooks \"webhook\") so your integration can automatically trigger reactions in your backend such as:\n\n*   Creating user accounts\n*   Updating permissions\n*   Disabling a user’s account and removing data\n\n### Receive events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can receive events from Stripe for an app that’s private to your account only or an app that’s listed on the App Marketplace:\n\nWhen a merchant triggers an event, Stripe provides the following [Event](https://docs.stripe.com/api/events/object) object. This event includes the `account` property specifying the account ID of the merchant who triggers the event:\n\n`{   \"id\": \"evt_n6tU2Y5cYUxEZL\",   \"livemode\": true,   \"object\": \"event\",   \"type\": \"account.application.authorized\",   \"account\": \"acct_Tk9G5inr7udYJ9\",   \"pending_webhooks\": 2,   \"created\": 1349654313,   \"data\": {...} }`\n\nUsing the `account` attribute, you can do the following:\n\n*   Monitor how many merchants install and uninstall your app.\n*   [Make API calls on behalf of users with Stripe Connect](https://docs.stripe.com/connect/authentication).\n\n### Events for Stripe Apps ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn addition to the [types of events Stripe supports](https://docs.stripe.com/api/events/types), Stripe Apps also supports the following events:\n\n### Test webhooks locally![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can test webhooks locally for:\n\n*   An app that’s only available to all users on your account and listens to events on your own account\n*   An app that’s available on the Stripe App Marketplace and listens to events on accounts that have installed your app\n\nTo test webhooks locally:\n\n1.  [Install the Stripe CLI](https://docs.stripe.com/stripe-cli).\n    \n2.  Authenticate your account:\n    \n3.  Open two terminal windows:\n    \n    *   In one terminal window, [Set up event forwarding](https://docs.stripe.com/webhooks#local-listener):\n        \n        `stripe listen --forward-to localhost:{{PORT}}/webhook`\n        \n    *   In the other terminal window, [Trigger events to test your webhooks integration](https://docs.stripe.com/webhooks#trigger-test-events):\n        \n        `stripe trigger {{EVENT_NAME}}`\n        \n\nFor more information, see our docs on [testing a webhook endpoint](https://docs.stripe.com/webhooks#local-listener).",
    "title": "Add server-side logic | Stripe Documentation",
    "description": "Validate and process user actions and data in your app using backend code.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/upload-install-app",
    "markdown": "# Upload and install your Stripe App\n\n## Make your app available to team members on your Stripe account.\n\nTo share your app with your [team members](https://docs.stripe.com/dashboard/teams \"team member\"), install it on your Stripe account with two steps:\n\n*   [Upload in test mode](#upload-your-app-in-test-mode)\n*   [Install in live mode](#install-in-live-mode)\n\nAny team member with access to your Stripe account can run your installed apps. To give other Stripe accounts access, you can [publish your app](https://docs.stripe.com/stripe-apps/publish-app) on the Stripe App Marketplace. Your [app ID](https://docs.stripe.com/stripe-apps/reference/app-manifest#schema) must be globally unique.\n\n[](#install-your-app-in-test-mode)\n\nTo upload your app, run the following command from your project root directory:\n\nStripe validates your [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest), then uploads your app to your Stripe test account. After validation is a complete, a banner is shown with a prompt and button to install the new version into test mode.\n\nYou can install previous versions though the Version History list.\n\n1.  In the version history table, click the overflow menu () of the version you want to install.\n2.  Select **Install in test mode** and complete the installation.\n\nAfter this step:\n\n*   Any team member can access your app in [test mode](https://docs.stripe.com/test-mode \"test mode\") at [`https://dashboard.stripe.com/test/`](https://dashboard.stripe.com/test/).\n*   Your app can [store secrets](https://docs.stripe.com/stripe-apps/store-secrets) in test mode.\n*   You can access your app’s signing secret to connect it to a [backend](https://docs.stripe.com/stripe-apps/build-backend).\n\n[](#install-in-live-mode)\n\nTo access real customer data, install your app in live mode.\n\n1.  Select your app from the [Apps page in the Developers Dashboard](https://dashboard.stripe.com/apps).\n2.  Select the **Private to your account** option when choosing how to distribute.\n3.  Choose a version for your app and click **Continue**.\n4.  Click **Continue** to open your app in the Dashboard, then click **Install**.\n5.  Click **Done**, refresh your browser, and see your app in live mode across the Dashboard in the right-hand side drawer.\n\nAfter this step:\n\n*   Any team member can access your app in live mode in the Dashboard.\n*   Your app can [store secrets](https://docs.stripe.com/stripe-apps/store-secrets) in live mode.\n*   Your app’s signing secret remains available.\n\n### Uninstall your app in live mode ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo switch between installing your app in live mode to publishing it on the Stripe App Marketplace, uninstall the app in live mode:\n\n1.  Go to the [Installed Apps page in the Dashboard](https://dashboard.stripe.com/settings/apps/), and find the app you want to uninstall.\n2.  Click the overflow menu at the right side of your app, and click **View app details**.\n3.  Click **Uninstall app**, and click **Uninstall**.\n\nAfter this step, you can [publish your app to the Stripe App Marketplace](https://docs.stripe.com/stripe-apps/publish-app).",
    "title": "Upload and install your Stripe App | Stripe Documentation",
    "description": "Make your app available to team members on your Stripe account.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/versions-and-releases",
    "markdown": "# Manage your app's versions and releases\n\n## Learn about app versioning and releases to ship new versions of your app and manage changes over time.\n\nIn Stripe Apps, a _version_ is a framework to help you manage changes to your app over time. A _release_ is a version of your app that you decide to publish—either to your own account or on the Stripe App Marketplace after passing app review.\n\n## Versions overview ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe `version` property in the [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest \"app manifest\") lets you specify the version of your app. Stripe doesn’t enforce a specific versioning schema for apps, but we recommend following an established pattern, like [semantic versioning](https://semver.org/).\n\nStripe users who install your app don’t have to think about the version number. Stripe automatically upgrades them to the latest release of an app. The app functions in a similar manner to apps updating automatically on your phone. The only exception is cases where the permissions scope changes. If you change the permissions, users of your app are prompted to re-authorize your app and its new permissions.\n\n## How to upload a new app version ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  Change the `version` property in the [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest).\n2.  Upload the new app version to Stripe. Follow the same [upload process](https://docs.stripe.com/stripe-apps/upload-install-app) that you used when creating an app.\n\n## Changing between app versions in test mode ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can change between different app versions in test mode before creating a release.\n\n1.  In the Stripe Dashboard, go to [Apps](https://dashboard.stripe.com/apps).\n2.  Select the app you want to create a new version for, and view **App Details**.\n3.  In the version history table, click the overflow menu () of the new version.\n4.  Select **Install in test mode** and complete the installation.\n\n## Releases overview ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo distribute your app in live mode for users, create a new release. You can publish it to your own account or to the [App Marketplace](https://docs.stripe.com/stripe-apps/publish-app). To be listed in the App Marketplace, releases must go through [App Review](https://docs.stripe.com/stripe-apps/review-requirements).\n\n## How to create a new release ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  In the Stripe Dashboard, go to [Apps](https://dashboard.stripe.com/apps).\n2.  Select the app you want to create a new version for, and view **App Details**.\n3.  Click **Create new release**.\n4.  Follow the steps to create a new release.\n\nWhen your release passes app review, all users are automatically upgraded to the latest released version.\n\n## How to remove an app listing or change a release ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nApp releases can only be fixed forward. To remove an app listing or change an app release that had accidental changes, bump the app version and make a new release of the app.\n\nSince we don’t enforce a versioning structure, an incremental release is any release created after the current live version. For example, if version 2.0.0 was uploaded before version 1.0.0, version 2.0.0 won’t be available to create a release.\n\nTo remove an app or an app release from Stripe, [contact Stripe Support](https://support.stripe.com/).",
    "title": "Manage your app's versions and releases | Stripe Documentation",
    "description": "Learn about app versioning and releases to ship new versions of your app and manage changes over time.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/publish-app",
    "markdown": "# Publish your app to the Stripe App Marketplace\n\n## Make your app discoverable to any user by publishing it on the Stripe App Marketplace.\n\nTo share your app beyond your own team, publish it to the [Stripe App Marketplace](https://marketplace.stripe.com/). This makes it available for installation on any Stripe account, not just your own.\n\nPublication comes with some restrictions:\n\n*   Your account must be [activated](https://docs.stripe.com/get-started/account/activate).\n*   You can only publish one app per account.\n*   Stripe can only support English language listings at this time. To support additional languages, reach out to Stripe.\n*   Published apps must pass a review process. For more information, see the [app review requirements](https://docs.stripe.com/stripe-apps/review-requirements) and [app listing guidelines](https://docs.stripe.com/stripe-apps/listing-guidelines).\n*   If you need to remove your app from the Stripe App Marketplace later, you must contact Stripe for removal.\n\nThese restrictions only apply to apps that you share with public users in the Stripe App Marketplace. If your app only needs to be available to your own [team members](https://docs.stripe.com/dashboard/teams \"team member\"), learn to [upload and install your app](https://docs.stripe.com/stripe-apps/upload-install-app) instead.\n\n[](#before-you-begin)\n\n1.  If you’ve already [installed your app in live mode](https://docs.stripe.com/stripe-apps/upload-install-app), you must [uninstall it](https://docs.stripe.com/stripe-apps/upload-install-app#uninstall-your-live-app) to switch to publishing your app.\n2.  Choose a Stripe account to associate with your app. You can only publish one app per account.\n3.  To understand the process for getting your app approved for listing, see [app review requirements](https://docs.stripe.com/stripe-apps/review-requirements).\n\n[](#set-your-distribution-type)\n\n1.  Set your app to the public distribution.\n\n`stripe apps set distribution public`\n\nThis command updates the manifest file with a `distribution_type` field set to a `public` value.\n\n`{   \"id\": \"com.example.app\",   \"version\": \"1.2.3\",   \"name\": \"Example App\",   \"icon\": \"./example_icon_32.png\",   \"distribution_type\": \"public\" }`\n\n[](#add-permissions)\n\nTo add your app’s required permissions:\n\n1.  Determine which objects your app calls on the Stripe API. If you’re [migrating an extension to an app](https://docs.stripe.com/stripe-apps/migrate-extension), you must determine which objects your extension (not your app) calls on the Stripe API to understand which permissions to include.\n2.  See the [list of permissions](https://docs.stripe.com/stripe-apps/reference/permissions) you can add to your [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest \"app manifest\").\n3.  You can add a permission to the `permissions` array in your `stripe-app.json` app manifest file using the following command:\n\n`stripe apps grant permission \"PERMISSION_NAME\" \"EXPLANATION\"`\n\nPopulate the prompts with your permission’s information:\n\n*   `PERMISSION_NAME`: The name of the permission you’d like to add. See [possible permission names](https://docs.stripe.com/security/permissions).\n*   `EXPLANATION`: Explanation for enabling access. Users see this explanation when they install your app.\n\nRepeat this step for each new permission that you want to add to your application.\n\n### Your app manifest file should look like this:\n\nTo remove a permission, you can also use the CLI:\n\n`stripe apps revoke permission \"PERMISSION_NAME\"`\n\n[](#upload-in-test-mode)\n\nTo upload your app, run the following command from your project root directory:\n\nStripe validates your app manifest, then uploads and installs your app to your Stripe test account.\n\nAfter this step:\n\n*   Any team member can access your app in [test mode](https://docs.stripe.com/test-mode \"test mode\") at [`https://dashboard.stripe.com/test/`](https://dashboard.stripe.com/test/).\n*   Your app can [store secrets](https://docs.stripe.com/stripe-apps/store-secrets) in test mode.\n*   You can access your app’s signing secret to connect it to a [backend](https://docs.stripe.com/stripe-apps/build-backend).\n\n[](#submit-app-for-review)\n\n1.  Upload a new version of your app after [setting the distribution type](#set-your-distribution-type).\n    \n    After you make your distribution choice, Stripe automatically applies it to all future app versions. To change how to distribute your app after you publish it to all Stripe users, contact Stripe at [stripe-apps@stripe.com](https://support.stripe.com/).\n    \n2.  In the Stripe Dashboard, navigate to [Apps](https://dashboard.stripe.com/apps), then select your app to see its details page.\n    \n3.  If your app has multiple versions, choose the app version you want to publish and click **Continue**. If you can’t select a version, [activate your account](https://docs.stripe.com/get-started/account/activate) first.\n    \n4.  Create your app listing by clicking **Edit listing** and providing an overview, features, pricing and support, and resource links to help users evaluate your app. As you complete the listing, you can see its preview on the right side of the Dashboard.\n    \n    For tips on ensuring app approval and creating a compelling listing, see [App listing guidelines](https://docs.stripe.com/stripe-apps/listing-guidelines).\n    \n5.  Click **Continue** to provide the following information before final app submission:\n    \n    *   **Version**: If your app has multiple versions, select and verify the version you want to submit for review.\n    *   **Marketplace install URL**: This option is required for [OAUTH apps](https://docs.stripe.com/stripe-apps/api-authentication/oauth) and optionally available for apps that support [install links](https://docs.stripe.com/stripe-apps/install-links). From the Stripe App Marketplace, users are redirected to this URL to install your app.\n        \n        #### Note\n        \n        The URL must link to a page that can initiate the onboarding and installation process with clear instructions.\n        \n    *   **Testing credentials**: If your app requires sign in, provide at least one test account to allow Stripe to test and review your app. See the [example testing credentials](https://docs.stripe.com/stripe-apps/review-requirements#test-plan-and-credentials).\n        \n        #### Caution\n        \n        Stripe **does not** permit you to use real (non-test) accounts for the app review process.\n        \n    *   **Testing guidance**: Provide user scenarios to allow Stripe to simulate the user’s intended installation and usage of your app. To increase your chances of passing app review, see [example testing guidance](https://docs.stripe.com/stripe-apps/review-requirements#test-plan-and-credentials).\n    *   **Contact emails**: Provide the email of the recipient for app review updates, and the email of a contact for resolving security incidents.\n    \n    Any changes you make after starting the review process are subject to an additional review period. To avoid delays, ensure all information is accurate according to [App review requirements](https://docs.stripe.com/stripe-apps/review-requirements) before final submission.\n    \n6.  To start the review process, click **Submit for review**.\n    \n    After Stripe reviews and approves your app, you have the ability to publish it to the Stripe App Marketplace. If you need to make changes, you can cancel your app in review, and Stripe removes your position in the review queue.\n    \n    To avoid delays, make sure all information is accurate according to the [App review requirements](https://docs.stripe.com/stripe-apps/review-requirements) before final submission. After your app is `In Review`, you won’t be able to withdraw your submission or make changes. After Stripe reviews and approves your app, you can publish it to the Stripe App Marketplace.\n    \n\n[](#publish-app)\n\nAfter Stripe verifies that your app meets all [app review requirements](https://docs.stripe.com/stripe-apps/review-requirements), we send a notification to the contact email and update your app details page with a review decision. If your app requires additional changes, Stripe provides guidance on the changes you need to address for approval. After you implement the changes, you can resubmit your app for another review.\n\n1.  After Stripe approves your app, go to the [Apps](https://dashboard.stripe.com/apps) page in the Stripe Dashboard. Select your app, and preview your listing by clicking **Review and publish**.\n    \n    If you decide to make changes, clicking **Cancel and edit** requires you to resubmit your app for review.\n    \n2.  To publish and list your app on the Stripe App Marketplace, click **Publish**.\n    \n\nAfter this step:\n\n*   Any user can discover your app on the Stripe App Marketplace.\n*   Any Stripe account user can install and use your app.\n*   You can view [app analytics](https://docs.stripe.com/stripe-apps/analytics) as soon as 24 hours after publication.",
    "title": "Publish your app to the Stripe App Marketplace | Stripe Documentation",
    "description": "Make your app discoverable to any user by publishing it on the Stripe App Marketplace.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/test-app",
    "markdown": "# Test your app externally | Stripe DocumentationThe Stripe Docs logo\n\nYou must inform your users that test apps are still in development and haven’t been reviewed by Stripe. Users should only install apps from developers they trust.\n\n### Installing the test app ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter the tester opens the invite link, Stripe redirects them to the following page in the Stripe Dashboard:\n\n![Installation invite](https://b.stripecdn.com/docs-statics-srv/assets/test-app-install.2d67f49c8cafcfb964c9d19ff7cf6d30.png)\n\nInstallation invite\n\nAfter the user installs the app, all members on the account can use it. If the published version of the app is already installed on the account, it needs to be uninstalled before the test version can be installed.\n\n### Using the test app ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter installation, the app displays in the dock on the right side of the Dashboard. After the tester opens the test app, there is a test version badge next to the app name. They can hover over this badge to learn more about the app and the testing criteria.\n\n![Using test app](https://b.stripecdn.com/docs-statics-srv/assets/test-app-using.49c64bd7d77b4b76e26ebd6852b40485.png)\n\nTest app in dock\n\n### Leaving the test ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf users no longer want to evaluate a test app, they must select it from **[Settings](https://dashboard.stripe.com/settings/apps) > [Installed Apps](https://dashboard.stripe.com/settings/apps)** and uninstall it. If the published version of the app was previously installed on the account, users can reinstall the app from the App Marketplace.\n\n![Uninstall test app](https://b.stripecdn.com/docs-statics-srv/assets/test-app-uninstall.710b89177767cff3a7f53de749558d88.png)\n\nSettings page\n\n### Ending the test ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCurrently, we don’t support ending external testing with the Stripe Dashboard. Instead, to end a test of an app, you must upload a new version of the app to disable the functionality. After this update, the new test version is available for external testing.",
    "title": "Test your app externally | Stripe Documentation",
    "description": "Set up and distribute test versions of your app before publication.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/promote-app",
    "markdown": "# Promote your app | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to partner with Stripe to help accelerate the growth of your app.\n\n## Join the Stripe Partner Ecosystem![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nJoin a global community of partners that helps ambitious businesses with industry-leading payments and financial infrastructure.\n\nWhen you publish apps to the Stripe App Marketplace, you are invited to join the Stripe Partner Ecosystem’s Apps track. As part of the ecosystem, partners can co-market with Stripe, engage and influence Stripe Apps roadmap, and build their network. Partners in the Apps track also receive tools and resources to grow their business with Stripe, and drive customer acquisition opportunities, such as:\n\n*   Access to marketing with Stripe, including our [campaigns-in-a-box and product toolkit](https://docs.stripe.com/partners#marketing-content).\n*   Eligibility for [Market Development Funds (MDF)](https://docs.stripe.com/partners#market-development-funds) to reimburse you for the cost of co-marketing activities, such as partner-led campaigns and customer-facing events\n*   Access to co-selling with Stripe by leveraging the [Crossbeam platform](https://docs.stripe.com/partners#crossbeam-account-mapping) and discovering overlapping customers and prospects in an automated and secure manner\n*   A [partner directory](https://stripe.com/partners) listing, making your app more searchable for Stripe customers\n\nThere are four tracks of the Stripe Partner Ecosystem: [Apps](https://docs.stripe.com/partners#apps-track), [embedded payments](https://docs.stripe.com/partners#embedded-payments), [services](https://docs.stripe.com/partners#services-track), and [technology](https://docs.stripe.com/partners#technology-track). Partners have the flexibility to choose one or multiple tracks with benefits aligned to your business goals. [Read more](https://docs.stripe.com/partners) about the benefits of joining the Stripe Partner Ecosystem for partners on the Apps track.\n\nAfter passing the app review, you’ll receive an invite to join the Apps track. Simply [apply](https://stripe.com/partners/become-a-partner), and complete your profile in the partner portal to gain access to tools that can help you grow your business.\n\n## Best practices using Stripe branding guidelines![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse Stripe pre-approved promotional asset templates and [branding guidelines](https://portal.stripe.partners/s/article/Co-branding-Guidelines) to promote your app.\n\nWhen you’re ready to publish your app on the Stripe App Marketplace, you can promote your app. Stripe provides branding guidelines, pre-approved promotional asset templates, and additional recommendations to help you with app promotion.\n\n## Branding guidelines ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo view a complete set of design resources, open the [Figma library for Stripe Apps](https://www.figma.com/community/file/1105918844720321397), then navigate to **Pages** > **Marketplace assets** in the left panel. The Figma library includes templates and applicable guidelines to create your app icon, promotion assets for social media, and the Stripe App Marketplace badge.\n\n![promotion assets](https://b.stripecdn.com/docs-statics-srv/assets/promotion_figma.f60e29c04318c736baeda7e4ef403b95.png)\n\nFigma promotion templates\n\n[](#promote-app)\n\nJoin a global community of partners and help ambitious businesses access industry-leading payments and financial infrastructure.\n\nWhether you’re looking to embed Stripe in your software or expand your practice, you can work with Stripe to deliver elevated customer experiences and unlock new monetization opportunities for your business. We don’t believe in a one-size-fits-all program—whether you offer solutions or services, you can choose one or multiple partner tracks based on your business goals.\n\n[Learn more](http://stripe.com/partners/become-a-partner) about how partnering with Stripe can create new revenue streams for your business.",
    "title": "Promote your app | Stripe Documentation",
    "description": "Learn how to partner with Stripe to help accelerate the growth of your app.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/deep-links",
    "markdown": "# Add deep links | Stripe DocumentationThe Stripe Docs logo\n\n## Create deep links that navigate users to your Stripe app in the Stripe Dashboard.\n\nA deep link is a URL that reduces the number of navigation steps required for the user to open your app in the Dashboard. You can share deep links in user interfaces such as an email or website or use them when [creating OAuth authorization workflows](https://docs.stripe.com/stripe-apps/pkce-oauth-flow).\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo navigate users to a Dashboard page that displays your app, you need an app with [UI functionality](https://docs.stripe.com/stripe-apps/build-ui).\n\n[](#create-deep-link-URL)\n\nTo create the URL of the deep link, you must use:\n\n*   The URL of a Dashboard page where you’ve defined a view\n*   The `open_drawer_app` parameter\n*   Your application ID, which is specified in the [`id` field of your `stripe-app.json` manifest file](https://docs.stripe.com/stripe-apps/reference/app-manifest#schema)\n\nFor example, if you define a view on the Customers page in the Dashboard (`https://dashboard.stripe.com/test/customers?`) and your application ID is `com.example.deep-link`:\n\n*   The [test mode](https://docs.stripe.com/test-mode \"test mode\") deep link is:\n    \n    `<a href=\"https://dashboard.stripe.com/test/customers?open_drawer_app=com.example.deep-link\">Deep Link</a>`\n    \n*   The live mode deep link is:\n    \n    `<a href=\"https://dashboard.stripe.com/customers?open_drawer_app=com.example.deep-link\">Deep Link</a>`\n    \n\nIf a user clicks one of the deep links, it navigates them to your app that opens in the Customers page of the Dashboard.\n\n[](#share-deep-link)\n\nMake sure you use the live mode URL when you share the deep link to your users. You can share the link anywhere for users who’ve installed your app. If the user hasn’t installed your app before clicking the deep link, Stripe navigates them to a closed app that can’t open in the Dashboard.\n\n[](#test-deep-link)\n\n1.  Log in to the Dashboard as a user who has installed the app.\n    \n2.  Click the deep link.\n    \n    If it navigates you to an app that can’t open, make sure you set the `open_drawer_app` parameter to the correct application ID.",
    "title": "Add deep links | Stripe Documentation",
    "description": "Create deep links that navigate users to your Stripe app in the Stripe Dashboard.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/using-roles-in-ui-extensions",
    "markdown": "# Using roles in UI extensions\n\n## Learn how to include user roles in UI Extensions to tailor functionality to different roles.\n\nStripe Apps UI extensions can read the active user’s role in the Dashboard. Apps can expose different functionality to different user roles.\n\nThe UI Extension SDK provides valuable information about the end user of your app. The `roles` field of the `userContext` object gives a list of the active user’s roles. You can tailor the app’s content based on the user’s role, using the roles in the user context.\n\n## How to determine the user’s Dashboard role![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nExtensions have a `userContext` prop that’s populated with information about the active Dashboard user. This object has a `roles` field, which is an array of `RoleDefinition` objects for each role that the active user is attributed to.\n\nA role definition has these fields:\n\n| Field name | Type | Example |\n| --- | --- | --- |\n| type | ‘builtIn’ \\| ‘custom’ | builtIn |\n| Specifies the role type. Custom roles are only available to [private apps](https://docs.stripe.com/stripe-apps/distribution-options#share-with-team-members). |     |     |\n| name | string | Developer |\n| The name of the user role. |     |     |\n\nThe name field provides the name of the user role, and you can use it to modify the functionality of your UI Extension.\n\n## Custom user roles (private apps only)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach role definition has a type field, which specifies the role type. The type field can either be ‘builtIn’ or ‘custom’. Because custom roles are specific to a given account, these roles are only available for private apps.\n\n## Tailoring content based on the Dashboard role![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA common use of this information is to conditionally display content based on the user role. Below is an example app that shows content tailored to particular user roles.\n\n`import { Badge, Box, Inline, ContextView } from \"@stripe/ui-extension-sdk/ui\"; import type { ExtensionContextValue } from \"@stripe/ui-extension-sdk/context\";  const App = ({ userContext }: ExtensionContextValue) => {   const isAdmin = userContext?.roles?.some(role => role.name === 'Administrator');   const isDeveloper = !isAdmin && userContext?.roles?.some(role => role.name === 'Developer');   const isaAnotherRole = !isDeveloper && !isAdmin;    return (     <ContextView       title=\"Role based access\"     >       <Box>         <Box css={{ paddingBottom: 'large'}}>Active user role(s): {userContext?.roles?.map(role => <Badge key={role.name}>{role.name}</Badge>)}</Box>          { isAdmin && (<Box>Only <Inline css={{ fontWeight: 'semibold' }}>admin</Inline> users can see this message.</Box>) }         { isDeveloper && (<Box>Only <Inline css={{ fontWeight: 'semibold' }}>developers</Inline> users can see this message.</Box>) }         { isaAnotherRole && (<Box>Only users who are not admins or developers can see this message.</Box>) }       </Box>     </ContextView>   ); };  export default App;`\n\n![A screenshot of the result of the example code above for an Administrator user](https://b.stripecdn.com/docs-statics-srv/assets/roles-example.7fb1048ac4656aee8a39a33d9179ad26.png)\n\nThe result of the example app when viewing the app as an Administrator user",
    "title": "Using roles in UI extensions | Stripe Documentation",
    "description": "Learn how to include user roles in UI Extensions to tailor functionality to different roles.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/post-install-actions",
    "markdown": "# Enable post-install actions and configurations\n\n## Support additional configurations that occur after app installation.\n\nAfter a user installs your app, you might require them to perform additional actions or configurations. For example, your app might require that the user supply separate credentials to access an external service. Stripe Apps refer to these additional steps as _post-install actions_. You can configure one of several types of post-install actions:\n\n*   Within the app itself, using a [SettingsView](https://docs.stripe.com/stripe-apps/components/settingsview) component\n*   Externally, using a link to an external website\n\nIf you don’t define a post-install action, the Dashboard displays the app after installation.\n\n## Add a post-install action![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo add a post-install action:\n\n1.  Open your [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest) file.\n    \n2.  Add a new field, `post_install_action`.\n    \n    `{   \"id\": \"com.invoicing.[YOUR_APP]\",   \"version\": \"1.2.3\",   \"name\": \"[YOUR APP] Shipment Invoicing\",   \"icon\": \"./[YOUR_APP]_icon_32.png\",   \"permissions\": [],   \"app_backend\": {},   \"ui_extension\": {},   \"post_install_action\": {} }`\n    \n3.  Add the [configuration option](#configuration-options) for the `post_install_action` that meets the needs of your application setup.\n    \n4.  [Upload](https://docs.stripe.com/stripe-apps/upload-install-app) your app to Stripe.\n    \n5.  [Make a new release](https://docs.stripe.com/stripe-apps/versions-and-releases) of your app.\n    \n6.  [Publish](https://docs.stripe.com/stripe-apps/publish-app) your app to the marketplace.\n    \n\n## Configuration options ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Apps support the following post-install actions:\n\n*   [Link to app](#link-to-app)\n*   [Link to settings](#link-to-settings)\n*   [Link to external URL](#link-external)\n\n### Link to app (default) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe default action after the user installs your app is to redirect that user to your application interface, if one is available.\n\n![Post-install screen with a link to view an app](https://b.stripecdn.com/docs-statics-srv/assets/app.09cbbc38c50cfef0a9aaf9a92f8d1d0e.png)\n\nThis behavior requires no additional configuration to implement.\n\n### Link to external URL ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you need the user to visit an external site to configure their app, update the `post_install_action` parameter in your app manifest file as follows:\n\n`{   \"id\": \"com.invoicing.[YOUR_APP]\",   \"version\": \"1.2.3\",   \"name\": \"[YOUR APP] Shipment Invoicing\",   \"icon\": \"./[YOUR_APP]_icon_32.png\",   \"permissions\": [],   \"app_backend\": {},   \"ui_extension\": {},   \"post_install_action\": {     \"type\": \"external\",     \"url\": \"[https://[YOUR-URL]](https://[YOUR-URL])\"   } }`\n\nReplace `[YOUR-URL]` with the URL to the external site.\n\nWhen the user installs your app, the application displays a button that redirects the user to the URL specified in the app manifest file.\n\nThis URL includes an `account_id` query string parameter that you can use to identify the user. For example:\n\n`https://www.company.com/marketplace/stripe?account_id=12345`\n\n![Post-install screen with an external link](https://b.stripecdn.com/docs-statics-srv/assets/external.565e55096589e7c7580bc5d534c1ace1.png)\n\n### Link to settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your app contains a [SettingsView](https://docs.stripe.com/stripe-apps/components/settingsview) component, you can configure a `post_install_action` to open it after installation. To enable this action, update your app manifest file as follows:\n\n`{   \"id\": \"com.invoicing.[YOUR_APP]\",   \"version\": \"1.2.3\",   \"name\": \"[YOUR APP] Shipment Invoicing\",   \"icon\": \"./[YOUR_APP]_icon_32.png\",   \"permissions\": [],   \"app_backend\": {},   \"ui_extension\": {},   \"post_install_action\": {     \"type\": \"settings\"   } }`\n\nWhen the user installs your app, the application displays a button that redirects them to your applications SettingsView component.\n\n![Post-install screen with a link to view settings](https://b.stripecdn.com/docs-statics-srv/assets/settings.e6bc859871bc657c25d353055497c8ee.png)",
    "title": "Enable post-install actions and configurations | Stripe Documentation",
    "description": "Support additional configurations that occur after app installation.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/install-links",
    "markdown": "# Using install links | Stripe DocumentationThe Stripe Docs logo\n\n## Using install linksBeta\n\n## Allow users to install your app outside the Stripe App Marketplace.\n\nInstall links allow users to install public apps outside of the Stripe App Marketplace. With one integrated flow, you can pass state from your application, complete the installation of the Stripe App, and redirect to your application or site.\n\n![The install link page showing app permissions](https://b.stripecdn.com/docs-statics-srv/assets/oauth-permissions.9f11ce1ba29fdd77c9d4fa9ee2944222.png)\n\nThe install link page\n\n## Overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith the following steps, a user can install an app using an install link:\n\n1.  On your site, the user clicks a link that redirects them to Stripe, passing along the `app_id`.\n2.  On Stripe, the user selects the appropriate account and accepts permissions for installing the app.\n3.  After installation, the user [redirects to your site](#redirect), along with the Stripe account for the given user.\n4.  Your app can now make authenticated account requests.\n\n[](#create-install-link)\n\nSet your `allowed_redirect_uris` in your app manifest. These are the URLs that users are redirected to after installing your app. You must specify all redirect URLs in your app settings.\n\nAfter you’ve set `allowed_redirect_uris`, [upload a new version](https://docs.stripe.com/stripe-apps/upload-install-app) of your app.\n\n`{   \"id\": \"com.invoicing.[YOUR_APP]\",   \"version\": \"1.2.3\",   \"name\": \"[YOUR APP] Shipment Invoicing\",   \"icon\": \"./[YOUR_APP]_icon_32.png\",   \"permissions\": [],   \"app_backend\": {},   \"ui_extension\": {},   \"allowed_redirect_uris\": [     \"[https://example.com/callback/stripe](https://example.com/callback/stripe)\"   ] }`\n\n[](#test-install-link)\n\nYou can use [external testing](https://docs.stripe.com/stripe-apps/test-app) with the following steps to test the install link before submitting it for review:\n\n1.  [Create an external test](https://docs.stripe.com/stripe-apps/test-app) for your app using the version with `allowed_redirect_uris` defined in the app manifest. You can update the testing version to the desired one if a test already exists.\n2.  The **External test** tab shows a test install link and displays the allowed redirects in a table.\n3.  When you’re ready to publish, make sure that you upload a new version with any testing URIs and values replaced with the values you intend to use in production.\n\n![The external test tab showing install links](https://b.stripecdn.com/docs-statics-srv/assets/external-test.8df1fb2e4ac4df4c934d4acca85ed2de.png)\n\n[](#use-install-link)\n\nWhen you’ve finished testing, you can make it available for all users with the following steps:\n\n1.  [Publish a new version](https://docs.stripe.com/stripe-apps/publish-app) of your app that defines `allowed_redirect_uris`.\n2.  Click the **Settings** tab. The install link is shown here, and you can copy it. The link looks like this: `https://marketplace.stripe.com/apps/install/link/{id}?redirect_uri=https://example.com`.\n3.  Recommended To prevent CSRF attacks, you can add the recommended `state` parameter and pass along a unique token as the value. We’ll include the `state` you provided when redirecting users to your site. Your site can confirm that the `state` parameter hasn’t been modified.\n4.  After a user clicks the install link, Stripe opens the following page where they can select an account, review app details, and proceed with the installation.\n\n![Selecting an account to install the app on](https://b.stripecdn.com/docs-statics-srv/assets/account-selection.13dde83d3b3b16c9d0faee76b98e584b.png)\n\nInstall link account selection\n\n[](#redirect)\n\nAfter the user installs your app, they’re redirected to the `redirect_uri` URL parameter that matches a defined redirect in `allowed_redirect_uris` in your app manifest.\n\n### Successful installation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor successful installations, the URL includes:\n\n*   The `user_id` value. The ID of the Stripe user that initiated the install.\n*   The `account_id` value. The ID of the Stripe account that installed your app.\n*   The `state` value, if provided\n*   The `install_signature` value. This a hash of the above values that’s generated using your app’s [signing secret](https://docs.stripe.com/stripe-apps/build-backend#expire-and-create-secrets).\n*   If the app is installed into test mode, a `livemode=false` value is appended to the redirect URL.\n\n_An example of a live mode redirect:_\n\n_An example of a test mode redirect:_\n\n### Installation failure![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf the user cancels the installation, they will still be redirected to your site, but the URL includes an error instead:\n\nThe user is now connected to your app. Store the `stripe_user_id` in your database—this is the user’s Stripe account ID. You’ll use this value to [authenticate as the connected account](https://docs.stripe.com/connect/authentication) by passing it into requests in the `Stripe-Account` header.\n\n### Verify app installs with the `install_signature` Recommended![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIt’s important to verify that your app’s user was authorized to install the app for the account provided in the redirect URL. An `install_signature` is included for this reason. This signature is generated from your app’s [signing secret](https://docs.stripe.com/stripe-apps/build-backend#expire-and-create-secrets) and the `user_id` and `account_id` that completed the install. The signature also includes the passed `state`, if provided. The signature can’t be replicated without access to the signing secret, which is only available internally to Stripe and to your app’s backend. Because of this, bad actors can’t replicate the hash if they were to try and spoof the redirect URL. By verifying the app signature, you can trust that the account is associated with your app user.\n\nTo verify the signature, follow these steps:\n\n1.  [Create your app’s signing secret](https://docs.stripe.com/stripe-apps/build-backend#expire-and-create-secrets) if you haven’t done so already.\n2.  [Setup an app backend](https://docs.stripe.com/stripe-apps/build-backend#send-a-signed-request) to verify the `install_signature`.\n\n#### Sample backend verifying the install:![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe order and naming of the payload fields matter when performing signature verification. The `state` precedes the `user_id`, which precedes the `account_id`. The resulting object should be `{ state, user_id, account_id }`.\n\n`require 'stripe' require 'sinatra' require 'json'  Stripe.api_key = 'API_KEY'  get '/' do   'Install Links verification example' end  get '/verify' do   user_id = params[:user_id]   account_id = params[:account_id]   state = params[:state]   install_signature = params[:install_signature]    payload = JSON.dump({     state: state,     user_id: user_id,     account_id: account_id   })    begin     Stripe::Webhook::Signature.verify_header(       payload,       install_signature,       'STRIPE_APP_SECRET'     )   rescue Stripe::SignatureVerificationError => e     return e.message, 400   end    { success: true }.to_json end  set :port, 3000`\n\nAfter it’s verified, you can [make API calls](https://docs.stripe.com/stripe-apps/build-backend#using-stripe-apis) on behalf of the installed account.\n\n[](#authenticated-requests)\n\nFor server-side API calls, you can make requests as connected accounts using the special header `Stripe-Account` with the Stripe account identifier (it starts with the prefix `acct_`) of your platform user. Here’s an example that shows how to [Create a PaymentIntent](https://docs.stripe.com/api/payment_intents/create) with your platform’s [API secret key](https://docs.stripe.com/keys) and your user’s [Account](https://docs.stripe.com/api/accounts) identifier.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card`\n\nThe `Stripe-Account` header approach is implied in any API request that includes the Stripe account ID in the URL. Here’s an example that shows how to [Retrieve an account](https://docs.stripe.com/api/accounts/retrieve) with your user’s [Account](https://docs.stripe.com/api/accounts) identifier in the URL.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nSee more examples of making an [authenticated request here](https://docs.stripe.com/connect/authentication).\n\n## Customize links with URL parameters![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can change the behavior of the app installation by including additional URL parameters in the install link.\n\n### Supported URL parameters ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Parameter |     | Description |\n| --- | --- | --- |\n| `redirect_uri` |     | The URL that users are redirected to after installing your app. If provided, this must exactly match one of the comma-separated `redirect_uris` values in your [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest). To protect yourself from certain man-in-the-middle attacks, the live mode `redirect_uri` must use a secure HTTPS connection. |\n| `state` | Recommended | An arbitrary string value we pass back to you, which is recommended for CSRF protection. |\n\n### Prevent CSRF attacks with the state parameter ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo prevent cross-site request forgery (CSRF) attacks, you can use the `state` parameter. This parameter accepts any string value and returns it unmodified upon redirecting the installer back to your application or platform. To use this parameter, pass a unique and non-guessable value when you initiate an install using an install link. Save the value to use it for verification later.\n\nAfter the user installs and is redirected back to your application, verify whether the value of the state parameter provided matches the value present in the initial install link. This verification process provides a high-level of confidence to confirm that the `stripe_user_id` returned belongs to the user who initiated the install and safeguard against potential forgeries.\n\n## Revoking access ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAn `account.application.deauthorized` [event](https://docs.stripe.com/api#list_events) occurs when a user disconnects your app from their account. You can perform any necessary cleanup on your servers by watching for this event with [webhooks](https://docs.stripe.com/connect/webhooks).",
    "title": "Using install links | Stripe Documentation",
    "description": "Allow users to install your app outside the Stripe App Marketplace.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/analytics",
    "markdown": "# App analytics | Stripe DocumentationThe Stripe Docs logo\n\n## Access analytics to see how your app performs.\n\nApp analytics enables you to better understand how your apps are used and how your marketplace listings perform. You can export data, such as the number of installs and listing views, for your public app. This data is available in Dashboard or the Stripe API.\n\nThe Dashboard provides additional tools to help you understand your app’s performance, such as:\n\n*   Single-number summaries for the currently selected period\n    *   Rate-based reports (%): Average for the selected period\n    *   Non-rate-based reports: Sum for the selected period\n*   Badges that summarize the current period with the previous period (if sufficient historical data is available)\n*   Aggregation using a resolution based on your selected date range\n    *   To download higher-resolution data, click **Download CSV**.\n\n![App analytics all charts dashboard](https://b.stripecdn.com/docs-statics-srv/assets/analytics-overview.646194fb349cbe6ef00b6bdbb83010d4.png)\n\n## Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  From the **[Developer’s Dashboard](https://dashboard.stripe.com/developers) > [Apps](https://dashboard.stripe.com/apps)**, select your app.\n2.  Click the **Users** tab, then click **Export app analytics**.\n3.  Choose the report to export and select your preferred date range.\n\n## Available reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following reports are available to export as a CSV.\n\n| Name | Description | Report type |\n| --- | --- | --- |\n| **App installs** | Installs per day | `apps.install_events.1` |\n| **App uninstalls** | Uninstalls per day | `apps.uninstall_events.1` |\n| **Cumulative net installs** | Installs to date (`installs - uninstalls`) | `apps.total_installs.1` |\n| **Listing page views** | Total daily app listing views | `apps.listing_views.1` |\n| **Unique listing page views** | Total unique merchants who have visited your app listing page | `apps.unique_listing_views.1` |\n| **MoM install conversion rate** | `# of new installs in the last 30 days` ÷ `# of leads in the last 30 days` x `100` | `apps.lead_conversion_rate.1` |\n| **MoM listing page views growth rate\\*** | (`# of leads this month` - `# of leads last month`) ÷ `# of leads last month` x `100` | `apps.lead_velocity_rate.1` |\n| **MoM install churn rate** | `# of uninstalls in the last 30 days` ÷ `# of active installs 30 days ago` x `100` | `apps.churn_rate.1` |\n\n\\***MoM listing page views growth rate** might report high values for early data points. We recommend that you consider data at least 60 days after the first non-null point.\n\n### Data freshness and definitions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe analytics data lags up to 48 hours before it’s available in reports. If you’re looking for real-time metrics, you can build your own [custom analytics](#custom-analytics) using our platform primitives.\n\nWe define “leads” as logged-in merchants who visit the marketplace.\n\n### Accessing using the Stripe API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo access these reports programmatically, you can use the [Reporting API](https://docs.stripe.com/api/reporting/report_run) to run a report for the specific metrics you want to fetch. Each of the metrics is available as report types, which you can request in the following way:\n\n`curl https://api.stripe.com/v1/reporting/report_runs \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d report_type=\"apps.install_events.1\" \\  -d \"parameters[interval_start]\"=1680000000 \\  -d \"parameters[interval_end]\"=1680100000`\n\n## Users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe **Users** tab in your app’s details page lists all the currently installed users. If a user reinstalls your app, the `installed` column updates to the most recent install time.\n\n![App users tab](https://b.stripecdn.com/docs-statics-srv/assets/users_tab_dashboard.f63737de18de2af888119400fed28007.png)\n\n## Custom analytics![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf the provided metrics aren’t sufficient, you can leverage the platform primitives of Stripe to build your own set of metrics using the following solutions:\n\n### Using webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse webhooks to track and respond to users who install or uninstall your app or extension in real time, where you can get insights about:\n\n*   Installed user’s account ID\n    *   Date and time of install\n    *   Uninstalled user’s account ID\n    *   Date and time of uninstall\n*   Stripe app users\n    *   [Extension users](https://docs.stripe.com/stripe-apps/migrate-extension) (if applicable)\n\nFor more information, see how to [receive webhook events from your app](https://docs.stripe.com/stripe-apps/build-backend#receiving-events-webhooks).\n\n### Using Connect List API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the Connect List API to return a list of all the users who’ve currently installed your app and [extension](https://docs.stripe.com/stripe-apps/migrate-extension) (if applicable).\n\nFor more information, see the [List all connected accounts](https://docs.stripe.com/api/accounts/list) reference.",
    "title": "App analytics | Stripe Documentation",
    "description": "Access analytics to see how your app performs.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/migrate-extension",
    "markdown": "# Migrate an extension to Stripe Apps\n\n## Learn why and how to migrate your extensions to Stripe Apps.\n\n[Extensions](https://docs.stripe.com/building-extensions) are legacy apps built on Stripe, available to Stripe users in the [Partner Directory](https://stripe.partners/). Through OAuth and API requests, they bring payments data into other business tools, like analytics dashboards or data warehouses.\n\n[Stripe Apps](https://stripe.com/apps) replaces extensions as the preferred way to integrate Stripe with other tools. Stripe will redirect users from the [Partner Directory](https://stripe.partners/) to discover apps on the Stripe App Marketplace.\n\nAfter May 24, 2022, you can no longer create new extensions. On August 31, 2022, Stripe will remove all mentions of extensions on the Partner Directory. If you own an extension, migrate to Stripe Apps now to ensure continued discoverability.\n\n### Reasons to migrate ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Apps is an upgrade from the current extensions. By migrating, you get the following:\n\n*   Better discoverability, with broad visibility in the Stripe Dashboard and the Stripe App Marketplace\n*   More granular permissions, so you can set (and your users can understand) what data and APIs an app can access\n*   Interactive functionality, with embedded UI components in the Stripe Dashboard (so users can interact directly with your app without leaving Stripe)\n*   No interruption to your existing extension users if they choose to migrate\n\n### What happens if you don’t migrate ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you choose not to migrate your extension to a Stripe App, your extension will continue to work as it does today, without impact to users until 2024. We’ll continue to support extensions on our backend until the end of 2024. However, new users won’t be able to find any mention of extensions in the [Partner Directory](https://stripe.partners/) starting August 31, 2022.\n\n## Stripe Apps vs. extensions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAn app can do everything an extension does, with two key additions:\n\n1.  Interactive functionality, using embedded UI components in the Stripe Dashboard\n2.  More granular permissions to help users understand what an app can access\n\nThe other difference is that any user can discover apps from the Stripe App Marketplace instead of the Partner Directory.\n\n| Extensions | Stripe Apps |\n| --- | --- |\n| Any Stripe user can use. | Any Stripe user can use. |\n| After August 31, 2022, Stripe will remove all mentions of extensions from the [Partner Directory](https://stripe.partners/). | Discoverable in the [Stripe App Marketplace](https://marketplace.stripe.com/), with better visibility to all Stripe users. |\n| You can find your existing extensions in the Dashboard, under **Developers** > **Extensions**. | You can find your apps in the Dashboard, under **Developers** > **[Apps](https://dashboard.stripe.com/apps)**. |\n| Extensions are limited to either all read or all write permissions. No support for granular permissions. | You can request a granular set of permissions from users as part of app installation. |\n| You can’t create new extensions after May 24, 2022. | Any developer can build on Stripe’s platform. |\n| After users link their Stripe accounts to your extension with OAuth, you can make API requests on their behalf. | After users authorize and install your app, you can make API requests on their behalf. |\n| Users interact with your extension by installing additional tools and leaving Stripe. | Users can interact with your app within the Stripe UI without leaving Stripe. |\n| No ability to extend the Stripe UI. | You can build directly on top of the Stripe UI, starting with the Stripe Dashboard. |\n\n## Impact on your extension’s users ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter migrating your extension, your existing users will see a badge in their [extension settings](https://dashboard.stripe.com/test/extensions) page prompting them to re-authenticate. Your users must accept permissions to begin using your migrated app. If they choose not to accept permissions, they can continue to use their extension uninterrupted until 2024.\n\nMigrating lets you keep your existing extension code on the Stripe account you’re already using. You can’t have both an existing extension and a Stripe app on the same Stripe account—you can only have either an extension or an app. If you choose to migrate, you must migrate using the Stripe account linked to your extension. Using the same Stripe account also ensures continuity in the user experience, and users only need to accept a prompt in the Stripe Dashboard to switch from an extension to your new app.\n\nIf you don’t want to migrate your extension, and you still want to create an app, you will encounter several restrictions:\n\n*   You must create another Stripe account to publish the app.\n*   The app must have a unique and different purpose than your existing extension’s service.\n\n## Migrate to Stripe Apps ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFollow the steps below to migrate your extension to a Stripe App.\n\n![Steps to migrate an extension to a Stripe App](https://b.stripecdn.com/docs-statics-srv/assets/migrate_to_stripe_app_diagram.a741f6bfbd91e5840e123d581733bca9.png)\n\nMigrating an extension to a Stripe App\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   To protect your extension’s users while you develop your Stripe App, [test](https://docs.stripe.com/stripe-apps/test-app) and upload your app with a separate or new Stripe account to fully separate the app’s users from your extension’s users.\n*   To add an extra layer of safety, create a separate testing instance of your backend. While testing your Stripe app, avoid making changes to the backend code powering your live extension.\n*   After you have fully tested your Stripe app, upload the app to the same Stripe account that links to your extension to submit for App Review.\n\n[](#add-a-webhook-listener)\n\nMake sure your extension can make authenticated requests to Stripe. [Add a webhook listener](https://docs.stripe.com/stripe-apps/build-backend#receiving-events-webhooks) for the `account.application.authorized` event.\n\nIn addition to the documented response properties in the [event object reference](https://docs.stripe.com/api#events), each event for a connected account also contains a top-level `account` property. This property identifies the user webhook is being sent for.\n\nEach event for a connected account contains the documented response properties in the [event object reference](https://docs.stripe.com/api#events)and a top-level `account` property. The `account` property identifies the unique user the webhook is being sent for:\n\n`{   \"id\": \"evt_usgUtRhEpq2ezB\",   \"livemode\": true,   \"object\": \"event\",   \"type\": \"account.application.authorized\",   \"account\": \"acct_sKI1KqnwcvDWXQ\",   \"pending_webhooks\": 2,   \"created\": 1349654313,   \"data\": {...} }`\n\nThe user is now connected to your platform. Store the `account` in your database—this is the Stripe ID for the new account. You’ll use this value to [authenticate](https://docs.stripe.com/connect/authentication) as the connected account by passing it into requests in the `Stripe-Account` header.\n\nFor more information, see [Connect webhooks](https://docs.stripe.com/connect/webhooks).\n\n[\n\n## Add permissions and upload your app![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#add-permissions-and-upload)\n\n[Add permissions to your app manifest and upload your app](https://docs.stripe.com/stripe-apps/publish-app). Administrators of your connected accounts must accept these permissions to migrate to your app.\n\n#### Warning\n\nThe permissions model for Stripe Apps will overwrite the global permissions previously accepted by a user that authorized an extension. To ensure your existing users don’t experience permissions related interruptions, you must identify which objects your extension (not your app) calls on the Stripe API to know which permissions to add to your app.\n\nThe migration process between your connected account administrator, Stripe, and your extension looks like:\n\n![migrated app permissions diagram](https://b.stripecdn.com/docs-statics-srv/assets/migrated-app-permissions-diagram.8ed2661a5c4c75477ccd9aa77f02cd13.png)\n\nAfter your app passes review and you publish your app, your extension’s users must accept permissions in their Dashboard settings to see and use the migrated app. If you [add UI extensions](#add-additional-functionality), users get redirected to the Stripe App Marketplace to accept changes instead of in the Dashboard.\n\n[](#onboard-users)\n\nAfter migration, your existing users must re-authenticate in the Dashboard to use your Stripe app. If they don’t accept the permissions prompt, they can continue to use your extension uninterrupted until 2024.\n\nYou can onboard _new_ users to your Stripe App in two ways:\n\n*   You can list your migrated app in the Stripe App Marketplace after migrating your app and passing the app listing requirements. Any Stripe App on the Stripe App Marketplace will be available to install to Stripe account users starting late June 2022.\n*   New users can continue to onboard to your extension with OAuth from your website. After users accept OAuth authorization and return to the Stripe Dashboard, Stripe prompts them to use your migrated Stripe App instead. If they decline, users can continue using the extension uninterrupted until 2024.\n\n#### Note\n\nTo avoid onboarding new users with OAuth after you complete the migration, you can remove your OAuth callbacks and redirect new users to your app listing on the Stripe App Marketplace by changing your website’s **Connect with Stripe** button. If you remove OAuth callbacks, you can’t onboard new users until late June 2022, using the Stripe App Marketplace. If you don’t remove OAuth callbacks, you’re responsible for managing the separate listings and users for both your extension and Stripe App.",
    "title": "Migrate an extension to Stripe Apps | Stripe Documentation",
    "description": "Learn why and how to migrate your extensions to Stripe Apps.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/onboarding-plugin",
    "markdown": "# Migrate or build a plugin using Stripe Apps\n\nPreviously, Stripe allowed third-party plugins to request the standard API keys of a user to integrate with their products. Since January 2024, Stripe requires plugins to leverage Stripe Apps. All new and existing plugins must use a Stripe App to authenticate users for their service using Oauth 2.0 or a restricted API key.\n\nIf you have an existing plugin, migrate to the standard Stripe Apps integration path for security and compliance purposes. Migrating an existing plugin to a Stripe App integration only requires you to change your plugin’s authentication method.\n\nAuthentication through a Stripe App is the new default and standard integration path for all new plugins, [extensions](https://docs.stripe.com/stripe-apps/migrate-extension), and [partner connectors](https://docs.stripe.com/building-plugins). The following are the benefits of the new integration path:\n\nIf you don’t migrate your authentication to a Stripe App, it will continue to work as it does today, without impact to users until 2024. We’ll continue to support plugins on our backend until the end of 2024.\n\nIf you choose to migrate, your users must re-onboard and re-authenticate their plugin. To migrate or build a plugin, choose either OAuth 2.0 (recommended) or Restricted API Key (RAK) authentication. OAuth is the least complex way for users to securely authenticate a plugin. RAK doesn’t require any additional backend setup from you. However, users must still copy and paste generated Stripe API keys to your third-party plugin. This method increases the complexity of the authentication process for your users.\n\nThe following is an example of a user re-authenticating with OAuth:\n\n1.  From your website, the user wants to integrate with Stripe.\n2.  They open your app’s [installation link](https://docs.stripe.com/stripe-apps/install-links) to view the permissions and install the app.\n3.  After the user installs your app, authentication is complete, and the user is redirected to your `redirect_uri`.\n\n![The install link page showing an OAuth app](https://b.stripecdn.com/docs-statics-srv/assets/oauth-user-journey.0fd6041638a1cbb305dc88690354a462.png)\n\n[](#develop-app-oauth)\n\n1.  [Create your Stripe App](https://docs.stripe.com/stripe-apps/create-app#create-app) by running `stripe apps create <app-name>` in the CLI.\n    \n    *   Make sure your app name doesn’t exceed 35 characters.\n    *   When naming your app, don’t use the following terms:\n        *   Authenticator\n        *   RAK\n        *   Generator\n        *   RAK Auth\n        *   App\n        *   Generator App\n    *   Here are some examples of acceptable names: Analytics Pro by DataWiz, Invoice Manager by PayFlow.\n    *   If you’re developing an app for a 3rd party service, follow this naming convention: \\[App Functionality\\] by \\[Developer Name\\]. For example, Hubspot Sync by Boomi.\n2.  Edit the following fields in the [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest):\n    \n    *   Set `stripe_api_access_type` to `oauth`.\n    *   Set `distribution_type` to `public`.\n    *   Set your `allowed_redirect_uris`. These are the URLs that users are redirected to after installing your app using OAuth. The first one in the list is used as the default redirect.\n    \n    Your app manifest should look like this:\n    \n    `{   \"id\": \"com.example.my-app\",   \"version\": \"0.0.1\",   \"name\": \"Your Stripe App\",   \"icon\": \"./[YOUR_APP]_icon_32.png\",   \"permissions\": [     // Your app permissions here   ],   \"stripe_api_access_type\": \"oauth\",   \"distribution_type\": \"public\",   \"allowed_redirect_uris\": [     // Your redirect URIs here   ] }`\n    \n3.  Add all the [permissions](https://docs.stripe.com/stripe-apps/reference/permissions) that your app requires.\n    \n4.  (Optional) Add [UI extensions](https://docs.stripe.com/stripe-apps/build-ui) to your app. We recommend adding a [settings view](https://docs.stripe.com/stripe-apps/app-settings) to allow your users to configure settings or to link to your app’s documentation. If your app’s only purpose is for authentication such as RAK or OAuth, make sure to remove any unnecessary UI or UX code. This helps reduce confusion and keeps the app focused on its primary function.\n    \n5.  [Upload](https://docs.stripe.com/stripe-apps/upload-install-app) your app to Stripe.\n    \n\n[](#test-app-oauth)\n\n1.  Navigate to your app’s details page.\n2.  Open the **External test** tab and click **Get started** to set up an [external test](https://docs.stripe.com/stripe-apps/test-app).\n3.  Access the authorize links in the **Test OAuth** section. You can use this link to test with your own account.\n\n[](#configure-oauth)\n\nMake sure you’ve configured OAuth 2.0 correctly. To learn how to save and refresh access tokens, see [OAuth setup](https://docs.stripe.com/stripe-apps/api-authentication/oauth#install-app).\n\n[](#publish-app)\n\nWhen you’re ready to distribute your app to users:\n\n1.  [Submit your app for review](https://docs.stripe.com/stripe-apps/publish-app#submit-app-for-review).\n2.  After your app is approved, [publish your app](https://docs.stripe.com/stripe-apps/publish-app#publish-app) to Stripe App Marketplace.\n3.  From the app details page, click the **Settings** tab.\n4.  Copy the **Install link**. Users can use this link to install your app.",
    "title": "Migrate or build a plugin using Stripe Apps | Stripe Documentation",
    "description": "Use OAuth 2.0 or RAK to authenticate your plugin's users.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/reference/cli",
    "markdown": "# Stripe Apps CLI reference | Stripe DocumentationThe Stripe Docs logo\n\n## Install the Stripe Apps command line interface and use it to manage your app.\n\nThe Stripe Apps CLI helps you create, develop, configure, and upload your Stripe app using the terminal.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  [Log in to the Stripe Dashboard](https://dashboard.stripe.com/) using your existing Stripe account, or by creating a new one.\n2.  [Install the Stripe CLI](https://docs.stripe.com/stripe-cli).\n3.  Log in to the CLI using the same account you logged into the Stripe Dashboard with.\n4.  Verify that you’re using CLI version 1.8.11 or newer.\n    \n    `stripe version # expected output: stripe version 1.8.11`\n    \n\n## Install the CLI plugin ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo install the Stripe Apps CLI plugin, run:\n\n`stripe plugin install apps`\n\n## Upgrade the CLI plugin ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo get the latest version of the Stripe Apps CLI plugin, run:\n\n`stripe plugin upgrade apps`\n\n## Command overview ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Command | Description |\n| --- | --- |\n| `create` | Create a new Stripe app. |\n| `start` | Start a development server for viewing your app in the Stripe Dashboard. Use the `--manifest` flag to [load an extended manifest file](https://docs.stripe.com/stripe-apps/reference/app-manifest#extended-manifest). |\n| `add` | Add a building block for developing your app. |\n| `remove` | Remove a building block from your `stripe-app.json` file. |\n| `grant` | Grant configuration access to your app. |\n| `revoke` | Revoke configuration access to your app. |\n| `set` | Set a configuration value within the app manifest. |\n| `upload` | Upload your app to be submitted for review. |\n| `version` | Print the version of Stripe Apps CLI plugin. |\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [App manifest reference](https://docs.stripe.com/stripe-apps/reference/app-manifest)\n*   [Permissions reference](https://docs.stripe.com/stripe-apps/reference/permissions)\n*   [How UI extensions work](https://docs.stripe.com/stripe-apps/how-ui-extensions-work)\n*   [Upload and install your Stripe App](https://docs.stripe.com/stripe-apps/upload-install-app)",
    "title": "Stripe Apps CLI reference | Stripe Documentation",
    "description": "Install the Stripe Apps command line interface and use it to manage your app.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/reference/app-manifest",
    "markdown": "# App manifest reference | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the app manifest, an index of all fields, types, and descriptions for your app manifest file.\n\nAn app manifest describes how your app integrates with the Stripe platform. Every Stripe app needs a `stripe-app.json` manifest file at the root of the project directory structure.\n\nYou can update the app manifest using the [Stripe Apps CLI](https://docs.stripe.com/stripe-apps/reference/cli), or you can edit it directly. For instance, you can [add a permission](https://docs.stripe.com/stripe-apps/reference/permissions) using the command `stripe apps grant permission`, or by adding a [permissionRequest](#permissionrequest) to the app manifest directly.\n\nApp manifest files follow a [schema](#schema) described on this page.\n\n## Example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`{   \"id\": \"com.invoicing.[YOUR_APP]\",   \"version\": \"1.2.3\",   \"name\": \"[YOUR APP] Shipment Invoicing\",   \"icon\": \"./[YOUR_APP]_icon_32.png\",   \"distribution_type\": \"public\",   \"permissions\": [     {       \"permission\": \"invoice_write\",       \"purpose\": \"Allows [YOUR APP] to add shipping line items to an invoice.\"     },     {       \"permission\": \"product_read\",       \"purpose\": \"Allows [YOUR APP] to use product sizes for calculating shipping.\"     }   ],   \"ui_extension\": {     \"views\": [       {         \"viewport\": \"stripe.dashboard.invoice.detail\",         \"component\": \"AddShipping\"       }     ],     \"content_security_policy\": {       \"connect-src\": [         \"[https://api.example.com/a_specific_endpoint](https://api.example.com/a_specific_endpoint)\",         \"[https://api.example.com/a_whole_subdirectory/](https://api.example.com/a_whole_subdirectory/)\"       ],       \"image-src\": [         \"[https://images.example.com/one_image.jpg](https://images.example.com/one_image.jpg)\",         \"[https://images.example.com/a_whole_subdirectory/](https://images.example.com/a_whole_subdirectory/)\"       ],       \"purpose\": \"These URLs allow the app to contact [YOUR APP] for creating shipping details and loading images of shipping partner logos\"     }   },   \"post_install_action\": {     \"type\": \"external\",     \"url\": \"[https://example.com](https://example.com/)\"   },   \"constants\": {     \"API_BASE\": \"[https://api.example.com](https://api.example.com/)\"   } }`\n\n## Schema![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nApp manifest files are JSON files with these fields:\n\n| Field name | Type | Examples |\n| --- | --- | --- |\n| id  | slug | com.invoicing.myapp |\n| A globally unique identifier for your app, defined by you. Stripe validates upon initial submission. |     |     |\n| version | string | 1.2.4 |\n| An app version that you define. You can use whatever format you want for version identifiers. |     |     |\n| name | string | My App |\n| The name shown in the UI when referring to your app. |     |     |\n| icon | string | ./favicon.png |\n| The relative path within the app bundle to a 300x300 pixel PNG icon to show alongside attribution. |     |     |\n| distribution\\_type | “public” \\| “private” | “public” |\n| The [distribution type](https://docs.stripe.com/stripe-apps/distribution-options) for the app. |     |     |\n| stripe\\_api\\_access\\_type | “platform” \\| “oauth” \\| “restricted\\_api\\_key” | oauth |\n| The [API authentication method](https://docs.stripe.com/stripe-apps/api-authentication) of your app. |     |     |\n| allowed\\_redirect\\_uris | Array<String> | none |\n| The URLs that users are redirected to after installing your app with OAuth or with an install link. |     |     |\n| permissions | Array<[PermissionRequest](#permissionrequest)\\> | none |\n| The permissions required by the app in order to function. |     |     |\n| ui\\_extension | [UIExtensionManifest](#uiextensionmanifest) | none |\n| Configuration specific to the “UI Extension” capability. |     |     |\n| post\\_install\\_action | [PostInstallAction](#postinstallaction) | none |\n| An optional configuration to direct users to custom location after an app is installed. |     |     |\n| constants | Object | `{\"API_BASE\": \"https://api.example.com/v1\"}` |\n| An object with arbitrary constant values that you can access in the [UI extension context props](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#props) and [override for local development using the CLI manifest flag](#extended-manifest). |     |     |\n\n### `PermissionRequest` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA permission request has these fields:\n\n| Field name | Type | Example |\n| --- | --- | --- |\n| permission | string | customer\\_write |\n| Permissions that the app would like to use. [Learn more about permissions](https://docs.stripe.com/security/permissions). |     |     |\n| purpose | string \\| Map<locale, string> | “This app loads images from images.example.com.” |\n| A user-facing explanation that tells people installing your app why it needs these permissions. |     |     |\n| name | string | “Necessary for \\[YOUR APP\\] to update invoices with selected shipping charges” |\n| A Stripe-facing explanation that tells app reviewers why your app needs these permissions. |     |     |\n\n### `UiExtensionManifest` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA UI extension manifest has these fields:\n\n| Field name | Type | Example |\n| --- | --- | --- |\n| views | Array<[ViewManifest](#viewmanifest)\\> | none |\n| React components that show up in the Dashboard in a distinct place. [Learn more](https://docs.stripe.com/stripe-apps/design#types-of-views). |     |     |\n| content\\_security\\_policy | [CSPRequest](#csprequest) | none |\n| Request for your UI extension to be granted access to specific URLs for a specific purpose. |     |     |\n\n### `ViewManifest` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA view manifest has these fields:\n\n| Field name | Type | Example |\n| --- | --- | --- |\n| viewport | string | stripe.dashboard.invoice.detail |\n| An identifier that indicates where a UI extension might appear within the Dashboard. See the [list of available viewports](https://docs.stripe.com/stripe-apps/reference/viewports). |     |     |\n| component | string | AddShippingSelector |\n| An exported React component that uses one of our [view components](https://docs.stripe.com/stripe-apps/components#views). |     |     |\n\n### `CSPRequest` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA content security policy request has these fields:\n\n| Field name | Type | Example |\n| --- | --- | --- |\n| connect-src | Array<string> | https://o0.ingest.sentry.io/api/ |\n| URLs of permitted third-party APIs. If the URL ends in a slash, all of its children also receive permission. See [Use third-party APIs](https://docs.stripe.com/stripe-apps/build-ui#use-third-party-apis) for details. |     |     |\n| image-src | Array<string> | https://images.example.com/ |\n| URLs the [Img](https://stripe.com/stripe-apps/ui-toolkit/components/img) component can load from. If the URL ends in a slash, all of its children also receive permission. |     |     |\n| purpose | string \\| Map<locale, string> | “This app loads images from https://images.example.com and sends anonymous error reports to our partner Sentry for debugging purposes.\" |\n| An explanation to show users when the app is installed that explains why the plugin needs to communicate directly with these URLs. |     |     |\n\nURLs must conform to the [CSP spec](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP). We only allow HTTPS schemes.\n\n### `PostInstallAction` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA post-install action has these fields:\n\n| Field name | Type | Example |\n| --- | --- | --- |\n| type | string | `external`, `settings` |\n| Additional action after users installed your app in the Stripe Dashboard. For more information, see [Enable post-install configuration](https://docs.stripe.com/stripe-apps/post-install-actions). |     |     |\n| url | string | https://example.com |\n| External URL to redirect users to after installing your app. This is required only if the post-install action type is `external`. |     |     |\n\n## Use an extended manifest file for development ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDuring local development you may need to use different [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest \"app manifest\") values than those you use in production. For example, your app’s backend could be located at `https://api.example.com/v1` but your local development backend runs at `http://localhost:8888/v1`.\n\nGiven this example of a manifest file:\n\n`{   \"id\": \"com.invoicing.[YOUR_APP]\",   \"version\": \"1.2.3\",   \"name\": \"[YOUR APP] Shipment Invoicing\",   \"icon\": \"./[YOUR_APP]_icon_32.png\",   \"permissions\": [],   \"ui_extension\": {     \"views\": [       {         \"viewport\": \"stripe.dashboard.invoice.detail\",         \"component\": \"InvoiceDetail\"       }     ],     \"content_security_policy\": {       \"connect-src\": [\"[https://api.example.com/v1](https://api.example.com/v1)\"],       \"purpose\": \"Allow the app to retrieve example data\"     }   },   \"constants\": {     \"API_BASE\": \"[https://api.example.com/v1](https://api.example.com/v1)\"   } }`\n\nCreate another manifest file called `stripe-app.[anything].json` that extends your main manifest and overrides it with local values. For example:\n\nTo use the local manifest file during development, load it using the `--manifest` flag. For example:\n\n`stripe apps start --manifest stripe-app.dev.json`\n\nAccess the `constants` values in your views using [context props](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#props). For example:\n\n``import {useEffect, useState} from 'react'; import type {ExtensionContextValue} from '@stripe/ui-extension-sdk/context'; import {Box} from '@stripe/ui-extension-sdk/ui';  const InvoiceDetail = ({environment}: ExtensionContextValue) => {   const [data, setData] = useState(null);    useEffect(() => {     fetch(`${environment.constants.API_BASE}/some-endpoint`)       .then(response => response.json())       .then(json => setData(json));   }, []);    return data ? <Box>Here is your message: {data.message}</Box> : 'Loading...'; };``",
    "title": "App manifest reference | Stripe Documentation",
    "description": "Learn about the app manifest, an index of all fields, types, and descriptions for your app manifest file.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/security/permissions",
    "markdown": "# Request permissions | Stripe DocumentationThe Stripe Docs logo\n\nAccount`connected_account_read`Grants access to read [Accounts](https://docs.stripe.com/api/accounts)Account link`account_link_write`Grants access to [Account Links](https://docs.stripe.com/api/account_links)Apple Pay Domain`apple_pay_domain_read`, `apple_pay_domain_write`Grants access to Apple Pay Domain resources. To use Apple Pay, you need to register your web domains with Apple. See [domain registration](https://docs.stripe.com/payments/payment-methods/pmd-registration) for more information.Application Fee`application_fee_read`, `application_fee_write`Grants access to [Application Fees](https://docs.stripe.com/api/application_fees)Balance`balance_read`Grants access to [Balance](https://docs.stripe.com/api/balance)\n\nBalance transaction source\n\n`balance_transaction_source_read`\n\nGrants access to expand the `source` attribute when retrieving [Balance Transactions](https://docs.stripe.com/api/balance_transactions)\n\nThis permission also implies the following permissions: `application_fee_read`, `balance_read`, `transfer_read`\n\nBilling clock`billing_clock_read`, `billing_clock_write`Grants access to [Test clocks](https://docs.stripe.com/billing/testing/test-clocks)Charge`charge_read`, `charge_write`Grants access to [Charges](https://docs.stripe.com/api/charges)\n\nCheckout Session\n\n`checkout_session_read`, `checkout_session_write`\n\nGrants access to [Sessions](https://docs.stripe.com/api/checkout/sessions)\n\nThis permission also implies the following permissions: `mandate_read`, `payment_intent_read`, `payment_links_read`, `product_read`, `setup_intent_read`, `sku_read`\n\nConfiguration`terminal_configuration_read`, `terminal_configuration_write`Grants access to [Configurations](https://docs.stripe.com/api/terminal/configuration)Connection Token`terminal_connection_token_write`Grants access to [Connection Tokens](https://docs.stripe.com/api/terminal/connection_tokens)Coupon`coupon_read`, `coupon_write`Grants access to [Coupons](https://docs.stripe.com/api/coupons)\n\nCredit note\n\n`credit_note_read`, `credit_note_write`\n\nGrants access to [Credit Notes](https://docs.stripe.com/api/credit_notes)\n\nThis permission also implies the following permissions: `invoice_read`,\n\nCustomer portal\n\n`customer_portal_read`, `customer_portal_write`\n\nGrants access to the [customer portal](https://docs.stripe.com/api/customer_portal)\n\nIf you’re using the customer portal to manage subscriptions or payment methods, you must also request `elements_write`.\n\nCustomer\n\n`customer_read`, `customer_write`\n\nGrants access to [Customers](https://docs.stripe.com/api/customers)\n\nThis permission also implies the following permission: `billing_clock_read`.\n\nDispute`dispute_read`, `dispute_write`Grants access to [Disputes](https://docs.stripe.com/api/disputes)Edit link`edit_link_write`Grants access to [Login Links](https://docs.stripe.com/api/account/login_link)Elements`elements_write`Grants access to [Stripe.js Elements](https://docs.stripe.com/js/elements_object)Event`event_read`Grants access to [Events](https://docs.stripe.com/api/events)File`file_read`, `file_write`Grants access to [Files](https://docs.stripe.com/api/files)\n\nInvoice\n\n`invoice_read`, `invoice_write`\n\nGrants access to [Invoices](https://docs.stripe.com/api/invoices)\n\nThis permission also implies the following permission: `credit_note_read`\n\nIf you’re using the [hosted invoice page](https://docs.stripe.com/invoicing/hosted-invoice-page) to manage invoices or payment methods, you must also request `elements_write`.\n\nIssuing authorization`issuing_authorization_read`, `issuing_authorization_write`Grants access to [Authorizations](https://docs.stripe.com/api/issuing/authorizations)Issuing card`issuing_card_read`, `issuing_card_write`Grants access to [Cards](https://docs.stripe.com/api/issuing/cards)Issuing cardholder`issuing_cardholder_read`, `issuing_cardholder_write`Grants access to [Cardholders](https://docs.stripe.com/api/issuing/cardholders)Issuing dispute`issuing_dispute_read`, `issuing_dispute_write`Grants access to [Issuing Disputes](https://docs.stripe.com/api/issuing/disputes)Issuing transaction`issuing_transaction_read, issuing_transaction_write`Grants access to [Transactions](https://docs.stripe.com/api/issuing/transactions)Location`terminal_location_read`, `terminal_location_write`Grants access to [Locations](https://docs.stripe.com/api/terminal/locations)Mandate`mandate_read`, `mandate_write`Grants access to [Mandates](https://docs.stripe.com/api/mandates)Order`order_read`, `order_write`Grants access to [Orders](https://docs.stripe.com/api/orders_legacy)\n\nPayment intent\n\n`payment_intent_read`, `payment_intent_write`\n\nGrants access to [PaymentIntents](https://docs.stripe.com/api/payment_intents)\n\nIf you’re managing PaymentIntents with [Stripe.js Elements](https://docs.stripe.com/js/elements_object), you must also request `elements_write`.\n\nThis permission also implies the following permissions: `product_read`, `sku_read`\n\nPayment links\n\n`payment_links_read`, `payment_links_write`\n\nGrants access to [Payment Links](https://docs.stripe.com/payment-links)\n\nThis permission also implies the following permissions: `mandate_read`, `product_read`, `sku_read`\n\nPayment method\n\n`payment_method_read`, `payment_method_write`\n\nGrants access to [PaymentMethods](https://docs.stripe.com/api/payment_methods)\n\nThis permission also implies the following permission: `source_read`\n\nPayout`payout_read`, `payout_write`Grants access to [Payouts](https://docs.stripe.com/api/payouts)Plan`plan_read`, `plan_write`Grants access to [Plans](https://docs.stripe.com/api/plans) and [Prices](https://docs.stripe.com/api/prices)Product`product_read`, `product_write`Grants access to [Products](https://docs.stripe.com/api/products)Promotion Code`promotion_code_read`, `promotion_code_write`Grants access to [Promotion Codes](https://docs.stripe.com/api/promotion_codes)\n\nQuote\n\n`quote_read`, `quote_write`\n\nGrants access to [Quotes](https://docs.stripe.com/api/quotes)\n\nThis permission also implies the following permissions: `sku_read`, `product_read`\n\nReader`terminal_reader_read`, `terminal_reader_write`Grants access to [Readers](https://docs.stripe.com/api/terminal/readers)Report Runs and Report Types`report_runs_and_report_types_read`Grants read access to [Report Types](https://docs.stripe.com/api/reporting/report_type) and allows creation of [Report Runs](https://docs.stripe.com/api/reporting/report_run)Review`review_read`, `review_write`Grants access to [Reviews](https://docs.stripe.com/api/radar/reviews)Secret`secret_write`Grants access to [Secrets](https://docs.stripe.com/api/secret_management)\n\nSetup Intent\n\n`setup_intent_read`, `setup_intent_write`\n\nGrants access to [SetupIntents](https://docs.stripe.com/api/setup_intents)\n\nIf you’re managing SetupIntents with [Stripe.js Elements](https://docs.stripe.com/js/elements_object), you must also request `elements_write`.\n\nThis permission also implies the following permission: `mandate_read`\n\nShipping rate`shipping_rate_read`, `shipping_rate_write`Grants access to [Shipping Rates](https://docs.stripe.com/api/shipping_rates)SKU`sku_read`, `sku_write`Grants access to [SKUs](https://docs.stripe.com/api/skus)Source`source_read`, `source_write`Grants access to [Sources](https://docs.stripe.com/api/sources)Subscription`subscription_read`, `subscription_write`Grants access to [Subscriptions](https://docs.stripe.com/api/subscriptions)Tax rate`tax_rate_read`, `tax_rate_write`Grants access to [Tax Rates](https://docs.stripe.com/api/tax_rates)Tax settings`tax_settings_read`, `tax_settings_write`,Grants access to [Tax Settings](https://docs.stripe.com/api/tax/settings)Tax transaction`tax_calculations_and_transactions_read`, `tax_calculations_and_transactions_write`,Grants access to [Tax Calculations and Transactions](https://docs.stripe.com/api/tax/transactions)Token`token_read`, `token_write`Grants access to [Tokens](https://docs.stripe.com/api/tokens)Top up`top_up_read`, `top_up_write`Grants access to [Top-ups](https://docs.stripe.com/api/topups)\n\nTransfer\n\n`transfer_read`, `transfer_write`\n\nGrants access to [Transfers](https://docs.stripe.com/api/transfers)\n\nThis permission also implies the following permission: `payout_read`\n\nUsage record`usage_record_read`, `usage_record_write`Grants access to [Usage Records](https://docs.stripe.com/api/usage_records)User Email`user_email_read`Grants access to user emails\n\nWebhook\n\n`webhook_read`, `webhook_write`\n\nGrants access to [Webhook Endpoints](https://docs.stripe.com/api/webhook_endpoints)\n\nTo use `webhook_write` in your Stripe App, contact [stripe-apps@stripe.com](https://support.stripe.com/).",
    "title": "Request permissions | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/security/python-client-pgp-key",
    "markdown": "# Python PGP key | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use the Python client library PGP key.\n\nIf you’re unfamiliar with PGP, see [GPG](http://gnupg.org/) and start by [importing a public key](http://www.gnupg.org/gph/en/manual.html#AEN84). After you familiarize yourself with the basics of PGP, use this PGP key as it’s marked as trusted for the [Python client library](https://github.com/stripe/stripe-python).\n\n#### Note\n\n### Python PGP key\n\nAfter you import the key, you can encrypt files by running:\n\n`gpg --encrypt --recipient 05D02D3D57ABFF46 FILENAME`\n\nThis creates **FILENAME.gpg** with the following information:\n\n*   **Key ID**: `05D02D3D57ABFF46`\n*   **Key type**: RSA\n*   **Key size**: 2048 bits\n*   **Fingerprint**: `C330 33E4 B583 FE61 2EDE 877C 05D0 2D3D 57AB FF46`\n*   **User ID**: `Stripe <security@stripe.com>`",
    "title": "Python PGP key | Stripe Documentation",
    "description": "Learn how to use the Python client library PGP key.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api",
    "markdown": "# Extension SDK API reference | Stripe DocumentationThe Stripe Docs logo\n\n## An index of all fields, types, and descriptions for the Extension SDK API.\n\nUI extensions have access to [context props](#props) and [utility functions](#functions) that let them interact with an app’s users and the Stripe Dashboard ecosystem. This page documents these values and functions.\n\n## Props ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nViews are passed props that the extension can use for context on where the extension is being displayed. Your view can take some or all of these props as arguments, and they’re of type `ExtensionContextValue`.\n\n`import type {ExtensionContextValue} from '@stripe/ui-extension-sdk/context';  const ExampleApp = ({ userContext, environment, oauthContext, appContext}: ExtensionContextValue) => {   ... }`\n\n### User context![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `userContext` prop has data about the end user using your app, including these fields:\n\n| Field | Type | Example |\n| --- | --- | --- |\n| name | string | Jenny Rosen |\n| The app user’s name |     |     |\n| account.country | string | UK  |\n| The app user’s country |     |     |\n| account.id | string | acct\\_1032D82eZvKYlo2C |\n| The app user’s account ID |     |     |\n| account.name | string | Jenny’s Llama Emporium |\n| The name of the Stripe account |     |     |\n| roles | Array<[RoleDefinition](#roledefinition)\\> | none |\n| A list of the active user’s [user roles](https://docs.stripe.com/get-started/account/teams/roles). |     |     |\n| locale | string | en-GB |\n| The app user’s system language ID |     |     |\n\n### RoleDefinition ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA role definition has these fields:\n\n| Field name | Type | Example |\n| --- | --- | --- |\n| type | ‘builtIn’ \\| ‘custom’ | builtIn |\n| Specifies the role type. Custom roles are only available to [private apps](https://docs.stripe.com/stripe-apps/distribution-options#share-with-team-members). |     |     |\n| name | string | Developer |\n| The name of the user role. |     |     |\n\n### Environment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `environment` prop has data about the page a user is viewing, including these fields:\n\n| Field | Type | Example |\n| --- | --- | --- |\n| viewportID | string | stripe.dashboard.payment.list |\n| Current viewport rendering your view |     |     |\n| mode | ‘live’ \\| ‘test’ | live |\n| The Stripe API mode the current page is in |     |     |\n| objectContext.id | string | ch\\_3L0pjB2eZvKYlo2C1u1vZ7aK |\n| In the `ObjectView` objects, this is the ID of the current object the user views in the Dashboard. |     |     |\n| objectContext.object | string | charge |\n| In the `ObjectView` objects, this is the type of the current object the user views in the Dashboard. |     |     |\n| constants | Object | `{\"API_BASE\": \"https://api.example.com/v1\"}` |\n| An object with arbitrary constant values passed from the [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest \"app manifest\") that can be [overridden for local development using the CLI manifest flag](https://docs.stripe.com/stripe-apps/reference/app-manifest#extended-manifest). |     |     |\n\n### OAuth context![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `oauthContext` prop contains information about the current [OAuth workflow](https://docs.stripe.com/stripe-apps/pkce-oauth-flow), if one is underway.\n\n| Field | Type | Example |\n| --- | --- | --- |\n| error | string | none |\n| OAuth error code |     |     |\n| code | string | none |\n| OAuth authorization code |     |     |\n| state | string | none |\n| OAuth state used by your app |     |     |\n| verifier | string | none |\n| OAuth code verifier |     |     |\n\n### App context ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe `appContext` prop contains information about the user’s app install, and has the following fields:\n\n| Field | Type | Example |\n| --- | --- | --- |\n| authorizedPermissions | Array<string> | `['event_read', 'charge_write']` |\n| App’s current authorized permissions |     |     |\n| authorizedCSP.connectSrc | Array<string> | `['http://o.ingest.sentry.io/api/']` |\n| URLs of permitted third-party APIs. If the URL ends in a slash, all of its children are also permitted. |     |     |\n| authorizedCSP.imageSrc | Array<string> | `['https://images.example.com/', 'https://images.example.org']` |\n| URLs the [Img](https://stripe.com/stripe-apps/ui-toolkit/components/img) component can load from. If the URL ends in a slash, all of its children are also permitted. |     |     |\n\n## Utility functions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe UI extension SDK provides these functions to help apps interact with the Stripe API and the Dashboard user.\n\n*   [clipboardWriteText](#clipboardWriteText)—Write text to the end user’s clipboard.\n*   [createHttpClient](#createHttpClient)\\-Get an authenticated Stripe API client.\n*   [createOAuthState](#createOAuthState)—Obtain values to use when you create an authorization link in an OAuth workflow.\n*   [fetchStripeSignature](#fetchStripeSignature)—Get a signature from Stripe’s servers.\n*   [getDashboardUserEmail](#getDashboardUserEmail)—Get the end user’s email address.\n*   [getUserAuthorizedPermissions](#getUserAuthorizedPermissions)—Get the intersection of the app’s authorized permissions and those of the current Dashboard user.\n*   [isPermissionAuthorized](#isPermissionAuthorized)—Indicate whether a permission is currently in an app’s authorized permissions.\n*   [isSourceInAuthorizedCSP](#isSourceInAuthorizedCSP)—Indicate whether a URL is currently in an app’s authorized content security policy.\n*   [showToast](#showToast)—Show a toast message to the user.\n*   [useRefreshDashboardData](#useRefreshDashboardData)—Enable your view to update data in the Dashboard.\n\n### clipboardWriteText ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWrite text to the app user’s clipboard. The user can then paste it as if they had copied it.\n\n| Argument | Type | Example |\n| --- | --- | --- |\n| text | string | Hello, world! |\n| Text to copy |     |     |\n\nTo use this function, first import it from the SDK:\n\n`import {clipboardWriteText} from '@stripe/ui-extension-sdk/utils';`\n\nFor example, provide a button that copies `Hello, world!` to the clipboard when pressed. In a real app, you could use this to copy an address, invoice number, or other important detail.\n\n`import {useCallback} from 'react'; import {Button} from '@stripe/ui-extension-sdk/ui'; import {clipboardWriteText} from '@stripe/ui-extension-sdk/utils';  const App = () => {   const writeToClipboard = useCallback(async () => {     try {       await clipboardWriteText('Hello, world!');       // Writing to the clipboard succeeded     } catch (e) {       // Writing to the clipboard failed     }   }, []);   return (     <Button       onPress={writeToClipboard}     >       Copy to clipboard     </Button>   ); };`\n\n### createHttpClient ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nObtain an authenticated Stripe API client for the installed user’s account. You must use the `STRIPE_API_KEY` provided by the SDK to give your client the permissions defined in the [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest).\n\nTo use this function, first import it from the SDK and then provide its values to the Stripe constructor from [stripe-node](https://github.com/stripe/stripe-node).\n\n`import {createHttpClient, STRIPE_API_KEY} from '@stripe/ui-extension-sdk/http_client'; import Stripe from 'stripe';  const stripe = new Stripe(   STRIPE_API_KEY,   {     httpClient: createHttpClient(),     apiVersion: '2022-11-15'   } )`\n\nFor an example in context, see [Build a UI](https://docs.stripe.com/stripe-apps/build-ui#code-sample-update-customer-name).\n\n### createOAuthState ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nObtain `state` and `challenge` values to use when you [create an authorization link](https://docs.stripe.com/stripe-apps/pkce-oauth-flow#create-authorization-link) in an OAuth workflow.\n\nTo use this function, first import it from the SDK.\n\n`import {createOAuthState} from '@stripe/ui-extension-sdk/utils';`\n\nFor an example in context, see [Add authorization workflows](https://docs.stripe.com/stripe-apps/pkce-oauth-flow).\n\n### fetchStripeSignature ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nGet a signature from Stripe’s servers. Your UI extension can use this signature to send signed requests to your app’s backend.\n\nTo use this function, first import it from the SDK.\n\n`import {fetchStripeSignature} from '@stripe/ui-extension-sdk/utils';`\n\nFor more details and an example in context, see [server-side logic](https://docs.stripe.com/stripe-apps/build-backend) docs.\n\n### getDashboardUserEmail ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nGet the app user’s email address.\n\nTo use this function, first import it from the SDK.\n\n`import {getDashboardUserEmail} from '@stripe/ui-extension-sdk/utils';`\n\nYou must also include the `user_email_read` permission in your [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest). Add it using a CLI command or edit the app manifest file directly.\n\n`stripe apps grant permission user_email_read` \n\n`\"EXPLANATION\"`\n\nFor example, access the app user’s email in a view by getting it using the `getDashboardUserEmail` function and storing it in a React state variable.\n\n`import {useEffect, useState} from 'react'; import {getDashboardUserEmail} from '@stripe/ui-extension-sdk/utils';  export const useDashboardUserEmail = () => {   const [email, setEmail] = useState<string | null>(null);    const fetchEmail = async () => {     try {       const {email} = await getDashboardUserEmail();       setEmail(email);     } catch(e) {       console.error(e);     }   };    useEffect(() => {     fetchEmail();   }, []);    return email; };  const App = () => {   const dashboardUserEmail = useDashboardUserEmail();   ... };`\n\nGets the intersection of the app’s authorized permissions and those of the current Dashboard user.\n\nFor instance, if the app’s current [authorized permissions](#appContext) are `event_read` and `charge_write`, but the current Dashboard user has a `view_only` role (that is, no edit permissions), calling the function returns the array `['event_read']`.\n\nTo use this function, first import it from the SDK.\n\n`import {getUserAuthorizedPermissions} from '@stripe/ui-extension-sdk/utils';`\n\n### isPermissionAuthorized ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIndicate if a permission is in the app’s authorized permissions. Throws an error if the permission isn’t on the app manifest.\n\n| Argument | Type | Example |\n| --- | --- | --- |\n| permission | string | charge\\_read |\n| Permission to check |     |     |\n\nTo use this function, first import it from the SDK.\n\n`import {isPermissionAuthorized} from '@stripe/ui-extension-sdk/utils';`\n\n#### Gating functionality by permission![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis function can gate app functionality by user authorized permissions.\n\nFor instance, on the customer details page, only update customer details if the app user has authorized the `customer_write` permission.\n\n`import {isPermissionAuthorized} from '@stripe/ui-extension-sdk/utils';  const App = () => {    const updateCustomer = useCallback(async () => {      const customerWriteEnabled = await isPermissionAuthorized('customer_write');     if (customerWriteEnabled){       await updateCurrentCustomer()     }     ...   }) }`\n\n### isSourceInAuthorizedCSP ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIndicate if a URL is in the app’s authorized connect sources or image sources.\n\n| Argument | Type | Example |\n| --- | --- | --- |\n| source | string | https://images.example.org/ |\n| URL to check |     |     |\n\nTo use this function, first import it from the SDK.\n\n`import {isSourceInAuthorizedCSP} from '@stripe/ui-extension-sdk/utils';`\n\n### showToast ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRender a toast at the bottom of your view to inform the user about the status of an action. For example, a toast can show a user whether an API call succeeded or failed.\n\n``import {showToast} from '@stripe/ui-extension-sdk/utils';  const App = () => {   const handleClick = () => {     fetch(...)       .then((response) => {         showToast(\"Invoice updated\", {type: \"success\"})         return response.json()       })       .catch(() => {         showToast(\"Invoice could not be updated\", {type: \"caution\"})       })   }    // Use the `handleClick`... }``\n\nThe `showToast()` function takes two arguments, a `message` and `options`. The function is defined as follows:\n\n`type ToastType = \"success\" | \"caution\" | \"pending\" | undefined; type ToastOptions = { type?: ToastType; action?: string; onAction: () => void; } (message: string, options?: ToastOptions) => Promise<{     update: (updateMessage: string, updateOptions?: ToastOptions) => void;     dismiss: () => void; }>;`\n\nToast messages can’t exceed 30 characters in length or be empty. If a message is too long or empty, the console logs an error.\n\nUnless they’re of type `pending`, toasts dismiss automatically.\n\n| Is Pending | Has Action | Timeout |\n| --- | --- | --- |\n| `false` | `false` | 4s  |\n| `false` | `true` | 6s  |\n| `true` | `false` | None |\n| `true` | `true` | None |\n\n``import {showToast} from '@stripe/ui-extension-sdk/utils';  const App = () => {   const handleClick = async () => {     const { dismiss, update } = await showToast(\"Refreshing data\", {       type: \"pending\",     });     try {       await refreshData();       dismiss();     } catch (error) {       update(\"Data could not be refreshed\", { type: \"caution\" });     }   }    // Use the `handleClick`... }``\n\nToasts can also prompt the user to take an action. Clicking the action button automatically dismisses the toast.\n\n``import {showToast} from '@stripe/ui-extension-sdk/utils';  const App = () => {   const handleClick = async () => {     let timeout;     const { dismiss } = await showToast('Message \"sent\"', {       action: \"Undo\",       onAction: () => {         clearTimeout(timeout);         showToast('Message \"unsent\"');       },     });     timeout = setTimeout(() => {       sendMessage();       dismiss();     }, 3000);   }    // Use the `handleClick`... }``\n\n### useRefreshDashboardData ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEnable your view to update data in the Dashboard. This function returns another callback function. Store that callback, and call it when Stripe data changes. When you call it, the Dashboard updates to reflect the new values.\n\nTo use this function, first import it from the SDK.\n\n`import {useRefreshDashboardData} from '@stripe/ui-extension-sdk/utils';`\n\nFor instance, on a customer details page, get the callback function that refreshes Dashboard data, and then call it after updating the current customer.\n\n`import {useCallback} from 'react'; import {useRefreshDashboardData} from '@stripe/ui-extension-sdk/utils';  const App = () => {   const refreshDashboardData = useRefreshDashboardData();    const updateCustomer = useCallback(async () => {     try {       await updateCurrentCustomer();       await refreshDashboardData();     } catch (error) {}   }, [refreshDashboardData]); }`",
    "title": "Extension SDK API reference | Stripe Documentation",
    "description": "An index of all fields, types, and descriptions for the Extension SDK API.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/adobe-commerce",
    "markdown": "# Stripe Connector for Adobe Commerce\n\n## Enable Stripe payments for storefronts built on Adobe Commerce.\n\n[Install the module](https://docs.stripe.com/connectors/adobe-commerce/install) and then go to the [configuration](https://docs.stripe.com/connectors/adobe-commerce/configuration) section to set your preferred checkout flow and other options.\n\n## Accept online payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe module offers two different flows for accepting payments in Adobe Commerce:\n\n*   Embed the [Payment Element](https://docs.stripe.com/payments/payment-element) on your website (recommended).\n*   Redirect to [Stripe Checkout](https://docs.stripe.com/payments/checkout), a payment form hosted on Stripe.\n\nBoth options are optimized for conversion and SAQ-A eligible, simplifying [PCI compliance](https://docs.stripe.com/security/guide#validating-pci-compliance \"PCI compliance\").\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/embedded-flow.913e34d5ec2bc301dd78f655a69a8565.png)\n\nEmbed the Payment Element\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect-flow.9014504efc06073a8b2b06f4831d8778.png)\n\nRedirect to Stripe Checkout\n\nYou can individually enable or disable payment methods from your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods). This applies to both Stripe Checkout and the Payment Element. You don’t need to upgrade your integration after you enable a payment method, even if the payment method became available after you installed the Stripe Connector for Adobe Commerce.\n\n#### Note\n\nThe full list of supported payment methods is available in the [integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) section.\n\nTo optimize conversions, Stripe Checkout and the Payment Element display payment methods dynamically to adapt to the current session. The customer device, shipping country, cart currency and even cart contents are taken into consideration to select and sort payment methods for conversion. For logged in customers, we display their saved payment methods first to enable faster checkout.\n\nYou can customize the look and feel of the Payment Element by overriding the `getElementOptions()` PHP method under `Model/Ui/ConfigProvider.php`. To do this, implement an [afterMethod plugin](https://developer.adobe.com/commerce/php/development/components/plugins/#after-methods).\n\n### Enabling fraud prevention with Stripe Radar ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Radar](https://docs.stripe.com/radar \"Radar\") provides real-time fraud protection and requires no additional development time. Fraud professionals can add [Radar for Fraud Teams](https://stripe.com/radar/fraud-teams) to customize protection and get deeper insights.\n\nIf Radar detects a high-risk payment, it might place it under review with an **Elevated** risk status. If you want to automatically decline charges, you can create a custom rule in your Radar settings. Any orders that go into manual review are automatically placed on hold in Adobe Commerce. You can configure what orders to send to manual review in your [Radar rules](https://dashboard.stripe.com/test/settings/radar/rules):\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/radar-result.5124f10f111fecfff231a73522a7a461.png)\n\nStripe Radar can detect and prevent fraud for orders placed on your site\n\nIf you think that an order isn’t fraudulent, you can click **Unhold** on the order page. That allows you to fulfill the order normally.\n\nTo test a fraudulent payment, switch the module to test mode and place an order using the card number **4000 0000 0000 9235**.\n\n### Customer Authentication ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Note\n\nThe Stripe Connector for Adobe Commerce is [SCA-ready](https://docs.stripe.com/strong-customer-authentication) and includes [3D Secure 2](https://stripe.com/guides/3d-secure-2 \"3D Secure 2 (3DS2)\") support for customer authentication.\n\nBy default, customers only see 3D Secure authentication when their bank requires it, so your checkout conversion isn’t negatively affected. In compliance with the [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") regulation, Stripe displays the 3D Secure authentication flow automatically whenever required by SCA:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/3d-secure.a876a6e255ef3b0a99d05732fd5eca51.png)\n\nStripe provides a 3D Secure test payment page in test mode\n\nYou can configure your 3DS preferences in your [Radar rules](https://dashboard.stripe.com/test/settings/radar/rules).\n\nTo test the authentication flow, switch the module to test mode and place an order using any of the [test card numbers](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-cards).\n\n## Grow your recurring revenue with subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOur module offers a subscription engine for Adobe Commerce that includes the following features:\n\n*   Configurable and customer-customizable subscription products in your catalog pages.\n*   Trial plans or the ability to collect initial fees with each subscription purchase.\n*   Customer notifications and the collection of new payment details from Stripe Billing when subscription payments fail.\n*   Reduced churn because Stripe works directly with card networks to automatically update payment details with new card numbers or expiry dates.\n\n## Translations for multi-language websites![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Caution\n\nThe module contains a translation file that you can use to configure a multi-language Adobe Commerce site:\n\n`/app/code/StripeIntegration/Payments/i18n/en_US.csv`\n\nTo create a translation file for a different language, copy this file to:\n\n`/app/code/StripeIntegration/Payments/i18n/languagecode_COUNTRYCODE.csv`\n\nMake sure to replace `languagecode_COUNTRYCODE` with the locale code for your target language. This is the same language you’ve selected under **System > Configuration > General > Locale Options > Locale**.\n\nAfter you copy the file, you can replace the second string on each row with a translation of the first string. You don’t need to do anything else for translations.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Install the Stripe Connector for Adobe Commerce](https://docs.stripe.com/connectors/adobe-commerce/install)\n*   [Configure the Stripe Connector for Adobe Commerce](https://docs.stripe.com/connectors/adobe-commerce/configuration)\n*   [Enable subscriptions for Adobe Commerce products](https://docs.stripe.com/connectors/adobe-commerce/subscriptions)\n*   [Use the Adobe Commerce admin panel](https://docs.stripe.com/connectors/adobe-commerce/admin)\n*   [Build a custom storefront](https://docs.stripe.com/connectors/adobe-commerce/custom-storefront)\n*   [Troubleshooting](https://docs.stripe.com/connectors/adobe-commerce/troubleshooting)",
    "title": "Stripe Connector for Adobe Commerce | Stripe Documentation",
    "description": "Enable Stripe payments for storefronts built on Adobe Commerce.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/prestashop",
    "markdown": "# Stripe Connector for PrestaShop | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to help your customers check out and accept payments using the PrestaShop connector.\n\nUse the Stripe Connector for [PrestaShop](https://www.prestashop.com/en) to build an integration that allows you to accept payments in many countries. The connector integrates [Stripe Elements](https://docs.stripe.com/payments/elements), an embedded UI component that lets you accept more than 25 payment methods with a single integration and that comes with the following features:\n\n*   **Built-in conversion logic**: Increase conversion by reducing user friction and errors with features such as address auto-complete, real-time card validation, descriptive error messages, and third-party auto-fill.\n*   **Global payment conversion**: Dynamically display the right language, currency, and payment methods most likely to improve conversion. Stripe supports over 25 languages, 135 currencies, and 25 payment methods.\n*   **Authorize payments and capture later**: Stripe supports separate card authorization and capture, which lets you collect card information, verify sufficient funds, and then capture the total amount after shipping.\n*   **Works with any device**: Provide customers with a responsive checkout across mobile, tablet, and desktop, and offer Apple Pay and Google Pay out of the box.\n\n![PrestaShop](https://b.stripecdn.com/docs-statics-srv/assets/prestashop-dashboard.a2abed678f37a3dbe1c827df6e5e60c2.png)\n\nUse the PrestaShop dashboard\n\n## Global payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can turn on payment methods from the Stripe Dashboard. To increase conversion, Stripe dynamically displays the most relevant payment methods based on your customer’s location and device. As Stripe adds new payment methods, you can turn them on without needing additional integrations. Use the connector to enable the following payment methods:\n\n*   **Credit and debit cards**: Visa, Mastercard, American Express, China UnionPay, Discover and Diners, Japan Credit Bureau (JCB), Cartes Bancaires\n*   **Mobile wallets**: Apple Pay, Google Pay, WeChat Pay, AliPay, GrabPay\n*   **Buy now, pay later and installments**: Klarna, Afterpay (Clearpay)\n*   **Bank debits**: ACH, SEPA debit, BECS direct debit, pre-authorized debit in Canada\n*   **Other popular payment methods**: Bancontact, EPS, Giropay, iDEAL, Przelewy24, SOFORT, FPX, Boleto, OXXO\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Install the connector](https://docs.stripe.com/connectors/prestashop/installation)\n*   [Configure the connector](https://docs.stripe.com/connectors/prestashop/configuration)\n*   [Stripe Connector for PrestaShop FAQ](https://support.stripe.com/questions/prestashop)",
    "title": "Stripe Connector for PrestaShop | Stripe Documentation",
    "description": "Learn how to help your customers check out and accept payments using the PrestaShop connector.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/sap-digital-payments",
    "markdown": "# Stripe for SAP Digital Payments Add-on v2\n\n## Learn how to add Stripe payment capabilities to SAP Digital Payment Add-on (DPA).\n\nThe Certified Stripe adapter for SAP Digital Payments Add-on integrates with Stripe, delivering a wide range of payment features for both SAP and Stripe users.\n\n*   Works on SAP S/4 HANA Private or Public cloud with no additional configuration.\n*   The app enables a variety of payment card services and integrates various external payment methods, including digital wallets such as Apple Pay and Google Pay, local payment methods such as iDeal and Bancontact, and buy now, pay later options.\n*   The app simplifies automatic bank reconciliation, which eliminates the need to do it manually.\n\n## Customer benefits ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Stripe adapter for the SAP DPA app Connector enhances the functionality of the SAP Digital Payment Add-On, and addresses a range of user needs for businesses that use SAP S/4HANA. Some of the key use-cases for SAP DPA include:\n\n*   **Online sales**: The SAP DPA eases the process for orders made through e-commerce platforms or directly through an ERP, which is common in B2B transactions. It automates the entire payment flow from authorization and capture of payments, to reconciling them.\n*   **Managing payment methods**: DPA provides an option to store default payment methods for SAP business partners, which creates seamless transactions that can be initiated and completed without requiring any customer action.\n*   **Accounts receivable**: For orders that are managed outside of SAP, DPA offers a support system that reconciles external payments with SAP Accounting.\n*   **Automated Fulfillment**: When payments are authorized outside of SAP in e-commerce transactions, a customer portal, or a terminal device, DPA acts as a link between the fulfillment from SAP and capture of the payment, which ensures that customers are charged correctly for their purchase.\n\n## Supported payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe SAP DPA is built to use Stripe [payment elements](https://docs.stripe.com/payments/payment-element), and it supports 40+ payment methods.\n\n## External payments processes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe SAP DPA supports “external payments.” External payments are payments made using external channels, or bank debits or redirects, rather than payment cards.\n\nYou can implement external payments in two ways. You can use a one-step process (known as “direct capture”) where the payment is charged directly to the payer’s account without any prior authorization. You can also use a two-step process (known as “manual capture” or “separate authorization and capture”) where the payment is first authorized against the payer’s account before being charged.\n\nThe Stripe V2 connector supports the following business processes:\n\n*   External payment direct capture\n*   External payment separate authorization and capture\n*   External payment authorization\n*   External payment settlement\n*   External payment refund\n*   Digital payment advice\n*   External payment authorization preparation\n*   External payment direct capture preparation\n\n## Connector pricing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector is free. New Stripe users must create a Stripe account separately from the extension installation. There are no setup, monthly, or other fees.\n\n#### Note\n\nCharges from SAP apply for the usage of the SAP DPA.",
    "title": "Stripe for SAP Digital Payments Add-on v2 | Stripe Documentation",
    "description": "Learn how to add Stripe payment capabilities to SAP Digital Payment Add-on (DPA).",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/salesforce",
    "markdown": "# Stripe Connectors for Salesforce | Stripe DocumentationThe Stripe Docs logo\n\n[Skip to content](#main-content)\n\n## Leverage the power of the Stripe product suite using Salesforce.\n\nSign up for developer updates:",
    "title": "Stripe Connectors for Salesforce | Stripe Documentation",
    "description": "Leverage the power of the Stripe product suite using Salesforce.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/mirakl",
    "markdown": "# Stripe Connector for Mirakl | Stripe DocumentationThe Stripe Docs logo\n\n## Leverage the power of Stripe on Mirakl-built marketplaces.\n\n[Connect](https://docs.stripe.com/connect \"Connect\") is the perfect fit for [Mirakl](https://www.mirakl.com/) marketplaces:\n\n*   Compatible with all the [payment methods](https://stripe.com/payments/features#payment-options) offered by Stripe.\n*   Works for B2C and B2B marketplaces.\n*   Supports multi-seller and hybrid orders.\n*   Automated [payouts](https://docs.stripe.com/payouts \"payout\") based on your configuration.\n\n## Integration steps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe main tasks to set up payments for your marketplace using Mirakl are:\n\n1.  First, you need a Stripe account. [Register](https://dashboard.stripe.com/register).\n2.  Implement the relevant payment methods. Use one of our [existing plugins](https://docs.stripe.com/connectors) or [build your own integration](https://docs.stripe.com/payments).\n3.  [Activate Connect](https://dashboard.stripe.com/connect/accounts/overview) in your Dashboard. Choose **Platform or marketplace** as your integration type.\n4.  Configure your [Connect branding settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding).\n5.  [Configure](https://docs.stripe.com/connectors/mirakl/configuration) and [install](https://docs.stripe.com/connectors/mirakl/install) the connector on your test environment.\n6.  Adapt your communication to sellers as described in the [onboarding workflow](https://docs.stripe.com/connectors/mirakl/onboarding-sellers#communication).\n7.  Adapt your payments requests as described in the [payment split workflow](https://docs.stripe.com/connectors/mirakl/payments#payment-validation)\n8.  Test the different workflows: onboarding, payments, refunds, and payouts.\n9.  [Activate](https://dashboard.stripe.com/account/onboarding) your Stripe account.\n10.  Complete your [Platform profile](https://dashboard.stripe.com/connect/profile).\n11.  [Configure](https://docs.stripe.com/connectors/mirakl/configuration) and [install](https://docs.stripe.com/connectors/mirakl/install) the connector on your live environment.\n12.  Go live.\n\nOptionally, you can use [Radar](https://docs.stripe.com/radar \"Radar\") for fraud protection or [Stripe Billing](https://docs.stripe.com/billing) to create and manage [invoices](https://docs.stripe.com/api/invoices \"invoices\") and recurring payments.\n\n## Workflows![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLearn more about each workflow:\n\n*   [Onboarding sellers](https://docs.stripe.com/connectors/mirakl/onboarding-sellers)\n*   [Payments](https://docs.stripe.com/connectors/mirakl/payments)\n*   [Payouts](https://docs.stripe.com/connectors/mirakl/payouts)\n\n## Alerting![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe workflows supported by the connector don’t require any manual intervention or operational supervision. In case an operation fails, the [alerting job](https://docs.stripe.com/connectors/mirakl/reference#alerting) sends you an email.",
    "title": "Stripe Connector for Mirakl | Stripe Documentation",
    "description": "Leverage the power of Stripe on Mirakl-built marketplaces.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/woocommerce",
    "markdown": "# Stripe Tax Connector for WooCommerce\n\n## Stripe Tax Connector for WooCommerceBeta\n\n## Learn about the Stripe Tax Connector for WooCommerce.\n\nUse the Stripe Tax Connector for WooCommerce to automatically calculate [sales tax, VAT, and GST](https://docs.stripe.com/tax/calculating) and apply the accurate tax rate for all of your transactions.\n\n*   **Know where to register**: Understand where you need to collect taxes so that you can activate tax collection in over 50 countries and all US states. Stripe Tax for WooCommerce supports both country and VAT OSS registrations in Europe, and country and provincial registrations in Canada.\n*   **Automate tax collection**: Calculate and collect the correct amount of tax. Stripe Tax for WooCommerce supports tax collection on hundreds of products and services, and maintains updated tax rules and rates.\n*   **Reconcile transactions**: Stripe Tax for WooCommerce summarizes reports to match formatting requirements for each filing location so you can file and remit taxes on your own, with your accountant, or with a preferred partner.\n\nStripe Tax pricing is usage-based. For Stripe Tax Connector for WooCommerce pricing, see the [API integration with Stripe Tax](https://support.stripe.com/questions/understanding-stripe-tax-pricing).",
    "title": "Stripe Tax Connector for WooCommerce | Stripe Documentation",
    "description": "Learn about the Stripe Tax Connector for WooCommerce.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/shopware6",
    "markdown": "# Stripe Connector for Shopware 6\n\n## Learn how to help your customers check out and accept payments using the Shopware 6 connector.\n\nUse the Stripe Connector for [Shopware 6](https://www.shopware.com/en/) to build an integration that allows you to accept payments in many countries. The connector integrates [Stripe Elements](https://docs.stripe.com/payments/elements), an embedded UI component that lets you accept more than 25 payment methods with a single integration and that comes with the following features:\n\n*   **Built-in conversion logic**: Increase conversion by reducing user friction and errors with features such as address auto-complete, real-time card validation, descriptive error messages, and third-party auto-fill.\n*   **Global payment conversion**: Dynamically display the right language, currency, and payment methods most likely to improve conversion. Stripe supports over 25 languages, 135 currencies, and 25 payment methods.\n*   **Authorize payments and capture later**: Stripe supports separate card authorization and capture, which lets you collect card information, verify sufficient funds, and then capture the total amount after shipping.\n*   **Works with any device**: Provide customers with a responsive checkout across mobile, tablet, and desktop, and offer Apple Pay and Google Pay out of the box.\n\n## Global payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can turn on payment methods from the Stripe Dashboard. To increase conversion, Stripe dynamically displays the most relevant payment methods based on your customer’s location and device. As Stripe adds new payment methods, you can turn them on without needing additional integrations. Use the connector to enable the following payment methods:\n\n*   **Credit and debit cards**: Visa, Mastercard, American Express, China UnionPay, Discover and Diners, Japan Credit Bureau (JCB), Cartes Bancaires\n*   **Mobile wallets**: Apple Pay, Google Pay, WeChat Pay, AliPay, GrabPay\n*   **Buy now, pay later and installments**: Klarna, Afterpay (Clearpay)\n*   **Bank debits**: ACH, SEPA debit, BECS direct debit, pre-authorized debit in Canada\n*   **Other popular payment methods**: Bancontact, EPS, Giropay, iDEAL, Przelewy24, SOFORT, FPX, Boleto, OXXO\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Install the connector](https://docs.stripe.com/connectors/shopware6/installation)\n*   [Configure the connector](https://docs.stripe.com/connectors/shopware6/configuration)\n*   [Stripe Connector for Shopware 6 FAQ](https://support.stripe.com/questions/shopware)",
    "title": "Stripe Connector for Shopware 6 | Stripe Documentation",
    "description": "Learn how to help your customers check out and accept payments using the Shopware 6 connector.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/salesforce-commerce-cloud",
    "markdown": "# Stripe Connector for Salesforce B2C Commerce Cloud\n\n## Learn about the Salesforce Commerce Cloud cartridge for collecting payments with Stripe.\n\nThe Stripe LINK cartridge facilitates integration between a Commerce Cloud storefront and Stripe payment services; including Stripe Elements, sources, webhooks, and local payment methods.\n\nThe integration involves the deployment of several cartridges and modification of the storefront code.\n\nIf you’re integrating using SiteGenesis, you can find relevant documentation on [salesforce.com](https://www.salesforce.com/products/commerce-cloud/partner-marketplace/partners/stripe/).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Component overview](https://docs.stripe.com/connectors/salesforce-commerce-cloud/component-overview)\n*   [Implementation guide](https://docs.stripe.com/connectors/salesforce-commerce-cloud/implementation-guide)\n*   [Operations and maintenance](https://docs.stripe.com/connectors/salesforce-commerce-cloud/operations-and-maintenance)\n*   [Cartridge user guide](https://docs.stripe.com/connectors/salesforce-commerce-cloud/user-guide)",
    "title": "Stripe Connector for Salesforce B2C Commerce Cloud | Stripe Documentation",
    "description": "Learn about the Salesforce Commerce Cloud cartridge for collecting payments with Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/building-plugins",
    "markdown": "# Legacy plugins | Stripe DocumentationThe Stripe Docs logo\n\n## Legacy pluginsDeprecated\n\n## Develop and integrate your own connector following these best practices.\n\n#### Deprecated\n\nYou can no longer request API keys from users. Stripe Apps is the new method for authenticating users and includes support for OAuth 2.0.\n\nView the [migration docs](https://docs.stripe.com/stripe-apps/onboarding-plugin)\n\nFollow these best practices to make sure your users can safely process on Stripe’s platform without disruption as our API evolves. If you have questions along the way, reach out to [plugins@stripe.com](mailto:plugins@stripe.com).\n\n*   Register your plugin by creating a Stripe account or using an existing one\n*   [Identify your plugin](#identify-plugin) using `setAppInfo` and `registerAppInfo` so we can alert you to any potential issues we notice\n*   Set [Stripe’s API version](#set-api-version) in your plugin to avoid potentially breaking changes for your users\n*   Use [client-side tokenization](#tokenization) to securely collect payment details in the browser\n\nYou can also take a few steps to improve the quality of your connector:\n\n*   Add the [Express Checkout Element](#express-checkout-element) to offer multiple one-click payment buttons to your customers, including [Apple Pay](https://docs.stripe.com/apple-pay), [Google Pay](https://docs.stripe.com/google-pay), [Link](https://docs.stripe.com/payments/link), and [PayPal](https://docs.stripe.com/payments/paypal)\n*   Enable [multiple payment methods](#apms) beyond credit cards to support international users\n*   Verify your users [have HTTPS enabled](#https) to improve their security\n*   Subscribe to our [mailing list](#subscribe) to keep up to speed with changes to Stripe’s API\n\n## Identifying your plugin ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nProvide identifying information so that we can contact you if there’s an issue with your connector or critical update to the API.\n\n### Backend API calls ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you use the APIs to create server-side requests, use `setAppInfo` with a hash containing the following options:\n\n*   `name` (required): your plugin’s name\n*   `partner_id` (required for [Stripe Verified Partners](https://stripe.com/partner-program), optional otherwise): your Partner ID from the [Partners](https://dashboard.stripe.com/partners/settings) section of the Dashboard\n*   `version` (optional): your plugin’s version\n*   `url` (optional): the URL for your plugin’s website with your contact details\n\n`Stripe.set_app_info(   'MyStripePlugin',   partner_id:` \n\n`'{{PARTNER_ID}}'`\n\n`, # Used by Stripe to identify your connector   version: '1.2.34',   url: '[https://example.com](https://example.com/)' )`\n\n#### Caution\n\nIf your connector is designed for a particular platform, include that platform in the `name` field (for example, **WordPress MyStripePlugin** or **WooCommerce MyStripePlugin**).\n\nIf you’re building a connector and not using one of our official libraries, set the value of the User-Agent header on requests made to the Stripe API as `name/version (url)`.\n\nThe following is an example:\n\n`User-Agent: WordPress MyStripePlugin/1.2.34 (https://example.com)`\n\n### Client side / Stripe.js ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor frontend libraries that use Stripe.js, use `registerAppInfo` with the same options as `setAppInfo` above. For example, using JavaScript:\n\n`stripe.registerAppInfo({   name: \"MyOSSLibrary\",   partner_id:` \n\n`'{{PARTNER_ID}}'`\n\n`,   // Used by Stripe to identify your connector   version: \"1.2.34\",   url: \"[https://example.com](https://example.com/)\", });`\n\n## Setting the API version ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour plugin should use the `setApiVersion` function, which will set the `Stripe-Version` HTTP header on all requests. Your users will use their own API keys to access Stripe, but this header will be included with every request. We recommend that you use the most recently published version of the API. The current API version and details on our [versioning policy](https://docs.stripe.com/api#versioning) can be found in the API reference.\n\n`Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`Stripe.api_version = '2022-08-01'`\n\nNew Stripe users automatically default to the latest version of the API. This header ensures that your connector is pinned to a specific API version, which keeps the occasional [backwards-incompatible change](https://docs.stripe.com/upgrades#what-changes-does-stripe-consider-to-be-backwards-compatible) from breaking your connector’s functionality.\n\nUsers can upgrade their own API version through the [Stripe Dashboard](https://docs.stripe.com/upgrades#how-can-i-upgrade-my-api). If your connector relies on [webhook](https://docs.stripe.com/webhooks \"webhook\") events, their data format and structure depend on the user’s account API version. You should instruct your users to set the version in their Dashboard to match your plugin.\n\n#### Caution\n\n**API versions can’t be downgraded.** You should regularly release new versions of your connector to correctly handle any changes to JSON responses.\n\n## Subscribing to our mailing list for updates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe regularly release new versions of the Stripe API that bring new features and bug fixes. You can subscribe to the [api-announce](https://groups.google.com/a/lists.stripe.com/forum/#!forum/api-announce) mailing list to be notified of updates that may affect users of your connector.\n\n## Securely collecting payment details ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe users are subject to [PCI compliance](https://stripe.com/guides/pci-compliance), which specifies how credit card data should be securely stored, processed, and transmitted. Their businesses could face stiff penalties for noncompliance or potential breaches, so it’s important to help them safely process on Stripe.\n\nSince your connector will make API calls on behalf of a Stripe user, you must transmit credit card data securely using _client-side tokenization_. [Customers](https://docs.stripe.com/api/customers \"Customers\") submit their personal information through their web browser or mobile app directly to Stripe, and in exchange a simple token will be sent to the Stripe user. This allows your users to securely collect card details without sensitive data ever touching their server.\n\nIf your connector includes a client-side payment form in the browser, we recommend that you use either [Stripe.js and Elements](https://docs.stripe.com/payments/elements) or [Checkout](https://docs.stripe.com/payments/checkout):\n\n*   Elements provides prebuilt UI components and complete control over the look and feel of payment forms\n*   Checkout provides a complete checkout experience and can be quickly added to a Stripe user’s website\n\nBoth of these options provide client-side tokenization.\n\nIf your plugin only operates in a backend environment, please include a note in your connector’s documentation asking users to tokenize payment details using Elements or Checkout. Tokenization helps Stripe users process as safely as possible on our platform.\n\n## Add the Express Checkout Element ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Express Checkout Element](https://docs.stripe.com/elements/express-checkout-element) gives you a single integration for accepting payments through one-click payment buttons, including [Apple Pay](https://docs.stripe.com/apple-pay), [Google Pay](https://docs.stripe.com/google-pay), [Link](https://docs.stripe.com/payments/link), or [PayPal](https://docs.stripe.com/payments/paypal).\n\nThe Express Checkout Element allows you to display multiple buttons at the same time. Customers see different payment buttons depending on what their device and browser combination supports.\n\n## Enabling multiple payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe supports multiple payment methods, aside from credit cards. We’ve published a [guide to payment methods](https://stripe.com/payments/payment-methods-guide) that introduces terminology, key considerations, and how we support each method on our platform.\n\nThe [Payment Methods API](https://docs.stripe.com/payments/payment-methods) enables your users to collect payments using additional payment methods (for example, Alipay, iDEAL, Sofort). You can add these [payment methods](https://docs.stripe.com/payments/payment-methods#supported-payment-methods) using one integration path.\n\n## Verifying that HTTPS is enabled ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your plugin presents a payment form in a web browser, it should check if the form is being served over HTTPS. We require our users to enable HTTPS: you should present a clear error to your user if they’re not properly secured.\n\nHere are a few examples to verify whether your users have HTTPS enabled:\n\n``# This example uses Sinatra, but the `request` object is provided by Rack require 'sinatra'  get '/' do   if !request.https?     # Present an error to the user   end   # ... end``\n\nIf your connector has a front-end component, check whether HTTPS is being used from the browser. For example, using JavaScript:\n\n`// This example checks for HTTPS from the browser if (window.location.protocol !== \"https:\") {   // Present an error to the user }`",
    "title": "Legacy plugins | Stripe Documentation",
    "description": "Develop and integrate your own connector following these best practices.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/salesforce-billing",
    "markdown": "# Stripe Connector for Salesforce Billing\n\n## Learn about the Stripe Connector for Salesforce Billing that you can install on top of Salesforce CPQ and Salesforce Billing.\n\nStripe Connector for Salesforce Billing is a managed package that you install on top of Salesforce CPQ and Salesforce Billing. It allows users to process payments through the Salesforce Payment Gateway using Stripe payment service to complete transactions.\n\nStripe exposes four transaction types directly from the Salesforce Billing UI:\n\n*   Tokenization—Create a new payment method on an account and set it as the default.\n*   Charge Transaction—Charge a specific amount to an account.\n*   Refund Transaction—Refund a specific amount to an account.\n*   Bidirectional Data Sync-See related transactions in both Salesforce and Stripe dashboards.\n\nIn addition to the UI-based transaction types, Stripe also offers API-based transaction types, which developers can use to create methods that take advantage of the features on the Stripe payment service:\n\n*   Void Token—Remove a payment method from an account.\n*   Authorize Transaction—Allocate a specific amount to an account pending a charge.\n*   Capture Transaction—Complete a charge on an authorized transaction.\n*   Void Transaction—Void a charge on an authorized transaction.\n*   Get Payment Status—Return the status of a specific charge.\n*   Get Refund Status—Return the status of a specific refund.\n\nThe UI-based transaction types (tokenization, charge, refund) are also supported through the API.\n\nThe Following Payment Methods are supported:\n\n*   **Cards**—Support for global and local card networks\n*   **ACH**—ACH Direct Debit payments from customers with a US bank account",
    "title": "Stripe Connector for Salesforce Billing | Stripe Documentation",
    "description": "Learn about the Stripe Connector for Salesforce Billing that you can install on top of Salesforce CPQ and Salesforce Billing.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/stripe-connector-for-salesforce/overview",
    "markdown": "# Stripe Connector for Salesforce Platform\n\n## Access the full Stripe platform from within Salesforce with low and no-code tools.\n\nBuild integrations between [Salesforce](https://www.salesforce.com/) and [Stripe](https://stripe.com/) with the Stripe for Salesforce Platform. This connector enables you to:\n\n*   Seamlessly connect your Stripe account to your Salesforce org.\n*   Automatically map Stripe events to Salesforce events.\n*   Expose Stripe methods and objects natively in APEX and JavaScript code in Salesforce.\n*   Support low-code and no-code integrations using [Salesforce Flow](https://www.salesforce.com/products/platform/solutions/automate-business-processes/).\n\n## Event mapping ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMap events from Stripe to Salesforce.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/salesforce_event_config.9bddcc789f3279db8ffd840826d17fa4.png)\n\nConfigure [webhook](https://docs.stripe.com/webhooks \"webhook\") events with a point and click configuration\n\n## Stripe objects and methods natively available in Salesforce ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAccess Stripe objects and methods directly from Salesforce Apex and JavaScript. Salesforce Developers can gather data returned from any Stripe API call in a structured, repeatable way.\n\n`public with sharing class CreateCustomerApp {   public static void createCustomer() {     List<Customer> customers = Stripe_CreateCustomer_v2020_08_27   } }`\n\n## Low and no-code integrations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse Salesforce Flow to create no-code integrations and business workflows.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/salesforce_flow_view.3e2bf3ddbbdb290d96e3f62082cb3079.png)\n\nBuild payments and business flows with Stripe and Salesforce",
    "title": "Stripe Connector for Salesforce Platform | Stripe Documentation",
    "description": "Access the full Stripe platform from within Salesforce with low and no-code tools.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/salesforce-order-management",
    "markdown": "# Stripe Connector for Salesforce Order Management\n\n## Learn about the Stripe Connector for Salesforce Order Management.\n\nThe Stripe Connector for Salesforce Order Management is a managed package that you install on top of Order Management to enable payment capture and refund for the order servicing supported use cases. It comes with both an asynchronous and synchronous adapter to handle payments and refunds.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  A storefront hosted on Salesforce B2C Commerce Cloud and Salesforce Order Management on the Salesforce Core Platform.\n2.  Salesforce Commerce Cloud cartridge for collecting payments with Stripe _or_ Salesforce payments on Commerce Cloud.\n3.  An integration enabled between SalesforceB2C Commerce Cloud and Salesforce Order Management.\n4.  Access to CommercePayments API enabled by the PaymentPlatform org permission.\n5.  Salesforce CommercePayments is only available for orgs with API version 49.0 and later. Commerce Payments is only available in the Lightning Experience.\n\n## Core concepts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA PaymentIntent is a Stripe term that refers to a transaction created at Stripe to track a payment from creation through the checkout process, which might trigger additional authentication steps. You do this by implementing the [Payment Intents API](https://docs.stripe.com/payments/payment-intents). Locate the payment intent in Salesforce Order Management by locating the Gateway Reference Number (`GatewayRefNumber`) field against the payment authorization record for an order summary.\n\nA payment authorization is relevant to both Stripe and the Salesforce OMS. An authorized amount is a sum that a business transmits to a credit or debit card processor to make sure a customer has sufficient funds to complete a purchase—the approved amount of money to be charged.\n\nThere are two [capture modes](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) in the Stripe LINK cartridge for Salesforce B2C Commerce Cloud—authorize and capture. If the LINK cartridge is set up to authorize a payment during checkout, then Salesforce Order Management creates a payment authorization record. You can view the payment authorization against an order summary using this route:\n\n**Order Summary Record > Order Payment Summary Record > Payment Authorizations in Related Tab**\n\nIf you don’t see `Refunds` in the **Related** tab, contact your Salesforce administrator and include the payment authorization related list in the page layout (as shown):\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-payment-auth-sc1.bb4f7cb8c5bce6a76d45fa975c210894.png)\n\nThe PaymentIntent ID (pi\\_XXXXXX) at Stripe is stored in the Gateway Reference Number (`GatewayRefNumber`) field of the payment authorization record. The Processing Mode (`ProcessingMode`) is set as `External`, which implies that the payment authorization was processed outside the Salesforce payment platform.\n\n### Payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf the capture mode in the Stripe LINK cartridge is set to `Capture`, then the payment is captured from the customer. In this case, a payment record is created in Salesforce Order Management. You can view the payment against an order summary using this route:\n\n**Order Summary Record > Order Payment Summary Record > Payments in Related Tab**\n\nIf you don’t see `Refunds` in the **Related** tab, contact your Salesforce administrator and include the payments related list in the page layout (as shown):\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-payment-sc1.8c48be7fc8849db13914a5f363fba750.png)\n\n### Balance Transaction ID![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Balance Transaction ID (`txn_XXXXXXXXX`) against the PaymentIntent (`pi_XXXXXX`) at Stripe is stored in the Gateway Reference Number (`GatewayRefNumber`) field. The Processing Mode (`ProcessingMode`) field value is set as `External`, which means the payment was processed outside the Salesforce payment platform. In the event the payment was authorized in Salesforce B2C Commerce Cloud Storefront, and the amount was captured in Salesforce OMS later, the payment record is represented as shown:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-baltxn-sc1.7eae0d579cb7f583f4270517d7bd5ab3.png)\n\nThe Salesforce Payment Gateway ID (`SFXXXXX`) against the Payment Intent (`pi_XXXXXX`) at Stripe is stored in the Gateway Reference Number (`GatewayRefNumber`) field. The Processing Mode (`ProcessingMode`) field value is set as `Salesforce`, which implies that the payment was processed by the Salesforce payment platform.\n\n### Refund![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf a refund is initiated from Salesforce OMS, you can trace it to a Refund record by following this route:\n\n**Order Summary Record > Order Payment Summary Record > Refunds (in the Related tab)**\n\nIf you don’t see `Refunds` in the **Related** tab, contact your Salesforce administrator and include the Refunds related list in the page layout (as shown):\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-refund-sc1.6ac94b1ed3162b35735ca3bbf0e6bd70.png)\n\nThe Salesforce Payment Gateway ID (`SFXXXXX`) is stored in the Gateway Reference Number (`GatewayRefNumber`) field. The Processing Mode (ProcessingMode) is set as `Salesforce`, which implies that the refund was processed by the Salesforce payment platform.\n\n### Payment gateway logs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can view logs for the transactions made with the Salesforce Platform by navigating to **Order Summary Record > Order Payment Summary Record > Gateway Logs** in the **Related** tab. If you don’t see the gateway logs in the **Related** tab, contact your Salesforce administrator and include the gateway logs in the related page layout, or execute this SOQL in Developer Console or SOQL Builder in VS Code:\n\n`SELECT Id, OrderPaymentSummaryId, ReferencedEntityId, Request, Response, SfRefNumber, SfResultCode, GatewayRefNumber, GatewayAuthCode, GatewayDate, GatewayMessage, GatewayResultCode, GatewayResultCodeDescription, InteractionStatus FROM PaymentGatewayLog`",
    "title": "Stripe Connector for Salesforce Order Management | Stripe Documentation",
    "description": "Learn about the Stripe Connector for Salesforce Order Management.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/boleto/accept-a-payment",
    "markdown": "# Boleto payments | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nBoleto is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [take additional steps](https://docs.stripe.com/payments/payment-methods#customer-actions) to complete their payment. [Customers](https://docs.stripe.com/api/customers \"Customers\") pay by using a Boleto voucher with a generated number either in ATMs, banks, bank portals or authorized agencies.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Boleto payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to learn how to enable Boleto—it shows the differences between accepting a card payment and using Boleto.\n\n### Enable Boleto as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `boleto` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the `brl` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'boleto'],   # The parameter is optional. The default value of expires_after_days is 3.   payment_method_options: {     boleto: {       expires_after_days: 7     }   },   line_items: [{     price_data: {       # To accept `boleto`, all line items must have currency: brl       currency: 'brl',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Additional payment method options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can specify an optional `expires_after_days` parameter in the [payment method options](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_method_options-boleto-expires_after_days) for your `Session` that sets the number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set `expires_after_days` to 2, the Boleto voucher expires on Wednesday at 23:59 America/Sao\\_Paulo (UTC-3) time. If you set it to 0, the Boleto voucher expires at the end of the day. The `expires_after_days` parameter can be set from 0 to 60 days. The default is 3 days. You can customize the default expiration days on your account in the [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods)\n\n### Redirect to Stripe hosted voucher page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Note\n\nUnlike card payments, the customer won’t be redirected to the [success\\_url](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-success_url) with Boleto payment.\n\nAfter submitting the Checkout form successfully, the customer is redirected to the `hosted_voucher_url`. The customer can copy the Boleto number or download the voucher PDF from the hosted voucher page.\n\nStripe sends a [payment\\_intent.requires\\_action](https://docs.stripe.com/api/events/types#event_types-payment_intent.requires_action) event when a Boleto voucher is created successfully. If you need to email your customers the voucher link, you can locate the `hosted_voucher_url` in [payment\\_intent.next\\_action.boleto\\_display\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-boleto_display_details-hosted_voucher_url). Learn more about how to [monitor a PaymentIntent with webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks).\n\nStripe allows customization of customer-facing UIs on the [Branding Settings](https://dashboard.stripe.com/account/branding) page. The following brand settings can be applied to the voucher:\n\n*   **Icon**—your brand image and public business name\n*   **Accent color**—used as the color of the Copy Number button\n*   **Brand color**—used as the background color\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBecause Boleto is a delayed notification payment method, you need to use a method such as [webhooks](https://docs.stripe.com/webhooks \"webhook\") to monitor the payment status and handle order fulfillment. Learn more about [setting up webhooks and fulfilling orders](https://docs.stripe.com/checkout/fulfillment).\n\nThe following events are sent when the payment status changes:\n\n| Event Name | Description | Next steps |\n| --- | --- | --- |\n| [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) | The customer has successfully submitted the Checkout form. Stripe has generated the Boleto voucher.<br><br>You can choose to email the `hosted_voucher_url` to your customer in case they lose the Boleto voucher. | Wait for the customer to pay the Boleto. |\n| [checkout.session.async\\_payment\\_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded) | The customer has successfully paid the Boleto. The `PaymentIntent` transitions to `succeeded`. | Fulfill the goods or services that the customer purchased. |\n| [checkout.session.async\\_payment\\_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed) | The Boleto voucher has expired, or the payment has failed for some other reason. The `PaymentIntent` returns to a status of `requires_payment_method`. | Contact the customer via email and request that they place a new order. |\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Boleto as the payment method and click the **Pay** button.\n\n| Email | Description |\n| --- | --- |\n| `{any_prefix}@{any_domain}` | Simulates a Boleto voucher which a customer pays after 3 minutes and the `payment_intent.succeeded` webhook arrives after about 3 minutes. In production, this webhook arrives 1 business day after a payment.<br><br>Example: fulaninho@example.com |\n| `{any_prefix}succeed_immediately@{any_domain}` | Simulates a Boleto voucher which a customer pays immediately and the `payment_intent.succeeded` webhook arrives within several seconds. In production, this webhook arrives 1 business day after a payment.<br><br>Example: succeed\\_immediately@example.com |\n| `{any_prefix}expire_immediately@{any_domain}` | Simulates a Boleto voucher which expires before a customer pays and the `payment_intent.payment_failed` webhook arrives within several seconds.<br><br>The `expires_at` field in [next\\_action.boleto\\_display\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-boleto_display_details-expires_at) is set to the current time regardless of what the `expires_after_days` parameter in [payment method options](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-boleto-expires_after_days) is set to.<br><br>Example: expire\\_immediately@example.com |\n| `{any_prefix}expire_with_delay@{any_domain}` | Simulates a Boleto voucher which expires before a customer pays and the `payment_intent.payment_failed` webhook arrives after about 3 minutes.<br><br>The `expires_at` field in [next\\_action.boleto\\_display\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-boleto_display_details-expires_at) is set to 3 minutes in the future regardless of what the `expires_after_days` parameter in [payment method options](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-boleto-expires_after_days) is set to.<br><br>Example: expire\\_with\\_delay@example.com |\n| `{any_prefix}fill_never@{any_domain}` | Simulates a Boleto voucher which never succeeds; it expires according to the `expires_at` field in [next\\_action.boleto\\_display\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-boleto_display_details-expires_at) per the provided parameters in the [payment method options](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-boleto-expires_after_days) and the `payment_intent.payment_failed` webhook arrives after that.<br><br>Example: fill\\_never@example.com |\n\n| Tax ID | Description |\n| --- | --- |\n| CPF `000.000.000-00`<br><br>CNPJ `00.000.000/0000-00` | In test mode, set `tax_id` to these values, so they bypass the tax ID validation. |\n\n[](#refunds)\n\nBoleto payments can’t be refunded. Some merchants have created a separate process to credit their customers who reach out directly.\n\n[](#disputes)\n\nBoleto payments can’t be disputed by the customer.",
    "title": "Boleto payments | Stripe Documentation",
    "description": "Learn how to accept Boleto, a common payment method in Brazil.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/ach-debit",
    "markdown": "# Invoicing and ACH Direct Debit\n\n## Configure, create, and process invoices using ACH Direct Debit.\n\nTo reduce costs, many merchants make card payment methods unavailable above a certain [invoice](https://docs.stripe.com/api/invoices \"invoices\") total amount, and prefer payment from bank methods like ACH Direct Debit.\n\nThis guide provides step-by-step instructions on how to configure, create, and process invoices to use the [ACH Direct Debit](https://docs.stripe.com/payments/ach-debit) payment method. Stripe users in the United States can accept **ACH Direct Debit** from end customers with US bank accounts using the Automated Clearing House (ACH) payments system operated by [Nacha](https://www.nacha.org/content/ach-network). A [Connect](https://docs.stripe.com/connect \"Connect\") platform that integrates ACH Direct Debit has more [advanced options available](#fee-splitting). To begin, determine whether:\n\n*   Your customers [enter bank account information](#default-payment-method) to pay their invoices.\n*   You [collect and verify bank account information upfront](#precollected-bank-information) and automatically process invoices.\n\n#### Note\n\nIf you give a customer an invoice link to pay a one-off invoice, Stripe automatically saves their bank information allowing reuse on future invoices. You can also add the bank customer’s information directly through the Customer details page.\n\n## Set up ACH Direct Debit ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour customers can pay an invoice by using the Hosted Invoice Page to enter their bank account information. You must either set ACH Direct Debit as a default payment method, or add it when you create an invoice.\n\nTo set ACH Direct Debit as a default payment method type, use the [Invoice template](https://dashboard.stripe.com/settings/billing/invoice). Click **Manage** under **Payment methods**, then use the toggle to enable **ACH Direct Debit**. After your customer creates an invoice, they receive a prompt to enter their bank information through the Hosted Invoice Page.\n\n#### Note\n\nAll default payment methods are available on the Hosted Invoice Page for invoices that don’t have a specified payment method.\n\nWhen you create a one-off invoice through the [Dashboard](https://dashboard.stripe.com/invoices/create), you can specify **ACH Direct Debit** under **Payment options**. To learn more about creating and sending invoices through the Dashboard, see [Create an invoice](https://docs.stripe.com/invoicing/dashboard#create-invoice).\n\n## Pre-collected bank information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can collect bank account information for future payments with **ACH Direct Debit**. After you add a customer’s ACH details, they must verify their payment information with microdeposits, which can take up to two days.\n\nTo pre-collect a customer’s bank information:\n\n1.  Navigate to **Payment methods** in the **Customer details** page.\n    \n2.  Click **Add** followed by **Add ACH Direct Debit**.\n    \n3.  Complete the form and set **ACH Direct Debit** as your customer’s default payment method (if they have more than one payment method on file).\n    \n\nWhenever you create a new invoice for your customer, select **Automatically charge a payment method on file** to automatically charge them using **ACH Direct Debit**. For a finalized invoice, you can also click **Charge customer** on the **Invoice details** page, and select **ACH Direct Debit** to initiate the transaction.\n\n![Adding an ACH Direct Debit](https://b.stripecdn.com/docs-statics-srv/assets/us-bank-add.012d7fd11568a625a34eedf87d71de01.png)\n\nAdd ACH Direct Debit as a customer payment method\n\n## Payment completions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor any invoice with **ACH Direct Debit** enabled as a payment method, your customer can enter their bank account information through the Hosted Invoice Page to start a debit payment. Your customer must complete the following steps to complete payment:\n\n1.  Select **US bank account**, search for their bank, and select it.\n    \n2.  Click **Pay** and agree to the terms of service.\n    \n3.  Initiate a link with their bank, and add their bank login credentials.\n    \n4.  Select their desired bank account and click **Link account**.\n    \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/us-bank-hip.321e5925782ff6ac05bb3779ad75b3d3.png)\n\nSearch for and select a bank\n\n## Enhanced fee splitting Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayment methods—such as credit and debit cards—have a fixed percentage charged over the whole amount. But low cost payment methods like **ACH Direct Debit** are usually capped. For platforms looking to dynamically reflect this fee arrangement to their merchants, Stripe recommends that you separate your charges and transfers (as opposed to using the basic `application_fee_amount` parameter). With separate charges and transfers, your platform can transfer the merchant’s share of funds minus the appropriate fee amount based on the payment method type.\n\n## Test the integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can test customer bank account entry through [instant verification](#instant-verification) and [microdeposits](#microdeposits).\n\n### Instant verification ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo instantly verify a bank account in test mode:\n\n1.  Select **US bank account**, then **Test Institution**.\n    \n2.  Agree to the terms of service, select **Success**, then link the account.\n    \n\nAfter you successfully link the test account and click **Done**, the invoice states that the payment is processing.\n\n#### Note\n\nIn test mode, the invoice is paid immediately. Refresh the page to view the paid invoice.\n\n### Microdeposits ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can manually verify bank accounts through microdeposits. In the case of a real customer interaction, the microdeposits aren’t visible for several days.\n\n1.  Create an invoice in test mode and select **ACH Direct Debit** as a payment method.\n    \n2.  Go to the Hosted Invoice Page, choose **US bank account**, and pay.\n    \n3.  Click **Manually verify instead** to verify the bank account with microdeposits. Enter the test routing number and bank account using the [ACH test account numbers](https://docs.stripe.com/payments/ach-debit/accept-a-payment#test-account-numbers) (for example, 1100000000 and 000123456789).\n    \n4.  After the dialog closes, click **Verify bank account** to go to the **Microdeposits** page.\n    \n5.  Enter the test amounts (for example, 0.32 and 0.45) and click **Verify account**. Returning to the Hosted Invoice Page shows the payment as processing.\n    \n\nIn live mode, it takes several days for the transaction to complete. But in test mode, the transaction clears immediately and the invoice is paid.",
    "title": "Invoicing and ACH Direct Debit | Stripe Documentation",
    "description": "Configure, create, and process invoices using ACH Direct Debit.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/compliant-promotional-emails",
    "markdown": "# Compliant promotional emails | Stripe DocumentationThe Stripe Docs logo\n\n## Follow these best practices to ensure compliant promotional emails.\n\n[Promotional emails](https://docs.stripe.com/payments/checkout/promotional-emails-consent) promote a product or service (for example, recovery emails, newsletters, or promotions) and represent an opportunity to strengthen and expand your relationship with customers. Read through these best practices for enabling compliance, but be aware of laws that restrict your ability to use your customers’ personal data for promotional content—check with your legal counsel if you’re unsure.\n\nPrivacy and marketing laws require companies to notify or gain consent from customers before sending promotional emails and promptly honor unsubscribe requests.\n\n#### Caution\n\nReview the callouts which may require specific updates to your documentation or practices.\n\n## Customer consent ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCheckout helps you optimize collection of customer opt-in and opt-out permissions.\n\nThe laws around consent to use personal data such as emails to send promotional messages differ by country. For US merchants and customers, laws generally allow sending promotional messages as long as you offer an opt-out opportunity and honor any unsubscribe requests that you have received. Many rest of world jurisdictions require an affirmative consent flow.\n\nWhen you enable promotional emails, Checkout presents a checkbox beneath the email field that reads “Keep me updated with news and personalized offers.” It can be unclear which country’s laws apply to a particular transaction. Because of this, Stripe uses logic that considers both the jurisdiction of your Stripe account and the IP address of the customer to determine whether the default is for the checkbox to be checked or unchecked. When our logic determines that either your Stripe account or the customer is located in a jurisdiction that requires (or is otherwise advisable to obtain) affirmative consent, by default, we present such customers with the unchecked checkbox.\n\nThis feature can also help you send [abandoned cart or “recovery\"](https://docs.stripe.com/payments/checkout/abandoned-carts) emails, which are encouraging emails sent to customers who almost made a purchase. In the case of recovery emails, you only receive the email addresses of prospective customers who’ve entered their email addresses into your checkout form and have given permission to receive promotional emails (that is, the email address is validated and the checkbox is checked when the checkout session expires). We recommend that you use these emails only for sending recovery emails and limit targeting broader marketing campaigns to customers who have successfully completed a purchase and provided consent.\n\nIn either case, if the customer notifies you that they don’t want to receive promotional content or you have another reason to believe they don’t want their personal data used to send promotional emails, don’t send the emails, despite the permission provided from Checkout.\n\n## Customer unsubscribe requests ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Caution\n\nEnsure consumers can unsubscribe and requests are promptly honored.\n\nAll promotional emails must include information about the sender and a way for customers to unsubscribe, and you must promptly honor all unsubscribe requests. [Customers](https://docs.stripe.com/api/customers \"Customers\") who have unsubscribed shouldn’t receive promotional emails unless they subsequently express consent. To make sure you meet requirements in your jurisdiction, provide customers the opportunity to withdraw their consent or unsubscribe to future marketing content directly from your website or an easily-accessible customer service process. The process for withdrawing consent should be as easy as providing consent.\n\nIf a customer reaches out to Stripe with a request to delete their personal information or to stop using it for promotional purposes, Stripe won’t act on that request. Stripe acts as a service provider/processor to you, and will treat these unsubscribe requests like other “data subject requests” that Stripe receives regarding your customers. Stripe will redirect the customer back to you to respond to, and honor, their requests.\n\n## Privacy policy update ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Caution\n\nUpdate your privacy to disclose data collection and usage for promotional emails.\n\nAs outlined in our [Terms of Service](https://stripe.com/legal), you must disclose the collection and use of your customers’ data for sending promotional emails in your privacy policy or other privacy notices. Because of the limited use rights obtained in this checkbox, you may not use the information provided through this feature for any purposes beyond sending news and promotional emails unless you explicitly obtain those rights outside of this feature in Checkout.\n\nCheckout’s privacy policy, which is linked on every Checkout session, discloses that Stripe collects information solely as a service provider to the merchant and isn’t an independent controller of customer data. We recommend that you also review your privacy policy before using this feature. Your privacy policy should disclose to customers all the ways you collect, retain, use, and share data—this includes the data you collect through Checkout from prospective customers who visit your webpage but don’t complete a transaction. It would be advisable to also disclose that you may send them promotional emails based on their opt-in or opt-out selection during checkout. See the [Stripe Privacy Center](https://stripe.com/privacy-center/legal) for more information.",
    "title": "Compliant promotional emails | Stripe Documentation",
    "description": "Follow these best practices to ensure compliant promotional emails.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/testing/test-clocks",
    "markdown": "# Test your integration with test clocks\n\n## Learn how to move Billing objects through time in test mode.\n\n## Overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTest clocks help you test your Billing integration and make sure it behaves as designed. When you use test clocks you simulate the forward movement of time in [test mode](https://docs.stripe.com/test-mode \"test mode\"), which causes Billing resources, like Subscriptions, to change state and trigger [webhook](https://docs.stripe.com/webhooks \"webhook\") events. This means that, for example, you don’t have to wait a year to see how your integration handles a payment failure for a quarterly or annual renewal.\n\nHere are some other things you can do with test clocks:\n\n*   Test complex simulations such as upgrading or changing plans mid-cycle.\n*   Ensure your integration processes Billing lifecycle webhooks correctly.\n*   Validate that your app handles trials correctly.\n*   Build and test multi-phase subscription schedules.\n\n## How to use test clocks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
    "title": "Test your integration with test clocks | Stripe Documentation",
    "description": "Learn how to move Billing objects through time in test mode.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/promotional-emails-consent",
    "markdown": "# Collect consent for promotional emails\n\nThe Checkout Session’s [consent](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-consent) attribute records whether or not the session collected promotional consent from the customer.\n\nAs customers complete purchases, keep track of which customers consent to promotional content. You can create or update an existing [webhook](https://docs.stripe.com/webhooks \"webhook\") handler to do this. Listen to the `checkout.session.completed` event, check for the `consent.promotions` status, and then store email addresses for customers who give consent.\n\n``// Find your endpoint's secret in your Dashboard's webhook settings const endpointSecret = 'whsec_...';  // Using Express const app = require('express')();  // Use body-parser to retrieve the raw body as a buffer const bodyParser = require('body-parser');  const recordPromotionalEmailConsent = (email, promoConsent) => {   // TODO: fill me in   console.log(\"Recording promotional email consent\", email, promoConsent); }  app.post('/webhook', bodyParser.raw({type: 'application/json'}), (request, response) => {   const payload = request.body;   const sig = request.headers['stripe-signature'];    let event;    try {     event = stripe.webhooks.constructEvent(payload, sig, endpointSecret);   } catch (err) {     return response.status(400).send(`Webhook Error: ${err.message}`);   }    // Handle the checkout.session.completed event   if (event.type === 'checkout.session.completed') {     const session = event.data.object;     const promoConsent = session.consent?.promotions;     const email = session.customer_details.email;      // Record whether or not the customer has agreed to receive promotional emails     recordPromotionalEmailConsent(email, promoConsent)      // Handle order fulfillment   }   response.status(200).end(); });``",
    "title": "Collect consent for promotional emails | Stripe Documentation",
    "description": "Learn how to collect permission from customers so that you can send them promotional emails.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/upgrade-downgrade",
    "markdown": "# Upgrade and downgrade subscriptions | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to upgrade and downgrade subscriptions by changing the price.\n\nWhen a customer changes their subscription, you must change the subscription item to reflect the new selection. For example, a customer might upgrade to a premium tier or downgrade to a basic tier, prompting you to replace the underlying price of that subscription item. You can do this using a few different methods.\n\n## Retrieve the identifiers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegardless of the method you choose, you’ll need to provide identifiers for the objects you’re updating. Use the [list subscriptions](https://docs.stripe.com/api/subscriptions/list) method with a relevant filter (such as the customer ID) to find the subscription and item to update.\n\n`curl -G https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}}`\n\nThe returns the set of subscriptions for the specified customer, from which you can retrieve the subscription ID (`id`), any subscription item IDs (`items.data.id`) and the subscription items price ID (`items.data.price.id`).\n\nRetrieve subscriptions response sample\n\n`{   \"object\": \"list\",   \"url\": \"/v1/subscriptions\",   \"has_more\": false,   \"data\": [     {       \"id\": \"su_1NXPiE2eZvKYlo2COk9fohqA\",       \"object\": \"subscription\",       \"application\": null,       \"application_fee_percent\": null,       \"automatic_tax\": {         \"enabled\": false       },       \"items\": {         \"object\": \"list\",         \"data\": [           {             \"id\": \"si_OK3pbS1dvdQYJP\",             \"object\": \"subscription_item\",             \"billing_thresholds\": null,             \"created\": 1690208774,             \"metadata\": {},             \"price\": {               \"id\": \"price_1NOhvg2eZvKYlo2CqkpQDVRT\",               \"object\": \"price\"             }           }         ]       }     }   ] }`\n\n## Update the subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Update a subscription](https://docs.stripe.com/api#update_subscription) including the following parameters:\n\n*   `item ID`: You must specify the subscription item to replace the current price with the new price. Otherwise, updating the subscription with a new price _adds_ a new subscription item so both prices are active for the subscription.\n*   `item price`: Provide the identifier for the replacement price.\n*   `item quantity`: Updating a subscription price automatically reverts the quantity to the default value of `1`. If the existing subscription quantity is anything other than `1` and you want to preserve that value, you must include it in the update.\n\n`curl https://api.stripe.com/v1/subscriptions/sub_xxxxxxxxx \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"items[0][id]\"={{SUB_ITEM_ID}} \\   -d \"items[0][price]\"={{NEW_PRICE_ID}}`\n\n#### Common mistake\n\nYou must specify the subscription item to replace the current price with the new price. Failing to do so results in _adding_ the new price so both prices are active for the subscription.\n\nAlternatively, you can delete the current subscription item and create a new subscription item with the updated price.\n\n`curl https://api.stripe.com/v1/subscriptions/sub_xxxxxxxxx \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"items[0][id]\"={{SUB_ITEM_ID}} \\   -d \"items[0][deleted]\"=true \\  -d \"items[1][price]\"={{NEW_PRICE_ID}}`\n\n## Update the subscription item![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Update a subscription](https://docs.stripe.com/api/subscription_items/update) using the following parameter:\n\n*   `item price`: Provide the identifier for the replacement price.\n*   `item quantity`: Updating a subscription price automatically reverts the quantity to the default value of `1`. If the existing subscription quantity is anything other than `1` and you want to preserve that value, you must include it in the update.\n\nUse this option if you don’t need to make any other changes at the subscription level.\n\n`curl https://api.stripe.com/v1/subscription_items/si_xxxxxxxxx \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d price={{NEW_PRICE_ID}}`\n\n## Billing periods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf both prices have the same billing periods (combination of `interval` and `interval_count`), the subscription retains the same billing dates. If the prices have different billing periods, the new price is billed at the new interval, starting on the day of the change. For example, switching a customer from one monthly subscription to another doesn’t change the billing dates. However, switching a customer from a monthly subscription to a yearly subscription moves the billing date to the date of the switch. Switching a customer from one monthly subscription to another monthly subscription while introducing a trial period also moves the billing date (to the conclusion of the trial).\n\n### Subscription schedules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re changing a subscription at the end of its billing cycle, consider using a [subscription schedule](https://docs.stripe.com/billing/subscriptions/subscription-schedules/use-cases#changing-subscriptions) to manage the transition.\n\n## Metered billing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you have metered billing subscriptions, the subscription item retains usage upon updating the price. If you wish to update the price without retaining any of the existing usage, set [subscription.items.clear\\_usage](https://docs.stripe.com/api/subscriptions/update#update_subscription-items-clear_usage) to `true`.\n\n`curl https://api.stripe.com/v1/subscriptions/sub_xxxxxxxxx \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"items[0][id]\"={{SUB_ITEM_ID}} \\   -d \"items[0][price]\"={{NEW_PRICE_ID}} \\   -d \"items[0][clear_usage]\"=true`\n\n## Proration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nChanging a subscription often results in a [proration](https://docs.stripe.com/billing/subscriptions/prorations) to apply the new price to the remaining days in the billing period. You can prepare your customer for any additional expense resulting from a price change by [previewing a proration](https://docs.stripe.com/billing/subscriptions/prorations#preview-proration). Alternatively, you can [disable prorations](https://docs.stripe.com/billing/subscriptions/prorations#disable-prorations).\n\n### Immediate payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe immediately attempts payment for these subscription changes:\n\n*   From a subscription that doesn’t require payment (for example, due to a trial or free subscription) to a paid subscription\n*   When the billing period changes\n\nWhen billing is performed immediately, but the required payment fails, the subscription change request succeeds and the subscription transitions to `past_due`.\n\nTo bill a customer immediately for a change to a subscription on the same billing cycle, set `proration_behavior` to `always_invoice`. This calculates the proration, then immediately generates an [invoice](https://docs.stripe.com/api/invoices \"invoices\") after making the switch. Combine this setting with [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates) so the subscription doesn’t update unless payment succeeds on the new invoice.\n\n### Credits for downgrades![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen invoicing immediately for a downgrade, the customer might be owed a credit, which is added to their credit balance to be applied to future invoices. To refund your customer, issue [refunds](https://docs.stripe.com/refunds#issuing) and then [adjust their account balance](https://docs.stripe.com/billing/customer/balance#modifying) back to zero. Learn more about customer refunds on our [dedicated support page](https://support.stripe.com/questions/refunding-credit-balance-to-customer-after-subscription-downgrade-or-cancellation).\n\n### Handling zero-amount prices and quantities![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’ve subscribed a customer to a zero-amount price (for example, as a trial), changing the price to a non-zero amount generates an invoice and resets the [billing period](#billing-periods) to the date of the change.\n\nIf you’ve subscribed a customer to a price with a non-zero amount and a zero-amount quantity, changing the quantity to a non-zero amount does not generate an invoice or reset the billing period.",
    "title": "Upgrade and downgrade subscriptions | Stripe Documentation",
    "description": "Learn how to upgrade and downgrade subscriptions by changing the price.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/topups/object",
    "markdown": "# The Top-up object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount transferred.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled` |\n    | `failed` |\n    | `pending` |\n    | `reversed` |\n    | `succeeded` |\n    \n\n### More attributes\n\n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\n*   #### \n    \n    expected\\_availability\\_datenullable integer\n    \n*   #### \n    \n    failure\\_codenullable string\n    \n*   #### \n    \n    failure\\_messagenullable string\n    \n\n*   #### \n    \n    sourcenullable objectDeprecated\n    \n*   #### \n    \n    statement\\_descriptornullable string\n    \n*   #### \n    \n    transfer\\_groupnullable string\n    \n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null}\n```\n\n## [Create a top-up](https://docs.stripe.com/api/topups/create)\n\nTop up the balance of an account\n\n### Parameters\n\n*   A positive integer representing how much to transfer.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    statement\\_descriptorstring\n    \n\n### Returns\n\nReturns the top-up object.\n\n```\ncurl https://api.stripe.com/v1/topups \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=2000 \\  -d currency=usd \\  -d description=\"Top-up for Jenny Rosen\" \\  -d statement_descriptor=Top-up\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null}\n```\n\n## [Update a top-up](https://docs.stripe.com/api/topups/update)\n\nUpdates the metadata of a top-up. Other top-up details are not editable by design.\n\n### Parameters\n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe newly updated top-up object if the call succeeded. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null,  \"metadata\": {    \"order_id\": \"6735\"  }}\n```\n\n## [Retrieve a top-up](https://docs.stripe.com/api/topups/retrieve)\n\nRetrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a top-up if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null}\n```\n\n## [List all top-ups](https://docs.stripe.com/api/topups/list)\n\nReturns a list of top-ups.\n\n### Parameters\n\n*   Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary containing the `data` property, which is an array of separate top-up objects. The number of top-ups in the array is limited to the number designated in `limit`. If no more top-ups are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/topups \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/topups\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",      \"object\": \"topup\",      \"amount\": 2000,      \"balance_transaction\": null,      \"created\": 123456789,      \"currency\": \"usd\",      \"description\": \"Top-up for Jenny Rosen\",      \"expected_availability_date\": 123456789,      \"failure_code\": null,      \"failure_message\": null,      \"livemode\": false,      \"source\": null,      \"statement_descriptor\": \"Top-up\",      \"status\": \"pending\",      \"transfer_group\": null    }    {...}    {...}  ],}\n```",
    "title": "The Top-up object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/invoices/sending",
    "markdown": "# Integrate with the Invoicing API\n\n## Learn how to create and send an invoice with code.\n\nThe [Dashboard](https://dashboard.stripe.com/invoices) is the most common way to [create invoices](https://docs.stripe.com/invoicing/dashboard#create-invoice). If you’d like to automate invoice creation, you can integrate with the API. Build a full, working Invoicing integration using our [sample integration](https://docs.stripe.com/invoicing/integration/quickstart).\n\n#### Note\n\nYou don’t need to integrate with the Payments API to integrate with the Invoicing API.\n\n[](#setup)\n\nUse our official libraries for access to the Stripe API:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-product)\n\nTo create a product, enter its name:\n\n`curl https://api.stripe.com/v1/products \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d name=\"Gold Special\"`\n\n[](#create-prices)\n\n[Prices](https://docs.stripe.com/api#prices) define how much and how often to charge for products. This includes how much the product costs, what currency to use, and the billing interval (when the price is for a subscription). Like products, if you only have a few prices, it’s preferable to manage them in the Dashboard. Use the unit amount to express prices in the lowest unit of the currency—in this case, cents (10 USD is 1,000 cents, so the unit amount is 1000).\n\n#### Note\n\nAs an alternative, if you don’t need to create a price for your product, you can use the [amount](https://docs.stripe.com/api/invoiceitems/create#create_invoiceitem-amount) parameter during invoice item creation.\n\nTo create a price and assign it to the product, pass the product ID, unit amount, and currency. In the following example, the price for the “Gold Special” product is 10 USD:\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d product=  {{PRODUCT_ID}}   \\  -d unit_amount=1000 \\  -d currency=usd`\n\n[](#create-customer-code)\n\nThe [Customer](https://docs.stripe.com/api#customer_object) object represents the customer purchasing your product. It’s required for creating an invoice. To create a customer with a `name`, `email`, and `description`, add the following code replacing the values with your own:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d name=\"Jenny Rosen\" \\   --data-urlencode email=\"jenny.rosen@example.com\" \\  -d description=\"My first customer\"`\n\nAfter you create the customer, store the customer `id` in your database so that you can use it later. The next step, for example, uses the customer ID to create an invoice.\n\n#### Note\n\n[](#create-invoice-code)\n\nSet the [collection\\_method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method) attribute to `send_invoice`. For Stripe to mark an invoice as past due, you must add the [days\\_until\\_due](https://docs.stripe.com/api/invoices/create#create_invoice-days_until_due) parameter. When you send an invoice, Stripe emails the invoice to the customer with payment instructions.\n\n`curl https://api.stripe.com/v1/invoices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d collection_method=send_invoice \\  -d days_until_due=30`\n\nThen, create an invoice item by passing in the customer `id`, product `price`, and invoice ID `invoice`.\n\nThe maximum number of invoice items is 250.\n\n`curl https://api.stripe.com/v1/invoiceitems \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d price=  {{PRICE_ID}}   \\  -d invoice=  {{INVOICE_ID}}    `\n\nIf you set `auto_advance` to `false`, you can continue to modify the invoice until you [finalize](https://docs.stripe.com/invoicing/integration/workflow-transitions) it. To finalize a draft invoice, use the Dashboard, send it to the customer, or pay it. You can also use the [Finalize](https://docs.stripe.com/api/invoices/finalize) API:\n\n#### Note\n\nIf you created the invoice in error, [void](https://docs.stripe.com/invoicing/overview#void) it. You can also mark an invoice as [uncollectible](https://docs.stripe.com/invoicing/overview#uncollectible).\n\n`curl -X POST https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/finalize \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\n[](#accept-invoice-payment)\n\nSend the invoice to the email address associated with the customer. As soon as the an invoice is sent, Stripe finalizes it. Many jurisdictions consider finalized invoices a legal document making certain fields unalterable. If you send invoices that have already been paid, there’s no reference to the payment in the email.\n\n#### Note\n\nWhen you send invoices that have already been paid, the email doesn’t reference the payment. Stripe sends invoices to the email address associated with the customer.\n\n`curl -X POST https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/send \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\n[\n\n## Handle post-payment events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-payment-events)\n\nStripe sends an [`invoice.paid`](https://docs.stripe.com/api/events/types?event_types-invoice.paid) event when an invoice payment completes. Listen for this event to ensure reliable fulfillment. If your integration relies on only a client-side callback, the customer could lose connection before the callback executes, which would result in the customer being charged without your server being notified. Setting up your integration to listen for asynchronous events is also what enables you to accept [different types of payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\n#### Note\n\nSuccessful invoice payments trigger both an [`invoice.paid`](https://docs.stripe.com/api/events/types?event_types-invoice.paid) and [`invoice.payment_succeeded`](https://docs.stripe.com/api/events/types?event_types-invoice.payment_succeeded) event. Both event types contain the same invoice data, so it’s only necessary to listen to one of them to be notified of successful invoice payments. The difference is that `invoice.payment_succeeded` events are sent for successful invoice payments, but aren’t sent when you mark an invoice as [paid\\_out\\_of\\_band](https://docs.stripe.com/api/invoices/pay#pay_invoice-paid_out_of_band). `invoice.paid` events, on the other hand, are triggered for both successful payments and out of band payments. Because `invoice.paid` covers both scenarios, we typically recommend listening to `invoice.paid` rather than `invoice.payment_succeeded`.\n\nUse the [Dashboard webhook tool](https://dashboard.stripe.com/webhooks) or follow the [webhook quickstart](https://docs.stripe.com/webhooks/quickstart) to receive these events and run actions, such as sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nIn addition to handling the `invoice.paid` event, we recommend handling two other events when collecting payments with the Payment Element:\n\n| Event | Description | Action |\n| --- | --- | --- |\n| [payment\\_intent.processing](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.processing) | Sent when a customer successfully initiated a payment, but the payment has yet to complete. This event is most commonly sent when a bank debit is initiated. It’s followed by either a `invoice.paid` or `invoice.payment_failed` event in the future. | Send the customer an order confirmation that indicates their payment is pending. For digital goods, you might want to fulfill the order before waiting for payment to complete. |\n| [invoice.payment\\_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed) | Sent when a customer attempted a payment on an invoice, but the payment failed. | If a payment transitioned from `processing` to `payment_failed`, offer the customer another attempt to pay. |",
    "title": "Integrate with the Invoicing API | Stripe Documentation",
    "description": "Learn how to create and send an invoice with code.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/update_line",
    "markdown": "# Update an invoice's line item\n\nUpdates an invoice’s line item. Some fields, such as `tax_amounts`, only live on the invoice line item, so they can only be updated through this endpoint. Other fields, such as `amount`, live on both the invoice item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well. Updating an invoice’s line item is only possible before the invoice is finalized.\n\n### Parameters\n\n*   Invoice ID of line item\n    \n*   #### \n    \n    line\\_item\\_idstringRequired\n    \n    Invoice line item ID\n    \n*   The integer amount in cents of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer’s account, pass a negative amount.\n    \n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. For [type=subscription](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-type) line items, the incoming metadata specified on the request is directly used to set this value, in contrast to [type=invoiceitem](https://docs.stripe.com/api/invoices/api/invoices/line_item#invoice_line_item_object-type) line items, where any existing metadata on the invoice line is merged with the incoming data.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n*   Non-negative integer. The quantity of units for the line item.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_amountsarray of objects\n    \n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nThe updated invoice’s line item object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/lines/:id\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/lines/il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"object\": \"line_item\",  \"amount\": 1000,  \"amount_excluding_tax\": 1000,  \"currency\": \"usd\",  \"description\": \"My First Invoice Item (created for API docs)\",  \"discount_amounts\": [],  \"discountable\": true,  \"discounts\": [],  \"invoice_item\": \"ii_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1696975413,    \"start\": 1696975413  },  \"price\": {    \"id\": \"price_1NzlYfGgdF1VjufL0cVjLJVI\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1696965933,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_OnMHDH6VBmYlTr\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"proration\": false,  \"proration_details\": {    \"credited_items\": null  },  \"quantity\": 1,  \"subscription\": null,  \"tax_amounts\": [],  \"tax_rates\": [],  \"type\": \"invoiceitem\",  \"unit_amount_excluding_tax\": \"1000\"}\n```\n\n## [Retrieve an invoice](https://docs.stripe.com/api/invoices/retrieve)\n\nRetrieves the invoice with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an invoice object if a valid invoice ID was provided. Raises [an error](#errors) otherwise.\n\nThe invoice object contains a `lines` hash that contains information about the subscriptions and invoice items that have been applied to the invoice, as well as any prorations that Stripe has automatically calculated. Each line on the invoice has an `amount` attribute that represents the amount actually contributed to the invoice’s total. For invoice items and prorations, the amount attribute is the same as for the invoice item or proration respectively. For subscriptions, the amount may be different from the plan’s regular price depending on whether the invoice covers a trial period or the invoice period differs from the plan’s usual interval.\n\nThe invoice object has both a `subtotal` and a `total`. The subtotal represents the total before any discounts, while the total is the final amount to be charged to the customer after all coupons have been applied.\n\nThe invoice also has a `next_payment_attempt` attribute that tells you the next time (as a Unix timestamp) payment for the invoice will be automatically attempted. For invoices with manual payment collection, that have been closed, or that have reached the maximum number of retries (specified in your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic)), the `next_payment_attempt` will be null.\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Retrieve an upcoming invoice](https://docs.stripe.com/api/invoices/upcoming)\n\nAt any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.\n\nNote that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.\n\nYou can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the `subscription_details.proration_date` parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where `period[start]` is equal to the `subscription_details.proration_date` value passed in the request.\n\nNote: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_billing\\_cycle\\_anchorstring | timestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_attimestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_at\\_period\\_endbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_nowbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_default\\_tax\\_ratesarray of stringsDeprecated\n    \n*   #### \n    \n    subscription\\_detailsobject\n    \n*   #### \n    \n    subscription\\_itemsarray of objectsDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_behaviorenumDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_resume\\_atstringDeprecated\n    \n*   #### \n    \n    subscription\\_start\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_trial\\_endstring | timestampDeprecated\n    \n\n### Returns\n\nReturns an invoice if valid customer information is provided. Raises [an error](#errors) otherwise.\n\nGET /v1/invoices/upcoming\n\n```\ncurl -G https://api.stripe.com/v1/invoices/upcoming \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Retrieve an invoice's line items](https://docs.stripe.com/api/invoices/invoice_lines)\n\nWhen retrieving an invoice, you’ll get a **lines** property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of [line\\_item objects](#invoice_line_item_object).\n\nGET /v1/invoices/:id/lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NpHok2eZvKYlo2CyeiBref0/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoices/in_1NpHiG2eZvKYlo2CZV0ZkEBT/lines\",  \"has_more\": false,  \"data\": [    {      \"id\": \"il_tmp_1NpHiK2eZvKYlo2C9NdV8VrI\",      \"object\": \"line_item\",      \"amount\": 129999,      \"amount_excluding_tax\": 129999,      \"currency\": \"usd\",      \"description\": \"My First Invoice Item (created for API docs)\",      \"discount_amounts\": [],      \"discountable\": true,      \"discounts\": [],      \"invoice_item\": \"ii_1NpHiK2eZvKYlo2C9NdV8VrI\",      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1694467932,        \"start\": 1694467932      },      \"price\": {        \"id\": \"price_1NpEIa2eZvKYlo2CXcy5DRPA\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1694454804,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_OcTFTbV7qh48bd\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 129999,        \"unit_amount_decimal\": \"129999\"      },      \"proration\": false,      \"proration_details\": {        \"credited_items\": null      },      \"quantity\": 1,      \"subscription\": null,      \"tax_amounts\": [],      \"tax_rates\": [],      \"type\": \"invoiceitem\",      \"unit_amount_excluding_tax\": \"129999\"    }  ]}\n```\n\n## [Retrieve an upcoming invoice's line items](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)\n\nWhen retrieving an upcoming invoice, you’ll get a **lines** property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_billing\\_cycle\\_anchorstring | timestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_attimestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_at\\_period\\_endbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_nowbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_default\\_tax\\_ratesarray of stringsDeprecated\n    \n*   #### \n    \n    subscription\\_detailsobject\n    \n*   #### \n    \n    subscription\\_itemsarray of objectsDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_behaviorenumDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_resume\\_atstringDeprecated\n    \n*   #### \n    \n    subscription\\_start\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_trial\\_endstring | timestampDeprecated\n    \n\n### Returns\n\nReturns a list of [line\\_item objects](#invoice_line_item_object).\n\nGET /v1/invoices/upcoming/lines\n\n```\ncurl -G https://api.stripe.com/v1/invoices/upcoming/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_OgeRVYRv3sHroi\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoices/upcoming/lines\",  \"has_more\": false,  \"data\": [    {      \"id\": \"il_tmp_1NtH5qBHO5VeT9SUzhbifVXt\",      \"object\": \"line_item\",      \"amount\": 1000,      \"amount_excluding_tax\": 1000,      \"currency\": \"usd\",      \"description\": \"My First Invoice Item (created for API docs)\",      \"discount_amounts\": [],      \"discountable\": true,      \"discounts\": [],      \"invoice_item\": \"ii_1NtH5qBHO5VeT9SUzhbifVXt\",      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1695418858,        \"start\": 1695418858      },      \"price\": {        \"id\": \"price_1NrpbEBHO5VeT9SUHp6xMwKA\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1695074844,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_Of9vdHHGRaGOio\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1000,        \"unit_amount_decimal\": \"1000\"      },      \"proration\": false,      \"proration_details\": {        \"credited_items\": null      },      \"quantity\": 1,      \"subscription\": null,      \"tax_amounts\": [],      \"tax_rates\": [],      \"type\": \"invoiceitem\",      \"unit_amount_excluding_tax\": \"1000\"    }    {...}    {...}  ],}\n```",
    "title": "Update an invoice's line item | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/retrieve",
    "markdown": "# Retrieve an invoice | Stripe API Reference\n\nRetrieves the invoice with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an invoice object if a valid invoice ID was provided. Raises [an error](#errors) otherwise.\n\nThe invoice object contains a `lines` hash that contains information about the subscriptions and invoice items that have been applied to the invoice, as well as any prorations that Stripe has automatically calculated. Each line on the invoice has an `amount` attribute that represents the amount actually contributed to the invoice’s total. For invoice items and prorations, the amount attribute is the same as for the invoice item or proration respectively. For subscriptions, the amount may be different from the plan’s regular price depending on whether the invoice covers a trial period or the invoice period differs from the plan’s usual interval.\n\nThe invoice object has both a `subtotal` and a `total`. The subtotal represents the total before any discounts, while the total is the final amount to be charged to the customer after all coupons have been applied.\n\nThe invoice also has a `next_payment_attempt` attribute that tells you the next time (as a Unix timestamp) payment for the invoice will be automatically attempted. For invoices with manual payment collection, that have been closed, or that have reached the maximum number of retries (specified in your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic)), the `next_payment_attempt` will be null.\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Retrieve an upcoming invoice](https://docs.stripe.com/api/invoices/upcoming)\n\nAt any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.\n\nNote that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.\n\nYou can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the `subscription_details.proration_date` parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where `period[start]` is equal to the `subscription_details.proration_date` value passed in the request.\n\nNote: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_billing\\_cycle\\_anchorstring | timestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_attimestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_at\\_period\\_endbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_nowbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_default\\_tax\\_ratesarray of stringsDeprecated\n    \n*   #### \n    \n    subscription\\_detailsobject\n    \n*   #### \n    \n    subscription\\_itemsarray of objectsDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_behaviorenumDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_resume\\_atstringDeprecated\n    \n*   #### \n    \n    subscription\\_start\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_trial\\_endstring | timestampDeprecated\n    \n\n### Returns\n\nReturns an invoice if valid customer information is provided. Raises [an error](#errors) otherwise.\n\nGET /v1/invoices/upcoming\n\n```\ncurl -G https://api.stripe.com/v1/invoices/upcoming \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Retrieve an invoice's line items](https://docs.stripe.com/api/invoices/invoice_lines)\n\nWhen retrieving an invoice, you’ll get a **lines** property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of [line\\_item objects](#invoice_line_item_object).\n\nGET /v1/invoices/:id/lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NpHok2eZvKYlo2CyeiBref0/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoices/in_1NpHiG2eZvKYlo2CZV0ZkEBT/lines\",  \"has_more\": false,  \"data\": [    {      \"id\": \"il_tmp_1NpHiK2eZvKYlo2C9NdV8VrI\",      \"object\": \"line_item\",      \"amount\": 129999,      \"amount_excluding_tax\": 129999,      \"currency\": \"usd\",      \"description\": \"My First Invoice Item (created for API docs)\",      \"discount_amounts\": [],      \"discountable\": true,      \"discounts\": [],      \"invoice_item\": \"ii_1NpHiK2eZvKYlo2C9NdV8VrI\",      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1694467932,        \"start\": 1694467932      },      \"price\": {        \"id\": \"price_1NpEIa2eZvKYlo2CXcy5DRPA\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1694454804,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_OcTFTbV7qh48bd\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 129999,        \"unit_amount_decimal\": \"129999\"      },      \"proration\": false,      \"proration_details\": {        \"credited_items\": null      },      \"quantity\": 1,      \"subscription\": null,      \"tax_amounts\": [],      \"tax_rates\": [],      \"type\": \"invoiceitem\",      \"unit_amount_excluding_tax\": \"129999\"    }  ]}\n```\n\n## [Retrieve an upcoming invoice's line items](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)\n\nWhen retrieving an upcoming invoice, you’ll get a **lines** property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_billing\\_cycle\\_anchorstring | timestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_attimestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_at\\_period\\_endbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_nowbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_default\\_tax\\_ratesarray of stringsDeprecated\n    \n*   #### \n    \n    subscription\\_detailsobject\n    \n*   #### \n    \n    subscription\\_itemsarray of objectsDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_behaviorenumDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_resume\\_atstringDeprecated\n    \n*   #### \n    \n    subscription\\_start\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_trial\\_endstring | timestampDeprecated\n    \n\n### Returns\n\nReturns a list of [line\\_item objects](#invoice_line_item_object).\n\nGET /v1/invoices/upcoming/lines\n\n```\ncurl -G https://api.stripe.com/v1/invoices/upcoming/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_OgeRVYRv3sHroi\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoices/upcoming/lines\",  \"has_more\": false,  \"data\": [    {      \"id\": \"il_tmp_1NtH5qBHO5VeT9SUzhbifVXt\",      \"object\": \"line_item\",      \"amount\": 1000,      \"amount_excluding_tax\": 1000,      \"currency\": \"usd\",      \"description\": \"My First Invoice Item (created for API docs)\",      \"discount_amounts\": [],      \"discountable\": true,      \"discounts\": [],      \"invoice_item\": \"ii_1NtH5qBHO5VeT9SUzhbifVXt\",      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1695418858,        \"start\": 1695418858      },      \"price\": {        \"id\": \"price_1NrpbEBHO5VeT9SUHp6xMwKA\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1695074844,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_Of9vdHHGRaGOio\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1000,        \"unit_amount_decimal\": \"1000\"      },      \"proration\": false,      \"proration_details\": {        \"credited_items\": null      },      \"quantity\": 1,      \"subscription\": null,      \"tax_amounts\": [],      \"tax_rates\": [],      \"type\": \"invoiceitem\",      \"unit_amount_excluding_tax\": \"1000\"    }    {...}    {...}  ],}\n```\n\n## [List all invoices](https://docs.stripe.com/api/invoices/list)\n\nYou can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.\n\n### Parameters\n\n*   Only return invoices for the customer specified by this customer ID.\n    \n*   The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://docs.stripe.com/billing/invoices/workflow#workflow-overview)\n    \n*   Only return invoices for the subscription specified by this subscription ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array invoice attachments,\n\n```\ncurl -G https://api.stripe.com/v1/invoices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoices\",  \"has_more\": false,  \"data\": [    {      \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",      \"object\": \"invoice\",      \"account_country\": \"US\",      \"account_name\": \"Stripe Docs\",      \"account_tax_ids\": null,      \"amount_due\": 0,      \"amount_paid\": 0,      \"amount_remaining\": 0,      \"amount_shipping\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"attempt_count\": 0,      \"attempted\": false,      \"auto_advance\": false,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"billing_reason\": \"manual\",      \"charge\": null,      \"collection_method\": \"charge_automatically\",      \"created\": 1680644467,      \"currency\": \"usd\",      \"custom_fields\": null,      \"customer\": \"cus_NeZwdNtLEOXuvB\",      \"customer_address\": null,      \"customer_email\": \"jennyrosen@example.com\",      \"customer_name\": \"Jenny Rosen\",      \"customer_phone\": null,      \"customer_shipping\": null,      \"customer_tax_exempt\": \"none\",      \"customer_tax_ids\": [],      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": [],      \"due_date\": null,      \"ending_balance\": null,      \"footer\": null,      \"from_invoice\": null,      \"hosted_invoice_url\": null,      \"invoice_pdf\": null,      \"issuer\": {        \"type\": \"self\"      },      \"last_finalization_error\": null,      \"latest_revision\": null,      \"lines\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"      },      \"livemode\": false,      \"metadata\": {},      \"next_payment_attempt\": null,      \"number\": null,      \"on_behalf_of\": null,      \"paid\": false,      \"paid_out_of_band\": false,      \"payment_intent\": null,      \"payment_settings\": {        \"default_mandate\": null,        \"payment_method_options\": null,        \"payment_method_types\": null      },      \"period_end\": 1680644467,      \"period_start\": 1680644467,      \"post_payment_credit_notes_amount\": 0,      \"pre_payment_credit_notes_amount\": 0,      \"quote\": null,      \"receipt_number\": null,      \"rendering_options\": null,      \"shipping_cost\": null,      \"shipping_details\": null,      \"starting_balance\": 0,      \"statement_descriptor\": null,      \"status\": \"draft\",      \"status_transitions\": {        \"finalized_at\": null,        \"marked_uncollectible_at\": null,        \"paid_at\": null,        \"voided_at\": null      },      \"subscription\": null,      \"subtotal\": 0,      \"subtotal_excluding_tax\": 0,      \"tax\": null,      \"test_clock\": null,      \"total\": 0,      \"total_discount_amounts\": [],      \"total_excluding_tax\": 0,      \"total_tax_amounts\": [],      \"transfer_data\": null,      \"webhooks_delivered_at\": 1680644467    }    {...}    {...}  ],}\n```",
    "title": "Retrieve an invoice | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/create_preview",
    "markdown": "# Create a preview invoice | Stripe API Reference\n\nAt any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.\n\nNote that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.\n\nYou can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the `subscription_details.proration_date` parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where `period[start]` is equal to the `subscription_details.proration_date` value passed in the request.\n\nNote: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_detailsobject\n    \n\n### Returns\n\nReturns an invoice if valid customer information is provided. Raises [an error](#errors) otherwise.\n\nPOST /v1/invoices/create\\_preview\n\n```\ncurl https://api.stripe.com/v1/invoices/create_preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"id\": \"upcoming_in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Update an invoice](https://docs.stripe.com/api/invoices/update)\n\nDraft invoices are fully editable. Once an invoice is [finalized](https://docs.stripe.com/billing/invoices/workflow#finalized), monetary values, as well as `collection_method`, become uneditable.\n\nIf you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or [automatically reconciling](https://docs.stripe.com/billing/invoices/reconciliation) invoices, pass `auto_advance=false`.\n\n### Parameters\n\n*   Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `charge_automatically` |\n    | `send_invoice` |\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_tax\\_idsarray of strings\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the invoice object.\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Update an invoice's line item](https://docs.stripe.com/api/invoices/update_line)\n\nUpdates an invoice’s line item. Some fields, such as `tax_amounts`, only live on the invoice line item, so they can only be updated through this endpoint. Other fields, such as `amount`, live on both the invoice item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well. Updating an invoice’s line item is only possible before the invoice is finalized.\n\n### Parameters\n\n*   Invoice ID of line item\n    \n*   #### \n    \n    line\\_item\\_idstringRequired\n    \n    Invoice line item ID\n    \n*   The integer amount in cents of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer’s account, pass a negative amount.\n    \n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. For [type=subscription](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-type) line items, the incoming metadata specified on the request is directly used to set this value, in contrast to [type=invoiceitem](https://docs.stripe.com/api/invoices/api/invoices/line_item#invoice_line_item_object-type) line items, where any existing metadata on the invoice line is merged with the incoming data.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n*   Non-negative integer. The quantity of units for the line item.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_amountsarray of objects\n    \n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nThe updated invoice’s line item object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/lines/:id\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/lines/il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"object\": \"line_item\",  \"amount\": 1000,  \"amount_excluding_tax\": 1000,  \"currency\": \"usd\",  \"description\": \"My First Invoice Item (created for API docs)\",  \"discount_amounts\": [],  \"discountable\": true,  \"discounts\": [],  \"invoice_item\": \"ii_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1696975413,    \"start\": 1696975413  },  \"price\": {    \"id\": \"price_1NzlYfGgdF1VjufL0cVjLJVI\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1696965933,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_OnMHDH6VBmYlTr\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"proration\": false,  \"proration_details\": {    \"credited_items\": null  },  \"quantity\": 1,  \"subscription\": null,  \"tax_amounts\": [],  \"tax_rates\": [],  \"type\": \"invoiceitem\",  \"unit_amount_excluding_tax\": \"1000\"}\n```\n\n## [Retrieve an invoice](https://docs.stripe.com/api/invoices/retrieve)\n\nRetrieves the invoice with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an invoice object if a valid invoice ID was provided. Raises [an error](#errors) otherwise.\n\nThe invoice object contains a `lines` hash that contains information about the subscriptions and invoice items that have been applied to the invoice, as well as any prorations that Stripe has automatically calculated. Each line on the invoice has an `amount` attribute that represents the amount actually contributed to the invoice’s total. For invoice items and prorations, the amount attribute is the same as for the invoice item or proration respectively. For subscriptions, the amount may be different from the plan’s regular price depending on whether the invoice covers a trial period or the invoice period differs from the plan’s usual interval.\n\nThe invoice object has both a `subtotal` and a `total`. The subtotal represents the total before any discounts, while the total is the final amount to be charged to the customer after all coupons have been applied.\n\nThe invoice also has a `next_payment_attempt` attribute that tells you the next time (as a Unix timestamp) payment for the invoice will be automatically attempted. For invoices with manual payment collection, that have been closed, or that have reached the maximum number of retries (specified in your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic)), the `next_payment_attempt` will be null.\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Retrieve an upcoming invoice](https://docs.stripe.com/api/invoices/upcoming)\n\nAt any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.\n\nNote that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.\n\nYou can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the `subscription_details.proration_date` parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where `period[start]` is equal to the `subscription_details.proration_date` value passed in the request.\n\nNote: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_billing\\_cycle\\_anchorstring | timestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_attimestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_at\\_period\\_endbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_nowbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_default\\_tax\\_ratesarray of stringsDeprecated\n    \n*   #### \n    \n    subscription\\_detailsobject\n    \n*   #### \n    \n    subscription\\_itemsarray of objectsDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_behaviorenumDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_resume\\_atstringDeprecated\n    \n*   #### \n    \n    subscription\\_start\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_trial\\_endstring | timestampDeprecated\n    \n\n### Returns\n\nReturns an invoice if valid customer information is provided. Raises [an error](#errors) otherwise.\n\nGET /v1/invoices/upcoming\n\n```\ncurl -G https://api.stripe.com/v1/invoices/upcoming \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```",
    "title": "Create a preview invoice | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/invoice_lines",
    "markdown": "# Retrieve an invoice's line items\n\nWhen retrieving an invoice, you’ll get a **lines** property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of [line\\_item objects](#invoice_line_item_object).\n\nGET /v1/invoices/:id/lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NpHok2eZvKYlo2CyeiBref0/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoices/in_1NpHiG2eZvKYlo2CZV0ZkEBT/lines\",  \"has_more\": false,  \"data\": [    {      \"id\": \"il_tmp_1NpHiK2eZvKYlo2C9NdV8VrI\",      \"object\": \"line_item\",      \"amount\": 129999,      \"amount_excluding_tax\": 129999,      \"currency\": \"usd\",      \"description\": \"My First Invoice Item (created for API docs)\",      \"discount_amounts\": [],      \"discountable\": true,      \"discounts\": [],      \"invoice_item\": \"ii_1NpHiK2eZvKYlo2C9NdV8VrI\",      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1694467932,        \"start\": 1694467932      },      \"price\": {        \"id\": \"price_1NpEIa2eZvKYlo2CXcy5DRPA\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1694454804,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_OcTFTbV7qh48bd\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 129999,        \"unit_amount_decimal\": \"129999\"      },      \"proration\": false,      \"proration_details\": {        \"credited_items\": null      },      \"quantity\": 1,      \"subscription\": null,      \"tax_amounts\": [],      \"tax_rates\": [],      \"type\": \"invoiceitem\",      \"unit_amount_excluding_tax\": \"129999\"    }  ]}\n```\n\n## [Retrieve an upcoming invoice's line items](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)\n\nWhen retrieving an upcoming invoice, you’ll get a **lines** property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_billing\\_cycle\\_anchorstring | timestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_attimestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_at\\_period\\_endbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_nowbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_default\\_tax\\_ratesarray of stringsDeprecated\n    \n*   #### \n    \n    subscription\\_detailsobject\n    \n*   #### \n    \n    subscription\\_itemsarray of objectsDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_behaviorenumDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_resume\\_atstringDeprecated\n    \n*   #### \n    \n    subscription\\_start\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_trial\\_endstring | timestampDeprecated\n    \n\n### Returns\n\nReturns a list of [line\\_item objects](#invoice_line_item_object).\n\nGET /v1/invoices/upcoming/lines\n\n```\ncurl -G https://api.stripe.com/v1/invoices/upcoming/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_OgeRVYRv3sHroi\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoices/upcoming/lines\",  \"has_more\": false,  \"data\": [    {      \"id\": \"il_tmp_1NtH5qBHO5VeT9SUzhbifVXt\",      \"object\": \"line_item\",      \"amount\": 1000,      \"amount_excluding_tax\": 1000,      \"currency\": \"usd\",      \"description\": \"My First Invoice Item (created for API docs)\",      \"discount_amounts\": [],      \"discountable\": true,      \"discounts\": [],      \"invoice_item\": \"ii_1NtH5qBHO5VeT9SUzhbifVXt\",      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1695418858,        \"start\": 1695418858      },      \"price\": {        \"id\": \"price_1NrpbEBHO5VeT9SUHp6xMwKA\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1695074844,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_Of9vdHHGRaGOio\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1000,        \"unit_amount_decimal\": \"1000\"      },      \"proration\": false,      \"proration_details\": {        \"credited_items\": null      },      \"quantity\": 1,      \"subscription\": null,      \"tax_amounts\": [],      \"tax_rates\": [],      \"type\": \"invoiceitem\",      \"unit_amount_excluding_tax\": \"1000\"    }    {...}    {...}  ],}\n```\n\n## [List all invoices](https://docs.stripe.com/api/invoices/list)\n\nYou can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.\n\n### Parameters\n\n*   Only return invoices for the customer specified by this customer ID.\n    \n*   The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://docs.stripe.com/billing/invoices/workflow#workflow-overview)\n    \n*   Only return invoices for the subscription specified by this subscription ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array invoice attachments,\n\n```\ncurl -G https://api.stripe.com/v1/invoices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoices\",  \"has_more\": false,  \"data\": [    {      \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",      \"object\": \"invoice\",      \"account_country\": \"US\",      \"account_name\": \"Stripe Docs\",      \"account_tax_ids\": null,      \"amount_due\": 0,      \"amount_paid\": 0,      \"amount_remaining\": 0,      \"amount_shipping\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"attempt_count\": 0,      \"attempted\": false,      \"auto_advance\": false,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"billing_reason\": \"manual\",      \"charge\": null,      \"collection_method\": \"charge_automatically\",      \"created\": 1680644467,      \"currency\": \"usd\",      \"custom_fields\": null,      \"customer\": \"cus_NeZwdNtLEOXuvB\",      \"customer_address\": null,      \"customer_email\": \"jennyrosen@example.com\",      \"customer_name\": \"Jenny Rosen\",      \"customer_phone\": null,      \"customer_shipping\": null,      \"customer_tax_exempt\": \"none\",      \"customer_tax_ids\": [],      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": [],      \"due_date\": null,      \"ending_balance\": null,      \"footer\": null,      \"from_invoice\": null,      \"hosted_invoice_url\": null,      \"invoice_pdf\": null,      \"issuer\": {        \"type\": \"self\"      },      \"last_finalization_error\": null,      \"latest_revision\": null,      \"lines\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"      },      \"livemode\": false,      \"metadata\": {},      \"next_payment_attempt\": null,      \"number\": null,      \"on_behalf_of\": null,      \"paid\": false,      \"paid_out_of_band\": false,      \"payment_intent\": null,      \"payment_settings\": {        \"default_mandate\": null,        \"payment_method_options\": null,        \"payment_method_types\": null      },      \"period_end\": 1680644467,      \"period_start\": 1680644467,      \"post_payment_credit_notes_amount\": 0,      \"pre_payment_credit_notes_amount\": 0,      \"quote\": null,      \"receipt_number\": null,      \"rendering_options\": null,      \"shipping_cost\": null,      \"shipping_details\": null,      \"starting_balance\": 0,      \"statement_descriptor\": null,      \"status\": \"draft\",      \"status_transitions\": {        \"finalized_at\": null,        \"marked_uncollectible_at\": null,        \"paid_at\": null,        \"voided_at\": null      },      \"subscription\": null,      \"subtotal\": 0,      \"subtotal_excluding_tax\": 0,      \"tax\": null,      \"test_clock\": null,      \"total\": 0,      \"total_discount_amounts\": [],      \"total_excluding_tax\": 0,      \"total_tax_amounts\": [],      \"transfer_data\": null,      \"webhooks_delivered_at\": 1680644467    }    {...}    {...}  ],}\n```\n\n## [Delete a draft invoice](https://docs.stripe.com/api/invoices/delete)\n\nPermanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be [voided](#void_invoice).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA successfully deleted invoice. Otherwise, this call raises [an error](#errors), such as if the invoice has already been deleted.\n\n```\ncurl -X DELETE https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"deleted\": true}\n```\n\n## [Bulk add invoice line items](https://docs.stripe.com/api/invoices/add_lines)\n\nAdds multiple line items to an invoice. This is only possible when an invoice is still a draft.\n\n### Parameters\n\n*   #### \n    \n    linesarray of objectsRequired\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe updated invoice with newly added line items is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/add\\_lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/add_lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"lines[0][description]\"=\"test description\" \\  -d \"lines[0][amount]\"=799 \\  -d \"lines[1][invoice_item]\"=ii_1NuLVd2eZvKYlo2CRWY0Hqgi\n```\n\n```\n{  \"id\": \"in_1NuhUa2eZvKYlo2CWYVhyvD9\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe.com\",  \"account_tax_ids\": null,  \"amount_due\": 998,  \"amount_paid\": 0,  \"amount_remaining\": 998,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1695758664,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_address\": null,  \"customer_email\": \"test@test.com\",  \"customer_name\": null,  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"effective_at\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1NuhUa2eZvKYlo2CC98Fg3Bo\",        \"object\": \"line_item\",        \"amount\": 799,        \"amount_excluding_tax\": 799,        \"currency\": \"usd\",        \"description\": \"test description\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuhUa2eZvKYlo2CGeF7Qgx0\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695758664,          \"start\": 1695758664        },        \"price\": {          \"id\": \"price_1NuhLA2eZvKYlo2Cq1tIGEBp\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695758080,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Oi7aO1GPi1dWX7\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 799,          \"unit_amount_decimal\": \"799\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"799\"      },      {        \"id\": \"il_1NuLVe2eZvKYlo2Canh35EfU\",        \"object\": \"line_item\",        \"amount\": 199,        \"amount_excluding_tax\": 199,        \"currency\": \"usd\",        \"description\": \"Canned Coffee\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuLVd2eZvKYlo2CRWY0Hqgi\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695674161,          \"start\": 1695674161        },        \"price\": {          \"id\": \"price_1NuI212eZvKYlo2CWgdD8kET\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695660793,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_OhhQNWDYdIbXYv\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 199,          \"unit_amount_decimal\": \"199\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"199\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/upcoming/lines?customer=cus_9s6XKzkNRiz8i3\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1688482163,  \"period_start\": 1688395763,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"redaction\": null,  \"rendering\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subscription_details\": {    \"metadata\": null  },  \"subtotal\": 998,  \"subtotal_excluding_tax\": 998,  \"tax\": null,  \"test_clock\": null,  \"total\": 998,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 998,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null}\n```",
    "title": "Retrieve an invoice's line items | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/upcoming_invoice_lines",
    "markdown": "# Retrieve an upcoming invoice's line items\n\nWhen retrieving an upcoming invoice, you’ll get a **lines** property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_billing\\_cycle\\_anchorstring | timestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_attimestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_at\\_period\\_endbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_nowbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_default\\_tax\\_ratesarray of stringsDeprecated\n    \n*   #### \n    \n    subscription\\_detailsobject\n    \n*   #### \n    \n    subscription\\_itemsarray of objectsDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_behaviorenumDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_resume\\_atstringDeprecated\n    \n*   #### \n    \n    subscription\\_start\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_trial\\_endstring | timestampDeprecated\n    \n\n### Returns\n\nReturns a list of [line\\_item objects](#invoice_line_item_object).\n\nGET /v1/invoices/upcoming/lines\n\n```\ncurl -G https://api.stripe.com/v1/invoices/upcoming/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_OgeRVYRv3sHroi\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoices/upcoming/lines\",  \"has_more\": false,  \"data\": [    {      \"id\": \"il_tmp_1NtH5qBHO5VeT9SUzhbifVXt\",      \"object\": \"line_item\",      \"amount\": 1000,      \"amount_excluding_tax\": 1000,      \"currency\": \"usd\",      \"description\": \"My First Invoice Item (created for API docs)\",      \"discount_amounts\": [],      \"discountable\": true,      \"discounts\": [],      \"invoice_item\": \"ii_1NtH5qBHO5VeT9SUzhbifVXt\",      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1695418858,        \"start\": 1695418858      },      \"price\": {        \"id\": \"price_1NrpbEBHO5VeT9SUHp6xMwKA\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1695074844,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_Of9vdHHGRaGOio\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1000,        \"unit_amount_decimal\": \"1000\"      },      \"proration\": false,      \"proration_details\": {        \"credited_items\": null      },      \"quantity\": 1,      \"subscription\": null,      \"tax_amounts\": [],      \"tax_rates\": [],      \"type\": \"invoiceitem\",      \"unit_amount_excluding_tax\": \"1000\"    }    {...}    {...}  ],}\n```\n\n## [List all invoices](https://docs.stripe.com/api/invoices/list)\n\nYou can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.\n\n### Parameters\n\n*   Only return invoices for the customer specified by this customer ID.\n    \n*   The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://docs.stripe.com/billing/invoices/workflow#workflow-overview)\n    \n*   Only return invoices for the subscription specified by this subscription ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array invoice attachments,\n\n```\ncurl -G https://api.stripe.com/v1/invoices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoices\",  \"has_more\": false,  \"data\": [    {      \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",      \"object\": \"invoice\",      \"account_country\": \"US\",      \"account_name\": \"Stripe Docs\",      \"account_tax_ids\": null,      \"amount_due\": 0,      \"amount_paid\": 0,      \"amount_remaining\": 0,      \"amount_shipping\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"attempt_count\": 0,      \"attempted\": false,      \"auto_advance\": false,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"billing_reason\": \"manual\",      \"charge\": null,      \"collection_method\": \"charge_automatically\",      \"created\": 1680644467,      \"currency\": \"usd\",      \"custom_fields\": null,      \"customer\": \"cus_NeZwdNtLEOXuvB\",      \"customer_address\": null,      \"customer_email\": \"jennyrosen@example.com\",      \"customer_name\": \"Jenny Rosen\",      \"customer_phone\": null,      \"customer_shipping\": null,      \"customer_tax_exempt\": \"none\",      \"customer_tax_ids\": [],      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": [],      \"due_date\": null,      \"ending_balance\": null,      \"footer\": null,      \"from_invoice\": null,      \"hosted_invoice_url\": null,      \"invoice_pdf\": null,      \"issuer\": {        \"type\": \"self\"      },      \"last_finalization_error\": null,      \"latest_revision\": null,      \"lines\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"      },      \"livemode\": false,      \"metadata\": {},      \"next_payment_attempt\": null,      \"number\": null,      \"on_behalf_of\": null,      \"paid\": false,      \"paid_out_of_band\": false,      \"payment_intent\": null,      \"payment_settings\": {        \"default_mandate\": null,        \"payment_method_options\": null,        \"payment_method_types\": null      },      \"period_end\": 1680644467,      \"period_start\": 1680644467,      \"post_payment_credit_notes_amount\": 0,      \"pre_payment_credit_notes_amount\": 0,      \"quote\": null,      \"receipt_number\": null,      \"rendering_options\": null,      \"shipping_cost\": null,      \"shipping_details\": null,      \"starting_balance\": 0,      \"statement_descriptor\": null,      \"status\": \"draft\",      \"status_transitions\": {        \"finalized_at\": null,        \"marked_uncollectible_at\": null,        \"paid_at\": null,        \"voided_at\": null      },      \"subscription\": null,      \"subtotal\": 0,      \"subtotal_excluding_tax\": 0,      \"tax\": null,      \"test_clock\": null,      \"total\": 0,      \"total_discount_amounts\": [],      \"total_excluding_tax\": 0,      \"total_tax_amounts\": [],      \"transfer_data\": null,      \"webhooks_delivered_at\": 1680644467    }    {...}    {...}  ],}\n```\n\n## [Delete a draft invoice](https://docs.stripe.com/api/invoices/delete)\n\nPermanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be [voided](#void_invoice).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA successfully deleted invoice. Otherwise, this call raises [an error](#errors), such as if the invoice has already been deleted.\n\n```\ncurl -X DELETE https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"deleted\": true}\n```\n\n## [Bulk add invoice line items](https://docs.stripe.com/api/invoices/add_lines)\n\nAdds multiple line items to an invoice. This is only possible when an invoice is still a draft.\n\n### Parameters\n\n*   #### \n    \n    linesarray of objectsRequired\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe updated invoice with newly added line items is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/add\\_lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/add_lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"lines[0][description]\"=\"test description\" \\  -d \"lines[0][amount]\"=799 \\  -d \"lines[1][invoice_item]\"=ii_1NuLVd2eZvKYlo2CRWY0Hqgi\n```\n\n```\n{  \"id\": \"in_1NuhUa2eZvKYlo2CWYVhyvD9\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe.com\",  \"account_tax_ids\": null,  \"amount_due\": 998,  \"amount_paid\": 0,  \"amount_remaining\": 998,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1695758664,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_address\": null,  \"customer_email\": \"test@test.com\",  \"customer_name\": null,  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"effective_at\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1NuhUa2eZvKYlo2CC98Fg3Bo\",        \"object\": \"line_item\",        \"amount\": 799,        \"amount_excluding_tax\": 799,        \"currency\": \"usd\",        \"description\": \"test description\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuhUa2eZvKYlo2CGeF7Qgx0\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695758664,          \"start\": 1695758664        },        \"price\": {          \"id\": \"price_1NuhLA2eZvKYlo2Cq1tIGEBp\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695758080,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Oi7aO1GPi1dWX7\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 799,          \"unit_amount_decimal\": \"799\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"799\"      },      {        \"id\": \"il_1NuLVe2eZvKYlo2Canh35EfU\",        \"object\": \"line_item\",        \"amount\": 199,        \"amount_excluding_tax\": 199,        \"currency\": \"usd\",        \"description\": \"Canned Coffee\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuLVd2eZvKYlo2CRWY0Hqgi\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695674161,          \"start\": 1695674161        },        \"price\": {          \"id\": \"price_1NuI212eZvKYlo2CWgdD8kET\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695660793,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_OhhQNWDYdIbXYv\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 199,          \"unit_amount_decimal\": \"199\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"199\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/upcoming/lines?customer=cus_9s6XKzkNRiz8i3\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1688482163,  \"period_start\": 1688395763,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"redaction\": null,  \"rendering\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subscription_details\": {    \"metadata\": null  },  \"subtotal\": 998,  \"subtotal_excluding_tax\": 998,  \"tax\": null,  \"test_clock\": null,  \"total\": 998,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 998,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null}\n```\n\n## [Bulk remove invoice line items](https://docs.stripe.com/api/invoices/remove_lines)\n\nRemoves multiple line items from an invoice. This is only possible when an invoice is still a draft.\n\n### Parameters\n\n*   #### \n    \n    linesarray of objectsRequired\n    \n    The line items to remove.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe updated invoice without the removed line items is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/remove\\_lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/remove_lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"lines[0][id]\"=il_1NuhUa2eZvKYlo2CC98Fg3Bo \\  -d \"lines[0][behavior]\"=delete \\  -d \"lines[1][id]\"=il_1NuLVe2eZvKYlo2Canh35EfU \\  -d \"lines[1][behavior]\"=unassign\n```\n\n```\n{  \"id\": \"in_1NuhUa2eZvKYlo2CWYVhyvD9\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe.com\",  \"account_tax_ids\": null,  \"amount_due\": 998,  \"amount_paid\": 0,  \"amount_remaining\": 998,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1695758664,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_address\": null,  \"customer_email\": \"test@test.com\",  \"customer_name\": null,  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"effective_at\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1NuhUa2eZvKYlo2CC98Fg3Bo\",        \"object\": \"line_item\",        \"amount\": 799,        \"amount_excluding_tax\": 799,        \"currency\": \"usd\",        \"description\": \"test description\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuhUa2eZvKYlo2CGeF7Qgx0\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695758664,          \"start\": 1695758664        },        \"price\": {          \"id\": \"price_1NuhLA2eZvKYlo2Cq1tIGEBp\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695758080,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Oi7aO1GPi1dWX7\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 799,          \"unit_amount_decimal\": \"799\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"799\"      },      {        \"id\": \"il_1NuLVe2eZvKYlo2Canh35EfU\",        \"object\": \"line_item\",        \"amount\": 199,        \"amount_excluding_tax\": 199,        \"currency\": \"usd\",        \"description\": \"Canned Coffee\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuLVd2eZvKYlo2CRWY0Hqgi\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695674161,          \"start\": 1695674161        },        \"price\": {          \"id\": \"price_1NuI212eZvKYlo2CWgdD8kET\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695660793,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_OhhQNWDYdIbXYv\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 199,          \"unit_amount_decimal\": \"199\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"199\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/upcoming/lines?customer=cus_9s6XKzkNRiz8i3\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1688482163,  \"period_start\": 1688395763,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"redaction\": null,  \"rendering\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subscription_details\": {    \"metadata\": null  },  \"subtotal\": 998,  \"subtotal_excluding_tax\": 998,  \"tax\": null,  \"test_clock\": null,  \"total\": 998,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 998,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null}\n```",
    "title": "Retrieve an upcoming invoice's line items | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/list",
    "markdown": "# List all invoices | Stripe API Reference\n\nYou can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.\n\n### Parameters\n\n*   Only return invoices for the customer specified by this customer ID.\n    \n*   The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://docs.stripe.com/billing/invoices/workflow#workflow-overview)\n    \n*   Only return invoices for the subscription specified by this subscription ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array invoice attachments,\n\n```\ncurl -G https://api.stripe.com/v1/invoices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoices\",  \"has_more\": false,  \"data\": [    {      \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",      \"object\": \"invoice\",      \"account_country\": \"US\",      \"account_name\": \"Stripe Docs\",      \"account_tax_ids\": null,      \"amount_due\": 0,      \"amount_paid\": 0,      \"amount_remaining\": 0,      \"amount_shipping\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"attempt_count\": 0,      \"attempted\": false,      \"auto_advance\": false,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"billing_reason\": \"manual\",      \"charge\": null,      \"collection_method\": \"charge_automatically\",      \"created\": 1680644467,      \"currency\": \"usd\",      \"custom_fields\": null,      \"customer\": \"cus_NeZwdNtLEOXuvB\",      \"customer_address\": null,      \"customer_email\": \"jennyrosen@example.com\",      \"customer_name\": \"Jenny Rosen\",      \"customer_phone\": null,      \"customer_shipping\": null,      \"customer_tax_exempt\": \"none\",      \"customer_tax_ids\": [],      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": [],      \"due_date\": null,      \"ending_balance\": null,      \"footer\": null,      \"from_invoice\": null,      \"hosted_invoice_url\": null,      \"invoice_pdf\": null,      \"issuer\": {        \"type\": \"self\"      },      \"last_finalization_error\": null,      \"latest_revision\": null,      \"lines\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"      },      \"livemode\": false,      \"metadata\": {},      \"next_payment_attempt\": null,      \"number\": null,      \"on_behalf_of\": null,      \"paid\": false,      \"paid_out_of_band\": false,      \"payment_intent\": null,      \"payment_settings\": {        \"default_mandate\": null,        \"payment_method_options\": null,        \"payment_method_types\": null      },      \"period_end\": 1680644467,      \"period_start\": 1680644467,      \"post_payment_credit_notes_amount\": 0,      \"pre_payment_credit_notes_amount\": 0,      \"quote\": null,      \"receipt_number\": null,      \"rendering_options\": null,      \"shipping_cost\": null,      \"shipping_details\": null,      \"starting_balance\": 0,      \"statement_descriptor\": null,      \"status\": \"draft\",      \"status_transitions\": {        \"finalized_at\": null,        \"marked_uncollectible_at\": null,        \"paid_at\": null,        \"voided_at\": null      },      \"subscription\": null,      \"subtotal\": 0,      \"subtotal_excluding_tax\": 0,      \"tax\": null,      \"test_clock\": null,      \"total\": 0,      \"total_discount_amounts\": [],      \"total_excluding_tax\": 0,      \"total_tax_amounts\": [],      \"transfer_data\": null,      \"webhooks_delivered_at\": 1680644467    }    {...}    {...}  ],}\n```\n\n## [Delete a draft invoice](https://docs.stripe.com/api/invoices/delete)\n\nPermanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be [voided](#void_invoice).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA successfully deleted invoice. Otherwise, this call raises [an error](#errors), such as if the invoice has already been deleted.\n\n```\ncurl -X DELETE https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"deleted\": true}\n```\n\n## [Bulk add invoice line items](https://docs.stripe.com/api/invoices/add_lines)\n\nAdds multiple line items to an invoice. This is only possible when an invoice is still a draft.\n\n### Parameters\n\n*   #### \n    \n    linesarray of objectsRequired\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe updated invoice with newly added line items is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/add\\_lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/add_lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"lines[0][description]\"=\"test description\" \\  -d \"lines[0][amount]\"=799 \\  -d \"lines[1][invoice_item]\"=ii_1NuLVd2eZvKYlo2CRWY0Hqgi\n```\n\n```\n{  \"id\": \"in_1NuhUa2eZvKYlo2CWYVhyvD9\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe.com\",  \"account_tax_ids\": null,  \"amount_due\": 998,  \"amount_paid\": 0,  \"amount_remaining\": 998,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1695758664,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_address\": null,  \"customer_email\": \"test@test.com\",  \"customer_name\": null,  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"effective_at\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1NuhUa2eZvKYlo2CC98Fg3Bo\",        \"object\": \"line_item\",        \"amount\": 799,        \"amount_excluding_tax\": 799,        \"currency\": \"usd\",        \"description\": \"test description\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuhUa2eZvKYlo2CGeF7Qgx0\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695758664,          \"start\": 1695758664        },        \"price\": {          \"id\": \"price_1NuhLA2eZvKYlo2Cq1tIGEBp\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695758080,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Oi7aO1GPi1dWX7\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 799,          \"unit_amount_decimal\": \"799\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"799\"      },      {        \"id\": \"il_1NuLVe2eZvKYlo2Canh35EfU\",        \"object\": \"line_item\",        \"amount\": 199,        \"amount_excluding_tax\": 199,        \"currency\": \"usd\",        \"description\": \"Canned Coffee\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuLVd2eZvKYlo2CRWY0Hqgi\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695674161,          \"start\": 1695674161        },        \"price\": {          \"id\": \"price_1NuI212eZvKYlo2CWgdD8kET\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695660793,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_OhhQNWDYdIbXYv\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 199,          \"unit_amount_decimal\": \"199\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"199\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/upcoming/lines?customer=cus_9s6XKzkNRiz8i3\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1688482163,  \"period_start\": 1688395763,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"redaction\": null,  \"rendering\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subscription_details\": {    \"metadata\": null  },  \"subtotal\": 998,  \"subtotal_excluding_tax\": 998,  \"tax\": null,  \"test_clock\": null,  \"total\": 998,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 998,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null}\n```\n\n## [Bulk remove invoice line items](https://docs.stripe.com/api/invoices/remove_lines)\n\nRemoves multiple line items from an invoice. This is only possible when an invoice is still a draft.\n\n### Parameters\n\n*   #### \n    \n    linesarray of objectsRequired\n    \n    The line items to remove.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe updated invoice without the removed line items is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/remove\\_lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/remove_lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"lines[0][id]\"=il_1NuhUa2eZvKYlo2CC98Fg3Bo \\  -d \"lines[0][behavior]\"=delete \\  -d \"lines[1][id]\"=il_1NuLVe2eZvKYlo2Canh35EfU \\  -d \"lines[1][behavior]\"=unassign\n```\n\n```\n{  \"id\": \"in_1NuhUa2eZvKYlo2CWYVhyvD9\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe.com\",  \"account_tax_ids\": null,  \"amount_due\": 998,  \"amount_paid\": 0,  \"amount_remaining\": 998,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1695758664,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_address\": null,  \"customer_email\": \"test@test.com\",  \"customer_name\": null,  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"effective_at\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1NuhUa2eZvKYlo2CC98Fg3Bo\",        \"object\": \"line_item\",        \"amount\": 799,        \"amount_excluding_tax\": 799,        \"currency\": \"usd\",        \"description\": \"test description\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuhUa2eZvKYlo2CGeF7Qgx0\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695758664,          \"start\": 1695758664        },        \"price\": {          \"id\": \"price_1NuhLA2eZvKYlo2Cq1tIGEBp\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695758080,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Oi7aO1GPi1dWX7\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 799,          \"unit_amount_decimal\": \"799\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"799\"      },      {        \"id\": \"il_1NuLVe2eZvKYlo2Canh35EfU\",        \"object\": \"line_item\",        \"amount\": 199,        \"amount_excluding_tax\": 199,        \"currency\": \"usd\",        \"description\": \"Canned Coffee\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuLVd2eZvKYlo2CRWY0Hqgi\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695674161,          \"start\": 1695674161        },        \"price\": {          \"id\": \"price_1NuI212eZvKYlo2CWgdD8kET\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695660793,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_OhhQNWDYdIbXYv\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 199,          \"unit_amount_decimal\": \"199\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"199\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/upcoming/lines?customer=cus_9s6XKzkNRiz8i3\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1688482163,  \"period_start\": 1688395763,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"redaction\": null,  \"rendering\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subscription_details\": {    \"metadata\": null  },  \"subtotal\": 998,  \"subtotal_excluding_tax\": 998,  \"tax\": null,  \"test_clock\": null,  \"total\": 998,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 998,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null}\n```\n\n## [Bulk update invoice line items](https://docs.stripe.com/api/invoices/update_lines)\n\nUpdates multiple line items on an invoice. This is only possible when an invoice is still a draft.\n\n### Parameters\n\n*   #### \n    \n    linesarray of objectsRequired\n    \n    The line items to update.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. For [type=subscription](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-type) line items, the incoming metadata specified on the request is directly used to set this value, in contrast to [type=invoiceitem](https://docs.stripe.com/api/invoices/api/invoices/line_item#invoice_line_item_object-type) line items, where any existing metadata on the invoice line is merged with the incoming data.\n    \n\n### Returns\n\nThe updated invoice is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/update\\_lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/update_lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"lines[0][id]\"=il_1NuhUa2eZvKYlo2CC98Fg3Bo \\  -d \"lines[0][description]\"=\"test description\"\n```\n\n```\n{  \"id\": \"in_1NuhUa2eZvKYlo2CWYVhyvD9\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe.com\",  \"account_tax_ids\": null,  \"amount_due\": 998,  \"amount_paid\": 0,  \"amount_remaining\": 998,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1695758664,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_address\": null,  \"customer_email\": \"test@test.com\",  \"customer_name\": null,  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"effective_at\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1NuhUa2eZvKYlo2CC98Fg3Bo\",        \"object\": \"line_item\",        \"amount\": 799,        \"amount_excluding_tax\": 799,        \"currency\": \"usd\",        \"description\": \"test description\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuhUa2eZvKYlo2CGeF7Qgx0\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695758664,          \"start\": 1695758664        },        \"price\": {          \"id\": \"price_1NuhLA2eZvKYlo2Cq1tIGEBp\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695758080,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Oi7aO1GPi1dWX7\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 799,          \"unit_amount_decimal\": \"799\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"799\"      },      {        \"id\": \"il_1NuLVe2eZvKYlo2Canh35EfU\",        \"object\": \"line_item\",        \"amount\": 199,        \"amount_excluding_tax\": 199,        \"currency\": \"usd\",        \"description\": \"Canned Coffee\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuLVd2eZvKYlo2CRWY0Hqgi\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695674161,          \"start\": 1695674161        },        \"price\": {          \"id\": \"price_1NuI212eZvKYlo2CWgdD8kET\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695660793,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_OhhQNWDYdIbXYv\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 199,          \"unit_amount_decimal\": \"199\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"199\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/upcoming/lines?customer=cus_9s6XKzkNRiz8i3\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1688482163,  \"period_start\": 1688395763,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"redaction\": null,  \"rendering\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subscription_details\": {    \"metadata\": null  },  \"subtotal\": 998,  \"subtotal_excluding_tax\": 998,  \"tax\": null,  \"test_clock\": null,  \"total\": 998,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 998,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null}\n```",
    "title": "List all invoices | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/invoices/workflow",
    "markdown": "# How invoicing works | Stripe DocumentationThe Stripe Docs logo\n\n## Learn more about the basics of Stripe Invoicing.\n\nInvoices provide an itemized list of goods and services rendered, which includes the cost, quantity, and taxes. You can send invoices to customers to collect payment or you can create an invoice and automatically charge a customer’s saved payment method. [Subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") automatically generate invoices for each billing cycle. Learn more about the [invoice lifecycle for subscriptions](https://docs.stripe.com/billing/subscriptions/overview#invoice-lifecycle).\n\nWhen you create an invoice, you can select an existing [customer](https://docs.stripe.com/invoicing/customer) and [product](https://docs.stripe.com/invoicing/products-prices) or create and save new ones. You can also create one-time products that only exist on the current invoice.\n\nYou can use both the [Dashboard](https://docs.stripe.com/invoicing/dashboard) and the [API](https://docs.stripe.com/api/invoices) to create, edit, and manage invoices.\n\n## Invoice lifecycle ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter they’re created manually or as part of a subscription, invoices move through a series of statuses as they’re created and processed. Stripe calls this the automatic collection workflow.\n\nThe basic lifecycle for invoices looks like this:\n\n1.  A newly created invoice has `draft` status.\n2.  Stripe [finalizes an invoice](https://docs.stripe.com/invoicing/integration/workflow-transitions#finalized) when it’s ready to be paid by changing its status to `open`. You can no longer change most details of a finalized invoice.\n3.  Stripe can wait for the customer to pay the invoice or automatically attempt to pay it using the customer’s default payment method.\n    *   If payment succeeds, Stripe updates the invoice status to `paid`.\n    *   If payment fails, the invoice remains `open`.\n4.  Optionally, you can change the status of an unpaid invoice to `void` or `uncollectible`.\n\nYou can [configure Stripe to send customer emails](https://docs.stripe.com/invoicing/send-email) at different stages of the invoice lifecycle, such as when it finalizes an invoice or when automatic payment fails.\n\n## Invoice statuses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInvoices can have one of five statuses. The actions you can take on an invoice depend on its status.\n\n| Status | Description | Possible Actions |\n| --- | --- | --- |\n| [draft](#draft) | The invoice isn’t ready to use. All invoices start in `draft` status. | *   Edit any part of the invoice.<br>*   When the invoice is ready to use, finalize it by changing its status to `open`.<br>*   If the invoice isn’t associated with a subscription, [delete](#deleted) it. |\n| [open](#open) | The invoice is finalized and awaiting payment. | *   Send the invoice to a customer for payment.<br>*   Change [only some elements of the invoice](https://docs.stripe.com/invoicing/invoice-edits). To make more substantive changes, create a new invoice and void the old one.<br>*   Change the invoice’s status to `paid`, `void`, or `uncollectible`. |\n| [paid](#paid) | This invoice is paid. | *   No further actions. |\n| [void](#void) | This invoice is canceled. | *   No further actions. |\n| [uncollectible](#uncollectible) | The customer is unlikely to pay the invoice. Normally, you treat it as bad debt in your accounting process. | *   Change the invoice’s status to `void` or `paid`. |\n\n### Draft invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can update almost any details of a `draft` invoice. You can also delete it, unless it’s associated with a subscription. When a `draft` invoice is ready to send for payment, you finalize it by changing its status to `open`.\n\nYou can delete a `draft` invoice. You can’t recover a deleted invoice.\n\n1.  Go to the [Invoices page](https://dashboard.stripe.com/test/invoices).\n    \n2.  Click the overflow menu () next to the invoice.\n    \n3.  Click **Delete draft**.\n    \n\n### Open invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe invoice has been finalized and is awaiting customer payment. If its amount due is less than the [minimum chargeable amount](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), it automatically transitions to `paid` status and Stripe debits the amount from the [customer’s credit balance](https://docs.stripe.com/billing/customer/balance).\n\nIn the Dashboard, invoices in `open` status can display a different badge, such as `Past due` or `Retrying`. In some scenarios, you can hover over the badge to view an explanatory tooltip.\n\nIf an open non-subscription invoice is waiting for a payment that’s initiated but still pending, it shows the `Pending` badge in the list of invoices. However, its details page shows the `Open` badge.\n\nYou can update only a few elements of an open invoice, such as the memo or metadata. To make more substantive changes, you must [revise the invoice](https://docs.stripe.com/invoicing/invoice-edits) by replacing it with a new one.\n\nYou can’t delete a finalized invoice. To cancel it, change its status to `void`.\n\n### Paid invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe customer has paid the invoice. This status is terminal, which means that the invoice’s status can never change.\n\nTo attempt a payment through the Dashboard, open the [Invoice details page](https://docs.stripe.com/invoicing/dashboard/manage-invoices#invoice-details-page) and click **Charge customer**.\n\n#### Out of band invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf a customer pays an invoice out of band (outside of Stripe), you can manually change the [status](#invoice-statuses) to `paid` through the Dashboard or API.\n\nTo manually mark an open invoice as paid in the Dashboard, go to the **Invoice details** page, click **More** and select **Change invoice status**. In the resulting dialog, select the **Paid** option.\n\n### Void invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nVoiding an invoice is conceptually similar to deleting or canceling it. However, voiding an invoice maintains a paper trail, which allows you to look up the invoice by number. Voided invoices are treated as zero-value for reporting purposes, and aren’t payable. This status is terminal, which means that the invoice’s status can never change.\n\nAfter you void an invoice, the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page) is still accessible, and displays a message indicating that the invoice has been voided. You can only void an invoice in `open` or `uncollectible` status.\n\n#### Note\n\nConsult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to [issue another invoice](https://docs.stripe.com/invoicing/integration#create-invoice-code) or [credit note](https://docs.stripe.com/invoicing/integration/programmatic-credit-notes) instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.\n\nTo void an invoice from the Dashboard:\n\n1.  Go to the **Invoice details** page.\n    \n2.  Click **More** and select **Change invoice status**.\n    \n3.  In the resulting dialog, select **Void**.\n    \n\n### Uncollectible invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSometimes your customers can’t pay their outstanding bills. For example, assume that you provide 1,000 USD worth of services to your customer, but they’ve since declared bankruptcy and have no assets to pay the invoice.\n\nAs a result, you decide to write off the invoice as unlikely to be paid. In this case, you can update the status of the invoice to be `uncollectible`. This allows you to track the amount owed for reporting purposes as part of your bad debt accounting process.\n\nYou can mark an open invoice as uncollectible through the **Invoice details** page by clicking **Change invoice status**.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Use the Dashboard](https://docs.stripe.com/invoicing/dashboard)\n*   [Integrate with the API](https://docs.stripe.com/invoicing/integration)\n*   [Status transitions and finalization](https://docs.stripe.com/invoicing/integration/workflow-transitions)",
    "title": "How invoicing works | Stripe Documentation",
    "description": "Learn more about the basics of Stripe Invoicing.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/search",
    "markdown": "# Search invoices | Stripe API Reference\n\nSearch for invoices you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` invoices. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\n```\ncurl -G https://api.stripe.com/v1/invoices/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d query=\"total<1\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/invoices/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",      \"object\": \"invoice\",      \"account_country\": \"US\",      \"account_name\": \"Stripe Docs\",      \"account_tax_ids\": null,      \"amount_due\": 0,      \"amount_paid\": 0,      \"amount_remaining\": 0,      \"amount_shipping\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"attempt_count\": 0,      \"attempted\": false,      \"auto_advance\": false,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"billing_reason\": \"manual\",      \"charge\": null,      \"collection_method\": \"charge_automatically\",      \"created\": 1680644467,      \"currency\": \"usd\",      \"custom_fields\": null,      \"customer\": \"cus_NeZwdNtLEOXuvB\",      \"customer_address\": null,      \"customer_email\": \"jennyrosen@example.com\",      \"customer_name\": \"Jenny Rosen\",      \"customer_phone\": null,      \"customer_shipping\": null,      \"customer_tax_exempt\": \"none\",      \"customer_tax_ids\": [],      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": [],      \"due_date\": null,      \"ending_balance\": null,      \"footer\": null,      \"from_invoice\": null,      \"hosted_invoice_url\": null,      \"invoice_pdf\": null,      \"issuer\": {        \"type\": \"self\"      },      \"last_finalization_error\": null,      \"latest_revision\": null,      \"lines\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"      },      \"livemode\": false,      \"metadata\": {},      \"next_payment_attempt\": null,      \"number\": null,      \"on_behalf_of\": null,      \"paid\": false,      \"paid_out_of_band\": false,      \"payment_intent\": null,      \"payment_settings\": {        \"default_mandate\": null,        \"payment_method_options\": null,        \"payment_method_types\": null      },      \"period_end\": 1680644467,      \"period_start\": 1680644467,      \"post_payment_credit_notes_amount\": 0,      \"pre_payment_credit_notes_amount\": 0,      \"quote\": null,      \"receipt_number\": null,      \"rendering_options\": null,      \"shipping_cost\": null,      \"shipping_details\": null,      \"starting_balance\": 0,      \"statement_descriptor\": null,      \"status\": \"draft\",      \"status_transitions\": {        \"finalized_at\": null,        \"marked_uncollectible_at\": null,        \"paid_at\": null,        \"voided_at\": null      },      \"subscription\": null,      \"subtotal\": 0,      \"subtotal_excluding_tax\": 0,      \"tax\": null,      \"test_clock\": null,      \"total\": 0,      \"total_discount_amounts\": [],      \"total_excluding_tax\": 0,      \"total_tax_amounts\": [],      \"transfer_data\": null,      \"webhooks_delivered_at\": 1680644467    }    {...}    {...}  ],}\n```\n\n## [Send an invoice for manual payment](https://docs.stripe.com/api/invoices/send)\n\nStripe will automatically send invoices to customers according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.\n\nRequests made in test-mode result in no emails being sent, despite sending an `invoice.sent` event.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/send\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ixJlveR2DO/send \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ixJlveR2DO\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwvqcz9Sh2uw\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3SDR0Q1Q4U1N0YkVjY2lvSmRoRGppU3E1eGVJLDcxMTgyMTA10200hQIJrDM1?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3SDR0Q1Q4U1N0YkVjY2lvSmRoRGppU3E1eGVJLDcxMTgyMTA10200hQIJrDM1/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ixJlveR2DO/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"3AB9C0CA-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```\n\n## [Void an invoice](https://docs.stripe.com/api/invoices/void)\n\nMark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to [deletion](#delete_invoice), however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.\n\nConsult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to [issue another invoice](#create_invoice) or [credit note](#create_credit_note) instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the voided invoice object.\n\nPOST /v1/invoices/:id/void\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/void \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"void\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Search invoices | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/currencies/conversions",
    "markdown": "# Currency conversions | Stripe DocumentationThe Stripe Docs logo\n\n## Learn more about how Stripe handles currency conversions for you.\n\nStripe supports processing charges in [135+ currencies](https://docs.stripe.com/currencies) allowing you to present prices in a customer’s native currency. Doing so can improve sales and help customers avoid conversion costs. In order to present prices in your customer’s currency, you need to specify the _presentment_ currency when [creating a PaymentIntent](https://docs.stripe.com/api/payment_intents/create) or a [charge](https://docs.stripe.com/api/charges/create).\n\nPayments automatically convert to your default settlement currency. Stripe uses the exchange rate at the time of the charge to protect your earnings from rate fluctuations between the payment and your anticipated payouts.\n\nIn certain countries, Stripe might support settlement in additional currencies. If you have liquidity needs in additional currencies, you can enable settlement in those currencies and add a bank account in the [payout settings of your dashboard](https://dashboard.stripe.com/account/payouts).\n\n#### Note\n\nCheckout and Payment Links automatically convert this price to an international customer’s local currency based on their location. Learn more about [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing).\n\n## Calculating foreign exchange rates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen Stripe provides currency conversion services for transactions, Stripe generally applies the mid-market rate based on pricing data sourced from third-party service providers. Mid-market rate is the average between the buy and the sell price of a currency. Currency conversion on Stripe is subject to fees as detailed on [our pricing page](https://stripe.com/pricing).\n\nIn certain circumstances, Stripe might apply the rate at which we source the currency owed to you. For example, this can happen if a new exchange rate is mandated by a government or if there is a large discrepancy in rates between our service providers. Stripe does so to mitigate exchange rate risk to you and to Stripe. Rarely, Stripe may take other actions to mitigate risk. If we do so, we’ll provide additional notice to you.\n\nYou can check the current rate for currency conversions on Stripe using our [estimation page](https://dashboard.stripe.com/currency_conversion). You can also see the actual exchange rate applied in a transaction through the [API](https://docs.stripe.com/api/balance_transactions/object#balance_transaction_object-exchange_rate) or in your [Dashboard](https://dashboard.stripe.com/test/payments). Note that the estimation page shows the baseline exchange rate and excludes the Stripe fees for currency conversion which is incremental to this rate.\n\n## Conversions on disputes and refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf a currency-converted payment is disputed or refunded, the amount you received is converted back to the [presentment currency](https://docs.stripe.com/currencies#presentment-currencies \"presentment currency\") at the current exchange rate. Exchange rates fluctuate with the market, so the rate used during the payment often differs from the rate used when a dispute or refund occurs. The amount deducted from your merchant balance depends on the current rate and this amount might be more or less than the original payment. The customer is always refunded the exact amount they paid and in the currency they paid in, regardless of any rate fluctuations.\n\nFor example, if your settlement currency is EUR and you process a 60 USD payment at a rate of 0.88 EUR per 1 USD, the converted amount is 52.80 EUR (excluding the Stripe fee). If the rate is 0.86 EUR per 1 USD at the time of refund, the amount deducted from your account balance is only 51.60 EUR.\n\n## Countries with foreign exchange control![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRemittance to or from countries with foreign exchange control (including, but not limited to, Brazil) is carried out exclusively through authorized channels, pursuant to the legislation applicable in those countries.\n\n## Additional settlement currencies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn some countries, additional currencies might be enabled for settlement. If you have liquidity needs in additional currencies, you can enable or disable these on the [payout settings of your dashboard](https://dashboard.stripe.com/account/payouts). If there are multiple bank accounts available for a given currency, Stripe uses the one set as `default_for_currency` for settlement and payouts.\n\nIf you have accumulated a balance in a currency without an associated bank account, a conversion occurs if you create a manual payout in that currency.\n\n`curl https://api.stripe.com/v1/payouts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=xaf`\n\nAs long as there are sufficient funds in the balance for the specified currency, Stripe automatically converts the funds to the default bank account’s currency.\n\n#### Note\n\nIf you enable a currency as a settlement currency by mistake, you can pay out funds in your default currency using a manual payout, then disable the accidental settlement currency so you don’t continue to accrue funds in that currency.\n\n## Conversions on Stripe fees ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you incur a Stripe fee in a currency for which you don’t have a linked bank account, we automatically convert that fee to your default settlement currency at the time the fee is incurred before charging you. This conversion uses the baseline exchange rate and does not incur any additional fees. For example, if you’re a Stripe Billing user whose default currency is USD, you might incur the 0.5% variable fee when you present in a non-USD currency. If you have a subscriber to whom you present in EUR for their monthly [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") of 100 EUR, we convert that 0.50 EUR Stripe Billing fee to USD at the baseline rate at the time of the charge at no additional conversion cost to you.",
    "title": "Currency conversions | Stripe Documentation",
    "description": "Learn more about how Stripe handles currency conversions for you.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/delete",
    "markdown": "# Delete a draft invoice | Stripe API Reference\n\nPermanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be [voided](#void_invoice).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA successfully deleted invoice. Otherwise, this call raises [an error](#errors), such as if the invoice has already been deleted.\n\n```\ncurl -X DELETE https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"deleted\": true}\n```\n\n## [Bulk add invoice line items](https://docs.stripe.com/api/invoices/add_lines)\n\nAdds multiple line items to an invoice. This is only possible when an invoice is still a draft.\n\n### Parameters\n\n*   #### \n    \n    linesarray of objectsRequired\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe updated invoice with newly added line items is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/add\\_lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/add_lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"lines[0][description]\"=\"test description\" \\  -d \"lines[0][amount]\"=799 \\  -d \"lines[1][invoice_item]\"=ii_1NuLVd2eZvKYlo2CRWY0Hqgi\n```\n\n```\n{  \"id\": \"in_1NuhUa2eZvKYlo2CWYVhyvD9\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe.com\",  \"account_tax_ids\": null,  \"amount_due\": 998,  \"amount_paid\": 0,  \"amount_remaining\": 998,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1695758664,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_address\": null,  \"customer_email\": \"test@test.com\",  \"customer_name\": null,  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"effective_at\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1NuhUa2eZvKYlo2CC98Fg3Bo\",        \"object\": \"line_item\",        \"amount\": 799,        \"amount_excluding_tax\": 799,        \"currency\": \"usd\",        \"description\": \"test description\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuhUa2eZvKYlo2CGeF7Qgx0\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695758664,          \"start\": 1695758664        },        \"price\": {          \"id\": \"price_1NuhLA2eZvKYlo2Cq1tIGEBp\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695758080,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Oi7aO1GPi1dWX7\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 799,          \"unit_amount_decimal\": \"799\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"799\"      },      {        \"id\": \"il_1NuLVe2eZvKYlo2Canh35EfU\",        \"object\": \"line_item\",        \"amount\": 199,        \"amount_excluding_tax\": 199,        \"currency\": \"usd\",        \"description\": \"Canned Coffee\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuLVd2eZvKYlo2CRWY0Hqgi\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695674161,          \"start\": 1695674161        },        \"price\": {          \"id\": \"price_1NuI212eZvKYlo2CWgdD8kET\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695660793,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_OhhQNWDYdIbXYv\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 199,          \"unit_amount_decimal\": \"199\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"199\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/upcoming/lines?customer=cus_9s6XKzkNRiz8i3\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1688482163,  \"period_start\": 1688395763,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"redaction\": null,  \"rendering\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subscription_details\": {    \"metadata\": null  },  \"subtotal\": 998,  \"subtotal_excluding_tax\": 998,  \"tax\": null,  \"test_clock\": null,  \"total\": 998,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 998,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null}\n```\n\n## [Bulk remove invoice line items](https://docs.stripe.com/api/invoices/remove_lines)\n\nRemoves multiple line items from an invoice. This is only possible when an invoice is still a draft.\n\n### Parameters\n\n*   #### \n    \n    linesarray of objectsRequired\n    \n    The line items to remove.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe updated invoice without the removed line items is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/remove\\_lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/remove_lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"lines[0][id]\"=il_1NuhUa2eZvKYlo2CC98Fg3Bo \\  -d \"lines[0][behavior]\"=delete \\  -d \"lines[1][id]\"=il_1NuLVe2eZvKYlo2Canh35EfU \\  -d \"lines[1][behavior]\"=unassign\n```\n\n```\n{  \"id\": \"in_1NuhUa2eZvKYlo2CWYVhyvD9\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe.com\",  \"account_tax_ids\": null,  \"amount_due\": 998,  \"amount_paid\": 0,  \"amount_remaining\": 998,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1695758664,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_address\": null,  \"customer_email\": \"test@test.com\",  \"customer_name\": null,  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"effective_at\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1NuhUa2eZvKYlo2CC98Fg3Bo\",        \"object\": \"line_item\",        \"amount\": 799,        \"amount_excluding_tax\": 799,        \"currency\": \"usd\",        \"description\": \"test description\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuhUa2eZvKYlo2CGeF7Qgx0\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695758664,          \"start\": 1695758664        },        \"price\": {          \"id\": \"price_1NuhLA2eZvKYlo2Cq1tIGEBp\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695758080,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Oi7aO1GPi1dWX7\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 799,          \"unit_amount_decimal\": \"799\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"799\"      },      {        \"id\": \"il_1NuLVe2eZvKYlo2Canh35EfU\",        \"object\": \"line_item\",        \"amount\": 199,        \"amount_excluding_tax\": 199,        \"currency\": \"usd\",        \"description\": \"Canned Coffee\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuLVd2eZvKYlo2CRWY0Hqgi\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695674161,          \"start\": 1695674161        },        \"price\": {          \"id\": \"price_1NuI212eZvKYlo2CWgdD8kET\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695660793,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_OhhQNWDYdIbXYv\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 199,          \"unit_amount_decimal\": \"199\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"199\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/upcoming/lines?customer=cus_9s6XKzkNRiz8i3\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1688482163,  \"period_start\": 1688395763,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"redaction\": null,  \"rendering\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subscription_details\": {    \"metadata\": null  },  \"subtotal\": 998,  \"subtotal_excluding_tax\": 998,  \"tax\": null,  \"test_clock\": null,  \"total\": 998,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 998,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null}\n```\n\n## [Bulk update invoice line items](https://docs.stripe.com/api/invoices/update_lines)\n\nUpdates multiple line items on an invoice. This is only possible when an invoice is still a draft.\n\n### Parameters\n\n*   #### \n    \n    linesarray of objectsRequired\n    \n    The line items to update.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. For [type=subscription](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-type) line items, the incoming metadata specified on the request is directly used to set this value, in contrast to [type=invoiceitem](https://docs.stripe.com/api/invoices/api/invoices/line_item#invoice_line_item_object-type) line items, where any existing metadata on the invoice line is merged with the incoming data.\n    \n\n### Returns\n\nThe updated invoice is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/update\\_lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/update_lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"lines[0][id]\"=il_1NuhUa2eZvKYlo2CC98Fg3Bo \\  -d \"lines[0][description]\"=\"test description\"\n```\n\n```\n{  \"id\": \"in_1NuhUa2eZvKYlo2CWYVhyvD9\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe.com\",  \"account_tax_ids\": null,  \"amount_due\": 998,  \"amount_paid\": 0,  \"amount_remaining\": 998,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1695758664,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_address\": null,  \"customer_email\": \"test@test.com\",  \"customer_name\": null,  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"effective_at\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1NuhUa2eZvKYlo2CC98Fg3Bo\",        \"object\": \"line_item\",        \"amount\": 799,        \"amount_excluding_tax\": 799,        \"currency\": \"usd\",        \"description\": \"test description\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuhUa2eZvKYlo2CGeF7Qgx0\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695758664,          \"start\": 1695758664        },        \"price\": {          \"id\": \"price_1NuhLA2eZvKYlo2Cq1tIGEBp\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695758080,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Oi7aO1GPi1dWX7\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 799,          \"unit_amount_decimal\": \"799\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"799\"      },      {        \"id\": \"il_1NuLVe2eZvKYlo2Canh35EfU\",        \"object\": \"line_item\",        \"amount\": 199,        \"amount_excluding_tax\": 199,        \"currency\": \"usd\",        \"description\": \"Canned Coffee\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuLVd2eZvKYlo2CRWY0Hqgi\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695674161,          \"start\": 1695674161        },        \"price\": {          \"id\": \"price_1NuI212eZvKYlo2CWgdD8kET\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695660793,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_OhhQNWDYdIbXYv\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 199,          \"unit_amount_decimal\": \"199\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"199\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/upcoming/lines?customer=cus_9s6XKzkNRiz8i3\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1688482163,  \"period_start\": 1688395763,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"redaction\": null,  \"rendering\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subscription_details\": {    \"metadata\": null  },  \"subtotal\": 998,  \"subtotal_excluding_tax\": 998,  \"tax\": null,  \"test_clock\": null,  \"total\": 998,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 998,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null}\n```\n\n## [Finalize an invoice](https://docs.stripe.com/api/invoices/finalize)\n\nStripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.\n\n### Parameters\n\n*   Controls whether Stripe performs [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice’s state doesn’t automatically advance without an explicit action.\n    \n\n### Returns\n\nReturns an invoice object with `status=open`.\n\nPOST /v1/invoices/:id/finalize\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/finalize \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZw0zvTyquTfF\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"9545A614-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```",
    "title": "Delete a draft invoice | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/add_lines",
    "markdown": "# Bulk add invoice line items\n\nAdds multiple line items to an invoice. This is only possible when an invoice is still a draft.\n\n### Parameters\n\n*   #### \n    \n    linesarray of objectsRequired\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe updated invoice with newly added line items is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/add\\_lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/add_lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"lines[0][description]\"=\"test description\" \\  -d \"lines[0][amount]\"=799 \\  -d \"lines[1][invoice_item]\"=ii_1NuLVd2eZvKYlo2CRWY0Hqgi\n```\n\n```\n{  \"id\": \"in_1NuhUa2eZvKYlo2CWYVhyvD9\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe.com\",  \"account_tax_ids\": null,  \"amount_due\": 998,  \"amount_paid\": 0,  \"amount_remaining\": 998,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1695758664,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_address\": null,  \"customer_email\": \"test@test.com\",  \"customer_name\": null,  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"effective_at\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1NuhUa2eZvKYlo2CC98Fg3Bo\",        \"object\": \"line_item\",        \"amount\": 799,        \"amount_excluding_tax\": 799,        \"currency\": \"usd\",        \"description\": \"test description\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuhUa2eZvKYlo2CGeF7Qgx0\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695758664,          \"start\": 1695758664        },        \"price\": {          \"id\": \"price_1NuhLA2eZvKYlo2Cq1tIGEBp\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695758080,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Oi7aO1GPi1dWX7\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 799,          \"unit_amount_decimal\": \"799\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"799\"      },      {        \"id\": \"il_1NuLVe2eZvKYlo2Canh35EfU\",        \"object\": \"line_item\",        \"amount\": 199,        \"amount_excluding_tax\": 199,        \"currency\": \"usd\",        \"description\": \"Canned Coffee\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuLVd2eZvKYlo2CRWY0Hqgi\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695674161,          \"start\": 1695674161        },        \"price\": {          \"id\": \"price_1NuI212eZvKYlo2CWgdD8kET\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695660793,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_OhhQNWDYdIbXYv\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 199,          \"unit_amount_decimal\": \"199\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"199\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/upcoming/lines?customer=cus_9s6XKzkNRiz8i3\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1688482163,  \"period_start\": 1688395763,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"redaction\": null,  \"rendering\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subscription_details\": {    \"metadata\": null  },  \"subtotal\": 998,  \"subtotal_excluding_tax\": 998,  \"tax\": null,  \"test_clock\": null,  \"total\": 998,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 998,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null}\n```\n\n## [Bulk remove invoice line items](https://docs.stripe.com/api/invoices/remove_lines)\n\nRemoves multiple line items from an invoice. This is only possible when an invoice is still a draft.\n\n### Parameters\n\n*   #### \n    \n    linesarray of objectsRequired\n    \n    The line items to remove.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe updated invoice without the removed line items is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/remove\\_lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/remove_lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"lines[0][id]\"=il_1NuhUa2eZvKYlo2CC98Fg3Bo \\  -d \"lines[0][behavior]\"=delete \\  -d \"lines[1][id]\"=il_1NuLVe2eZvKYlo2Canh35EfU \\  -d \"lines[1][behavior]\"=unassign\n```\n\n```\n{  \"id\": \"in_1NuhUa2eZvKYlo2CWYVhyvD9\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe.com\",  \"account_tax_ids\": null,  \"amount_due\": 998,  \"amount_paid\": 0,  \"amount_remaining\": 998,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1695758664,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_address\": null,  \"customer_email\": \"test@test.com\",  \"customer_name\": null,  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"effective_at\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1NuhUa2eZvKYlo2CC98Fg3Bo\",        \"object\": \"line_item\",        \"amount\": 799,        \"amount_excluding_tax\": 799,        \"currency\": \"usd\",        \"description\": \"test description\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuhUa2eZvKYlo2CGeF7Qgx0\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695758664,          \"start\": 1695758664        },        \"price\": {          \"id\": \"price_1NuhLA2eZvKYlo2Cq1tIGEBp\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695758080,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Oi7aO1GPi1dWX7\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 799,          \"unit_amount_decimal\": \"799\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"799\"      },      {        \"id\": \"il_1NuLVe2eZvKYlo2Canh35EfU\",        \"object\": \"line_item\",        \"amount\": 199,        \"amount_excluding_tax\": 199,        \"currency\": \"usd\",        \"description\": \"Canned Coffee\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuLVd2eZvKYlo2CRWY0Hqgi\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695674161,          \"start\": 1695674161        },        \"price\": {          \"id\": \"price_1NuI212eZvKYlo2CWgdD8kET\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695660793,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_OhhQNWDYdIbXYv\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 199,          \"unit_amount_decimal\": \"199\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"199\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/upcoming/lines?customer=cus_9s6XKzkNRiz8i3\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1688482163,  \"period_start\": 1688395763,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"redaction\": null,  \"rendering\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subscription_details\": {    \"metadata\": null  },  \"subtotal\": 998,  \"subtotal_excluding_tax\": 998,  \"tax\": null,  \"test_clock\": null,  \"total\": 998,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 998,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null}\n```\n\n## [Bulk update invoice line items](https://docs.stripe.com/api/invoices/update_lines)\n\nUpdates multiple line items on an invoice. This is only possible when an invoice is still a draft.\n\n### Parameters\n\n*   #### \n    \n    linesarray of objectsRequired\n    \n    The line items to update.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. For [type=subscription](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-type) line items, the incoming metadata specified on the request is directly used to set this value, in contrast to [type=invoiceitem](https://docs.stripe.com/api/invoices/api/invoices/line_item#invoice_line_item_object-type) line items, where any existing metadata on the invoice line is merged with the incoming data.\n    \n\n### Returns\n\nThe updated invoice is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/update\\_lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/update_lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"lines[0][id]\"=il_1NuhUa2eZvKYlo2CC98Fg3Bo \\  -d \"lines[0][description]\"=\"test description\"\n```\n\n```\n{  \"id\": \"in_1NuhUa2eZvKYlo2CWYVhyvD9\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe.com\",  \"account_tax_ids\": null,  \"amount_due\": 998,  \"amount_paid\": 0,  \"amount_remaining\": 998,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1695758664,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_address\": null,  \"customer_email\": \"test@test.com\",  \"customer_name\": null,  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"effective_at\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1NuhUa2eZvKYlo2CC98Fg3Bo\",        \"object\": \"line_item\",        \"amount\": 799,        \"amount_excluding_tax\": 799,        \"currency\": \"usd\",        \"description\": \"test description\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuhUa2eZvKYlo2CGeF7Qgx0\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695758664,          \"start\": 1695758664        },        \"price\": {          \"id\": \"price_1NuhLA2eZvKYlo2Cq1tIGEBp\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695758080,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Oi7aO1GPi1dWX7\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 799,          \"unit_amount_decimal\": \"799\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"799\"      },      {        \"id\": \"il_1NuLVe2eZvKYlo2Canh35EfU\",        \"object\": \"line_item\",        \"amount\": 199,        \"amount_excluding_tax\": 199,        \"currency\": \"usd\",        \"description\": \"Canned Coffee\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuLVd2eZvKYlo2CRWY0Hqgi\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695674161,          \"start\": 1695674161        },        \"price\": {          \"id\": \"price_1NuI212eZvKYlo2CWgdD8kET\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695660793,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_OhhQNWDYdIbXYv\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 199,          \"unit_amount_decimal\": \"199\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"199\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/upcoming/lines?customer=cus_9s6XKzkNRiz8i3\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1688482163,  \"period_start\": 1688395763,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"redaction\": null,  \"rendering\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subscription_details\": {    \"metadata\": null  },  \"subtotal\": 998,  \"subtotal_excluding_tax\": 998,  \"tax\": null,  \"test_clock\": null,  \"total\": 998,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 998,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null}\n```\n\n## [Finalize an invoice](https://docs.stripe.com/api/invoices/finalize)\n\nStripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.\n\n### Parameters\n\n*   Controls whether Stripe performs [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice’s state doesn’t automatically advance without an explicit action.\n    \n\n### Returns\n\nReturns an invoice object with `status=open`.\n\nPOST /v1/invoices/:id/finalize\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/finalize \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZw0zvTyquTfF\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"9545A614-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```\n\n## [Mark an invoice as uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)\n\nMarking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/mark\\_uncollectible\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtG0nLkdIwHu7ixAaUw3Cb4/mark_uncollectible \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtG0nLkdIwHu7ixAaUw3Cb4\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 599,  \"amount_paid\": 0,  \"amount_remaining\": 599,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680638365,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZw0zvTyquTfF\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [    {      \"type\": \"eu_vat\",      \"value\": \"DE123456789\"    },    {      \"type\": \"eu_vat\",      \"value\": \"DE123456781\"    }  ],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1MtG0nLkdIwHu7ix3eCoIIw7\",        \"object\": \"line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"currency\": \"usd\",        \"description\": \"My First Invoice Item (created for API docs)\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1MtG0nLkdIwHu7ixDqfiUgg8\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1680638365,          \"start\": 1680638365        },        \"price\": {          \"id\": \"price_1Mr89PLkdIwHu7ixf5QhiWm2\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1680131491,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NcMtLgctyqlJDC\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/in_1MtG0nLkdIwHu7ixAaUw3Cb4/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680638365,  \"period_start\": 1680638365,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": -500,  \"statement_descriptor\": null,  \"status\": \"uncollectible\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax\": null,  \"test_clock\": null,  \"total\": 1099,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 1099,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null,  \"closed\": true,  \"forgiven\": true}\n```",
    "title": "Bulk add invoice line items | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/update_lines",
    "markdown": "# Bulk update invoice line items\n\nUpdates multiple line items on an invoice. This is only possible when an invoice is still a draft.\n\n### Parameters\n\n*   #### \n    \n    linesarray of objectsRequired\n    \n    The line items to update.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. For [type=subscription](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-type) line items, the incoming metadata specified on the request is directly used to set this value, in contrast to [type=invoiceitem](https://docs.stripe.com/api/invoices/api/invoices/line_item#invoice_line_item_object-type) line items, where any existing metadata on the invoice line is merged with the incoming data.\n    \n\n### Returns\n\nThe updated invoice is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/update\\_lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/update_lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"lines[0][id]\"=il_1NuhUa2eZvKYlo2CC98Fg3Bo \\  -d \"lines[0][description]\"=\"test description\"\n```\n\n```\n{  \"id\": \"in_1NuhUa2eZvKYlo2CWYVhyvD9\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe.com\",  \"account_tax_ids\": null,  \"amount_due\": 998,  \"amount_paid\": 0,  \"amount_remaining\": 998,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1695758664,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_address\": null,  \"customer_email\": \"test@test.com\",  \"customer_name\": null,  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"effective_at\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1NuhUa2eZvKYlo2CC98Fg3Bo\",        \"object\": \"line_item\",        \"amount\": 799,        \"amount_excluding_tax\": 799,        \"currency\": \"usd\",        \"description\": \"test description\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuhUa2eZvKYlo2CGeF7Qgx0\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695758664,          \"start\": 1695758664        },        \"price\": {          \"id\": \"price_1NuhLA2eZvKYlo2Cq1tIGEBp\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695758080,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Oi7aO1GPi1dWX7\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 799,          \"unit_amount_decimal\": \"799\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"799\"      },      {        \"id\": \"il_1NuLVe2eZvKYlo2Canh35EfU\",        \"object\": \"line_item\",        \"amount\": 199,        \"amount_excluding_tax\": 199,        \"currency\": \"usd\",        \"description\": \"Canned Coffee\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1NuLVd2eZvKYlo2CRWY0Hqgi\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1695674161,          \"start\": 1695674161        },        \"price\": {          \"id\": \"price_1NuI212eZvKYlo2CWgdD8kET\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1695660793,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_OhhQNWDYdIbXYv\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 199,          \"unit_amount_decimal\": \"199\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"199\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/upcoming/lines?customer=cus_9s6XKzkNRiz8i3\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1688482163,  \"period_start\": 1688395763,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"redaction\": null,  \"rendering\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subscription_details\": {    \"metadata\": null  },  \"subtotal\": 998,  \"subtotal_excluding_tax\": 998,  \"tax\": null,  \"test_clock\": null,  \"total\": 998,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 998,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null}\n```\n\n## [Finalize an invoice](https://docs.stripe.com/api/invoices/finalize)\n\nStripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.\n\n### Parameters\n\n*   Controls whether Stripe performs [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice’s state doesn’t automatically advance without an explicit action.\n    \n\n### Returns\n\nReturns an invoice object with `status=open`.\n\nPOST /v1/invoices/:id/finalize\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/finalize \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZw0zvTyquTfF\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"9545A614-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```\n\n## [Mark an invoice as uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)\n\nMarking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/mark\\_uncollectible\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtG0nLkdIwHu7ixAaUw3Cb4/mark_uncollectible \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtG0nLkdIwHu7ixAaUw3Cb4\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 599,  \"amount_paid\": 0,  \"amount_remaining\": 599,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680638365,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZw0zvTyquTfF\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [    {      \"type\": \"eu_vat\",      \"value\": \"DE123456789\"    },    {      \"type\": \"eu_vat\",      \"value\": \"DE123456781\"    }  ],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1MtG0nLkdIwHu7ix3eCoIIw7\",        \"object\": \"line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"currency\": \"usd\",        \"description\": \"My First Invoice Item (created for API docs)\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1MtG0nLkdIwHu7ixDqfiUgg8\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1680638365,          \"start\": 1680638365        },        \"price\": {          \"id\": \"price_1Mr89PLkdIwHu7ixf5QhiWm2\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1680131491,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NcMtLgctyqlJDC\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/in_1MtG0nLkdIwHu7ixAaUw3Cb4/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680638365,  \"period_start\": 1680638365,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": -500,  \"statement_descriptor\": null,  \"status\": \"uncollectible\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax\": null,  \"test_clock\": null,  \"total\": 1099,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 1099,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null,  \"closed\": true,  \"forgiven\": true}\n```\n\n## [Pay an invoice](https://docs.stripe.com/api/invoices/pay)\n\nStripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/pay\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/pay \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZw0zvTyquTfF\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"9545A614-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```\n\n## [Search invoices](https://docs.stripe.com/api/invoices/search)\n\nSearch for invoices you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` invoices. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\n```\ncurl -G https://api.stripe.com/v1/invoices/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d query=\"total<1\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/invoices/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",      \"object\": \"invoice\",      \"account_country\": \"US\",      \"account_name\": \"Stripe Docs\",      \"account_tax_ids\": null,      \"amount_due\": 0,      \"amount_paid\": 0,      \"amount_remaining\": 0,      \"amount_shipping\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"attempt_count\": 0,      \"attempted\": false,      \"auto_advance\": false,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"billing_reason\": \"manual\",      \"charge\": null,      \"collection_method\": \"charge_automatically\",      \"created\": 1680644467,      \"currency\": \"usd\",      \"custom_fields\": null,      \"customer\": \"cus_NeZwdNtLEOXuvB\",      \"customer_address\": null,      \"customer_email\": \"jennyrosen@example.com\",      \"customer_name\": \"Jenny Rosen\",      \"customer_phone\": null,      \"customer_shipping\": null,      \"customer_tax_exempt\": \"none\",      \"customer_tax_ids\": [],      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": [],      \"due_date\": null,      \"ending_balance\": null,      \"footer\": null,      \"from_invoice\": null,      \"hosted_invoice_url\": null,      \"invoice_pdf\": null,      \"issuer\": {        \"type\": \"self\"      },      \"last_finalization_error\": null,      \"latest_revision\": null,      \"lines\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"      },      \"livemode\": false,      \"metadata\": {},      \"next_payment_attempt\": null,      \"number\": null,      \"on_behalf_of\": null,      \"paid\": false,      \"paid_out_of_band\": false,      \"payment_intent\": null,      \"payment_settings\": {        \"default_mandate\": null,        \"payment_method_options\": null,        \"payment_method_types\": null      },      \"period_end\": 1680644467,      \"period_start\": 1680644467,      \"post_payment_credit_notes_amount\": 0,      \"pre_payment_credit_notes_amount\": 0,      \"quote\": null,      \"receipt_number\": null,      \"rendering_options\": null,      \"shipping_cost\": null,      \"shipping_details\": null,      \"starting_balance\": 0,      \"statement_descriptor\": null,      \"status\": \"draft\",      \"status_transitions\": {        \"finalized_at\": null,        \"marked_uncollectible_at\": null,        \"paid_at\": null,        \"voided_at\": null      },      \"subscription\": null,      \"subtotal\": 0,      \"subtotal_excluding_tax\": 0,      \"tax\": null,      \"test_clock\": null,      \"total\": 0,      \"total_discount_amounts\": [],      \"total_excluding_tax\": 0,      \"total_tax_amounts\": [],      \"transfer_data\": null,      \"webhooks_delivered_at\": 1680644467    }    {...}    {...}  ],}\n```",
    "title": "Bulk update invoice line items | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/products/update",
    "markdown": "# Update a product | Stripe API Reference\n\nUpdates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Whether the product is available for purchase.\n    \n*   The ID of the [Price](https://docs.stripe.com/api/prices) object that is the default price for this product.\n    \n*   The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The product’s name, meant to be displayable to the customer.\n    \n\n### More parameters\n\n*   #### \n    \n    marketing\\_featuresarray of objects\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n\n### Returns\n\nReturns the product object if the update succeeded.\n\n```\ncurl https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [Retrieve a product](https://docs.stripe.com/api/products/retrieve)\n\nRetrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a product object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {},  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [List all products](https://docs.stripe.com/api/products/list)\n\nReturns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.\n\n### Parameters\n\n*   Only return products that are active or inactive (e.g., pass `false` to list all inactive products).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` products, starting after product `starting_after`. Each entry in the array is a separate product object. If no more products are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/products\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prod_NWjs8kKbJWmuuc\",      \"object\": \"product\",      \"active\": true,      \"created\": 1678833149,      \"default_price\": null,      \"description\": null,      \"images\": [],      \"features\": [],      \"livemode\": false,      \"metadata\": {},      \"name\": \"Gold Plan\",      \"package_dimensions\": null,      \"shippable\": null,      \"statement_descriptor\": null,      \"tax_code\": null,      \"unit_label\": null,      \"updated\": 1678833149,      \"url\": null    }    {...}    {...}  ],}\n```\n\n## [Delete a product](https://docs.stripe.com/api/products/delete)\n\nDelete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with `type=good` is only possible if it has no SKUs associated with it.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a deleted object on success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"deleted\": true}\n```\n\n## [Search products](https://docs.stripe.com/api/products/search)\n\nSearch for products you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` products. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\n```\ncurl -G https://api.stripe.com/v1/products/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode query=\"active:'true' AND metadata['order_id']:'6735'\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/products/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prod_NZOkxQ8eTZEHwN\",      \"object\": \"product\",      \"active\": true,      \"created\": 1679446501,      \"default_price\": null,      \"description\": null,      \"images\": [],      \"livemode\": false,      \"metadata\": {        \"order_id\": \"6735\"      },      \"name\": \"Gold Plan\",      \"package_dimensions\": null,      \"shippable\": null,      \"statement_descriptor\": null,      \"tax_code\": null,      \"unit_label\": null,      \"updated\": 1679446501,      \"url\": null    }    {...}    {...}  ],}\n```",
    "title": "Update a product | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/products/retrieve",
    "markdown": "# Retrieve a product | Stripe API Reference\n\nRetrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a product object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {},  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [List all products](https://docs.stripe.com/api/products/list)\n\nReturns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.\n\n### Parameters\n\n*   Only return products that are active or inactive (e.g., pass `false` to list all inactive products).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` products, starting after product `starting_after`. Each entry in the array is a separate product object. If no more products are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/products\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prod_NWjs8kKbJWmuuc\",      \"object\": \"product\",      \"active\": true,      \"created\": 1678833149,      \"default_price\": null,      \"description\": null,      \"images\": [],      \"features\": [],      \"livemode\": false,      \"metadata\": {},      \"name\": \"Gold Plan\",      \"package_dimensions\": null,      \"shippable\": null,      \"statement_descriptor\": null,      \"tax_code\": null,      \"unit_label\": null,      \"updated\": 1678833149,      \"url\": null    }    {...}    {...}  ],}\n```\n\n## [Delete a product](https://docs.stripe.com/api/products/delete)\n\nDelete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with `type=good` is only possible if it has no SKUs associated with it.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a deleted object on success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"deleted\": true}\n```\n\n## [Search products](https://docs.stripe.com/api/products/search)\n\nSearch for products you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` products. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\n```\ncurl -G https://api.stripe.com/v1/products/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode query=\"active:'true' AND metadata['order_id']:'6735'\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/products/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prod_NZOkxQ8eTZEHwN\",      \"object\": \"product\",      \"active\": true,      \"created\": 1679446501,      \"default_price\": null,      \"description\": null,      \"images\": [],      \"livemode\": false,      \"metadata\": {        \"order_id\": \"6735\"      },      \"name\": \"Gold Plan\",      \"package_dimensions\": null,      \"shippable\": null,      \"statement_descriptor\": null,      \"tax_code\": null,      \"unit_label\": null,      \"updated\": 1679446501,      \"url\": null    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve a product | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/products/list",
    "markdown": "# List all products | Stripe API Reference\n\nReturns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.\n\n### Parameters\n\n*   Only return products that are active or inactive (e.g., pass `false` to list all inactive products).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` products, starting after product `starting_after`. Each entry in the array is a separate product object. If no more products are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/products\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prod_NWjs8kKbJWmuuc\",      \"object\": \"product\",      \"active\": true,      \"created\": 1678833149,      \"default_price\": null,      \"description\": null,      \"images\": [],      \"features\": [],      \"livemode\": false,      \"metadata\": {},      \"name\": \"Gold Plan\",      \"package_dimensions\": null,      \"shippable\": null,      \"statement_descriptor\": null,      \"tax_code\": null,      \"unit_label\": null,      \"updated\": 1678833149,      \"url\": null    }    {...}    {...}  ],}\n```\n\n## [Delete a product](https://docs.stripe.com/api/products/delete)\n\nDelete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with `type=good` is only possible if it has no SKUs associated with it.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a deleted object on success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"deleted\": true}\n```\n\n## [Search products](https://docs.stripe.com/api/products/search)\n\nSearch for products you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` products. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\n```\ncurl -G https://api.stripe.com/v1/products/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode query=\"active:'true' AND metadata['order_id']:'6735'\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/products/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prod_NZOkxQ8eTZEHwN\",      \"object\": \"product\",      \"active\": true,      \"created\": 1679446501,      \"default_price\": null,      \"description\": null,      \"images\": [],      \"livemode\": false,      \"metadata\": {        \"order_id\": \"6735\"      },      \"name\": \"Gold Plan\",      \"package_dimensions\": null,      \"shippable\": null,      \"statement_descriptor\": null,      \"tax_code\": null,      \"unit_label\": null,      \"updated\": 1679446501,      \"url\": null    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List all products | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/products/delete",
    "markdown": "# Delete a product | Stripe API Reference\n\nDelete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with `type=good` is only possible if it has no SKUs associated with it.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a deleted object on success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"deleted\": true}\n```\n\n## [Search products](https://docs.stripe.com/api/products/search)\n\nSearch for products you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` products. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\n```\ncurl -G https://api.stripe.com/v1/products/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode query=\"active:'true' AND metadata['order_id']:'6735'\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/products/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prod_NZOkxQ8eTZEHwN\",      \"object\": \"product\",      \"active\": true,      \"created\": 1679446501,      \"default_price\": null,      \"description\": null,      \"images\": [],      \"livemode\": false,      \"metadata\": {        \"order_id\": \"6735\"      },      \"name\": \"Gold Plan\",      \"package_dimensions\": null,      \"shippable\": null,      \"statement_descriptor\": null,      \"tax_code\": null,      \"unit_label\": null,      \"updated\": 1679446501,      \"url\": null    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Delete a product | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  }
]