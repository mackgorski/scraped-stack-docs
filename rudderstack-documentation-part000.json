[
  {
    "url": "https://www.rudderstack.com/docs/",
    "markdown": "# RudderStack Documentation | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "RudderStack Documentation | RudderStack Docs",
    "description": "Deliver trustworthy, real-time data.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-rust-sdk/",
    "markdown": "# Rust SDK | RudderStack Docs\n\nUse RudderStack’s Rust SDK to send events to various destinations.\n\n* * *\n\n*     9 minute read  \n    \n\nThe **RudderStack Rust SDK** lets you track your customer event data from your Rust applications and send it to your specified destinations via RudderStack.\n\nCheck out the [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-rust) to get a more hands-on understanding of the SDK.\n\n[![Github Badge](https://img.shields.io/crates/v/rudderanalytics?style=flat)](https://crates.io/crates/rudderanalytics/)\n\n## SDK setup requirements\n\nTo set up the RudderStack Rust SDK, the following prerequisites must be met:\n\n*   You need to set up a [RudderStack account](https://app.rudderstack.com/signup).\n*   Once signed up, [set up a Rust source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the dashboard. You should be able to see a **Write Key** for this source, as shown below:\n\n[![Rust source write key](https://www.rudderstack.com/docs/images/event-stream-sources/rust-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/rust-write-key-new.webp)\n\n*   You will also need a data plane URL. Refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has an SDK installation snippet containing both the write key and the data plane URL. You can use it to integrate the Rust SDK into your application.\n\n## Installing the Rust SDK\n\nTo install the Rust SDK, simply add its crate as a project dependency.\n\nAdd the following line to your `Cargo.toml` file:\n\n```\nrudderanalytics = \"1.0.0\"\n```\n\n## Initializing the RudderStack client\n\nTo initialize the RudderStack client, run the following code snippet:\n\n```\nuse rudderanalytics::client::RudderAnalytics;\n\nlet rudder_analytics = RudderAnalytics::load(\n\t\"<SOURCE_WRITE_KEY>\".to_string(),\n\t\"<DATA_PLANE_URL>\".to_string()\n);\n```\n\nOnce the RudderStack client is initialized, you can use it to send your customer events.\n\n## Sending events\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not store or persist the user state in any of the server-side SDKs**.\n> \n> Unlike the client-side SDKs that deal with only a single user at a given time, the server-side SDKs deal with multiple users simultaneously. Therefore, you must specify either `user_id` or `anonymous_id` every time while making any API calls supported by the Rust SDK.\n\n## Identify\n\nThe `identify` call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` call is as shown:\n\n```\nuse rudderanalytics::message::{ Identify, Message };\n\nrudder_analytics\n        .send(Message::Identify(Identify {\n            user_id: Some(\"sample_user_id\".to_string()),\n            traits: Some(json!({\n                \"name\": \"Test User\",\n                \"email\": \"test@user.com\",\n            })),\n            ..Default::default()\n        }))\n        .expect(\"Identify call failed to send data to RudderStack\");\n```\n\nThe `identify` method parameters are as described below:\n\n| **Field** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `user_id` | String | Optional, if `anonymous_id` is already set. | Unique user identifier in your database. |\n| `anonymous_id` | String | Optional | Sets an identifier for cases when there is no unique user identifier. Either `user_id` or `anonymous_id` is required. |\n| `traits` | Object | Optional | Dictionary of the traits associated with the user, such as name, email, etc. |\n| `original_timestamp` | DateTime | Optional | The timestamp of the event’s occurrence as specified by the user, in ISO 8601 format. If not explicitly specified, the SDK appends the timestamp of the event’s receipt. |\n| `context` | Object | Optional | Dictionary of information providing context about a message. It is not directly related to the API call. |\n| `integrations` | Object | Optional | Dictionary containing the destinations to be enabled or disabled. |\n\n## Track\n\nThe `track` call lets you record the user actions along with their associated properties. Each user action is called an **event**.\n\nA sample `track` call is as shown:\n\n```\nuse rudderanalytics::message::{ Track, Message };\n\nrudder_analytics\n        .send(Message::Track(Track {\n            user_id: Some(\"sample_user_id\".to_string()),\n            event: \"Test Event\".to_owned(),\n            properties: Some(json!({\n                \"some property\": \"some value\",\n                \"some other property\": \"some other value\",\n            })),\n            ..Default::default()\n        }))\n        .expect(\"Track call failed to send data to RudderStack\");\n```\n\nThe `track` method parameters are as described below:\n\nThe following table describes the different `track` parameters in detail:\n\n| **Field** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `user_id` | String | Optional, if `anonymous_id` is already set. | Unique user identifier in your database. |\n| `anonymous_id` | String | Optional | Sets an identifier for cases when there is no unique user identifier. Either `user_id` or `anonymous_id` is required. |\n| `event` | String | Required | Name of the event, i.e. the action performed by the user. |\n| `properties` | Object | Optional | Dictionary of the properties associated with the event. |\n| `original_timestamp` | DateTime | Optional | The timestamp of the event’s occurrence as specified by the user, in ISO 8601 format. If not explicitly specified, the SDK appends the timestamp of the event’s receipt. |\n| `context` | Object | Optional | Dictionary of information providing context about a message. It is not directly related to the API call. |\n| `integrations` | Object | Optional | Dictionary containing the destinations to be enabled or disabled. |\n\n## Page\n\nThe `page` call allows you to record the page views on your website along with the other relevant information about the viewed page.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack recommends calling `page` at least once every page load.\n\nA sample `page` call is as shown:\n\n```\nuse rudderanalytics::message::{ Page, Message };\n\nrudder_analytics\n        .send(Message::Page(Page {\n            user_id: Some(\"sample_user_id\".to_string()),\n            name: \"Cart viewed\".to_owned(),\n            properties: Some(json!({\n                \"some property\": \"some value\",\n                \"some other property\": \"some other value\",\n            })),\n            ..Default::default()\n        }))\n        .expect(\"Page call failed to send data to RudderStack\");\n```\n\nThe `page` method parameters are as described below:\n\n| **Field** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `user_id` | String | Optional, if `anonymous_id` is already set. | Unique user identifier in your database. |\n| `anonymous_id` | String | Optional | Sets an identifier for cases when there is no unique user identifier. Either `user_id` or `anonymous_id` is required. |\n| `name` | String | Required | Name of the viewed page. |\n| `properties` | Object | Optional | Dictionary of the properties associated with the page view event. |\n| `original_timestamp` | DateTime | Optional | The timestamp of the event’s occurrence as specified by the user, in ISO 8601 format. If not explicitly specified, the SDK appends the timestamp of the event’s receipt. |\n| `context` | Object | Optional | Dictionary of information providing context about a message. It is not directly related to the API call. |\n| `integrations` | Object | Optional | Dictionary containing the destinations to be enabled or disabled. |\n\n## Screen\n\nThe `screen` method lets you record whenever the user views their mobile screen, along with any additional relevant information about the screen.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `screen` call is the mobile equivalent of the `page` call.\n\nA sample `screen` call is shown below:\n\n```\nuse rudderanalytics::message::{ Screen, Message };\n\nrudder_analytics\n        .send(Message::Screen(Screen {\n            user_id: Some(\"sample_user_id\".to_string()),\n            name: \"sample_screen\".to_owned(),\n            properties: Some(json!({\n                \"some property\": \"some value\",\n                \"some other property\": \"some other value\",\n            })),\n            ..Default::default()\n        }))\n        .expect(\"Screen call failed to send data to RudderStack\");\n```\n\nThe `screen` method parameters are as described below:\n\n| **Field** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `user_id` | String | Optional, if `anonymous_id` is already set. | Unique user identifier in your database. |\n| `anonymous_id` | String | Optional | Sets an identifier for cases when there is no unique user identifier. Either `user_id` or `anonymous_id` is required. |\n| `name` | String | Required | Name of the viewed screen. |\n| `properties` | Object | Optional | Dictionary of the properties associated with the screen view event. |\n| `original_timestamp` | DateTime | Optional | The timestamp of the event’s occurrence as specified by the user, in ISO 8601 format. If not explicitly specified, the SDK appends the timestamp of the event’s receipt. |\n| `context` | Object | Optional | Dictionary of information providing context about a message. It is not directly related to the API call. |\n| `integrations` | Object | Optional | Dictionary containing the destinations to be enabled or disabled. |\n\n## Group\n\nThe `group` call lets you associate an identified user to a group - either a company, project or a team and record any custom traits or properties associated with that group.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> An identified user can be in more than one group.\n\nA sample `group` call is as shown:\n\n```\nuse rudderanalytics::message::{ Group, Message };\n\nrudder_analytics\n        .send(Message::Group(Group {\n            user_id: Some(\"sample_user_id\".to_string()),\n            group_id: \"sample_group_id\".to_owned(),\n            traits: Some(json!({\n                \"some property\": \"some value\",\n                \"some other property\": \"some other value\",\n            })),\n            ..Default::default()\n        }))\n        .expect(\"Group call failed to send data to RudderStack\");\n```\n\nThe `group` method parameters are as described below:\n\n| **Field** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `user_id` | String | Optional, if `anonymous_id` is already set. | Unique user identifier in your database. |\n| `anonymous_id` | String | Optional | Sets an identifier for cases when there is no unique user identifier. Either `user_id` or `anonymous_id` is required. |\n| `group_id` | String | Required | Unique identifier of the group in your database. |\n| `traits` | Object | Optional | Dictionary of the traits associated with the group. |\n| `original_timestamp` | DateTime | Optional | The timestamp of the event’s occurrence as specified by the user, in ISO 8601 format. If not explicitly specified, the SDK appends the timestamp of the event’s receipt. |\n| `context` | Object | Optional | Dictionary of information providing context about a message. It is not directly related to the API call. |\n| `integrations` | Object | Optional | Dictionary containing the destinations to be enabled or disabled. |\n\n## Alias\n\nThe `alias` call lets you merge different identities of a known user.\n\nA sample `alias` call is shown below:\n\n```\nuse rudderanalytics::message::{ Alias, Message };\n\nrudder_analytics\n        .send(Message::Alias(Alias {\n            user_id: Some(\"sample_user_id\".to_string()),\n            previous_id: \"sample_previous_user_id\".to_owned(),\n            traits: Some(json!({\n                \"some property\": \"some value\",\n                \"some other property\": \"some other value\",\n            })),\n            ..Default::default()\n        }))\n        .expect(\"Alias call failed to send data to RudderStack\");\n```\n\nThe `alias` method parameters are as described below:\n\n| **Field** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `user_id` | String | Required | Unique user identifier in your database. |\n| `previous_id` | String | Required | The user’s previous identifier. |\n| `traits` | Object | Optional | Dictionary of the traits associated with the user, such as name, email, etc. |\n| `original_timestamp` | DateTime | Optional | The timestamp of the event’s occurrence as specified by the user, in ISO 8601 format. If not explicitly specified, the SDK appends the timestamp of the event’s receipt. |\n| `context` | Object | Optional | Dictionary of information providing context about a message. It is not directly related to the API call. |\n| `integrations` | Object | Optional | Dictionary containing the destinations to be enabled or disabled. |\n\n## Batch\n\nThe `batch` call lets you send multiple user events(of type `identify`, `track`, `page`, `screen`, `group`, and `alias`) in one call.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `batch` call accepts a maximum call size of 4 MB.\n\nA sample `batch` call is as shown:\n\n```\nuse rudderanalytics::message::{ Batch, Message, BatchMessage };\n\nrudder_analytics\n        .send(Message::Batch(Batch {\n            batch: vec![\n                BatchMessage::Identify(Identify {\n                    user_id: Some(\"foo\".to_string()),\n                    traits: Some(json!({})),\n                    ..Default::default()\n                }),\n                BatchMessage::Track(Track {\n                    user_id: Some(\"bar\".to_string()),\n                    event: \"Bar\".to_owned(),\n                    properties: Some(json!({})),\n                    ..Default::default()\n                }),\n                BatchMessage::Track(Track {\n                    user_id: Some(\"baz\".to_string()),\n                    event: \"Baz\".to_owned(),\n                    properties: Some(json!({})),\n                    ..Default::default()\n                }),\n            ],\n            context: Some(json!({\n                \"foo\": \"bar\",\n            })),\n            ..Default::default()\n        }))\n        .expect(\"Batch call failed to send data to RudderStack\");\n```\n\nThe `batch` method parameters are as described below:\n\n| **Field** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `batch` | Vector | Required | Contains one or more event calls of type `identify`/ `track`/ `page`/ `screen`/ `group`/ `alias`. |\n| `context` | Object | Optional | Dictionary of information providing context about a message. It is not directly related to the API call. |\n| `integrations` | Object | Optional | Dictionary containing the destinations to be enabled or disabled. |\n| `original_timestamp` | DateTime | Optional | The timestamp of the event’s occurrence as specified by the user, in ISO 8601 format. If not explicitly specified, the SDK appends the timestamp of the event’s receipt. |\n\n## Integrations options\n\nThe structure of the `integrations` option is as follows:\n\n```\nintegrations: {\n All: boolean, // Defaults to true\n <Destination1>: boolean,\n <Destination2>: boolean,\n ...\n}\n```\n\nThe following table describes all `integrations` parameters in detail:\n\n| **Field** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `All` | Boolean | Optional | Corresponds to all destinations to which the event is to be sent. Defaults to true. `All: false` instructs RudderStack to not send the event data to any destinations by default. |\n| `<Destination>` | Boolean | Optional | Name of the specific destination to which the event should be sent/not sent, depending on the Boolean value assigned to it. |\n\n## FAQ\n\n#### Does the Rust SDK support event ordering?\n\nThe Rust SDK does not support event ordering by default.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Rust SDK | RudderStack Docs",
    "description": "Use RudderStack’s Rust SDK to send events to various destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/",
    "markdown": "# Client-side Events Filtering | RudderStack Docs\n\nFilter events for your allowlist or denylist.\n\n* * *\n\n*     2 minute read  \n    \n\nRudderStack’s client-side event filtering feature lets you specify which events should be discarded or allowed to flow through by allowlisting or denylisting them.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   Client-side event filtering is applicable only for `track` calls. In case of mobile SDKs, it also applies to the following application lifecycle events:\n>     *   Application Installed\n>     *   Application Opened\n>     *   Application Backgrounded\n>     *   Application Updated\n> *   You can use this feature for all RudderStack destinations that support sending events via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode).\n> *   To use this feature with the latest [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/), note that:\n>     *   Empty and non-string event names are not allowlisted anymore.\n>     *   Event name comparison is case-sensitive.\n\n## Supported SDKs\n\nThe following source SDKs support this feature:\n\n*   [JavaScript](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/)\n*   [Android](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/)\n*   [iOS](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/)\n*   [React Native](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-react-native-sdk/)\n*   [Flutter](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/)\n*   [Cordova](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-cordova-sdk/)\n\n## Event filtering options\n\nRudderStack gives you the ability to configure your event filtering options while setting up your device mode destination in the dashboard:\n\n[![Event filtering options](https://www.rudderstack.com/docs/images/event-stream-sources/rudderstack-event-filtering.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/rudderstack-event-filtering.webp)\n\nYou will see the following dropdown options under **Event Filtering**, in the **Connection Settings** page:\n\n### Disable\n\nEvent filtering will be disabled if you select this option from the dropdown. In this case, RudderStack will not filter any events and allow all events to flow through.\n\n### Allowlist\n\nUpon selecting the **Allowlist** option from the dropdown, you can specify the names of the events that you want RudderStack to **allow** or flow through to the destination.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you choose the **Allowlist** option for event filtering, any events specified in the **Denylist** field will be ignored.\n\nYou can add as many events as you want to the allowlist by clicking the **Add More** option.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack will discard any event that is not specified in the allowlist. If you do not specify any events in the allowlist, **all** the calls will be discarded.\n\n### Denylist\n\nUpon selecting the **Denylist** option from the dropdown, you can specify the names of the events that you want RudderStack to **discard**. These events will not be sent to the destination.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you choose the **Denylist** option for event filtering, any events specified in the **Allowlist** field will be ignored.\n\nYou can add as many events as you want to the denylist by clicking on the **Add More** option.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack will only discard events explicitly specified in the denylist. If you do not specify any events in the denylist, then **all** calls will be allowed through.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Client-side Events Filtering | RudderStack Docs",
    "description": "Filter events for your allowlist or denylist.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/",
    "markdown": "# Session Tracking | RudderStack Docs\n\nTrack user sessions from RudderStack web and mobile sources.\n\n* * *\n\n*     9 minute read  \n    \n\nA session is a group of user interactions with your website or mobile app within a given time frame. It is usually triggered when a user opens a mobile app or a website in their browser and ends after a particular period of inactivity.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> A single session can contain multiple page views or screen views, events, social interactions, and ecommerce transactions.\n\nWith the help of RudderStack’s **session tracking** feature, you can gather the event tracking metrics and combine it with the session metadata to better understand the user’s product journey and analyze their behavior. You can also use the resulting insights to identify problems and optimization opportunities in your product workflow.\n\n## Session tracking in RudderStack SDKs\n\nThe following RudderStack SDKs support the session tracking feature:\n\n| RudderStack SDK | Minimum supported version |\n| --- | --- |\n| [JavaScript](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) | *   v1: **1.16.0** (CDN)<br>*   v1.1: **2.15.0** (CDN & NPM) |\n| [Android](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/) | **v1.7.0** |\n| [iOS](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/) | *   [v1](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/): **v1.7.0**<br>*   [v2](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/ios-v2/): **v2.3.0** |\n| [React Native](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-react-native-sdk/) | **v1.8.0** |\n| [Flutter](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/) | **v2.7.0** |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can expect the following properties in your event’s [context object](https://www.rudderstack.com/docs/event-spec/standard-events/common-fields/#contextual-fields) object when session tracking is enabled:\n> \n> *   `sessionId` (Number): The session ID. For more information on how RudderStack calculates `sessionId`, see [FAQ](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/faq/#how-does-rudderstack-determine-the-sessionid).\n> *   `sessionStart` (Boolean): Present in the first event, indicating the start of the session.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> It is strongly recommended to send any other session-related information in the event’s traits or properties as RudderStack’s [automatic session tracking](#automatic-session-tracking) overrides any `sessionId` set in the event’s `context` object.\n\n## Automatic session tracking\n\n**By default, the RudderStack SDKs (JavaScript, Android, iOS, React Native, and Flutter) automatically track the user sessions**. This means that RudderStack automatically determines the start and end of a session depending on the inactivity time configured in the SDK.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The server-side SDKs do not support automatic session tracking.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack also lets you start and end user sessions manually. Refer to the [Manual session tracking](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/manual-session-tracking/) guide for more information. **Note that manual session tracking overrides the automatic session tracking**.\n\n### JavaScript SDK\n\nFor the JavaScript SDK, RudderStack considers the [SDK initialization](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/) as the start of a user session.\n\nTo disable automatic session tracking, you can set the `autoTrack` load option to `false`:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  sessions: {\n    autoTrack: false,  // Set to true to enable automatic session tracking\n  },\n  ...<otherLoadOptions>\n});\n```\n\n#### **When does a session become inactive?**\n\nBy default, a session is active until **30 minutes of inactivity** have elapsed since the last received event. Whenever RudderStack receives a new event, it checks if the inactivity period has elapsed. If yes, it starts a new session with a new `sessionId`. Otherwise, it continues the previous session.\n\nEvery time a new event is generated (`track`, `page`, `identify`, etc.), the SDK resets the session expiration time by adding the configured `timeout` (default **30 minutes**) to the last received event’s [`timestamp`](https://www.rudderstack.com/docs/event-spec/standard-events/common-fields/#clock-skew-considerations).\n\nYou can also adjust the inactivity period using the `timeout` load option. The following snippet highlights the use of the `timeout` option to set a custom session timeout of 10 minutes:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  sessions: {\n    autoTrack: true,\n    timeout: 10 * 60 * 1000,  // 10 min in milliseconds\n  },\n  ...<otherLoadOptions>\n});\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on how session tracking works in the JavaScript SDK, refer to the [Session tracking flow](#session-tracking-flow) section below.\n\n#### **When does a session reset?**\n\nThe JavaScript SDK resets and starts a new session in the following cases:\n\n*   When RudderStack receives a new event after the session inactivity period has elapsed, as explained above.\n*   When you call the [`reset()`API](https://www.rudderstack.com/docs/event-spec/standard-events/).\n*   If you identify a user with a new `userId` in an existing session. RudderStack triggers a `reset()` call that ends the existing session and generates a new one with a different `sessionId`.\n\n#### **Get session ID for JavaScript SDK**\n\nThe JavaScript SDK provides a `getSessionId` method to fetch the current session’s `sessionId`. In case the session ID is unavailable, this method returns a `null` value.\n\nA sample snippet to fetch the current session ID is as shown:\n\n```\nrudderanalytics.getSessionId();\n```\n\n### Mobile SDKs\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   To automatically track sessions in the Android and iOS SDK, `withTrackLifecycleEvents` should also be set to true.\n> *   For the React Native SDK, `trackAppLifecycleEvents` should be set to true.\n> \n> This is because RudderStack considers the [Application Opened](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-opened), [Application Installed](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-installed), or [Application Updated](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-updated) events as the start of a new session.\n\n#### **Android**\n\nBy default, automatic session tracking is enabled in the [Android](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/) SDK:\n\n```\nval rudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            // Set to false to disable automatic session tracking\n            .withAutoSessionTracking(true)\n            .withSessionTimeoutMillis(5 * 60 * 1000)\n            .build()\n    )\n```\n\n```\nRudderClient rudderClient = RudderClient.getInstance(\n    this,\n    WRITE_KEY,\n    new RudderConfig.Builder()\n        .withDataPlaneUrl(DATA_PLANE_URL)\n        .withAutoSessionTracking(true) // Set to false to disable automatic session tracking\n        .withSessionTimeoutMillis(5*60*1000)\n        .build()\n);\n```\n\nTo disable automatic session tracking, set `withAutoSessionTracking` to `false`.\n\n##### **Get session ID for Android SDK**\n\nThe Android SDK provides a `getSessionId` method to fetch the current session’s `sessionId`. In case the session ID is unavailable, this method returns a `null` value.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `getsessionId()` method is available in the Android SDK from v1.19.0 onwards.\n\n```\nRudderClient.getInstance()?.sessionId\n```\n\n#### **iOS**\n\nBy default, automatic session tracking is enabled in the [iOS SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/):\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withAutoSessionTracking:YES];  // Set to No to disable automatic session tracking\n[builder withSessionTimeoutMillis:(5*60*1000)];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withAutoSessionTracking(true)  // Set to false to disable automatic session tracking\n            .withSessionTimeoutMillis(5*60*1000)\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\nTo disable automatic session tracking, set `withAutoSessionTracking` to `false`.\n\n##### **Get session ID for iOS SDK v1**\n\nThe iOS SDK v1 provides an instance variable `sessionId` to fetch the current session ID. In case the session ID is unavailable, it returns a `null` value.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `sessionId` instance variable is available in the iOS SDK v1 from v1.20.0 onwards.\n\n```\n[RSClient sharedInstance].sessionId\n\n// OR\n\n[[RSClient sharedInstance] sessionId]\n```\n\n```\nRSClient.sharedInstance()?.sessionId\n```\n\n#### **iOS SDK v2**\n\nBy default, automatic session tracking is enabled in the [iOS SDK v2](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/ios-v2/):\n\n```\nRSConfig *config = [[RSConfig alloc] initWithWriteKey:WRITE_KEY];\n[config dataPlaneURL:DATA_PLANE_URL];\n[config autoSessionTracking:YES];\n[config sessionTimeout:5*60*1000L];\nRSClient *client = [RSClient sharedInstance];\n[client configureWith:config];\n```\n\n```\nlet config: RSConfig = RSConfig(writeKey: WRITE_KEY)\n            .dataPlaneURL(DATA_PLANE_URL)\n            .autoSessionTracking(true)\n            .sessionTimeout(5*60*1000)\nRSClient.sharedInstance().configure(with: config)\n```\n\nTo disable automatic session tracking, set `autoSessionTracking` to `false`.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Unlike [iOS SDK v1](#get-session-id-for-ios-sdk-v1), the SDK v2 does not support fetching the current session ID as of now. This feature is coming soon.\n\n#### **Flutter SDK**\n\nBy default, automatic session tracking is enabled in the [Flutter SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/):\n\n```\nfinal RudderController rudderClient = RudderController.instance;\nWebConfig wc = WebConfig(autoSessionTracking: true, sessionTimeoutInMillis: 10 * 60 * 1000); // setting the session timeout to 10 mins\nRudderConfigBuilder builder = RudderConfigBuilder();\nbuilder\n   ..withDataPlaneUrl(\"DATA_PLANE_URL\")\n   ..withWebConfig(wc);\nrudderClient.initialize(\"WRITE_KEY\", config: builder.build());\n```\n\n```\nfinal RudderController rudderClient = RudderController.instance;\nMobileConfig mc = MobileConfig(autoSessionTracking: true, sessionTimeoutInMillis: 3 * 60 * 1000); // setting the session time out to 3 mins\nRudderConfigBuilder builder = RudderConfigBuilder();\nbuilder\n   ..withDataPlaneUrl(\"DATA_PLANE_URL\")\n   ..withMobileConfig(mc)\nrudderClient.initialize(\"WRITE_KEY\", config: builder.build());\n```\n\nTo disable automatic session tracking, set `autoSessionTracking` to `false`.\n\n##### **Get session ID for Flutter SDK**\n\nThe Flutter SDK provides a `getSessionId` method to fetch the current session’s `sessionId`. In case the session ID is unavailable, this method returns a `null` value.\n\n```\nint? sessionId = await rudderClient.getSessionId();\n```\n\n#### **React Native**\n\nBy default, automatic session tracking is enabled in the [React Native SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-react-native-sdk/):\n\n```\nconst rudderInitialise = async () => {\n  await rudderClient.setup(WRITE_KEY, {\n    dataPlaneUrl: DATA_PLANE_URL,\n    trackAppLifecycleEvents: true,\n    autoSessionTracking: true, // Set to false to disable automatic session tracking\n    sessionTimeout: 5 * 60 * 1000,\n  });\n};\nrudderInitialise().catch(console.error);\n```\n\nTo disable automatic session tracking, set `autoSessionTracking` to `false`.\n\n##### **Get session ID for React Native SDK**\n\nThe React Native SDK provides a `getSessionId` method to fetch the current session’s ID. If the session ID is unavailable, this method returns a `null` value.\n\nA sample snippet to fetch the session ID using the React Native SDK:\n\n```\nconst sessionId = await rudderClient.getSessionId();\n```\n\n#### **Session expiration in mobile SDKs**\n\nBy default, a session is active until **5 minutes of inactivity** have elapsed. For Flutter SDK, this limit is 5 minutes for mobile platforms and 30 minutes for web platforms.\n\nHowever, you can adjust this limit using the following load option in the respective SDKs:\n\n| Load option | RudderStack SDK | Default value |\n| --- | --- | --- |\n| `sessionTimeoutMillis` | Android and iOS | 5 minutes |\n| `sessionTimeout` | iOS v2 and React Native | 5 minutes |\n| `sessionTimeoutInMillis` | Flutter | *   5 minutes (mobile platforms)<br>*   30 minutes (web platforms) |\n\nIf the duration between the last received event and the next `Application Opened` event is more than the session timeout, RudderStack **automatically** starts a new session. Otherwise, it continues the previous session.\n\nCalling the [`reset`](https://www.rudderstack.com/docs/event-spec/standard-events/) method clears the current `sessionId` and generates a new one.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on how session tracking works in the mobile SDKs, refer to the [Session tracking flow](#session-tracking-flow) section below.\n\n## Session tracking flow\n\nThe following sections describe how the session tracking works in the RudderStack SDKs.\n\n### JavaScript SDK\n\nIf session tracking is enabled in the JavaScript SDK, the flow is as explained below:\n\n1.  During the initialization, the SDK checks for an existing user session. If no valid session exists, it creates a new session. Otherwise, the SDK proceeds with the existing session.\n2.  Upon receiving an event, the SDK fetches the `sessionId`. If no valid `sessionId` is found, it creates a new session and returns the `sessionId`.\n    *   If this is the first event of the session, the SDK also sends another parameter in the context called `sessionStart: true`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on how RudderStack calculates `sessionId`, refer to the [FAQ](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/faq/#how-does-rudderstack-determine-the-sessionid) guide.\n\n3.  The SDK records the user events and the session is active until the `timeout` (default **30 minutes** of inactivity) period has elapsed since the last received event. If yes, it starts a new session with a new `sessionId`.\n4.  Otherwise, the SDK updates the session expiration time by adding the last event’s [`timestamp`](https://www.rudderstack.com/docs/event-spec/standard-events/common-fields/#clock-skew-considerations) to the `timeout` period (default **30 minutes**).\n\nThe following diagram summarizes the workflow:\n\n[![Session tracking in JavaScript SDK](https://www.rudderstack.com/docs/images/event-stream-sources/session-tracking-web-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/session-tracking-web-new.webp)\n\n### Mobile SDKs\n\nIf session tracking is enabled in the mobile SDKs, the flow is as explained below:\n\n1.  RudderStack starts the session once it receives the [`Application Opened`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-opened), [`Application Installed`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-installed), or [`Application Updated`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-updated) event.\n    \n2.  The SDK then generates a `sessionId`. For more information on how RudderStack calculates `sessionId`, refer to the [FAQ](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/faq/#how-does-rudderstack-determine-the-sessionid) guide.\n    \n3.  The SDK records the user events and the session is active until more than `sessionTimeoutMillis` (default **5 minutes**) period of inactivity has elapsed since the last received event. For more information, refer to the [Session expiration in the mobile SDKs](#session-expiration-in-mobile-sdks) section above.\n    \n\nThe following diagram summarizes the workflow:\n\n[![Session tracking in mobile SDKs](https://www.rudderstack.com/docs/images/event-stream-sources/session-tracking-mobile.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/session-tracking-mobile.webp)\n\nThe RudderStack SDKs support sending the `sessionId` and `sessionStart` fields to all [cloud](https://www.rudderstack.com/docs/destinations/streaming-destinations/) and [warehouse](https://www.rudderstack.com/docs/destinations/warehouse-destinations/) destinations, **within the event’s `context`**.\n\nIt is important to note the following:\n\n*   RudderStack passes the `sessionId` to the subsequent events in the `context.sessionId` field.\n*   RudderStack sets the `context.sessionStart` field to `true` in the first event to indicate the start of the session.\n\nRudderStack maps `sessionId` to specific fields **only** in case of the following two destinations:\n\n| Destination | Notes |\n| --- | --- |\n| [Amplitude](https://www.rudderstack.com/docs/destinations/streaming-destinations/amplitude/) | RudderStack maps `sessionId` to Amplitue’s `session_id` field. For more information, see the [Amplitude documentation](https://www.docs.developers.amplitude.com/analytics/apis/http-v2-api/#keys-for-the-event-argument:~:text=to%20occur%20simultaneously.-,session_id,-Optional.%20Long.%20The%22). |\n| [Mixpanel](https://www.rudderstack.com/docs/destinations/streaming-destinations/mixpanel/) | *   RudderStack passes the `$session_id` under the event properties.<br>  <br>*   Mixpanel doesn’t have a specific field for `$session_id` but you can use this field in the reports. |\n\n## FAQ\n\nRefer to the [Session Tracking FAQ](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/faq/) guide for a comprehensive list of questions on session tracking.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Session Tracking | RudderStack Docs",
    "description": "Track user sessions from RudderStack web and mobile sources.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/manual-session-tracking/",
    "markdown": "# Manual Session Tracking | RudderStack Docs\n\nManually tracking user sessions using the RudderStack SDKs.\n\n* * *\n\n*     3 minute read  \n    \n\nRudderStack supports manual session tracking that lets you define the start and end of a user session.\n\nThe RudderStack SDKs ([JavaScript](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/), [Android](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/), [iOS](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/)), [React Native](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-react-native-sdk/), and [Flutter](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/) SDKs support the following manual session tracking methods:\n\n| Method | Parameters | Description |\n| --- | --- | --- |\n| `startSession()` | \\-  | If you don't pass any parameter, RudderStack creates a new session and passes the current `timestamp` as the `sessionId`. |\n| `sessionId`  <br>Long integer with minimum length of 10 characters. | If you pass a custom `sessionId` parameter, RudderStack triggers a new user session.<br><br>It is **not recommended** to use a decimal number as the `sessionId`. |\n| `endSession()` | \\-  | RudderStack clears the `sessionId` and ends the session. |\n\n## Persistence scope\n\nThe following sections list the persistence scope of manual session tracking in the JavaScript and mobile SDKs.\n\n### JavaScript\n\nThe persistence scope of manual session tracking in the JavaScript SDK **does not depend** on whether [automatic session tracking](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/#automatic-session-tracking) is enabled or disabled.\n\nIf you call `startSession()`, the manual session continues even if you refresh or reopen the web page. To end the session, you must call `endSession()`.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you identify a user with a new `userId` in an existing session, RudderStack triggers a `reset()` call. This ends the existing session and generates a new one, irrespective of whether `endSession()` is called or not.\n\n### Android/iOS/React Native/Flutter\n\nThe persistence scope of manual session tracking in the mobile SDKs **depends** on the status of [automatic session tracking](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/#automatic-session-tracking):\n\n*   If automatic session tracking is enabled and you call `startSession()`, then RudderStack disables automatic session tracking **until the app is closed completely**. Once you restart the app, the SDKs resume automatic session tracking.\n*   If automatic session tracking is disabled and you call `startSession()`, the manual session is active until you end it by calling `endSession()`.\n\n## Sample snippets\n\nThe following snippets highlight the use of the manual session tracking methods:\n\n### JavaScript\n\n```\nrudderanalytics.startSession() // Starts a new user session and automatically assigns a session ID.\n\nrudderanalytics.startSession(sessionId) // Passes a custom session ID while creating a new session.\n\nrudderanalytics.endSession() // Ends the user session and clears the session ID.\n```\n\n### Android\n\n```\n// Starts a new user session and automatically assigns a session ID.\nrudderClient.startSession()\n\n// Passes a custom session ID while creating a new session.\nrudderClient.startSession(sessionId)\n\n// Ends the user session and clears the session ID.\nrudderClient.endSession()\n```\n\n```\nrudderClient.startSession(); // Starts a new user session and automatically assigns a session ID.\n\nrudderClient.startSession(sessionId); // Passes a custom session ID while creating a new session.\n\nrudderClient.endSession(); // Ends the user session and clears the session ID.\n```\n\n### iOS\n\n```\nRSClient.sharedInstance()?.startSession() // Starts a new user session and automatically assigns a session ID.\n\nRSClient.sharedInstance()?.startSession(sessionId) // Passes a custom session ID while creating a new session.\n\nRSClient.sharedInstance()?.endSession() // Ends the user session and clears the session ID.\n```\n\n```\n[[RSClient sharedInstance] startSession]; // Starts a new user session and automatically assigns a session ID.\n\n[[RSClient sharedInstance] startSession:sessionId]; // Passes a custom session ID while creating a new session.\n\n[[RSClient sharedInstance] endSession]; // Ends the user session and clears the session ID.\n```\n\n### React Native\n\n```\n// Starts a new user session and automatically assigns a session ID.\nrudderClient.startSession();\n\n// Passes a custom session ID while creating a new session.\nrudderClient.startSession(sessionId);\n\n// Ends the user session and clears the session ID.\nrudderClient.endSession();\n```\n\n### Flutter\n\n```\n// Starts a new user session and automatically assigns a session ID.\nrudderClient.startSession();\n\n// Passes a custom session ID while creating a new session.\nrudderClient.startSession(sessionId);\n\n// Ends the user session and clears the session ID.\nrudderClient.endSession();\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Manual Session Tracking | RudderStack Docs",
    "description": "Manually tracking user sessions using the RudderStack SDKs.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/faq/",
    "markdown": "# JavaScript SDK FAQ | RudderStack Docs\n\nSolutions to some commonly faced issues while using the RudderStack JavaScript SDK.\n\n* * *\n\n*     2 minute read  \n    \n\nThis guide contains the answers to some commonly-asked questions about setting up, using and troubleshooting the JavaScript SDK.\n\n#### **Should I disable adblockers on my browser?**\n\nYes, it is important to ensure that no ad blockers are running on your browser, as they restrict the JavaScript SDK script from executing and storing user information in the browser.\n\n#### **Can I load multiple instances of RudderStack JavaScript SDK?**\n\nNo, it is not possible to load multiple instances of the JavaScript SDK, as it is bound to exceed the maximum stack call size and give you an error.\n\n#### **How can I verify if the SDK is sending data to the specified destinations?**\n\nTo verify if the SDK is transmitting events to the specified destinations successfully, check the **Network** tab of the developer tools in your web browser. The following demonstration is for Google Chrome:\n\n[![Sample page call](https://www.rudderstack.com/docs/images/sample-page-call.webp)](https://www.rudderstack.com/docs/images/sample-page-call.webp)\n\n[![Sample track call](https://www.rudderstack.com/docs/images/sample-track-call.webp)](https://www.rudderstack.com/docs/images/sample-track-call.webp)\n\nIf you cannot see any outbound requests like `track`, `page` etc. to the data plane URL, verify if you have [installed the JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/installation/) correctly. Also, check if any adblockers are enabled on your browser.\n\n#### **What is the size limit on the event requests?**\n\nThe [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) exhibits the following behavior:\n\n*   If the event size exceeds 32KB, the SDK logs a warning but forwards it to the RudderStack data plane (backend).\n*   If you’ve configured the SDK to use the [Beacon transport](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#send-events-using-beacon), the SDK batches the events with a size limit of 64KB on the **entire** batch payload.\n\n#### **Can I send the event data to specific destinations only?**\n\nYes, you can send your [event data only to the specific destinations](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/filtering/) by stopping the SDK from loading the other [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode) integrations.\n\n#### **What is the “Reserved Keyword” warning?**\n\nWhen using the JavaScript SDK, you may run into the following warning:\n\n```\nEventManager:: The \"event\" property defined under \"traits\" is a reserved keyword. Please choose a different property name to avoid conflicts with reserved keywords (id,anonymous_id,user_id,sent_at,timestamp,received_at,original_timestamp,event,event_text,channel,context_ip,context_request_ip,context_passed_ip,group_id,previous_id).\n```\n\nThis is because one or more keys in your `traits`, `properties`, or `context.traits` object have the same value as a reserved keyword.\n\nRudderStack reserves the following keywords as keys for a standard event payload, and you should avoid using these while naming your event traits and properties:\n\n```\n'id',\n'anonymous_id',\n'user_id',\n'sent_at',\n'timestamp',\n'received_at',\n'original_timestamp',\n'event',\n'event_text',\n'channel',\n'context_ip',\n'context_request_ip',\n'context_passed_ip',\n'group_id',\n'previous_id'\n```\n\n#### **How can I differentiate between events sent from a mobile device or a website?**\n\nThe events tracked via JavaScript SDK contain `context.userAgent` that contain information on the user agent of the device. See [Load JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#uachtracklevel) for more information.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "JavaScript SDK FAQ | RudderStack Docs",
    "description": "Solutions to some commonly faced issues while using the RudderStack JavaScript SDK.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/faq/",
    "markdown": "# Session Tracking FAQ | RudderStack Docs\n\nAnswers to the generally asked questions related to RudderStack’s session tracking feature.\n\n* * *\n\n*     4 minute read  \n    \n\n## General\n\n#### Do the RudderStack server-side SDKs support the automatic session tracking feature?\n\nNo, the server-side SDKs do not support automatic session tracking. However, you can create your own session start and end events as backend events using the SDKs.\n\n#### How does RudderStack determine the `sessionId`?\n\nRudderStack passes the event’s `timestamp` (in milliseconds) as the `sessionId`.\n\n#### Does RudderStack attach any user information to the `sessionId`?\n\nRudderStack **does not** attach any user information to the `sessionId`. This is so that a user cannot be traced back or identified only with the `sessionId`.\n\n#### Are session IDs unique across users?\n\n`sessionId` is not guaranteed to be unique across users. RudderStack calculates the current `timestamp` (in milliseconds) and sets it as the `sessionId`. It is helpful to measure session-related properties like number of sessions for a given user, session length, etc.\n\n#### How do I correctly count the number of sessions for a given user?\n\nTo correctly count the number of sessions, you can pair `sessionId` with the user’s `anonymousId`.\n\n#### What happens if automatic session tracking is enabled but I call the `startSession()` API?\n\nIf you call the `startSession()` API while automatic session tracking is enabled, RudderStack ends the existing session and starts a new session. Also, it disables automatic session tracking.\n\n#### What happens to the existing session if I call the `reset()` API?\n\nIf you call the [`reset()`API](https://www.rudderstack.com/docs/event-spec/standard-events/), RudderStack ends the existing session and generates a new one.\n\n#### Which events and APIs does RudderStack support for session tracking?\n\nRudderStack currently supports session tracking only for the following events:\n\n*   [Identify](https://www.rudderstack.com/docs/event-spec/standard-events/identify/)\n*   [Track](https://www.rudderstack.com/docs/event-spec/standard-events/track/)\n*   [Page](https://www.rudderstack.com/docs/event-spec/standard-events/page/)\n*   [Group](https://www.rudderstack.com/docs/event-spec/standard-events/group/)\n*   [Screen](https://www.rudderstack.com/docs/event-spec/standard-events/screen/)\n*   [Alias](https://www.rudderstack.com/docs/event-spec/standard-events/alias/)\n\n#### Is automatic session tracking permanently disabled if I trigger manual session tracking?\n\nIf you manually trigger a session using the `startSession()` API, RudderStack will disable automatic session tracking only till the app is closed.\n\n#### What happens if I manually trigger a new session during an active session?\n\nRudderStack will end the active session and generate a new session.\n\n## JavaScript SDK\n\n#### What happens if I set `timeout` to 0 or less than 10 ms?\n\nIf you set the session’s `timeout` to 0, RudderStack disables automatic session tracking. This is because upon setting the `timeout` to 0, RudderStack creates a new session for each event. As such, enabling automatic session tracking serves no purpose.\n\nIf your session `timeout` is less than 10 ms, RudderStack gives a caution but proceeds with the session tracking.\n\nRudderStack persists the following session tracking-related information in local storage/cookie in a new field called `rl_session`.\n\n| Parameter | Data type | Description |\n| --- | --- | --- |\n| `sessionId` | String | Uniquely identifies a session. |\n| Session expiration time | Number | Time when the session expires. RudderStack calculates it as the last event’s `timestamp` + `timeout`. |\n| Manual session tracking status | Boolean | \\-  |\n| Automatic session tracking status | Boolean | \\-  |\n| Session started | Boolean | A flag that identifies the first event of the session. |\n\n#### What happens I close a website tab and reopen it after some time?\n\nIf the time between closing the tab and reopening it is less than the session timeout (default is 30 minutes), then RudderStack continues the same session. Otherwise, it starts a new session.\n\n#### Does the existing session end if an `identify` call is made with a different `userId`?\n\nIf you identify a user with a new `userId` in an existing session, RudderStack triggers a `reset()` call. This ends the existing session and generates a new one.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This is applicable for both automatic and manual session tracking.\n\n## Mobile SDKs\n\n#### What is the scope of persistence in case of automatic session tracking?\n\nWhen an application is closed completely and launched from scratch, RudderStack checks if the inactivity timeout of the previous automatically tracked session has elapsed. If yes, RudderStack creates a new session, otherwise it continues the previous session.\n\n#### What is the scope of persistence in case of manual session tracking?\n\nThe scope of manual session tracking depends on whether the automatic session tracking feature is enabled.\n\n*   If automatic session tracking is **enabled**: On the next app launch (from scratch), RudderStack clears the manual session even if [`endSession()`](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/manual-session-tracking/) is not called and generates a new **automatic** session.\n*   If automatic session tracking is **disabled**: On the next app launch, the manual session will still be active and cleared only when the user ends the session using `endSession()`.\n\n#### Where does RudderStack store the `sessionId`, last event time, and automatic session tracking status?\n\nRudderStack stores the `sessionId`, the last event timestamp (used to determine [session expiration](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/#session-expiration-in-mobile-sdks)), and the status of automatic session tracking in the following locations:\n\n| Platform | Class |\n| --- | --- |\n| Android | [`SharedPreferences`](https://developer.android.com/reference/android/content/SharedPreferences) |\n| iOS | [`UserDefaults`](https://developer.apple.com/documentation/foundation/userdefaults) |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Session Tracking FAQ | RudderStack Docs",
    "description": "Answers to the generally asked questions related to RudderStack's session tracking feature.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/reverse-etl/",
    "markdown": "# Reverse ETL Sources | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "Reverse ETL Sources | RudderStack Docs",
    "description": "Enrich your data stack with data from your Reverse ETL sources.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/",
    "markdown": "# Android SDK | RudderStack Docs\n\nUse RudderStack’s Android SDK using Android Studio to send events from your Android device to various destinations.\n\n* * *\n\n*     27 minute read  \n    \n\nWith RudderStack’s Android SDK, you can track events from your Android applications and send them to your specified destinations.\n\nSee the [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-android) for more information on the SDK and its architecture.\n\n[![Github Badge](https://img.shields.io/maven-central/v/com.rudderstack.android.sdk/core?style=flat)](https://search.maven.org/search?q=g:%22com.rudderstack.android.sdk%22%20AND%20a:%22core%22)\n\n## SDK setup requirements\n\nTo set up the RudderStack Android SDK, the following prerequisites must be met:\n\n*   You will need to install [Android Studio](https://developer.android.com/studio) on your system.\n*   Also, you will need to set up a [RudderStack account](https://app.rudderstack.com/signup).\n*   Once signed up, [set up an Android source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the dashboard. You should be able to see a **Write Key** for this source, as shown below:\n\n[![Android source write key](https://www.rudderstack.com/docs/images/event-stream-sources/android-write-key.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/android-write-key.webp)\n\n*   You will also need a data plane URL. Refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has an SDK installation snippet containing both the write key and the data plane URL. You can use it to integrate the Android SDK into your project.\n\n## Installing the SDK\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> As Bintray has sunset from 1st May, we’re moving the Android SDK to Maven Central. All the versions from 1.0.10 are available in Maven Central only.\n\nWe distribute the Android SDK through [Maven Central](https://search.maven.org/). The recommended and easiest way to add the SDK to your project is through the Android Gradle build system.\n\nFollow these steps:\n\n*   Open your project level `build.gradle` file, and add the following lines of code:\n\n```\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n}\nallprojects {\n    repositories {\n        mavenCentral()\n    }\n}\n```\n\n*   Then open your `app/build.gradle` and add the dependency under `dependencies` as shown below:\n\n```\nimplementation 'com.rudderstack.android.sdk:core:1.7+'\n// add the following line if you don't have Gson included already\nimplementation 'com.google.code.gson:gson:2+'\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> It is recommended to use the Core Android SDK without any `device-mode` destination SDKs as you will have a better view on the captured data from the SDK.\n\n## Setting Android permissions\n\nAdd this line to your `AndroidManifest.xml` file of your application for `internet` permission:\n\n```\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n```\n\nWe also declare `android.permission.BLUETOOTH` and `android.permission.ACCESS_WIFI_STATE` as optional by mentioning `required=\"false\"` . If we get these permissions, we’ll capture the Bluetooth status and the WiFi status of the device and pass it under `context.network`.\n\n### Android ProGuard rules\n\nAdd the following lines to your Android ProGuard rules if you are using Proguard full mode to optimize your app:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Add the below rules if you are using the Android SDK older than v1.20.0.\n> \n> Note that the rules are bundled in the SDK itself from v1.20.0 onwards.\n\n```\n// Reporter Module\n\n-keep class com.rudderstack.android.ruddermetricsreporterandroid.models.LabelEntity { *; }\n-keep class com.rudderstack.android.ruddermetricsreporterandroid.models.MetricEntity { *; }\n-keep class com.rudderstack.android.ruddermetricsreporterandroid.models.ErrorEntity { *; }\n\n// Required for the usage off TypeToken class in Utils.converToMap, Utils.convertToList\n\n-keep class com.google.gson.reflect.TypeToken { *; }\n-keep class * extends com.google.gson.reflect.TypeToken\n\n// Required for the serialization of SourceConfig once it is downloaded.\n\n-keep class com.google.gson.internal.LinkedTreeMap { *; }\n-keep class * implements java.io.Serializable { *; }\n-keep class com.rudderstack.rudderjsonadapter.RudderTypeAdapter { *; }\n-keep class * extends com.rudderstack.rudderjsonadapter.RudderTypeAdapter\n\n// Required to ensure the DefaultPersistenceProviderFactory is not removed by Proguard\n// and works as expected even when the customer is not using encryption feature.\n\n-dontwarn net.sqlcipher.Cursor\n-dontwarn net.sqlcipher.database.SQLiteDatabase$CursorFactory\n-dontwarn net.sqlcipher.database.SQLiteDatabase\n-dontwarn net.sqlcipher.database.SQLiteOpenHelper\n-keep class com.rudderstack.android.sdk.core.persistence.DefaultPersistenceProviderFactory { *; }\n\n// Required for the usage of annotations across reporter and web modules\n\n-dontwarn com.fasterxml.jackson.annotation.JsonIgnore\n-dontwarn com.squareup.moshi.Json\n-dontwarn com.fasterxml.jackson.annotation.JsonProperty\n\n// Required for Device Mode Transformations\n\n-keep class com.rudderstack.android.sdk.core.TransformationResponse { *; }\n-keep class com.rudderstack.android.sdk.core.TransformationResponseDeserializer { *; }\n-keep class com.rudderstack.android.sdk.core.TransformationRequest { *; }\n```\n\n## Initializing the RudderStack client\n\nImport the library on the classes you desire to use `RudderClient` library\n\n```\nimport com.rudderstack.android.sdk.core.*;\n```\n\nAdd the following code to the `onCreate` method in your `Application` class:\n\n```\nval rudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withTrackLifecycleEvents(true)\n            .withRecordScreenViews(true)\n            .build()\n    )\n```\n\n```\nRudderClient rudderClient = RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        new RudderConfig.Builder()\n                .withDataPlaneUrl(DATA_PLANE_URL)\n                .withTrackLifecycleEvents(true)\n                .withRecordScreenViews(true)\n                .build()\n);\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> *   See [Configuring your RudderStack client](#configuring-your-rudderstack-client) for more information on the methods supported by the `RudderConfig` object.\n> *   See [Adding an application class to your Android application](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/adding-an-application-class/) for more information.\n\n#### OneTrust consent\n\nThe Android SDK integrates with the OneTrust consent manager and lets you specify the user’s consent during initialization. For more information, refer to the [OneTrust Consent Management for Android](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/android/) guide.\n\n## Configuring your RudderStack client\n\nYou can configure your client based on the following methods using `RudderConfig.Builder`:\n\nMethod\n\nType\n\nDescription\n\n`withLogLevel`\n\nInteger\n\nControls the log details you want to capture using the SDK.\n\n**Default value**: `RudderLogger.RudderLogLevel.NONE`\n\n`withDataPlaneUrl`\n\nString\n\nYour data plane URL.\n\n**Default value**: `https://hosted.rudderlabs.com`\n\n`withDbThresholdCount`\n\nInteger\n\nNumber of events to be saved in the `SQLite` database. Once the limit is reached, older events are deleted from the database.\n\n**Default value**: `10000`\n\n`withSleepcount`\n\nInteger\n\nMinimum waiting time to flush the events to the RudderStack server. The minimum value can be set to `1 second`.\n\n**Default value**: `10 seconds`\n\n`withConfigRefreshInterval`\n\nInteger\n\nTime after which the SDK fetches the config from the dashboard.\n\n**Default value**: `2 hours`\n\n`withTrackLifecycleEvents`\n\nBoolean\n\nDetermines if the SDK should automatically capture application lifecycle events using the activity lifecycle callbacks.\n\n**Default value**: `true`\n\n`withNewLifecycleEvents`\n\nBoolean\n\nDetermines if the SDK should automatically capture application lifecycle events using AndroidX’s `LifecycleObserver` class. See [Tracking events with AndroidX `LifecycleObserver`](#tracking-events-with-androidx-lifecycleobserver) for more information.\n\n**Default value**: `false`\n\n`withTrackDeepLinks`\n\nBoolean\n\nDetermines if the SDK should send the deep link-specific details as a `Deep Link Opened` event. See [Tracking deep links](#tracking-deep-links) for more information.\n\n**Default value**: `true`\n\n`withAutoSessionTracking`\n\nBoolean\n\nDetermines if the SDK should automatically [track the user sessions](#tracking-user-sessions).\n\n**Default value**: `true`\n\n`withSessionTimeoutMillis`\n\nInteger\n\nMaximum inactivity period before the session expires.\n\n**Default value**: `300000 ms` (5 minutes)\n\n`withRecordScreenViews`\n\nBoolean\n\nDetermines if the SDK should automatically capture the screen view events.\n\n**Default value**: `false`\n\n`withGzip`\n\nBoolean\n\nGzips the event requests.\n\n**Default value**: `true`\n\n`withCollectDeviceId`\n\nBoolean\n\nDetermines if the SDK should automatically collect the device ID. If set to `false`, it does not send `context.device.id` as a part of the event payload. See [Disabling device ID collection](#withcollectdeviceid) for more information.\n\n**Default value**: `true`\n\n`withAutoCollectAdvertId`\n\nBoolean\n\nDetermines if the SDK should automatically collect the advertisement ID.\n\n**Default value**: `false`\n\n`withDbEncryption`\n\n[`DbEncryption`](#dbencryption)\n\nSpecify whether to encrypt/decrypt the database using your desired key.\n\n`withFlushPeriodically`\n\nInteger\n\n[Periodically flushes events](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/flushing-events-periodically/) from the Android SDK to RudderStack irrespective of whether your app is open.\n\n**Default value**: `15 minutes`\n\n`withCustomFactories`\n\n`List<RudderIntegration.Factory>`\n\nUsed for the customized extension of `RudderIntegration.Factory` while [adding your device mode destinations](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/#developing-a-device-mode-destination).\n\n`withFactory`\n\n`<RudderIntegration.Factory>`\n\nAdds the available device mode destination. Refer to the destination-specific documentation for the usage details. For example, [Firebase](https://www.rudderstack.com/docs/destinations/streaming-destinations/firebase/#adding-device-mode-integration).\n\n`withFactories`\n\n`List<RudderIntegration.Factory>`\n\nAdds a list of factories for the available device mode destinations.\n\n`withFlushQueueSize`\n\nInteger\n\nNumber of events in a batch request to the RudderStack server.\n\n**Default value**: `30`\n\n`withControlPlaneUrl`\n\nString\n\nAdds `/sourceConfig` along with this URL to fetch the source configuration. Change this parameter **only if** you are [self-hosting the control plane](#self-hosted-control-plane).\n\n**Default value**: `https://api.rudderlabs.com`\n\nA sample code snippet to configure your client using `RudderConfig.Builder` is shown below:\n\n```\nrudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withSleepCount(1)\n            .withLogLevel(RudderLogger.RudderLogLevel.VERBOSE)\n            .build()\n    )\n```\n\n#### DbEncryption\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is available in the Android SDK v1.18.0. and later.\n\nThe Android SDK uses a SQLite database to store events before sending them to the RudderStack data plane.\n\nYou can use the `DbEncryption` object to encrypt/decrypt a new or existing database with your specified key.\n\n##### Add dependencies\n\nSince the Android SDK depends on the SQLite Cipher library, you need to add [`sqlcipher-android`](https://github.com/sqlcipher/sqlcipher-android) as a dependency:\n\n1.  Add the RudderStack Android SDK as a dependency.\n2.  Go to the module level `build.gradle` file an add the following under the `dependencies` section:\n\n```\ndependencies {\n   ...\n    //sql-cipher\n    implementation \"net.zetetic:sqlcipher-android:4.5.6@aar\"\n    implementation \"androidx.sqlite:sqlite:2.3.1\"\n    ...\n}\n```\n\n##### Set the encryption object\n\nTo encrypt/decrypt databases, create and set the `DbEncrpytion` object while initializing the Android SDK as follows:\n\n```\nrudderClient = RudderClient.getInstance(\n    this,\n    WRITE_KEY,RudderConfig.Builder()\n    .withDataPlaneUrl(DATA_PLANE_URL)\n    .withControlPlaneUrl(BuildConfig.CONTROL_PLANE_URL)\n    .withLogLevel(RudderLogger.RudderLogLevel.ERROR)\n    .withFactory(AmplitudeIntegrationFactory.FACTORY)\n\t  ...\n    .withDbEncryption(RudderConfig.DBEncryption(true, \"<your-encryption-key>\")) // Configure encryption key\n    .build()\n)\n```\n\nThe `withDbEncryption` method accepts a `DbEncryption` object with the following parameters:\n\nParameter\n\nData type\n\nDescription\n\n`true`/`false`\n\nBoolean\n\nSpecifies whether to encrypt an unencrypted database or decrypt an encrypted database.\n\n`key`\n\nString\n\nKey used to encrypt/decrypt the database.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> After you encrypt the database:\n> \n> *   If **no key** is provided, then the SDK deletes the current database with unsent events and creates a new unencrypted database instead.\n> *   If a **wrong key** is provided, then the SDK deletes the current database with unsent events and creates a new encrypted database with the given key.\n> \n> The SDK does not store the key, so it cannot determine whether the entered key is right or wrong. Hence, if the key cannot decrypt the database, the SDK assumes it to be incorrect and deletes the old events and database.\n\n#### Self-hosted control plane\n\nIf you are using a device mode destination like Adjust, Firebase, etc., the Android SDK needs to fetch the required configuration from the Control Plane. If you are using the [Control plane lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) utility to host your own Control Plane, then follow the steps in [this section](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/#using-sdk-sources-set-up-in-self-hosted-control-plane) and specify `controlPlaneUrl` in your`RudderConfig.Builder` that points to your hosted source configuration file.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You shouldn’t pass the `controlPlaneUrl` parameter during SDK initialization if you are using the dashboard from [RudderStack Cloud Dashboard](https://app.rudderstack.com/). This parameter is supported only if you are using our open-source [Control plane lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) to self-host your Control Plane.\n\n## Gzipping requests\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The Gzip feature is enabled by default in the Android SDK.\n\nThe Android SDK automatically gzip-compresses event requests. To disable this feature, set the `Gzip` parameter to `false` while initializing the SDK:\n\n```\nRudderClient.getInstance(\n    this,\n    WRITE_KEY,\n    RudderConfig.Builder()\n        .withDataPlaneUrl(DATA_PLANE_URL)\n        .withGzip(false)\n        .build()\n)\n```\n\n```\nRudderClient rudderClient = RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        new RudderConfig.Builder()\n                .withDataPlaneUrl(DATA_PLANE_URL)\n                .withTrackLifecycleEvents(true)\n                .withGzip(false)\n                .withRecordScreenViews(true)\n                .build()\n);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Gzip requires [rudder-server](https://github.com/rudderlabs/rudder-server) **v1.4 or higher**. Otherwise, your events might fail.\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc. Once you identify the user, the SDK persists all the user information and passes it on to the subsequent `track` or `screen` calls. To reset the user identification, you can use the [`reset`](#reset) method.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   For older SDK versions (< v1.18.0), the Android SDK captures the device ID and uses that as `anonymousId` for identifying the user. This helps the SDK to track the users across the application installation.\n> *   On Android devices, the `deviceId` is assigned during the first boot. It remains consistent across the applications and installs and changes only after factory reset.\n> *   Starting from v1.18.0, the SDK uses a UUID as `anonymousId` instead of the device ID. If you are upgrading from a previous SDK version, see [How RudderStack sets anonymous ID](#how-sdk-sets-anonymous-id) for more information on how the SDK collects and sets `anonymousId`.\n\nAn sample `identify` event is as shown:\n\n```\nval traits = RudderTraits()\ntraits.putBirthday(Date())\ntraits.putEmail(\"abc@123.com\")\ntraits.putFirstName(\"First\")\ntraits.putLastName(\"Last\")\ntraits.putGender(\"m\")\ntraits.putPhone(\"5555555555\")\nval address = RudderTraits.Address()\naddress.putCity(\"City\")\naddress.putCountry(\"USA\")\ntraits.putAddress(address)\ntraits.put(\"boolean\", Boolean.TRUE)\ntraits.put(\"integer\", 50)\ntraits.put(\"float\", 120.4f)\ntraits.put(\"long\", 1234L)\ntraits.put(\"string\", \"hello\")\ntraits.put(\"date\", Date(System.currentTimeMillis()))\nrudderClient.identify(\"test_user_id\", traits, null)\n```\n\n```\nRudderTraits traits = new RudderTraits();\ntraits.putBirthday(new Date());\ntraits.putEmail(\"abc@123.com\");\ntraits.putFirstName(\"First\");\ntraits.putLastName(\"Last\");\ntraits.putGender(\"m\");\ntraits.putPhone(\"5555555555\");\nRudderTraits.Address address = new RudderTraits.Address();\naddress.putCity(\"City\");\naddress.putCountry(\"USA\");\ntraits.putAddress(address);\ntraits.put(\"boolean\", Boolean.TRUE);\ntraits.put(\"integer\", 50);\ntraits.put(\"float\", 120.4f);\ntraits.put(\"long\", 1234L);\ntraits.put(\"string\", \"hello\");\ntraits.put(\"date\", new Date(System.currentTimeMillis()));\nrudderClient.identify(\"test_user_id\", traits, null);\n```\n\nFollow the method signatures below:\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`traits`\n\n`RudderTraits`\n\nYes\n\nTraits information for the user\n\n`options`\n\n`RudderOption`\n\nNo\n\nExtra options for the `identify` event\n\n**OR**\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`userId`\n\n`String`\n\nYes\n\nDeveloper identity for the user\n\n`traits`\n\n`RudderTraits`\n\nNo\n\nTraits information for user\n\n`option`\n\n`RudderOption`\n\nNo\n\nExtra options for the `identify` event\n\n### Overriding anonymous ID\n\nYou can use the following method to use your own `anonymousId` with the SDK.\n\nAn example of setting the `anonymousId` is shown below:\n\n```\nRudderClient.putAnonymousId(<anonymousId>);\n```\n\nTo retrieve the `anonymousId`, you can use the `anonymousId` instance property:\n\n```\nRudderClient.getInstance()?.anonymousId\n```\n\n### Disabling device ID collection\n\nStarting from v1.18.0, you can disable the collection of device ID by setting the [`withCollectDeviceId`](#configuring-your-rudderstack-client) API of the `RudderConfigBuilder` class to `false`.\n\nYou will observe the following changes when this API is set to false:\n\n*   The SDK does not send `context.device.id` as a part of the event payload.\n*   The SDK replaces the existing `anonymousId` (if it is equal to the device ID) with a UUID.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> These changes are introduced to make the SDK more compliant with all policies around the device ID collection.\n\n```\nRudderClient rudderClient = RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        new RudderConfig.Builder()\n                .withDataPlaneUrl(DATA_PLANE_URL)\n                .withCollectDeviceId(false)\n                .build()\n);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you are upgrading to the latest SDK from a previous version (< v1.18.0) **and** disabling device ID collection using `withCollectDeviceId(false)`:\n> \n> *   Make sure your user transformations are not dependent on `context.device.id` as the SDK will not send this value in the event payload.\n> *   The `context.device.id` column in your warehouse destination will not be populated henceforth (it will still contain data populated by the previous SDK version).\n\n### How SDK sets anonymous ID\n\n#### **For direct/fresh SDK installation**\n\nFor a fresh installation of the Android SDK v1.18.0 and later, RudderStack uses UUID as `anonymousId` regardless of whether [`withCollectDeviceId`](#withcollectdeviceid) is set to `true` or `false`.\n\n#### **For updating SDK from older version**\n\nIf you are updating your Android SDK from an older version (< v1.18.0), then:\n\n*   RudderStack will continue to use the device ID as `anonymousId` - it will not break the existing SDK behavior **until** you set `withCollectDeviceId` to `false`.\n*   If you set `withCollectDeviceId` to `false`, the SDK checks if the existing `anonymousId` is a device ID. If yes, it sets a new UUID as the `anonymousId`.\n*   If you have used the [`putAnonymousId`](#overriding-anonymous-id) method to set your own `anonymousId`, then the SDK will **not** modify it even if you set `withCollectDeviceId` to `false`.\n\n### Setting a custom ID\n\nYou can pass a custom ID along with the standard `userId` in your `identify` calls. RudderStack adds this value under `context.externalId`.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack supports passing `externalId` only in the `identify` events. You must not pass this ID in other API calls like `track`, `page`, etc.\n\nThe following snippet shows how to add an `externalId` to your `identify` event:\n\n```\nrudderClient.identify(\n    \"1hKOmRA4GRlm\",\n    RudderTraits().putFirstName(\"Alex\"),\n    RudderOption()\n        .putExternalId(\"brazeExternalId\", \"some_external_id\")\n)\n```\n\n## Track\n\nYou can record the users’ activity through the `track` method. Every user action is called an **event**.\n\nA sample `track` event is as shown below:\n\n```\nrudderClient.track(\n    \"Product Added\",\n    RudderProperty().putValue(\"product_id\", \"product_001\")\n)\n```\n\n```\nrudderClient.track(\n        \"Product Added\",\n        new RudderProperty()\n                .putValue(\"product_id\", \"product_001\")\n);\n```\n\nFollow the method signatures below:\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`name`\n\n`String`\n\nYes\n\nName of the event you want to track\n\n`property`\n\n`RudderProperty` or `Map<String, Object>`\n\nNo\n\nExtra data properties you want to send along with the event\n\n`options`\n\n`RudderOption`\n\nNo\n\nExtra event options\n\n## Screen\n\nYou can use the `screen` call to record whenever the user sees a screen on the mobile device. You can also send some extra properties along with this event.\n\nAn example of the `screen` event is as shown:\n\n```\nrudderClient.screen(\n    \"MainActivity\",\n    \"HomeScreen\",\n    RudderProperty().putValue(\"foo\", \"bar\"),\n    null\n)\n```\n\n```\nrudderClient.screen(\n    \"MainActivity\",\n    \"HomeScreen\",\n    new RudderProperty().putValue(\"foo\", \"bar\"),\n    null\n);\n```\n\nFollow the method signatures below:\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`screenName`\n\n`String`\n\nYes\n\nName of the screen viewed.\n\n`category`\n\n`String`\n\nNo\n\nCategory of the screen visited, such as `HomeScreen`, `LoginScreen`. Useful for tracking multiple `Fragment` views under a single `Activity`.\n\n`property`\n\n`RudderProperty`\n\nNo\n\nExtra property object that you want to pass along with the `screen` call.\n\n`option`\n\n`RudderOption`\n\nNo\n\nExtra options to be passed along with `screen` event.\n\n## Group\n\nThe `group` call associates a user to a specific organization. A sample `group` call for the API is below:\n\n```\nrudderClient.group(\n    \"sample_group_id\",\n    RudderTraits().putAge(\"24\")\n        .putName(\"Test Group Name\")\n        .putPhone(\"1234567891\")\n)\n```\n\n```\n    rudderClient.group(\n        \"sample_group_id\",\n        new RudderTraits().putAge(\"24\")\n            .putName(\"Test Group Name\")\n            .putPhone(\"1234567891\")\n    );\n```\n\nFollow the method signatures below:\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`groupId`\n\n`String`\n\nYes\n\nAn ID of the organization with which you want to associate your user\n\n`traits`\n\n`RudderTraits`\n\nNo\n\nAny other property of the organization you want to pass along with the call\n\n`options`\n\n`RudderOption`\n\nNo\n\nEvent level options\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack doesn’t persist the traits for the group across the sessions.\n\n## Alias\n\nThe `alias` call associates the user with a new identification. A sample `alias` call for the API is below:\n\n```\nrudderClient.alias(\"test_new_id\")\n```\n\n```\nrudderClient.alias(\"test_new_id\");\n```\n\nAlternatively, you can use the following method signature\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`newId`\n\n`String`\n\nYes\n\nThe new `userId` you want to assign to the user\n\n`options`\n\n`RudderOption`\n\nNo\n\nEvent level option\n\nRudderStack replaces the old `userId` with the `newUserId` and we persist that identification across the sessions.\n\n## Reset\n\nYou can use the `reset` method to clear the persisted user traits. It also resets the `anonymousId` with a new UUID if you call it with `true` (for SDK v1.18.0 and later). To clear only user traits, call `reset` with `false`.\n\nIn [session tracking](https://rudderstack.com/docs/sources/event-streams/sdks/session-tracking/#:~:text=tracking%20is%20enabled%3A-,sessionId,-%28Number%29%3A%20The%20session), calling the `reset` method clears the current `sessionId` and generates a new one.\n\nA sample `reset` call is shown:\n\n```\nrudderClient.reset(false)\n```\n\n```\nrudderClient.reset(false);\n```\n\n## Consent-driven user tracking (GDPR support)\n\nRudderStack gives the users the ability to opt out of tracking any user activity until the user gives their consent. You can do this using the SDK’s `optOut` API.\n\nThe `optOut` API takes `true` or `false` as a Boolean value to enable or disable tracking user activities. This flag persists across device reboots.\n\nThe following snippet highlights the use of the `optOut` API to disable user tracking:\n\n```\nrudderClient.optOut(true)\n```\n\n```\nrudderClient.optOut(true);\n```\n\nthe user grants their consent, you can enable user tracking once again by using the `optOut` API with `false` as a parameter sent to it:\n\n```\nrudderClient.optOut(false)\n```\n\n```\nrudderClient.optOut(false);\n```\n\nThe `optOut` API is available in the Android SDK from v1.0.21 onwards.\n\n## Setting the Android device token\n\nYou can set your `device-token` for push notification to be sent to the destinations that support Push Notification. We set the `token` under `context.device.token`.\n\nFollow the code snippets below:\n\n```\nRudderClient.putDeviceToken(\"your_device_token\")\n```\n\n```\nRudderClient.putDeviceToken(\"your_device_token\");\n```\n\n## Setting custom context\n\nYou can set custom contextual information in Android SDK by using either of the following ways:\n\n### During SDK initialization\n\nSet custom context during SDK initialization as follows:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is available in the Android SDK v1.22.0 and later.\n\n```\nval rudderOption = RudderOption().putCustomContext(\n        \"tier\", mutableMapOf(\n            \"category\" to \"premium\",\n            \"type\" to \"gold\"\n        ) as Map<String, Any>\n)\n\nval rudderClient =\n    RudderClient.getInstance(\n                this,\n                WRITE_KEY,\n                RudderConfig.Builder()\n                    .withDataPlaneUrl(DATA_PLANE_URL)\n                    .build(),\n                rudderOption\n            )\n```\n\n```\nMap customContext = new HashMap<String, Object>();\ncustomContext.put(\"category\", \"premium\");\ncustomContext.put(\"type\", \"gold\");\nRudderOption rudderOption = new RudderOption();\nrudderOption.putCustomContext(\"tier\", customContext);\n\nRudderClient rudderClient = RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        new RudderConfig.Builder()\n                .withDataPlaneUrl(DATA_PLANE_URL)\n                .build(),\n        rudderOption\n);\n```\n\nNote that:\n\n*   The Android SDK persists the contextual information set during SDK initialization for subsequent events but **not** across sessions.\n*   Calling the `reset` method clears all the contextual information set during SDK initialization.\n*   The contextual information passed at the event level gets precedence over the context set during SDK initialization.\n\n### Using `putCustomContext` method\n\nUse the `putCustomContext` method on an instance of `RudderOption` to set custom contextual information as a nested object within `context` while sending the events.\n\nAn example of setting custom context using an instance of `RudderOption` and passing it in a `track` call:\n\n```\nRudderProperty properties = new RudderProperty();\nproperties.put(\"paymentMethod\", \"credit card\");\nMap customContext = new HashMap<String, Object>();\ncustomContext.put(\"category\", \"premium\");\ncustomContext.put(\"type\", \"gold\");\nRudderOption rudderOption = new RudderOption();\nrudderOption.putCustomContext(\"tier\", customContext);\nRudderClient.with(this).track(\n        \"Subscription Purchased\",\n        properties,\n        rudderOption\n);\n```\n\n```\nval properties = RudderProperty()\nproperties.put(\"paymentMethod\", \"credit card\")\nval rudderOption = RudderOption().putCustomContext(\n        \"tier\", mutableMapOf(\n            \"category\" to \"premium\",\n            \"type\" to \"gold\"\n        ) as Map<String, Any>\n)\nrudderClient.track(\n        \"Subscription Purchased\",\n        properties,\n        rudderOption\n)\n```\n\nThe `context` object in the created event payload looks like below:\n\n```\n{\n  \"context\": {\n    \"tier\": {\n      \"category\": \"premium\",\n      \"type\": \"gold\",\n    }\n  }\n}\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The SDK does not persist the contextual information set using `putCustomContext` for subsequent events. Hence, you must use this method every time you want to set custom context for an event.\n\n## Setting the advertisement ID\n\nBy default, RudderStack collects the advertisement ID **only** if the following three conditions are met:\n\n*   `withAutoCollectAdvertId` is set to `true` during the [SDK initialization](#initializing-the-rudderstack-client):\n\n```\nval rudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withTrackLifecycleEvents(true)\n            .withRecordScreenViews(true)\n            .withAutoCollectAdvertId(true)\n            .build()\n    )\n```\n\n*   `com.google.android.gms.ads.identifier.AdvertisingIdClient` is present in your application’s class path.\n*   `limitAdTracking`is not enabled for your device.\n\nUse the `putAdvertisingId` method to set the advertisement ID:\n\n```\nRudderClient.putAdvertisingId(\"sampleAdvertId\")\n```\n\n```\nRudderClient.putAdvertisingId(\"advertId\");\n```\n\nThe `putAdvertisingId` method is static and can be called before or after the SDK initialization.\n\nIf `withAutoCollectAdvertId` is set to `true` and you set the advertisement ID value using `putAdvertisingId` method, RudderStack uses the value provided by the user instead of collecting it automatically.\n\nOnce you reset the advertisement ID using the `clearAdvertisingId` method, RudderStack starts auto-collecting the advertisement ID again.\n\nTo clear the advertisement ID, use the `clearAdvertisingId` method:\n\n```\nrudderClient.clearAdvertisingId()\n``\n```\n\n```\nRudderClient.with(this).clearAdvertisingId();\n```\n\nThe `clearAdvertisingId` method is not static and hence can be called only after the SDK initialization.\n\nRudderStack sets `gaid` under `context.device.advertisementId`.\n\n## Filtering events\n\nWhen sending events to a destination via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode), you can explicitly specify which events should be discarded or allowed to flow through - by allowlisting or denylisting them.\n\n## Enable/disable events for specific destinations\n\nThe RudderStack Android SDK allows you to enable or disable event flow to a specific destination or all destinations to which the source is connected. You can specify these destinations by creating a `RudderOption` object as shown:\n\n```\nval option = RudderOption()\n//default value for `All` is true\noption.putIntegration(\"All\", false)\n// specifying destination by its display name\noption.putIntegration(\"Google Analytics\", true)\noption.putIntegration(<DESTINATION DISPLAY NAME>, <boolean>)\n// specifying destination by its Factory object\noption.putIntegration(AppcenterIntegrationFactory.FACTORY,true);\noption.putIntegration(<RudderIntegration.FACTORY>,<boolean>);\n```\n\n```\nRudderOption option = new RudderOption();\n// default value for `All` is true\noption.putIntegration(\"All\", false);\n// specifying destination by its display name\noption.putIntegration(\"Google Analytics\", true);\noption.putIntegration(<DESTINATION DISPLAY NAME>, <boolean>);\n// specifying destination by its Factory object\noption.putIntegration(AppcenterIntegrationFactory.FACTORY,true);\noption.putIntegration(<RudderIntegration.FACTORY>,<boolean>);\n```\n\nThe keyword `All` in the above snippet represents all destinations the source is connected to. Its value is set to `true` by default.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Make sure the `destination display name` that you pass while specifying the destinations should exactly match the destination name as shown [here](https://app.rudderstack.com/directory).\n\nYou can pass the destinations specified in the above snippet to the SDK in two ways:\n\n#### 1\\. While initializing the SDK\n\nThis is helpful when you want to enable/disable sending the events across all event calls made using the SDK to the specified destination(s).\n\n```\nvar rudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .build(),\n        // passing the rudderoption object containing\n        // the list of destination(s) you specified\n        option\n    )\n```\n\n```\nRudderClient client = RudderClient.getInstance(\n                this,\n                <write_key>,\n                new RudderConfig.Builder()\n                        .withEndPointUri(<end_point_url>)\n                        .build(),\n                option // passing the rudderoption object containing the list of destination(s) you specified\n        );\n```\n\n#### 2\\. While sending events\n\nThis approach is helpful when you want to enable/disable sending only a particular event to the specified destination(s) or if you want to override the specified destinations passed with the SDK initialization for a particular event.\n\n```\nrudderClient.track(\n    \"Product Added\",\n    RudderProperty().putValue(\"product_id\", \"product_001\"),\n    // passing the rudderoption object\n    // containing the list of destination you specified\n    option\n)\n```\n\n```\nrudderClient.track(\n                \"Product Added\",\n                new RudderProperty()\n                        .putValue(\"product_id\", \"product_001\"),\n                option // passing the rudderoption object containing the list of destination(s) you specified\n        );\n```\n\nIf you specify the destinations both while initializing the SDK as well as while making an event call, then the destinations specified at the event level only will be considered.\n\n## Tracking user sessions\n\nBy default, the Android SDK automatically tracks the user sessions. This means that RudderStack automatically determines the start and end of a user session depending on the inactivity time configured in the SDK (default time is 5 minutes).\n\n```\nval rudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            // Set to false to disable automatic session tracking\n            .withAutoSessionTracking(true)\n            .withSessionTimeoutMillis(5 * 60 * 1000)\n            .build()\n    )\n```\n\n```\nRudderClient rudderClient = RudderClient.getInstance(\n    this,\n    WRITE_KEY,\n    new RudderConfig.Builder()\n        .withDataPlaneUrl(DATA_PLANE_URL)\n        .withAutoSessionTracking(true) // Set to false to disable automatic session tracking\n        .withSessionTimeoutMillis(5*60*1000)\n        .build()\n);\n```\n\nTo disable automatic session tracking, set `withAutoSessionTracking` to `false`.\n\nFor more information on the user sessions and how to track them using the Android SDK, see [Session Tracking](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/).\n\n### Getting the session ID\n\nTo retrieve a session’s `sessionId`, use the `getSessionId()` method.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> `getsessionId()` is available in the Android SDK from v1.19.0 onwards.\n\n```\nRudderClient.getInstance()?.sessionId\n```\n\n## Tracking lifecycle events\n\nBy default, RudderStack tracks the following **optional** [application lifecycle events](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/):\n\n*   [Application Installed](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-installed)\n*   [Application Updated](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-updated)\n*   [Application Opened](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-opened)\n*   [Application Backgrounded](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-backgrounded)\n\nTo disable tracking these events, set the [`withTrackLifecycleEvents`](#configuring-your-rudderstack-client) method to `false` while initializing the SDK. However, it is highly recommended to keep them enabled.\n\n#### Tracking events with AndroidX `LifecycleObserver`\n\nStarting from version 1.14.0, the Android SDK supports a newer and more efficient way of tracking your application lifecycle events using the AndroidX [`LifecycleObserver`](https://developer.android.com/reference/android/arch/lifecycle/LifecycleObserver) class, as opposed to the standard method of tracking lifecycle events (using the [`ActivityLifecycleCallbacks`](https://developer.android.com/reference/android/app/Application.ActivityLifecycleCallbacks)).\n\nTo track lifecycle events with this method, add the following dependencies to your app:\n\n```\nimplementation 'androidx.lifecycle:lifecycle-process:2.6.1'\nimplementation 'androidx.lifecycle:lifecycle-common:2.6.1'\n```\n\nNote that this method is **disabled** by default. Set `withNewLifecycleEvents` to `true` while initializing the Android SDK to use this method:\n\n```\nval rudderClient = RudderClient.getInstance(\n    this,\n    WRITE_KEY,\n    RudderConfig.Builder()\n        .withDataPlaneUrl(DATA_PLANE_URL)\n        .withNewLifecycleEvents(true)\n        .build()\n)\n```\n\n```\nRudderClient rudderClient = RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        new RudderConfig.Builder()\n                .withDataPlaneUrl(DATA_PLANE_URL)\n                .withNewLifecycleEvents(true)\n                .build()\n);\n```\n\nIf `withNewLifecycleEvents` is set to true but the required dependencies are missing in your app, the Android SDK will fall back to tracking lifecycle events using the default method `withTrackLifeCycleEvents` (if set to `true` while initializing the SDK).\n\nThe following table details the lifecycle event tracking matrix:\n\nNew way of tracking lifecycle events  \n(`withNewLifecycleEvents`)\n\nStandard way of tracking lifecycle events  \n(`withTrackLifecycleEvents`)\n\nPresence of AndroidX `LifecycleObserver` dependencies in app\n\nResultant way\n\nEnabled\n\nEnabled\n\nYes\n\nNew\n\nEnabled\n\nEnabled\n\nNo\n\nStandard\n\nEnabled\n\nDisabled\n\nNo\n\nLifecycle events are not tracked.\n\nEnabled\n\nDisabled\n\nYes\n\nNew\n\nDisabled\n\nEnabled\n\nNA\n\nStandard\n\nDisabled\n\nDisabled\n\nNA\n\nLifecycle events are not tracked.\n\n## Tracking deep links\n\nStarting from version 1.14.0, the Android SDK sends a `Deep Link Opened` event when you open any app from a [deep link](https://developer.android.com/training/app-links/deep-linking). It also sends all the deep link-related details as the event properties. In the previous versions, the SDK included these details as a part of the `Application Opened` event properties.\n\nThis feature is **turned on** by default. To turn it off, set `withTrackDeepLinks` to `false` while initializing the SDK - this causes the SDK to stop sending any additional `Deep Link Opened` events.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> After you set up the deep link in your Android app, you can trigger the deep linking as follows:\n> \n> ```\n> val url = \"https://example.com/_app\"\n> val intent = Intent(Intent.ACTION_VIEW)\n> intent.putExtra(Intent.EXTRA_REFERRER, Uri.parse(\"https://test.com/_app\"))\n> intent.data = Uri.parse(url)\n> startActivity(intent)\n> ```\n\nThe `Deep Link Opened` event schema is shown below:\n\nProperty name\n\nData type\n\nDescription\n\n`url`\n\nString\n\nRepresents a Uniform Resource Locator used to identify a location on the network and a mechanism for retrieving it. URLs are used to open web pages, access APIs, and deep link into specific parts of the app.\n\nFor example, `https://example.com/_app`.\n\n`referring_application`\n\nString\n\nUsed to indicate the originating page or app when opening a URL.\n\nFor example, `https://test.com/_app`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The Android SDK also adds the query parameters as the deep link event properties.\n\n## Debugging\n\nIf you run into any issues regarding the RudderStack Android SDK, you can turn on the `VERBOSE` or `DEBUG` logging to find out what the issue is. To turn on the logging, change your `RudderClient` initialization to the following:\n\n```\n// initialize Rudder SDK\nval rudderClient: RudderClient =\n    RudderClient.getInstance(\n        this,\n        YOUR_WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withLogLevel(RudderLogger.RudderLogLevel.DEBUG)\n            .build()\n    )\n```\n\n```\nRudderClient rudderClient = RudderClient.getInstance(\n    this,\n    YOUR_WRITE_KEY,\n    new RudderConfig.Builder()\n        .withDataPlaneUrl(DATA_PLANE_URL)\n        .withLogLevel(RudderLogger.RudderLogLevel.DEBUG)\n        .build()\n);\n```\n\n## Chromecast\n\n[Google Chromecast](https://store.google.com/in/product/chromecast?hl=en-GB) is a device that plugs into your TV or monitor with an HDMI port, and can be used to stream content from your phone or computer.\n\nRudderStack supports integrating the Android SDK with your Cast app. Follow [these instructions](https://developers.google.com/cast/docs/android_sender) to build your Android sender app. Then, add the Android SDK to it. Follow the [Google Cast developer guide](https://developers.google.com/cast/docs/developers) for more details.\n\n## Developing a device mode destination\n\nYou can easily develop a device mode destination in case RudderStack doesn’t support it already, by following the steps listed in this section.\n\n*   Create a `CustomFactory` class by extending [`RudderIntegration.java`](https://github.com/rudderlabs/rudder-sdk-android/blob/master/core/src/main/java/com/rudderstack/android/sdk/core/RudderIntegration.java) :\n\n```\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\n\nimport com.rudderstack.android.sdk.core.RudderClient;\nimport com.rudderstack.android.sdk.core.RudderConfig;\nimport com.rudderstack.android.sdk.core.RudderIntegration;\nimport com.rudderstack.android.sdk.core.RudderLogger;\nimport com.rudderstack.android.sdk.core.RudderMessage;\n\npublic class CustomFactory extends RudderIntegration<CustomFactory> {\n    private static final String FACTORY_KEY = \"Custom Factory\";\n\n    public static Factory FACTORY = new Factory() {\n        @Override\n        public RudderIntegration<?> create(Object settings, RudderClient client, RudderConfig rudderConfig) {\n            return new CustomFactory(client,rudderConfig);\n        }\n\n        @Override\n        public String key() {\n            return FACTORY_KEY;\n        }\n    };\n\n    private CustomFactory(@NonNull RudderClient client, RudderConfig config) {\n\n    }\n\n    private void processRudderEvent(RudderMessage element) {\n        System.out.println(\"Processing RudderEvent of type \"+element.getType());\n\n    }\n\n    @Override\n    public void reset() {\n        System.out.println(\"Reset is called\");\n    }\n\n    @Override\n    public void flush() {\n        System.out.println(\"Flush is called\");\n    }\n\n    @Override\n    public void dump(@Nullable RudderMessage element) {\n        try {\n            if (element != null) {\n                processRudderEvent(element);\n            }\n        } catch (Exception e) {\n            RudderLogger.logError(e);\n        }\n    }\n\n    @Override\n    public CustomFactory getUnderlyingInstance() {\n        return this;\n    }\n}\n```\n\nSome pointers to keep in mind:\n\n*   You can use the constructor of the `CustomFactory` class to initialize the native SDK of the device mode destination you are working on.\n*   RudderStack’s Android SDK dumps every event it receives to the `dump()` method of the `CustomFactory` class. From here, you can process the event and hand it over to the native SDK of the device mode destination.\n*   The SDK also triggers the `reset()` method of the `CustomFactory` class on every `reset()` call made via the SDK. You can use this to handle the destination-specific reset.\n*   RudderStack’s Android SDK also triggers the `flush()` method of the `CustomFactory` class on every `flush()` call made via the SDK which you can use to handle the destination-specific reset logic. You can make a `flush` call using the SDK as shown below:\n\nMake sure you return a valid value from `getUnderlyingInstance()` as it is used by the Android SDK to validate `CustomFactory`.\n\n*   Make sure you do not duplicate the value of `FACTORY_KEY` across multiple `CustomFactory` that you develop.\n*   Register `CustomFactory` with the RudderStack Android SDK during its initialization:\n\n```\nvar rudderClient = RudderClient.getInstance(\n            this,\n            WRITE_KEY,\n            RudderConfig.Builder()\n                .withDataPlaneUrl(DATA_PLANE_URL)\n                .withTrackLifecycleEvents(false)\n                .withRecordScreenViews(false)\n                .withCustomFactory(CustomFactory.FACTORY)\n                .build()\n)\n```\n\nThat’s it! Your Device Mode destination is good to go.\n\n## FAQ\n\n#### What is the Android version required to set up the RudderStack Android SDK?\n\nWe currently support `API 14: Android 4.0 (IceCreamSandwich)` or higher.\n\n#### I don’t have an `Application` class to initialize my RudderStack client. What do I do?\n\nFollow our guide on [How to Add an Application Class to Your Android App](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/adding-an-application-class/) to add an `Application` class.\n\n#### How do I set the Android permissions?\n\nSee [Setting the Android Permissions](#setting-android-permissions) section above to do this.\n\n#### How do I use the Android SDK on applications with `minSDKVersion` less than 20?\n\nBy default, the Android SDK does not support applications with `minSDKVersion` less than `20`. You can add this support by following the steps below:\n\n1.  Add the following dependency to the `build.gradle` file of your application:\n\n```\nimplementation 'com.google.android.gms:play-services-base:17.6.0'\n```\n\n2.  Add the function `tlsBackport()` in your `MainActivity` as shown:\n\n```\nprivate fun tlsBackport() {\n    try {\n        ProviderInstaller.installIfNeeded(this)\n        Log.e(\"Rudder\", \"Play present\")\n        val sslContext: SSLContext = SSLContext.getInstance(\"TLSv1.2\")\n        sslContext.init(null, null, null)\n        sslContext.createSSLEngine()\n    } catch (e: GooglePlayServicesRepairableException) {\n        // Prompt the user to install/update/enable Google Play services.\n        GoogleApiAvailability.getInstance()\n            .showErrorNotification(this, e.connectionStatusCode)\n        Log.e(\"Rudder\", \"Play install\")\n    } catch (e: GooglePlayServicesNotAvailableException) {\n        // Indicates a non-recoverable error: let the user know.\n        Log.e(\"SecurityException\", \"Google Play Services not available.\")\n        e.printStackTrace()\n    }\n}\n```\n\n3.  Finally, call the `tlsBackport()` function at the very beginning of your `onCreate()` method in `MainActivity`.\n\n```\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT) {\n        tlsBackport()\n    }\n}\n```\n\nFor more details, see [Android documentation](https://developer.android.com/reference/javax/net/ssl/SSLSocket.html#protocols).\n\n#### Can I use the library with Maven?\n\nYes, you can use the library with `maven`.\n\n```\n<dependency>\n  <groupId>com.rudderstack.android.sdk</groupId>\n  <artifactId>core</artifactId>\n  <version>latest_version</version>\n  <type>pom</type>\n</dependency>\n```\n\n#### How do I check whether a specific event is getting fired or not?\n\nUsing the following command in the Logcat tool once you set the `logLevel` to `VERBOSE`.\n\n```\nadb logcat -s RudderSDK:V \\\n    -v tag -e \"EventRepository: dump: message:\"\n```\n\n#### How do I get the user `traits` after making the `identify` call?\n\nYou can get the user traits after making an `identify` call as shown in the following snippet:\n\n```\nval traits = rudderClient!!.getRudderContext().getTraits()\n```\n\n```\n    Map<string object=\"\"> traitsObj = rudderClient.getRudderContext().getTraits();\n```\n\n#### Can I disable event tracking until the user gives their consent?\n\nYes, you can. RudderStack gives you the ability to disable tracking any user activity until the user gives their consent, by leveraging the `optOut` API. This is required in cases where your app is audience-dependent (e.g. minors) or where you’re using the app to track the user events (e.g. EU users) to meet the data protection and privacy regulations. The `optOut` API takes `true` or `false` as a Boolean value to enable or disable tracking user activities. So, to disable user tracking, you can use the `optOut` API as shown:\n\n```\nrudderClient.optOut(true)\n```\n\nOnce the user gives their consent, you can enable user tracking again:\n\n```\nrudderClient.optOut(false)\n```\n\nFor more information on the `optOut` API, refer to the [Enabling/Disabling User Tracking via optOut API](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/#enabling-tracking-via-optout) section above.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> You only need to call the `optOut` API with the required parameter once, as the information persists within the device even if you reboot it.\n\n#### How does the SDK handle different client/server errors?\n\nIn case of client-side errors, e.g. if the source write key passed to the SDK is incorrect, RudderStack gives you a **400 Bad Request** response and aborts the operation immediately.\n\nFor other types of network errors (e.g. Invalid Data Plane URL), the SDK tries to flush the events to RudderStack in an incremental manner (every 1 second, 2 seconds, 3 seconds, and so on).\n\n#### Can I apply encryption only on new databases?\n\nDatabase encryption works on new and existing databases. Pass the `DbEncryption` object in `RudderConfig.Builder()` while initializing the Android SDK.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can use this object to convert an unencrypted database into an encrypted database and vice versa.\n\nSee [Configuring your RudderStack client](#configuring-your-rudderstack-client) for more information on the configuration options.\n\n#### Can I remove encryption from an encrypted database?\n\nYes, you can.\n\nIf the database is already encrypted, you can decrypt the database in the following way:\n\n```\nRudderConfig.Builder()\n\t  ...\n    .withDbEncryption(RudderConfig.DBEncryption(false, \"<your-encryption-key>\")) // decrypt database\n    .build()\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Make sure to set the `android-database-sqlcipher` dependency in your module level `build.gradle` file.\n> \n> See [DbEncryption](#dbencryption) for more information.\n\n#### What happens if the supplied encryption key is different to the one the database is encrypted with?\n\nAfter you encrypt the database:\n\n*   If **no key** is provided, then the SDK deletes the current database with unsent events and creates a new unencrypted database instead.\n*   If a **wrong key** is provided, then the SDK deletes the current database with unsent events and creates a new encrypted database with the given key.\n\n#### How does the Android SDK handle events larger than 32KB?\n\nThe Android SDK drops any events greater than 32KB.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Android SDK | RudderStack Docs",
    "description": "Use RudderStack’s Android SDK using Android Studio to send events from your Android device to various destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/adding-an-application-class/",
    "markdown": "# Add an application class | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "Add an application class | RudderStack Docs",
    "description": "Add an Application class to initialize the RudderStack SDK.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/reverse-etl/amazon-redshift/",
    "markdown": "# Amazon Redshift Reverse ETL Source\n\nSend data from Amazon Redshift to your entire stack.\n\n* * *\n\n*     9 minute read  \n    \n\n[Amazon Redshift](https://aws.amazon.com/redshift/) is one of the fastest cloud data warehouse services. It lets you handle large analytical workloads with best-in-class performance, speed, and efficiency.\n\nRudderStack supports Amazon Redshift as a data source from which you can ingest data and route it to your desired downstream destinations.\n\n## Grant permissions\n\nBefore you set up Redshift as a source, you must grant certain permissions on your Redshift warehouse for RudderStack to access data from it.\n\nRun the queries listed in the following sections in the **exact order** to grant the required permissions:\n\n### Step 1: Create new user in Redshift\n\n1.  Create a new user `rudder` with a password `<strong_unique_password>`.\n\n```\nCREATE USER rudder WITH PASSWORD '<strong_unique_password>'\n```\n\nThe password set in the above command must meet the following conditions:\n\n*   It should be **8-64** characters in length.\n*   It must contain at least one upper case, one lower case, and one number.\n*   It can contain any ASCII characters with the ASCII codes 33-126, with the exception of `'` (single quotation mark), `\"` (double quotation mark), `\\`, `/`, and `@`.\n\nSee the [Amazon Redshift documentation](https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html#r_CREATE_USER-parameters) for more information on the password rules.\n\n### Step 2: Create RudderStack schema and grant permissions\n\n1.  Create a dedicated schema `_rudderstack`.\n\n```\nCREATE SCHEMA \"_rudderstack\";\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The `_rudderstack` schema is used by RudderStack for storing the state of each data sync. **Do not change this name**.\n\n2.  Grant full access to schema `_rudderstack` for the user `rudder`.\n\n```\nGRANT ALL ON SCHEMA \"_rudderstack\" TO rudder;\n```\n\n3.  Grant full access to the user `rudder` over all `_rudderstack` schema objects.\n\n```\nGRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA \"_rudderstack\" TO rudder;\n```\n\n### Step 3: Grant permissions on schema and table\n\n1.  Grant access to the user `rudder` to look up the objects within your schema:\n\n```\nGRANT USAGE ON SCHEMA \"<YOUR_SCHEMA>\" TO rudder;\n```\n\n2.  Grant access to the user `rudder` to read data from the required table/view:\n\n```\nGRANT SELECT ON TABLE \"<YOUR_SCHEMA>\".\"<YOUR_TABLE>\" TO rudder;\n```\n\nReplace `<YOUR_SCHEMA>` and `<YOUR_TABLE>` with the exact names of your Redshift schema and table respectively.\n\n#### **Optional commands**\n\n*   The following command grants access to the user `rudder` to view and read data from **all** the tables present in the schema `<YOUR_SCHEMA>`:\n\n```\nGRANT SELECT ON ALL TABLES IN SCHEMA \"<YOUR_SCHEMA>\" TO rudder;\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Run this command only if you’re okay with RudderStack being able to access the data in all tables residing within your specified schema.\n\n*   The following command grants access to the user `rudder` to read data from all future tables created by the user `creator` in your schema:\n\n```\nALTER DEFAULT PRIVILEGES for user creator IN SCHEMA \"<YOUR_SCHEMA>\" GRANT SELECT ON TABLES TO rudder;\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Run this command only if you’re okay with RudderStack being able to access the data in all future tables residing within your specified schema.\n\nReplace `<YOUR_SCHEMA>` with the exact name of your Redshift schema.\n\n## Set up Redshift source in RudderStack\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  On the **Connections** page, click **Add source**.\n3.  Under **Sources**, click **Reverse ETL** and select **Redshift**.\n\n### Configure warehouse credentials\n\nYou can choose to proceed with your existing warehouse credentials if you have configured them in the RudderStack dashboard previously. Otherwise, click **Add new credentials** to add new credentials for your warehouse.\n\n*   **Host**: Enter the host name of your Redshift service.\n*   **Port**: Enter the port number associated with the Redshift database instance.\n*   **Database**: Enter the database name of your Redshift instance from where RudderStack ingests the data.\n*   **User**: Enter the user name of your Redshift cluster created in **Step 5** of this [section](https://www.rudderstack.com/docs/destinations/warehouse-destinations/redshift/#creating-a-new-redshift-cluster).\n*   **Password**: Enter the password for the above user.\n*   **SSL Mode**: Select the SSL mode as **disable** or **require** depending on how RudderStack should connect to your Redshift instance.\n\nClick the **Verify** button on the top right. RudderStack will then [verify and validate your credentials](#faq). Once verified, click **Continue** to proceed.\n\n### Specify name and source type\n\nSpecify the source name and type in this step.\n\n*   **Source name**: Assign a name to uniquely identify the source in the RudderStack dashboard.\n*   **Select your source type**: RudderStack lets you set up a Reverse ETL source from a warehouse **Table**, **Model**, or **Audience**.\n\n| Source type | Description |\n| --- | --- |\n| Table | Use an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | Use custom SQL queries to fetch specific warehouse data and send them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | Filter data in your warehouse tables to create target customer lists and send them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\n#### **Use warehouse table as source**\n\nUnder **Select your source type**, choose **Table** and specify the below fields:\n\n*   **Schema**: Select the warehouse schema from the dropdown.\n*   **Table**: Choose the required table from which RudderStack syncs the data.\n*   **Primary key**: Select the column from the above table that uniquely identifies your records in the warehouse.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n[![Use table as source](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use model as source**\n\nUnder **Select your source type**, choose **Model** and click **Continue**.\n\nTo configure a model as source:\n\n1.  Enter an optional description and specify the custom SQL query in **Query** section.\n2.  Click **Run Query** to fetch the data preview.\n3.  Select the **Primary key** to use a column that uniquely identifies your warehouse records.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can set a primary key only after you run the SQL query successfully using the **Run Query** option.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` in SQL query of the model.\n\n[![Model configuration](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use audience as source**\n\nUnder **Select your source type**, choose **Audience** and follow these steps:\n\n1.  Configure your audience source by specifying the below fields:\n    \n    *   **Schema**: Select the warehouse schema from the dropdown.\n    *   **Table**: Choose the required table from which RudderStack syncs the data.\n    *   **Primary key**: Select the column from the above table that uniquely identify your records in the warehouse.\n\n[![Use audience as source](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n2.  Set your [audience conditions](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/#set-your-conditions).\n3.  Click **Preview** to see the resulting data. Then, click **Continue** to proceed.\n\n[![Audience configuration](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n### Review and complete setup\n\nTo make any changes to the warehouse credentials or source configuration, click the edit icon present next to those sections.\n\n[![Edit source configuration](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)\n\nReview your configuration and click **Create source** to complete the setup.\n\n## Connect destination\n\nYou can connect this source to an existing or new [destination](https://www.rudderstack.com/docs/destinations/overview/) to start using it. To connect to a destination later, click **Done** on the top right.\n\n[![Next steps](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)\n\nYou will then be redirected to the **Overview** page of the source where you get the option of connecting it to an existing or new destination.\n\n[![Add destination](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)\n\nSee [Set up Reverse ETL Connection](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/) section for more information.\n\n## Update source configuration and settings\n\nGo to the **Configuration** tab of your Reverse ETL source to update the configuration depending on your source type:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot change the source type on this page.\n\n[![Update source configuration](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)\n\nThe below table lists the options you can update:\n\n| Source type | Configurable options |\n| --- | --- |\n| Table | [Schema, Table, Primary key](#use-warehouse-table-as-source) |\n| Model | *   [Model settings](#use-model-as-source)<br>*   [Primary key](#use-model-as-source)<br><br>**Note**: You can set the primary key only after the SQL query runs successfully. |\n| Audience | *   [Schema, Table, Primary key](#use-audience-as-source)<br>*   [Audience conditions](#use-audience-as-source) |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> After updating the configuration, the next sync will be a full sync.\n\nGo to the **Settings** tab to:\n\n*   Get your source ID.\n*   Change your warehouse credentials.\n*   [Set up custom alerts](https://www.rudderstack.com/docs/data-governance/alerts/) for your Reverse ETL source.\n*   Delete the source permanently.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot delete a source that is connected to any destination.\n\n[![Edit source settings](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)\n\n## FAQ\n\n#### **What are the SSL mode options when setting up the Redshift source in RudderStack?**\n\nWhen setting up a Redshift source, RudderStack provides the following two SSL options:\n\n*   **disable**: SSL mode is disabled when you select this option. Use it in cases where security is not an issue and you don’t want any encryption overhead.\n*   **require**: When you select this option, your data is encrypted and sent to RudderStack. Use it in cases where security is important and you can deal with the resulting encryption overhead.\n\n#### **What do the three validations under Verifying Credentials imply?**\n\nWhen setting up a Reverse ETL source, you will see the following three validations under the **Verifying Credentials** option once you proceed after entering the warehouse credentials:\n\n[![Validating credentials](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)\n\nThese options are explained below:\n\n*   **Verifying Connection**: This option indicates that RudderStack is trying to connect to the warehouse with the provided warehouse credentials.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, it means that one or more fields specified in the warehouse credentials are incorrect. Verify your credentials in this case.\n\n*   **Able to List Schema**: This option checks if RudderStack is able to fetch all schema details by using the provided credentials.\n*   **Able to Access RudderStack Schema**: This option implies that RudderStack is able to access the `_rudderstack` schema you have created by running all commands in the [User Permissions](#creating-the-rudderstack-schema-and-granting-permissions) section.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, verify if you have successfully created the `_rudderstack` schema and given RudderStack the required permissions to access it.\n\n#### **What is the difference between the Table, Model, and Audience options when creating a Reverse ETL source?**\n\nWhen creating a new Reverse ETL source, you are presented with the following options from which RudderStack syncs the data:\n\n| Source type | Description |\n| --- | --- |\n| Table | RudderStack uses an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | RudderStack uses custom SQL queries to fetch specific warehouse data and sends them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | RudderStack filters data in your warehouse tables to create target customer lists and sends them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Amazon Redshift Reverse ETL Source | RudderStack Docs",
    "description": "Send data from Amazon Redshift to your entire stack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-cordova-sdk/",
    "markdown": "# Cordova SDK | RudderStack Docs\n\nUse the RudderStack Cordova SDK to send events from your Cordova apps to various destinations.\n\n* * *\n\n*     9 minute read  \n    \n\nThe **RudderStack Cordova SDK** lets you track event data from your [Apache Cordova](https://cordova.apache.org/) applications and send it to your specified destinations via RudderStack.\n\nRefer to the [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-cordova) and the [sample implementation](https://github.com/rudderlabs/rudder-sdk-cordova/blob/master/sample-cordova/www/js/index.js) to get a more hands-on understanding of the SDK.\n\n[![Github Badge](https://img.shields.io/npm/v/rudder-sdk-cordova?style=flat)](https://www.npmjs.com/package/rudder-sdk-cordova/)\n\n## SDK setup requirements\n\nTo set up the RudderStack Cordova SDK, the following prerequisites must be met:\n\n*   You need to set up a [RudderStack account](https://app.rudderstack.com/signup).\n*   Once signed up, [set up an Cordova source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the dashboard. You should be able to see a **Write Key** for this source, as shown below:\n\n[![Cordova source write key](https://www.rudderstack.com/docs/images/event-stream-sources/cordova-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/cordova-write-key-new.webp)\n\n*   You will also need a data plane URL. Refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has an SDK installation snippet containing both the write key and the data plane URL. You can use it to integrate the Cordova SDK into your project.\n\n## Installing the Cordova SDK\n\nTo add the Cordova SDK as a dependency, navigate to the root folder of your application and run the following command:\n\n```\ncordova plugin add rudder-sdk-cordova\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The Cordova SDK supports device mode starting from version `1.3.0`.\n\n## Initializing the RudderStack client\n\nAfter adding the SDK as a dependency, you need to set up the SDK.\n\nAdd the following code in the `onDeviceReady()` function of your home page to initialize the SDK.\n\nA sample Cordova SDK initialization is as shown:\n\n```\nRudderClient.initialize(WRITE_KEY , {\n  dataPlaneUrl: DATA_PLANE_URL,\n  loglevel: RudderClient.LogLevel.VERBOSE,\n})\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Make sure you use the `await` keyword with the `initialize` call.\n\nThe `setup` method has the following signature:\n\n| Name | Data Type | Presence | Description |\n| --- | --- | --- | --- |\n| `writeKey` | `string` | Required | Your Cordova source `writeKey` from the dashboard. |\n| `configuration` | `JSON Object` | Optional | Contains the RudderStack client configuration. |\n| `options` | `JSON Object` | Optional | Extra options to be pass along with the event. |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> *   Check the [Configuring the RudderStack Client](#configuring-the-rudderstack-client) section below for detailed information on the parameters you can send in the `configuration` object.\n> *   Check the [Configuring the options object](#configuring-the-options-object) section below for detailed information on the parameters you can send in the `options` object.\n\n## Configuring the RudderStack client\n\nYou can configure your RudderStack client by passing the following parameters in the `configuration` object of your `RudderClient.initialize()` call:\n\n| Parameter | Type | Description | Default Value |\n| --- | --- | --- | --- |\n| `logLevel` | `RudderClient.LogLevel` | Controls how much of the log you want to see from the Cordova SDK. | `RudderClient.LogLevel.None` |\n| `dataPlaneUrl` | String | Your RudderStack Data Plane URL. | [https://hosted.rudderlabs.com](https://hosted.rudderlabs.com/) |\n| `flushQueueSize` | Integer | The number of events included in a batch request to the server. | `30` |\n| `dbCountThreshold` | Integer | The number of events to be saved in the `SQLite` database. Once the limit is reached, older events are deleted from the database. | `10000` |\n| `sleepTimeout` | Integer | Minimum waiting time to flush the events to the server. | `10 seconds` |\n| `configRefreshInterval` | Integer | RudderStack fetches the config after this time interval. | `2` |\n| `autoCollectAdvertId` | Boolean | Determines if the SDK should automatically collect the advertisement ID on Android platforms. | `false` |\n| `trackLifecycleEvents` | Boolean | Determines if the SDK should capture the application lifecycle events automatically. | `true` |\n\n## Identify\n\nThe `identify` call lets you identify a visiting user and associate them with their actions. It also lets you record the traits about them like their name, email address, etc.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> As a best practice, we recommend calling `identify` at the start of every session or page load for logged-in users. This will ensure allir latest traits are captured in all subsequent events.\n\nA sample `identify` call is as shown below:\n\n```\nRudderClient.identify(\"userId\", {\n  address: {\n    city: \"LA\",\n    country: \"USA\",\n    state: \"CA\",\n  },\n  birthday: \"1984/07/17\",\n  company: {\n    name: \"RudderStack\",\n    id: \"RS\",\n    industry: \"IT\",\n  },\n  email: \"john@rudderstack.com\",\n  firstName: \"john\",\n});\n```\n\nThe `identify` method has the following signatures:\n\n| Name | Data Type | Presence | Description |\n| --- | --- | --- | --- |\n| `userId` | `string` | Required | User identifier in your database. |\n| `traits` | `JSON Object` | Optional | Information related to the user traits. |\n| `options` | `JSON Object` | Optional | Extra options for the `identify` event. |\n\n## Track\n\nThe `track` call lets you record the user actions along with their associated properties. Each user action is called an **event**.\n\nA sample `track` event called `Order Completed` using the Cordova SDK is shown below:\n\n```\nRudderClient.track('Order Completed', {\n  checkout_id: '18310159091413-2',\n  order_id: '1153390412189-01',\n  affiliation: 'Google Play Store',\n  total: 68.00,\n  subtotal: 60.00,\n  revenue: 70.00,\n  shipping: 5,\n  tax: 3,\n  discount: 10,\n  coupon: 'NEWUSER',\n  currency: 'USD',\n  products: [{\n      product_id: '853913-410121910',\n      sku: 'FF-21',\n      name: 'Varsity Graphic T-Shirt',\n      price: 25,\n      quantity: 1,\n      category: 'Clothing',\n      url: 'https://www.myntra.com/tshirts/huetrap/huetrap-men-beige/111/buy',\n    },\n    {\n      product_id: '113413-190158920',\n      sku: 'GF-67',\n      name: 'Printed Round Neck T-Shirt',\n      price: 15,\n      quantity: 3,\n      category: 'Clothing'\n    }\n  ]\n})\n```\n\nThe `track` method has the following signature:\n\n| Name | Data Type | Presence | Description |\n| --- | --- | --- | --- |\n| `name` | `String` | Required | Contains the name of the event that you want to track. |\n| `properties` | `JSON Object` | Optional | Contains the extra properties to be sent along with the event. |\n| `options` | `JSON Object` | Optional | Contains the extra event options. |\n\n## Group\n\nThe `group` call lets you associate an identified user to a group - either a company, project, or a team, and record any custom traits or properties associated with that group.\n\nA sample `group` call is as shown:\n\n```\nRudderClient.group(\"group1\", {\n  groupname: \"RS\",\n  groupwork: \"Mobile dev\"\n})\n```\n\nThe `group` method has the following signatures:\n\n| Name | Data Type | Presence | Description |\n| --- | --- | --- | --- |\n| `groupId` | `string` | Required | The organization ID with which you want to associate the user. |\n| `groupTraits` | `JSON Object` | Optional | Any other property of the organization that you want to pass along with the call. |\n| `options` | `JSON Object` | Optional | Extra options for the `group` event. |\n\n## Screen\n\nThe `screen` call lets you record whenever your user views their mobile screen with any additional relevant information about the viewed screen.\n\nA sample `screen` call is shown below:\n\n```\nRudderClient.screen(\"Home Screen\", {\n  mobile: \"pixel\"\n})\n```\n\nThe `screen` method has the following signature:\n\n| Name | Data Type | Presence | Description |\n| --- | --- | --- | --- |\n| `screenName` | `string` | Required | Name of the viewed screen. |\n| `property` | `JSON Object` | Optional | Extra properties that you want to pass along with the `screen` call. |\n| `options` | `JSON Object` | Optional | Extra options to be passed along with `screen` event. |\n\n## Alias\n\nThe `alias` call lets you merge different identities of a known user.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> `alias` is an advanced method that lets you change the tracked user’s ID explicitly. This method is useful when managing identities for some of the downstream destinations.\n\nA sample `alias` call is shown below:\n\n```\nRudderClient.alias(\"userId\")\n```\n\nThe `alias` method has the following signature:\n\n| Name | Data Type | Presence | Description |\n| --- | --- | --- | --- |\n| `newId` | `String` | Required | The new `userId` that you want to assign to the user. |\n| `options` | `JSON Object` | Optional | Event level options. |\n\nFor a detailed explanation of the `alias` call, refer to the [RudderStack API Specification](https://www.rudderstack.com/docs/event-spec/standard-events/alias/).\n\n## Reset\n\nYou can use the `reset` method to clear the persisted `traits` from the `identify` call. We recommend calling it during the `Logout` operation.\n\nA sample `reset` call is as shown:\n\n## Configuring the `options` object\n\nThe `options` object can be sent along with all above-mentioned API calls. It has the following signature:\n\n| Name | Data Type | Presence | Description |\n| --- | --- | --- | --- |\n| `externalIds` | `JSON Object` | Optional | Each key within `externalIds` object should define the type of external ID, and its value should be a `String` or `Integer`. |\n| `integrations` | `JSON Object` | Optional | Each key within the `integrations` object should hold the display name of your desired destination. Its value should be a `boolean` indicating whether you want to send that event or not. For more details check the [Enabling/disabling events for specific destinations](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-cordova-sdk/#enablingdisabling-events-for-specific-destinations) section below. |\n\nA sample `options` object for an `identify` event is as shown:\n\n```\nRudderClient.identify(\"1hKOmRA4el9Ztm\", {\n  \"address\": {\n    \"city\": \"New Orleans\",\n    \"country\": \"USA\",\n    \"state\": \"Louisiana\",\n  },\n  \"birthday\": \"01/24/1984\",\n  \"company\": {\n    \"name\": \"Apple Inc.\",\n    \"id\": \"1hKOmRA4el9Ztm\",\n    \"industry\": \"IT\"\n  },\n  \"email\": \"alex@example.com\",\n  \"firstName\": \"Alex\",\n}, {\n  \"externalIds\": {\n    \"brazeExternalId\": \"externalId1\"\n  },\n  \"integrations\": {\n    \"MixPanel\": false,\n    \"Amplitude\": true\n  }\n})\n```\n\nIn the above snippet, the `options` object is as follows:\n\n```\n{\n  \"externalIds\": {\n    \"brazeExternalId\": \"externalId1\"\n  },\n  \"integrations\": {\n    \"MixPanel\": false,\n    \"Amplitude\": true\n  }\n}\n```\n\nRudderStack gives the users (e.g., an EU user) the ability to opt out of tracking any user activity until the user gives their consent. You can do this by leveraging RudderStack’s `optOut` API.\n\nThe `optOut` API takes `true` or `false` as a Boolean value to enable or disable tracking user activities. This flag persists across the device reboots.\n\nThe following snippet highlights the use of the `optOut` API to disable user tracking:\n\n```\nRudderClient.optOut(true);\n```\n\nOnce the user grants their consent, you can enable user tracking once again by using the `optOut` API with `false` as a parameter sent to it:\n\n```\nRudderClient.optOut(false);\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `optOut` API is available in the Cordova SDK starting from version `1.0.1`.\n\n## Filtering events\n\nWhen sending events to a destination via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode), you can explicitly specify which events should be discarded or allowed to flow through - by allowlisting or denylisting them.\n\nRefer to the [Client-side Event Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) guide for more information on this feature.\n\n## Enabling/disabling events for specific destinations\n\nRudderStack lets you send your event data only to the explicitly specified destinations and filtering out the rest. You can do this in one of the following two ways:\n\n*   While initializing the Cordova SDK\n*   While making the event calls\n\n### Passing destinations during SDK initialization\n\nThis approach is useful when you want to send the events to specific destinations across all event calls made using the SDK.\n\nA sample SDK initialization is shown below:\n\n```\nRudderClient.initialize(\"1n0JdVPZTRUIkLXYccrWzZwdGSx\", {\n  dataPlaneUrl: \"https://0ff6-175-101-36-4.ngrok.io\",\n  flushQueueSize: 30,\n  dbCountThreshold: 10000,\n  configRefreshInterval: 2,\n  logLevel: 0,\n  sleepTimeOut: 10,\n  trackLifecycleEvents: true,\n  recordScreenViews: true,\n}, {\n  integrations: {\n    MixPanel: true,\n    Amplitude: true\n  }\n})\n```\n\n### Passing destinations during event calls\n\nThis approach is useful when you want to send particular events to specific destinations, or if you want to override the destinations specified during the SDK initialization for a particular event.\n\nAn example is shown below:\n\n```\nRudderClient.screen(\"Home Screen\", {\n  mobile: \"pixel\"\n}, {\n  integrations: {\n    All: false,\n    Salesforce: true\n  }\n})\n```\n\nIn the above example, the values of the `screen` call are passed only to the Salesforce destination.\n\n## Anonymous ID\n\nRudderStack uses the `deviceId` as anonymousId by default. You can use the `putAnonymousId` method to override the default `anonymousId`:\n\n```\nRudderClient.putAnonymousId(\"CustomAnonymousId\");\n```\n\n## Setting the advertisement ID\n\nRudderStack collects the advertisement ID **only** if `autoCollectAdvertId` is set to `true` during the [SDK initialization](#initializing-the-rudderstack-client):\n\n```\nRudderClient.initialize(WRITE_KEY , {\n  dataPlaneUrl: DATA_PLANE_URL,\n  loglevel: RudderClient.LogLevel.VERBOSE,\n  autoCollectAdvertId: true,\n})\n```\n\nTo set the advertisement ID yourself, you can use the `putAdvertisingId` method as shown:\n\n```\nRudderClient.putAdvertisingId(\"SampleAdvertisingId\")\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> In iOS, you need to call the `putAdvertisingId` method before calling `initialize`.\n\n## Setting the device token\n\nYou can pass your `device-token` for push notifications to be passed to the destinations which support the **Push Notifications** feature. RudderStack sets the `token` under `context.device.token`.\n\nAn example of setting the `device-token` is as shown:\n\n```\nRudderClient.putDeviceToken(\"sampleDeviceToken\");\n```\n\n## Debugging\n\nIf you face any unexpected behavior while using the SDK, you can turn on the `VERBOSE` or `DEBUG` logging feature to determine out the issue.\n\nYou configure logging behavior of your SDK by sending the value of the `logLevel` property of the `configuration` object and pass it over to the `initialize` call as shown below:\n\n```\nRudderClient.initialize( WRITE_KEY , {\n  dataPlaneUrl: DATA_PLANE_URL ,\n  logLevel: RudderClient.LogLevel.VERBOSE,\n  trackLifecycleEvents: true\n})\n```\n\n## FAQ\n\n#### Where can I find the source write key?\n\nOnce you set up a Cordova source in the [RudderStack dashboard](http://app.rudderstack.com/), you will be able to view the source **Write Key**, under the **Setup** tab:\n\n[![Cordova source write key](https://www.rudderstack.com/docs/images/event-stream-sources/cordova-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/cordova-write-key-new.webp)\n\n#### Where can I find the data plane URL?\n\nRefer to this [section](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) for more information on the data plane and how to get it.\n\n#### Do I need to add anything to my Android ProGuard rules?\n\nIf you are facing any event delivery issues in your production environment, verify if you have added the following line in your ProGuard rules:\n\n```\n-keep class com.rudderstack.android.** { *; }\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Cordova SDK | RudderStack Docs",
    "description": "Use the RudderStack Cordova SDK to send events from your Cordova apps to various destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/flushing-events-periodically/",
    "markdown": "# Flushing events in Android SDK\n\nFlush events from the Android SDK’s internal database to the RudderStack server.\n\n* * *\n\n*     2 minute read  \n    \n\nThe Android SDK supports the `flush()` API. It retrieves all messages present in the database, divides them into individual batches based on the specified queue size, and flushes them to the RudderStack server/backend.\n\nFor example, if the `flushQueueSize` is 30 and there are 180 events in the database when the `flush()` API is called, the SDK will retrieve all those events and divide them into batches of 30 messages each, that is, into 6 batches.\n\nIf a batch fails for some reason, RudderStack drops the remaining batches to maintain the sequence of the messages. A batch is considered as failed if it isn’t sent to the RudderStack server after 3 retries.\n\nIn device mode, the `flush()` API also calls the destination SDK’s `flush()` API (if applicable).\n\n## Flush events periodically\n\nRudderStack supports periodic flushing of events from the Android SDK to RudderStack, irrespective of whether your app is opened or not. This ensures that the events that are triggered just before closing the app are sent from the device - even if the app is not opened by the user for a long time.\n\nTo use this feature, follow these steps:\n\n1.  Open your `app/build.gradle` and add the [WorkManager](https://developer.android.com/jetpack/androidx/releases/work) dependency under `dependencies` as shown below:\n\n```\nimplementation 'androidx.work:work-runtime:2.7.1'\n```\n\n2.  Use the `withFlushPeriodically()` function while passing the `RudderConfig` object to the `getInstance()` API, as shown below:\n\n```\nrudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            // enabling periodical flush of events in the DB with a repeat interval of 15 minutes\n            .withFlushPeriodically(15, TimeUnit.MINUTES)\n            .build()\n    )\n```\n\n### `withFlushPeriodically` parameters\n\nThe `withFlushPeriodically` function takes two parameters:\n\n*   The first parameter is the number representing the time interval for the flushing to be repeated.\n*   The second parameter is the time unit of the repeat interval. It can be **Minutes**, **Hours**, or **Days**. The minimum value of the repeat interval is **15 minutes**.\n\n## Initializing WorkManager on demand\n\nBy default, the WorkManager is initialized on the startup of the application. However, you can initialize it only on demand by following these steps:\n\n1.  Add a `provider` to the application tag of your application’s `AndroidManifest.xml`.\n\n```\n<provider\n    android:name=\"androidx.startup.InitializationProvider\"\n    android:authorities=\"${applicationId}.androidx-startup\"\n    android:exported=\"false\"\n    tools:node=\"merge\">\n    <!-- If you are using androidx.startup to initialize other components -->\n    <meta-data\n        android:name=\"androidx.work.WorkManagerInitializer\"\n        android:value=\"androidx.startup\"\n        tools:node=\"remove\" />\n </provider>\n```\n\n2.  Implement `Configuration.Provider` and define the function `getWorkManagerConfiguration()` in your application class as shown below:\n\n```\nclass MyApplication() : Application(), Configuration.Provider {\n    override fun getWorkManagerConfiguration() =\n        Configuration.Builder()\n            .setMinimumLoggingLevel(android.util.Log.INFO)\n            .build()\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Flushing events in Android SDK | RudderStack Docs",
    "description": "Flush events from the Android SDK’s internal database to the RudderStack server.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/reverse-etl/amazon-s3/",
    "markdown": "# Amazon S3 Reverse ETL Source\n\nSend data from Amazon S3 to your entire stack.\n\n* * *\n\n*     5 minute read  \n    \n\n[Amazon S3](https://aws.amazon.com/s3/) is a cloud-based object storage service that lets businesses securely store their data at scale.\n\nRudderStack supports S3 as a data source from which you can ingest data and route it to your desired downstream destinations.\n\n## Set up S3 source in RudderStack\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  On the **Connections** page, click **Add source**.\n3.  Under **Sources**, click **Reverse ETL** and select **Snowflake**.\n\n### Connection credentials\n\nConfigure the following settings to authenticate RudderStack to access your S3 account:\n\n*   **Connection Mode**: RudderStack provides the following options to connect to S3:\n    *   **Cross-Account Role (recommended)**: This option lets you connect to S3 through an [IAM access role](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html). To do so, you need to first create an IAM role for RudderStack with the required permissions to access your S3 account. See [Creating the RudderStack IAM Role for S3](#creating-the-rudderstack-iam-role) for the detailed steps.\n    *   **Access Key**: This option lets you connect to S3 using your AWS access key ID and secret access key.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note the following:\n> \n> *   It is highly recommended to use the **Cross-Account Role** method for connecting to S3 as the **Access Key** method will be deprecated soon.\n> *   See [S3 permissions](#s3-permissions) for the **minimum** permissions that need to be attached to IAM role or the access keys (depending on your connection method).\n\n*   **Account Name**: Specify a name that will be used to identify the connection account.\n*   **Role ARN**: If you select the **Cross-Account Role (recommended)** connection mode, specify the ARN after [creating the RudderStack IAM role](#creating-the-rudderstack-iam-role).\n*   **AWS Access Key ID**: If you select the **Access Key** connection mode for authenticating RudderStack, specify your AWS access key ID. For more information on obtaining your access key ID and secret access key, refer to the [FAQ](#faq) section below.\n*   **AWS Secret Access Key**: Enter the corresponding secret access key.\n\n### Specify name, bucket, and prefix\n\n*   **Source name**: Assign a name to uniquely identify the source in the RudderStack dashboard.\n*   **S3 Bucket Name**: Enter the S3 bucket name.\n*   **Prefix**: Prefix refers to the path within your S3 bucket from where RudderStack imports the data. For example, if **Prefix** is set to `RUDDER`, then RudderStack imports the data stored in the location `<your_s3_bucket>/RUDDER`.\n\n[![Bucket configuration settings](https://www.rudderstack.com/docs/images/warehouse-actions-sources/s3-bucket-settings.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/s3-bucket-settings.webp)\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Your S3 bucket (with the prefix, if specified above) should only consist of Apache Parquet files as RudderStack can extract only the Parquet files. Also, the first row of the Parquet file should not have a `null` value (empty strings are allowed) for any column. It helps RudderStack to determine the correct schema of the file.\n\n### Review and complete setup\n\nTo make any changes to the warehouse credentials or source configuration, click the edit icon present next to those sections.\n\n[![Edit source configuration](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)\n\nReview your configuration and click **Create source** to complete the setup.\n\n## S3 permissions\n\nThe **minimum** S3 permissions that need to be attached to IAM role or the access keys (depending on your [connection method](#connection-credentials)) are listed below:\n\n```\n\"Action\": [\n  \"s3:GetObject\",\n  \"s3:ListBucket\"\n],\n```\n\n## Create RudderStack IAM role\n\nFollow the steps in this section to create a RudderStack IAM role and obtain the role ARN.\n\n### Create policy\n\nTo create a managed policy defining the permissions for the RudderStack IAM role, follow these steps:\n\n1.  Sign in to your AWS Management Console and open the [IAM console](https://console.aws.amazon.com/iam/).\n2.  In the left navigation pane, click **Policies** followed by **Create policy**.\n3.  In the **JSON** tab, paste the following policy:\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:ListAllMyBuckets\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:ListBucket\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\n4.  Click **Review policy**. On the **Review** page, enter `read-write-app-bucket`.\n\n### Create IAM role\n\n1.  In the left navigation pane, click **Roles** and go to **Create role**.\n2.  Under **Trusted entity type**, select **AWS account**:\n\n[![Setting up AWS IAM Role for RudderStack](https://www.rudderstack.com/docs/images/destinations/aws-role-1.webp)](https://www.rudderstack.com/docs/images/destinations/aws-role-1.webp)\n\n3.  Select **Another AWS account** and under **Account ID**, enter `422074288268`, the account ID associated with RudderStack.\n4.  Under **Options** check **Require external ID** and enter your [workspace ID](https://www.rudderstack.com/docs/resources/glossary/#workspace-id) as the **External ID**.\n\n[![Setting up AWS IAM Role for RudderStack](https://www.rudderstack.com/docs/images/destinations/aws-role-2.webp)](https://www.rudderstack.com/docs/images/destinations/aws-role-2.webp)\n\n5.  Review all settings carefully and click **Next** to proceed.\n6.  In the **Permissions** window, select the check box next to the policy you created in the [Creating the policy](#creating-the-policy) section above.\n7.  Review all settings carefully and click **Next** to proceed.\n8.  Enter a unique name for your role. Note that this name is **case-insensitive**. For example, you cannot create a role named `RUDDERSTACK` if `rudderstack` already exists.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot edit the name of the role after it has been created.\n\n9.  **Optional**: Enter the description for this role.\n10.  Click **Create role** to complete the setup.\n11.  Finally, copy the **ARN** of this newly created role and paste it in the **Role ARN** field in the dashboard settings.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> See [AWS IAM tutorial](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) for more information on delegating access across AWS account using IAM roles.\n\n## Update source configuration and settings\n\nGo to the **Configuration** tab of your S3 source to update the configuration settings. Here, you can update the S3 bucket name and prefix.\n\nGo to the **Settings** tab to:\n\n*   Get your source ID.\n*   Change your warehouse credentials.\n*   [Set up custom alerts](https://www.rudderstack.com/docs/data-governance/alerts/#reverse-etl) for your Reverse ETL source.\n*   Delete the source permanently.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot delete a source that is connected to any destination.\n\n[![Edit source settings](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)\n\n## Troubleshooting\n\n#### Failing syncs with large row groups\n\nNote that the Reverse ETL syncs will fail if your files contain large row groups with sizes more than 512 MB. This is because S3 cannot process Parquet files with row groups larger than 512 MB.\n\nMake sure that:\n\n*   The maximum record length in the input or result is 1 MB.\n*   The maximum uncompressed row group size is 512 MB.\n\nSee [S3 documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/selecting-content-from-objects.html) for more information on these limits.\n\n## FAQ\n\n#### **Where can I obtain the AWS Access Key ID and the AWS Secret Access Key?**\n\n1.  Sign in to your [AWS Management Console](http://console.aws.amazon.com/) as the [root user](https://docs.aws.amazon.com/IAM/latest/UserGuide/console.html#root-user-sign-in-page).\n2.  From the upper right corner, click your account and go to **Security Credentials**. You can find your access key ID listed here. You can also create a new access key by clicking the **Create access key** button:\n\n[![AWS security](https://www.rudderstack.com/docs/images/warehouse-actions-sources/aws-security-credentials-new.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/aws-security-credentials-new.webp)\n\nSee the [AWS documentation](https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html) for more information on these credentials.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> See [S3 permissions](#s3-permissions) for more information on the actions must be attached to your access keys required for setting up the S3 source.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Amazon S3 Reverse ETL Source | RudderStack Docs",
    "description": "Send data from Amazon S3 to your entire stack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/releases/",
    "markdown": "# Release Notes | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "Release Notes | RudderStack Docs",
    "description": "RudderStack release notes",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/reverse-etl/google-bigquery/",
    "markdown": "# Google BigQuery Reverse ETL Source\n\nSend data from Google BigQuery to your entire stack.\n\n* * *\n\n*     8 minute read  \n    \n\n[Google BigQuery](https://cloud.google.com/bigquery) is an industry-leading, fully-managed cloud data warehouse that lets you store and analyze petabytes of data in no time.\n\nRudderStack supports Google BigQuery as a source from which you can ingest data and route it to your desired downstream destinations.\n\n## Grant permissions\n\nBefore you set up BigQuery as a source, you must grant certain permissions on your BigQuery warehouse for RudderStack to access data from it.\n\nFollow the steps below in the **exact order** to grant these permissions:\n\n### Step 1: Create role and grant permissions\n\n1.  Go to the [Roles](https://console.cloud.google.com/iam-admin/roles) section of Google Cloud Platform dashboard and click **CREATE ROLE**.\n\n[![Google Cloud Platform dashboard create role](https://www.rudderstack.com/docs/images/warehouse-actions-sources/GCP-create-role.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/GCP-create-role.webp)\n\n2.  Fill in the details as shown:\n\n[![GCP role details](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-role-details.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-role-details.webp)\n\n3.  Click **ADD PERMISSIONS** and add the following permissions individually:\n\n**Read-only:**\n\n```\nbigquery.datasets.get\nbigquery.jobs.list\nbigquery.tables.get\nbigquery.tables.getData\nbigquery.tables.list\nbigquery.routines.get\nbigquery.routines.list\nbigquery.tables.delete\n```\n\n**Read-write:**\n\n```\nbigquery.jobs.create\nbigquery.tables.create\nbigquery.tables.update\nbigquery.tables.updateData\nbigquery.tables.delete\n```\n\n4.  Click **CREATE** after adding the permissions.\n\n[![BigQuery role permissions](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-role-permisssions.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-role-permisssions.webp)\n\n### Step 2: Create service account and attach role\n\n1.  Go to [Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) and select the project which has the dataset or the table that you want to use.\n2.  Click **CREATE SERVICE ACCOUNT**.\n\n[![Create service account in GCP](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-create-service-account.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-create-service-account.webp)\n\n3.  Fill in the **Service Account details** as shown below, and click **CREATE AND CONTINUE**:\n\n[![Service account role details](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-service-account-details.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-service-account-details.webp)\n\n4.  Under **Grant this service account access to project**, select the role you created in [Step 1: Creating a role and granting permissions](#step-1-creating-a-role-and-granting-permissions) section above.\n\n[![Service account role connection](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-service-account-connect-role.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-service-account-connect-role.webp)\n\n5.  Click **DONE** to move to the list of service accounts.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note down the service account ID. You will need this ID while creating the RudderStack schema and granting the required permissions to it.\n> \n> ![Service account ID](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-service-account-id.webp)\n\n### Step 3: Create and download JSON key\n\n1.  Click the three dots icon under **Actions** in the service account that you just created and select **Manage keys**:\n\n[![Managing keys in GCP](https://www.rudderstack.com/docs/images/warehouse-actions-sources/manage-keys.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/manage-keys.webp)\n\n2.  Click **ADD KEY**, followed by **Create new key**:\n\n[![GCP Adding a new key](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-add-key.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-add-key.webp)\n\n3.  Select **JSON** and click **CREATE**.\n\n[![Select Reverse ETL source in RudderStack](https://www.rudderstack.com/docs/images/warehouse-actions-sources/create-new-key.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/create-new-key.webp)\n\nA JSON file will be downloaded on your system. This file is required while [setting up the BigQuery source](#setting-up-the-bigquery-source-in-rudderstack) in RudderStack.\n\n### Step 4: Create RudderStack schema and granting permissions\n\n1.  From your [BigQuery SQL workspace](https://console.cloud.google.com/bigquery), run the following command to create a dedicated schema `rudderstack_`.\n\n> ![danger](https://www.rudderstack.com/docs/images/danger.svg)\n> \n> The `rudderstack_` schema is used by RudderStack for storing the state of each data sync. **Do not change this name**.\n\n```\ncreate schema rudderstack_;\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The `rudderstack_` schema is created in the default region of your BigQuery instance.\n> \n> If the GCP cloud storage bucket used as a staging bucket by RudderStack is in a different region, you will need to adjust the above SQL statement to match that region. For example, to create the schema in the [`europe-west-3`](https://cloud.google.com/bigquery/docs/locations) region, run the following statement:  \n> \n> ```\n> create schema rudderstack_ OPTIONS (location = \"europe-west3\");\n> ```\n\n2.  Grant full access to the `rudderstack_` schema for the RudderStack service account you created above. Replace `<SERVICE_ACCOUNT_ID>` with the service account ID you specified in [Step 2: Creating a service account and attaching role to it](#step-2-creating-a-service-account-and-attaching-the-role-to-it).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `<SERVICE_ACCOUNT_ID>` takes the form of `name@your-gcp-project.iam.gserviceaccount.com`. You can also find it in the `client_email` key of the service account credentials JSON file downloaded in [Step 3: Creating and downloading the JSON key](#step-3-creating-and-downloading-the-json-key).\n\n```\nGRANT `roles/bigquery.dataOwner`\n     ON SCHEMA rudderstack_\n     TO \"serviceAccount:<SERVICE_ACCOUNT_ID>\";\n```\n\n## Set up BigQuery source in RudderStack\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  On the **Connections** page, click **Add source**.\n3.  Under **Sources**, click **Reverse ETL** and select **BigQuery**.\n\n### Configure warehouse credentials\n\nYou can choose to proceed with your existing warehouse credentials if you have configured them in the RudderStack dashboard previously. Otherwise, click **Add new credentials** to add new credentials for your warehouse.\n\n*   **Credentials**: Add the contents of the GCP service account credentials JSON downloaded [above](#step-3-creating-and-downloading-the-json-key).\n*   **Project ID**: Specify your GCP project ID where your BigQuery database is located.\n*   **Service account**: Specify your GCP service account in this field.\n\nClick the **Verify** button on the top right. RudderStack will then [verify and validate your credentials](#faq). Once verified, click **Continue** to proceed.\n\n### Specify name and source type\n\nSpecify the source name and type in this step.\n\n*   **Source name**: Assign a name to uniquely identify the source in the RudderStack dashboard.\n*   **Select your source type**: RudderStack lets you set up a Reverse ETL source from a warehouse **Table**, **Model**, or **Audience**.\n\n| Source type | Description |\n| --- | --- |\n| Table | Use an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | Use custom SQL queries to fetch specific warehouse data and send them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | Filter data in your warehouse tables to create target customer lists and send them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\n#### **Use warehouse table as source**\n\nUnder **Select your source type**, choose **Table** and specify the below fields:\n\n*   **Schema**: Select the warehouse schema from the dropdown.\n*   **Table**: Choose the required table from which RudderStack syncs the data.\n*   **Primary key**: Select the column from the above table that uniquely identifies your records in the warehouse.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n[![Use table as source](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use model as source**\n\nUnder **Select your source type**, choose **Model** and click **Continue**.\n\nTo configure a model as source:\n\n1.  Enter an optional description and specify the custom SQL query in **Query** section.\n2.  Click **Run Query** to fetch the data preview.\n3.  Select the **Primary key** to use a column that uniquely identifies your warehouse records.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can set a primary key only after you run the SQL query successfully using the **Run Query** option.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` in SQL query of the model.\n\n[![Model configuration](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use audience as source**\n\nUnder **Select your source type**, choose **Audience** and follow these steps:\n\n1.  Configure your audience source by specifying the below fields:\n    \n    *   **Schema**: Select the warehouse schema from the dropdown.\n    *   **Table**: Choose the required table from which RudderStack syncs the data.\n    *   **Primary key**: Select the column from the above table that uniquely identify your records in the warehouse.\n\n[![Use audience as source](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n2.  Set your [audience conditions](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/#set-your-conditions).\n3.  Click **Preview** to see the resulting data. Then, click **Continue** to proceed.\n\n[![Audience configuration](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n### Review and complete setup\n\nTo make any changes to the warehouse credentials or source configuration, click the edit icon present next to those sections.\n\n[![Edit source configuration](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)\n\nReview your configuration and click **Create source** to complete the setup.\n\n## Connect destination\n\nYou can connect this source to an existing or new [destination](https://www.rudderstack.com/docs/destinations/overview/) to start using it. To connect to a destination later, click **Done** on the top right.\n\n[![Next steps](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)\n\nYou will then be redirected to the **Overview** page of the source where you get the option of connecting it to an existing or new destination.\n\n[![Add destination](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)\n\nSee [Set up Reverse ETL Connection](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/) section for more information.\n\n## Update source configuration and settings\n\nGo to the **Configuration** tab of your Reverse ETL source to update the configuration depending on your source type:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot change the source type on this page.\n\n[![Update source configuration](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)\n\nThe below table lists the options you can update:\n\n| Source type | Configurable options |\n| --- | --- |\n| Table | [Schema, Table, Primary key](#use-warehouse-table-as-source) |\n| Model | *   [Model settings](#use-model-as-source)<br>*   [Primary key](#use-model-as-source)<br><br>**Note**: You can set the primary key only after the SQL query runs successfully. |\n| Audience | *   [Schema, Table, Primary key](#use-audience-as-source)<br>*   [Audience conditions](#use-audience-as-source) |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> After updating the configuration, the next sync will be a full sync.\n\nGo to the **Settings** tab to:\n\n*   Get your source ID.\n*   Change your warehouse credentials.\n*   [Set up custom alerts](https://www.rudderstack.com/docs/data-governance/alerts/) for your Reverse ETL source.\n*   Delete the source permanently.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot delete a source that is connected to any destination.\n\n[![Edit source settings](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)\n\n## FAQ\n\n#### **What do the three validations under Verifying Credentials imply?**\n\nWhen setting up a Reverse ETL source, you will see the following three validations under the **Verifying Credentials** option once you proceed after entering the warehouse credentials:\n\n[![Validating credentials](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)\n\nThese options are explained below:\n\n*   **Verifying Connection**: This option indicates that RudderStack is trying to connect to the warehouse with the provided warehouse credentials.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, it means that one or more fields specified in the warehouse credentials are incorrect. Verify your credentials in this case.\n\n*   **Able to List Schema**: This option checks if RudderStack is able to fetch all schema details by using the provided credentials.\n*   **Able to Access RudderStack Schema**: This option implies that RudderStack is able to access the `_rudderstack` schema you have created by running all commands in the [User Permissions](#creating-the-rudderstack-schema-and-granting-permissions) section.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, verify if you have successfully created the `_rudderstack` schema and given RudderStack the required permissions to access it.\n\n#### **What is the difference between the Table, Model, and Audience options when creating a Reverse ETL source?**\n\nWhen creating a new Reverse ETL source, you are presented with the following options from which RudderStack syncs the data:\n\n| Source type | Description |\n| --- | --- |\n| Table | RudderStack uses an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | RudderStack uses custom SQL queries to fetch specific warehouse data and sends them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | RudderStack filters data in your warehouse tables to create target customer lists and sends them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Google BigQuery Reverse ETL Source | RudderStack Docs",
    "description": "Send data from Google BigQuery to your entire stack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/get-started/what-is-rudderstack/",
    "markdown": "# Introduction to RudderStack | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "Introduction to RudderStack | RudderStack Docs",
    "description": "Customer data platform for developers to build smarter customer data pipelines.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/",
    "markdown": "# Flutter | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "Flutter | RudderStack Docs",
    "description": "Use the RudderStack Flutter SDK to send events from your Flutter applications to various destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/overview/",
    "markdown": "# Sources Overview | RudderStack Docs\n\nLearn about different event source types offered by RudderStack, namely Event Streams, Cloud Extract, and Reverse ETL.\n\n* * *\n\n*     2 minute read  \n    \n\nThe event data originates via a **source** in RudderStack. The most common event sources are your apps and web properties, but can include third-party cloud apps, server integrations, and even your own data warehouse.\n\nThe following sections provide more detail on the available source types, with links to the setup guides for each source.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> If you’re new to RudderStack, going through the [Quickstart](https://www.rudderstack.com/docs/get-started/quickstart/) guide to create your first source is recommended.\n\n## Event Streams\n\nRudderStack’s [Event Streams](https://www.rudderstack.com/docs/sources/event-streams/) feature lets you collect event data from all your sites and applications and route it to a wide array of customer tools and data warehouses.\n\n### SDKs\n\nRudderStack provides open source [SDKs](https://www.rudderstack.com/docs/sources/event-streams/sdks/) for web, mobile, and server applications:\n\n#### Web\n\nTrack customer event data from your website and web apps and send it to the specified destinations:\n\n*   [AMP](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-amp-analytics/)\n*   [JavaScript](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/)\n\n#### Mobile\n\nUse native mobile SDKs for the mobile operating systems and development frameworks:\n\n*   [Android](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/)\n*   [Cordova](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-cordova-sdk/)\n*   [Flutter](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/)\n*   [iOS](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/)\n*   [React Native](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-react-native-sdk/)\n*   [Unity](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-unity-sdk/)\n\n#### Server\n\nUse server-side SDKs to track event data from your backend applications and send it to the specified destinations:\n\n*   [.NET](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-dotnet-sdk/)\n*   [Go](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-go-sdk/)\n*   [Java](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-java-sdk/)\n*   [Node.js](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/)\n*   [PHP](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-php-sdk/)\n*   [Python](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-python-sdk/)\n*   [Ruby](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ruby-sdk/)\n*   [Rust](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-rust-sdk/)\n\n### Cloud Apps\n\nRudderStack lets you ingest event data from your [cloud apps](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/) and route it to the desired destinations.\n\n*   [Adjust](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/adjust/)\n*   [AppsFlyer](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/appsflyer/)\n*   [App Center](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/appcenter/)\n*   [Auth0](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/auth0/)\n*   [Braze](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/braze-currents/)\n*   [Canny](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/canny/)\n*   [ClickUp](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/clickup/)\n*   [Customer.io](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/customerio/)\n*   [Extole](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/extole/)\n*   [Formsort](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/formsort/)\n*   [Gainsight PX](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/gainsight-px/)\n*   [Iterable](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/iterable/)\n*   [Looker](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/looker/)\n*   [Mailjet](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/mailjet/)\n*   [Mailmodo](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/mailmodo/)\n*   [Monday](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/monday/)\n*   [MoEngage](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/moengage/)\n*   [Olark](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/olark/)\n*   [Ortto](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/ortto/)\n*   [PagerDuty](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/pagerduty/)\n*   [Pipedream](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/pipedream/)\n*   [PostHog](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/posthog/)\n*   [Refiner](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/refiner/)\n*   [RevenueCat](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/revenuecat/)\n*   [SatisMeter](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/satismeter/)\n*   [Segment](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/segment/)\n*   [Shopify](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/shopify/)\n*   [Signl4](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/signl4/)\n*   [Slack](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/slack/)\n\nWith RudderStack [Cloud Extract](https://www.rudderstack.com/docs/sources/extract/), you can collect the raw events and data from different cloud tools such as Facebook Ads, Google Analytics, Marketo, HubSpot, Stripe, and more. You can then build efficient ELT pipelines from these cloud apps to your data warehouse.\n\n*   [ActiveCampaign](https://www.rudderstack.com/docs/sources/extract/activecampaign/)\n*   [Amplitude](https://www.rudderstack.com/docs/sources/extract/amplitude/)\n*   [Bing Ads](https://www.rudderstack.com/docs/sources/extract/bing-ads/)\n*   [Chargebee](https://www.rudderstack.com/docs/sources/extract/chargebee/)\n*   [Customer.io](https://www.rudderstack.com/docs/sources/extract/customerio/)\n*   [Facebook Ads](https://www.rudderstack.com/docs/sources/extract/facebook-ads/)\n*   [Freshdesk](https://www.rudderstack.com/docs/sources/extract/freshdesk/)\n*   [Google Ads](https://www.rudderstack.com/docs/sources/extract/google-adwords/)\n*   [Google Analytics](https://www.rudderstack.com/docs/sources/extract/google-analytics/)\n*   [Google Analytics 4](https://www.rudderstack.com/docs/sources/extract/google-analytics/)\n*   [Google Search Console](https://www.rudderstack.com/docs/sources/extract/google-search-console/)\n*   [Google Sheets](https://www.rudderstack.com/docs/sources/extract/google-sheets/)\n*   [HubSpot](https://www.rudderstack.com/docs/sources/extract/hubspot/)\n*   [Intercom](https://www.rudderstack.com/docs/sources/extract/intercom/)\n*   [Iterable](https://www.rudderstack.com/docs/sources/extract/iterable/)\n*   [Klaviyo](https://www.rudderstack.com/docs/sources/extract/klaviyo/)\n*   [Mailchimp](https://www.rudderstack.com/docs/sources/extract/mailchimp/)\n*   [Marketo](https://www.rudderstack.com/docs/sources/extract/marketo/)\n*   [Marketo v2](https://www.rudderstack.com/docs/sources/extract/marketo-v2/)\n*   [Mixpanel](https://www.rudderstack.com/docs/sources/extract/mixpanel/)\n*   [Pipedrive](https://www.rudderstack.com/docs/sources/extract/pipedrive/)\n*   [Recurly](https://www.rudderstack.com/docs/sources/extract/recurly/)\n*   [Salesforce](https://www.rudderstack.com/docs/sources/extract/salesforce/)\n*   [SendGrid](https://www.rudderstack.com/docs/sources/extract/sendgrid/)\n*   [Stripe](https://www.rudderstack.com/docs/sources/extract/stripe/)\n*   [Zendesk Chat](https://www.rudderstack.com/docs/sources/extract/zendesk-chat/)\n*   [Zendesk Support](https://www.rudderstack.com/docs/sources/extract/zendesk-support/)\n\n## Reverse ETL\n\nWith RudderStack’s [Reverse ETL](https://www.rudderstack.com/docs/sources/reverse-etl/) capabilities, you can use your data warehouse as a data source. You can tap into your warehouse data and enrich data pipelines elsewhere in your stack, for enhanced customization, personalization, and targeting.\n\n*   [Amazon Redshift](https://www.rudderstack.com/docs/sources/reverse-etl/amazon-redshift/)\n*   [Amazon S3](https://www.rudderstack.com/docs/sources/reverse-etl/amazon-s3/)\n*   [Databricks](https://www.rudderstack.com/docs/sources/reverse-etl/databricks/)\n*   [Google BigQuery](https://www.rudderstack.com/docs/sources/reverse-etl/google-bigquery/)\n*   [MySQL](https://www.rudderstack.com/docs/sources/reverse-etl/mysql/)\n*   [PostgreSQL](https://www.rudderstack.com/docs/sources/reverse-etl/postgresql/)\n*   [Snowflake](https://www.rudderstack.com/docs/sources/reverse-etl/snowflake/)\n*   [Trino](https://www.rudderstack.com/docs/sources/reverse-etl/trino/)\n\n## API\n\nIt is recommended to use a native SDK for tracking and routing user events from your sources. RudderStack’s SDKs offer automatic tagging of user context, event batching, and retry functionality during delivery failure.\n\nIf you don’t see a supported SDK or library for your environment, you can send your data directly to the RudderStack [HTTP API](https://www.rudderstack.com/docs/api/http-api/).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Sources Overview | RudderStack Docs",
    "description": "Learn about different event source types offered by RudderStack, namely Event Streams, Cloud Extract, and Reverse ETL.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/installation-and-setup/",
    "markdown": "# Flutter SDK Installation and Setup\n\nInstall and set up the Flutter SDK.\n\n* * *\n\n*     6 minute read  \n    \n\nThis guide walks you through the SDK installation and initialization steps in detail.\n\n## Prerequisites\n\n*   Set up the [Flutter development environment](https://flutter.dev/docs/get-started/install) in your system.\n*   Sign up for [RudderStack Cloud](https://app.rudderstack.com/signup).\n*   [Set up a Flutter source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in your [RudderStack Cloud dashboard](https://app.rudderstack.com/). Note the **Write Key** for this source:\n\n[![Flutter source write key](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-write-key-new.webp)\n\n*   Note the [data plane URL](https://www.rudderstack.com/docs/dashboard-guides/overview/#data-plane-url) present in your RudderStack dashboard.\n\n## Installing the SDK\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Starting from v1.0.2, the RudderStack Flutter SDK is migrated to [Null Safety](https://dart.dev/null-safety).\n\nFollow these steps to add the Flutter SDK through [`pub`](https://pub.dev/packages/rudder_sdk_flutter):\n\n1.  Open `pubspec.yaml` and add `rudder_sdk_flutter` under `dependencies` section:\n\n```\ndependencies:\n  rudder_sdk_flutter: ^2.0.1\n```\n\n2.  Navigate to your application’s root folder and install all the required dependencies with the following command:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you are using Proguard full mode to optimize your app, add the lines specified in the [FAQ](#do-i-need-to-add-anything-to-my-android-proguard-rules) to your Android ProGuard rules.\n\n### Installing the SDK for the web\n\nTo install and use the Flutter SDK in your web app, follow the above steps to add the Flutter SDK. Additionally, copy the following snippet in the `<head>` section of your web page:\n\n```\n<script>\nrudderanalytics = window.rudderanalytics = [];\nfor (var methods = [\"load\", \"page\", \"track\", \"identify\", \"alias\", \"group\", \"ready\", \"reset\", \"getAnonymousId\", \"setAnonymousId\"], i = 0; i < methods.length; i++) {\n  var method = methods[i];\n  rudderanalytics[method] = function(a) {\n    return function() {\n      rudderanalytics.push([a].concat(Array.prototype.slice.call(arguments)))\n    }\n  }(method)\n}\n</script>\n\n<script src=\"https://cdn.rudderlabs.com/v1/rudder-analytics.min.js\"></script>\n```\n\n## Initializing the SDK\n\n1.  Import the SDK using the following snippet:\n\n```\nimport 'package:rudder_sdk_flutter_platform_interface/platform.dart';\nimport 'package:rudder_sdk_flutter/RudderController.dart';\n```\n\n2.  Add the following code in your application:\n\n```\nfinal RudderController rudderClient = RudderController.instance;\nRudderLogger.init(RudderLogger.VERBOSE);\nRudderConfigBuilder builder = RudderConfigBuilder();\nbuilder.withDataPlaneUrl(<DATA_PLANE_URL>);\nbuilder.withTrackLifecycleEvents(true);\nrudderClient.initialize(<WRITE_KEY>,config: builder.build());\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n\nThe `initialize` method has the following signature:\n\n| Name | Type | Description |\n| --- | --- | --- |\n| `writeKey`  <br>Required | String | Flutter source’s write key. |\n| `config` | `RudderConfig` | RudderStack client configuration. |\n\n## SDK initialization options\n\nYou can configure the SDK behavior using the `RudderConfig` object passed to the `rudderClient.initialize()` call during initialization.\n\nYou can create the object of `RudderConfig` class by either:\n\n*   Directly calling its constructor using the parameters documented below, or\n*   Using the `RudderConfigBuilder` class APIs as per your requirement\n\n| `RudderConfig` constructor parameter | `RudderConfigBuilder` class API | Type | Description | Default value |\n| --- | --- | --- | --- | --- |\n| `dataPlaneUrl` | `withDataPlaneUrl()` | String | The data plane URL. | `https://hosted.rudderlabs.com` |\n| `flushQueueSize` | `withFlushQueueSize()` | int | Number of events in a batch request to the server. | `30` |\n| `isDebug` | `withDebug()` | bool | When enabled, sets the log level as `debug`. For more information, refer to the [Debugging](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/features-and-usage/#debugging) section. | `false` |\n| `logLevel` | `withLogLevel()` | int | Controls the logs you want to see from the Flutter SDK. | `RudderLogger.RudderLogLevel.NONE` |\n| `mobileConfig` | `withMobileConfig()` | MobileConfig | Refer to the [`mobileConfig` parameters](#mobileconfig-parameters) section below. | \\-  |\n| `webConfig` | `withWebConfig()` | WebConfig | Refer to the [`webConfig` parameters](#webconfig-parameters) section below. | \\-  |\n| `controlPlaneUrl` | `withControlPlaneUrl()` | String | This parameter should be changed **only if** you are self-hosting the control plane. Refer to the [Self-hosted control plane](#self-hosted-control-plane) section for more information. The SDK will add `/sourceConfig` along with this URL to fetch the configuration. | `https://api.rudderlabs.com` |\n\n### mobileConfig parameters\n\nThe `mobileConfig` object contains the mobile-specific configuration parameters for the Flutter SDK.\n\n| Parameter | Type | Description | Default value |\n| --- | --- | --- | --- |\n| `dbCountThreshold` | int | Number of events to be saved in the SQLite database. Once this limit is reached, the older events are deleted from the database. | `10000` |\n| `sleepTimeOut` | int | Minimum waiting time to flush the events to the server. | `10 seconds` |\n| `configRefreshInterval` | int | Fetches the config from the dashboard after this specified time. | `2` |\n| `trackLifecycleEvents` | bool | Determines if the SDK will capture application life cycle events automatically. | `true` |\n| `autoCollectAdvertId` | bool | Determines if the SDK will collect the advertisement ID. | `false` |\n| `recordScreenViews` | bool | When enabled, the SDK automatically records the screens viewed by the user. | `false` |\n| `dbEncryption` | `RudderDBEncryption` | Specify whether to encrypt/decrypt the database using the specified key. See [Encrypting RudderStack databases](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/features-and-usage/#encrypting-rudderstack-databases) for more information. | \\-  |\n\n### webConfig parameters\n\nThe `webConfig` object contains the configuration parameters for using the SDK in the Flutter web applications.\n\n| Parameter | Type | Description | Default value |\n| --- | --- | --- | --- |\n| `destSDKBaseURL` | String | The SDK loads the integration from this path. |     |\n| `useBeacon` | bool | If enabled, the SDK sends the event payloads via the `navigator.sendBeacon()` utility | `False` |\n| `secureCookie` | bool | If enabled, the SDK sends the cookie to the storage backend via HTTPS. | `False` |\n| `loadIntegration` | bool | If disabled, the destination SDKs are not fetched by the SDK. | `True` |\n| `cookieConsentManagers` | Object | Refer to the [cookieConsentManager](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#cookieconsentmanager) section for more information. | \\-  |\n| `beaconFlushQueueInterval` | int | The SDK flushes the queue after this time interval (in milliseconds). | 600000 |\n| `maxBeaconItems` | int | The SDK flushes the queue when this number of events is reached. | 10  |\n| `maxItems` | int | Maximum number of events kept in the storage. | 100 |\n| `maxAttempts` | int | Maximum number of attempts the SDK makes to send the event to the destination. | 10  |\n| `backoffFactor` | int | Refers to the exponential base. | 2   |\n| `minRetryDelay` | int | The minimum delay expected before the SDK retries sending an event (in ms) | 1000 |\n| `maxRetryDelay` | int | The upper limit on the maximum delay for retrying an event (in ms) | 360000 |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n\n## Self-hosted control plane\n\nIf you are self-hosting RudderStack and using the [Control plane lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) utility to host your own control plane, then follow the steps in [this section](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/#using-sdk-sources-set-up-in-self-hosted-control-plane) and specify the `controlPlaneUrl` parameter in your [`RudderConfigBuilder`](#sdk-initialization-options) that points to the hosted configuration file.\n\n> ![danger](https://www.rudderstack.com/docs/images/danger.svg)\n> \n> You should not pass the `controlPlaneUrl` parameter during SDK initialization if you are using [RudderStack Cloud](https://app.rudderstack.com/). This parameter is supported **only** if you are using the open source [Control plane lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) utility to set up your own control plane.\n\n## FAQ\n\n#### Do I need to add anything to my Android ProGuard rules?\n\nAdd the following lines to your Android ProGuard rules if you are using Proguard full mode to optimize your app:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Add the below rules if you are using the Android SDK older than v1.20.0.\n> \n> Note that the rules are bundled in the SDK itself from v1.20.0 onwards.\n\n```\n// Reporter Module\n\n-keep class com.rudderstack.android.ruddermetricsreporterandroid.models.LabelEntity { *; }\n-keep class com.rudderstack.android.ruddermetricsreporterandroid.models.MetricEntity { *; }\n-keep class com.rudderstack.android.ruddermetricsreporterandroid.models.ErrorEntity { *; }\n\n// Required for the usage off TypeToken class in Utils.converToMap, Utils.convertToList\n\n-keep class com.google.gson.reflect.TypeToken { *; }\n-keep class * extends com.google.gson.reflect.TypeToken\n\n// Required for the serialization of SourceConfig once it is downloaded.\n\n-keep class com.google.gson.internal.LinkedTreeMap { *; }\n-keep class * implements java.io.Serializable { *; }\n-keep class com.rudderstack.rudderjsonadapter.RudderTypeAdapter { *; }\n-keep class * extends com.rudderstack.rudderjsonadapter.RudderTypeAdapter\n\n// Required to ensure the DefaultPersistenceProviderFactory is not removed by Proguard\n// and works as expected even when the customer is not using encryption feature.\n\n-dontwarn net.sqlcipher.Cursor\n-dontwarn net.sqlcipher.database.SQLiteDatabase$CursorFactory\n-dontwarn net.sqlcipher.database.SQLiteDatabase\n-dontwarn net.sqlcipher.database.SQLiteOpenHelper\n-keep class com.rudderstack.android.sdk.core.persistence.DefaultPersistenceProviderFactory { *; }\n\n// Required for the usage of annotations across reporter and web modules\n\n-dontwarn com.fasterxml.jackson.annotation.JsonIgnore\n-dontwarn com.squareup.moshi.Json\n-dontwarn com.fasterxml.jackson.annotation.JsonProperty\n\n// Required for Device Mode Transformations\n\n-keep class com.rudderstack.android.sdk.core.TransformationResponse { *; }\n-keep class com.rudderstack.android.sdk.core.TransformationResponseDeserializer { *; }\n-keep class com.rudderstack.android.sdk.core.TransformationRequest { *; }\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Flutter SDK Installation and Setup | RudderStack Docs",
    "description": "Install and set up the Flutter SDK.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/",
    "markdown": "# Event Stream Sources | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "Event Stream Sources | RudderStack Docs",
    "description": "Ingest your event data into RudderStack using cloud apps and SDKs.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/reverse-etl/mysql/",
    "markdown": "# MySQL Reverse ETL Source | RudderStack Docs\n\nSend data from MySQL to your entire stack.\n\n* * *\n\n*     6 minute read  \n    \n\n[MySQL](https://www.mysql.com/) is a popular open source relational DBMS.\n\nRudderStack supports MySQL as a data source from which you can ingest data and route it to your desired downstream destinations.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This source is compatible with MySQL v8.0.0 and above.\n\n## Grant permissions\n\nBefore you set up MySQL as a source, you must grant certain permissions on your MySQL database for RudderStack to access data from it.\n\nRun the SQL queries listed in the following sections in the **exact order** to grant these permissions:\n\n### Step 1: Create user\n\nCreate a new user `RUDDER` with a password `<password>` in MySQL:\n\n```\nCREATE USER RUDDER IDENTIFIED BY '<password>';\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Set a strong and unique password for creating the user in MySQL.\n\n### Step 2: Create RudderStack schema and grant permissions\n\n1.  Create a dedicated schema `_rudderstack`.\n\n```\nCREATE SCHEMA _rudderstack;\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The `_rudderstack` schema is used by RudderStack for storing the state of each data sync. **Do not change this name**.\n\n2.  Grant full access to the schema `_rudderstack` for the user `RUDDER`.\n\n```\nGRANT ALL PRIVILEGES ON _rudderstack.* TO RUDDER;\n```\n\n### Step 3: Grant permissions on schema and table\n\n1.  Grant access to the user `RUDDER` to read data from tables in `<YOUR_SCHEMA>`:\n\n```\nGRANT SELECT ON  <YOUR_SCHEMA>.* TO RUDDER;\n```\n\n## Set up MySQL source in RudderStack\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  On the **Connections** page, click **Add source**.\n3.  Under **Sources**, click **Reverse ETL** and select **MySQL**.\n\n### Configure warehouse credentials\n\nYou can choose to proceed with your existing warehouse credentials if you have configured them in the RudderStack dashboard previously. Otherwise, click **Add new credentials** to add new credentials for your warehouse.\n\n*   **Host**: Enter the host name of your MySQL instance.\n*   **Port**: Enter the port number associated with the MySQL database instance.\n*   **Database**: Enter the database name in your MySQL instance from where RudderStack ingests the data.\n*   **User**: Enter the user name of your MySQL instance.\n*   **Password**: Enter the password for the above user.\n*   **SSL Mode**: Select the SSL mode from **false** or **skip-verify** depending on how RudderStack should connect to your MySQL instance.\n\nClick the **Verify** button on the top right. RudderStack will then [verify and validate your credentials](#faq). Once verified, click **Continue** to proceed.\n\n### Specify name and source type\n\n*   **Source name**: Assign a name to uniquely identify the source in the RudderStack dashboard.\n*   **Select your source type**: RudderStack lets you set up a Reverse ETL source from a warehouse **Table** or **Model**.\n\n| Source type | Description |\n| --- | --- |\n| Table | Use an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | Use custom SQL queries to fetch specific warehouse data and send them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n\n#### **Use warehouse table as source**\n\nUnder **Select your source type**, choose **Table** and specify the below fields:\n\n*   **Schema**: Select the warehouse schema from the dropdown.\n*   **Table**: Choose the required table from which RudderStack syncs the data.\n*   **Primary key**: Select the column from the above table that uniquely identifies your records in the warehouse.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n[![Use table as source](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use model as source**\n\nUnder **Select your source type**, choose **Model** and click **Continue**.\n\nTo configure a model as source:\n\n1.  Enter an optional description and specify the custom SQL query in **Query** section.\n2.  Click **Run Query** to fetch the data preview.\n3.  Select the **Primary key** to use a column that uniquely identifies your warehouse records.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can set a primary key only after you run the SQL query successfully using the **Run Query** option.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` in SQL query of the model.\n\n[![Model configuration](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n### Review and complete setup\n\nTo make any changes to the warehouse credentials or source configuration, click the edit icon present next to those sections.\n\n[![Edit source configuration](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)\n\nReview your configuration and click **Create source** to complete the setup.\n\n## Connect destination\n\nYou can connect this source to an existing or new [destination](https://www.rudderstack.com/docs/destinations/overview/) to start using it. To connect to a destination later, click **Done** on the top right.\n\n[![Next steps](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)\n\nYou will then be redirected to the **Overview** page of the source where you get the option of connecting it to an existing or new destination.\n\n[![Add destination](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)\n\nSee [Set up Reverse ETL Connection](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/) section for more information.\n\n## Update source configuration and settings\n\nGo to the **Configuration** tab of your Reverse ETL source to update the configuration depending on your source type:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot change the source type on this page.\n\n[![Update source configuration](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)\n\nThe below table lists the options you can update:\n\n| Source type | Configurable options |\n| --- | --- |\n| Table | [Schema, Table, Primary key](#use-warehouse-table-as-source) |\n| Model | *   [Model settings](#use-model-as-source)<br>*   [Primary key](#use-model-as-source)<br><br>**Note**: You can set the primary key only after the SQL query runs successfully. |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> After updating the configuration, the next sync will be a full sync.\n\nGo to the **Settings** tab to:\n\n*   Get your source ID.\n*   Change your warehouse credentials.\n*   [Set up custom alerts](https://www.rudderstack.com/docs/data-governance/alerts/) for your Reverse ETL source.\n*   Delete the source permanently.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot delete a source that is connected to any destination.\n\n[![Edit source settings](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)\n\n## FAQ\n\n#### **What do the three validations under Verifying Credentials imply?**\n\nWhen setting up a Reverse ETL source, you will see the following three validations under the **Verifying Credentials** option once you proceed after entering the warehouse credentials:\n\n[![Validating credentials](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)\n\nThese options are explained below:\n\n*   **Verifying Connection**: This option indicates that RudderStack is trying to connect to the warehouse with the provided warehouse credentials.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, it means that one or more fields specified in the warehouse credentials are incorrect. Verify your credentials in this case.\n\n*   **Able to List Schema**: This option checks if RudderStack is able to fetch all schema details by using the provided credentials.\n*   **Able to Access RudderStack Schema**: This option implies that RudderStack is able to access the `_rudderstack` schema you have created by running all commands in the [User Permissions](#creating-the-rudderstack-schema-and-granting-permissions) section.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, verify if you have successfully created the `_rudderstack` schema and given RudderStack the required permissions to access it.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "MySQL Reverse ETL Source | RudderStack Docs",
    "description": "Send data from MySQL to your entire stack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/get-started/quickstart/",
    "markdown": "# Quickstart Guides | RudderStack Docs\n\nTest RudderStack’s pipelines in less than 10 minutes.\n\n* * *\n\n*     2 minute read  \n    \n\nThe easiest way to get started with RudderStack is set up a [data pipeline](https://www.rudderstack.com/docs/data-pipelines/overview/) to collect data from a variety of cloud and warehouse sources, then automatically route them to other tools in your stack.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> RudderStack’s pipelines simplify customer data collection and integration across your entire stack, eliminating expensive data wrangling and custom solutions.\n\nRudderStack offers three types of data pipelines:\n\n*   [Event Stream](https://www.rudderstack.com/docs/data-pipelines/event-stream/)\n*   [Reverse ETL](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/)\n*   [Cloud Extract (ETL)](https://www.rudderstack.com/docs/data-pipelines/cloud-extract/)\n\n## Event Stream\n\nRudderStack’s [Event Stream](https://www.rudderstack.com/docs/data-pipelines/event-stream/) feature helps you collect behavioral data from your websites, track user engagements from your mobile apps, and complement client-side tracking with events from your backend.\n\nWith over 200 pre-built integrations, including 16 SDKs, you can stream data directly to your warehouse and route events in real-time to all the downstream tools in no time.\n\nSee the [Event Stream Quickstart](https://www.rudderstack.com/docs/data-pipelines/event-stream/quickstart/) guide to set up a Event Stream pipeline in less than 15 minutes.\n\n## Reverse ETL\n\nA data warehouse is where you collect all of your data and discover your most valuable insights. However, activating those insights in other tools within your stack can be a big challenge.\n\nWith RudderStack’s [Reverse ETL](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/) feature, your teams can send the enriched warehouse data to any downstream tool for activation use cases like personalization, engagement, and more.\n\nSee the [Reverse ETL Quickstart](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/quickstart/) guide to set up and activate your Reverse ETL pipeline.\n\nRudderStack’s [Cloud Extract ETL](https://www.rudderstack.com/docs/data-pipelines/cloud-extract/) feature, you can simplify data extraction (ETL) from your cloud applications into a centralized data warehouse repository, saving time and resources.\n\nYou can automate this process to run on a scheduled basis, reducing the need for manual intervention and streamlining data workflows. This also ensures that data is consistently updated and available for analysis in a timely manner.\n\n## Support\n\nFor any questions on using RudderStack, you can:\n\n*   Start a conversation in our [Community Slack](https://rudderstack.com/join-rudderstack-slack-community).\n*   Drop an email to [RudderStack support](mailto:support@rudderstack.com).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Quickstart Guides | RudderStack Docs",
    "description": "Test RudderStack's pipelines in less than 10 minutes.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/reverse-etl/databricks/",
    "markdown": "# Databricks Reverse ETL Source | RudderStack Docs\n\nSend data from Databricks to your entire stack.\n\n* * *\n\n*     8 minute read  \n    \n\n[Databricks](https://databricks.com/) is a data analytics platform that lets you easily integrate with open source libraries. It offers a simple collaborative environment to run interactive and scheduled data analysis workloads.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> You can now ingest data into RudderStack by running queries on your Databricks cluster or [SQL warehouse](https://docs.databricks.com/en/sql/admin/create-sql-warehouse.html).\n\n## Grant permissions\n\nBefore you set up Databricks as a source, you must grant certain permissions in your Databricks instance for RudderStack to access data from it.\n\nRun the queries listed in the following sections in the **exact order** to grant the required permissions:\n\n### Step 1: Add user\n\nAdd a new user (for example, [user@example.com](mailto:user@example.com)) by following the steps in the [Databricks documentation](https://docs.databricks.com/administration-guide/users-groups/users.html#add-a-user).\n\n### Step 2: Create RudderStack schema and grant permissions to the role\n\n1.  Create a dedicated schema `_rudderstack`.\n\n```\nCREATE SCHEMA `_rudderstack`;\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The `_rudderstack` schema is used by RudderStack for storing the state of each data sync. **Do not change this name**.\n\n2.  Grant full access to the schema `_rudderstack` for the user created in step 1.\n\n```\nGRANT ALL PRIVILEGES ON SCHEMA `_rudderstack` TO `user@example.com`\n```\n\nReplace `user@example.com` with the user created in step 1.\n\n## Set up Databricks source in RudderStack\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  On the **Connections** page, click **Add source**.\n3.  Under **Sources**, click **Reverse ETL** and select **Databricks**.\n\n### Configure warehouse credentials\n\nYou can choose to proceed with your existing warehouse credentials if you have configured them in the RudderStack dashboard previously. Otherwise, click **Add new credentials** to add the connection details of your Databricks cluster or SQL warehouse:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For most use cases, RudderStack recommends using a SQL warehouse over a cluster as they generally cost less and are faster to spin up. In contrast, clusters are used for much larger operations that require more resources.\n\n*   **Host**: Enter the server hostname.\n*   **Port**: Enter the port number.\n*   **Path**: Enter the HTTP path.\n*   **Token**: Enter the personal access token.\n*   **Catalog**: Enter the name of your Unity catalog. See [Databricks documentation](https://docs.databricks.com/en/data-governance/unity-catalog/create-catalogs.html#view-catalog-details) for more information on getting the catalog details.\n\nSee the following FAQs for more information on obtaining the host, port, path, and token for your Databricks instance depending on type:\n\n*   [Databricks cluster](#databricks-cluster-connection-credentials)\n*   [SQL warehouse](#databricks-sql-warehouse-connection-credentials)\n\nClick the **Verify** button on the top right. RudderStack will then [verify and validate your credentials](#faq). Once verified, click **Continue** to proceed.\n\n### Specify name and source type\n\nSpecify the source name and type in this step.\n\n*   **Source name**: Assign a name to uniquely identify the source in the RudderStack dashboard.\n*   **Select your source type**: RudderStack lets you set up a Reverse ETL source from a warehouse **Table**, **Model**, or **Audience**.\n\n| Source type | Description |\n| --- | --- |\n| Table | Use an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | Use custom SQL queries to fetch specific warehouse data and send them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | Filter data in your warehouse tables to create target customer lists and send them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\n#### **Use warehouse table as source**\n\nUnder **Select your source type**, choose **Table** and specify the below fields:\n\n*   **Schema**: Select the warehouse schema from the dropdown.\n*   **Table**: Choose the required table from which RudderStack syncs the data.\n*   **Primary key**: Select the column from the above table that uniquely identifies your records in the warehouse.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n[![Use table as source](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use model as source**\n\nUnder **Select your source type**, choose **Model** and click **Continue**.\n\nTo configure a model as source:\n\n1.  Enter an optional description and specify the custom SQL query in **Query** section.\n2.  Click **Run Query** to fetch the data preview.\n3.  Select the **Primary key** to use a column that uniquely identifies your warehouse records.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can set a primary key only after you run the SQL query successfully using the **Run Query** option.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` in SQL query of the model.\n\n[![Model configuration](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use audience as source**\n\nUnder **Select your source type**, choose **Audience** and follow these steps:\n\n1.  Configure your audience source by specifying the below fields:\n    \n    *   **Schema**: Select the warehouse schema from the dropdown.\n    *   **Table**: Choose the required table from which RudderStack syncs the data.\n    *   **Primary key**: Select the column from the above table that uniquely identify your records in the warehouse.\n\n[![Use audience as source](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n2.  Set your [audience conditions](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/#set-your-conditions).\n3.  Click **Preview** to see the resulting data. Then, click **Continue** to proceed.\n\n[![Audience configuration](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n### Review and complete setup\n\nTo make any changes to the warehouse credentials or source configuration, click the edit icon present next to those sections.\n\n[![Edit source configuration](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)\n\nReview your configuration and click **Create source** to complete the setup.\n\n## Connect destination\n\nYou can connect this source to an existing or new [destination](https://www.rudderstack.com/docs/destinations/overview/) to start using it. To connect to a destination later, click **Done** on the top right.\n\n[![Next steps](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)\n\nYou will then be redirected to the **Overview** page of the source where you get the option of connecting it to an existing or new destination.\n\n[![Add destination](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)\n\nSee [Set up Reverse ETL Connection](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/) section for more information.\n\n## Update source configuration and settings\n\nGo to the **Configuration** tab of your Reverse ETL source to update the configuration depending on your source type:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot change the source type on this page.\n\n[![Update source configuration](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)\n\nThe below table lists the options you can update:\n\n| Source type | Configurable options |\n| --- | --- |\n| Table | [Schema, Table, Primary key](#use-warehouse-table-as-source) |\n| Model | *   [Model settings](#use-model-as-source)<br>*   [Primary key](#use-model-as-source)<br><br>**Note**: You can set the primary key only after the SQL query runs successfully. |\n| Audience | *   [Schema, Table, Primary key](#use-audience-as-source)<br>*   [Audience conditions](#use-audience-as-source) |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> After updating the configuration, the next sync will be a full sync.\n\nGo to the **Settings** tab to:\n\n*   Get your source ID.\n*   Change your warehouse credentials.\n*   [Set up custom alerts](https://www.rudderstack.com/docs/data-governance/alerts/) for your Reverse ETL source.\n*   Delete the source permanently.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot delete a source that is connected to any destination.\n\n[![Edit source settings](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)\n\n## FAQ\n\n#### **Where can I obtain the connection credentials for the Databricks cluster?**\n\nTo obtain the **Host**, **Path**, and **Port** number, go to your Databricks account and follow these steps:\n\n1.  Go to the **Compute** tab and select your Databricks cluster.\n2.  Click **Advanced options** > **JDBC/ODBC** tab to find the required settings:\n\n[![Select Databricks source in RudderStack](https://www.rudderstack.com/docs/images/warehouse-actions-sources/connection-settings-databricks.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/connection-settings-databricks.webp)\n\nTo obtain the **Token**, go to the **Settings** > **User Settings** in your Databricks account and generate a new personal access token:\n\n[![Select Databricks source in RudderStack](https://www.rudderstack.com/docs/images/warehouse-actions-sources/connection-settings-databricks-2.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/connection-settings-databricks-2.webp)\n\n#### **Where can I obtain the connection credentials for the SQL warehouse?**\n\nTo obtain the **Host**, **Path**, and **Port** number for your SQL warehouse, go to your Databricks account and follow these steps:\n\n1.  Go to the **SQL warehouses** tab and select your warehouse.\n2.  Click the **Connection details** tab to find the **Host**, **Path**, and **Port** number.\n\n[![SQL warehouse connection details](https://www.rudderstack.com/docs/images/warehouse-actions-sources/connection-settings-sql-warehouse.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/connection-settings-sql-warehouse.webp)\n\nTo obtain the **Token**, go to the **Settings** > **User Settings** in your Databricks account and generate a new personal access token:\n\n[![Databricks access token](https://www.rudderstack.com/docs/images/warehouse-actions-sources/connection-settings-databricks-azure-token.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/connection-settings-databricks-azure-token.webp)\n\n#### **What do the three validations under Verifying Credentials imply?**\n\nWhen setting up a Reverse ETL source, you will see the following three validations under the **Verifying Credentials** option once you proceed after entering the warehouse credentials:\n\n[![Validating credentials](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)\n\nThese options are explained below:\n\n*   **Verifying Connection**: This option indicates that RudderStack is trying to connect to the warehouse with the provided warehouse credentials.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, it means that one or more fields specified in the warehouse credentials are incorrect. Verify your credentials in this case.\n\n*   **Able to List Schema**: This option checks if RudderStack is able to fetch all schema details by using the provided credentials.\n*   **Able to Access RudderStack Schema**: This option implies that RudderStack is able to access the `_rudderstack` schema you have created by running all commands in the [User Permissions](#creating-the-rudderstack-schema-and-granting-permissions) section.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, verify if you have successfully created the `_rudderstack` schema and given RudderStack the required permissions to access it.\n\n#### **What is the difference between the Table, Model, and Audience options when creating a Reverse ETL source?**\n\nWhen creating a new Reverse ETL source, you are presented with the following options from which RudderStack syncs the data:\n\n| Source type | Description |\n| --- | --- |\n| Table | RudderStack uses an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | RudderStack uses custom SQL queries to fetch specific warehouse data and sends them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | RudderStack filters data in your warehouse tables to create target customer lists and sends them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\n#### **Does my SQL warehouse/cluster need to be active when running the validations?**\n\nYes - otherwise, the validations might fail.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Databricks Reverse ETL Source | RudderStack Docs",
    "description": "Send data from Databricks to your entire stack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/",
    "markdown": "# Cloud Apps Sources | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "Cloud Apps Sources | RudderStack Docs",
    "description": "Ingest your event data from your cloud apps into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/get-started/rudderstack-cloud/",
    "markdown": "# RudderStack Cloud | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "RudderStack Cloud | RudderStack Docs",
    "description": "Learn the RudderStack Cloud dashboard workflow.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/supported-api/",
    "markdown": "# Flutter SDK API | RudderStack Docs\n\nTrack and send events using the various Flutter SDK API.\n\n* * *\n\n*     7 minute read  \n    \n\nThe Flutter SDK provides a comprehensive API that lets you track and send your event data to any destination.\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` event is shown below:\n\n```\nRudderTraits traits = RudderTraits();\ntraits.putBirthdayDate(new DateTime.now());\ntraits.putEmail(\"alex@example.com\");\ntraits.putFirstName(\"Alex\");\ntraits.putLastName(\"Keener\");\ntraits.putGender(\"Male\");\ntraits.putPhone(\"5555555555\");\n\nAddress address = Address();\naddress.putCity(\"City\");\naddress.putCountry(\"USA\");\ntraits.putAddress(address);\n\ntraits.put(\"boolean\", true);\ntraits.put(\"integer\", 50);\ntraits.put(\"float\", 120.4);\ntraits.put(\"long\", 1234);\ntraits.put(\"string\", \"hello\");\ntraits.put(\"date\", new DateTime.now().millisecondsSinceEpoch);\n\nrudderClient.identify(\"1hKOmRA4GRlm\", traits: traits, options: null);\n```\n\nThe `identify` method has the following signature:\n\n| Name | Data Type | Description |\n| --- | --- | --- |\n| `userId`  <br>Required | String | Unique identifier for a user in your database. |\n| `traits` | `RudderTraits` | An optional dictionary of the user’s traits like `name` or `email`. |\n| `options` | `RudderOption` | Extra options for the `identify` event. |\n\nOnce a user is identified, the SDK persists all user information and passes it to the successive `track` or `screen` calls. To reset the user identification, you can use the [`reset`](#reset) method.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   For older SDK versions (< v2.5.0), the Flutter SDK captures the device ID and uses that as `anonymousId` for identifying the user. This helps the SDK to track the users across the application installation.\n> *   Starting from v2.5.0 the SDK uses a UUID as `anonymousId` instead of the device ID. If you are upgrading from a previous SDK version, see [How RudderStack sets anonymous ID](#how-sdk-sets-anonymous-id) for more information on how the SDK collects and sets `anonymousId`.\n\n## Setting a custom anonymous ID\n\nYou can use the following method to override and set your own `anonymousId`:\n\n```\nrudderClient.putAnonymousId(<ANONYMOUS_ID>);\n```\n\n### How device ID is set for Android and iOS\n\n*   On Android devices, the `deviceId` is assigned during the first boot. It remains consistent across the applications and installs and changes only after factory reset.\n*   According to [Apple documentation](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor), multiple apps from the same vendor are assigned the same `deviceId`. If all applications from the vendor are uninstalled and then reinstalled, then they are assigned a new `deviceId`.\n\n### Disabling device ID collection\n\nStarting from v2.5.0, you can disable the collection of device ID by setting `collectDeviceId` in the `MobileConfig` object to `false`.\n\nYou will observe the following changes when this property is set to false:\n\n*   The SDK does not send `context.device.id` as a part of the event payload.\n*   The SDK replaces the existing `anonymousId` (if it is equal to the device ID) with a UUID.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> These changes are introduced to make the SDK more compliant with all policies around the device ID collection.\n\n```\nMobileConfig mc = MobileConfig(collectDeviceId: false);\n    RudderConfigBuilder builder = RudderConfigBuilder();\n    builder\n      ..withMobileConfig(mc)\n      ..withDataPlaneUrl('DATA_PLANE_URL')\n      ..withDataResidencyServer(DataResidencyServer.US);\n    rudderClient.initialize('WRITE_KEY', config: builder.build(), options: null);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you are upgrading to the latest SDK from a previous version (< v2.5.0) **and** disabling device ID collection using `collectDeviceId:false`:\n> \n> *   Make sure your user transformations are not dependent on `context.device.id` as the SDK will not send this value in the event payload.\n> *   The `context.device.id` column in your warehouse destination will not be populated henceforth (it will still contain data populated by the previous SDK version).\n\n### How SDK sets anonymous ID\n\n#### **For direct/fresh SDK installation**\n\nRudderStack uses UUID as `anonymousId` regardless of whether [`collectDeviceId`](#collectdeviceid) is set to `true` or `false`.\n\n#### **For updating SDK from older version**\n\nIf you are updating your Flutter SDK from an older version (< v2.5.0), then:\n\n*   RudderStack will continue to use the device ID as `anonymousId` - it will not break the existing SDK behavior **until** you set `collectDeviceId` to `false`.\n*   If you set `collectDeviceId` to `false`, the SDK checks if the existing `anonymousId` is a device ID. If yes, it sets a new UUID as the `anonymousId`.\n*   If you have used the [`putAnonymousId`](#setting-a-custom-anonymous-id) method to set your own `anonymousId`, then the SDK will **not** modify it even if you set `collectDeviceId` to `false`.\n\n### Obtaining user traits\n\nThe following snippet shows how you can obtain the user traits after making an `identify` call:\n\n```\nMap context = await rudderClient.getRudderContext();\nprint(context[\"traits\"]);\n```\n\nFor the web apps, the `getRudderContext` API returns the user’s `traits` and `anonymousId`.\n\n### Setting a custom ID\n\nYou can pass a custom ID along with the standard `userId` in your `identify` calls. RudderStack adds this value under `context.externalId`.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack supports passing `externalId` only in the `identify` events. You must not pass this ID in other API calls like `track`, `page`, etc.\n\nThe following code snippet shows how to add `externalId` to your `identify` event:\n\n```\nRudderOption option = RudderOption();\noption.putExternalId(\"externalId\", \"some_external_id_1\");\nrudderClient.identify(\"1hKOmRA4GRlm\", options: option);\n```\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you track the user actions along with any properties associated with them.\n\nA sample `track` event is shown below:\n\n```\nRudderProperty property = RudderProperty();\nproperty.put(\"test_key_1\", \"test_key_1\");\nRudderProperty childProperty = RudderProperty();\nchildProperty.put(\"test_child_key_1\", \"test_child_value_1\");\nproperty.put(\"test_key_2\",childProperty);\nrudderClient.track(\"Test Event\", properties: property);\n```\n\nThe `track` method has the following signature:\n\n| Name | Type | Description |\n| --- | --- | --- |\n| `name`  <br>Required | String | Name of the tracked event. |\n| `properties` | `RudderProperty` | An optional dictionary of the properties associated with the event. |\n| `options` | `RudderOption` | Extra options for the `track` event. |\n\n### Lifecycle events\n\nThe Flutter SDK automatically tracks the following **optional** [application lifecycle events](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/):\n\n*   [`Application Installed`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-installed)\n*   [`Application Updated`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-updated)\n*   [`Application Opened`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-opened)\n*   [`Application Backgrounded`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-backgrounded)\n\nYou can disable these events by calling `withTrackLifeCycleEvents(false)` in the `RudderConfigBuilder` object while initializing the SDK. However, it is **highly recommended** to keep them enabled.\n\n## Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It lets you record the screen views on your mobile app along with other relevant information about the screen.\n\nFor the web apps, the SDK internally calls the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) API with the provided parameters.\n\nA sample `screen` event is shown below:\n\n```\nRudderProperty screenProperty = RudderProperty();\n  screenProperty.put(\"browser\", \"Chrome\");\n  screenProperty.put(\"device\", \"Macbook Pro\");\n  rudderClient.screen(\"Walmart Cart\",\n      category: \"home\",\n      properties: screenProperty,\n      options: null);\n```\n\nThe `screen` method has the following signature:\n\n| Name | Type | Description |\n| --- | --- | --- |\n| `screenName`  <br>Required | String | Name of the viewed screen. |\n| `category` | String | Category of the viewed page (web) or screen (mobile). |\n| `properties` | `RudderProperty` | An optional dictionary of the properties associated with the event. |\n| `options` | `RudderOption` | Extra options for the `screen` event. |\n\n### Automatic screen recording\n\nTo track the screen views of your Flutter app screens, follow these steps:\n\n1.  Define the `routes` with their names to the `Material App` constructor of the entry widget.\n2.  Register an instance of the custom navigation observer to the `Material App` constructor of the entry widget.\n\nThe following snippet includes the code for the above two steps:\n\n```\nimport 'package:flutter/material.dart';\nimport 'home_screen.dart';\nimport 'screen2.dart';\nimport 'screen3.dart';\nimport 'my_route_observer.dart';\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n// Step 2. Registering an instance of our custom navigation observer.\n      navigatorObservers: [\n        MyRouteObserver(),\n      ],\n      home: const HomeScreen(),\n// Step 1. Defining the named routes\n      routes: {\n        'screen2': (context) => const Screen2(),\n        'screen3': (context) => const Screen3(),\n      },\n    );\n  }\n}\n\nFuture<void> main() async {\n  runApp(const MyApp());\n}\n```\n\n3.  Finally, add the below code for the custom navigation observer used above:\n\n```\nimport 'package:flutter/material.dart';\nimport 'package:rudder_sdk_flutter/RudderController.dart';\n\nclass MyRouteObserver extends RouteObserver<PageRoute<dynamic>> {\n  @override\n  void didPush(Route<dynamic> route, Route<dynamic>? previousRoute) {\n    super.didPush(route, previousRoute);\n    if (route is PageRoute && route.settings.name != null) {\n      RudderController.instance.screen(route.settings.name!);\n    }\n  }\n\n  @override\n  void didPop(Route<dynamic> route, Route<dynamic>? previousRoute) {\n    super.didPop(route, previousRoute);\n    if (previousRoute is PageRoute && route is PageRoute) {\n      RudderController.instance.screen(previousRoute.settings.name!);\n    }\n  }\n}\n```\n\n## Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack does not persist the group traits across the sessions.\n\nA sample `group` event is shown below:\n\n```\nRudderTraits groupTraits = RudderTraits();\ngroupTraits.put(\"foo\", \"bar\");\ngroupTraits.put(\"foo1\", \"bar1\");\nrudderClient.group(\"sample_group_id\",\n    groupTraits: groupTraits, options: null);\n```\n\nThe `group` method has the following signature:\n\n| Name | Type | Description |\n| --- | --- | --- |\n| `groupId`  <br>Required | String | Unique identifier of the group in your database. |\n| `groupTraits` | `RudderTraits` | An optional dictionary of the group’s traits like `name` or `email`. |\n| `options` | `RudderOption` | Extra options for the `group` event. |\n\n## Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly. You can use `alias` for managing the user’s identity in some of the downstream destinations.\n\nWhen you make an `alias` call, RudderStack replaces the old user ID with the new user ID and persists this identification across the sessions.\n\nA sample `alias` call is shown below:\n\n```\nrudderClient.alias(\"new_user_id\", options: null);\n```\n\nThe `alias` method has the following signature:\n\n| Name | Type | Description |\n| --- | --- | --- |\n| `newId`  <br>Required | String | The new user identifier. |\n| `options` | `RudderOption` | Extra options for the `alias` event. |\n\n## Reset\n\nYou can use the `reset` method to clear the persisted user traits. It also resets the `anonymousId` with a new UUID if you call it with `clearAnonymousId: true` (for SDK v2.5.0 and later).\n\n```\nrudderClient.reset(clearAnonymousId: true);\n```\n\nTo clear only user traits, call `reset` with `clearAnonymousId: false`.\n\n## FAQ\n\n#### How does the Flutter SDK handle events larger than 32KB?\n\nThe Flutter SDK drops any events greater than 32KB.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Flutter SDK API | RudderStack Docs",
    "description": "Track and send events using the various Flutter SDK API.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/features-and-usage/",
    "markdown": "# Flutter SDK Features and Usage\n\nFeatures and use cases that you can implement using the Flutter SDK.\n\n* * *\n\n*     8 minute read  \n    \n\nThis guide walks you through the different Flutter SDK features and how to use them.\n\n## Encrypting RudderStack databases\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is available in the Flutter SDK from v2.6.0 onwards.\n\nTo use the database encryption feature in the Flutter SDK, follow these steps:\n\n1.  Add the new `rudder_plugin_db_encryption` package to your app by adding the below line to your `pubspec.yml`:\n\n```\nrudder_plugin_db_encryption: ^1.0.1\n```\n\n2.  Run the following command:\n\n3.  Once the package is installed, import it by running the following command:\n\n```\nimport 'package:rudder_plugin_db_encryption/rudder_plugin_db_encryption.dart';\n```\n\n4.  Create a `RudderDBEncryption` object and pass it while initializing the SDK, as shown:\n\n```\nRudderDBEncryption dbEncryption = RudderDBEncryption(true, \"<encryption_key>\");\n    MobileConfig mc = MobileConfig(dbEncryption: dbEncryption);\n    RudderConfigBuilder builder = RudderConfigBuilder();\n    builder\n      ..withDataPlaneUrl(\"DATA_PLANE_URL\")\n      ..withMobileConfig(mc);\n    rudderClient.initialize(\"WRITE_KEY\", config: builder.build());\n```\n\nThe `RudderDBEncryption` class accepts the following parameters:\n\n| Parameter | Type | Description | Default value |\n| --- | --- | --- | --- |\n| `enable` | bool | Specifies whether to encrypt/decrypt the database. | `False` |\n| `encryption_key` | String | Key used to encrypt/decrypt the database. | \\-  |\n\nTo remove encryption from a database, configure the `RudderDBEncryption` object with your encryption key and set `enable` to `false`.\n\n**Instructions for iOS**\n\nThe `rudder_plugin_db_encryption` uses the [SQLCipher](https://github.com/sqlcipher/sqlcipher) Cocoapod under the hood to perform encryption. This Cocoapod requires the removal of any references to the standard SQLite system library for it to function as expected.\n\nIf you set up a project to inadvertently include a linking reference against the standard SQLite library before SQLCipher, it is possible that the application builds and runs correctly but does not use SQLCipher for encryption. This is not a problem for most projects but there are certain cases where unintentional SQLite linking can occur.\n\nOne such example is when using CocoaPods or some other sub-project that declares a dependency on the SQLite3 library. In this case, adding a pod to a project can **silently** modify the project settings in such a way that SQLCipher is not properly linked.\n\nYou can identify and fix the above linking issue during the development stage by looking for the below error log from the SDK:\n\n```\nRSDBPersistentManager: createDB: Cannot encrypt the Database as SQLCipher wasn't linked correctly.\n```\n\nTo fix the linking issue, add a linker flag to your project settings to ensure that the Xcode links SQLCipher before SQLite. Follow these steps:\n\n1.  Open the project-level build settings. These are the global project settings, not for the individual application target.\n2.  Locate the **Other Linker Flags** setting and add one of the following commands depending on how you are integrating SQLCipher into the app.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you are not adding `SQLCipher` into the app on your own and only using `rudder_plugin_db_encryption`, then see only the points 3 and 4 in the below table - depending on whether you are using `use_frameworks!` in your app’s `ios/Podfile`.\n\n| Scenario | Command | Notes |\n| --- | --- | --- |\n| When using SQLCipher commercial edition static libraries | `$(PROJECT_DIR)/sqlcipher-static-ios/ios-libs/libsqlcipher-ios.a` | Adjust according to the path to the `libsqlcipher-ios.a` you received as a part of the package. |\n| When using the `sqlcipher.xcodeproj` included in the SQLCipher Git repository | `$(BUILT_PRODUCTS_DIR)/libsqlcipher.a` | \\-  |\n| When using the SQLCipher CocoaPod with the `use_frameworks` Podfile setting enabled | `-framework SQLCipher` | \\-  |\n| When using the SQLCipher CocoaPod without the `use_frameworks` Podfile setting enabled | `-lSQLCipher` | \\-  |\n\nOnce the linker flag is added to the project-level build settings, you should see something like the below image:\n\n[![Project-level build settings](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-project-build-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-project-build-settings.webp)\n\nAfter adding the linker flag to your project-level build settings, check the target-level build settings to ensure SQLCipher is shown first, as seen below:\n\n[![Target-level build settings](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-target-build-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-target-build-settings.webp)\n\n## Gzipping requests\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is supported only for the mobile platforms.\n\nThe Flutter SDK automatically gzips event requests before sending it to the RudderStack backend (data plane) for processing. However, you can disable this by setting the `gzip` parameter to false while initializing the SDK:\n\n```\nMobileConfig mc = MobileConfig(gzip: false);\nRudderConfigBuilder builder = RudderConfigBuilder();\nbuilder\n    ..withDataPlaneUrl(\"DATA_PLANE_URL\")\n    ..withMobileConfig(mc);\nrudderClient.initialize(\"WRITE_KEY\", config: builder.build(), options: null);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This functionality is not available for the [web](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/installation-and-setup/#installing-the-sdk-for-the-web).\n\nRudderStack lets you opt out of tracking any user activity until the user gives their consent. You can do this using the SDK’s `optOut` API.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `optOut` API is available in the Flutter SDK starting from version `1.0.6`.\n\nThe `optOut` API takes a Boolean value to enable or disable tracking user activities. **This flag persists across device reboots**.\n\nThe following snippet highlights the use of the `optOut` API to disable user tracking:\n\n```\nrudderClient.optOut(true);\n```\n\nOnce the user grants their consent, you can enable user tracking by passing `false` to the `optOut` API:\n\n```\nrudderClient.optOut(false);\n```\n\n## Filtering events\n\nWhen sending events to a destination via the [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode), you can explicitly specify the events to be sent or discarded by allowlisting or denylisting them.\n\nRefer to the [Client-side Event Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) guide for more information on this feature.\n\n## Enabling/disabling events for specific destinations\n\nThe Flutter SDK lets you enable or disable sending events to a specific destination or all destinations connected to a source. You can specify these destinations by creating an object shown in the following snippet:\n\n```\nRudderOption options = new RudderOption();\n// represents all destinations connected to the source, the default value is true.\noptions.putIntegration(\"All\", false);\n// specifying destination by its display name\noptions.putIntegration(\"Mixpanel\", false);\n// specifying destination by its Factory object\noptions.putIntegrationWithFactory(Appcenter(), true);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure the destination names that you pass while specifying the destinations **match exactly** with the names listed in the [RudderStack dashboard](https://app.rudderstack.com/directory).\n\nYou can pass the destinations to the SDK in the following two ways:\n\n#### Method 1. Passing destinations while initializing the SDK\n\nThis is helpful when you want to enable or disable sending the events to the destinations across all the API calls made using the SDK.\n\n```\nrudderClient.initialize(WRITE_KEY,\n                    config: builder.build(),options: options);\n```\n\n#### Method 2. Passing destinations while making event calls\n\nThis approach is helpful when you want to:\n\n*   Enable or disable sending a particular event to the destination, or\n*   If you want to override the destinations passed while initializing the SDK, for a particular event.\n\n```\nRudderProperty property = RudderProperty();\nproperty.put(\"test_key_1\", \"test_key_1\");\nrudderClient.track(\"test_track_event\", properties: property, options: options);\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you specify the destinations while initializing the SDK and in the event, then the SDK considers only the destinations specified at the event level.\n\n### Setting custom objects for destinations\n\nStarting from v2.4.0, you can also use the `putIntegration` method on the `RudderOption` object to set custom objects used by the device mode destinations.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   This feature is applicable **only** for the web platform.\n> *   For mobile platforms, the `putIntegration` method accepts the custom objects but **does not** set them for the destination. Instead, it only enables sending events to that destination (equivalent to `options.putIntegration(\"<destination>\", true);`).\n\nAn example of setting a custom object to Google Analytics 4 via a `track` call:\n\n```\nRudderProperty property = RudderProperty();\nproperty.put(\"manufacturer\", \"Ford\");\nproperty.put(\"model\", \"Explorer\");\nRudderOption options = RudderOption();\noptions.putIntegration(\"Mixpanel\", false);\noptions.putIntegration(\"Google Analytics 4\", {\n   \"sendUserID\": false\n });\nrudderClient.track(\"Purchased Car\", properties: property, options: options);\n```\n\n## Setting custom context\n\nStarting from v2.4.0, you can use the `putCustomContext` method on the `RudderOption` object to pass custom contextual information in all the [events](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/supported-api/).\n\nAn example of setting custom context and passing it in a `track` call:\n\n```\nRudderProperty property = RudderProperty();\nproperty.put(\"manufacturer\", \"Ford\");\nproperty.put(\"model\", \"Explorer\");\nRudderOption options = RudderOption();\noptions.putCustomContext(\"address\", {\n      \"city\": \"New Orleans\",\n      \"pin\": \"70032\",\n      \"state\": {\"name\": \"Louisiana\", \"code\": \"LO\"},\n      \"country\": {\"name\": \"USA\", \"code\": \"US\"},\n      \"zone\": 12,\n      \"lat\": 22.5726,\n});\nrudderClient.track(\"Purchased Car\", properties: property, options: options);\n```\n\n## Setting the advertisement ID\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This functionality is not available for the [web](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/installation-and-setup/#installing-the-sdk-for-the-web).\n\nRudderStack automatically collects the advertisement ID **only** if `autoCollectAdvertId` is set to `true` during the [SDK initialization](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/installation-and-setup/#initializing-the-sdk):\n\n```\nfinal RudderController rudderClient = RudderController.instance;\nMobileConfig mobileConfig = MobileConfig(autoCollectAdvertId: true);\nRudderLogger.init(RudderLogger.VERBOSE);\nRudderConfigBuilder builder = RudderConfigBuilder();\nbuilder.withDataPlaneUrl(DATA_PLANE_URL);\nbuilder.withTrackLifecycleEvents(true);\nrudderClient.initialize(WRITE_KEY,config: builder.build());\n```\n\nTo explicitly pass your Android AAID or iOS IDFA, you can use the SDK’s `putAdvertisingId` method.\n\nThe `putAdvertisingId` method accepts a string argument `<ADVERTISING_ID>` which corresponds to your Android `advertisingId`(AAID) or iOS `advertisingId` (IDFA).\n\nAn example of how to use `putAdvertisingId` is shown below:\n\n```\nrudderClient.putAdvertisingId(<ADVERTISING_ID>);\n```\n\n## Setting the device token\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This functionality is not available for the [web](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/installation-and-setup/#installing-the-sdk-for-the-web).\n\nYou can use your device token to pass push notifications to the destinations that support them. RudderStack sets this token under `context.device.token`. To set a custom device token, the SDK supports the `putDeviceToken` method.\n\nAn example of setting a custom device token is shown below:\n\n```\nrudderClient.putDeviceToken(<DEVICE_TOKEN>);\n```\n\n## Sending events to web device mode destinations\n\nRudderStack does not support sending events from the Flutter SDK to the [web device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode) destinations due to some limitations.\n\nAs a workaround, you can create a [JavaScript source](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) in the RudderStack dashboard and use its [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) for the web build of your Flutter apps.\n\n## Debugging\n\nIf you run into any issues when using the Flutter SDK, you can enable the SDK’s logging feature to determine the issue. To do so, follow these steps:\n\n1.  Import `RudderLogger` by running the following command:\n\n```\nimport 'package:rudder_sdk_flutter/RudderLogger.dart';\n```\n\n2.  Enable the logging by changing your SDK initialization:\n\n```\nRudderConfigBuilder builder = RudderConfigBuilder();\nbuilder.withDataPlaneUrl(DATA_PLANE_URL);\nbuilder.withLogLevel(RudderLogger.VERBOSE);\nrudderClient.initialize(WRITE_KEY,\n                          config: builder.build());\n```\n\n3.  Set the log level to one of the following values:\n\n*   `NONE`\n*   `ERROR`\n*   `WARN`\n*   `INFO`\n*   `DEBUG`\n*   `VERBOSE`\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For detailed logs, set the log level to `DEBUG` or `VERBOSE`.\n\n## FAQ\n\n#### Can I apply encryption only on new databases?\n\nDatabase encryption works on new and existing databases. Pass the [`RudderDBEncryption`](#encrypting-rudderstack-databases) object while initializing the Flutter SDK.\n\n#### Can I remove encryption from an encrypted database?\n\nYes, you can. If the database is already encrypted, you can decrypt the database by configuring the [`RudderDBEncryption`](#encrypting-rudderstack-databases) object with your encryption key and setting `enable` to `false`.\n\n#### What happens if the supplied encryption key is different to the one the database is encrypted with?\n\nAfter you encrypt the database:\n\n*   If **no key** is provided, then the SDK deletes the current database with unsent events and creates a new unencrypted database instead.\n*   If a **wrong key** is provided, then the SDK deletes the current database with unsent events and creates a new encrypted database with the given key.\n\n#### Does the Flutter SDK support impression events?\n\nNo, the SDK does not support [Flutter Impression](https://pub.dev/packages/impression) currently.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Flutter SDK Features and Usage | RudderStack Docs",
    "description": "Features and use cases that you can implement using the Flutter SDK.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/get-started/cloud-vs-open-source/",
    "markdown": "# RudderStack Cloud vs. Open Source\n\nCompare features and setup options in RudderStack’s two product offerings—Cloud and Open Source.\n\n* * *\n\n*     4 minute read  \n    \n\nIf you are evaluating RudderStack in a [build vs. buy](https://www.rudderstack.com/blog/when-to-build-vs-buy-data-pipelines) context, it’s important to understand the components and features that make up the RudderStack service as they relate to your current and future needs.\n\nThis guide will help you decide the right setup based on your environment and data needs: [RudderStack Cloud](https://app.rudderstack.com/signup?type=freetrial) or [RudderStack Open Source](https://app.rudderstack.com/signup?type=opensource).\n\n## Comparison overview\n\nAdvanced RudderStack features are not supported in the open source version of the product.\n\n| Feature | Description | RudderStack Cloud | RudderStack Open Source |\n| --- | --- | --- | --- |\n| [Events](#events-related-features) | Features related to tracking, collecting, and routing your events. |     |     |\n| [Cloud Extract (ETL)](#etl-and-reverse-etl) | Collect third-party app data and send it to your data warehouse. |     |     |\n| [Reverse ETL](#etl-and-reverse-etl) | Send data from your warehouse to third-party platforms. |     |     |\n| [Data governance](#data-governance) | Investigate and troubleshoot inconsistencies in your event data. |     |     |\n| [Deployment and security](#deployment-and-security) | Scale and secure your RudderStack deployment. |     |     |\n| [Monitoring and observability](#monitoring-and-observability) | Monitor your data pipelines using different tools and alerting mechanisms. |     |     |\n| [Audits and user management](#auditing-and-user-management) | Manage users and set access controls for various RudderStack features. |     |     |\n\n## Cloud and open source setup\n\nTo understand the effort involved in setting up RudderStack, it’s useful to take a look at RudderStack’s architecture which comprises the [control plane](https://www.rudderstack.com/docs/resources/rudderstack-architecture/#control-plane) and the [data plane](https://www.rudderstack.com/docs/resources/rudderstack-architecture/#data-plane). These two services work together to govern the data flow between your event sources and destinations.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> *   The **control plane** refers to the front-end RudderStack dashboard where you can manage the configuration of your sources and destinations.\n> *   The **data plane** is RudderStack’s core engine responsible for receiving event data and transforming it into the required destination format before relaying events to the destination.\n\n### RudderStack Cloud\n\nIn [RudderStack Cloud](https://www.rudderstack.com/docs/get-started/rudderstack-cloud/), you get a RudderStack-hosted data plane and control plane so you need not worry about the setup. [Sign up](https://app.rudderstack.com/signup/) for free, set up a source and destination, and start seeing the events flow within minutes.\n\nRudderStack’s free cloud tier offers multiple sources, destinations and delivery of 1 million events per month. It provides key features like [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) and [Transformations](https://www.rudderstack.com/docs/transformations/overview/). If you start on the cloud free tier, it’s much easier to convert to a [paid plan](https://www.rudderstack.com/pricing) as your needs evolve over time.\n\n### RudderStack open source\n\nFor [RudderStack Open Source](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/), you have the following data plane and control plane setup options:\n\n1.  [Set up the data plane](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/data-plane-setup/) on Docker, Kubernetes, or in your own development environment. **RudderStack will not host the data plane for you**.\n    \n2.  Set up the control plane using one of the following options:\n    \n\n*   Use the [RudderStack-hosted control plane](https://app.rudderstack.com/signup?type=opensource) (**recommended**).\n*   Self-host your source-destination configurations by setting up your own control plane using [Control Plane Lite](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Cloud-based features like [Transformations](https://www.rudderstack.com/docs/transformations/overview/) and [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) are not available if you use the _Control Plane Lite_ utility. If you are unsure, it is highly recommended you use [RudderStack Cloud](#rudderstack-cloud) to get started.\n\n## Detailed feature comparison\n\n| Feature | RudderStack Cloud | RudderStack Open Source | Notes |\n| --- | --- | --- | --- |\n| Event metrics |     | ❗   | *   Get information on the number of events ingested during a specified timeframe.<br>*   Applicable only for [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode) destinations.<br>*   For Open Source users, this feature is available only in the [RudderStack-hosted control plane](https://app.rudderstack.com/signup?type=opensource). |\n| [Event backup in your own bucket](https://www.rudderstack.com/docs/user-guides/administrators-guide/bucket-configuration-settings/) |     |     | RudderStack can manage it for you as a part of the [Enterprise plan](https://www.rudderstack.com/enterprise-quote/). |\n| [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) |     | ❗   | *   For Open Source users, this feature is available only in the [RudderStack-hosted control plane](https://app.rudderstack.com/signup?type=opensource).<br>*   Applicable only for [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode) destinations. |\n| RudderStack-managed object storage |     |     | Use the RudderStack-hosted object storage to **temporarily** store your events before forwarding them to your warehouse destination. **RudderStack does not persist any of this data**. |\n| [Event Replay](https://www.rudderstack.com/docs/user-guides/administrators-guide/event-replay/) |     |     | This is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature. |\n| Maintaining event ordering |     |     | *   For Cloud, this is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature.<br>*   Crucial for a multi-node RudderStack setup |\n| [Transformations](https://www.rudderstack.com/docs/transformations/overview/) |     |     | *   For Open Source users, transformations are available only in the [RudderStack-hosted control plane](https://app.rudderstack.com/signup?type=opensource) and users can set up to **5 transformations**.<br>*   RudderStack Cloud Free and Starter plan users can set up to **5 transformations** in the **cloud mode**. Growth and Enterprise plan users can create unlimited transformations.<br>*   Only [Enterprise](https://www.rudderstack.com/enterprise-quote) users can create transformations in the **device mode**. |\n\n### ETL and Reverse ETL\n\n| Feature | RudderStack Cloud | RudderStack Open Source | Notes |\n| --- | --- | --- | --- |\n| [Cloud Extract (ETL)](https://www.rudderstack.com/docs/sources/extract/) |     |     | Available for RudderStack Growth and Enterprise users. |\n| [Reverse ETL](https://www.rudderstack.com/docs/sources/reverse-etl/) |     |     | RudderStack Cloud Free and Starter plan users can set up 1 Reverse ETL source. Growth and Enterprise users can set up unlimited sources. |\n| Data syncs scheduling |     |     | \\-  |\n| [Models](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/models/) |     |     | \\-  |\n\n### Data governance\n\n| Feature | RudderStack Cloud | RudderStack Open Source | Notes |\n| --- | --- | --- | --- |\n| [Data governance](https://www.rudderstack.com/docs/data-governance/) |     |     | This is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature. |\n| [Tracking plans](https://www.rudderstack.com/docs/data-governance/tracking-plans/) |     |     | This is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature. |\n| [Data regulation and suppression](https://www.rudderstack.com/docs/api/user-suppression-api/) |     |     | This is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature. |\n\n### Deployment and security\n\n| Feature | RudderStack Cloud | RudderStack Open Source | Notes |\n| --- | --- | --- | --- |\n| Multi-node scaling |     |     | This is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature. |\n| Single sign-on (SSO) |     |     | This is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature. |\n| VPC deployment |     |     | This is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature. |\n\n### Monitoring and observability\n\n| Feature | RudderStack Cloud | RudderStack Open Source | Notes |\n| --- | --- | --- | --- |\n| Grafana dashboards for monitoring |     |     | Available for RudderStack Starter, Growth, and Enterprise users. |\n| Alerting and error notifications |     |     | This is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature. |\n\n### Auditing and user management\n\n| Feature | RudderStack Cloud | RudderStack Open Source | Notes |\n| --- | --- | --- | --- |\n| Ability to add other team members in the workspace |     |     | You can invite up to 10 members to your workspace in RudderStack Cloud Free and Starter plan, and unlimited members in the Growth and Enterprise plan. |\n| Audit logs |     |     | This is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature. |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "RudderStack Cloud vs. Open Source | RudderStack Docs",
    "description": "Compare features and setup options in RudderStack's two product offerings—Cloud and Open Source.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/adjust/",
    "markdown": "# Adjust Source | RudderStack Docs\n\nIngest your event data from Adjust into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[Adjust](https://adjust.com/) is an industry-leading mobile attribution provider. It allows you to bring all your business data together and get powerful insights from it.\n\nThis guide will help you set up Adjust as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Adjust source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Adjust**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Adjust source is now configured. Note the **Webhook URL** by going to the **Settings** tab.\n\n[![Ortto webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/adjust-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/adjust-webhook-url.webp)\n\n4.  Log in to your [Adjust dashboard](https://suite.adjust.com/login) and go to your app setup. Then, go to the **Data management** tab.\n5.  Under **Server callbacks**, go to **Add callback** > **Guided setup**.\n6.  Select the activity or event to trigger the callback in the **Callback trigger** list.\n7.  Enter the webhook URL obtained in Step 3 in the **Server endpoint** field, where you can receive the data.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can also add a condition in combination with the placeholders and values to trigger a callback only when the condition is satisfied.\n\n8.  Click **Add a placeholder** to dynamically include user/engagement data in your callback. Note that you can select [multiple supported placeholders](https://help.adjust.com/en/article/recommended-placeholders-callbacks) as per your requirement.\n9.  Click **Create callback URL** to generate the final encoded callback URL.\n\nGo to the **Server callbacks overview** page to view and manage the callback URL at any later point.\n\n## Event transformation\n\nRudderStack ingests the Adjust callbacks as [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) calls.\n\nAdjust fires [global callbacks](https://help.adjust.com/en/article/global-callbacks) in addition to any other callback specified at the individual event level. For example, if you have set a global callback along with a callback at the in-app event level, Adjust fires two callbacks - one containing the data requested in the global callback and the other containing the data for the in-app event.\n\n### Supported mappings\n\nRudderStack maps the following Adjust properties associated with the global callbacks to the `track` event properties:\n\n| Adjust property | RudderStack property |\n| --- | --- |\n| `activity_kind` | `properties.activity_kind` |\n| `app_name` | `context.app.name` |\n| `created_at` | `originalTimestamp` |\n| `event` | `properties.event_token` |\n| `event_name` | `message.event` |\n| `gps_adid` | `properties.gps_adid` |\n| `idfa` | `context.device.advertisingId`  <br>For iOS |\n| `idfv` | `context.device.id`  <br>For iOS |\n| `adid` | `context.device.id` |\n| `tracker` | `properties.tracker` |\n| `tracker_name` | `properties.tracker_name` |\n\nIt also maps the following properties associated with the [Erased User](https://help.adjust.com/en/article/erased-user-gdpr-callbacks) callbacks to the `track` properties:\n\n| Adjust property | RudderStack property |\n| --- | --- |\n| `ip_address` | `context.ip`  <br>`request_ip` |\n| `tracking_enabled` | `properties.tracking_enabled` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack ingests the fields coming via all the other [callbacks](https://help.adjust.com/en/article/recommended-placeholders-callbacks) **as is** in the `message.properties` object with the above global callback mappings.\n\n### Sample payload and transformation\n\nThis section details how RudderStack receives the data from Adjust and creates the resulting payload.\n\nA sample payload sent by Adjust is shown:\n\n```\nhttps://<webhook-domain>/v1/webhook?writeKey=<source_write_key>\n&gps_adid=38400000-8cf0-11bd-b23e-10b96e40000d&adid=XXX\n&tracker_token=abc123&app_name=MyApp&activity_kind=event\n&created_at=1404214665&event_token=bkrfgq\n&event_name=purchase_100_coins/mobile_attribution\n&tracker_name=dummy&idfv=XXX\n```\n\nRudderStack transforms the above payload into the following `track` payload:\n\n```\n{\n  context: {\n    library: {\n      name: 'unknown',\n      version: 'unknown',\n    },\n    app: {\n      name: 'MyApp'\n    },\n    integration: {\n      name: 'Adjust',\n    },\n    device: {\n      'id ': 'XXX',\n    },\n  },\n  integrations: {\n    Adjust: false,\n  },\n  type: 'track',\n  event: 'purchase_100_coins/mobile_attribution',\n  originalTimestamp: '2014-07-01T11:37:45.000Z',\n  timestamp: '2014-07-01T11:37:45.000Z',\n  properties: {\n    gps_adid: '38400000-8cf0-11bd-b23e-10b96e40000d',\n    tracker_token: 'abc123',\n    activity_kind: 'event',\n    tracker_name: 'dummy',\n  },\n  anonymousId: '97fcd7b2-cc24-47d7-b776-057b7b199513',\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Adjust Source | RudderStack Docs",
    "description": "Ingest your event data from Adjust into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/reverse-etl/postgresql/",
    "markdown": "# PostgreSQL Reverse ETL Source | RudderStack Docs\n\nSend data from PostgreSQL to your entire stack.\n\n* * *\n\n*     7 minute read  \n    \n\nPostgreSQL is an enterprise-grade, open source database management system. Many companies use PostgreSQL as a low-cost data warehousing solution to deliver efficient analytics and user insights.\n\nRudderStack supports PostgreSQL as a data source from which you can ingest data and route it to your desired downstream destinations.\n\n## Grant permissions\n\nBefore you set up PostgreSQL as a source, you must grant certain permissions on your PostgreSQL warehouse for RudderStack to access data from it.\n\nRun the queries listed in the following sections in the **exact order** to grant the required permissions:\n\n### Step 1: Create user\n\nCreate a new user `RUDDER` with a password `<strong_unique_password>` in PostgreSQL:\n\n```\nCREATE USER RUDDER WITH PASSWORD '<strong_unique_password>';\n```\n\n### Step 2: Create RudderStack schema and grant permissions\n\n1.  Create a dedicated schema `_rudderstack`.\n\n```\nCREATE SCHEMA \"_rudderstack\";\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The `_rudderstack` schema is used by RudderStack for storing the state of each data sync. **Do not change this name**.\n\n2.  Grant full access to the schema `_rudderstack` for the user `RUDDER`.\n\n```\nGRANT ALL ON SCHEMA \"_rudderstack\" TO RUDDER;\n```\n\n3.  Grant full access to all objects in the schema `_rudderstack` for the user `RUDDER`.\n\n```\nGRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA \"_rudderstack\" TO RUDDER;\n```\n\n### Step 3: Grant permissions on schema and table\n\n1.  To let the user `RUDDER` look up objects within the schema `<YOUR_SCHEMA>`, run the command below.\n\n```\nGRANT USAGE ON SCHEMA \"<YOUR_SCHEMA>\" TO RUDDER;\n```\n\n2.  Grant access to the user `RUDDER` to read data from the required table/view:\n\n```\nGRANT SELECT ON TABLE \"<YOUR_SCHEMA>\".\"<YOUR_TABLE>\" TO RUDDER;\n```\n\nReplace `<YOUR_SCHEMA>` and `<YOUR_TABLE>` with the exact names of your PostgreSQL schema and table, respectively.\n\n#### **Optional commands**\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Run the following commands only if you’re okay with RudderStack being able to access the data in all current or future tables residing within your specified schema.\n\n*   To allow the user `RUDDER` read the data from **all** the tables in the schema `<YOUR_SCHEMA>`:\n\n```\nGRANT SELECT ON ALL TABLES IN SCHEMA \"<YOUR_SCHEMA>\" TO RUDDER;\n```\n\n*   To allow the user `RUDDER` to read data from all future tables created by the user `creator` in your schema:\n\n```\nALTER DEFAULT PRIVILEGES for user creator IN SCHEMA \"<YOUR_SCHEMA>\" GRANT SELECT ON TABLES TO RUDDER;\n```\n\nReplace `<YOUR_SCHEMA>` with the exact name of your PostgreSQL schema.\n\n## Set up PostgreSQL source in RudderStack\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  On the **Connections** page, click **Add source**.\n3.  Under **Sources**, click **Reverse ETL** and select **PostgreSQL**.\n\n### Configure warehouse credentials\n\nYou can choose to proceed with your existing warehouse credentials if you have configured them in the RudderStack dashboard previously. Otherwise, click **Add new credentials** to add new credentials for your warehouse.\n\n*   **Host**: Enter the host name of your PostgreSQL instance.\n*   **Database**: Enter the database name of your PostgreSQL instance from where RudderStack ingests the data.\n*   **User**: Enter the user name of your PostgreSQL instance.\n*   **Password**: Enter the password for the above user.\n*   **SSL Mode**: Select the SSL mode as **disable** or **require** depending on how RudderStack should connect to your PostgreSQL instance.\n\nClick the **Verify** button on the top right. RudderStack will then [verify and validate your credentials](#faq). Once verified, click **Continue** to proceed.\n\n### Specify name and source type\n\n*   **Source name**: Assign a name to uniquely identify the source in the RudderStack dashboard.\n*   **Select your source type**: RudderStack lets you set up a Reverse ETL source from a warehouse **Table** or **Model**.\n\n| Source type | Description |\n| --- | --- |\n| Table | Use an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | Use custom SQL queries to fetch specific warehouse data and send them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n\n#### **Use warehouse table as source**\n\nUnder **Select your source type**, choose **Table** and specify the below fields:\n\n*   **Schema**: Select the warehouse schema from the dropdown.\n*   **Table**: Choose the required table from which RudderStack syncs the data.\n*   **Primary key**: Select the column from the above table that uniquely identifies your records in the warehouse.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n[![Use table as source](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use model as source**\n\nUnder **Select your source type**, choose **Model** and click **Continue**.\n\nTo configure a model as source:\n\n1.  Enter an optional description and specify the custom SQL query in **Query** section.\n2.  Click **Run Query** to fetch the data preview.\n3.  Select the **Primary key** to use a column that uniquely identifies your warehouse records.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can set a primary key only after you run the SQL query successfully using the **Run Query** option.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` in SQL query of the model.\n\n[![Model configuration](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n### Review and complete setup\n\nTo make any changes to the warehouse credentials or source configuration, click the edit icon present next to those sections.\n\n[![Edit source configuration](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)\n\nReview your configuration and click **Create source** to complete the setup.\n\n## Connect destination\n\nYou can connect this source to an existing or new [destination](https://www.rudderstack.com/docs/destinations/overview/) to start using it. To connect to a destination later, click **Done** on the top right.\n\n[![Next steps](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)\n\nYou will then be redirected to the **Overview** page of the source where you get the option of connecting it to an existing or new destination.\n\n[![Add destination](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)\n\nSee [Set up Reverse ETL Connection](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/) section for more information.\n\n## Update source configuration and settings\n\nGo to the **Configuration** tab of your Reverse ETL source to update the configuration depending on your source type:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot change the source type on this page.\n\n[![Update source configuration](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)\n\nThe below table lists the options you can update:\n\n| Source type | Configurable options |\n| --- | --- |\n| Table | [Schema, Table, Primary key](#use-warehouse-table-as-source) |\n| Model | *   [Model settings](#use-model-as-source)<br>*   [Primary key](#use-model-as-source)<br><br>**Note**: You can set the primary key only after the SQL query runs successfully. |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> After updating the configuration, the next sync will be a full sync.\n\nGo to the **Settings** tab to:\n\n*   Get your source ID.\n*   Change your warehouse credentials.\n*   [Set up custom alerts](https://www.rudderstack.com/docs/data-governance/alerts/) for your Reverse ETL source.\n*   Delete the source permanently.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot delete a source that is connected to any destination.\n\n[![Edit source settings](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)\n\n## IPs to be allowlisted\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This section is applicable if you’re setting up your PostgreSQL source on a VPN or VPC and you want to enable network access to RudderStack.\n\nTo enable network access to RudderStack, allowlist the following RudderStack IPs depending on your region and [RudderStack Cloud plan](https://www.rudderstack.com/pricing):\n\n| Plan | Region |     |\n| --- | --- | --- |\n|     | **<br><br>US<br><br>** | **<br><br>EU<br><br>** |\n| Free, Starter, and Growth | *   3.216.35.97<br>*   18.214.35.254<br>*   23.20.96.9<br>*   34.198.90.241<br>*   34.211.241.254<br>*   52.38.160.231<br>*   54.147.40.62 | *   3.123.104.182<br>*   3.125.132.33<br>*   18.198.90.215<br>*   18.196.167.201 |\n| Enterprise | *   3.216.35.97<br>*   34.198.90.241<br>*   44.236.60.231<br>*   54.147.40.62<br>*   100.20.239.77 | *   3.66.99.198<br>*   3.64.201.167<br>*   3.123.104.182<br>*   3.125.132.33 |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> All the outbound traffic is routed through these RudderStack IPs.\n\n## FAQ\n\n#### **What are the SSL mode options when setting up the PostgreSQL source in RudderStack?**\n\nWhen setting up a PostgreSQL source, RudderStack provides the following two SSL options:\n\n*   **disable**: SSL mode is disabled when you select this option. Use it in cases where security is not an issue and you don’t want any encryption overhead.\n*   **require**: When you select this option, your data is encrypted and sent to RudderStack. Use it in cases where security is important and you can deal with the resulting encryption overhead.\n\n#### **Is SSH tunneling supported for PostgreSQL when using it as a Reverse ETL source?**\n\nRudderStack does not support SSH tunneling for PostgreSQL as a Reverse ETL source.\n\n#### **What do the three validations under Verifying Credentials imply?**\n\nWhen setting up a Reverse ETL source, you will see the following three validations under the **Verifying Credentials** option once you proceed after entering the warehouse credentials:\n\n[![Validating credentials](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)\n\nThese options are explained below:\n\n*   **Verifying Connection**: This option indicates that RudderStack is trying to connect to the warehouse with the provided warehouse credentials.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, it means that one or more fields specified in the warehouse credentials are incorrect. Verify your credentials in this case.\n\n*   **Able to List Schema**: This option checks if RudderStack is able to fetch all schema details by using the provided credentials.\n*   **Able to Access RudderStack Schema**: This option implies that RudderStack is able to access the `_rudderstack` schema you have created by running all commands in the [User Permissions](#creating-the-rudderstack-schema-and-granting-permissions) section.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, verify if you have successfully created the `_rudderstack` schema and given RudderStack the required permissions to access it.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "PostgreSQL Reverse ETL Source | RudderStack Docs",
    "description": "Send data from PostgreSQL to your entire stack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/appcenter/",
    "markdown": "# App Center Source | RudderStack Docs\n\nIngest your event data from App Center into RudderStack.\n\n* * *\n\n*     2 minute read  \n    \n\n[App Center](https://appcenter.ms/) is Microsoft’s cross-platform build automation and management platform. It lets you automate your builds, test your apps in the cloud, and monitor their real-time usage with the help of crash data and analytics.\n\nYou can send your App Center events by adding a webhook that points to RudderStack. These events include activities related to build success or failure, new app version releases, or app crashes. You can also configure what events to send per your requirement on their dashboard.\n\nThis guide will help you set up App Center as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your App Center source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **App Center**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your App Center source is now configured. Note the source **Write key** required to configure the webhook URL.\n\n[![App Center source write key](https://www.rudderstack.com/docs/images/event-stream-sources/appcenter-source-write-key.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/appcenter-source-write-key.webp)\n\n4.  Then, head over to your App Center account and select the application you want to configure. Here, navigate to the **Webhooks** section under **Settings** from the sidebar, and then create a new webhook:\n\n[![App Center source configuration](https://www.rudderstack.com/docs/images/event-stream-sources/appcenter-2.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/appcenter-2.webp)\n\n5.  In the **URL** text box, add the URL pointing to RudderStack in the following format:\n\n```\n<DATA_PLANE_URL>/v1/webhook?writeKey=<WRITE_KEY>\n```\n\nFor more information on the data plane URL, refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure you add the source write key obtained in **Step 3** as a query parameter to the URL. This is required to prevent the webhook from failing for the lack of a valid write key.\n\nA sample URL is as shown:\n\n```\nhttps://hosted.rudderlabs.com/v1/webhook?writeKey=1bCenS7ynqHh8ETX8s5Crjh22J\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> It is highly recommended to validate the endpoint using the **Send Test** button.\n\n[![Endpoint configuration](https://www.rudderstack.com/docs/images/event-stream-sources/appcenter-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/appcenter-3.webp)\n\n6.  Finally, save the endpoint.\n\n## Event transformation\n\nThe App Center events are ingested into a RudderStack `track` call with the designated name and properties as the entire event received from App Center. For example, the `app_name` set by App Center is set as `context.app.name`.\n\nThe following table highlights the mapping of various App Center events from App to RudderStack’s `track` calls:\n\n| App Center Event | RudderStack Track Event Name |\n| --- | --- |\n| `On Success of a Build` | `Build Succeeded` |\n| `On Failure of a Build` | `Build Failed` |\n| `On Release of a new version` | `Released Version <X.YY>` |\n| `On an App Crash` | `App Crashed` |\n\nAlso, RudderStack populates the following properties from the App Center event payload to the RudderStack event:\n\n| App Center Property | RudderStack Property |\n| --- | --- |\n| `app_name`, `app_display_name` | `context.app.name` |\n| `build_id` | `context.app.build` |\n| `os`, `platform` | `context.device.type`, `context.os.name` |\n| `start_time` | `originalTimeStamp` |\n| `sent_at` | `sentAt` |\n| `short_version`, `app_version` | `context.app.version` |\n| `bundle_identifier` | `context.app.namespace` |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "App Center Source | RudderStack Docs",
    "description": "Ingest your event data from App Center into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/get-started/rudderstack-open-source/",
    "markdown": "# RudderStack Open Source | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "RudderStack Open Source | RudderStack Docs",
    "description": "Use RudderStack Open Source to instrument your data pipelines.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/",
    "markdown": "# iOS SDK | RudderStack Docs\n\nUse the RudderStack iOS SDK to send events from your iOS apps to various destinations.\n\n* * *\n\n*     36 minute read  \n    \n\nThe **RudderStack iOS SDK** lets you track your customer event data from your iOS applications and send it to your specified destinations via RudderStack.\n\nRefer to the [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-ios) to get a more hands-on understanding of the SDK.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This documentation is written for the iOS SDK v1.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can integrate the iOS SDK with your tvOS and watchOS apps and seamlessly track user events without any additional configuration.\n> \n> The SDK supports tvOS tracking in version **1.1.0 and above**. watchOS tracking is supported in version **1.3.1 and above**.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> A new version of [RudderStack iOS SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/ios-v2/) is now available. Some key features of this release include:\n> \n> *   Support for tracking events from your macOS apps\n> *   Support for tracking push notifications\n\n[![](https://img.shields.io/badge/dynamic/json?color=blue&label=pod&query=%24.version&url=https%3A%2F%2Fraw.githubusercontent.com%2Frudderlabs%2Frudder-sdk-ios%2Fdevelop%2Fpackage.json)](https://github.com/rudderlabs/rudder-sdk-ios/tree/master)\n\n## SDK setup requirements\n\nTo set up the RudderStack iOS SDK, the following prerequisites must be met:\n\n*   You need to set up a [RudderStack account](https://app.rudderstack.com/signup).\n    \n*   Once signed up, [set up an iOS source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the dashboard. You should be able to see a **Write Key** for this source, as shown below:\n    \n    [![iOS source write key](https://www.rudderstack.com/docs/images/event-stream-sources/ios-write-key.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/ios-write-key.webp)\n    \n*   You also need a data plane URL. Refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) for more information on the data plane URL and where to find it.\n    \n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has an SDK installation snippet containing both the write key and the data plane URL. You can use it to integrate the iOS SDK into your project.\n\n*   Finally, you need a Mac with the latest version of [Xcode](https://developer.apple.com/xcode/).\n\n## Installing the RudderStack iOS SDK\n\nYou can install the iOS SDK through [Cocoapods](https://cocoapods.org/pods/Rudder) and [Carthage](https://github.com/Carthage/Carthage). The recommended and easiest way to add the SDK to your project is through `Podfile`. To do so, follow these steps:\n\n1.  Add the RudderStack SDK to your `Podfile`:\n\n2.  Then, run the following command:\n\n1.  Add the RudderStack SDK to your `Cartfile`:\n\n```\ngithub \"rudderlabs/rudder-sdk-ios\"\n```\n\n2.  Run the following command:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Remember to include the following code in all `.m` and `.h` files or your `.swift` files where you want to refer to or use RudderStack SDK classes.\n\n```\n#import <Rudder/Rudder.h>\n```\n\n> ![danger](https://www.rudderstack.com/docs/images/danger.svg)\n> \n> RudderStack uses [SQLite](https://sqlite.org/index.html) to store events locally before sending them to the RudderStack data plane. Making calls like `SQLite.shutdown()` which is not thread-safe might lead to unexpected crash.\n\n### Swift Package Manager\n\nYou can also install the iOS SDK through Swift Package Manager (SPM) via one of the following methods:\n\nTo add the RudderStack package in Xcode:\n\n1.  Go to **File** > **Add Package**.\n2.  In the search bar, enter the package repository: `https://github.com/rudderlabs/rudder-sdk-ios.git`.\n3.  In **Dependency Rule**, select **Up to Next Major Version** and enter the value as **1.8.0** as shown:\n\n![SPM dependency rule](https://www.rudderstack.com/docs/images/event-stream-sources/spm-dependency-rule.webp)\n\n4.  Select the project to which you want to add the package and click **Add Package**.\n\nTo leverage the RudderStack Swift package, include the following snippet in your project:\n\n```\n// swift-tools-version:5.5\n// The swift-tools-version declares the minimum version of Swift required to build this package.\n\nimport PackageDescription\n\nlet package = Package(\n    name: \"RudderStack\",\n    products: [\n        // Products define the executables and libraries a package produces, and make them visible to other packages.\n        .library(\n            name: \"RudderStack\",\n            targets: [\"RudderStack\"]),\n    ],\n    dependencies: [\n        // Dependencies declare other packages that this package depends on.\n        .package(url: \"git@github.com:rudderlabs/rudder-sdk-ios.git\", from: \"1.8.0\")\n    ],\n    targets: [\n        // Targets are the basic building blocks of a package. A target can define a module or a test suite.\n        // Targets can depend on other targets in this package, and on products in packages this package depends on.\n        .target(\n            name: \"RudderStack\",\n            dependencies: [\n                .product(name: \"Rudder\", package: \"rudder-sdk-ios\")\n            ]),\n        .testTarget(\n            name: \"RudderStackTests\",\n            dependencies: [\"RudderStack\"]),\n    ]\n)\n```\n\n## Initializing the SDK\n\nPut this code in your `AppDelegate.m` file under the method `didFinishLaunchingWithOptions`:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\nA shared instance of `RSClient` is accessible after the initialization by `[RSClient sharedInstance]`.\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n    .withDataPlaneUrl(DATA_PLANE_URL)\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\nA shared instance of `RSClient` is accesible after the initialization by `RSClient.sharedInstance()`.\n\nRudderStack automatically tracks the following [application lifecycle events](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/):\n\n*   [`Application Installed`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-installed)\n*   [`Application Updated`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-updated)\n*   [`Application Opened`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-opened)\n*   [`Application Backgrounded`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-backgrounded)\n\nYou can disable these events using the `withTrackLifecycleEvents` method of `RSConfigBuilder` and passing `false`. However, it is highly recommended to keep them enabled.\n\nRudderStack supports all major API calls across all iOS devices via the SDK. These include the `track`, `identify`, and `screen` calls.\n\n#### **OneTrust consent**\n\nThe iOS SDK integrates with the OneTrust consent manager and lets you specify the user’s consent during initialization. For more information, refer to the [OneTrust Consent Management for iOS](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/ios/) guide.\n\n## Configuring the RudderStack client\n\nYou can configure your client based on the following parameters using `RSConfigBuilder`:\n\nParameter\n\nType\n\nDescription\n\nDefault Value\n\n`logLevel`\n\n`int`\n\nControls how much of the log you want to see from the SDK.\n\n`RSLogLevelNone`\n\n`dataPlaneUrl`\n\n`string`\n\nYour Data Plane URL.\n\n`https://hosted.rudderlabs.com`\n\n`flushQueueSize`\n\n`int`\n\nNumber of events in a batch request sent to the server.\n\n`30`\n\n`dbThresholdCount`\n\n`int`\n\nNumber of events to be saved in the `SQLite` database. Once the limit is reached, older events are deleted from the database.\n\n`10000`\n\n`sleepTimeout`\n\n`int`\n\nMinimum waiting time to flush the events to the server.\n\n`10 seconds`\n\n`configRefreshInterval`\n\n`int`\n\nFetches the config from dashboard after the specified time.\n\n`2 hours`\n\n`trackLifecycleEvents`\n\n`boolean`\n\nSpecify whether the SDK will capture application life cycle events automatically.\n\n`true`\n\n`collectDeviceId`\n\n`boolean`\n\nDetermines if the SDK should automatically collect the device ID. If set to `NO`, it does not send `context.device.id` as a part of the event payload. See [Disabling device ID collection](#withcollectdeviceid) for more information.\n\n`true`\n\n`autoSessionTracking`\n\n`boolean`\n\nDetermines if the SDK automatically tracks the user sessions. Refer to [Tracking user sessions](#tracking-user-sessions) for more information.\n\n`true`\n\n`sessionTimeout`\n\n`int`\n\nMaximum inactivity period before the session expires.\n\n`300000 ms` (5 minutes)\n\n`recordScreenViews`\n\n`boolean`\n\nSpecify whether the SDK will capture screen view events automatically. Refer to [Automatically capturing screen views](#automatically-capturing-screen-views) for more details.\n\n`false`\n\n`enableBackgroundMode`\n\n`boolean`\n\nSpecify whether the SDK should send the events for some time when the app is moved to the background. Currently it is available only for `iOS` & `tvOS`.\n\n`false`\n\n`gzip`\n\n`boolean`\n\nGzips the event requests.\n\n`true`\n\n`dbEncryption`\n\n`object`\n\nSpecify whether to encrypt/decrypt the database using your desired key. See [Encrypting RudderStack databases](#encrypting-rudderstack-databases) for more information.\n\n\\-\n\n`controlPlaneUrl`\n\n`string`\n\nThis parameter should be changed **only if** you are self-hosting the control plane. See our [control plane lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) documentation on GitHub for details. The iOS SDK will add `/sourceConfig` along with this URL to fetch the required configuration.\n\n`https://api.rudderlabs.com`\n\n### Self-hosted control plane\n\nIf you are using a device mode destination like Adjust, Firebase, etc., the iOS SDK needs to fetch the required configuration from the control plane. If you are using the [Control plane lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) utility to host your own control plane, then follow the steps in [this section](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/#using-sdk-sources-set-up-in-self-hosted-control-plane) and specify `controlPlaneUrl` in `RSConfigBuilder` that points to your hosted source configuration file.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Do not pass the `controlPlaneUrl` parameter during SDK initialization if you are using [RudderStack Cloud](https://app.rudderstack.com/). This parameter is supported only if you are using our open-source [Control plane lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) utility to self-host your control plane.\n\n## Gzipping requests\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The Gzip feature is enabled by default in the iOS SDK.\n\nThe iOS SDK automatically gzips event requests. To disable this feature, set the `Gzip` parameter to `NO` while initializing the SDK:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withGzip:NO];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n    .withDataPlaneUrl(DATA_PLANE_URL)\n    .withGzip(false)\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Gzip requires [rudder-server](https://github.com/rudderlabs/rudder-server) **v1.4 or higher**. Otherwise, your events might fail.\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc. Once you identify the user, the SDK persists all the user information and passes it on to the subsequent `track` or `screen` calls. To reset the user identification, you can use the [`reset`](#reset) method.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   For older SDK versions (< v1.19.0), the iOS SDK captures the device ID and uses that as `anonymousId` for identifying the user. This helps the SDK to track the users across the application installation.\n> *   According to the Apple [documentation](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor), if the device has multiple apps from the same vendors, all those apps will be assigned the same device ID. If all applications from a vendor are uninstalled, then on next install the app will be assigned a new device ID.\n> *   Starting from v1.19.0, the SDK uses a UUID as `anonymousId` instead of the device ID. If you are upgrading from a previous SDK version, see [How RudderStack sets anonymous ID](#how-sdk-sets-anonymous-id) for more information on how the SDK collects and sets `anonymousId`.\n\nAn example `identify` event is as shown:\n\n```\n[[RSClient sharedInstance] identify:@\"test_user_id\"\ntraits:@{@\"foo\": @\"bar\",\n        @\"foo1\": @\"bar1\",\n        @\"email\": @\"test@gmail.com\",\n        @\"key_1\" : @\"value_1\",\n        @\"key_2\" : @\"value_2\"\n}\n];\n```\n\n```\nRSClient.sharedInstance()?.identify(\"test_user_id\", traits: [\n    \"key_1\": \"value_1\",\n    \"key_2\": \"value_2\",\n    \"email\": \"test@gmail.com\"\n])\n```\n\nThe `identify` method accepts the following parameters:\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`userId`\n\n`NSString`\n\nYes\n\nDeveloper identity for the user.\n\n`traits`\n\n`NSDictionary`\n\nNo\n\nTraits information for user. Use `dict` method of `RudderTraits` to convert to `NSDictionary` easily\n\n`options`\n\n`RudderOption`\n\nNo\n\nExtra options for the `identify` event.\n\n### Setting custom anonymous ID\n\nRudderStack use the `deviceId` as `anonymousId` by default. You can use the following method to override and use your own `anonymousId` with the SDK.\n\nAn example of setting the `anonymousId` is shown below:\n\n```\n[RSClient putAnonymousId:<ANONYMOUS_ID>];\n```\n\n```\nRSClient.putAnonymousId(\"<ANONYMOUS_ID>\")\n```\n\nTo retrieve `anonymousId`, use the `anonymousId` instance property:\n\n```\n[RSClient getInstance].anonymousId;\n```\n\n### Disabling device ID collection\n\nStarting from v1.19.0, you can disable the collection of device ID by setting the [`withCollectDeviceId`](#configuring-the-rudderstack-client) API of the `RSConfigBuilder` class to `NO`.\n\nYou will observe the following changes when this API is set to false:\n\n*   The SDK does not send `context.device.id` as a part of the event payload.\n*   The SDK replaces the existing `anonymousId` (if it is equal to the device ID) with a UUID.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> These changes are introduced to make the SDK more compliant with all policies around the device ID collection.\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withCollectDeviceId:NO];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n    .withCollectDeviceId(false)\n    .withDataPlaneUrl(DATA_PLANE_URL)\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you are upgrading to the latest SDK from a previous version (< v1.19.0) **and** disabling device ID collection using `withCollectDeviceId:NO`:\n> \n> *   Make sure your user transformations are not dependent on `context.device.id` as the SDK will not send this value in the event payload.\n> *   The `context.device.id` column in your warehouse destination will not be populated henceforth (it will still contain data populated by the previous SDK version).\n\n### How SDK sets anonymous ID\n\n#### **For direct/fresh SDK installation**\n\nFor a fresh installation of the iOS SDK v1.19.0 and later, RudderStack uses UUID as `anonymousId` regardless of whether [`withCollectDeviceId`](#withcollectdeviceid) is set to `YES` or `NO`.\n\n#### **For updating SDK from older version**\n\nIf you are updating your iOS SDK from an older version (< v1.19.0), then:\n\n*   RudderStack will continue to use the device ID as `anonymousId` - it will not break the existing SDK behavior **until** you set `withCollectDeviceId` to `NO`.\n*   If you set `withCollectDeviceId` to `NO`, the SDK checks if the existing `anonymousId` is a device ID. If yes, it sets a new UUID as the `anonymousId`.\n*   If you have used the [`putAnonymousId`](#overriding-anonymous-id) method to set your own `anonymousId`, then the SDK will **not** modify it even if you set `withCollectDeviceId` to `NO`.\n\n### Setting a custom ID\n\nYou can pass a custom ID along with the standard `userId` in your `identify` calls. RudderStack adds this value under `context.externalId`.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack supports passing `externalId` only in the `identify` events. You must not pass this ID in other API calls like `track`, `page`, etc.\n\nThe following snippet shows how to add an `externalId` to your `identify` event:\n\n```\nRSOption *identifyOptions = [[RSOption alloc] init];\n[identifyOptions putExternalId:@\"brazeExternalId\" withId:@\"some_external_id_1\"];\n[[RSClient sharedInstance] identify:@\"1hKOmRA4GRlm\"\n                             traits:@{@\"firstname\": @\"Alex\"}\n                            options:identifyOptions];\n```\n\n```\nlet identifyOptions = RSOption()\nidentifyOptions.putExternalId(\"brazeExternalId\", withId: \"some_external_id_1\")\nRSClient.sharedInstance()?.identify(\"1hKOmRA4GRlm\", traits: [\"firstname\": \"Alex\"], options: identifyOptions)\n```\n\n## Track\n\nYou can record the users’ activity through the `track` method. Every user action is called as an **event**.\n\nA sample `track` event is as shown:\n\n```\n[[RSClient sharedInstance] track:@\"simple_track_with_props\" properties:@{\n    @\"key_1\" : @\"value_1\",\n    @\"key_2\" : @\"value_2\"\n}];\n```\n\n```\nRSClient.sharedInstance()?.track(\"test_user_id\", properties: [\n    \"key_1\": \"value_1\",\n    \"key_2\": \"value_2\"\n])\n```\n\nThe `track` method accepts the following parameters:\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`eventName`\n\n`NSString`\n\nYes\n\nName of the event you want to track\n\n`properties`\n\n`NSDictionary`\n\nNo\n\nExtra data properties you want to send along with the event\n\n`options`\n\n`RudderOption`\n\nNo\n\nExtra event options\n\n## Screen\n\nYou can use the `screen` call to record whenever the user sees a screen on the mobile device. You can also send some extra properties along with this event.\n\nAn example of the `screen` event is as shown:\n\n```\n[[RSClient sharedInstance] screen:@\"ViewController\"];\n```\n\n```\nRSClient.sharedInstance()?.screen(\"ViewController\")\n```\n\nThe `screen` method accepts the following parameters:\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`screenName`\n\n`NSString`\n\nYes\n\nName of the screen viewed by the user.\n\n`properties`\n\n`NSDictionary`\n\nNo\n\nExtra property object that you want to pass along with the `screen` call.\n\n`options`\n\n`RudderOption`\n\nNo\n\nExtra options to be passed along with the `screen` event.\n\n#### **Automatically capturing screen views**\n\nTo automatically capture the screen views, you can enable the `recordScreenViews` parameter while initializing the SDK:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withRecordScreenViews:YES];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withRecordScreenViews(true)\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\nNote that if automatic screen recording is enabled, RudderStack removes every instance of `ViewController` in the `screen` event.\n\nFor example, if automatic screen recording is enabled and you set the `ViewController` class name to `HomeViewController`, then the SDK sets the screen event name to `Home`.\n\nFor more details related to this implementation, refer to the [iOS SDK repository](https://github.com/rudderlabs/rudder-sdk-ios/blob/791f71c94b323d20d59dacc8aa8bb8626ad62245/Sources/Classes/UIViewController%2BRSScreen.m#L53).\n\n## Group\n\nThe `group` call associates a user to a specific organization. A sample `group` call for the API is below:\n\n```\n[[RSClient sharedInstance] group:@\"sample_group_id\"\n  traits:@{@\"foo\": @\"bar\",\n            @\"foo1\": @\"bar1\",\n            @\"email\": @\"ruchira@gmail.com\"}\n];\n```\n\n```\nRSClient.sharedInstance()?.group(\"test_group_id\", traits: [\n    \"key_1\": \"value_1\",\n    \"key_2\": \"value_2\"\n])\n```\n\nAlternatively, you can use the following method signature\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`groupId`\n\n`String`\n\nYes\n\nAn ID of the organization with which you want to associate your user\n\n`traits`\n\n`NSDictionary`\n\nNo\n\nAny other property of the organization you want to pass along with the call\n\n`options`\n\n`RudderOption`\n\nNo\n\nEvent level options\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack does not persist the traits for the group across the sessions.\n\n## Alias\n\nThe `alias` call associates the user with a new identification. A sample `alias` call for the API is below:\n\n```\n[[RSClient sharedInstance] alias:@\"new_user_id\"];\n```\n\n```\nRSClient.sharedInstance()?.alias(\"new_user_id\")\n```\n\nnatively, you can use the following method signature\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`newId`\n\n`String`\n\nYes\n\nThe new `userId` you want to assign to the user\n\n`options`\n\n`RudderOption`\n\nNo\n\nEvent level option\n\nRudderStack replaces the old `userId` with the `newUserId` and we persist that identification across the sessions.\n\n## Reset\n\nYou can use the `reset` method to clear the persisted user traits. It also resets the `anonymousId` with a new UUID if you call it with `YES` (for SDK v1.19.0 and later). To clear only user traits, call `reset` with `NO`.\n\nIn [session tracking](https://rudderstack.com/docs/sources/event-streams/sdks/session-tracking/#:~:text=tracking%20is%20enabled%3A-,sessionId,-%28Number%29%3A%20The%20session), calling the `reset` method clears the current `sessionId` and generates a new one.\n\nA sample `reset` call is shown:\n\n```\n[[RSClient sharedInstance] reset:NO];\n```\n\n```\nRSClient.sharedInstance()?.reset(false)\n```\n\n## Encrypting RudderStack databases\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is available in the iOS SDK v1.20.0 and later.\n\nThe iOS SDK uses a [SQLite](https://sqlite.org/index.html) database to store events before sending them to the RudderStack backend (data plane).\n\nBy default, SQLite databases created by RudderStack are not encrypted but they are still protected by iOS - similar to data in any iOS application. To add an extra level of security, you can use the [SQLCipher](https://www.zetetic.net/sqlcipher/) extension to encrypt the database content and SQLite metadata.\n\n#### **Using CocoaPods**\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is supported for SQLCipher v4.0 and later.\n\n**Step 1: Integrate SDK with SQLCipher**\n\n1.  `RudderDatabaseEncryption` is available through [CocoaPods](https://cocoapods.org/). To install it, add the following line to your `Podfile`:\n\n```\npod 'RudderDatabaseEncryption', '~> 1.0.0'\n```\n\n2.  Run the `pod install` command.\n\n**Step 2: Import the iOS SDK**\n\n```\n@import RudderDatabaseEncryption;\n```\n\n```\nimport RudderDatabaseEncryption\n```\n\n**Step 3: Initialize the SDK**\n\nPlace the following snippet in your app’s `AppDelegate` under `didFinishLaunchingWithOptions` method:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withDBEncryption:[[RSDBEncryption alloc] initWithKey:@\"<password>\" enable:YES databaseProvider:[RSEncryptedDatabaseProvider new]]];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withDBEncryption(RSDBEncryption(key: \"<password>\", enable: true, databaseProvider: RSEncryptedDatabaseProvider()))\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\n#### **Using Swift Package Manager (SPM)**\n\n**Registering an RSDatabaseProvider implementation**\n\nThe standard SQLite library does not support encryption out of the box. Hence, you need to integrate a third-party option into your codebase. `RSDatabaseProvider` acts as a bridge between this third-party code and RudderStack, and uses SQLCipher for the implementation.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To integrate SQLCipher with your application, see the instructions for the [community](https://www.zetetic.net/sqlcipher/ios-tutorial/) or [commercial](https://www.zetetic.net/sqlcipher/sqlcipher-ios/) editions.\n\nOnce SQLCipher is correctly set up, add the below implementation of the `RSDatabaseProvider` protocol in your project.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Copy-paste the code exactly as given below and change the class names as per your requirement.\n\n```\n@interface RSEncryptedDatabase : NSObject <RSDatabase>\n\n@end\n\n@implementation RSEncryptedDatabase {\n    sqlite3 *db;\n}\n\n- (int)open_v2:(const char *)filename flags:(int)flags zVfs:(const char *)zVfs {\n    return sqlite3_open_v2(filename, &db, flags, zVfs);\n}\n\n- (int)exec:(const char *)zSql xCallback:(callback)xCallback pArg:(void *)pArg pzErrMsg:(char * _Nullable *)pzErrMsg {\n    return sqlite3_exec(db, zSql, xCallback, pArg, pzErrMsg);\n}\n\n- (int)close {\n    return sqlite3_close(db);\n}\n\n- (int)step:(void *)pStmt {\n    return sqlite3_step(pStmt);\n}\n\n- (int)finalize:(void *)pStmt {\n    return sqlite3_finalize(pStmt);\n}\n\n- (int)prepare_v2:(const char *)zSql nBytes:(int)nBytes ppStmt:(void **)ppStmt pzTail:(const char **)pzTail {\n    return sqlite3_prepare_v2(db, zSql, nBytes, (sqlite3_stmt **)(ppStmt), pzTail);\n}\n\n- (int)column_int:(void *)pStmt i:(int)i {\n    return sqlite3_column_int(pStmt, i);\n}\n\n- (const unsigned char *)column_text:(void *)pStmt i:(int)i {\n    return sqlite3_column_text(pStmt, i);\n}\n\n- (int)key:(const void *)pKey nKey:(int)nKey {\n    return sqlite3_key(db, pKey, nKey);\n}\n\n- (int)last_insert_rowid {\n    int64_t lastRowId = sqlite3_last_insert_rowid(db);\n    return (int)lastRowId;\n}\n\n@end\n\n@interface EncryptedDatabaseProvider : NSObject<RSDatabaseProvider>\n\n@end\n\n@implementation EncryptedDatabaseProvider\n\n- (id<RSDatabase>)getDatabase {\n    return [RSEncryptedDatabase new];\n}\n\n@end\n```\n\n```\nclass EncryptedDatabase: RSDatabase {\n    \n    private var db: OpaquePointer?\n    \n    func open_v2(_ filename: UnsafePointer<CChar>?, flags: Int32, zVfs: UnsafePointer<CChar>?) -> Int32 {\n        return sqlite3_open_v2(filename, &db, flags, zVfs)\n    }\n    \n    func exec(_ zSql: UnsafePointer<CChar>?, xCallback: callback?, pArg: UnsafeMutableRawPointer?, pzErrMsg: UnsafeMutablePointer<UnsafeMutablePointer<CChar>?>?) -> Int32 {\n        return sqlite3_exec(db, zSql, xCallback, pArg, pzErrMsg)\n    }\n        \n    func prepare_v2(_ zSql: UnsafePointer<CChar>?, nBytes: Int32, ppStmt: UnsafeMutablePointer<UnsafeMutableRawPointer?>?, pzTail: UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Int32 {\n        return sqlite3_prepare_v2(db, zSql, nBytes, UnsafeMutablePointer(OpaquePointer(ppStmt)), pzTail)\n    }\n    \n    func close() -> Int32 {\n        return sqlite3_close(db)\n    }\n    \n    func step(_ pStmt: UnsafeMutableRawPointer?) -> Int32 {\n        return sqlite3_step(OpaquePointer(pStmt))\n    }\n    \n    func finalize(_ pStmt: UnsafeMutableRawPointer?) -> Int32 {\n        return sqlite3_finalize(OpaquePointer(pStmt))\n    }\n    \n    func column_int(_ pStmt: UnsafeMutableRawPointer?, i: Int32) -> Int32 {\n        return sqlite3_column_int(OpaquePointer(pStmt), i)\n    }\n    \n    func column_text(_ pStmt: UnsafeMutableRawPointer?, i: Int32) -> UnsafePointer<UInt8> {\n        return sqlite3_column_text(OpaquePointer(pStmt), i)\n    }\n    \n    func key(_ pKey: UnsafeRawPointer?, nKey: Int32) -> Int32 {\n        return sqlite3_key(db, pKey, nKey)\n    }\n\n    func last_insert_rowid() -> Int32 {\n        return Int32(sqlite3_last_insert_rowid(db))\n    }\n}\n\nclass EncryptedDatabaseProvider: RSDatabaseProvider {\n    func getDatabase() -> RSDatabase {\n        return EncryptedDatabase()\n    }\n}\n```\n\n2.  Register your database provider with the RudderStack iOS SDK. The following setup code is recommended:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withDBEncryption:[[RSDBEncryption alloc] initWithKey:@\"<password>\" enable:YES databaseProvider:[EncryptedDatabaseProvider new]]];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n    .withDataPlaneUrl(DATA_PLANE_URL)\n    .withDBEncryption(RSDBEncryption(key: \"<password>\", enable: true, databaseProvider: EncryptedDatabaseProvider()))\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\nThe iOS SDK is now configured to support database encryption.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> After you encrypt the database:\n> \n> *   If **no key** is provided, then the SDK deletes the current database with unsent events and creates a new unencrypted database instead.\n> *   If a **wrong key** is provided, then the SDK deletes the current database with unsent events and creates a new encrypted database with the given key.\n> \n> The SDK does not store the key, so it cannot determine whether the entered key is right or wrong. Hence, if the key cannot decrypt the database, the SDK assumes it to be incorrect and deletes the old events and database.\n\n#### **Instructions for linking issues**\n\nThe Cocoapod `RudderDatabaseEncryption` uses the [SQLCipher](https://github.com/sqlcipher/sqlcipher) Cocoapod under the hood to perform encryption. This Cocoapod requires the removal of any references to the standard SQLite system library for it to function as expected.\n\nIf you set up a project to inadvertently include a linking reference against the standard SQLite library before SQLCipher, it is possible that the application builds and runs correctly but does not use SQLCipher for encryption. This is not a problem for most projects but there are certain cases where unintentional SQLite linking can occur.\n\nOne such example is when using CocoaPods or some other sub-project that declares a dependency on the SQLite3 library. In this case, adding a pod to a project can **silently** modify the project settings in such a way that SQLCipher is not properly linked.\n\nYou can identify and fix the above linking issue during the development stage by looking for the below error log from the SDK:\n\n```\nRSDBPersistentManager: createDB: Cannot encrypt the Database as SQLCipher wasn't linked correctly.\n```\n\nTo fix the linking issue, add a linker flag to your project settings to ensure that the Xcode links SQLCipher before SQLite. Follow these steps:\n\n1.  Open the project-level build settings. These are the global project settings, not for the individual application target.\n2.  Locate the **Other Linker Flags** setting and add one of the following commands depending on how you are integrating SQLCipher into the app.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you are not adding `SQLCipher` into the app on your own and only using `RudderDatabaseEncryption`, then see only the points 3 and 4 in the below table - depending on whether you are using `use_frameworks!` in your app’s `ios/Podfile`.\n\nScenario\n\nCommand\n\nNotes\n\nWhen using SQLCipher commercial edition static libraries\n\n`$(PROJECT_DIR)/sqlcipher-static-ios/ios-libs/libsqlcipher-ios.a`\n\nAdjust according to the path to the `libsqlcipher-ios.a` you received as a part of the package.\n\nWhen using the `sqlcipher.xcodeproj` included in the SQLCipher Git repository\n\n`$(BUILT_PRODUCTS_DIR)/libsqlcipher.a`\n\n\\-\n\nWhen using the SQLCipher CocoaPod with the `use_frameworks` Podfile setting enabled\n\n`-framework SQLCipher`\n\n\\-\n\nWhen using the SQLCipher CocoaPod without the `use_frameworks` Podfile setting enabled\n\n`-lSQLCipher`\n\n\\-\n\nOnce the linker flag is added to the project-level build settings, you should see something like the below image:\n\n[![Project-level build settings](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-project-build-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-project-build-settings.webp)\n\nAfter adding the linker flag to your project-level build settings, check the target-level build settings to ensure SQLCipher is shown first, as seen below:\n\n[![Target-level build settings](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-target-build-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-target-build-settings.webp)\n\n## Enabling/disabling user tracking via the optOut API (GDPR)\n\nRudderStack gives users (e.g., an EU user) the ability to opt out of tracking any user activity until the user gives their consent. You can do this by leveraging RudderStack’s `optOut` API.\n\nThe `optOut` API takes `YES` or `NO` as a Boolean value to enable or disable tracking user activities. This flag persists across device reboots.\n\nThe following snippet highlights the use of the `optOut` API to disable user tracking:\n\n```\n[[RSClient sharedInstance] optOut:YES];\n```\n\n```\nRSClient.sharedInstance()?.optOut(true)\n```\n\nthe user grants their consent, you can enable user tracking once again by using the `optOut` API with `NO` or `false` as a parameter sent to it:\n\n```\n[[RSClient sharedInstance] optOut:NO];\n```\n\n```\nRSClient.sharedInstance()?.optOut(false)\n```\n\nThe `optOut` API is available in the RudderStack iOS SDK starting from version `1.0.24`.\n\n## Setting custom context\n\nYou can set custom contextual information in the iOS SDK by using either of the following ways:\n\n### During SDK initialization\n\nYou can set custom context during SDK initialization as follows:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is available in the iOS SDK v1.26.0 and later.\n\n```\nRSOption* option = [[RSOption alloc] init];\n[option putCustomContext:@{\n        @\"category\": @\"premium\",\n        @\"type\": @\"gold\"\n } withKey:@\"tier\"];\n\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[RSClient getInstance:WRITE_KEY config:[builder build] options: option];\n```\n\n```\nlet option = RSOption()\noption.putCustomContext([\"category\": \"premium\", \"type\": \"gold\"], withKey: \"tier\")\n\nlet builder: RSConfigBuilder = RSConfigBuilder()\n    .withDataPlaneUrl(DATA_PLANE_URL)\nRSClient.getInstance(WRITE_KEY, config: builder.build(), options: option)\n```\n\nNote that:\n\n*   The iOS SDK persists the contextual information set during SDK initialization for subsequent events but **not** across sessions.\n*   Calling the `reset` method clears all the contextual information set during SDK initialization.\n*   The contextual information passed at the event level gets precedence over the context set during SDK initialization.\n\n### Using `putCustomContext` method\n\nYou can use the `putCustomContext` method on an instance of `RSOption` to set custom contextual information as a nested object within `context` while sending the events.\n\nAn example of setting custom context using an instance of `RSOption` and passing it in a `track` call:\n\n```\nRSOption* option = [[RSOption alloc] init];\n[option putCustomContext:@{\n        @\"category\": @\"premium\",\n        @\"type\": @\"gold\"\n } withKey:@\"tier\"];\n[[RSClient sharedInstance] track:@\"Subscription Purchased\" properties:@{\n        @\"paymentMethod\": @\"credit card\"\n} options:option];\n```\n\n```\nlet option = RSOption()\noption.putCustomContext([\"category\": \"premium\", \"type\": \"gold\"], withKey: \"tier\")\nRSClient.getInstance().track(\n  \"Subscription Purchased\", properties: [\"paymentMethod\": \"credit card\"], options: option)\n```\n\nThe `context` object in the created event payload looks like below:\n\n```\n{\n  \"context\": {\n    \"tier\": {\n      \"category\": \"premium\",\n      \"type\": \"gold\",\n    }\n  }\n}\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The SDK does not persist the contextual information set using `putCustomContext` for subsequent events. Hence, you must use this method every time you want to set custom context for an event.\n\n## Setting the device token\n\nYou can pass your `device-token` for Push Notifications to be passed to the destinations which support Push Notification. We set the `token` under `context.device.token`.\n\nFollow the instructions below:\n\n```\n[RSClient putDeviceToken:@\"your_device_token\"];\n```\n\n```\nRSClient.putDeviceToken(\"your_device_token\")\n```\n\n## Setting the advertisement ID\n\nTo set the advertisement ID, you can use the static method `putAdvertisingId` and call it before or after the SDK initialization:\n\n```\n[RSClient putAdvertisingId:@\"sampleAdvertId\"];\n```\n\n```\nRSClient.putAdvertisingId(\"advertId\")\n```\n\nOnce set, the advertisement ID persists and gets attached to all the events until it is cleared using the `clearAdvertisingId` method.\n\nTo clear the advertisement ID, use the `clearAdvertisingId` method:\n\n```\n[[RSClient sharedInstance] clearAdvertisingId];\n```\n\n```\nRSClient.sharedInstance()?.clearAdvertisingId()\n```\n\nThe `clearAdvertisingId` method is not static and hence can be called only after the SDK initialization.\n\nYou can pass the [ATTrackingManager.trackingAuthorizationStatus](https://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/3547038-trackingauthorizationstatus) to RudderStack. RudderStack then sends it to the relevant destinations as required. For example, AppsFlyer accepts this parameter for the attribution to work in their [server-to-server mode](https://support.appsflyer.com/hc/en-us/articles/207034486-Server-to-server-events-API-for-mobile-S2S-mobile-#att-3).\n\n```\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n    // Override point for customization after application launch.\n    RSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n    [builder withDataPlaneUrl:DATA_PLANE_URL];\n    [RSClient getInstance:WRITE_KEY config:[builder build]];\n\n    [[[RSClient sharedInstance] context] putAppTrackingConsent:RSATTAuthorize];\n\n    return YES;\n}\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n    .withDataPlaneUrl(DATA_PLANE_URL)\nRSClient.getInstance(WRITE_KEY, config: builder.build())\nRSClient.sharedInstance()?.context.putAppTrackingConsent(RSATTAuthorize)\n```\n\nYou can pass the following options to the `putAppTrackingConsent` method:\n\n*   `RSATTNotDetermined`\n*   `RSATTRestricted`\n*   `RSATTDenied`\n*   `RSATTAuthorize`\n\n## Filtering events\n\nWhen sending events to a destination via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode), you can explicitly specify which events should be discarded or allowed to flow through - by allowlisting or denylisting them.\n\nRefer to the [Client-side Event Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) guide for more information on this feature.\n\n## Enabling/disabling events for specific destinations\n\nThe RudderStack iOS SDK allows you to enable or disable event flow to a specific destination or all destinations to which the source is connected. You can specify these destinations by creating a `RSOption` object as shown:\n\n```\nRSOption *option = [[RSOption alloc]init];\n//default value for `All` is true\n[option putIntegration:@\"All\" isEnabled:YES];\n// specifying destination by its display name\n[option putIntegration:@\"Amplitude\" isEnabled:YES];\n[option putIntegration:@\"<destination display name>\" isEnabled:<BOOL>];\n// specifying destination by its Factory instance\n[option putIntegrationWithFactory:[RudderMoengageFactory instance] isEnabled:NO];\n[option putIntegrationWithFactory:[<RudderIntegrationFactory> instance] isEnabled:<BOOL>];\n```\n\n```\nlet option:RSOption = RSOption();\n//default value for `All` is true\noption.putIntegration(\"All\", isEnabled:true)\n// specifying destination by its display name\noption.putIntegration(\"Amplitude\", isEnabled:true)\noption.putIntegration(<DESTINATION DISPLAY NAME>, isEnabled:<BOOL>)\n// specifying destination by its Factory instance\noption.putIntegration(with: RudderMoengageFactory.instance(), isEnabled: true);\noption.putIntegration(with: <RudderIntegrationFactory>.instance(), isEnabled:<BOOL>);\n```\n\nThe keyword `All` in the above snippet represents all destinations the source is connected to. Its value is set to `true` by default.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Make sure the `destination display name` you pass while specifying the custom destinations should exactly match the destination name as shown [here](https://app.rudderstack.com/directory).\n\nYou can pass the destination(s) specified in the above snippet to the SDK in two ways:\n\n#### **1\\. Passing destinations while initializing the SDK**\n\nThis is helpful when you want to enable/disable sending the events across all event calls made using the SDK to the specified destinations.\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withLoglevel:RSLogLevelDebug];\n[builder withTrackLifecycleEvens:YES];\n[builder withRecordScreenViews:YES;\n[RSClient getInstance:WRITE_KEY config:[builder build] options:option]; // passing the rudderoption object containing the list of destinations you specified\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n            .withLoglevel(RSLogLevelDebug)\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withTrackLifecycleEvens(true)\n            .withRecordScreenViews(true)\nRSClient.getInstance(WRITE_KEY, config: builder.build(),options: option)// passing the rudderoption object containing the list of destination(s) you specified\n```\n\n#### **2\\. Passing destinations while making event calls**\n\nThis approach is helpful when you want to enable/disable sending only a particular event to the specified destination(s) or if you want to override the specified destinations passed with the SDK initialization for a particular event.\n\n```\n[[RSClient sharedInstance] track:@\"simple_track_with_props\" properties:@{\n        @\"key_1\" : @\"value_1\",\n        @\"key_2\" : @\"value_2\"\n    } options:option]; // passing the rudderoption object containing the list of destination(s) you specified\n```\n\n```\nlet rudder: RSClient? = RSClient.sharedInstance()\nrudder?.track(\"track_with_props\", properties: [\n            \"key_1\": \"value_1\",\n            \"key_2\": \"value_2\",\n        ],options:option) // passing the rudderoption object containing the list of destination(s) you specified\n```\n\nIf you specify the destinations both while initializing the SDK as well as making an event call, then the destinations specified at the event level only will be considered.\n\n## Tracking user sessions\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The iOS SDK supports session tracking starting v1.7.0.\n\nBy default, the iOS SDK automatically tracks the user sessions. This means that RudderStack automatically determines the start and end of a user session depending on the inactivity time configured in the SDK (default time is 5 minutes).\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withAutoSessionTracking:YES];  // Set to No to disable automatic session tracking\n[builder withSessionTimeoutMillis:(5*60*1000)];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withAutoSessionTracking(true)  // Set to false to disable automatic session tracking\n            .withSessionTimeoutMillis(5*60*1000)\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\nTo disable automatic session tracking, set `withAutoSessionTracking` to `false`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the user sessions and how to track them using the iOS SDK, refer to the [Session Tracking](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/) guide.\n\n## Tracking deep links\n\nStarting from version 1.27.0, the iOS SDK supports tracking deep links. Deep links provide direct access to specific content and features within your app. See the [Apple documentation](https://developer.apple.com/documentation/xcode/defining-a-custom-url-scheme-for-your-app#) for more information on configuring deep links in your iOS app.\n\nAfter completing the setup, call the SDK’s deep link API from either your `AppDelegate` or `SceneDelegate` depending on the below scenarios:\n\n*   When you only have a URL to pass:\n\n```\n[[RSClient sharedInstance] openURL:url];\n```\n\n```\nRSClient.sharedInstance()?.open(url)\n```\n\n*   When you have URL and custom properties to pass along with the deep link event:\n\n```\n[[RSClient sharedInstance] openURL:url options:options];\n```\n\n```\nRSClient.sharedInstance()?.open(url, options: options)\n```\n\nThe deep link method accepts the below parameters:\n\nName\n\nData type\n\nDescription\n\n`url`  \nRequired\n\n`NSURL`\n\nRepresents a Uniform Resource Locator used to identify a location on the network and a mechanism for retrieving it. URLs are used to open web pages, access APIs, and deep link into specific parts of the app.\n\nFor example, `com.ruddertestappswift://`.\n\n`options`\n\n`NSDictionary`\n\nAdditional data properties to send along with the deep link event.\n\nThe `Deep Link Opened` event schema is shown below:\n\nProperty name\n\nData type\n\nDescription\n\n`url`\n\nString\n\nThe `url` parameter described above. It is a string of characters used to identify a location on the network and a mechanism for retrieving it.\n\nFor example, `com.ruddertestappswift://`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The iOS SDK also adds the query parameters as the deep link event properties.\n\n## Adding callback support for mobile device mode integrations\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note the following:\n> \n> *   This feature is supported in the iOS SDK v1.24.0 and later.\n> *   Currently, the callback support is only available for the [Braze mobile device mode integration](https://github.com/rudderlabs/rudder-integration-braze-ios). It will be implemented for other integrations over time.\n\nThe iOS SDK supports a `onIntegrationReady` callback functionality that returns the instance of the mobile device mode integration after the destination SDK is initialized.\n\nYou can use this feature to obtain the Braze SDK instance and use it for registering to Braze’s in-app messaging feature.\n\n```\nid<RSIntegrationFactory> brazeFactoryInstance = [RudderBrazeFactory instance];\n[[RSClient getInstance] onIntegrationReady:brazeFactoryInstance withCallback:^(NSObject *brazeInstance) {\n    if (brazeInstance && [brazeInstance isKindOfClass:[Braze class]]) {\n        braze = (Braze *)brazeInstance;\n    } else {\n        NSLog(@\"Error getting Braze instance.\");\n    }\n}];\n```\n\n```\nlet brazeFactoryInstance = RudderBrazeFactory()\nRSClient.getInstance().onIntegrationReady(brazeFactoryInstance) { brazeInstance in\n    if let brazeInstance = brazeInstance as? Braze {\n        AppDelegate.braze = brazeInstance\n    } else {\n        print(\"Error getting Braze instance.\")\n    }\n}\n```\n\n## Sending granular device model information\n\nStarting from iOS SDK v1.25.0, you can send the `context.device.model` in a more detailed format to your downstream destinations. The SDK sends the device model information in the standard Apple format like `iPhone 13,1` instead of the earlier format `iPhone`. Here, `iPhone 13,1` corresponds to the human-readable format `iPhone 12 Mini`.\n\nWhile most destinations are able to recognize the standard Apple format, there might some cases where the destination is unable to comprehend it. For such cases, you can use the **Localize Apple Device Model** transformation to convert the standard Apple device model into a human-readable format.\n\n[![Apple device model enrichment](https://www.rudderstack.com/docs/images/event-stream-sources/apple-device-model-enrichment.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/apple-device-model-enrichment.webp)\n\nThe transformation code is as follows:\n\n```\nimport { getLocalizedDeviceModel } from \"@rs/localizeAppleDeviceModel/v1\";\n\n export function transformEvent(event, metadata) {\n const localizedDeviceModel = getLocalizedDeviceModel(event);\n  if(localizedDeviceModel && event?.context?.device?.model) {\n    event.context.device.model = localizedDeviceModel;\n  }\n  return event;\n}\n```\n\nSee the [Localize Apple Device Model](https://www.rudderstack.com/docs/transformations/templates/#localize-apple-device-model) transformation template for more information.\n\n## Developing a device mode destination\n\nYou can easily develop a [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode) destination if RudderStack doesn’t support it already. Follow these steps:\n\n1.  Create a `CustomIntegration` class by extending [`RSIntegration`](https://github.com/rudderlabs/rudder-sdk-ios/blob/master/Sources/Classes/Headers/Public/RSIntegration.h).\n\n```\n#import <Rudder/Rudder.h>\n@interface CustomIntegration : NSObject<RSIntegration>\n\n@property (nonatomic, strong) NSDictionary *config;\n@property (nonatomic, strong) RSClient *client;\n\n- (instancetype)initWithConfig:(NSDictionary *)config withAnalytics:(RSClient *)client;\n\n@end\n\n@implementation CustomIntegration\n\n- (instancetype) initWithConfig:(NSDictionary *)config withAnalytics:(RSClient *)client {\n    if (self == [super init]) {\n    }\n    return self;\n}\n\n- (void) processRuderEvent:(nonnull RSMessage *)message {\n    NSString *type = message.type;\n    if ([type isEqualToString:@\"identify\"]) {\n//        Do something\n    } else if ([type isEqualToString:@\"track\"]) {\n//        Do something\n    } else if ([type isEqualToString:@\"screen\"]) {\n//        Do something\n    } else {\n        [RSLogger logWarn:@\"MessageType is not supported\"];\n    }\n}\n\n- (void) dump:(nonnull RSMessage *)message {\n    [self processRuderEvent:message];\n}\n\n- (void) reset {\n}\n\n- (void) flush {\n}\n\n@end\n```\n\n```\nclass CustomIntegration: NSObject, RSIntegration {\n    \n    let config: [AnyHashable: Any]\n    let analytics: RSClient\n    \n    init(config: [AnyHashable: Any], analytics: RSClient) {\n        self.config = config\n        self.analytics = analytics\n    }\n    \n    func dump(_ message: RSMessage) {\n        processRudderEvent(message)\n    }\n    \n    func processRudderEvent(_ message: RSMessage) {\n        let type = message.type\n        switch type {\n        case \"identify\":\n            //Do something\n            break\n        case \"track\":\n            //Do something\n            break\n        case \"screen\":\n            //Do something\n            break\n        default:\n                RSLogger.logWarn(\"MessageType is not supported\")\n        }\n    }\n    \n    func reset() {\n        \n    }\n    \n    func flush() {\n        \n    }\n}\n```\n\n2.  Create a `CustomFactory` class by extending [`RSIntegrationFactory`](https://github.com/rudderlabs/rudder-sdk-ios/blob/master/Sources/Classes/Headers/Public/RSIntegrationFactory.h):\n\n```\n#import <Rudder/Rudder.h>\n\n@interface CustomFactory : NSObject<RSIntegrationFactory>\n\n+ (instancetype) instance;\n\n@end\n\n@implementation CustomFactory\n\n+ (instancetype)instance {\n    static CustomFactory *sharedInstance;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        sharedInstance = [[self alloc] init];\n    });\n    return sharedInstance;\n}\n\n- (instancetype)init\n{\n    self = [super init];\n    return self;\n}\n\n- (nonnull NSString *)key {\n    return @\"Custom Factory\";\n}\n\n- (nonnull id<RSIntegration>)initiate:(NSDictionary *)config client:(nonnull RSClient *)client rudderConfig:(nonnull RSConfig *)rudderConfig {\n    return [[CustomIntegration alloc] initWithConfig:config withAnalytics:client];\n}\n@end\n```\n\n```\nclass CustomFactory: RSIntegrationFactory {\n    static func instance() -> CustomFactory {\n        return CustomFactory()\n    }\n    \n    func key() -> String {\n        return \"Custom Factory\"\n    }\n    \n    func initiate(_ config: [AnyHashable: Any], client: RSClient, rudderConfig: RSConfig) -> RSIntegration {\n        return CustomIntegration(config: config, analytics: client)\n    }\n}\n```\n\n3.  Register `CustomFactory` with the iOS SDK during its initialization:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withCustomFactory:[CustomFactory instance]];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n    .withDataPlaneUrl(DATA_PLANE_URL)\n    .withCustomFactory(CustomFactory.instance())\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\nSome pointers to keep in mind:\n\n*   RudderStack’s iOS SDK dumps every event it receives to the `dump()` method of the `CustomFIntegration` class. From here, you can process the event and hand it over to the native SDK of the device mode destination.\n*   The SDK also triggers the `reset()` method of the `CustomFactory` class on every `reset()` call made via the SDK. You can use this to handle the destination-specific reset logic.\n*   Make sure you do not duplicate the value of `KEY` present inside `CustomFactory`, across multiple `CustomFactory` that you develop.\n\n## Flushing events using `flush` API\n\nThe iOS SDK supports the `flush()` API. RudderStack retrieves all messages present in the database, divides them into individual batches based on the specified queue size, and flushes them to the RudderStack server/backend.\n\nFor example, if the `flushQueueSize` is 30 and there are 180 events in the database when the `flush()` API is called, the SDK will retrieve all those events and divide them into batches of 30 messages each, that is, into 6 batches.\n\nIf a batch fails for some reason, RudderStack drops the remaining batches to maintain the sequence of the messages. A batch is considered as failed if it isn’t sent to the RudderStack server after 3 retries.\n\nIn device mode, the `flush()` API also calls the destination SDK’s `flush()` API (if applicable).\n\nFor every `flush()` call made via the iOS SDK, the `flush()` method of the `CustomFactory` class is also triggered, which can be used to handle the destination-specific reset logic. You can make a `flush` call using the SDK as shown:\n\n```\n[[RSClient sharedInstance] flush];\n```\n\n```\nRSClient.sharedInstance()?.flush()\n```\n\n## Debugging\n\nIf you run into any issues regarding the RudderStack iOS SDK, you can turn on the `VERBOSE` or `DEBUG` logging to find out what the issue is. To turn on the logging, change your `RudderClient` initialization to the following:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withLoglevel:RudderLogLevelDebug];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\nbuilder.withDataPlaneUrl(<DATA_PLANE_URL>)\nbuilder.withLoglevel(RudderLogLevelDebug)\nRSClient.getInstance(<WRITE_KEY>, config: builder.build())\n```\n\n## Chromecast integration\n\n[Google Chromecast](https://store.google.com/in/product/chromecast?hl=en-GB) is a device that plugs into your TV or monitor with an HDMI port, and can be used to stream content from your phone or computer.\n\nRudderStack supports integrating the iOS SDK with your Cast app. Follow [these instructions](https://developers.google.com/cast/docs/ios_sender) to build your iOS sender app. Then, add the iOS SDK to it. Follow the [Google Cast developer guide](https://developers.google.com/cast/docs/developers) for more details.\n\n## Privacy manifest\n\nYour apps and third-party SDKs (usually distributed as Swift packages, XCFrameworks, or framework bundles) contain a privacy manifest file named `PrivacyInfo.xcprivacy`. It records the data collected by your app/third-party SDK and the associated [required reason API](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_use_of_required_reason_api).\n\nYou need to record the reasons in your privacy manifest for each data type your app/SDK collects along with the category of required reasons API that it uses.\n\nSee the [Apple developer documentation](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files#4284009) for more information on creating a privacy manifest.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Starting Spring 2024, you are required to include an approved reason in your app’s privacy manifest that accurately reflects how your app uses the API.\n> \n> This is a mandatory requirement to upload a new app/app update to the App Store Connect. For more information, see this [Apple update](https://developer.apple.com/news/?id=z6fu1dcu).\n\n#### **Privacy Accessed API Types**\n\n`NSPrivacyAccessedAPITypes` is an array of dictionaries describing the API types your app/third-party SDK accesses that have been designated as APIs that require reasons to access.\n\nThe RudderStack iOS SDK only uses the `userDefaults` API to store user and context information and it is declared in the privacy manifest in the [iOS SDK repository](https://github.com/rudderlabs/rudder-sdk-ios/tree/develop/Sources/Resources).\n\n#### **Privacy tracking domains**\n\n`NSPrivacyTrackingDomains` is an array of strings listing the internet domains that your app/third-party SDK connects to for tracking purposes. If the user has not granted the tracking permissions through the App Tracking Transparency framework, the network requests to these domains fail and you get an error on your app.\n\nIf your application utilizes data for tracking users as [outlined by Apple](https://developer.apple.com/app-store/user-privacy-and-data-use/), it is important to seek the user’s consent first. Also, make sure to include the following domain in your app’s privacy manifest under the purpose `NSPrivacyTrackingDomains`:\n\n*   `rudderstack.com/`\n\n#### **Privacy Nutrition Label Types**\n\n`NSPrivacyCollectedDataTypes` is an array of dictionaries that describe the data types your app/third-party SDK collects.\n\nThe RudderStack iOS SDK includes an array of [Privacy Nutrition Label Types](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_data_use_in_privacy_manifests#4250555) for the following automatically-collected fields:\n\nData\n\nLinked to user\n\nUsed for tracking\n\nCollection purpose\n\nApp version\n\nNo\n\nNo\n\n*   **Developer advertising or marketing**\n*   **Analytics**\n\nApp name\n\nNo\n\nNo\n\n*   **Developer advertising or marketing**\n*   **Analytics**\n\nCrash data\n\nNo\n\nNo\n\n**App functionality**\n\nDevice ID\n\nNo\n\nNo\n\n*   **Developer advertising or marketing**\n*   **Analytics**\n*   **Third-party advertising**\n\nProduct interaction\n\nNo\n\nNo\n\n**App functionality**\n\nOther data types\n\nNo\n\nNo\n\n**App functionality**\n\nSee the [Apple developer documentation](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_data_use_in_privacy_manifests#4250556) for more information on the above collection purposes.\n\n## FAQ\n\n#### I’m facing issues building with Carthage on XCode 12. What should I do?\n\nIf you’re facing an issue with Carthage and XCode 12, you can follow [this workaround](https://github.com/Carthage/Carthage/blob/master/Documentation/Xcode12Workaround.md) suggested by the Carthage team.\n\n#### Does the SDK support tvOS ?\n\nAs of version `1.1.0`, the iOS SDK supports the [tvOS](https://developer.apple.com/tvos/) platform.\n\n#### Does the SDK support watchOS ?\n\nAs of version `1.3.0`, the iOS SDK supports the [watchOS](https://developer.apple.com/watchos/) platform.\n\n#### How do I migrate from v1.0.2?\n\nUpdate the usage of the following classes as per the table below:\n\nPrevious Name\n\nUpdated Name\n\n`RudderClient`\n\n`RSClient`\n\n`RudderConfig`\n\n`RSConfig`\n\n`RudderConfigBuilder`\n\n`RSConfigBuilder`\n\n`RudderLogLevelDebug`\n\n`RSLogLevelDebug`  \nOther `LogLevel`s follow the same nomenclature.\n\n#### How do I ensure the events tracked just before closing/backgrounding the app are sent immediately and not on the next app launch?\n\nTo ensure that the events tracked just before closing/backgrounding the app are sent to RudderStack immediately, you can set `withEnableBackgroundMode` to `YES` while creating the `RSConfigBuilder` object as shown below:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Currently, this feature is available only for `iOS` & `tvOS` platforms.\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withEnableBackgroundMode:YES];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n    .withDataPlaneUrl(DATA_PLANE_URL)\n    .withEnableBackgroundMode(true)\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\nBy doing so, your app requests iOS for some additional background run time to run the app, which in turn allows the SDK to immediately send the events tracked just before the app is closed/backgrounded, instead of waiting till the next app launch.\n\nThis SDK feature relies on the background mode capability offered by the iOS. There is no set number on the background run time the apps get, as it is completely abstracted by iOS. For more information, refer to [this guide](https://www.raywenderlich.com/5817-background-modes-tutorial-getting-started#toc-anchor-008).\n\n#### How can I get the user `traits` after making the `identify` call?\n\nYou can get the user traits after making an `identify` call in the following way:\n\n```\nNSDictionary *traits = [[[RSClient sharedInstance] context] traits];\n```\n\n```\nlet traits = RSClient.sharedInstance()?.context.traits\n```\n\n#### How does the SDK handle different client/server errors?\n\nIn case of client-side errors, e.g. if the source write key passed to the SDK is incorrect, RudderStack gives you a **400 Bad Request** response and aborts the operation immediately. For other types of network errors (e.g. Invalid Data Plane URL), the SDK tries to flush the events to RudderStack in an incremental manner (every 1 second, 2 seconds, 3 seconds, and so on).\n\n#### Why is there a larger difference between `timestamp` and `received_at` for iOS events vs. Android events?\n\nThis scenario is most likely caused by the default behavior of iOS apps staying open in the background for a shorter period of time after a user closes them.\n\nWhen a user closes an iOS or Android app, events will still continue to be sent from the queue until the app closes in the background as well. Any events still in the queue will remain there until the user reopens the app. Due to this lag, there are some scenarios where there can be significant differences between `timestamp` (when the event was created) and `received_at` (when RudderStack actually receives the events).\n\nFor Android apps, events can be sent from the background after apps close for a longer period of time than iOS apps, therefore, more of the events coming from the Android SDK have closer `timestamp` and `received_at` times.\n\n#### Does RudderStack integrate with SKAdNetwork?\n\nRudderStack does not integrate with SKAdNetwork. However, SKAdNetwork can be directly integrated into an iOS application alongside RudderStack.\n\n#### Can I disable event tracking until the user gives their consent?\n\nYes, you can.\n\nRudderStack gives you the ability to disable tracking any user activity until the user gives their consent, by leveraging the `optOut` API. This is required in cases where your app is audience-dependent (e.g. minors) or where you’re using the app to track the user events (e.g. EU users) to meet the data protection and privacy regulations.\n\nThe `optOut` API takes `true` / `false` (in case of Swift) or `YES` / `NO` (in case of Objective-C) as a value to enable or disable tracking user activities. So, to disable user tracking, you can use the `optOut` API as shown:\n\n```\n[[RSClient sharedInstance] optOut:YES];\n```\n\n```\nRSClient.sharedInstance()?.optOut(true)\n```\n\nthe user gives their consent, you can enable user tracking again:\n\n```\n[[RSClient sharedInstance] optOut:NO];\n```\n\n```\nRSClient.sharedInstance()?.optOut(false)\n```\n\nFor more information on the `optOut` API, refer to the [Enabling/Disabling User Tracking via optOut API (GDPR Support)](#enabling-tracking-via-optout) section.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> You only need to call the `optOut` API with the required parameter only once, as the information persists within the device even if you reboot it.\n\n#### Can I apply encryption only on new databases?\n\nDatabase encryption works on new or existing databases. You can pass the [RSDBEncryption](#rsdbencryption) object in `RSConfigBuilder` while initializing the iOS SDK.\n\nSee [Configuring the RudderStack client](#configuring-the-rudderstack-client) for more information on the configuration options.\n\n#### Can I remove encryption from an encrypted database?\n\nYes, you can. When passing the `RSDBEncryption` object, configure the object with the encryption key and set `enable` to false. It will remove the encryption from the encrypted database.\n\nSee [Creating an encryption object](#creating-an-encryption-object) for more information.\n\n#### How does the iOS SDK handle events larger than 32KB?\n\nThe iOS SDK drops any events greater than 32KB.\n\n#### How long does the iOS SDK retain the events in the database? Do the events expire and get removed after a certain period?\n\nThe iOS SDK stores all the events in the database before flushing them to the RudderStack backend. The SDK never deletes events based on the time period, that is, how long the events are in the database.\n\nHowever, note that the SDK removes the older events once the [database threshold](#configuring-the-rudderstack-client) (`dbThresholdCount`, 10000 events by default) is reached.\n\n#### Why am I getting a warning in `Points of Interest` instruments?\n\nYou may get a warning in your `Points of Interest` instrument if `rudderstack.com/` is not listed in your app’s `NSPrivacyTrackingDomain` key in any privacy manifest. It may be following users across multiple apps and websites to create user profiles for apps that contact this domain.\n\nTo resolve this issue, make sure to:\n\n*   Seek user consent, especially if your app utilizes data for tracking users as [outlined by Apple](https://developer.apple.com/app-store/user-privacy-and-data-use/).\n*   Include the `rudderstack.com/` domain in your app’s privacy manifest under the purpose `NSPrivacyTrackingDomains`.\n\nSee [Privacy tracking domains](#privacy-tracking-domains) for more information.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "iOS SDK | RudderStack Docs",
    "description": "Use the RudderStack iOS SDK to send events from your iOS apps to various destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/reverse-etl/snowflake/",
    "markdown": "# Snowflake Reverse ETL Source | RudderStack Docs\n\nSend data from Snowflake to your entire stack.\n\n* * *\n\n*     10 minute read  \n    \n\n[Snowflake](https://www.snowflake.com/) is a cloud-based data warehouse provided as Software-as-a-Service (SaaS). It offers all features of a modern data warehouse, including scalability, ease of use, secure data access, and much more.\n\nRudderStack supports Snowflake as a data source from which you can ingest data and route it to your desired downstream destinations.\n\n## Grant permissions\n\nBefore you set up Snowflake as a source, you must grant certain permissions on your Snowflake warehouse for RudderStack to access data from it.\n\nRun the queries listed in the following sections in the **exact order** to grant the required permissions:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You must have the **ACCOUNTADMIN** role to grant these permissions.\n\n![Snowflake account admin role](https://www.rudderstack.com/docs/images/warehouse-actions-sources/snowflake-accountadmin.webp)\n\n### Step 1: Create a new role and user in Snowflake\n\n1.  In your Snowflake console, run the following command to create a role `RUDDER_ROLE` in Snowflake. After creating the role, you can [grant object privileges](https://docs.snowflake.com/en/sql-reference/sql/grant-privilege.html) to it.\n\n2.  Verify if the role `RUDDER_ROLE` is successfully created.\n\n3.  Create a new user `RUDDER` with a password `<strong_unique_password>`.\n\n```\nCREATE USER RUDDER PASSWORD = '<strong_unique_password>' DEFAULT_ROLE = 'RUDDER_ROLE';\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can assign some other role to this user in the RudderStack dashboard settings later. See [Configuring the connection credentials](#configuring-the-connection-credentials) section for more information.\n\n4.  Verify if the user `RUDDER` is successfully created.\n\n### Step 2: Create RudderStack schema and grant permissions to the role\n\n1.  Create a dedicated schema `_RUDDERSTACK` in your database `<YOUR_DATABASE>`.\n\n```\nCREATE SCHEMA \"<YOUR_DATABASE>\".\"_RUDDERSTACK\";\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The `_RUDDERSTACK` schema is used by RudderStack for storing the state of each data sync. **Do not change this name**.\n\n2.  Grant full access to the schema `_RUDDERSTACK` for the previously created role `RUDDER_ROLE` .\n\n```\nGRANT ALL PRIVILEGES ON SCHEMA \"<YOUR_DATABASE>\".\"_RUDDERSTACK\" TO ROLE RUDDER_ROLE;\n```\n\nReplace `<YOUR_DATABASE>` with the exact name of your Snowflake database\n\n### Step 3: Grant permissions on warehouse, database, schema, and table\n\n1.  Enable the user `RUDDER` to perform all operations allowed for the role `RUDDER_ROLE`(via the privileges granted to it).\n\n```\nGRANT ROLE RUDDER_ROLE TO USER RUDDER;\n```\n\n2.  Run the following commands to allow the role `RUDDER_ROLE` to look up the objects within your warehouse, database, schema, and the specific table or view:\n\n```\nGRANT USAGE ON WAREHOUSE \"<YOUR_WAREHOUSE>\" TO ROLE RUDDER_ROLE;\nGRANT USAGE ON DATABASE \"<YOUR_DATABASE>\" TO ROLE RUDDER_ROLE;\nGRANT USAGE ON SCHEMA \"<YOUR_DATABASE>\".\"<YOUR_SCHEMA>\" TO ROLE RUDDER_ROLE;\nGRANT SELECT ON TABLE \"<YOUR_DATABASE>\".\"<YOUR_SCHEMA>\".\"<YOUR_TABLE>\" TO ROLE  RUDDER_ROLE;\nGRANT SELECT ON VIEW \"<YOUR_DATABASE>\".\"<YOUR_SCHEMA>\".\"<YOUR_VIEW>\" TO ROLE  RUDDER_ROLE;\n```\n\nReplace `<YOUR_WAREHOUSE>`, `<YOUR_DATABASE>`, `<YOUR_SCHEMA>`, `<YOUR_TABLE>`, and `<YOUR_VIEW>` with the exact names of your Snowflake warehouse, database, schema, table, and view respectively.\n\n#### **Optional commands**\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Run the following commands **only** if you’re okay with RudderStack being able to access all current or future tables/views within your specified schema.\n\n*   To allow the role `RUDDER_ROLE` to read data from **all** the tables in the schema `<YOUR_SCHEMA>`.\n\n```\nGRANT SELECT ON ALL TABLES IN SCHEMA \"<YOUR_DATABASE>\".\"<YOUR_SCHEMA>\" TO ROLE RUDDER_ROLE;\n```\n\n*   To allow the role `<RUDDER_ROLE>` to read data from all **future tables** in the schema `<YOUR_SCHEMA>`.\n\n```\nGRANT SELECT ON FUTURE TABLES IN SCHEMA \"<YOUR_DATABASE>\".\"<YOUR_SCHEMA>\" TO ROLE RUDDER_ROLE;\n```\n\n*   To allow the role `RUDDER_ROLE` to read data from **all** the views in the schema `<YOUR_SCHEMA>`.\n\n```\nGRANT SELECT ON ALL VIEWS IN SCHEMA \"<YOUR_DATABASE>\".\"<YOUR_SCHEMA>\" TO ROLE RUDDER_ROLE;\n```\n\n*   To allow the role `<RUDDER_ROLE>` to read data from all **future views** in the schema `<YOUR_SCHEMA>`.\n\n```\nGRANT SELECT ON FUTURE VIEWS IN SCHEMA \"<YOUR_DATABASE>\".\"<YOUR_SCHEMA>\" TO ROLE RUDDER_ROLE;\n```\n\nReplace `<YOUR_DATABASE>` and `<YOUR_SCHEMA>` with the exact Snowflake database and the schema names.\n\n## Set up Snowflake source in RudderStack\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  On the **Connections** page, click **Add source**.\n3.  Under **Sources**, click **Reverse ETL** and select **Snowflake**.\n\n### Configure warehouse credentials\n\nYou can choose to proceed with your existing warehouse credentials if you have configured them in the RudderStack dashboard previously. Otherwise, click **Add new credentials** to add new credentials for your warehouse.\n\n*   **Authentication Type**: Select the user authentication mechanism from the dropdown. RudderStack supports the following methods:\n    *   **Username Password Authentication**\n    *   **Key Pair Authentication**\n\n*   **Account**: Your warehouse account ID is part of your Snowflake URL. The following examples illustrate the slight differences in the account ID for various cloud providers:\n    \n    | Account ID sample | Snowflake URL | Snowflake cloud provider |\n    | --- | --- | --- |\n    | **qya56091.us-east-1** | `https://`**`qya56091.us-east-1`**`.snowflakecomputing.com` | AWS |\n    | **rx18795.east-us-2.azure** | `https://`**`rx18795.east-us-2.azure`**`.snowflakecomputing.com` | Microsoft Azure |\n    | **ah76025.us-central1.gcp** | `https://`**`ah76025.us-central1.gcp`**`.snowflakecomputing.com` | Google Cloud Platform |\n    \n*   **Database**: Enter the name of the database in which your data resides.\n    \n*   **Warehouse**: Specify the name of your data warehouse.\n    \n*   **User**: Enter the name of the user that has the required read/write access to the above database.\n    \n*   **Role**: Enter a role you want to assign to the above user. For syncing the data, you can use this role apart from the default role (`RUDDER_ROLE`) assigned in the [Create a new role and user](#step-1-creating-a-new-role-and-user-in-snowflake) section.\n    \n\nIf you have set **Authentication Type** to **Username Password Authentication**, then enter the following setting:\n\n*   **Password**: Enter the password for the user specified in the **User** field.\n\nIf you have set **Authentication Type** to **Key Pair Authentication**, then enter the following settings:\n\n*   **Private Key**: Specify the private key generated above. Make sure to include the delimiters.\n*   **Private Key Passphrase**: Specify the password you set while encrypting the private key. Leave this field blank if your private key is not encrypted.\n\n> ![danger](https://www.rudderstack.com/docs/images/danger.svg)\n> \n> The user authentication will fail if your private key is encrypted and you do not specify the passphrase.\n\nClick the **Verify** button on the top right. RudderStack will then [verify and validate your credentials](#faq). Once verified, click **Continue** to proceed.\n\n### Specify name and source type\n\nSpecify the source name and type in this step.\n\n*   **Source name**: Assign a name to uniquely identify the source in the RudderStack dashboard.\n*   **Select your source type**: RudderStack lets you set up a Reverse ETL source from a warehouse **Table**, **Model**, or **Audience**.\n\n| Source type | Description |\n| --- | --- |\n| Table | Use an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | Use custom SQL queries to fetch specific warehouse data and send them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | Filter data in your warehouse tables to create target customer lists and send them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\n#### **Use warehouse table as source**\n\nUnder **Select your source type**, choose **Table** and specify the below fields:\n\n*   **Schema**: Select the warehouse schema from the dropdown.\n*   **Table**: Choose the required table from which RudderStack syncs the data.\n*   **Primary key**: Select the column from the above table that uniquely identifies your records in the warehouse.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n[![Use table as source](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use model as source**\n\nUnder **Select your source type**, choose **Model** and click **Continue**.\n\nTo configure a model as source:\n\n1.  Enter an optional description and specify the custom SQL query in **Query** section.\n2.  Click **Run Query** to fetch the data preview.\n3.  Select the **Primary key** to use a column that uniquely identifies your warehouse records.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can set a primary key only after you run the SQL query successfully using the **Run Query** option.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` in SQL query of the model.\n\n[![Model configuration](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use audience as source**\n\nUnder **Select your source type**, choose **Audience** and follow these steps:\n\n1.  Configure your audience source by specifying the below fields:\n    \n    *   **Schema**: Select the warehouse schema from the dropdown.\n    *   **Table**: Choose the required table from which RudderStack syncs the data.\n    *   **Primary key**: Select the column from the above table that uniquely identify your records in the warehouse.\n\n[![Use audience as source](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n2.  Set your [audience conditions](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/#set-your-conditions).\n3.  Click **Preview** to see the resulting data. Then, click **Continue** to proceed.\n\n[![Audience configuration](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n### Review and complete setup\n\nTo make any changes to the warehouse credentials or source configuration, click the edit icon present next to those sections.\n\n[![Edit source configuration](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)\n\nReview your configuration and click **Create source** to complete the setup.\n\n## Connect destination\n\nYou can connect this source to an existing or new [destination](https://www.rudderstack.com/docs/destinations/overview/) to start using it. To connect to a destination later, click **Done** on the top right.\n\n[![Next steps](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)\n\nYou will then be redirected to the **Overview** page of the source where you get the option of connecting it to an existing or new destination.\n\n[![Add destination](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)\n\nSee [Set up Reverse ETL Connection](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/) section for more information.\n\n## Update source configuration and settings\n\nGo to the **Configuration** tab of your Reverse ETL source to update the configuration depending on your source type:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot change the source type on this page.\n\n[![Update source configuration](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)\n\nThe below table lists the options you can update:\n\n| Source type | Configurable options |\n| --- | --- |\n| Table | [Schema, Table, Primary key](#use-warehouse-table-as-source) |\n| Model | *   [Model settings](#use-model-as-source)<br>*   [Primary key](#use-model-as-source)<br><br>**Note**: You can set the primary key only after the SQL query runs successfully. |\n| Audience | *   [Schema, Table, Primary key](#use-audience-as-source)<br>*   [Audience conditions](#use-audience-as-source) |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> After updating the configuration, the next sync will be a full sync.\n\nGo to the **Settings** tab to:\n\n*   Get your source ID.\n*   Change your warehouse credentials.\n*   [Set up custom alerts](https://www.rudderstack.com/docs/data-governance/alerts/) for your Reverse ETL source.\n*   Delete the source permanently.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot delete a source that is connected to any destination.\n\n[![Edit source settings](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)\n\n## FAQ\n\n#### **What do the three validations under Verifying Credentials imply?**\n\nWhen setting up a Reverse ETL source, you will see the following three validations under the **Verifying Credentials** option once you proceed after entering the warehouse credentials:\n\n[![Validating credentials](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)\n\nThese options are explained below:\n\n*   **Verifying Connection**: This option indicates that RudderStack is trying to connect to the warehouse with the provided warehouse credentials.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, it means that one or more fields specified in the warehouse credentials are incorrect. Verify your credentials in this case.\n\n*   **Able to List Schema**: This option checks if RudderStack is able to fetch all schema details by using the provided credentials.\n*   **Able to Access RudderStack Schema**: This option implies that RudderStack is able to access the `_rudderstack` schema you have created by running all commands in the [User Permissions](#creating-the-rudderstack-schema-and-granting-permissions) section.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, verify if you have successfully created the `_rudderstack` schema and given RudderStack the required permissions to access it.\n\n#### **What is the difference between the Table, Model, and Audience options when creating a Reverse ETL source?**\n\nWhen creating a new Reverse ETL source, you are presented with the following options from which RudderStack syncs the data:\n\n| Source type | Description |\n| --- | --- |\n| Table | RudderStack uses an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | RudderStack uses custom SQL queries to fetch specific warehouse data and sends them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | RudderStack filters data in your warehouse tables to create target customer lists and sends them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Snowflake Reverse ETL Source | RudderStack Docs",
    "description": "Send data from Snowflake to your entire stack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/posthog/",
    "markdown": "# PostHog source | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "PostHog source | RudderStack Docs",
    "description": "Ingest your event data from PostHog into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/get-started/rudderstack-open-source/data-plane-setup/",
    "markdown": "# Data plane setup | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "Data plane setup | RudderStack Docs",
    "description": "Install and set up the RudderStack data plane (backend) in your preferred environment.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/ios-v2/",
    "markdown": "# iOS SDK v2 | RudderStack Docs\n\n## iOS SDK v2 Beta\n\nUse the RudderStack iOS SDK v2 to send events from your iOS/macOS/tvOS/watchOS apps to various destinations.\n\n* * *\n\n*     20 minute read  \n    \n\nThe **RudderStack iOS SDK** lets you track the customer event data from your iOS, macOS, tvOS, and watchOS applications and send it to the specified destinations via RudderStack.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> *   tvOS is supported in version **1.1.0 and above**\n> *   watchOS is supported in version **v1.3.1 and above**\n> *   macOS is supported in version **2.0.0 and above**\n\nRefer to the [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-ios/tree/master-v2) to get a more hands-on understanding of the SDK.\n\n[![](https://img.shields.io/badge/dynamic/json?color=blue&label=pod&query=%24.version&url=https%3A%2F%2Fraw.githubusercontent.com%2Frudderlabs%2Frudder-sdk-ios%2Fmaster-v2%2Fpackage.json)](https://github.com/rudderlabs/rudder-sdk-ios/tree/master-v2)  \n\n## SDK setup requirements\n\nTo set up the RudderStack iOS SDK, the following prerequisites must be met:\n\n*   You need to set up a [RudderStack account](https://app.rudderstack.com/signup).\n*   Once signed up, [set up an iOS source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the dashboard. You should be able to see a **Write Key** for this source, as shown below:\n\n[![iOS source write key](https://www.rudderstack.com/docs/images/event-stream-sources/ios-write-key.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/ios-write-key.webp)\n\n*   You also need a data plane URL. Refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has an SDK installation snippet containing both the write key and the data plane URL. You can use it to integrate the iOS SDK into your project.\n\n*   Finally, you need a Mac with the latest version of [Xcode](https://developer.apple.com/xcode/).\n\n## Installing the RudderStack iOS SDK\n\nThe RudderStack iOS SDK is distributed through [Cocoapods](https://cocoapods.org/pods/Rudder) and [Carthage](https://github.com/Carthage/Carthage).\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The recommended and easiest way to add the SDK to your project is through `Podfile`.\n\nFollow these steps to install the SDK depending on your preferred method:\n\n1.  Add the SDK to your `Podfile`:\n\n2.  Run the following command:\n\nAdd the SDK to your `Cartfile`:\n\n```\ngithub \"rudderlabs/rudder-sdk-ios\"\n```\n\nThen, run the following command:\n\nRemember to include the following code in all the `.m` and `.h` files (Objective-C) or the `.swift` files where you want to refer to or use the RudderStack SDK classes:\n\nRudderStack uses [SQLite](https://sqlite.org/index.html) to temporarily store the events before sending them to the data plane. Making calls which are not thread-safe, like `SQLite.shutdown()`, might lead to unexpected crashes.\n\n### Swift Package Manager\n\nYou can also install the iOS SDK through Swift Package Manager (SPM) via one of the following methods:\n\nTo add the RudderStack package in Xcode, follow these steps:\n\n1.  Go to **File**\\> **Add Package**.\n2.  In the search bar, enter the package repository `git@github.com:rudderlabs/rudder-sdk-ios.git`.\n3.  In **Dependency Rule**, select **Up to Next Major Version** and enter the value as **2.2.5**:\n\n![SPM dependency rule](https://www.rudderstack.com/docs/images/event-stream-sources/spm-dependency-rule-v2.webp)\n\n4.  Select the project to which you want to add the package and click **Add Package**.\n\nTo use the RudderStack Swift package, include the following snippet in your project:  \n\n```\n// swift-tools-version:5.5\n// The swift-tools-version declares the minimum version of Swift required to build this package.\n\nimport PackageDescription\n\nlet package = Package(\n    name: \"RudderStack\",\n    products: [\n        // Products define the executables and libraries a package produces, and make them visible to other packages.\n        .library(\n            name: \"RudderStack\",\n            targets: [\"RudderStack\"]),\n    ],\n    dependencies: [\n        // Dependencies declare other packages that this package depends on.\n        .package(url: \"git@github.com:rudderlabs/rudder-sdk-ios.git\", from: \"1.8.0\")\n    ],\n    targets: [\n        // Targets are the basic building blocks of a package. A target can define a module or a test suite.\n        // Targets can depend on other targets in this package, and on products in packages this package depends on.\n        .target(\n            name: \"RudderStack\",\n            dependencies: [\n                .product(name: \"Rudder\", package: \"rudder-sdk-ios\")\n            ]),\n        .testTarget(\n            name: \"RudderStackTests\",\n            dependencies: [\"RudderStack\"]),\n    ]\n)\n```\n\n## Initializing the RudderStack client\n\nTo initialize the RudderStack client, place the following code in your `AppDelegate` file under the `didFinishLaunchingWithOptions` method:\n\n```\nRSConfig *config = [[RSConfig alloc] initWithWriteKey:WRITE_KEY];\n[config dataPlaneURL:DATA_PLANE_URL];\n[config trackLifecycleEvents:YES];\n[config recordScreenViews:YES];\n\n[[RSClient sharedInstance] configureWith:config];\n```\n\nA shared instance of `RSClient` is accessible after the initialization via `[RSClient sharedInstance]`.\n\n```\nlet config: RSConfig = RSConfig(writeKey: WRITE_KEY)\n                  .dataPlaneURL(DATA_PLANE_URL)\n                  .trackLifecycleEvents(true)\n                  .recordScreenViews(true)\n        \nRSClient.sharedInstance().configure(with: config)\n```\n\nA shared instance of `RSClient` is accesible after the initialization via `RSClient.sharedInstance()`\n\nRudderStack automatically tracks the following [application lifecycle events](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/):\n\n*   [`Application Installed`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-installed)\n*   [`Application Updated`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-updated)\n*   [`Application Opened`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-opened)\n*   [`Application Backgrounded`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-backgrounded)\n\nYou can disable these events using the `trackLifecycleEvents` method of `RSConfig` by passing `false`. However, it is highly recommended to keep them enabled.\n\n## Configuring the RudderStack client\n\nYou can configure your client based on the following parameters using `RSConfig`:\n\n| Parameter | Type | Description | Default value |\n| --- | --- | --- | --- |\n| `logLevel` | `RSLogLevel` | Controls how much of the log you want to see from the SDK. | `RSLogLevel.none` |\n| `dataPlaneUrl` | String | Your data plane URL. | `https://hosted.rudderlabs.com` |\n| `flushQueueSize` | Integer | Number of events in a batch request sent to the server. | `30` |\n| `dbCountThreshold` | Integer | Number of events to be saved in the SQLite database. Once the limit is reached, older events are deleted from the database. | `10000` |\n| `sleepTimeout` | Integer | Minimum waiting time to flush the events to the server. | `10 seconds` |\n| `trackLifecycleEvents` | Boolean | Determines if the SDK will capture application life cycle events automatically. | `true` |\n| `autoSessionTracking` | Boolean | Determines if the SDK automatically tracks user sessions. See [Tracking user sessions](#tracking-user-sessions) for more information. | `true` |\n| `sessionTimeout` | Integer | Maximum inactivity period before the session expires. | `300000 ms` (5 minutes) |\n| `recordScreenViews` | Boolean | Determines if the SDK will capture will capture screen view events automatically. | `false` |\n| `controlPlaneUrl` | String | This parameter should be changed **only if** you are self-hosting the control plane. Refer to the [Self-hosted control plane](#self-hosted-control-plane) section below for more information. The SDK will add `/sourceConfig` along with this URL to fetch the required configuration. | `https://api.rudderlabs.com` |\n\n### Self-hosted control plane\n\nIf you are using a device mode destination like Adjust, Firebase, etc., the SDK needs to fetch the required configuration from the control plane. If you are using the [Control Plane Lite](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/) utility to host your own control plane, then follow the steps in [this section](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/#using-sdk-sources-set-up-in-self-hosted-control-plane) and specify `controlPlaneUrl` in `RSConfig` that points to your hosted source configuration file.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Do not pass the `controlPlaneUrl` parameter during the SDK initialization if you are using [RudderStack Cloud](https://app.rudderstack.com/). This parameter is supported only if you are self-hosting the control plane using the [Control Plane Lite](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/) utility.\n\n## OneTrust consent\n\nThe iOS SDK integrates with the OneTrust consent manager and lets you specify the user’s consent during initialization. For more information, refer to the [OneTrust Consent Management for iOS](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/ios/) guide.\n\n## Tracking user sessions\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The iOS SDK v2 supports session tracking starting v2.3.0.\n\nBy default, the iOS SDK automatically tracks user sessions. RudderStack automatically determines the start and end of a user session depending on the inactivity time configured in the SDK (default time is 5 minutes).\n\n```\nRSConfig *config = [[RSConfig alloc] initWithWriteKey:WRITE_KEY];\n[config dataPlaneURL:DATA_PLANE_URL];\n[config autoSessionTracking:YES];\n[config sessionTimeout:5*60*1000L];\nRSClient *client = [RSClient sharedInstance];\n[client configureWith:config];\n```\n\n```\nlet config: RSConfig = RSConfig(writeKey: WRITE_KEY)\n            .dataPlaneURL(DATA_PLANE_URL)\n            .autoSessionTracking(true)\n            .sessionTimeout(5*60*1000)\nRSClient.sharedInstance().configure(with: config)\n```\n\nTo disable automatic session tracking, set `autoSessionTracking` to `false`.\n\nFor more information on user sessions and tracking them using the iOS SDK, see [Session Tracking](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/).\n\n## Supported API calls\n\nThe iOS SDK supports all the API calls specified in the [RudderStack Events Spec](https://www.rudderstack.com/docs/event-spec/standard-events/) guide. These include `identify`, `track`, `screen`, `group`, `alias`, and `reset` calls.\n\n## Identify\n\nThe [](https://www.rudderstack.com/docs/event-spec/standard-events/identify/)call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc. Once you identify the user, the SDK persists all the user information and passes it on to the subsequent `track` or `screen` calls. To reset the user identification, you can use the `reset` method.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack captures `deviceId` and uses that as `anonymousId` for identifying unknown users. This helps in tracking the users across the application installation.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> According to the [Apple documentation](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor), if a device has multiple apps from the same vendor, all the apps will be assigned the same `deviceId`. If all the applications from the vendor are uninstalled, then a new `deviceId` will be assigned to the apps on the next install.\n\nAn sample `identify` call is shown below:\n\n```\n[[RSClient sharedInstance] identify:@\"user_id\" traits:@{@\"email\": @\"alex@example.com\"}];\n```\n\n```\nRSClient.sharedInstance().identify(\"user_id\", traits: [\"email\": \"alex@example.com\"])\n```\n\nThe `identify` method accepts the following parameters:\n\n| Name | Data type | Presence | Description |\n| --- | --- | --- | --- |\n| `userId` | `NSString` | Required | Uniquely identifies the visiting user. |\n| `traits` | `NSDictionary` | Optional | Information on the user traits. Use the `dict` method of `RudderTraits` to convert to `NSDictionary` easily. |\n| `option` | `RSOption` | Optional | Extra options for the `identify` event. |\n\n### Setting your own anonymous ID\n\nBy default, RudderStack uses the `deviceId` as `anonymousId`. To set your own `anonymousId`, you can use the `setAnonymousId` method as shown:\n\n```\n[client setAnonymousId:@\"new_anonymous_id\"];\n```\n\n```\nRSClient.sharedInstance().setAnonymousId(\"new_anonymous_id\")\n```\n\n## Track\n\nThe [](https://www.rudderstack.com/docs/event-spec/standard-events/track/)call lets you record the user events along with any properties associated with them.\n\nA sample `track` event is shown below:\n\n```\n[[RSClient sharedInstance] track:@\"sample_track_event\" properties:@{\n    @\"key_1\": @\"value_1\",\n    @\"key_2\": @\"value_2\"\n}];\n```\n\n```\nRSClient.sharedInstance().track(\"sample_track_event\", properties: [\n    \"key_1\": \"value_1\",\n    \"key_2\": \"value_2\"\n])\n```\n\n`track` method accepts the following parameters:\n\n| Name | Data type | Presence | Description |\n| --- | --- | --- | --- |\n| `eventName` | `NSString` | Required | Name of the tracked event. |\n| `properties` | `NSDictionary` | Optional | Extra data properties to be sent along with the event. |\n| `option` | `RSOption` | Optional | Extra event options. |\n\n## Screen\n\nThe [screen](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call lets you record whenever a user views their mobile screen, with any additional relevant information about the screen.\n\nA sample `screen` event is as shown:\n\n```\n[[RSClient sharedInstance] screen:@\"ViewController\" properties:@{\n  @\"key_1\": @\"value_1\",\n  @\"key_2\": @\"value_2\"\n} ];\n```\n\n```\nRSClient.sharedInstance().screen(\"ViewController\", properties: [\n    \"key_1\": \"value_1\",\n    \"key_2\": \"value_2\"\n])\n```\n\nThe `screen` method accepts the following parameters:\n\n| Name | Data type | Presence | Description |\n| --- | --- | --- | --- |\n| `screenName` | `NSString` | Required | Name of the screen viewed by the user. |\n| `properties` | `NSDictionary` | Optional | Extra property object to be passed along with the `screen` call. |\n| `option` | `RSOption` | Optional | Extra options to be passed along with the `screen` call. |\n\n## Group\n\nThe [](https://www.rudderstack.com/docs/event-spec/standard-events/group/)call lets you link an identified user with a group like a company, organization, or an account. It also lets you record any traits associated with that group, like the name of the company, number of employees, etc.\n\nA sample `group` call is shown below:\n\n```\n[[RSClient sharedInstance] group:@\"sample_group_id\" traits:@{\n  @\"key_1\": @\"value_1\",\n  @\"key_2\": @\"value_2\"\n} ];\n```\n\n```\nRSClient.sharedInstance().group(\"sample_group_id\", traits: [\n  \"key_1\": \"value_1\",\n  \"key_2\": \"value_2\"\n])\n```\n\nThe `group` method accepts the following parameters:\n\n| Name | Data type | Presence | Description |\n| --- | --- | --- | --- |\n| `groupId` | `String` | Required | The unique identifier of the group with which you want to associate your user. |\n| `traits` | `NSDictionary` | Optional | Any other property of the organization you want to pass along with the call. |\n| `option` | `RSOption` | Optional | Extra event-level options to be passed along with the `group` call. |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The iOS SDK does not persist the group traits across the sessions.\n\n## Alias\n\nThe [alias](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call associates the user with a new identification. A sample `alias` call is shown below:\n\n```\n[[RSClient sharedInstance] alias:@\"new_user_id\"];\n```\n\n```\nRSClient.sharedInstance().alias(\"new_user_id\")\n```\n\nAlternatively, you can use the following method signature:\n\n| Name | Data type | Presence | Description |\n| --- | --- | --- | --- |\n| `newId` | `String` | Required | The new `userId` you want to assign to the user. |\n| `option` | `RSOption` | Optional | Event-level options. |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack replaces the old `userId` with the `newUserId` and persists that identification across the sessions.\n\n## Reset\n\nYou can use the `reset` method to clear the persisted user traits from the `identify` call. This is required for the user logout operation.\n\nIn [session tracking](https://rudderstack.com/docs/sources/event-streams/sdks/session-tracking/#:~:text=tracking%20is%20enabled%3A-,sessionId,-%28Number%29%3A%20The%20session), calling the `reset` method clears the current `sessionId` and generates a new one.\n\n```\n[[RSClient sharedInstance] reset];\n```\n\n```\nRSClient.sharedInstance().reset()\n```\n\n## Setting a custom ID\n\nYou can pass a custom ID along with the standard `userId` in all your API calls. RudderStack adds this value under `context.externalId`.\n\nThe SDK does not **not** persist the `externalId` information across other API calls. To use it, you will need to pass `externalId` in every event.\n\nThe following snippet shows how to add an `externalId` to your `identify` event:\n\n```\nRSOption *eventOption = [[RSOption alloc] init];\n[eventOption putExternalId:@\"brazeExternalId\" withId:@\"some_external_id_1\"];\n    \n[[RSClient sharedInstance] identify:@\"1hKOmRA4GRlm\" traits:@{@\"email\": @\"alex@example.com\"} option:eventOption];\n```\n\n```\nlet messageOption = RSOption()\nmessageOption.putExternalId(\"brazeExternalId\", withId: \"some_external_id_1\")\n\nRSClient.sharedInstance().identify(\"1hKOmRA4GRlm\", traits: [\"email\": \"alex@example.com\"], option: messageOption)\n```\n\nRudderStack gives the users (for example, an EU user) the ability to opt out of tracking any user activity until they give their consent. You can do this by leveraging RudderStack’s `setOptOutStatus` API.\n\nThe `setOptOutStatus` API takes `YES`/`NO` (Objective-C) or `true`/`false` (Swift) as a Boolean value to enable or disable the user tracking activities. This flag persists across device reboots.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You need to call the `setoptOutStatus` API with the relevant parameter only once, as the information persists within the device even if you reboot it.\n\nThe following snippet highlights the use of the `setoptOutStatus` API to disable user tracking:\n\n```\n[[RSClient sharedInstance] setOptOutStatus:YES];\n```\n\n```\nRSClient.sharedInstance().setOptOutStatus(true)\n```\n\nOnce the user grants their consent, you can enable user tracking once again using the `setOptOutStatus` API by passing `NO` or `false`:\n\n```\n[[RSClient sharedInstance] setOptOutStatus:NO];\n```\n\n```\nRSClient.sharedInstance().setOptOutStatus(false)\n```\n\n## Supporting push notifications for device mode destinations\n\nWith the iOS SDK, you need not call the individual destination’s API in your app to implement the push notifications support; calling the SDK’s push notification API is sufficient.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This feature is specific to RudderStack iOS SDK v2 and is **not available** in the earlier SDK versions. Also, it is only applicable for the [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode) integrations.\n\nTo enable push notifications for your device mode destinations, the SDK provides the following functions:\n\n```\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken;\n\n- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error;\n\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler;\n\n- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler;\n```\n\n```\n- func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data)\n\n- func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error)\n\n- func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void)\n\n- func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void)\n```\n\nTo implement these functions, go to your `AppDelegate` file and add the following lines:\n\n```\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n    [[RSClient sharedInstance] application:application didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\n}\n\n- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n    [[RSClient sharedInstance] application:application didFailToRegisterForRemoteNotificationsWithError:error];\n}\n\n- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler {\n    [[RSClient sharedInstance] userNotificationCenter:center didReceive:response withCompletionHandler:completionHandler];\n}\n\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {\n    [[RSClient sharedInstance] application:application didReceiveRemoteNotification:userInfo fetchCompletionHandler:completionHandler];\n}\n```\n\n```\n- func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    RSClient.sharedInstance().application(application, didRegisterForRemoteNotificationsWithDeviceToken: deviceToken)\n}\n\n- func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n    RSClient.sharedInstance().application(application, didFailToRegisterForRemoteNotificationsWithError: error)\n}\n\n- func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n    RSClient.sharedInstance().userNotificationCenter(center, didReceive: response, withCompletionHandler: completionHandler)\n}\n\n- func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n    RSClient.sharedInstance().application(application, didReceiveRemoteNotification: userInfo, fetchCompletionHandler: completionHandler)\n}\n```\n\n## Setting the device token for push notifications\n\nTo pass push notifications to the destinations that support it, you can pass your device token using the `setDeviceToken` method:\n\n```\n[[RSClient sharedInstance] setDeviceToken:@\"example_device_token\"];\n```\n\n```\nRSClient.sharedInstance().setDeviceToken(\"example_device_token\")\n```\n\nRudderStack sets the device token under `context.device.token`.\n\n## Setting the advertisement ID\n\nRudderStack separates the IDFA collection from the core library so that you have better control over it.\n\nYou can pass the IDFA to the `setAdvertisementId` method to set it under `context.device.advertisingId`:\n\n```\n[[RSClient sharedInstance] setAdvertisingId:[self getIDFA]];\n\n- (NSString*)getIDFA {\n    return [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];\n}\n```\n\n```\nRSClient.sharedInstance().setAdvertisingId(getIDFA())\n\nfunc getIDFA() -> String {\n\t\treturn ASIdentifierManager.shared().advertisingIdentifier.uuidString\n}\n```\n\nYou can pass [`ATTrackingManager.trackingAuthorizationStatus`](https://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/3547038-trackingauthorizationstatus) to RudderStack and it is passed along to the relevant destinations as configured.\n\nFor example, AppsFlyer accepts this parameter for the attribution to work in their [server-to-server events flow](https://support.appsflyer.com/hc/en-us/articles/207034486-Server-to-server-events-API-for-mobile-S2S-mobile-#att-3).\n\n```\n[[RSClient sharedInstance] setAppTrackingConsent:RSAppTrackingConsentAuthorize];\n```\n\n```\nRSClient.sharedInstance().setAppTrackingConsent(.authorize)\n```\n\nYou can pass the following options to the `setAppTrackingConsent` method to set the relevant authorization consent:\n\n*   `RSATTNotDetermined`\n*   `RSATTRestricted`\n*   `RSATTDenied`\n*   `RSATTAuthorize`\n\n## Filtering device mode events\n\nWhen sending events to a destination via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode), you can explicitly specify which events should be discarded or allowed to flow through - by allowlisting or denylisting them.\n\n## Enabling/disabling events for specific destinations\n\nThe RudderStack iOS SDK lets you enable or disable event flow to a specific destination or all the destinations to which the source is connected. You can specify these destinations by creating a `RSOption` object as shown:\n\n```\nRSOption *option = [[RSOption alloc]init];\n//default value for `All` is true\n[option putIntegration:@\"All\" isEnabled:YES];\n// specifying destination by its display name\n[option putIntegration:@\"Amplitude\" isEnabled:YES];\n[option putIntegration:@\"<DESTINATION_DISPLAY_NAME>\" isEnabled:<BOOLEAN>];\n```\n\n```\nlet option:RSOption = RSOption();\n//default value for `All` is true\noption.putIntegration(\"All\", isEnabled:true)\n// specifying destination by its display name\noption.putIntegration(\"Amplitude\", isEnabled:true)\noption.putIntegration(<DESTINATION_DISPLAY_NAME>, isEnabled:<BOOLEAN>)\n```\n\nThe keyword `All` in the above snippet represents all the destinations the source is connected to. The SDK sets its value to `true` by default.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Make sure the `DESTINATION_DISPLAY_NAME` you specify above should exactly match the destination name as shown in the [RudderStack dashboard](https://app.rudderstack.com/directory).\n\nYou can pass the destinations specified to the SDK in the following two ways:\n\n### Method 1: Passing destinations while initializing the SDK\n\nThis approach is helpful when you want to enable/disable sending the events to the destinations **across all the event calls** made using the SDK.\n\n```\nRSOption *defaultOption = [[RSOption alloc] init];\n[defaultOption putIntegration:@\"Amplitude\" isEnabled:YES];\n\n[[RSClient sharedInstance] setOption:defaultOption];\n```\n\n```\nlet defaultOption = RSOption()\ndefaultOption.putIntegration(\"Amplitude\", isEnabled: true)\n\nRSClient.sharedInstance().setOption(defaultOption)\n```\n\n### Method 1: Passing destinations while initializing the SDK\n\nThis approach is helpful when you want to enable/disable sending only specific events to the destinations.\n\n```\nRSOption *eventOption = [[RSOption alloc] init];\n[eventOption putIntegration:@\"Amplitude\" isEnabled:YES];\n\n[[RSClient sharedInstance] track:@\"sample_track\" properties:@{@\"key_1\": @\"value_1\", @\"key_2\": @\"value_2\"} option:eventOption];\n```\n\n```\nlet eventOption = RSOption()\neventOption.putIntegration(\"MoEngage\", isEnabled: true)\n\nRSClient.sharedInstance().track(\"sample_track\", option: eventOption)\n```\n\nIf you use the `RSOption` object to specify the destinations both while initializing the SDK as well as making an event call, then RudderStack will consider only the destinations specified at the event level.\n\n## Debugging\n\nIf you run into any issues regarding the RudderStack iOS SDK, you can enable `VERBOSE` or `DEBUG` logging to determine the issue.\n\nTo enable the logging, change your `RSClient` initialization as shown:\n\n```\nRSConfig *config = [[RSConfig alloc] initWithWriteKey:WRITE_KEY];\n[config dataPlaneURL:DATA_PLANE_URL];\n[config loglevel:RSLogLevelDebug];\n\n[[RSClient sharedInstance] configureWith:config];\n```\n\n```\nlet config: RSConfig = RSConfig(writeKey: WRITE_KEY)\n            .dataPlaneURL(DATA_PLANE_URL)\n            .loglevel(.debug)\n        \nRSClient.sharedInstance().configure(with: config)\n```\n\n## Adding Chromecast support\n\n[Google Chromecast](https://store.google.com/in/product/chromecast?hl=en-GB) is a device that plugs into your TV or monitor with an HDMI port, and can be used to stream content from your phone or computer.\n\nRudderStack supports integrating the iOS SDK with your Cast app. Follow [these instructions](https://developers.google.com/cast/docs/ios_sender) to build your iOS sender app. Then, add the iOS SDK to it. Follow the [Google Cast developer guide](https://developers.google.com/cast/docs/developers) for more details.\n\n## Developing a device mode destination\n\nThis section details the steps required to develop a device mode destination in case RudderStack doesn’t support it already.\n\nMore information on the RudderStack device mode can be found in the [Connection Modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/) guide.\n\n1.  Create a `RSCustomDestination.swift` file by extending `RSDestinationPlugin`:\n\n```\nclass RSCustomDestination: RSDestinationPlugin {\n    var key: String = \"Custom\"\n    var controller = RSController()\n    var type: PluginType = .destination\n    var RSClient.sharedInstance(): RSClient?\n    \n    func update(serverConfig: RSServerConfig, type: UpdateType) {\n        guard type == .initial else { return }\n        // Some code\n    }\n    \n    func track(message: TrackMessage) -> TrackMessage? {\n        // Some code\n        return message\n    }\n    \n    func identify(message: IdentifyMessage) -> IdentifyMessage? {\n        // Some code\n        return message\n    }\n    \n    func screen(message: ScreenMessage) -> ScreenMessage? {\n        // Some code\n        return message\n    }\n    \n    func group(message: GroupMessage) -> GroupMessage? {\n        // Some code\n        return message\n    }\n    \n    func alias(message: AliasMessage) -> AliasMessage? {\n        // Some code\n        return message\n    }\n    \n    func flush() {\n        // Some code\n    }\n    \n    func reset() {\n        // Some code\n    }\n}\n```\n\n2.  Then, create a `CustomDestination` class file by extending `RudderDestination` and initialize `RSCustomDestination` inside `init()`:\n\n```\n@objc\nclass CustomDestination: RudderDestination {\n    override init() {\n        super.init()\n        plugin = RSCustomDestination()\n    }\n}\n```\n\n3.  For Objective-C projects, a dialog box will appear while creating the Swift file - asking you to create a bridging header if it does not exist already. In this case, choose **Create Bridging Header**. This creates a `<PROJECT_MODULE_NAME>-Bridging-Header.h` file.\n    \n4.  After creating the Bridging Header, search **Objective-C Generated Interface Header Name** in **Build Settings** and keep the header name handy. This should be something like `<PROJECT_MODULE_NAME>-Swift.h`.\n    \n5.  Finally, add the `CustomDestination` with the RudderStack iOS SDK after its initialization:\n    \n\n```\nRSClient.sharedInstance().addDestination(CustomDestination())\n```\n\n```\n#import \"<project_module_name>-Swift.h\"\n\n[[RSClient sharedInstance] addDestination:[[CustomDestination alloc] init]];\n```\n\n## Privacy manifest\n\nYour apps and third-party SDKs (usually distributed as Swift packages, XCFrameworks, or framework bundles) contain a privacy manifest file named `PrivacyInfo.xcprivacy`. It records the data collected by your app/third-party SDK and the associated [required reason API](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_use_of_required_reason_api).\n\nYou need to record the reasons in your privacy manifest for each data type your app/SDK collects along with the category of required reasons API that it uses.\n\nSee the [Apple developer documentation](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files#4284009) for more information on creating a privacy manifest.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Starting Spring 2024, you are required to include an approved reason in your app’s privacy manifest that accurately reflects how your app uses the API.\n> \n> This is a mandatory requirement to upload a new app/app update to the App Store Connect. For more information, see this [Apple update](https://developer.apple.com/news/?id=z6fu1dcu).\n\n#### **Privacy Accessed API Types**\n\n`NSPrivacyAccessedAPITypes` is an array of dictionaries describing the API types your app/third-party SDK accesses that have been designated as APIs that require reasons to access.\n\nThe RudderStack iOS SDK only uses the `userDefaults` API to store user and context information and it is declared in the privacy manifest in the [iOS SDK repository](https://github.com/rudderlabs/rudder-sdk-ios/tree/develop-v2/Sources/Resources).\n\n#### **Privacy tracking domains**\n\n`NSPrivacyTrackingDomains` is an array of strings listing the internet domains that your app/third-party SDK connects to for tracking purposes. If the user has not granted the tracking permissions through the App Tracking Transparency framework, the network requests to these domains fail and you get an error on your app.\n\nIf your application utilizes data for tracking users as [outlined by Apple](https://developer.apple.com/app-store/user-privacy-and-data-use/), it is important to seek the user’s consent first. Also, make sure to include the following domain in your app’s privacy manifest under the purpose `NSPrivacyTrackingDomains`:\n\n*   `rudderstack.com/`\n\n#### **Privacy Nutrition Label Types**\n\n`NSPrivacyCollectedDataTypes` is an array of dictionaries that describe the data types your app/third-party SDK collects.\n\nThe RudderStack iOS SDK includes an array of [Privacy Nutrition Label Types](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_data_use_in_privacy_manifests#4250555) for the following automatically-collected fields:\n\n| Data | Linked to user | Used for tracking | Collection purpose |\n| --- | --- | --- | --- |\n| App version | No  | No  | *   **Developer advertising or marketing**<br>*   **Analytics** |\n| App name | No  | No  | *   **Developer advertising or marketing**<br>*   **Analytics** |\n| Device ID | No  | No  | *   **Developer advertising or marketing**<br>*   **Analytics**<br>*   **Third-party advertising** |\n\nSee the [Apple developer documentation](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_data_use_in_privacy_manifests#4250556) for more information on the above collection purposes.\n\n## FAQ\n\n#### I’m facing issues building with Carthage on XCode 12. What should I do?\n\nIf you’re facing an issue with Carthage and XCode 12, you can follow [this workaround](https://github.com/Carthage/Carthage/blob/master/Documentation/Xcode12Workaround.md) suggested by the Carthage team.\n\n#### Does the iOS SDK support the tvOS, macOS, and watchOS platforms?\n\nYes, the iOS SDK supports tvOS and watchOS platforms. Refer to the table below for the version details:\n\n| Platform | Supported SDK version |\n| --- | --- |\n| [tvOS](https://developer.apple.com/tvos/) | 1.1.0 and above |\n| [watchOS](https://developer.apple.com/watchos/) | 1.3.0 and above |\n| [macOS](https://developer.apple.com/macos/) | 2.0.0 and above |\n\n#### How do I migrate from an older SDK version (v1.x) to the current version?\n\nTo migrate from the older SDK versions, update the usage of the following classes:\n\n| Previous Name | Updated Name |\n| --- | --- |\n| `RudderClient` | `RSClient` |\n| `RudderConfig` | `RSConfig` |\n| `RudderLogLevelDebug` | `RSLogLevelDebug` |\n\n#### How can I get the user `traits` after making the `identify` call?\n\nYou can get the user traits after making an `identify` call in the following way:\n\n```\nlet traits = RSClient.sharedInstance().traits\n```\n\n```\nNSDictionary *traits = [RSClient sharedInstance].traits;\n// or\nNSDictionary *traits = [[RSClient sharedInstance] traits];\n```\n\n#### How does the SDK handle different client/server errors?\n\nIn case of client-side errors, for example, if the source write key passed to the SDK is incorrect, RudderStack gives a **400 Bad Request** response and aborts the operation immediately. For other types of network errors, for example, invalid data plane URL, the SDK tries to flush the events to RudderStack in an incremental manner (every 1 second, 2 seconds, 3 seconds, and so on).\n\n#### Why is there a difference between `timestamp` and `received_at` for iOS events vs. Android events sent at the same time?\n\nThis scenario is most likely caused by the default behavior of iOS apps staying open in the background for a short period of time after a user closes them.\n\nWhen a user closes an iOS or Android app, the events will still continue to be sent from the queue until the app closes in the background. Any events still in the queue will be retained until the user reopens the app. Due to this lag, there are some scenarios where there can be significant differences between `timestamp` (when the event was created) and `received_at` (when RudderStack actually receives the event).\n\nFor Android apps, events can be sent from the background after apps close for a longer period of time than iOS apps, therefore, more of the events coming from the Android SDK have closer `timestamp` and `received_at` times.\n\n#### Does RudderStack integrate with SKAdNetwork?\n\nRudderStack does not integrate with SKAdNetwork. However, SKAdNetwork can be directly integrated into an iOS application alongside RudderStack.\n\n#### Can I disable event tracking until the user gives their consent?\n\nYes, you can. Refer to the [Enabling/disabling user tracking via the `setOptOutStatus` API](#enablingdisabling-user-tracking-via-the-setoptoutstatus-api-gdpr-support) section for more information.\n\n#### How does the iOS SDK handle events larger than 32KB?\n\nThe iOS SDK drops any events greater than 32KB.\n\n#### Why am I getting a warning in `Points of Interest` instruments?\n\nYou may get a warning in your `Points of Interest` instrument if `rudderstack.com/` is not listed in your app’s `NSPrivacyTrackingDomain` key in any privacy manifest. It may be following users across multiple apps and websites to create user profiles for apps that contact this domain.\n\nTo resolve this issue, make sure to:\n\n*   Seek user consent, especially if your app utilizes data for tracking users as [outlined by Apple](https://developer.apple.com/app-store/user-privacy-and-data-use/).\n*   Include the `rudderstack.com/` domain in your app’s privacy manifest under the purpose `NSPrivacyTrackingDomains`. See [Privacy tracking domains](#privacy-tracking-domains) for more information.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "iOS SDK v2 | RudderStack Docs",
    "description": "Use the RudderStack iOS SDK v2 to send events from your iOS/macOS/tvOS/watchOS apps to various destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/refiner/",
    "markdown": "# Refiner source | RudderStack Docs\n\nIngest your event data from Refiner into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[Refiner](https://refiner.io/) is a customer feedback and survey platform. It lets you create tailored microsurveys to get a better understanding of your customers, how they interact with your product, and identify new growth opportunities.\n\nThis guide will help you set up Refiner as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Refiner source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Refiner**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Refiner source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![Refiner source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/refiner-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/refiner-webhook-url.webp)\n\n4.  Log into your [Refiner account](https://app.refiner.io/auth/login).\n5.  Go to **Integrations** and select **Create Webhook**.\n6.  Name your webhook and enter the webhook in the **Destination URL** field as shown:\n\n[![Refiner source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/refiner-dashboard-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/refiner-dashboard-webhook.webp)\n\n7.  Finally, click **Save Webhook**.\n\n## Event transformation\n\nRudderStack ingests the Refiner events after converting them into the RudderStack event format. It also maps the following properties from the Refiner event payload to the RudderStack properties:\n\n| Refiner property | RudderStack property |\n| --- | --- |\n| `email` | `email` |\n| `triggered_event` | `event` |\n| `attributes.user_id` | `userId` |\n| `attributes`  <br>`segments` | `context.traits` |\n| `account` | `traits` |\n| `response`  <br>`form` | `properties` |\n| `last_form_submission_at` | `originaltimestamp` |\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from Refiner source and creates the resulting payload.\n\nA sample payload sent by Refiner is shown below:\n\n```\n{\n  \"uuid\": \"69b83e20-4ea2-11ed-941c-e1cb6c7a3870\",\n  \"cookie_uuid\": \"2f9b7e6a-9ba8-1c68-d474-48d719d92a60\",\n  \"project_uuid\": \"0d8759d0-401c-11ed-8ded-9757c4929b55\",\n  \"remote_id\": \"sdk@30\",\n  \"email\": \"sdk30@gmail.com\",\n  \"display_name\": \"\",\n  \"first_seen_at\": \"2022-10-18T05:04:58.000000Z\",\n  \"last_seen_at\": \"2022-10-18T05:04:58.000000Z\",\n  \"attributes\": {\n    \"address\": null,\n    \"address_city\": null,\n    \"address_state\": null,\n    \"age\": null,\n    \"another_attribute\": null,\n    \"city\": null,\n    \"country\": null,\n    \"created_at\": null,\n    \"email\": \"sdk30@gmail.com\",\n    \"event\": null,\n    \"first_name\": null,\n    \"first_seen_at\": \"2022-10-18T05:04:58.000000Z\",\n    \"form_submissions_count\": \"1\",\n    \"form_views_count\": \"1\",\n    \"gender\": null,\n    \"last_form_submission_at\": \"2022-10-18T05:05:45.000000Z\",\n    \"last_form_view_at\": \"2022-10-18T05:05:29.000000Z\",\n    \"last_name\": null,\n    \"last_seen_at\": \"2022-10-18T05:04:58.000000Z\",\n    \"name\": null,\n    \"phone\": null,\n    \"some_attribute\": null,\n    \"status\": null,\n    \"student\": null,\n    \"tag\": null,\n    \"trait1\": null,\n    \"trait2\": null,\n    \"trait3\": null,\n    \"url\": null,\n    \"user_address_city\": null,\n    \"user_address_state\": null,\n    \"user_country\": null,\n    \"user_id\": null,\n    \"username\": null,\n    \"useroccupation\": null,\n    \"why_did_you_cancel_your_subscription\": \"Missing features\"\n  },\n  \"segments\": [{\n      \"uuid\": \"0d91d7a0-401c-11ed-8898-bb1ee0c23ae5\",\n      \"name\": \"All Users\",\n      \"created_at\": \"2022-10-18T05:04:58.000000Z\",\n      \"updated_at\": \"2022-10-18T05:04:58.000000Z\"\n    },\n    {\n      \"uuid\": \"f71ad940-455c-11ed-85e0-bf25f168b224\",\n      \"name\": \"test-segment\",\n      \"created_at\": \"2022-10-18T05:04:58.000000Z\",\n      \"updated_at\": \"2022-10-18T05:04:58.000000Z\"\n    }\n  ],\n  \"account\": {\n    \"uuid\": \"69ba2030-4ea2-11ed-adfc-595e70c7ab07\",\n    \"remote_id\": null,\n    \"domain\": null,\n    \"display_name\": \"\",\n    \"first_seen_at\": \"2022-10-18T05:04:58.000000Z\",\n    \"last_seen_at\": \"2022-10-18T05:04:58.000000Z\",\n    \"attributes\": {\n      \"1\": null,\n      \"2\": null,\n      \"3\": null,\n      \"4\": null,\n      \"a_date_at\": null,\n      \"business_email\": null,\n      \"company\": null,\n      \"email\": null,\n      \"isfunded\": null,\n      \"location\": null,\n      \"name\": null,\n      \"revenue\": null,\n      \"some_account_data\": null,\n      \"trait1\": null,\n      \"trait2\": null,\n      \"trait3\": null,\n      \"user_id\": null\n    }\n  },\n  \"triggered_event\": \"Completed Survey\",\n  \"form\": {\n    \"uuid\": \"0d94c790-401c-11ed-bb27-e31f6832c5ae\",\n    \"name\": \"Customer Churn Survey\"\n  },\n  \"response\": {\n    \"uuid\": \"7c508c60-4ea2-11ed-9302-57708fe11d26\",\n    \"first_shown_at\": \"2022-10-18T05:05:29.000000Z\",\n    \"last_shown_at\": \"2022-10-18T05:05:29.000000Z\",\n    \"show_counter\": null,\n    \"first_data_reception_at\": \"2022-10-18T05:05:45.000000Z\",\n    \"last_data_reception_at\": \"2022-10-18T05:05:45.000000Z\",\n    \"completed_at\": \"2022-10-18T05:05:45.000000Z\",\n    \"dismissed_at\": null,\n    \"received_at\": \"2022-10-18T05:05:45.000000Z\",\n    \"data\": {\n      \"why_did_you_cancel_your_subscription\": \"Missing features\"\n    },\n    \"tags\": []\n  }\n}\n```\n\nRudderStack transforms the above payload into the following payload:\n\n```\n{\n  \"type\": \"identify\",\n  \"traits\": {\n    \"why_did_you_cancel_your_subscription\": \"Missing features\"\n  },\n  \"userId\": \"sdk@30\",\n  \"context\": {\n    \"traits\": {\n      \"email\": \"sdk30@gmail.com\",\n      \"segments\": [{\n          \"name\": \"All Users\",\n          \"uuid\": \"0d91d7a0-401c-11ed-8898-bb1ee0c23ae5\",\n          \"created_at\": \"2022-10-18T05:04:58.000000Z\",\n          \"updated_at\": \"2022-10-18T05:04:58.000000Z\"\n        },\n        {\n          \"name\": \"test-segment\",\n          \"uuid\": \"f71ad940-455c-11ed-85e0-bf25f168b224\",\n          \"created_at\": \"2022-10-18T05:04:58.000000Z\",\n          \"updated_at\": \"2022-10-18T05:04:58.000000Z\"\n        }\n      ]\n    },\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"formName\": \"Customer Churn Survey\",\n    \"formUuid\": \"0d94c790-401c-11ed-bb27-e31f6832c5ae\",\n    \"integration\": {\n      \"name\": \"Refiner\"\n    }\n  },\n  \"rudderId\": \"0b10eeb2-0949-4cc9-9d38-3fd1348392e2\",\n  \"messageId\": \"579f213b-5f7d-4dd4-9fa4-d3dca8a0a661\",\n  \"integrations\": {\n    \"Refiner\": false\n  },\n  \"originalTimestamp\": \"2022-10-18T05:05:45.000000Z\"\n} {\n  \"type\": \"track\",\n  \"event\": \"Completed Survey\",\n  \"userId\": \"sdk@30\",\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"formName\": \"Customer Churn Survey\",\n    \"formUuid\": \"0d94c790-401c-11ed-bb27-e31f6832c5ae\",\n    \"integration\": {\n      \"name\": \"Refiner\"\n    }\n  },\n  \"rudderId\": \"0b10eeb2-0949-4cc9-9d38-3fd1348392e2\",\n  \"messageId\": \"94e5747f-4324-4d32-8a1d-33d0a3b718e1\",\n  \"properties\": {\n    \"response\": {\n      \"data\": {\n        \"why_did_you_cancel_your_subscription\": \"Missing features\"\n      },\n      \"tags\": [],\n      \"uuid\": \"7c508c60-4ea2-11ed-9302-57708fe11d26\",\n      \"received_at\": \"2022-10-18T05:05:45.000000Z\",\n      \"completed_at\": \"2022-10-18T05:05:45.000000Z\",\n      \"last_shown_at\": \"2022-10-18T05:05:29.000000Z\",\n      \"first_shown_at\": \"2022-10-18T05:05:29.000000Z\",\n      \"last_data_reception_at\": \"2022-10-18T05:05:45.000000Z\",\n      \"first_data_reception_at\": \"2022-10-18T05:05:45.000000Z\"\n    },\n    \"refiner_form_name\": \"Customer Churn Survey\",\n    \"refiner_form_uuid\": \"0d94c790-401c-11ed-bb27-e31f6832c5ae\"\n  },\n  \"integrations\": {\n    \"Refiner\": false\n  },\n  \"originalTimestamp\": \"2022-10-18T05:05:45.000000Z\"\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Refiner source | RudderStack Docs",
    "description": "Ingest your event data from Refiner into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/reverse-etl/trino/",
    "markdown": "# Trino Reverse ETL Source | RudderStack Docs\n\nSend data from Trino to your entire stack.\n\n* * *\n\n*     8 minute read  \n    \n\n[Trino](https://trino.io/) is a distributed SQL query engine for efficient, low-latency big data analytics.\n\nRudderStack supports Trino as a data source from which you can ingest data and route it to your desired downstream destinations.\n\n## Prerequisites: Trino server setup\n\nBefore you set up Trino as a source in RudderStack, make sure your Trino server is configured correctly by following these sections:\n\n*   RudderStack supports only [password file authentication](https://trino.io/docs/current/security/password-file.html) mechanism for this source. Make sure to enable [password file authentication](https://trino.io/docs/current/security/password-file.html#password-authenticator-configuration) for your Trino instance and [create a password file](https://trino.io/docs/current/security/password-file.html#creating-a-password-file).\n*   RudderStack uses the [file-based access control](https://trino.io/docs/current/security/file-system-access-control.html) mechanism for Trino. To use the access control plugin, see [Configuration](https://trino.io/docs/current/security/file-system-access-control.html#configuration) section.\n*   This integration supports only the [Apache Hive connector](https://trino.io/docs/current/connector/hive.html) currently. To use this connector, make sure to add the following [configuration](https://trino.io/docs/current/connector/hive.html#general-configuration) in the catalog properties file using the Hive connector:\n\n```\nhive.allow-drop-table=true\nhive.metastore.thrift.delete-files-on-drop=true\n```\n\n## Grant permissions\n\nBefore you set up Trino as a source, you must grant certain permissions on your Trino instance for RudderStack to access data from it.\n\nRun the SQL queries listed in the following sections in the **exact order** to grant these permissions:\n\n### Step 1: Assign read access to tables\n\nThis step gives RudderStack the necessary permissions to read the relevant table records in Trino.\n\nTo sync a table `sample_table` in `user_schema` for a user `test`, copy the below JSON in to your [access control config](https://trino.io/docs/current/security/file-system-access-control.html#configuration) JSON file:\n\n```\n{\n  \"tables\": [{\n    \"user\": \"test\",  // Replace with your RudderStack user name\n    \"catalog\": \"catalog_name \", // Replace with the catalog you wish to sync\n    \"schema\": \"user_schema \", \n    \"table\": \"sample_table \",\n    \"privileges\": [\"SELECT\"]\n  }]\n}\n```\n\n### Step 2: Create RudderStack schema and grant permissions\n\n```\nCREATE SCHEMA \"_rudderstack\"\n```\n\nTo add this schema to a particular location, run the following query:\n\n```\nCREATE SCHEMA \"_rudderstack\" WITH (location = \"s3://<your_location>/\")\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure to create the `_rudderstack` schema before syncing your data.\n\n### Step 3: Grant ownership to `_rudderstack` schema\n\nThe following grants RudderStack the necessary permissions to perform relevant actions on the tables in the `_rudderstack` schema:\n\n```\n{\n  \"catalogs\": [{\n    \"user\": \"test\",\n    \"catalog\": \"catalog_name \",\n    \"allow\": \"all\"\n  }],\n  \"schemas\": [{\n    \"user\": \"test\",\n    \"catalog\": \"catalog_name \",\n    \"schema\": \"_rudderstack \",\n    \"owner\": true\n  }],\n  \"tables\": [{\n    \"user\": \"test\",\n    \"catalog\": \"catalog_name \",\n    \"schema\": \"_rudderstack \",\n    \"privileges\": [\"SELECT\",\n      \"INSERT\",\n      \"DELETE\",\n      \"UPDATE\",\n      \"OWNERSHIP\"\n    ]\n  }]\n}\n```\n\n## Set up Trino source in RudderStack\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  On the **Connections** page, click **Add source**.\n3.  Under **Sources**, click **Reverse ETL** and select **Trino**.\n\n### Configure warehouse credentials\n\nYou can choose to proceed with your existing warehouse credentials if you have configured them in the RudderStack dashboard previously. Otherwise, click **Add new credentials** to add new credentials for your warehouse.\n\n*   **Host**: Enter the host name or IP address of your Trino coordinator server.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure to enter only the host name and not the complete URL. Otherwise, you will encounter an error.\n> \n> For example, if the URL is `https://trino-server.example.com`, host name should be `trino-server.example.com`.\n\n*   **Catalog Name**: Specify the catalog to use when RudderStack executes queries in Trino.\n*   **User**: Enter the user with relevant access to the above settings.\n*   **Password**: Enter the password for the above user.\n*   **Port**: Enter the port number of your Trino coordinator server. This is an optional setting.\n\nClick the **Verify** button on the top right. RudderStack will then [verify and validate your credentials](#faq). Once verified, click **Continue** to proceed.\n\n### Specify name and source type\n\nSpecify the source name and type in this step.\n\n*   **Source name**: Assign a name to uniquely identify the source in the RudderStack dashboard.\n*   **Select your source type**: RudderStack lets you set up a Reverse ETL source from a warehouse **Table**, **Model**, or **Audience**.\n\n| Source type | Description |\n| --- | --- |\n| Table | Use an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | Use custom SQL queries to fetch specific warehouse data and send them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | Filter data in your warehouse tables to create target customer lists and send them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\n#### **Use warehouse table as source**\n\nUnder **Select your source type**, choose **Table** and specify the below fields:\n\n*   **Schema**: Select the warehouse schema from the dropdown.\n*   **Table**: Choose the required table from which RudderStack syncs the data.\n*   **Primary key**: Select the column from the above table that uniquely identifies your records in the warehouse.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n[![Use table as source](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use model as source**\n\nUnder **Select your source type**, choose **Model** and click **Continue**.\n\nTo configure a model as source:\n\n1.  Enter an optional description and specify the custom SQL query in **Query** section.\n2.  Click **Run Query** to fetch the data preview.\n3.  Select the **Primary key** to use a column that uniquely identifies your warehouse records.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can set a primary key only after you run the SQL query successfully using the **Run Query** option.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` in SQL query of the model.\n\n[![Model configuration](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use audience as source**\n\nUnder **Select your source type**, choose **Audience** and follow these steps:\n\n1.  Configure your audience source by specifying the below fields:\n    \n    *   **Schema**: Select the warehouse schema from the dropdown.\n    *   **Table**: Choose the required table from which RudderStack syncs the data.\n    *   **Primary key**: Select the column from the above table that uniquely identify your records in the warehouse.\n\n[![Use audience as source](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n2.  Set your [audience conditions](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/#set-your-conditions).\n3.  Click **Preview** to see the resulting data. Then, click **Continue** to proceed.\n\n[![Audience configuration](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n### Review and complete setup\n\nTo make any changes to the warehouse credentials or source configuration, click the edit icon present next to those sections.\n\n[![Edit source configuration](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)\n\nReview your configuration and click **Create source** to complete the setup.\n\n## Connect destination\n\nYou can connect this source to an existing or new [destination](https://www.rudderstack.com/docs/destinations/overview/) to start using it. To connect to a destination later, click **Done** on the top right.\n\n[![Next steps](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)\n\nYou will then be redirected to the **Overview** page of the source where you get the option of connecting it to an existing or new destination.\n\n[![Add destination](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)\n\nSee [Set up Reverse ETL Connection](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/) section for more information.\n\n## Update source configuration and settings\n\nGo to the **Configuration** tab of your Reverse ETL source to update the configuration depending on your source type:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot change the source type on this page.\n\n[![Update source configuration](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)\n\nThe below table lists the options you can update:\n\n| Source type | Configurable options |\n| --- | --- |\n| Table | [Schema, Table, Primary key](#use-warehouse-table-as-source) |\n| Model | *   [Model settings](#use-model-as-source)<br>*   [Primary key](#use-model-as-source)<br><br>**Note**: You can set the primary key only after the SQL query runs successfully. |\n| Audience | *   [Schema, Table, Primary key](#use-audience-as-source)<br>*   [Audience conditions](#use-audience-as-source) |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> After updating the configuration, the next sync will be a full sync.\n\nGo to the **Settings** tab to:\n\n*   Get your source ID.\n*   Change your warehouse credentials.\n*   [Set up custom alerts](https://www.rudderstack.com/docs/data-governance/alerts/) for your Reverse ETL source.\n*   Delete the source permanently.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot delete a source that is connected to any destination.\n\n[![Edit source settings](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)\n\n## FAQ\n\n#### **Which Trino connectors are supported for the Trino source integration?**\n\nThe Trino source supports only the [Apache Hive connector](https://trino.io/docs/current/connector/hive.html) currently.\n\nTo use this connector, make sure to add the following [configuration](https://trino.io/docs/current/connector/hive.html#general-configuration) in your object store:\n\n```\nhive.allow-drop-table=true\nhive.metastore.thrift.delete-files-on-drop=true\n```\n\n#### **Which data types are supported for this integration?**\n\nThe Trino source supports all data types listed in the [Trino documentation](https://trino.io/docs/current/language/types.html) except the [Row data type](https://trino.io/docs/current/language/types.html#row).\n\n#### **What do the three validations under Verifying Credentials imply?**\n\nWhen setting up a Reverse ETL source, you will see the following three validations under the **Verifying Credentials** option once you proceed after entering the warehouse credentials:\n\n[![Validating credentials](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)\n\nThese options are explained below:\n\n*   **Verifying Connection**: This option indicates that RudderStack is trying to connect to the warehouse with the provided warehouse credentials.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, it means that one or more fields specified in the warehouse credentials are incorrect. Verify your credentials in this case.\n\n*   **Able to List Schema**: This option checks if RudderStack is able to fetch all schema details by using the provided credentials.\n*   **Able to Access RudderStack Schema**: This option implies that RudderStack is able to access the `_rudderstack` schema you have created by running all commands in the [User Permissions](#creating-the-rudderstack-schema-and-granting-permissions) section.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, verify if you have successfully created the `_rudderstack` schema and given RudderStack the required permissions to access it.\n\n#### **What is the difference between the Table, Model, and Audience options when creating a Reverse ETL source?**\n\nWhen creating a new Reverse ETL source, you are presented with the following options from which RudderStack syncs the data:\n\n| Source type | Description |\n| --- | --- |\n| Table | RudderStack uses an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | RudderStack uses custom SQL queries to fetch specific warehouse data and sends them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | RudderStack filters data in your warehouse tables to create target customer lists and sends them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Trino Reverse ETL Source | RudderStack Docs",
    "description": "Send data from Trino to your entire stack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/",
    "markdown": "# Set Up Reverse ETL Connection\n\nConnect your Reverse ETL sources to destinations in RudderStack.\n\n* * *\n\n*     6 minute read  \n    \n\nSetting up a Reverse ETL connection involves the following steps:\n\n1.  [Creating a Reverse ETL source](#add-source)\n2.  [Connecting it to a destination](#connect-destination)\n3.  [Specifying the data mappings](#specify-data-mappings)\n4.  [Defining a sync schedule](#schedule-syncs)\n5.  [Activating the connection](#activate-connection)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack supports 1:many Reverse ETL connections, meaning you can connect your Reverse ETL source to multiple destinations.\n> \n> Note the following:\n> \n> *   You can set up to 10 connections in the RudderStack Cloud [Free and Starter](https://rudderstack.com/pricing/) plans and unlimited connections in the [Growth and Enterprise](https://rudderstack.com/pricing/) plans.\n> *   Reverse ETL connections are source-driven. You must create a source first and then connect it to a destination.\n> *   You **cannot** connect multiple Reverse ETL sources to the same destination.\n\n## Add source\n\n1.  Sign in to your [RudderStack dashboard](https://app.rudderstack.com/) and click **\\+ Add source** in the default **Connections** view.\n\n[![Add source](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)\n\n2.  Under **Sources**, click **Reverse ETL** and select your warehouse source.\n\n[![Select source](https://www.rudderstack.com/docs/images/data-pipelines/select-source.webp)](https://www.rudderstack.com/docs/images/data-pipelines/select-source.webp)\n\n3.  Configure your source. See the [source-specific documentation](https://www.rudderstack.com/docs/sources/reverse-etl/#supported-reverse-etl-sources) for configuration details.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack requires some warehouse-specific permissions to sync data from it. These permissions are listed in the source documentation, for example, see [BigQuery permissions](https://www.rudderstack.com/docs/sources/reverse-etl/google-bigquery/#granting-permissions).\n> \n> Make sure to grant these permissions **before** you set up the source.\n\n## Connect destination\n\nOnce you have created a [Reverse ETL source](https://www.rudderstack.com/docs/sources/reverse-etl/), connect it to an existing or new RudderStack destination.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> RudderStack supports connecting a Reverse ETL source to multiple destinations.\n\nTo connect a destination:\n\n1.  Click **Use existing destination** or **Set up a new destination** depending on your requirement.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n\n[![Connect destination options](https://www.rudderstack.com/docs/images/retl-sources/connect-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/connect-destination.webp)\n\n2.  Enter the connection settings for the destination. See the [destination-specific documentation](https://www.rudderstack.com/docs/destinations/streaming-destinations/) for more details on these settings.\n\n## Specify data mappings\n\nRudderStack provides two options to map your warehouse columns to specific destination fields before syncing your data:\n\n*   [Map with Visualizer](https://www.rudderstack.com/docs/sources/reverse-etl/visual-data-mapper/)\n*   [Map with JSON](https://www.rudderstack.com/docs/sources/reverse-etl/json-data-mapping/)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack supports the **Map with Visualizer** option only for [selected destinations](https://www.rudderstack.com/docs/sources/reverse-etl/visual-data-mapper/#supported-destinations).\n> \n> Other destinations that do not support Visual Data Mapper have the **Map with JSON** option by default, with the **Map with Visualizer** option greyed out.\n\nThe steps to set the data mappings (using JSON) are listed below:\n\n1.  Select the **Sync mode** to specify how RudderStack syncs each record to the destination. RudderStack supports two [sync modes](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/):\n\n| Sync mode | Description |\n| --- | --- |\n| Upsert | In this mode, RudderStack inserts new records and updates the existing records in the destination while syncing the data. |\n| Mirror | In this mode, RudderStack ‘mirrors’ the source by keeping the destination data the same as the source data. It performs insertion, deletion, and updates to the records while syncing the data.<br><br>Note that:<br><br>*   Only [select destinations](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/#mirror-mode) support this mode.<br>*   RudderStack does not support `track` event type for this mode. |\n\n2.  Select the **Event Type** - RudderStack supports sending the synced data to your downstream destinations as `identify` or `track` events.\n\nIf you select `track` as the **Event Type**, you also need to set the event name that is sent to the downstream destination. This is because every `track` event requires a name. You can also set the column name as the event name by turning on the **Lookup event name by column** toggle and selecting the column from the dropdown:\n\n[![Schema tab options in RudderStack](https://www.rudderstack.com/docs/images/warehouse-actions-sources/event-name-table-track.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/event-name-table-track.webp)\n\n3.  Set at least one user identifier from `user_id` or `anonymous_id` in the **Choose user identifier** setting.\n\n[![Map with JSON feature](https://www.rudderstack.com/docs/images/data-pipelines/map-with-json-new.webp)](https://www.rudderstack.com/docs/images/data-pipelines/map-with-json-new.webp)\n\n4.  Preview the resulting data and make the necessary changes before proceeding.\n\n## Schedule syncs\n\nYou can configure the schedule settings and sync frequency at the connection level. This is because a source might be connected to multiple destinations and the sync interval and frequency might need to be configured differently for each connection.\n\nRudderStack determines how and when to run a sync based on the [sync schedule](https://www.rudderstack.com/docs/sources/reverse-etl/sync-schedule-settings/) you set for your Reverse ETL connection.\n\n| Schedule type | Description |\n| --- | --- |\n| Basic | Run syncs at a given time interval and specified time (in UTC). |\n| CRON | Run syncs based on a specified CRON expression (in UTC). |\n| Manual | Run syncs manually. |\n\n[![Sync schedule](https://www.rudderstack.com/docs/images/retl-sources/schedule-syncs.webp)](https://www.rudderstack.com/docs/images/retl-sources/schedule-syncs.webp)\n\n## Configure advanced settings\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This option is available only if you have set up a new destination.\n\nOnce you create a connection successfully, you can configure the optional advanced settings to receive the data correctly in your destination.\n\n[![Advanced destination configuration](https://www.rudderstack.com/docs/images/retl-sources/advanced-config-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/advanced-config-destination.webp)\n\n1.  Click **Configure your destination**.\n2.  Specify the advanced settings and click **Save**.\n\n## Activate connection\n\n1.  Activate the destination by turning on the toggle.\n2.  Turn on the connection to activate the connection.\n\n![Activate destination](https://www.rudderstack.com/docs/images/retl-sources/activate-destination.webp)\n\nYou will be redirected to the connections page.\n\n![Connections page](https://www.rudderstack.com/docs/images/retl-sources/connections-page.webp)\n\nRudderStack will send data to your destination as per the specified [sync frequency](#schedule-syncs). Click **Sync now** to manually trigger a new sync.\n\nClick **Turn on the connection** to activate the connection.\n\n![Activate connection](https://www.rudderstack.com/docs/images/retl-sources/activate-connection.webp)\n\nYou will be redirected to the connections page.\n\n![Connections page](https://www.rudderstack.com/docs/images/retl-sources/connections-page.webp)\n\nRudderStack will send data to your destination as per the specified [sync frequency](#schedule-syncs). Click **Sync now** to manually trigger a new sync.\n\n## Stop data syncs for connection\n\nGo to the connection page and turn off the connection toggle to stop data syncs for the connection.\n\nNote that the **Sync Now** button is greyed out and the connection status is **Paused** until you turn on the connection again.\n\n[![Turn off connection](https://www.rudderstack.com/docs/images/retl-sources/disable-connection.webp)](https://www.rudderstack.com/docs/images/retl-sources/disable-connection.webp)\n\n## Update mapping configuration\n\nGo to the **Schema** tab of your connection and click **Update** to change the mapping configuration and update your column selection.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The **Object** (for VDM mapping), **Sync mode**, **Event type**, and **User identifier** fields are not editable.\n\n[![Update connection configuration](https://www.rudderstack.com/docs/images/retl-sources/update-connection-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-connection-configuration.webp)\n\nClick **Save** to update and save the configuration.\n\n## Update connection settings\n\nGo to the **Settings** tab of your connection to:\n\n*   Get the **Connection ID**.\n*   Change the sync schedule and frequency.\n*   Delete the connection permanently.\n\n[![Update connection settings](https://www.rudderstack.com/docs/images/retl-sources/connection-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/connection-settings.webp)\n\n## View all connections for Reverse ETL source\n\nGo to the **Overview** tab of your Reverse ETL source. Here, you will see all the destinations connected to that source. Click the required destination or click **View** > **Connection details** to go to the connection’s page.\n\n[![Connection details](https://www.rudderstack.com/docs/images/retl-sources/connection-details.webp)](https://www.rudderstack.com/docs/images/retl-sources/connection-details.webp)\n\nRudderStack automatically redirects you to the **Syncs** tab where you can view the latest sync details or check past syncs.\n\n## View sync details\n\nGo to the **Syncs** tab to see detailed metrics on the latest sync. You can also view details of the past syncs (up to 1 month). These details include:\n\n| Metric | Details |\n| --- | --- |\n| Status | The sync status. It can be one of the following:<br><br>*   Aborted<br>*   Completed, with failures<br>*   Completed, no failures |\n| Sync mode | Defines how RudderStack syncs data to the destination. It can be one of the following:<br><br>*   Upsert<br>*   Mirror |\n| Sync type | Determines the scope of the sync. It can be one of the following:<br><br>*   Incremental: RudderStack syncs only the newly added data in the warehouse since the last sync.<br>*   Full: RudderStack syncs all the data irrespective of whether it was synced to the destination previously. |\n| Trigger | Determines how the sync was triggered. It can be one of the following:<br><br>*   Manual<br>*   Scheduled, as per the [sync schedule](#schedule-syncs) |\n| Sync start time | Determines when the sync was triggered. |\n| Duration | The sync duration. |\n\nYou can also see the following source and destination-specific metrics:\n\n*   Number of synced rows.\n*   Deltas (new records since last sync) with the number of records inserted, deleted, and updated.\n*   [Invalid records](#view-invalid-records) not synced to destination.\n\n*   Successfully synced records with the number of records inserted, deleted, and updated.\n*   Number of dropped records.\n*   Number of records that failed to sync.\n\n[![Sync details](https://www.rudderstack.com/docs/images/retl-sources/sync-details-1.webp)](https://www.rudderstack.com/docs/images/retl-sources/sync-details-1.webp)\n\n### View invalid records\n\nClick **View invalid records** and click a row to see all the invalid records that RudderStack did not sync to the destination.\n\nYou also see the error message and sample erroneous rows in this view.\n\n[![View invalid records](https://www.rudderstack.com/docs/images/retl-sources/invalid-records.webp)](https://www.rudderstack.com/docs/images/retl-sources/invalid-records.webp)\n\n### View sync graph\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This graph is only available for:\n> \n> *   The latest sync.\n> *   Syncs performed using [Upsert mode](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/#upsert-mode).\n\nRudderStack provides an intuitive visual graph detailing the records sent to the destination over time. The X-axis represents the time of the day and the Y-axis represents the number of records classified as:\n\n*   Successfully synced records\n*   Dropped records\n*   Records that failed to sync\n\n[![View sync graph](https://www.rudderstack.com/docs/images/retl-sources/sync-graph.webp)](https://www.rudderstack.com/docs/images/retl-sources/sync-graph.webp)\n\nSwitch to the **Retries** tab to get a graphical view of the retries over time. The X-axis represents the retry time of the day and the Y-axis represents the number of retry attempts.\n\n[![Sync retries graph](https://www.rudderstack.com/docs/images/retl-sources/sync-retries.webp)](https://www.rudderstack.com/docs/images/retl-sources/sync-retries.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Set Up Reverse ETL Connection | RudderStack Docs",
    "description": "Connect your Reverse ETL sources to destinations in RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/appsflyer/",
    "markdown": "# AppsFlyer source | RudderStack Docs\n\nIngest your event data from AppsFlyer into RudderStack.\n\n* * *\n\n*     2 minute read  \n    \n\n[AppsFlyer](https://www.appsflyer.com/) is an industry-leading mobile attribution and marketing analytics platform. It enables you to understand your customers better through intuitive dashboards, real-time data reports, and a unique deep linking technology.\n\nYou can send your AppsFlyer events by adding an endpoint that points to RudderStack and using AppsFlyer’s **Push API** option. This way, you can capture all relevant AppsFlyer events related to re-engagement, reattribution, in-app install events, etc., and send them to RudderStack.\n\nThis guide will help you set up AppsFlyer as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your AppsFlyer source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **AppsFlyer**.\n2.  Assign a name to your source and click **Continue**\\*.\n3.  Your AppsFlyer source is now configured. Note the source **Write key** required to configure the endpoint URL.\n\n[![AppsFlyer source write key](https://www.rudderstack.com/docs/images/event-stream-sources/appsflyer-source-write-key.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/appsflyer-source-write-key.webp)\n\n4.  Go to your AppsFlyer account. From the sidebar, go to **Integrations** > **API Access** > **Push API**:\n\n[![AppsFlyer dashboard](https://www.rudderstack.com/docs/images/event-stream-sources/appsflyer-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/appsflyer-3.webp)\n\n5.  Add the **Endpoint URL** pointing to RudderStack in the following format:\n\n```\n<DATA_PLANE_URL>/v1/webhook?writeKey=<WRITE_KEY>\n```\n\nFor more information on the data plane URL, refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure you add the source write key obtained in **Step 3** as a query parameter to the URL. This is required to prevent the webhook from failing for the lack of a valid write key.\n\nA sample URL is as shown:\n\n```\nhttps://hosted.rudderlabs.com/v1/webhook?writeKey=1bCenS7ynqHh8ETX8s5Crjh22J\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> It is highly recommended to validate the endpoint using the **Send Test** button.\n\n[![Endpoint configuration](https://www.rudderstack.com/docs/images/event-stream-sources/appcenter-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/appcenter-3.webp)\n\n6.  Finally, save the endpoint.\n\n## Event transformation\n\nThe AppsFlyer Push events are ingested into RudderStack after converting them into the RudderStack event format. For example, RudderStack converts the `customer_user_id` property set by AppsFlyer into `userId`.\n\nRudderStack populates the following properties from AppsFlyer event payload into the RudderStack event:\n\n| AppsFlyer Property | RudderStack Property |\n| --- | --- |\n| `customer_user_id` | `userId`, `context.traits.userId` |\n| `event_name` | `event` |\n| `event_time` | `timestamp`, `originalTimestamp` |\n| `ip` | `context.ip` |\n| `selected_timezone` | `context.timezone` |\n| `user_agent` | `context.userAgent` |\n| `bundle_id` | `context.app.namespace` |\n| `app_version` | `context.app.version` |\n| `app_name` | `context.app.name` |\n| `device_type` | `context.device.model` |\n| `wifi` | `context.network.wifi` |\n| `carrier` | `context.network.carrier` |\n| `platform` | `platform`, `context.os.name` |\n| `idfa` | `context.device.advertisingId` (for iOS) |\n| `android_id` | `context.device.advertisingId` (for Android) |\n| `appsflyer_id` | `context.externalId[0].value` |\n| `os_version` | `context.os.version` |\n| `city` | `traits.address.city`, `context.traits.address.city` |\n| `postal_code` | `traits.address.zip`, `context.traits.address.zip` |\n| `country_code` | `traits.address.country`, `context.traits.address.country` |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "AppsFlyer source | RudderStack Docs",
    "description": "Ingest your event data from AppsFlyer into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/get-started/rudderstack-open-source/data-plane-setup/docker/",
    "markdown": "# Docker | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "Docker | RudderStack Docs",
    "description": "Set up RudderStack on Docker.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/macos/",
    "markdown": "# macOS | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "macOS | RudderStack Docs",
    "description": "Use the RudderStack iOS SDK for macOS.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/reverse-etl/json-data-mapping/",
    "markdown": "# Data Mapping with JSON | RudderStack Docs\n\nSpecify data mappings for Reverse ETL connections via JSON.\n\n* * *\n\n*     3 minute read  \n    \n\nRudderStack provides the following options to map your warehouse columns to specific destination fields while importing the data:\n\n*   Map with JSON\n*   [Map with Visualizer](https://www.rudderstack.com/docs/sources/reverse-etl/visual-data-mapper/)\n\nThis guide lists the JSON mapping settings required to sync data from your warehouse sources to the specified destinations.\n\n## Mapping configuration\n\n*   **Sync mode**: Select the [sync mode](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/) from **Upsert** or **Mirror** that RudderStack uses to sync your data.\n*   **Event Type**: Select from the `identify` or `track` event type depending on how you want to send the event data to the downstream destinations.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack does not support `track` event type for **Mirror** mode.\n\nIf you select `track`, you also need to provide:\n\n*   **Event Name**: Enter the event name which should be sent for all events to the downstream destinations:\n\n[![Schema tab options in RudderStack](https://www.rudderstack.com/docs/images/warehouse-actions-sources/event-name-track.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/event-name-track.webp)\n\nYou can also send different event names by enabling the **lookup event name by column** setting and specifying the column name which should be used to set the event name in the **Event Name** field:\n\n[![Schema tab options in RudderStack](https://www.rudderstack.com/docs/images/warehouse-actions-sources/event-name-table-track.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/event-name-table-track.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> See [Syncing Events](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/syncing-events/) for more information on sending event data as `identify` or `track` events.\n\n*   **Choose user identifier**: Choose **at least** one user identifier from `user_id` and `anonymous_id` from the dropdown.\n\nYou can preview the data snippet which RudderStack sends to the destination. All the columns from the table are selected by default. However, you can choose to retain specific columns by searching and selecting or deselecting them.\n\nYou can also search the columns by a keyword and edit the **JSON Trait Key** column. RudderStack automatically generates the resulting preview on the right:\n\n[![JSON data preview](https://www.rudderstack.com/docs/images/retl-sources/json-data-preview.webp)](https://www.rudderstack.com/docs/images/retl-sources/json-data-preview.webp)\n\nThe resulting JSON payload carries the `user_id` and `anonymous_id` from the columns selected in the **Choose user identifier** section. Moreover, the traits are used from the columns selected in the **Column** section.\n\n### Add Constant\n\nYou can also use the **Add Constant** option to add a constant key-value pair which is always sent in the JSON payload:\n\n[![Add constant](https://www.rudderstack.com/docs/images/retl-sources/add-constant.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-constant.webp)\n\nThe new constant will appear in the table and also in the JSON preview inside the traits, as shown:\n\n[![Updating table selection](https://www.rudderstack.com/docs/images/warehouse-actions-sources/add-constant-in-json.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/add-constant-in-json.webp)\n\nYou can also use the dot notation to define a constant, as shown:\n\n[![Updating table selection](https://www.rudderstack.com/docs/images/warehouse-actions-sources/dot-notation-constant.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/dot-notation-constant.webp)\n\nOnce you have finalized the configuration, click **Save**.\n\n## Update mapping configuration\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note the following:\n> \n> *   You can update your mapping configuration irrespective of whether the connection is turned on or off.\n> *   While updating the mapping configuration, you **cannot** change the **Sync mode**, **Event type**, and **User identifier** fields. You will have to delete the destination and connect a new destination from scratch to do so.\n\n1.  Go to the **Schema** tab of your Reverse ETL connection page.\n2.  Update the mappings as required by selecting/deselecting the required fields.\n3.  Click **Save** to update the configuration.\n\n[![Update JSON mappings](https://www.rudderstack.com/docs/images/retl-sources/update-json-mapping.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-json-mapping.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Data Mapping with JSON | RudderStack Docs",
    "description": "Specify data mappings for Reverse ETL connections via JSON.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/tvos/",
    "markdown": "# tvOS | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "tvOS | RudderStack Docs",
    "description": "Use the RudderStack iOS SDK for tvOS.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/get-started/rudderstack-open-source/data-plane-setup/kubernetes/",
    "markdown": "# Kubernetes | RudderStack Docs\n\nSet up RudderStack on your Kubernetes cluster.\n\n* * *\n\n*     3 minute read  \n    \n\nUse the [Helm](https://helm.sh/) package manager to deploy the RudderStack data plane on your Kubernetes cluster. You can find the Helm chart in the [RudderStack GitHub repository](https://github.com/rudderlabs/rudderstack-helm).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you plan to use RudderStack in production, using the Kubernetes Helm charts is strongly recommended.\n\n## Prerequisites\n\n*   Install [Kubectl](https://kubernetes.io/docs/tasks/tools/) and connect to your Kubernetes cluster.\n*   Install [Helm](https://helm.sh/).\n\n## RudderStack Open Source\n\nFollow these steps to set up the data plane if you’re using [RudderStack Open Source](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-setup/#rudderstack-open-source):\n\n1.  Run the following command to clone the [RudderStack Helm repository](https://github.com/rudderlabs/rudderstack-helm) containing the RudderStack Helm chart:\n\n```\ngit clone git@github.com:rudderlabs/rudderstack-helm.git\n```\n\n2.  Navigate to the folder containing the Helm chart:\n\n3.  To install the chart with the release name `my-release`, run the following command after replacing `<your_workspace_token>` with your [workspace token](#workspace-token).\n\n```\nhelm install my-release ./ --set rudderWorkspaceToken=\"<your_workspace_token>\"\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The above command deploys RudderStack on your default Kubernetes cluster configured with `kubectl`. See [Configuration](#configuration) for more information on the configurable parameters during the deployment.\n\n#### Workspace token\n\nThe workspace token is a unique identifier of your RudderStack workspace. RudderStack uses this token to automatically read your source-destination configurations when you set up and run the data plane.\n\n1.  Log in to your RudderStack Open Source dashboard.\n2.  Copy your workspace token from **Settings** > **Workspace**:\n\n[![Workspace Token](https://www.rudderstack.com/docs/images/rs-cloud/workspace-token.webp)](https://www.rudderstack.com/docs/images/rs-cloud/workspace-token.webp)\n\nFor more details on RudderStack Open Source, see [Control plane setup](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-setup/#rudderstack-open-source).\n\n## Self-hosted control plane\n\nIf you are self-hosting your control plane using [Control Plane Lite](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/), see [Kubernetes instructions](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/#kubernetes) to set up the data plane.\n\n## Verify installation\n\nTo verify if the setup is successful, follow the steps listed in [Verify installation](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/sending-test-events/).\n\n## Upgrade Helm chart\n\nThe following sections will help you upgrade your Helm chart depending on your RudderStack control plane setup.\n\n#### RudderStack Open Source\n\nUpdate the configuration or version of the images and run the following command:\n\n```\nhelm upgrade my-release ./ --set rudderWorkspaceToken=\"<your_workspace_token>\"\n```\n\nReplace `<your_workspace_token>` with the workspace token copied in [Step 2](#rudderstack-open-source).\n\n#### Self-hosted control plane\n\nUpdate the configuration or version of the images and run the following command:\n\n```\nhelm upgrade my-release ./ --set backend.controlPlaneJSON=true\n```\n\n## Uninstall deployment\n\nTo uninstall or delete the deployment named `my-release`, run the following command:\n\n```\nhelm uninstall my-release\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This command also removes all components created by the chart.\n\n## Configuration\n\nThe following table lists the configurable parameters of the RudderStack Helm chart and their default values:\n\n| Parameter | Description | Default value |\n| --- | --- | --- |\n| `rudderWorkspaceToken` | Your workspace token obtained from the RudderStack Open Source dashboard. | \\-  |\n| `backend.image.repository` | Container image repository for the backend. | `rudderlabs/rudder-server` |\n| `backend.image.version` | Container image tag for the backend. Check the [available versions](https://hub.docker.com/r/rudderlabs/rudder-server/tags) | \\-  |\n| `backend.image.pullPolicy` | Container image pull policy for the backend image. | `Always` |\n| `transformer.image.repository` | Container image repository for the transformer. | `rudderlabs/transformer` |\n| `transformer.image.version` | Container image tag for the transformer. Check the [available versions](https://hub.docker.com/r/rudderlabs/rudder-transformer/tags) | \\-  |\n| `transformer.image.imagePullPolicy` | Container image pull policy for the transformer image. | `Always` |\n| `backend.extraEnvVars` | Extra environments variables to be used by the backend in the deployments | See the `values.yaml` file. |\n| `backend.controlPlaneJSON` | If you have self-hosted the control plane using Control Plane Lite, set this to `true`.<br><br>The data plane then reads the configuration from the exported `workspaceConfig.json` file. | `false` |\n\nYou can change each of these parameters in `values.yaml` and specify each parameter using the `--set key=value[,key=value]` argument while running the `helm install` command:\n\n```\nhelm install --name my-release \\\n  --set backend.image.version=v0.1.6 \\\n  ./\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   You can edit the data plane-specific configuration in the [`config.yaml`](https://github.com/rudderlabs/rudder-server/blob/master/config/config.yaml) file.\n> *   You can configure the PostgreSQL-specific configuration in the `pg_hba.conf` and `postgresql.conf` files.\n\n## Components\n\nInstalling this Helm chart deploy the following pods and containers in the configured cluster:\n\n**POD - {Release name}-rudderstack-0 :**\n\n*   `rudderstack-backend`\n*   `rudderstack-telegraf-sidecar`\n\n**POD - {Release name}-rudderstack-postgresql-0 :**\n\n*   `{Release name}-rudderstack-postgresql`\n\n**POD - {Release name}-rudderstack-transformer-xxxxxxxxxx-xxxxx:**\n\n*   `transformer`\n\n## Setup instructions for GCP\n\nIf you plan to use the following destinations:\n\n*   [Google Cloud Storage](https://www.rudderstack.com/docs/destinations/streaming-destinations/google-cloud-storage/)\n*   [Google BigQuery](https://www.rudderstack.com/docs/destinations/warehouse-destinations/bigquery/)\n\nMake sure to replace the contents of the file [rudder-google-application-credentials.json](https://github.com/rudderlabs/rudderstack-helm/blob/master/rudder-google-application-credentials.json) in the repository with the details of your Google service account.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Kubernetes | RudderStack Docs",
    "description": "Set up RudderStack on your Kubernetes cluster.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/auth0/",
    "markdown": "# Auth0 | RudderStack Docs\n\nIngest your event data from Auth0 into RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Auth0](https://auth0.com/) is a popular solution used by many companies to add authentication and authorization services to their applications.\n\nYou can send your Auth0 authentication and user behavior-related events by adding a custom webhook that points to RudderStack.\n\nThis guide will help you set up Auth0 as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Auth0 source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Auth0**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Auth0 source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![Auth0 source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/auth0-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/auth0-webhook-url.webp)\n\n4.  Next, log in to your [Auth0 dashboard](https://manage.auth0.com/).\n5.  Go to **Monitoring** > **Streams** > **Create Log Stream** > **Custom Webhook**:\n\n[![Auth0 source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/auth0-dashboard-custom-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/auth0-dashboard-custom-webhook.webp)\n\n6.  Name your custom webhook. In the **Payload URL** field, enter the webhook URL obtained in Step 3.\n\n[![Auth0 custom webhook settings](https://www.rudderstack.com/docs/images/event-stream-sources/auth0-webhook-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/auth0-webhook-settings.webp)\n\n7.  Configure the other webhook settings as required.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can also filter the events sent to your custom webhook by category. For more information on these categories, refer to the [Auth0 documentation](https://auth0.com/docs/customize/log-streams/event-filters).\n\n8.  Click **Save** to save the custom webhook.\n\n## Event transformation\n\nRudderStack ingests Auth0 events as [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/), [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/), and [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) calls.\n\nRudderStack converts the Auth0 payload into an `identify` event if the Auth0 payload contains the event `type` as `ss`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack automatically generates an `anonymousId` for all the ingested Auth0 events.\n\nThe sample payload from Auth0 containing the event `type` as `ss`:\n\n```\n{\n  \"log_id\": \"90020221031055712103169676686005480714681762668315934738\",\n  \"data\": {\n    \"date\": \"2022-10-31T05:57:06.859Z\",\n    \"type\": \"ss\",\n    \"description\": \"\",\n    \"connection\": \"Username-Password-Authentication\",\n    \"connection_id\": \"con_djwCjiwyID0vZy1S\",\n    \"client_id\": \"vQcJNDTxsM1W72eHFonRJdzyOvawlwIt\",\n    \"client_name\": \"All Applications\",\n    \"ip\": \"35.166.202.113\",\n    \"user_agent\": \"unknown\",\n    \"user_id\": \"auth0|*****\", \n    \"user_name\": \"alex@example.com\",\n    \"strategy\": \"auth0\",\n    \"strategy_type\": \"database\",\n    \"log_id\": \"90020221031055712103169676686005480714681762668315934738\"\n  }\n}\n```\n\nThe sample payload after RudderStack transforms it into an `identify` event:\n\n```\n{\n  \"context\": {\n    \"integration\": {\n      \"name\": \"Auth0\"\n    },\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"request_ip\": \"35.166.202.113\",\n    \"traits\": {\n      \"userId\": \"auth0|*****\", \n      \"user_name\": \"alex@example.com\"\n    },\n    \"userAgent\": \"unknown\"\n  },\n  \"integrations\": {\n    \"Auth0\": false\n  },\n  \"messageId\": \"782d2e9b-4143-4798-b9dc-8cc55e4deed9\",\n  \"originalTimestamp\": \"2022-10-31T05:57:06.859Z\",\n  \"properties\": {\n    \"client_id\": \"vQcJNDTxsM1W72eHFonRJdzyOvawlwIt\",\n    \"client_name\": \"All Applications\",\n    \"description\": \"\",\n    \"log_id\": \"90020221031055712103169676686005480714681762668315934738\"\n  },\n  \"rudderId\": \"d3cedaf9-dc50-4602-8ff2-85026d348f69\",\n  \"sentAt\": \"2022-10-31T05:57:06.859Z\",\n  \"traits\": {\n    \"connection\": \"Username-Password-Authentication\",\n    \"connection_id\": \"con_djwCjiwyID0vZy1S\"\n  },\n  \"type\": \"identify\",\n  \"userId\": \"auth0|*****\"\n}\n```\n\nRudderStack converts the Auth0 payload into a `group` event if the Auth0 payload contains the `description` as `Add members to an organization`.\n\nThe sample payload from Auth0 containing the event `description` as `Add members to an organization`:\n\n```\n{\n  \"log_id\": \"90020221031061004280169676882609459981150114445973782546\",\n  \"data\": {\n    \"date\": \"2022-10-31T06:09:59.135Z\",\n    \"type\": \"sapi\",\n    \"description\": \"Add members to an organization\",\n    \"client_id\": \"vQcJNDTxsM1W72eHFonRJdzyOvawlwIt\",\n    \"client_name\": \"\",\n    \"ip\": \"35.167.74.121\",\n    \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"details\": {\n      \"request\": {\n        \"path\": \"/api/v2/organizations/org_eoe8p2atZ7furBxg/members\"\n      }\n    },\n    \"user_id\": \"google-oauth2|123456\",\n    \"log_id\": \"90020221031061004280169676882609459981150114445973782546\"\n  }\n}\n```\n\nThe sample payload after RudderStack transforms it into a `group` event:\n\n```\n{\n  \"context\": {\n    \"integration\": {\n      \"name\": \"Auth0\"\n    },\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"request_ip\": \"35.167.74.121\",\n    \"traits\": {\n      \"userId\": \"google-oauth2|123456\" \n    },\n    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\"\n  },\n  \"groupId\": \"org_eoe8p2atZ7furBxg\",\n  \"integrations\": {\n    \"Auth0\": false\n  },\n  \"messageId\": \"1bc7876a-7c9d-4c0a-a1a9-179b804135f5\",\n  \"originalTimestamp\": \"2022-10-31T06:09:59.135Z\",\n  \"properties\": {\n    \"client_id\": \"vQcJNDTxsM1W72eHFonRJdzyOvawlwIt\",\n    \"client_name\": \"\",\n    \"description\": \"Add members to an organization\",\n    \"details\": {\n      \"request\": {\n        \"path\": \"/api/v2/organizations/org_eoe8p2atZ7furBxg/members\"\n      }\n    },\n    \"log_id\": \"90020221031061004280169676882609459981150114445973782546\"\n  },\n  \"rudderId\": \"414ca53a-7f7e-4ec8-8d62-3c5cfcf15f91\",\n  \"sentAt\": \"2022-10-31T06:09:59.135Z\",\n  \"type\": \"group\",\n  \"userId\": \"google-oauth2|123456\"\n}\n```\n\nRudderStack converts the rest of the events as `track` events.\n\nThe sample payload from Auth0:\n\n```\n{\n  \"log_id\": \"90020221031061530247169676961198100736838335677367058450\",\n  \"data\": {\n    \"date\": \"2022-10-31T06:15:25.196Z\",\n    \"type\": \"gd_tenant_update\",\n    \"description\": \"Guardian - Updates tenant settings\",\n    \"ip\": \"35.160.3.103\",\n    \"user_id\": \"google-oauth2|123456\",\n    \"log_id\": \"90020221031061530247169676961198100736838335677367058450\"\n  }\n}\n```\n\nThe sample payload after RudderStack transforms it into a `track` event:\n\n```\n{\n  \"context\": {\n    \"integration\": {\n      \"name\": \"Auth0\"\n    },\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"request_ip\": \"35.160.3.103\",\n    \"traits\": {\n      \"userId\": \"google-oauth2|123456\" \n    }\n  },\n  \"event\": \"Guardian tenant update\",\n  \"integrations\": {\n    \"Auth0\": false\n  },\n  \"messageId\": \"b7e0134b-3cc9-418d-803c-1fb72139f572\",\n  \"originalTimestamp\": \"2022-10-31T06:15:25.196Z\",\n  \"properties\": {\n    \"description\": \"Guardian - Updates tenant settings\",\n    \"log_id\": \"90020221031061530247169676961198100736838335677367058450\"\n  },\n  \"rudderId\": \"414ca53a-7f7e-4ec8-8d62-3c5cfcf15f91\",\n  \"sentAt\": \"2022-10-31T06:15:25.196Z\",\n  \"type\": \"track\",\n  \"userId\": \"google-oauth2|123456\"\n}\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack ingests the events related to adding members to an organization as `group` calls and the signup-related events as `identify` calls. All the other events are ingested as `track` calls.\n\nRudderStack maps the following properties from the Auth0 event payload to RudderStack properties for all `identify`, `track`, and `group` events:\n\n| **Auth0 Property** | **RudderStack Property** |\n| --- | --- |\n| `auth0_client` | `properties.auth0_client` |\n| `client_id` | `properties.client_id` |\n| `client_name` | `properties.client_name` |\n| `connection` | `traits.connection` |\n| `connection_id` | `traits.connection_id` |\n| `date` | `originalTimestamp`  <br>`sentAt` |\n| `description` | `properties.description` |\n| `details` | `properties.details` |\n| `details.auth.user.email` | `context.traits.email` |\n| `details.auth.user.name` | `context.traits.name` |\n| `log_id` | `properties.log_id` |\n| `isMobile` | `properties.is_mobile` |\n| `ip` | `context.request_ip` |\n| `user_name` | `context.traits.user_name` |\n| `user_agent` | `context.userAgent` |\n| `user_id` | `userId`  <br>`context.traits.userId` |\n| `type` | `source_type` |\n\n## Debugging\n\n### Events not flowing\n\nIf you are unable to see any events flowing from the Auth0 API webhooks to RudderStack, you can troubleshoot the issue by viewing the API webhooks logs. To do so, go to your Auth0 dashboard and navigate to **Monitoring** > **Logs**.\n\nRefer to the [Auth0 documentation](https://auth0.com/docs/customize/log-streams/custom-log-streams#troubleshoot-webhooks) for more information on troubleshooting your webhook.\n\n### Update `userId` format\n\nUse the [Clean Auth0 `userId` transformation template](https://www.rudderstack.com/docs/transformations/templates/#clean-auth0-userid) to update your `userId` format.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Auth0 | RudderStack Docs",
    "description": "Ingest your event data from Auth0 into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/satismeter/",
    "markdown": "# SatisMeter source | RudderStack Docs\n\nIngest your event data from SatisMeter into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[SatisMeter](https://www.satismeter.com/) is a customer feedback collection tool. It helps you derive real-time insights on customer satisfaction and monitor your product’s performance.\n\nThis guide will help you set up SatisMeter as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your SatisMeter source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **SatisMeter**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your SatisMeter source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![SatisMeter source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/satismeter-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/satismeter-webhook.webp)\n\n4.  Log into your [SatisMeter account](https://app.satismeter.com/login).\n5.  From the left sidebar, go to **Settings** > **Integrations** > **Webhooks** and enter the webhook URL:\n\n[![SatisMeter source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/satismeter-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/satismeter-webhook-url.webp)\n\nRefer to the [SatisMeter documentation](https://support.satismeter.com/hc/en-us/articles/6980495785107-Webhooks) for more information on configuring webhooks.\n\n6.  Finally, click **Save Changes**.\n\n## Event transformation\n\nRudderStack ingests the SatisMeter events after converting them into the RudderStack event format. It also maps the following properties from the SatisMeter event payload to the RudderStack properties:\n\n| SatisMeter property | RudderStack property |\n| --- | --- |\n| `traits` | `context.traits` |\n| `response.user.userId` | `userId` |\n| `response.user.id` | `anonymousId` |\n| `response.answers` | `properties.answers` |\n| `response.pending` | `properties.surveyPending` |\n| `response.dismissed` | `properties.surveyDismissed` |\n| `response.created` | `properties.receivedAt` |\n| `campaign` | `context.campaign` |\n| `event` | `survey${event}` |\n| `response.category` | `properties.category` |\n| `response.location` | `context.location` |\n| `response.user.deleted` | `context.traits.userDeleted` |\n| `response.user.groups` | `traits.groups` |\n| `response.device` | `context.device` |\n| `response.language` | `context.locale` |\n| `response.referrer` | `context.page.referrer` |\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from SatisMeter source and creates the resulting payload.\n\nA sample payload sent by SatisMeter is shown below:\n\n```\n{\n  \"response\": {\n    \"id\": \"63767499ca6fb1b7c988d5bb\",\n    \"created\": \"2022-11-17T17:51:21.764Z\",\n    \"rating\": 5,\n    \"feedback\": \"Many things to improve\",\n    \"dismissed\": false,\n    \"pending\": false,\n    \"answers\": [{\n      \"label\": \"How likely are you to recommend us to your friends and colleagues?\",\n      \"id\": \"7ddb22b0-64a8-11ed-a4c7-b3bed73771cd\",\n      \"value\": 5,\n      \"name\": \"SM_rating\",\n      \"type\": \"scale\",\n      \"metric\": \"nps\"\n    }],\n    \"category\": \"detractor\",\n    \"score\": -100,\n    \"user\": {\n      \"id\": \"63766fbb7ac7b72676145338\",\n      \"name\": \"Alex Keener\",\n      \"email\": \"alex@example.com\",\n      \"userId\": \"No response\",\n      \"deleted\": false,\n      \"groups\": {\n        \"group1\": \"groupId\"\n      },\n      \"traits\": {\n        \"createdAt\": \"2022-10-15T05:41:06.016Z\",\n        \"custom\": {\n          \"key1\": \"v1\",\n          \"key2\": \"V2\"\n        },\n        \"email\": \"alex@example.com\",\n        \"name\": \"Alex Keener\"\n      }\n    },\n    \"device\": {\n      \"os\": \"macOS\",\n      \"type\": \"desktop\"\n    },\n    \"location\": {\n      \"country\": \"IN\",\n      \"countryName\": \"India\",\n      \"region\": \"\",\n      \"city\": \"\",\n      \"short\": \"India\",\n      \"long\": \"India\"\n    },\n    \"referrer\": \"http://127.0.0.1:5500/testSm.html\",\n    \"method\": \"In-app\",\n    \"language\": \"en\",\n    \"project\": \"6372247a764986ebee62bf66\",\n    \"campaign\": \"6373271b764986ebee62bfca\"\n  },\n  \"traits\": {\n    \"createdAt\": \"2022-10-15T05:41:06.016Z\",\n    \"custom\": {\n      \"key1\": \"v1\",\n      \"key2\": \"V2\"\n    },\n    \"email\": \"alex@example.com\",\n    \"name\": \"Alex Keener\"\n  },\n  \"campaign\": {\n    \"id\": \"6373271b764986ebee62bfca\",\n    \"name\": \"NPS Survey\"\n  },\n  \"event\": \"completed\"\n}\n```\n\nRudderStack transforms the above payload into the following [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) payload:\n\n```\n{\n  \"event\": \"Survey completed\",\n  \"anonymousId\": \"63766fbb7ac7b72676145338\",\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"traits\": {\n      \"createdAt\": \"2022-10-15T05:41:06.016Z\",\n      \"custom\": {\n        \"key1\": \"v1\",\n        \"key2\": \"V2\"\n      },\n      \"email\": \"alex@example.com\",\n      \"name\": \"Alex Keener\"\n      \"userDeleted\": false\n    },\n    \"locale\": \"en\",\n    \"campaign\": {\n      \"id\": \"6373271b764986ebee62bfca\",\n      \"name\": \"NPS Survey\"\n    },\n    \"integration\": {\n      \"name\": \"SATISMETER\"\n    },\n    \"location\": {\n      \"country\": \"IN\",\n      \"countryName\": \"India\",\n      \"short\": \"India\",\n      \"long\": \"India\"\n    },\n    \"device\": {\n      \"os\": \"macOS\",\n      \"type\": \"desktop\"\n    },\n    \"page\": {\n      \"referrer\": \"http://127.0.0.1:5500/testSm.html\"\n    }\n  },\n  \"integrations\": {\n    \"SATISMETER\": false\n  },\n  \"type\": \"track\",\n  \"traits\": {\n    \"groups\": {\n      \"group1\": \"groupId\"\n    }\n  },\n  \"userId\": \"No response\",\n  \"properties\": {\n    \"category\": \"detractor\",\n    \"answers\": [{\n        \"label\": \"How likely are you to recommend us to your friends and colleagues?\",\n        \"id\": \"7ddb22b0-64a8-11ed-a4c7-b3bed73771cd\",\n        \"value\": 5,\n        \"name\": \"SM_rating\",\n        \"type\": \"scale\",\n        \"metric\": \"nps\"\n      }\n\n    ],\n    \"surveyDismissed\": false,\n    \"surveyPending\": false,\n    \"receivedAt\": \"2022-11-17T17:51:21.764Z\"\n  }\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "SatisMeter source | RudderStack Docs",
    "description": "Ingest your event data from SatisMeter into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/watchos/",
    "markdown": "# watchOS | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "watchOS | RudderStack Docs",
    "description": "Use the RudderStack iOS SDK for watchOS.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/revenuecat/",
    "markdown": "# RevenueCat Source | RudderStack Docs\n\nIngest your event data from RevenueCat into RudderStack.\n\n[RevenueCat](https://www.revenuecat.com/) is an in-app subscription platform that lets you analyze and grow your cross-platform app subscriptions.\n\nThis guide will help you set up RevenueCat as a source in RudderStack.\n\nFollow these steps to set up your RevenueCat source in the RudderStack dashboard:\n\nRudderStack ingests the events from RevenueCat as [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) events after converting them into the appropriate event format.\n\nRudderStack maps the following RevenueCat properties from the event payload to the RudderStack fields:\n\nA sample input payload ingested by RudderStack and the corresponding RudderStack-transformed `track` event is shown below:\n\n```\n{\n  \"api_version\": \"1.0\",\n  \"event\": {\n    \"aliases\": [\n      \"f8e14f51-0c76-49ba-8d67-c229f1875dd9\",\n      \"389ad6dd-bb40-4c03-9471-1353da2d55ec\"\n    ],\n    \"app_user_id\": \"f8e14f51-0c76-49ba-8d67-c229f1875dd9\",\n    \"commission_percentage\": null,\n    \"country_code\": \"US\",\n    \"currency\": null,\n    \"entitlement_id\": null,\n    \"entitlement_ids\": null,\n    \"environment\": \"SANDBOX\",\n    \"event_timestamp_ms\": 1698617217232,\n    \"expiration_at_ms\": 1698624417232,\n    \"id\": \"8CF0CD6C-CAF3-41FB-968A-661938235AF0\",\n    \"is_family_share\": null,\n    \"offer_code\": null,\n    \"original_app_user_id\": \"f8e14f51-0c76-49ba-8d67-c229f1875dd9\",\n    \"original_transaction_id\": null,\n    \"period_type\": \"NORMAL\",\n    \"presented_offering_id\": null,\n    \"price\": null,\n    \"price_in_purchased_currency\": null,\n    \"product_id\": \"test_product\",\n    \"purchased_at_ms\": 1698617217232,\n    \"store\": \"APP_STORE\",\n    \"subscriber_attributes\": {\n      \"$displayName\": {\n        \"updated_at_ms\": 1698617217232,\n        \"value\": \"Alex Keener\"\n      },\n      \"$email\": {\n        \"updated_at_ms\": 1698617217232,\n        \"value\": \"alex@example.com\"\n      },\n      \"$phoneNumber\": {\n        \"updated_at_ms\": 1698617217232,\n        \"value\": \"+19795551234\"\n      },\n      \"my_custom_attribute_1\": {\n        \"updated_at_ms\": 1698617217232,\n        \"value\": \"catnip\"\n      }\n    },\n    \"takehome_percentage\": null,\n    \"tax_percentage\": null,\n    \"transaction_id\": null,\n    \"type\": \"TEST\"\n  }\n}\n```\n\n```\n{\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"integration\": {\n      \"name\": \"RevenueCat\"\n    },\n    \"externalId\": [\n      {\n        \"type\": \"revenuecatAppUserId\",\n        \"id\": \"f8e14f51-0c76-49ba-8d67-c229f1875dd9\"\n      }\n    ]\n  },\n  \"integrations\": {\n    \"RevenueCat\": false\n  },\n  \"properties\": {\n    \"aliases\": [\n      \"f8e14f51-0c76-49ba-8d67-c229f1875dd9\",\n      \"389ad6dd-bb40-4c03-9471-1353da2d55ec\"\n    ],\n    \"appUserId\": \"f8e14f51-0c76-49ba-8d67-c229f1875dd9\",\n    \"commissionPercentage\": null,\n    \"countryCode\": \"US\",\n    \"currency\": null,\n    \"entitlementId\": null,\n    \"entitlementIds\": null,\n    \"environment\": \"SANDBOX\",\n    \"eventTimestampMs\": 1698617217232,\n    \"expirationAtMs\": 1698624417232,\n    \"id\": \"8CF0CD6C-CAF3-41FB-968A-661938235AF0\",\n    \"isFamilyShare\": null,\n    \"offerCode\": null,\n    \"originalAppUserId\": \"f8e14f51-0c76-49ba-8d67-c229f1875dd9\",\n    \"originalTransactionId\": null,\n    \"periodType\": \"NORMAL\",\n    \"presentedOfferingId\": null,\n    \"price\": null,\n    \"priceInPurchasedCurrency\": null,\n    \"productId\": \"test_product\",\n    \"purchasedAtMs\": 1698617217232,\n    \"store\": \"APP_STORE\",\n    \"subscriberAttributes\": {\n      \"$displayName\": {\n        \"updated_at_ms\": 1698617217232,\n        \"value\": \"Alex Keener\"\n      },\n      \"$email\": {\n        \"updated_at_ms\": 1698617217232,\n        \"value\": \"alex@example.com\"\n      },\n      \"$phoneNumber\": {\n        \"updated_at_ms\": 1698617217232,\n        \"value\": \"+19795551234\"\n      },\n      \"my_custom_attribute_1\": {\n        \"updated_at_ms\": 1698617217232,\n        \"value\": \"catnip\"\n      }\n    },\n    \"takehomePercentage\": null,\n    \"taxPercentage\": null,\n    \"transactionId\": null,\n    \"type\": \"TEST\"\n  },\n  \"type\": \"track\",\n  \"event\": \"TEST\",\n  \"messageId\": \"8CF0CD6C-CAF3-41FB-968A-661938235AF0\",\n  \"originalTimestamp\": \"2023-10-29T22:06:57.232Z\",\n  \"sentAt\": \"2023-10-29T22:06:57.232Z\"\n}\n```",
    "title": "RevenueCat Source | RudderStack Docs",
    "description": "Ingest your event data from RevenueCat into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/braze-currents/",
    "markdown": "# Braze source | RudderStack Docs\n\nIngest your event data from Braze into RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Braze](https://www.braze.com/) is a customer engagement platform that helps you better understand your customers’ in-app behavior and use the insights to improve your users’ app experience.\n\nYou can send your Braze events to RudderStack by leveraging [Braze Currents](https://www.braze.com/docs/user_guide/data_and_analytics/braze_currents/).\n\nThis guide will help you set up Braze as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Braze source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Braze**.\n2.  Assign a name to your source and click **Continue**.\n3.  The Braze source is now configured. Copy the webhook URL containing the write key - you can find the URL in the **Settings** tab of your Braze source. You will need this URL in the next step.\n\n[![Braze webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/braze-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/braze-webhook-url.webp)\n\n4.  In your [Braze dashboard](https://dashboard.braze.com/sign_in), go to **Currents** > **\\+ Create Currents** > **RudderStack Export**.\n5.  Enter an integration name, contact email, RudderStack webhook URL (in the **Key** field), and your RudderStack region.\n6.  Select the events you would like to export and click **Launch Current**.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Currents is available as a self-serve product to any user with an entitlement or license. If you do not have a license, reach out to your Braze account team to get one.\n\n## Supported events and properties\n\nBraze uses RudderStack’s [Event Streams](https://www.rudderstack.com/docs/sources/event-streams/) functionality to send events to RudderStack. These events can then be transformed and routed to your preferred destinations, including your data warehouse.\n\nThe following table lists all Braze events supported by RudderStack:\n\n| Event name | Event description |\n| --- | --- |\n| Application Uninstalled | The user uninstalled the application. |\n| Campaign Converted | The user performed the primary conversion events for a Campaign within its conversion window. |\n| Canvas Converted | The user performed the primary conversion event for a Canvas within its conversion window. |\n| Canvas Entered | The user was entered into a Canvas. |\n| Campaign Control Group Entered | The user was enrolled in a Campaign control group. |\n| Email Sent | An email was successfully sent to the user. |\n| Email Delivered | An email was successfully delivered to the user. |\n| Email Opened | The user opened an email. |\n| Email Link Clicked | The user clicked a link within an email. Note that the email click tracking feature must be enabled. |\n| Email Bounced | Triggered when Braze attempts to send an email but the receipient’s email server does not accept it. |\n| Email Soft Bounced | Triggered when Braze attempts to send an email but the recepient’s email server bounces it temporarily because of reasons like full inbox, email server down, etc. |\n| Email Marked As Spam | The user marked an email as spam. |\n| Email Unsubscribed | The user clicked on the unsubscribe link within an email. |\n| Subscription Group State Changed | The user’s subscription group status changed to `Subscribed` or `Unsubscribed`. |\n| Push Notification Sent | A push notification was successfully sent to the user. |\n| Push Notification Tapped | The user tapped on a push notification. |\n| iOS Foreground Push Opened | The user received an iOS push notification while the app was open. |\n| In-App Message Viewed | The user viewed an in-app message. |\n| In-App Message Clicked | The user clicked an in-app message. |\n| News Feed Viewed | The user viewed the Braze News Feed. |\n| News Feed Card Viewed | The user viewed a card within the Braze News Feed. |\n| News Feed Card Clicked | The user tapped or clicked on Braze News Feed card. |\n| Webhook Sent | A webhook message was sent. |\n\nThe following table lists the properties included in the events mentioned above:\n\n| Property name | Property type | Description |\n| --- | --- | --- |\n| `app_id` | String | The API identifier for the app on which the user receives a message/notification or performs some action. |\n| `send_id` | String | The message ID specified for a particular campaign, if applicable. |\n| `campaign_id` | String | The API identifier of the campaign associated with the event, if applicable. |\n| `canvas_id` | String | The API identifier of the Canvas associated with the event, if applicable. |\n| `canvas_variation_id` | String | The API identifier of the Canvas Variation associated with the event, if applicable. |\n| `canvas_step_id` | String | The API identifier of the Canvas Step associated with the event, if applicable. |\n| `context.traits.email` | String | The email address that the email was sent to, in case of the Email events. |\n| `button_id` | String | The ID of the button that the user clicked, in case of the `In-App Message Clicked` event. |\n| `card_api_id` | String | The API identifier of the News Feed Card, in case of the `News Feed Card Viewed` and `News Feed Card Clicked` events. |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Braze source | RudderStack Docs",
    "description": "Ingest your event data from Braze into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/reverse-etl/visual-data-mapper/",
    "markdown": "# Data Mapping with Visual Data Mapper (VDM)\n\nMap your warehouse columns to destination tables with RudderStack’s Visual Data Mapper functionality.\n\n* * *\n\n*     4 minute read  \n    \n\nThe **Visual Data Mapper** (VDM) offers an intuitive UI to map your warehouse columns to specific destination fields. This is useful especially when mapping your warehouse data to custom fields defined in your destination.\n\n## Supported destinations\n\nRudderStack supports the Visual Data Mapper for the following destinations:\n\n*   [Amplitude](https://www.rudderstack.com/docs/destinations/streaming-destinations/amplitude/)\n*   [Bing Ads Audience](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/bing-ads-audience/)\n*   [Bing Ads Offline Conversions](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/bing-ads-offline-conversions/)\n*   [Braze](https://www.rudderstack.com/docs/destinations/streaming-destinations/braze/)\n*   [Criteo Audience](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/criteo-audience/)\n*   [Customer.io](https://www.rudderstack.com/docs/destinations/streaming-destinations/customer.io/)\n*   [Eloqua](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/eloqua/)\n*   [Klaviyo Bulk upload](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/klaviyo-bulk-upload/)\n*   [Facebook Custom Audience](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/fb-custom-audience/)\n*   [Google Ads Remarketing Lists (Customer Match)](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/google-adwords-remarketing-list/)\n*   [HubSpot](https://www.rudderstack.com/docs/destinations/streaming-destinations/hubspot/)\n*   [Intercom](https://www.rudderstack.com/docs/destinations/streaming-destinations/intercom/)\n*   [Iterable](https://www.rudderstack.com/docs/destinations/streaming-destinations/iterable/)\n*   [Klaviyo](https://www.rudderstack.com/docs/destinations/streaming-destinations/klaviyo/)\n*   [LaunchDarkly Segments](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/launchdarkly-segments/)\n*   [Mailchimp](https://www.rudderstack.com/docs/destinations/streaming-destinations/mailchimp/)\n*   [Marketo](https://www.rudderstack.com/docs/destinations/streaming-destinations/marketo/)\n*   [Marketo Static Lists](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/marketo-static-lists/)\n*   [Salesforce](https://www.rudderstack.com/docs/destinations/streaming-destinations/salesforce/)\n*   [SFTP](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/sftp/)\n*   [Snapchat Custom Audience](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/snapchat-custom-audience/)\n*   [The Trade Desk Audience](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/trade-desk-audience/)\n*   [TikTok Audiences](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/tiktok-audiences/)\n*   [Yandex.Metrica Offline Events](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/yandex-metrica-offline-events/)\n\n  \n\n## Use Visual Data Mapper\n\n1.  Select the destination **Object** where you want to sync the data.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   RudderStack automatically loads all the relevant destination objects. If you have added a new destination object during this configuration process, click **Reload objects** to get all the latest objects.\n> *   RudderStack **does not** support objects that do not have any fields or a unique user identifier.\n\n[![Select object](https://www.rudderstack.com/docs/images/data-pipelines/vdm-mapping-1.webp)](https://www.rudderstack.com/docs/images/data-pipelines/vdm-mapping-1.webp)\n\n2.  Select the [sync mode](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/) that RudderStack uses to sync your data.\n\n### Choose identifier\n\nIn the **Choose Identifier** section, choose a warehouse column and destination field to map your records from the source to the destination. You can choose any column from the dropdown that acts as a unique identifier.\n\n[![Choose idenfier](https://www.rudderstack.com/docs/images/data-pipelines/vdm-mapping-2.webp)](https://www.rudderstack.com/docs/images/data-pipelines/vdm-mapping-2.webp)\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The **Choose identifier** field must have unique values in order to successfully sync the data to the destination. The records containing duplicate identifier values will **not** sync.\n> \n> For example, if you have chosen `name` as the identifier and it contains more than one values like `Alex`, the duplicate records will fail to sync.\n\n### Map fields\n\nIn this section, you can configure the specific source-destination field mappings.\n\n1.  Click the **Map another field** option. Select the **Destination field** from the dropdown. Then, select the **Warehouse column** you want to map to this field.\n\n[![Map objects](https://www.rudderstack.com/docs/images/data-pipelines/vdm-mapping-3.webp)](https://www.rudderstack.com/docs/images/data-pipelines/vdm-mapping-3.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> RudderStack gives you full visibility into the name and type of the fields that you are mapping along with a sample preview.\n\n#### **Mandatory mappings**\n\nThere are some required fields you need to map when sending events to some destination objects. These fields cannot be removed from the mappings.\n\nFor example, in the Salesforce **Account** object, **Account Name** is a required field, as seen in the following image:\n\n[![Map another field](https://www.rudderstack.com/docs/images/warehouse-actions-sources/vdm-5.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/vdm-5.webp)\n\n#### **Map fields of different type/format**\n\nIf you are mapping fields with different data types or formats, you can use the [Transformations](https://www.rudderstack.com/docs/transformations/overview/) feature to do the type conversion before sending the data.\n\n[![Map another field](https://www.rudderstack.com/docs/images/warehouse-actions-sources/vdm-6.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/vdm-6.webp)\n\nIn the above example, RudderStack lets you map the warehouse column `PHONE` of string type to a destination field `Associated Company ID` of float data type. You can then add a transformation at the destination end to do this type conversion to ensure there is no data type mismatch.\n\n### Create custom destination fields\n\nRudderStack lets you create a custom destination field and map it to a warehouse column.\n\n1.  Click the **Map another field** option.\n2.  Enter the name of the custom destination field you want to create.\n3.  Click **Create**.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In some cases, you must create or define the custom fields in the destination **before** creating them in the RudderStack dashboard.\n\n[![Create custom fields](https://www.rudderstack.com/docs/images/data-pipelines/vdm-mapping-4.webp)](https://www.rudderstack.com/docs/images/data-pipelines/vdm-mapping-4.webp)\n\n#### **Sync data to custom Salesforce objects**\n\nRudderStack **does not support** creating new custom fields for the [Salesforce](https://www.rudderstack.com/docs/destinations/streaming-destinations/salesforce/) destination using the above steps. However, you can still use the Visual Data Mapper to sync your data to custom Salesforce objects by following these steps:\n\n1.  Log in to your [Salesforce dashboard](https://login.salesforce.com/?locale=in).\n2.  In the top navigation bar, click the **Setup** icon and go to **Object Manager**.\n\n[![Salesforce custom object](https://www.rudderstack.com/docs/images/warehouse-actions-sources/salesforce-custom-object.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/salesforce-custom-object.webp)\n\n3.  Go to **Create** > **Custom Object**.\n4.  Enter the relevant details and click **Save** to finish the configuration.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure to select the **Allow Search** setting under the **Search Status** section, as seen below. Otherwise, the custom object will **not** be visible in the RudderStack dashboard.\n> \n> ![Salesforce custom object](https://www.rudderstack.com/docs/images/warehouse-actions-sources/salesforce-custom-object-1.webp)\n\n5.  In your RudderStack dashboard, click **Reload objects** under the **Object** field. Your newly created custom object should now be visible in this list. Select the object and map the relevant fields to sync your data.\n\n[![Create custom Salesforce fields](https://www.rudderstack.com/docs/images/data-pipelines/salesforce-custom-object.webp)](https://www.rudderstack.com/docs/images/data-pipelines/salesforce-custom-object.webp)\n\n## Update mapping configuration\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note the following:\n> \n> *   You can update your mapping configuration irrespective of whether the connection is turned on or off.\n> *   While updating the mapping configuration, you **cannot** change the **Object**, **Sync mode**, and **Choose identifier** fields. You will have to delete the destination and connect a new destination from scratch to do so.\n\n1.  Go to the **Schema** tab of your Reverse ETL connection page.\n2.  Update the mappings as required.\n3.  Click **Save** to update the configuration.\n\n[![Update JSON mappings](https://www.rudderstack.com/docs/images/retl-sources/update-vdm-mapping.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-vdm-mapping.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Data Mapping with Visual Data Mapper (VDM) | RudderStack Docs",
    "description": "Map your warehouse columns to destination tables with RudderStack's Visual Data Mapper functionality.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-react-native-sdk/",
    "markdown": "# React Native SDK | RudderStack Docs\n\nUse RudderStack’s React Native SDK to send events from your React Native application to various destinations.\n\n* * *\n\n*     21 minute read  \n    \n\nThe **RudderStack React Native SDK** allows you to track event data from your React Native applications and send it to your specified destinations via RudderStack.\n\nYou can check the [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-react-native) to get a more hands-on understanding of the SDK.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The React Native SDK supports the tvOS platform starting from v1.12.0.\n\n[![Github Badge](https://img.shields.io/npm/v/@rudderstack/rudder-sdk-react-native?style=flat)](https://www.npmjs.com/package/@rudderstack/rudder-sdk-react-native)\n\n## SDK setup requirements\n\nTo set up the RudderStack React Native SDK, the following prerequisites must be met:\n\n*   You need to set up a [RudderStack account](https://app.rudderstack.com/signup).\n*   Once signed up, [set up a React Native source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the dashboard. You should be able to see a **Write Key** for this source, as shown below:\n\n[![React Native source write key](https://www.rudderstack.com/docs/images/event-stream-sources/reactnative-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/reactnative-write-key-new.webp)\n\n*   You will also need a data plane URL. Refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has an SDK installation snippet containing both the write key and the data plane URL. You can use it to integrate the React Native SDK into your project.\n\n*   Setting up the [React Native development environment](https://reactnative.dev/docs/environment-setup) on your system is also highly recommended.\n\n## Installing the React Native SDK\n\nThe recommended way to install the React Native SDK is through [`npm`](https://www.npmjs.com/package/@rudderstack/rudder-sdk-react-native).\n\nTo add the SDK as a dependency, perform the following steps:\n\n*   Go to the root of your application and add `@rudderstack/rudder-sdk-react-native` as a dependency as shown:\n\n```\nnpm install @rudderstack/rudder-sdk-react-native --save\n```\n\n```\nyarn add @rudderstack/rudder-sdk-react-native\n```\n\n## Initializing the RudderStack client\n\n1.  Import the React Native SDK:\n\n```\nimport rudderClient from \"@rudderstack/rudder-sdk-react-native\"\n```\n\n2.  Initialize the SDK by adding the following code in your application as an `async` function:\n\n```\nconst rudderInitialise = async () => {\n  await rudderClient.setup(WRITE_KEY, {\n    dataPlaneUrl: DATA_PLANE_URL,\n    trackAppLifecycleEvents: true,\n    recordScreenViews: true,\n  });\n};\nrudderInitialise().catch(console.error);\n```\n\nAlternatively, you can use the `useEffect` hook to invoke the SDK’s initialization method in your root level component:\n\n```\nuseEffect(() => {\n  const rudderInitialise = async () => {\n    await rudderClient.setup(WRITE_KEY, {\n      dataPlaneUrl: DATA_PLANE_URL,\n      trackAppLifecycleEvents: true,\n      recordScreenViews: true,\n    });\n    console.log('SDK is initalised');\n  };\n  rudderInitialise().catch(console.error);\n}, []);\n```\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> It is highly recommended to use the `await` keyword with the `setup` method.\n\nThe `setup` method has the following signature:\n\n| Name | Data Type | Required | Description |\n| --- | --- | --- | --- |\n| `writeKey` | String | Yes | Your React Native source write key |\n| `configuration` | Object | No  | Contains the RudderStack client configuration |\n\nCheck the [Configuring your RudderStack client](#configuring-your-rudderstack-client) section below for a full list of configurable parameters.\n\n## Configuring your RudderStack client\n\nYou can configure your client based on the following parameters by passing them in the `configuration` object of your `setup` call.\n\n| Parameter | Type | Description | Default value |\n| --- | --- | --- | --- |\n| `logLevel` | `int` | Controls how much of the log you want to see from the SDK. Refer to the [Debugging](#debugging) section to get a list of all supported values. | `RUDDER_LOG_LEVEL.ERROR` |\n| `dataPlaneUrl` | `string` | URL of your `data-plane`. Please refer above to see how to fetch the data plane URL. | `https://hosted.rudderlabs.com` |\n| `flushQueueSize` | `int` | Number of events in a batch request to the server. | `30` |\n| `dbCountThreshold` | `int` | The number of events to be saved in the `SQLite` database. Once the limit is reached, the older events are deleted from the database. | `10000` |\n| `sleepTimeOut` | `int` | Minimum waiting time to flush the events to the server. | `10 seconds` |\n| `configRefreshInterval` | `int` | It will fetch the config from `dashboard` after this many hours. | `2` |\n| `autoSessionTracking` | boolean | Determines if the SDK should automatically [track the user sessions](#tracking-user-sessions). | `true` |\n| `sessionTimeout` | int | Maximum inactivity period before the session expires. | `300000 ms` (5 minutes) |\n| `trackAppLifecycleEvents` | `boolean` | Whether SDK will capture application life cycle events automatically. | `true` |\n| `enableBackgroundMode` | `boolean` | Determines if the SDK should [send the tracked events](#sending-tracked-events-before-closing-or-backgrounding-apps) for some time before the app is closed or backgrounded.<br><br>**Note**: This option is currently available only for iOS and tvOS. | `false` |\n| `autoCollectAdvertId` | `boolean` | Determines if the SDK will collect the advertisement ID. | `false` |\n| `recordScreenViews` | `boolean` | Determines if the SDK should capture screen view events automatically. | `false` |\n| `dbEncryption` | `DBEncryption` | Determines whether to encrypt/decrypt the database using the specified key. See Encrypting RudderStack databases for more information. | \\-  |\n| `controlPlaneUrl` | `string` | If you are using our open-source [Control plane lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) utility, use this option to point to your hosted `sourceConfig`. SDK will add `/sourceConfig` along with this URL | `https://api.rudderlabs.com` |\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` event is as shown:\n\n```\nrudderClient.identify(\n  \"test_userId\",\n  {\n    email: \"testuser@example.com\",\n    location: \"UK\",\n  },\n  null\n)\n```\n\nThe `identify` method has the following signature:\n\n| Name | Data Type | Required | Description |\n| --- | --- | --- | --- |\n| `userId` | String | Yes | The user’s unique identifier |\n| `traits` | Object | No  | Traits information for the user |\n| `option` | Object | No  | Extra options for the `identify` event |\n\nOnce a user is identified, the SDK persists all user information and passes it to the successive `track` or `screen` calls. To reset the user identification, you can use the [`reset`](#reset) method.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   For older SDK versions (< v1.9.0), the React Native SDK captures the device ID and uses that as `anonymousId` for identifying the user. This helps the SDK to track the users across the application installation.\n> *   Starting from v1.9.0 the SDK uses a UUID as `anonymousId` instead of the device ID. If you are upgrading from a previous SDK version, see [How RudderStack sets anonymous ID](#how-sdk-sets-anonymous-id) for more information on how the SDK collects and sets `anonymousId`.\n\n## How SDK sets device ID for Android and iOS\n\n*   On Android devices, the `deviceId` is assigned during the first boot. It remains consistent across the applications and installs and changes only after factory reset.\n*   According to [Apple documentation](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor), multiple apps from the same vendor are assigned the same `deviceId`. If all applications from the vendor are uninstalled and then reinstalled, then they are assigned a new `deviceId`.\n\n### Disabling device ID collection\n\nStarting from v1.9.0, you can disable the collection of device ID by setting `collectDeviceId` in the `Configuration` object to `false`.\n\nYou will observe the following changes when this property is set to false:\n\n*   The SDK does not send `context.device.id` as a part of the event payload.\n*   The SDK replaces the existing `anonymousId` (if it is equal to the device ID) with a UUID.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> These changes are introduced to make the SDK more compliant with all policies around the device ID collection.\n\n```\nconst config = {\n    dataPlaneUrl: 'DATA_PLANE_URL',\n    collectDeviceId: false,\n  };\n\nawait rudderClient.setup('WRITE_KEY', config);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you are upgrading to the latest SDK from a previous version (< v1.9.0) **and** disabling device ID collection using `collectDeviceId:false`:\n> \n> *   Make sure your user transformations are not dependent on `context.device.id` as the SDK will not send this value in the event payload.\n> *   The `context.device.id` column in your warehouse destination will not be populated henceforth (it will still contain data populated by the previous SDK version).\n\n## How SDK sets anonymous ID\n\n### For fresh installation\n\nRudderStack uses UUID as `anonymousId` regardless of whether [`collectDeviceId`](#collectdeviceid) is set to `true` or `false`.\n\n### For SDK updated from older version\n\nIf you have updated your React Native SDK from an older version (< v1.9.0), then:\n\n*   RudderStack will continue to use the device ID as `anonymousId` - it will not break the existing SDK behavior **until** you set `collectDeviceId` to `false`.\n*   If you set `collectDeviceId` to `false`, the SDK checks if the existing `anonymousId` is a device ID. If yes, it sets a new UUID as the `anonymousId`.\n*   If you have used the [`putAnonymousId`](#overriding-anonymous-id) method to set your own `anonymousId`, then the SDK will **not** modify it even if you set `collectDeviceId` to `false`.\n\n## Overriding anonymous ID\n\nYou can use the `putAnonymousId` method to override and set your own `anonymousId`:\n\n```\nrudderClient.putAnonymousId(ANONYMOUS_ID)\n```\n\n## Retrieving anonymous ID\n\nYou can retrieve the anonymous ID (either [set by the SDK](#how-sdk-sets-anonymous-id) or the user via [`putAnonymousId`](#overriding-anonymous-id)) using the following snippet:\n\n```\nconst getAnonymousId = async () => {\n    const context: IRudderContext | null = await rudderClient.getRudderContext();\n    const anonymousId = context.traits.anonymousId;\n    console.log(`Anonymous ID: ${anonymousId}`);\n};\n```\n\n## Setting custom ID\n\nYou can pass a custom ID along with the standard `userId` in your `identify` calls. RudderStack adds this value under `context.externalId`.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack supports passing `externalId` only in the `identify` events. You must not pass this ID in other API calls like `track`, `page`, etc.\n\nThe following code snippet shows how to add `externalId` to your `identify` event:\n\n```\nconst options = {\n  externalIds: [\n    {\n      id: \"some_external_id_1\",\n      type: \"brazeExternalId\",\n    },\n  ],\n}\nrudderClient.identify(\n  \"1hKOmRA4GRlm\",\n  {\n    email: \"alex@example.com\",\n    location: \"UK\",\n  },\n  options\n)\n```\n\n## Track\n\nYou can record the user activity through the `track` method. Every user action is called an **event**.\n\nA sample `track` event is shown below:\n\n```\nrudderClient.track(\"test_track_event\", {\n  test_key_1: \"test_value_1\",\n  test_key_2: {\n    test_child_key_1: \"test_child_value_1\",\n  },\n})\n```\n\nThe `track` method has the following signature:\n\n| Name | Data Type | Required | Description |\n| --- | --- | --- | --- |\n| `name` | String | Yes | Name of the tracked event |\n| `property` | Object | No  | Extra data properties to send along with the event |\n| `options` | Object | No  | Extra event options |\n\n## Screen\n\nYou can use the `screen` call to record whenever the user sees a screen on the mobile device. You can also send some extra properties along with this event.\n\nAn example of the `screen` event is as shown:\n\n```\nrudderClient.screen(\"Main Activity\", {\n  foo: \"bar\",\n})\n```\n\nAlternatively, you can use the following method signature:\n\n| Name | Data Type | Required | Description |\n| --- | --- | --- | --- |\n| `screenName` | String | Yes | Name of the screen viewed by the user. |\n| `property` | Object | No  | Extra property object to pass along with the `screen` call. |\n| `option` | Object | No  | Extra options passed along with `screen` event. |\n\n### Automatic screen recording\n\nYou can enable the automatic recording of screen views by passing `recordScreenViews` as `true` while initializing the `rudderClient`. This automatically sends a `screen` call for every screen that a user views. By default, `recordScreenViews` is set to `false`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `recordScreenViews` parameter records the screen views of the native Android [Activities](https://developer.android.com/guide/components/activities/intro-activities) or the iOS [Views](https://developer.apple.com/documentation/uikit/view_controllers) only and **not** by the React Native Views.\n\nTo track the screen views of the React Native Screens, you can use the following code snippet:\n\n```\nimport rudderClient from \"@rudderstack/rudder-sdk-react-native\"\nimport {\n  NavigationContainer\n} from '@react-navigation/native';\n\nconst App = () => {\n  const routeNameRef = React.useRef();\n  const navigationRef = React.useRef();\n  return ( <\n    NavigationContainer ref = {\n      navigationRef\n    }\n    onReady = {\n      () => {\n        routeNameRef.current = navigationRef.current.getCurrentRoute().name;\n      }\n    }\n    onStateChange = {\n      async () => {\n        const previousRouteName = routeNameRef.current;\n        const currentRouteName = navigationRef.current.getCurrentRoute().name;\n\n        if (previousRouteName !== currentRouteName) {\n          rudderClient.screen(currentRouteName);\n        }\n        routeNameRef.current = currentRouteName;\n      }\n    } >\n    ...\n    <\n    /NavigationContainer>\n  );\n};\n\nexport default App;\n```\n\n## Group\n\nRudderStack’s `group` method lets you link an identified user with a group, such as a company, organization, or an account. You can also record any traits associated with the group like the company name, number of employees, etc.\n\nA sample `group` call is shown below:\n\n```\nrudderClient.group(\"company123\", {\n  \"city\": \"New Orleans\",\n  \"state\": \"Louisiana\",\n  \"country\": \"USA\"\n})\n```\n\nThe `group` call has the following method signature:\n\n| Name | Data Type | Required | Description |\n| --- | --- | --- | --- |\n| `groupId` | String | Yes | Your group’s unique identifier |\n| `traits` | Object | No  | The group’s traits |\n| `option` | Object | No  | Extra options passed along with `group` event. |\n\n## Alias\n\nThe `alias` call lets you merge different identities of a known user.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> `alias` is an advanced method that lets you change the tracked user’s ID explicitly. This method is useful when managing identities for some of the downstream destinations.\n\nA sample `alias` call is as shown:\n\n```\nrudderClient.alias(\"newId\")\n```\n\nThe `alias` call has the following method signature:\n\n| Name | Data Type | Required | Description |\n| --- | --- | --- | --- |\n| `newId` | String | Yes | The new identifier you want to assign to the user. |\n| `option` | Object | No  | Extra options passed along with `alias` event. |\n\n## Reset\n\nYou can use the `reset` method to clear the persisted user traits. It also resets the `anonymousId` with a new UUID if you call it with `true` (for SDK v1.19.0 and later).\n\n```\nawait rudderClient.reset(true)\n```\n\nTo clear only user traits, call `reset` with `false`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> It is highly recommended to use the `await` keyword with the reset call.\n\n## Encrypting RudderStack databases\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is available in the React Native SDK from v1.11.0 onwards.\n\nTo enable the database encryption feature in the React Native SDK, follow these steps:\n\n1.  Navigate to the root of your application and add `@rudderstack/rudder-plugin-db-encryption-react-native` as a dependency:\n\n```\nnpm install @rudderstack/rudder-plugin-db-encryption-react-native\n```\n\n2.  Import the DBEncryption plugin:\n\n```\nimport DBEncryption from '@rudderstack/rudder-plugin-db-encryption-react-native';\n```\n\n3.  Create a `DBEncryption` object and pass it while initializing the SDK:\n\n```\nconst dbEncryption = new DBEncryption('<encryption_key>', true);\n\nconst rudderInitialise = async () => {\n  await rudderClient.setup(WRITE_KEY, {\n    dataPlaneUrl: DATA_PLANE_URL,\n    dbEncryption: dbEncryption,\n  });\n};\nrudderInitialise().catch(console.error);\n```\n\nThe `DBEncryption` class accepts the following parameters:\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `key` | string | Key used to encrypt/decrypt the database. |\n| `enable` | boolean | Specifies whether to encrypt/decrypt the database |\n\nTo remove encryption from a database, configure the `DBEncryption` object with your encryption key and set `enable` to `false`.\n\n**Instructions for iOS**\n\nThe `rudder-plugin-db-encryption-react-native` uses the [SQLCipher](https://github.com/sqlcipher/sqlcipher) Cocoapod under the hood to perform encryption. This Cocoapod requires the removal of any references to the standard SQLite system library for it to function as expected.\n\nIf you set up a project to inadvertently include a linking reference against the standard SQLite library before SQLCipher, it is possible that the application builds and runs correctly but does not use SQLCipher for encryption. This is not a problem for most projects but there are certain cases where unintentional SQLite linking can occur.\n\nOne such example is when using CocoaPods or some other sub-project that declares a dependency on the SQLite3 library. In this case, adding a pod to a project can **silently** modify the project settings in such a way that SQLCipher is not properly linked.\n\nYou can identify and fix the above linking issue during the development stage by looking for the below error log from the SDK:\n\n```\nRSDBPersistentManager: createDB: Cannot encrypt the Database as SQLCipher wasn't linked correctly.\n```\n\nTo fix the linking issue, add a linker flag to your project settings to ensure that the Xcode links SQLCipher before SQLite. Follow these steps:\n\n1.  Open the project-level build settings. These are the global project settings, not for the individual application target.\n2.  Locate the **Other Linker Flags** setting and add one of the following commands depending on how you are integrating SQLCipher into the app.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you are not adding `SQLCipher` into the app on your own and only using `rudder-plugin-db-encryption-react-native`, then see only the points 3 and 4 in the below table - depending on whether you are using `use_frameworks!` in your app’s `ios/Podfile`.\n\n| Scenario | Command | Notes |\n| --- | --- | --- |\n| When using SQLCipher commercial edition static libraries | `$(PROJECT_DIR)/sqlcipher-static-ios/ios-libs/libsqlcipher-ios.a` | Adjust according to the path to the `libsqlcipher-ios.a` you received as a part of the package. |\n| When using the `sqlcipher.xcodeproj` included in the SQLCipher Git repository | `$(BUILT_PRODUCTS_DIR)/libsqlcipher.a` | \\-  |\n| When using the SQLCipher CocoaPod with the `use_frameworks` Podfile setting enabled | `-framework SQLCipher` | \\-  |\n| When using the SQLCipher CocoaPod without the `use_frameworks` Podfile setting enabled | `-lSQLCipher` | \\-  |\n\nOnce the linker flag is added to the project-level build settings, you should see something like the below image:\n\n[![Project-level build settings](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-project-build-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-project-build-settings.webp)\n\nAfter adding the linker flag to your project-level build settings, check the target-level build settings to ensure SQLCipher is shown first, as seen below:\n\n[![Target-level build settings](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-target-build-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-target-build-settings.webp)\n\nRudderStack gives the users (e.g., an EU user) the ability to opt out of tracking any user activity until the user gives their consent. You can do this by leveraging RudderStack’s `optOut` API.\n\nThe `optOut` API takes `true` or `false` as a Boolean value to enable or disable tracking user activities. This flag persists across device reboots.\n\nThe following snippet highlights the use of the `optOut` API to disable user tracking:\n\n```\nawait rudderClient.optOut(true)\n```\n\nOnce the user grants their consent, you can enable user tracking once again by using the `optOut` API with `false` as a parameter sent to it:\n\n```\nawait rudderClient.optOut(false)\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `optOut` API is available in the React Native SDK starting from version `1.0.14`.\n\n## Sending tracked events before closing or backgrounding apps\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is available only for the iOS and tvOS platforms as it relies on their background mode capabilities.\n\nTo ensure that the events tracked using the React Native SDK just before closing or backgrounding your app are sent to RudderStack immediately and not upon the next app launch, set [`enableBackgroundMode`](#configuring-your-rudderstack-client) to `true` while initializing the SDK.\n\n```\nconst rudderInitialise = async () => {\n  await rudderClient.setup(WRITE_KEY, {\n    dataPlaneUrl: DATA_PLANE_URL,\n    enableBackgroundMode: true,\n  });\n};\nrudderInitialise().catch(console.error);\n```\n\nBy doing so, your app requests iOS for an additional background run time which allows the SDK to send all the tracked events before the app is closed or backgrounded.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> There is no fixed background run time for the app as it is completely abstracted by iOS. For more information, see this [iOS background modes tutorial](https://www.kodeco.com/34269507-background-modes-tutorial-getting-started#toc-anchor-008).\n\n## Tracking user sessions\n\nBy default, the React Native SDK automatically tracks user sessions. RudderStack automatically determines the start and end of a user session depending on the inactivity time configured in the SDK (default time is 5 minutes).\n\n```\nconst rudderInitialise = async () => {\n  await rudderClient.setup(WRITE_KEY, {\n    dataPlaneUrl: DATA_PLANE_URL,\n    trackAppLifecycleEvents: true,\n    autoSessionTracking: true, // Set to false to disable automatic session tracking\n    sessionTimeout: 5 * 60 * 1000,\n  });\n};\nrudderInitialise().catch(console.error);\n```\n\nTo disable automatic session tracking, set `autoSessionTracking` to `false`.\n\nFor more information on user sessions and how to track them using the React Native SDK, see [Session Tracking](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/).\n\n### Getting the session ID\n\nTo fetch the session ID of the current session, you can use the `getSessionId` method of the SDK. If the session ID is unavailable, this method returns a `null` value.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> `getSessionId()` is available in the React Native SDK from v1.10.0 onwards.\n\n```\nconst sessionId = await rudderClient.getSessionId();\n```\n\n## Setting custom context\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is available in the React Native SDK v1.14.0 and later.\n\nTo set custom contextual information in the React Native SDK, pass the `options` object as shown:\n\n```\nconst options = {\n  tier: {\n    category: 'premium',\n    type: 'gold',\n  },\n};\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The SDK treats any other fields in the `options` object except `externalId`, `externalIds`, or `integrations` as custom context and includes them in the `context` object.\n\n### While initializing SDK\n\nYou can set custom context while initializing the SDK as follows:\n\n```\nconst config = {\n  dataPlaneUrl: TEST_DATAPLANE_URL,\n};\n\nawait rc.setup(TEST_WRITE_KEY, config, options);\n```\n\nNote that:\n\n*   The React Native SDK persists the contextual information set during SDK initialization for subsequent events but **not** across sessions.\n*   Calling the [`reset`](#reset) API clears all the contextual information set during SDK initialization.\n\n### While sending events\n\nYou can set custom context while sending events as shown:\n\n```\nrudderClient.track(\n  'Custom Track Event',\n  {\n    property1: 'value1',\n    property2: 'value2',\n  },\n  options,\n);\n```\n\nNote that:\n\n*   You must send the `options` object every time you want to set custom context for a particular event. The SDK does not persist the contextual information sent in an event for the subsequent events.\n*   The contextual information passed while sending events gets precedence over the context set during SDK initialization.\n\n## Setting the device token\n\nYou can use your device token to pass push notifications to the destinations that support them. RudderStack sets this token under `context.device.token`. To set a custom device token, the SDK supports the `putDeviceToken` method.\n\nAn example of setting a custom device token is shown below:\n\n```\nrudderClient.putDeviceToken(<device_token>);\n```\n\n## Capturing advertisement ID automatically\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The React Native SDK supports auto-collecting the advertisement ID only in Android and **not** iOS.\n\nRudderStack automatically collects the advertisement ID from your Android apps **only** if `autoCollectAdvertId` is set to `true` during the [SDK initialization](#initializing-the-rudderstack-client).\n\nTo use this feature, make sure that:\n\n*   `com.google.android.gms.ads.identifier.AdvertisingIdClient` is present in your Android app’s classpath.\n*   `limitAdTracking` is not enabled for your Android device.\n\nAn example of auto-collecting your advertisement ID is shown:\n\n```\nawait rudderClient.setup(WRITE_KEY, {\n  dataPlaneUrl: DATA_PLANE_URL,\n  autoCollectAdvertId: true,\n})\n```\n\n#### **Setting advertisement ID manually**\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The React Native SDK supports this feature for both the Android and iOS platforms.\n\nUse the SDK’s `putAdvertisingId` method to manually set your Android ([AAID](https://support.google.com/googleplay/android-developer/answer/6048248?hl=en)) and iOS ([IDFA](https://developer.apple.com/documentation/adsupport/asidentifiermanager/advertisingidentifier)) as the advertisement ID.\n\nYou can call the `putAdvertisingId` method before or after initializing the SDK; the SDK persists the advertisement ID values throughout the session.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Support for calling `putAdvertisingId` before SDK initialization is available for iOS in the React Native SDK v1.13.0 and above. In the previous versions, you can set the advertisement ID in iOS only **after** the SDK is initialized.\n\nFollow these steps to set a custom advertisement ID using the `putAdvertisingId` method:\n\n1.  Import `Platform`:\n\n```\nimport { Platform } from 'react-native';\n```\n\n2.  Use `putAdvertisingId` to set your advertisement ID:\n\n```\nswitch (Platform.OS) {\n      case 'ios':\n        await rudderClient.putAdvertisingId('iOS-ADVERTISING-ID');\n        break;\n      case 'android':\n        await rudderClient.putAdvertisingId('ANDROID-ADVERTISING-ID');\n        break;\n}\n```\n\nNote that:\n\n*   The `putAdvertisingId` method accepts a single argument `advertisingId` of the string data type.\n*   In case of Android, if you set `autoCollectAdvertId` to `true` and use `putAdvertisingId` to set the advertisement ID, the SDK uses the provided advertisement ID instead of collecting it automatically.\n\n#### **Clearing advertisement ID**\n\nUse the `clearAdvertisingId` method to clear the existing advertisement ID:\n\n```\nawait rudderClient.clearAdvertisingId();\n```\n\nNote the following:\n\n*   Make sure to call `clearAdvertisingId` only after initializing the SDK.\n*   In case of Android, using `clearAdvertisingId` to reset the advertisement ID causes the SDK to starts auto-collecting the advertisement ID again if `autoCollectAdvertId` is set to `true`. To stop auto-collecting the advertisement ID, you must set `autoCollectAdvertId` to `false`.\n\n## Registering callbacks\n\nThe React Native SDK lets you trigger a callback once any device-mode integration is successful. You can use this callback to perform any operation that you wanted to do once a device-integration is successful.\n\nAn example of registering a callback for `App Center` is as shown:\n\n```\nawait rudderClient.registerCallback(\"App Center\", () => {\n  console.log(\"App Center is ready\")\n})\n```\n\nThe `registerCallback` method has the following signatures:\n\n| Name | Data Type | Required | Description |\n| --- | --- | --- | --- |\n| `destinationName` | `string` | Yes | Display name of the device-mode destination. |\n| `callback` | `Function` | Yes | Callback function to be triggered once device-mode integration is successful. |\n\n## Filtering events\n\nWhen sending events to a destination via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode), you can explicitly specify which events should be discarded or allowed to flow through - by allowlisting or denylisting them.\n\n## Enabling/disabling events for specific destinations\n\nThe React Native SDK lets you enable or disable sending events to a specific destination or all destinations to which the source is connected. You can specify these destinations by creating an object as shown:\n\n```\nconst options = {\n  integrations: {\n    // default value for `All` is true\n    All: false,\n    // specifying destination by its display name\n    Amplitude: true,\n    Mixpanel: false,\n  },\n}\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The keyword `All` in the above snippet represents all destinations the source is connected to. Its value is set to `true` by default.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Make sure the destination names that you pass while specifying the destinations should exactly match the names listed [here](https://app.rudderstack.com/directory).\n\nThere are two methods in which you can pass the destinations specified in the above snippet to the SDK:\n\n### 1\\. Passing destinations while initializing the SDK\n\nThis is helpful when you want to enable or disable sending the events across all event calls made using the SDK to the specified destinations.\n\n```\nrudderClient.setup(WRITE_KEY, config, options)\n```\n\n### 2\\. Passing destinations while making event calls\n\nThis approach is helpful when you want to enable or disable sending only a particular event to the specified destinations, or if you want to override the specified destinations passed with the SDK initialization (as described in the method above) for a particular event.\n\n```\nrudderClient.track(\n  \"test_track_event\",\n  {\n    test_key_1: \"test_value_1\",\n  },\n  options\n)\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you specify the destinations both while initializing the SDK as well as while making an event call, then the destinations specified at the event level only will be considered.\n\n## `flush` API\n\nThe React Native SDK supports the `flush()` API. It retrieves all messages present in the database, divides them into individual batches based on the specified queue size, and flushes them to the RudderStack server/backend.\n\nFor example, if the `flushQueueSize` is 30 and there are 180 events in the database when the `flush()` API is called, the SDK will retrieve all events and divide them into batches of 30 messages each, that is, into 6 batches.\n\nIf a batch fails for some reason, the SDK drops the remaining batches to maintain the sequence of the messages. A batch is considered as failed if it isn’t sent to the RudderStack server after 3 retries.\n\nIn device mode, the `flush()` API also calls the destination SDK’s `flush()` API (if applicable).\n\n## Debugging\n\nIf you run into any issues regarding the RudderStack React Native SDK, you can turn on the `VERBOSE` or `DEBUG` logging to find out what the issue is.\n\nFirst, make sure you modify your import statement to include `RUDDER_LOG_LEVEL` with:\n\n```\nimport rudderClient, {\n  RUDDER_LOG_LEVEL,\n} from \"@rudderstack/rudder-sdk-react-native\"\n```\n\nThen to turn on the logging, change your `RudderClient` initialization to the following:\n\n```\nawait rudderClient.setup(WRITE_KEY, {\n  dataPlaneUrl: DATA_PLANE_URL,\n  logLevel: RUDDER_LOG_LEVEL.DEBUG, // or VERBOSE\n})\n```\n\nYou can set the log level to one of the following values:\n\n*   `NONE`\n*   `ERROR`\n*   `WARN`\n*   `INFO`\n*   `DEBUG`\n*   `VERBOSE`\n\n## FAQ\n\n#### Do I need to link the SDK using the React Native link?\n\nNo, you don’t need to link the SDK as it is auto-linked. If you have linked it using `react-native link` and are facing any issues, use `react-native unlink rudder-sdk-react-native` to unlink it.\n\n#### What is the need to use the await keyword?\n\nThe functions exposed by the SDK are asynchronous in nature. If you want a synchronous behavior, you must use the `await` keyword. We highly recommend using the `await` keyword with the setup call to make sure that the SDK has been properly set up, before any further calls are made.\n\n#### Do I need to add anything to my ProGuard rules?\n\nAdd the following lines to your Android ProGuard rules if you are using Proguard full mode to optimize your app:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Add the below rules if you are using the Android SDK older than v1.20.0.\n> \n> Note that the rules are bundled in the SDK itself from v1.20.0 onwards.\n\n```\n// Reporter Module\n\n-keep class com.rudderstack.android.ruddermetricsreporterandroid.models.LabelEntity { *; }\n-keep class com.rudderstack.android.ruddermetricsreporterandroid.models.MetricEntity { *; }\n-keep class com.rudderstack.android.ruddermetricsreporterandroid.models.ErrorEntity { *; }\n\n// Required for the usage off TypeToken class in Utils.converToMap, Utils.convertToList\n\n-keep class com.google.gson.reflect.TypeToken { *; }\n-keep class * extends com.google.gson.reflect.TypeToken\n\n// Required for the serialization of SourceConfig once it is downloaded.\n\n-keep class com.google.gson.internal.LinkedTreeMap { *; }\n-keep class * implements java.io.Serializable { *; }\n-keep class com.rudderstack.rudderjsonadapter.RudderTypeAdapter { *; }\n-keep class * extends com.rudderstack.rudderjsonadapter.RudderTypeAdapter\n\n// Required to ensure the DefaultPersistenceProviderFactory is not removed by Proguard\n// and works as expected even when the customer is not using encryption feature.\n\n-dontwarn net.sqlcipher.Cursor\n-dontwarn net.sqlcipher.database.SQLiteDatabase$CursorFactory\n-dontwarn net.sqlcipher.database.SQLiteDatabase\n-dontwarn net.sqlcipher.database.SQLiteOpenHelper\n-keep class com.rudderstack.android.sdk.core.persistence.DefaultPersistenceProviderFactory { *; }\n\n// Required for the usage of annotations across reporter and web modules\n\n-dontwarn com.fasterxml.jackson.annotation.JsonIgnore\n-dontwarn com.squareup.moshi.Json\n-dontwarn com.fasterxml.jackson.annotation.JsonProperty\n\n// Required for Device Mode Transformations\n\n-keep class com.rudderstack.android.sdk.core.TransformationResponse { *; }\n-keep class com.rudderstack.android.sdk.core.TransformationResponseDeserializer { *; }\n-keep class com.rudderstack.android.sdk.core.TransformationRequest { *; }\n```\n\n#### How do I get the user `traits` after making an `identify` call?\n\nYou can get the user traits after making an `identify` call as shown:\n\n```\nconst rudderContext = await rudderClient.getRudderContext();\nconsole.log('Traits are : ' + JSON.stringify(rudderContext.traits));\n```\n\n#### How does the React Native SDK handle events larger than 32KB?\n\nThe React Native SDK drops any events greater than 32KB.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "React Native SDK | RudderStack Docs",
    "description": "Use RudderStack’s React Native SDK to send events from your React Native application to various destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/get-started/rudderstack-open-source/data-plane-setup/developer-machine-setup/",
    "markdown": "# Developer machine setup | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "Developer machine setup | RudderStack Docs",
    "description": "Set up RudderStack in your development environment.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/segment/",
    "markdown": "# Segment source | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "Segment source | RudderStack Docs",
    "description": "Ingest event data from Segment into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/canny/",
    "markdown": "# Canny source | RudderStack Docs\n\nIngest your event data from Canny into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[Canny](https://canny.io/) is a customer feedback management tool which captures, organizes, and analyzes product feedback in one place to help you make informed product decisions.\n\nThis guide will help you set up Canny as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Canny source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Canny**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Canny source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![Canny source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/canny-2.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/canny-2.webp)\n\n4.  Log into your [Canny account](https://canny.io/login). In the top-right side, select the **Settings** option under your profile followed by **API & Webhooks**.\n5.  Enter the **Webhook URL** under **Webhooks** section:\n\n[![Canny source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/webhook-url-canny.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/webhook-url-canny.webp)\n\n6.  Finally, click **Add**.\n\n## Event transformation\n\nRudderStack ingests the Canny events after converting them into the RudderStack event format. It also maps the following properties from the Canny event payload to the RudderStack properties:\n\n| Canny property | RudderStack property | Notes |\n| --- | --- | --- |\n| `created` | `timestamp`,`originalTimestamp` | \\-  |\n| `object` | `properties` | RudderStack excludes `author`/`voter` from the properties. |\n| `objectType` | `properties.objectType` | \\-  |\n| `type` | `event` | \\-  |\n| `object.author` | `context.traits` | RudderStack excludes `userId` and `id`. |\n| `object.author.userId` | `userId` | \\-  |\n| SHA-256 hash of `object.author.email` | `anonymousId` | Only if `userId` is not present |\n| SHA-256 hash of `object.voter.email` | `anonymousId` | Only if `userId` is not present **and** `type` is `vote.created`/`vote.deleted` |\n| `object.voter.userId` | `userId` | Only if `type` is `vote.created`/`vote.deleted` |\n| `object.voter.id` | `context.externalId[0].value` | Only if `type` is `vote.created`/`vote.deleted` |\n| `cannyUserId` | `context.externalId[0].type` | \\-  |\n| `object.author.id` | `context.externalId[0].id` | \\-  |\n\nCanny supports ingesting the following events:\n\n| Canny events | Description |\n| --- | --- |\n| `post.created` | Occurs when a new post is created. |\n| `post.deleted` | Occurs when a post is deleted. |\n| `post.jira_issue_linked` | Occurs when a Jira issue is linked to a post. |\n| `post.jira_issue_unlinked` | Occurs when a Jira issue is unlinked from a post. |\n| `post.status_changed` | Occurs when a post’s status is changed. |\n| `comment.created` | Occurs when a new comment is created. |\n| `comment.deleted` | Occurs when a comment is deleted. |\n| `vote.created` | Occurs when a user votes on a post. |\n| `vote.deleted` | Occurs when a user unvotes on a post. |\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from Canny source and creates the resulting payload.\n\nA sample payload sent by Canny is shown below:\n\n```\n{\n    \"created\": \"2022-07-28T10:52:46.294Z\",\n    \"object\": {\n        \"author\": {\n            \"created\": \"2022-07-15T11:16:32.648Z\",\n            \"email\": \"alex@example.com\",\n            \"id\": \"1hKOmRA4el9Zt1WSfVJIVo4GRlm\",\n            \"isAdmin\": true,\n            \"name\": \"Alex Keener\",\n            \"url\": \"https://rudder.canny.io/admin/users/alex-keener\",\n            \"userID\": null\n        },\n        \"board\": {\n            \"created\": \"2022-07-25T12:11:19.895Z\",\n            \"id\": \"VJIVo4GRlm\",\n            \"name\": \"features\",\n            \"postCount\": 13,\n            \"url\": \"https://rudder.canny.io/admin/board/features\"\n        },\n        \"by\": null,\n        \"category\": null,\n        \"commentCount\": 0,\n        \"created\": \"2022-07-28T10:52:46.172Z\",\n        \"customFields\": [{\n            \"id\": \"62e1382\",\n            \"name\": \"John\",\n            \"value\": \"123\"\n        }],\n        \"details\": \"Array of images\",\n        \"eta\": null,\n        \"id\": \"62e26a\",\n        \"imageURLs\": [\n            \"https://canny.io/images/6371453a825c79351c52a6063c3af476.jpg\",\n            \"https://canny.io/images/47db6ee5035bfb45ea87a74f2eb17928.jpg\"\n        ],\n        \"owner\": null,\n        \"score\": 1,\n        \"status\": \"open\",\n        \"tags\": [],\n        \"title\": \"Custom Fields Testing\",\n        \"url\": \"https://rudder.canny.io/admin/board/features/p/custom-fields-testing\"\n    },\n    \"objectType\": \"post\",\n    \"type\": \"post.created\"\n}\n```\n\nRudderStack transforms the above payload into the following payload:\n\n```\n{\n    \"anonymousId\": \"d6a9d06e8a464324d448003ff0467d971a55ca2950e11fc51faaec4e2850ecc6\",\n    \"event\": \"post.created\",\n    \"integrations\": {\n        \"Canny\": false\n    },\n    \"context\": {\n        \"library\": {\n            \"name\": \"unknown\",\n            \"version\": \"unknown\"\n        },\n        \"integration\": {\n            \"name\": \"Canny\",\n            \"version\": \"1.0.0\"\n        },\n        \"traits\": {\n        \"created\": \"2022-07-15T11:16:32.648Z\",\n        \"email\": \"alex@example.com\",\n        \"isAdmin\": true,\n        \"name\": \"Alexx Keener\",\n        \"url\": \"https://rudder.canny.io/admin/users/alex-keener\"\n      },\n        \"externalId\": [{\n            \"type\": \"cannyUserId\",\n            \"id\": \"1hKOmRA4el9Zt1WSfVJIVo4GRlm\"\n        }]\n    },\n    \"timestamp\": \"2022-07-28T10:52:46.294Z\",\n    \"originalTimestamp\": \"2022-07-28T10:52:46.294Z\",\n    \"type\": \"track\",\n    \"properties\": {\n        \"board\": {\n            \"created\": \"2022-07-25T12:11:19.895Z\",\n            \"id\": \"VJIVo4GRlm\",\n            \"name\": \"features\",\n            \"postCount\": 13,\n            \"url\": \"https://rudder.canny.io/admin/board/features\"\n        },\n        \"by\": null,\n        \"category\": null,\n        \"commentCount\": 0,\n        \"created\": \"2022-07-28T10:52:46.172Z\",\n        \"customFields\": [{\n            \"id\": \"62e1382\",\n            \"name\": \"abc\",\n            \"value\": \"123\"\n        }],\n        \"details\": \"Array of images\",\n        \"eta\": null,\n        \"id\": \"62e26a\",\n        \"imageURLs\": [\n            \"https://canny.io/images/6371453a825c79351c52a6063c3af476.jpg\",\n            \"https://canny.io/images/47db6ee5035bfb45ea87a74f2eb17928.jpg\"\n        ],\n        \"objectType\": \"post\",\n        \"owner\": null,\n        \"score\": 1,\n        \"status\": \"open\",\n        \"tags\": [],\n        \"title\": \"Custom Fields Testing\",\n        \"url\": \"https://rudder.canny.io/admin/board/features/p/custom-fields-testing\"\n    }\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Canny source | RudderStack Docs",
    "description": "Ingest your event data from Canny into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/reverse-etl/start-stop-syncs/",
    "markdown": "# Start and Stop Reverse ETL Syncs\n\nStart, stop, and trigger a Reverse ETL sync manually.\n\n* * *\n\n*     3 minute read  \n    \n\nWhen you [set up a Reverse ETL connection](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/), RudderStack performs a full sync the first time, that is, it syncs all the data from the source. Subsequently, it incrementally syncs any new data since the last sync according to the [sync schedule](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/#schedule-syncs), or whenever you press the **Sync Now** button.\n\nRudderStack also lets you force a full data resync or stop an ongoing sync.\n\n## Start and stop syncs\n\nGo to the **Syncs** tab of your Reverse ETL connection and click **Sync Now** to start a new sync. As mentioned above, this new sync will be incremental in nature, that is, it syncs only the new data available in the warehouse since the last sync.\n\n[![Sync now option](https://www.rudderstack.com/docs/images/retl-sources/sync-now.webp)](https://www.rudderstack.com/docs/images/retl-sources/sync-now.webp)\n\nTo force a **full** data sync, choose the **Force Full Resync** option.\n\n[![Force full resync option](https://www.rudderstack.com/docs/images/retl-sources/force-full-sync.webp)](https://www.rudderstack.com/docs/images/retl-sources/force-full-sync.webp)\n\nTo stop a running sync, click the **Stop Now** button.\n\n[![Stop sync option](https://www.rudderstack.com/docs/images/retl-sources/stop-sync.webp)](https://www.rudderstack.com/docs/images/retl-sources/stop-sync.webp)\n\nIn the confirmation pop up, click **Stop Sync** to cancel and stop the sync.\n\n[![Stop sync confirmation](https://www.rudderstack.com/docs/images/retl-sources/stop-sync-confirmation.webp)](https://www.rudderstack.com/docs/images/retl-sources/stop-sync-confirmation.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note the following:\n> \n> *   Once you stop a sync, any data that RudderStack reads from the warehouse and is on the fly may not be stopped or dropped from being delivered to the destination. RudderStack only stops reading and sending any new data from the warehouse to the destination and prevents the sync from progressing.\n> *   For a very low number of deltas (new data since the last attempted sync), you may sometimes see a “0 deltas succeeded” after you stop the sync.\n> *   Once you cancel a sync, the behavior of the next sync depends on the [type](https://www.rudderstack.com/docs/sources/reverse-etl/faq/#what-is-the-difference-between-the-full-and-incremental-sync-types) of the cancelled sync. For example, if a cancelled sync is an incremental sync, then the next sync will be incremental too. Similarly, if the cancelled is a full sync, then the next sync will be a full sync.\n> *   RudderStack makes sure there is no data loss in the next sync as a result of the previous cancelled sync irrespective of the sync type (full/incremental) or [sync mode](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/)(upsert/mirror).\n\n## Drain behavior on sync cancellation\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This process is also applicable for scenarios where a Reverse ETL source is disabled or disconnected from a destination.\n\nWhenever you stop a Reverse ETL sync, there might be some events that are in the process of being delivered and need to be drained from the pipeline.\n\nThis is important to make sure the next sync is not affected and you don’t have to wait for the events already in pipeline to be delivered or failed.\n\nAfter you stop a sync, RudderStack automatically triggers this draining process in the background. The time taken for this process to complete depends on the amount of data. Hence, waiting for some time before triggering next sync is recommended.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Start and Stop Reverse ETL Syncs | RudderStack Docs",
    "description": "Start, stop, and trigger a Reverse ETL sync manually.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/shopify/",
    "markdown": "# Shopify Source | RudderStack Docs\n\nIngest your event data from Shopify into RudderStack.\n\n* * *\n\n*     10 minute read  \n    \n\n[Shopify](https://www.shopify.in/) is a popular ecommerce platform that gives you all tools to start, run, and grow your business effectively. It offers online retailers a variety of services around digital payments, marketing, product shipping, customer engagement and retention, and more.\n\nThis guide will help you set up Shopify as a source in RudderStack.\n\n## Setup overview\n\nSetting up the Shopify source involves two steps:\n\n*   [Configuring the Shopify source in RudderStack](#configuring-the-shopify-source-in-rudderstack)\n*   [Configuring the RudderStack app in your Shopify store](#configuring-the-rudderstack-app-in-your-shopify-store)\n\n## Configuring the Shopify source in RudderStack\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**.\n2.  From the list of **Event Streams** sources, select **Shopify**.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\n*   **Disable client-side identifier**: If enabled, RudderStack does not automatically track the client-side `identify` events by itself.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Enable this setting to set your own `userId` in the client-side events using RudderStack’s [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call.\n> \n> For example, when you enable this flag and call `rudderanalytics.identify('custom_userId')`, RudderStack sets `custom_userId` as the client-side user ID instead of the `userId` set by the RudderStack Shopify tracker.\n\nYour Shopify source is now configured. Go to the **Setup** tab and note the source **Write key**. This will be required later while configuring the RudderStack app on your Shopify store.\n\n[![Shopify source write key](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-source-write-key.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-source-write-key.webp)\n\n## Configuring the RudderStack app in your Shopify store\n\nTo complete the configuration, you need to add and configure the RudderStack app in your Shopify store. Follow these steps:\n\n1.  Go to your Shopify store’s [admin dashboard](https://accounts.shopify.com/store-login).\n2.  In the left sidebar, go to **Apps** > **Customize your store**:\n\n[![Customizing Shopify store](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-3.webp)\n\n3.  Then, search for RudderStack.\n\n[![RudderStack app search](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-4.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-4.webp)\n\n4.  In the search results, select the RudderStack app and click **Add app**. Alternatively, you can install the RudderStack app directly using this [link](https://apps.shopify.com/rudderstack).\n\n[![Add RudderStack app](https://www.rudderstack.com/docs/images/event-stream-sources/RS-Shopify-app.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/RS-Shopify-app.webp)\n\n5.  After installation, you should be able to see the app in the **Installed apps** section:\n\n[![Installed RudderStack app](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-5.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-5.webp)\n\n6.  Select the installed RudderStack app.\n7.  Enter the **Source Write Key** that you copied [above](#connection-settings) and your [RudderStack data plane URL](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url):\n\n[![Data plane URL and source write key](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-6.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-6.webp)\n\n8.  Finally, click **Submit**.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> You can update these fields later with a different write key and data plane URL.\n\n## Event tracking and transformation\n\nYou can track user events using [server-side](#tracking-server-side-events) and [client-side tracking](#tracking-client-side-events) supported by Shopify.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> **Identity stitching enhancement for client-side and server-side tracking**\n> \n> RudderStack internally performs identity stitching and sets the same `anonymousId` and [`sessionId`](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/) (generated automatically) for the same user in client-side and server-side events. You don’t need to take any action (like updating or reinstalling your RudderStack Shopify app) to use this feature.\n\n### Tracking server-side events\n\nRudderStack uses the Shopify-provided webhooks for tracking events on the server-side.\n\nThe following table details the supported Shopify events and their corresponding [topic](https://shopify.dev/api/admin-rest/2022-01/resources/webhook#:~:text=a%20custom%20storefront.-,Mandatory%20webhooks,-You%20don%27t%20create) mapping for `identify` calls:\n\n| Identify event name | Description | Subscribed Shopify topic |\n| --- | --- | --- |\n| `customers_create` | Customer was created. | `customers/create` |\n| `customers_update` | Customer was updated. | `customers/update` |\n| `customers_disabled` | Customer was disabled. | `customers/disable` |\n| `customers_enable` | Customer was enabled. | `customers/enable` |\n\nThe following table details the supported Shopify events and their corresponding [topic](https://shopify.dev/api/admin-rest/2022-01/resources/webhook#:~:text=a%20custom%20storefront.-,Mandatory%20webhooks,-You%20don%27t%20create) mapping for `track` calls:\n\n| Track event name | Description | Subscribed Shopify topic |\n| --- | --- | --- |\n| `checkout_delete` | Checkout was deleted. | `checkouts/delete` |\n| `checkout_update` | Checkout was updated. | `checkouts/update` |\n| `carts_update` | Cart was updated. | `cart/update` |\n| `fulfillments_create` | Fulfillment was created. | `fulfillments/create` |\n| `fulfillments_update` | Fulfillment was updated. | `fulfillments/update` |\n| `orders_create` | Order was created. | `orders/create` |\n| `orders_delete` | Order was deleted. | `orders/delete` |\n| `orders_cancelled` | Order was cancelled. | `orders/cancelled` |\n| `orders_fulfilled` | Order was fulfilled. | `orders/fulfilled` |\n| `orders_paid` | Order was paid. | `orders/paid` |\n| `orders_partially_fullfilled` | Order was partly fulfilled. | `orders/partially_fulfilled` |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> As of May 23, 2023, the `carts_create` event is deprecated. Instead, you can use the `carts_update` event that is fired whenever an update is made to a cart.\n\nRudderStack also supports the following [ecommerce events](https://www.rudderstack.com/docs/event-spec/ecommerce-events-spec/):\n\n| Ecommerce event name | Description | Subscribed Shopify topic |\n| --- | --- | --- |\n| `Checkout Started` | A new checkout was created. | `checkouts/create` |\n| `Order Updated` | Order was updated. | `orders/updated` |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Any other events flowing through RudderStack except the `track`, `identify`, and the above-mentioned ecommerce events are **discarded**.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack captures user-related information from the `traits` object of the event payload. The product-specific information present in the above resources in `line_items` is mapped to the `products` array in the payload. For more information on the RudderStack event payload nomenclature, see [Event Specification](https://www.rudderstack.com/docs/event-spec/standard-events/) and [Common Fields](https://www.rudderstack.com/docs/event-spec/standard-events/common-fields/).\n\n#### Required scopes\n\nThe RudderStack app requires the following [scopes](https://shopify.dev/api/usage/access-scopes) for tracking user events in the Shopify store:\n\n```\nread_checkouts, read_orders, read_customers, read_fulfillments, write_script_tags\n```\n\nThe below is an example of server-side event transformed by RudderStack:\n\n```\n{\n  \"anonymousId\": \"bb35ad42-d59b-405c-b311-2daf98671c9c\",\n  \"type\": \"identify\",\n  \"context\": {\n    \"integration\": {\n      \"name\": \"SHOPIFY\"\n    },\n    \"ip\": \"[::1]\",\n    \"sessionId\": \"57470820\",\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    }\n  },\n  \"integrations\": {\n    \"SHOPIFY\": true\n  },\n  \"messageId\": \"7cbc1a8c-597d-42f7-8a1e-a659700da011\",\n  \"originalTimestamp\": \"2022-01-03T12:34:08.876+05:30\",\n  \"receivedAt\": \"2022-01-03T12:34:04.763+05:30\",\n  \"request_ip\": \"[::1]\",\n  \"rudderId\": \"f31e31dd-00c2-4f77-96b5-0dd46839bc9c\",\n  \"sentAt\": \"2022-01-03T12:34:08.876+05:30\",\n  \"timestamp\": \"2021-12-29T09:45:20.000Z\",\n  \"traits\": {\n    \"acceptsMarketing\": false,\n    \"acceptsMarketingUpdatedAt\": \"2021-12-29T15:15:20+05:30\",\n    \"address\": {\n      \"address1\": \"6649 N\",\n      \"address2\": \"Blue Gum Street\",\n      \"city\": \"New Orleans\",\n      \"company\": \"Example Organization\",\n      \"country\": \"USA\",\n      \"country_code\": \"US\",\n      \"country_name\": \"USA\",\n      \"customer_id\": 5747017285820,\n      \"default\": true,\n      \"first_name\": \"Alex\",\n      \"id\": 6947581821116,\n      \"last_name\": \"Keener\",\n      \"name\": \"Alex Keener\",\n      \"phone\": \"8005550100\",\n      \"province\": \"Louisiana\",\n      \"province_code\": \"LA\",\n      \"zip\": \"00000\"\n    },\n    \"addressList\": [{\n      \"address1\": \"6649 N\",\n      \"address2\": \"Blue Gum Street\",\n      \"city\": \"New Orleans\",\n      \"company\": \"Example Organization\",\n      \"country\": \"USA\",\n      \"country_code\": \"US\",\n      \"country_name\": \"USA\",\n      \"customer_id\": 5747017285820,\n      \"default\": true,\n      \"first_name\": \"Alex\",\n      \"id\": 6947581821116,\n      \"last_name\": \"Keener\",\n      \"name\": \"Alex Keener\",\n      \"phone\": \"8005550100\",\n      \"province\": \"Louisiana\",\n      \"province_code\": \"LA\",\n      \"zip\": \"00000\"\n    }],\n    \"adminGraphqlApiId\": \"gid://shopify/Customer/5747017285820\",\n    \"currency\": \"USD\",\n    \"email\": \"alex@example.com\",\n    \"firstName\": \"Alex\",\n    \"lastName\": \"Keener\",\n    \"note\": \"\",\n    \"orderCount\": 0,\n    \"phone\": \"8005550100\",\n    \"smsMarketingConsent\": {\n      \"consent_collected_from\": \"SHOPIFY\",\n      \"consent_updated_at\": null,\n      \"opt_in_level\": \"single_opt_in\",\n      \"state\": \"not_subscribed\"\n    },\n    \"state\": \"disabled\",\n    \"tags\": \"\",\n    \"taxExempt\": false,\n    \"taxExemptions\": [],\n    \"totalSpent\": \"0.00\",\n    \"verifiedEmail\": true\n  },\n  \"userId\": \"5747017285820\"\n}\n```\n\n### Tracking client-side events\n\nFor tracking the client-side events, RudderStack inserts a JavaScript tracking code into every page of the respective Shopify store.\n\nNote that:\n\n*   RudderStack supports the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) event for every page visited on the Shopify store.\n*   It also supports `Registration Viewed` as a generic [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) event whenever the user views their account or registration page.\n*   RudderStack tracks the `Login Viewed` event **only** on the `account/login` page. It triggers the event if only if the user accesses this path.\n*   The following [ecommerce events](https://www.rudderstack.com/docs/event-spec/ecommerce-events-spec/) are also supported on client-side:\n\n| Event name | Description |\n| --- | --- |\n| `Cart Viewed` | User viewed the cart page. |\n| `Checkout Started` | User clicked on the buy button. |\n| `Product Added` | User added the product to the cart. |\n| `Product Clicked` | User clicked on a product. |\n| `Product List Viewed` | User viewed the product collections page. |\n| `Product Viewed` | User viewed a product page. |\n\nA sample client-side event transformed by RudderStack:\n\n```\n{\n  \"channel\": \"web\",\n  \"context\": {\n    \"app\": {\n      \"build\": \"1.0.0\",\n      \"name\": \"RudderLabs JavaScript SDK\",\n      \"namespace\": \"com.rudderlabs.javascript\",\n      \"version\": \"2.2.4\"\n    },\n    \"traits\": {},\n    \"sessionId\": \"23342112\",\n    \"library\": {\n      \"name\": \"RudderLabs JavaScript SDK\",\n      \"version\": \"2.2.4\"\n    },\n    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.80 Safari/537.36\",\n    \"os\": {\n      \"name\": \"\",\n      \"version\": \"\"\n    },\n    \"locale\": \"en-GB\",\n    \"screen\": {\n      \"density\": 2,\n      \"width\": 1440,\n      \"height\": 900,\n      \"innerWidth\": 1440,\n      \"innerHeight\": 185\n    },\n    \"campaign\": {},\n    \"page\": {\n      \"path\": \"/\",\n      \"referrer\": \"$direct\",\n      \"referring_domain\": \"\",\n      \"search\": \"\",\n      \"title\": \"rudderstack-store-final\",\n      \"url\": \"https://rudderstack-store-final.myshopify.com/\",\n      \"tab_url\": \"https://rudderstack-store-final.myshopify.com/\",\n      \"initial_referrer\": \"$direct\",\n      \"initial_referring_domain\": \"\"\n    }\n  },\n  \"type\": \"page\",\n  \"messageId\": \"0cd68548-8e0a-42d0-9745-c2a0b38092f2\",\n  \"originalTimestamp\": \"2022-02-22T05:08:51.357Z\",\n  \"anonymousId\": \"f4a8e9c1-b757-4565-a12c-0dd80619316d\",\n  \"userId\": \"\",\n  \"properties\": {\n    \"path\": \"/\",\n    \"referrer\": \"\",\n    \"search\": \"\",\n    \"title\": \"rudderstack-store-final\",\n    \"url\": \"https://rudderstack-store-final.myshopify.com/\",\n    \"category\": \"t\",\n    \"referring_domain\": \"\",\n    \"tab_url\": \"https://rudderstack-store-final.myshopify.com/\",\n    \"initial_referrer\": \"$direct\",\n    \"initial_referring_domain\": \"\"\n  },\n  \"integrations\": {\n    \"All\": true\n  },\n  \"category\": \"t\",\n  \"sentAt\": \"2022-02-22T05:08:51.357Z\"\n}\n```\n\n## Best practices\n\n### Provide login functionality\n\nShopify provides the store owners the capability to either make user login compulsory or allow guest checkout in their stores. However, it is a best practice to prompt users to log in onto your platform. That way, RudderStack can fetch the user details and provide you with meaningful event data corresponding to the user’s journey on your platform.\n\n### Support for client-side calls\n\nIt is highly recommended **not** to make any drastic changes to your store structure to preserve data integrity. If you do so, RudderStack may track incorrect calls or miss them entirely, owing to the disparity between URL and triggered event.\n\nNote the following additional details for ecommerce events tracked by RudderStack:\n\n*   **Cart Viewed**: It is recommended to keep the URL in `[store-url]/cart` format.\n*   **Checkout Started**: This event can be triggered in any of the following ways:\n    *   When **Checkout** button is clicked on the `[store-url]/cart` page.\n    *   When **Buy it Now** button is clicked on the product description page.\n    *   Using the pop-ups when adding a product.\n*   **Product Added**: This event is triggered when the **Add to Cart** button is clicked on a product description page with `[store-url]/products/product_name` format.\n*   **Product Clicked**: This event is triggered when you click a product entry on any page in the store.\n*   **Product List Viewed**: This event is triggered when user sees a product on a page.\n*   **Product Viewed**: This event is triggered when a product’s description page in `[store-url]/products/product_name` format is opened. It is an indicative of the product listing page being viewed.\n\n### Event listener conditions for Shopify tracker\n\n| Event | Code | Example |\n| --- | --- | --- |\n| Product Added | `form[action=\"/cart/add\"] [type=\"submit\"]`<br><br>`form` element with `action=\"/cart/add\"` and `type = \"submit\"` | `<form action= \"/cart/add\" class=”shopify-form”>`  <br>`<button type = \"submit\" class = “shopify-addToCart”>Add To Cart </button>`  <br>`</form>` |\n| Product Clicked | `$(\"a\").filter((a, b) => b.href.indexOf(\"/products\") > -1)`<br><br>Above code runs through the whole HTML looking for anchor tags with `href` having `/products`. | `<a href=\"/products/product1\">Product 1</a>` |\n| Product List Viewed | [Code](https://github.com/rudderlabs/rudder-shopify-tracker/blob/6d6dafc9c6bf255613cc9697f7ab645e83315937/deviceModeInit.js#L202)<br><br>Above code checks the whole HTML for anchor tags with `href` having `/products` and an `img` tag either at the parent or their sibling level. | \\-  |\n| Checkout Started | `form[action=\"/cart/add\"] [type=\"button\"]` and check for `checkout` or `buy` keywords in the button.<br><br>`form` element with `action=\"/cart/add\"` and `type = \"button\"` | `<form action= \"/cart/add\" class=”shopify-form”>`  <br>`<button type = \"button\" class = “shopify-addToCart”>Buy Now</button>`  <br>`</form>` |\n\n## FAQ\n\n#### I’m getting a Registration Failed/Updated Failed error when I enter the data plane URL and the write key. What should I do?\n\nWhen [configuring the RudderStack app in your Shopify store](#configuring-the-rudderstack-app-in-your-shopify-store), you need to enter your RudderStack data plane URL and the source write key obtained while [setting up the Shopify source in RudderStack](#configuring-the-shopify-source-in-rudderstack).\n\n[![Data plane URL and source write key](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-6.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-6.webp)\n\nIf you get a **Registrated Failed** or **Update Failed** error after entering the credentials, uninstall and reinstall the RudderStack app in your Shopify store and try again.\n\n#### Where can I find the RudderStack data plane URL?\n\nYou can find the data plane URL in the home page of your [RudderStack dashboard](https://app.rudderstack.com/):\n\n[![RudderStack data plane URL](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-data-plane-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-data-plane-url.webp)\n\n#### My app is behaving unexpectedly and no event is flowing. What should I do?\n\nYou can try deleting and reinstalling the app. If that does not work, you can [contact us](mailto:docs@rudderstack.com).\n\n#### How to track events from multiple stores?\n\nYou need to have the app installed and configured properly in each of the stores.\n\n#### Why does RudderStack not load the client-side SDK on all the Shopify store pages?\n\nIf you customize the page paths for a standard Shopify store, RudderStack will not be able to track user activity on them. This is a limitation of RudderStack’s client-side tracking capabilities. Hence, it is highly recommended **not** to make any drastic changes to your store structure.\n\n#### What is the difference between `browser_ip` and `requestIP`?\n\nThe `requestIP` is the IP address of the Shopify backend server which pushes data to RudderStack, while `browser_ip` is the user’s IP address.\n\n#### Is it possible to collect additional/custom fields from Shopify?\n\nYes, it is possible to collect additional/custom fields from Shopify by using `identify` and `track` calls.\n\nNote that the `rudderanalytics` object of JS SDK (for example, `rudderanalytics.track()` or `rudderanalytics.identify()`) is already loaded on the `window` object of the store where the app is installed. Hence, the `rudderanalytics` object should not be loaded separately to collect additional/custom fields from Shopify.\n\n#### How does RudderStack set the `userId`?\n\nRudderStack fetches Shopify’s `customerId` and uses it as `userId`.\n\n#### Does RudderStack persist `anonymousId` for future calls?\n\nRudderStack persists `anonymousId` throughout a user’s journey (from visiting the store to placing an order). After the user places the order, a new journey starts; RudderStack then sets a new `anonymousId` and persists it throughout that journey.\n\nAfter placing an order, the user/admin may sometimes need to update it. Hence, RudderStack persists the `anonymousId` for any post-order updates for up to 1 hour (tracked as server-side events).\n\n#### How can I differentiate between the data collected from Shopify Cloud (Webhooks) and Shopify Device (web device mode)?\n\nYou can differentiate between the data collected in cloud and device mode by looking at the signature in payload:\n\n*   In the [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode), RudderStack subscribes to the Shopify webhooks to consume data from Shopify. The data collected from Shopify cloud has the following signature in the payload:\n\n```\ncontext \": {....\n\"library\": {\n  \"name\": \"RudderStack Shopify Cloud\",\n  \"version\": \"1.0.0\"\n  }\n}\n```\n\n*   In [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode), RudderStack loads its JavaScript SDK on every Shopify store page for web tracking. The data collected from the Shopify device mode has the following signature in the payload:\n\n```\n\"context\": {\n  ....\n  \"library\": {\n    \"name\": \"RudderLabs JavaScript SDK\",\n    \"version\": \"2.4.2\"\n  }\n}\n```\n\n#### Do I need to update or reinstall the RudderStack app in Shopify to use the identity stitching feature?\n\nNo, you do not need to take any action to use the [identity stitching](#event-tracking-and-transformation) or [Skip `identify` call](#connection-settings) enhancements.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Shopify Source | RudderStack Docs",
    "description": "Ingest your event data from Shopify into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/clickup/",
    "markdown": "# ClickUp source | RudderStack Docs\n\nIngest your event data from ClickUp into RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[ClickUp](https://clickup.com/) is a productivity tool that lets you set up project workflows and tasks, and enable smooth cross-team collaboration.\n\nYou can use RudderStack’s [Webhook](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/webhook-source/) source to capture real-time updates from your ClickUp workspace and send that data to your preferred downstream destinations.\n\n## Getting started\n\nFollow these steps to set up a ClickUp webhook source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Webhook**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![ClickUp source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/clickup-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/clickup-webhook-url.webp)\n\n4.  Next, go to your [ClickUp dashboard](https://app.clickup.com/) and open the ClickUp [space](https://help.clickup.com/hc/en-us/articles/6309466958103-Spaces-overview) of your choice.\n5.  From the top-right side of the dashboard, click the **Automate** option and select **Add Automation**.\n\n[![ClickUp add automation](https://www.rudderstack.com/docs/images/event-stream-sources/clickup-add-automation.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/clickup-add-automation.webp)\n\n6.  Select the relevant ClickUp trigger from the dropdown under **When** for the automation to happen.\n7.  In the **Then** section, select **Call webhook** from the dropdown.\n8.  Enter the webhook URL copied in step 3, as shown below. You can also add specific fields in the event sent to the webhook.\n\n[![ClickUp source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/clickup-configure-automation.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/clickup-configure-automation.webp)\n\n9.  Finally, click **Create**.\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from ClickUp source and creates the resulting payload.\n\nA sample payload ingested by RudderStack when you create a new task in ClickUp is shown below:\n\n```\n{\n  \"event\": \"taskCreated\",\n  \"history_items\": [{\n      \"id\": \"2800763136717140857\",\n      \"type\": 1,\n      \"date\": \"1642734631523\",\n      \"field\": \"status\",\n      \"parent_id\": \"162641062\",\n      \"data\": {\n        \"status_type\": \"open\"\n      },\n      \"source\": null,\n      \"user\": {\n        \"id\": 183,\n        \"username\": \"Alex\",\n        \"email\": \"alex@example.com\",\n        \"color\": \"#7b68ee\",\n        \"initials\": \"A\",\n        \"profilePicture\": null\n      },\n      \"before\": {\n        \"status\": null,\n        \"color\": \"#000000\",\n        \"type\": \"removed\",\n        \"orderindex\": -1\n      },\n      \"after\": {\n        \"status\": \"to do\",\n        \"color\": \"#f9d900\",\n        \"orderindex\": 0,\n        \"type\": \"open\"\n      }\n    },\n    {\n      \"id\": \"2800763136700363640\",\n      \"type\": 1,\n      \"date\": \"1642734631523\",\n      \"field\": \"task_creation\",\n      \"parent_id\": \"162641062\",\n      \"data\": {},\n      \"source\": null,\n      \"user\": {\n        \"id\": 183,\n        \"username\": \"Alex\",\n        \"email\": \"alex@example.com\",\n        \"color\": \"#7b68ee\",\n        \"initials\": \"A\",\n        \"profilePicture\": null\n      },\n      \"before\": null,\n      \"after\": null\n    }\n  ],\n  \"task_id\": \"1vj37mc\",\n  \"webhook_id\": \"7fa3ec74-69a8-4530-a251-8a13730bd204\"\n}\n```\n\nRudderStack transforms the above payload into the following [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) payload:\n\n```\n{\n  \"type\": \"track\",\n  \"event\": \"webhook_source_event\",\n  \"properties\": {\n    \"event\": \"taskCreated\",\n    \"history_items\": [{\n        \"id\": \"2800763136717140857\",\n        \"type\": 1,\n        \"date\": \"1642734631523\",\n        \"field\": \"status\",\n        \"parent_id\": \"162641062\",\n        \"data\": {\n          \"status_type\": \"open\"\n        },\n        \"source\": null,\n        \"user\": {\n          \"id\": 183,\n          \"username\": \"Alex\",\n          \"email\": \"alex@example.com\",\n          \"color\": \"#7b68ee\",\n          \"initials\": \"A\",\n          \"profilePicture\": null\n        },\n        \"before\": {\n          \"status\": null,\n          \"color\": \"#000000\",\n          \"type\": \"removed\",\n          \"orderindex\": -1\n        },\n        \"after\": {\n          \"status\": \"to do\",\n          \"color\": \"#f9d900\",\n          \"orderindex\": 0,\n          \"type\": \"open\"\n        }\n      },\n      {\n        \"id\": \"2800763136700363640\",\n        \"type\": 1,\n        \"date\": \"1642734631523\",\n        \"field\": \"task_creation\",\n        \"parent_id\": \"162641062\",\n        \"data\": {},\n        \"source\": null,\n        \"user\": {\n          \"id\": 183,\n          \"username\": \"Alex\",\n          \"email\": \"alex@example.com\",\n          \"color\": \"#7b68ee\",\n          \"initials\": \"A\",\n          \"profilePicture\": null\n        },\n        \"before\": null,\n        \"after\": null\n      }\n    ],\n    \"task_id\": \"1vj37mc\",\n    \"webhook_id\": \"7fa3ec74-69a8-4530-a251-8a13730bd204\"\n  },\n  \"anonymousId\": \"12e90bef-e7c6-44c7-a09a-b9b5478630f7\"\n}\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To send this data to the downstream destinations, you need to transform it into a destination-specific format using RudderStack’s [Transformations](https://www.rudderstack.com/docs/transformations/overview/) feature. Refer to the below [use case](#use-case) for more information.\n\n## Use case\n\nConsider a scenario where a new contact is automatically created in HubSpot whenever a new assignee is added to a ClickUp task.\n\nTo do this, set up a ClickUp source by following the steps in the [Getting started](#getting-started) section above. Then, connect this source to the [HubSpot destination](https://www.rudderstack.com/docs/destinations/streaming-destinations/hubspot/).\n\nOnce the connection is set up, RudderStack automatically receives a payload from ClickUp whenever a new assignee is added to a ClickUp task. It then transforms the payload in the following format:\n\n```\n{\n  \"anonymousId\": \"38c5a078-c1ea-4024-9628-7f8971aeb915\",\n  \"event\": \"webhook_source_event\",\n  \"messageId\": \"cbd5e04a-8e0b-4bf9-959d-26c4d8e455b0\",\n  \"properties\": {\n    \"event\": \"taskAssigneeUpdated\",\n    \"history_items\": [{\n      \"after\": {\n        \"color\": \"#02579b\",\n        \"email\": \"alex@example.com\",\n        \"id\": 61217234,\n        \"initials\": \"A\",\n        \"profilePicture\": null,\n        \"username\": \"Alex\"\n      },\n      \"data\": {},\n      \"date\": \"1663044688239\",\n      \"field\": \"assignee_rem\",\n      \"id\": \"3141509348132974740\",\n      \"parent_id\": \"175476135\",\n      \"source\": null,\n      \"type\": 1,\n      \"user\": {\n        \"color\": \"#536cfe\",\n        \"email\": \"jane@doe.com\",\n        \"id\": 55300044,\n        \"initials\": \"JD\",\n        \"profilePicture\": null,\n        \"username\": \"Jane Doe\"\n      }\n    }],\n    \"task_id\": \"2rc0nvx\",\n    \"webhook_id\": \"3425a884-4f24-4d81-a373-1991c2d20743\"\n  },\n  \"rudderId\": \"0240a617-9492-47f8-ac5c-c842ab2cd9f4\",\n  \"type\": \"track\"\n}\n```\n\nTo automatically add a new contact in HubSpot for this event, you need to add the following user transformation and [connect it to your HubSpot destination](https://www.rudderstack.com/docs/transformations/overview/#connecting-transformation-to-a-destination):\n\n```\nexport function transformEvent(event, metadata) {\n  let indetifyEvent;\n\n  if (event.properties.event === \"taskAssigneeUpdated\") {\n    indetifyEvent = {\n      type: \"identify\",\n      userId: event.properties?.history_items[0]?.after?.id,\n      traits: {\n        email: event.properties?.history_items[0]?.after?.email\n      }\n    }\n  }\n  return indetifyEvent;\n}\n```\n\nRudderStack sends the following transformed event payload to HubSpot:\n\n```\n{\n  \"version\": \"1\",\n  \"type\": \"REST\",\n  \"method\": \"POST\",\n  \"endpoint\": \"https://api.hubapi.com/contacts/v1/contact/batch/\",\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer ******2b27\"\n  },\n  \"params\": {},\n  \"body\": {\n    \"JSON\": {},\n    \"JSON_ARRAY\": {\n      \"batch\": \"[{\\\"email\\\":\\\"alex@example.com\\\",\\\"properties\\\":[]}]\"\n    },\n    \"XML\": {},\n    \"FORM\": {}\n  },\n  \"files\": {}\n}\n```\n\nThe above payload then creates the contact in HubSpot.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "ClickUp source | RudderStack Docs",
    "description": "Ingest your event data from ClickUp into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-setup/",
    "markdown": "# Control plane setup | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "Control plane setup | RudderStack Docs",
    "description": "Set up your RudderStack Open Source control plane to manage your connections.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/",
    "markdown": "# Reverse ETL Sync Modes | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "Reverse ETL Sync Modes | RudderStack Docs",
    "description": "Learn about different sync modes to send data from reverse ETL sources to your destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/get-started/rudderstack-open-source/sending-test-events/",
    "markdown": "# Verify installation | RudderStack Docs\n\nVerify your RudderStack installation by sending test events.\n\n* * *\n\n*     3 minute read  \n    \n\nBefore using RudderStack, it is highly recommended to verify that your installation works as expected by sending some test events. You can use any of the following approaches:\n\n*   [Use the bundled shell script](#bundled-shell-script)\n*   [Use RudderStack’s HTTP API](#rudderstack-http-api)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This guide assumes that you have already installed and set up RudderStack in your preferred environment.\n\n## Bundled shell script\n\nThe [`rudder-server` GitHub repository](https://github.com/rudderlabs/rudder-server) contains a bundled shell script that generates test events. Clone the repository by running the following command:\n\n```\ngit clone https://github.com/rudderlabs/rudder-server.git\n```\n\nThen, follow the steps below to send test events.\n\n### Step 1: Get source write key\n\n#### RudderStack Open Source dashboard\n\nIf you have signed up for [RudderStack open source](https://app.rudderstack.com/signup?type=opensource), follow these steps:\n\n1.  Log in to your RudderStack Open Source dashboard.\n2.  Set up a source and connect it to a destination.\n3.  You can find the write key in the **Setup** tab of your source.\n\n[![RudderStack source write key](https://www.rudderstack.com/docs/images/rudderstack-open-source/write-key.webp)](https://www.rudderstack.com/docs/images/rudderstack-open-source/write-key.webp)\n\n#### Self-hosted control plane\n\nIf you are self-hosting the control plane using [Control Plane Lite](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/), follow these steps:\n\n1.  Set up a source and connect it to a destination.\n2.  Note the write key for the source:\n\n[![Control plane lite source write Key](https://www.rudderstack.com/docs/images/rudderstack-open-source/control-plane-lite-source-writekey.webp)](https://www.rudderstack.com/docs/images/rudderstack-open-source/control-plane-lite-source-writekey.webp)\n\n### Step 2: Send test events\n\nTo send test events, follow the steps in the sections below depending on your preferred setup:\n\n#### Local setup\n\n1.  Navigate to the folder where RudderStack is installed.\n2.  Run the following command:\n\n```\n./scripts/generate-event <WRITE_KEY> <DATA_PLANE_URL>/v1/batch\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Replace `<WRITE_KEY>` and `<DATA_PLANE_URL>` with your source write key and [data plane URL](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/faq/#data-plane-url).\n\n3.  Go to your source in the RudderStack Open Source dashboard and check the **Live Events** tab to verify if the events are delivered.\n\n[![Source live events](https://www.rudderstack.com/docs/images/rudderstack-open-source/source-live-events.webp)](https://www.rudderstack.com/docs/images/rudderstack-open-source/source-live-events.webp)\n\nAn example is shown below:\n\n[![Test Event](https://www.rudderstack.com/docs/images/rudderstack-open-source/test-event.webp)](https://www.rudderstack.com/docs/images/rudderstack-open-source/test-event.webp)\n\n#### Docker setup\n\n1.  Run the following command:\n\n```\ndocker exec -ti \\\n    <rudder-server-running-container-id> \\\n    ./scripts/generate-event <WRITE_KEY> <DATA_PLANE_URL>/v1/batch\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Replace `<WRITE_KEY>` and `<DATA_PLANE_URL>` with your source write key and [data plane URL](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/faq/#data-plane-url).\n\n2.  Go to your source in the RudderStack Open Source dashboard and check the **Live Events** tab to verify if the events are delivered.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Unlike RudderStack Open Source, the control plane set up using [Control Plane Lite](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/) does not support the **Live Events** feature.\n\nIf you supply an invalid source write key or data plane URL, you will get the following error:\n\n[![Test Event error](https://www.rudderstack.com/docs/images/rudderstack-open-source/test-event-error.webp)](https://www.rudderstack.com/docs/images/rudderstack-open-source/test-event-error.webp)\n\n## RudderStack HTTP API\n\nTo send test events using the [RudderStack HTTP API](https://www.rudderstack.com/docs/api/http-api/), follow these steps:\n\n1.  Import this [Postman collection](https://www.getpostman.com/collections/480307c55ad2b9dd4e27).\n2.  Edit the variables `source_write_key` and `data_plane_url` in this collection with your source write key and [data plane URL](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/faq/#data-plane-url).\n\nRudderStack uses **Basic Authentication** for authenticating all HTTP requests. The HTTP Basic Authentication requires a user name and password, where:\n\n*   Username is the `source_write_key`.\n*   Password is an empty string (`\"\"`).\n\n3.  Send the test API requests.\n4.  Go to your source in the RudderStack Open Source dashboard and check the **Live Events** tab to verify if the events are delivered.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Verify installation | RudderStack Docs",
    "description": "Verify your RudderStack installation by sending test events.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-unity-sdk/",
    "markdown": "# Unity SDK | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "Unity SDK | RudderStack Docs",
    "description": "Use the RudderStack Unity SDK to send event data from your games to various destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/signl4/",
    "markdown": "# SIGNL4 source | RudderStack Docs\n\nIngest your event data from SIGNL4 into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[SIGNL4](https://www.signl4.com/) is a tool for instant mobile alerting. It generates real-time alerts to inform teams about any incidents and automatically delivers critical information to the right people at the right time.\n\n## Getting started\n\nFollow these steps to set up your SIGNL4 source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **SIGNL4**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your SIGNL4 source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![SIGNL4 source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/signl4-source.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/signl4-source.webp)\n\n4.  Log into your [SIGNL4 account](https://connect.signl4.com/).\n5.  Go to **Teams** > **Developer**. Add a name and the **Webhook URL** under **Outbound Webhooks**:\n\n[![SIGNL4 source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/signl4-source-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/signl4-source-webhook.webp)\n\n6.  Finally, click **Add**.\n\n## Event transformation\n\nSIGNL4 acts as a webhook source and ingests all events mentioned in [SIGNL4 documentation](https://www.signl4.com/outbound-webhooks/#N10).\n\nEach event has a unique code present in the `eventType` property. The event name is mapped on the basis of this code, as explained below:\n\n| `eventType` code | Event name | SIGNL4 action |\n| --- | --- | --- |\n| 200 | New Alert Created | New alert created in SIGNL4. |\n| 201 | Alert Confirmed/Alert Resolved | Alert confirmed by the user. Alert resolved if the statusCode is 4. |\n| 202 | Alert Escalated | Alert escalated when not confirmed in specified time. |\n| 203 | Alert Annotated | Message/Annotation sent by the receiver for an alert. |\n| 300 | Duty Period Started | Duty period started for a team. |\n| 301 | Duty Period Ended | Duty period ended for a team. |\n| 302 | Somebody Punched-In | When a team member comes on duty. |\n| 303 | Somebody Punched-Out | When a team member goes off duty. |\n| Any other | Alert Updated | Default behavior. |\n\nRudderStack ingests the SIGNL4 events after converting them into the RudderStack event format. It also maps the following properties from the SIGNL4 event payload to the RudderStack properties:\n\n| SIGNL4 property | RudderStack property |\n| --- | --- |\n| `eventType` | `event` |\n| `eventRaisedUtc` | `originalTimestamp` |\n| `user.id` | `context.externalId` |\n| `id` | `messageId` |\n| `team.id` | `properties.team.id` |\n| `annotation.message` | `properties.annotation.message` |\n| `annotation.id` | `properties.annotation.id` |\n| `alert.eventId` | `properties.alert.eventId` |\n| `alert.id` | `properties.alert.id` |\n| `alert.externalEventId` | `properties.alert.externalEventId` |\n| `alert.statusCode` | `properties.alert.statusCode` |\n| `user.username` | `context.traits.name` |\n| `user.mailaddress` | `context.traits.email` |\n| `subscription.id` | `properties.subscription.id` |\n| `alert.acknowledgedUserIds` | `properties.alert.acknowledgedUserIds` |\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from SIGNL4 source and creates the resulting payload.\n\nA sample payload sent by SIGNL4 is shown below:\n\n```\n{\n  \"eventType\": 203,\n  \"eventRaisedUtc\": \"2018-04-17T15:00:32Z\",\n  \"subscription\": {\n    \"id\": \"1578ebd9-0a27-44ab-bc8e-52cd7d32e81d\"\n  },\n  \"user\": {\n    \"username\": \"Alex\",\n    \"mailaddress\": \"alex@signl4.com\",\n    \"id\": \"f0bd5063-9588-51cf-b3d9-94e5647dedc5\"\n  },\n  \"alert\": {\n    \"statusCode\": 0,\n    \"eventId\": \"2518783235949759942_fbc7b4a4-badd-47b8-9e1d-702fb6a1a0b2\",\n    \"externalEventId\": \"INC091210\",\n    \"id\": \"2518783235958846071_4e2dfab2-4717-42bc-8d37-8682402309c2\"\n  },\n  \"annotation\": {\n    \"message\": \"OK, I'll take care about it.\",\n    \"id\": \"2518783235661483318_99ebffe0-1b90-40ef-990a-fbd842484761\"\n  },\n  \"id\": \"141c0f88-7831-4d5e-b055-f6e83c269770\"\n}\n```\n\nRudderStack transforms the above payload into the following [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) payload:\n\n```\n{\n  \"type\": \"track\",\n  \"event\": \"Alert Annotated\",\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"traits\": {\n      \"name\": \"Alex\",\n      \"email\": \"alex@signl4.com\"\n    },\n    \"externalId\": [{\n      \"type\": \"signl4UserId\",\n      \"id\": \"f0bd5063-9588-51cf-b3d9-94e5647dedc5\",\n    }],\n    \"integration\": {\n      \"name\": \"SIGNL4\"\n    }\n  },\n  \"messageId\": \"141c0f88-7831-4d5e-b055-f6e83c269770\",\n  \"originalTimestamp\": \"2017-09-01T08:11:37.000Z\",\n  \"properties\": {\n    \"alert.statusCode\": 0,\n    \"alert.eventId\": \"2518783235949759942_fbc7b4a4-badd-47b8-9e1d-702fb6a1a0b2\",\n    \"alert.externalEventId\": \"INC091210\",\n    \"alert.id\": \"2518783235958846071_4e2dfab2-4717-42bc-8d37-8682402309c2\",\n    \"subscription.id\": \"183f8d00-3bb8-4636-9a8f-89d6af26374a\",\n    \"annotation.id\": \"2518783235661483318_99ebffe0-1b90-40ef-990a-fbd842484761\",\n    \"message\": \"OK, I'll take care of it.\"\n  },\n  \"anonymousId\": \"6f0a3dc76a335860e17fa1d8ab779742e2ca\",\n  \"integrations\": {\n    \"SIGNL4\": false\n  }\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "SIGNL4 source | RudderStack Docs",
    "description": "Ingest your event data from SIGNL4 into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/get-started/rudderstack-open-source/faq/",
    "markdown": "# RudderStack Open Source FAQ | RudderStack Docs\n\nTroubleshoot problems encountered while setting up and using RudderStack Open Source.\n\n* * *\n\n*     4 minute read  \n    \n\nFor questions and issues not listed in this guide, you can start a conversation in the [RudderStack Slack Community](https://rudderstack.com/join-rudderstack-slack-community).\n\n## General\n\n#### Why do I need to sign up to use RudderStack Open Source?\n\nSigning up for [RudderStack Open Source](https://app.rudderstack.com/signup?type=opensource) is the easiest way to set up and manage your data pipelines. RudderStack Open Source offers an intuitive dashboard that is only used for source-destination configuration. It also provides features like [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) for observability and debugging purposes and [Transformations](https://www.rudderstack.com/docs/transformations/overview/) to enhance your in-transit event data.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack does not persist any of your data.\n\nIf you do not wish to sign up for RudderStack Open Source and want to self-host your configurations, you can use the [Control Plane Lite](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/) utility.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   Control Plane Lite is now deprecated and does not work with the latest `rudder-server` versions (after v1.2).\n> *   Control Plane Lite does not support features like [Transformations](https://www.rudderstack.com/docs/transformations/overview/) and [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/).\n\n#### What is a workspace token? Where do I get it?\n\nThe workspace token is a unique identifier of your RudderStack workspace.\n\nTo get your workspace token, go to **Settings** > **Workspace**. The workspace token is present in the **General** tab.\n\n[![Workspace Token](https://www.rudderstack.com/docs/images/rs-cloud/workspace-token.webp)](https://www.rudderstack.com/docs/images/rs-cloud/workspace-token.webp)\n\nTo view the workspace token, click the show icon and enter the password associated with your RudderStack account.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> By default, the workspace token is hidden for security purposes. You must have [administrative privileges](https://www.rudderstack.com/docs/dashboard-guides/user-management/#organization-roles) to access the workspace token.\n\n## Data plane setup\n\n#### What is a data plane URL? Where do I get it?\n\nFor processing and routing your events, RudderStack requires a **data plane URL**. See [Data plane architecture](https://www.rudderstack.com/docs/resources/rudderstack-architecture/#data-plane-architecture) for more information.\n\nFor RudderStack Open Source, you are required to [set up your own data plane](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/data-plane-setup/). A data plane URL typically looks like `http:localhost:8080`, where `8080` is the port where your RudderStack data plane is hosted.\n\n#### How do I check the status of the data plane?\n\nThe format of the command to check your data plane status is:\n\n```\ncurl <DATA_PLANE_URL>/health\n```\n\nA sample command that checks the status of the data plane hosted at port `8080`:\n\n```\ncurl http://localhost:8080/health\n```\n\nYou will get the following output:\n\n```\n{\"server\":\"UP\", \"db\":\"UP\",\"acceptingEvents\":\"TRUE\",\"routingEvents\":\"TRUE\",\"mode\":\"NORMAL\",\"goroutines\":\"15364\", \"backendConfigMode\": \"API\", \"lastSync\":\"2020-12-01T04:20:33Z\", \"lastRegulationSync\":\"2020-11-30T21:40:27Z\"}\n```\n\n#### What are the Normal and Degraded modes when running the RudderStack server?\n\nThe RudderStack server (backend) supports two running modes:\n\n*   **Normal** (`\"mode\": \"NORMAL\"`): In this mode, the RudderStack server runs as expected and there are no issues.\n*   **Degraded** (`\"mode\": \"DEGRADED\"`): RudderStack enters the degraded mode if it keeps crashing while processing the events after a threshold restart number is reached. RudderStack still receives and stores the events in degraded mode but does not process them and route them to your specified destinations.\n\nFor more information on these modes, see [RudderStack High Availability](https://www.rudderstack.com/docs/user-guides/administrators-guide/high-availability/).\n\n#### Can I set up multiple instances of RudderStack data plane?\n\nSetting up multiple instances of RudderStack is not recommended. It can cause concurrent requests to your warehouse, leading to event failures and retries. It can also increase your costs in the case of data warehouses like Snowflake, BigQuery, etc.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> When sending events to your warehouse destinations using RudderStack Open Source, every node (data plane instance) runs the warehouse sync operations individually.\n\n#### While running `git submodule update`, I get this error:\n\n```\nPlease make sure you have the correct access rights and the repository exists.\nfatal: clone of 'git@github.com:rudderlabs/rudder-transformer.git' into submodule path '/home/ubuntu/rudder-server/rudder-transformer' failed\nFailed to clone 'rudder-transformer'. Retry scheduled.\nCloning into '/home/ubuntu/rudder-server/rudder-transformer'...\ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\n```\n\nVerify if you have correctly set the SSH keys in your GitHub account as they are used when cloning using the git protocol.\n\nFor more information, see this [Stack Overflow thread](https://stackoverflow.com/questions/25957125/git-submodule-permission-denied).\n\n#### How do I verify my RudderStack installation?\n\nYou can verify your RudderStack installation by sending test events and checking if they are delivered correctly. For more information, see [Verifying installation](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/sending-test-events/).\n\n#### My RudderStack setup keeps creating a new database automatically. What could be the reason?\n\nThis can happen if you have changed your [workspace token](https://www.rudderstack.com/docs/dashboard-guides/overview/#workspace-token). Also, ensure that the RudderStack server is running on the latest version.\n\n#### For Docker setup, is there a recommended size for the EC2 instance?\n\nA **c4.xlarge** or **c4.2xlarge** machine should work just fine for your Docker setup.\n\n#### I’m running RudderStack on Docker in a GCP VM instance. I upgraded the instance to have more CPU and now the RudderStack container is stuck on this message:\n\n```\nsh -c '/wait-for db:5432 -- /rudder-server'\n```\n\nThis message indicates that the RudderStack server is waiting on the PostgreSQL database dependency to be up and running. Verify if your PostgreSQL container is up.\n\n## Control plane setup\n\n#### I am using the Control Plane Lite to generate the `workspaceConfig.json` file. But when I import this file, I get the error:\n\n```\nTypeError: Cannot read property 'name' of undefined\"\n```\n\nThis issue can occur when you have some old data left in your browser’s local storage. Clear your browser cache and local storage and retry.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "RudderStack Open Source FAQ | RudderStack Docs",
    "description": "Troubleshoot problems encountered while setting up and using RudderStack Open Source.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-unity-sdk/v1/",
    "markdown": "# Unity SDK v1 | RudderStack Docs\n\nUse the RudderStack Unity SDK to send event data from your games to various destinations.\n\n* * *\n\n*     6 minute read  \n    \n\nSee the [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-unity) to get a more hands-on understanding of the SDK.\n\n## SDK setup requirements\n\nTo set up the RudderStack Unity SDK, the following prerequisites must be met:\n\n*   You need to set up a [RudderStack account](https://app.rudderstack.com/signup).\n*   Once signed up, [set up a Unity source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the dashboard. You should be able to see a **Write Key** for this source, as shown below:\n\n[![Unity source write key](https://www.rudderstack.com/docs/images/event-stream-sources/unity-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/unity-write-key-new.webp)\n\n*   You will also need a data plane URL. Refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) for more information on the data plane URL and where to find it.\n*   Finally, download and install the [Unity development kit](https://store.unity.com/download).\n\n## Installing the Unity SDK\n\nFollow these steps to integrate the RudderStack Unity SDK with your project:\n\n*   Download `rudder-sdk-unity.unitypackage` from our [GitHub repository](https://github.com/rudderlabs/rudder-sdk-unity/raw/master/SDK/rudder-sdk-unity.unitypackage).\n*   Import the downloaded package to your project. From the **Assets** menu, go to **Import Package** - **Custom Package…** as shown:\n\n[![Importing the downloaded package](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-2.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-2.webp)\n\n*   Select `rudder-sdk-unity.unitypackage` from the downloaded location and click **Open**:\n\n[![Selecting the Unity package for integration](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-3.webp)\n\n*   Click `Import` in the import popup as shown:\n\n[![Importing the Unity package](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-4.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-4.webp)\n\n## Initializing the RudderStack client\n\nTo initialize the RudderStack client, follow these steps:\n\n*   Add the `import` to all files where you wish to use `RudderClient` .\n\n*   Then, add the following code in the `Awake` method of your main `GameObject` Script:\n\n```\n// Critical for iOS Applications where multiple components are using SQLite\n// This has no effect for Android, but can be added as a safety check\nRudderClient.SerializeSqlite();\n\n// Build your config\nRudderConfigBuilder configBuilder = new RudderConfigBuilder()\n    .WithDataPlaneUrl(DATA_PLANE_URL);\n    .WithLogLevel(RudderLogLevel.VERBOSE)\n\n// get instance for RudderClient\nRudderClient rudderClient = RudderClient.GetInstance(\n    WRITE_KEY,\n    configBuilder.Build()\n);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you are building an iOS project, `RudderClient.SerializeSqlite()` is important to handle races with SQLite.\n\n## Configuring your RudderStack client\n\nYou can configure your client based on the following parameters using `RudderConfigBuilder`:\n\n| Parameter | Type | Description | Default value |\n| --- | --- | --- | --- |\n| `logLevel` | Integer | Controls how much of the log you want to see from the SDK. | `RudderLogLevel.INFO` |\n| `dataPlaneUrl` | String | Your data plane URL. | `https://hosted.rudderlabs.com` |\n| `flushQueueSize` | Integer | Number of events in a batch request to the RudderStack server. | `30` |\n| `dbThresholdCount` | Integer | Number of events to be saved in the `SQLite` database. Once the limit is reached, older events are deleted from the database. | `10000` |\n| `sleepcount` | Integer | Minimum waiting time to flush the events to the RudderStack server. The minimum value can be set to `1 second`. | `10 seconds` |\n| `configRefreshInterval` | Integer | The SDK will fetch the config from `dashboard` after the specified time. | `2 hours` |\n| `trackLifecycleEvents` | Boolean | Determines if the SDK will automatically capture the application lifecycle events. | `true` |\n| `recordScreenViews` | Boolean | Determines if the SDK will automatically capture the screen view events. | `false` |\n| `autoCollectAdvertId` | Boolean | Determines if the SDK will collect the advertisement ID. | `false` |\n| `controlPlaneUrl` | String | Change this parameter **only if** you are self-hosting the control plane. Check the [Self-hosted control plane](#self-hosted-control-plane) section below for more information. The SDK will add `/sourceConfig` along with this URL to fetch the source configuration. | [https://api.rudderlabs.com](https://api.rudderlabs.com/) |\n\n### Self-hosted control plane\n\nIf you are using a device mode destination like Adjust, Firebase, etc., the Unity SDK needs to fetch the required configuration from the control plane. If you are using the [Control plane lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) utility to host your own Control Plane, then follow the steps in [this section](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/#using-sdk-sources-set-up-in-self-hosted-control-plane) and specify `controlPlaneUrl` in your `RudderConfigBuilder` that points to your hosted source configuration file.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You should not pass the `controlPlaneUrl` parameter during the SDK initialization if you are using the [RudderStack Cloud dashboard](https://app.rudderstack.com/). This parameter is supported only if you are using the open source [Control Plane Lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) utility to self-host your control plane.\n\n## Identify\n\nThe Unity SDK captures the `deviceId` and uses that as the `anonymousId` for identifying the user. This helps in tracking the users across the application installation. To attach more information to the user, you can use the `identify` method. Once the SDK identifies the user, it persists and passes the user information to the subsequent calls.\n\nTo reset the user identification, you can use the `reset` method.\n\nRudderStack provides some pre-defined APIs for building the `RudderTraits` object like `PutEmail()`, `PutAge()`, etc. These APIs can be used to set the values of the standard traits by directly passing them as parameters.\n\nFor the custom traits which do not have any pre-defined API, you can use the `Put()` method and pass a key-value pair of the trait, as shown in the sample `identify` event below:\n\n```\nRudderMessage identifyMessage = new RudderMessageBuilder().Build();\nRudderTraits traits = new RudderTraits();\n//pre-defined API's for inserting standard traits\ntraits.PutEmail(\"alex@example.com\");\ntraits.PutAge(\"40\");\n//Put API to insert custom traits\ntraits.Put(\"location\", \"New Orleans\");\ntraits.Put(\"gender\", \"Male\");\ntraits.Put(\"consent\", \"Granted\");\nrudderClient.Identify(\"some_user_id\", traits, identifyMessage);\n```\n\n### Overriding `anonymousId` using `setAnonymousId`\n\nYou can explicitly set the `anonymousId` for all future events using the `setAnonymousId()` method:\n\n```\nrudderClient.setAnonymousId(\"anonymousID1\");\n```\n\n## Track\n\nYou can record the users’ in-game activity through the `track` method. Every user action is called an **event**.\n\nA sample `track` event is as shown:\n\n```\n// create event properties\nDictionary<string, object> eventProperties = new Dictionary<string, object>();\neventProperties.Add(\"test_key_1\", \"test_value_1\");\neventProperties.Add(\"test_key_2\", \"test_value_2\");\n\n// create user properties\nDictionary<string, object> userProperties = new Dictionary<string, object>();\nuserProperties.Add(\"test_u_key_1\", \"test_u_value_1\");\nuserProperties.Add(\"test_u_key_2\", \"test_u_value_2\");\n\n// create message to track\nRudderMessageBuilder builder = new RudderMessageBuilder();\nbuilder.WithEventName(\"test_event_name\");\nbuilder.WithUserId(\"test_user_id\");\nbuilder.WithEventProperties(eventProperties);\nbuilder.WithUserProperties(userProperties);\n\nrudderClient.Track(builder.Build());\n```\n\n```\n// create message to track\nRudderMessageBuilder builder = new RudderMessageBuilder();\nbuilder.WithEventName(\"test_event_name\");\nbuilder.WithUserId(\"test_user_id\");\nbuilder.WithEventProperty(\"foo\", \"bar\");\nbuilder.WithUserProperty(\"foo1\", \"bar1\");\n\nrudderClient.Track(builder.Build());\n```\n\n## Screen\n\nThe `screen` call lets you record the user activities on their mobile screen with any additional relevant information about the viewed screen.\n\nA sample `screen` event is as shown:\n\n```\n// create screen properties\nDictionary < string, object > screenProperties = new Dictionary < string, object > ();\nscreenProperties.Add(\"key_1\", \"value_1\");\nscreenProperties.Add(\"key_2\", \"value_2\");\n\nRudderMessageBuilder screenBuilder = new RudderMessageBuilder();\nscreenBuilder.WithEventName(\"Home Screen\");\nscreenBuilder.WithEventProperties(screenProperties);\nrudderClient.Screen(screenBuilder.Build());\n```\n\n## Reset\n\nThe `reset` method clears all persisted traits of the previously identified user.\n\n## Upgrading the SDK\n\nTo upgrade the SDK, remove all files related to the SDK from the `Plugins` folder. Also, remove the `Rudder` folder completely before importing a newer version of the SDK.\n\nYou can find the following files in the **Plugins** folder for the SDK:\n\n*   `Plugins/Android/unity-plugin-release.aar`\n*   `Plugins/iOS/RudderSDKUnity`\n\n## Advertisement ID\n\nRudderStack collects the advertisement ID **only** if `withAutoCollectAdvertId` is explicitly set to `true` during the [SDK initialization](#initializing-the-rudderstack-client):\n\n```\nRudderConfigBuilder configBuilder = new RudderConfigBuilder()\n    .WithDataPlaneUrl(DATA_PLANE_URL);\n    .WithLogLevel(RudderLogLevel.VERBOSE)\n    .withAutoCollectAdvertId(true);\n```\n\n## Tracking application lifecycle events on the Android platform\n\nThe Unity SDK automatically tracks the [Application Lifecycle Events](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/) to get insights into the app metrics like installs, opens, updates, etc. However, you can disable the automatic tracking by setting the `withTrackLifecycleEvents` parameter to `false`:\n\n```\nRudderConfig config = new RudderConfigBuilder()\n  .WithTrackLifecycleEvents(false)\n```\n\nTo track the application life cycle events on the Android platform, you need to add the `RudderPreferbs.prefab` file from the path `Assets/Rudder/RudderPreferbs.prefab` to every scene in your Unity app. Also, ensure that the `RudderPreferbs.prefab` is linked to the `RudderClient.cs` script.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The Unity SDK depends on the lifecycle method `onApplicationFocus` of the [`MonoBehaviour` class](https://docs.unity3d.com/ScriptReference/MonoBehaviour.html) to determine the **Application Opened** and **Application Backgrounded** events on the Android platform.\n> \n> Hence, when an application is brought to focus, an `Application Opened` event is sent, and when the application is moved out of focus, an `Application Backgrounded` event is sent. So, these events might be triggered even before the RudderStack SDK gets initialized to create the actions and execute them once the SDK is initialized.\n\n## Triggering Application Updated lifecycle event\n\nThe following requirements must be met to ensure that the **Application Updated** lifecycle event is triggered:\n\n*   **For iOS**: Make sure the `Bundle version` in the `Info.plist` file of your application is incremented. If the `Bundle version` of your `target` points to the `Bundle version` of your `project`, then increment it.\n*   **For Android**: Make sure the `versionCode` in the `defaultConfig` object nested in the `android` object of your app’s `build.gradle` is incremented.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n\n## FAQ\n\n#### Do I need to add anything to my Android ProGuard rules?\n\nIf you are facing any event delivery issues in your production environment, verify if you have added the following line in your ProGuard rules:\n\n```\n-keep class com.rudderstack.android.** { *; }\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Unity SDK v1 | RudderStack Docs",
    "description": "Use the RudderStack Unity SDK to send event data from your games to various destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/reverse-etl/sync-schedule-settings/",
    "markdown": "# Sync Schedule Settings | RudderStack Docs\n\nSynchronize reverse ETL sources on a schedule.\n\n* * *\n\n*     3 minute read  \n    \n\nRudderStack lets you set a schedule for importing data from your Reverse ETL sources while setting them up in your dashboard. It lets you specify the schedule type that defines how and when the syncs will run.\n\nRudderStack supports the following three schedule types:\n\n| Schedule type | Description |\n| --- | --- |\n| Basic | Run syncs at a given time interval and specified time. |\n| CRON | Run syncs based on a CRON expression defined by the user. |\n| Manual | Run syncs manually. |\n\n## Basic\n\nThis schedule type lets you run the data syncs at a set interval. You can specify the sync frequency as well as the time(in UTC) when you want the sync to start.\n\n[![Basic sync schedule](https://www.rudderstack.com/docs/images/warehouse-actions-sources/sync-schedule-basic.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/sync-schedule-basic.webp)\n\n*   **Frequency** - You can choose the data sync frequency from the following options:\n    \n    *   5 minutes\n    *   10 minutes\n    *   15 minutes\n    *   30 minutes\n    *   1 hour\n    *   3 hours\n    *   6 hours\n    *   12 hours\n    *   24 hours\n*   **Sync Starting At** - Specify the time at which the data sync should start.\n    \n\n## CRON\n\nThis schedule type lets you define a custom CRON expression and runs the data syncs based on this setting.\n\n[![CRON schedule](https://www.rudderstack.com/docs/images/warehouse-actions-sources/sync-schedule-cron.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/sync-schedule-cron.webp)\n\nNote that the sync frequency specified under **Run Settings** needs to be greater than or equal to 5 minutes. Otherwise, you will encounter an error as shown below:\n\n[![CRON schedule error](https://www.rudderstack.com/docs/images/retl-sources/cron-error.webp)](https://www.rudderstack.com/docs/images/retl-sources/cron-error.webp)\n\n## Manual\n\nThis schedule type lets you run your data syncs manually. RudderStack won’t sync the data until you explicitly trigger it.\n\nTo trigger a sync manually, go to the **Syncs** tab in your Reverse ETL connections page and click **Sync Now**:\n\n[![Trigger manual syncs](https://www.rudderstack.com/docs/images/retl-sources/trigger-manual-sync.webp)](https://www.rudderstack.com/docs/images/retl-sources/trigger-manual-sync.webp)\n\n## Sync modes behavior\n\nThe following sections explain the behavior of the two sync modes(Upsert and Mirror) when a sync schedule is set in RudderStack.\n\n### Upsert mode\n\nFor [upsert mode](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/#upsert), you can trigger a new sync anytime by pressing the **Sync Now** button. Multiple syncs can run simultaneously.\n\n### Mirror mode\n\nFor [mirror mode](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/#mirror-mode), you can run only one sync at any given point of time. A new sync starts only after the previous one is completed.\n\nSuppose you have a sync scheduled for every 30 minutes. If there is a sync running for more than 30 minutes, then the next scheduled sync will be skipped when using the mirror mode.\n\n## FAQ\n\n#### **Can I change my sync schedule type?**\n\nYes, you can.\n\n1.  Go to the **Settings** tab of your Reverse ETL connection details page and click the edit icon next to **Schedule**:\n\n[![Change sync schedule](https://www.rudderstack.com/docs/images/retl-sources/schedule-type.webp)](https://www.rudderstack.com/docs/images/retl-sources/schedule-type.webp)\n\n2.  Then, select your new sync schedule type.\n\n#### **What happens if I don’t set the Sync Starting At time?**\n\nRudderStack considers strict time windows to schedule syncs if you do not explicitly set the time under **Sync Starting At**.\n\nSuppose you create a source at 12:30 hrs UTC, specify the **Frequency** as 3 hours, and do not specify any time under **Sync Starting At**. In this case, as the time falls in the 12:00-13:00 time window, RudderStack will run the next sync at 15:00 hrs UTC (12:00 + 03:00 = 15:00 hrs).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Sync Schedule Settings | RudderStack Docs",
    "description": "Synchronize reverse ETL sources on a schedule.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/data-pipelines/overview/",
    "markdown": "# Data Pipelines Overview | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "Data Pipelines Overview | RudderStack Docs",
    "description": "Collect, unify, and activate your data using RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/reverse-etl/airflow-provider/",
    "markdown": "# Schedule and Trigger Reverse ETL Syncs with Airflow Provider\n\nSchedule and trigger Reverse ETL syncs programmatically with RudderStack’s Airflow provider.\n\n* * *\n\n*     4 minute read  \n    \n\nRudderStack’s Airflow Provider lets you programmatically schedule and trigger your [Reverse ETL](https://www.rudderstack.com/docs/sources/reverse-etl/) syncs from outside RudderStack and integrate them with your existing Airflow workflows.\n\nFor more information on the codebase and sample implementation, see the [GitHub Repository](https://github.com/rudderlabs/rudder-airflow-provider).\n\n## Prerequisites\n\nTo use the Airflow Provider, you must have a working Apache Airflow installation. For more information, see the [Airflow documentation](https://airflow.apache.org/docs/apache-airflow/stable/installation/index.html).\n\nFollow the steps in the below sections to use the RudderStack Airflow Provider:\n\n## Run Airflow\n\nInitialize all dependencies by running Apache Airflow via the following command:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The Airflow standalone server is not meant for use in production. It is highly recommended using alternate methods to install and run Airflow in a production environment.\n\n## Install Airflow Provider\n\nInstall the RudderStack Airflow Provider by running the following command:\n\n```\npip install rudderstack-airflow-provider\n```\n\n## Create Airflow connection\n\nTo create a new Airflow connection, follow these steps:\n\n1.  In your Airflow dashboard, go to **Admin** > **Connections**:\n\n[![Airflow dashboard Connections option](https://www.rudderstack.com/docs/images/warehouse-actions-sources/airflow-provider-1.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/airflow-provider-1.webp)\n\n2.  Add a new connection by configuring the following details:\n\n[![Airflow dashboard edit connection](https://www.rudderstack.com/docs/images/warehouse-actions-sources/airflow-provider-2.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/airflow-provider-2.webp)\n\n*   **Connection ID**: Specify a unique connection name. `RudderstackRETLOperator` will pick the connection with the name `rudderstack_default` by default. If you have created a connection with a different name, make sure that name is passed as a parameter to `RudderstackRETLOperator`.\n*   **Connection Type**: For this field, select **HTTP** from the list.\n*   **Host**: Set the value for this field depending on your region:\n\n```\nhttps://api.rudderstack.com\n```\n\n```\nhttps://api.eu.rudderstack.com\n```\n\n*   **Password**: Enter your [Personal Access Token](https://www.rudderstack.com/docs/dashboard-guides/personal-access-token/).\n\n## Define a DAG\n\nNext, define a DAG with the tasks as per your requirement.\n\nThe following code snippet highlights an Airflow DAG with one task named `rs_trigger_sync` for the Reverse ETL connection ID `20dQV6yuUDUw31peWA8f7xxgHdN`:\n\nFor more information on obtaining the connection ID, see the [FAQ](#faq) section below:\n\n```\nfrom datetime import datetime, timedelta\n\nfrom airflow import DAG\nfrom rudder_airflow_provider.operators.rudderstack import RudderstackRETLOperator\n\ndefault_args = {\n    'owner': 'airflow',\n    'depends_on_past': False,\n    'email': ['airflow@example.com'],\n    'email_on_failure': False,\n    'email_on_retry': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=5)\n}\n\nwith DAG(\n    'rudderstack-sample',\n    default_args=default_args,\n    description='A simple tutorial DAG',\n    schedule_interval=timedelta(days=1),\n    start_date=datetime(2021, 1, 1),\n    catchup=False,\n    tags=['rs']\n) as dag:\n    rs_operator = RudderstackRETLOperator(\n        retl_connection_id='2aiDQzMqP6LNuUokWstmaubcZOP',\n        task_id='rs_trigger_sync',\n        connection_id='rudderstack_default',\n        sync_type='incremental',\n        wait_for_completion=True\n    )\n```\n\nThe `RudderstackRETLOperator` parameters are described below:\n\n| Parameter | Description | Type | Default value |\n| --- | --- | --- | --- |\n| `retl_connection_id` | Valid RudderStack Reverse ETL connection ID. | String (templatable) | \\-  |\n| `task_id` | Unique task ID within a DAG | String | \\-  |\n| `connection_id` | Airflow connection ID used for connecting to the RudderStack API | String | `rudderstack_default` |\n| `sync_type` | Type of sync to trigger | String (templatable)<br><br>**Note**: Acceptable values are `full` and `incremental`. | `incremental` |\n| `wait_for_completion` | Determines whether to wait for the sync to complete. | Boolean | `False` |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> `RudderStackOperator` is deprecated. Use `RudderstackRETLOperator` for Reverse ETL connections.\n\n```\nfrom datetime import datetime, timedelta\n\nfrom airflow import DAG\nfrom rudder_airflow_provider.operators.rudderstack import RudderstackOperator\n\ndefault_args = {\n    'owner': 'airflow',\n    'depends_on_past': False,\n    'email': ['airflow@example.com'],\n    'email_on_failure': False\n}\n\nwith DAG(\n    'rudderstack-sample',\n    default_args=default_args,\n    description='A simple tutorial DAG',\n    schedule_interval=timedelta(days=1),\n    start_date=datetime(2021, 1, 1),\n    catchup=False,\n    tags=['rs']\n) as dag:\n    rs_operator = RudderstackOperator(\n        source_id='20dQV6yuUDUw31peWA8f7xxgHdN',\n        connection_id='rudderstack_sync_conn',\n        task_id='rs_trigger_sync',\n        wait_for_completion='False'\n    )\n```\n\nThe `RudderstackOperator` parameters are described below:\n\n| Parameter | Description | Type | Default value |\n| --- | --- | --- | --- |\n| `source_id` | Valid RudderStack source ID. | String | \\-  |\n| `task_id` | Unique task ID within a DAG | String | \\-  |\n| `connection_id` | Airflow connection ID used for connecting to the RudderStack API | String | `rudderstack_default` |\n| `wait_for_completion` | Determines whether to wait for the sync to complete. | Boolean | `False` |\n\n### Run a DAG\n\nOnce you have defined a DAG and configured an Airflow connection, run the following commands to allow Airflow to pick up and run the DAG:\n\n```\nexport AIRFLOW_HOME=</path/to/airflow_home>\nmkdir $AIRFLOW_HOME/dags\ncp rudderstack_dag.py $AIRFLOW_HOME/dags\n```\n\n**Make sure the Airflow scheduler is running in the background**. Also, you must enable the DAG in the Airflow dashboard:\n\n[![enabling Airflow DAG in dashboard](https://www.rudderstack.com/docs/images/warehouse-actions-sources/airflow-provider-3.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/airflow-provider-3.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can trigger a DAG by clicking on the play button on the right as seen above, and selecting **Trigger DAG**. Note that **stopping the DAG will not cancel the ongoing sync**.\n\n## FAQ\n\n#### **Where can I find the connection ID for my Reverse ETL connection?**\n\nThe connection ID is a unique identifier for any Reverse ETL connection set up in RudderStack.\n\nTo obtain the connection ID, click the destination connected to your Reverse ETL source and go to the **Settings** tab.\n\n[![connection ID for Reverse ETL](https://www.rudderstack.com/docs/images/retl-sources/connection-id.webp)](https://www.rudderstack.com/docs/images/retl-sources/connection-id.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Schedule and Trigger Reverse ETL Syncs with Airflow Provider | RudderStack Docs",
    "description": "Schedule and trigger Reverse ETL syncs programmatically with RudderStack's Airflow provider.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/customerio/",
    "markdown": "# Customer.io Source | RudderStack Docs\n\nIngest your event data from Customer.io into RudderStack.\n\n* * *\n\n*     5 minute read  \n    \n\n[Customer.io](https://customer.io/) is a popular marketing platform for sending targeted emails and push and SMS notifications to improve customer engagement and thereby the overall conversion rate.\n\nYou can send your Customer.io events by adding a webhook that points to RudderStack. These events include email-related actions such as email delivered, opened, bounced, and more.\n\nThis guide will help you set up Customer.io as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Customer.io source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Customer.io**.\n2.  Assign a name to your source and click **Continue**.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> To connect this source to a RudderStack warehouse destination, the source name should match the name of your warehouse schema.\n\n3.  Your Customer.io source is now configured. Go to the **Settings** tab and note the **Webhook URL**.\n\n[![Customer.io webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/customerio-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/customerio-webhook-url.webp)\n\n4.  Go to your Customer.io dashboard. From the sidebar, go to the **Integrations** page and look for **Reporting Webhooks**:\n\n[![Customer.io reporting webhooks](https://www.rudderstack.com/docs/images/event-stream-sources/customerio-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/customerio-3.webp)\n\n5.  Click **Add Webhook** and add the webhook URL obtained in **Step 3**. The URL should be of the following format:\n\n```\n<DATA_PLANE_URL>/v1/webhook?writeKey=<WRITE_KEY>\n```\n\nFor more information on the data plane URL, refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url).\n\n6.  Finally, save the webhook.\n\n## Supported events\n\nThe following sections list the Customer.io event types supported by RudderStack.\n\n### Common data mappings\n\nThe common data mappings for each of the supported event types is listed in the following table:\n\n| Customer.io property | RudderStack property |\n| --- | --- |\n| `data.customer_id` | `userId` |\n| `data.event_id` | `properties.eventId` |\n| `data.identifiers.id` | `userId` |\n\n### Email events\n\nRudderStack supports the following Customer.io email events:\n\n| **Email Event** | **Description** |\n| --- | --- |\n| `Delivered` | The delivery provider’s report that the email was delivered to the inbox of the recipient. |\n| `Opened` | An email was opened by the recipient. |\n| `Clicked` | A tracked link in an email was clicked by the recipient/customer. |\n| `Bounced` | The delivery provider’s report that it was unable to deliver the email to the recipient. |\n| `Spammed` | An email was marked as spam by the recipient. |\n| `Unsubscribed` | The customer unsubscribed via a particular email. |\n| `Failed` | The email was not successfully delivered to the recipient. |\n| `Dropped` | The email was not sent as the recipient was suppressed. |\n| `Attempted` | Customer.io retried sending the email to the email provider. |\n| `Converted` | The conversion goal attributed to the email was matched. |\n| `Sent` | The email was successfully sent to the recipient. |\n| `Drafted` | The sender created an email draft. |\n\nThe supported property mappings in addition to the [common mappings](#common-data-mappings) listed above are as follows:\n\n| Customer.io property | RudderStack property |\n| --- | --- |\n| `data.action_id` | `properties.actionId` |\n| `data.broadcast_id` | `properties.broadcastId` |\n| `data.delivery_id` | `properties.deliveryId` |\n| `data.href` | `properties.link.url` |\n| `data.link_id` | `properties.link.id` |\n| `data.recipient` | `context.traits.email` |\n| `data.subject` | `properties.emailSubject` |\n| `data.failure_message` | `properties.reason` |\n| `data.campaign_id` | `properties.campaignId` |\n| `data.content_id` | `properties.contentId` |\n| `data.newsletter_id` | `properties.newsletterId` |\n\n### Customer events\n\nRudderStack supports the following Customer.io customer events:\n\n| **Customer Event** | **Description** |\n| --- | --- |\n| `Subscribed` | The customer was subscribed to a campaign. |\n| `Unsubscribed` | The customer was unsubscribed from a campaign. |\n\nThe supported property mappings in addition to the [common mappings](#common-data-mappings) listed above is shown:\n\n| Customer.io property | RudderStack property |\n| --- | --- |\n| `data.email_address` | `context.traits.email` |\n\n### SMS events\n\nRudderStack supports the following Customer.io SMS events:\n\n| **SMS Event** | **Description** |\n| --- | --- |\n| `Failed` | The SMS could not be sent to the delivery provider. |\n| `Click` | The recipient tapped the link present in the SMS notification. |\n| `Sent` | The SMS notification was sent successfully. |\n| `Attempted` | The SMS was attempted for delivery. |\n| `Drafted` | The SMS notification was drafted. |\n| `Delivered` | The SMS notification was delivered to the recipient. |\n| `Converted` | The conversion goal attributed to the SMS was matched. |\n| `Bounced` | The delivery provider’s report that it was unable to deliver the SMS to the recipient. |\n\nThe supported property mappings in addition to the [common mappings](#common-data-mappings) listed above are as follows:\n\n| Customer.io property | RudderStack property |\n| --- | --- |\n| `data.action_id` | `properties.actionId` |\n| `data.broadcast_id` | `properties.broadcastId` |\n| `data.delivery_id` | `properties.deliveryId` |\n| `data.href` | `properties.link.url` |\n| `data.recipient` | `context.traits.email` |\n| `data.failure_message` | `properties.reason` |\n| `data.campaign_id` | `properties.campaignId` |\n| `data.link_id` | `properties.link.id` |\n\n### Push notification events\n\nRudderStack supports the following Customer.io push notification events:\n\n| **Push Event** | **Description** |\n| --- | --- |\n| `Failed` | The push notification could not be sent to the delivery provider. |\n| `Click` | The recipient tapped the link present in the push notification. |\n| `Sent` | A push notification was sent. |\n| `Attempted` | A push notification was attempted unsuccessfully. |\n| `Drafted` | A push notification was drafted. |\n| `Opened` | A push notification was opened by the recipient. |\n| `Converted` | The conversion goal attributed to the push notification was matched. |\n| `Bounced` | An invalid device token was reported by the delivery provider. |\n| `Dropped` | The push notification was not sent to the recipient as the device token bounced. |\n\nThe supported property mappings in addition to the [common mappings](#common-data-mappings) listed above are as follows:\n\n| Customer.io property | RudderStack property |\n| --- | --- |\n| `data.action_id` | `properties.actionId` |\n| `data.broadcast_id` | `properties.broadcastId` |\n| `data.delivery_id` | `properties.deliveryId` |\n| `data.href` | `properties.link.url` |\n| `data.link_id` | `properties.link.id` |\n| `data.recipient` | `context.traits.email` |\n| `data.device_id` | `properties.deviceId` |\n| `data.failure_message` | `properties.reason` |\n| `data.recipients` | `properties.recipients` |\n| `data.campaign_id` | `properties.campaignId` |\n| `data.device_platform` | `properties.devicePlatform` |\n\n### Webhook events\n\nRudderStack supports the following Customer.io webhook events:\n\n| **Webhook Event** | **Description** |\n| --- | --- |\n| `Failed` | The webhook payload failed and was not sent to the recipient. |\n| `Click` | The link in the webhook payload was clicked by the recipient. |\n| `Sent` | A webhook payload was sent from Customer.io. |\n| `Attempted` | A webhook event was attempted unsuccessfully and would be retried. |\n| `Drafted` | A webhook draft was created by the sender. |\n\nThe supported property mappings in addition to the [common mappings](#common-data-mappings) listed above are as follows:\n\n| Customer.io property | RudderStack property |\n| --- | --- |\n| `data.action_id` | `properties.actionId` |\n| `data.broadcast_id` | `properties.broadcastId` |\n| `data.delivery_id` | `properties.deliveryId` |\n| `data.href` | `properties.link.url` |\n| `data.link_id` | `properties.link.id` |\n| `data.recipient` | `context.traits.email` |\n| `data.failure_message` | `properties.reason` |\n\n### Slack events\n\nRudderStack supports the following Customer.io Slack events:\n\n| **Slack Event** | **Description** |\n| --- | --- |\n| `Failed` | The Slack message failed and was not delivered to the recipient. |\n| `Click` | The recipient clicked the link in the Slack message. |\n| `Sent` | A Slack message was successfully sent to the recipient. |\n| `Attempted` | A Slack message was attempted unsuccessfully and would be retried. |\n| `Drafted` | A Slack message was drafted by the sender. |\n\nThe supported property mappings in addition to the [common mappings](#common-data-mappings) listed above are as follows:\n\n| Customer.io property | RudderStack property |\n| --- | --- |\n| `data.action_id` | `properties.actionId` |\n| `data.broadcast_id` | `properties.broadcastId` |\n| `data.delivery_id` | `properties.deliveryId` |\n| `data.href` | `properties.link.url` |\n| `data.link_id` | `properties.link.id` |\n| `data.recipient` | `context.traits.email` |\n| `data.failure_message` | `properties.reason` |\n| `data.campaign_id` | `properties.campaignId` |\n\nThe following image highlights the setup in the Customer.io dashboard:\n\n[![Customer.io event settings](https://www.rudderstack.com/docs/images/event-stream-sources/customerio-5.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/customerio-5.webp)\n\n## Event transformation\n\nThe Customer.io webhook events are ingested into RudderStack after converting them into the RudderStack event format. The `customer_id` set by Customer.io is set as `userId`. In cases where Customer.io does not send the `customer_id`, the email address of the user is set as `anonymousId`.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Customer.io Source | RudderStack Docs",
    "description": "Ingest your event data from Customer.io into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/slack/",
    "markdown": "# Slack source | RudderStack Docs\n\nIngest your event data from Slack into RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Slack](https://slack.com/intl/en-in/) is a popular business communication platform that lets you organize all your business-related chats by specific topics, groups, or direct messaging.\n\nThis guide will help you set up Slack as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Slack source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Slack**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Slack source is now configured. Note the **Webhook URL** by going to the **Settings** tab.\n\n[![Slack webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/slack-src.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/slack-src.webp)\n\n4.  In your Slack app, click your workspace and select **Tools and Settings** > **Manage Apps** to open the Slack app directory.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You must have an admin role in your Slack workspace to see these options.\n\n[![Add webhook source in Slack](https://www.rudderstack.com/docs/images/event-stream-sources/slack-tools.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/slack-tools.webp)\n\n5.  Click **Build** from the top right navigation bar.\n6.  Select an existing app or [create a new one](https://api.slack.com/quickstart#creating) by clicking **Create New App**.\n\n[![Add webhook name and URL](https://www.rudderstack.com/docs/images/event-stream-sources/slack-src-1.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/slack-src-1.webp)\n\n7.  Click **Event Subscriptions** from the left navigation bar.\n8.  Turn on the **Enable events** setting and enter the webhook URL in the **Request URL** field obtained in Step 3.\n\n[![Add webhook name and URL](https://www.rudderstack.com/docs/images/event-stream-sources/slack-src-2.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/slack-src-2.webp)\n\n9.  In **Subscribe to bot events** section, [add the events you want to track](https://api.slack.com/quickstart#listening) and click **Save Changes**.\n\n[![Add webhook name and URL](https://www.rudderstack.com/docs/images/event-stream-sources/slack-src-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/slack-src-3.webp)\n\n## Event transformation\n\nRudderStack supports ingesting all the [Slack events](https://api.slack.com/events) related to user’s activities. It converts:\n\n*   Slack’s `team_join` and `user_change` events as [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) events, and\n*   Rest of the Slack events as [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) events.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The [`url_verification`](https://api.slack.com/events/url_verification) event verifies the webhook URL. It has a different object structure than the rest of the events and is triggered only once during the first time webhook setup.\n\nRudderStack maps the following Slack properties from the event payload to the RudderStack fields:\n\n| Slack Property | RudderStack Property |\n| --- | --- |\n| `event.type` | `event` |\n| `event.ts` | `originalTimestamp` |\n| `event.user`  <br>`event.user.id` | `context.externalId` |\n| `event.profile.first_name` | `context.traits.firstName` |\n| `event.profile.last_name` | `context.traits.lastName` |\n| `event.user.profile.real_name` | `context.traits.name` |\n| `event.user.profile.email` | `context.traits.email` |\n| `event.user.tz` | `timezone` |\n| `event.user.profile.image_original` | `context.traits.avatar` |\n| `event.user.profile.title` | `context.traits.title` |\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from Slack source and creates the resulting payload.\n\n### Identify event\n\nA sample input payload received from Slack webhook (`team_join` event):\n\n```\n{\n  \"event\": {\n    \"type\": \"team_join\",\n    \"user\": {\n      \"id\": \"W012CDE\"',\n      \"name\": \"johnd\",\n      \"real_name\": \"John Doe\",\n    },\n  },\n  \"type\": \"event_callback\",\n  \"event_id\": \"Ev06TJ0NG5\",\n  \"event_time\": \"1709441309\",\n  \"token\": \"REm276ggfh72Lq\",\n  \"team_id\": \"T0GFJL5J7\",\n  \"context_team_id\": \"T0GFJL5J7\",\n  \"context_enterprise_id\": \"null\",\n  \"api_app_id\": \"B02SJMHRR\",\n  \"authorizations\": [{\n    \"enterprise_id\": \"null\",\n    \"team_id\": \"T0GFJL5J7\",\n    \"user_id\": \"U04G7H550\",\n    \"is_bot\": true,\n    \"is_enterprise_install\": false,\n  }, ],\n  \"is_ext_shared_channel\": false,\n  \"event_context\": \"eJldCI65436EUEpMSFhgfhg76joiQzAxRTRQTEIxMzUifQ\"\n}\n```\n\nThe corresponding RudderStack-transformed (`identify`) event payload is shown below:\n\n```\n{\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\",\n    },\n    \"integration\": {\n      \"name\": \"SLACK\",\n    },\n    \"externalId\": [{\n      \"type\": \"slackUserId\",\n      \"id\": \"W012CDE\",\n    }, ],\n  },\n  \"integrations\": {\n    \"SLACK\": false,\n  },\n  \"type\": \"identify\",\n  \"event\": \"Team Join\",\n  \"anonymousId\": \"2bc5ae2825a712d3d154cbdacb86ac16c278\",\n  \"originalTimestamp\": \"2024-03-03T04:48:29.000Z\",\n  \"sentAt\": \"2024-03-03T04:48:29.000Z\",\n  \"properties\": {\n    \"type\": \"team_join\",\n    \"user\": {\n      \"id\": \"W012CDE\",\n      \"name\": \"johnd\",\n      \"real_name\": \"John Doe\",\n    },\n  },\n}\n```\n\n### Track event\n\nA sample input payload received from Slack webhook (`message` event):\n\n```\n{\n  \"event\": {\n    \"user\": \"U04G7H550\",\n    \"type\": \"message\",\n    \"ts\": \"1709441309.308399\",\n    \"client_msg_id\": \"834r664e-ec75-445d-t5c6-b873a07y9c81\",\n    \"text\": \"What is the pricing of product X\",\n    \"team\": \"T0GFJL5J7\",\n    \"thread_ts\": \"1709407304.839329\",\n    \"parent_user_id\": \"U06P6LQTPV\",\n    \"blocks\": [{\n      \"type\": \"rich_text\",\n      \"block_id\": \"xGKJl\",\n      \"elements\": [{\n        \"type\": \"rich_text_section\",\n        \"elements\": {\n            \"type\": \"text\",\n            \"text\": \"What is the pricing of product X\",\n          },\n          {\n            \"type\": \"channel\",\n            \"channel_id\": \"C03CDQTPI65\",\n          },\n          {\n            \"type\": \"text\",\n            \"text\": \"to do this\",\n          },\n        ],\n      }, ],\n    }, ],\n    \"channel\": \"C03CDQTPI65\",\n    \"event_ts\": \"1709441309.308399\",\n    \"channel_type\": \"channel\",\n  }, {\n  \"type\": \"event_callback\",\n  \"event_id\": \"EvY5JTJ0NG5\",\n  \"event_time\": \"1709441309\",\n  \"token\": \"REm2987dqtpi72Lq\",\n  \"team_id\": \"T0GFJL5J7\",\n  \"context_team_id\": \"T01gqtPIL5J7\",\n  \"context_enterprise_id\": \"null\",\n  \"api_app_id\": \"A04QTPIHRR\",\n  \"authorizations\": [{\n    \"enterprise_id\": \"null\",\n    \"team_id\": \"T0GFJL5J7\",\n    \"user_id\": \"W012CDE\",\n    \"is_bot\": true,\n    \"is_enterprise_install\": false,\n  }, ],\n  \"is_ext_shared_channel\": false,\n  \"event_context\": \"4-wd6joiQfdgTRQTpIzdfifQ\"\n},\n```\n\nThe corresponding RudderStack-transformed (`track`) event payload is shown below:\n\n```\n{\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\",\n    },\n    \"integration\": {\n      \"name\": \"SLACK\",\n    },\n    \"externalId\": [{\n      \"type\": \"slackUserId\",\n      \"id\": \"U04G7H550\",\n    }, ],\n  },\n  \"integrations\": {\n    \"SLACK\": false,\n  },\n  \"type\": \"track\",\n  \"event\": \"Message\",\n  \"anonymousId\": \"7509c04f547b05afb6838aa742f4910263d6\",\n  \"originalTimestamp\": \"2024-03-03T04:48:29.308Z\",\n  \"sentAt\": \"2024-03-03T04:48:29.000Z\",\n  \"properties\": {\n    \"user\": \"U04G7H550\",\n    \"type\": \"message\",\n    \"ts\": \"1709441309.308399\",\n    \"client_msg_id\": \"834r664e-ec75-445d-t5c6-b873a07y9c81\",\n    \"text\": \"What is the pricing of product X\",\n    \"team\": \"T0GFJL5J7\",\n    \"thread_ts\": \"1709407304.839329\",\n    \"parent_user_id\": \"U06P6LQTPV\",\n    \"blocks\": [{\n      \"type\": \"rich_text\",\n      \"block_id\": \"xGKJl\",\n      \"elements\": [{\n        \"type\": \"rich_text_section\",\n        \"elements\": [{\n            \"type\": \"text\",\n            \"text\": \"What is the pricing of product X\",\n          },\n          {\n            \"type\": \"channel\",\n            \"channel_id\": \"C03CDQTPI65\",\n          },\n          {\n            \"type\": \"text\",\n            \"text\": \"to do this\",\n          },\n        ],\n      }, ],\n    }, ],\n    \"channel\": \"C03CDQTPI65\",\n    \"event_ts\": \"1709441309.308399\",\n    \"channel_type\": \"channel\",\n  },\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Slack source | RudderStack Docs",
    "description": "Ingest your event data from Slack into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/close-crm/",
    "markdown": "# Close Source | RudderStack Docs\n\nIngest your event data from Close into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[Close](https://www.close.com/) is a sales-focused customer relationship management software. It helps businesses manage leads, track communication, and automate sales processes to boost productivity and close more deals.\n\nThis guide will help you set up Close as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Close source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Close CRM**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Close source is now configured. Note the **Webhook URL** by going to the **Settings** tab.\n\n[![Close CRM webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/close-crm-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/close-crm-webhook.webp)\n\n## Subscribe to the webhook\n\nTo receive events data successfully in RudderStack through Close, you must [subscribe to the webhook](https://developer.close.com/resources/webhook-subscriptions/#create-new-webhook-subscription) (noted in the above section).\n\nA sample snippet to subscribe the webhook URL:\n\n```\ncurl --location 'https://api.close.com/api/v1/webhook/' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: Basic YXBpXzZraUJxZ1BmR3U4SVZEMWk5OTZnUjIuNWFac0tvTm5iVlZkWEV3eEkyTW5vVzo=' \\\n--data '{\n    \"url\": \"https://webhook.site/44541847-0141-4647-be05-4ff6b31d8d93\",\n    \"events\": [\n        {\n            \"object_type\": \"lead\",\n            \"action\": \"created\"\n        },\n        {\n            \"object_type\": \"lead\",\n            \"action\": \"updated\"\n        },\n        {\n            \"object_type\": \"activity.call\",\n            \"action\": \"created\"\n        },\n        {\n            \"object_type\": \"activity.note\",\n            \"action\": \"created\"\n        },\n        {\n            \"object_type\": \"activity.note\",\n            \"action\": \"updated\"\n        }\n    ]\n}'\n```\n\nSee [Close webhooks documentation](https://developer.close.com/topics/webhooks/) for more information.\n\n## Event transformation\n\nRudderStack ingests all the [Close events](https://developer.close.com/resources/event-log/list-of-events/) as [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) events, after converting them into the appropriate event format.\n\n### Property mappings\n\nRudderStack maps the following Close properties from the event payload to the RudderStack fields:\n\n| Close Property | RudderStack Property | Note |\n| --- | --- | --- |\n| `event.object_type` + `event.action` | `event` | \\-  |\n| `event.lead_id` | `userId` | RudderStack does not use `user_id` as it is assigned to the user who creates the lead. |\n| `event.date_updated` | `originalTimestamp` | RudderStack converts it to the ISO 8601 date format yyyy-MM-ddTHH:mm:ss.SSSZ |\n| `event` | `properties` | Contains all the event data (even mapped to other fields). |\n| `subscriptionId` | `properties.subscription_id` | \\-  |\n| `event.id` | `messageId` | \\-  |\n\nA sample input payload ingested by RudderStack:\n\n```\n{\n  \"event\": {\n    \"date_created\": \"2019-01-15T12:48:23.395000\",\n    \"meta\": {\n      \"request_method\": \"PUT\",\n      \"request_path\": \"/api/v1/opportunity/oppo_7H4sjNso7FyBFaeR3RXi5PMJbilfo0c6UPCxsJtEhCO/\"\n    },\n    \"id\": \"ev_2sYKRjcrA79yKxi3S4Crd7\",\n    \"action\": \"updated\",\n    \"date_updated\": \"2019-01-15T12:48:23.395000\",\n    \"changed_fields\": [\n      \"confidence\",\n      \"date_updated\",\n      \"status_id\",\n      \"status_label\",\n      \"status_type\"\n    ],\n    \"previous_data\": {\n      \"status_type\": \"active\",\n      \"confidence\": 70,\n      \"date_updated\": \"2019-01-15T12:47:39.873000+00:00\",\n      \"status_id\": \"stat_3FD9DnGUCJzccBKTh8LiiKoyVPpMJsOkJdcGoA5AYKH\",\n      \"status_label\": \"Active\"\n    },\n    \"organization_id\": \"orga_XbVPx5fFbKlYTz9PW5Ih1XDhViV10YihIaEgMEb6fVW\",\n    \"data\": {\n      \"contact_name\": \"Mr. Jones\",\n      \"user_name\": \"Joe Kemp\",\n      \"value_period\": \"one_time\",\n      \"updated_by_name\": \"Joe Kemp\",\n      \"date_created\": \"2019-01-15T12:41:24.496000+00:00\",\n      \"user_id\": \"user_lAm7YqrzZj00t1GLK5eTOaRgdkNChswxydbhUhGRbcM\",\n      \"updated_by\": \"user_lAm7YqrzZj00t1GLK5eTOaRgdkNChswxydbhUhGRbcM\",\n      \"value_currency\": \"USD\",\n      \"organization_id\": \"orga_XbVPx5fFbKlYTz9PW5Ih1XDhViV10YihIaEgMEb6fVW\",\n      \"status_label\": \"Won\",\n      \"contact_id\": \"cont_BwlwYQkIP6AooiXP1CMvc6Zbb5gGh2gPu4dqIDlDrII\",\n      \"status_type\": \"won\",\n      \"created_by_name\": \"Joe Kemp\",\n      \"id\": \"oppo_8H4sjNso7FyBFaeR3RXi5PMJbilfo0c6UPCxsJtEhCO\",\n      \"lead_name\": \"KLine\",\n      \"date_lost\": null,\n      \"note\": \"\",\n      \"date_updated\": \"2019-01-15T12:48:23.392000+00:00\",\n      \"status_id\": \"stat_wMS9M6HC2O3CSEOzF5g2vEGt6RM5R3RfhIQixdnmjf2\",\n      \"value\": 100000,\n      \"created_by\": \"user_lAm7YqrzZj00t1GLK5eTOaRgdkNChswxydbhUhGRbcM\",\n      \"value_formatted\": \"$1,000\",\n      \"date_won\": \"2019-01-15\",\n      \"lead_id\": \"lead_zwqYhEFwzPyfCErS8uQ77is2wFLvr9BgVi6cTfbFM68\",\n      \"confidence\": 100\n    },\n    \"request_id\": \"req_4S2L8JTBAA1OUS74SVmfbN\",\n    \"object_id\": \"oppo_7H4sjNso7FyBFaeR3RXi5PMJbilfo0c6UPCxsJtEhCO\",\n    \"user_id\": \"user_lAm7YqrzZj00t1GLK5eTOaRgdkNChswxydbhUhGRbcM\",\n    \"object_type\": \"opportunity\",\n    \"lead_id\": \"lead_zwqYhEFwzPyfCErS8uQ77is2wFLvr9BgVi6cTfbFM68\"\n  },\n  \"subscription_id\": \"whsub_8AmjKCZYT3zI8eZoi4HhFC\"\n}\n```\n\nThe RudderStack-transformed event payload is shown below:\n\n```\n{\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"integration\": {\n      \"name\": \"CloseCRM\"\n    }\n  },\n  \"integrations\": {\n    \"CloseCRM\": false\n  },\n  \"type\": \"track\",\n  \"event\": \"opportunity updated\",\n  \"userId\": \"lead_zwqYhEFwzPyfCErS8uQ77is2wFLvr9BgVi6cTfbFM68\",\n  \"messageId\": \"ev_2sYKRjcrA79yKxi3S4Crd7\",\n  \"originalTimestamp\": \"2019-01-TuT12:48:23.395+00:00\",\n  \"properties\": {\n    \"date_created\": \"2019-01-15T12:48:23.395000\",\n    \"meta\": {\n      \"request_method\": \"PUT\",\n      \"request_path\": \"/api/v1/opportunity/oppo_7H4sjNso7FyBFaeR3RXi5PMJbilfo0c6UPCxsJtEhCO/\"\n    },\n    \"id\": \"ev_2sYKRjcrA79yKxi3S4Crd7\",\n    \"action\": \"updated\",\n    \"date_updated\": \"2019-01-15T12:48:23.395000\",\n    \"organization_id\": \"orga_XbVPx5fFbKlYTz9PW5Ih1XDhViV10YihIaEgMEb6fVW\",\n    \"data\": {\n      \"contact_name\": \"Mr. Jones\",\n      \"user_name\": \"Joe Kemp\",\n      \"value_period\": \"one_time\",\n      \"updated_by_name\": \"Joe Kemp\",\n      \"date_created\": \"2019-01-15T12:41:24.496000+00:00\",\n      \"user_id\": \"user_lAm7YqrzZj00t1GLK5eTOaRgdkNChswxydbhUhGRbcM\",\n      \"updated_by\": \"user_lAm7YqrzZj00t1GLK5eTOaRgdkNChswxydbhUhGRbcM\",\n      \"value_currency\": \"USD\",\n      \"organization_id\": \"orga_XbVPx5fFbKlYTz9PW5Ih1XDhViV10YihIaEgMEb6fVW\",\n      \"status_label\": \"Won\",\n      \"contact_id\": \"cont_BwlwYQkIP6AooiXP1CMvc6Zbb5gGh2gPu4dqIDlDrII\",\n      \"status_type\": \"won\",\n      \"created_by_name\": \"Joe Kemp\",\n      \"id\": \"oppo_8H4sjNso7FyBFaeR3RXi5PMJbilfo0c6UPCxsJtEhCO\",\n      \"lead_name\": \"KLine\",\n      \"note\": \"\",\n      \"date_updated\": \"2019-01-15T12:48:23.392000+00:00\",\n      \"status_id\": \"stat_wMS9M6HC2O3CSEOzF5g2vEGt6RM5R3RfhIQixdnmjf2\",\n      \"value\": 100000,\n      \"created_by\": \"user_lAm7YqrzZj00t1GLK5eTOaRgdkNChswxydbhUhGRbcM\",\n      \"value_formatted\": \"$1,000\",\n      \"date_won\": \"2019-01-15\",\n      \"lead_id\": \"lead_zwqYhEFwzPyfCErS8uQ77is2wFLvr9BgVi6cTfbFM68\",\n      \"confidence\": 100\n    },\n    \"request_id\": \"req_4S2L8JTBAA1OUS74SVmfbN\",\n    \"object_id\": \"oppo_7H4sjNso7FyBFaeR3RXi5PMJbilfo0c6UPCxsJtEhCO\",\n    \"user_id\": \"user_lAm7YqrzZj00t1GLK5eTOaRgdkNChswxydbhUhGRbcM\",\n    \"object_type\": \"opportunity\",\n    \"lead_id\": \"lead_zwqYhEFwzPyfCErS8uQ77is2wFLvr9BgVi6cTfbFM68\",\n    \"subscription_id\": \"whsub_8AmjKCZYT3zI8eZoi4HhFC\"\n  }\n}\n```\n\n## FAQ\n\n#### Does Close retry event delivery in case of a failure?\n\nYes, Close retries failed event deliveries with a retry interval that exponentially backs off up to every 20 minutes. Further, Close retries sending events up to 72 hours before dropping them.\n\n#### Does the Close support event ordering?\n\nNo, Close does not ensure event ordering due to [event consolidation](https://developer.close.com/resources/event-log/#event-consolidation), delivery parallelism/retries and other factors.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Close Source | RudderStack Docs",
    "description": "Ingest your event data from Close into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-unity-sdk/v2/",
    "markdown": "# Unity SDK v2 | RudderStack Docs\n\nUse the RudderStack Unity SDK to send event data from your games to various destinations.\n\n* * *\n\n*     6 minute read  \n    \n\nSee the [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-unity-v2) to get a more hands-on understanding of the SDK.\n\n## SDK setup requirements\n\n*   Download and install the [Unity development kit](https://store.unity.com/download).\n*   Sign up for [RudderStack Cloud](https://app.rudderstack.com/signup).\n*   [Set up a Unity source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in your [RudderStack Cloud dashboard](https://app.rudderstack.com/). Note the **Write Key** for this source:\n\n[![Unity source write key](https://www.rudderstack.com/docs/images/event-stream-sources/unity-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/unity-write-key-new.webp)\n\n*   Note the [data plane URL](https://www.rudderstack.com/docs/dashboard-guides/overview/#data-plane-url) present in your RudderStack dashboard.\n\n## Installing the Unity SDK\n\n1.  [Download](https://github.com/rudderlabs/rudder-sdk-unity-v2/releases) `rudder-sdk-unity.unitypackage`.\n2.  Import the downloaded package to your project. From the **Assets** menu, go to **Import Package** > **Custom Package…** :\n\n[![Import custom package](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-installation-1.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-installation-1.webp)\n\n3.  Select `rudder-sdk-unity.unitypackage` from the downloaded location and click **Open**:\n\n[![Select RudderStack Unity package](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-installation-2.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-installation-2.webp)\n\n4.  Click **Import** in the import popup:\n\n[![Import popup](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-installation-3-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-installation-3-new.webp)\n\n5.  Add the **RudderStack.prefab** file from the path `Assets/RudderStack/Unity/Prefabs/RudderStack.prefab` to every scene in your Unity app. Also, make sure that `RudderStack.prefab` is linked to the `RSMaster`, `RSScreenView`, and `RSLogger` scripts.\n\n[![Add prefab file](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-installation-4-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-installation-4-new.webp)\n\n## Initializing the RudderStack client\n\n1.  Import the SDK:\n\n2.  Initialize the SDK as shown. Replace `WRITE_KEY` and `DATA_PLANE_URL` with the actual values obtained in the [SDK setup requirements](#sdk-setup-requirements) section.\n\n```\nRSAnalytics.Initialize(\"WRITE_KEY\",\n\t\tnew RSConfig(dataPlaneUrl: \"DATA_PLANE_URL\"));\n\n// for coroutine\nStartCoroutine(RSAnalytics.InitializeRoutine(\"WRITE_KEY\",\n\t\tnew RSConfig(dataPlaneUrl: \"DATA_PLANE_URL\")));\n```\n\n## SDK initialization options\n\nYou can configure your client based on the following parameters using `RudderConfigBuilder`:\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `logLevel` | Enum | Controls how much of the log you want to see from the SDK.<br><br>**Default value**: `Logger.Level.INFO` |\n| `dataPlaneUrl` | String | Your data plane URL. |\n| `dbThresholdCount` | Integer | Number of events to be saved in the `SQLite` database. Once the limit is reached, older events are deleted from the database.<br><br>**Default value**: `10000` |\n| `sleepcount` | Integer | Minimum waiting time to flush the events to the RudderStack server. The minimum value can be set to `1 second`.<br><br>**Default value**:`10 seconds` |\n| `trackLifecycleEvents` | Boolean | Determines if the SDK will automatically capture the application lifecycle events.<br><br>**Default value**: `true` |\n| `recordScreenViews` | Boolean | Determines if the SDK will automatically capture the screen view events.<br><br>**Default value**: `false` |\n| `controlPlaneUrl` | String | Change this parameter **only if** you are self-hosting the control plane. Check the [Self-hosted control plane](#self-hosted-control-plane) section below for more information. The SDK will add `/sourceConfig` along with this URL to fetch the source configuration.<br><br>**Default value**: `https://api.rudderlabs.com` |\n| `gzip` | Boolean | Gzips the event requests.<br><br>**Default value**: `true` |\n\n### Self-hosted control plane\n\nDo not pass the `controlPlaneUrl` parameter during the SDK initialization if you are using the [RudderStack Cloud dashboard](https://app.rudderstack.com/) to set up your connections. The SDK supports this parameter only if you are using the open source [Control Plane Lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) utility to self-host your control plane.\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nThe Unity SDK captures `deviceId` and uses that as `anonymousId` for identifying the user. This helps in tracking the users across the application installation. To attach more information to the user, use the `identify` method.\n\nOnce the SDK identifies the user, the SDK persists and passes the user information to the subsequent calls. To reset the user identification, use the [`reset`](#reset) method.\n\nThe following snippet highlights a sample `identify` call:\n\n```\nRSAnalytics.Client.Identify(\"unity_user_id\",\n                new Dictionary<string, object> { { \"email\", \"abc@example.com\" }, { \"age\", 24 }, { \"name\", \"First Last\" }, { \"gender\", \"Male\" } });\n```\n\n### Override `anonymousId` using `setAnonymousId`\n\nYou can explicitly set the `anonymousId` for all future events using the `PutAnonymousId()` method.\n\n```\nRSClient.PutAnonymousId(\"anonymous_id\");\n```\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the users’ in-game activity. Each user action is called an **event**.\n\nThe following snippet highlights a sample `track` call:\n\n```\nRSAnalytics.Client.Track(\"sample_track\",\n                new Dictionary<string, object> { { \"key_1\", \"value_1\" }, { \"key_2\", 4 }, { \"key_3\", 4.2 }, { \"key_4\", true } });\n```\n\n### Track application lifecycle events\n\nThe Unity SDK lets you track the [Application Lifecycle Events](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/) to get insights into the app metrics like installs, opens, updates, etc.\n\nTo enable automatic tracking, set `trackLifeCycleEvents` method to `true` while initializing the SDK:\n\n```\nRSAnalytics.Initialize(\"WRITE_KEY\",\n                new RSConfig(dataPlaneUrl: \"DATA_PLANE_URL\")\n                    .SetTrackLifeCycleEvents(true));\n```\n\n### Trigger Application Updated lifecycle event\n\nTo ensure that the **Application Updated** lifecycle event is triggered successfully:\n\n*   **For iOS**: Make sure the `Bundle version` in the `Info.plist` file of your application is incremented. If the `Bundle version` of your `target` points to the `Bundle version` of your `project`, then increment it.\n*   **For Android**: Make sure the `versionCode` in the `defaultConfig` object nested in the `android` object of your app’s `build.gradle` is incremented.\n\nRefer to the [Application Lifecycle Events Specification](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-updated) guide for more information.\n\n## Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It lets you record the screen views on your mobile app along with other relevant information about the screen.\n\nThe following snippet highlights a sample `screen` call:\n\n```\nRSAnalytics.Client.Screen(\"sample_screen\",\n                new Dictionary<string, object> { { \"key_1\", \"value_1\" }, { \"key_2\", 4 }, { \"key_3\", 4.2 }, { \"key_4\", true } });\n```\n\n### Automatic screen recording\n\nYou can enable the automatic recording of screen views by setting `recordScreenViews` to `true` while initializing the SDK. This automatically sends a `screen` call for every screen that a user views. By default, `recordScreenViews` is set to `false`.\n\n```\nRSAnalytics.Initialize(\"WRITE_KEY\",\n                new RSConfig(dataPlaneUrl: \"DATA_PLANE_URL\")\n                    .SetRecordScreenViews(true));\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `recordScreenViews` parameter records the screen views of the native Android [Activities](https://developer.android.com/guide/components/activities/intro-activities) or the iOS [Views](https://developer.apple.com/documentation/uikit/view_controllers) only and **not** by the React Native Views.\n\n## Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record the page views on your application along with the other relevant information about the page.\n\nA sample `page` call is shown below:\n\n```\nRSAnalytics.Client.Page(\"sample_page\",\n                new Dictionary<string, object> { { \"key_1\", \"value_1\" }, { \"key_2\", 4 }, { \"key_3\", 4.2 }, { \"key_4\", true } });\n```\n\n## Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group.\n\nThe following snippet highlights a sample `group` call made using the Unity SDK:\n\n```\nRSAnalytics.Client.Group(\"group_id\",\n                new Dictionary<string, object> { { \"key_1\", \"value_1\" }, { \"key_2\", 4 }, { \"key_3\", 4.2 }, { \"key_4\", true } });\n```\n\n## Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly. You can use `alias` for managing the user’s identity in some of the downstream destinations.\n\nA sample `alias` call is shown below:\n\n```\nRSAnalytics.Client.Alias(\"new_unity_user_id\");\n```\n\n## Reset\n\nThe `reset` method clears all persisted traits of the previously identified user.\n\n```\nRSAnalytics.Client.Reset();\n```\n\n## Set the advertisement ID\n\nUse the `PutAdvertisingId()` method to explicitly set an advertising ID.\n\n```\nRSClient.PutAdvertisingId(\"advertisement_id\");\n```\n\n## Set the device token\n\nYou can pass your device token for push notifications for the destinations which support the feature using the `PutDeviceToken()` method. RudderStack sets the token under `context.device.token`.\n\n```\nRSClient.PutDeviceToken(\"device_token\");\n```\n\n## FAQ\n\n#### Which platforms are does Unity SDK support?\n\nThe Unity SDK v2 supports the following platforms:\n\n*   Android\n*   iOS\n*   Windows\n*   macOS\n*   Xbox\n*   PlayStation\n\n#### Do I need to add anything to my Android ProGuard rules?\n\nIf you are facing any event delivery issues in your production environment, verify if you have added the following line in your ProGuard rules:\n\n```\n-keep class com.rudderstack.android.** { *; }\n```\n\n#### How do I gzip event requests in Unity SDK?\n\nThe Unity SDK automatically gzips requests. To disable this feature, set the `Gzip` parameter to `false` while initializing the SDK:\n\n```\nRSAnalytics.Initialize(\"WRITE_KEY\",\n                new RSConfig(dataPlaneUrl: \"DATA_PLANE_URL\")\n                    .SetGzip(false));\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Gzip requires [rudder-server](https://github.com/rudderlabs/rudder-server) **v1.4 or higher**. Otherwise, your events might fail.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Unity SDK v2 | RudderStack Docs",
    "description": "Use the RudderStack Unity SDK to send event data from your games to various destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-dotnet-sdk/",
    "markdown": "# .NET SDK | RudderStack Docs\n\nUse RudderStack’s .NET SDK to send server-side events to various destinations.\n\n* * *\n\n*     7 minute read  \n    \n\nRudderStack’s .NET SDK lets you track your customer event data from your .NET applications and send it to your specified destinations via RudderStack.\n\nRefer to the SDK’s [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-.net) for the implementation-specific details.\n\n[![Github Badge](https://img.shields.io/nuget/v/RudderAnalytics?style=flat)](https://www.nuget.org/packages/RudderAnalytics/)\n\n## SDK setup requirements\n\n1.  Sign up to [RudderStack Cloud](https://app.rudderstack.com/signup).\n2.  [Set up a .NET source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in your dashboard. You should be able to see a **write key** for this source:\n\n[![.NET source write key](https://www.rudderstack.com/docs/images/event-stream-sources/dotnet-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/dotnet-write-key-new.webp)\n\n*   You will also need a data plane URL. Refer to the [Dashboard Overview](https://www.rudderstack.com/docs/dashboard-guides/overview/#data-plane-url) for more information on the data plane URL and where to find it.\n\n## Installing the .NET SDK\n\nYou can use [NuGet](https://docs.microsoft.com/en-us/nuget/consume-packages/install-use-packages-powershell) to install the .NET SDK into your project.\n\n```\nInstall-Package RudderAnalytics -Version 2.0.0\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The SDK uses the [Newton.JSON](https://www.newtonsoft.com/json) library for JSON processing.\n\n## Initializing the SDK\n\nTo initialize the SDK **asynchronously** (default behavior), run the following code snippet:\n\n```\nusing RudderStack;\n\nRudderAnalytics.Initialize(\n    WRITE_KEY,\n    new RudderConfig(dataPlaneUrl: DATA_PLANE_URL)\n);\n```\n\nTo send events synchronously, initialize the SDK as shown:\n\n```\nusing RudderStack;\n\nRudderAnalytics.Initialize(\n    WRITE_KEY,\n    new RudderConfig(dataPlaneUrl: DATA_PLANE_URL, async: false)\n);\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> When initialized in synchronous mode, the .NET SDK sends each event as a single batch. In asynchronous mode, it groups events together and sends them to the backend as a single batch.\n\n## Gzipping requests\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The Gzip feature is enabled by default in the .NET SDK from version `2.0.0`\n\nThe .NET SDK automatically gzips requests. However, you can disable this by setting the `gzip` parameter of `RudderConfig` to `false` while initializing the SDK:\n\n```\nusing RudderStack;\nRudderAnalytics.Initialize(\n    WRITE_KEY,\n    new RudderConfig(dataPlaneUrl: DATA_PLANE_URL, gzip: false)\n);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Gzip requires [rudder-server](https://github.com/rudderlabs/rudder-server) **v1.4 or higher**. Otherwise, your events might fail.\n\n## Sending events\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not store or persist the user state in any of the server-side SDKs**.\n> \n> Unlike the client-side SDKs that deal with only a single user at a given time, the server-side SDKs deal with multiple users simultaneously. Therefore, you must specify either `userId` or `anonymousId` every time while making any API calls supported by the .NET SDK.\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` call made using the .NET SDK is shown below:\n\n```\nRudderAnalytics.Client.Identify(\n    \"1hKOmRA4GRlm\",\n    new Dictionary<string, object> { {\"subscription\", \"inactive\"}, }\n);\n```\n\nThe `identify` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `traits` | Object | An optional dictionary of the user’s traits like `name` or `email`. |\n| `options` | Object | Object containing `anonymousId`, `integrations`, `timestamp`, and `context`. |\n\nSee the [options parameter](#options-parameter) section for more information on the `options` object and its fields.\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the user actions along with their associated properties. Each user action is called an **event**.\n\nA sample `track` call is shown below:\n\n```\nRudderAnalytics.Client.Track(\n    \"1hKOmRA4GRlm\",\n    \"CTA Clicked\",\n    new Dictionary<string, object> {  {\"plan\", \"premium\"}, }\n);\n```\n\nThe `track` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `event`  <br>Required | String | Name of the event. |\n| `properties` | Object | An optional dictionary of the properties associated with the event. |\n| `options` | Object | Object containing `anonymousId`, `integrations`, `timestamp`, and `context`. |\n\nSee the [options parameter](#options-parameter) section for more information on the `options` object and its fields.\n\n## Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record the page views on your application along with the other relevant information about the page.\n\nA sample `page` call is as shown:\n\n```\nRudderAnalytics.Client.Page(\n    \"1hKOmRA4GRlm\",\n    \"Sign Up\",\n    new Dictionary<string, object> { {\"url\", \"https://wwww.example.com/sign-up\"}, }\n);\n```\n\nThe `page` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `name`  <br>Required | String | Name of the viewed page. |\n| `category` | String | Category of the viewed page. |\n| `properties` | Object | An optional dictionary of the properties associated with the viewed page, like `url` or `referrer`. |\n| `options` | Object | Object containing `anonymousId`, `integrations`, `timestamp`, and `context`. |\n\nSee the [options parameter](#options-parameter) section for more information on the `options` object and its fields.\n\n## Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It allows you to record the screen views on your mobile app along with the other relevant information about the app screen.\n\nA sample `screen` call is as shown:\n\n```\nRudderAnalytics.Client.Screen(\n    \"1hKOmRA4GRlm\",\n    \"Dashboard\",\n    new Dictionary<string, object> { {\"name\", \"Paid Dashboard\"}, }\n);\n```\n\nThe `screen` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `name`  <br>Required | String | Name of the viewed screen. |\n| `category` | String | Category of the viewed screen. |\n| `properties` | Object | An optional dictionary of the properties associated with the viewed screen, like `url` or `referrer`. |\n| `options` | Object | Object containing `anonymousId`, `integrations`, `timestamp`, and `context`. |\n\nSee the [options parameter](#options-parameter) section for more information on the `options` object and its fields.\n\n## Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group.\n\nA sample `group` call made using the .NET SDK is shown below:\n\n```\nRudderAnalytics.Client.Group(\n    \"1hKOmRA4GRlm\",\n    \"12\",\n    new Dictionary<string, object> { {\"role\", \"Owner\"}, }\n);\n```\n\nThe `group` method parameters are as follows:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `groupId`  <br>Required | String | Unique identifier of the group in your database. |\n| `traits` | Object | An optional dictionary of the group’s traits like `name`or `email`. |\n| `options` | Object | Object containing `anonymousId`, `integrations`, `timestamp`, and `context`. |\n\nSee the [options parameter](#options-parameter) section for more information on the `options` object and its fields.\n\n## Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly. You can use `alias` for managing the user’s identity in some of the downstream destinations.\n\nA sample `alias` call is as shown:\n\n```\nRudderAnalytics.Client.Alias(\"1hKOmRA4GRlm\", \"12345\");\n```\n\nThe `alias` method parameters are as mentioned below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `previousId`  <br>Required | String | The previous unique identifier of the user. |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `options` | Object | Object containing `anonymousId`, `integrations`, `timestamp`, and `context`. |\n\nSee the [options parameter](#options-parameter) section for more information on the `options` object and its fields.\n\n## Options parameter\n\nThe `options` object contains the following fields:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n\n## Flushing events\n\nTo make sure no events are left in the queue, you can flush the events explicitly by using the SDK’s `flush()` method.\n\n```\n\nRudderAnalytics.Client.Flush();\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot call the `flush()` method again until all messages are flushed from the queue.\n\n## Logging\n\nThe .NET SDK supports detailed logging. You can enable this feature as shown:\n\n```\nusing RudderStack;\n\nLogger.Handlers += LoggingHandler;\n\nstatic void LoggingHandler(Logger.Level level, string message, IDictionary<string, object> args)\n{\n    if (args != null)\n    {\n        foreach (string key in args.Keys)\n        {\n            message += String.Format(\" {0}: {1},\", \"\" + key, \"\" + args[key]);\n        }\n    }\n    Console.WriteLine(String.Format(\"[RudderAnalytics] [{0}] {1}\", level, message));\n}\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The logger must be on a minimum version of .NET Core 2.1.\n\n## FAQ\n\n#### How does the .NET SDK handle events larger than 32KB?\n\nIf you are running the .NET SDK [asynchronously](#initializing-the-sdk), RudderStack drops any events greater than 32KB.\n\nFor synchronous initialization, the SDK accepts and sends each event greater than 32KB as a single batch and sends them to the RudderStack data plane (backend).\n\n#### Does the .NET SDK support event ordering?\n\nThe .NET SDK does not support event ordering by default.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": ".NET SDK | RudderStack Docs",
    "description": "Use RudderStack’s .NET SDK to send server-side events to various destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/reverse-etl/faq/",
    "markdown": "# FAQ | RudderStack Docs\n\nAnswers to some of the commonly asked questions on the Reverse ETL feature.\n\n* * *\n\n*     4 minute read  \n    \n\n## Reverse ETL feature\n\n#### **How do I use the Reverse ETL feature?**\n\nRudderStack’s Reverse ETL feature lets you set up your data warehouse as a source in RudderStack and route the data residing in it to your preferred destination.\n\nTo use this feature, follow these steps:\n\n1.  Set up a Reverse ETL source in RudderStack.\n2.  Connect it to a new or existing destination.\n3.  Specify the warehouse data you want to sync to that destination.\n\n#### **What is the difference between the Table, Model, and Audience options when creating a Reverse ETL source?**\n\nWhen creating a new Reverse ETL source, you are presented with the following three options from which RudderStack syncs the source data:\n\n[![](https://www.rudderstack.com/docs/images/warehouse-actions-sources/table-model-audience-options.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/table-model-audience-options.webp)\n\n*   When you choose **Table**, RudderStack imports all data associated with the specified warehouse table during the sync.\n*   When you choose **Model**, RudderStack imports the data by running the query specified in the connected [model](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/models/) during the sync.\n*   When you choose **Audience**, RudderStack syncs the [audience](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/) you created in the RudderStack dashboard.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   [MySQL](https://www.rudderstack.com/docs/sources/reverse-etl/mysql/) and [PostgreSQL](https://www.rudderstack.com/docs/sources/reverse-etl/postgresql/) sources support syncing data only from a warehouse table and model. Hence, you will not see the **Audience** option while setting up this source.\n> *   [S3](https://www.rudderstack.com/docs/sources/reverse-etl/amazon-s3/) supports syncing data only from your S3 bucket.\n\n#### **Can I use Reverse ETL to ingest streaming data from the warehouse?**\n\nReverse ETL does not support ingesting streaming data. It is not built to handle the rapidly changing data in the warehouse.\n\n#### **Can I connect a Reverse ETL source to multiple destinations?**\n\nYes - RudderStack supports connecting a Reverse ETL source to multiple destinations. However, you cannot connect multiple Reverse ETL sources to a single destination.\n\n#### **Can I connect a warehouse source to a warehouse destination in RudderStack?**\n\nNo - RudderStack does not support connecting a Reverse ETL (warehouse) source to a warehouse destination.\n\n#### **Why can’t I add a Reverse ETL source to an already configured destination?**\n\nThe Reverse ETL feature supports only source-driven configuration of your pipeline. So, you need to configure a new or existing Reverse ETL source in RudderStack and then connect it to a new or existing destination.\n\n## Data syncs\n\n#### **How much time does it take for the synced data to appear in the destination?**\n\nRudderStack sends the records to the destination pretty quickly. It takes around a couple of minutes in most cases but it may take longer depending on the destination type. However, the sync metrics may take some more time (around 10 minutes) to reflect in the RudderStack dashboard.\n\nIf you see a prompt on the sync stating “Records sent to destination, finalizing sync stats”, it indicates that the records have successfully reached the destination.\n\n## Event replay\n\n#### **Can I replay data from a Reverse ETL source in case of failure?**\n\nRudderStack does not support [replaying data](https://www.rudderstack.com/docs/user-guides/administrators-guide/event-replay/) from Reverse ETL sources.\n\n## Sync modes and schedule settings\n\n#### **What is the difference between Basic, CRON, and Manual schedule settings?**\n\nWhen creating a new Reverse ETL source, RudderStack lets you [schedule](https://www.rudderstack.com/docs/sources/reverse-etl/sync-schedule-settings/) your data imports and define how and when the data syncs will run.\n\nRudderStack defines the following three sync schedule types:\n\n| Schedule type | Description |\n| --- | --- |\n| Basic | Runs syncs at a user-specified time and interval. |\n| CRON | Runs syncs based on a user-defined CRON expression. |\n| Manual | User triggers the data syncs manually. |\n\n#### **What is the difference between Upsert and Mirror mode when syncing data?**\n\nRudderStack supports two [sync modes](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/) (available based on the source and the chosen destination) that let you define how you want to sync your data. These are **Upsert** and **Mirror** mode.\n\n*   In the **Upsert** mode, RudderStack supports insertion of new records and updates to the existing records, while syncing data to the destination.\n*   In the **Mirror** mode, RudderStack ‘mirrors’ the source by keeping the destination data the same as the source data. It performs insertion, updates, and deletion of records while syncing data to the destination.\n\n#### **What is the difference between the Full and Incremental sync types?**\n\nThe sync type determines the scope of the sync. It can be one of the following:\n\n*   **Incremental**: RudderStack syncs only the newly added data in the warehouse since the last sync.\n*   **Full**: RudderStack syncs all the data present in the warehouse, irrespective of whether it was synced to the destination previously.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "FAQ | RudderStack Docs",
    "description": "Answers to some of the commonly asked questions on the Reverse ETL feature.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/webhook-source/",
    "markdown": "# Webhook Source | RudderStack Docs\n\nAdd a Webhook source in RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\nRudderStack lets you add any source that supports a webhook and use it to send events to your preferred destinations.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can configure webhooks as sources only for the platforms that support them.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack recommends using the webhook source only if your input data is not in the standard RudderStack event format. In such cases, you can write a [transformation](https://www.rudderstack.com/docs/transformations/overview/) to convert the data into the standard event format. To ingest events with the standard RudderStack event format, it is recommended to use an [HTTP source](https://www.rudderstack.com/docs/api/http-api/) instead.\n\n## Getting started\n\nFollow these steps to set up your webhook source in the RudderStack dashboard:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In this example, events are ingested from [Mailchimp](https://mailchimp.com/) into RudderStack by configuring a webhook.\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Webhook**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your webhook source is now created. Note the **Webhook URL** containing the **Write key** as a query parameter:\n\n[![Webhook endpoint](https://www.rudderstack.com/docs/images/event-stream-sources/webhook-endpoint-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/webhook-endpoint-url.webp)\n\n4.  Then, [add a destination in RudderStack](https://www.rudderstack.com/docs/dashboard-guides/destinations/#adding-a-destination) and connect it to this webhook source.\n\n5.  Next, add the webhook URL to your source platform - in this case, **Mailchimp**.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can configure webhooks as sources only for the platforms that support them.\n\nThe following image shows the webhook URL added in Mailchimp:\n\n[![Adding the webhook to an event source](https://www.rudderstack.com/docs/images/event-stream-sources/webhook-5.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/webhook-5.webp)\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Add and test your webhook URL. You can use the [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/#source-live-events) functionality to view the events tracked in real time.\n\nWhen the users perform any action configured in the source, the source platform will automatically send the generated events to the webhook URL.\n\nIn this example, Mailchimp sends the updates under **Trigger on Events** (seen in the above image) as the user events to the webhook URL with the content type `application/x-www-form-urlencoded`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The content type can vary in case of the other webhook sources.\n\nRudderStack then takes the data, creates the payload, and sends it to the destinations connected to the webhook source (Google Analytics, in this case).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You must also add the appropriate [Transformation](https://www.rudderstack.com/docs/transformations/overview/) to transform the payload into a destination-specific format before sending it to the destination. Refer to the [Payload creation and transformation](#payload-creation-and-transformation) section for more details.\n\n## Payload creation and transformation\n\nThis section details how RudderStack receives the data from the webhook source platform and creates the resulting payload.\n\n1.  Continuing with our Mailchimp example, suppose a customer subscribes to Mailchimp. Mailchimp then sends the following data to RudderStack:\n\n```\ntype=subscribe&fired_at=2021-07-28+08%3A06%3A59&data%5Bid%5D=e2ff089583&data%5Bemail%5D=ruchira%40rudderlabs.com&data%5Bemail_type%5D=html&data%5Bip_opt%5D=115.187.35.152&data%5Bweb_id%5D=161912900&data%5Bmerges%5D%5BEMAIL%5D=name%40rudderlabs.com&data%5Bmerges%5D%5BFNAME%5D=Name&data%5Bmerges%5D%5BLNAME%5D=Surname&data%5Bmerges%5D%5BADDRESS%5D=&data%5Bmerges%5D%5BPHONE%5D=&data%5Bmerges%5D%5BBIRTHDAY%5D=&data%5Blist_id%5D=ec4689c266\n```\n\n2.  RudderStack receives this data and creates the following payload:\n\n```\n  {\n  type: \"track\",\n  event: \"webhook_source_event\",\n  rudderId: \"044448e2-a674-426c-ba61-8341262babcc\",\n  messageId: \"4379907d-689a-4e3a-a2f7-477e29a02299\",\n  properties: {\n    type: [\"subscribe\"],\n    \"data[id]\": [\"e2ff089583\"],\n    fired_at: [\"2021-07-28 08:06:59\"],\n    \"data[email]\": [\"[name@rudderlabs.com](mailto:name@rudderlabs.com)\"],\n    \"data[ip_opt]\": [\"115.187.35.152\"],\n    \"data[web_id]\": [\"161912900\"],\n    \"data[list_id]\": [\"ec4689c266\"],\n    \"data[email_type]\": [\"html\"],\n    \"data[merges][EMAIL]\": [\n      \"[name@rudderlabs.com](mailto:name@rudderlabs.com)\",\n    ],\n    \"data[merges][FNAME]\": [\"Name\"],\n    \"data[merges][LNAME]\": [\"Surname\"],\n    \"data[merges][PHONE]\": [\"\"],\n    \"data[merges][ADDRESS]\": [\"\"],\n    \"data[merges][BIRTHDAY]\": [\"\"],\n  },\n  anonymousId: \"d6597ba2-54db-4bd7-8769-86ac067b4178\",\n}\n```\n\n3.  Transform this payload as per the event format accepted by destination. To do this, use RudderStack’s [Transformation](https://www.rudderstack.com/docs/transformations/overview/) feature. A sample transformation is as shown below:\n\n```\nexport function transformEvent(event) {\n  const updatedEvent = event\n  const { properties } = event\n\n  if (properties) {\n    updatedEvent.event = properties.type\n    updatedEvent.userId = properties[\"data[email]\"]\n    updatedEvent.properties.name = `${properties[\"data[merges][FNAME]\"]} ${properties[\"data[merges][LNAME]\"]}`\n    updatedEvent.properties.phone = properties[\"data[merges][PHONE]\"]\n\n    delete updatedEvent.properties[\"data[merges][PHONE]\"]\n    delete updatedEvent.properties[\"data[merges][FNAME]\"]\n    delete updatedEvent.properties[\"data[merges][LNAME]\"]\n  }\n\n  return updatedEvent\n}\n```\n\nThe transformed payload is shown below:\n\n```\n{\n  type: 'track',\n  event: [\n    'subscribe'\n  ],\n  rudderId: '044448e2-a674-426c-ba61-8341262babcc',\n  messageId: '4379907d-689a-4e3a-a2f7-477e29a02299',\n  properties: {\n    type: [\n      'subscribe'\n    ],\n    'data[id]': [\n      'e2ff089583'\n    ],\n    fired_at: [\n      '2021-07-28 08:06:59'\n    ],\n    'data[email]': [\n      'name@rudderlabs.com'\n    ],\n    'data[ip_opt]': [\n      '115.187.35.152'\n    ],\n    'data[web_id]': [\n      '161912900'\n    ],\n    'data[list_id]': [\n      'ec4689c266'\n    ],\n    'data[email_type]': [\n      'html'\n    ],\n    'data[merges][EMAIL]': [\n      'name@rudderlabs.com'\n    ],\n    'data[merges][ADDRESS]': [\n      ''\n    ],\n    'data[merges][BIRTHDAY]': [\n      ''\n    ],\n    name: 'Name Surname',\n    phone: [\n      ''\n    ]\n  },\n  anonymousId: 'd6597ba2-54db-4bd7-8769-86ac067b4178',\n  userId: [\n    'name@rudderlabs.com'\n  ]\n}\n```\n\n4.  RudderStack then sends this payload to the destinations connected to your source - Google Analytics, in this case.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Webhook Source | RudderStack Docs",
    "description": "Add a Webhook source in RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/extole/",
    "markdown": "# Extole | RudderStack Docs\n\nIngest your event data from Extole into RudderStack.\n\n* * *\n\n*     2 minute read  \n    \n\n[Extole](https://www.extole.com/) is a popular referral marketing tool. It enables you to offer an integrated, optimized, and effective customer experience for your audience.\n\nYou can now send your Extole events to RudderStack by adding a webhook that points to RudderStack. These events include the reward-specific events such as `reward_earned`,`reward_fulfilled`,`reward_sent`, etc. along with other Extole custom events.\n\nThis guide will help you in setting up Extole as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Extole source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Extole**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Extole source is now configured. Go to the **Settings** tab and note the **Webhook URL**:\n\n[![Extole webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/extole-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/extole-webhook-url.webp)\n\n4.  Next, head over to your Extole account and select the **program** you want to use for RudderStack to ingest your data.\n5.  Then, navigate to the **Tech Center** section from the sidebar and then select [Rewards WebHooks](https://my.extole.com/tech-center/rewards-webhooks).\n6.  Then, click the **New Reward Webhook** option as seen in the following image:\n\n[![Extole new webhook](https://www.rudderstack.com/docs/images/event-stream-sources/extole-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/extole-3.webp)\n\n7.  In the **URL** text box, add the webhook URL obtained in **Step 3**. The URL should be of the following format:\n\n```\n<DATA_PLANE_URL>/v1/webhook?writeKey=<WRITE_KEY>\n```\n\nFor more information on the data plane URL, refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url).\n\n8.  Finally, save the endpoint.\n\n## Event transformation\n\nRudderStack ingests the Extole events and converts them to the RudderStack’s `track` call with the designated event name and associated properties. For example, Extole’s `event_id` is converted and set to `properties.eventId`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack retains the Extole event name during the mapping.\n\nRudderStack populates the following properties from the Extole event payload to the RudderStack event:\n\n| **Extole Property** | **RudderStack Property** |\n| --- | --- |\n| `event_id`, | `properties.eventId` |\n| `event_time` | `originalTimestamp` |\n| `reward_id` | `properties.rewardId` |\n| `reward_supplier_name` | `properties.rewardSupplierName` |\n| `reward_supplier_id` | `properties.rewardSupplierId` |\n| `partner_reward_supplier_id` | `properties.partnerRewardSupplierId` |\n| `reward_supplier_type` | `properties.partnerRewardSupplierType` |\n| `person_id` | `properties.personId` |\n| `partner_user_id` | `properties.partnerUserId`, `userId`, `context.traits.userId` |\n| `face_value` | `properties.faceValue` |\n| `face_value_type` | `properties.faceValueType` |\n| `message` | `properties.message` |\n| `partner_reward_id` | `properties.partnerRewardId` |\n| `email` | `properties.email` |\n| `data` | `properties.data` |\n| `schema_version` | `properties.schemaVersion` |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> All the Extole event properties (except `reward_earned`, `reward_fulfilled`, and `reward_sent`) sent to RudderStack are directly mapped to the RudderStack event properties.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Extole | RudderStack Docs",
    "description": "Ingest your event data from Extole into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/data-pipelines/event-stream/",
    "markdown": "# Event Stream | RudderStack Docs\n\nIngest your event data into RudderStack using cloud apps and SDKs.\n\n* * *\n\n*     3 minute read  \n    \n\nRudderStack’s **Event Stream** pipeline offers a comprehensive solution for collecting real-time user event data and sending it to integrations across your stack, including cloud tools, data warehouses, and data processing tools.\n\nTop Event Stream use cases include:\n\n*   Simplifying event collection through a single SDK\n*   Syncing raw event data to data warehouses and data lakes\n*   Cleaning, enriching, and transforming events in real-time\n*   Identifying anonymous and known users\n*   Implementing cookieless tracking\n*   Building and managing custom integrations\n*   Automating integration management in a centralized platform\n\nYou can see how Event Stream pipelines work in this self-paced product tour:\n\n## Event Stream sources\n\nOur Event Stream pipeline can ingest events from from:\n\n*   16 open-source SDKs for web, mobile, and server-side platforms\n*   Cloud apps that support event emission\n*   Any custom source that can send data to a RudderStack Webhook source\n\nRudderStack offers a suite of versatile open-source SDKs designed to integrate seamlessly with your web, mobile, and server-side applications. These SDKs enable developers to reliably track and manage event data across various platforms, ensuring a secure and reliable data platform that scales with your technology stack.\n\n### Web SDKs\n\nRudderStack provides open-source SDKs for robust and reliable web data collection. Our Web SDKs allow you to capture and send high-fidelity customer event data from your websites and web apps without compromising on site performance.\n\n*   [AMP](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-amp-analytics/)\n*   [JavaScript](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/)\n\n### Mobile SDKs\n\nUse the native RudderStack SDKs for the iOS, Android, and cross-platform development frameworks allowing you to harness device-specific functionalities and optimize mobile user engagement.\n\n*   [Android](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/)\n*   [Cordova](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-cordova-sdk/)\n*   [Flutter](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/)\n*   [iOS](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/)\n*   [React Native](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-react-native-sdk/)\n*   [Unity](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-unity-sdk/)\n\n### Server SDKs\n\nUse the server-side SDKs to track event data from your backend applications and ensure secure, comprehensive event tracking for your server-side transactions with the ability to monitor system health at every step.\n\n*   [.NET](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-dotnet-sdk/)\n*   [Go](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-go-sdk/)\n*   [Java](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-java-sdk/)\n*   [Node.js](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/)\n*   [PHP](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-php-sdk/)\n*   [Python](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-python-sdk/)\n*   [Ruby](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ruby-sdk/)\n*   [Rust](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-rust-sdk/)\n\n### Cloud App sources\n\nIngest event data from your cloud apps and route it to the specified destinations with ease. RudderStack’s intelligent data pipelines can handle high volumes of data inflow, ensuring that your event data is collected seamlessly from various cloud applications and services.\n\n*   [Adjust](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/adjust/)\n*   [AppsFlyer](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/appsflyer/)\n*   [App Center](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/appcenter/)\n*   [Auth0](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/auth0/)\n*   [Braze](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/braze-currents/)\n*   [Canny](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/canny/)\n*   [ClickUp](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/clickup/)\n*   [Customer.io](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/customerio/)\n*   [Extole](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/extole/)\n*   [Formsort](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/formsort/)\n*   [Gainsight PX](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/gainsight-px/)\n*   [Iterable](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/iterable/)\n*   [Looker](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/looker/)\n*   [Mailjet](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/mailjet/)\n*   [Mailmodo](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/mailmodo/)\n*   [Monday](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/monday/)\n*   [MoEngage](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/moengage/)\n*   [Olark](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/olark/)\n*   [Ortto](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/ortto/)\n*   [PagerDuty](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/pagerduty/)\n*   [Pipedream](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/pipedream/)\n*   [PostHog](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/posthog/)\n*   [Refiner](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/refiner/)\n*   [RevenueCat](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/revenuecat/)\n*   [SatisMeter](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/satismeter/)\n*   [Segment](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/segment/)\n*   [Shopify](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/shopify/)\n*   [Signl4](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/signl4/)\n*   [Slack](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/slack/)\n\n## Event Stream destinations\n\nOnce events are ingested, you can forward them to the 200+ destinations in our integrations library, or to your own custom destinations (using our Webhook destination).\n\nBrowse the [destination integration library](https://www.rudderstack.com/docs/destinations/overview/).\n\n## Advanced features and use cases\n\nThis section covers two important advanced use cases you can implement on your Event Stream data - **Transformations** and **Identity Resolution**.\n\n### Transformations\n\nRudderStack can [transform](https://www.rudderstack.com/docs/transformations/overview/) events in real-time using Python or JavaScript to customize your data flows. It can also ensure data integrity and consistency across your pipelines with centralized tracking plans that provide full visibility into your customer data’s journey.\n\n### User identification and identity resolution\n\nYou can also assign unique IDs for anonymous users via [Identity Stitching](https://www.rudderstack.com/docs/profiles/core-concepts/identity-stitching/) and reconcile unified customer [Profiles](https://www.rudderstack.com/docs/profiles/overview/) in your data warehouse.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Event Stream | RudderStack Docs",
    "description": "Ingest your event data into RudderStack using cloud apps and SDKs.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/data-pipelines/event-stream/quickstart/",
    "markdown": "# Event Stream Quickstart | RudderStack Docs\n\nGet event data flowing from your website or app in less than 15 minutes.\n\n* * *\n\n*     10 minute read  \n    \n\nRudderStack’s Event Stream pipelines help you collect behavioral events and automatically send them to other tools in your stack.\n\nFor simple use cases, you can get data flowing in less than 15 minutes by following these three steps:\n\n1.  **Install a RudderStack SDK** in your website or app.\n2.  **Instrument API calls** to identify users and capture user actions (like page views and button clicks).\n3.  **Connect destination integrations** to stream events to business tools and your warehouse automatically.\n\n[![RudderStack Event Stream Quickstart - 3 steps to collecting and integrating events](https://www.rudderstack.com/docs/images/get-started/event-stream-quick-start-3-steps.png)](https://www.rudderstack.com/docs/images/get-started/event-stream-quick-start-3-steps.png)\n\nData teams often need to collaborate with front-end and back-end engineers to get RudderStack SDKs installed and event API calls instrumented.\n\n[Step 1](#how-data-engineers-can-get-the-javascript-sdk-code) and [Step 2](#step-3-instrument-api-calls) of this guide include helpful information for data engineers and software engineers who are collaborating on initial installation and instrumentation.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> You can use the [Event Playground app](#step-2-verify-data-flow) if you want to test events flowing through RudderStack **without** any instrumentation.\n\n## Step 1: Install the JavaScript SDK\n\nIn most cases, installing one of RudderStack’s SDKs in a dev environment takes a front-end or back-end developer less than 10 minutes.\n\nStarting with the JavaScript SDK is recommended for the following reasons:\n\n*   The JavaScript SDK captures rich, client-side context in the payloads that help data engineers understand the full event schema.\n*   Front-end updates are often faster to implement and deploy than back-end updates.\n\nYou can also see our Quickstart guides for [mobile](https://www.rudderstack.com/docs/data-pipelines/event-stream/quickstart/mobile-quickstart/) and [server-side](https://www.rudderstack.com/docs/data-pipelines/event-stream/quickstart/server-side-quickstart/) SDKs.\n\n### How data engineers can get the JavaScript SDK code\n\n1.  Sign in to your RudderStack account and click **\\+ Add source** in the default **Connections** view.\n\n[![Add source](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)\n\n2.  Select **JavaScript**.\n\n[![JavaScript source](https://www.rudderstack.com/docs/images/get-started/quickstart/js-sdk.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/js-sdk.webp)\n\n3.  Copy the installation snippet under the **Setup** tab (this snippet contains the [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) and [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) , which ensure events are sent to the correct source).\n\n[![JavaScript SDK snippet](https://www.rudderstack.com/docs/images/get-started/quickstart/js-sdk-snippet.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/js-sdk-snippet.webp)\n\n4.  Send the snippet to your front-end development team.\n\n### How front-end engineers can install the JavaScript SDK\n\nYour data engineer should have provided you a code snippet per the above steps. To install, paste the code into your website’s `<head>` section.\n\nThe snippet you received already contains the [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) and [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) needed to route the event to the correct RudderStack source.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The implicit `page` call at the end of the snippet (in case of the previous JavaScript SDK versions) is removed in [JavaScript SDK v3](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/). You will have to [instrument it separately](#instrumenting-page-calls).\n\n## Step 2: Verify data flow\n\nOnce you have installed the JavaScript SDK, you can use RudderStack’s Event Playground app to verify data flow **without** any instrumentation.\n\nTo send test events to your account:\n\n1.  Sign in to the [RudderStack dashboard](https://app.rudderstack.com/). Note the [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) at the top of the default **Connections** page.\n\n[![Data plane URL](https://www.rudderstack.com/docs/images/general/data-plane-url.webp)](https://www.rudderstack.com/docs/images/general/data-plane-url.webp)\n\n2.  Set up a [source](https://www.rudderstack.com/docs/dashboard-guides/sources/#add-a-source) and note its [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) .\n\n[![JavaScript SDK source write key](https://www.rudderstack.com/docs/images/get-started/quickstart/js-write-key.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/js-write-key.webp)\n\n3.  Click **Use My Account** in the Event Playground app and specify the write key and data plane URL.\n4.  Click **Save**.\n5.  Select the required **API Method** from the dropdown, edit the relevant fields or traits/properties, and click **Send to my account**.\n6.  To verify the data flow, go to the [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/#view-source-live-events) viewer of your source.\n\nSee [Step 4: Check live events](#step-4-check-live-events) for more information.\n\n## Step 3: Instrument API calls\n\nThe RudderStack JavaScript SDK follows a [standard event spec](https://www.rudderstack.com/docs/event-spec/standard-events/). It helps you plan your event data and supports various API calls for tracking your website events - these include `identify`, `track`, `screen`, `group`, `alias`, and `reset` calls.\n\nThe best place to start instrumentation is with `page` calls, which help you track pages your unique users visit.\n\n### Instrumenting `page` calls\n\n[`page`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#page) events help you in analyzing customer journeys in your warehouse or data lake. You can also forward them directly to downstream tools like Google Analytics or Amplitude for real-time marketing and product analytics.\n\nA sample `page` call is shown below:\n\nFor other frameworks and single page apps, run the `page` call whenever the URL changes. Here’s an example of how to do this in Next.js:\n\n```\n'use client'\n\nimport { useEffect } from 'react'\nimport { usePathname } from 'next/navigation'\n\nexport const RudderAnalytics = () => {\n  const pathname = usePathname()\n\n  useEffect(() => {\n     window.rudderanalytics.page()\n  }, [pathname])\n\n}\n```\n\nIf you’re running a Jamstack setup, see the [Jamstack setup guides](https://www.rudderstack.com/docs/user-guides/how-to-guides/rudderstack-jamstack-integration/) for framework-specific instructions.\n\n### Instrumenting additional API calls\n\nApart from `page` calls, [`track`](#track-events) and [`identify`](#identify-events) are the most commonly used API calls.\n\n*   `track` events represent user actions, like button clicks.\n*   `identify` calls let you identify users, assign them traits (like name and email), and associate the user to their actions.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To see an example of instrumentation in the context of a full HTML page, see the [full HTML page example](#full-html-page-example) where the SDK is installed and `track` and `identify` calls are instrumented.\n\n#### **Track events**\n\nTo implement [`track`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#track) calls, you need to listen for the desired user action, then fire a `track` call when it happens. You can describe these events by adding [propertiesProperties are additional contextual information you can add to a `track` call to further describe the action a user takes.](https://www.rudderstack.com/docs/resources/glossary/#properties) to the payload.\n\nHere is an example of basic, inline front-end code that fires a `track` call named `click` when a user clicks on an element. The properties are `target_url` and `link_text`.\n\n```\n<a\n  href=\"/foo\"\n  onclick=\"window.rudderanalytics.track('click', {\n  target_url: '/foo',\n  link_text: 'Bar'\n  })\n  \">\nBar\n</a>\n```\n\n#### **Identify events**\n\n[`identify`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#identify) calls are typically fired when a user performs an identifying action like making a purchase or submitting a form. `identify` calls also associate a known user with their actions (even if previously anonymous). You can describe users with attributes by adding [traitsTraits are attributes that describe a user. They can be added to an identify call in the `traits` object. Some examples of traits include age, gender, or some specific details - for example, a user’s product plan (free, basic, premium).](https://www.rudderstack.com/docs/resources/glossary/#traits) to the payload.\n\nHere is an example of basic, inline front-end code that fires an `identify` call on form submit. The `traits` are `company`, `name`, and `email`.\n\n```\n<form>\n  <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"name\" />\n  <input type=\"text\" name=\"company\" id=\"company\" placeholder=\"company\" />\n  <input type=\"text\" name=\"email\" id=\"email\" placeholder=\"email\" />\n  <input\n    type=\"submit\"\n    onclick=\"\n    window.rudderanalytics.identify(\n    document.getElementById('email').value, \n    { company: document.getElementById('company').value, \n    name: document.getElementById('name').value,\n    email: document.getElementById('email').value \n    }); return false;\" />\n</form>\n```\n\n## Step 4: Check live events\n\nOnce software engineers have installed the SDK and instrumented events, the data team can verify the event flow into RudderStack. Then, they can connect destination integrations to forward events to the tools in their stack automatically.\n\nTo see the live events, go to your JavaScript source from the **Connections** view and click the **Live Events** button in the top right of your screen.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> There will be a delay before you see events in the **Live Events** view. RudderStack does not store any data; it temporarily opens a gateway between the control plane and data plane to show you the live events. The delays usually last only a few seconds but on the [RudderStack Cloud Free](https://rudderstack.com/pricing/) plan, they can last up to one minute.\n\n[![Live Events](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events.webp)](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events.webp)\n\nAfter a few seconds, you will see events populating the feed.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you do not see events in the **Live Events** view, then there is likely a problem with your instrumentation.\n\n## Step 5: Connect destination integrations\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> RudderStack supports 200+ integrations including data warehouses and data lakes, marketing platforms, CRMs, analytics tools, streaming platforms, and more. You can see the full list of supported destination integrations [here](https://www.rudderstack.com/docs/destinations/overview/).\n\nTo add a destination in RudderStack:\n\n1.  Click **\\+ Add destination** in the default **Connections** view.\n\n[![Add destination](https://www.rudderstack.com/docs/images/get-started/quickstart/add-destination.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-destination.webp)\n\n2.  From the list, select a destination where you want to route your event data. Here are some popular destinations to help you get started:\n\n| Category | Destination |\n| --- | --- |\n| Analytics | [Amplitude](https://www.rudderstack.com/docs/destinations/streaming-destinations/amplitude/), [Mixpanel](https://www.rudderstack.com/docs/destinations/streaming-destinations/mixpanel/), [GA4](https://www.rudderstack.com/docs/destinations/streaming-destinations/google-analytics-4/) |\n| CRM | [HubSpot](https://www.rudderstack.com/docs/destinations/streaming-destinations/hubspot/), [Salesforce](https://www.rudderstack.com/docs/destinations/streaming-destinations/salesforce/) |\n| Marketing | [Braze](https://www.rudderstack.com/docs/destinations/streaming-destinations/braze/), [Mailchimp](https://www.rudderstack.com/docs/destinations/streaming-destinations/mailchimp/) |\n| Object storage | [Amazon S3](https://www.rudderstack.com/docs/destinations/streaming-destinations/amazon-s3/), [Redis](https://www.rudderstack.com/docs/destinations/streaming-destinations/redis/) |\n| Streaming platforms | [Apache Kafka](https://www.rudderstack.com/docs/destinations/streaming-destinations/kafka/), [Amazon Kinesis](https://www.rudderstack.com/docs/destinations/streaming-destinations/amazon-kinesis/) |\n| Warehouses | [Snowflake](https://www.rudderstack.com/docs/destinations/warehouse-destinations/snowflake/), [BigQuery](https://www.rudderstack.com/docs/destinations/warehouse-destinations/bigquery/), [Redshift](https://www.rudderstack.com/docs/destinations/warehouse-destinations/redshift/) |\n| Data lakes & lakehouses | [Databricks](https://www.rudderstack.com/docs/destinations/warehouse-destinations/delta-lake/), [Google Cloud Storage](https://www.rudderstack.com/docs/destinations/warehouse-destinations/gcs-datalake/) |\n\n3.  Set up the destination by configuring the connection settings. For details, see the [destination-specific documentation](https://www.rudderstack.com/docs/destinations/overview/).\n\n## Next steps\n\nThis section contains some optional but helpful steps that leverage RudderStack’s most popular features for transforming events and debugging problems.\n\n### Add event transformations\n\nOne of RudderStack’s most-used features is [Event Transformations](https://www.rudderstack.com/docs/transformations/overview/), which you can use to operate on the payloads flowing through RudderStack. You can use it for:\n\n*   Sampling or filtering events.\n*   Removing sensitive user PII from your events.\n*   Enriching events using static logic, an external API, and more.\n\nTo use a transformation:\n\n1.  In the left sidebar, go to **Collect** > **Transformations**. Then, click **Create Transformation**.\n\n[![Create transformation](https://www.rudderstack.com/docs/images/get-started/quickstart/create-transformation.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/create-transformation.webp)\n\n2.  Select a [transformation template](https://www.rudderstack.com/docs/transformations/templates/) from the list depending on your use case. To create a transformation from scratch, click **Custom transformation**.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Transformation templates contain prepopulated, ready-to-use transformation logic, which you can apply to your events before sending them to the destination. You can also modify the code as per your needs.\n\n[![Choose a template](https://www.rudderstack.com/docs/images/features/transformation-templates-2.webp)](https://www.rudderstack.com/docs/images/features/transformation-templates-2.webp)\n\n3.  Verify if your transformation works as expected by clicking the **Run Test** button.\n\n[![Testing a transformation](https://www.rudderstack.com/docs/images/features/run-test-transformations.webp)](https://www.rudderstack.com/docs/images/features/run-test-transformations.webp)\n\n4.  Click **Save** to save your transformation.\n5.  Go to the **Connections** tab of your transformation and connect it to the destination you set up above. See [Connect transformation to destination](https://www.rudderstack.com/docs/transformations/manage/#connect-transformation-to-destination) for more information.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> When you add a transformation and connect it to a destination, RudderStack does the following:\n> \n> 1.  Tracks events at the source.\n> 2.  Applies the transformation logic to your events.\n> 3.  Converts the events in a format the destination expects - RudderStack does this internally and requires no user intervention.\n> 4.  Sends the transformed events to your destination.\n\n### Debugging\n\nRudderStack gives you complete observability into your events and the ability to debug errors that might occur in case of event failures. It provides the [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) feature, where you can:\n\n*   Verify your instrumentation.\n*   Get a real-time view of the events flowing from your sources to the connected destinations.\n*   Identify and debug any errors at the source, destination, or transformation level and narrow down the root cause of the issue.\n\n#### **Source Live Events viewer**\n\nThis is helpful to verify if RudderStack is receiving the source events at all. The payload you see in this viewer is the raw event payload collected from your website.\n\n[![Live Events](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events.webp)](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events.webp)\n\n[![Source live events details](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events-details.webp)](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events-details.webp)\n\n#### **Transformation Live Events viewer**\n\nThis viewer will give you a before and after snapshot of the event going into your user transformation and what it looks like afterward. It also notifies you about any dropped events or errors during the transformation, along with the details.\n\n[![Transformation live events](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events.webp)](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events.webp)\n\n[![Transformation live events error message](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events-errors.webp)](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events-errors.webp)\n\n#### **Destination Live Events viewer**\n\nThis viewer shows you what the payload looks like when RudderStack sends it to the destination. You can also see the detailed error message if the destination returns an error.\n\n[![Payload to the destination](https://www.rudderstack.com/docs/images/rs-cloud/destination-live-events-details.webp)](https://www.rudderstack.com/docs/images/rs-cloud/destination-live-events-details.webp)\n\nSee the [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) documentation for more details.\n\n## Full HTML page example\n\nHere’s an example of the RudderStack JavaScript SDK installed on an HTML page with `track` and `identify` calls instrumented inline.\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <script type=\"text/javascript\">\n  // Replace the <script> tag with your JavaScript SDK snippet.\n  </script>\n  <title>RudderStack Example</title>\n</head>\n\n<body>\n    <form>\n        <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"name\" />\n        <input type=\"text\" name=\"company\" id=\"company\" placeholder=\"company\" />\n        <input type=\"text\" name=\"email\" id=\"email\" placeholder=\"email\" />\n        <input\n          type=\"submit\"\n          onclick=\"\n          window.rudderanalytics.identify(\n          document.getElementById('email').value, \n          { \n            company: document.getElementById('company').value, \n            name: document.getElementById('name').value,\n            email: document.getElementById('email').value \n          }); return false;\" />\n    </form>\n    <a\n        href=\"/foo\"\n        onclick=\"window.rudderanalytics.track('click', {\n        target_url: '/foo',\n        link_text: 'Bar'\n        })\n        \">\n        Bar\n    </a>\n</body>\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Event Stream Quickstart | RudderStack Docs",
    "description": "Get event data flowing from your website or app in less than 15 minutes.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/formsort/",
    "markdown": "# Formsort | RudderStack Docs\n\nIngest your event data from Formsort into RudderStack.\n\n* * *\n\n*     2 minute read  \n    \n\n[Formsort](https://formsort.com/) platform provides tools for businesses and organizations to create user-friendly forms and surveys. You can use these forms for lead generation, customer feedback, event registration, job applications, etc.\n\n## Getting started\n\nFollow these steps to set up your Formsort source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Formsort**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Formsort source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![Formsort source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/formsort-source-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/formsort-source-webhook.webp)\n\n4.  Log in to your [Formsort account](https://studio.formsort.com/auth/login).\n5.  [Set up your webhook integration](https://docs.formsort.com/handling-data/integration-reference/webhooks#setting-up-the-webhook-integration), add the **Webhook URL** obtained in step 3, and save the configuration:\n\n[![Formsort source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/formsort-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/formsort-webhook.webp)\n\n## Event transformation\n\nBased on the [webhook posting frequency](https://docs.formsort.com/handling-data/integration-reference/webhooks#posting-frequency) you choose while setting up the webhook integration in Formsort, RudderStack sets the event name as `FlowFinalized` when the flow is finalized. Otherwise, it sets the event name as `FlowLoaded`.\n\nRudderStack ingests the Formsort events after converting them into the RudderStack event format. It also maps the following properties from the Formsort event payload to the RudderStack properties:\n\n| Formsort property | RudderStack property |\n| --- | --- |\n| `created_at` | `originalTimestamp` |\n| `responder_uuid` | `userId` |\n| `answers` | `properties` |\n| `flow_label` | `context.page.title` |\n| `variant_label` | `context.variantLabel` |\n| `variant_uuid` | `context.variantUuid` |\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from Formsort source and creates the resulting payload.\n\n### FlowFinalized event\n\nA sample payload sent by Formsort when `finalized` is `true` is shown below:\n\n```\n{\n  \"answers\": {\n    \"yes\": true,\n    \"enter_email\": \"testUser@rudderstack.com\",\n    \"enter_name\": \"2000-11-25\",\n    \"yes_or_no\": false\n  },\n  \"responder_uuid\": \"be2f3a8d-8aa4-4a01-8855-8e464a752b52\",\n  \"flow_label\": \"new-flow-2022-11-25\",\n  \"variant_label\": \"main\",\n  \"variant_uuid\": \"0828efa7-7215-4e7d-a7ab-6c1079010cea\",\n  \"finalized\": true,\n  \"created_at\": \"2022-11-25T14:36:58+00:00\"\n}\n```\n\nRudderStack transforms the above payload into the following [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) payload with event name as `FlowFinalized`:\n\n```\n{\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"integration\": {\n      \"name\": \"Formsort\"\n    },\n    \"page\": {\n      \"title\": \"new-flow-2022-11-25\"\n    },\n    \"variantLabel\": \"main\",\n    \"variantUuid\": \"0828efa7-7215-4e7d-a7ab-6c1079010cea\"\n  },\n  \"integrations\": {\n    \"Formsort\": false\n  },\n  \"type\": \"track\",\n  \"anonymousId\": \"7bd86cd0-df65-4e3e-bddd-3ba4da17fbb3\",\n  \"userId\": \"be2f3a8d-8aa4-4a01-8855-8e464a752b52\",\n  \"originalTimestamp\": \"2022-11-25T14:36:58+00:00\",\n  \"properties\": {\n    \"yes\": true,\n    \"enter_email\": \"testUser@rudderstack.com\",\n    \"enter_name\": \"2000-11-25\",\n    \"yes_or_no\": false\n  },\n  \"event\": \"FlowFinalized\"\n}\n```\n\n### FlowLoaded event\n\nA sample payload sent by Formsort when `finalized` is `false` is shown below:\n\n```\n{\n  \"answers\": {\n    \"yes\": true,\n    \"enter_email\": \"test@user.com\",\n    \"enter_name\": \"2022-11-17\",\n    \"yes_or_no\": false\n  },\n  \"responder_uuid\": \"66a8e5bb-67e1-47ec-b55f-a26fd4be2dc7\",\n  \"flow_label\": \"new-flow-2022-11-25\",\n  \"variant_label\": \"main\",\n  \"variant_uuid\": \"0828efa7-7215-4e7d-a7ab-6c1079010cea\",\n  \"finalized\": false,\n  \"created_at\": \"2022-11-25T14:41:22+00:00\"\n}\n```\n\nRudderStack transforms the above payload into the following [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) payload with event name as `FlowLoaded`:\n\n```\n{\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"integration\": {\n      \"name\": \"Formsort\"\n    },\n    \"page\": {\n      \"title\": \"new-flow-2022-11-25\"\n    },\n    \"variantLabel\": \"main\",\n    \"variantUuid\": \"0828efa7-7215-4e7d-a7ab-6c1079010cea\"\n  },\n  \"integrations\": {\n    \"Formsort\": false\n  },\n  \"type\": \"track\",\n  \"anonymousId\": \"448a42fd-18e5-4cdf-859b-5b99aceaf474\",\n  \"userId\": \"be2f3a8d-8aa4-4a01-8855-8e464a752b52\",\n  \"originalTimestamp\": \"2022-11-25T14:36:58+00:00\",\n  \"properties\": {\n    \"yes\": true,\n    \"enter_email\": \"testUser@rudderstack.com\",\n    \"enter_name\": \"2000-11-25\",\n    \"yes_or_no\": false\n  },\n  \"event\": \"FlowLoaded\"\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Formsort | RudderStack Docs",
    "description": "Ingest your event data from Formsort into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/extract/",
    "markdown": "# Cloud Extract (ETL) Sources | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "Cloud Extract (ETL) Sources | RudderStack Docs",
    "description": "Build efficient ETL pipelines by sending data from various cloud apps to your warehouse.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/data-pipelines/event-stream/quickstart/mobile-quickstart/",
    "markdown": "# Mobile Quickstart | RudderStack Docs\n\nGet event data flowing from your mobile app in less than 15 minutes.\n\n* * *\n\n*     8 minute read  \n    \n\nThis quickstart guide walks through code examples using the [iOS SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/). It will help you get started with using [RudderStack mobile SDKs](https://www.rudderstack.com/docs/sources/event-streams/sdks/#mobile) to stream events from your mobile app to other tools in your stack.\n\nFor simple use cases, you can get data flowing in less than 15 minutes by following these three steps:\n\n1.  **Install a RudderStack SDK** in your mobile app.\n2.  **Instrument API calls** to identify users and capture user actions (like page views and button clicks).\n3.  **Connect destination integrations** to stream events to business tools and your warehouse automatically.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> [Sign up](https://app.rudderstack.com/signup) for a free RudderStack Cloud account before you get started.\n\n## Step 1: Install the iOS SDK\n\nIn most cases, installing one of RudderStack’s [mobile SDKs](https://www.rudderstack.com/docs/sources/event-streams/sdks/#mobile) takes a developer less than 10 minutes.\n\n### How data engineers can get the iOS SDK code\n\n1.  Sign in to your RudderStack account and click **\\+ Add source** in the default **Connections** view.\n\n[![Add source](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)\n\n2.  Select **iOS**.\n\n[![Add source](https://www.rudderstack.com/docs/images/get-started/quickstart/add-mobile-source.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-mobile-source.webp)\n\n3.  Copy the installation snippet under the **Setup** tab (this snippet contains the [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) and [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) , which ensure events are sent to the correct source).\n\n[![iOS SDK snippet](https://www.rudderstack.com/docs/images/get-started/quickstart/ios-snippet.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/ios-snippet.webp)\n\n4.  Send the snippet to your mobile development team.\n\n### How mobile developers can install the iOS SDK\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Before installing the iOS SDK, make sure to first initialize the `Podfile` within your app by running `pod init`.\n> \n> If you are using Swift Package Manager (SPM) to install the iOS SDK, see these [instructions](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/#swift-package-manager).\n\n1.  Install the iOS SDK using [Cocoapods](https://cocoapods.org/pods/Rudder) by adding the iOS SDK to your application’s `Podfile`:\n\n2.  Run the following command to install the SDK and the required dependencies:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Include the following code in all `.m` and `.h` files where you want to reference or use the RudderStack SDK classes.\n> \n> ```\n> #import <Rudder/Rudder.h>\n> ```\n\n#### **Initialize the SDK**\n\nYour data engineer should have provided you the [iOS SDK snippet](#how-data-engineers-can-get-the-ios-sdk-code). Follow these steps to initialize the SDK:\n\n1.  Open your app’s `AppDelegate.m` file - the entry point of the app.\n2.  Place the initialization snippet under the `didFinishLaunchingWithOptions` method.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can choose to place the snippet under any method in any other file based on your requirement.\n\nA sample initialization snippet is shown below:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n    .withDataPlaneUrl(DATA_PLANE_URL)\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\nFor more information, see the full [iOS SDK documentation](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/).\n\n## Step 2: Instrument API calls\n\nAll RudderStack mobile SDKs follow a [standard event spec](https://www.rudderstack.com/docs/event-spec/standard-events/). It helps you plan your event data and supports various API calls for tracking your mobile app events - these include `identify`, `track`, `screen`, `group`, `alias`, and `reset` calls.\n\nIn addition, the mobile SDKs track the following [application lifecycle events](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/) automatically:\n\n*   [`Application Installed`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-installed)\n*   [`Application Updated`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-updated)\n*   [`Application Opened`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-opened)\n*   [`Application Backgrounded`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-backgrounded)\n\nMost users start by implementing `track` and `identify` calls.\n\nYou can use **`track` calls** to record user activities like adding a product to a cart or wishlist, tapping a button on the app, selecting an option, etc. You can describe the `track` events with [propertiesProperties are additional contextual information you can add to a `track` call to further describe the action a user takes.](https://www.rudderstack.com/docs/resources/glossary/#properties) .\n\nHere is an example of a `track` call named `Product Added`. The properties are `price` and `quantity`:\n\n```\n[[RSClient sharedInstance] track:@\"Product Added\" properties:@{\n    @\"price\" : @\"23.99\",\n    @\"quantity\" : @\"2\"\n}];\n```\n\n**`identify` calls** are typically fired when a user performs an identifying action like creating an account or making a purchase. `identify` calls also associate a known user with their actions (even if previously anonymous). You can describe users with attributes by adding [traitsTraits are attributes that describe a user. They can be added to an identify call in the `traits` object. Some examples of traits include age, gender, or some specific details - for example, a user’s product plan (free, basic, premium).](https://www.rudderstack.com/docs/resources/glossary/#traits) to the payload.\n\nHere is an example of an `identify` call. The `traits` are `firstName`, `lastName`, `email`, and `country`:\n\n```\n[[RSClient sharedInstance] identify:@\"user_id\"\ntraits:@{@\"firstName\": @\"Alex\",\n        @\"lastName\": @\"Keener\",\n        @\"email\": @\"alex@example.com\",\n        @\"country\" : @\"US\",\n}\n];\n```\n\nSee the [RudderStack iOS SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/) documentation for more information on the other supported API calls.\n\n## Step 3: Verify data flow and connect destination integrations\n\nOnce software engineers have installed the SDK and instrumented events, the data team can verify the event flow into RudderStack. Then, they can connect destination integrations to forward events to the tools in their stack automatically.\n\n### 1\\. Verify data flow for your iOS source\n\nBefore connecting destinations, verify that events are flowing into RudderStack by checking the **Live Events** viewer in your iOS source.\n\nTo see live events, go to your iOS source from the **Connections** view and click the **Live Events** button in the top right of your screen.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> There will be a delay before you see events in the **Live Events** view. RudderStack doesn’t store any data; it temporarily opens a gateway between the control plane and data plane to show you the live events. The delays usually last only a few seconds but on the [RudderStack Cloud Free](https://rudderstack.com/pricing/) plan, they can last up to one minute.\n\n[![Live Events](https://www.rudderstack.com/docs/images/get-started/quickstart/source-live-events-ios.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/source-live-events-ios.webp)\n\nAfter a few seconds, you will see events populating the feed.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you do not see events in the **Live Events** view, then there is likely a problem with your instrumentation.\n\n### 2\\. Connect destination integrations\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> RudderStack supports 200+ integrations including data warehouses and data lakes, marketing platforms, CRMs, analytics tools, streaming platforms, and more. You can see the full list of supported destination integrations [here](https://www.rudderstack.com/docs/destinations/overview/).\n\nTo add a destination in RudderStack:\n\n1.  Click **\\+ Add destination** in the default **Connections** view.\n\n[![Add destination](https://www.rudderstack.com/docs/images/get-started/quickstart/add-destination.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-destination.webp)\n\n2.  From the list, select your preferred destination where you want to route the event data. Here are some popular destinations to help you get started:\n\n| Category | Destination |\n| --- | --- |\n| Analytics | [Amplitude](https://www.rudderstack.com/docs/destinations/streaming-destinations/amplitude/), [Mixpanel](https://www.rudderstack.com/docs/destinations/streaming-destinations/mixpanel/), [GA4](https://www.rudderstack.com/docs/destinations/streaming-destinations/google-analytics-4/) |\n| CRM | [HubSpot](https://www.rudderstack.com/docs/destinations/streaming-destinations/hubspot/), [Salesforce](https://www.rudderstack.com/docs/destinations/streaming-destinations/salesforce/) |\n| Marketing | [Braze](https://www.rudderstack.com/docs/destinations/streaming-destinations/braze/), [Mailchimp](https://www.rudderstack.com/docs/destinations/streaming-destinations/mailchimp/) |\n| Object storage | [Amazon S3](https://www.rudderstack.com/docs/destinations/streaming-destinations/amazon-s3/), [Redis](https://www.rudderstack.com/docs/destinations/streaming-destinations/redis/) |\n| Streaming platforms | [Apache Kafka](https://www.rudderstack.com/docs/destinations/streaming-destinations/kafka/), [Amazon Kinesis](https://www.rudderstack.com/docs/destinations/streaming-destinations/amazon-kinesis/) |\n| Warehouses | [Snowflake](https://www.rudderstack.com/docs/destinations/warehouse-destinations/snowflake/), [BigQuery](https://www.rudderstack.com/docs/destinations/warehouse-destinations/bigquery/), [Redshift](https://www.rudderstack.com/docs/destinations/warehouse-destinations/redshift/) |\n| Data lakes & lakehouses | [Databricks](https://www.rudderstack.com/docs/destinations/warehouse-destinations/delta-lake/), [Google Cloud Storage](https://www.rudderstack.com/docs/destinations/warehouse-destinations/gcs-datalake/) |\n\n3.  Set up the destination by configuring the connection settings. For details, see the destination-specific documentation.\n\n## Next steps\n\nThis section contains some optional, but helpful steps that leverage RudderStack’s most popular features for transforming events and debugging problems.\n\n### Add event transformations\n\nOne of RudderStack’s most-loved features is [Event Transformations](https://www.rudderstack.com/docs/transformations/overview/), which you can use to operate on the payloads flowing through RudderStack. You can use it for:\n\n*   Sampling or filtering events.\n*   Removing sensitive user PII from your events.\n*   Enriching events using static logic, an external API, and more.\n\nTo use a transformation:\n\n1.  In the left sidebar, go to **Collect** > **Transformations**. Then, click **Create Transformation**.\n\n[![Create transformation](https://www.rudderstack.com/docs/images/get-started/quickstart/create-transformation.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/create-transformation.webp)\n\n2.  Select a [transformation template](https://www.rudderstack.com/docs/transformations/templates/) from the list depending on your use case. To create a transformation from scratch, click **Custom transformation**.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Transformation templates contain prepopulated, ready-to-use transformation logic, which you can apply to your events before sending them to the destination. You can also modify the code as per your needs.\n\n[![Choose a template](https://www.rudderstack.com/docs/images/features/transformation-templates-2.webp)](https://www.rudderstack.com/docs/images/features/transformation-templates-2.webp)\n\n3.  Verify if your transformation works as expected by clicking the **Run Test** button.\n\n[![Testing a transformation](https://www.rudderstack.com/docs/images/features/run-test-transformations.webp)](https://www.rudderstack.com/docs/images/features/run-test-transformations.webp)\n\n4.  Click **Save** to save your transformation.\n5.  Go to the **Connections** tab of your transformation and connect it to the destination you set up above. See [Connect transformation to destination](https://www.rudderstack.com/docs/transformations/manage/#connect-transformation-to-destination) for more information.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> When you add a transformation and connect it to a destination, RudderStack does the following:\n> \n> 1.  Tracks events at the source.\n> 2.  Applies the transformation logic to your events.\n> 3.  Converts the events in a format the destination expects - RudderStack does this internally and requires no user intervention.\n> 4.  Sends the transformed events to your destination.\n\n### Debugging\n\nRudderStack gives you complete observability into your events and the ability to debug errors that might occur in case of event failures. It provides the [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) feature, where you can:\n\n*   Verify your instrumentation.\n*   Get a real-time view of the events flowing from your sources to the connected destinations.\n*   Identify and debug any errors at the source, destination, or transformation level and narrow down the root cause of the issue.\n\n#### **Source Live Events viewer**\n\nThis is helpful to verify if RudderStack is receiving the source events at all. The payload you see in this viewer is the raw event payload collected from your website.\n\n[![Live Events](https://www.rudderstack.com/docs/images/get-started/quickstart/source-live-events-ios.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/source-live-events-ios.webp)\n\n[![Source live events details](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events-details.webp)](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events-details.webp)\n\n#### **Transformation Live Events viewer**\n\nThis viewer will give you a before and after snapshot of the event going into your user transformation and what it looks like afterward. It also notifies you about any dropped events or errors during the transformation, along with the details.\n\n[![Transformation live events](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events.webp)](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events.webp)\n\n[![Transformation live events error message](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events-errors.webp)](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events-errors.webp)\n\n#### **Destination Live Events viewer**\n\nThis viewer shows you what the payload looks like when RudderStack sends it to the destination. You can also see the detailed error message if the destination returns an error.\n\n[![Payload to the destination](https://www.rudderstack.com/docs/images/rs-cloud/destination-live-events-details.webp)](https://www.rudderstack.com/docs/images/rs-cloud/destination-live-events-details.webp)\n\nSee the [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) documentation for more details.\n\n## Support\n\nFor any questions on using RudderStack, you can:\n\n*   Start a conversation in our [Community Slack](https://rudderstack.com/join-rudderstack-slack-community).\n*   Drop an email to [RudderStack support](mailto:support@rudderstack.com).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Mobile Quickstart | RudderStack Docs",
    "description": "Get event data flowing from your mobile app in less than 15 minutes.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/",
    "markdown": "# SDKs | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "SDKs | RudderStack Docs",
    "description": "Setup guides for integrating RudderStack SDKs with your web, mobile, and server-side platforms.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-go-sdk/",
    "markdown": "# Go SDK | RudderStack Docs\n\nUse RudderStack’s Go SDK to send server-side events to various destinations.\n\n* * *\n\n*     8 minute read  \n    \n\nRudderStack’s Go SDK lets you track and send the events from your Go applications to the specified destinations.\n\nRefer to the SDK’s [GitHub codebase](https://github.com/rudderlabs/analytics-go) for the implementation-specific details.\n\n[![Github Badge](https://img.shields.io/github/v/release/rudderlabs/analytics-go.svg?label=GitHub)](https://github.com/rudderlabs/analytics-go)\n\n## SDK setup requirements\n\n1.  Sign up to [RudderStack Cloud](https://app.rudderstack.com/signup).\n2.  [Set up a Go source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in your dashboard. You should be able to see a **write key** for this source:\n\n[![Go source write key](https://www.rudderstack.com/docs/images/event-stream-sources/go-sdk-write-key.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/go-sdk-write-key.webp)\n\nYou will also need a data plane URL. Refer to the [Dashboard Overview](https://www.rudderstack.com/docs/dashboard-guides/overview/#data-plane-url) guide for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has the SDK installation snippet containing both the write key and the data plane URL. Copy it to integrate the Go SDK into your application.\n\n## Installing the Go SDK\n\nTo install the Go SDK in the `GOPATH`, run the following command:\n\n```\ngo get github.com/rudderlabs/analytics-go\n```\n\n## Initializing the SDK\n\nRun the following code snippet to initialize the Go SDK:\n\n```\npackage main\n\nimport (\n    \"github.com/rudderlabs/analytics-go/v4\"\n)\n\nfunc main() {\n    // Instantiates a client to use send messages to the RudderStack API.\n    \n    // Use your write key in the below placeholder:\n    \n    client := analytics.New(<WRITE_KEY>, <DATA_PLANE_URL>)\n\n    // Enqueues a track event that will be sent asynchronously.\n    client.Enqueue(analytics.Track{\n        UserId: \"1hKOmRA4GRlm\",\n        Event:  \"Test Event\",\n    })\n\n    // Flushes any queued messages and closes the client.\n    client.Close()\n}\n```\n\nAlternatively, you can run the following snippet:\n\n```\npackage main\n\nimport (\n    \"github.com/rudderlabs/analytics-go/v4\"\n)\n\nfunc main() {\n    // Instantiates a client to use send messages to the RudderStack API.\n    \n    // Enter your write key in the below placeholder:\n    \n    client, _ := analytics.NewWithConfig(WRITE_KEY,\n\t\tanalytics.Config{\n\t\t\tDataPlaneUrl: DATA_PLANE_URL,\n\t\t\tInterval:     30 * time.Second,\n\t\t\tBatchSize:    100,\n\t\t\tVerbose:      true,\n\t\t\tDisableGzip:  false,  // Set to true to disable Gzip compression.\n\t\t})\n\n    // Enqueues a track event that will be sent asynchronously.\n    \n    client.Enqueue(analytics.Track{\n        UserId: \"1hKOmRA4GRlm\",\n        Event:  \"Test Event\",\n    })\n\n    // Flushes any queued messages and closes the client.\n    \n    client.Close()\n}\n```\n\n### Migrating to SDK v4\n\nTo migrate to the Go SDK v4.1.0, set the data plane URL in `Config` (as seen in the above section) instead of passing it as an argument.\n\n### SDK initialization options\n\nThe RudderStack Go SDK provides the following initialization options:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `Interval` | Time (in sec) | The SDK sends the messages when this flushing interval time has elapsed. |\n| `BatchSize` | Integer | Total number of messages to be sent in a single batch. Default value is 100. |\n| `Verbose` | Boolean | When set to `true`, the client sends more frequent and detailed messages to the logger. |\n| `RetryAfter` | Time (in sec) | Determines how long the SDK should wait to retry sending the failed messages. |\n| `DisableGzip` | Boolean | Disables gzip compression of the requests. By default, this is set to `false`. To disable gzip, set this parameter to `true`. |\n| `NoProxySupport` | Boolean | Set this variable to `true` if you do not use a proxy to send the events. |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Setting `NoProxySupport` to `true` will avoid RudderStack making calls to the proxy for fetching the total number of nodes in case of a multi-node setup.\n\n## Gzipping requests\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The gzip compression feature is enabled in the Go SDK version 4.1.0 by default.\n\nThe Go SDK automatically gzips requests. However, you can disable this by setting the `DisableGzip` parameter to `true` while initializing the SDK:\n\n```\nclient, _ := analytics.NewWithConfig(WRITE_KEY,\n\t\tanalytics.Config{\n\t\t\tDataPlaneUrl: DATA_PLANE_URL,\n\t\t\tInterval:     30 * time.Second,\n\t\t\tBatchSize:    100,\n\t\t\tVerbose:      true,\n\t\t\tDisableGzip: true\n\t\t})\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The `DisableGzip` parameter requires [rudder-server](https://github.com/rudderlabs/rudder-server) **version 1.4 or higher**. Otherwise, your events might fail.\n\n## Sending events\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not store or persist the user state in any of the server-side SDKs**.\n> \n> Unlike the client-side SDKs that deal with only a single user at a given time, the server-side SDKs deal with multiple users simultaneously. Therefore, you must specify either the `userId` or `anonymousId` **every time** while making any API calls supported by the Go SDK.\n\n### Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` call made using the Go SDK is shown below:\n\n```\nclient.Enqueue(analytics.Identify{\n  UserId: \"1hKOmRA4GRlm\",\n  Traits: analytics.NewTraits().\n    SetName(\"Alex Keener\").\n    SetEmail(\"alex@example.com\").\n    Set(\"plan\", \"Free\").\n    Set(\"manager\", 12),\n})\n```\n\nThe `identify` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | The SDK automatically sets this identifier in cases where there is no unique identifier for the user. |\n| `traits` | Object | An optional dictionary of the user’s traits like `name` or `email`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the user actions along with their associated properties. Each user action is called an **event**.\n\nA sample `track` call is shown below:\n\n```\nclient.Enqueue(analytics.Track{\n  UserId: \"1hKOmRA4GRlm\",\n  Event:  \"Signed Up\",\n  Properties: analytics.NewProperties().\n    Set(\"plan\", \"Free\"),\n})\n```\n\nThe `track` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | The SDK automatically sets this identifier in cases where there is no unique identifier for the user. |\n| `event`  <br>Required | String | Name of the event. |\n| `properties` | Object | An optional dictionary of the properties associated with the event. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record the page views on your application along with the other relevant information about the page.\n\nA sample `page` call is as shown:\n\n```\nclient.Enqueue(analytics.Page{\n  UserId: \"12345\",\n  Name:   \"Pizza\",\n  Properties: analytics.NewProperties().\n    SetURL(\"https://dominos.com\"),\n})\n```\n\nThe `page` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | The SDK automatically sets this identifier in cases where there is no unique identifier for the user. |\n| `name`  <br>Required | String | Name of the viewed page. |\n| `properties` | Object | An optional dictionary of the properties associated with the viewed page, like `url` or `referrer`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It lets you record the screen views on your mobile app along with other relevant information about the screen.\n\nA sample `screen` call is as shown:\n\n```\nclient.Enqueue(analytics.Screen{\n  UserId: \"1hKOmRA4GRlm\",\n  Name:   \"Pizza\",\n  Properties: analytics.NewProperties().\n    SetURL(\"https://dominos.com\"),\n})\n```\n\nThe `screen` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | The SDK automatically sets this identifier in cases where there is no unique identifier for the user. |\n| `name`  <br>Required | String | Name of the viewed screen. |\n| `properties` | Object | An optional dictionary of the properties associated with the viewed screen, like `url` or `referrer`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group.\n\nA sample `group` call made using the Go SDK is shown below:\n\n```\nclient.Enqueue(analytics.Group{\n  UserId:  \"1hKOmRA4GRlm\",\n  GroupId: \"1\",\n  Traits: map[string]interface{}{\n    \"name\": \"Company\",\n    \"description\": \"Facebook\",\n  },\n})\n```\n\nThe `group` method parameters are as follows:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | The SDK automatically sets this identifier in cases where there is no unique identifier for the user. |\n| `groupId`  <br>Required | String | Unique identifier of the group in your database. |\n| `traits` | Object | An optional dictionary of the group’s traits like `name`or `email`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly. You can use `alias` for managing the user’s identity in some of the downstream destinations.\n\nA sample `alias` call is as shown:\n\n```\nclient.Enqueue(analytics.Alias{\n  PreviousId: \"12345\",\n  UserId:     \"1hKOmRA4GRlm\",\n})\n```\n\nThe `alias` method parameters are as mentioned below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | The SDK automatically sets this identifier in cases where there is no unique identifier for the user. |\n| `previousId`  <br>Required | String | The previous unique identifier of the user. |\n| `traits` | Object | An optional dictionary of the user’s traits like `name` or `email`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n## FAQ\n\n#### How does the Go SDK handle events larger than 32KB?\n\nThe Go SDK drops any events greater than 32KB.\n\n#### Does the Go SDK support event ordering?\n\nThe Go SDK does not support event ordering by default.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Go SDK | RudderStack Docs",
    "description": "Use RudderStack’s Go SDK to send server-side events to various destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/faq/",
    "markdown": "# RudderStack SDK FAQ | RudderStack Docs\n\nAnswers to the generally asked questions related to the RudderStack SDKs.\n\n* * *\n\n*     7 minute read  \n    \n\n### What is the event size limit for various RudderStack SDKs?\n\nThe following RudderStack SDKs drop any events greater than 32KB:\n\n*   iOS\n*   Android\n*   React Native\n*   Flutter\n*   Unity\n*   Go\n*   Ruby\n*   Python\n*   .NET ([async initialization](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-dotnet-sdk/#initializing-the-sdk))\n\nThe following SDKs accept events greater than 32KB:\n\n*   Java\n*   Node\n*   [.NET (synchronous initialization)](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-dotnet-sdk/#initializing-the-sdk)\n\nThe [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) exhibits the following behavior:\n\n*   If the event size exceeds 32KB, the SDK logs an error message (warning, in the case of JavaScript SDK) but forwards it to the RudderStack data plane (backend).\n*   If you send the event using [`sendBeacon`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#send-events-using-beacon), the SDK batches the events with a size limit of 64KB on the **entire** batch payload. If a single event’s size exceeds 64KB, the browser might drop the event. Note that this is applicable for the legacy SDK (v1.1) and the SDK v3.\n\n### How does RudderStack handle `anonymousId` ?\n\nThe following are the different ways in which RudderStack handles `anonymousId` across different SDKs:\n\n#### JavaScript SDK\n\nThe RudderStack JavaScript SDK automatically generates one unique `anonymousId` to identify a user uniquely. It then stores it in a cookie named `rl_anonymous_id` and attaches it to every subsequent event. This helps in identifying the users from other sites that are hosted under a sub-domain.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If `anonymousId` is explicitly provided by the user using the `setAnonymousId` method, the user-specified `anonymousId` overrides the SDK-generated one.\n\nFor more information on how RudderStack handles overriding `anonymousId`, refer to the [Overriding anonymous ID](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#overriding-anonymous-id) section.\n\n#### Android SDK\n\nRudderStack captures your `deviceId` and uses that as `anonymousId` for identifying the user. It is used to track the users across the application installation. To attach more information to the user, you can use the `identify` method.\n\nYou can use the `setAnonymousId` method to override and use your own `anonymousId` with the SDK.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> On the Android devices, the `deviceId` is assigned during the first boot. It remains consistent across the applications and installs. It changes only after a factory reset.\n\nFor more information on how RudderStack handles `anonymousId` in the iOS SDK, please refer to the [Anonymous ID](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/#anonymous-id) section.\n\n#### iOS SDK\n\nRudderStack captures `deviceId` and uses that as `anonymousId` for identifying the user. To attach more information to the user, you can use the `identify` method.\n\nYou can use the `setAnonymousId` method to override and use your own `anonymousId` with the SDK.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> According to the Apple [documentation](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor), if the device has multiple apps from the same vendor, all those apps will be assigned the same `deviceId`. If allse apps are uninstalled, then on the next install, the apps will be assigned a new `deviceId`.\n\nFor more information on how RudderStack handles`anonymousId` in the iOS SDK, please refer to the [Anonymous ID](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/#anonymous-id) section.\n\n### How do I identify anonymous users across client-side and server-side?\n\nTo identify anonymous users across both client-side and server-side, **it is advisable to use a separate, new cookie at your end**.\n\nDuring the user’s first visit, your server generates a new `anonymousId` to make the event calls using the server-side SDKs and sends the `set_cookie` response to the browser to set the `visitor_id` cookie.\n\n*   If the RudderStack JavaScript SDK is **not blocked**, you can use the `setAnonymousId` method to set the same value as the `visitor_id`.\n*   In case the RudderStack JavaScript SDK **is blocked**, still the next requests to the server will have the `visitor_id` cookie which can be used by the server-side events for `anonymousId`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The RudderStack JavaScript SDK generates a unique `anonymousId` for every unique user visit. It then stores this value in a cookie named `rl_anonymous_id` and attaches it to every subsequent event.\n> \n> Users sometimes try to directly use the browser APIs to get or set the value for this cookie. However, this is not advisable since the RudderStack cookies are encrypted, and the cookie may not be present altogether (if the SDK is blocked).\n> \n> It is, therefore, always advisable to use RudderStack’s `getAnonymousId` and `setAnonymousId` methods to update the cookie value.\n\nTo set `anonymousId`, use the `setAnonymousId` call after the SDK snippet as below:\n\n```\nrudderanalytics.setAnonymousId(\"my-anon-id\");\n```\n\nTo get the `anonymousId` stored in a RudderStack cookie, use the `getAnonymousId` call inside the `ready` callback - this ensures that the method is available and returns the previously set `anonymousId` value.\n\n```\nrudderanalytics.ready(\n\t() => {\n\t  var anonId = window.rudderanalytics.getAnonymousId();\n\t\tconsole.log(anonId);\n\t}\n);\n```\n\n### What is RudderStack’s retry and backoff logic after the connection fails?\n\nWhen the dataplane gets disconnected from the SDK and events are no longer able to be sent to Rudder Server, then some of the SDK’s will store events and retry sending them to Rudder Server with a certain backoff logic.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Not all SDKs support retry of failed events. Refer to the below table for more information.\n\n#### General support and logic\n\n| SDK | Supported | Event Storage | Retry limit |\n| --- | --- | --- | --- |\n| [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) | Yes | 100 events in local storage | 10 times |\n| [Android SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/) | Yes | 10000 events in SQLite database | Infinity |\n| [iOS SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/) | Yes | 10000 events in SQLite database | Infinity |\n| [React Native SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-react-native-sdk/) | Yes | 10000 events in SQLite database | Infinity |\n| [Flutter SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/) | Yes | 10000 events in SQLite database | Infinity |\n| [Node SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/) | Yes | 20000 events in-memory | 10 times |\n| Other SDKs | No  | N/A | N/A |\n\n#### JavaScript SDK\n\nThis SDK can be configured to match your requirements for retry and backoff logic. By default, if the dataplane goes down and the JS SDK cannot send events to the Rudder Server, up to 100 events will be stored. While still disconnected from the dataplane, the JS SDK will try to resend the stored events to the Rudder Server. However, for each retry, the delay duration will grow. The equation to get the duration of delay is as follows:\n\ndt = md \\* (F^n)\n\nWhere, `dt` is the delay time in ms, `md` is the `minRetryDelay` (configurable; default is 1000 ms), `F` is the `backoffFactor` (configurable; default is 2), and `n` is the current retry attempt. The SDK will retry until the attempts surpass the `maxAttempts` value. This is by default set to 10 attempts but is configurable. Each retry attempt, the delay time grows exponentially. However, it will max out at whatever the `maxRetryDelay` is. By default, this value is set at 360000 ms, but it is configurable.\n\n#### iOS and Android SDK\n\nBoth the iOS and Android SDKs share similar retry and backoff logic for when the dataplane connection fails. If the dataplane goes down, up to 10,000 events will be stored. There is no limit to how many times the SDK will try to send failed events. However, the delay duration in between the attempts will grow by 1 second after each retry. For example, after the first failed attempt, there will be a delay of 1 second. After the second failed attempt, the SDK will wait 2 seconds before it retries. The third failed attempt will cause a delay of 3 seconds, and this behavior will repeat until the connection is re-established.\n\n#### Node SDK\n\nCurrently the Node SDK is the only server-side SDK that supports event retry and backoff logic. The logic is quite similar to the JavaScript SDK. If the connection fails, up to 20,000 events will be stored. However, this is in-memory storage and can result in data loss. The SDK will retry a maximum of 10 times, by default. For each retry the delay duration between retries will grow and can be calculated using the following equation.\n\ndt = 1000 \\* (2^n)\n\nWhere, dt is the delay time in ms and n is the current retry attempt. The SDK will retry until the attempts surpass the `maxAttempts` value which is set to 10 attempts. With each retry attempt, the delay time will grow exponentially. However, it will never be greater than the maximum delay duration which is 30 seconds.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The Node SDK does have a feature to persist the event data in Redis for more event storage and better guarantees of failed event delivery. Instructions on how to configure the Redis solution can be found [here](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/#data-persistence).\n\n### Can I filter and selectively send event data to certain destinations?\n\nYes, you can use RudderStack’s [Client-side Event Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) feature to specify which events should be discarded or allowed to flow through - by allowlisting or denylisting them in the RudderStack dashboard while setting up your destination. This method is useful if you are sending the events via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "RudderStack SDK FAQ | RudderStack Docs",
    "description": "Answers to the generally asked questions related to the RudderStack SDKs.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/gainsight-px/",
    "markdown": "# Gainsight PX source | RudderStack Docs\n\nIngest your event data from Gainsight PX into RudderStack.\n\n* * *\n\n*     5 minute read  \n    \n\n[Gainsight PX](https://www.gainsight.com/product-experience/) is a popular product experience platform. It offers cutting-edge product analytics, product engagement features, and powers the product teams to optimize their customer adoption and onboarding flows.\n\nThis guide will help you set up Gainsight PX as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Gainsight PX source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Gainsight PX**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Gainsight PX source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![Gainsight PX source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/gainsight-px-src-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/gainsight-px-src-settings.webp)\n\n4.  Follow this [Gainsight PX user guide](https://support.gainsight.com/PX/Integrations/01Technology_Partner_Integrations/Integrate_with_Gainsight_PX_Using_Webhooks#Configure_Webhook_in_Gainsight_PX) to configure a custom webhook in Gainsight PX.\n5.  In the **Callback URL** field, paste the RudderStack webhook URL copied in Step 3 above.\n\n[![Gainsight PX source webhook URL configuration](https://www.rudderstack.com/docs/images/event-stream-sources/gainsight-webhook-config.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/gainsight-webhook-config.webp)\n\n## Event transformation\n\nIn case of a signup event (`event.eventType == SIGN_UP`), RudderStack maps the event to an [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call as the signup event indicates that a new user is created in Gainsight PX. Otherwise, RudderStack maps the ingested event to a `track` event.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Gainsight PX allows sending a maximum of 10000 webhook events per day.\n\n### Identify\n\nAs mentioned above, RudderStack maps a Gainsight PX event to the `identify` event in case of a user signup.\n\nA sample input payload is shown below:\n\n```\n{\n  \"user\": {\n    \"aptrinsicId\": \"XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX\",\n    \"identifyId\": \"New!\",\n    \"type\": \"USER\",\n    \"gender\": \"EMPTY_GENDER\",\n    \"email\": \"userEmail@address.com\",\n    \"firstName\": \"XXXXXX\",\n    \"lastName\": \"XXXXX\",\n    \"lastSeenDate\": 1665582808669,\n    \"signUpDate\": 1665582791753,\n    \"firstVisitDate\": 1665582791753,\n    \"title\": \"Mr.\",\n    \"score\": 0,\n    \"accountId\": \"IBM\",\n    \"numberOfVisits\": 1,\n    \"location\": {\n      \"countryName\": \"India\",\n    },\n    \"propertyKeys\": [\n      \"AP-XXXXXXXXXXX-2-1\"\n    ],\n    \"createDate\": 1685582808376,\n    \"lastModifiedDate\": 1685582808717,\n    \"customAttributes\": null,\n    \"globalUnsubscribe\": false,\n    \"lastVisitedUserAgentData\": null,\n    \"id\": \"New!\",\n    \"lastInferredLocation\": null\n  },\n  \"account\": {\n    \"id\": \"IBM\",\n    \"name\": \"International Business Machine\",\n    \"lastSeenDate\": 1685582808669,\n    \"propertyKeys\": [\n      \"AP-EOXPSEZGC5LA-2-1\"\n    ],\n    \"createDate\": 1685578567565,\n    \"lastModifiedDate\": 1685582808669\n  },\n  \"event\": {\n    \"eventType\": \"SIGN_UP\",\n    \"eventId\": \"XXXXXXX-XXXX-XXX-XXX-XXXXXXXXX\",\n    \"propertyKey\": \"AP-XXXXXXXXX-2-1\",\n    \"date\": 1665582808376,\n    \"sessionId\": \"XX-XXXXXXXXX-2-XXXXxXXXXXX-XXXXXXXX\",\n    \"globalContext\": {},\n    \"userType\": \"USER\"\n  },\n  \"configId\": \"XXXXXX-XXXXX-XXXX-XXXX-XXXXXX\"\n}\n```\n\nRudderStack transforms this payload into the following event:\n\n```\n\"context\": {\n  \"library\": {\n    \"name\": \"unknown\",\n    \"version\": \"unknown\"\n  },\n  \"integration\": {\n    \"name\": \"GAINSIGHTPX\"\n  },\n  \"externalId\": [{\n    \"type\": \"gainsightpxAptrinsicId\",\n    \"id\": \"XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX\"\n  }]\n},\n\"integrations\": {\n  \"GAINSIGHTPX\": false\n},\n\"type\": \"identify\",\n\"traits\": {\n  \"type\": \"USER\",\n  \"gender\": \"EMPTY_GENDER\",\n  \"email\": \"userEmail@address.com\",\n  \"firstName\": \"XXXXXX\",\n  \"lastName\": \"XXXXX\",\n  \"title\": \"Mr.\",\n  \"score\": 0,\n  \"globalUnsubscribe\": false,\n  \"accountId\": \"IBM\",\n  \"numberOfVisits\": 1,\n  \"propertyKeys\": [\n    \"AP-XXXXXXXXXXX-2-1\"\n  ],\n  \"id\": \"New!\",\n  \"country\": \"India\",\n  \"account\": {\n    \"id\": \"IBM\",\n    \"name\": \"International Business Machine\",\n    \"numberOfEmployees\": 0,\n    \"numberOfUsers\": 0\n  }\n},\n\"userId\": \"New!\",\n\"createdAt\": \"20XX-XX-XXT13:53:11.753Z\",\n\"originalTimestamp\": \"20XX-XX-XXT13:53:11.753Z\"\n```\n\nRudderStack also maps the following properties from the Gainsight PX event payload to the RudderStack properties:\n\n| Gainsight PX property | RudderStack property |\n| --- | --- |\n| `user` | `traits` |\n| `user.identifyId` | `userId` |\n| `user.aptrinsicId` | `context.externalId[]` |\n| `user.signUpDate` | `createdAt` |\n| `user.location.countryName` | `traits.country` |\n| `user.location.stateName` | `traits.state` |\n| `user.location` | `traits` |\n| `account` | `traits.account` |\n| `account.name` | `traits.companyName` |\n| `event.remoteHost` | `context.ip` |\n| `user.lastVisitedUserAgentData` | `context.userAgent` |\n\n### Track\n\nRudderStack ingests different event payloads depending on the Gainsight PX event type. It currently supports the following event types before mapping them to the `track` call:\n\n*   Feature match\n*   Engagement\n*   Survey\n*   Segment match\n*   Custom event\n\nA sample input payload is shown below:\n\n```\n{\n  \"user\": {\n    \"aptrinsicId\": \"XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX\",\n    \"identifyId\": \"New!\",\n    \"type\": \"USER\",\n    \"gender\": \"EMPTY_GENDER\",\n    \"email\": \"userEmail@address.com\",\n    \"firstName\": \"XXXXXX\",\n    \"lastName\": \"XXXXX\",\n    \"lastSeenDate\": 1665582808669,\n    \"signUpDate\": 1665582791753,\n    \"firstVisitDate\": 1665582791753,\n    \"title\": \"Mr.\",\n    \"score\": 0,\n    \"accountId\": \"IBM\",\n    \"numberOfVisits\": 1,\n    \"location\": {\n      \"countryName\": \"India\",\n    },\n    \"propertyKeys\": [\n      \"AP-XXXXXXXXXXX-2-1\"\n    ],\n    \"createDate\": 1685582808376,\n    \"lastModifiedDate\": 1685582808717,\n    \"customAttributes\": null,\n    \"globalUnsubscribe\": false,\n    \"lastVisitedUserAgentData\": null,\n    \"id\": \"New!\",\n    \"lastInferredLocation\": null\n  },\n  \"account\": {\n    \"id\": \"IBM\",\n    \"name\": \"International Business Machine\",\n    \"lastSeenDate\": 1685582808669,\n    \"propertyKeys\": [\n      \"AP-EOXPSEZGC5LA-2-1\"\n    ],\n    \"createDate\": 1685578567565,\n    \"lastModifiedDate\": 1685582808669\n  },\n  \"event\": {\n    \"eventType\": \"CUSTOM\",\n    \"eventId\": \"XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX\",\n    \"propertyKey\": \"AP-XXXXXXXXXXX-2-1\",\n    \"date\": 1665656881448,\n    \"sessionId\": \"AP-XXXXXXXXXXX-2-1XXXXXXXXXXXX-XXXXXXXXX\",\n    \"globalContext\": {},\n    \"userType\": \"USER\",\n    \"eventName\": \"Product Clicked\",\n    \"attributes\": {\n      \"Audience Size\": 5000,\n      \"name\": \"TESTing TRACK CALL FIRST\",\n      \"Launched date\": 1520532660000,\n      \"Launched\": true\n    },\n    \"url\": \"http://127.0.0.1:5501/GPXTEST2.html\",\n    \"referrer\": \"\"\n  },\n  \"configId\": \"XXXXXX-XXXXX-XXXX-XXXX-XXXXXX\"\n}\n```\n\nRudderStack transforms this payload into the following `track` payload:\n\n```\n{\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"integration\": {\n      \"name\": \"GAINSIGHTPX\"\n    },\n    \"traits\": {\n      \"type\": \"USER\",\n      \"gender\": \"EMPTY_GENDER\",\n      \"email\": \"userEmail@address.com\",\n      \"firstName\": \"XXXXXX\",\n      \"lastName\": \"XXXXX\",\n      \"title\": \"Mr.\",\n      \"score\": 0,\n      \"globalUnsubscribe\": false,\n      \"accountId\": \"IBM\",\n      \"numberOfVisits\": 1,\n      \"propertyKeys\": [\n        \"AP-XXXXXXXXXXX-2-1\"\n      ],\n      \"id\": \"New!\",\n      \"country\": \"India\",\n      \"account\": {\n        \"id\": \"IBM\",\n        \"name\": \"International Business Machine\",\n        \"numberOfEmployees\": 0,\n        \"numberOfUsers\": 0\n      }\n    },\n    \"externalId\": [{\n      \"type\": \"gainsightpxAptrinsicId\",\n      \"id\": \"XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXv\"\n    }]\n  },\n  \"integrations\": {\n    \"GAINSIGHTPX\": false\n  },\n  \"type\": \"track\",\n  \"properties\": {\n    \"propertyKey\": \"AP-XXXXXXXXXXX-2-1\",\n    \"Audience Size\": 5000,\n    \"name\": \"TESTing TRACK CALL FIRST\",\n    \"Launched date\": 1520532660000,\n    \"Launched\": true,\n    \"url\": \"http://127.0.0.1:5501/GPXTEST2.html\"\n  },\n  \"userId\": \"New!\",\n  \"category\": \"CUSTOM\",\n  \"event\": \"Product Clicked\",\n  \"sentAt\": \"20XX-XX-XXTXX:XX:XX.XXXZ\",\n  \"originalTimestamp\": \"20XX-XX-XXTXX:XX:XX.XXXZ\"\n}\n```\n\nThe general property mappings for these events are listed in the below table:\n\n| Gainsight PX property | RudderStack property |\n| --- | --- |\n| `event.eventType` | `category` |\n| `event.attributes` | `properties` |\n| `event.date` | `sentAt` |\n| `user` | `context.traits` |\n| `event.url` | `properties.url` |\n| `event.remoteHost` | `properties.ip` |\n| `user.identifyId` | `userId` |\n| `user.aptrinsicId` | `context.externalId[]` |\n| `user.lastVisitedUserAgentData` | `userAgent` |\n| `event.globalContext` | `properties.globalContext` |\n\nThe specific property mappings based on the different Gainsight PX event types are listed as follows:\n\n#### Feature match\n\n| Gainsight PX property | RudderStack property |\n| --- | --- |\n| `event.featureName` | `name` |\n| `event.featureId` | `properties.featureId` |\n\n#### Engagement\n\n| Gainsight PX property | RudderStack property |\n| --- | --- |\n| `event.engagementName` | `name` |\n| `event.engagementId` | `properties.engagementId` |\n| `event.contentType` | `properties.contentType` |\n| `event.engagementType` | `properties.engagementType` |\n| `event.interaction` | `properties.interaction` |\n| `event.stepNumber` | `properties.engagement.stepNumber` |\n| `event.activation` | `properties.engagement.activation` |\n\n#### Survey\n\n| Gainsight PX property | RudderStack property |\n| --- | --- |\n| `event.engagementName` | `name` |\n| `event.engagementId` | `properties.engagementId` |\n| `event.contentType` | `properties.contentType` |\n| `event.score` | `properties.survey.score` |\n| `event.stepNumber` | `properties.survey.stepNumber` |\n| `event.userInput` | `properties.survey.userInput` |\n| `event.questionType` | `properties.survey.questionType` |\n| `event.scoreType` | `properties.survey.scoreType` |\n| `event.surveyType` | `properties.survey.surveyType` |\n| `event.contactMeAllowed` | `properties.survey.contactMeAllowed` |\n| `event.questionText` | `properties.survey.questionText` |\n| `event.questionHtml` | `properties.survey.questionHtml` |\n| `event.answers` | `properties.survey.answers` |\n| `event.questionId` | `properties.survey.questionId` |\n| `event.activation` | `properties.engagement.activation` |\n\n#### Segment\n\n| Gainsight PX property | RudderStack property |\n| --- | --- |\n| `event.segmentName` | `name` |\n| `event.segmentId` | `properties.segmentId` |\n\n#### Custom event\n\n| Gainsight PX property | RudderStack property |\n| --- | --- |\n| `event.eventName` | `name` |\n\n## FAQ\n\n#### Why am I unable to view a new user event even after adding it in Gainsight PX?\n\nGainsight PX lets you track new user signups in your application, add them to your webhook queue, and send this data to your destination. However, this occurs only when Gainsight PX receives an `identify` event for the new user signed up in the last hour. For more information, refer to this [Gainsight PX webhook integration guide](https://support.gainsight.com/PX/Integrations/01Technology_Partner_Integrations/Integrate_with_Gainsight_PX_Using_Webhooks).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Gainsight PX source | RudderStack Docs",
    "description": "Ingest your event data from Gainsight PX into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-java-sdk/",
    "markdown": "# Java SDK | RudderStack Docs\n\nUse RudderStack’s Java SDK to send server-side events to various destinations.\n\n* * *\n\n*     13 minute read  \n    \n\nRudderStack’s Java SDK lets you track and send the events from your Java applications to the specified destinations.\n\nRefer to the SDK’s [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-java) for the implementation-specific details.\n\n[![Github Badge](https://img.shields.io/maven-metadata/v.svg?label=Maven%20Central&metadataUrl=https://repo1.maven.org/maven2/com/rudderstack/sdk/java/analytics/analytics-parent/maven-metadata.xml?style=flat)](https://search.maven.org/search?q=g:com.rudderstack.sdk.java.analytics)\n\n## SDK setup requirements\n\n1.  Sign up to [RudderStack Cloud](https://app.rudderstack.com/signup).\n2.  [Set up a Java source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in your dashboard. You should be able to see a **write key** for this source:\n\n[![Java source write key](https://www.rudderstack.com/docs/images/event-stream-sources/java-sdk-write-key.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/java-sdk-write-key.webp)\n\nYou will also need a data plane URL. Refer to the [Dashboard Overview](https://www.rudderstack.com/docs/dashboard-guides/overview/#data-plane-url) guide for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has the SDK installation snippet containing both the write key and the data plane URL. Copy it to integrate the Java SDK into your application.\n\n## Installing the Java SDK\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> As Bintray has sunset from 1st May, 2021, the Java SDK is now moved to [Maven Central](https://search.maven.org/). All the versions from 1.0.1 will now be available in Maven Central only.\n\nIt is highly recommended to use the Maven build system to add the SDK to your project.\n\nTo install the RudderStack Java SDK, add the following lines of code to `pom.xml`:\n\n```\n<dependency>\n   <groupId>com.rudderstack.sdk.java.analytics</groupId>\n     <artifactId>analytics</artifactId>\n   <version>3.0.0</version>\n</dependency>\n```\n\nIf you’re using **Gradle**, add the following line to your dependencies:\n\n```\nimplementation 'com.rudderstack.sdk.java.analytics:analytics:3.0.0'\n```\n\n## Initializing the RudderStack client\n\nAfter installing the SDK, run the following code snippet to initialize the RudderStack client:\n\n```\nRudderAnalytics analytics = RudderAnalytics\n         .builder(\"<WRITE_KEY>\")\n         .setDataPlaneUrl(\"<DATA_PLANE_URL>\")\n         .build();\n```\n\n## Migrating from v2 to v3\n\nTo migrate to the Java SDK v3.0.0, set the data plane URL using `setDataPlaneUrl(\"<DATA_PLANE_URL>\")` (as seen in the above section) instead of passing it as an argument.\n\n## Configuring the RudderStack client\n\nYou can configure your client based on the following methods in `RudderClient.Builder`:\n\n| Method | Type | Description |\n| --- | --- | --- |\n| `client` | `OkHttpClient` | Sets a custom `OkHttpClient`. It is created by default. |\n| `setGZIP` | Boolean | Gzips the event request.<br><br>**Default value**: `true` |\n| `log` | Log | Sets the logging level for debugging. Available options are `VERBOSE`, `DEBUG`, `ERROR`, and `NONE`.<br><br>**Default value**: `NONE` |\n| `setDataPlaneUrl` | String | Sets the data plane URL.<br><br>**Default value**: `https://hosted.rudderlabs.com` |\n| `setUploadURL` | String | Sets the data plane URL - used for Segment compatibility.<br><br>**Default value**: `https://hosted.rudderlabs.com` |\n| `userAgent` | String | Sets a user agent for the HTTP requests.<br><br>**Default value**: `analytics-java/`{analytics-sdk-version} |\n| `queueCapacity` | Integer | Sets the queue capacity.<br><br>**Default value**: `Integer.MAX_VALUE` |\n| `retries` | Integer | Defines the maximum number of event retries.<br><br>**Default value**: `3` |\n| `networkExecutor` | `ExecutorService` | Sets the executor service on which all HTTP requests are made.<br><br>**Default value**: `SingleThreadExecutor` |\n| `callback` | Callback | Gets invoked when the client library processes an event.<br><br>**Default value**: Empty list. |\n| `forceTlsVersion1` | \\-  | Enforces TLS v1.<br><br>**Default value**: `false` |\n\nThe following initialization methods are currently in **beta**:\n\n| Available method | Type | Description |\n| --- | --- | --- |\n| `messageTransformer` | `MessageTransformer` | Adds a transformer for the message before uploading it.<br><br>**Default value**: `null` |\n| `messageInterceptor` | `MessageInterceptor` | Add a `MessageInterceptor` for intercepting messages before sending to RudderStack.<br><br>**Default value**: `null` |\n| `flushQueueSize` | Integer | Sets the queue size at which the SDK triggers the flush requests.<br><br>**Default value**: `250` |\n| `maximumQueueSizeInBytes` | Integer | Sets the maximum queue size at which the flush requests are triggered.<br><br>**Default value**: `1024*500 Bytes` |\n| `flushInterval` | Long, TimeUnit | Sets the time interval which the SDK flushes the queue.<br><br>**Default value**: `10 seconds` |\n| `threadFactory` | `ThreadFactory` | Sets the thread factory used to create the threads.<br><br>**Default value**: `null` |\n| `plugin` | `Plugin` | Used to configure the builder.<br><br>**Default value**: `null` |\n\n## Sending events\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not store or persist the user state in any of the server-side SDKs**.\n> \n> Unlike the client-side SDKs that deal with only a single user at a given time, the server-side SDKs deal with multiple users simultaneously. Therefore, you must specify either the `userId` or `anonymousId` **every time** while making any API calls supported by the Java SDK.\n\n### Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` call made using the Java SDK is shown below:\n\n```\nanalytics.enqueue(IdentifyMessage.builder()\n    .userId(\"1hKOmRA4GRlm\")\n    .traits(ImmutableMap.builder()\n        .put(\"name\", \"Alex Keener\")\n        .put(\"email\", \"alex@example.com\")\n        .build()\n    )\n);\n```\n\nThe `identify` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n| `traits` | Object | An optional dictionary of the user’s traits like `name` or `email`. |\n\n### Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the user actions along with their associated properties. Each user action is called an **event**.\n\nA sample `track` call is shown below:\n\n```\nMap<String, Object> properties = new LinkedHashMap<>();\n    properties.put(\"key1\", \"value1\");\n    properties.put(\"key2\", \"value2\");\n    analytics.enqueue(\n       TrackMessage.builder(\"Java Test\")\n           .properties(properties)\n           .anonymousId(anonymousId)\n           .userId(userId)\n);\n```\n\nThe `track` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `event`  <br>Required | String | Name of the event. |\n| `properties` | Object | An optional dictionary of the properties associated with the event. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record the page views on your application along with the other relevant information about the page.\n\nA sample `page` call is as shown:\n\n```\nanalytics.enqueue(PageMessage.builder(\"Schedule\")\n    .userId(\"1hKOmRA4GRlm\")\n    .properties(ImmutableMap.builder()\n        .put(\"category\", \"Cultural\")\n        .put(\"path\", \"/a/b\")\n        .build()\n    )\n);\n```\n\nThe `page` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed page. |\n| `properties` | Object | An optional dictionary of the properties associated with the viewed page, like `url` or `referrer`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It lets you record the screen views on your mobile app along with other relevant information about the screen.\n\nA sample `screen` call is as shown:\n\n```\nanalytics.enqueue(ScreenMessage.builder(\"Schedule\")\n    .userId(\"1hKOmRA4GRlm\")\n    .properties(ImmutableMap.builder()\n        .put(\"category\", \"Sports\")\n        .put(\"path\", \"/sports/schedule\")\n        .build()\n    )\n);\n```\n\nThe `screen` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed screen. |\n| `properties` | Object | An optional dictionary of the properties associated with the screen, like `url` or `referrer`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group.\n\nA sample `group` call made using the Java SDK is shown below:\n\n```\nanalytics.enqueue(GroupMessage.builder(\"group123\")\n    .userId(\"1hKOmRA4GRlm\")\n    .traits(ImmutableMap.builder()\n        .put(\"name\", \"Rudder\")\n        .put(\"size\", 19)\n        .build()\n    )\n);\n```\n\nThe `group` method parameters are as follows:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `groupId`  <br>Required | String | Unique identifier of the group in your database. |\n| `traits` | Object | An optional dictionary of the group’s traits like `name`or `email`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly. You can use `alias` for managing the user’s identity in some of the downstream destinations.\n\nA sample `alias` call is as shown:\n\n```\nanalytics.enqueue(AliasMessage.builder(\"previousId\")\n    .userId(\"newId\")\n);\n```\n\nThe `alias` method parameters are as mentioned below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `previousId`  <br>Required | String | The previous unique identifier of the user. |\n| `traits` | Object | An optional dictionary of the user’s traits like `name` or `email`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n## Filtering destinations\n\nThe Java SDK lets you enable or disable sending events to specifc destinations connected to the source. You can do so by passing the `integrations` object in your API calls:\n\n```\nanalytics.enqueue(TrackMessage.builder(\"Button Clicked\")\n    .userId(\"1hKOmRA4GRlm\")\n    .enableIntegration(\"All\", false)\n    .enableIntegration(\"Amplitude\", true)\n);\n```\n\nThe above snippet disables sending the event `Button Clicked` to any destination except Amplitude.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **The destination flags are case sensitive.** They should match the destination’s name as specified in the [RudderStack dashboard](https://app.rudderstack.com/directory).\n\n## Context\n\nWith the Java SDK, you can send contextual information about the event using the `context` object:\n\n```\nanalytics.enqueue(TrackMessage.builder(\"Button Clicked\")\n    .userId(\"1hKOmRA4GRlm\")\n    .context(ImmutableMap.builder()\n        .put(\"ip\", \"1.23.45.67\")\n        .put(\"language\", \"en-uk\")\n        .build()\n    )\n);\n```\n\nThe Java SDK also adds the information present in `context.library` with every message like `name`, `version`, etc.\n\nA sample `context` object containing the `library` information is shown below:\n\n```\n\"context\": {\n\t\"library\": {\n\t\t\"name\": \"analytics-java\",\n\t\t\"version\": \"x.x.x\"\n\t}\n}\n```\n\nIf you pass any custom information in the `context` object, the SDK automatically merges it with the existing context, except the information contained in `library`.\n\n## Batching events\n\nThe RudderStack SDKs are built to support high performance environments. It is safe to use the Java SDK on a web server serving hundreds of requests per second.\n\nEvery SDK API you call **does not** result in a HTTP request but it is queued in the memory instead. RudderStack flushes the events in batches in the background, allowing faster operations.\n\n**The Java SDK has a maximum size limit of 500KB per batch request and 32KB per call.**\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The [RudderStack HTTP Tracking API](https://www.rudderstack.com/docs/api/http-api/) accepts batch requests upto 500KB. To avoid any errors while sending the event requests, make sure the single event payload size is **below** 32KB.\n\n## Flushing events\n\nTo flush your events, the Java SDK supports the `flush` method. It notifies the RudderStack client to upload the events and make sure no events are left in the queue at any given point.\n\nA sample snippet highlighting the use of the `flush` method is shown below:\n\n### Blocking flush\n\nBy default, the Java SDK does not support blocking flush implicitly. You need to create a `BlockingFlush` class (handles a maximum of 65535 parallel calls to flush) or a `TierBlockingFlush` class (no limit on parallel calls) depending on your requirement.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Both `BlockingFlush` and `TierBlockingFlush` classes are **not** a part of the core Java SDK.\n\nA sample snippet highlighting the use of `BlockingFlush` is shown below:\n\n```\nfinal BlockingFlush blockingFlush = BlockingFlush.create();\n\nRudderAnalytics analytics = RudderAnalytics\n         .builder(\"<WRITE_KEY>\")\n\t\t .plugin(blockingFlush.plugin())\n         .setDataPlaneUrl(\"<DATA_PLANE_URL>\")\n         .build();\n\n// ...YOUR CODE...\n\nanalytics.flush(); // Triggers a flush.\nblockingFlush.block();\nanalytics.shutdown(); // Shuts down after the flush is complete.\n```\n\nA detailed implementation of the `BlockingFlush` class is shown below. Note that this is just a sample code snippet and you can modify it as per your use case.\n\n```\npackage sample;\n\nimport com.rudderstack.sdk.java.analytics.RudderAnalytics;\nimport com.rudderstack.sdk.java.analytics.Callback;\nimport com.rudderstack.sdk.java.analytics.MessageTransformer;\nimport com.rudderstack.sdk.java.analytics.Plugin;\nimport com.rudderstack.sdk.java.analytics.messages.Message;\nimport com.rudderstack.sdk.java.analytics.messages.MessageBuilder;\nimport java.util.concurrent.Phaser;\n\n/*\n * The {@link RudderAnalytics} class doesn't come with a blocking {@link RudderAnalytics#flush()} implementation\n * out of the box. It's trivial to build one using a {@link Phaser} that monitors requests and is\n * able to block until they're uploaded.\n */\npublic class BlockingFlush {\n\n  public static BlockingFlush create() {\n    return new BlockingFlush();\n  }\n\n  BlockingFlush() {\n    this.phaser = new Phaser(1);\n  }\n\n  final Phaser phaser;\n\n  public Plugin plugin() {\n    return builder -> {\n      builder.messageTransformer(\n              builder1 -> {\n                phaser.register();\n                return true;\n              });\n\n      builder.callback(\n          new Callback() {\n            @Override\n            public void success(Message message) {\n              phaser.arrive();\n            }\n\n            @Override\n            public void failure(Message message, Throwable throwable) {\n              phaser.arrive();\n            }\n          });\n    };\n  }\n\n  public void block() {\n    phaser.arriveAndAwaitAdvance();\n  }\n}\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The above implementation restricts the maximum number of parties to 65535. If you try to create and use more parties, **this class throws an error**. To remove this limitation and use more parties, refer to the [TierBlockingFlush](#tierblockingflush) section below.\n\n### `TierBlockingFlush`\n\nTo remove the limitations on the maximum number of supported parties, you can use the `TierBlockingFlush` class.\n\nThe following snippet highlights its use:\n\n```\nfinal TierBlockingFlush blockingFlush = TierBlockingFlush.create();\n\nRudderAnalytics analytics = RudderAnalytics\n         .builder(\"<WRITE_KEY>\")\n\t\t .plugin(blockingFlush.plugin())\n         .setDataPlaneUrl(\"<DATA_PLANE_URL>\")\n         .build();\n\n// ...YOUR CODE...\n\nanalytics.flush(); // Trigger a flush.\nblockingFlush.block();\nanalytics.shutdown(); // Shut down after the flush is complete.\n```\n\nThe following snippet highlights a detailed implementation of the `TierBlockingFlush` class with support for more than 65535 parties. Note that this is just a sample code snippet and you can modify it as per your use case.\n\n```\npackage sample;\n\nimport com.rudderstack.sdk.java.analytics.Callback;\nimport com.rudderstack.sdk.java.analytics.Plugin;\nimport com.rudderstack.sdk.java.analytics.messages.Message;\n\nimport java.util.concurrent.Phaser;\n\n/**\n * Blocking flush implementor for cases where parties exceed 65535\n */\npublic class TierBlockingFlush {\n\n    private static final int MAX_PARTIES_PER_PHASER = (1 << 16) - 2; // max a phaser can accommodate\n\n    public static TierBlockingFlush create() {\n        return new TierBlockingFlush(MAX_PARTIES_PER_PHASER);\n    }\n\n    private TierBlockingFlush(int maxPartiesPerPhaser) {\n        this.currentPhaser = new Phaser(1);\n        this.maxPartiesPerPhaser = maxPartiesPerPhaser;\n    }\n\n    private Phaser currentPhaser;\n    private final int maxPartiesPerPhaser;\n\n    public Plugin plugin() {\n        return builder -> {\n            builder.messageTransformer(\n                    messageTransformationBuilder -> {\n                        currentPhaser = currentPhaser.getRegisteredParties() == maxPartiesPerPhaser ? new Phaser(currentPhaser) : currentPhaser;\n                        currentPhaser.register();\n                        return true;\n                    });\n\n            builder.callback(\n                    new Callback() {\n                        @Override\n                        public void success(Message message) {\n                            onResult();\n                        }\n\n                        @Override\n                        public void failure(Message message, Throwable throwable) {\n                            onResult();\n                        }\n\n                        private void onResult() {\n                            if (currentPhaser.getUnarrivedParties() == 0) {\n                                currentPhaser = currentPhaser.getParent();\n                            }\n                            currentPhaser.arrive();\n                        }\n                    });\n        };\n    }\n\n    public void block() {\n        currentPhaser.arriveAndAwaitAdvance();\n    }\n}\n```\n\n## Logging\n\nTo see the data that is sent over HTTP when debugging any issues, enable the SDK’s verbose logging feature.\n\n*   Refer to the [sample snippet](https://github.com/rudderlabs/rudder-sdk-java/blob/master/analytics-sample/src/main/java/sample/LoggingPlugin.java) for more information on setting the logs using the Java SDK.\n*   Refer to the [sample app](https://github.com/rudderlabs/rudder-sdk-java/blob/master/analytics-sample/src/main/java/sample/Main.java) for more information on using the logging plugin during the SDK initialization.\n\n## Gzipping requests\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The Gzip feature is enabled by default in the Java SDK version 3.0.0.\n\nThe Java SDK automatically gzips requests. It also lets you do so using interceptors in [OkHttp](https://github.com/square/okhttp#rewriting-requests).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Refer to the [sample app](https://github.com/rudderlabs/rudder-sdk-java/blob/master/analytics-sample/src/main/java/sample/Main.java) in the Java SDK repository for a working example.\n\nTo disable the Gzip feature using the `setGZIP` API while initializing the SDK, run the following snippet:\n\n```\nRudderAnalytics analytics = RudderAnalytics\n         .builder(\"<WRITE_KEY>\")\n         .setDataPlaneUrl(\"<DATA_PLANE_URL>\")\n\t\t .setGZIP(false)\n         .build();\n```\n\nNote that if you [pass the OkHttp client](https://github.com/rudderlabs/rudder-sdk-java/blob/c0de9e6de6d8fdde43df418edd33a7e6cc720680/analytics-sample/src/main/java/sample/Main.java#L95) using the `client` API while initializing your SDK, then it is preferred over the default Gzip behavior. It means that even if you use the `setGZIP` API to enable/disable Gzip requests, the behavior will be determined based on the interceptor passed in the OkHttp client.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> To gzip requests on a self-hosted data plane, make sure your [rudder-server](https://github.com/rudderlabs/rudder-server) version is **1.4 or higher**. Otherwise, your events might fail.\n\n## FAQ\n\n#### Can I use the `ImmutableMap` class?\n\nYes, you can use the `ImmutableMap` class via the [Guava library](https://guava.dev/) or use the Java maps.\n\n### How do I flush events on demand?\n\nTo flush your events on demand, call the `flush` method as shown:\n\n#### How does the Java SDK handle events larger than 32KB?\n\nThe Java SDK accepts and sends each event greater than 32KB as a single batch and sends them to the backend.\n\n#### Does the Java SDK support event ordering?\n\nThe Java SDK does not support event ordering by default.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Java SDK | RudderStack Docs",
    "description": "Use RudderStack’s Java SDK to send server-side events to various destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/extract/activecampaign/",
    "markdown": "# ActiveCampaign source | RudderStack Docs\n\nSync data from ActiveCampaign to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[ActiveCampaign](https://www.activecampaign.com/) is a popular marketing automation and CRM platform that lets you drive effective customer engagement and retention.\n\nThis document guides you in setting up ActiveCampaign as a source in RudderStack. Once configured, RudderStack automatically ingests your specified ActiveCampaign data, which can then be routed to your RudderStack-supported data warehouse destination.\n\n## Getting started\n\nTo set up ActiveCampaign as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **ActiveCampaign** from the list of sources.\n3.  Assign a name to your source and click **Next**.\n\n### Connection settings\n\n1.  Click **Create Credentials from Scratch**. You will then see the following screen:\n\n[![ActiveCampaign credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/activecampaign-connection-settings.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/activecampaign-connection-settings.webp)\n\n2.  Enter the following connection credentials to authenticate your ActiveCampaign account with RudderStack:\n\n*   **Account Name**: Enter your ActiveCampaign account name. You can find it in your ActiveCampaign dashboard by going to the **Settings** > **Account** section.\n*   **URL**: Enter your ActiveCampaign API access URL. You can find it in your ActiveCampaign dashboard by going to the **Settings** > **Developer** section.\n*   **API Key**: Enter your ActiveCampaign API key. You can find it in your ActiveCampaign dashboard by going to the **Settings** > **Developer** section.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on obtaining the ActiveCampaign account name, URL, and API key, refer to the [FAQ](#faq) section below.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from ActiveCampaign to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your ActiveCampaign data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from ActiveCampaign:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nChoose the ActiveCampaign data that you wish to ingest via RudderStack. You can either select all data or choose specific ActiveCampaign data attributes as per your requirement.\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/activecampaign-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/activecampaign-connection-settings-2.webp)\n\nActiveCampaign is now configured as a source. RudderStack will start ingesting data from ActiveCampaign as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\n#### How do I obtain the ActiveCampaign account name?\n\nGo to your ActiveCampaign dashboard and locate it under **Settings** > **Account** > **Account Information**:\n\n[![ActiveCampaign account name](https://www.rudderstack.com/docs/images/cloud-extract-sources/activecampaign-connection-settings-4.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/activecampaign-connection-settings-4.webp)\n\n#### How do I obtain the ActiveCampaign API key and URL?\n\nGo to your ActiveCampaign dashboard and locate these under **Settings** > **Developer** > **API Access**:\n\n[![ActiveCampaign API key and URL](https://www.rudderstack.com/docs/images/cloud-extract-sources/activecampaign-connection-settings-3.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/activecampaign-connection-settings-3.webp)\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "ActiveCampaign source | RudderStack Docs",
    "description": "Sync data from ActiveCampaign to your warehouse destination via RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/extract/amplitude/",
    "markdown": "# Amplitude source | RudderStack Docs\n\nSync data from Amplitude to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Amplitude](https://amplitude.com/) is a comprehensive product analytics platform for the web as well as mobile platforms. It helps you get useful marketing insights that drive product strategy, customer conversion, and retention.\n\nThis document guides you in setting up Amplitude as a source in RudderStack. Once configured, RudderStack automatically ingests your Amplitude data and routes it to your specified data warehouse destination.\n\n## Getting started\n\nTo set up Amplitude as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Amplitude** from the list of sources.\n3.  Assign a name to your source and click **Next**.\n\n### Connection settings\n\nEnter the following connection settings to set up the Amplitude source:\n\n[![Amplitude connection settings](https://www.rudderstack.com/docs/images/cloud-extract-sources/amplitude-connection-settings.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/amplitude-connection-settings.webp)\n\nThe settings are described below:\n\n*   **API Key** : Enter your Amplitude project’s API key. You can find it in your Amplitude dashboard by going to **Settings** > **Projects** > Your project name > **General**.\n*   **Secret Key**: Enter your project’s secret key.\n\n*   **Replication Start Date**: Select the date from when RudderStack ingests your Amplitude data.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack will **not replicate** any data before this date.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Amplitude to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Amplitude data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Amplitude:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the Amplitude data you want to ingest by selecting the required resources:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/amplitude-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/amplitude-connection-settings-2.webp)\n\nThe below table mentions the syncs and [API endpoints](https://www.docs.developers.amplitude.com/analytics/#api-references) supported by these resources from Amplitude to your warehouse destination:\n\n| Resource | Full Refresh sync | Incremental sync | Primary key | Amplitude API endpoint |\n| --- | --- | --- | --- | --- |\n| `events` | Yes | Yes | `uuid` | `/export` |\n| `cohorts` | Yes | No  | `id` | `/cohorts` |\n| `average_session_length` | No  | Yes | `date` | `/dashboard` |\n| `annotations` | Yes | No  | `id` | `/annotations` |\n| `active_users` | No  | Yes | `date` | `/dashboard` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh** and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\nAmplitude is now configured as a source. RudderStack will start ingesting data from Amplitude as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\n#### Can I connect my Amplitude source to multiple data warehouse destinations?\n\nYou can connect **only one data warehouse destination** per Cloud Extract source. If you wish to send data to multiple warehouses, you can configure multiple Cloud Extract sources with the same settings and connect them to each data warehouse.\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Amplitude source | RudderStack Docs",
    "description": "Sync data from Amplitude to your warehouse destination via RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-amp-analytics/",
    "markdown": "# AMP Analytics | RudderStack Docs\n\nSend event data from your AMP page to RudderStack.\n\n* * *\n\n*     6 minute read  \n    \n\nThe RudderStack AMP component makes it easy to send the event data from your AMP page to your specified destinations via RudderStack. Now you don’t need to implement or test multiple components for different destinations for your event data. This component collects the default properties and sends a `page` event to RudderStack.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Since the AMP source sends the data directly to the RudderStack backend, it supports only cloud mode destinations. For more information on cloud mode, see [RudderStack Connection Modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/).\n\n## Setup requirements\n\nTo use the RudderStack AMP component, the following prerequisites must be met:\n\n*   You need to set up a [RudderStack account](https://app.rudderstack.com/signup).\n*   Once signed up, [set up an AMP source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the dashboard. You should be able to see a **Write Key** for this source, as shown below:\n\n[![AMP source write key](https://www.rudderstack.com/docs/images/event-stream-sources/amp-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/amp-write-key-new.webp)\n\n*   You will also need a data plane URL. Refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has an SDK installation snippet containing both the write key and the data plane URL. You can use it to integrate the AMP component into your project.\n\n## Getting started\n\nAfter completing the initial setup of your AMP project, follow these steps to start sending your event data to RudderStack:\n\n*   Add an AMP source in your RudderStack [dashboard](https://app.rudderstack.com/).\n*   Note the **Write Key**. This will be required later when using the AMP Analytics component.\n\n[![](https://www.rudderstack.com/docs/images/event-stream-sources/amp-analytics-1.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/amp-analytics-1.webp)\n\n*   Include the RudderStack AMP component before the closing `</head>` tag:\n\n```\n<script async custom-element=\"amp-analytics\"\nsrc=\"https://cdn.ampproject.org/v0/amp-analytics-0.1.js\"></script>\n```\n\n*   Start sending the event data to RudderStack by adding the following script inside of your `<body>` tag.\n*   You can fetch the AMP config JSON from our [CDN](https://cdn.rudderlabs.com/amp/rudderstack.json). The following snippet shows you how to do this:\n\n```\n<amp-analytics config=\"https://cdn.rudderlabs.com/amp/rudderstack.json\">\n  <script type=\"application/json\">\n    {\n      \"vars\": {\n        \"writeKey\": WRITE_KEY,\n        \"dataPlaneUrl\": DATA_PLANE_URL,\n        \"pageName\": \"Your Page Name\"\n      }\n    }\n  </script>\n</amp-analytics>\n```\n\n## Page\n\nYou can record the page views on your website using the `page` request. To add custom properties to your page request, you can use the `extraUrlParams` object.\n\nRefer to the [custom properties](#custom-properties) section for details.\n\nRudderStack’s AMP analytics component includes an automatic page view. You can set the name of the automatic page view through `pageName`, as shown in the following snippet:\n\n```\n<amp-analytics config=\"https://cdn.rudderlabs.com/amp/rudderstack.json\">\n<script type=\"application/json\">\n  {\n    \"vars\": {\n      \"writeKey\": WRITE_KEY,\n      \"dataPlaneUrl\": DATA_PLANE_URL,\n      \"pageName\": \"Your Page Name\"\n    }\n  }\n</script>\n</amp-analytics>\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you fail to provide the value for the `pageName` variable, RudderStack automatically sets the page name to `Unknown Page`.\n\n## Track\n\nYou can record any user event on your website using the `track` request, or create a [trigger](https://amp.dev/documentation/components/amp-analytics/#triggers) to do so. You need to set the event’s name in the trigger’s variables, as shown in the code snippet below:\n\n```\n<body>\n<amp-analytics config=\"https://cdn.rudderlabs.com/amp/rudderstack.json\">\n  <script type=\"application/json\">\n  {\n    \"vars\": {\n      \"writeKey\": WRITE_KEY,\n      \"dataPlaneUrl\": DATA_PLANE_URL,\n      \"pageName\": \"My AMP Page\"\n    },\n    \"triggers\": {\n      \"clickEvent\": {\n        \"on\": \"click\",\n        \"selector\":\"#clickTrigger\",\n        \"request\": \"track\",\n        \"vars\": {\n          \"eventName\": \"new click event\"\n        },\n        \"extraUrlParams\": {\n          \"properties.clickType\": \"href\"\n        }\n      }\n    }\n  }\n  </script>\n</amp-analytics>\nTrack - Click <a href=\"#\" id=\"clickTrigger\">here</a> to send\n</body>\n```\n\n## Properties\n\nYou can send extra properties for your `page` or `track` events to add more information along with the event request. Once you mention the properties as `extraUrlParams` in the `amp-analytics` tag of your implementation, they will be passed to RudderStack for further processing.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Prepend `properties.` to the property name within the `extraUrlParams` object so that it can be parsed as the property value in RudderStack. For more information, refer to the [Custom properties](#custom-properties) section below.\n\n### Default properties\n\nRudderStack collects the following properties with each `track` and `page` view:\n\n```\n{\n  \"anonymousId\": \"amp-<unique-id>\",\n  \"context.locale\": \"en-US\",\n  \"context.page.path\": \"/article\",\n  \"context.page.url\": \"http://example.com/article\",\n  \"context.page.referrer\": \"referrer\",\n  \"context.page.title\": \"My Article\",\n  \"context.screen.width\": 600,\n  \"context.screen.height\": 800\n}\n```\n\n### Custom properties\n\nYou can choose to send custom properties by adding the `extraUrlParams` object. Every property name should be prefixed with `properties.`.\n\nA sample call with the custom properties is shown below:\n\n```\n<amp-analytics config=\"https://cdn.rudderlabs.com/amp/rudderstack.json\">\n<script type=\"application/json\">\n  {\n    \"vars\": {\n      \"writeKey\": WRITE_KEY,\n      \"dataPlaneUrl\": DATA_PLANE_URL,\n      \"pageName\": \"Your Page Name\"\n    },\n    \"extraUrlParams\": {\n      \"properties.type\": \"article\",\n      \"properties.published_at\": \"2016-06-28\",\n      \"properties.author\": \"John Doe\",\n      \"properties.button_type\": \"read-more\",\n      \"properties.article_id\": \"my-article-id\"\n    }\n  }\n</script>\n</amp-analytics>\n```\n\nAny property set at the top-level `extraUrlParams` object will be sent with each request. For example, the property `article_id` will be sent for all requests triggered by this snippet.\n\nIf you want to add custom properties to a specific event or a `page` call, you need to add an `extraUrlParams` object within your trigger configuration. The following code snippet shows how to do so:\n\n```\n<body>\n  <amp-analytics config=\"https://cdn.rudderlabs.com/amp/rudderstack.json\">\n    <script type=\"application/json\">\n    {\n      \"vars\": {\n        \"writeKey\": WRITE_KEY,\n        \"dataPlaneUrl\": DATA_PLANE_URL,\n        \"pageName\": \"My AMP Page\"\n      },\n      \"triggers\": {\n        \"clickEvent\": {\n          \"on\": \"click\",\n          \"selector\":\"#clickTrigger\",\n          \"request\": \"track\",\n          \"vars\": {\n            \"eventName\": \"new click event\"\n          },\n          \"extraUrlParams\": {\n            \"properties.clickType\":\"href\"\n          }\n        }\n      },\n      \"extraUrlParams\": {\n        \"properties.type\": \"article\",\n        \"properties.published_at\": \"2016-06-28\",\n        \"properties.author\": \"John Doe\",\n        \"properties.button_type\": \"read-more\",\n        \"properties.article_id\": \"my-article-id\"\n      }\n    }\n    </script>\n  </amp-analytics>\n  Track - Click <a href=\"#\" id=\"clickTrigger\">here</a> to send\n</body>\n```\n\nThe property `clickType` will be sent only for the `track` request, whereas the property `article_id` will be sent for both the requests (the automatic `page` and `track` call).\n\n### UTM parameters\n\nRudderStack does not collect the UTM information from the SDK. Instead, we encourage you to send the properties as `extraUrlParams`.\n\nAn example of using `extraUrlParams` is as shown:\n\n```\n<amp-analytics config=\"https://cdn.rudderlabs.com/amp/rudderstack.json\">\n  <script type=\"application/json\">\n    {\n    \"vars\": {\n      \"writeKey\": WRITE_KEY,\n      \"dataPlaneUrl\": DATA_PLANE_URL,\n      \"pageName\": \"Your Page Name\"\n    },\n    \"extraUrlParams\": {\n      \"properties.utm_source\": \"google\",\n      \"properties.utm_campaign\": \"2016-06-28\",\n      \"properties.utm_medium\": \"email\"\n    }\n  }\n  </script>\n</amp-analytics>\n```\n\n## AMP Linker\n\nYou can use the [AMP Linker](https://amp.dev/documentation/examples/advertising-analytics/joining_analytics_sessions/) feature to ensure a merged session for users navigating from cached AMP pages (on an AMP cache) to AMP pages on your domain. When a user navigates from a cached AMP page to an AMP page on your domain, the linker sends the current `AMP ClientID` by adding a URL parameter to the outgoing link. The AMP page on your domain receives this parameter and uses it to set a first-party cookie.\n\nOnce this cookie is set, both AMP and Non-AMP pages on your domain use this cookie to identify the user uniquely. This way, the same AMP Client ID (set by the cached AMP page) can be used to identify the user in all contexts.\n\nThe following code snippet demonstrates how to enable this feature:\n\n```\n<body>\n  <amp-analytics config=\"https://cdn.rudderlabs.com/amp/rudderstack.json\">\n    <script type=\"application/json\">\n      {\n        \"vars\": {\n          \"writeKey\": WRITE_KEY,\n          \"dataPlaneUrl\": DATA_PLANE_URL,\n          \"pageName\": \"Your Page Name\"\n        },\n        \"linkers\": {\n          \"enabled\": true\n        }\n      }\n    </script>\n  </amp-analytics>\n</body>\n```\n\nYou can also use the query parameter from the decorated outgoing link from an AMP cache page to a non-AMP page on your domain by using the [RudderStack JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#overriding-anonymous-id).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "AMP Analytics | RudderStack Docs",
    "description": "Send event data from your AMP page to RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/data-pipelines/event-stream/quickstart/server-side-quickstart/",
    "markdown": "# Server-side Quickstart | RudderStack Docs\n\nGet event data flowing from your server-side app in less than 15 minutes.\n\n* * *\n\n*     8 minute read  \n    \n\nThis quickstart guide walks through code examples using the [Node.js SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/). It will help you get started with our server-side SDKs.\n\nFor simple use cases, you can get data flowing in less than 15 minutes by following these three steps:\n\n1.  **Install a RudderStack SDK** in your back-end/server-side app.\n2.  **Instrument API calls** to identify users and capture user actions (like page views and button clicks).\n3.  **Connect destination integrations** to stream events to business tools and your warehouse automatically.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> [Sign up](https://app.rudderstack.com/signup) for a free RudderStack Cloud account before you get started.\n\n## Step 1: Installing the Node SDK\n\nIn most cases, installing one of RudderStack’s [server-side](https://www.rudderstack.com/docs/sources/event-streams/sdks/#server) SDKs in a dev environment takes a back-end developer less than 10 minutes.\n\n### How data engineers can get the Node SDK code\n\n1.  Sign in to your RudderStack account and click **\\+ Add source** in the default **Connections** view.\n\n[![Add source](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)\n\n2.  Select **Node**.\n\n[![Add Node source](https://www.rudderstack.com/docs/images/get-started/quickstart/add-node-source.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-node-source.webp)\n\n3.  Copy the installation snippet under the **Setup** tab (this snippet contains the [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) and [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) , which ensure events are sent to the correct source).\n\n[![Node SDK snippet](https://www.rudderstack.com/docs/images/get-started/quickstart/node-snippet.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/node-snippet.webp)\n\n4.  Send the snippet to your back-end development team.\n\n### How back-end engineers can install the Node SDK\n\nInstall the Node SDK in your back-end app using npm by running the following command:\n\n```\nnpm install @rudderstack/rudder-sdk-node\n```\n\n#### **Initialize the SDK**\n\nYour data engineer should have provided you the [Node SDK snippet](#how-data-engineers-can-get-the-node-sdk-code). Follow these steps to initialize the SDK:\n\nThe snippet you recieved should already contain the [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) and [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) values, which are needed in order to route the event to the correct source in RudderStack.\n\nFor reference, here’s what the Node SDK installation snippet looks like:\n\n```\nconst RudderAnalytics = require('@rudderstack/rudder-sdk-node');\n\nconst client = new RudderAnalytics(WRITE_KEY, {\n  dataPlaneUrl: DATA_PLANE_URL\n});\n```\n\nFor more information, see the full [Node SDK documentation](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Import the initialization snippet in `app.js` or any other file in your project, depending on your requirement.\n\n## Step 2: Instrument API calls\n\nAll RudderStack server-side SDKs follow a [standard event spec](https://www.rudderstack.com/docs/event-spec/standard-events/). It helps you plan your event data and supports various API calls for tracking events in your app - these include `identify`, `track`, `screen`, `group`, `alias`, and `reset` calls.\n\nMost users start by implementing `track` and `identify` calls.\n\nYou can use **`track` calls** to record user activities like clicking a button, creating a post, or making a purchase. You can describe `track` events with [propertiesProperties are additional contextual information you can add to a `track` call to further describe the action a user takes.](https://www.rudderstack.com/docs/resources/glossary/#properties) .\n\nHere is an example of a `track` call named `Item Viewed`. The properties are `price` and `item_id`:\n\n```\nclient.track({\n  userId: \"1hKOmRA4GRlm\",\n  event: \"Item Viewed\",\n  properties: {\n    price: 19.95,\n    item_id: \"1234abcd\",\n  },\n})\n```\n\n**[`identify`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/#identify) calls** are typically fired when a user performs an identifying action like creating an account or making a purchase. `identify` calls also associate a known user with their actions (even if previously anonymous). You can describe users with attributes by adding [traitsTraits are attributes that describe a user. They can be added to an identify call in the `traits` object. Some examples of traits include age, gender, or some specific details - for example, a user’s product plan (free, basic, premium).](https://www.rudderstack.com/docs/resources/glossary/#traits) to the payload.\n\nHere is an example of an `identify` call. The `traits` are `name`, `email`, `plan`, and `friends`.\n\n```\nclient.identify({\n  userId: \"1hKOmRA4GRlm\",\n  traits: {\n    name: \"Alex Keener\",\n    email: \"alex@example.com\",\n    plan: \"Free\",\n    friends: 21,\n  },\n})\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not store or persist user state in any of the server-side SDKs.**\n> \n> Unlike the client-side SDKs that automatically store state information for individual users, the server-side SDKs don’t persist state. Hence, you must specify either `userId` or `anonymousId` every time you make any API calls using a server-side SDK to associate events with individual users.\n\nSee the [RudderStack Node SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/#sending-events) documentation for more information on the other supported API calls.\n\n## Step 3: Verify data flow and connect destination integrations\n\nOnce software engineers have installed the SDK and instrumented events, the data team can verify the event flow into RudderStack. Then, they can connect destination integrations to forward events to the tools in their stack automatically.\n\n### 1\\. Verify data flow for your Node source\n\nBefore connecting destinations, verify that events are flowing into RudderStack by checking the **Live Events** viewer in your Node source.\n\nTo see live events, go to your Node source from the **Connections** view and click the **Live Events** button in the top right of your screen.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> There will be a delay before you see events in the **Live Events** view. RudderStack doesn’t store any data; it temporarily opens a gateway between the control plane and data plane to show you the live events. The delays usually last only a few seconds but on the [RudderStack Cloud Free](https://rudderstack.com/pricing/) plan, they can last up to one minute.\n\n[![Live Events](https://www.rudderstack.com/docs/images/get-started/quickstart/source-live-events-node.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/source-live-events-node.webp)\n\nAfter a few seconds, you will see events populating the feed.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you do not see events in the **Live Events** view, then there is likely a problem with your instrumentation.\n\n### 2\\. Connect destination integrations\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> RudderStack supports 200+ integrations including data warehouses and data lakes, marketing platforms, CRMs, analytics tools, streaming platforms, and more. You can see the full list of supported destination integrations [here](https://www.rudderstack.com/docs/destinations/overview/).\n\nTo add a destination in RudderStack:\n\n1.  Click **\\+ Add destination** in the default **Connections** view.\n\n[![Add destination](https://www.rudderstack.com/docs/images/get-started/quickstart/add-destination-node.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-destination-node.webp)\n\n2.  From the list, select your preferred destination where you want to route the event data. Here are some popular destinations to help you get started:\n\n| Category | Destination |\n| --- | --- |\n| Analytics | [Amplitude](https://www.rudderstack.com/docs/destinations/streaming-destinations/amplitude/), [Mixpanel](https://www.rudderstack.com/docs/destinations/streaming-destinations/mixpanel/), [GA4](https://www.rudderstack.com/docs/destinations/streaming-destinations/google-analytics-4/) |\n| CRM | [HubSpot](https://www.rudderstack.com/docs/destinations/streaming-destinations/hubspot/), [Salesforce](https://www.rudderstack.com/docs/destinations/streaming-destinations/salesforce/) |\n| Marketing | [Braze](https://www.rudderstack.com/docs/destinations/streaming-destinations/braze/), [Mailchimp](https://www.rudderstack.com/docs/destinations/streaming-destinations/mailchimp/) |\n| Object storage | [Amazon S3](https://www.rudderstack.com/docs/destinations/streaming-destinations/amazon-s3/), [Redis](https://www.rudderstack.com/docs/destinations/streaming-destinations/redis/) |\n| Streaming platforms | [Apache Kafka](https://www.rudderstack.com/docs/destinations/streaming-destinations/kafka/), [Amazon Kinesis](https://www.rudderstack.com/docs/destinations/streaming-destinations/amazon-kinesis/) |\n| Warehouses | [Snowflake](https://www.rudderstack.com/docs/destinations/warehouse-destinations/snowflake/), [BigQuery](https://www.rudderstack.com/docs/destinations/warehouse-destinations/bigquery/), [Redshift](https://www.rudderstack.com/docs/destinations/warehouse-destinations/redshift/) |\n| Data lakes & lakehouses | [Databricks](https://www.rudderstack.com/docs/destinations/warehouse-destinations/delta-lake/), [Google Cloud Storage](https://www.rudderstack.com/docs/destinations/warehouse-destinations/gcs-datalake/) |\n\n3.  Set up the destination by configuring the connection settings. For details, see the destination-specific documentation.\n\n## Next steps\n\nThis section contains some optional, but helpful steps that leverage RudderStack’s most popular features for transforming events and debugging problems.\n\n### Add event transformations\n\nOne of RudderStack’s most-loved features is [Event Transformations](https://www.rudderstack.com/docs/transformations/overview/), which you can use to operate on the payloads flowing through RudderStack. You can use it for:\n\n*   Sampling or filtering events.\n*   Removing sensitive user PII from your events.\n*   Enriching events using static logic, an external API, and more.\n\nTo use a transformation:\n\n1.  In the left sidebar, go to **Collect** > **Transformations**. Then, click **Create Transformation**.\n\n[![Create transformation](https://www.rudderstack.com/docs/images/get-started/quickstart/create-transformation.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/create-transformation.webp)\n\n2.  Select a [transformation template](https://www.rudderstack.com/docs/transformations/templates/) from the list depending on your use case. To create a transformation from scratch, click **Custom transformation**.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Transformation templates contain prepopulated, ready-to-use transformation logic, which you can apply to your events before sending them to the destination. You can also modify the code as per your needs.\n\n[![Choose a template](https://www.rudderstack.com/docs/images/features/transformation-templates-2.webp)](https://www.rudderstack.com/docs/images/features/transformation-templates-2.webp)\n\n3.  Verify if your transformation works as expected by clicking the **Run Test** button.\n\n[![Testing a transformation](https://www.rudderstack.com/docs/images/features/run-test-transformations.webp)](https://www.rudderstack.com/docs/images/features/run-test-transformations.webp)\n\n4.  Click **Save** to save your transformation.\n5.  Go to the **Connections** tab of your transformation and connect it to the destination you set up above. See [Connect transformation to destination](https://www.rudderstack.com/docs/transformations/manage/#connect-transformation-to-destination) for more information.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> When you add a transformation and connect it to a destination, RudderStack does the following:\n> \n> 1.  Tracks events at the source.\n> 2.  Applies the transformation logic to your events.\n> 3.  Converts the events in a format the destination expects - RudderStack does this internally and requires no user intervention.\n> 4.  Sends the transformed events to your destination.\n\n### Debugging\n\nRudderStack gives you complete observability into your events and the ability to debug errors that might occur in case of event failures. It provides the [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) feature, where you can:\n\n*   Verify your instrumentation.\n*   Get a real-time view of the events flowing from your sources to the connected destinations.\n*   Identify and debug any errors at the source, destination, or transformation level and narrow down the root cause of the issue.\n\n#### **Source Live Events viewer**\n\nThis is helpful to verify if RudderStack is receiving the source events at all. The payload you see in this viewer is the raw event payload collected from your website.\n\n[![Live Events](https://www.rudderstack.com/docs/images/get-started/quickstart/source-live-events-node.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/source-live-events-node.webp)\n\n[![Source live events details](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events-details.webp)](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events-details.webp)\n\n#### **Transformation Live Events viewer**\n\nThis viewer will give you a before and after snapshot of the event going into your user transformation and what it looks like afterward. It also notifies you about any dropped events or errors during the transformation, along with the details.\n\n[![Transformation live events](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events.webp)](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events.webp)\n\n[![Transformation live events error message](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events-errors.webp)](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events-errors.webp)\n\n#### **Destination Live Events viewer**\n\nThis viewer shows you what the payload looks like when RudderStack sends it to the destination. You can also see the detailed error message if the destination returns an error.\n\n[![Payload to the destination](https://www.rudderstack.com/docs/images/rs-cloud/destination-live-events-details.webp)](https://www.rudderstack.com/docs/images/rs-cloud/destination-live-events-details.webp)\n\nSee the [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) documentation for more details.\n\n## Support\n\nFor any questions on using RudderStack, you can:\n\n*   Start a conversation in our [Community Slack](https://rudderstack.com/join-rudderstack-slack-community).\n*   Drop an email to [RudderStack support](mailto:support@rudderstack.com).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Server-side Quickstart | RudderStack Docs",
    "description": "Get event data flowing from your server-side app in less than 15 minutes.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/iterable/",
    "markdown": "# Iterable Webhook | RudderStack Docs\n\nIngest your event data from Iterable into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For ingesting your Iterable records and sending them to your warehouse destinations via RudderStack, refer to the [Iterable Cloud Extract](https://www.rudderstack.com/docs/sources/extract/iterable/) documentation.\n\n[Iterable](https://iterable.com/) is a popular growth marketing platform that lets you maximize customer interaction and improve your customers’ overall LTV (Life Time Value).\n\nThis guide will help you set up Iterable Webhook as a source in RudderStack. You can then ingest real-time user events in Iterable and send them to your specified destinations.\n\n## Getting started\n\nFollow these steps to set up Iterable as a source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Iterable Webhook**.\n2.  Assign a name to your source and click **Continue**.\n3.  The Iterable source is now configured. Go to the **Settings** tab and note the **Webhook URL**:\n\n[![Iterable webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/iterable-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/iterable-webhook-url.webp)\n\n4.  Go to your Iterable account and navigate to **Integrations** > **System Webhooks**.\n5.  Click **Create Webhook** and enter the webhook URL obtained in **Step 3** in the **Endpoint URL** field:\n\n[![Iterable source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/webhook-url-iterable.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/webhook-url-iterable.webp)\n\n6.  Finally, click **Create**.\n\n## Event transformation\n\nRudderStack ingests the events from Iterable after converting them into the RudderStack event format. It also populates the following properties from the Iterable event payload into the RudderStack event:\n\n| Iterable property | RudderStack property |\n| --- | --- |\n| `email` | `context.traits.email` |\n| `userId` | `userId` |\n| `dataFields` | `properties` |\n| `eventName` | `event` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `userId` is a unique identifier in the output payload. If not provided, RudderStack creates a unique `userId` using `email`.\n\nIterable supports the following events list:\n\n*   Blast Send\n*   Email Bounce\n*   Email Click\n*   Email Complaint\n*   Email Open\n*   Email Send Skip\n*   Email Subscribe\n*   Email Unsubscribe\n*   Hosted Unsubscribe Click\n*   In-App Click\n*   In-App Open\n*   In-App Send\n*   In-App Send Skip\n*   Push Bounce\n*   Push Open\n*   Push Send\n*   Push Send Skip\n*   Push Uninstall\n*   SMS Bounce\n*   SMS Click\n*   SMS Send\n*   SMS Received\n*   SMS Send Skip\n*   Triggered Send\n*   Web Push Send\n*   Web Push Send Skip\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from the Iterable source platform and creates the resulting payload.\n\nA sample payload sent by Iterable is shown below:\n\n```\n{\n  \"email\": \"docs@iterable.com\",\n  \"userId\": \"1\",\n  \"eventName\": \"hostedUnsubscribeClick\",\n  \"dataFields\": {\n    \"country\": \"United States\",\n    \"city\": \"San Jose\",\n    \"campaignId\": 1074721,\n    \"ip\": \"192.168.0.1\",\n    \"userAgentDevice\": \"Mac\",\n    \"messageId\": \"ceb3d4d929fc406ca93b28a0ef1efff1\",\n    \"emailId\": \"c1074721:t1506266:docs@iterable.com\",\n    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36\",\n    \"workflowName\": \"My workflow\",\n    \"locale\": null,\n    \"templateId\": 1506266,\n    \"emailSubject\": \"My email subject\",\n    \"url\": \"https://iterable.com\",\n    \"labels\": [],\n    \"createdAt\": \"2020-03-21 00:24:08 +00:00\",\n    \"templateName\": \"My email template\",\n    \"messageTypeId\": 13406,\n    \"experimentId\": null,\n    \"region\": \"CA\",\n    \"campaignName\": \"My email campaign\",\n    \"workflowId\": 60102,\n    \"email\": \"docs@iterable.com\",\n    \"channelId\": 12466\n  }\n}\n```\n\nRudderStack transforms the above payload into the following payload:\n\n```\n{\n  \"userId\": \"1\",\n  \"context\": {\n    \"integration\": {\n      \"name\": \"Iterable\",\n      \"version\": \"1.0.0\"\n    },\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"traits\": {\n      \"email\": \"docs@iterable.com\"\n    }\n  },\n  \"event\": \"hostedUnsubscribeClick\",\n  \"integrations\": {\n    \"Iterable\": false\n  },\n  \"properties\": {\n    \"country\": \"United States\",\n    \"city\": \"San Jose\",\n    \"campaignId\": 1074721,\n    \"ip\": \"192.168.0.1\",\n    \"userAgentDevice\": \"Mac\",\n    \"messageId\": \"ceb3d4d929fc406ca93b28a0ef1efff1\",\n    \"emailId\": \"c1074721:t1506266:docs@iterable.com\",\n    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36\",\n    \"workflowName\": \"My workflow\",\n    \"locale\": null,\n    \"templateId\": 1506266,\n    \"emailSubject\": \"My email subject\",\n    \"url\": \"https://iterable.com\",\n    \"labels\": [],\n    \"createdAt\": \"2020-03-21 00:24:08 +00:00\",\n    \"templateName\": \"My email template\",\n    \"messageTypeId\": 13406,\n    \"experimentId\": null,\n    \"region\": \"CA\",\n    \"campaignName\": \"My email campaign\",\n    \"workflowId\": 60102,\n    \"channelId\": 12466\n  },\n  \"receivedAt\": \"2020-03-21T00:24:08.000Z\",\n  \"timestamp\": \"2020-03-21T00:24:08.000Z\",\n  \"type\": \"track\"\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Iterable Webhook | RudderStack Docs",
    "description": "Ingest your event data from Iterable into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-php-sdk/",
    "markdown": "# PHP SDK | RudderStack Docs\n\nUse RudderStack’s PHP SDK to send your server-side events to various destinations.\n\n* * *\n\n*     11 minute read  \n    \n\nRudderStack’s PHP SDK lets you track and send the events from your PHP applications to the specified destinations.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack’s PHP SDK supports PHP version 7.4 and above. Refer to the PHP SDK’s [GitHub codebase](https://github.com/rudderlabs/rudder-php-sdk) for the implementation-specific details.\n\n[![Github Badge](https://img.shields.io/packagist/v/rudderstack/rudder-php-sdk?style=flat)](https://packagist.org/packages/rudderstack/rudder-php-sdk)\n\n## SDK setup requirements\n\n1.  Sign up to [RudderStack Cloud](https://app.rudderstack.com/signup).\n2.  [Set up a PHP source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in your dashboard. You should be able to see the **write key** for this source:\n\n[![PHP source write key](https://www.rudderstack.com/docs/images/event-stream-sources/php-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/php-write-key-new.webp)\n\nYou will also need the data plane URL. Refer to the [Dashboard Overview](https://www.rudderstack.com/docs/dashboard-guides/overview/#data-plane-url) guide for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has the SDK installation snippet containing both the write key and the data plane URL. Copy it to integrate the PHP SDK into your application.\n\n## Installing the PHP SDK\n\nInstall the RudderStack PHP SDK using the [composer](https://packagist.org/packages/rudderstack/rudder-php-sdk). You can also do so by running the following command:\n\n```\ngit clone https://github.com/rudderlabs/rudder-php-sdk /my/app/folders/\n```\n\nThen, use the composer to install the PHP SDK by running the following command:\n\n```\ncomposer require rudderstack/rudder-php-sdk\n```\n\n## Initializing the RudderStack client\n\nTo initialize the RudderStack client, run the following code snippet:\n\n```\nuse Rudder\\Rudder;\n\nrequire_once realpath(__DIR__ . '/vendor/autoload.php');\n\nRudder::init(WRITE_KEY, array(\n  \"data_plane_url\" => DATA_PLANE_URL,\n  \"consumer\"       => \"lib_curl\",\n  \"debug\"          => false,\n  \"max_queue_size\" => 10000,\n  \"flush_at\"       => 100,\n  \"ssl\"            => true\n));\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack accepts the `DATA_PLANE_URL` with or without the protocol. If the protocol is missing, RudderStack automatically prepends it to the URL based on whether the `ssl` option is set to `true` or `false`.\n\nRudderStack accepts the following data plane URL formats:\n\n| **SSL** | **Data Plane URL** |\n| --- | --- |\n| `true` | `https://example.dataplane.com` |\n| `true` | `example.dataplane.com` |\n| `false` | `http://example.dataplane.com` |\n| `false` | `example.dataplane.com` |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> While initializing the RudderStack client, the `ssl` field is optional if you are using the HTTPS protocol. If included, its value must be set to `true`. In case of the HTTP protocol, `ssl` is a required field and must always be set to `false`.\n\n### SDK initialization options\n\nThe RudderStack PHP SDK provides the following initialization options:\n\n| Option | Data type | Description |\n| --- | --- | --- |\n| `consumer` | String | Explicitly marks which consumer to use. The default value is `lib_curl`. Refer to the [Consumers](#consumers) section for more information. |\n| `data_plane_url` | String | Explicitly sets the data plane URL. The default value is `hosted.rudderlabs.com`. |\n| `debug` | Boolean | Determines whether to log messages and wait for a response. The default value is `false`. It makes the queuing consumers non-async and blocks the library until a response is received from the API. Hence it is **not recommended** for production use. |\n| `ssl` | Boolean | Determines whether to use TLS instead of SSL for the socket connection. The default value is `false`. |\n| `error_handler` | Function | Function to handle errors and is particularly useful for debugging. Note that if the debug mode is not specified, then the `error_handler` is only called on connection level errors and timeouts. For example, `function ($code, $message) {}`. |\n| `max_queue_size` | Integer | Max size of the queue. The default value is 10000. |\n| `batch_size` | Integer | Items to be sent in a single curl request. The default value is 100. It is recommended to use `flush_at` instead of `batch_size` as this option is deprecated. |\n| `flush_at` | Integer | Items to be sent in a single curl request. The default value is 100. |\n| `timeout` | Integer | Number of seconds to wait for the socket request to time out. The default value is 0.5. |\n| `filename` | String | Location to write the log file. The default value is `/tmp/analytics.log` when the file consumer is selected. |\n| `compress_request` | Boolean | Determines whether to use gzipped request payloads. The default value is `true`. It is supported for [RudderStack server](https://github.com/rudderlabs/rudder-server) v1.4.0 and above. |\n| `flush_interval` | Integer | Frequency in milliseconds to send data using flush method execution. The default value is 10000 miliseconds. |\n| `curl_timeout` | Integer | Timeout for the curl connections. The default value is 0, that is, infinite. |\n| `curl_connecttimeout` | Integer | Connect timeout for the curl connections. The default value is 300. |\n| `max_item_size_bytes` | Integer | Maximum message item size. The default value is 32000 bytes (32KB). |\n| `max_queue_size_bytes` | Integer | Maximum batch size. The default value is 512000 bytes (512KB). |\n| `filepermissions` | String | File permissions for file consumer. The default value is 0644. |\n\n## Migrating from v1 to v2\n\nTo migrate to PHP SDK v2, make sure the following conditions are met:\n\n*   Your PHP version should be v7.4 or above.\n*   If you are using self-hosted [rudder-server](https://github.com/rudderlabs/rudder-server), either upgrade it to v1.4.0 or above, or disable the gzipped request payloads (by setting `compress_request` to `false`).\n\n## Sending events\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not store or persist the user state in any of the server-side SDKs**.\n> \n> Unlike the client-side SDKs that deal with a single user at a given time, the server-side SDKs deal with multiple users simultaneously. Therefore, you must specify either the `userId` or `anonymousId` **every time** while making any API calls supported by the PHP SDK.\n\nRudderStack’s PHP SDK sends 100 events per batch by default. To emulate synchronous events, set the batch value to 1 using the [`flush_at`](#sdk-initialization-options) option.\n\n### Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` call made using the PHP SDK is shown below:\n\n```\nRudder::identify(array(\n  \"userId\" => \"1hKOmRA4GRlm\",\n  \"traits\" => array(\n    \"email\" => \"alex@example.com\",\n    \"name\" => \"Alex Keener\",\n    \"friends\" => 25\n  )\n));\n```\n\nThe `identify` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `context` | Object | An optional dictionary of information that provides context about a message. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n| `traits` | Object | Dictionary of the user’s traits like `name` or `email`. |\n\n### Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the user actions along with their associated properties. Each user action is called an **event**.\n\nA sample `track` call is shown below:\n\n```\nRudder::track(array(\n  \"userId\" => \"f4ca124298\",\n  \"event\" => \"Article Bookmarked\",\n  \"properties\" => array(\n    \"title\" => \"Snow Fall\",\n    \"subtitle\" => \"The Avalanche at Tunnel Creek\",\n    \"author\" => \"John Branch\"\n  )\n));\n```\n\nThe `track` method parameters are as described below:\n\n| Name | Type | Description |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `event`  <br>Required | String | Name of the event. |\n| `properties` | Object | An optional dictionary of the properties associated with the event. |\n| `context` | Object | An optional dictionary of information that provides context about a message. It is not directly related to the API call. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n\n### Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call allows you to record the page views on your application, along with the other relevant information about the page.\n\nA sample `page` call is as shown:\n\n```\nRudder::page(array(\n  \"userId\" => \"f4ca124298\",\n  \"category\" => \"Docs\",\n  \"name\" => \"PHP library\",\n  \"properties\" => array(\n    \"url\" => \"https://rudderstack.com/libraries/php/\"\n  )\n));\n```\n\nThe `page` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed page. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `properties` | Object | An optional dictionary of the properties associated with the viewed page, like `url` and `referrer`. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n\n### Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It lets you record the screen views on your mobile app along with other relevant information about the screen.\n\nA sample `screen` call is as shown:\n\n```\nRudder::screen(array(\n  \"userId\" => \"f4ca124298\",\n  \"category\" => \"Docs\",\n  \"name\" => \"PHP library\",\n  \"properties\" => array(\n    \"name\" => \"HomeScreen\"\n  )\n));\n```\n\nThe `screen` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed screen. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `properties` | Object | An optional dictionary of the properties associated with the screen, like `url` and `referrer`. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n\n### Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group. A sample `group` call is as shown:\n\n```\nRudder::group(array(\n  \"userId\" => \"2sfjej334\",\n  \"groupId\" => \"2sfjej334erresd\",\n  \"traits\" => array(\n    \"email\" => \"alex@example.com\",\n    \"name\" => \"Alex Keener\",\n    \"friends\" => 25\n  )\n));\n```\n\nThe `group` method parameters are as follows:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `groupId`  <br>Required | String | Unique identifier of the group, as present in your database. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `traits` | Object | Dictionary of the user’s traits like `name` or `email`. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n\n### Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly. You can use `alias` for managing the user’s identity in some of the downstream destinations.\n\nA sample `alias` call is as shown:\n\n```\nRudder::alias(array(\n  \"previousId\" => \"previousId\",\n  \"userId\" => \"2sfjej334\",\n));\n```\n\nThe `alias` method parameters are as mentioned below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `previousId`  <br>Required | String | The previous unique identifier of the user. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `traits` | Object | Dictionary of the properties or traits associated with the group, such as `email` or `name`. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n\n## Consumers\n\nYou can specify the following consumers to make requests to RudderStack:\n\n### Lib-Curl Consumer\n\nThe [lib-curl consumer](https://github.com/rudderlabs/rudder-php-sdk/blob/develop/lib/Consumer/LibCurl.php) is RudderStack’s default PHP library. You can use it for faster response during lighter loads. The library runs synchronously, queuing and sending calls in batches to RudderStack.\n\nRudderStack ignores the HTTP responses by default to optimize the library’s speed. However, you can choose to wait for these responses by [enabling the debug mode](#sdk-initialization-options).\n\n### Fork-Curl Consumer\n\nThe [fork-curl consumer](https://github.com/rudderlabs/rudder-php-sdk/blob/develop/lib/Consumer/ForkCurl.php) can be used when you can’t use persistent sockets or want to ensure quick response for lighter loads. It creates an in-memory queue which buffers the `identify` and `track` calls. The queue is flushed by forking an async `curl` process that sends a batch request. The flushing happens after every 100 calls or at the end of serving the page, by default. You can use the `flush_at` property to configure this value.\n\nThe key difference between lib-curl and fork-curl consumer is in the underlying mechanism of creating the request. All events are added into a batch that, when flushed, initiates a request either using the PHP `exec` method executing a curl command (fork-curl consumer) or via PHP’s `curl_exec` method (lib-curl consumer).\n\n### Socket Consumer\n\nYou can use the [socket consumer](https://github.com/rudderlabs/rudder-php-sdk/blob/develop/lib/Consumer/Socket.php) which lets you make requests to RudderStack when you can’t spawn other processes from your PHP scripts. It initiates a socket request to RudderStack servers each time an `identify` or `track` call is made. The socket request writes the event data and closes the connection before waiting for a response. It is recommended to use some other consumer if your servers are dealing with hundreds of requests per second or cannot use a persistent connection.\n\n### File Consumer\n\nYou can also use the [file consumer](https://github.com/rudderlabs/rudder-php-sdk/blob/develop/lib/Consumer/File.php) for making requests to RudderStack. It records each `identify` or `track` call you make to a log file. Further, it uploads the log file by running the `file.php` file in RudderStack’s [github repository](https://github.com/rudderlabs/rudder-php-sdk/blob/develop/lib/Consumer/File.php).\n\nYou can run the `examples/SendBatchFromFile.php` file to upload your log file to RudderStack:\n\n```\nphp examples/SendBatchFromFile.php --secret YOUR_WRITE_KEY --file /tmp/analytics.log\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> It is recommended to run this command as a cron job after every few minutes so that your log files are created in manageable sizes. Every time you run the command, it removes the old log files once they are processed successfully.\n\nYou can create a new cron job to upload your log files, as shown in the following snippet:\n\n```\n$ # create a cron job that runs as www-data every minute\n$ echo '*/1 * * * * www-data php /my/path/to/analytics-php/SendBatchFromFile.php > /dev/null' | sudo tee /etc/cron.d/analytics\n$ sudo service cron reload    # reload the cron daemon\n```\n\n## FAQ\n\n#### Does the PHP SDK support event ordering?\n\nThe PHP SDK does not support event ordering by default.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "PHP SDK | RudderStack Docs",
    "description": "Use RudderStack's PHP SDK to send your server-side events to various destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/",
    "markdown": "# JavaScript SDK | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "JavaScript SDK | RudderStack Docs",
    "description": "Track event data and send it your specified destinations using the RudderStack JavaScript SDK.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/",
    "markdown": "# Node SDK | RudderStack Docs\n\nUse RudderStack’s Node SDK to send server-side events to various destinations.\n\n* * *\n\n*     12 minute read  \n    \n\nRudderStack’s Node SDK lets you track and send the events from your Node applications to the specified destinations.\n\nSee the Node SDK [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-node) for implementation-specific details.\n\n[![Github Badge](https://img.shields.io/npm/v/@rudderstack/rudder-sdk-node?style=flat)](https://www.npmjs.com/package/@rudderstack/rudder-sdk-node/)\n\n## SDK setup requirements\n\n1.  Sign up for [RudderStack Cloud](https://app.rudderstack.com/signup).\n2.  [Set up a Node source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the dashboard. You should be able to see the **write key** for this source:\n\n[![Node source write key](https://www.rudderstack.com/docs/images/event-stream-sources/node-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/node-write-key-new.webp)\n\nYou will also need the data plane URL. Refer to the [Dashboard Overview](https://www.rudderstack.com/docs/dashboard-guides/overview/#data-plane-url) guide for more information on the data plane URL and where to find it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure to enclose the write key and data plane URL parameters within double quotes (`\" \"`).\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has the SDK installation snippet containing both the write key and the data plane URL. Copy it to integrate the Node SDK into your application.\n\n## Installing the Node SDK\n\nTo install the RudderStack Node SDK using [npm](https://www.npmjs.com/), run the following command:\n\n```\nnpm install @rudderstack/rudder-sdk-node\n```\n\n## Initializing the SDK\n\nRun the following snippet to initialize the Node SDK. It creates a global RudderStack client object that can be used for all subsequent event requests.\n\n```\nconst RudderAnalytics = require(\"@rudderstack/rudder-sdk-node\")\n\n// RudderStack requires the batch endpoint of the server you are running\nconst client = new RudderAnalytics(WRITE_KEY, <DATA_PLANE_URL>/v1/batch)\n```\n\n```\nconst RudderAnalytics = require('@rudderstack/rudder-sdk-node');\n\nconst client = new RudderAnalytics(WRITE_KEY, {\n  dataPlaneUrl: DATA_PLANE_URL, // default: https://hosted.rudderlabs.com\n\n  // More initialization options\n});\n```\n\n## SDK initialization options\n\nThe RudderStack Node SDK provides the following parameters which you can pass during the SDK initialization:\n\n| Parameter | Data type | Description |\n| --- | --- | --- |\n| `flushAt` | Integer | Number of events flushed by the SDK when reached this limit.<br><br>**Default value**: 20 |\n| `flushInterval` | Integer | Maximum timespan (in milliseconds) after which the events from the in-memory queue are flushed.<br><br>**Default value**: 10000 |\n| `maxInternalQueueSize` | Integer | Maximum length of the in-memory queue.<br><br>**Default value**: 20000 |\n| `logLevel` | String | Sets the logging level. The acceptable values are `info`, `debug`, `error`, etc.<br><br>**Default value**: `info` |\n\nThe following initialization parameters are only available for RudderStack Node SDK **v2.x.x and above**:\n\n| Parameter | Data type | Description |\n| --- | --- | --- |\n| `dataPlaneUrl` | String | Data plane URL.<br><br>**Default value**: `https://hosted.rudderlabs.com` |\n| `path` | String | Path to the `batch` endpoint.<br><br>**Default value**: `/v1/batch` |\n| `maxQueueSize` | Integer | Maximum payload size of a `batch` request.<br><br>**Default value**: 460800 (500KB) |\n| `axiosConfig` | Object | Axios configuration. |\n| `axiosInstance` | Object | Axios instance. |\n| `axiosRetryConfig` | Object | Axios retry configuration. |\n| `retryCount` | Integer | Number of times a request is retried by Axios in case of failure.<br><br>**Default value**: `3` |\n| `errorHandler` | Function | Function that is called if the request to server fails. |\n| `gzip` | Boolean | Gzip compresses the event request.<br><br>**Default value**: `true` |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> For gzipping requests, your [rudder-server](https://github.com/rudderlabs/rudder-server) must be on v1.4.0 or above. Otherwise, your requests will fail.\n\n## Sending events\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not store or persist the user state in any of the server-side SDKs**.\n> \n> Unlike the client-side SDKs that deal with a single user at a given time, the server-side SDKs deal with multiple users simultaneously. Therefore, you must specify either the `userId` or `anonymousId` **every time** while making any API calls supported by the Node SDK.\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` call is as shown:\n\n```\nclient.identify({\n  userId: \"1hKOmRA4GRlm\",\n  traits: {\n    name: \"Alex Keener\",\n    email: \"alex@example.com\",\n    plan: \"Free\",\n    friends: 21,\n  },\n})\n```\n\nThe `identify` parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `context` | Object | An optional dictionary of information that provides context about a message. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n| [`traits`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/#identify-traits) | Object | Dictionary of the user’s traits like `name` or `email`. |\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you track the user actions along with any properties associated with them.\n\nA sample `track` call is shown below:\n\n```\nclient.track({\n  userId: \"1hKOmRA4GRlm\",\n  event: \"Item Viewed\",\n  properties: {\n    revenue: 19.95,\n    shippingMethod: \"Premium\",\n  },\n})\n```\n\nThe `track` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `event`  <br>Required | String | Name of the event. |\n| `properties` | Object | An optional dictionary of the properties associated with the event. |\n| `context` | Object | An optional dictionary of information that provides context about a message. It is not directly related to the API call. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n\n## Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call allows you to record the page views on your application, along with the other relevant information about the page.\n\nA sample `page` call is as shown:\n\n```\nclient.page({\n  userId: \"1hKOmRA4GRlm\",\n  category: \"Food\",\n  name: \"Pizza\",\n  properties: {\n    url: \"https://example.com\",\n    title: \"Pizza\",\n    referrer: \"https://google.com\",\n  },\n})\n```\n\nThe `page` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed page. |\n| `context` | Object | An optional dictionary of information that provides context about a message. It is not directly related to the API call. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `properties` | Object | An optional dictionary of the properties associated with the viewed page, like `url` and `referrer`. |\n\n## Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It lets you record the screen views on your mobile app along with other relevant information about the screen.\n\nA sample `screen` call is as shown:\n\n```\nclient.screen({\n  userId: \"12345\",\n  category: \"Food\",\n  name: \"Pizza\",\n  properties: {\n    screenSize: 10,\n    title: \"Pizza\",\n    referrer: \"https://google.com\",\n  },\n})\n```\n\nThe `screen` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed page. |\n| `context` | Object | An optional dictionary of information that provides context about a message. It is not directly related to the API call. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `properties` | Object | An optional dictionary of the properties associated with the screen, like `url` or `referrer`. |\n\n## Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group.\n\nA sample `group` call is as shown:\n\n```\nclient.group({\n  userId: \"12345\",\n  groupId: \"1\",\n  traits: {\n    name: \"Company\",\n    description: \"Google\",\n  },\n})\n```\n\nThe `group` method parameters are as follows:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `groupId`  <br>Required | String | Unique identifier for the group present in your database. |\n| `context` | Object | An optional dictionary of information that provides context about a message. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `traits` | Object | An optional dictionary of the group’s traits like `name`or `email`. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n\n## Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly. You can use `alias` for managing the user’s identity in some of the downstream destinations.\n\nA sample `alias` call is as shown:\n\n```\nclient.alias({\n  previousId: \"old_id\",\n  userId: \"new_id\",\n})\n```\n\nThe `alias` method parameters are as mentioned below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required | String | Unique identifier for a user in your database. |\n| `anonymousId` | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `previousId`  <br>Required | String | The previous unique identifier of the user. |\n| `context` | Object | An optional dictionary of information that provides context about a message. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `traits` | Object | An optional dictionary of the user’s traits like `name` or `email`. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n\n## Data persistence\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This is a beta feature. Contact the RudderStack team on [Slack](https://rudderstack.com/join-rudderstack-slack-community) if you face any issues.\n\nIf the Node SDK fails to deliver the events to RudderStack in the first attempt, it retries the event delivery. However, if RudderStack is unavailable for a longer duration, there is a possibility of data loss. To prevent this scenario, the SDK has the data persistence feature where the event data is persisted in **Redis**, guaranteeing event delivery. Simultaneously, the SDK can retry multiple times as the queue is maintained in a different process space (Redis).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To use this feature, you will need to host a Redis server to use it as the intermediary data storage queue. RudderStack uses [Bull](https://github.com/OptimalBits/bull) as the interface layer between the Node SDK and Redis.\n\nTo achieve data persistence, you need to call the `createPersistenceQueue` method which takes two parameters - `queueOpts` and `callback`. It initializes the persistent queue. A sample SDK initialization is shown below:\n\n```\nconst client = new Analytics(\"write_key\", \"DATA_PLANE_URL/v1/batch\", {\n  flushAt: <number> = 20,\n  flushInterval: <ms> = 20000\n  // the max number of elements that the SDK can hold in memory,\n  // this is different than the Redis list created when persistence is enabled.\n  // This restricts the data in-memory when Redis is down, unreachable etc.\n  maxInternalQueueSize: < number > = 20000\n});\n\nclient.createPersistenceQueue({\n  redisOpts: {\n    host: \"localhost\"\n  }\n}, err => {})\n```\n\n```\nconst client = new Analytics(\"WRITE_KEY\", {\n  dataPlaneUrl: DATA_PLANE_URL // default: https://hosted.rudderlabs.com with default path set to /v1/batch\n  flushAt: <number> = 20,\n  flushInterval: <ms> = 20000\n  // the max number of elements that the SDK can hold in memory,\n  // this is different than the Redis list created when persistence is enabled.\n  // This restricts the data in-memory when Redis is down, unreachable etc.\n  maxInternalQueueSize: < number > = 20000\n});\n\nclient.createPersistenceQueue({\n  redisOpts: {\n    host: \"localhost\"\n  }\n}, err => {})\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If the `createPersistenceQueue` method is not called after initializing the SDK, the SDK will work without any persistence.\n\n### `queueOpts`\n\nThe syntax for `createPersistenceQueue` method is as follows:\n\n`client.createPersistenceQueue(QueueOpts, callback)`\n\nA sample `queueOpts` initialization is shown below:\n\n```\nqueueOpts {\n  queueName ?: string = rudderEventsQueue,\n  isMultiProcessor ?: boolean = false\n  // pass a value without the {}, this will used as prefix to Redis keys,\n  // needed to support Redis cluster slots.\n  prefix?: string = {rudder},\n  redisOpts : RedisOpts,\n  jobOpts?: JobOpts\n}\n```\n\nThe specification of the different `queueOpts` parameters is listed in the following table:\n\n| **Parameter** | **Description** | **Default Value** |\n| --- | --- | --- |\n| `queueName` | Name of the queue. | `20` |\n| `isMultiProcessor` | Determines whether to handle previously active jobs. If set to `false`, the previously active job will be picked up first by the processor. Otherwise, Bull moves this job to the back of the Redis queue to be picked up after the already pushed event. | `false` |\n| `prefix` | Used as the prefix to the Redis keys needed to support the Redis cluster slots. | `20000` |\n| `redisOpts` | Refer to the [`RedisOpts`](#redisopts) section below. | `RedisOpts` |\n| `jobOpts` | Refer to the [`JobOpts`](#jobopts) section below. | `JobOpts` |\n\nFor more information on these parameters, refer to the [Bull docs](https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#queue).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If the same queue (RudderStack SDK initialized with the same queue name) is used in case of multiple servers (server-side SDKs), set the value of `isMultiProcessor` to `true` as event ordering is not applicable in this case.\n\n#### `RedisOpts`\n\n```\nRedisOpts {\n  port?: number = 6379;\n  host?: string = localhost;\n  db?: number = 0;\n  password?: string;\n}\n```\n\n#### `JobOpts`\n\n```\nJobOpts {\n  maxAttempts?: number = 10\n}\n```\n\n### `callback`\n\nIn case of an error, the `createPersistenceQueue` method returns a callback. You should retry sending the events in this scenario.\n\n```\n// createPersistenceQueue calls this with error or nothing(in case of success), // user should retry in case of error\ncallback: function(error) || function()\n```\n\nCalling the `createPersistenceQueue` method initializes a Redis list by calling the [Bull’s](https://github.com/OptimalBits/bull) utility methods. It also adds a **single** job processor for the processing (making requests to RudderStack) jobs that are pushed into the list. Any error encountered while doing this leads to a callback with the error.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If the callback returns with an error, RudderStack recommends retry calling `createPersistenceQueue` with a backoff.\n\n### Event flow\n\n*   Calling the SDK methods like `track`, `page`, `identify`, etc. pushes the events to an in-memory array.\n*   The events from the array are flushed as a `batch` to the Redis persistence based on the `flushAt` and `flushInterval` settings. The in-memory array has a maximum size of `maxInternalQueueSize`. **Once this size limit is reached,** \\_\\_**the events won’t be accepted if not drained to the other side (cases where Redis connection is slow or the Redis server is not reachable).**\n*   The processor will take the batch from the Redis list and make a request to RudderStack. In case of an error, the processor will retry sending the data again if the error can be retried (errors with status code `5xx and 429`). **The retry will go up to `JobOpts.maxAttempts` with an** **exponential backoff of power 2 with max backoff of 30 seconds**.\n*   If the job fails even after `JobOpts.maxAttempts`, it will not be retried again and pushed to a `failed queue`. **You can retry them later manually using Bull’s utility methods** [listed here](https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#queuegetfailed) **or get them from Redis directly**.\n*   There might be a scenario where the node process dies with the jobs still in active state (not completed nor failed but in the process of sending/retrying). Since the RudderStack SDK has only **1 processor for sending events** (this count should always be **1**), the next time the SDK is initialized and `createPersistenceQueue` is called, **the jobs will be picked up first by the processor to get processed to maintain event ordering based on the value of `QueueOpts.isMultiProcessor`**.\n*   For multiple servers (SDK) connecting to the same queue (`QueueOpts.queueName`), there will be multiple processors fetching events from the same queue and event ordering won’t be implemented. Hence, `QueueOpts.isMultiProcessor` should be set to **`true`.**\n\n## FAQ\n\n##### How to ensure that all my events in the queue are processed?\n\nYou can use the `flush()` method to ensure that all events in the queue are processed. The following example highlights the use of `flush()` with a callback:\n\n```\nclient.flush(function(err, batch){\n  console.log('Flushing done');\n})\n```\n\n#### How does the Node SDK handle events larger than 32KB?\n\nThe Node SDK accepts and sends each event greater than 32KB as a single batch and sends them to the backend.\n\n#### Does the Node SDK support event ordering?\n\nThe Node SDK does not support event ordering by default.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Node SDK | RudderStack Docs",
    "description": "Use RudderStack’s Node SDK to send server-side events to various destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/data-pipelines/reverse-etl/",
    "markdown": "# Reverse ETL | RudderStack Docs\n\nEnable seamless activation of data from cloud data warehouses to downstream destinations.\n\n* * *\n\n*     4 minute read  \n    \n\nRudderStack’s **Reverse ETL** feature empowers you to route the enriched customer data residing in your data warehouse to all your operational systems, including analytics, sales, and marketing tools. With this feature, you can set up your data warehouse as a source in the [RudderStack dashboard](https://app.rudderstack.com/), choose the data to import, and then seamlessly synchronize it to your preferred destinations.\n\nSee how Reverse ETL pipelines work in this self-paced product tour:\n\n## Why use Reverse ETL\n\nCloud data warehouses have revolutionized data management, centralizing information, and transforming it for powerful analytics. Yet, the true power of data lies in activation, turning those insights into real-world decisions and experiences. This requires getting clean data out of the warehouse into operational systems.\n\nHowever, the common issues with this are:\n\n*   Data warehouses are only accessible to technical, SQL users.\n*   Moving data from the warehouse to operational systems often involves manual processes, scripting, and maintenance, which can be time-consuming and error-prone.\n*   Important metrics and features from data warehouses might only make it outside in the form of reports or dashboards.\n\nThis is where the Reverse ETL functionality comes into picture.\n\n## What is Reverse ETL\n\nReverse ETL is the process of delivering data from a company’s data warehouse to operational systems and SaaS tools. This empowers businesses to act upon the data, personalizing customer experiences effectively.\n\nA data warehouse contains business critical data from where important metrics and features like LTV, revenue, CAC, ROI, conversion rate, churn, etc. can be derived. Hence, it becomes important to ensure that the warehouse data is activated. Reverse ETL unlocks this data activation by putting the right data in the right operational tools.\n\n### ETL vs Reverse ETL\n\nTraditional ETL primarily focuses on integrating data, often in a unidirectional manner, from various disparate sources into a centralized data warehouse. This data is then transformed and combined for analytical purposes, such as customer profiling.\n\nReverse ETL is a specific type of ETL that flows in the opposite direction from a warehouse [source](https://www.rudderstack.com/docs/sources/reverse-etl/) towards operational or SaaS tools as a [destination](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/), establishing a bidirectional flow of data in and out of the data warehouse.\n\nAnother key difference is that traditional ETL focuses on ingesting data tables whereas Reverse ETL focuses on syncing specific rows, often updating fields only if data has changed since the last sync. This entails data deduplication and comparison of current warehouse data values with downstream tools.\n\n## How Reverse ETL works\n\nReverse ETL queries your data warehouse and writes the query results to a downstream operational tool or system. RudderStack’s Reverse ETL pipeline includes the following core components:\n\n*   **Sources**: Usually a cloud data warehouse like Snowflake or BigQuery which contains the centralized data you want to sync to the operational system.\n*   **Import Data**: Data to be synced from the source. For RudderStack that can be a warehouse table, a [model (SQL query)](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/models/), or an [audience](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/).\n*   **Sync Type**: Defines how to sync the data to the destination, such as [Upsert](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/#upsert-mode) or [Mirror](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/#mirror-mode) mode.\n*   **Destinations**: Location to write the synced data. This is the operational system where business users consume data (for example, Salesforce, Google Ads, Iterable, Blaze, etc.)\n*   **Schedule**: Determines how often to [sync](https://www.rudderstack.com/docs/sources/reverse-etl/sync-schedule-settings/) the data to the operational system.\n\nThese components collectively overlay on your cloud data warehouse enabling you to activate any data within your data models and warehouse.\n\n## Use Cases\n\nReverse ETL plays a crucial role in unlocking the full potential of your data assets by bridging the gap between analytics and operations, enabling businesses to drive better decision-making and gain competitive advantage.\n\n### Marketing Teams\n\nMarketing teams can employ Reverse ETL to ensure continuous updates of CRM systems with the latest customer data, enriching customer profile information. It can also be used to define segments or audiences and sync them across all marketing platforms for enhanced tracking, personalized marketing, and experimentation.\n\n### Sales Teams\n\nSales teams require access to behavioral and product usage data in the warehouse. Reverse ETL enables pushing this data into sales platforms (e.g. CRM), offering detailed customer insights for proactive real-time responses. Additionally, you can setup Reverse ETL to trigger notifications in communication apps like Slack, ensuring your sales reps are notified of important customer actions in your product/app.\n\n### Product Teams\n\nProduct teams can leverage Reverse ETL to send up-to-date customer data and attributes to production databases, personalizing customers’ in-product experiences. This can be as simple as showing current billing information or updating offerings based on past purchases.\n\n### Customer Success Teams\n\nReverse ETL allows customer success teams to get key metrics and predictive features, like LTV, ARR, and likelihood to churn, into their support tools. This capability enables them to prioritize tickets based on impact and reduce churn among critical customers.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Reverse ETL | RudderStack Docs",
    "description": "Enable seamless activation of data from cloud data warehouses to downstream destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/looker/",
    "markdown": "# Looker | RudderStack Docs\n\nIngest your event data from Looker into RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Looker](https://looker.com/) is a popular Business Intelligence and data analytics platform. It allows you to explore your data for actionable, business-oriented insights.\n\nYou can now use Looker as a data source to send enriched user activities and their associated properties over a period of time to RudderStack. RudderStack then forwards this data to your specified destinations for real-time syncing of the newly created properties and actions.\n\n## Set up Looker actions\n\nAfter creating your views in Looker, you need to set-up the necessary [Looker actions](https://docs.looker.com/admin-options/platform/actions). To do so, go to your Looker actions dashboard.\n\nNote that:\n\n*   While RudderStack supports teams and individual workspaces in its [Enterprise edition](https://rudderstack.com/pricing/), Looker does not allow individual Action Hub configurations for different members of the same organization.\n*   To send the output of different looks to various RudderStack sources, you will need to host custom instances of Looker Action Hub. See the [Looker documentation](https://docs.looker.com/sharing-and-publishing/action-hub#setting_up_a_local_action_hub_server) for more information.\n\n## Configure Looker source in RudderStack\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Looker**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Looker source is now configured. Note the source **Write key**:\n\n[![Looker source write key](https://www.rudderstack.com/docs/images/event-stream-sources/looker-write-key.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/looker-write-key.webp)\n\n## Add RudderStack Action Hub Server\n\nThis section describes the steps required to enable [RudderStack Actions](https://github.com/rudderlabs/actions) in Looker.\n\nRudderStack hosts a Looker [Action Hub Server](https://docs.looker.com/sharing-and-publishing/action-hub#writing_an_action) that communicates with your Looker instance.\n\nTo connect the Action Hub Server to your Looker instance, click the **Add Action Hub** button present at the bottom of Looker Actions dashboard:\n\n[![Add Action Hub](https://www.rudderstack.com/docs/images/event-stream-sources/add-action-hub.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/add-action-hub.webp)\n\nDepending on your region, enter the RudderStack Action Hub Server URL and related authorization token:\n\n*   **RudderStack Action Hub Server URL**: [https://looker-action-hub.rudderstack.com](https://looker-action-hub.rudderstack.com/)\n*   **Authorization Token**:\n\n```\n75805209b45a55494d0c27d4eb91fbf6bc7fb1a63dfcd9260fe65daee584737b/ea4e074e71c1af9c07bf71f69c1addf7b9a30d458bd7aea4b4e60d6a6a122277b59210186edb7cf21a5ff53a29c68fb89ff5aaf5019570c8a5131484a11e2e3e\n```\n\n*   **RudderStack Action Hub Server URL**: [https://looker-action-hub.eu.rudderstack.com](https://looker-action-hub.eu.rudderstack.com/)\n*   **Authorization Token**:\n\n```\n93ceacd6ae64593995163d692888bec22f2b8032eee994cc4d071f0b2392719f/09723f97fb676bd1eeb1efdc3812761d7bdb332af5ad01f4323d30d7e90d9954ecfcb63df2f45094ff9bd1b5dce00111e91c70b8dfdecd731a266468ed0fcadc\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you encounter an error while connecting to the Action Hub after entering the server URL, click **Configure Authorization** and enter the **Authorization Token**. See [FAQ](#faq) for more information.\n\nYou can then start viewing the following three RudderStack actions:\n\n| Actions | Description |\n| --- | --- |\n| Identify | Adds the traits to your RudderStack users via the `identify` event. |\n| Group | Adds the traits or users to your RudderStack groups via the `group` event. |\n| Track | Adds the user properties for your users via the `track` event. |\n\n[![RudderStack-hosted Action Hub](https://www.rudderstack.com/docs/images/event-stream-sources/looker-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/looker-3.webp)\n\n### Configure actions\n\n1.  To enable any of the above actions, click the **Settings** button.\n2.  Enter the **Write key** obtained after [setting up the Looker source](#configure-looker-source-in-rudderstack) in RudderStack.\n3.  Specify the **Rudder Server URL** to which Looker forwards the user looks data. The URL is `https://<data_plane_url>/v1/batch`, where <data\\_plane\\_url> is your [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) .\n\n[![Configuring the Rudder Write Key and Rudder Server URL](https://www.rudderstack.com/docs/images/event-stream-sources/looker-4.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/looker-4.webp)\n\nOnce the connection is successful, you should start seeing the RudderStack Actions.\n\n## RudderStack Actions overview\n\nOnce configured, RudderStack Actions will start sending the query results to RudderStack.\n\nWhen defining the columns for the Looker models attached to the user looks that you want to send to RudderStack, it’s important to tag the user identifier column as `email` or `user_id` or `rudder_anonymous_id`. Additionally, to use the **RudderStack Group** action, you need to tag your group identifier column as `rudder_group_id`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In some specific cases, for example, Redis - the `user_id` must be present even if `email` is already present.\n\nLooker sends the other columns related to the user and their activities as traits or properties along with the event payload.\n\nA sample `track` payload sent by the **RudderStack Track** action:\n\n```\n{\n  \"userId\": \"test@rcomp.es\",\n  \"anonymousId\": null,\n  \"properties\": {\n    \"tracks_flow.event_2\": \"Destination_Clicked\",\n    \"tracks_flow.event_3\": [\n\n    ],\n    \"tracks_flow.event_4\": [\n\n    ],\n    \"tracks_flow.event_5\": [\n\n    ],\n    \"tracks_flow.event\": \"User_Logged_In\"\n  },\n  \"event\": \"single\",\n  \"context\": {\n    \"library\": {\n      \"name\": \"analytics-node\",\n      \"version\": \"0.0.3\"\n    },\n    \"app\": {\n      \"name\": \"looker/actions\",\n      \"version\": \"dev\"\n    }\n  },\n  \"timestamp\": \"2020-06-18T08:21:01.644Z\",\n  \"type\": \"track\",\n  \"_metadata\": {\n    \"nodeVersion\": \"12.13.0\"\n  },\n  \"originalTimestamp\": \"2020-06-18T08:21:03.049Z\",\n  \"messageId\": \"node-c33eb51666f6470bf4aa415c7431aba4-ffd5e198-05a1-477a-9c2c-85be30749b8b\",\n  \"sentAt\": \"2020-06-18T08:21:03.050Z\"\n}\n```\n\nNote that the column names in your looks are transformed as `view name.column name` in the payload sent to RudderStack. If you want to change the names as per your destination, you can do so using the [Transformations](https://www.rudderstack.com/docs/transformations/overview/) feature.\n\n## FAQ\n\n#### I get an error while connecting to the RudderStack Action Hub. What should I do?\n\nWhile connecting to the RudderStack Action Hub, you may sometimes get the following error:\n\n[![RudderStack Action Hub error](https://www.rudderstack.com/docs/images/event-stream-sources/looker-source-error-1.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/looker-source-error-1.webp)\n\nTo resolve this issue, click **Configure Authorization**.\n\n[![RudderStack Action Hub error](https://www.rudderstack.com/docs/images/event-stream-sources/looker-source-error-2.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/looker-source-error-2.webp)\n\nThen, enter the [region-specific authorization token](#add-rudderstack-action-hub-server) and click **Update Token**.\n\n[![RudderStack Action Hub error](https://www.rudderstack.com/docs/images/event-stream-sources/looker-source-error-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/looker-source-error-3.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Looker | RudderStack Docs",
    "description": "Ingest your event data from Looker into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/mailmodo/",
    "markdown": "# Mailmodo source | RudderStack Docs\n\nIngest your event data from Mailmodo into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[Mailmodo](https://www.mailmodo.com/) is an interactive email marketing tool. It provides several features such as transactional campaigns, email automation and drip emails with customer journeys, WYSIWYG email editor, and many other tool integrations.\n\nThis guide will help you set up Mailmodo as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Mailmodo source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Mailmodo**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Mailmodo source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![Mailmodo source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/Mailmodo-2.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/Mailmodo-2.webp)\n\n4.  Log into your [Mailmodo account](https://manage.mailmodo.com/auth/login) and enter the **Webhook URL** based on the required format. Mailmodo can send data to a webhook in any of the following ways:\n\n*   By setting it up as an action in the user journey. Follow the detailed steps from [Mailmodo documentation](https://support.mailmodo.com/support/solutions/articles/84000388667-send-webhook-as-an-action-in-a-journey):\n\n[![Mailmodo source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/webhook_url_1.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/webhook_url_1.webp)\n\n*   By adding Mailmodo’s webhook integration from the template builder and use it to export data. Follow the detailed steps from [Mailmodo documentation](https://support.mailmodo.com/support/solutions/articles/84000351525-exporting-mailmodo-template-submissions-to-your-software-stack-using-webhook):\n\n[![Mailmodo source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/webhook_url_2.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/webhook_url_2.webp)\n\n## Event transformation\n\nRudderStack ingests the Mailmodo events after converting them into the RudderStack event format. It also maps the following properties from the Mailmodo event payload to the RudderStack properties:\n\n| Mailmodo property | RudderStack property | Notes |\n| --- | --- | --- |\n| `mailmodoUserId` | `context.externalId[0].type` | Only when [the webhook is set up as an action in the user journey](https://support.mailmodo.com/support/solutions/articles/84000388667-send-webhook-as-an-action-in-a-journey). |\n| `triggerData.userId` | `context.externalId[0].value` | Only when [the webhook is set up as an action in the user journey](https://support.mailmodo.com/support/solutions/articles/84000388667-send-webhook-as-an-action-in-a-journey). |\n| SHA-256 hash of `triggerData.email`/`recipientData.email`/`recipientEmail` | `anonymousId` | \\-  |\n| `triggerData.email`/`recipientData.email`/`recipientEmail` | `context.traits.email` | \\-  |\n| `triggerData.triggerSource` | `event` | If `triggerData.triggerSource` is not present, the event name is sent as **Form Submitted**. |\n| `recipientData` | `context.traits` | \\-  |\n| `recordedAt.ts` | `originalTimestamp` | \\-  |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Barring `recipientData`, `recordedAt`, `email`, and `userId`, RudderStack assigns the rest of the payload fields to `properties` after flattening them.\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from Mailmodo source for different formats and creates the resulting payload.\n\n*   If you choose to send webhook as an action in the journey, a sample payload sent by Mailmodo is shown below:\n\n```\n{\n  \"triggerData\": {\n    \"data\": {},\n    \"eventProperty\": {\n      \"Name\": \"APPLE iPhone 13 (Blue, 128 GB)\",\n      \"Category\": \"Mobiles\",\n      \"Is Purchased\": \"false\",\n      \"Price\": \"829\",\n      \"Currency\": \"USD\"\n    },\n    \"triggerSource\": \"New Custom Event Trigger - Product Viewed\",\n    \"email\": \"alex@example.com\",\n    \"userId\": \"d3775892-****-4f2f-b9d5-e49810eb2cae\",\n    \"journeyId\": \"3f135bf7-****-4e31-b265-f61cfe1bd423\"\n  }\n}\n```\n\nRudderStack transforms the above payload into the following payload:\n\n```\n{\n  \"anonymousId\": \"26c9ad4b531287858155ffa834be13dddc2c45df6e29af7230408953d732dd92\",\n  \"context\": {\n    \"externalId\": [{\n      \"id\": \"d3775892-****-4f2f-b9d5-e49810eb2cae\",\n      \"type\": \"mailmodoUserId\"\n    }],\n    \"traits\": {\n      \"email\": \"alex@example.com\"\n    },\n    \"integration\": {\n      \"name\": \"Mailmodo\",\n      \"version\": \"1.0.0\"\n    },\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    }\n  },\n  \"event\": \"New Custom Event Trigger - Product Viewed\",\n  \"integrations\": {\n    \"Mailmodo\": false\n  },\n  \"properties\": {\n    \"triggerData.eventProperty.Category\": \"Mobiles\",\n    \"triggerData.eventProperty.Currency\": \"USD\",\n    \"triggerData.eventProperty.Is Purchased\": \"false\",\n    \"triggerData.eventProperty.Name\": \"APPLE iPhone 13 (Blue, 128 GB)\",\n    \"triggerData.eventProperty.Price\": \"829\",\n    \"triggerData.journeyId\": \"3f135bf7-****-4e31-b265-f61cfe1bd423\",\n    \"triggerData.triggerSource\": \"New Custom Event Trigger - Product Viewed\"\n  },\n  \"type\": \"track\"\n}\n```\n\n*   If you choose to export the Mailmodo template submissions to your software stack using a webhook, a sample payload sent by Mailmodo is shown below:\n\n```\n{\n  \"fuuid\": \"27905\",\n  \"next-step-id\": \"success\",\n  \"total-steps\": \"3\",\n  \"responseId\": \"b9a5d224-cc5a-4e64-9800-5a3db9515fdf\",\n  \"recipientEmail\": \"alex@example.com\",\n  \"formId\": \"formosztd5\",\n  \"recordedAt\": {\n    \"ts\": 1662695704,\n    \"date\": \"2022-09-09\",\n    \"hour\": 9,\n    \"minute\": 25\n  },\n  \"submissionSource\": \"amp\",\n  \"elementjbtz42\": \"Everything \",\n  \"element8jzo13\": [\"Reliable\", \"High Quality\", \"Useful\"],\n  \"recipientData\": {\n    \"email\": \"alex@example.com\"\n  },\n  \"recommend\": \"9\",\n  \"liking\": \"upvote\",\n  \"satisfaction\": \"4\",\n  \"campaignId\": \"0b53e1bf-84ae-4198-9184-8a4d6e1fa3dd\",\n  \"campaignName\": \"Campaign-testing\"\n}\n```\n\nRudderStack transforms the above payload into the following payload:\n\n```\n{\n  \"anonymousId\": \"cd5dbd2727742c2957771e61eef4e296f3fb263294e184fcb8af98b7ccd372c7\",\n  \"context\": {\n    \"integration\": {\n      \"name\": \"Mailmodo\",\n      \"version\": \"1.0.0\"\n    },\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"traits\": {\n      \"email\": \"alex@example.com\",\n      \"recipientData\": {\n        \"email\": \"alex@example.com\"\n      }\n    }\n  },\n  \"event\": \"Form Submitted\",\n  \"integrations\": {\n    \"Mailmodo\": false\n  },\n  \"originalTimestamp\": \"2022-09-09T03:55:04.000Z\",\n  \"properties\": {\n    \"campaignId\": \"0b53e1bf-84ae-4198-9184-8a4d6e1fa3dd\",\n    \"campaignName\": \"Campaign-testing\",\n    \"element8jzo13[0]\": \"Reliable\",\n    \"element8jzo13[1]\": \"High Quality\",\n    \"element8jzo13[2]\": \"Useful\",\n    \"elementjbtz42\": \"Everything \",\n    \"formId\": \"formosztd5\",\n    \"fuuid\": \"27905\",\n    \"liking\": \"upvote\",\n    \"next-step-id\": \"success\",\n    \"recommend\": \"9\",\n    \"responseId\": \"b9a5d224-cc5a-4e64-9800-5a3db9515fdf\",\n    \"satisfaction\": \"4\",\n    \"submissionSource\": \"amp\",\n    \"total-steps\": \"3\"\n  },\n  \"type\": \"track\"\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Mailmodo source | RudderStack Docs",
    "description": "Ingest your event data from Mailmodo into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/mailjet/",
    "markdown": "# Mailjet source | RudderStack Docs\n\nIngest your event data from Mailjet into RudderStack.\n\n* * *\n\n*     2 minute read  \n    \n\n[Mailjet](https://www.mailjet.com/) is a popular email marketing and delivery platform. It lets you create and send impactful email marketing campaigns, newsletters, and automated emails to grow your business.\n\nThis guide will help you set up Mailjet as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Mailjet source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Mailjet**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Mailjet source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![Mailjet source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/mailjet-src-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/mailjet-src-settings.webp)\n\n4.  Log into your [Mailjet account](https://app.mailjet.com/).\n5.  Click your profile and select **Account Settings**. Under the **Rest API** section, click **Event notifications (webhooks)**. You can either select all events or the specific ones and add the webhook URL:\n\n[![Mailjet source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/mailjet-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/mailjet-webhook.webp)\n\n## Event transformation\n\nRudderStack ingests all events mentioned in the [Mailjet documentation](https://dev.mailjet.com/email/guides/webhooks/#event-types). The event name is mapped on the basis of the `event` property which is present in each event.\n\nRudderStack ingests the Mailjet events after converting them into the RudderStack event format. It also maps the following properties from the Mailjet event payload to the RudderStack properties:\n\n| Mailjet property | RudderStack property |\n| --- | --- |\n| `event` | `event` |\n| `mj_contact_id` | `context.externalId[]` |\n| `messageId` | `properties.mailJetMessageId` |\n| `email` | `context.traits.email` |\n| `url` | `properties.url`  <br>`context.page.url` |\n| `ip` | `properties.ip`  <br>`context.ip` |\n| `customId`  <br>SHA-256 hash of `email` | `userID` |\n| `customcampaign` | `properties.customcampaign` |\n| `mj_campaign_id` | `cproperties.mj_campaign_id` |\n| `Payload` | `properties.Payload` |\n| `agent` | `context.userAgent` |\n| `source` | `context.campaign.source` |\n| `mj_list_id` | `context.externalId[]` |\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from Mailjet source and creates the resulting payload.\n\nA sample payload sent by Mailjet is shown below:\n\n```\n{\n  \"event\": \"open\",\n  \"time\": 1664443614,\n  \"MessageID\": 94857068804950690,\n  \"Message_GUID\": \"54d6cdec-f659-4547-8926-13d9c4126b82\",\n  \"email\": \"alex@example.com\",\n  \"mj_campaign_id\": 108760,\n  \"mj_contact_id\": 399962859,\n  \"customcampaign\": \"mj.nl=58424\",\n  \"ip\": \"66.249.84.231\",\n  \"geo\": \"US\",\n  \"agent\": \"Mozilla/5.0 (Windows NT 5.1; rv:11.0) Gecko Firefox/11.0 (via ggpht.com GoogleImageProxy)\",\n  \"CustomID\": \"\",\n  \"Payload\": \"\"\n}\n```\n\nRudderStack transforms the above payload into the following [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) payload:\n\n```\n{\n  \"Message\": {\n    \"context\": {\n      \"library\": {\n        \"name\": \"unknown\",\n        \"version\": \"unknown\"\n      },\n      \"integration\": {\n        \"name\": \"MailJet\"\n      },\n      \"traits\": {\n        \"email\": \"alex@example.com\"\n      },\n      \"ip\": \"66.249.84.231\",\n      \"userAgent\": \"Mozilla/5.0 (Windows NT 5.1; rv:11.0) Gecko Firefox/11.0 (via ggpht.com GoogleImageProxy)\",\n      \"externalId\": [{\n        \"type\": \"mailjetContactId\",\n        \"id\": 399962859\n      }]\n    },\n    \"integrations\": {\n      \"MailJet\": false\n    },\n    \"type\": \"track\",\n    \"event\": \"open\",\n    \"properties\": {\n      \"ip\": \"66.249.84.231\",\n      \"customcampaign\": \"mj.nl=58424\",\n      \"mj_campaign_id\": 108760,\n      \"Payload\": \"\"\n    },\n    \"originalTimestamp\": \"2022-09-29T09:26:54.000Z\",\n    \"userId\": \"9c51bf2b379a4c773b1eaa9732405b86\"\n  }\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Mailjet source | RudderStack Docs",
    "description": "Ingest your event data from Mailjet into RudderStack.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-python-sdk/",
    "markdown": "# Python SDK | RudderStack Docs\n\nUse RudderStack’s Python SDK to send server-side events to various destinations.\n\n* * *\n\n*     9 minute read  \n    \n\nRudderStack’s Python SDK lets you track and send the events from your Python applications to the specified destinations.\n\nRefer to the SDK’s [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-python) for the implementation-specific details.\n\n[![Github Badge](https://img.shields.io/pypi/v/rudder-sdk-python?style=flat)](https://pypi.org/project/rudder-sdk-python/)\n\n## SDK setup requirements\n\n1.  Sign up to [RudderStack Cloud](https://app.rudderstack.com/signup).\n2.  [Set up a Python source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in your dashboard. You should be able to see a **write key** for this source.\n\nYou will also need a data plane URL. Refer to the [Dashboard Overview](https://www.rudderstack.com/docs/dashboard-guides/overview/#data-plane-url) guide for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard has the SDK installation snippet containing both the write key and the data plane URL. Use it to integrate the Python SDK into your application.\n\n## Installing the Python SDK\n\nTo install the RudderStack Python SDK using [**pip**](https://pip.pypa.io/en/stable/), run the following command:\n\n```\npip install rudder-sdk-python\n```\n\n## Initializing the SDK\n\nTo initialize the SDK, run the following code snippet:\n\n```\nimport rudderstack.analytics as rudder_analytics\n\nrudder_analytics.write_key = WRITE_KEY\nrudder_analytics.dataPlaneUrl = DATA_PLANE_URL\n```\n\n### Initialization options\n\n| Parameter | Description | Default value |\n| --- | --- | --- |\n| `on_error` | Callback for exception thrown while uploading the messages. | `None` |\n| `debug` | The SDK prints the logs if set to `True`. | `False` |\n| `send` | The SDK does not send the data to the RudderStack backend if set to `False`. | `True` |\n| `sync_mode` | The SDK sends the data immediately instead of queueing it, if set to `True`. | `False` |\n| `max_queue_size` | Maximum queue size the SDK uses to enqueue the events. | `10000` |\n| `gzip` | The SDK disables gzipping the event data if set to `False`. | `True` |\n| `timeout` | The timeout for sending POST requests to the RudderStack backend. | `15` |\n| `max_retries` | Maximum number of retry requests the SDK makes to the RudderStack backend. | `10` |\n| `upload_interval` | Maximum duration between two upload (flush) activities. | `0.5s` |\n| `upload_size` | Number of events in the queue that triggers a flush. | `100` |\n\n## Sending events\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not store or persist the user state in any of the server-side SDKs**.\n> \n> Unlike the client-side SDKs that deal with only a single user at a given time, the server-side SDKs deal with multiple users simultaneously. Therefore, you must specify either the `user_id` or `anonymous_id` **every time** while making any API calls supported by the Python SDK.\n\n### Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` call made using the Python SDK is shown below:\n\n```\nrudder_analytics.identify('1hKOmRA4GRlm', {\n    'email': 'alex@example.com',\n    'name': 'John Doe',\n    'friends': 16\n})\n```\n\nThe `identify` method parameters are as shown:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `traits`  <br>Required | Object | An optional dictionary of the user’s traits like `name` or `email`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n| `message_id` | String | A unique identifier for the event. The SDK generates this field automatically. It is **highly recommended** to not send this field unless there is a specific requirement or use case. |\n\n### Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the user actions along with their associated properties. Each user action is called an **event**.\n\nA sample `track` call is shown below:\n\n```\nrudder_analytics.track('123456', 'Article Read', {\n    'title': 'The Independence',\n    'subtitle': 'Story of the Weak',\n    'author': 'John Doe'\n})\n```\n\nThe `track` method parameters are as shown:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `event`  <br>Required | String | Name of the event. |\n| `properties`  <br>Required | Object | An optional dictionary of the properties associated with the event. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n| `message_id` | String | A unique identifier for the event. The SDK generates this field automatically. It is **highly recommended** to not send this field unless there is a specific requirement or use case. |\n\n### Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record the page views on your application along with the other relevant information about the page.\n\nA sample `page` call is as shown:\n\n```\nrudder_analytics.page('userid', 'Documentation', 'Sample Doc', {\n    'url': 'http://rudderstack.com'\n})\n```\n\nThe `page` method parameters are as shown:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed page. |\n| `category`  <br>Required | String | Category of the viewed page. |\n| `properties`  <br>Required | Object | An optional dictionary of the properties associated with the event. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n| `message_id` | String | A unique identifier for the event. The SDK generates this field automatically. It is **highly recommended** to not send this field unless there is a specific requirement or use case. |\n\n### Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It lets you record the screen views on your mobile app along with other relevant information about the screen.\n\nA sample `screen` call is as shown:\n\n```\nrudder_analytics.screen('userid', 'Settings', 'Brightness', {\n    'from': 'Settings Screen'\n})\n```\n\nThe `screen` method parameters are as shown:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed screen. |\n| `category`  <br>Required | String | Category of the viewed screen. |\n| `properties`  <br>Required | Object | An optional dictionary of the properties associated with the event. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n| `message_id` | String | A unique identifier for the event. The SDK generates this field automatically. It is **highly recommended** to not send this field unless there is a specific requirement or use case. |\n\n### Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group.\n\nA sample `group` call made using the Python SDK is shown below:\n\n```\nrudder_analytics.group('1hKOmRA4GRlm', '12', {\n    'name': 'Company',\n    'domain': 'IT'\n})\n```\n\nThe `group` method parameters are as shown:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `group_id`  <br>Required | String | Unique identifier of the group in your database. |\n| `traits` | Object | An optional dictionary of the group’s traits like `name` or `email`. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n| `message_id` | String | A unique identifier for the event. The SDK generates this field automatically. It is **highly recommended** to not send this field unless there is a specific requirement or use case. |\n\n### Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly. You can use `alias` for managing the user’s identity in some of the downstream destinations.\n\nA sample `alias` call is as shown:\n\n```\nrudder_analytics.alias('previous_id', 'user_id')\n```\n\nThe `alias` method parameters are as shown:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `previous_id`  <br>Required | String | The previous unique identifier of the user. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n| `message_id` | String | A unique identifier for the event. The SDK generates this field automatically. It is **highly recommended** to not send this field unless there is a specific requirement or use case. |\n\n## Gzipping requests\n\nThe Python SDK automatically gzips requests. However, you can disable this feature by setting the `gzip` parameter to `false` while initializing the SDK:\n\n```\nimport rudderstack.analytics as rudder_analytics\n\nrudder_analytics.write_key = WRITE_KEY\nrudder_analytics.dataPlaneUrl = DATA_PLANE_URL\nrudder_analytics.gzip = False\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Gzip requires [rudder-server](https://github.com/rudderlabs/rudder-server) v1.4 or higher. Otherwise, your events might fail.\n\n## Flushing events\n\nThe Python SDK batches the events and flushes them in the background, for faster and more efficient operation. By default, the SDK flushes a batch of 100 events every 0.5 seconds since the last flush.\n\nYou can control the event flushing by tweaking the following parameters:\n\n| Parameter | Description | Default value |\n| --- | --- | --- |\n| `max_queue_size` | Maximum queue size the SDK uses to enqueue the events. | `10000` |\n| `upload_interval` | Maximum duration between two upload (flush) activities. | `0.5s` |\n\nYou can also flush the events explicitly by using the SDK’s `flush()` method to make sure no events are left in the queue.\n\nA sample flush call is shown below:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The SDK blocks the calling thread until all messages are flushed from the queue. Hence, avoid using it as a part of your request lifecycle.\n\n## Error handling\n\nTo handle errors that may occur when sending the events via the Python SDK, you can declare a callback called `on_error`.\n\n```\ndef on_error(error, events):\n    print(\"Error response:\", error)\n\nrudder_analytics.on_error = on_error\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This callback only returns the errors that occur with the HTTP requests to the gateway. It will not return any errors that occur while sending data to your downstream destinations.\n\nSome of the common request responses are listed in the following table:\n\n| Status | Code |\n| --- | --- |\n| OK  | 200 |\n| Request has neither `anonymousId` nor `userId` | 400 |\n| Invalid write key | 401 |\n| Invalid JSON | 400 |\n\n## FAQ\n\n#### How does the Python SDK handle events larger than 32KB?\n\nThe Python SDK drops any events greater than 32KB.\n\n#### Does the Python SDK support event ordering?\n\nThe Python SDK does not support event ordering by default.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Python SDK | RudderStack Docs",
    "description": "Use RudderStack’s Python SDK to send server-side events to various destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/quickstart/",
    "markdown": "# JavaScript SDK Quickstart | RudderStack Docs\n\nInstall and use the RudderStack JavaScript SDK on your website.\n\n* * *\n\n*     4 minute read  \n    \n\nThis guide lists the steps to quickly install the JavaScript SDK on your website and start tracking user activity in no time.\n\n## Prerequisites\n\nTo set up and use the RudderStack JavaScript SDK, the following prerequisites must be met:\n\n*   Sign up for [RudderStack Cloud](https://app.rudderstack.com/signup).\n*   [Set up a JavaScript source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the RudderStack dashboard.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Except for the [installation steps](#step-1-install-javascript-sdk), all the code snippets in this guide assume that the SDK is installed using CDN.\n\n## Step 1: Install JavaScript SDK\n\nYou can install the JavaScript SDK on your website via [CDN](#using-cdn) or using [NPM](#using-npm).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you are migrating from an older version of the SDK, note that there is no [`page`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#page) call embedded in the loading scripts listed below.\n> \n> See [Breaking Changes](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/breaking-changes/) for more information.\n\n### Using CDN\n\nTo integrate the SDK with your website and load it **asynchronously**:\n\n1.  Go to the **Setup** tab of your JavaScript source in the [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Click the **Minified** or **Original** tab followed by **Copy snippet** and paste the script in your website’s `<head>` section.\n\n[![JavaScript SDK snippet](https://www.rudderstack.com/docs/images/get-started/quickstart/js-sdk-snippet.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/js-sdk-snippet.webp)\n\nThe SDK installation snippet (seen above) contains both the [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) and [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) by default.\n\nSee [Installation](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/installation/) for more information on the advanced loading methods.\n\n### Using NPM\n\nWhile it is recommended to install the JavaScript SDK on your website via [CDN](#using-cdn), you can also use the [NPM module](https://www.npmjs.com/package/@rudderstack/analytics-js) for packaging RudderStack directly into your project.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Use this NPM module only for browser applications. To integrate RudderStack with your Node.js apps, see the [Node.js SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/) documentation.\n\nTo install the JavaScript SDK via NPM, run the following command:\n\n```\nnpm install @rudderstack/analytics-js --save\n```\n\nRun the following code snippet **once** and utilize the exported object consistently across your entire project:\n\n*   **For ECMAScript modules (ESM)**:\n\n```\nimport { RudderAnalytics } from '@rudderstack/analytics-js';\n\nconst rudderAnalytics = new RudderAnalytics();\nrudderAnalytics.load(WRITE_KEY, DATA_PLANE_URL, {});\n  \nexport { rudderAnalytics };\n```\n\n*   **For CJS using the `require` method**:\n\n```\nvar RudderAnalytics = require(\"@rudderstack/analytics-js\");\n\nconst rudderAnalytics = new RudderAnalytics();\nrudderAnalytics.load(WRITE_KEY, DATA_PLANE_URL, {});\n\nexports.rudderAnalytics = rudderAnalytics;\n```\n\n### Sample apps\n\nSee the [RudderStack JavaScript SDK repository](https://github.com/rudderlabs/rudder-sdk-js/tree/develop/examples) for sample applications highlighting the different installation methods.\n\n## Step 2: Check ready state\n\nThe JavaScript SDK provides the [`ready`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/installation/#installation-workflow) API with a callback that triggers when the SDK is done initializing itself and the other third-party destination SDKs.\n\n```\nrudderanalytics.ready(() => {\n    console.log(\"The JavaScript SDK is ready.\");\n});\n```\n\n## Step 3: Track current page\n\nYou can make a [`page`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#page) call to track the current web page and pass any additional information:\n\n```\nrudderanalytics.page(\n  \"Cart\",\n  \"Cart Viewed\", {\n    path: \"/best-seller/1\",\n    referrer: \"https://www.google.com/search?q=estore+bestseller\",\n    search: \"estore bestseller\",\n    title: \"The best sellers offered by EStore\",\n    url: \"https://www.estore.com/best-seller/1\"\n  },\n  () => {\n    console.log(\"Page event successfully submitted to the RudderStack SDK.\");\n  }\n);\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that the above example highlights how to override and set custom values for `path`, `referrer`, `search`, `title`, and `url`. In reality, the SDK automatically captures these fields.\n\n### Single page applications\n\nIn the case of single-page applications (SPA) where a route change does not reload the page, you need to make the `page` call explicitly after the route change on the frontend.\n\nSee [RudderStack-Next.js Integration](https://www.rudderstack.com/docs/user-guides/how-to-guides/rudderstack-jamstack-integration/v3/nextjs/) guide for more information.\n\n## Step 4: Identify users\n\nThe [`identify`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#identify) method lets you identify a user and associate them with their actions. It also enables you to record any traits about them like their name, email, etc.\n\n```\nrudderanalytics.identify(\n  \"1hKOmRA4el9Zt1WSfVJIVo4GRlm\", {\n    firstName: \"Alex\",\n    lastName: \"Keener\",\n    email: \"alex@example.com\",\n    phone: \"+1-202-555-0146\"\n  },\n  () => {\n    console.log(\"Identify event successfully submitted to the RudderStack SDK.\");\n  }\n);\n```\n\nThe JavaScript SDK captures the user ID, first name, last name, email, and phone number from the above snippet.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The anonymous visitors are automatically assigned an `anonymousId`. See the [Anonymous ID](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#anonymous-id) section for more information.\n\n## Step 5: Track user actions\n\nThe [`track`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#track) method lets you capture user events along with the associated properties.\n\n```\nrudderanalytics.track(\n  \"Order Completed\", {\n    revenue: 77.6,\n    currency: \"USD\",\n  },\n  () => {\n    console.log(\"Track event successfully submitted to the RudderStack SDK.\");\n  }\n);\n```\n\nThe JavaScript SDK captures the `Order Completed` event along with `revenue`and `currency`from the above snippet.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> You can use the `track` method to track various success metrics for your website like user signups, item purchases, article bookmarks, and more.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "JavaScript SDK Quickstart | RudderStack Docs",
    "description": "Install and use the RudderStack JavaScript SDK on your website.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ruby-sdk/",
    "markdown": "# Ruby SDK | RudderStack Docs\n\nUse RudderStack’s Ruby SDK to send server-side events to various destinations.\n\n* * *\n\n*     8 minute read  \n    \n\nRudderStack’s Ruby SDK lets you track and send the events from your Ruby applications asynchronously to the specified destinations. You can use the SDK to improve the performance of your application by reducing the time taken to send the data.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To send the data from the Ruby SDK synchronously, refer to this [documentation](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ruby-sdk-sync/). **Note that the synchronous SDK version will be deprecated soon**.\n\nRefer to the SDK’s [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-ruby) for the implementation-specific details.\n\n[![Github Badge](https://img.shields.io/gem/v/rudder-sdk-ruby?style=flat)](https://rubygems.org/gems/rudder-sdk-ruby)\n\n## SDK setup requirements\n\n1.  Sign up to [RudderStack Cloud](https://app.rudderstack.com/signup).\n2.  [Set up a Ruby source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in your dashboard. You should be able to see a **write key** for this source.\n\nYou will also need a data plane URL. Refer to the [Dashboard Overview](https://www.rudderstack.com/docs/dashboard-guides/overview/#data-plane-url) guide for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard has the SDK installation snippet containing both the write key and the data plane URL. Copy it to integrate the Ruby SDK into your application.\n\n## Installing the Ruby SDK\n\nTo install the RudderStack Ruby SDK:\n\n1.  Add the following line to your application’s Gem file:\n\n2.  Run `bundle install` to install the gem.\n\n## Initializing the SDK\n\nTo initialize the SDK, create a client instance as shown below:\n\n```\nrequire 'rudder-sdk-ruby'\n\nanalytics = Rudder::Analytics.new(\n  write_key: 'WRITE_KEY',\n  data_plane_url: 'DATA_PLANE_URL',\n  gzip: true\n)\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure to replace the `WRITE_KEY` and `DATA_PLANE_URL` in the above snippet with the actual values from your RudderStack dashboard.\n\n## Gzipping requests\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The Gzip feature is enabled by default in the Ruby SDK.\n\nThe Ruby SDK automatically gzips requests. However, you can disable this feature by setting the `Gzip` parameter to `false` while initializing the SDK:\n\n```\nanalytics = Rudder::Analytics.new(\n  write_key: 'WRITE_KEY', # required\n  data_plane_url: 'DATA_PLANE_URL',\n  gzip: false, // Set to true to enable Gzip compression\n  on_error: proc { |error_code, error_body, exception, response|\n    # defaults to an empty proc\n  }\n)\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Gzip requires [rudder-server](https://github.com/rudderlabs/rudder-server) **v1.4 or higher**. Otherwise, your events might fail.\n\n## SDK initialization options\n\nThe RudderStack Ruby SDK provides the following initialization options:\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `write_key`  <br>Required | String | Source [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) . |\n| `data_plane_url`  <br>Required | String | Your [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) . |\n| `stub` | Boolean | Stubs the event requests.<br><br>**Default value**: `false` |\n| `gzip` | Boolean | Gzips the event requests.<br><br>**Default value**: `true` |\n| `max_queue_size` | Integer | Maximum queue size.<br><br>**Default value**: `10000`. |\n| `retries` | Integer | Maximum number of retry attempts to send an event.<br><br>**Default value**: `10` |\n| `ssl` | Boolean | Determines whether to use SSL for the socket connection.<br><br>**Default value**: `true`. |\n\n## Sending events\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not store or persist the user state in any of the server-side SDKs**.\n> \n> Unlike the client-side SDKs that deal with only a single user at a given time, the server-side SDKs deal with multiple users simultaneously. Therefore, you must specify either the `user_id` or `anonymous_id` **every time** while making any API calls supported by the Ruby SDK.\n\n### Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` call made using the Ruby SDK is shown below:\n\n```\nanalytics.identify(\n  user_id: '1hKOmRA4GRlm',\n  traits: {\n    email: \"alex@example.com\",\n    createdAt: \"2023-07-24T00:00:00Z\",\n    subscribe: true\n  },\n  context: { ip: '10.81.20.10' }\n)\n```\n\nThe `identify` method parameters are as shown:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `traits` | Object | An optional dictionary of the user’s traits like `name` or `email`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the user actions along with their associated properties. Each user action is called an **event**.\n\nA sample `track` call is shown below:\n\n```\nanalytics.track(\n  user_id: '1hKOmRA4GRlm',\n  event: 'Item Sold',\n  properties: {\n    revenue: 9.95,\n    shipping: 'Free'\n  }\n)\n```\n\nThe `track` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `event`  <br>Required | String | Name of the event. |\n| `properties` | Object | An optional dictionary of the properties associated with the event. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n\n### Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record the page views on your application along with the other relevant information about the page.\n\nA sample `page` call is as shown:\n\n```\nanalytics.page(\n  user_id: `1hKOmRA4GRlm`,\n  category: 'Food',\n  name: 'Pizza',\n  properties: {\n    URL: 'https://website.com'\n  }\n)\n```\n\nThe `page` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed page. |\n| `properties` | Object | An optional dictionary of the properties associated with the viewed page, like `url` or `referrer`. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It lets you record the screen views on your mobile app along with other relevant information about the screen.\n\nA sample `screen` call is as shown:\n\n```\nanalytics.screen(\n  user_id: `1hKOmRA4GRlm`,\n  category: 'Food',\n  name: 'Pizza',\n  properties: {\n    URL: 'https://website.com'\n  }\n)\n```\n\nThe `screen` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed screen. |\n| `properties` | Object | An optional dictionary of the properties associated with the viewed screen, like `url` or `referrer`. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group.\n\nA sample `group` call made using the Ruby SDK is shown below:\n\n```\nanalytics.group(\n  user_id: '1hKOmRA4GRlm',\n  group_id: '12',\n  traits: {\n    name: 'Company',\n    description: 'Software'\n  }\n)\n```\n\nThe `group` method parameters are as follows:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `group_id`  <br>Required | String | Unique identifier of the group in your database. |\n| `traits` | Object | An optional dictionary of the group’s traits like `name`or `email`. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly. You can use `alias` for managing the user’s identity in some of the downstream destinations.\n\nA sample `alias` call is as shown:\n\n```\nanalytics.alias(\n  previous_id: '1hKOmRA4GRlm',\n  user_id: '12345'\n)\n```\n\nThe `alias` method parameters are as mentioned below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `previous_id`  <br>Required | String | The previous unique identifier of the user. |\n| `traits` | Object | An optional dictionary of the user’s traits like `name` or `email`. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n## FAQ\n\n#### How does the Ruby SDK handle events larger than 32KB?\n\nThe Ruby SDK drops any events greater than 32KB.\n\n#### Does the Ruby SDK support event ordering?\n\nThe Ruby SDK does not support event ordering by default.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Ruby SDK | RudderStack Docs",
    "description": "Use RudderStack’s Ruby SDK to send server-side events to various destinations.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/",
    "markdown": "# Features | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
    "title": "Features | RudderStack Docs",
    "description": "Explore the Reverse ETL features and capabilities.",
    "languageCode": "en"
  },
  {
    "url": "https://www.rudderstack.com/docs/data-pipelines/reverse-etl/quickstart/",
    "markdown": "# Reverse ETL Quickstart Guide | RudderStack Docs\n\nSet up a Reverse ETL pipeline and sync your warehouse data to downstream destinations in no time.\n\n* * *\n\n*     5 minute read  \n    \n\nThe easiest way to set up a Reverse ETL pipeline is to configure your warehouse source, connect it to a downstream destination, and specify the data mappings and sync settings.\n\nFor most use cases, you can set up and activate your Reverse ETL pipeline by following these steps:\n\n1.  [Add a source](#step-1-add-source)\n2.  [Add destination](#step-2-connect-destination)\n3.  [Define mappings](#step-3-create-mappings)\n4.  [Schedule syncs](#step-4-schedule-syncs)\n5.  [Activate connection](#step-5-activate-connection)\n\n## Step 1: Add source\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack lets you set up a Reverse ETL source from a warehouse table, [Model](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/models/), or [Audience](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/).\n\n1.  Sign in to your [RudderStack dashboard](https://app.rudderstack.com/) and click **\\+ Add source** in the default **Connections** view.\n\n[![Add source](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)\n\n2.  Under **Sources**, click **Reverse ETL** and select your warehouse source.\n\n[![Select source](https://www.rudderstack.com/docs/images/data-pipelines/select-source.webp)](https://www.rudderstack.com/docs/images/data-pipelines/select-source.webp)\n\n3.  Configure your source. See the [source-specific documentation](https://www.rudderstack.com/docs/sources/reverse-etl/#supported-reverse-etl-sources) for configuration details.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack requires some warehouse-specific permissions to sync data from it. These permissions are listed in the source documentation, for example, see [BigQuery permissions](https://www.rudderstack.com/docs/sources/reverse-etl/google-bigquery/#granting-permissions).\n> \n> Make sure to grant these permissions **before** you set up the source.\n\n## Step 2: Connect destination\n\nOnce you have set up the Reverse ETL source, the next step is to connect it to a downstream destination.\n\nYou can connect the Reverse ETL source to an existing or new [destination](https://www.rudderstack.com/docs/destinations/overview/) to start using it. To connect to a destination later, click **Done** on the top right.\n\n[![Next steps](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)\n\nYou will then be redirected to the **Overview** page of the source where you get the option of connecting it to an existing or new destination.\n\n[![Add destination](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)\n\nSee Set up Reverse ETL Connections section for more information.\n\n## Step 3: Create mappings\n\nRudderStack provides two options to map your warehouse columns to specific destination fields before syncing your data:\n\n*   [Map with Visualizer](https://www.rudderstack.com/docs/sources/reverse-etl/visual-data-mapper/)\n*   [Map with JSON](https://www.rudderstack.com/docs/sources/reverse-etl/json-data-mapping/)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack supports the **Map with Visualizer** option only for [selected destinations](https://www.rudderstack.com/docs/sources/reverse-etl/visual-data-mapper/#supported-destinations).\n> \n> Other destinations that do not support Visual Data Mapper have the **Map with JSON** option by default, with the **Map with Visualizer** option greyed out.\n\nThe steps to set the data mappings (using JSON) are listed below:\n\n1.  Select the **Sync mode** to specify how RudderStack syncs each record to the destination. RudderStack supports two [sync modes](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/):\n\n| Sync mode | Description |\n| --- | --- |\n| Upsert | In this mode, RudderStack inserts new records and updates the existing records in the destination while syncing the data. |\n| Mirror | In this mode, RudderStack ‘mirrors’ the source by keeping the destination data the same as the source data. It performs insertion, deletion, and updates to the records while syncing the data.<br><br>Note that:<br><br>*   Only [select destinations](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/#mirror-mode) support this mode.<br>*   RudderStack does not support `track` event type for this mode. |\n\n2.  Select the **Event Type** - RudderStack supports sending the synced data to your downstream destinations as `identify` or `track` events.\n\nIf you select `track` as the **Event Type**, you also need to set the event name that is sent to the downstream destination. This is because every `track` event requires a name. You can also set the column name as the event name by turning on the **Lookup event name by column** toggle and selecting the column from the dropdown:\n\n[![Schema tab options in RudderStack](https://www.rudderstack.com/docs/images/warehouse-actions-sources/event-name-table-track.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/event-name-table-track.webp)\n\n3.  Set at least one user identifier from `user_id` or `anonymous_id` in the **Choose user identifier** setting.\n\n[![Map with JSON feature](https://www.rudderstack.com/docs/images/data-pipelines/map-with-json-new.webp)](https://www.rudderstack.com/docs/images/data-pipelines/map-with-json-new.webp)\n\n4.  Preview the resulting data and make the necessary changes before proceeding.\n\n## Step 4: Schedule syncs\n\nRudderStack determines how and when to run a sync based on the [sync schedule](https://www.rudderstack.com/docs/sources/reverse-etl/sync-schedule-settings/) you set for your Reverse ETL connection.\n\n| Schedule type | Description |\n| --- | --- |\n| Basic | Run syncs at a given time interval and specified time (in UTC). |\n| CRON | Run syncs based on a specified CRON expression (in UTC). |\n| Manual | Run syncs manually. |\n\n## Step 5: Activate connection\n\nOnce your source and destination are set up, activate the connection by clicking **Turn on the connection**.\n\n[![Turn on Reverse ETL connection](https://www.rudderstack.com/docs/images/data-pipelines/turn-on-connection.webp)](https://www.rudderstack.com/docs/images/data-pipelines/turn-on-connection.webp)\n\nOnce you activate the connection, RudderStack automatically triggers the syncs as per the [sync schedule](#step-4-schedule-syncs).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> When you sync data from the source for the first time, RudderStack performs a full sync by default, irrespective of the sync mode you specified while [setting the mappings](#step-3-create-mappings). It then incrementally syncs any new data since the last sync.\n\n### Trigger syncs\n\nGo to the **Syncs** tab of your Reverse ETL source and click the **Sync Now** button to trigger a new sync. To force a full data sync, choose the **Force Full Resync** option.\n\n[![Trigger new syncs](https://www.rudderstack.com/docs/images/data-pipelines/trigger-sync.webp)](https://www.rudderstack.com/docs/images/data-pipelines/trigger-sync.webp)\n\nTo stop a running sync, click the **Stop Now** button.\n\n[![Stop syncs](https://www.rudderstack.com/docs/images/data-pipelines/stop-sync.webp)](https://www.rudderstack.com/docs/images/data-pipelines/stop-sync.webp)\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note the following before stopping a sync:\n> \n> *   Once you stop a sync, any data that RudderStack reads from the warehouse and is on the fly may not be stopped or dropped from being delivered to the destination. It will only stop reading and sending any new data from the warehouse to the destination and stop the sync from progressing.\n> *   For a very low number of deltas (new data since the last attempted sync), you may sometimes see a “0 deltas succeeded” after you stop the sync.\n> *   Once you cancel a sync, the behavior of the next sync depends on the type of the previously cancelled sync. For example, if a cancelled sync is an incremental sync, then the next sync will be incremental too. Similarly, if the cancelled is a full sync, then the next sync will be a full sync.\n\n### Update your mappings\n\nIn cases where your warehouse schema has changed, RudderStack lets you update the mappings to ensure the data is synced to the destination correctly.\n\nGo to the **Schema** tab of your connection page and click **Update** to update your mappings. Make sure to save the updated mappings.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot update the mappings while a sync is in progress.\n\n[![Update connection mappings](https://www.rudderstack.com/docs/images/data-pipelines/update-mappings.webp)](https://www.rudderstack.com/docs/images/data-pipelines/update-mappings.webp)\n\n## Sync data from SQL models\n\nRudderStack’s [Models](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/models/) feature lets you create models by defining custom SQL queries. You can then run these queries on your warehouse and send the resulting data to specific destinations.\n\nFollow these steps to set up a Reverse ETL pipeline using a model:\n\n1.  [Create a new model](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/models/#create-model)\n2.  [Connect the model to a destination](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/models/#connect-model-to-destination)\n3.  [Set up the data mappings](https://www.rudderstack.com/docs/sources/reverse-etl/json-data-mapping/)\n\n## Sync data from Audiences\n\nRudderStack’s [Audiences](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/) feature lets you create customer lists or a subset of users satisfying specific criteria with easy-to-use filters on your warehouse tables. Once created, you can connect and activate them in your downstream destinations.\n\nFollow these steps to set up a Reverse ETL pipeline using an audience:\n\n1.  [Set up a new audience](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/#create-audience)\n2.  [Connect the audience source to a destination](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/#connect-audience)\n3.  [Set up the data mappings](https://www.rudderstack.com/docs/sources/reverse-etl/json-data-mapping/)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
    "title": "Reverse ETL Quickstart Guide | RudderStack Docs",
    "description": "Set up a Reverse ETL pipeline and sync your warehouse data to downstream destinations in no time.",
    "languageCode": "en"
  }
]