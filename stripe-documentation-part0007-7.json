 Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Connection Token | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/fleet/locations",
  "markdown": "# Manage locations | Stripe DocumentationThe Stripe Docs logo\n\n## Group and manage your readers by physical location.\n\nYou can streamline the management of multiple readers across different physical sites by using locations and zones.\n\nLocations and zones help by associating each reader with specific operational sites and guarantee that the correct regional configurations are downloaded.\n\n*   **Locations**: Allows you to group readers, monitor their connectivity status, and modify your settings based on physical location. This functionality is beneficial for marketplaces with multiple connected accounts.\n    \n*   **Zones**: Offers an optional method to further categorize locations and readers. Zones enable you to represent broader groups of readers or locations, such as larger geographic regions (for example, countries) or organizational sub-brands. Multiple locations can belong to a single zone, and you can create a hierarchical structure by grouping multiple zones under a single zone.\n    \n\n#### Note\n\nZones provide an additional way to group locations. You must still assign readers to a location, and you can assign a location to only one zone.\n\n## Locations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create a location for each physical place where your readers operate. You can [register](https://docs.stripe.com/terminal/fleet/register-readers) multiple readers to each location, and nest these locations within zones. Before you can use a reader, you must register it to a location.\n\nThe required [address properties](https://docs.stripe.com/api/terminal/locations/create#create_terminal_location-address) for a location vary by country:\n\n| Countries | Required Address Properties |\n| --- | --- |\n| Australia<br><br>Canada<br><br>Italy<br><br>Spain<br><br>United States | `line1`, `city`, `state`, `postal_code`, and `country` |\n| Austria+<br><br>Belgium<br><br>Czech Republic+<br><br>Denmark<br><br>Finland+<br><br>France<br><br>Germany<br><br>Luxembourg+<br><br>Malaysia+<br><br>Netherlands<br><br>New Zealand+<br><br>Norway+<br><br>Portugal+<br><br>Sweden<br><br>Switzerland+<br><br>United Kingdom | `line1`, `city`, `postal_code`, and `country` |\n| Ireland<br><br>Singapore | `line1`, `postal_code`, and `country` |\n\n+Terminal is currently in beta in this country.\n\n\\*\\*Compatibility for this mobile SDK also applies when used with React Native.\n\n#### Common mistake\n\nYou can use the Dashboard or API to update a `Location` object. If you do so, avoid changing the country associated with an existing location. Instead of changing the country, create a new location in a different country, and then re-register any readers associated with the old location.\n\n## Zones ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nZones are the top-level groups that can consist of either more zones or locations. You can add more zones nested under an existing one, creating additional hierarchy levels, such as “West coast.” However, organizing your locations into zones is optional.\n\n## Create locations and zones ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFirst, you must [register your reader to a location](https://docs.stripe.com/terminal/fleet/register-readers?dashboard-or-api=dashboard) to accept payments. You can manage your locations and zones in the [Manage locations](https://dashboard.stripe.com/terminal/locations) page. To open this page from the Terminal reader page, click the **Manage locations** button on the Readers tab.\n\n### Create a location![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a location:\n\n1.  Click the overflow menu () on the **All locations** row, then click **Create location**.\n2.  Enter a name and a valid address. Providing an address ensures that the correct configuration and settings are applied based on the region where the reader(s) are operating.\n3.  Click **Done**.\n\nYou can also create a specific [configuration](https://docs.stripe.com/terminal/fleet/configurations-overview) for that location.\n\n### Create a zone![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a zone:\n\n1.  Click the overflow menu () on the **All locations** row, then click **Create zone**.\n2.  Enter a name.\n3.  Click **Done**.\n\n### Create a nested zone![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a nested zone:\n\n1.  Click the overflow menu () on the zone for which you want to create a nested zone, then click **Create zone**.\n2.  Enter a name.\n3.  Click **Done**.\n\n### Add or move a location to a zone ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo add or move a location to a zone:\n\n1.  Click the overflow menu () on the location, then click **Move location**.\n2.  Choose the zone or nested zone where you want to move the location.\n3.  Click **Done**.\n\n### Delete a location![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo delete a location, you must remove the reader(s) associate with it:\n\n1.  Remove all readers from the location in which you want to delete.\n2.  Click the overflow menu () on the location, then click **Delete location**.\n3.  Click **Yes, delete location**.\n\n### Delete a zone![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo delete a zone, you must remove the reader(s) associate with it:\n\n1.  Remove all readers from the location you want to delete, and remove all locations under the zones.\n    *   (Optional) Move the locations with readers to a different zone.\n2.  Click the overflow menu () on the zone, then click **Delete zone**.\n3.  Click **Yes, delete zone**.",
  "title": "Manage locations | Stripe Documentation",
  "description": "Group and manage your readers by physical location.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/disputes/create",
  "markdown": "# Create a dispute | Stripe API Reference\n\nCreates an Issuing `Dispute` object. Individual pieces of evidence within the `evidence` object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to [Dispute reasons and evidence](https://docs.stripe.com/issuing/purchases/disputes#dispute-reasons-and-evidence) for more details about evidence requirements.\n\n### Parameters\n\n*   Evidence provided for the dispute.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The ID of the issuing transaction to create a dispute for. For transaction on Treasury FinancialAccounts, use `treasury.received_debit`.\n    \n\n### More parameters\n\n### Returns\n\nReturns an Issuing `Dispute` object in `unsubmitted` status if creation succeeds.\n\nPOST /v1/issuing/disputes\n\n```\ncurl https://api.stripe.com/v1/issuing/disputes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d transaction=ipi_1MykXhFtDWhhyHE1UjsZZ3xQ \\  -d \"evidence[reason]\"=fraudulent \\  -d \"evidence[fraudulent][explanation]\"=\"This transaction is fraudulent.\"\n```\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"fraudulent\": {      \"additional_documentation\": null,      \"dispute_explanation\": null,      \"explanation\": \"This transaction is fraudulent.\",      \"uncategorized_file\": null    },    \"reason\": \"fraudulent\"  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"unsubmitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```\n\n## [Update a dispute](https://docs.stripe.com/api/issuing/disputes/update)\n\nUpdates the specified Issuing `Dispute` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the `evidence` object can be unset by passing in an empty string.\n\n### Parameters\n\n*   Evidence provided for the dispute.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated Issuing `Dispute` object if a valid identifier was provided.\n\nPOST /v1/issuing/disputes/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/disputes/idp_1MykdxFtDWhhyHE1BFAV3osZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"evidence[reason]\"=not_received \\  -d \"evidence[not_received][expected_at]\"=1590000000 \\  -d \"evidence[not_received][explanation]\"= \\  -d \"evidence[not_received][product_description]\"=\"Baseball cap\" \\  -d \"evidence[not_received][product_type]\"=merchandise\n```\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"reason\": \"not_received\",    \"not_received\": {      \"expected_at\": 1590000000,      \"explanation\": \"\",      \"product_description\": \"Baseball cap\",      \"product_type\": \"merchandise\"    }  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"unsubmitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```\n\n## [Retrieve a dispute](https://docs.stripe.com/api/issuing/disputes/retrieve)\n\nRetrieves an Issuing `Dispute` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Dispute` object if a valid identifier was provided.\n\nGET /v1/issuing/disputes/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/disputes/idp_1MykdxFtDWhhyHE1BFAV3osZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"fraudulent\": {      \"additional_documentation\": null,      \"dispute_explanation\": null,      \"explanation\": \"This transaction is fraudulent.\",      \"uncategorized_file\": null    },    \"reason\": \"fraudulent\"  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"unsubmitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```\n\n## [List all disputes](https://docs.stripe.com/api/issuing/disputes/list)\n\nReturns a list of Issuing `Dispute` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Select the Issuing dispute for the given transaction.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` disputes, starting after dispute `starting_after`. Each entry in the array is a separate Issuing `Dispute` object. If no more disputes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/disputes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/disputes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",      \"object\": \"issuing.dispute\",      \"amount\": 100,      \"created\": 1681947753,      \"currency\": \"usd\",      \"evidence\": {        \"fraudulent\": {          \"additional_documentation\": null,          \"dispute_explanation\": null,          \"explanation\": \"This transaction is fraudulent.\",          \"uncategorized_file\": null        },        \"reason\": \"fraudulent\"      },      \"livemode\": false,      \"metadata\": {},      \"status\": \"unsubmitted\",      \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"    }    {...}    {...}  ],}\n```\n\n## [Submit a dispute](https://docs.stripe.com/api/issuing/dispute/submit)\n\nSubmits an Issuing `Dispute` to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see [Dispute reasons and evidence](https://docs.stripe.com/issuing/purchases/disputes#dispute-reasons-and-evidence).\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an Issuing `Dispute` object in `submitted` status if submission succeeds.\n\nPOST /v1/issuing/disputes/:id/submit\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/disputes/idp_1MykdxFtDWhhyHE1BFAV3osZ/submit \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"fraudulent\": {      \"additional_documentation\": null,      \"dispute_explanation\": null,      \"explanation\": \"This transaction is fraudulent.\",      \"uncategorized_file\": null    },    \"reason\": \"fraudulent\"  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"submitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```",
  "title": "Create a dispute | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/connection_tokens/create",
  "markdown": "# Create a Connection Token | Stripe API Reference\n\nTo connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.\n\n### Parameters\n\n*   The id of the location that this connection token is scoped to. If specified the connection token will only be usable with readers assigned to that location, otherwise the connection token will be usable with all readers. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://docs.stripe.com/terminal/fleet/locations-and-zones?dashboard-or-api=api#connection-tokens).\n    \n\n### Returns\n\nReturns a Connection Token.\n\nPOST /v1/terminal/connection\\_tokens\n\n```\ncurl -X POST https://api.stripe.com/v1/terminal/connection_tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"terminal.connection_token\",  \"secret\": \"pst_test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LE81ZEdIalZ6NlVuMUdjM3c3WkRnN0ZYRHZxRURwTXo_00gNK2DWAV\"}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create a Connection Token | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/disputes/retrieve",
  "markdown": "# Retrieve a dispute | Stripe API Reference\n\nRetrieves an Issuing `Dispute` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Dispute` object if a valid identifier was provided.\n\nGET /v1/issuing/disputes/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/disputes/idp_1MykdxFtDWhhyHE1BFAV3osZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"fraudulent\": {      \"additional_documentation\": null,      \"dispute_explanation\": null,      \"explanation\": \"This transaction is fraudulent.\",      \"uncategorized_file\": null    },    \"reason\": \"fraudulent\"  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"unsubmitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```\n\n## [List all disputes](https://docs.stripe.com/api/issuing/disputes/list)\n\nReturns a list of Issuing `Dispute` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Select the Issuing dispute for the given transaction.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` disputes, starting after dispute `starting_after`. Each entry in the array is a separate Issuing `Dispute` object. If no more disputes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/disputes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/disputes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",      \"object\": \"issuing.dispute\",      \"amount\": 100,      \"created\": 1681947753,      \"currency\": \"usd\",      \"evidence\": {        \"fraudulent\": {          \"additional_documentation\": null,          \"dispute_explanation\": null,          \"explanation\": \"This transaction is fraudulent.\",          \"uncategorized_file\": null        },        \"reason\": \"fraudulent\"      },      \"livemode\": false,      \"metadata\": {},      \"status\": \"unsubmitted\",      \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"    }    {...}    {...}  ],}\n```\n\n## [Submit a dispute](https://docs.stripe.com/api/issuing/dispute/submit)\n\nSubmits an Issuing `Dispute` to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see [Dispute reasons and evidence](https://docs.stripe.com/issuing/purchases/disputes#dispute-reasons-and-evidence).\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an Issuing `Dispute` object in `submitted` status if submission succeeds.\n\nPOST /v1/issuing/disputes/:id/submit\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/disputes/idp_1MykdxFtDWhhyHE1BFAV3osZ/submit \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"fraudulent\": {      \"additional_documentation\": null,      \"dispute_explanation\": null,      \"explanation\": \"This transaction is fraudulent.\",      \"uncategorized_file\": null    },    \"reason\": \"fraudulent\"  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"submitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a dispute | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/disputes/update",
  "markdown": "# Update a dispute | Stripe API Reference\n\nUpdates the specified Issuing `Dispute` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the `evidence` object can be unset by passing in an empty string.\n\n### Parameters\n\n*   Evidence provided for the dispute.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated Issuing `Dispute` object if a valid identifier was provided.\n\nPOST /v1/issuing/disputes/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/disputes/idp_1MykdxFtDWhhyHE1BFAV3osZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"evidence[reason]\"=not_received \\  -d \"evidence[not_received][expected_at]\"=1590000000 \\  -d \"evidence[not_received][explanation]\"= \\  -d \"evidence[not_received][product_description]\"=\"Baseball cap\" \\  -d \"evidence[not_received][product_type]\"=merchandise\n```\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"reason\": \"not_received\",    \"not_received\": {      \"expected_at\": 1590000000,      \"explanation\": \"\",      \"product_description\": \"Baseball cap\",      \"product_type\": \"merchandise\"    }  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"unsubmitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```\n\n## [Retrieve a dispute](https://docs.stripe.com/api/issuing/disputes/retrieve)\n\nRetrieves an Issuing `Dispute` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Dispute` object if a valid identifier was provided.\n\nGET /v1/issuing/disputes/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/disputes/idp_1MykdxFtDWhhyHE1BFAV3osZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"fraudulent\": {      \"additional_documentation\": null,      \"dispute_explanation\": null,      \"explanation\": \"This transaction is fraudulent.\",      \"uncategorized_file\": null    },    \"reason\": \"fraudulent\"  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"unsubmitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```\n\n## [List all disputes](https://docs.stripe.com/api/issuing/disputes/list)\n\nReturns a list of Issuing `Dispute` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Select the Issuing dispute for the given transaction.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` disputes, starting after dispute `starting_after`. Each entry in the array is a separate Issuing `Dispute` object. If no more disputes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/disputes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/disputes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",      \"object\": \"issuing.dispute\",      \"amount\": 100,      \"created\": 1681947753,      \"currency\": \"usd\",      \"evidence\": {        \"fraudulent\": {          \"additional_documentation\": null,          \"dispute_explanation\": null,          \"explanation\": \"This transaction is fraudulent.\",          \"uncategorized_file\": null        },        \"reason\": \"fraudulent\"      },      \"livemode\": false,      \"metadata\": {},      \"status\": \"unsubmitted\",      \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"    }    {...}    {...}  ],}\n```\n\n## [Submit a dispute](https://docs.stripe.com/api/issuing/dispute/submit)\n\nSubmits an Issuing `Dispute` to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see [Dispute reasons and evidence](https://docs.stripe.com/issuing/purchases/disputes#dispute-reasons-and-evidence).\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an Issuing `Dispute` object in `submitted` status if submission succeeds.\n\nPOST /v1/issuing/disputes/:id/submit\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/disputes/idp_1MykdxFtDWhhyHE1BFAV3osZ/submit \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"fraudulent\": {      \"additional_documentation\": null,      \"dispute_explanation\": null,      \"explanation\": \"This transaction is fraudulent.\",      \"uncategorized_file\": null    },    \"reason\": \"fraudulent\"  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"submitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update a dispute | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/locations",
  "markdown": "# Location | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fterminal%2Flocations)\n\nEndpoints\n\n[POST/v1/terminal/locations](https://docs.stripe.com/api/terminal/locations/create)[POST/v1/terminal/locations/:id](https://docs.stripe.com/api/terminal/locations/update)[GET/v1/terminal/locations/:id](https://docs.stripe.com/api/terminal/locations/retrieve)[GET/v1/terminal/locations](https://docs.stripe.com/api/terminal/locations/list)[DELETE/v1/terminal/locations/:id](https://docs.stripe.com/api/terminal/locations/delete)\n\n## [The Location object](https://docs.stripe.com/api/terminal/locations/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The full address of the location.\n    \n*   The display name of the location.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\n### More attributes\n\n*   #### \n    \n    configuration\\_overridesnullable string\n    \n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"address\": {    \"city\": \"San Francisco\",    \"country\": \"US\",    \"line1\": \"1234 Main Street\",    \"line2\": \"\",    \"postal_code\": \"94111\",    \"state\": \"CA\"  },  \"display_name\": \"My First Store\",  \"livemode\": false,  \"metadata\": {}}\n```\n\n## [Create a Location](https://docs.stripe.com/api/terminal/locations/create)\n\nCreates a new `Location` object. For further details, including which address fields are required in each country, see the [Manage locations](https://docs.stripe.com/terminal/fleet/locations) guide.\n\n### Parameters\n\n*   The full address of the location.\n    \n*   #### \n    \n    display\\_namestringRequired\n    \n    A name for the location.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    configuration\\_overridesstring\n    \n\n### Returns\n\nReturns a `Location` object if creation succeeds.\n\nPOST /v1/terminal/locations\n\n```\ncurl https://api.stripe.com/v1/terminal/locations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=\"My First Store\" \\  -d \"address[line1]\"=\"1234 Main Street\" \\  -d \"address[city]\"=\"San Francisco\" \\  -d \"address[postal_code]\"=94111 \\  -d \"address[state]\"=CA \\  -d \"address[country]\"=US\n```\n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"address\": {    \"city\": \"San Francisco\",    \"country\": \"US\",    \"line1\": \"1234 Main Street\",    \"line2\": \"\",    \"postal_code\": \"94111\",    \"state\": \"CA\"  },  \"display_name\": \"My First Store\",  \"livemode\": false,  \"metadata\": {}}\n```\n\n## [Update a Location](https://docs.stripe.com/api/terminal/locations/update)\n\nUpdates a `Location` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   The full address of the location. If you’re updating the `address` field, avoid changing the `country`. If you need to modify the `country` field, create a new `Location` object and re-register any existing readers to that location.\n    \n*   A name for the location.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    configuration\\_overridesstring\n    \n\n### Returns\n\nReturns an updated `Location` object if a valid identifier was provided.\n\nPOST /v1/terminal/locations/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/locations/tml_FBakXQG8bQk4Mm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=\"Update Store Name\"\n```\n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"address\": {    \"city\": \"San Francisco\",    \"country\": \"US\",    \"line1\": \"1234 Main Street\",    \"line2\": \"\",    \"postal_code\": \"94111\",    \"state\": \"CA\"  },  \"display_name\": \"Update Store Name\",  \"livemode\": false,  \"metadata\": {}}\n```\n\n## [Retrieve a Location](https://docs.stripe.com/api/terminal/locations/retrieve)\n\nRetrieves a `Location` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Location` object if a valid identifier was provided.\n\nGET /v1/terminal/locations/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/locations/tml_FBakXQG8bQk4Mm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"address\": {    \"city\": \"San Francisco\",    \"country\": \"US\",    \"line1\": \"1234 Main Street\",    \"line2\": \"\",    \"postal_code\": \"94111\",    \"state\": \"CA\"  },  \"display_name\": \"My First Store\",  \"livemode\": false,  \"metadata\": {}}\n```",
  "title": "Location | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/disputes/list",
  "markdown": "# List all disputes | Stripe API Reference\n\nReturns a list of Issuing `Dispute` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Select the Issuing dispute for the given transaction.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` disputes, starting after dispute `starting_after`. Each entry in the array is a separate Issuing `Dispute` object. If no more disputes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/disputes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/disputes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",      \"object\": \"issuing.dispute\",      \"amount\": 100,      \"created\": 1681947753,      \"currency\": \"usd\",      \"evidence\": {        \"fraudulent\": {          \"additional_documentation\": null,          \"dispute_explanation\": null,          \"explanation\": \"This transaction is fraudulent.\",          \"uncategorized_file\": null        },        \"reason\": \"fraudulent\"      },      \"livemode\": false,      \"metadata\": {},      \"status\": \"unsubmitted\",      \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"    }    {...}    {...}  ],}\n```\n\n## [Submit a dispute](https://docs.stripe.com/api/issuing/dispute/submit)\n\nSubmits an Issuing `Dispute` to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see [Dispute reasons and evidence](https://docs.stripe.com/issuing/purchases/disputes#dispute-reasons-and-evidence).\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an Issuing `Dispute` object in `submitted` status if submission succeeds.\n\nPOST /v1/issuing/disputes/:id/submit\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/disputes/idp_1MykdxFtDWhhyHE1BFAV3osZ/submit \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"fraudulent\": {      \"additional_documentation\": null,      \"dispute_explanation\": null,      \"explanation\": \"This transaction is fraudulent.\",      \"uncategorized_file\": null    },    \"reason\": \"fraudulent\"  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"submitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all disputes | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/locations/create",
  "markdown": "# Create a Location | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fterminal%2Flocations%2Fcreate)\n\nCreates a new `Location` object. For further details, including which address fields are required in each country, see the [Manage locations](https://docs.stripe.com/terminal/fleet/locations) guide.\n\n### Parameters\n\n*   The full address of the location.\n    \n*   #### \n    \n    display\\_namestringRequired\n    \n    A name for the location.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    configuration\\_overridesstring\n    \n\n### Returns\n\nReturns a `Location` object if creation succeeds.\n\nPOST /v1/terminal/locations\n\n```\ncurl https://api.stripe.com/v1/terminal/locations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=\"My First Store\" \\  -d \"address[line1]\"=\"1234 Main Street\" \\  -d \"address[city]\"=\"San Francisco\" \\  -d \"address[postal_code]\"=94111 \\  -d \"address[state]\"=CA \\  -d \"address[country]\"=US\n```\n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"address\": {    \"city\": \"San Francisco\",    \"country\": \"US\",    \"line1\": \"1234 Main Street\",    \"line2\": \"\",    \"postal_code\": \"94111\",    \"state\": \"CA\"  },  \"display_name\": \"My First Store\",  \"livemode\": false,  \"metadata\": {}}\n```\n\n## [Update a Location](https://docs.stripe.com/api/terminal/locations/update)\n\nUpdates a `Location` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   The full address of the location. If you’re updating the `address` field, avoid changing the `country`. If you need to modify the `country` field, create a new `Location` object and re-register any existing readers to that location.\n    \n*   A name for the location.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    configuration\\_overridesstring\n    \n\n### Returns\n\nReturns an updated `Location` object if a valid identifier was provided.\n\nPOST /v1/terminal/locations/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/locations/tml_FBakXQG8bQk4Mm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=\"Update Store Name\"\n```\n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"address\": {    \"city\": \"San Francisco\",    \"country\": \"US\",    \"line1\": \"1234 Main Street\",    \"line2\": \"\",    \"postal_code\": \"94111\",    \"state\": \"CA\"  },  \"display_name\": \"Update Store Name\",  \"livemode\": false,  \"metadata\": {}}\n```\n\n## [Retrieve a Location](https://docs.stripe.com/api/terminal/locations/retrieve)\n\nRetrieves a `Location` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Location` object if a valid identifier was provided.\n\nGET /v1/terminal/locations/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/locations/tml_FBakXQG8bQk4Mm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"address\": {    \"city\": \"San Francisco\",    \"country\": \"US\",    \"line1\": \"1234 Main Street\",    \"line2\": \"\",    \"postal_code\": \"94111\",    \"state\": \"CA\"  },  \"display_name\": \"My First Store\",  \"livemode\": false,  \"metadata\": {}}\n```\n\n## [List all Locations](https://docs.stripe.com/api/terminal/locations/list)\n\nReturns a list of `Location` objects.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` locations, starting after location `starting_after`. Each entry in the array is a separate Terminal `location` object. If no more locations are available, the resulting array will be empty.\n\nGET /v1/terminal/locations\n\n```\ncurl -G https://api.stripe.com/v1/terminal/locations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/locations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tml_FBakXQG8bQk4Mm\",      \"object\": \"terminal.location\",      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Main Street\",        \"line2\": \"\",        \"postal_code\": \"94111\",        \"state\": \"CA\"      },      \"display_name\": \"My First Store\",      \"livemode\": false,      \"metadata\": {}    }    {...}    {...}  ],}\n```\n\n## [Delete a Location](https://docs.stripe.com/api/terminal/locations/delete)\n\nDeletes a `Location` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `Location` object that was deleted.\n\nDELETE /v1/terminal/locations/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/terminal/locations/tml_FBakXQG8bQk4Mm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"deleted\": true}\n```",
  "title": "Create a Location | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/locations/update",
  "markdown": "# Update a Location | Stripe API Reference\n\nUpdates a `Location` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   The full address of the location. If you’re updating the `address` field, avoid changing the `country`. If you need to modify the `country` field, create a new `Location` object and re-register any existing readers to that location.\n    \n*   A name for the location.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    configuration\\_overridesstring\n    \n\n### Returns\n\nReturns an updated `Location` object if a valid identifier was provided.\n\nPOST /v1/terminal/locations/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/locations/tml_FBakXQG8bQk4Mm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=\"Update Store Name\"\n```\n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"address\": {    \"city\": \"San Francisco\",    \"country\": \"US\",    \"line1\": \"1234 Main Street\",    \"line2\": \"\",    \"postal_code\": \"94111\",    \"state\": \"CA\"  },  \"display_name\": \"Update Store Name\",  \"livemode\": false,  \"metadata\": {}}\n```\n\n## [Retrieve a Location](https://docs.stripe.com/api/terminal/locations/retrieve)\n\nRetrieves a `Location` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Location` object if a valid identifier was provided.\n\nGET /v1/terminal/locations/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/locations/tml_FBakXQG8bQk4Mm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"address\": {    \"city\": \"San Francisco\",    \"country\": \"US\",    \"line1\": \"1234 Main Street\",    \"line2\": \"\",    \"postal_code\": \"94111\",    \"state\": \"CA\"  },  \"display_name\": \"My First Store\",  \"livemode\": false,  \"metadata\": {}}\n```\n\n## [List all Locations](https://docs.stripe.com/api/terminal/locations/list)\n\nReturns a list of `Location` objects.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` locations, starting after location `starting_after`. Each entry in the array is a separate Terminal `location` object. If no more locations are available, the resulting array will be empty.\n\nGET /v1/terminal/locations\n\n```\ncurl -G https://api.stripe.com/v1/terminal/locations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/locations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tml_FBakXQG8bQk4Mm\",      \"object\": \"terminal.location\",      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Main Street\",        \"line2\": \"\",        \"postal_code\": \"94111\",        \"state\": \"CA\"      },      \"display_name\": \"My First Store\",      \"livemode\": false,      \"metadata\": {}    }    {...}    {...}  ],}\n```\n\n## [Delete a Location](https://docs.stripe.com/api/terminal/locations/delete)\n\nDeletes a `Location` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `Location` object that was deleted.\n\nDELETE /v1/terminal/locations/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/terminal/locations/tml_FBakXQG8bQk4Mm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"deleted\": true}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update a Location | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/dispute/submit",
  "markdown": "# Submit a dispute | Stripe API Reference\n\nSubmits an Issuing `Dispute` to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see [Dispute reasons and evidence](https://docs.stripe.com/issuing/purchases/disputes#dispute-reasons-and-evidence).\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an Issuing `Dispute` object in `submitted` status if submission succeeds.\n\nPOST /v1/issuing/disputes/:id/submit\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/disputes/idp_1MykdxFtDWhhyHE1BFAV3osZ/submit \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"fraudulent\": {      \"additional_documentation\": null,      \"dispute_explanation\": null,      \"explanation\": \"This transaction is fraudulent.\",      \"uncategorized_file\": null    },    \"reason\": \"fraudulent\"  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"submitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Submit a dispute | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/locations/retrieve",
  "markdown": "# Retrieve a Location | Stripe API Reference\n\nRetrieves a `Location` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Location` object if a valid identifier was provided.\n\nGET /v1/terminal/locations/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/locations/tml_FBakXQG8bQk4Mm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"address\": {    \"city\": \"San Francisco\",    \"country\": \"US\",    \"line1\": \"1234 Main Street\",    \"line2\": \"\",    \"postal_code\": \"94111\",    \"state\": \"CA\"  },  \"display_name\": \"My First Store\",  \"livemode\": false,  \"metadata\": {}}\n```\n\n## [List all Locations](https://docs.stripe.com/api/terminal/locations/list)\n\nReturns a list of `Location` objects.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` locations, starting after location `starting_after`. Each entry in the array is a separate Terminal `location` object. If no more locations are available, the resulting array will be empty.\n\nGET /v1/terminal/locations\n\n```\ncurl -G https://api.stripe.com/v1/terminal/locations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/locations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tml_FBakXQG8bQk4Mm\",      \"object\": \"terminal.location\",      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Main Street\",        \"line2\": \"\",        \"postal_code\": \"94111\",        \"state\": \"CA\"      },      \"display_name\": \"My First Store\",      \"livemode\": false,      \"metadata\": {}    }    {...}    {...}  ],}\n```\n\n## [Delete a Location](https://docs.stripe.com/api/terminal/locations/delete)\n\nDeletes a `Location` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `Location` object that was deleted.\n\nDELETE /v1/terminal/locations/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/terminal/locations/tml_FBakXQG8bQk4Mm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"deleted\": true}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a Location | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/locations/list",
  "markdown": "# List all Locations | Stripe API Reference\n\nReturns a list of `Location` objects.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` locations, starting after location `starting_after`. Each entry in the array is a separate Terminal `location` object. If no more locations are available, the resulting array will be empty.\n\nGET /v1/terminal/locations\n\n```\ncurl -G https://api.stripe.com/v1/terminal/locations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/locations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tml_FBakXQG8bQk4Mm\",      \"object\": \"terminal.location\",      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Main Street\",        \"line2\": \"\",        \"postal_code\": \"94111\",        \"state\": \"CA\"      },      \"display_name\": \"My First Store\",      \"livemode\": false,      \"metadata\": {}    }    {...}    {...}  ],}\n```\n\n## [Delete a Location](https://docs.stripe.com/api/terminal/locations/delete)\n\nDeletes a `Location` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `Location` object that was deleted.\n\nDELETE /v1/terminal/locations/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/terminal/locations/tml_FBakXQG8bQk4Mm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"deleted\": true}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all Locations | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/funding_instructions/create",
  "markdown": "# Create funding instructions | Stripe API Reference\n\nCreate or retrieve funding instructions for an Issuing balance. If funding instructions don’t yet exist for the account, we’ll create new funding instructions. If we’ve already created funding instructions for the account, the same we’ll retrieve the same funding instructions. In other words, we’ll return the same funding instructions each time.\n\n### Parameters\n\n*   #### \n    \n    bank\\_transferobjectRequired\n    \n    Additional parameters for `bank_transfer` funding types\n    \n\n*   The `funding_type` to get the instructions for.\n    \n    Possible enum values\n    \n    `bank_transfer`\n    \n    Use a bank\\_transfer hash to define the bank transfer type\n    \n\n### Returns\n\nReturns funding instructions for an Issuing balance\n\nPOST /v1/issuing/funding\\_instructions\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/issuing/funding_instructions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"bank_transfer[type]\"=eu_bank_transfer \\  -d currency=eur \\  -d funding_type=bank_transfer\n```\n\n```\n{  \"object\": \"funding_instructions\",  \"bank_transfer\": {    \"country\": \"DE\",    \"financial_addresses\": [      {        \"iban\": {          \"account_holder_name\": \"Stripe Technology Europe Limited\",          \"bic\": \"SXPYDEHH\",          \"country\": \"DE\",          \"iban\": \"DE00000000000000000001\"        },        \"supported_networks\": [          \"sepa\"        ],        \"type\": \"iban\"      }    ],    \"type\": \"eu_bank_transfer\"  },  \"currency\": \"eur\",  \"funding_type\": \"bank_transfer\",  \"livemode\": false}\n```\n\n## [List all funding instructions](https://docs.stripe.com/api/issuing/funding_instructions/list)\n\nRetrieve all applicable funding instructions for an Issuing balance.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns all funding instructions for an Issuing balance\n\nGET /v1/issuing/funding\\_instructions\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/issuing/funding_instructions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/funding_instructions\",  \"has_more\": false,  \"data\": [    {      \"object\": \"funding_instructions\",      \"bank_transfer\": {        \"country\": \"DE\",        \"financial_addresses\": [          {            \"iban\": {              \"account_holder_name\": \"Stripe Technology Europe Limited\",              \"bic\": \"SXPYDEHH\",              \"country\": \"DE\",              \"iban\": \"DE00000000000000000001\"            },            \"supported_networks\": [              \"sepa\"            ],            \"type\": \"iban\"          }        ],        \"type\": \"eu_bank_transfer\"      },      \"currency\": \"eur\",      \"funding_type\": \"bank_transfer\",      \"livemode\": false    }  ]}\n```\n\n## [Simulate a top up](https://docs.stripe.com/api/issuing/funding_instructions/fund)Test helper\n\nSimulates an external bank transfer and adds funds to an Issuing balance. This method can only be called in test mode.\n\n### Parameters\n\n*   The amount to top up\n    \n*   The currency to top up\n    \n\n### Returns\n\nReturns testmode funding instructions for an Issuing balance\n\nPOST /v1/test\\_helpers/issuing/fund\\_balance\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/fund_balance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=4242 \\  -d currency=eur\n```\n\n```\n{  \"object\": \"funding_instructions\",  \"bank_transfer\": {    \"country\": \"DE\",    \"financial_addresses\": [      {        \"iban\": {          \"account_holder_name\": \"Stripe Technology Europe Limited\",          \"bic\": \"SXPYDEHH\",          \"country\": \"DE\",          \"iban\": \"DE00000000000000000001\"        },        \"supported_networks\": [          \"sepa\"        ],        \"type\": \"iban\"      }    ],    \"type\": \"eu_bank_transfer\"  },  \"currency\": \"eur\",  \"funding_type\": \"bank_transfer\",  \"livemode\": false}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create funding instructions | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/locations/delete",
  "markdown": "# Delete a Location | Stripe API Reference\n\nDeletes a `Location` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `Location` object that was deleted.\n\nDELETE /v1/terminal/locations/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/terminal/locations/tml_FBakXQG8bQk4Mm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"deleted\": true}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Delete a Location | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/readers",
  "markdown": "# Reader | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fterminal%2Freaders)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [The Reader object](https://docs.stripe.com/api/terminal/readers/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Type of reader, one of `bbpos_wisepad3`, `stripe_m2`, `bbpos_chipper2x`, `bbpos_wisepos_e`, `verifone_P400`, `simulated_wisepos_e`, or `mobile_phone_reader`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `bbpos_chipper2x` |\n    | `bbpos_wisepad3` |\n    | `bbpos_wisepos_e` |\n    | `mobile_phone_reader` |\n    | `simulated_wisepos_e` |\n    | `stripe_m2` |\n    | `verifone_P400` |\n    \n*   Custom label given to the reader for easier identification.\n    \n*   #### \n    \n    locationnullable stringExpandable\n    \n    The location identifier of the reader.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Serial number of the reader.\n    \n*   The networking status of the reader.\n    \n\n### More attributes\n\n*   #### \n    \n    device\\_sw\\_versionnullable string\n    \n*   #### \n    \n    ip\\_addressnullable string\n    \n*   #### \n    \n    last\\_seen\\_atnullable integerPreview feature\n    \n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Create a Reader](https://docs.stripe.com/api/terminal/readers/create)\n\nCreates a new `Reader` object.\n\n### Parameters\n\n*   #### \n    \n    registration\\_codestringRequired\n    \n    A code generated by the reader used for registering to an account.\n    \n*   Custom label given to the reader for easier identification. If no label is specified, the registration code will be used.\n    \n*   The location to assign the reader to.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a `Reader` object if creation succeeds.\n\nPOST /v1/terminal/readers\n\n```\ncurl https://api.stripe.com/v1/terminal/readers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d label=\"Blue Rabbit\" \\  -d registration_code=simulated-wpe \\  -d location=tml_FDOtHwxAAdIJOh\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Update a Reader](https://docs.stripe.com/api/terminal/readers/update)\n\nUpdates a `Reader` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   The new label of the reader.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an updated `Reader` object if a valid identifier was provided.\n\nPOST /v1/terminal/readers/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Retrieve a Reader](https://docs.stripe.com/api/terminal/readers/retrieve)\n\nRetrieves a `Reader` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Reader` object if a valid identifier was provided.\n\nGET /v1/terminal/readers/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```",
  "title": "Reader | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/funding_instructions/fund",
  "markdown": "# Simulate a top up | Stripe API Reference\n\n## [Simulate a top up](https://docs.stripe.com/api/issuing/funding_instructions/fund)Test helper\n\nSimulates an external bank transfer and adds funds to an Issuing balance. This method can only be called in test mode.\n\n### Parameters\n\n*   The amount to top up\n    \n*   The currency to top up\n    \n\n### Returns\n\nReturns testmode funding instructions for an Issuing balance\n\nPOST /v1/test\\_helpers/issuing/fund\\_balance\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/fund_balance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=4242 \\  -d currency=eur\n```\n\n```\n{  \"object\": \"funding_instructions\",  \"bank_transfer\": {    \"country\": \"DE\",    \"financial_addresses\": [      {        \"iban\": {          \"account_holder_name\": \"Stripe Technology Europe Limited\",          \"bic\": \"SXPYDEHH\",          \"country\": \"DE\",          \"iban\": \"DE00000000000000000001\"        },        \"supported_networks\": [          \"sepa\"        ],        \"type\": \"iban\"      }    ],    \"type\": \"eu_bank_transfer\"  },  \"currency\": \"eur\",  \"funding_type\": \"bank_transfer\",  \"livemode\": false}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Simulate a top up | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/personalization_designs",
  "markdown": "# Personalization Designs | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fissuing%2Fpersonalization_designs)\n\n## [The Personalization Design object](https://docs.stripe.com/api/issuing/personalization_designs/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    card\\_logonullable stringExpandable\n    \n    The file for the card logo to use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.\n    \n*   #### \n    \n    carrier\\_textnullable object\n    \n    Hash containing carrier text, for use with physical bundles that support carrier text.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    lookup\\_keynullable string\n    \n    A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Friendly display name.\n    \n*   #### \n    \n    physical\\_bundlestringExpandable\n    \n    The physical bundle object belonging to this personalization design.\n    \n*   Hash containing information on whether this personalization design is used to create cards when one is not specified.\n    \n*   Hash containing reasons why the personalization design was rejected.\n    \n*   Whether this personalization design can be used to create cards.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Personalization design can be used to create cards that fulfill immediately. |\n    | `inactive`<br><br>Personalization design cannot be used to create cards because it was deactivated. |\n    | `rejected`<br><br>Personalization design cannot be used to create cards because it was rejected by design review. |\n    | `review`<br><br>Personalization design can be used to create cards but cards will only be fulfilled once the personalization design is activated. |\n    \n\nThe Personalization Design object\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": true,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"review\"}\n```\n\n## [Create a personalization design](https://docs.stripe.com/api/issuing/personalization_designs/create)\n\nCreates a personalization design object.\n\n### Parameters\n\n*   #### \n    \n    physical\\_bundlestringRequired\n    \n    The physical bundle object belonging to this personalization design.\n    \n*   The file for the card logo, for use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.\n    \n*   Hash containing carrier text, for use with physical bundles that support carrier text.\n    \n*   A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Friendly display name.\n    \n*   Information on whether this personalization design is used to create cards when one is not specified.\n    \n*   #### \n    \n    transfer\\_lookup\\_keyboolean\n    \n    If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design.\n    \n\n### Returns\n\nReturns the created personalization design object.\n\nPOST /v1/issuing/personalization\\_designs\n\n```\ncurl https://api.stripe.com/v1/issuing/personalization_designs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"My personalization design name\" \\  -d \"preferences[is_default]\"=false \\  -d card_logo=file_1LzR9L2eZvKYlo2CelTpcvKu \\  -d physical_bundle=ics_Oiw9ahglMfql0U\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": true,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"review\"}\n```\n\n## [Update a personalization design](https://docs.stripe.com/api/issuing/personalization_designs/update)\n\nUpdates a card personalization object.\n\n### Parameters\n\n*   The file for the card logo, for use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.\n    \n*   Hash containing carrier text, for use with physical bundles that support carrier text.\n    \n*   A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Friendly display name. Providing an empty string will set the field to null.\n    \n*   The physical bundle object belonging to this personalization design.\n    \n*   Information on whether this personalization design is used to create cards when one is not specified.\n    \n*   #### \n    \n    transfer\\_lookup\\_keyboolean\n    \n    If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design.\n    \n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/issuing/personalization\\_designs/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": true,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"review\"}\n```\n\n## [Retrieve a personalization design](https://docs.stripe.com/api/issuing/personalization_designs/retrieve)\n\nRetrieves a personalization design object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the personalization design object.\n\nGET /v1/issuing/personalization\\_designs/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": true,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"review\"}\n```",
  "title": "Personalization Designs | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/readers/update",
  "markdown": "# Update a Reader | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fterminal%2Freaders%2Fupdate)\n\nUpdates a `Reader` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   The new label of the reader.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an updated `Reader` object if a valid identifier was provided.\n\nPOST /v1/terminal/readers/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Retrieve a Reader](https://docs.stripe.com/api/terminal/readers/retrieve)\n\nRetrieves a `Reader` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Reader` object if a valid identifier was provided.\n\nGET /v1/terminal/readers/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [List all Readers](https://docs.stripe.com/api/terminal/readers/list)\n\nReturns a list of `Reader` objects.\n\n### Parameters\n\n*   Filters readers by device type\n    \n*   A location ID to filter the response list to only readers at the specific location\n    \n*   Filters readers by serial number\n    \n*   A status filter to filter readers to only offline or online readers\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` readers, starting after reader `starting_after`. Each entry in the array is a separate Terminal `Reader` object. If no more readers are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/terminal/readers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/readers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tmr_FDOt2wlRZEdpd7\",      \"object\": \"terminal.reader\",      \"action\": null,      \"device_sw_version\": \"\",      \"device_type\": \"simulated_wisepos_e\",      \"ip_address\": \"0.0.0.0\",      \"label\": \"Blue Rabbit\",      \"last_seen_at\": 1681320543815,      \"livemode\": false,      \"location\": \"tml_FDOtHwxAAdIJOh\",      \"metadata\": {},      \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",      \"status\": \"online\"    }    {...}    {...}  ],}\n```\n\n## [Delete a Reader](https://docs.stripe.com/api/terminal/readers/delete)\n\nDeletes a `Reader` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `Reader` object that was deleted.\n\nDELETE /v1/terminal/readers/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"deleted\": true}\n```\n\n## [Cancel the current reader action](https://docs.stripe.com/api/terminal/readers/cancel_action)\n\nCancels the current reader action.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/cancel\\_action\n\n```\ncurl -X POST https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/cancel_action \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1695402450407,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```",
  "title": "Update a Reader | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/readers/create",
  "markdown": "# Create a Reader | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fterminal%2Freaders%2Fcreate)\n\nCreates a new `Reader` object.\n\n### Parameters\n\n*   #### \n    \n    registration\\_codestringRequired\n    \n    A code generated by the reader used for registering to an account.\n    \n*   Custom label given to the reader for easier identification. If no label is specified, the registration code will be used.\n    \n*   The location to assign the reader to.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a `Reader` object if creation succeeds.\n\nPOST /v1/terminal/readers\n\n```\ncurl https://api.stripe.com/v1/terminal/readers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d label=\"Blue Rabbit\" \\  -d registration_code=simulated-wpe \\  -d location=tml_FDOtHwxAAdIJOh\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Update a Reader](https://docs.stripe.com/api/terminal/readers/update)\n\nUpdates a `Reader` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   The new label of the reader.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an updated `Reader` object if a valid identifier was provided.\n\nPOST /v1/terminal/readers/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Retrieve a Reader](https://docs.stripe.com/api/terminal/readers/retrieve)\n\nRetrieves a `Reader` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Reader` object if a valid identifier was provided.\n\nGET /v1/terminal/readers/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [List all Readers](https://docs.stripe.com/api/terminal/readers/list)\n\nReturns a list of `Reader` objects.\n\n### Parameters\n\n*   Filters readers by device type\n    \n*   A location ID to filter the response list to only readers at the specific location\n    \n*   Filters readers by serial number\n    \n*   A status filter to filter readers to only offline or online readers\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` readers, starting after reader `starting_after`. Each entry in the array is a separate Terminal `Reader` object. If no more readers are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/terminal/readers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/readers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tmr_FDOt2wlRZEdpd7\",      \"object\": \"terminal.reader\",      \"action\": null,      \"device_sw_version\": \"\",      \"device_type\": \"simulated_wisepos_e\",      \"ip_address\": \"0.0.0.0\",      \"label\": \"Blue Rabbit\",      \"last_seen_at\": 1681320543815,      \"livemode\": false,      \"location\": \"tml_FDOtHwxAAdIJOh\",      \"metadata\": {},      \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",      \"status\": \"online\"    }    {...}    {...}  ],}\n```\n\n## [Delete a Reader](https://docs.stripe.com/api/terminal/readers/delete)\n\nDeletes a `Reader` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `Reader` object that was deleted.\n\nDELETE /v1/terminal/readers/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"deleted\": true}\n```",
  "title": "Create a Reader | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/readers/retrieve",
  "markdown": "# Retrieve a Reader | Stripe API Reference\n\nRetrieves a `Reader` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Reader` object if a valid identifier was provided.\n\nGET /v1/terminal/readers/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [List all Readers](https://docs.stripe.com/api/terminal/readers/list)\n\nReturns a list of `Reader` objects.\n\n### Parameters\n\n*   Filters readers by device type\n    \n*   A location ID to filter the response list to only readers at the specific location\n    \n*   Filters readers by serial number\n    \n*   A status filter to filter readers to only offline or online readers\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` readers, starting after reader `starting_after`. Each entry in the array is a separate Terminal `Reader` object. If no more readers are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/terminal/readers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/readers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tmr_FDOt2wlRZEdpd7\",      \"object\": \"terminal.reader\",      \"action\": null,      \"device_sw_version\": \"\",      \"device_type\": \"simulated_wisepos_e\",      \"ip_address\": \"0.0.0.0\",      \"label\": \"Blue Rabbit\",      \"last_seen_at\": 1681320543815,      \"livemode\": false,      \"location\": \"tml_FDOtHwxAAdIJOh\",      \"metadata\": {},      \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",      \"status\": \"online\"    }    {...}    {...}  ],}\n```\n\n## [Delete a Reader](https://docs.stripe.com/api/terminal/readers/delete)\n\nDeletes a `Reader` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `Reader` object that was deleted.\n\nDELETE /v1/terminal/readers/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"deleted\": true}\n```\n\n## [Cancel the current reader action](https://docs.stripe.com/api/terminal/readers/cancel_action)\n\nCancels the current reader action.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/cancel\\_action\n\n```\ncurl -X POST https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/cancel_action \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1695402450407,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Collect inputs using a Reader](https://docs.stripe.com/api/terminal/readers/collect_inputs)Preview feature\n\nInitiates an input collection flow on a Reader.\n\n### Parameters\n\n*   #### \n    \n    inputsarray of objectsRequired\n    \n    List of inputs to be collected using the Reader\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/collect\\_inputs\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_OXYJvwsea7PDiDHNciXRkytb/collect_inputs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"inputs[0][type]\"=signature \\  -d \"inputs[0][custom_text][title]\"=Signature \\  -d \"inputs[0][custom_text][description]\"=\"Please sign below\" \\  -d \"inputs[0][custom_text][submit_button]\"=Submit \\  -d \"inputs[0][custom_text][skip_button]\"=Skip \\  -d \"inputs[0][required]\"=false \\  -d \"inputs[1][type]\"=selection \\  -d \"inputs[1][custom_text][title]\"=Selection \\  -d \"inputs[1][custom_text][description]\"=\"Please select one\" \\  -d \"inputs[1][required]\"=true \\  -d \"inputs[1][selection][choices][0][style]\"=primary \\  -d \"inputs[1][selection][choices][0][value]\"=choice_1 \\  -d \"inputs[1][selection][choices][1][style]\"=secondary \\  -d \"inputs[1][selection][choices][1][value]\"=choice_2 \\  -d \"inputs[2][type]\"=email \\  -d \"inputs[2][custom_text][title]\"=\"Enter your email\" \\  --data-urlencode \"inputs[2][custom_text][description]\"=\"We'll send updates on your order and occasional deals\" \\  -d \"inputs[2][custom_text][submit_button]\"=Submit \\  -d \"inputs[2][custom_text][skip_button]\"=Skip \\  -d \"inputs[2][required]\"=false\n```\n\n```\n{  \"id\": \"tmr_OXYJvwsea7PDiDHNciXRkytb\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"collect_inputs\": {      \"inputs\": [        {          \"type\": \"signature\",          \"custom_text\": {            \"title\": \"Signature\",            \"description\": \"Please sign below\",            \"submit_button\": \"Submit\",            \"skip_button\": \"Skip\"          },          \"required\": false,          \"value\": null        },        {          \"type\": \"selection\",          \"custom_text\": {            \"title\": \"Selection\",            \"description\": \"Please select one\"          },          \"required\": true,          \"selection\": {            \"choices\": [              {                \"style\": \"primary\",                \"value\": \"choice_1\"              },              {                \"style\": \"secondary\",                \"value\": \"choice_2\"              }            ],            \"value\": null          }        },        {          \"type\": \"email\",          \"custom_text\": {            \"title\": \"Enter your email\",            \"description\": \"We'll send updates on your order and occasional deals\",            \"submit_button\": \"Submit\",            \"skip_button\": \"Skip\"          },          \"required\": false,          \"value\": null        }      ]    },    \"status\": \"in_progress\",    \"type\": \"collect_inputs\"  },  \"device_deploy_group\": null,  \"device_sw_version\": null,  \"device_type\": \"bbpos_wisepos_e\",  \"ip_address\": \"192.168.2.2\",  \"label\": \"Blue Rabbit\",  \"livemode\": false,  \"location\": null,  \"metadata\": {},  \"serial_number\": \"123-456-789\",  \"software\": null,  \"status\": \"online\"}\n```",
  "title": "Retrieve a Reader | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/readers/list",
  "markdown": "# List all Readers | Stripe API Reference\n\nReturns a list of `Reader` objects.\n\n### Parameters\n\n*   Filters readers by device type\n    \n*   A location ID to filter the response list to only readers at the specific location\n    \n*   Filters readers by serial number\n    \n*   A status filter to filter readers to only offline or online readers\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` readers, starting after reader `starting_after`. Each entry in the array is a separate Terminal `Reader` object. If no more readers are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/terminal/readers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/readers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tmr_FDOt2wlRZEdpd7\",      \"object\": \"terminal.reader\",      \"action\": null,      \"device_sw_version\": \"\",      \"device_type\": \"simulated_wisepos_e\",      \"ip_address\": \"0.0.0.0\",      \"label\": \"Blue Rabbit\",      \"last_seen_at\": 1681320543815,      \"livemode\": false,      \"location\": \"tml_FDOtHwxAAdIJOh\",      \"metadata\": {},      \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",      \"status\": \"online\"    }    {...}    {...}  ],}\n```\n\n## [Delete a Reader](https://docs.stripe.com/api/terminal/readers/delete)\n\nDeletes a `Reader` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `Reader` object that was deleted.\n\nDELETE /v1/terminal/readers/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"deleted\": true}\n```\n\n## [Cancel the current reader action](https://docs.stripe.com/api/terminal/readers/cancel_action)\n\nCancels the current reader action.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/cancel\\_action\n\n```\ncurl -X POST https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/cancel_action \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1695402450407,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Collect inputs using a Reader](https://docs.stripe.com/api/terminal/readers/collect_inputs)Preview feature\n\nInitiates an input collection flow on a Reader.\n\n### Parameters\n\n*   #### \n    \n    inputsarray of objectsRequired\n    \n    List of inputs to be collected using the Reader\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/collect\\_inputs\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_OXYJvwsea7PDiDHNciXRkytb/collect_inputs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"inputs[0][type]\"=signature \\  -d \"inputs[0][custom_text][title]\"=Signature \\  -d \"inputs[0][custom_text][description]\"=\"Please sign below\" \\  -d \"inputs[0][custom_text][submit_button]\"=Submit \\  -d \"inputs[0][custom_text][skip_button]\"=Skip \\  -d \"inputs[0][required]\"=false \\  -d \"inputs[1][type]\"=selection \\  -d \"inputs[1][custom_text][title]\"=Selection \\  -d \"inputs[1][custom_text][description]\"=\"Please select one\" \\  -d \"inputs[1][required]\"=true \\  -d \"inputs[1][selection][choices][0][style]\"=primary \\  -d \"inputs[1][selection][choices][0][value]\"=choice_1 \\  -d \"inputs[1][selection][choices][1][style]\"=secondary \\  -d \"inputs[1][selection][choices][1][value]\"=choice_2 \\  -d \"inputs[2][type]\"=email \\  -d \"inputs[2][custom_text][title]\"=\"Enter your email\" \\  --data-urlencode \"inputs[2][custom_text][description]\"=\"We'll send updates on your order and occasional deals\" \\  -d \"inputs[2][custom_text][submit_button]\"=Submit \\  -d \"inputs[2][custom_text][skip_button]\"=Skip \\  -d \"inputs[2][required]\"=false\n```\n\n```\n{  \"id\": \"tmr_OXYJvwsea7PDiDHNciXRkytb\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"collect_inputs\": {      \"inputs\": [        {          \"type\": \"signature\",          \"custom_text\": {            \"title\": \"Signature\",            \"description\": \"Please sign below\",            \"submit_button\": \"Submit\",            \"skip_button\": \"Skip\"          },          \"required\": false,          \"value\": null        },        {          \"type\": \"selection\",          \"custom_text\": {            \"title\": \"Selection\",            \"description\": \"Please select one\"          },          \"required\": true,          \"selection\": {            \"choices\": [              {                \"style\": \"primary\",                \"value\": \"choice_1\"              },              {                \"style\": \"secondary\",                \"value\": \"choice_2\"              }            ],            \"value\": null          }        },        {          \"type\": \"email\",          \"custom_text\": {            \"title\": \"Enter your email\",            \"description\": \"We'll send updates on your order and occasional deals\",            \"submit_button\": \"Submit\",            \"skip_button\": \"Skip\"          },          \"required\": false,          \"value\": null        }      ]    },    \"status\": \"in_progress\",    \"type\": \"collect_inputs\"  },  \"device_deploy_group\": null,  \"device_sw_version\": null,  \"device_type\": \"bbpos_wisepos_e\",  \"ip_address\": \"192.168.2.2\",  \"label\": \"Blue Rabbit\",  \"livemode\": false,  \"location\": null,  \"metadata\": {},  \"serial_number\": \"123-456-789\",  \"software\": null,  \"status\": \"online\"}\n```\n\n## [Confirm a PaymentIntent on the Reader](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)Preview feature\n\nFinalizes a payment on a Reader.\n\n### Parameters\n\n*   #### \n    \n    payment\\_intentstringRequired\n    \n    PaymentIntent ID\n    \n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/confirm\\_payment\\_intent\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/confirm_payment_intent \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_1NrpbFBHO5VeT9SUiCEDMdc8\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"collect_payment_method\": {      \"payment_intent\": \"pi_1NrpbFBHO5VeT9SUiCEDMdc8\"    },    \"status\": \"in_progress\",    \"type\": \"confirm_payment_intent\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```",
  "title": "List all Readers | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/physical_bundles",
  "markdown": "# Physical Bundles | Stripe API Reference\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [The Physical Bundle object](https://docs.stripe.com/api/issuing/physical_bundles/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Information about the features available for this physical bundle.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Friendly display name.\n    \n*   Whether this physical bundle can be used to create cards.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Can be used to create cards that fulfill immediately. |\n    | `inactive`<br><br>Cannot be used to create cards. |\n    | `review`<br><br>Can be used to create cards but cards will only be fulfilled when this physical bundle is activated. |\n    \n*   Whether this physical bundle is a standard Stripe offering or custom-made for you.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `custom`<br><br>Available only to you, you manage design and inventory. |\n    | `standard`<br><br>Publicly available, Stripe manages design and inventory. |\n    \n\nThe Physical Bundle object\n\n```\n{  \"id\": \"ics_NLuXJPDYSTjFON\",  \"object\": \"issuing.physical_bundle\",  \"livemode\": false,  \"name\": \"US Visa Credit White\",  \"features\": {    \"card_logo\": \"required\",    \"carrier_text\": \"optional\"  },  \"status\": \"active\",  \"type\": \"standard\"}\n```\n\n## [Retrieve a physical bundle](https://docs.stripe.com/api/issuing/physical_bundles/retrieve)\n\nRetrieves a physical bundle object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the physical bundle object.\n\nGET /v1/issuing/physical\\_bundles/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/physical_bundles/ics_NLuXJPDYSTjFON \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ics_NLuXJPDYSTjFON\",  \"object\": \"issuing.physical_bundle\",  \"livemode\": false,  \"name\": \"US Visa Credit White\",  \"features\": {    \"card_logo\": \"required\",    \"carrier_text\": \"optional\"  },  \"status\": \"active\",  \"type\": \"standard\"}\n```\n\n## [List all physical bundles](https://docs.stripe.com/api/issuing/physical_bundles/list)\n\nReturns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return physical bundles with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Can be used to create cards that fulfill immediately. |\n    | `inactive`<br><br>Cannot be used to create cards. |\n    | `review`<br><br>Can be used to create cards but cards will only be fulfilled when this physical bundle is activated. |\n    \n*   Only return physical bundles with the given type.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `custom`<br><br>Available only to you, you manage design and inventory. |\n    | `standard`<br><br>Publicly available, Stripe manages design and inventory. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cards, starting after card `starting_after`. Each entry in the array is a separate physical bundle object. If no more cards are available, the resulting array will be empty.\n\nGET /v1/issuing/physical\\_bundles\n\n```\ncurl -G https://api.stripe.com/v1/issuing/physical_bundles \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/physical_bundles\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ics_NLuXJPDYSTjFON\",      \"object\": \"issuing.physical_bundle\",      \"livemode\": false,      \"name\": \"US Visa Credit White\",      \"features\": {        \"card_logo\": \"required\",        \"carrier_text\": \"optional\"      },      \"status\": \"active\",      \"type\": \"standard\"    }    {...}    {...}  ],}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Physical Bundles | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/personalization_designs/retrieve",
  "markdown": "# Retrieve a personalization design | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fissuing%2Fpersonalization_designs%2Fretrieve)\n\nRetrieves a personalization design object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the personalization design object.\n\nGET /v1/issuing/personalization\\_designs/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": true,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"review\"}\n```\n\n## [List all personalization designs](https://docs.stripe.com/api/issuing/personalization_designs/list)\n\nReturns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   #### \n    \n    lookup\\_keysarray of strings\n    \n    Only return personalization designs with the given lookup keys.\n    \n*   Only return personalization designs with the given preferences.\n    \n*   Only return personalization designs with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Personalization design can be used to create cards that fulfill immediately. |\n    | `inactive`<br><br>Personalization design cannot be used to create cards because it was deactivated. |\n    | `rejected`<br><br>Personalization design cannot be used to create cards because it was rejected by design review. |\n    | `review`<br><br>Personalization design can be used to create cards but cards will only be fulfilled once the personalization design is activated. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cards, starting after card `starting_after`. Each entry in the array is a separate personalization design object. If no more cards are available, the resulting array will be empty.\n\nGET /v1/issuing/personalization\\_designs\n\n```\ncurl -G https://api.stripe.com/v1/issuing/personalization_designs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/personalization_designs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ipcd_Oiw9GXcFRE81LZ\",      \"object\": \"issuing.personalization_design\",      \"livemode\": true,      \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",      \"carrier_text\": null,      \"lookup_key\": \"my_card_design_lookup_key\",      \"metadata\": {},      \"name\": \"My personalization design name\",      \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",      \"preferences\": {        \"is_default\": false      },      \"rejection_reasons\": {        \"card_logo\": [],        \"carrier_text\": []      },      \"status\": \"review\"    }    {...}    {...}  ],}\n```\n\n## [Activate a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/activate_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `active`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/activate\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/activate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"active\"}\n```\n\n## [Deactivate a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/deactivate_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `inactive`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/deactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/deactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"inactive\"}\n```\n\n## [Reject a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/reject_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `rejected`.\n\n### Parameters\n\n*   #### \n    \n    rejection\\_reasonsobjectRequired\n    \n    The reason(s) the personalization design was rejected.\n    \n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/reject\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/reject \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"rejection_reasons[card_logo][]\"=network_name \\  -d \"rejection_reasons[card_logo][]\"=inappropriate \\  -d \"rejection_reasons[carrier_text][]\"=other\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [      \"network_name\",      \"inappropriate\"    ],    \"carrier_text\": [      \"other\"    ]  },  \"status\": \"rejected\"}\n```",
  "title": "Retrieve a personalization design | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/physical_bundles/retrieve",
  "markdown": "# Retrieve a physical bundle | Stripe API Reference\n\nRetrieves a physical bundle object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the physical bundle object.\n\nGET /v1/issuing/physical\\_bundles/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/physical_bundles/ics_NLuXJPDYSTjFON \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ics_NLuXJPDYSTjFON\",  \"object\": \"issuing.physical_bundle\",  \"livemode\": false,  \"name\": \"US Visa Credit White\",  \"features\": {    \"card_logo\": \"required\",    \"carrier_text\": \"optional\"  },  \"status\": \"active\",  \"type\": \"standard\"}\n```\n\n## [List all physical bundles](https://docs.stripe.com/api/issuing/physical_bundles/list)\n\nReturns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return physical bundles with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Can be used to create cards that fulfill immediately. |\n    | `inactive`<br><br>Cannot be used to create cards. |\n    | `review`<br><br>Can be used to create cards but cards will only be fulfilled when this physical bundle is activated. |\n    \n*   Only return physical bundles with the given type.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `custom`<br><br>Available only to you, you manage design and inventory. |\n    | `standard`<br><br>Publicly available, Stripe manages design and inventory. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cards, starting after card `starting_after`. Each entry in the array is a separate physical bundle object. If no more cards are available, the resulting array will be empty.\n\nGET /v1/issuing/physical\\_bundles\n\n```\ncurl -G https://api.stripe.com/v1/issuing/physical_bundles \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/physical_bundles\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ics_NLuXJPDYSTjFON\",      \"object\": \"issuing.physical_bundle\",      \"livemode\": false,      \"name\": \"US Visa Credit White\",      \"features\": {        \"card_logo\": \"required\",        \"carrier_text\": \"optional\"      },      \"status\": \"active\",      \"type\": \"standard\"    }    {...}    {...}  ],}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a physical bundle | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/readers/cancel_action",
  "markdown": "# Cancel the current reader action\n\nCancels the current reader action.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/cancel\\_action\n\n```\ncurl -X POST https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/cancel_action \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1695402450407,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Collect inputs using a Reader](https://docs.stripe.com/api/terminal/readers/collect_inputs)Preview feature\n\nInitiates an input collection flow on a Reader.\n\n### Parameters\n\n*   #### \n    \n    inputsarray of objectsRequired\n    \n    List of inputs to be collected using the Reader\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/collect\\_inputs\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_OXYJvwsea7PDiDHNciXRkytb/collect_inputs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"inputs[0][type]\"=signature \\  -d \"inputs[0][custom_text][title]\"=Signature \\  -d \"inputs[0][custom_text][description]\"=\"Please sign below\" \\  -d \"inputs[0][custom_text][submit_button]\"=Submit \\  -d \"inputs[0][custom_text][skip_button]\"=Skip \\  -d \"inputs[0][required]\"=false \\  -d \"inputs[1][type]\"=selection \\  -d \"inputs[1][custom_text][title]\"=Selection \\  -d \"inputs[1][custom_text][description]\"=\"Please select one\" \\  -d \"inputs[1][required]\"=true \\  -d \"inputs[1][selection][choices][0][style]\"=primary \\  -d \"inputs[1][selection][choices][0][value]\"=choice_1 \\  -d \"inputs[1][selection][choices][1][style]\"=secondary \\  -d \"inputs[1][selection][choices][1][value]\"=choice_2 \\  -d \"inputs[2][type]\"=email \\  -d \"inputs[2][custom_text][title]\"=\"Enter your email\" \\  --data-urlencode \"inputs[2][custom_text][description]\"=\"We'll send updates on your order and occasional deals\" \\  -d \"inputs[2][custom_text][submit_button]\"=Submit \\  -d \"inputs[2][custom_text][skip_button]\"=Skip \\  -d \"inputs[2][required]\"=false\n```\n\n```\n{  \"id\": \"tmr_OXYJvwsea7PDiDHNciXRkytb\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"collect_inputs\": {      \"inputs\": [        {          \"type\": \"signature\",          \"custom_text\": {            \"title\": \"Signature\",            \"description\": \"Please sign below\",            \"submit_button\": \"Submit\",            \"skip_button\": \"Skip\"          },          \"required\": false,          \"value\": null        },        {          \"type\": \"selection\",          \"custom_text\": {            \"title\": \"Selection\",            \"description\": \"Please select one\"          },          \"required\": true,          \"selection\": {            \"choices\": [              {                \"style\": \"primary\",                \"value\": \"choice_1\"              },              {                \"style\": \"secondary\",                \"value\": \"choice_2\"              }            ],            \"value\": null          }        },        {          \"type\": \"email\",          \"custom_text\": {            \"title\": \"Enter your email\",            \"description\": \"We'll send updates on your order and occasional deals\",            \"submit_button\": \"Submit\",            \"skip_button\": \"Skip\"          },          \"required\": false,          \"value\": null        }      ]    },    \"status\": \"in_progress\",    \"type\": \"collect_inputs\"  },  \"device_deploy_group\": null,  \"device_sw_version\": null,  \"device_type\": \"bbpos_wisepos_e\",  \"ip_address\": \"192.168.2.2\",  \"label\": \"Blue Rabbit\",  \"livemode\": false,  \"location\": null,  \"metadata\": {},  \"serial_number\": \"123-456-789\",  \"software\": null,  \"status\": \"online\"}\n```\n\n## [Confirm a PaymentIntent on the Reader](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)Preview feature\n\nFinalizes a payment on a Reader.\n\n### Parameters\n\n*   #### \n    \n    payment\\_intentstringRequired\n    \n    PaymentIntent ID\n    \n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/confirm\\_payment\\_intent\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/confirm_payment_intent \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_1NrpbFBHO5VeT9SUiCEDMdc8\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"collect_payment_method\": {      \"payment_intent\": \"pi_1NrpbFBHO5VeT9SUiCEDMdc8\"    },    \"status\": \"in_progress\",    \"type\": \"confirm_payment_intent\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Hand-off a PaymentIntent to a Reader and collect card details](https://docs.stripe.com/api/terminal/readers/collect_payment_method)Preview feature\n\nInitiates a payment flow on a Reader and updates the PaymentIntent with card details before manual confirmation.\n\n### Parameters\n\n*   #### \n    \n    payment\\_intentstringRequired\n    \n    PaymentIntent ID\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/collect\\_payment\\_method\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/collect_payment_method \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_1NrpbFBHO5VeT9SUiCEDMdc8\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"collect_payment_method\": {      \"payment_intent\": \"pi_1NrpbFBHO5VeT9SUiCEDMdc8\"    },    \"status\": \"in_progress\",    \"type\": \"collect_payment_method\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Hand-off a PaymentIntent to a Reader](https://docs.stripe.com/api/terminal/readers/process_payment_intent)\n\nInitiates a payment flow on a Reader.\n\n### Parameters\n\n*   #### \n    \n    payment\\_intentstringRequired\n    \n    PaymentIntent ID\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/process\\_payment\\_intent\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/process_payment_intent \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_3NtEKRLkdIwHu7ix3crEirSx\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"process_payment_intent\": {      \"payment_intent\": \"pi_3NtEKRLkdIwHu7ix3crEirSx\"    },    \"status\": \"in_progress\",    \"type\": \"process_payment_intent\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1695408232226,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```",
  "title": "Cancel the current reader action | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/readers/delete",
  "markdown": "# Delete a Reader | Stripe API Reference\n\nDeletes a `Reader` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `Reader` object that was deleted.\n\nDELETE /v1/terminal/readers/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"deleted\": true}\n```\n\n## [Cancel the current reader action](https://docs.stripe.com/api/terminal/readers/cancel_action)\n\nCancels the current reader action.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/cancel\\_action\n\n```\ncurl -X POST https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/cancel_action \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1695402450407,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Collect inputs using a Reader](https://docs.stripe.com/api/terminal/readers/collect_inputs)Preview feature\n\nInitiates an input collection flow on a Reader.\n\n### Parameters\n\n*   #### \n    \n    inputsarray of objectsRequired\n    \n    List of inputs to be collected using the Reader\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/collect\\_inputs\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_OXYJvwsea7PDiDHNciXRkytb/collect_inputs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"inputs[0][type]\"=signature \\  -d \"inputs[0][custom_text][title]\"=Signature \\  -d \"inputs[0][custom_text][description]\"=\"Please sign below\" \\  -d \"inputs[0][custom_text][submit_button]\"=Submit \\  -d \"inputs[0][custom_text][skip_button]\"=Skip \\  -d \"inputs[0][required]\"=false \\  -d \"inputs[1][type]\"=selection \\  -d \"inputs[1][custom_text][title]\"=Selection \\  -d \"inputs[1][custom_text][description]\"=\"Please select one\" \\  -d \"inputs[1][required]\"=true \\  -d \"inputs[1][selection][choices][0][style]\"=primary \\  -d \"inputs[1][selection][choices][0][value]\"=choice_1 \\  -d \"inputs[1][selection][choices][1][style]\"=secondary \\  -d \"inputs[1][selection][choices][1][value]\"=choice_2 \\  -d \"inputs[2][type]\"=email \\  -d \"inputs[2][custom_text][title]\"=\"Enter your email\" \\  --data-urlencode \"inputs[2][custom_text][description]\"=\"We'll send updates on your order and occasional deals\" \\  -d \"inputs[2][custom_text][submit_button]\"=Submit \\  -d \"inputs[2][custom_text][skip_button]\"=Skip \\  -d \"inputs[2][required]\"=false\n```\n\n```\n{  \"id\": \"tmr_OXYJvwsea7PDiDHNciXRkytb\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"collect_inputs\": {      \"inputs\": [        {          \"type\": \"signature\",          \"custom_text\": {            \"title\": \"Signature\",            \"description\": \"Please sign below\",            \"submit_button\": \"Submit\",            \"skip_button\": \"Skip\"          },          \"required\": false,          \"value\": null        },        {          \"type\": \"selection\",          \"custom_text\": {            \"title\": \"Selection\",            \"description\": \"Please select one\"          },          \"required\": true,          \"selection\": {            \"choices\": [              {                \"style\": \"primary\",                \"value\": \"choice_1\"              },              {                \"style\": \"secondary\",                \"value\": \"choice_2\"              }            ],            \"value\": null          }        },        {          \"type\": \"email\",          \"custom_text\": {            \"title\": \"Enter your email\",            \"description\": \"We'll send updates on your order and occasional deals\",            \"submit_button\": \"Submit\",            \"skip_button\": \"Skip\"          },          \"required\": false,          \"value\": null        }      ]    },    \"status\": \"in_progress\",    \"type\": \"collect_inputs\"  },  \"device_deploy_group\": null,  \"device_sw_version\": null,  \"device_type\": \"bbpos_wisepos_e\",  \"ip_address\": \"192.168.2.2\",  \"label\": \"Blue Rabbit\",  \"livemode\": false,  \"location\": null,  \"metadata\": {},  \"serial_number\": \"123-456-789\",  \"software\": null,  \"status\": \"online\"}\n```\n\n## [Confirm a PaymentIntent on the Reader](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)Preview feature\n\nFinalizes a payment on a Reader.\n\n### Parameters\n\n*   #### \n    \n    payment\\_intentstringRequired\n    \n    PaymentIntent ID\n    \n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/confirm\\_payment\\_intent\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/confirm_payment_intent \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_1NrpbFBHO5VeT9SUiCEDMdc8\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"collect_payment_method\": {      \"payment_intent\": \"pi_1NrpbFBHO5VeT9SUiCEDMdc8\"    },    \"status\": \"in_progress\",    \"type\": \"confirm_payment_intent\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Hand-off a PaymentIntent to a Reader and collect card details](https://docs.stripe.com/api/terminal/readers/collect_payment_method)Preview feature\n\nInitiates a payment flow on a Reader and updates the PaymentIntent with card details before manual confirmation.\n\n### Parameters\n\n*   #### \n    \n    payment\\_intentstringRequired\n    \n    PaymentIntent ID\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/collect\\_payment\\_method\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/collect_payment_method \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_1NrpbFBHO5VeT9SUiCEDMdc8\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"collect_payment_method\": {      \"payment_intent\": \"pi_1NrpbFBHO5VeT9SUiCEDMdc8\"    },    \"status\": \"in_progress\",    \"type\": \"collect_payment_method\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```",
  "title": "Delete a Reader | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/readers/collect_inputs",
  "markdown": "# Collect inputs using a Reader\n\n## [Collect inputs using a Reader](https://docs.stripe.com/api/terminal/readers/collect_inputs)Preview feature\n\nInitiates an input collection flow on a Reader.\n\n### Parameters\n\n*   #### \n    \n    inputsarray of objectsRequired\n    \n    List of inputs to be collected using the Reader\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/collect\\_inputs\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_OXYJvwsea7PDiDHNciXRkytb/collect_inputs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"inputs[0][type]\"=signature \\  -d \"inputs[0][custom_text][title]\"=Signature \\  -d \"inputs[0][custom_text][description]\"=\"Please sign below\" \\  -d \"inputs[0][custom_text][submit_button]\"=Submit \\  -d \"inputs[0][custom_text][skip_button]\"=Skip \\  -d \"inputs[0][required]\"=false \\  -d \"inputs[1][type]\"=selection \\  -d \"inputs[1][custom_text][title]\"=Selection \\  -d \"inputs[1][custom_text][description]\"=\"Please select one\" \\  -d \"inputs[1][required]\"=true \\  -d \"inputs[1][selection][choices][0][style]\"=primary \\  -d \"inputs[1][selection][choices][0][value]\"=choice_1 \\  -d \"inputs[1][selection][choices][1][style]\"=secondary \\  -d \"inputs[1][selection][choices][1][value]\"=choice_2 \\  -d \"inputs[2][type]\"=email \\  -d \"inputs[2][custom_text][title]\"=\"Enter your email\" \\  --data-urlencode \"inputs[2][custom_text][description]\"=\"We'll send updates on your order and occasional deals\" \\  -d \"inputs[2][custom_text][submit_button]\"=Submit \\  -d \"inputs[2][custom_text][skip_button]\"=Skip \\  -d \"inputs[2][required]\"=false\n```\n\n```\n{  \"id\": \"tmr_OXYJvwsea7PDiDHNciXRkytb\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"collect_inputs\": {      \"inputs\": [        {          \"type\": \"signature\",          \"custom_text\": {            \"title\": \"Signature\",            \"description\": \"Please sign below\",            \"submit_button\": \"Submit\",            \"skip_button\": \"Skip\"          },          \"required\": false,          \"value\": null        },        {          \"type\": \"selection\",          \"custom_text\": {            \"title\": \"Selection\",            \"description\": \"Please select one\"          },          \"required\": true,          \"selection\": {            \"choices\": [              {                \"style\": \"primary\",                \"value\": \"choice_1\"              },              {                \"style\": \"secondary\",                \"value\": \"choice_2\"              }            ],            \"value\": null          }        },        {          \"type\": \"email\",          \"custom_text\": {            \"title\": \"Enter your email\",            \"description\": \"We'll send updates on your order and occasional deals\",            \"submit_button\": \"Submit\",            \"skip_button\": \"Skip\"          },          \"required\": false,          \"value\": null        }      ]    },    \"status\": \"in_progress\",    \"type\": \"collect_inputs\"  },  \"device_deploy_group\": null,  \"device_sw_version\": null,  \"device_type\": \"bbpos_wisepos_e\",  \"ip_address\": \"192.168.2.2\",  \"label\": \"Blue Rabbit\",  \"livemode\": false,  \"location\": null,  \"metadata\": {},  \"serial_number\": \"123-456-789\",  \"software\": null,  \"status\": \"online\"}\n```\n\n## [Confirm a PaymentIntent on the Reader](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)Preview feature\n\nFinalizes a payment on a Reader.\n\n### Parameters\n\n*   #### \n    \n    payment\\_intentstringRequired\n    \n    PaymentIntent ID\n    \n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/confirm\\_payment\\_intent\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/confirm_payment_intent \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_1NrpbFBHO5VeT9SUiCEDMdc8\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"collect_payment_method\": {      \"payment_intent\": \"pi_1NrpbFBHO5VeT9SUiCEDMdc8\"    },    \"status\": \"in_progress\",    \"type\": \"confirm_payment_intent\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Hand-off a PaymentIntent to a Reader and collect card details](https://docs.stripe.com/api/terminal/readers/collect_payment_method)Preview feature\n\nInitiates a payment flow on a Reader and updates the PaymentIntent with card details before manual confirmation.\n\n### Parameters\n\n*   #### \n    \n    payment\\_intentstringRequired\n    \n    PaymentIntent ID\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/collect\\_payment\\_method\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/collect_payment_method \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_1NrpbFBHO5VeT9SUiCEDMdc8\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"collect_payment_method\": {      \"payment_intent\": \"pi_1NrpbFBHO5VeT9SUiCEDMdc8\"    },    \"status\": \"in_progress\",    \"type\": \"collect_payment_method\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Hand-off a PaymentIntent to a Reader](https://docs.stripe.com/api/terminal/readers/process_payment_intent)\n\nInitiates a payment flow on a Reader.\n\n### Parameters\n\n*   #### \n    \n    payment\\_intentstringRequired\n    \n    PaymentIntent ID\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/process\\_payment\\_intent\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/process_payment_intent \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_3NtEKRLkdIwHu7ix3crEirSx\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"process_payment_intent\": {      \"payment_intent\": \"pi_3NtEKRLkdIwHu7ix3crEirSx\"    },    \"status\": \"in_progress\",    \"type\": \"process_payment_intent\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1695408232226,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Hand-off a SetupIntent to a Reader](https://docs.stripe.com/api/terminal/readers/process_setup_intent)\n\nInitiates a setup intent flow on a Reader.\n\n### Parameters\n\n*   #### \n    \n    customer\\_consent\\_collectedbooleanRequired\n    \n    Customer Consent Collected\n    \n*   #### \n    \n    setup\\_intentstringRequired\n    \n    SetupIntent ID\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/process\\_setup\\_intent\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/process_setup_intent \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer_consent_collected=true \\  -d setup_intent=seti_1NtEXHLkdIwHu7ixcBcUmqfe\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"process_setup_intent\": {      \"setup_intent\": \"seti_1NtEXHLkdIwHu7ixcBcUmqfe\"    },    \"status\": \"in_progress\",    \"type\": \"process_setup_intent\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```",
  "title": "Collect inputs using a Reader | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/readers/confirm_payment_intent",
  "markdown": "# Confirm a PaymentIntent on the Reader\n\n## [Confirm a PaymentIntent on the Reader](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)Preview feature\n\nFinalizes a payment on a Reader.\n\n### Parameters\n\n*   #### \n    \n    payment\\_intentstringRequired\n    \n    PaymentIntent ID\n    \n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/confirm\\_payment\\_intent\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/confirm_payment_intent \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_1NrpbFBHO5VeT9SUiCEDMdc8\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"collect_payment_method\": {      \"payment_intent\": \"pi_1NrpbFBHO5VeT9SUiCEDMdc8\"    },    \"status\": \"in_progress\",    \"type\": \"confirm_payment_intent\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Hand-off a PaymentIntent to a Reader and collect card details](https://docs.stripe.com/api/terminal/readers/collect_payment_method)Preview feature\n\nInitiates a payment flow on a Reader and updates the PaymentIntent with card details before manual confirmation.\n\n### Parameters\n\n*   #### \n    \n    payment\\_intentstringRequired\n    \n    PaymentIntent ID\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/collect\\_payment\\_method\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/collect_payment_method \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_1NrpbFBHO5VeT9SUiCEDMdc8\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"collect_payment_method\": {      \"payment_intent\": \"pi_1NrpbFBHO5VeT9SUiCEDMdc8\"    },    \"status\": \"in_progress\",    \"type\": \"collect_payment_method\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Hand-off a PaymentIntent to a Reader](https://docs.stripe.com/api/terminal/readers/process_payment_intent)\n\nInitiates a payment flow on a Reader.\n\n### Parameters\n\n*   #### \n    \n    payment\\_intentstringRequired\n    \n    PaymentIntent ID\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/process\\_payment\\_intent\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/process_payment_intent \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_3NtEKRLkdIwHu7ix3crEirSx\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"process_payment_intent\": {      \"payment_intent\": \"pi_3NtEKRLkdIwHu7ix3crEirSx\"    },    \"status\": \"in_progress\",    \"type\": \"process_payment_intent\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1695408232226,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Hand-off a SetupIntent to a Reader](https://docs.stripe.com/api/terminal/readers/process_setup_intent)\n\nInitiates a setup intent flow on a Reader.\n\n### Parameters\n\n*   #### \n    \n    customer\\_consent\\_collectedbooleanRequired\n    \n    Customer Consent Collected\n    \n*   #### \n    \n    setup\\_intentstringRequired\n    \n    SetupIntent ID\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/process\\_setup\\_intent\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/process_setup_intent \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer_consent_collected=true \\  -d setup_intent=seti_1NtEXHLkdIwHu7ixcBcUmqfe\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"process_setup_intent\": {      \"setup_intent\": \"seti_1NtEXHLkdIwHu7ixcBcUmqfe\"    },    \"status\": \"in_progress\",    \"type\": \"process_setup_intent\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Refund a Charge or a PaymentIntent in-person](https://docs.stripe.com/api/terminal/readers/refund_payment)\n\nInitiates a refund on a Reader\n\n### Parameters\n\n*   A positive integer in **cents** representing how much of this charge to refund.\n    \n*   ID of the Charge to refund.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   ID of the PaymentIntent to refund.\n    \n*   #### \n    \n    refund\\_application\\_feebooleanConnect only\n    \n    Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.\n    \n*   #### \n    \n    reverse\\_transferbooleanConnect only\n    \n    Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount). A transfer can be reversed only by the application that created the charge.\n    \n\n### More parameters\n\n*   #### \n    \n    refund\\_payment\\_configobject\n    \n\n### Returns\n\nReturns an updated `Reader` resource\n\nPOST /v1/terminal/readers/:id/refund\\_payment\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_njDFG9Z5k7y7KeQI8RmZYDYT/refund_payment \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_1NrpbFBHO5VeT9SUiCEDMdc8\n```\n\n```\n{  \"id\": \"tmr_njDFG9Z5k7y7KeQI8RmZYDYT\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"refund_payment\": {      \"payment_intent\": \"pi_1NrpbFBHO5VeT9SUiCEDMdc8\",      \"amount\": 1000    },    \"status\": \"in_progress\",    \"type\": \"refund_payment\"  },  \"device_deploy_group\": null,  \"device_sw_version\": null,  \"device_type\": \"bbpos_wisepos_e\",  \"ip_address\": \"192.168.2.2\",  \"label\": \"Blue Rabbit\",  \"livemode\": false,  \"location\": null,  \"metadata\": {},  \"serial_number\": \"123-456-789\",  \"software\": null,  \"status\": \"online\"}\n```",
  "title": "Confirm a PaymentIntent on the Reader | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/readers/collect_payment_method",
  "markdown": "# Hand-off a PaymentIntent to a Reader and collect card details\n\n## [Hand-off a PaymentIntent to a Reader and collect card details](https://docs.stripe.com/api/terminal/readers/collect_payment_method)Preview feature\n\nInitiates a payment flow on a Reader and updates the PaymentIntent with card details before manual confirmation.\n\n### Parameters\n\n*   #### \n    \n    payment\\_intentstringRequired\n    \n    PaymentIntent ID\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/collect\\_payment\\_method\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/collect_payment_method \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_1NrpbFBHO5VeT9SUiCEDMdc8\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"collect_payment_method\": {      \"payment_intent\": \"pi_1NrpbFBHO5VeT9SUiCEDMdc8\"    },    \"status\": \"in_progress\",    \"type\": \"collect_payment_method\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\nInitiates a payment flow on a Reader.\n\n### Parameters\n\n*   #### \n    \n    payment\\_intentstringRequired\n    \n    PaymentIntent ID\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/process\\_payment\\_intent\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/process_payment_intent \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_3NtEKRLkdIwHu7ix3crEirSx\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"process_payment_intent\": {      \"payment_intent\": \"pi_3NtEKRLkdIwHu7ix3crEirSx\"    },    \"status\": \"in_progress\",    \"type\": \"process_payment_intent\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1695408232226,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Hand-off a SetupIntent to a Reader](https://docs.stripe.com/api/terminal/readers/process_setup_intent)\n\nInitiates a setup intent flow on a Reader.\n\n### Parameters\n\n*   #### \n    \n    customer\\_consent\\_collectedbooleanRequired\n    \n    Customer Consent Collected\n    \n*   #### \n    \n    setup\\_intentstringRequired\n    \n    SetupIntent ID\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/process\\_setup\\_intent\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/process_setup_intent \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer_consent_collected=true \\  -d setup_intent=seti_1NtEXHLkdIwHu7ixcBcUmqfe\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"process_setup_intent\": {      \"setup_intent\": \"seti_1NtEXHLkdIwHu7ixcBcUmqfe\"    },    \"status\": \"in_progress\",    \"type\": \"process_setup_intent\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Refund a Charge or a PaymentIntent in-person](https://docs.stripe.com/api/terminal/readers/refund_payment)\n\nInitiates a refund on a Reader\n\n### Parameters\n\n*   A positive integer in **cents** representing how much of this charge to refund.\n    \n*   ID of the Charge to refund.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   ID of the PaymentIntent to refund.\n    \n*   #### \n    \n    refund\\_application\\_feebooleanConnect only\n    \n    Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.\n    \n*   #### \n    \n    reverse\\_transferbooleanConnect only\n    \n    Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount). A transfer can be reversed only by the application that created the charge.\n    \n\n### More parameters\n\n*   #### \n    \n    refund\\_payment\\_configobject\n    \n\n### Returns\n\nReturns an updated `Reader` resource\n\nPOST /v1/terminal/readers/:id/refund\\_payment\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_njDFG9Z5k7y7KeQI8RmZYDYT/refund_payment \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_1NrpbFBHO5VeT9SUiCEDMdc8\n```\n\n```\n{  \"id\": \"tmr_njDFG9Z5k7y7KeQI8RmZYDYT\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"refund_payment\": {      \"payment_intent\": \"pi_1NrpbFBHO5VeT9SUiCEDMdc8\",      \"amount\": 1000    },    \"status\": \"in_progress\",    \"type\": \"refund_payment\"  },  \"device_deploy_group\": null,  \"device_sw_version\": null,  \"device_type\": \"bbpos_wisepos_e\",  \"ip_address\": \"192.168.2.2\",  \"label\": \"Blue Rabbit\",  \"livemode\": false,  \"location\": null,  \"metadata\": {},  \"serial_number\": \"123-456-789\",  \"software\": null,  \"status\": \"online\"}\n```\n\n## [Set reader display](https://docs.stripe.com/api/terminal/readers/set_reader_display)\n\nSets reader display to show cart details.\n\n### Parameters\n\n*   Type\n    \n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/set\\_reader\\_display\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/set_reader_display \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=cart \\  -d \"cart[currency]\"=usd \\  -d \"cart[line_items][0][amount]\"=5100 \\  -d \"cart[line_items][0][description]\"=\"Red t-shirt\" \\  -d \"cart[line_items][0][quantity]\"=1 \\  -d \"cart[tax]\"=100 \\  -d \"cart[total]\"=5200\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"set_reader_display\": {      \"cart\": {        \"currency\": \"usd\",        \"line_items\": [          {            \"amount\": 5100,            \"description\": \"Red t-shirt\",            \"quantity\": 1          }        ],        \"tax\": 100,        \"total\": 5200      },      \"type\": \"cart\"    },    \"status\": \"in_progress\",    \"type\": \"set_reader_display\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1695166525506,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```",
  "title": "Hand-off a PaymentIntent to a Reader and collect card details | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/readers/process_payment_intent",
  "markdown": "# Hand-off a PaymentIntent to a Reader\n\nInitiates a payment flow on a Reader.\n\n### Parameters\n\n*   #### \n    \n    payment\\_intentstringRequired\n    \n    PaymentIntent ID\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/process\\_payment\\_intent\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/process_payment_intent \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_3NtEKRLkdIwHu7ix3crEirSx\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"process_payment_intent\": {      \"payment_intent\": \"pi_3NtEKRLkdIwHu7ix3crEirSx\"    },    \"status\": \"in_progress\",    \"type\": \"process_payment_intent\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1695408232226,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Hand-off a SetupIntent to a Reader](https://docs.stripe.com/api/terminal/readers/process_setup_intent)\n\nInitiates a setup intent flow on a Reader.\n\n### Parameters\n\n*   #### \n    \n    customer\\_consent\\_collectedbooleanRequired\n    \n    Customer Consent Collected\n    \n*   #### \n    \n    setup\\_intentstringRequired\n    \n    SetupIntent ID\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/process\\_setup\\_intent\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/process_setup_intent \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer_consent_collected=true \\  -d setup_intent=seti_1NtEXHLkdIwHu7ixcBcUmqfe\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"process_setup_intent\": {      \"setup_intent\": \"seti_1NtEXHLkdIwHu7ixcBcUmqfe\"    },    \"status\": \"in_progress\",    \"type\": \"process_setup_intent\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Refund a Charge or a PaymentIntent in-person](https://docs.stripe.com/api/terminal/readers/refund_payment)\n\nInitiates a refund on a Reader\n\n### Parameters\n\n*   A positive integer in **cents** representing how much of this charge to refund.\n    \n*   ID of the Charge to refund.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   ID of the PaymentIntent to refund.\n    \n*   #### \n    \n    refund\\_application\\_feebooleanConnect only\n    \n    Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.\n    \n*   #### \n    \n    reverse\\_transferbooleanConnect only\n    \n    Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount). A transfer can be reversed only by the application that created the charge.\n    \n\n### More parameters\n\n*   #### \n    \n    refund\\_payment\\_configobject\n    \n\n### Returns\n\nReturns an updated `Reader` resource\n\nPOST /v1/terminal/readers/:id/refund\\_payment\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_njDFG9Z5k7y7KeQI8RmZYDYT/refund_payment \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_1NrpbFBHO5VeT9SUiCEDMdc8\n```\n\n```\n{  \"id\": \"tmr_njDFG9Z5k7y7KeQI8RmZYDYT\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"refund_payment\": {      \"payment_intent\": \"pi_1NrpbFBHO5VeT9SUiCEDMdc8\",      \"amount\": 1000    },    \"status\": \"in_progress\",    \"type\": \"refund_payment\"  },  \"device_deploy_group\": null,  \"device_sw_version\": null,  \"device_type\": \"bbpos_wisepos_e\",  \"ip_address\": \"192.168.2.2\",  \"label\": \"Blue Rabbit\",  \"livemode\": false,  \"location\": null,  \"metadata\": {},  \"serial_number\": \"123-456-789\",  \"software\": null,  \"status\": \"online\"}\n```\n\n## [Set reader display](https://docs.stripe.com/api/terminal/readers/set_reader_display)\n\nSets reader display to show cart details.\n\n### Parameters\n\n*   Type\n    \n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/set\\_reader\\_display\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/set_reader_display \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=cart \\  -d \"cart[currency]\"=usd \\  -d \"cart[line_items][0][amount]\"=5100 \\  -d \"cart[line_items][0][description]\"=\"Red t-shirt\" \\  -d \"cart[line_items][0][quantity]\"=1 \\  -d \"cart[tax]\"=100 \\  -d \"cart[total]\"=5200\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"set_reader_display\": {      \"cart\": {        \"currency\": \"usd\",        \"line_items\": [          {            \"amount\": 5100,            \"description\": \"Red t-shirt\",            \"quantity\": 1          }        ],        \"tax\": 100,        \"total\": 5200      },      \"type\": \"cart\"    },    \"status\": \"in_progress\",    \"type\": \"set_reader_display\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1695166525506,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Simulate presenting a payment method](https://docs.stripe.com/api/terminal/readers/present_payment_method)Test helper\n\nPresents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.\n\n### Parameters\n\n*   Simulated data for the card\\_present payment method.\n    \n*   Simulated payment type.\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/readers/tmr_gLeqlF03xvlBympS9RfZqdpF/present_payment_method \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_gLeqlF03xvlBympS9RfZqdpF\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"process_payment_intent\": {      \"payment_intent\": \"pi_1Gt0582eZvKYlo2CGSidzWqK\"    },    \"status\": \"succeeded\",    \"type\": \"process_payment_intent\"  },  \"device_sw_version\": null,  \"device_type\": \"bbpos_wisepos_e\",  \"ip_address\": \"192.168.2.2\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": null,  \"livemode\": false,  \"location\": null,  \"metadata\": {},  \"serial_number\": \"123-456-789\",  \"status\": \"online\"}\n```",
  "title": "Hand-off a PaymentIntent to a Reader | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_skus/list",
  "markdown": "# List all Terminal Hardware SKUs\n\n## [List all Terminal Hardware SKUs](https://docs.stripe.com/api/terminal/hardware_skus/list)Preview feature\n\nList all `TerminalHardwareSKU` objects.\n\n### Parameters\n\n*   The ISO 3166-1 alpha-2 country code representing the country associated with the SKUs to be retrieved. Available country codes can be listed with the [List Country Specs](https://docs.stripe.com/api#list_country_specs) endpoint.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of terminal hardware SKUs. Each entry in the array is a separate SKU object.\n\nGET /v1/terminal/hardware\\_skus\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_skus \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/hardware_skus\",  \"has_more\": false,  \"data\": [    {      \"id\": \"thsku_L5fys7HZ5o02Nc\",      \"object\": \"terminal.hardware_sku\",      \"amount\": 450,      \"country\": \"AT\",      \"currency\": \"usd\",      \"orderable\": 100,      \"product\": \"thpr_MJfof7SLvdkG6T\",      \"status\": \"available\",      \"unavailable_after\": null    }    {...}    {...}  ],}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all Terminal Hardware SKUs | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/readers/process_setup_intent",
  "markdown": "# Hand-off a SetupIntent to a Reader\n\nInitiates a setup intent flow on a Reader.\n\n### Parameters\n\n*   #### \n    \n    customer\\_consent\\_collectedbooleanRequired\n    \n    Customer Consent Collected\n    \n*   #### \n    \n    setup\\_intentstringRequired\n    \n    SetupIntent ID\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/process\\_setup\\_intent\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/process_setup_intent \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer_consent_collected=true \\  -d setup_intent=seti_1NtEXHLkdIwHu7ixcBcUmqfe\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"process_setup_intent\": {      \"setup_intent\": \"seti_1NtEXHLkdIwHu7ixcBcUmqfe\"    },    \"status\": \"in_progress\",    \"type\": \"process_setup_intent\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Refund a Charge or a PaymentIntent in-person](https://docs.stripe.com/api/terminal/readers/refund_payment)\n\nInitiates a refund on a Reader\n\n### Parameters\n\n*   A positive integer in **cents** representing how much of this charge to refund.\n    \n*   ID of the Charge to refund.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   ID of the PaymentIntent to refund.\n    \n*   #### \n    \n    refund\\_application\\_feebooleanConnect only\n    \n    Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.\n    \n*   #### \n    \n    reverse\\_transferbooleanConnect only\n    \n    Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount). A transfer can be reversed only by the application that created the charge.\n    \n\n### More parameters\n\n*   #### \n    \n    refund\\_payment\\_configobject\n    \n\n### Returns\n\nReturns an updated `Reader` resource\n\nPOST /v1/terminal/readers/:id/refund\\_payment\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_njDFG9Z5k7y7KeQI8RmZYDYT/refund_payment \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_1NrpbFBHO5VeT9SUiCEDMdc8\n```\n\n```\n{  \"id\": \"tmr_njDFG9Z5k7y7KeQI8RmZYDYT\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"refund_payment\": {      \"payment_intent\": \"pi_1NrpbFBHO5VeT9SUiCEDMdc8\",      \"amount\": 1000    },    \"status\": \"in_progress\",    \"type\": \"refund_payment\"  },  \"device_deploy_group\": null,  \"device_sw_version\": null,  \"device_type\": \"bbpos_wisepos_e\",  \"ip_address\": \"192.168.2.2\",  \"label\": \"Blue Rabbit\",  \"livemode\": false,  \"location\": null,  \"metadata\": {},  \"serial_number\": \"123-456-789\",  \"software\": null,  \"status\": \"online\"}\n```\n\n## [Set reader display](https://docs.stripe.com/api/terminal/readers/set_reader_display)\n\nSets reader display to show cart details.\n\n### Parameters\n\n*   Type\n    \n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/set\\_reader\\_display\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/set_reader_display \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=cart \\  -d \"cart[currency]\"=usd \\  -d \"cart[line_items][0][amount]\"=5100 \\  -d \"cart[line_items][0][description]\"=\"Red t-shirt\" \\  -d \"cart[line_items][0][quantity]\"=1 \\  -d \"cart[tax]\"=100 \\  -d \"cart[total]\"=5200\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"set_reader_display\": {      \"cart\": {        \"currency\": \"usd\",        \"line_items\": [          {            \"amount\": 5100,            \"description\": \"Red t-shirt\",            \"quantity\": 1          }        ],        \"tax\": 100,        \"total\": 5200      },      \"type\": \"cart\"    },    \"status\": \"in_progress\",    \"type\": \"set_reader_display\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1695166525506,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Simulate presenting a payment method](https://docs.stripe.com/api/terminal/readers/present_payment_method)Test helper\n\nPresents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.\n\n### Parameters\n\n*   Simulated data for the card\\_present payment method.\n    \n*   Simulated payment type.\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/readers/tmr_gLeqlF03xvlBympS9RfZqdpF/present_payment_method \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_gLeqlF03xvlBympS9RfZqdpF\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"process_payment_intent\": {      \"payment_intent\": \"pi_1Gt0582eZvKYlo2CGSidzWqK\"    },    \"status\": \"succeeded\",    \"type\": \"process_payment_intent\"  },  \"device_sw_version\": null,  \"device_type\": \"bbpos_wisepos_e\",  \"ip_address\": \"192.168.2.2\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": null,  \"livemode\": false,  \"location\": null,  \"metadata\": {},  \"serial_number\": \"123-456-789\",  \"status\": \"online\"}\n```\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Hand-off a SetupIntent to a Reader | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/readers/refund_payment",
  "markdown": "# Refund a Charge or a PaymentIntent in-person\n\nInitiates a refund on a Reader\n\n### Parameters\n\n*   A positive integer in **cents** representing how much of this charge to refund.\n    \n*   ID of the Charge to refund.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   ID of the PaymentIntent to refund.\n    \n*   #### \n    \n    refund\\_application\\_feebooleanConnect only\n    \n    Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.\n    \n*   #### \n    \n    reverse\\_transferbooleanConnect only\n    \n    Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount). A transfer can be reversed only by the application that created the charge.\n    \n\n### More parameters\n\n*   #### \n    \n    refund\\_payment\\_configobject\n    \n\n### Returns\n\nReturns an updated `Reader` resource\n\nPOST /v1/terminal/readers/:id/refund\\_payment\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_njDFG9Z5k7y7KeQI8RmZYDYT/refund_payment \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_intent=pi_1NrpbFBHO5VeT9SUiCEDMdc8\n```\n\n```\n{  \"id\": \"tmr_njDFG9Z5k7y7KeQI8RmZYDYT\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"refund_payment\": {      \"payment_intent\": \"pi_1NrpbFBHO5VeT9SUiCEDMdc8\",      \"amount\": 1000    },    \"status\": \"in_progress\",    \"type\": \"refund_payment\"  },  \"device_deploy_group\": null,  \"device_sw_version\": null,  \"device_type\": \"bbpos_wisepos_e\",  \"ip_address\": \"192.168.2.2\",  \"label\": \"Blue Rabbit\",  \"livemode\": false,  \"location\": null,  \"metadata\": {},  \"serial_number\": \"123-456-789\",  \"software\": null,  \"status\": \"online\"}\n```\n\n## [Set reader display](https://docs.stripe.com/api/terminal/readers/set_reader_display)\n\nSets reader display to show cart details.\n\n### Parameters\n\n*   Type\n    \n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/set\\_reader\\_display\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/set_reader_display \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=cart \\  -d \"cart[currency]\"=usd \\  -d \"cart[line_items][0][amount]\"=5100 \\  -d \"cart[line_items][0][description]\"=\"Red t-shirt\" \\  -d \"cart[line_items][0][quantity]\"=1 \\  -d \"cart[tax]\"=100 \\  -d \"cart[total]\"=5200\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"set_reader_display\": {      \"cart\": {        \"currency\": \"usd\",        \"line_items\": [          {            \"amount\": 5100,            \"description\": \"Red t-shirt\",            \"quantity\": 1          }        ],        \"tax\": 100,        \"total\": 5200      },      \"type\": \"cart\"    },    \"status\": \"in_progress\",    \"type\": \"set_reader_display\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1695166525506,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Simulate presenting a payment method](https://docs.stripe.com/api/terminal/readers/present_payment_method)Test helper\n\nPresents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.\n\n### Parameters\n\n*   Simulated data for the card\\_present payment method.\n    \n*   Simulated payment type.\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/readers/tmr_gLeqlF03xvlBympS9RfZqdpF/present_payment_method \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_gLeqlF03xvlBympS9RfZqdpF\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"process_payment_intent\": {      \"payment_intent\": \"pi_1Gt0582eZvKYlo2CGSidzWqK\"    },    \"status\": \"succeeded\",    \"type\": \"process_payment_intent\"  },  \"device_sw_version\": null,  \"device_type\": \"bbpos_wisepos_e\",  \"ip_address\": \"192.168.2.2\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": null,  \"livemode\": false,  \"location\": null,  \"metadata\": {},  \"serial_number\": \"123-456-789\",  \"status\": \"online\"}\n```\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Refund a Charge or a PaymentIntent in-person | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_shipping_methods",
  "markdown": "# Terminal Hardware Shipping Method | Stripe API Reference\n\n## [Terminal Hardware Shipping Method](https://docs.stripe.com/api/terminal/hardware_shipping_methods)Preview feature\n\n## [The Terminal Hardware Shipping Method object](https://docs.stripe.com/api/terminal/hardware_shipping_methods/object)Preview feature\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The country in which this Shipping Method is available.\n    \n*   #### \n    \n    estimated\\_delivery\\_windowobject\n    \n    The estimated delivery period containing the estimated minimum and maximum delivery dates. These dates are not guaranteed.\n    \n*   The name of the Terminal Hardware Shipping Method.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `express`<br><br>Express |\n    | `priority`<br><br>Priority |\n    | `standard`<br><br>Standard |\n    \n\n### More attributes\n\n*   #### \n    \n    unavailable\\_afternullable integer\n    \n\nThe Terminal Hardware Shipping Method object\n\n```\n{  \"id\": \"thsm_MfuTjLaPEgXMa4\",  \"object\": \"terminal.hardware_shipping_method\",  \"country\": \"US\",  \"estimated_delivery_window\": {    \"maximum_date\": \"2023-10-03\",    \"minimum_date\": \"2023-10-03\"  },  \"name\": \"standard\",  \"status\": \"available\",  \"unavailable_after\": null}\n```\n\n## [Retrieve a Terminal Hardware Shipping Method](https://docs.stripe.com/api/terminal/hardware_shipping_methods/retrieve)Preview feature\n\nRetrieves a `TerminalHardwareShippingMethod` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareShippingMethod` object if a valid identifier was provided.\n\nGET /v1/terminal/hardware\\_shipping\\_methods/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_shipping_methods/thsm_MfuTjLaPEgXMa4 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thsm_MfuTjLaPEgXMa4\",  \"object\": \"terminal.hardware_shipping_method\",  \"country\": \"US\",  \"estimated_delivery_window\": {    \"maximum_date\": \"2023-10-03\",    \"minimum_date\": \"2023-10-03\"  },  \"name\": \"standard\",  \"status\": \"available\",  \"unavailable_after\": null}\n```\n\n## [List all Terminal Hardware Shipping Methods](https://docs.stripe.com/api/terminal/hardware_shipping_methods/list)Preview feature\n\nList all `TerminalHardwareShippingMethod` objects.\n\n### Parameters\n\n*   Only return Shipping Methods that have the given country. If provided, country must be a two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n    \n*   Only return Shipping Methods that have the given name.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `express`<br><br>Express |\n    | `priority`<br><br>Priority |\n    | `standard`<br><br>Standard |\n    \n*   Only return Shipping Methods that have the given status. Defaults to Available.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `available`<br><br>Available for new orders. |\n    | `unavailable`<br><br>Can no longer be used for order creation. |\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of terminal hardware shipping methods. Each entry in the array is a separate ShippingMethod object.\n\nGET /v1/terminal/hardware\\_shipping\\_methods\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_shipping_methods \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/hardware_shipping_methods\",  \"has_more\": false,  \"data\": [    {      \"id\": \"thsm_MfuTjLaPEgXMa4\",      \"object\": \"terminal.hardware_shipping_method\",      \"country\": \"US\",      \"estimated_delivery_window\": {        \"maximum_date\": \"2023-10-03\",        \"minimum_date\": \"2023-10-03\"      },      \"name\": \"standard\",      \"status\": \"available\",      \"unavailable_after\": null    }    {...}    {...}  ],}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Terminal Hardware Shipping Method | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_shipping_methods/retrieve",
  "markdown": "# Retrieve a Terminal Hardware Shipping Method\n\n## [Retrieve a Terminal Hardware Shipping Method](https://docs.stripe.com/api/terminal/hardware_shipping_methods/retrieve)Preview feature\n\nRetrieves a `TerminalHardwareShippingMethod` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareShippingMethod` object if a valid identifier was provided.\n\nGET /v1/terminal/hardware\\_shipping\\_methods/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_shipping_methods/thsm_MfuTjLaPEgXMa4 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thsm_MfuTjLaPEgXMa4\",  \"object\": \"terminal.hardware_shipping_method\",  \"country\": \"US\",  \"estimated_delivery_window\": {    \"maximum_date\": \"2023-10-03\",    \"minimum_date\": \"2023-10-03\"  },  \"name\": \"standard\",  \"status\": \"available\",  \"unavailable_after\": null}\n```\n\n## [List all Terminal Hardware Shipping Methods](https://docs.stripe.com/api/terminal/hardware_shipping_methods/list)Preview feature\n\nList all `TerminalHardwareShippingMethod` objects.\n\n### Parameters\n\n*   Only return Shipping Methods that have the given country. If provided, country must be a two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n    \n*   Only return Shipping Methods that have the given name.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `express`<br><br>Express |\n    | `priority`<br><br>Priority |\n    | `standard`<br><br>Standard |\n    \n*   Only return Shipping Methods that have the given status. Defaults to Available.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `available`<br><br>Available for new orders. |\n    | `unavailable`<br><br>Can no longer be used for order creation. |\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of terminal hardware shipping methods. Each entry in the array is a separate ShippingMethod object.\n\nGET /v1/terminal/hardware\\_shipping\\_methods\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_shipping_methods \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/hardware_shipping_methods\",  \"has_more\": false,  \"data\": [    {      \"id\": \"thsm_MfuTjLaPEgXMa4\",      \"object\": \"terminal.hardware_shipping_method\",      \"country\": \"US\",      \"estimated_delivery_window\": {        \"maximum_date\": \"2023-10-03\",        \"minimum_date\": \"2023-10-03\"      },      \"name\": \"standard\",      \"status\": \"available\",      \"unavailable_after\": null    }    {...}    {...}  ],}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a Terminal Hardware Shipping Method | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/readers/set_reader_display",
  "markdown": "# Set reader display | Stripe API Reference\n\nSets reader display to show cart details.\n\n### Parameters\n\n*   Type\n    \n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/terminal/readers/:id/set\\_reader\\_display\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7/set_reader_display \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=cart \\  -d \"cart[currency]\"=usd \\  -d \"cart[line_items][0][amount]\"=5100 \\  -d \"cart[line_items][0][description]\"=\"Red t-shirt\" \\  -d \"cart[line_items][0][quantity]\"=1 \\  -d \"cart[tax]\"=100 \\  -d \"cart[total]\"=5200\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"set_reader_display\": {      \"cart\": {        \"currency\": \"usd\",        \"line_items\": [          {            \"amount\": 5100,            \"description\": \"Red t-shirt\",            \"quantity\": 1          }        ],        \"tax\": 100,        \"total\": 5200      },      \"type\": \"cart\"    },    \"status\": \"in_progress\",    \"type\": \"set_reader_display\"  },  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1695166525506,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Simulate presenting a payment method](https://docs.stripe.com/api/terminal/readers/present_payment_method)Test helper\n\nPresents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.\n\n### Parameters\n\n*   Simulated data for the card\\_present payment method.\n    \n*   Simulated payment type.\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/readers/tmr_gLeqlF03xvlBympS9RfZqdpF/present_payment_method \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_gLeqlF03xvlBympS9RfZqdpF\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"process_payment_intent\": {      \"payment_intent\": \"pi_1Gt0582eZvKYlo2CGSidzWqK\"    },    \"status\": \"succeeded\",    \"type\": \"process_payment_intent\"  },  \"device_sw_version\": null,  \"device_type\": \"bbpos_wisepos_e\",  \"ip_address\": \"192.168.2.2\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": null,  \"livemode\": false,  \"location\": null,  \"metadata\": {},  \"serial_number\": \"123-456-789\",  \"status\": \"online\"}\n```\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Set reader display | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_shipping_methods/list",
  "markdown": "# List all Terminal Hardware Shipping Methods\n\n## [List all Terminal Hardware Shipping Methods](https://docs.stripe.com/api/terminal/hardware_shipping_methods/list)Preview feature\n\nList all `TerminalHardwareShippingMethod` objects.\n\n### Parameters\n\n*   Only return Shipping Methods that have the given country. If provided, country must be a two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n    \n*   Only return Shipping Methods that have the given name.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `express`<br><br>Express |\n    | `priority`<br><br>Priority |\n    | `standard`<br><br>Standard |\n    \n*   Only return Shipping Methods that have the given status. Defaults to Available.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `available`<br><br>Available for new orders. |\n    | `unavailable`<br><br>Can no longer be used for order creation. |\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of terminal hardware shipping methods. Each entry in the array is a separate ShippingMethod object.\n\nGET /v1/terminal/hardware\\_shipping\\_methods\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_shipping_methods \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/hardware_shipping_methods\",  \"has_more\": false,  \"data\": [    {      \"id\": \"thsm_MfuTjLaPEgXMa4\",      \"object\": \"terminal.hardware_shipping_method\",      \"country\": \"US\",      \"estimated_delivery_window\": {        \"maximum_date\": \"2023-10-03\",        \"minimum_date\": \"2023-10-03\"      },      \"name\": \"standard\",      \"status\": \"available\",      \"unavailable_after\": null    }    {...}    {...}  ],}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all Terminal Hardware Shipping Methods | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/readers/present_payment_method",
  "markdown": "# Simulate presenting a payment method\n\n## [Simulate presenting a payment method](https://docs.stripe.com/api/terminal/readers/present_payment_method)Test helper\n\nPresents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.\n\n### Parameters\n\n*   Simulated data for the card\\_present payment method.\n    \n*   Simulated payment type.\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated `Reader` resource.\n\nPOST /v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/readers/tmr_gLeqlF03xvlBympS9RfZqdpF/present_payment_method \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_gLeqlF03xvlBympS9RfZqdpF\",  \"object\": \"terminal.reader\",  \"action\": {    \"failure_code\": null,    \"failure_message\": null,    \"process_payment_intent\": {      \"payment_intent\": \"pi_1Gt0582eZvKYlo2CGSidzWqK\"    },    \"status\": \"succeeded\",    \"type\": \"process_payment_intent\"  },  \"device_sw_version\": null,  \"device_type\": \"bbpos_wisepos_e\",  \"ip_address\": \"192.168.2.2\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": null,  \"livemode\": false,  \"location\": null,  \"metadata\": {},  \"serial_number\": \"123-456-789\",  \"status\": \"online\"}\n```\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Simulate presenting a payment method | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/configuration/create",
  "markdown": "# Create a Configuration | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fterminal%2Fconfiguration%2Fcreate)\n\nCreates a new `Configuration` object.\n\n### Parameters\n\n*   An object containing device type specific settings for BBPOS WisePOS E readers\n    \n*   An object containing device type specific settings for Stripe S700 readers\n    \n*   Tipping configurations for readers supporting on-reader tips\n    \n*   An object containing device type specific settings for Verifone P400 readers\n    \n\n### More parameters\n\n*   #### \n    \n    reboot\\_windowobjectPreview feature\n    \n\n### Returns\n\nReturns a `Configuration` object if creation succeeds.\n\nPOST /v1/terminal/configurations\n\n```\ncurl -X POST https://api.stripe.com/v1/terminal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"is_account_default\": false,  \"livemode\": false}\n```\n\n## [Update a Configuration](https://docs.stripe.com/api/terminal/configuration/update)\n\nUpdates a new `Configuration` object.\n\n### Parameters\n\n*   An object containing device type specific settings for BBPOS WisePOS E readers\n    \n*   An object containing device type specific settings for Stripe S700 readers\n    \n*   Tipping configurations for readers supporting on-reader tips\n    \n*   An object containing device type specific settings for Verifone P400 readers\n    \n\n### More parameters\n\n*   #### \n    \n    reboot\\_windowobjectPreview feature\n    \n\n### Returns\n\nReturns a `Configuration` object if the update succeeds.\n\nPOST /v1/terminal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/configurations/tmc_FQqbaQCiy0m1xc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"bbpos_wisepos_e[splashscreen]\"=file_1NtDiHBHO5VeT9SUjuWGkEAN\n```\n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"bbpos_wisepos_e\": {    \"splashscreen\": \"file_1NtDiPBHO5VeT9SUvD7GHCi0\"  },  \"is_account_default\": false,  \"livemode\": false}\n```\n\n## [Retrieve a Configuration](https://docs.stripe.com/api/terminal/configuration/retrieve)\n\nRetrieves a `Configuration` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Configuration` object if a valid identifier was provided.\n\nGET /v1/terminal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/configurations/tmc_FQqbaQCiy0m1xc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"is_account_default\": false,  \"livemode\": false}\n```\n\n## [List all Configurations](https://docs.stripe.com/api/terminal/configuration/list)\n\nReturns a list of `Configuration` objects.\n\n### Parameters\n\n*   #### \n    \n    is\\_account\\_defaultboolean\n    \n    if present, only return the account default or non-default configurations.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` configurations, starting after configurations `configurations`. Each entry in the array is a separate Terminal `configurations` object. If no more configurations are available, the resulting array will be empty.\n\nGET /v1/terminal/configurations\n\n```\ncurl -G https://api.stripe.com/v1/terminal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/configurations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tmc_FQqbaQCiy0m1xc\",      \"object\": \"terminal.configuration\",      \"is_account_default\": false,      \"livemode\": false    }    {...}    {...}  ],}\n```\n\n## [Delete a Configuration](https://docs.stripe.com/api/terminal/configuration/delete)\n\nDeletes a `Configuration` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `Configuration` object that was deleted.\n\nDELETE /v1/terminal/configurations/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/terminal/configurations/tmc_FQqbaQCiy0m1xc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"deleted\": true}\n```",
  "title": "Create a Configuration | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/configuration",
  "markdown": "# Configuration | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fterminal%2Fconfiguration)\n\n## [The Configuration object](https://docs.stripe.com/api/terminal/configuration/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    bbpos\\_wisepos\\_enullable object\n    \n    An object containing device type specific settings for BBPOS WisePOS E\n    \n*   #### \n    \n    is\\_account\\_defaultnullable boolean\n    \n    Whether this Configuration is the default for your account\n    \n*   #### \n    \n    stripe\\_s700nullable object\n    \n    An object containing device type specific settings for Stripe S700\n    \n*   On-reader tipping settings\n    \n*   #### \n    \n    verifone\\_p400nullable object\n    \n    An object containing device type specific settings for Verifone P400\n    \n\n### More attributes\n\n*   #### \n    \n    reboot\\_windownullable objectPreview feature\n    \n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"is_account_default\": false,  \"livemode\": false}\n```\n\n## [Create a Configuration](https://docs.stripe.com/api/terminal/configuration/create)\n\nCreates a new `Configuration` object.\n\n### Parameters\n\n*   An object containing device type specific settings for BBPOS WisePOS E readers\n    \n*   An object containing device type specific settings for Stripe S700 readers\n    \n*   Tipping configurations for readers supporting on-reader tips\n    \n*   An object containing device type specific settings for Verifone P400 readers\n    \n\n### More parameters\n\n*   #### \n    \n    reboot\\_windowobjectPreview feature\n    \n\n### Returns\n\nReturns a `Configuration` object if creation succeeds.\n\nPOST /v1/terminal/configurations\n\n```\ncurl -X POST https://api.stripe.com/v1/terminal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"is_account_default\": false,  \"livemode\": false}\n```\n\n## [Update a Configuration](https://docs.stripe.com/api/terminal/configuration/update)\n\nUpdates a new `Configuration` object.\n\n### Parameters\n\n*   An object containing device type specific settings for BBPOS WisePOS E readers\n    \n*   An object containing device type specific settings for Stripe S700 readers\n    \n*   Tipping configurations for readers supporting on-reader tips\n    \n*   An object containing device type specific settings for Verifone P400 readers\n    \n\n### More parameters\n\n*   #### \n    \n    reboot\\_windowobjectPreview feature\n    \n\n### Returns\n\nReturns a `Configuration` object if the update succeeds.\n\nPOST /v1/terminal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/configurations/tmc_FQqbaQCiy0m1xc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"bbpos_wisepos_e[splashscreen]\"=file_1NtDiHBHO5VeT9SUjuWGkEAN\n```\n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"bbpos_wisepos_e\": {    \"splashscreen\": \"file_1NtDiPBHO5VeT9SUvD7GHCi0\"  },  \"is_account_default\": false,  \"livemode\": false}\n```\n\n## [Retrieve a Configuration](https://docs.stripe.com/api/terminal/configuration/retrieve)\n\nRetrieves a `Configuration` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Configuration` object if a valid identifier was provided.\n\nGET /v1/terminal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/configurations/tmc_FQqbaQCiy0m1xc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"is_account_default\": false,  \"livemode\": false}\n```",
  "title": "Configuration | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_orders",
  "markdown": "# Terminal Hardware Order | Stripe API Reference\n\n## [Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders)Preview feature\n\n## [The TerminalHardwareOrder object](https://docs.stripe.com/api/terminal/hardware_orders/object)Preview feature\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Represents the total cost for the order.\n    \n\n*   #### \n    \n    hardware\\_order\\_itemsarray of objects\n    \n    An array of line items ordered.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   One of `monthly_invoice`, `payment_intent`, or `none`.\n    \n*   Shipping address for the order.\n    \n\n*   The status of the terminal hardware order.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>Order was canceled. Please create a new order to receive these items. |\n    | `delivered`<br><br>Order has been delivered! |\n    | `pending`<br><br>Order has been received and can still be canceled. |\n    | `ready_to_ship`<br><br>Order has been confirmed and is pending shipment. It cannot be canceled. |\n    | `shipped`<br><br>Order has been shipped, and can no longer be canceled. |\n    | `undeliverable`<br><br>One or more of the order’s items could not be delivered. |\n    \n\n### More attributes\n\n*   #### \n    \n    shipment\\_trackingarray of objects\n    \n\n*   #### \n    \n    total\\_tax\\_amountsarray of objects\n    \n*   #### \n    \n    updatednullable timestamp\n    \n\nThe TerminalHardwareOrder object\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"pending\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Create a Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/create)Preview feature\n\nCreates a new `TerminalHardwareOrder` object.\n\n### Parameters\n\n*   #### \n    \n    hardware\\_order\\_itemsarray of objectsRequired\n    \n    An array of line items to order.\n    \n*   The method of payment for this order.\n    \n*   Shipping address for the order.\n    \n*   #### \n    \n    shipping\\_methodstringRequired\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object if creation succeeds.\n\nPOST /v1/terminal/hardware\\_orders\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_orders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"hardware_order_items[0][terminal_hardware_sku]\"=thsku_L5fys7HZ5o02Nc \\  -d \"hardware_order_items[0][quantity]\"=2 \\  -d payment_type=monthly_invoice \\  -d \"shipping[address][line1]\"=\"1234 Main St.\" \\  -d \"shipping[address][city]\"=\"San Francisco\" \\  -d \"shipping[address][state]\"=CA \\  -d \"shipping[address][postal_code]\"=94111 \\  -d \"shipping[address][country]\"=US \\  -d \"shipping[phone]\"=15555555555 \\  --data-urlencode \"shipping[email]\"=\"test@example.com\" \\  -d \"shipping[name]\"=\"Jenny Rosen\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"pending\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Retrieve a Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/retrieve)Preview feature\n\nRetrieves a `TerminalHardwareOrder` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object if a valid identifier was provided.\n\nGET /v1/terminal/hardware\\_orders/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"pending\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [List all Terminal Hardware Orders](https://docs.stripe.com/api/terminal/hardware_orders/list)Preview feature\n\nList all `TerminalHardwareOrder` objects.\n\n### Parameters\n\n*   Only return orders that have the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>Order was canceled. Please create a new order to receive these items. |\n    | `delivered`<br><br>Order has been delivered! |\n    | `pending`<br><br>Order has been received and can still be canceled. |\n    | `ready_to_ship`<br><br>Order has been confirmed and is pending shipment. It cannot be canceled. |\n    | `shipped`<br><br>Order has been shipped, and can no longer be canceled. |\n    | `undeliverable`<br><br>One or more of the order’s items could not be delivered. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of terminal hardware orders. Each entry in the array is a separate order object.\n\nGET /v1/terminal/hardware\\_orders\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/terminal/hardware_orders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/hardware_orders\",  \"has_more\": false,  \"data\": [    {      \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",      \"object\": \"terminal.hardware_order\",      \"amount\": 13602,      \"created\": 1692995962,      \"currency\": \"usd\",      \"hardware_order_items\": [        {          \"amount\": 11800,          \"currency\": \"usd\",          \"quantity\": 2,          \"terminal_hardware_sku\": {            \"id\": \"thsku_L5fys7HZ5o02Nc\",            \"amount\": 450,            \"country\": \"AT\",            \"currency\": \"eur\",            \"product\": \"thpr_MJfof7SLvdkG6T\"          }        }      ],      \"livemode\": true,      \"metadata\": {},      \"payment_type\": \"monthly_invoice\",      \"po_number\": null,      \"shipment_tracking\": [],      \"shipping\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"1234 Main Street\",          \"line2\": \"\",          \"postal_code\": \"94111\",          \"state\": \"CA\"        },        \"amount\": 800,        \"company\": \"Rocket Rides\",        \"currency\": \"usd\",        \"email\": \"test@example.com\",        \"name\": \"Jenny Rosen\",        \"phone\": \"15555555555\"      },      \"shipping_method\": \"standard\",      \"status\": \"pending\",      \"tax\": 1002,      \"total_tax_amounts\": [        {          \"amount\": 1002,          \"inclusive\": false,          \"rate\": {            \"display_name\": \"Sales Tax\",            \"jurisdiction\": \"LOS ANGELES\",            \"percentage\": 8.25          }        }      ],      \"updated\": null    }    {...}    {...}  ],}\n```",
  "title": "Terminal Hardware Order | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/configuration/update",
  "markdown": "# Update a Configuration | Stripe API Reference\n\nUpdates a new `Configuration` object.\n\n### Parameters\n\n*   An object containing device type specific settings for BBPOS WisePOS E readers\n    \n*   An object containing device type specific settings for Stripe S700 readers\n    \n*   Tipping configurations for readers supporting on-reader tips\n    \n*   An object containing device type specific settings for Verifone P400 readers\n    \n\n### More parameters\n\n*   #### \n    \n    reboot\\_windowobjectPreview feature\n    \n\n### Returns\n\nReturns a `Configuration` object if the update succeeds.\n\nPOST /v1/terminal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/configurations/tmc_FQqbaQCiy0m1xc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"bbpos_wisepos_e[splashscreen]\"=file_1NtDiHBHO5VeT9SUjuWGkEAN\n```\n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"bbpos_wisepos_e\": {    \"splashscreen\": \"file_1NtDiPBHO5VeT9SUvD7GHCi0\"  },  \"is_account_default\": false,  \"livemode\": false}\n```\n\n## [Retrieve a Configuration](https://docs.stripe.com/api/terminal/configuration/retrieve)\n\nRetrieves a `Configuration` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Configuration` object if a valid identifier was provided.\n\nGET /v1/terminal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/configurations/tmc_FQqbaQCiy0m1xc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"is_account_default\": false,  \"livemode\": false}\n```\n\n## [List all Configurations](https://docs.stripe.com/api/terminal/configuration/list)\n\nReturns a list of `Configuration` objects.\n\n### Parameters\n\n*   #### \n    \n    is\\_account\\_defaultboolean\n    \n    if present, only return the account default or non-default configurations.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` configurations, starting after configurations `configurations`. Each entry in the array is a separate Terminal `configurations` object. If no more configurations are available, the resulting array will be empty.\n\nGET /v1/terminal/configurations\n\n```\ncurl -G https://api.stripe.com/v1/terminal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/configurations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tmc_FQqbaQCiy0m1xc\",      \"object\": \"terminal.configuration\",      \"is_account_default\": false,      \"livemode\": false    }    {...}    {...}  ],}\n```\n\n## [Delete a Configuration](https://docs.stripe.com/api/terminal/configuration/delete)\n\nDeletes a `Configuration` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `Configuration` object that was deleted.\n\nDELETE /v1/terminal/configurations/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/terminal/configurations/tmc_FQqbaQCiy0m1xc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"deleted\": true}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update a Configuration | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_orders/create",
  "markdown": "# Create a Terminal Hardware Order\n\n## [Create a Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/create)Preview feature\n\nCreates a new `TerminalHardwareOrder` object.\n\n### Parameters\n\n*   #### \n    \n    hardware\\_order\\_itemsarray of objectsRequired\n    \n    An array of line items to order.\n    \n*   The method of payment for this order.\n    \n*   Shipping address for the order.\n    \n*   #### \n    \n    shipping\\_methodstringRequired\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object if creation succeeds.\n\nPOST /v1/terminal/hardware\\_orders\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_orders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"hardware_order_items[0][terminal_hardware_sku]\"=thsku_L5fys7HZ5o02Nc \\  -d \"hardware_order_items[0][quantity]\"=2 \\  -d payment_type=monthly_invoice \\  -d \"shipping[address][line1]\"=\"1234 Main St.\" \\  -d \"shipping[address][city]\"=\"San Francisco\" \\  -d \"shipping[address][state]\"=CA \\  -d \"shipping[address][postal_code]\"=94111 \\  -d \"shipping[address][country]\"=US \\  -d \"shipping[phone]\"=15555555555 \\  --data-urlencode \"shipping[email]\"=\"test@example.com\" \\  -d \"shipping[name]\"=\"Jenny Rosen\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"pending\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Retrieve a Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/retrieve)Preview feature\n\nRetrieves a `TerminalHardwareOrder` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object if a valid identifier was provided.\n\nGET /v1/terminal/hardware\\_orders/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"pending\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [List all Terminal Hardware Orders](https://docs.stripe.com/api/terminal/hardware_orders/list)Preview feature\n\nList all `TerminalHardwareOrder` objects.\n\n### Parameters\n\n*   Only return orders that have the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>Order was canceled. Please create a new order to receive these items. |\n    | `delivered`<br><br>Order has been delivered! |\n    | `pending`<br><br>Order has been received and can still be canceled. |\n    | `ready_to_ship`<br><br>Order has been confirmed and is pending shipment. It cannot be canceled. |\n    | `shipped`<br><br>Order has been shipped, and can no longer be canceled. |\n    | `undeliverable`<br><br>One or more of the order’s items could not be delivered. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of terminal hardware orders. Each entry in the array is a separate order object.\n\nGET /v1/terminal/hardware\\_orders\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/terminal/hardware_orders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/hardware_orders\",  \"has_more\": false,  \"data\": [    {      \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",      \"object\": \"terminal.hardware_order\",      \"amount\": 13602,      \"created\": 1692995962,      \"currency\": \"usd\",      \"hardware_order_items\": [        {          \"amount\": 11800,          \"currency\": \"usd\",          \"quantity\": 2,          \"terminal_hardware_sku\": {            \"id\": \"thsku_L5fys7HZ5o02Nc\",            \"amount\": 450,            \"country\": \"AT\",            \"currency\": \"eur\",            \"product\": \"thpr_MJfof7SLvdkG6T\"          }        }      ],      \"livemode\": true,      \"metadata\": {},      \"payment_type\": \"monthly_invoice\",      \"po_number\": null,      \"shipment_tracking\": [],      \"shipping\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"1234 Main Street\",          \"line2\": \"\",          \"postal_code\": \"94111\",          \"state\": \"CA\"        },        \"amount\": 800,        \"company\": \"Rocket Rides\",        \"currency\": \"usd\",        \"email\": \"test@example.com\",        \"name\": \"Jenny Rosen\",        \"phone\": \"15555555555\"      },      \"shipping_method\": \"standard\",      \"status\": \"pending\",      \"tax\": 1002,      \"total_tax_amounts\": [        {          \"amount\": 1002,          \"inclusive\": false,          \"rate\": {            \"display_name\": \"Sales Tax\",            \"jurisdiction\": \"LOS ANGELES\",            \"percentage\": 8.25          }        }      ],      \"updated\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/cancel)Preview feature\n\nSets the status of a terminal hardware order from `pending` to `canceled`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `TerminalHardwareOrder` object.\n\nPOST /v1/terminal/hardware\\_orders/:id/cancel\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"canceled\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Preview a Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/preview)Preview feature\n\nGet a preview of a TerminalHardwareOrder without creating it.\n\n### Parameters\n\n*   #### \n    \n    hardware\\_order\\_itemsarray of objectsRequired\n    \n    An array of line items to order.\n    \n*   The method of payment for this order.\n    \n*   Shipping address for the order.\n    \n*   #### \n    \n    shipping\\_methodstringRequired\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object (that has not been created) if the preview succeeds.\n\nGET /v1/terminal/hardware\\_orders/preview\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/terminal/hardware_orders/preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"shipping[name]\"=\"Jenny Rosen\" \\  -d \"shipping[address][line1]\"=\"1234 Main Street\" \\  -d \"shipping[address][city]\"=\"San Francisco\" \\  -d \"shipping[address][state]\"=CA \\  -d \"shipping[address][country]\"=US \\  -d \"shipping[address][postal_code]\"=94111 \\  -d \"shipping[company]\"=\"Rocket Rides\" \\  -d \"shipping[phone]\"=15555555555 \\  --data-urlencode \"shipping[email]\"=\"test@example.com\" \\  -d shipping_method=thsm_MfuTjLaPEgXMa4 \\  -d payment_type=monthly_invoice \\  -d \"hardware_order_items[0][terminal_hardware_sku]\"=thsku_L5fys7HZ5o02Nc \\  -d \"hardware_order_items[0][quantity]\"=2\n```\n\n```\n{  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"pending\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ]}\n```",
  "title": "Create a Terminal Hardware Order | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_orders/retrieve",
  "markdown": "# Retrieve a Terminal Hardware Order\n\n## [Retrieve a Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/retrieve)Preview feature\n\nRetrieves a `TerminalHardwareOrder` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object if a valid identifier was provided.\n\nGET /v1/terminal/hardware\\_orders/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"pending\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [List all Terminal Hardware Orders](https://docs.stripe.com/api/terminal/hardware_orders/list)Preview feature\n\nList all `TerminalHardwareOrder` objects.\n\n### Parameters\n\n*   Only return orders that have the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>Order was canceled. Please create a new order to receive these items. |\n    | `delivered`<br><br>Order has been delivered! |\n    | `pending`<br><br>Order has been received and can still be canceled. |\n    | `ready_to_ship`<br><br>Order has been confirmed and is pending shipment. It cannot be canceled. |\n    | `shipped`<br><br>Order has been shipped, and can no longer be canceled. |\n    | `undeliverable`<br><br>One or more of the order’s items could not be delivered. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of terminal hardware orders. Each entry in the array is a separate order object.\n\nGET /v1/terminal/hardware\\_orders\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/terminal/hardware_orders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/hardware_orders\",  \"has_more\": false,  \"data\": [    {      \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",      \"object\": \"terminal.hardware_order\",      \"amount\": 13602,      \"created\": 1692995962,      \"currency\": \"usd\",      \"hardware_order_items\": [        {          \"amount\": 11800,          \"currency\": \"usd\",          \"quantity\": 2,          \"terminal_hardware_sku\": {            \"id\": \"thsku_L5fys7HZ5o02Nc\",            \"amount\": 450,            \"country\": \"AT\",            \"currency\": \"eur\",            \"product\": \"thpr_MJfof7SLvdkG6T\"          }        }      ],      \"livemode\": true,      \"metadata\": {},      \"payment_type\": \"monthly_invoice\",      \"po_number\": null,      \"shipment_tracking\": [],      \"shipping\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"1234 Main Street\",          \"line2\": \"\",          \"postal_code\": \"94111\",          \"state\": \"CA\"        },        \"amount\": 800,        \"company\": \"Rocket Rides\",        \"currency\": \"usd\",        \"email\": \"test@example.com\",        \"name\": \"Jenny Rosen\",        \"phone\": \"15555555555\"      },      \"shipping_method\": \"standard\",      \"status\": \"pending\",      \"tax\": 1002,      \"total_tax_amounts\": [        {          \"amount\": 1002,          \"inclusive\": false,          \"rate\": {            \"display_name\": \"Sales Tax\",            \"jurisdiction\": \"LOS ANGELES\",            \"percentage\": 8.25          }        }      ],      \"updated\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/cancel)Preview feature\n\nSets the status of a terminal hardware order from `pending` to `canceled`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `TerminalHardwareOrder` object.\n\nPOST /v1/terminal/hardware\\_orders/:id/cancel\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"canceled\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Preview a Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/preview)Preview feature\n\nGet a preview of a TerminalHardwareOrder without creating it.\n\n### Parameters\n\n*   #### \n    \n    hardware\\_order\\_itemsarray of objectsRequired\n    \n    An array of line items to order.\n    \n*   The method of payment for this order.\n    \n*   Shipping address for the order.\n    \n*   #### \n    \n    shipping\\_methodstringRequired\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object (that has not been created) if the preview succeeds.\n\nGET /v1/terminal/hardware\\_orders/preview\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/terminal/hardware_orders/preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"shipping[name]\"=\"Jenny Rosen\" \\  -d \"shipping[address][line1]\"=\"1234 Main Street\" \\  -d \"shipping[address][city]\"=\"San Francisco\" \\  -d \"shipping[address][state]\"=CA \\  -d \"shipping[address][country]\"=US \\  -d \"shipping[address][postal_code]\"=94111 \\  -d \"shipping[company]\"=\"Rocket Rides\" \\  -d \"shipping[phone]\"=15555555555 \\  --data-urlencode \"shipping[email]\"=\"test@example.com\" \\  -d shipping_method=thsm_MfuTjLaPEgXMa4 \\  -d payment_type=monthly_invoice \\  -d \"hardware_order_items[0][terminal_hardware_sku]\"=thsku_L5fys7HZ5o02Nc \\  -d \"hardware_order_items[0][quantity]\"=2\n```\n\n```\n{  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"pending\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ]}\n```\n\n## [Test mode: Mark a Terminal Hardware Order as Ready To Ship](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_mark_ready_to_ship)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as ready\\_to\\_ship.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/mark\\_ready\\_to\\_ship\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/mark_ready_to_ship \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"ready_to_ship\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```",
  "title": "Retrieve a Terminal Hardware Order | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/configuration/retrieve",
  "markdown": "# Retrieve a Configuration | Stripe API Reference\n\nRetrieves a `Configuration` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Configuration` object if a valid identifier was provided.\n\nGET /v1/terminal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/configurations/tmc_FQqbaQCiy0m1xc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"is_account_default\": false,  \"livemode\": false}\n```\n\n## [List all Configurations](https://docs.stripe.com/api/terminal/configuration/list)\n\nReturns a list of `Configuration` objects.\n\n### Parameters\n\n*   #### \n    \n    is\\_account\\_defaultboolean\n    \n    if present, only return the account default or non-default configurations.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` configurations, starting after configurations `configurations`. Each entry in the array is a separate Terminal `configurations` object. If no more configurations are available, the resulting array will be empty.\n\nGET /v1/terminal/configurations\n\n```\ncurl -G https://api.stripe.com/v1/terminal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/configurations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tmc_FQqbaQCiy0m1xc\",      \"object\": \"terminal.configuration\",      \"is_account_default\": false,      \"livemode\": false    }    {...}    {...}  ],}\n```\n\n## [Delete a Configuration](https://docs.stripe.com/api/terminal/configuration/delete)\n\nDeletes a `Configuration` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `Configuration` object that was deleted.\n\nDELETE /v1/terminal/configurations/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/terminal/configurations/tmc_FQqbaQCiy0m1xc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"deleted\": true}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a Configuration | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/configuration/list",
  "markdown": "# List all Configurations | Stripe API Reference\n\nReturns a list of `Configuration` objects.\n\n### Parameters\n\n*   #### \n    \n    is\\_account\\_defaultboolean\n    \n    if present, only return the account default or non-default configurations.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` configurations, starting after configurations `configurations`. Each entry in the array is a separate Terminal `configurations` object. If no more configurations are available, the resulting array will be empty.\n\nGET /v1/terminal/configurations\n\n```\ncurl -G https://api.stripe.com/v1/terminal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/configurations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tmc_FQqbaQCiy0m1xc\",      \"object\": \"terminal.configuration\",      \"is_account_default\": false,      \"livemode\": false    }    {...}    {...}  ],}\n```\n\n## [Delete a Configuration](https://docs.stripe.com/api/terminal/configuration/delete)\n\nDeletes a `Configuration` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `Configuration` object that was deleted.\n\nDELETE /v1/terminal/configurations/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/terminal/configurations/tmc_FQqbaQCiy0m1xc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"deleted\": true}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all Configurations | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_transfers/retrieve",
  "markdown": "# Retrieve an OutboundTransfer | Stripe API Reference\n\nRetrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an OutboundTransfer object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/outbound\\_transfers/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 500,  \"cancelable\": true,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1234567890\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYCCwVOvUY6NpO8ArWrjrz6Hxk3d8tQ4d_RvOqMTOeq6js5eE94-f-7DwBzjjD1wxIUhOyub1KFYH8QKxj9oA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [List all OutboundTransfers](https://docs.stripe.com/api/treasury/outbound_transfers/list)\n\nReturns a list of OutboundTransfers sent from the specified FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return OutboundTransfers that have the given status: `processing`, `canceled`, `failed`, `posted`, or `returned`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` OutboundTransfers, starting after OutboundTransfer `starting_after`. Each entry in the array is a separate OutboundTransfer object. If no more OutboundTransfers are available, the resulting array is empty.\n\nGET /v1/treasury/outbound\\_transfers\n\n```\ncurl -G https://api.stripe.com/v1/treasury/outbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d financial_account=fa_1Mtaaz2eZvKYlo2CUf56sIA1\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/outbound_transfers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",      \"object\": \"treasury.outbound_transfer\",      \"amount\": 500,      \"cancelable\": true,      \"created\": 1680717489,      \"currency\": \"usd\",      \"description\": \"OutboundTransfer to my external bank account\",      \"destination_payment_method\": \"pm_1234567890\",      \"destination_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": \"San Francisco\",            \"country\": \"US\",            \"line1\": \"1234 Fake Street\",            \"line2\": null,            \"postal_code\": \"94102\",            \"state\": \"CA\"          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"account_holder_type\": \"company\",          \"account_type\": \"checking\",          \"bank_name\": \"STRIPE TEST BANK\",          \"fingerprint\": \"AP24Iso0btGp4N10\",          \"last4\": \"6789\",          \"network\": \"ach\",          \"routing_number\": \"110000000\"        }      },      \"expected_arrival_date\": 1680825600,      \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYCCwVOvUY6NpO8ArWrjrz6Hxk3d8tQ4d_RvOqMTOeq6js5eE94-f-7DwBzjjD1wxIUhOyub1KFYH8QKxj9oA\",      \"livemode\": false,      \"metadata\": {},      \"returned_details\": null,      \"statement_descriptor\": \"transfer\",      \"status\": \"processing\",      \"status_transitions\": {        \"canceled_at\": null,        \"failed_at\": null,        \"posted_at\": null,        \"returned_at\": null      },      \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"    }    {...}    {...}  ],}\n```\n\n## [Cancel an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/cancel)\n\nAn OutboundTransfer can be canceled if the funds have not yet been paid out.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundTransfer object if the cancellation succeeded. Returns an error if the object has already been canceled or cannot be canceled.\n\nPOST /v1/treasury/outbound\\_transfers/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgbFx5vTNec6NpPKphE93zYcPDgqrHcZhLW_fmKqG9Mu9HUNa_164u93bqkgnPNnYtd3_5Rv_F3YISrR2qg3FQ\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"canceled\",  \"status_transitions\": {    \"posted_at\": null,    \"failed_at\": null,    \"canceled_at\": 1680717489,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Test mode: Fail an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_fail)Test helper\n\nTransitions a test mode created OutboundTransfer to the `failed` status. The OutboundTransfer must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundTransfer object in the failed state. Returns an error if the OutboundTransfer has already been failed or cannot be failed.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id/fail\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYw-nE9MNI6NpOJppCfj7fBzxZ9vepfiOLlViIJsILsSUiUv3teC30OLgOpgL7B0UBbYYtz0t7gi1a1WHo4Ew\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"failed\",  \"status_transitions\": {    \"failed_at\": 1680717489,    \"canceled_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Test mode: Post an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_post)Test helper\n\nTransitions a test mode created OutboundTransfer to the `posted` status. The OutboundTransfer must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundTransfer object in the posted state. Returns an error if the OutboundTransfer has already been posted or cannot be posted.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id/post\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/post \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYkJOwRj5U6NpOg9L70S_mhPE92VvJUt_P7rrE938uIHfjCSY3Bjn9Dufo8Z1h9709Gm-LmCbzT7a6j9kFN9w\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"posted\",  \"status_transitions\": {    \"posted_at\": 1680717489,    \"failed_at\": null,    \"canceled_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```",
  "title": "Retrieve an OutboundTransfer | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_orders/list",
  "markdown": "# List all Terminal Hardware Orders\n\n## [List all Terminal Hardware Orders](https://docs.stripe.com/api/terminal/hardware_orders/list)Preview feature\n\nList all `TerminalHardwareOrder` objects.\n\n### Parameters\n\n*   Only return orders that have the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>Order was canceled. Please create a new order to receive these items. |\n    | `delivered`<br><br>Order has been delivered! |\n    | `pending`<br><br>Order has been received and can still be canceled. |\n    | `ready_to_ship`<br><br>Order has been confirmed and is pending shipment. It cannot be canceled. |\n    | `shipped`<br><br>Order has been shipped, and can no longer be canceled. |\n    | `undeliverable`<br><br>One or more of the order’s items could not be delivered. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of terminal hardware orders. Each entry in the array is a separate order object.\n\nGET /v1/terminal/hardware\\_orders\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/terminal/hardware_orders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/hardware_orders\",  \"has_more\": false,  \"data\": [    {      \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",      \"object\": \"terminal.hardware_order\",      \"amount\": 13602,      \"created\": 1692995962,      \"currency\": \"usd\",      \"hardware_order_items\": [        {          \"amount\": 11800,          \"currency\": \"usd\",          \"quantity\": 2,          \"terminal_hardware_sku\": {            \"id\": \"thsku_L5fys7HZ5o02Nc\",            \"amount\": 450,            \"country\": \"AT\",            \"currency\": \"eur\",            \"product\": \"thpr_MJfof7SLvdkG6T\"          }        }      ],      \"livemode\": true,      \"metadata\": {},      \"payment_type\": \"monthly_invoice\",      \"po_number\": null,      \"shipment_tracking\": [],      \"shipping\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"1234 Main Street\",          \"line2\": \"\",          \"postal_code\": \"94111\",          \"state\": \"CA\"        },        \"amount\": 800,        \"company\": \"Rocket Rides\",        \"currency\": \"usd\",        \"email\": \"test@example.com\",        \"name\": \"Jenny Rosen\",        \"phone\": \"15555555555\"      },      \"shipping_method\": \"standard\",      \"status\": \"pending\",      \"tax\": 1002,      \"total_tax_amounts\": [        {          \"amount\": 1002,          \"inclusive\": false,          \"rate\": {            \"display_name\": \"Sales Tax\",            \"jurisdiction\": \"LOS ANGELES\",            \"percentage\": 8.25          }        }      ],      \"updated\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/cancel)Preview feature\n\nSets the status of a terminal hardware order from `pending` to `canceled`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `TerminalHardwareOrder` object.\n\nPOST /v1/terminal/hardware\\_orders/:id/cancel\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"canceled\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Preview a Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/preview)Preview feature\n\nGet a preview of a TerminalHardwareOrder without creating it.\n\n### Parameters\n\n*   #### \n    \n    hardware\\_order\\_itemsarray of objectsRequired\n    \n    An array of line items to order.\n    \n*   The method of payment for this order.\n    \n*   Shipping address for the order.\n    \n*   #### \n    \n    shipping\\_methodstringRequired\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object (that has not been created) if the preview succeeds.\n\nGET /v1/terminal/hardware\\_orders/preview\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/terminal/hardware_orders/preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"shipping[name]\"=\"Jenny Rosen\" \\  -d \"shipping[address][line1]\"=\"1234 Main Street\" \\  -d \"shipping[address][city]\"=\"San Francisco\" \\  -d \"shipping[address][state]\"=CA \\  -d \"shipping[address][country]\"=US \\  -d \"shipping[address][postal_code]\"=94111 \\  -d \"shipping[company]\"=\"Rocket Rides\" \\  -d \"shipping[phone]\"=15555555555 \\  --data-urlencode \"shipping[email]\"=\"test@example.com\" \\  -d shipping_method=thsm_MfuTjLaPEgXMa4 \\  -d payment_type=monthly_invoice \\  -d \"hardware_order_items[0][terminal_hardware_sku]\"=thsku_L5fys7HZ5o02Nc \\  -d \"hardware_order_items[0][quantity]\"=2\n```\n\n```\n{  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"pending\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ]}\n```\n\n## [Test mode: Mark a Terminal Hardware Order as Ready To Ship](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_mark_ready_to_ship)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as ready\\_to\\_ship.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/mark\\_ready\\_to\\_ship\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/mark_ready_to_ship \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"ready_to_ship\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Test mode: Mark a Terminal Hardware Order as Delivered](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_deliver)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as delivered.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/deliver\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/deliver \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"delivered\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```",
  "title": "List all Terminal Hardware Orders | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/configuration/delete",
  "markdown": "# Delete a Configuration | Stripe API Reference\n\nDeletes a `Configuration` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `Configuration` object that was deleted.\n\nDELETE /v1/terminal/configurations/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/terminal/configurations/tmc_FQqbaQCiy0m1xc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"deleted\": true}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Delete a Configuration | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_transfers/list",
  "markdown": "# List all OutboundTransfers | Stripe API Reference\n\nReturns a list of OutboundTransfers sent from the specified FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return OutboundTransfers that have the given status: `processing`, `canceled`, `failed`, `posted`, or `returned`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` OutboundTransfers, starting after OutboundTransfer `starting_after`. Each entry in the array is a separate OutboundTransfer object. If no more OutboundTransfers are available, the resulting array is empty.\n\nGET /v1/treasury/outbound\\_transfers\n\n```\ncurl -G https://api.stripe.com/v1/treasury/outbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d financial_account=fa_1Mtaaz2eZvKYlo2CUf56sIA1\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/outbound_transfers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",      \"object\": \"treasury.outbound_transfer\",      \"amount\": 500,      \"cancelable\": true,      \"created\": 1680717489,      \"currency\": \"usd\",      \"description\": \"OutboundTransfer to my external bank account\",      \"destination_payment_method\": \"pm_1234567890\",      \"destination_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": \"San Francisco\",            \"country\": \"US\",            \"line1\": \"1234 Fake Street\",            \"line2\": null,            \"postal_code\": \"94102\",            \"state\": \"CA\"          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"account_holder_type\": \"company\",          \"account_type\": \"checking\",          \"bank_name\": \"STRIPE TEST BANK\",          \"fingerprint\": \"AP24Iso0btGp4N10\",          \"last4\": \"6789\",          \"network\": \"ach\",          \"routing_number\": \"110000000\"        }      },      \"expected_arrival_date\": 1680825600,      \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYCCwVOvUY6NpO8ArWrjrz6Hxk3d8tQ4d_RvOqMTOeq6js5eE94-f-7DwBzjjD1wxIUhOyub1KFYH8QKxj9oA\",      \"livemode\": false,      \"metadata\": {},      \"returned_details\": null,      \"statement_descriptor\": \"transfer\",      \"status\": \"processing\",      \"status_transitions\": {        \"canceled_at\": null,        \"failed_at\": null,        \"posted_at\": null,        \"returned_at\": null      },      \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"    }    {...}    {...}  ],}\n```\n\n## [Cancel an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/cancel)\n\nAn OutboundTransfer can be canceled if the funds have not yet been paid out.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundTransfer object if the cancellation succeeded. Returns an error if the object has already been canceled or cannot be canceled.\n\nPOST /v1/treasury/outbound\\_transfers/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgbFx5vTNec6NpPKphE93zYcPDgqrHcZhLW_fmKqG9Mu9HUNa_164u93bqkgnPNnYtd3_5Rv_F3YISrR2qg3FQ\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"canceled\",  \"status_transitions\": {    \"posted_at\": null,    \"failed_at\": null,    \"canceled_at\": 1680717489,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Test mode: Fail an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_fail)Test helper\n\nTransitions a test mode created OutboundTransfer to the `failed` status. The OutboundTransfer must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundTransfer object in the failed state. Returns an error if the OutboundTransfer has already been failed or cannot be failed.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id/fail\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYw-nE9MNI6NpOJppCfj7fBzxZ9vepfiOLlViIJsILsSUiUv3teC30OLgOpgL7B0UBbYYtz0t7gi1a1WHo4Ew\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"failed\",  \"status_transitions\": {    \"failed_at\": 1680717489,    \"canceled_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Test mode: Post an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_post)Test helper\n\nTransitions a test mode created OutboundTransfer to the `posted` status. The OutboundTransfer must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundTransfer object in the posted state. Returns an error if the OutboundTransfer has already been posted or cannot be posted.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id/post\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/post \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYkJOwRj5U6NpOg9L70S_mhPE92VvJUt_P7rrE938uIHfjCSY3Bjn9Dufo8Z1h9709Gm-LmCbzT7a6j9kFN9w\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"posted\",  \"status_transitions\": {    \"posted_at\": 1680717489,    \"failed_at\": null,    \"canceled_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Test mode: Return an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_return)Test helper\n\nTransitions a test mode created OutboundTransfer to the `returned` status. The OutboundTransfer must already be in the `processing` state.\n\n### Parameters\n\n*   Details about a returned OutboundTransfer.\n    \n\n### Returns\n\nReturns the OutboundTransfer object in the returned state. Returns an error if the OutboundTransfer has already been returned or cannot be returned.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYdpKbb3Ec6NpO9f9jLUpJTCJGYDld0WR6lbibijEBPoyU4abErSxnN1ZB_JwosN4Krvqn2WLglRwEeAIzg4g\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": {    \"code\": \"declined\",    \"transaction\": \"trxn_1Mtaaz2eZvKYlo2CRvn5ac2X\"  },  \"statement_descriptor\": \"transfer\",  \"status\": \"returned\",  \"status_transitions\": {    \"returned_at\": 1680717489,    \"failed_at\": null,    \"canceled_at\": null,    \"posted_at\": 1680717489  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```",
  "title": "List all OutboundTransfers | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_orders/cancel",
  "markdown": "# Cancel a Terminal Hardware Order\n\n## [Cancel a Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/cancel)Preview feature\n\nSets the status of a terminal hardware order from `pending` to `canceled`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `TerminalHardwareOrder` object.\n\nPOST /v1/terminal/hardware\\_orders/:id/cancel\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"canceled\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Preview a Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/preview)Preview feature\n\nGet a preview of a TerminalHardwareOrder without creating it.\n\n### Parameters\n\n*   #### \n    \n    hardware\\_order\\_itemsarray of objectsRequired\n    \n    An array of line items to order.\n    \n*   The method of payment for this order.\n    \n*   Shipping address for the order.\n    \n*   #### \n    \n    shipping\\_methodstringRequired\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object (that has not been created) if the preview succeeds.\n\nGET /v1/terminal/hardware\\_orders/preview\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/terminal/hardware_orders/preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"shipping[name]\"=\"Jenny Rosen\" \\  -d \"shipping[address][line1]\"=\"1234 Main Street\" \\  -d \"shipping[address][city]\"=\"San Francisco\" \\  -d \"shipping[address][state]\"=CA \\  -d \"shipping[address][country]\"=US \\  -d \"shipping[address][postal_code]\"=94111 \\  -d \"shipping[company]\"=\"Rocket Rides\" \\  -d \"shipping[phone]\"=15555555555 \\  --data-urlencode \"shipping[email]\"=\"test@example.com\" \\  -d shipping_method=thsm_MfuTjLaPEgXMa4 \\  -d payment_type=monthly_invoice \\  -d \"hardware_order_items[0][terminal_hardware_sku]\"=thsku_L5fys7HZ5o02Nc \\  -d \"hardware_order_items[0][quantity]\"=2\n```\n\n```\n{  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"pending\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ]}\n```\n\n## [Test mode: Mark a Terminal Hardware Order as Ready To Ship](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_mark_ready_to_ship)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as ready\\_to\\_ship.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/mark\\_ready\\_to\\_ship\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/mark_ready_to_ship \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"ready_to_ship\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Test mode: Mark a Terminal Hardware Order as Delivered](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_deliver)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as delivered.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/deliver\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/deliver \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"delivered\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Test mode: Mark a Terminal Hardware Order as Shipped](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_ship)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as shipped.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/ship\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/ship \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"shipped\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```",
  "title": "Cancel a Terminal Hardware Order | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_transfers/cancel",
  "markdown": "# Cancel an OutboundTransfer | Stripe API Reference\n\nAn OutboundTransfer can be canceled if the funds have not yet been paid out.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundTransfer object if the cancellation succeeded. Returns an error if the object has already been canceled or cannot be canceled.\n\nPOST /v1/treasury/outbound\\_transfers/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgbFx5vTNec6NpPKphE93zYcPDgqrHcZhLW_fmKqG9Mu9HUNa_164u93bqkgnPNnYtd3_5Rv_F3YISrR2qg3FQ\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"canceled\",  \"status_transitions\": {    \"posted_at\": null,    \"failed_at\": null,    \"canceled_at\": 1680717489,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Test mode: Fail an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_fail)Test helper\n\nTransitions a test mode created OutboundTransfer to the `failed` status. The OutboundTransfer must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundTransfer object in the failed state. Returns an error if the OutboundTransfer has already been failed or cannot be failed.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id/fail\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYw-nE9MNI6NpOJppCfj7fBzxZ9vepfiOLlViIJsILsSUiUv3teC30OLgOpgL7B0UBbYYtz0t7gi1a1WHo4Ew\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"failed\",  \"status_transitions\": {    \"failed_at\": 1680717489,    \"canceled_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Test mode: Post an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_post)Test helper\n\nTransitions a test mode created OutboundTransfer to the `posted` status. The OutboundTransfer must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundTransfer object in the posted state. Returns an error if the OutboundTransfer has already been posted or cannot be posted.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id/post\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/post \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYkJOwRj5U6NpOg9L70S_mhPE92VvJUt_P7rrE938uIHfjCSY3Bjn9Dufo8Z1h9709Gm-LmCbzT7a6j9kFN9w\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"posted\",  \"status_transitions\": {    \"posted_at\": 1680717489,    \"failed_at\": null,    \"canceled_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Test mode: Return an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_return)Test helper\n\nTransitions a test mode created OutboundTransfer to the `returned` status. The OutboundTransfer must already be in the `processing` state.\n\n### Parameters\n\n*   Details about a returned OutboundTransfer.\n    \n\n### Returns\n\nReturns the OutboundTransfer object in the returned state. Returns an error if the OutboundTransfer has already been returned or cannot be returned.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYdpKbb3Ec6NpO9f9jLUpJTCJGYDld0WR6lbibijEBPoyU4abErSxnN1ZB_JwosN4Krvqn2WLglRwEeAIzg4g\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": {    \"code\": \"declined\",    \"transaction\": \"trxn_1Mtaaz2eZvKYlo2CRvn5ac2X\"  },  \"statement_descriptor\": \"transfer\",  \"status\": \"returned\",  \"status_transitions\": {    \"returned_at\": 1680717489,    \"failed_at\": null,    \"canceled_at\": null,    \"posted_at\": 1680717489  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Test mode: Update an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_update)Test helper\n\nUpdates a test mode created OutboundTransfer with tracking details. The OutboundTransfer must not be cancelable, and cannot be in the `canceled` or `failed` states.\n\n### Parameters\n\n*   #### \n    \n    tracking\\_detailsobjectRequired\n    \n    Details about network-specific tracking information.\n    \n\n### Returns\n\nReturns the OutboundTransfer object with the updated tracking details. Returns an error if the OutboundTransfer is in an invalid state or if `tracking_details` has already been set.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"tracking_details[type]\"=ach \\  -d \"tracking_details[ach][trace_id]\"=841042400123450\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYkJOwRj5U6NpOg9L70S_mhPE92VvJUt_P7rrE938uIHfjCSY3Bjn9Dufo8Z1h9709Gm-LmCbzT7a6j9kFN9w\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"posted\",  \"status_transitions\": {    \"posted_at\": 1680717489,    \"failed_at\": null,    \"canceled_at\": null,    \"returned_at\": null  },  \"tracking_details\": {    \"type\": \"ach\",    \"ach\": {      \"trace_id\": \"841042400123450\"    }  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```",
  "title": "Cancel an OutboundTransfer | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_orders/preview",
  "markdown": "# Preview a Terminal Hardware Order\n\n## [Preview a Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/preview)Preview feature\n\nGet a preview of a TerminalHardwareOrder without creating it.\n\n### Parameters\n\n*   #### \n    \n    hardware\\_order\\_itemsarray of objectsRequired\n    \n    An array of line items to order.\n    \n*   The method of payment for this order.\n    \n*   Shipping address for the order.\n    \n*   #### \n    \n    shipping\\_methodstringRequired\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object (that has not been created) if the preview succeeds.\n\nGET /v1/terminal/hardware\\_orders/preview\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/terminal/hardware_orders/preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"shipping[name]\"=\"Jenny Rosen\" \\  -d \"shipping[address][line1]\"=\"1234 Main Street\" \\  -d \"shipping[address][city]\"=\"San Francisco\" \\  -d \"shipping[address][state]\"=CA \\  -d \"shipping[address][country]\"=US \\  -d \"shipping[address][postal_code]\"=94111 \\  -d \"shipping[company]\"=\"Rocket Rides\" \\  -d \"shipping[phone]\"=15555555555 \\  --data-urlencode \"shipping[email]\"=\"test@example.com\" \\  -d shipping_method=thsm_MfuTjLaPEgXMa4 \\  -d payment_type=monthly_invoice \\  -d \"hardware_order_items[0][terminal_hardware_sku]\"=thsku_L5fys7HZ5o02Nc \\  -d \"hardware_order_items[0][quantity]\"=2\n```\n\n```\n{  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"pending\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ]}\n```\n\n## [Test mode: Mark a Terminal Hardware Order as Ready To Ship](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_mark_ready_to_ship)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as ready\\_to\\_ship.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/mark\\_ready\\_to\\_ship\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/mark_ready_to_ship \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"ready_to_ship\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Test mode: Mark a Terminal Hardware Order as Delivered](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_deliver)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as delivered.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/deliver\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/deliver \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"delivered\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Test mode: Mark a Terminal Hardware Order as Shipped](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_ship)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as shipped.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/ship\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/ship \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"shipped\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Test mode: Mark a Terminal Hardware Order as Undeliverable](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_mark_undeliverable)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as undeliverable.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/mark\\_undeliverable\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/mark_undeliverable \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"undeliverable\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```",
  "title": "Preview a Terminal Hardware Order | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_orders/test_mode_mark_ready_to_ship",
  "markdown": "# Test mode: Mark a Terminal Hardware Order as Ready To Ship\n\n## [Test mode: Mark a Terminal Hardware Order as Ready To Ship](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_mark_ready_to_ship)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as ready\\_to\\_ship.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/mark\\_ready\\_to\\_ship\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/mark_ready_to_ship \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"ready_to_ship\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Test mode: Mark a Terminal Hardware Order as Delivered](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_deliver)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as delivered.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/deliver\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/deliver \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"delivered\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Test mode: Mark a Terminal Hardware Order as Shipped](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_ship)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as shipped.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/ship\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/ship \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"shipped\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Test mode: Mark a Terminal Hardware Order as Undeliverable](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_mark_undeliverable)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as undeliverable.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/mark\\_undeliverable\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/mark_undeliverable \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"undeliverable\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Test mode: Mark a Terminal Hardware Order as Ready To Ship | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_fail",
  "markdown": "# Test mode: Fail an OutboundTransfer\n\n## [Test mode: Fail an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_fail)Test helper\n\nTransitions a test mode created OutboundTransfer to the `failed` status. The OutboundTransfer must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundTransfer object in the failed state. Returns an error if the OutboundTransfer has already been failed or cannot be failed.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id/fail\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYw-nE9MNI6NpOJppCfj7fBzxZ9vepfiOLlViIJsILsSUiUv3teC30OLgOpgL7B0UBbYYtz0t7gi1a1WHo4Ew\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"failed\",  \"status_transitions\": {    \"failed_at\": 1680717489,    \"canceled_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Test mode: Post an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_post)Test helper\n\nTransitions a test mode created OutboundTransfer to the `posted` status. The OutboundTransfer must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundTransfer object in the posted state. Returns an error if the OutboundTransfer has already been posted or cannot be posted.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id/post\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/post \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYkJOwRj5U6NpOg9L70S_mhPE92VvJUt_P7rrE938uIHfjCSY3Bjn9Dufo8Z1h9709Gm-LmCbzT7a6j9kFN9w\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"posted\",  \"status_transitions\": {    \"posted_at\": 1680717489,    \"failed_at\": null,    \"canceled_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Test mode: Return an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_return)Test helper\n\nTransitions a test mode created OutboundTransfer to the `returned` status. The OutboundTransfer must already be in the `processing` state.\n\n### Parameters\n\n*   Details about a returned OutboundTransfer.\n    \n\n### Returns\n\nReturns the OutboundTransfer object in the returned state. Returns an error if the OutboundTransfer has already been returned or cannot be returned.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYdpKbb3Ec6NpO9f9jLUpJTCJGYDld0WR6lbibijEBPoyU4abErSxnN1ZB_JwosN4Krvqn2WLglRwEeAIzg4g\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": {    \"code\": \"declined\",    \"transaction\": \"trxn_1Mtaaz2eZvKYlo2CRvn5ac2X\"  },  \"statement_descriptor\": \"transfer\",  \"status\": \"returned\",  \"status_transitions\": {    \"returned_at\": 1680717489,    \"failed_at\": null,    \"canceled_at\": null,    \"posted_at\": 1680717489  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Test mode: Update an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_update)Test helper\n\nUpdates a test mode created OutboundTransfer with tracking details. The OutboundTransfer must not be cancelable, and cannot be in the `canceled` or `failed` states.\n\n### Parameters\n\n*   #### \n    \n    tracking\\_detailsobjectRequired\n    \n    Details about network-specific tracking information.\n    \n\n### Returns\n\nReturns the OutboundTransfer object with the updated tracking details. Returns an error if the OutboundTransfer is in an invalid state or if `tracking_details` has already been set.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"tracking_details[type]\"=ach \\  -d \"tracking_details[ach][trace_id]\"=841042400123450\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYkJOwRj5U6NpOg9L70S_mhPE92VvJUt_P7rrE938uIHfjCSY3Bjn9Dufo8Z1h9709Gm-LmCbzT7a6j9kFN9w\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"posted\",  \"status_transitions\": {    \"posted_at\": 1680717489,    \"failed_at\": null,    \"canceled_at\": null,    \"returned_at\": null  },  \"tracking_details\": {    \"type\": \"ach\",    \"ach\": {      \"trace_id\": \"841042400123450\"    }  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Test mode: Fail an OutboundTransfer | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/financial_accounts/update",
  "markdown": "# Update a FinancialAccount | Stripe API Reference\n\nUpdates the details of a FinancialAccount.\n\n### Parameters\n\n*   Encodes whether a FinancialAccount has access to a particular feature, with a status enum and associated `status_details`. Stripe or the platform may control features via the requested field.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    platform\\_restrictionsobject\n    \n    The set of functionalities that the platform can restrict on the FinancialAccount.\n    \n\n### Returns\n\nReturns a FinancialAccount object.\n\nPOST /v1/treasury/financial\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1MtZmL2eZvKYlo2Cer6cdwEC \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": {    \"order_id\": \"6735\"  },  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [Retrieve a FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts/retrieve)\n\nRetrieves the details of a FinancialAccount.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturn a FinancialAccount object.\n\nGET /v1/treasury/financial\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1MtZmL2eZvKYlo2Cer6cdwEC \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": null,  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [List all FinancialAccounts](https://docs.stripe.com/api/treasury/financial_accounts/list)\n\nReturns a list of FinancialAccounts.\n\n### Parameters\n\n*   Only return FinancialAccounts that were created during the given date interval.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` FinancialAccounts, starting after FinancialAccount `starting_after`. Each entry in the array is a separate `FinancialAccount` object. If no more FinancialAccounts are available, the resulting array is empty.\n\nGET /v1/treasury/financial\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/financial_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",      \"object\": \"treasury.financial_account\",      \"active_features\": [        \"financial_addresses.aba\",        \"outbound_payments.ach\",        \"outbound_payments.us_domestic_wire\"      ],      \"balance\": {        \"cash\": {          \"usd\": 0        },        \"inbound_pending\": {          \"usd\": 0        },        \"outbound_pending\": {          \"usd\": 0        }      },      \"country\": \"US\",      \"created\": 1680714349,      \"financial_addresses\": [        {          \"aba\": {            \"account_holder_name\": \"Jenny Rosen\",            \"account_number_last4\": \"7890\",            \"bank_name\": \"STRIPE TEST BANK\",            \"routing_number\": \"0000000001\"          },          \"supported_networks\": [            \"ach\",            \"us_domestic_wire\"          ],          \"type\": \"aba\"        }      ],      \"livemode\": true,      \"metadata\": null,      \"pending_features\": [],      \"restricted_features\": [],      \"status\": \"open\",      \"status_details\": {        \"closed\": null      },      \"supported_currencies\": [        \"usd\"      ],      \"features\": {}    }    {...}    {...}  ],}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update a FinancialAccount | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_post",
  "markdown": "# Test mode: Post an OutboundTransfer\n\n## [Test mode: Post an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_post)Test helper\n\nTransitions a test mode created OutboundTransfer to the `posted` status. The OutboundTransfer must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundTransfer object in the posted state. Returns an error if the OutboundTransfer has already been posted or cannot be posted.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id/post\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/post \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYkJOwRj5U6NpOg9L70S_mhPE92VvJUt_P7rrE938uIHfjCSY3Bjn9Dufo8Z1h9709Gm-LmCbzT7a6j9kFN9w\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"posted\",  \"status_transitions\": {    \"posted_at\": 1680717489,    \"failed_at\": null,    \"canceled_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Test mode: Return an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_return)Test helper\n\nTransitions a test mode created OutboundTransfer to the `returned` status. The OutboundTransfer must already be in the `processing` state.\n\n### Parameters\n\n*   Details about a returned OutboundTransfer.\n    \n\n### Returns\n\nReturns the OutboundTransfer object in the returned state. Returns an error if the OutboundTransfer has already been returned or cannot be returned.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYdpKbb3Ec6NpO9f9jLUpJTCJGYDld0WR6lbibijEBPoyU4abErSxnN1ZB_JwosN4Krvqn2WLglRwEeAIzg4g\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": {    \"code\": \"declined\",    \"transaction\": \"trxn_1Mtaaz2eZvKYlo2CRvn5ac2X\"  },  \"statement_descriptor\": \"transfer\",  \"status\": \"returned\",  \"status_transitions\": {    \"returned_at\": 1680717489,    \"failed_at\": null,    \"canceled_at\": null,    \"posted_at\": 1680717489  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Test mode: Update an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_update)Test helper\n\nUpdates a test mode created OutboundTransfer with tracking details. The OutboundTransfer must not be cancelable, and cannot be in the `canceled` or `failed` states.\n\n### Parameters\n\n*   #### \n    \n    tracking\\_detailsobjectRequired\n    \n    Details about network-specific tracking information.\n    \n\n### Returns\n\nReturns the OutboundTransfer object with the updated tracking details. Returns an error if the OutboundTransfer is in an invalid state or if `tracking_details` has already been set.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"tracking_details[type]\"=ach \\  -d \"tracking_details[ach][trace_id]\"=841042400123450\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYkJOwRj5U6NpOg9L70S_mhPE92VvJUt_P7rrE938uIHfjCSY3Bjn9Dufo8Z1h9709Gm-LmCbzT7a6j9kFN9w\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"posted\",  \"status_transitions\": {    \"posted_at\": 1680717489,    \"failed_at\": null,    \"canceled_at\": null,    \"returned_at\": null  },  \"tracking_details\": {    \"type\": \"ach\",    \"ach\": {      \"trace_id\": \"841042400123450\"    }  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Test mode: Post an OutboundTransfer | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/financial_accounts/retrieve",
  "markdown": "# Retrieve a FinancialAccount | Stripe API Reference\n\nRetrieves the details of a FinancialAccount.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturn a FinancialAccount object.\n\nGET /v1/treasury/financial\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1MtZmL2eZvKYlo2Cer6cdwEC \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": null,  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [List all FinancialAccounts](https://docs.stripe.com/api/treasury/financial_accounts/list)\n\nReturns a list of FinancialAccounts.\n\n### Parameters\n\n*   Only return FinancialAccounts that were created during the given date interval.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` FinancialAccounts, starting after FinancialAccount `starting_after`. Each entry in the array is a separate `FinancialAccount` object. If no more FinancialAccounts are available, the resulting array is empty.\n\nGET /v1/treasury/financial\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/financial_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",      \"object\": \"treasury.financial_account\",      \"active_features\": [        \"financial_addresses.aba\",        \"outbound_payments.ach\",        \"outbound_payments.us_domestic_wire\"      ],      \"balance\": {        \"cash\": {          \"usd\": 0        },        \"inbound_pending\": {          \"usd\": 0        },        \"outbound_pending\": {          \"usd\": 0        }      },      \"country\": \"US\",      \"created\": 1680714349,      \"financial_addresses\": [        {          \"aba\": {            \"account_holder_name\": \"Jenny Rosen\",            \"account_number_last4\": \"7890\",            \"bank_name\": \"STRIPE TEST BANK\",            \"routing_number\": \"0000000001\"          },          \"supported_networks\": [            \"ach\",            \"us_domestic_wire\"          ],          \"type\": \"aba\"        }      ],      \"livemode\": true,      \"metadata\": null,      \"pending_features\": [],      \"restricted_features\": [],      \"status\": \"open\",      \"status_details\": {        \"closed\": null      },      \"supported_currencies\": [        \"usd\"      ],      \"features\": {}    }    {...}    {...}  ],}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a FinancialAccount | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_orders/test_mode_deliver",
  "markdown": "# Test mode: Mark a Terminal Hardware Order as Delivered\n\n## [Test mode: Mark a Terminal Hardware Order as Delivered](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_deliver)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as delivered.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/deliver\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/deliver \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"delivered\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Test mode: Mark a Terminal Hardware Order as Shipped](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_ship)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as shipped.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/ship\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/ship \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"shipped\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Test mode: Mark a Terminal Hardware Order as Undeliverable](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_mark_undeliverable)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as undeliverable.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/mark\\_undeliverable\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/mark_undeliverable \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"undeliverable\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Test mode: Mark a Terminal Hardware Order as Delivered | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_orders/test_mode_ship",
  "markdown": "# Test mode: Mark a Terminal Hardware Order as Shipped\n\n## [Test mode: Mark a Terminal Hardware Order as Shipped](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_ship)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as shipped.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/ship\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/ship \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"shipped\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Test mode: Mark a Terminal Hardware Order as Undeliverable](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_mark_undeliverable)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as undeliverable.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/mark\\_undeliverable\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/mark_undeliverable \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"undeliverable\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Test mode: Mark a Terminal Hardware Order as Shipped | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/financial_accounts/list",
  "markdown": "# List all FinancialAccounts | Stripe API Reference\n\nReturns a list of FinancialAccounts.\n\n### Parameters\n\n*   Only return FinancialAccounts that were created during the given date interval.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` FinancialAccounts, starting after FinancialAccount `starting_after`. Each entry in the array is a separate `FinancialAccount` object. If no more FinancialAccounts are available, the resulting array is empty.\n\nGET /v1/treasury/financial\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/financial_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",      \"object\": \"treasury.financial_account\",      \"active_features\": [        \"financial_addresses.aba\",        \"outbound_payments.ach\",        \"outbound_payments.us_domestic_wire\"      ],      \"balance\": {        \"cash\": {          \"usd\": 0        },        \"inbound_pending\": {          \"usd\": 0        },        \"outbound_pending\": {          \"usd\": 0        }      },      \"country\": \"US\",      \"created\": 1680714349,      \"financial_addresses\": [        {          \"aba\": {            \"account_holder_name\": \"Jenny Rosen\",            \"account_number_last4\": \"7890\",            \"bank_name\": \"STRIPE TEST BANK\",            \"routing_number\": \"0000000001\"          },          \"supported_networks\": [            \"ach\",            \"us_domestic_wire\"          ],          \"type\": \"aba\"        }      ],      \"livemode\": true,      \"metadata\": null,      \"pending_features\": [],      \"restricted_features\": [],      \"status\": \"open\",      \"status_details\": {        \"closed\": null      },      \"supported_currencies\": [        \"usd\"      ],      \"features\": {}    }    {...}    {...}  ],}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all FinancialAccounts | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_return",
  "markdown": "# Test mode: Return an OutboundTransfer\n\n## [Test mode: Return an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_return)Test helper\n\nTransitions a test mode created OutboundTransfer to the `returned` status. The OutboundTransfer must already be in the `processing` state.\n\n### Parameters\n\n*   Details about a returned OutboundTransfer.\n    \n\n### Returns\n\nReturns the OutboundTransfer object in the returned state. Returns an error if the OutboundTransfer has already been returned or cannot be returned.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYdpKbb3Ec6NpO9f9jLUpJTCJGYDld0WR6lbibijEBPoyU4abErSxnN1ZB_JwosN4Krvqn2WLglRwEeAIzg4g\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": {    \"code\": \"declined\",    \"transaction\": \"trxn_1Mtaaz2eZvKYlo2CRvn5ac2X\"  },  \"statement_descriptor\": \"transfer\",  \"status\": \"returned\",  \"status_transitions\": {    \"returned_at\": 1680717489,    \"failed_at\": null,    \"canceled_at\": null,    \"posted_at\": 1680717489  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Test mode: Update an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_update)Test helper\n\nUpdates a test mode created OutboundTransfer with tracking details. The OutboundTransfer must not be cancelable, and cannot be in the `canceled` or `failed` states.\n\n### Parameters\n\n*   #### \n    \n    tracking\\_detailsobjectRequired\n    \n    Details about network-specific tracking information.\n    \n\n### Returns\n\nReturns the OutboundTransfer object with the updated tracking details. Returns an error if the OutboundTransfer is in an invalid state or if `tracking_details` has already been set.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"tracking_details[type]\"=ach \\  -d \"tracking_details[ach][trace_id]\"=841042400123450\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYkJOwRj5U6NpOg9L70S_mhPE92VvJUt_P7rrE938uIHfjCSY3Bjn9Dufo8Z1h9709Gm-LmCbzT7a6j9kFN9w\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"posted\",  \"status_transitions\": {    \"posted_at\": 1680717489,    \"failed_at\": null,    \"canceled_at\": null,    \"returned_at\": null  },  \"tracking_details\": {    \"type\": \"ach\",    \"ach\": {      \"trace_id\": \"841042400123450\"    }  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Test mode: Return an OutboundTransfer | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_update",
  "markdown": "# Test mode: Update an OutboundTransfer\n\n## [Test mode: Update an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_update)Test helper\n\nUpdates a test mode created OutboundTransfer with tracking details. The OutboundTransfer must not be cancelable, and cannot be in the `canceled` or `failed` states.\n\n### Parameters\n\n*   #### \n    \n    tracking\\_detailsobjectRequired\n    \n    Details about network-specific tracking information.\n    \n\n### Returns\n\nReturns the OutboundTransfer object with the updated tracking details. Returns an error if the OutboundTransfer is in an invalid state or if `tracking_details` has already been set.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"tracking_details[type]\"=ach \\  -d \"tracking_details[ach][trace_id]\"=841042400123450\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYkJOwRj5U6NpOg9L70S_mhPE92VvJUt_P7rrE938uIHfjCSY3Bjn9Dufo8Z1h9709Gm-LmCbzT7a6j9kFN9w\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"posted\",  \"status_transitions\": {    \"posted_at\": 1680717489,    \"failed_at\": null,    \"canceled_at\": null,    \"returned_at\": null  },  \"tracking_details\": {    \"type\": \"ach\",    \"ach\": {      \"trace_id\": \"841042400123450\"    }  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Test mode: Update an OutboundTransfer | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_orders/test_mode_mark_undeliverable",
  "markdown": "# Test mode: Mark a Terminal Hardware Order as Undeliverable\n\n## [Test mode: Mark a Terminal Hardware Order as Undeliverable](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_mark_undeliverable)Test helperPreview feature\n\nUpdates a test mode `TerminalHardwareOrder` object’s status as undeliverable.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object.\n\nPOST /v1/test\\_helpers/terminal/hardware\\_orders/:id/mark\\_undeliverable\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/mark_undeliverable \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"undeliverable\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Test mode: Mark a Terminal Hardware Order as Undeliverable | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_products/retrieve",
  "markdown": "# Retrieve a Terminal Hardware Product\n\n## [Retrieve a Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products/retrieve)Preview feature\n\nRetrieves a `TerminalHardwareProduct` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareProduct` object if a valid identifier was provided.\n\nGET /v1/terminal/hardware\\_products/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_products/thpr_MJfotcxYT5Hwsm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thpr_MJfotcxYT5Hwsm\",  \"object\": \"terminal.hardware_product\",  \"status\": \"available\",  \"type\": \"bbpos_wisepos_e\",  \"unavailable_after\": null}\n```\n\n## [List all Terminal Hardware Products](https://docs.stripe.com/api/terminal/hardware_products/list)Preview feature\n\nList all `TerminalHardwareProduct` objects.\n\n### Parameters\n\n*   Only return products that have the given status. Defaults to available.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `available`<br><br>Available for new orders. |\n    | `unavailable`<br><br>Can no longer be used for order creation. |\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of terminal hardware products. Each entry in the array is a separate Product object.\n\nGET /v1/terminal/hardware\\_products\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/hardware_products\",  \"has_more\": false,  \"data\": [    {      \"id\": \"thpr_MJfotcxYT5Hwsm\",      \"object\": \"terminal.hardware_product\",      \"status\": \"available\",      \"type\": \"bbpos_wisepos_e\",      \"unavailable_after\": null    }    {...}    {...}  ],}\n```\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a Terminal Hardware Product | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/financial_account_features/update",
  "markdown": "# Update FinancialAccount Features | Stripe API Reference\n\nUpdates the Features associated with a FinancialAccount.\n\n### Parameters\n\n*   Encodes the FinancialAccount’s ability to be used with the Issuing product, including attaching cards to and drawing funds from the FinancialAccount.\n    \n*   Represents whether this FinancialAccount is eligible for deposit insurance. Various factors determine the insurance amount.\n    \n*   #### \n    \n    financial\\_addressesobject\n    \n    Contains Features that add FinancialAddresses to the FinancialAccount.\n    \n*   Contains settings related to adding funds to a FinancialAccount from another Account with the same owner.\n    \n*   Represents the ability for the FinancialAccount to send money to, or receive money from other FinancialAccounts (for example, via OutboundPayment).\n    \n*   Includes Features related to initiating money movement out of the FinancialAccount to someone else’s bucket of money.\n    \n*   Contains a Feature and settings related to moving money out of the FinancialAccount into another Account with the same owner.\n    \n\n### Returns\n\nA dictionary of Features associated with the given FinancialAccount. Each entry in the dictionary is a Feature object, which may contain child Features.\n\nPOST /v1/treasury/financial\\_accounts/:id/features\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1Mta0C2eZvKYlo2CaEtaPPFz/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"card_issuing[requested]\"=false\n```\n\n```\n{  \"object\": \"treasury.financial_account_features\",  \"deposit_insurance\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"financial_addresses\": {    \"aba\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"inbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"intra_stripe_flows\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"outbound_payments\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"outbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  }}\n```\n\n## [Retrieve FinancialAccount Features](https://docs.stripe.com/api/treasury/financial_account_features/retrieve)\n\nRetrieves Features information associated with the FinancialAccount.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA dictionary of Features associated with the given FinancialAccount. Each entry in the dictionary is a Feature object, which might contain child Features.\n\nGET /v1/treasury/financial\\_accounts/:id/features\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1Mta0C2eZvKYlo2CaEtaPPFz/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"treasury.financial_account_features\",  \"card_issuing\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"deposit_insurance\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"financial_addresses\": {    \"aba\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"inbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"intra_stripe_flows\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"outbound_payments\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"outbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  }}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update FinancialAccount Features | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_products",
  "markdown": "# Terminal Hardware Product | Stripe API Reference\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [The TerminalHardwareProduct object](https://docs.stripe.com/api/terminal/hardware_products/object)Preview feature\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   The status of the terminal hardware product.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `available`<br><br>Available for new orders. |\n    | `unavailable`<br><br>Can no longer be used for order creation. |\n    \n*   The type of product.\n    \n*   #### \n    \n    unavailable\\_afternullable integer\n    \n    If all the SKUs for this product have an unavailable\\_after then this is the max unavailable\\_after in UNIX timestamp. Otherwise, null.\n    \n\nThe TerminalHardwareProduct object\n\n```\n{  \"id\": \"thpr_MJfotcxYT5Hwsm\",  \"object\": \"terminal.hardware_product\",  \"status\": \"available\",  \"type\": \"bbpos_wisepos_e\",  \"unavailable_after\": null}\n```\n\n## [Retrieve a Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products/retrieve)Preview feature\n\nRetrieves a `TerminalHardwareProduct` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareProduct` object if a valid identifier was provided.\n\nGET /v1/terminal/hardware\\_products/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_products/thpr_MJfotcxYT5Hwsm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thpr_MJfotcxYT5Hwsm\",  \"object\": \"terminal.hardware_product\",  \"status\": \"available\",  \"type\": \"bbpos_wisepos_e\",  \"unavailable_after\": null}\n```\n\n## [List all Terminal Hardware Products](https://docs.stripe.com/api/terminal/hardware_products/list)Preview feature\n\nList all `TerminalHardwareProduct` objects.\n\n### Parameters\n\n*   Only return products that have the given status. Defaults to available.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `available`<br><br>Available for new orders. |\n    | `unavailable`<br><br>Can no longer be used for order creation. |\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of terminal hardware products. Each entry in the array is a separate Product object.\n\nGET /v1/terminal/hardware\\_products\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/hardware_products\",  \"has_more\": false,  \"data\": [    {      \"id\": \"thpr_MJfotcxYT5Hwsm\",      \"object\": \"terminal.hardware_product\",      \"status\": \"available\",      \"type\": \"bbpos_wisepos_e\",      \"unavailable_after\": null    }    {...}    {...}  ],}\n```\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Terminal Hardware Product | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_payments/create",
  "markdown": "# Create an OutboundPayment | Stripe API Reference\n\nCreates an OutboundPayment.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to pull funds from.\n    \n*   ID of the customer to whom the OutboundPayment is sent. Must match the Customer attached to the `destination_payment_method` passed in.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    destination\\_payment\\_methodstring\n    \n    The PaymentMethod to use as the payment instrument for the OutboundPayment. Exclusive with `destination_payment_method_data`.\n    \n*   #### \n    \n    destination\\_payment\\_method\\_dataobject\n    \n    Hash used to generate the PaymentMethod to be used for this OutboundPayment. Exclusive with `destination_payment_method`.\n    \n*   #### \n    \n    destination\\_payment\\_method\\_optionsobject\n    \n    Payment method-specific configuration for this OutboundPayment.\n    \n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    The description that appears on the receiving end for this OutboundPayment (for example, bank statement for external bank transfer). Maximum 10 characters for `ach` payments, 140 characters for `us_domestic_wire` payments, or 500 characters for `stripe` network transfers. The default value is “payment”.\n    \n\n### Returns\n\nReturns an OutboundPayment object if there were no issues with OutboundPayment creation.\n\nPOST /v1/treasury/outbound\\_payments\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaD72eZvKYlo2CYKM3DnUI \\  -d amount=10000 \\  -d currency=usd \\  -d customer=cus_4QFOF3xrvBT2nU \\  -d destination_payment_method=pm_1MtaD82eZvKYlo2Cn1XtS23o \\  -d description=\"OutboundPayment to a 3rd party\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": \"cus_4QFOF3xrvBT2nU\",  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": \"pm_1MtaD82eZvKYlo2CtGr4OxTt\",  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYgdA-GrKk6NZNsf-FXPEqqbHm44fwJ57pNybbkweviYUDJGYFOw4f9cAqpfvPKQZ6y0S2C5DYyRwmDs_36\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Retrieve an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/retrieve)\n\nRetrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an OutboundPayment object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/outbound\\_payments/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_payments/obp_1MtaD72eZvKYlo2Cu5d5S1kX \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": \"cus_4QFOF3xrvBT2nU\",  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": \"pm_1MtaD82eZvKYlo2CtGr4OxTt\",  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYgdA-GrKk6NZNsf-FXPEqqbHm44fwJ57pNybbkweviYUDJGYFOw4f9cAqpfvPKQZ6y0S2C5DYyRwmDs_36\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [List all OutboundPayments](https://docs.stripe.com/api/treasury/outbound_payments/list)\n\nReturns a list of OutboundPayments sent from the specified FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return OutboundPayments that were created during the given date interval.\n    \n*   Only return OutboundPayments sent to this customer.\n    \n*   Only return OutboundPayments that have the given status: `processing`, `failed`, `posted`, `returned`, or `canceled`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` OutboundPayments, starting after OutboundPayments `starting_after`. Each entry in the array is a separate OutboundPayments object. If no more OutboundPayments are available, the resulting array is empty.\n\nGET /v1/treasury/outbound\\_payments\n\n```\ncurl -G https://api.stripe.com/v1/treasury/outbound_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaD72eZvKYlo2CYKM3DnUI \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/outbound_payments\",  \"has_more\": false,  \"data\": [    {      \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",      \"object\": \"treasury.outbound_payment\",      \"amount\": 10000,      \"cancelable\": false,      \"created\": 1680716009,      \"currency\": \"usd\",      \"customer\": \"cus_4QFOF3xrvBT2nU\",      \"description\": \"OutboundPayment to a 3rd party\",      \"destination_payment_method\": \"pm_1MtaD82eZvKYlo2CtGr4OxTt\",      \"destination_payment_method_details\": {        \"type\": \"us_bank_account\",        \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"      },      \"end_user_details\": {        \"ip_address\": null,        \"present\": false      },      \"expected_arrival_date\": 1680716009,      \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYgdA-GrKk6NZNsf-FXPEqqbHm44fwJ57pNybbkweviYUDJGYFOw4f9cAqpfvPKQZ6y0S2C5DYyRwmDs_36\",      \"livemode\": false,      \"metadata\": {},      \"returned_details\": null,      \"statement_descriptor\": \"payment\",      \"status\": \"processing\",      \"status_transitions\": {        \"canceled_at\": null,        \"failed_at\": null,        \"posted_at\": null,        \"returned_at\": null      },      \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"    }    {...}    {...}  ],}\n```\n\n## [Cancel an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/cancel)\n\nCancel an OutboundPayment.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundPayment object if the cancellation succeeded. Returns an error if the OutboundPayment has already been canceled or cannot be canceled.\n\nPOST /v1/treasury/outbound\\_payments/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/treasury/outbound_payments/obp_1MtaD72eZvKYlo2Cu5d5S1kX/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": null    },    \"financial_account\": {      \"id\": \"fa_1LpyM72eZvKYlo2CiUmr2kuV\",      \"network\": \"stripe\"    },    \"type\": \"financial_account\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgakyczTzCY6NZMi6lMnZXTYms--WBYQzUXzaEJ_JwErEK5FXXW8F9Qy7fEzKvsHEOzyjS9AtIuK8sUjgWdU\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"canceled\",  \"status_transitions\": {    \"posted_at\": null,    \"failed_at\": null,    \"canceled_at\": 1680716010,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Test mode: Fail an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_fail)Test helper\n\nTransitions a test mode created OutboundPayment to the `failed` status. The OutboundPayment must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundPayment object in the failed state. Returns an error if the OutboundPayment has already been failed or cannot be failed.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id/fail\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgbuLATJtPw6NZOxERTeGKynM40SUCL6A1sqeZF9vkrX4q4M0rI4eY7EhfkOVvyileEuRReLgXE2crXLg7sd\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"failed\",  \"status_transitions\": {    \"failed_at\": 1680716010,    \"posted_at\": null,    \"returned_at\": null,    \"canceled_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```",
  "title": "Create an OutboundPayment | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/financial_account_features/retrieve",
  "markdown": "# Retrieve FinancialAccount Features | Stripe API Reference\n\nRetrieves Features information associated with the FinancialAccount.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA dictionary of Features associated with the given FinancialAccount. Each entry in the dictionary is a Feature object, which might contain child Features.\n\nGET /v1/treasury/financial\\_accounts/:id/features\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1Mta0C2eZvKYlo2CaEtaPPFz/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"treasury.financial_account_features\",  \"card_issuing\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"deposit_insurance\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"financial_addresses\": {    \"aba\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"inbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"intra_stripe_flows\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"outbound_payments\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"outbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  }}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve FinancialAccount Features | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_products/list",
  "markdown": "# List all Terminal Hardware Products\n\n## [List all Terminal Hardware Products](https://docs.stripe.com/api/terminal/hardware_products/list)Preview feature\n\nList all `TerminalHardwareProduct` objects.\n\n### Parameters\n\n*   Only return products that have the given status. Defaults to available.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `available`<br><br>Available for new orders. |\n    | `unavailable`<br><br>Can no longer be used for order creation. |\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of terminal hardware products. Each entry in the array is a separate Product object.\n\nGET /v1/terminal/hardware\\_products\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/hardware_products\",  \"has_more\": false,  \"data\": [    {      \"id\": \"thpr_MJfotcxYT5Hwsm\",      \"object\": \"terminal.hardware_product\",      \"status\": \"available\",      \"type\": \"bbpos_wisepos_e\",      \"unavailable_after\": null    }    {...}    {...}  ],}\n```\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all Terminal Hardware Products | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_skus",
  "markdown": "# Terminal Hardware SKU | Stripe API Reference\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [The TerminalHardwareSKU object](https://docs.stripe.com/api/terminal/hardware_skus/object)Preview feature\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The price of this SKU.\n    \n\n### More attributes\n\n*   #### \n    \n    unavailable\\_afternullable integer\n    \n\nThe TerminalHardwareSKU object\n\n```\n{  \"id\": \"thsku_L5fys7HZ5o02Nc\",  \"object\": \"terminal.hardware_sku\",  \"amount\": 450,  \"country\": \"AT\",  \"currency\": \"usd\",  \"orderable\": 100,  \"product\": \"thpr_MJfof7SLvdkG6T\",  \"status\": \"available\",  \"unavailable_after\": null}\n```\n\n## [Retrieve an available Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus/retrieve)Preview feature\n\nRetrieves an available `TerminalHardwareSKU` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an available `TerminalHardwareSKU` object if a valid identifier was provided.\n\nGET /v1/terminal/hardware\\_skus/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_skus/thsku_L5fys7HZ5o02Nc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thsku_L5fys7HZ5o02Nc\",  \"object\": \"terminal.hardware_sku\",  \"amount\": 450,  \"country\": \"AT\",  \"currency\": \"usd\",  \"orderable\": 100,  \"product\": \"thpr_MJfof7SLvdkG6T\",  \"status\": \"available\",  \"unavailable_after\": null}\n```\n\n## [List all Terminal Hardware SKUs](https://docs.stripe.com/api/terminal/hardware_skus/list)Preview feature\n\nList all `TerminalHardwareSKU` objects.\n\n### Parameters\n\n*   The ISO 3166-1 alpha-2 country code representing the country associated with the SKUs to be retrieved. Available country codes can be listed with the [List Country Specs](https://docs.stripe.com/api#list_country_specs) endpoint.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of terminal hardware SKUs. Each entry in the array is a separate SKU object.\n\nGET /v1/terminal/hardware\\_skus\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_skus \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/hardware_skus\",  \"has_more\": false,  \"data\": [    {      \"id\": \"thsku_L5fys7HZ5o02Nc\",      \"object\": \"terminal.hardware_sku\",      \"amount\": 450,      \"country\": \"AT\",      \"currency\": \"usd\",      \"orderable\": 100,      \"product\": \"thpr_MJfof7SLvdkG6T\",      \"status\": \"available\",      \"unavailable_after\": null    }    {...}    {...}  ],}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Terminal Hardware SKU | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/transactions/retrieve",
  "markdown": "# Retrieve a Transaction | Stripe API Reference\n\nRetrieves the details of an existing Transaction.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a Transaction object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/transactions/trxn_1MtkYw2eZvKYlo2ClMGIO54z \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"trxn_1MtkYw2eZvKYlo2ClMGIO54z\",  \"object\": \"treasury.transaction\",  \"amount\": -100,  \"balance_impact\": {    \"cash\": -100,    \"inbound_pending\": 0,    \"outbound_pending\": 100  },  \"created\": 1680755802,  \"currency\": \"usd\",  \"description\": \"Jane Austen (6789) | Outbound transfer | transfer\",  \"financial_account\": \"fa_1MtkYw2eZvKYlo2CrqmzUo3O\",  \"flow\": \"obt_1MtkYw2eZvKYlo2CqsyBpQts\",  \"flow_type\": \"outbound_transfer\",  \"livemode\": false,  \"status\": \"open\",  \"status_transitions\": {    \"posted_at\": null,    \"void_at\": null  }}\n```\n\n## [List all Transactions](https://docs.stripe.com/api/treasury/transactions/list)\n\nRetrieves a list of Transaction objects.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return Transactions that were created during the given date interval.\n    \n*   The results are in reverse chronological order by `created` or `posted_at`. The default is `created`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `created`<br><br>Timestamp describing when the Transaction was created. |\n    | `posted_at`<br><br>Timestamp describing when the Transaction was posted. |\n    \n*   Only return Transactions that have the given status: `open`, `posted`, or `void`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `open`<br><br>The initial state for all Transactions. The Transaction results in updates to the sub-balance amounts, but the current balance is not affected until the Transaction posts. |\n    | `posted`<br><br>Funds have successfully entered or left the account. The current balance was affected. |\n    | `void`<br><br>The Transaction never impacted the balance. For example, a Transaction would enter this state if an OutboundPayment was initiated but then canceled before the funds left the account. |\n    \n*   A filter for the `status_transitions.posted_at` timestamp. When using this filter, `status=posted` and `order_by=posted_at` must also be specified.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Transactions, starting after Transaction `starting_after`. Each entry in the array is a separate Transaction object. If no more Transactions are available, the resulting array will be empty.\n\nGET /v1/treasury/transactions\n\n```\ncurl -G https://api.stripe.com/v1/treasury/transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkYw2eZvKYlo2CrqmzUo3O \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"trxn_1MtkYw2eZvKYlo2ClMGIO54z\",      \"object\": \"treasury.transaction\",      \"amount\": -100,      \"balance_impact\": {        \"cash\": -100,        \"inbound_pending\": 0,        \"outbound_pending\": 100      },      \"created\": 1680755802,      \"currency\": \"usd\",      \"description\": \"Jane Austen (6789) | Outbound transfer | transfer\",      \"financial_account\": \"fa_1MtkYw2eZvKYlo2CrqmzUo3O\",      \"flow\": \"obt_1MtkYw2eZvKYlo2CqsyBpQts\",      \"flow_type\": \"outbound_transfer\",      \"livemode\": false,      \"status\": \"open\",      \"status_transitions\": {        \"posted_at\": null,        \"void_at\": null      }    }    {...}    {...}  ],}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a Transaction | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_payments/retrieve",
  "markdown": "# Retrieve an OutboundPayment | Stripe API Reference\n\nRetrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an OutboundPayment object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/outbound\\_payments/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_payments/obp_1MtaD72eZvKYlo2Cu5d5S1kX \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": \"cus_4QFOF3xrvBT2nU\",  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": \"pm_1MtaD82eZvKYlo2CtGr4OxTt\",  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYgdA-GrKk6NZNsf-FXPEqqbHm44fwJ57pNybbkweviYUDJGYFOw4f9cAqpfvPKQZ6y0S2C5DYyRwmDs_36\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [List all OutboundPayments](https://docs.stripe.com/api/treasury/outbound_payments/list)\n\nReturns a list of OutboundPayments sent from the specified FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return OutboundPayments that were created during the given date interval.\n    \n*   Only return OutboundPayments sent to this customer.\n    \n*   Only return OutboundPayments that have the given status: `processing`, `failed`, `posted`, `returned`, or `canceled`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` OutboundPayments, starting after OutboundPayments `starting_after`. Each entry in the array is a separate OutboundPayments object. If no more OutboundPayments are available, the resulting array is empty.\n\nGET /v1/treasury/outbound\\_payments\n\n```\ncurl -G https://api.stripe.com/v1/treasury/outbound_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaD72eZvKYlo2CYKM3DnUI \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/outbound_payments\",  \"has_more\": false,  \"data\": [    {      \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",      \"object\": \"treasury.outbound_payment\",      \"amount\": 10000,      \"cancelable\": false,      \"created\": 1680716009,      \"currency\": \"usd\",      \"customer\": \"cus_4QFOF3xrvBT2nU\",      \"description\": \"OutboundPayment to a 3rd party\",      \"destination_payment_method\": \"pm_1MtaD82eZvKYlo2CtGr4OxTt\",      \"destination_payment_method_details\": {        \"type\": \"us_bank_account\",        \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"      },      \"end_user_details\": {        \"ip_address\": null,        \"present\": false      },      \"expected_arrival_date\": 1680716009,      \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYgdA-GrKk6NZNsf-FXPEqqbHm44fwJ57pNybbkweviYUDJGYFOw4f9cAqpfvPKQZ6y0S2C5DYyRwmDs_36\",      \"livemode\": false,      \"metadata\": {},      \"returned_details\": null,      \"statement_descriptor\": \"payment\",      \"status\": \"processing\",      \"status_transitions\": {        \"canceled_at\": null,        \"failed_at\": null,        \"posted_at\": null,        \"returned_at\": null      },      \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"    }    {...}    {...}  ],}\n```\n\n## [Cancel an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/cancel)\n\nCancel an OutboundPayment.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundPayment object if the cancellation succeeded. Returns an error if the OutboundPayment has already been canceled or cannot be canceled.\n\nPOST /v1/treasury/outbound\\_payments/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/treasury/outbound_payments/obp_1MtaD72eZvKYlo2Cu5d5S1kX/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": null    },    \"financial_account\": {      \"id\": \"fa_1LpyM72eZvKYlo2CiUmr2kuV\",      \"network\": \"stripe\"    },    \"type\": \"financial_account\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgakyczTzCY6NZMi6lMnZXTYms--WBYQzUXzaEJ_JwErEK5FXXW8F9Qy7fEzKvsHEOzyjS9AtIuK8sUjgWdU\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"canceled\",  \"status_transitions\": {    \"posted_at\": null,    \"failed_at\": null,    \"canceled_at\": 1680716010,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Test mode: Fail an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_fail)Test helper\n\nTransitions a test mode created OutboundPayment to the `failed` status. The OutboundPayment must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundPayment object in the failed state. Returns an error if the OutboundPayment has already been failed or cannot be failed.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id/fail\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgbuLATJtPw6NZOxERTeGKynM40SUCL6A1sqeZF9vkrX4q4M0rI4eY7EhfkOVvyileEuRReLgXE2crXLg7sd\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"failed\",  \"status_transitions\": {    \"failed_at\": 1680716010,    \"posted_at\": null,    \"returned_at\": null,    \"canceled_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Test mode: Post an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_post)Test helper\n\nTransitions a test mode created OutboundPayment to the `posted` status. The OutboundPayment must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundPayment object in the posted state. Returns an error if the OutboundPayment has already been posted or cannot be posted.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id/post\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y/post \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgawWNwbI_w6NZNOI4y6vNpfIP-oQAT5mkBRbOHJN1f08r7jF-UumeywdupuJr7P2cxF8L5JRSVPMmttq_kA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"posted\",  \"status_transitions\": {    \"failed_at\": null,    \"posted_at\": 1680716010,    \"returned_at\": null,    \"canceled_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```",
  "title": "Retrieve an OutboundPayment | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_payments/list",
  "markdown": "# List all OutboundPayments | Stripe API Reference\n\nReturns a list of OutboundPayments sent from the specified FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return OutboundPayments that were created during the given date interval.\n    \n*   Only return OutboundPayments sent to this customer.\n    \n*   Only return OutboundPayments that have the given status: `processing`, `failed`, `posted`, `returned`, or `canceled`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` OutboundPayments, starting after OutboundPayments `starting_after`. Each entry in the array is a separate OutboundPayments object. If no more OutboundPayments are available, the resulting array is empty.\n\nGET /v1/treasury/outbound\\_payments\n\n```\ncurl -G https://api.stripe.com/v1/treasury/outbound_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaD72eZvKYlo2CYKM3DnUI \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/outbound_payments\",  \"has_more\": false,  \"data\": [    {      \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",      \"object\": \"treasury.outbound_payment\",      \"amount\": 10000,      \"cancelable\": false,      \"created\": 1680716009,      \"currency\": \"usd\",      \"customer\": \"cus_4QFOF3xrvBT2nU\",      \"description\": \"OutboundPayment to a 3rd party\",      \"destination_payment_method\": \"pm_1MtaD82eZvKYlo2CtGr4OxTt\",      \"destination_payment_method_details\": {        \"type\": \"us_bank_account\",        \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"      },      \"end_user_details\": {        \"ip_address\": null,        \"present\": false      },      \"expected_arrival_date\": 1680716009,      \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYgdA-GrKk6NZNsf-FXPEqqbHm44fwJ57pNybbkweviYUDJGYFOw4f9cAqpfvPKQZ6y0S2C5DYyRwmDs_36\",      \"livemode\": false,      \"metadata\": {},      \"returned_details\": null,      \"statement_descriptor\": \"payment\",      \"status\": \"processing\",      \"status_transitions\": {        \"canceled_at\": null,        \"failed_at\": null,        \"posted_at\": null,        \"returned_at\": null      },      \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"    }    {...}    {...}  ],}\n```\n\n## [Cancel an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/cancel)\n\nCancel an OutboundPayment.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundPayment object if the cancellation succeeded. Returns an error if the OutboundPayment has already been canceled or cannot be canceled.\n\nPOST /v1/treasury/outbound\\_payments/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/treasury/outbound_payments/obp_1MtaD72eZvKYlo2Cu5d5S1kX/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": null    },    \"financial_account\": {      \"id\": \"fa_1LpyM72eZvKYlo2CiUmr2kuV\",      \"network\": \"stripe\"    },    \"type\": \"financial_account\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgakyczTzCY6NZMi6lMnZXTYms--WBYQzUXzaEJ_JwErEK5FXXW8F9Qy7fEzKvsHEOzyjS9AtIuK8sUjgWdU\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"canceled\",  \"status_transitions\": {    \"posted_at\": null,    \"failed_at\": null,    \"canceled_at\": 1680716010,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Test mode: Fail an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_fail)Test helper\n\nTransitions a test mode created OutboundPayment to the `failed` status. The OutboundPayment must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundPayment object in the failed state. Returns an error if the OutboundPayment has already been failed or cannot be failed.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id/fail\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgbuLATJtPw6NZOxERTeGKynM40SUCL6A1sqeZF9vkrX4q4M0rI4eY7EhfkOVvyileEuRReLgXE2crXLg7sd\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"failed\",  \"status_transitions\": {    \"failed_at\": 1680716010,    \"posted_at\": null,    \"returned_at\": null,    \"canceled_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Test mode: Post an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_post)Test helper\n\nTransitions a test mode created OutboundPayment to the `posted` status. The OutboundPayment must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundPayment object in the posted state. Returns an error if the OutboundPayment has already been posted or cannot be posted.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id/post\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y/post \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgawWNwbI_w6NZNOI4y6vNpfIP-oQAT5mkBRbOHJN1f08r7jF-UumeywdupuJr7P2cxF8L5JRSVPMmttq_kA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"posted\",  \"status_transitions\": {    \"failed_at\": null,    \"posted_at\": 1680716010,    \"returned_at\": null,    \"canceled_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Test mode: Return an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_return)Test helper\n\nTransitions a test mode created OutboundPayment to the `returned` status. The OutboundPayment must already be in the `processing` state.\n\n### Parameters\n\n*   Optional hash to set the return code.\n    \n\n### Returns\n\nReturns the OutboundPayment object in the returned state. Returns an error if the OutboundPayment has already been returned or cannot be returned.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYhogtESYQ6NZMO6Vt0EC3mum1Ote762Q9ymvgfrijWXRfgVjJ5BoXVxeND-NunsJmjcHhb2F_4bmtHHWur\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": {    \"code\": \"account_closed\",    \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"  },  \"statement_descriptor\": \"payment\",  \"status\": \"returned\",  \"status_transitions\": {    \"failed_at\": null,    \"posted_at\": 1680716010,    \"returned_at\": 1680716011,    \"canceled_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```",
  "title": "List all OutboundPayments | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/hardware_skus/retrieve",
  "markdown": "# Retrieve an available Terminal Hardware SKU\n\n## [Retrieve an available Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus/retrieve)Preview feature\n\nRetrieves an available `TerminalHardwareSKU` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an available `TerminalHardwareSKU` object if a valid identifier was provided.\n\nGET /v1/terminal/hardware\\_skus/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_skus/thsku_L5fys7HZ5o02Nc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thsku_L5fys7HZ5o02Nc\",  \"object\": \"terminal.hardware_sku\",  \"amount\": 450,  \"country\": \"AT\",  \"currency\": \"usd\",  \"orderable\": 100,  \"product\": \"thpr_MJfof7SLvdkG6T\",  \"status\": \"available\",  \"unavailable_after\": null}\n```\n\n## [List all Terminal Hardware SKUs](https://docs.stripe.com/api/terminal/hardware_skus/list)Preview feature\n\nList all `TerminalHardwareSKU` objects.\n\n### Parameters\n\n*   The ISO 3166-1 alpha-2 country code representing the country associated with the SKUs to be retrieved. Available country codes can be listed with the [List Country Specs](https://docs.stripe.com/api#list_country_specs) endpoint.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of terminal hardware SKUs. Each entry in the array is a separate SKU object.\n\nGET /v1/terminal/hardware\\_skus\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_skus \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/hardware_skus\",  \"has_more\": false,  \"data\": [    {      \"id\": \"thsku_L5fys7HZ5o02Nc\",      \"object\": \"terminal.hardware_sku\",      \"amount\": 450,      \"country\": \"AT\",      \"currency\": \"usd\",      \"orderable\": 100,      \"product\": \"thpr_MJfof7SLvdkG6T\",      \"status\": \"available\",      \"unavailable_after\": null    }    {...}    {...}  ],}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve an available Terminal Hardware SKU | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_payments/cancel",
  "markdown": "# Cancel an OutboundPayment | Stripe API Reference\n\nCancel an OutboundPayment.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundPayment object if the cancellation succeeded. Returns an error if the OutboundPayment has already been canceled or cannot be canceled.\n\nPOST /v1/treasury/outbound\\_payments/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/treasury/outbound_payments/obp_1MtaD72eZvKYlo2Cu5d5S1kX/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": null    },    \"financial_account\": {      \"id\": \"fa_1LpyM72eZvKYlo2CiUmr2kuV\",      \"network\": \"stripe\"    },    \"type\": \"financial_account\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgakyczTzCY6NZMi6lMnZXTYms--WBYQzUXzaEJ_JwErEK5FXXW8F9Qy7fEzKvsHEOzyjS9AtIuK8sUjgWdU\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"canceled\",  \"status_transitions\": {    \"posted_at\": null,    \"failed_at\": null,    \"canceled_at\": 1680716010,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Test mode: Fail an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_fail)Test helper\n\nTransitions a test mode created OutboundPayment to the `failed` status. The OutboundPayment must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundPayment object in the failed state. Returns an error if the OutboundPayment has already been failed or cannot be failed.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id/fail\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgbuLATJtPw6NZOxERTeGKynM40SUCL6A1sqeZF9vkrX4q4M0rI4eY7EhfkOVvyileEuRReLgXE2crXLg7sd\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"failed\",  \"status_transitions\": {    \"failed_at\": 1680716010,    \"posted_at\": null,    \"returned_at\": null,    \"canceled_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Test mode: Post an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_post)Test helper\n\nTransitions a test mode created OutboundPayment to the `posted` status. The OutboundPayment must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundPayment object in the posted state. Returns an error if the OutboundPayment has already been posted or cannot be posted.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id/post\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y/post \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgawWNwbI_w6NZNOI4y6vNpfIP-oQAT5mkBRbOHJN1f08r7jF-UumeywdupuJr7P2cxF8L5JRSVPMmttq_kA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"posted\",  \"status_transitions\": {    \"failed_at\": null,    \"posted_at\": 1680716010,    \"returned_at\": null,    \"canceled_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Test mode: Return an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_return)Test helper\n\nTransitions a test mode created OutboundPayment to the `returned` status. The OutboundPayment must already be in the `processing` state.\n\n### Parameters\n\n*   Optional hash to set the return code.\n    \n\n### Returns\n\nReturns the OutboundPayment object in the returned state. Returns an error if the OutboundPayment has already been returned or cannot be returned.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYhogtESYQ6NZMO6Vt0EC3mum1Ote762Q9ymvgfrijWXRfgVjJ5BoXVxeND-NunsJmjcHhb2F_4bmtHHWur\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": {    \"code\": \"account_closed\",    \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"  },  \"statement_descriptor\": \"payment\",  \"status\": \"returned\",  \"status_transitions\": {    \"failed_at\": null,    \"posted_at\": 1680716010,    \"returned_at\": 1680716011,    \"canceled_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Test mode: Update an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_update)Test helper\n\nUpdates a test mode created OutboundPayment with tracking details. The OutboundPayment must not be cancelable, and cannot be in the `canceled` or `failed` states.\n\n### Parameters\n\n*   #### \n    \n    tracking\\_detailsobjectRequired\n    \n    Details about network-specific tracking information.\n    \n\n### Returns\n\nReturns the OutboundPayment object with the updated tracking details. Returns an error if the OutboundPayment is in an invalid state or if `tracking_details` has already been set.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"tracking_details[type]\"=ach \\  -d \"tracking_details[ach][trace_id]\"=841042400123450\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgawWNwbI_w6NZNOI4y6vNpfIP-oQAT5mkBRbOHJN1f08r7jF-UumeywdupuJr7P2cxF8L5JRSVPMmttq_kA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"posted\",  \"status_transitions\": {    \"failed_at\": null,    \"posted_at\": 1680716010,    \"returned_at\": null,    \"canceled_at\": null  },  \"tracking_details\": {    \"type\": \"ach\",    \"ach\": {      \"trace_id\": \"841042400123450\"    }  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```",
  "title": "Cancel an OutboundPayment | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_payments/test_mode_fail",
  "markdown": "# Test mode: Fail an OutboundPayment\n\n## [Test mode: Fail an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_fail)Test helper\n\nTransitions a test mode created OutboundPayment to the `failed` status. The OutboundPayment must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundPayment object in the failed state. Returns an error if the OutboundPayment has already been failed or cannot be failed.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id/fail\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgbuLATJtPw6NZOxERTeGKynM40SUCL6A1sqeZF9vkrX4q4M0rI4eY7EhfkOVvyileEuRReLgXE2crXLg7sd\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"failed\",  \"status_transitions\": {    \"failed_at\": 1680716010,    \"posted_at\": null,    \"returned_at\": null,    \"canceled_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Test mode: Post an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_post)Test helper\n\nTransitions a test mode created OutboundPayment to the `posted` status. The OutboundPayment must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundPayment object in the posted state. Returns an error if the OutboundPayment has already been posted or cannot be posted.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id/post\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y/post \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgawWNwbI_w6NZNOI4y6vNpfIP-oQAT5mkBRbOHJN1f08r7jF-UumeywdupuJr7P2cxF8L5JRSVPMmttq_kA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"posted\",  \"status_transitions\": {    \"failed_at\": null,    \"posted_at\": 1680716010,    \"returned_at\": null,    \"canceled_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Test mode: Return an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_return)Test helper\n\nTransitions a test mode created OutboundPayment to the `returned` status. The OutboundPayment must already be in the `processing` state.\n\n### Parameters\n\n*   Optional hash to set the return code.\n    \n\n### Returns\n\nReturns the OutboundPayment object in the returned state. Returns an error if the OutboundPayment has already been returned or cannot be returned.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYhogtESYQ6NZMO6Vt0EC3mum1Ote762Q9ymvgfrijWXRfgVjJ5BoXVxeND-NunsJmjcHhb2F_4bmtHHWur\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": {    \"code\": \"account_closed\",    \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"  },  \"statement_descriptor\": \"payment\",  \"status\": \"returned\",  \"status_transitions\": {    \"failed_at\": null,    \"posted_at\": 1680716010,    \"returned_at\": 1680716011,    \"canceled_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Test mode: Update an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_update)Test helper\n\nUpdates a test mode created OutboundPayment with tracking details. The OutboundPayment must not be cancelable, and cannot be in the `canceled` or `failed` states.\n\n### Parameters\n\n*   #### \n    \n    tracking\\_detailsobjectRequired\n    \n    Details about network-specific tracking information.\n    \n\n### Returns\n\nReturns the OutboundPayment object with the updated tracking details. Returns an error if the OutboundPayment is in an invalid state or if `tracking_details` has already been set.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"tracking_details[type]\"=ach \\  -d \"tracking_details[ach][trace_id]\"=841042400123450\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgawWNwbI_w6NZNOI4y6vNpfIP-oQAT5mkBRbOHJN1f08r7jF-UumeywdupuJr7P2cxF8L5JRSVPMmttq_kA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"posted\",  \"status_transitions\": {    \"failed_at\": null,    \"posted_at\": 1680716010,    \"returned_at\": null,    \"canceled_at\": null  },  \"tracking_details\": {    \"type\": \"ach\",    \"ach\": {      \"trace_id\": \"841042400123450\"    }  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Test mode: Fail an OutboundPayment | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_payments/test_mode_post",
  "markdown": "# Test mode: Post an OutboundPayment\n\n## [Test mode: Post an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_post)Test helper\n\nTransitions a test mode created OutboundPayment to the `posted` status. The OutboundPayment must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundPayment object in the posted state. Returns an error if the OutboundPayment has already been posted or cannot be posted.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id/post\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y/post \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgawWNwbI_w6NZNOI4y6vNpfIP-oQAT5mkBRbOHJN1f08r7jF-UumeywdupuJr7P2cxF8L5JRSVPMmttq_kA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"posted\",  \"status_transitions\": {    \"failed_at\": null,    \"posted_at\": 1680716010,    \"returned_at\": null,    \"canceled_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Test mode: Return an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_return)Test helper\n\nTransitions a test mode created OutboundPayment to the `returned` status. The OutboundPayment must already be in the `processing` state.\n\n### Parameters\n\n*   Optional hash to set the return code.\n    \n\n### Returns\n\nReturns the OutboundPayment object in the returned state. Returns an error if the OutboundPayment has already been returned or cannot be returned.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYhogtESYQ6NZMO6Vt0EC3mum1Ote762Q9ymvgfrijWXRfgVjJ5BoXVxeND-NunsJmjcHhb2F_4bmtHHWur\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": {    \"code\": \"account_closed\",    \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"  },  \"statement_descriptor\": \"payment\",  \"status\": \"returned\",  \"status_transitions\": {    \"failed_at\": null,    \"posted_at\": 1680716010,    \"returned_at\": 1680716011,    \"canceled_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Test mode: Update an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_update)Test helper\n\nUpdates a test mode created OutboundPayment with tracking details. The OutboundPayment must not be cancelable, and cannot be in the `canceled` or `failed` states.\n\n### Parameters\n\n*   #### \n    \n    tracking\\_detailsobjectRequired\n    \n    Details about network-specific tracking information.\n    \n\n### Returns\n\nReturns the OutboundPayment object with the updated tracking details. Returns an error if the OutboundPayment is in an invalid state or if `tracking_details` has already been set.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"tracking_details[type]\"=ach \\  -d \"tracking_details[ach][trace_id]\"=841042400123450\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgawWNwbI_w6NZNOI4y6vNpfIP-oQAT5mkBRbOHJN1f08r7jF-UumeywdupuJr7P2cxF8L5JRSVPMmttq_kA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"posted\",  \"status_transitions\": {    \"failed_at\": null,    \"posted_at\": 1680716010,    \"returned_at\": null,    \"canceled_at\": null  },  \"tracking_details\": {    \"type\": \"ach\",    \"ach\": {      \"trace_id\": \"841042400123450\"    }  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Test mode: Post an OutboundPayment | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/transaction_entries/retrieve",
  "markdown": "# Retrieve a TransactionEntry | Stripe API Reference\n\nRetrieves a TransactionEntry object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a TransactionEntry object.\n\nGET /v1/treasury/transaction\\_entries/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/transaction_entries/trxne_1MtkgV2eZvKYlo2CmofEnIwJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"trxne_1MtkgV2eZvKYlo2CmofEnIwJ\",  \"object\": \"treasury.transaction_entry\",  \"balance_impact\": {    \"cash\": 0,    \"inbound_pending\": 0,    \"outbound_pending\": -1000  },  \"created\": 1680756271,  \"currency\": \"usd\",  \"effective_at\": 1680756271,  \"financial_account\": \"fa_1MtkgV2eZvKYlo2CdxyvnHeQ\",  \"flow\": \"obt_1MtkgV2eZvKYlo2CCxhXVFLB\",  \"flow_type\": \"outbound_transfer\",  \"livemode\": false,  \"transaction\": \"trxn_1MtkgV2eZvKYlo2CRYxD7KLh\",  \"type\": \"outbound_transfer\"}\n```\n\n## [List all TransactionEntries](https://docs.stripe.com/api/treasury/transaction_entries/list)\n\nRetrieves a list of TransactionEntry objects.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return TransactionEntries that were created during the given date interval.\n    \n*   The results are in reverse chronological order by `created` or `effective_at`. The default is `created`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `created`<br><br>Timestamp describing when the TransactionEntry was created. |\n    | `effective_at`<br><br>Timestamp describing when the TransactionEntry was effective. |\n    \n*   Only return TransactionEntries associated with this Transaction.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` TransactionEntries, starting after TransactionEntry `starting_after`. Each entry in the array is a separate TransactionEntry object. If no more TransactionEntries are available, the resulting array is empty.\n\nGET /v1/treasury/transaction\\_entries\n\n```\ncurl -G https://api.stripe.com/v1/treasury/transaction_entries \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkgV2eZvKYlo2CdxyvnHeQ \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/transaction_entries\",  \"has_more\": false,  \"data\": [    {      \"id\": \"trxne_1MtkgV2eZvKYlo2CmofEnIwJ\",      \"object\": \"treasury.transaction_entry\",      \"balance_impact\": {        \"cash\": 0,        \"inbound_pending\": 0,        \"outbound_pending\": -1000      },      \"created\": 1680756271,      \"currency\": \"usd\",      \"effective_at\": 1680756271,      \"financial_account\": \"fa_1MtkgV2eZvKYlo2CdxyvnHeQ\",      \"flow\": \"obt_1MtkgV2eZvKYlo2CCxhXVFLB\",      \"flow_type\": \"outbound_transfer\",      \"livemode\": false,      \"transaction\": \"trxn_1MtkgV2eZvKYlo2CRYxD7KLh\",      \"type\": \"outbound_transfer\"    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a TransactionEntry | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/transactions/list",
  "markdown": "# List all Transactions | Stripe API Reference\n\nRetrieves a list of Transaction objects.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return Transactions that were created during the given date interval.\n    \n*   The results are in reverse chronological order by `created` or `posted_at`. The default is `created`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `created`<br><br>Timestamp describing when the Transaction was created. |\n    | `posted_at`<br><br>Timestamp describing when the Transaction was posted. |\n    \n*   Only return Transactions that have the given status: `open`, `posted`, or `void`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `open`<br><br>The initial state for all Transactions. The Transaction results in updates to the sub-balance amounts, but the current balance is not affected until the Transaction posts. |\n    | `posted`<br><br>Funds have successfully entered or left the account. The current balance was affected. |\n    | `void`<br><br>The Transaction never impacted the balance. For example, a Transaction would enter this state if an OutboundPayment was initiated but then canceled before the funds left the account. |\n    \n*   A filter for the `status_transitions.posted_at` timestamp. When using this filter, `status=posted` and `order_by=posted_at` must also be specified.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Transactions, starting after Transaction `starting_after`. Each entry in the array is a separate Transaction object. If no more Transactions are available, the resulting array will be empty.\n\nGET /v1/treasury/transactions\n\n```\ncurl -G https://api.stripe.com/v1/treasury/transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkYw2eZvKYlo2CrqmzUo3O \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"trxn_1MtkYw2eZvKYlo2ClMGIO54z\",      \"object\": \"treasury.transaction\",      \"amount\": -100,      \"balance_impact\": {        \"cash\": -100,        \"inbound_pending\": 0,        \"outbound_pending\": 100      },      \"created\": 1680755802,      \"currency\": \"usd\",      \"description\": \"Jane Austen (6789) | Outbound transfer | transfer\",      \"financial_account\": \"fa_1MtkYw2eZvKYlo2CrqmzUo3O\",      \"flow\": \"obt_1MtkYw2eZvKYlo2CqsyBpQts\",      \"flow_type\": \"outbound_transfer\",      \"livemode\": false,      \"status\": \"open\",      \"status_transitions\": {        \"posted_at\": null,        \"void_at\": null      }    }    {...}    {...}  ],}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all Transactions | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_payments/test_mode_return",
  "markdown": "# Test mode: Return an OutboundPayment\n\n## [Test mode: Return an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_return)Test helper\n\nTransitions a test mode created OutboundPayment to the `returned` status. The OutboundPayment must already be in the `processing` state.\n\n### Parameters\n\n*   Optional hash to set the return code.\n    \n\n### Returns\n\nReturns the OutboundPayment object in the returned state. Returns an error if the OutboundPayment has already been returned or cannot be returned.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYhogtESYQ6NZMO6Vt0EC3mum1Ote762Q9ymvgfrijWXRfgVjJ5BoXVxeND-NunsJmjcHhb2F_4bmtHHWur\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": {    \"code\": \"account_closed\",    \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"  },  \"statement_descriptor\": \"payment\",  \"status\": \"returned\",  \"status_transitions\": {    \"failed_at\": null,    \"posted_at\": 1680716010,    \"returned_at\": 1680716011,    \"canceled_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Test mode: Update an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_update)Test helper\n\nUpdates a test mode created OutboundPayment with tracking details. The OutboundPayment must not be cancelable, and cannot be in the `canceled` or `failed` states.\n\n### Parameters\n\n*   #### \n    \n    tracking\\_detailsobjectRequired\n    \n    Details about network-specific tracking information.\n    \n\n### Returns\n\nReturns the OutboundPayment object with the updated tracking details. Returns an error if the OutboundPayment is in an invalid state or if `tracking_details` has already been set.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"tracking_details[type]\"=ach \\  -d \"tracking_details[ach][trace_id]\"=841042400123450\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgawWNwbI_w6NZNOI4y6vNpfIP-oQAT5mkBRbOHJN1f08r7jF-UumeywdupuJr7P2cxF8L5JRSVPMmttq_kA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"posted\",  \"status_transitions\": {    \"failed_at\": null,    \"posted_at\": 1680716010,    \"returned_at\": null,    \"canceled_at\": null  },  \"tracking_details\": {    \"type\": \"ach\",    \"ach\": {      \"trace_id\": \"841042400123450\"    }  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Test mode: Return an OutboundPayment | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/transaction_entries/list",
  "markdown": "# List all TransactionEntries | Stripe API Reference\n\nRetrieves a list of TransactionEntry objects.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return TransactionEntries that were created during the given date interval.\n    \n*   The results are in reverse chronological order by `created` or `effective_at`. The default is `created`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `created`<br><br>Timestamp describing when the TransactionEntry was created. |\n    | `effective_at`<br><br>Timestamp describing when the TransactionEntry was effective. |\n    \n*   Only return TransactionEntries associated with this Transaction.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` TransactionEntries, starting after TransactionEntry `starting_after`. Each entry in the array is a separate TransactionEntry object. If no more TransactionEntries are available, the resulting array is empty.\n\nGET /v1/treasury/transaction\\_entries\n\n```\ncurl -G https://api.stripe.com/v1/treasury/transaction_entries \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkgV2eZvKYlo2CdxyvnHeQ \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/transaction_entries\",  \"has_more\": false,  \"data\": [    {      \"id\": \"trxne_1MtkgV2eZvKYlo2CmofEnIwJ\",      \"object\": \"treasury.transaction_entry\",      \"balance_impact\": {        \"cash\": 0,        \"inbound_pending\": 0,        \"outbound_pending\": -1000      },      \"created\": 1680756271,      \"currency\": \"usd\",      \"effective_at\": 1680756271,      \"financial_account\": \"fa_1MtkgV2eZvKYlo2CdxyvnHeQ\",      \"flow\": \"obt_1MtkgV2eZvKYlo2CCxhXVFLB\",      \"flow_type\": \"outbound_transfer\",      \"livemode\": false,      \"transaction\": \"trxn_1MtkgV2eZvKYlo2CRYxD7KLh\",      \"type\": \"outbound_transfer\"    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all TransactionEntries | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_payments/test_mode_update",
  "markdown": "# Test mode: Update an OutboundPayment\n\n## [Test mode: Update an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_update)Test helper\n\nUpdates a test mode created OutboundPayment with tracking details. The OutboundPayment must not be cancelable, and cannot be in the `canceled` or `failed` states.\n\n### Parameters\n\n*   #### \n    \n    tracking\\_detailsobjectRequired\n    \n    Details about network-specific tracking information.\n    \n\n### Returns\n\nReturns the OutboundPayment object with the updated tracking details. Returns an error if the OutboundPayment is in an invalid state or if `tracking_details` has already been set.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_payments/:id\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/outbound_payments/obp_1MtaD72eZvKYlo2C36lgqC6Y \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"tracking_details[type]\"=ach \\  -d \"tracking_details[ach][trace_id]\"=841042400123450\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2C36lgqC6Y\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgawWNwbI_w6NZNOI4y6vNpfIP-oQAT5mkBRbOHJN1f08r7jF-UumeywdupuJr7P2cxF8L5JRSVPMmttq_kA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"posted\",  \"status_transitions\": {    \"failed_at\": null,    \"posted_at\": 1680716010,    \"returned_at\": null,    \"canceled_at\": null  },  \"tracking_details\": {    \"type\": \"ach\",    \"ach\": {      \"trace_id\": \"841042400123450\"    }  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Test mode: Update an OutboundPayment | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_transfers/create",
  "markdown": "# Create an OutboundTransfer | Stripe API Reference\n\nCreates an OutboundTransfer.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to pull funds from.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    destination\\_payment\\_methodstring\n    \n    The PaymentMethod to use as the payment instrument for the OutboundTransfer.\n    \n*   #### \n    \n    destination\\_payment\\_method\\_optionsobject\n    \n    Hash describing payment method configuration details.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    Statement descriptor to be shown on the receiving end of an OutboundTransfer. Maximum 10 characters for `ach` transfers or 140 characters for `us_domestic_wire` transfers. The default value is “transfer”.\n    \n\n### Returns\n\nReturns an OutboundTransfer object if there were no issues with OutboundTransfer creation. The status of the created OutboundTransfer object is initially marked as `processing`.\n\nPOST /v1/treasury/outbound\\_transfers\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1Mtaaz2eZvKYlo2CUf56sIA1 \\  -d destination_payment_method=pm_1234567890 \\  -d amount=500 \\  -d currency=usd \\  -d description=\"OutboundTransfer to my external bank account\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 500,  \"cancelable\": true,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1234567890\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYCCwVOvUY6NpO8ArWrjrz6Hxk3d8tQ4d_RvOqMTOeq6js5eE94-f-7DwBzjjD1wxIUhOyub1KFYH8QKxj9oA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Retrieve an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/retrieve)\n\nRetrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an OutboundTransfer object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/outbound\\_transfers/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 500,  \"cancelable\": true,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1234567890\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYCCwVOvUY6NpO8ArWrjrz6Hxk3d8tQ4d_RvOqMTOeq6js5eE94-f-7DwBzjjD1wxIUhOyub1KFYH8QKxj9oA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [List all OutboundTransfers](https://docs.stripe.com/api/treasury/outbound_transfers/list)\n\nReturns a list of OutboundTransfers sent from the specified FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return OutboundTransfers that have the given status: `processing`, `canceled`, `failed`, `posted`, or `returned`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` OutboundTransfers, starting after OutboundTransfer `starting_after`. Each entry in the array is a separate OutboundTransfer object. If no more OutboundTransfers are available, the resulting array is empty.\n\nGET /v1/treasury/outbound\\_transfers\n\n```\ncurl -G https://api.stripe.com/v1/treasury/outbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d financial_account=fa_1Mtaaz2eZvKYlo2CUf56sIA1\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/outbound_transfers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",      \"object\": \"treasury.outbound_transfer\",      \"amount\": 500,      \"cancelable\": true,      \"created\": 1680717489,      \"currency\": \"usd\",      \"description\": \"OutboundTransfer to my external bank account\",      \"destination_payment_method\": \"pm_1234567890\",      \"destination_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": \"San Francisco\",            \"country\": \"US\",            \"line1\": \"1234 Fake Street\",            \"line2\": null,            \"postal_code\": \"94102\",            \"state\": \"CA\"          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"account_holder_type\": \"company\",          \"account_type\": \"checking\",          \"bank_name\": \"STRIPE TEST BANK\",          \"fingerprint\": \"AP24Iso0btGp4N10\",          \"last4\": \"6789\",          \"network\": \"ach\",          \"routing_number\": \"110000000\"        }      },      \"expected_arrival_date\": 1680825600,      \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYCCwVOvUY6NpO8ArWrjrz6Hxk3d8tQ4d_RvOqMTOeq6js5eE94-f-7DwBzjjD1wxIUhOyub1KFYH8QKxj9oA\",      \"livemode\": false,      \"metadata\": {},      \"returned_details\": null,      \"statement_descriptor\": \"transfer\",      \"status\": \"processing\",      \"status_transitions\": {        \"canceled_at\": null,        \"failed_at\": null,        \"posted_at\": null,        \"returned_at\": null      },      \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"    }    {...}    {...}  ],}\n```\n\n## [Cancel an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/cancel)\n\nAn OutboundTransfer can be canceled if the funds have not yet been paid out.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundTransfer object if the cancellation succeeded. Returns an error if the object has already been canceled or cannot be canceled.\n\nPOST /v1/treasury/outbound\\_transfers/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgbFx5vTNec6NpPKphE93zYcPDgqrHcZhLW_fmKqG9Mu9HUNa_164u93bqkgnPNnYtd3_5Rv_F3YISrR2qg3FQ\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"canceled\",  \"status_transitions\": {    \"posted_at\": null,    \"failed_at\": null,    \"canceled_at\": 1680717489,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Test mode: Fail an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_fail)Test helper\n\nTransitions a test mode created OutboundTransfer to the `failed` status. The OutboundTransfer must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundTransfer object in the failed state. Returns an error if the OutboundTransfer has already been failed or cannot be failed.\n\nPOST /v1/test\\_helpers/treasury/outbound\\_transfers/:id/fail\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYw-nE9MNI6NpOJppCfj7fBzxZ9vepfiOLlViIJsILsSUiUv3teC30OLgOpgL7B0UBbYYtz0t7gi1a1WHo4Ew\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"failed\",  \"status_transitions\": {    \"failed_at\": 1680717489,    \"canceled_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```",
  "title": "Create an OutboundTransfer | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/inbound_transfers",
  "markdown": "# Inbound Transfers | Stripe API Reference\n\n## [The InboundTransfer object](https://docs.stripe.com/api/treasury/inbound_transfers/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Returns `true` if the InboundTransfer is able to be canceled.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    failure\\_detailsnullable object\n    \n    Details about this InboundTransfer’s failure. Only set when status is `failed`.\n    \n*   The FinancialAccount that received the funds.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   Other flows linked to a InboundTransfer.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    origin\\_payment\\_methodstring\n    \n    The origin payment method to be debited for an InboundTransfer.\n    \n*   #### \n    \n    origin\\_payment\\_method\\_detailsnullable object\n    \n    Details about the PaymentMethod for an InboundTransfer.\n    \n*   Returns `true` if the funds for an InboundTransfer were returned after the InboundTransfer went to the `succeeded` state.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    Statement descriptor shown when funds are debited from the source. Not all payment networks support `statement_descriptor`.\n    \n*   Status of the InboundTransfer: `processing`, `succeeded`, `failed`, and `canceled`. An InboundTransfer is `processing` if it is created and pending. The status changes to `succeeded` once the funds have been “confirmed” and a `transaction` is created and posted. The status changes to `failed` if the transfer fails.\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n*   #### \n    \n    transactionnullable stringExpandable\n    \n    The Transaction associated with this object.\n    \n\n## [Create an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/create)\n\nCreates an InboundTransfer.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to send funds to.\n    \n*   #### \n    \n    origin\\_payment\\_methodstringRequired\n    \n    The origin payment method to be debited for the InboundTransfer.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    The complete description that appears on your customers’ statements. Maximum 10 characters.\n    \n\n### Returns\n\nReturns an InboundTransfer object if there were no issues with InboundTransfer creation. The status of the created InboundTransfer object is initially marked as `processing`.\n\nPOST /v1/treasury/inbound\\_transfers\n\n```\ncurl https://api.stripe.com/v1/treasury/inbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaD72eZvKYlo2CYKM3DnUI \\  -d amount=10000 \\  -d currency=usd \\  -d origin_payment_method=pm_1KMDdkGPnV27VyGeAgGz8bsi \\  -d description=\"InboundTransfer from my bank account\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYYdf7K2aE6NpN7tVDs9F1hxjKU9i3In9yfJWRBNJycDGlZZ22xgY_IuRs_jih19J4q6c4yUsv0SimaA57pww\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1KMDdkGPnV27VyGeAgGz8bsi\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Retrieve an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/retrieve)\n\nRetrieves the details of an existing InboundTransfer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an InboundTransfer object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/inbound\\_transfers/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYYdf7K2aE6NpN7tVDs9F1hxjKU9i3In9yfJWRBNJycDGlZZ22xgY_IuRs_jih19J4q6c4yUsv0SimaA57pww\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1KMDdkGPnV27VyGeAgGz8bsi\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [List all InboundTransfers](https://docs.stripe.com/api/treasury/inbound_transfers/list)\n\nReturns a list of InboundTransfers sent from the specified FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return InboundTransfers that have the given status: `processing`, `succeeded`, `failed` or `canceled`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` InboundTransfers, starting after InboundTransfer `starting_after`. Each entry in the array is a separate InboundTransfer object. If no more InboundTransfers are available, the resulting array is empty.\n\nGET /v1/treasury/inbound\\_transfers\n\n```\ncurl -G https://api.stripe.com/v1/treasury/inbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaDM2eZvKYlo2CvXrQknN4 \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/inbound_transfers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",      \"object\": \"treasury.inbound_transfer\",      \"amount\": 10000,      \"cancelable\": true,      \"created\": 1680716025,      \"currency\": \"usd\",      \"description\": \"InboundTransfer from my bank account\",      \"failure_details\": null,      \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYYdf7K2aE6NpN7tVDs9F1hxjKU9i3In9yfJWRBNJycDGlZZ22xgY_IuRs_jih19J4q6c4yUsv0SimaA57pww\",      \"linked_flows\": {        \"received_debit\": null      },      \"livemode\": false,      \"metadata\": {},      \"origin_payment_method\": \"pm_1KMDdkGPnV27VyGeAgGz8bsi\",      \"origin_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": \"San Francisco\",            \"country\": \"US\",            \"line1\": \"1234 Fake Street\",            \"line2\": null,            \"postal_code\": \"94102\",            \"state\": \"CA\"          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"account_holder_type\": \"company\",          \"account_type\": \"checking\",          \"bank_name\": \"STRIPE TEST BANK\",          \"fingerprint\": \"AP24Iso0btGp4N10\",          \"last4\": \"6789\",          \"network\": \"ach\",          \"routing_number\": \"110000000\"        }      },      \"returned\": false,      \"statement_descriptor\": \"transfer\",      \"status\": \"processing\",      \"status_transitions\": {        \"failed_at\": null,        \"succeeded_at\": null      },      \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"    }    {...}    {...}  ],}\n```",
  "title": "Inbound Transfers | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/inbound_transfers/list",
  "markdown": "# List all InboundTransfers | Stripe API Reference\n\nReturns a list of InboundTransfers sent from the specified FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return InboundTransfers that have the given status: `processing`, `succeeded`, `failed` or `canceled`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` InboundTransfers, starting after InboundTransfer `starting_after`. Each entry in the array is a separate InboundTransfer object. If no more InboundTransfers are available, the resulting array is empty.\n\nGET /v1/treasury/inbound\\_transfers\n\n```\ncurl -G https://api.stripe.com/v1/treasury/inbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaDM2eZvKYlo2CvXrQknN4 \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/inbound_transfers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",      \"object\": \"treasury.inbound_transfer\",      \"amount\": 10000,      \"cancelable\": true,      \"created\": 1680716025,      \"currency\": \"usd\",      \"description\": \"InboundTransfer from my bank account\",      \"failure_details\": null,      \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYYdf7K2aE6NpN7tVDs9F1hxjKU9i3In9yfJWRBNJycDGlZZ22xgY_IuRs_jih19J4q6c4yUsv0SimaA57pww\",      \"linked_flows\": {        \"received_debit\": null      },      \"livemode\": false,      \"metadata\": {},      \"origin_payment_method\": \"pm_1KMDdkGPnV27VyGeAgGz8bsi\",      \"origin_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": \"San Francisco\",            \"country\": \"US\",            \"line1\": \"1234 Fake Street\",            \"line2\": null,            \"postal_code\": \"94102\",            \"state\": \"CA\"          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"account_holder_type\": \"company\",          \"account_type\": \"checking\",          \"bank_name\": \"STRIPE TEST BANK\",          \"fingerprint\": \"AP24Iso0btGp4N10\",          \"last4\": \"6789\",          \"network\": \"ach\",          \"routing_number\": \"110000000\"        }      },      \"returned\": false,      \"statement_descriptor\": \"transfer\",      \"status\": \"processing\",      \"status_transitions\": {        \"failed_at\": null,        \"succeeded_at\": null      },      \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"    }    {...}    {...}  ],}\n```\n\n## [Cancel an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/cancel)\n\nCancels an InboundTransfer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the InboundTransfer object if the cancellation succeeded. Returns an error if the InboundTransfer has already been canceled or cannot be canceled.\n\nPOST /v1/treasury/inbound\\_transfers/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgZDF2WUT346NpP69bYKokqfNLTOb3qE8__DQL-vkc_p012AyYJYihh7UHvcsjvgXTDDkgEdUmHTimDXsAT0qA\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"canceled\",  \"status_transitions\": {    \"posted_at\": null,    \"failed_at\": null,    \"canceled_at\": 1680716025,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Test mode: Fail an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_fail)Test helper\n\nTransitions a test mode created InboundTransfer to the `failed` status. The InboundTransfer must already be in the `processing` state.\n\n### Parameters\n\n*   Details about a failed InboundTransfer.\n    \n\n### Returns\n\nReturns the InboundTransfer object in the returned state. Returns an error if the InboundTransfer has already failed or cannot be failed.\n\nPOST /v1/test\\_helpers/treasury/inbound\\_transfers/:id/fail\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"failure_details[code]\"=insufficient_funds\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": {    \"code\": \"insufficient_funds\"  },  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgZ09q__wJA6NpPUfXQX0PUpgdTTpcHXdViKIK3-mEuzKM_CrltWFzRyKdq8OhPb6676H32JwPak4k0jonMLYA\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"failed\",  \"status_transitions\": {    \"failed_at\": 1680716025,    \"succeeded_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Test mode: Return an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_return)Test helper\n\nMarks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the `succeeded` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the InboundTransfer object with `returned` set to `true`. Returns an error if the InboundTransfer has already been returned or cannot be returned.\n\nPOST /v1/test\\_helpers/treasury/inbound\\_transfers/:id/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYvkdeXVp86NpNVlQmJPh28UZzYqO663FQJ4x3nf7tL4goXRt2IONIMvkuzcdxraW__iDMg9Uijq8tP1PcUbA\",  \"linked_flows\": {    \"received_debit\": \"rd_1MtaDN2eZvKYlo2ChwXbpRWa\"  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": true,  \"statement_descriptor\": \"transfer\",  \"status\": \"succeeded\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": 1680716025  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Test mode: Succeed an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_succeed)Test helper\n\nTransitions a test mode created InboundTransfer to the `succeeded` status. The InboundTransfer must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the InboundTransfer object in the succeeded state. Returns an error if the InboundTransfer has already succeeded or cannot be succeeded.\n\nPOST /v1/test\\_helpers/treasury/inbound\\_transfers/:id/succeed\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/succeed \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYVxjWLYpw6NpP6LLdBjWjsgc_5Q68S_eJDtpmsSgc_rHslxhpX2qqP0Xqb3fb3uLR2h-INgqgg7E81-mu1FQ\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"succeeded\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": 1680716025  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```",
  "title": "List all InboundTransfers | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/inbound_transfers/retrieve",
  "markdown": "# Retrieve an InboundTransfer | Stripe API Reference\n\nRetrieves the details of an existing InboundTransfer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an InboundTransfer object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/inbound\\_transfers/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYYdf7K2aE6NpN7tVDs9F1hxjKU9i3In9yfJWRBNJycDGlZZ22xgY_IuRs_jih19J4q6c4yUsv0SimaA57pww\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1KMDdkGPnV27VyGeAgGz8bsi\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [List all InboundTransfers](https://docs.stripe.com/api/treasury/inbound_transfers/list)\n\nReturns a list of InboundTransfers sent from the specified FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return InboundTransfers that have the given status: `processing`, `succeeded`, `failed` or `canceled`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` InboundTransfers, starting after InboundTransfer `starting_after`. Each entry in the array is a separate InboundTransfer object. If no more InboundTransfers are available, the resulting array is empty.\n\nGET /v1/treasury/inbound\\_transfers\n\n```\ncurl -G https://api.stripe.com/v1/treasury/inbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaDM2eZvKYlo2CvXrQknN4 \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/inbound_transfers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",      \"object\": \"treasury.inbound_transfer\",      \"amount\": 10000,      \"cancelable\": true,      \"created\": 1680716025,      \"currency\": \"usd\",      \"description\": \"InboundTransfer from my bank account\",      \"failure_details\": null,      \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYYdf7K2aE6NpN7tVDs9F1hxjKU9i3In9yfJWRBNJycDGlZZ22xgY_IuRs_jih19J4q6c4yUsv0SimaA57pww\",      \"linked_flows\": {        \"received_debit\": null      },      \"livemode\": false,      \"metadata\": {},      \"origin_payment_method\": \"pm_1KMDdkGPnV27VyGeAgGz8bsi\",      \"origin_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": \"San Francisco\",            \"country\": \"US\",            \"line1\": \"1234 Fake Street\",            \"line2\": null,            \"postal_code\": \"94102\",            \"state\": \"CA\"          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"account_holder_type\": \"company\",          \"account_type\": \"checking\",          \"bank_name\": \"STRIPE TEST BANK\",          \"fingerprint\": \"AP24Iso0btGp4N10\",          \"last4\": \"6789\",          \"network\": \"ach\",          \"routing_number\": \"110000000\"        }      },      \"returned\": false,      \"statement_descriptor\": \"transfer\",      \"status\": \"processing\",      \"status_transitions\": {        \"failed_at\": null,        \"succeeded_at\": null      },      \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"    }    {...}    {...}  ],}\n```\n\n## [Cancel an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/cancel)\n\nCancels an InboundTransfer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the InboundTransfer object if the cancellation succeeded. Returns an error if the InboundTransfer has already been canceled or cannot be canceled.\n\nPOST /v1/treasury/inbound\\_transfers/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgZDF2WUT346NpP69bYKokqfNLTOb3qE8__DQL-vkc_p012AyYJYihh7UHvcsjvgXTDDkgEdUmHTimDXsAT0qA\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"canceled\",  \"status_transitions\": {    \"posted_at\": null,    \"failed_at\": null,    \"canceled_at\": 1680716025,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Test mode: Fail an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_fail)Test helper\n\nTransitions a test mode created InboundTransfer to the `failed` status. The InboundTransfer must already be in the `processing` state.\n\n### Parameters\n\n*   Details about a failed InboundTransfer.\n    \n\n### Returns\n\nReturns the InboundTransfer object in the returned state. Returns an error if the InboundTransfer has already failed or cannot be failed.\n\nPOST /v1/test\\_helpers/treasury/inbound\\_transfers/:id/fail\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"failure_details[code]\"=insufficient_funds\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": {    \"code\": \"insufficient_funds\"  },  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgZ09q__wJA6NpPUfXQX0PUpgdTTpcHXdViKIK3-mEuzKM_CrltWFzRyKdq8OhPb6676H32JwPak4k0jonMLYA\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"failed\",  \"status_transitions\": {    \"failed_at\": 1680716025,    \"succeeded_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Test mode: Return an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_return)Test helper\n\nMarks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the `succeeded` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the InboundTransfer object with `returned` set to `true`. Returns an error if the InboundTransfer has already been returned or cannot be returned.\n\nPOST /v1/test\\_helpers/treasury/inbound\\_transfers/:id/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYvkdeXVp86NpNVlQmJPh28UZzYqO663FQJ4x3nf7tL4goXRt2IONIMvkuzcdxraW__iDMg9Uijq8tP1PcUbA\",  \"linked_flows\": {    \"received_debit\": \"rd_1MtaDN2eZvKYlo2ChwXbpRWa\"  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": true,  \"statement_descriptor\": \"transfer\",  \"status\": \"succeeded\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": 1680716025  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```",
  "title": "Retrieve an InboundTransfer | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/inbound_transfers/cancel",
  "markdown": "# Cancel an InboundTransfer | Stripe API Reference\n\nCancels an InboundTransfer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the InboundTransfer object if the cancellation succeeded. Returns an error if the InboundTransfer has already been canceled or cannot be canceled.\n\nPOST /v1/treasury/inbound\\_transfers/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgZDF2WUT346NpP69bYKokqfNLTOb3qE8__DQL-vkc_p012AyYJYihh7UHvcsjvgXTDDkgEdUmHTimDXsAT0qA\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"canceled\",  \"status_transitions\": {    \"posted_at\": null,    \"failed_at\": null,    \"canceled_at\": 1680716025,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Test mode: Fail an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_fail)Test helper\n\nTransitions a test mode created InboundTransfer to the `failed` status. The InboundTransfer must already be in the `processing` state.\n\n### Parameters\n\n*   Details about a failed InboundTransfer.\n    \n\n### Returns\n\nReturns the InboundTransfer object in the returned state. Returns an error if the InboundTransfer has already failed or cannot be failed.\n\nPOST /v1/test\\_helpers/treasury/inbound\\_transfers/:id/fail\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"failure_details[code]\"=insufficient_funds\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": {    \"code\": \"insufficient_funds\"  },  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgZ09q__wJA6NpPUfXQX0PUpgdTTpcHXdViKIK3-mEuzKM_CrltWFzRyKdq8OhPb6676H32JwPak4k0jonMLYA\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"failed\",  \"status_transitions\": {    \"failed_at\": 1680716025,    \"succeeded_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Test mode: Return an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_return)Test helper\n\nMarks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the `succeeded` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the InboundTransfer object with `returned` set to `true`. Returns an error if the InboundTransfer has already been returned or cannot be returned.\n\nPOST /v1/test\\_helpers/treasury/inbound\\_transfers/:id/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYvkdeXVp86NpNVlQmJPh28UZzYqO663FQJ4x3nf7tL4goXRt2IONIMvkuzcdxraW__iDMg9Uijq8tP1PcUbA\",  \"linked_flows\": {    \"received_debit\": \"rd_1MtaDN2eZvKYlo2ChwXbpRWa\"  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": true,  \"statement_descriptor\": \"transfer\",  \"status\": \"succeeded\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": 1680716025  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Test mode: Succeed an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_succeed)Test helper\n\nTransitions a test mode created InboundTransfer to the `succeeded` status. The InboundTransfer must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the InboundTransfer object in the succeeded state. Returns an error if the InboundTransfer has already succeeded or cannot be succeeded.\n\nPOST /v1/test\\_helpers/treasury/inbound\\_transfers/:id/succeed\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/succeed \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYVxjWLYpw6NpP6LLdBjWjsgc_5Q68S_eJDtpmsSgc_rHslxhpX2qqP0Xqb3fb3uLR2h-INgqgg7E81-mu1FQ\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"succeeded\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": 1680716025  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Cancel an InboundTransfer | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_fail",
  "markdown": "# Test mode: Fail an InboundTransfer\n\n## [Test mode: Fail an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_fail)Test helper\n\nTransitions a test mode created InboundTransfer to the `failed` status. The InboundTransfer must already be in the `processing` state.\n\n### Parameters\n\n*   Details about a failed InboundTransfer.\n    \n\n### Returns\n\nReturns the InboundTransfer object in the returned state. Returns an error if the InboundTransfer has already failed or cannot be failed.\n\nPOST /v1/test\\_helpers/treasury/inbound\\_transfers/:id/fail\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"failure_details[code]\"=insufficient_funds\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": {    \"code\": \"insufficient_funds\"  },  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgZ09q__wJA6NpPUfXQX0PUpgdTTpcHXdViKIK3-mEuzKM_CrltWFzRyKdq8OhPb6676H32JwPak4k0jonMLYA\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"failed\",  \"status_transitions\": {    \"failed_at\": 1680716025,    \"succeeded_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Test mode: Return an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_return)Test helper\n\nMarks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the `succeeded` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the InboundTransfer object with `returned` set to `true`. Returns an error if the InboundTransfer has already been returned or cannot be returned.\n\nPOST /v1/test\\_helpers/treasury/inbound\\_transfers/:id/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYvkdeXVp86NpNVlQmJPh28UZzYqO663FQJ4x3nf7tL4goXRt2IONIMvkuzcdxraW__iDMg9Uijq8tP1PcUbA\",  \"linked_flows\": {    \"received_debit\": \"rd_1MtaDN2eZvKYlo2ChwXbpRWa\"  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": true,  \"statement_descriptor\": \"transfer\",  \"status\": \"succeeded\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": 1680716025  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Test mode: Succeed an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_succeed)Test helper\n\nTransitions a test mode created InboundTransfer to the `succeeded` status. The InboundTransfer must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the InboundTransfer object in the succeeded state. Returns an error if the InboundTransfer has already succeeded or cannot be succeeded.\n\nPOST /v1/test\\_helpers/treasury/inbound\\_transfers/:id/succeed\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/succeed \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYVxjWLYpw6NpP6LLdBjWjsgc_5Q68S_eJDtpmsSgc_rHslxhpX2qqP0Xqb3fb3uLR2h-INgqgg7E81-mu1FQ\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"succeeded\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": 1680716025  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Test mode: Fail an InboundTransfer | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/inbound_transfers/create",
  "markdown": "# Create an InboundTransfer | Stripe API Reference\n\nCreates an InboundTransfer.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to send funds to.\n    \n*   #### \n    \n    origin\\_payment\\_methodstringRequired\n    \n    The origin payment method to be debited for the InboundTransfer.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    The complete description that appears on your customers’ statements. Maximum 10 characters.\n    \n\n### Returns\n\nReturns an InboundTransfer object if there were no issues with InboundTransfer creation. The status of the created InboundTransfer object is initially marked as `processing`.\n\nPOST /v1/treasury/inbound\\_transfers\n\n```\ncurl https://api.stripe.com/v1/treasury/inbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaD72eZvKYlo2CYKM3DnUI \\  -d amount=10000 \\  -d currency=usd \\  -d origin_payment_method=pm_1KMDdkGPnV27VyGeAgGz8bsi \\  -d description=\"InboundTransfer from my bank account\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYYdf7K2aE6NpN7tVDs9F1hxjKU9i3In9yfJWRBNJycDGlZZ22xgY_IuRs_jih19J4q6c4yUsv0SimaA57pww\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1KMDdkGPnV27VyGeAgGz8bsi\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Retrieve an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/retrieve)\n\nRetrieves the details of an existing InboundTransfer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an InboundTransfer object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/inbound\\_transfers/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYYdf7K2aE6NpN7tVDs9F1hxjKU9i3In9yfJWRBNJycDGlZZ22xgY_IuRs_jih19J4q6c4yUsv0SimaA57pww\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1KMDdkGPnV27VyGeAgGz8bsi\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [List all InboundTransfers](https://docs.stripe.com/api/treasury/inbound_transfers/list)\n\nReturns a list of InboundTransfers sent from the specified FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return InboundTransfers that have the given status: `processing`, `succeeded`, `failed` or `canceled`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` InboundTransfers, starting after InboundTransfer `starting_after`. Each entry in the array is a separate InboundTransfer object. If no more InboundTransfers are available, the resulting array is empty.\n\nGET /v1/treasury/inbound\\_transfers\n\n```\ncurl -G https://api.stripe.com/v1/treasury/inbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaDM2eZvKYlo2CvXrQknN4 \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/inbound_transfers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",      \"object\": \"treasury.inbound_transfer\",      \"amount\": 10000,      \"cancelable\": true,      \"created\": 1680716025,      \"currency\": \"usd\",      \"description\": \"InboundTransfer from my bank account\",      \"failure_details\": null,      \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYYdf7K2aE6NpN7tVDs9F1hxjKU9i3In9yfJWRBNJycDGlZZ22xgY_IuRs_jih19J4q6c4yUsv0SimaA57pww\",      \"linked_flows\": {        \"received_debit\": null      },      \"livemode\": false,      \"metadata\": {},      \"origin_payment_method\": \"pm_1KMDdkGPnV27VyGeAgGz8bsi\",      \"origin_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": \"San Francisco\",            \"country\": \"US\",            \"line1\": \"1234 Fake Street\",            \"line2\": null,            \"postal_code\": \"94102\",            \"state\": \"CA\"          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"account_holder_type\": \"company\",          \"account_type\": \"checking\",          \"bank_name\": \"STRIPE TEST BANK\",          \"fingerprint\": \"AP24Iso0btGp4N10\",          \"last4\": \"6789\",          \"network\": \"ach\",          \"routing_number\": \"110000000\"        }      },      \"returned\": false,      \"statement_descriptor\": \"transfer\",      \"status\": \"processing\",      \"status_transitions\": {        \"failed_at\": null,        \"succeeded_at\": null      },      \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"    }    {...}    {...}  ],}\n```\n\n## [Cancel an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/cancel)\n\nCancels an InboundTransfer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the InboundTransfer object if the cancellation succeeded. Returns an error if the InboundTransfer has already been canceled or cannot be canceled.\n\nPOST /v1/treasury/inbound\\_transfers/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgZDF2WUT346NpP69bYKokqfNLTOb3qE8__DQL-vkc_p012AyYJYihh7UHvcsjvgXTDDkgEdUmHTimDXsAT0qA\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"canceled\",  \"status_transitions\": {    \"posted_at\": null,    \"failed_at\": null,    \"canceled_at\": 1680716025,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Test mode: Fail an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_fail)Test helper\n\nTransitions a test mode created InboundTransfer to the `failed` status. The InboundTransfer must already be in the `processing` state.\n\n### Parameters\n\n*   Details about a failed InboundTransfer.\n    \n\n### Returns\n\nReturns the InboundTransfer object in the returned state. Returns an error if the InboundTransfer has already failed or cannot be failed.\n\nPOST /v1/test\\_helpers/treasury/inbound\\_transfers/:id/fail\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"failure_details[code]\"=insufficient_funds\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": {    \"code\": \"insufficient_funds\"  },  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgZ09q__wJA6NpPUfXQX0PUpgdTTpcHXdViKIK3-mEuzKM_CrltWFzRyKdq8OhPb6676H32JwPak4k0jonMLYA\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"failed\",  \"status_transitions\": {    \"failed_at\": 1680716025,    \"succeeded_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```",
  "title": "Create an InboundTransfer | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_return",
  "markdown": "# Test mode: Return an InboundTransfer\n\n## [Test mode: Return an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_return)Test helper\n\nMarks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the `succeeded` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the InboundTransfer object with `returned` set to `true`. Returns an error if the InboundTransfer has already been returned or cannot be returned.\n\nPOST /v1/test\\_helpers/treasury/inbound\\_transfers/:id/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYvkdeXVp86NpNVlQmJPh28UZzYqO663FQJ4x3nf7tL4goXRt2IONIMvkuzcdxraW__iDMg9Uijq8tP1PcUbA\",  \"linked_flows\": {    \"received_debit\": \"rd_1MtaDN2eZvKYlo2ChwXbpRWa\"  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": true,  \"statement_descriptor\": \"transfer\",  \"status\": \"succeeded\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": 1680716025  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Test mode: Succeed an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_succeed)Test helper\n\nTransitions a test mode created InboundTransfer to the `succeeded` status. The InboundTransfer must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the InboundTransfer object in the succeeded state. Returns an error if the InboundTransfer has already succeeded or cannot be succeeded.\n\nPOST /v1/test\\_helpers/treasury/inbound\\_transfers/:id/succeed\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/succeed \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYVxjWLYpw6NpP6LLdBjWjsgc_5Q68S_eJDtpmsSgc_rHslxhpX2qqP0Xqb3fb3uLR2h-INgqgg7E81-mu1FQ\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"succeeded\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": 1680716025  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Test mode: Return an InboundTransfer | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_succeed",
  "markdown": "# Test mode: Succeed an InboundTransfer\n\n## [Test mode: Succeed an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_succeed)Test helper\n\nTransitions a test mode created InboundTransfer to the `succeeded` status. The InboundTransfer must already be in the `processing` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the InboundTransfer object in the succeeded state. Returns an error if the InboundTransfer has already succeeded or cannot be succeeded.\n\nPOST /v1/test\\_helpers/treasury/inbound\\_transfers/:id/succeed\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/succeed \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYVxjWLYpw6NpP6LLdBjWjsgc_5Q68S_eJDtpmsSgc_rHslxhpX2qqP0Xqb3fb3uLR2h-INgqgg7E81-mu1FQ\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"succeeded\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": 1680716025  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Test mode: Succeed an InboundTransfer | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/received_credits/list",
  "markdown": "# List all ReceivedCredits | Stripe API Reference\n\nReturns a list of ReceivedCredits.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount that received the funds.\n    \n*   Only return ReceivedCredits described by the flow.\n    \n*   Only return ReceivedCredits that have the given status: `succeeded` or `failed`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedCredit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedCredit was approved. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` ReceivedCredits, starting after ReceivedCredit `starting_after`. Each entry in the array is a separate ReceivedCredit object. If no more ReceivedCredits are available, the resulting array will be empty.\n\nGET /v1/treasury/received\\_credits\n\n```\ncurl -G https://api.stripe.com/v1/treasury/received_credits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkSr2eZvKYlo2CsJozwFWD \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/received_credits\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",      \"object\": \"treasury.received_credit\",      \"amount\": 1000,      \"created\": 1680755425,      \"currency\": \"usd\",      \"description\": \"Stripe Test\",      \"failure_code\": null,      \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",      \"initiating_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": null,            \"country\": null,            \"line1\": null,            \"line2\": null,            \"postal_code\": null,            \"state\": null          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"bank_name\": \"STRIPE TEST BANK\",          \"last4\": \"6789\",          \"routing_number\": \"110000000\"        }      },      \"linked_flows\": {        \"credit_reversal\": null,        \"issuing_authorization\": null,        \"issuing_transaction\": null,        \"source_flow\": null,        \"source_flow_type\": null      },      \"livemode\": false,      \"network\": \"ach\",      \"reversal_details\": {        \"deadline\": 1681084800,        \"restricted_reason\": null      },      \"status\": \"succeeded\",      \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"    }    {...}    {...}  ],}\n```\n\n## [Test mode: Create a ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits/test_mode_create)Test helper\n\nUse this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to send funds to.\n    \n*   Specifies the network rails to be used. If not set, will default to the PaymentMethod’s preferred network. See the [docs](https://docs.stripe.com/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Initiating payment method details for the object.\n    \n\n### Returns\n\nA test mode ReceivedCredit object.\n\nPOST /v1/test\\_helpers/treasury/received\\_credits\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/received_credits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d currency=usd \\  -d financial_account=fa_1MtkSr2eZvKYlo2CsJozwFWD \\  -d network=ach\n```\n\n```\n{  \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",  \"object\": \"treasury.received_credit\",  \"amount\": 1000,  \"created\": 1680755425,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"credit_reversal\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"source_flow\": null,    \"source_flow_type\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all ReceivedCredits | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/received_credits/retrieve",
  "markdown": "# Retrieve a ReceivedCredit | Stripe API Reference\n\nRetrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a ReceivedCredit object.\n\nGET /v1/treasury/received\\_credits/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/received_credits/rc_1MtkSr2eZvKYlo2CcysvUbEw \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",  \"object\": \"treasury.received_credit\",  \"amount\": 1000,  \"created\": 1680755425,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"credit_reversal\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"source_flow\": null,    \"source_flow_type\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"}\n```\n\n## [List all ReceivedCredits](https://docs.stripe.com/api/treasury/received_credits/list)\n\nReturns a list of ReceivedCredits.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount that received the funds.\n    \n*   Only return ReceivedCredits described by the flow.\n    \n*   Only return ReceivedCredits that have the given status: `succeeded` or `failed`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedCredit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedCredit was approved. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` ReceivedCredits, starting after ReceivedCredit `starting_after`. Each entry in the array is a separate ReceivedCredit object. If no more ReceivedCredits are available, the resulting array will be empty.\n\nGET /v1/treasury/received\\_credits\n\n```\ncurl -G https://api.stripe.com/v1/treasury/received_credits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkSr2eZvKYlo2CsJozwFWD \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/received_credits\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",      \"object\": \"treasury.received_credit\",      \"amount\": 1000,      \"created\": 1680755425,      \"currency\": \"usd\",      \"description\": \"Stripe Test\",      \"failure_code\": null,      \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",      \"initiating_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": null,            \"country\": null,            \"line1\": null,            \"line2\": null,            \"postal_code\": null,            \"state\": null          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"bank_name\": \"STRIPE TEST BANK\",          \"last4\": \"6789\",          \"routing_number\": \"110000000\"        }      },      \"linked_flows\": {        \"credit_reversal\": null,        \"issuing_authorization\": null,        \"issuing_transaction\": null,        \"source_flow\": null,        \"source_flow_type\": null      },      \"livemode\": false,      \"network\": \"ach\",      \"reversal_details\": {        \"deadline\": 1681084800,        \"restricted_reason\": null      },      \"status\": \"succeeded\",      \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"    }    {...}    {...}  ],}\n```\n\n## [Test mode: Create a ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits/test_mode_create)Test helper\n\nUse this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to send funds to.\n    \n*   Specifies the network rails to be used. If not set, will default to the PaymentMethod’s preferred network. See the [docs](https://docs.stripe.com/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Initiating payment method details for the object.\n    \n\n### Returns\n\nA test mode ReceivedCredit object.\n\nPOST /v1/test\\_helpers/treasury/received\\_credits\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/received_credits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d currency=usd \\  -d financial_account=fa_1MtkSr2eZvKYlo2CsJozwFWD \\  -d network=ach\n```\n\n```\n{  \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",  \"object\": \"treasury.received_credit\",  \"amount\": 1000,  \"created\": 1680755425,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"credit_reversal\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"source_flow\": null,    \"source_flow_type\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a ReceivedCredit | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/received_debits/test_mode_create",
  "markdown": "# Test mode: Create a ReceivedDebit\n\n## [Test mode: Create a ReceivedDebit](https://docs.stripe.com/api/treasury/received_debits/test_mode_create)Test helper\n\nUse this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to pull funds from.\n    \n*   Specifies the network rails to be used. If not set, will default to the PaymentMethod’s preferred network. See the [docs](https://docs.stripe.com/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Initiating payment method details for the object.\n    \n\n### Returns\n\nA test mode ReceivedDebit object.\n\nPOST /v1/test\\_helpers/treasury/received\\_debits\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/received_debits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d currency=usd \\  -d financial_account=fa_1MtkUY2eZvKYlo2CY3s6OQyK \\  -d network=ach\n```\n\n```\n{  \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",  \"object\": \"treasury.received_debit\",  \"amount\": 1000,  \"created\": 1680755530,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"debit_reversal\": null,    \"inbound_transfer\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"payout\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Test mode: Create a ReceivedDebit | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/received_debits/retrieve",
  "markdown": "# Retrieve a ReceivedDebit | Stripe API Reference\n\nRetrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a ReceivedDebit object.\n\nGET /v1/treasury/received\\_debits/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/received_debits/rd_1MtkUY2eZvKYlo2CT9SYD1AF \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",  \"object\": \"treasury.received_debit\",  \"amount\": 1000,  \"created\": 1680755530,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"debit_reversal\": null,    \"inbound_transfer\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"payout\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"}\n```\n\n## [List all ReceivedDebits](https://docs.stripe.com/api/treasury/received_debits/list)\n\nReturns a list of ReceivedDebits.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount that funds were pulled from.\n    \n*   Only return ReceivedDebits that have the given status: `succeeded` or `failed`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedDebit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedDebit was approved. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` ReceivedDebits, starting after ReceivedDebit `starting_after`. Each entry in the array is a separate ReceivedDebit object. If no more ReceivedDebits are available, the resulting array will be empty.\n\nGET /v1/treasury/received\\_debits\n\n```\ncurl -G https://api.stripe.com/v1/treasury/received_debits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkUY2eZvKYlo2CY3s6OQyK \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/received_debits\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",      \"object\": \"treasury.received_debit\",      \"amount\": 1000,      \"created\": 1680755530,      \"currency\": \"usd\",      \"description\": \"Stripe Test\",      \"failure_code\": null,      \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",      \"initiating_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": null,            \"country\": null,            \"line1\": null,            \"line2\": null,            \"postal_code\": null,            \"state\": null          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"bank_name\": \"STRIPE TEST BANK\",          \"last4\": \"6789\",          \"routing_number\": \"110000000\"        }      },      \"linked_flows\": {        \"debit_reversal\": null,        \"inbound_transfer\": null,        \"issuing_authorization\": null,        \"issuing_transaction\": null,        \"payout\": null      },      \"livemode\": false,      \"network\": \"ach\",      \"reversal_details\": {        \"deadline\": 1681084800,        \"restricted_reason\": null      },      \"status\": \"succeeded\",      \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"    }    {...}    {...}  ],}\n```\n\n## [Test mode: Create a ReceivedDebit](https://docs.stripe.com/api/treasury/received_debits/test_mode_create)Test helper\n\nUse this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to pull funds from.\n    \n*   Specifies the network rails to be used. If not set, will default to the PaymentMethod’s preferred network. See the [docs](https://docs.stripe.com/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Initiating payment method details for the object.\n    \n\n### Returns\n\nA test mode ReceivedDebit object.\n\nPOST /v1/test\\_helpers/treasury/received\\_debits\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/received_debits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d currency=usd \\  -d financial_account=fa_1MtkUY2eZvKYlo2CY3s6OQyK \\  -d network=ach\n```\n\n```\n{  \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",  \"object\": \"treasury.received_debit\",  \"amount\": 1000,  \"created\": 1680755530,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"debit_reversal\": null,    \"inbound_transfer\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"payout\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a ReceivedDebit | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/received_debits/list",
  "markdown": "# List all ReceivedDebits | Stripe API Reference\n\nReturns a list of ReceivedDebits.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount that funds were pulled from.\n    \n*   Only return ReceivedDebits that have the given status: `succeeded` or `failed`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedDebit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedDebit was approved. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` ReceivedDebits, starting after ReceivedDebit `starting_after`. Each entry in the array is a separate ReceivedDebit object. If no more ReceivedDebits are available, the resulting array will be empty.\n\nGET /v1/treasury/received\\_debits\n\n```\ncurl -G https://api.stripe.com/v1/treasury/received_debits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkUY2eZvKYlo2CY3s6OQyK \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/received_debits\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",      \"object\": \"treasury.received_debit\",      \"amount\": 1000,      \"created\": 1680755530,      \"currency\": \"usd\",      \"description\": \"Stripe Test\",      \"failure_code\": null,      \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",      \"initiating_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": null,            \"country\": null,            \"line1\": null,            \"line2\": null,            \"postal_code\": null,            \"state\": null          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"bank_name\": \"STRIPE TEST BANK\",          \"last4\": \"6789\",          \"routing_number\": \"110000000\"        }      },      \"linked_flows\": {        \"debit_reversal\": null,        \"inbound_transfer\": null,        \"issuing_authorization\": null,        \"issuing_transaction\": null,        \"payout\": null      },      \"livemode\": false,      \"network\": \"ach\",      \"reversal_details\": {        \"deadline\": 1681084800,        \"restricted_reason\": null      },      \"status\": \"succeeded\",      \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"    }    {...}    {...}  ],}\n```\n\n## [Test mode: Create a ReceivedDebit](https://docs.stripe.com/api/treasury/received_debits/test_mode_create)Test helper\n\nUse this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to pull funds from.\n    \n*   Specifies the network rails to be used. If not set, will default to the PaymentMethod’s preferred network. See the [docs](https://docs.stripe.com/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Initiating payment method details for the object.\n    \n\n### Returns\n\nA test mode ReceivedDebit object.\n\nPOST /v1/test\\_helpers/treasury/received\\_debits\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/received_debits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d currency=usd \\  -d financial_account=fa_1MtkUY2eZvKYlo2CY3s6OQyK \\  -d network=ach\n```\n\n```\n{  \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",  \"object\": \"treasury.received_debit\",  \"amount\": 1000,  \"created\": 1680755530,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"debit_reversal\": null,    \"inbound_transfer\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"payout\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all ReceivedDebits | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/credit_reversals",
  "markdown": "# Credit Reversals | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftreasury%2Fcredit_reversals)\n\n## [The CreditReversal object](https://docs.stripe.com/api/treasury/credit_reversals/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   The FinancialAccount to reverse funds from.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The rails used to reverse the funds.\n    \n*   The ReceivedCredit being reversed.\n    \n*   Status of the CreditReversal\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The CreditReversal has been canceled before it has been sent to the network and no funds have left the account. (Currently not supported). |\n    | `posted`<br><br>The CreditReversal has been sent to the network and funds have left the account (with the Transaction posting) |\n    | `processing`<br><br>The CreditReversal starting state. Funds are “held” by a pending Transaction (but they are still part of the current balance). |\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n*   #### \n    \n    transactionnullable stringExpandable\n    \n    The Transaction associated with this object.\n    \n\nThe CreditReversal object\n\n```\n{  \"id\": \"credrev_1Mtklw2eZvKYlo2CJG2MWJM7\",  \"object\": \"treasury.credit_reversal\",  \"amount\": 1000,  \"created\": 1680756608,  \"currency\": \"usd\",  \"financial_account\": \"fa_1Mtklw2eZvKYlo2CNHscZzs2\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKICfuaEGMgYv0T_PcXU6NpP_n6wAfI9LKta3LkDRNQT8oLGdQf7JcXsskGjrq1LICpYVy5a3oOBI5gaVvTy8MtwpT1PTpQ\",  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_credit\": \"rc_1Mtklw2eZvKYlo2CxuluQFPR\",  \"status\": \"processing\",  \"status_transitions\": {    \"posted_at\": null  },  \"transaction\": \"trxn_1Mtklw2eZvKYlo2CKkbNA2TS\"}\n```\n\n## [Create a CreditReversal](https://docs.stripe.com/api/treasury/credit_reversals/create)\n\nReverses a ReceivedCredit and creates a CreditReversal object.\n\n### Parameters\n\n*   #### \n    \n    received\\_creditstringRequired\n    \n    The ReceivedCredit to reverse.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a CreditReversal object.\n\nPOST /v1/treasury/credit\\_reversals\n\n```\ncurl https://api.stripe.com/v1/treasury/credit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d received_credit=rc_1MtkGJLkdIwHu7ixWPuY9DGn\n```\n\n```\n{  \"id\": \"credrev_1Mtklw2eZvKYlo2CJG2MWJM7\",  \"object\": \"treasury.credit_reversal\",  \"amount\": 1000,  \"created\": 1680756608,  \"currency\": \"usd\",  \"financial_account\": \"fa_1Mtklw2eZvKYlo2CNHscZzs2\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKICfuaEGMgYv0T_PcXU6NpP_n6wAfI9LKta3LkDRNQT8oLGdQf7JcXsskGjrq1LICpYVy5a3oOBI5gaVvTy8MtwpT1PTpQ\",  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_credit\": \"rc_1Mtklw2eZvKYlo2CxuluQFPR\",  \"status\": \"processing\",  \"status_transitions\": {    \"posted_at\": null  },  \"transaction\": \"trxn_1Mtklw2eZvKYlo2CKkbNA2TS\"}\n```\n\n## [Retrieve a CreditReversal](https://docs.stripe.com/api/treasury/credit_reversals/retrieve)\n\nRetrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a CreditReversal object.\n\nGET /v1/treasury/credit\\_reversals/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/credit_reversals/credrev_1Mtklw2eZvKYlo2CJG2MWJM7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"credrev_1Mtklw2eZvKYlo2CJG2MWJM7\",  \"object\": \"treasury.credit_reversal\",  \"amount\": 1000,  \"created\": 1680756608,  \"currency\": \"usd\",  \"financial_account\": \"fa_1Mtklw2eZvKYlo2CNHscZzs2\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKICfuaEGMgYv0T_PcXU6NpP_n6wAfI9LKta3LkDRNQT8oLGdQf7JcXsskGjrq1LICpYVy5a3oOBI5gaVvTy8MtwpT1PTpQ\",  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_credit\": \"rc_1Mtklw2eZvKYlo2CxuluQFPR\",  \"status\": \"processing\",  \"status_transitions\": {    \"posted_at\": null  },  \"transaction\": \"trxn_1Mtklw2eZvKYlo2CKkbNA2TS\"}\n```\n\n## [List all CreditReversals](https://docs.stripe.com/api/treasury/credit_reversals/list)\n\nReturns a list of CreditReversals.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return CreditReversals for the ReceivedCredit ID.\n    \n*   Only return CreditReversals for a given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The CreditReversal has been canceled before it has been sent to the network and no funds have left the account. (Currently not supported). |\n    | `posted`<br><br>The CreditReversal has been sent to the network and funds have left the account (with the Transaction posting) |\n    | `processing`<br><br>The CreditReversal starting state. Funds are “held” by a pending Transaction (but they are still part of the current balance). |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` CreditReversals, starting after CreditReversal `starting_after`. Each entry in the array is a separate CreditReversal object. If no more CreditReversal are available, the resulting array will be empty.\n\nGET /v1/treasury/credit\\_reversals\n\n```\ncurl -G https://api.stripe.com/v1/treasury/credit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkGJLkdIwHu7ix6FAcfxof \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/credit_reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"credrev_1Mtklw2eZvKYlo2CJG2MWJM7\",      \"object\": \"treasury.credit_reversal\",      \"amount\": 1000,      \"created\": 1680756608,      \"currency\": \"usd\",      \"financial_account\": \"fa_1Mtklw2eZvKYlo2CNHscZzs2\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKICfuaEGMgYv0T_PcXU6NpP_n6wAfI9LKta3LkDRNQT8oLGdQf7JcXsskGjrq1LICpYVy5a3oOBI5gaVvTy8MtwpT1PTpQ\",      \"livemode\": false,      \"metadata\": {},      \"network\": \"ach\",      \"received_credit\": \"rc_1Mtklw2eZvKYlo2CxuluQFPR\",      \"status\": \"processing\",      \"status_transitions\": {        \"posted_at\": null      },      \"transaction\": \"trxn_1Mtklw2eZvKYlo2CKkbNA2TS\"    }    {...}    {...}  ],}\n```",
  "title": "Credit Reversals | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/credit_reversals/create",
  "markdown": "# Create a CreditReversal | Stripe API Reference\n\nReverses a ReceivedCredit and creates a CreditReversal object.\n\n### Parameters\n\n*   #### \n    \n    received\\_creditstringRequired\n    \n    The ReceivedCredit to reverse.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a CreditReversal object.\n\nPOST /v1/treasury/credit\\_reversals\n\n```\ncurl https://api.stripe.com/v1/treasury/credit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d received_credit=rc_1MtkGJLkdIwHu7ixWPuY9DGn\n```\n\n```\n{  \"id\": \"credrev_1Mtklw2eZvKYlo2CJG2MWJM7\",  \"object\": \"treasury.credit_reversal\",  \"amount\": 1000,  \"created\": 1680756608,  \"currency\": \"usd\",  \"financial_account\": \"fa_1Mtklw2eZvKYlo2CNHscZzs2\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKICfuaEGMgYv0T_PcXU6NpP_n6wAfI9LKta3LkDRNQT8oLGdQf7JcXsskGjrq1LICpYVy5a3oOBI5gaVvTy8MtwpT1PTpQ\",  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_credit\": \"rc_1Mtklw2eZvKYlo2CxuluQFPR\",  \"status\": \"processing\",  \"status_transitions\": {    \"posted_at\": null  },  \"transaction\": \"trxn_1Mtklw2eZvKYlo2CKkbNA2TS\"}\n```\n\n## [Retrieve a CreditReversal](https://docs.stripe.com/api/treasury/credit_reversals/retrieve)\n\nRetrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a CreditReversal object.\n\nGET /v1/treasury/credit\\_reversals/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/credit_reversals/credrev_1Mtklw2eZvKYlo2CJG2MWJM7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"credrev_1Mtklw2eZvKYlo2CJG2MWJM7\",  \"object\": \"treasury.credit_reversal\",  \"amount\": 1000,  \"created\": 1680756608,  \"currency\": \"usd\",  \"financial_account\": \"fa_1Mtklw2eZvKYlo2CNHscZzs2\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKICfuaEGMgYv0T_PcXU6NpP_n6wAfI9LKta3LkDRNQT8oLGdQf7JcXsskGjrq1LICpYVy5a3oOBI5gaVvTy8MtwpT1PTpQ\",  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_credit\": \"rc_1Mtklw2eZvKYlo2CxuluQFPR\",  \"status\": \"processing\",  \"status_transitions\": {    \"posted_at\": null  },  \"transaction\": \"trxn_1Mtklw2eZvKYlo2CKkbNA2TS\"}\n```\n\n## [List all CreditReversals](https://docs.stripe.com/api/treasury/credit_reversals/list)\n\nReturns a list of CreditReversals.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return CreditReversals for the ReceivedCredit ID.\n    \n*   Only return CreditReversals for a given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The CreditReversal has been canceled before it has been sent to the network and no funds have left the account. (Currently not supported). |\n    | `posted`<br><br>The CreditReversal has been sent to the network and funds have left the account (with the Transaction posting) |\n    | `processing`<br><br>The CreditReversal starting state. Funds are “held” by a pending Transaction (but they are still part of the current balance). |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` CreditReversals, starting after CreditReversal `starting_after`. Each entry in the array is a separate CreditReversal object. If no more CreditReversal are available, the resulting array will be empty.\n\nGET /v1/treasury/credit\\_reversals\n\n```\ncurl -G https://api.stripe.com/v1/treasury/credit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkGJLkdIwHu7ix6FAcfxof \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/credit_reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"credrev_1Mtklw2eZvKYlo2CJG2MWJM7\",      \"object\": \"treasury.credit_reversal\",      \"amount\": 1000,      \"created\": 1680756608,      \"currency\": \"usd\",      \"financial_account\": \"fa_1Mtklw2eZvKYlo2CNHscZzs2\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKICfuaEGMgYv0T_PcXU6NpP_n6wAfI9LKta3LkDRNQT8oLGdQf7JcXsskGjrq1LICpYVy5a3oOBI5gaVvTy8MtwpT1PTpQ\",      \"livemode\": false,      \"metadata\": {},      \"network\": \"ach\",      \"received_credit\": \"rc_1Mtklw2eZvKYlo2CxuluQFPR\",      \"status\": \"processing\",      \"status_transitions\": {        \"posted_at\": null      },      \"transaction\": \"trxn_1Mtklw2eZvKYlo2CKkbNA2TS\"    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create a CreditReversal | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/credit_reversals/list",
  "markdown": "# List all CreditReversals | Stripe API Reference\n\nReturns a list of CreditReversals.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return CreditReversals for the ReceivedCredit ID.\n    \n*   Only return CreditReversals for a given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The CreditReversal has been canceled before it has been sent to the network and no funds have left the account. (Currently not supported). |\n    | `posted`<br><br>The CreditReversal has been sent to the network and funds have left the account (with the Transaction posting) |\n    | `processing`<br><br>The CreditReversal starting state. Funds are “held” by a pending Transaction (but they are still part of the current balance). |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` CreditReversals, starting after CreditReversal `starting_after`. Each entry in the array is a separate CreditReversal object. If no more CreditReversal are available, the resulting array will be empty.\n\nGET /v1/treasury/credit\\_reversals\n\n```\ncurl -G https://api.stripe.com/v1/treasury/credit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkGJLkdIwHu7ix6FAcfxof \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/credit_reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"credrev_1Mtklw2eZvKYlo2CJG2MWJM7\",      \"object\": \"treasury.credit_reversal\",      \"amount\": 1000,      \"created\": 1680756608,      \"currency\": \"usd\",      \"financial_account\": \"fa_1Mtklw2eZvKYlo2CNHscZzs2\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKICfuaEGMgYv0T_PcXU6NpP_n6wAfI9LKta3LkDRNQT8oLGdQf7JcXsskGjrq1LICpYVy5a3oOBI5gaVvTy8MtwpT1PTpQ\",      \"livemode\": false,      \"metadata\": {},      \"network\": \"ach\",      \"received_credit\": \"rc_1Mtklw2eZvKYlo2CxuluQFPR\",      \"status\": \"processing\",      \"status_transitions\": {        \"posted_at\": null      },      \"transaction\": \"trxn_1Mtklw2eZvKYlo2CKkbNA2TS\"    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all CreditReversals | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/debit_reversals/create",
  "markdown": "# Create a DebitReversal | Stripe API Reference\n\nReverses a ReceivedDebit and creates a DebitReversal object.\n\n### Parameters\n\n*   #### \n    \n    received\\_debitstringRequired\n    \n    The ReceivedDebit to reverse.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a DebitReversal object.\n\nPOST /v1/treasury/debit\\_reversals\n\n```\ncurl https://api.stripe.com/v1/treasury/debit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d received_debit=rd_1MtkMLLkdIwHu7ixoiUFN4qd\n```\n\n```\n{  \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",  \"object\": \"treasury.debit_reversal\",  \"amount\": 1000,  \"created\": 1680755021,  \"currency\": \"usd\",  \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",  \"linked_flows\": null,  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",  \"status\": \"processing\",  \"status_transitions\": {    \"completed_at\": null  },  \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"}\n```\n\n## [Retrieve a DebitReversal](https://docs.stripe.com/api/treasury/debit_reversals/retrieve)\n\nRetrieves a DebitReversal object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a DebitReversal object.\n\nGET /v1/treasury/debit\\_reversals/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/debit_reversals/debrev_1MtkMLLkdIwHu7ixIcVctOKK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",  \"object\": \"treasury.debit_reversal\",  \"amount\": 1000,  \"created\": 1680755021,  \"currency\": \"usd\",  \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",  \"linked_flows\": null,  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",  \"status\": \"processing\",  \"status_transitions\": {    \"completed_at\": null  },  \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"}\n```\n\n## [List all DebitReversals](https://docs.stripe.com/api/treasury/debit_reversals/list)\n\nReturns a list of DebitReversals.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return DebitReversals for the ReceivedDebit ID.\n    \n*   Only return DebitReversals for a given resolution.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `lost`<br><br>DebitReversal was lost, and no Transactions will be created. |\n    | `won`<br><br>DebitReversal was won, and a crediting Transaction will be created. |\n    \n*   Only return DebitReversals for a given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The DebitReversal has been canceled before it has been sent to the network and no funds have been returned to the account. (Currently not supported). |\n    | `completed`<br><br>The network has provided a resolution for the DebitReversal. If won, a crediting Transaction is created. |\n    | `processing`<br><br>The DebitReversal starting state. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` DebitReversals, starting after DebitReversal `starting_after`. Each entry in the array is a separate DebitReversal object. If no more DebitReversals are available, the resulting array will be empty.\n\nGET /v1/treasury/debit\\_reversals\n\n```\ncurl -G https://api.stripe.com/v1/treasury/debit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkMLLkdIwHu7ixrkGP4bqB \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/debit_reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",      \"object\": \"treasury.debit_reversal\",      \"amount\": 1000,      \"created\": 1680755021,      \"currency\": \"usd\",      \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",      \"linked_flows\": null,      \"livemode\": false,      \"metadata\": {},      \"network\": \"ach\",      \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",      \"status\": \"processing\",      \"status_transitions\": {        \"completed_at\": null      },      \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create a DebitReversal | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/credit_reversals/retrieve",
  "markdown": "# Retrieve a CreditReversal | Stripe API Reference\n\nRetrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a CreditReversal object.\n\nGET /v1/treasury/credit\\_reversals/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/credit_reversals/credrev_1Mtklw2eZvKYlo2CJG2MWJM7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"credrev_1Mtklw2eZvKYlo2CJG2MWJM7\",  \"object\": \"treasury.credit_reversal\",  \"amount\": 1000,  \"created\": 1680756608,  \"currency\": \"usd\",  \"financial_account\": \"fa_1Mtklw2eZvKYlo2CNHscZzs2\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKICfuaEGMgYv0T_PcXU6NpP_n6wAfI9LKta3LkDRNQT8oLGdQf7JcXsskGjrq1LICpYVy5a3oOBI5gaVvTy8MtwpT1PTpQ\",  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_credit\": \"rc_1Mtklw2eZvKYlo2CxuluQFPR\",  \"status\": \"processing\",  \"status_transitions\": {    \"posted_at\": null  },  \"transaction\": \"trxn_1Mtklw2eZvKYlo2CKkbNA2TS\"}\n```\n\n## [List all CreditReversals](https://docs.stripe.com/api/treasury/credit_reversals/list)\n\nReturns a list of CreditReversals.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return CreditReversals for the ReceivedCredit ID.\n    \n*   Only return CreditReversals for a given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The CreditReversal has been canceled before it has been sent to the network and no funds have left the account. (Currently not supported). |\n    | `posted`<br><br>The CreditReversal has been sent to the network and funds have left the account (with the Transaction posting) |\n    | `processing`<br><br>The CreditReversal starting state. Funds are “held” by a pending Transaction (but they are still part of the current balance). |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` CreditReversals, starting after CreditReversal `starting_after`. Each entry in the array is a separate CreditReversal object. If no more CreditReversal are available, the resulting array will be empty.\n\nGET /v1/treasury/credit\\_reversals\n\n```\ncurl -G https://api.stripe.com/v1/treasury/credit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkGJLkdIwHu7ix6FAcfxof \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/credit_reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"credrev_1Mtklw2eZvKYlo2CJG2MWJM7\",      \"object\": \"treasury.credit_reversal\",      \"amount\": 1000,      \"created\": 1680756608,      \"currency\": \"usd\",      \"financial_account\": \"fa_1Mtklw2eZvKYlo2CNHscZzs2\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKICfuaEGMgYv0T_PcXU6NpP_n6wAfI9LKta3LkDRNQT8oLGdQf7JcXsskGjrq1LICpYVy5a3oOBI5gaVvTy8MtwpT1PTpQ\",      \"livemode\": false,      \"metadata\": {},      \"network\": \"ach\",      \"received_credit\": \"rc_1Mtklw2eZvKYlo2CxuluQFPR\",      \"status\": \"processing\",      \"status_transitions\": {        \"posted_at\": null      },      \"transaction\": \"trxn_1Mtklw2eZvKYlo2CKkbNA2TS\"    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a CreditReversal | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/debit_reversals/retrieve",
  "markdown": "# Retrieve a DebitReversal | Stripe API Reference\n\nRetrieves a DebitReversal object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a DebitReversal object.\n\nGET /v1/treasury/debit\\_reversals/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/debit_reversals/debrev_1MtkMLLkdIwHu7ixIcVctOKK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",  \"object\": \"treasury.debit_reversal\",  \"amount\": 1000,  \"created\": 1680755021,  \"currency\": \"usd\",  \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",  \"linked_flows\": null,  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",  \"status\": \"processing\",  \"status_transitions\": {    \"completed_at\": null  },  \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"}\n```\n\n## [List all DebitReversals](https://docs.stripe.com/api/treasury/debit_reversals/list)\n\nReturns a list of DebitReversals.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return DebitReversals for the ReceivedDebit ID.\n    \n*   Only return DebitReversals for a given resolution.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `lost`<br><br>DebitReversal was lost, and no Transactions will be created. |\n    | `won`<br><br>DebitReversal was won, and a crediting Transaction will be created. |\n    \n*   Only return DebitReversals for a given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The DebitReversal has been canceled before it has been sent to the network and no funds have been returned to the account. (Currently not supported). |\n    | `completed`<br><br>The network has provided a resolution for the DebitReversal. If won, a crediting Transaction is created. |\n    | `processing`<br><br>The DebitReversal starting state. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` DebitReversals, starting after DebitReversal `starting_after`. Each entry in the array is a separate DebitReversal object. If no more DebitReversals are available, the resulting array will be empty.\n\nGET /v1/treasury/debit\\_reversals\n\n```\ncurl -G https://api.stripe.com/v1/treasury/debit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkMLLkdIwHu7ixrkGP4bqB \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/debit_reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",      \"object\": \"treasury.debit_reversal\",      \"amount\": 1000,      \"created\": 1680755021,      \"currency\": \"usd\",      \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",      \"linked_flows\": null,      \"livemode\": false,      \"metadata\": {},      \"network\": \"ach\",      \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",      \"status\": \"processing\",      \"status_transitions\": {        \"completed_at\": null      },      \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a DebitReversal | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/entitlements/feature/create",
  "markdown": "# Create a feature | Stripe API Reference\n\nCreates a feature\n\n### Parameters\n\n*   A unique key you provide as your own system identifier. This may be up to 80 characters.\n    \n*   The feature’s name, for your own purpose, not meant to be displayable to the customer.\n    \n*   Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\nPOST /v1/entitlements/features\n\n```\ncurl https://api.stripe.com/v1/entitlements/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"My super awesome feature\" \\  -d lookup_key=my-super-awesome-feature\n```\n\n```\n{  \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",  \"object\": \"entitlements.feature\",  \"livemode\": false,  \"name\": \"My super awesome feature\",  \"lookup_key\": \"my-super-awesome-feature\",  \"active\": true,  \"metadata\": {}}\n```\n\n## [List all features](https://docs.stripe.com/api/entitlements/feature/list)\n\nRetrieve a list of features\n\n### Parameters\n\n*   If set, filter results to only include features with the given archive status.\n    \n*   If set, filter results to only include features with the given lookup\\_key.\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of your features\n\nGET /v1/entitlements/features\n\n```\ncurl -G https://api.stripe.com/v1/entitlements/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/entitlements/features\",  \"has_more\": false,  \"data\": [    {      \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",      \"object\": \"entitlements.feature\",      \"livemode\": false,      \"name\": \"My super awesome feature\",      \"lookup_key\": \"my-super-awesome-feature\",      \"active\": true,      \"metadata\": {}    }    {...}    {...}  ],}\n```\n\n## [Updates a feature](https://docs.stripe.com/api/entitlements/feature/updates)\n\nUpdate a feature’s metadata or permanently deactivate it.\n\n### Parameters\n\n*   Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The feature’s name, for your own purpose, not meant to be displayable to the customer.\n    \n\n### More parameters\n\n### Returns\n\nThe updated feature.\n\nPOST /v1/entitlements/features/:id\n\n```\ncurl https://api.stripe.com/v1/entitlements/features/feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",  \"object\": \"entitlements.feature\",  \"livemode\": false,  \"name\": \"My super awesome feature\",  \"lookup_key\": \"my-super-awesome-feature\",  \"active\": true,  \"metadata\": {    \"order_id\": \"6735\"  }}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create a feature | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/debit_reversals/list",
  "markdown": "# List all DebitReversals | Stripe API Reference\n\nReturns a list of DebitReversals.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return DebitReversals for the ReceivedDebit ID.\n    \n*   Only return DebitReversals for a given resolution.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `lost`<br><br>DebitReversal was lost, and no Transactions will be created. |\n    | `won`<br><br>DebitReversal was won, and a crediting Transaction will be created. |\n    \n*   Only return DebitReversals for a given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The DebitReversal has been canceled before it has been sent to the network and no funds have been returned to the account. (Currently not supported). |\n    | `completed`<br><br>The network has provided a resolution for the DebitReversal. If won, a crediting Transaction is created. |\n    | `processing`<br><br>The DebitReversal starting state. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` DebitReversals, starting after DebitReversal `starting_after`. Each entry in the array is a separate DebitReversal object. If no more DebitReversals are available, the resulting array will be empty.\n\nGET /v1/treasury/debit\\_reversals\n\n```\ncurl -G https://api.stripe.com/v1/treasury/debit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkMLLkdIwHu7ixrkGP4bqB \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/debit_reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",      \"object\": \"treasury.debit_reversal\",      \"amount\": 1000,      \"created\": 1680755021,      \"currency\": \"usd\",      \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",      \"linked_flows\": null,      \"livemode\": false,      \"metadata\": {},      \"network\": \"ach\",      \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",      \"status\": \"processing\",      \"status_transitions\": {        \"completed_at\": null      },      \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all DebitReversals | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/entitlements/feature/list",
  "markdown": "# List all features | Stripe API Reference\n\nRetrieve a list of features\n\n### Parameters\n\n*   If set, filter results to only include features with the given archive status.\n    \n*   If set, filter results to only include features with the given lookup\\_key.\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of your features\n\nGET /v1/entitlements/features\n\n```\ncurl -G https://api.stripe.com/v1/entitlements/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/entitlements/features\",  \"has_more\": false,  \"data\": [    {      \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",      \"object\": \"entitlements.feature\",      \"livemode\": false,      \"name\": \"My super awesome feature\",      \"lookup_key\": \"my-super-awesome-feature\",      \"active\": true,      \"metadata\": {}    }    {...}    {...}  ],}\n```\n\n## [Updates a feature](https://docs.stripe.com/api/entitlements/feature/updates)\n\nUpdate a feature’s metadata or permanently deactivate it.\n\n### Parameters\n\n*   Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The feature’s name, for your own purpose, not meant to be displayable to the customer.\n    \n\n### More parameters\n\n### Returns\n\nThe updated feature.\n\nPOST /v1/entitlements/features/:id\n\n```\ncurl https://api.stripe.com/v1/entitlements/features/feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",  \"object\": \"entitlements.feature\",  \"livemode\": false,  \"name\": \"My super awesome feature\",  \"lookup_key\": \"my-super-awesome-feature\",  \"active\": true,  \"metadata\": {    \"order_id\": \"6735\"  }}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all features | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/product-feature/attach",
  "markdown": "# Attach a feature to a product\n\nCreates a product\\_feature, which represents a feature attachment to a product\n\n### Parameters\n\n*   #### \n    \n    entitlement\\_featurestringRequired\n    \n    The ID of the [Feature](https://docs.stripe.com/api/entitlements/feature) object attached to this product.\n    \n\n### Returns\n\nReturns a product\\_feature\n\nPOST /v1/products/:id/features\n\n```\ncurl https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d entitlement_feature=feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\n```\n\n```\n{  \"id\": \"prodft_BcMBZUWCIOEgEc\",  \"object\": \"product_feature\",  \"livemode\": false,  \"entitlement_feature\": {    \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",    \"object\": \"entitlements.feature\",    \"livemode\": false,    \"name\": \"My super awesome feature\",    \"lookup_key\": \"my-super-awesome-feature\",    \"metadata\": {}  }}\n```\n\n## [Remove a feature from a product](https://docs.stripe.com/api/product-feature/remove)\n\nDeletes the feature attachment to a product\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the product feature ID does not exist, this call raises [an error](#errors).\n\nDELETE /v1/products/:id/features/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc/features/prodft_BcMBZUWCIOEgEc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prodft_BcMBZUWCIOEgEc\",  \"object\": \"product_feature\",  \"deleted\": true}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Attach a feature to a product | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/product-feature/list",
  "markdown": "# List all features attached to a product\n\nRetrieve a list of features for a product\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of features for a product\n\nGET /v1/products/:id/features\n\n```\ncurl -G https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/products/prod_NWjs8kKbJWmuuc/features\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prodft_BcMBZUWCIOEgEc\",      \"object\": \"product_feature\",      \"livemode\": false,      \"entitlement_feature\": {        \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",        \"object\": \"entitlements.feature\",        \"livemode\": false,        \"name\": \"My super awesome feature\",        \"lookup_key\": \"my-super-awesome-feature\",        \"metadata\": {}      }    }    {...}    {...}  ],}\n```\n\n## [Attach a feature to a product](https://docs.stripe.com/api/product-feature/attach)\n\nCreates a product\\_feature, which represents a feature attachment to a product\n\n### Parameters\n\n*   #### \n    \n    entitlement\\_featurestringRequired\n    \n    The ID of the [Feature](https://docs.stripe.com/api/entitlements/feature) object attached to this product.\n    \n\n### Returns\n\nReturns a product\\_feature\n\nPOST /v1/products/:id/features\n\n```\ncurl https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d entitlement_feature=feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\n```\n\n```\n{  \"id\": \"prodft_BcMBZUWCIOEgEc\",  \"object\": \"product_feature\",  \"livemode\": false,  \"entitlement_feature\": {    \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",    \"object\": \"entitlements.feature\",    \"livemode\": false,    \"name\": \"My super awesome feature\",    \"lookup_key\": \"my-super-awesome-feature\",    \"metadata\": {}  }}\n```\n\n## [Remove a feature from a product](https://docs.stripe.com/api/product-feature/remove)\n\nDeletes the feature attachment to a product\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the product feature ID does not exist, this call raises [an error](#errors).\n\nDELETE /v1/products/:id/features/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc/features/prodft_BcMBZUWCIOEgEc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prodft_BcMBZUWCIOEgEc\",  \"object\": \"product_feature\",  \"deleted\": true}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all features attached to a product | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/entitlements/feature/updates",
  "markdown": "# Updates a feature | Stripe API Reference\n\nUpdate a feature’s metadata or permanently deactivate it.\n\n### Parameters\n\n*   Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The feature’s name, for your own purpose, not meant to be displayable to the customer.\n    \n\n### More parameters\n\n### Returns\n\nThe updated feature.\n\nPOST /v1/entitlements/features/:id\n\n```\ncurl https://api.stripe.com/v1/entitlements/features/feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",  \"object\": \"entitlements.feature\",  \"livemode\": false,  \"name\": \"My super awesome feature\",  \"lookup_key\": \"my-super-awesome-feature\",  \"active\": true,  \"metadata\": {    \"order_id\": \"6735\"  }}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Updates a feature | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/product-feature/remove",
  "markdown": "# Remove a feature from a product\n\nDeletes the feature attachment to a product\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the product feature ID does not exist, this call raises [an error](#errors).\n\nDELETE /v1/products/:id/features/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc/features/prodft_BcMBZUWCIOEgEc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prodft_BcMBZUWCIOEgEc\",  \"object\": \"product_feature\",  \"deleted\": true}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Remove a feature from a product | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/entitlements/active-entitlement/retrieve",
  "markdown": "# Retrieve an active entitlement | Stripe API Reference\n\nRetrieve an active entitlement\n\n### Parameters\n\n*   The ID of the entitlement.\n    \n\n### Returns\n\nReturns an active entitlement\n\nGET /v1/entitlements/active\\_entitlements/:id\n\n```\ncurl https://api.stripe.com/v1/entitlements/active_entitlements/ent_test_61QG5x2cU1GluFTYs41JqiESbLiX8C8O \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ent_test_61QG5x2cU1GluFTYs41JqiESbLiX8C8O\",  \"object\": \"entitlements.active_entitlement\",  \"feature\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",  \"lookup_key\": \"seats-feature\",  \"livemode\": false}\n```\n\n## [List all active entitlements](https://docs.stripe.com/api/entitlements/active-entitlement/list)\n\nRetrieve a list of active entitlements for a customer\n\n### Parameters\n\n*   The ID of the customer.\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of active entitlements for a customer\n\nGET /v1/entitlements/active\\_entitlements\n\n```\ncurl -G https://api.stripe.com/v1/entitlements/active_entitlements \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_9s6XKzkNRiz8i3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/entitlements/active_entitlements\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ent_test_61QG5x2cU1GluFTYs41JqiESbLiX8C8O\",      \"object\": \"entitlements.active_entitlement\",      \"feature\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",      \"lookup_key\": \"seats-feature\",      \"livemode\": false    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve an active entitlement | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/sigma/scheduled_queries",
  "markdown": "# Scheduled Queries | Stripe API Reference\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [The Scheduled Query object](https://docs.stripe.com/api/sigma/scheduled_queries/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   When the query was run, Sigma contained a snapshot of your Stripe data at this time.\n    \n*   The file object representing the results of the query.\n    \n*   SQL for the query.\n    \n*   The query’s execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise.\n    \n*   Title of the query.\n    \n\n### More attributes\n\n*   #### \n    \n    result\\_available\\_untiltimestamp\n    \n\nThe Scheduled Query object\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/sigma/scheduled_query_runs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sqr_1NpIuH2eZvKYlo2CP72f3rLR\",      \"object\": \"scheduled_query_run\",      \"created\": 1694472517,      \"data_load_time\": 1694217600,      \"file\": {        \"id\": \"file_1BE4yZ2eZvKYlo2C9MeXgqcB\",        \"object\": \"file\",        \"created\": 1508284799,        \"expires_at\": null,        \"filename\": \"path\",        \"links\": {          \"object\": \"list\",          \"data\": [],          \"has_more\": false,          \"url\": \"/v1/file_links?file=file_1BE4yZ2eZvKYlo2C9MeXgqcB\"        },        \"purpose\": \"sigma_scheduled_query\",        \"size\": 500,        \"title\": null,        \"type\": \"csv\",        \"url\": \"https://files.stripe.com/v1/files/file_1BE4yZ2eZvKYlo2C9MeXgqcB/contents\"      },      \"livemode\": false,      \"result_available_until\": 1726012800,      \"sql\": \"SELECT count(*) from charges\",      \"status\": \"completed\",      \"title\": \"Count all charges\"    }  ]}\n```\n\n## [Retrieve a scheduled query run](https://docs.stripe.com/api/sigma/scheduled_queries/retrieve)\n\nRetrieves the details of an scheduled query run.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the scheduled query run object if a valid identifier was provided.\n\nGET /v1/sigma/scheduled\\_query\\_runs/:id\n\n```\ncurl https://api.stripe.com/v1/sigma/scheduled_query_runs/sqr_1NpIuH2eZvKYlo2CP72f3rLR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/sigma/scheduled_query_runs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sqr_1NpIuH2eZvKYlo2CP72f3rLR\",      \"object\": \"scheduled_query_run\",      \"created\": 1694472517,      \"data_load_time\": 1694217600,      \"file\": {        \"id\": \"file_1BE4yZ2eZvKYlo2C9MeXgqcB\",        \"object\": \"file\",        \"created\": 1508284799,        \"expires_at\": null,        \"filename\": \"path\",        \"links\": {          \"object\": \"list\",          \"data\": [],          \"has_more\": false,          \"url\": \"/v1/file_links?file=file_1BE4yZ2eZvKYlo2C9MeXgqcB\"        },        \"purpose\": \"sigma_scheduled_query\",        \"size\": 500,        \"title\": null,        \"type\": \"csv\",        \"url\": \"https://files.stripe.com/v1/files/file_1BE4yZ2eZvKYlo2C9MeXgqcB/contents\"      },      \"livemode\": false,      \"result_available_until\": 1726012800,      \"sql\": \"SELECT count(*) from charges\",      \"status\": \"completed\",      \"title\": \"Count all charges\"    }  ]}\n```\n\n## [List all scheduled query runs](https://docs.stripe.com/api/sigma/scheduled_queries/list)\n\nReturns a list of scheduled query runs.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA paginated list of all scheduled query runs.\n\nGET /v1/sigma/scheduled\\_query\\_runs\n\n```\ncurl -G https://api.stripe.com/v1/sigma/scheduled_query_runs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/sigma/scheduled_query_runs\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/sigma/scheduled_query_runs\",      \"has_more\": false,      \"data\": [        {          \"id\": \"sqr_1NpIuH2eZvKYlo2CP72f3rLR\",          \"object\": \"scheduled_query_run\",          \"created\": 1694472517,          \"data_load_time\": 1694217600,          \"file\": {            \"id\": \"file_1BE4yZ2eZvKYlo2C9MeXgqcB\",            \"object\": \"file\",            \"created\": 1508284799,            \"expires_at\": null,            \"filename\": \"path\",            \"links\": {              \"object\": \"list\",              \"data\": [],              \"has_more\": false,              \"url\": \"/v1/file_links?file=file_1BE4yZ2eZvKYlo2C9MeXgqcB\"            },            \"purpose\": \"sigma_scheduled_query\",            \"size\": 500,            \"title\": null,            \"type\": \"csv\",            \"url\": \"https://files.stripe.com/v1/files/file_1BE4yZ2eZvKYlo2C9MeXgqcB/contents\"          },          \"livemode\": false,          \"result_available_until\": 1726012800,          \"sql\": \"SELECT count(*) from charges\",          \"status\": \"completed\",          \"title\": \"Count all charges\"        }      ]    }    {...}    {...}  ],}\n```\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Scheduled Queries | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/sigma/scheduled-queries",
  "markdown": "# Schedule queries | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to schedule queries in Sigma that run on a recurring basis.\n\nYou can automate your Sigma queries by scheduling them to run on a daily, weekly, or monthly basis. Results for each scheduled query are sent with an [email](#subscribers) to specified team members or as [webhook events](#receiving-results-as-webhooks).\n\n## Scheduling a query![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith a query loaded into the editor, click **Schedule**. We recommend you uniquely name all your scheduled queries to avoid confusion. If your query doesn’t already have a name (or you wish to modify it), you can update it during the scheduling process.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/scheduled-query-sample.1725f09555d262a2bfe0be7385118d71.png)\n\n### Schedule![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach scheduled query can be run on a daily, weekly, or monthly basis. Queries run as soon as the data for that period is available.\n\n| Schedule | Description |\n| --- | --- |\n| Daily | Queries run as soon as the data for each day (ending at 12:00am UTC) is processed. Query results for the previous day are usually available by 2pm UTC. |\n| Weekly | Queries run every week as soon as the data for the previous week (ending on Sunday at 12:00am UTC) is processed. Query results for the previous week are usually available by 2pm UTC the following Monday. |\n| Monthly | Queries run every month as soon as the data for the previous month (ending at 12:00am UTC) is processed. Query results for the previous month are usually available by 2pm UTC on the 1st of the month. |\n\n## Subscribers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreators of scheduled queries are added as subscribers to email notifications by default. To notify other [team members](https://docs.stripe.com/get-started/account/teams) as well, enter their email addresses. Results sent with an email include the name and date of the scheduled query, and a link to download the results in CSV format. To preview what the email looks like, click **Preview email**.\n\nYou or your team members can stop receiving notifications at any time by clicking the **Unsubscribe** link in the email. You can also edit the scheduled query in the Dashboard and add or remove subscribers.\n\n### Timeline![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBased upon your chosen schedule, the timeline displays the date your query runs next, and the processing date of the data it uses (additional time is required to make your account data available to query).\n\nManaging scheduled queries Upcoming scheduled queries are displayed under **Scheduled** within the **Queries** tab. Schedules are grouped based on whether they were created by you or other members of your team.\n\nTo edit a scheduled query, select it and click **Edit schedule**. To delete it, click **—** and select **Delete**.\n\n### Receiving results as webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you make use of [webhooks](https://docs.stripe.com/webhooks), you can receive notifications for scheduled queries as webhook events. For example, Stripe sends the `sigma.scheduled_query_run.created` event each time a scheduled query is run. See below for a sample event.\n\nThe `data.object.file.url` subfield of the webhook payload contains the URL where you can access the results file **using your live secret API key**. For example, if your server received the webhook below, it could download the results using this `curl` command:\n\n`curl https://files.stripe.com/v1/files/{{ FILE ID }}/contents -u sk_live_XXXXXXX:`\n\nFor more on how to integrate webhooks, see our [webhook documentation](https://docs.stripe.com/webhooks).\n\n`// Sample payload of a sigma.scheduled_query_run.created webhook  {   \"object\": \"event\",   \"pending_webhooks\": 2,   \"created\": 1504794194,   \"type\": \"sigma.scheduled_query_run.created\",   \"livemode\": true,   \"request\": null,   \"data\": {     \"object\": {       \"id\": \"sqr_HAMEPubrehOuKzM16yKc\",       \"object\": \"scheduled_query_run\",       \"status\": \"completed\",       \"data_load_time\": 1504656000,       \"file\": {         \"id\": \"{{ FILE ID }}\",         \"object\": \"file\",         \"url\": \"https://files.stripe.com/v1/files/{{ FILE ID }}/contents\",         \"created\": 1507841188,         \"purpose\": \"sigma_scheduled_query\",         \"size\": 53075,         \"type\": \"csv\"       },       \"title\": \"Scheduled Query Example\",       \"sql\": \"SELECT count(*) FROM charges WHERE created >= date('2017-01-01')\",       \"created\": 1504794194,       \"result_available_until\": 1505398933,       \"error\": null,       \"livemode\": true     }   } }`",
  "title": "Schedule queries | Stripe Documentation",
  "description": "Learn how to schedule queries in Sigma that run on a recurring basis.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/sigma/scheduled_queries/retrieve",
  "markdown": "# Retrieve a scheduled query run\n\nRetrieves the details of an scheduled query run.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the scheduled query run object if a valid identifier was provided.\n\nGET /v1/sigma/scheduled\\_query\\_runs/:id\n\n```\ncurl https://api.stripe.com/v1/sigma/scheduled_query_runs/sqr_1NpIuH2eZvKYlo2CP72f3rLR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/sigma/scheduled_query_runs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sqr_1NpIuH2eZvKYlo2CP72f3rLR\",      \"object\": \"scheduled_query_run\",      \"created\": 1694472517,      \"data_load_time\": 1694217600,      \"file\": {        \"id\": \"file_1BE4yZ2eZvKYlo2C9MeXgqcB\",        \"object\": \"file\",        \"created\": 1508284799,        \"expires_at\": null,        \"filename\": \"path\",        \"links\": {          \"object\": \"list\",          \"data\": [],          \"has_more\": false,          \"url\": \"/v1/file_links?file=file_1BE4yZ2eZvKYlo2C9MeXgqcB\"        },        \"purpose\": \"sigma_scheduled_query\",        \"size\": 500,        \"title\": null,        \"type\": \"csv\",        \"url\": \"https://files.stripe.com/v1/files/file_1BE4yZ2eZvKYlo2C9MeXgqcB/contents\"      },      \"livemode\": false,      \"result_available_until\": 1726012800,      \"sql\": \"SELECT count(*) from charges\",      \"status\": \"completed\",      \"title\": \"Count all charges\"    }  ]}\n```\n\n## [List all scheduled query runs](https://docs.stripe.com/api/sigma/scheduled_queries/list)\n\nReturns a list of scheduled query runs.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA paginated list of all scheduled query runs.\n\nGET /v1/sigma/scheduled\\_query\\_runs\n\n```\ncurl -G https://api.stripe.com/v1/sigma/scheduled_query_runs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/sigma/scheduled_query_runs\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/sigma/scheduled_query_runs\",      \"has_more\": false,      \"data\": [        {          \"id\": \"sqr_1NpIuH2eZvKYlo2CP72f3rLR\",          \"object\": \"scheduled_query_run\",          \"created\": 1694472517,          \"data_load_time\": 1694217600,          \"file\": {            \"id\": \"file_1BE4yZ2eZvKYlo2C9MeXgqcB\",            \"object\": \"file\",            \"created\": 1508284799,            \"expires_at\": null,            \"filename\": \"path\",            \"links\": {              \"object\": \"list\",              \"data\": [],              \"has_more\": false,              \"url\": \"/v1/file_links?file=file_1BE4yZ2eZvKYlo2C9MeXgqcB\"            },            \"purpose\": \"sigma_scheduled_query\",            \"size\": 500,            \"title\": null,            \"type\": \"csv\",            \"url\": \"https://files.stripe.com/v1/files/file_1BE4yZ2eZvKYlo2C9MeXgqcB/contents\"          },          \"livemode\": false,          \"result_available_until\": 1726012800,          \"sql\": \"SELECT count(*) from charges\",          \"status\": \"completed\",          \"title\": \"Count all charges\"        }      ]    }    {...}    {...}  ],}\n```\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a scheduled query run | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/reporting/report_run",
  "markdown": "# Report Runs | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Freporting%2Freport_run)\n\n## [The Report Run object](https://docs.stripe.com/api/reporting/report_run/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Parameters of this report run.\n    \n*   The ID of the [report type](https://docs.stripe.com/reports/report-types) to run, such as `\"balance.summary.1\"`.\n    \n*   The file object representing the result of the report run (populated when `status=succeeded`).\n    \n*   Status of this report run. This will be `pending` when the run is initially created. When the run finishes, this will be set to `succeeded` and the `result` field will be populated. Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.\n    \n\n### More attributes\n\n*   #### \n    \n    succeeded\\_atnullable timestamp\n    \n\n```\n{  \"id\": \"frr_1MrQwrLkdIwHu7ixUov4x2b3\",  \"object\": \"reporting.report_run\",  \"created\": 1680203749,  \"error\": null,  \"livemode\": false,  \"parameters\": {    \"interval_end\": 1680100000,    \"interval_start\": 1680000000  },  \"report_type\": \"balance.summary.1\",  \"result\": null,  \"status\": \"pending\",  \"succeeded_at\": null}\n```\n\n## [Create a Report Run](https://docs.stripe.com/api/reporting/report_run/create)\n\nCreates a new object and begin running the report. (Certain report types require a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).)\n\n### Parameters\n\n*   #### \n    \n    report\\_typestringRequired\n    \n    The ID of the [report type](https://docs.stripe.com/reporting/statements/api#report-types) to run, such as `\"balance.summary.1\"`.\n    \n*   Parameters specifying how the report should be run. Different Report Types have different required and optional parameters, listed in the [API Access to Reports](https://docs.stripe.com/reporting/statements/api) documentation.\n    \n\n### Returns\n\nReturns the new `ReportRun` object.\n\nPOST /v1/reporting/report\\_runs\n\n```\ncurl https://api.stripe.com/v1/reporting/report_runs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d report_type=\"balance.summary.1\" \\  -d \"parameters[interval_start]\"=1680000000 \\  -d \"parameters[interval_end]\"=1680100000\n```\n\n```\n{  \"id\": \"frr_1MrQwrLkdIwHu7ixUov4x2b3\",  \"object\": \"reporting.report_run\",  \"created\": 1680203749,  \"error\": null,  \"livemode\": false,  \"parameters\": {    \"interval_end\": 1680100000,    \"interval_start\": 1680000000  },  \"report_type\": \"balance.summary.1\",  \"result\": null,  \"status\": \"pending\",  \"succeeded_at\": null}\n```\n\n## [Retrieve a Report Run](https://docs.stripe.com/api/reporting/report_run/retrieve)\n\nRetrieves the details of an existing Report Run.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the specified `ReportRun` object if found, and raises [an error](#errors) otherwise.\n\nGET /v1/reporting/report\\_runs/:id\n\n```\ncurl https://api.stripe.com/v1/reporting/report_runs/frr_1MrQwrLkdIwHu7ixUov4x2b3 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"frr_1MrQwrLkdIwHu7ixUov4x2b3\",  \"object\": \"reporting.report_run\",  \"created\": 1680203749,  \"error\": null,  \"livemode\": false,  \"parameters\": {    \"interval_end\": 1680100000,    \"interval_start\": 1680000000  },  \"report_type\": \"balance.summary.1\",  \"result\": null,  \"status\": \"pending\",  \"succeeded_at\": null}\n```\n\n## [List all Report Runs](https://docs.stripe.com/api/reporting/report_run/list)\n\nReturns a list of Report Runs, with the most recent appearing first.\n\n### Parameters\n\n*   Only return Report Runs that were created during the given date interval.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Report Runs, starting after the argument `starting_after` if it is provided. Each entry in the array is a separate `ReportRun` object. If no more Report Runs are available, the resulting array will be empty.\n\nGET /v1/reporting/report\\_runs\n\n```\ncurl -G https://api.stripe.com/v1/reporting/report_runs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/reporting/report_runs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"frr_1MrQwrLkdIwHu7ixUov4x2b3\",      \"object\": \"reporting.report_run\",      \"created\": 1680203749,      \"error\": null,      \"livemode\": false,      \"parameters\": {        \"interval_end\": 1680100000,        \"interval_start\": 1680000000      },      \"report_type\": \"balance.summary.1\",      \"result\": null,      \"status\": \"pending\",      \"succeeded_at\": null    }    {...}    {...}  ],}\n```",
  "title": "Report Runs | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/sigma/scheduled_queries/list",
  "markdown": "# List all scheduled query runs\n\nReturns a list of scheduled query runs.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA paginated list of all scheduled query runs.\n\nGET /v1/sigma/scheduled\\_query\\_runs\n\n```\ncurl -G https://api.stripe.com/v1/sigma/scheduled_query_runs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/sigma/scheduled_query_runs\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/sigma/scheduled_query_runs\",      \"has_more\": false,      \"data\": [        {          \"id\": \"sqr_1NpIuH2eZvKYlo2CP72f3rLR\",          \"object\": \"scheduled_query_run\",          \"created\": 1694472517,          \"data_load_time\": 1694217600,          \"file\": {            \"id\": \"file_1BE4yZ2eZvKYlo2C9MeXgqcB\",            \"object\": \"file\",            \"created\": 1508284799,            \"expires_at\": null,            \"filename\": \"path\",            \"links\": {              \"object\": \"list\",              \"data\": [],              \"has_more\": false,              \"url\": \"/v1/file_links?file=file_1BE4yZ2eZvKYlo2C9MeXgqcB\"            },            \"purpose\": \"sigma_scheduled_query\",            \"size\": 500,            \"title\": null,            \"type\": \"csv\",            \"url\": \"https://files.stripe.com/v1/files/file_1BE4yZ2eZvKYlo2C9MeXgqcB/contents\"          },          \"livemode\": false,          \"result_available_until\": 1726012800,          \"sql\": \"SELECT count(*) from charges\",          \"status\": \"completed\",          \"title\": \"Count all charges\"        }      ]    }    {...}    {...}  ],}\n```\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all scheduled query runs | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reporting/statements/api",
  "markdown": "# Run a report from the API\n\n## Access Stripe's financial reports programmatically to automate your reconciliation workflow.\n\n#### Note\n\nYou can now automatically send your Stripe data and reports to Snowflake or Amazon Redshift in a few clicks with Stripe Data Pipeline. [Learn more](https://stripe.com/data-pipeline).\n\nThe [financial reports](https://dashboard.stripe.com/reports) in the Dashboard provide downloadable reports in CSV format for a variety of accounting and reconciliation tasks. These reports are also available through the API, so you can schedule them to run automatically or run them whenever you need to receive the associated report files for accounting purposes.\n\n## Report types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEach financial report in the Dashboard provides several different CSV downloads. All of the available downloads for the following reports are also available from the API:\n\n*   [Balance](https://docs.stripe.com/reports/report-types/balance)\n*   [Payout reconciliation](https://docs.stripe.com/reports/report-types/payout-reconciliation)\n*   [Tax](https://docs.stripe.com/reports/report-types/tax)\n*   [Connect platforms](https://docs.stripe.com/reports/report-types/connect)\n\n#### CSV and API monetary formats differ\n\nThe CSV reports format monetary amounts in _major_ currency units as a decimal number. For example, The CSV formats 10 USD as dollars-and-cents (`10.00`). This differs from the Stripe API, where you specify amounts in the currency’s _minor_ unit (US cents) as an integer. In the API, you format 10 USD as cents (`1000`).\n\n### Run parameters![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach report has both required and optional parameters you provide when creating a report run. Consider the following when running reports:\n\n*   Nearly every report type requires providing the run parameters `interval_start` (inclusive) and `interval_end` (exclusive) as Unix timestamps.\n*   Each corresponding report type resource has `data_available_start` and `data_available_end` fields. The API returns an invalid request error (status code `400`) if your run doesn’t meet the following contraints:\n    *   The `interval_start` and `interval_end` values must be between `data_available_start` and `data_available_end` (inclusive).\n    *   The `interval_start` value must be _before_ (and not equal to) `interval_end`.\n*   You can only download a report in a time zone for a `ReportType` with a `timezone` parameter. To do so, create a `ReportRun` object and supply the desired TZ database time zone name. The `timezone` parameter is optional and defaults to UTC if not supplied. See [IANA Time Zone Database](https://www.iana.org/time-zones) for a list of valid timezone values.\n*   The optional parameters `currency` and `report_category` filter results to just those rows matching the provided values.\n*   Reports return a default set of columns, but most report types allow you to customize the selection and ordering of columns in the output by including the optional `columns` parameter with a list of column names.\n\n## Data availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe prepares data for your reports on a semi-daily basis. [Report options](https://docs.stripe.com/reports/options#data-availability) provides details on expected processing time and data availability for each report.\n\nTo programmatically determine the time range of data available for a given report type, [retrieve](https://docs.stripe.com/api#retrieve_reporting_report_type) the `ReportType` object of interest. For example, the **Balance summary** report has the ID `balance.summary.1`, so you can retrieve the object as follows:\n\n`curl https://api.stripe.com/v1/reporting/report_types/balance.summary.1 \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\nIn the example response below, the fields `data_available_start` and `data_available_end` reflect the full range of valid times for this report type. However, you’ll most often be running reports for a smaller interval within that range:\n\n`{   \"id\": \"balance.summary.1\",   \"name\": \"Balance summary\",   \"version\": \"1\",   \"object\": \"reporting.report_type\",   \"data_available_start\": 1519862400,   \"data_available_end\": 1517356800,   \"updated\": 1517382720, }`\n\nTimestamps, such as `date_available_start`, are measured in seconds since the Unix epoch. For example, `1519862400` represents the timestamp, `2018-03-01 00:00`.\n\n### New data notifications ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAs soon as a report type has new data available, Stripe publishes a `reporting.report_type.updated` event with the updated `ReportType` object. To access these events, you must have a [webhook configured](https://docs.stripe.com/webhooks#register-webhook) that explicitly selects to receive `reporting.report_type.updated` events; webhooks that listen for ‘all events’ won’t receive them. After you receive such an event, you can then run the report. For details, see the [recommended integration pattern](#integration-pattern).\n\n## Creating and accessing report runs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe `ReportRun` API object represents an instance of a `ReportType` generated with specific parameters. Review the documentation for the [report type](#report-types) for the list of required and optional parameters for that type. For example, you can [create](https://docs.stripe.com/api/reporting/report_run/create) a **Balance change from activity summary** report for April 2020 as follows:\n\n`curl https://api.stripe.com/v1/reporting/report_runs \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"report_type\"=\"balance_change_from_activity.itemized.3\" \\   -d \"parameters[interval_start]\"=1577865600 \\   -d \"parameters[interval_end]\"=1580544000 \\   -d \"parameters[timezone]\"=\"America/Los_Angeles\" \\   -d \"parameters[columns][]\"=\"created\" \\   -d \"parameters[columns][]\"=\"reporting_category\" \\   -d \"parameters[columns][]\"=\"net\"  # Timestamps are for 2020-01-01 00:00 PST and 2020-02-01 00:00 PST. # The columns parameter is optional. A default set of columns will be provided if you don't specify a value. # Note that a live-mode API key is required.`\n\nWhen first created, the object appears with `status=\"pending\"`:\n\n`{   \"id\": \"frr_123\",   \"object\": \"reporting.report_run\",   \"livemode\": true,   \"report_type\": \"balance_change_from_activity.itemized.3\",   \"parameters\": {     \"columns\": [ \"created\", \"reporting_category\", \"net\" ],     \"interval_start\": 1577865600,     \"interval_end\": 1580544000,     \"timezone\": \"America/Los_Angeles\"   },   \"created\": 1580832900,   \"status\": \"pending\",   \"result\": null }`\n\nWhen the run completes, Stripe updates the object, and it has a `status` of `succeeded`. It also has a nested `result` object, containing a URL that you can use to access the file with your API key. For example, if you were to [retrieve](https://docs.stripe.com/api/reporting/report_run/retrieve) the above report run after it completes, the response would be:\n\n`{   \"id\": \"frr_123\",   \"object\": \"reporting.report_run\",   \"livemode\": true,   \"report_type\": \"balance_change_from_activity.itemized.3\",   \"parameters\": {     \"columns\": [ \"created\", \"reporting_category\", \"net\" ],     \"interval_start\": 1577865600,     \"interval_end\": 1580544000,     \"timezone\": \"America/Los_Angeles\"   },   \"created\": 1580832900,   \"status\": \"succeeded\",   \"succeeded_at\": 1580832960,   \"result\": {     \"id\": \"file_xs8vrJzC\",     \"object\": \"file\",     \"url\": \"[https://files.stripe.com/v1/files/file_xs8vrJzC/contents](https://files.stripe.com/v1/files/file_xs8vrJzC/contents)\",     \"created\": 1580832960,     \"purpose\": \"report_run\",     \"size\": 53075,     \"type\": \"csv\"   } }`\n\nTo retrieve the file contents, use your API key to access the file specified by `result.url`:\n\n`curl https://files.stripe.com/v1/files/file_xs8vrJzC/contents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\n#### Notification of report run completion![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMost runs complete within a few minutes. However, some runs could take longer—depending on the size of your total data set, and on the time range your report covers.\n\nWhen a requested report run completes, Stripe sends one of two webhooks:\n\n*   A `reporting.report_run.succeeded` webhook will be sent if the run completes successfully.\n*   A `reporting.report_run.failed` webhook will be sent if the run fails. (This should be rare, but we recommend that integrations be prepared to handle this case in the same manner as catching a `500` response.)\n\nIn both cases, the webhook payload includes the updated `ReportRun` object, which includes status `succeeded` or `failed`, respectively.\n\n## Recommended integration pattern for automated reporting ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConfigure a webhook that explicitly selects to receive `reporting.report_type.updated` events; webhooks that listen for ‘all events’ won’t receive them.\n\n1.  A `reporting.report_type.updated` webhook is sent as soon as a new day’s data is available for a given report type. The payload includes the updated `ReportType` object. You’ll typically receive 20-30 webhooks each day, two for each report type. (Different users are eligible for different reports.)\n2.  Upon receiving the `reporting.report_type.updated` webhook for the desired report type and range of data availability, [create a report run](https://docs.stripe.com/api/reporting/report_run/create). The response contains a new `ReportRun` object, initialized with `status=pending`.\n3.  When the run completes, a `reporting.report_run.succeeded` webhook is sent. This webhook includes the nested field `result.url`. (As mentioned above, in the rare case of a failure, we’ll send a `reporting.report_run.failed` event instead.)\n4.  Access the file contents at `result.url`, using your API key.",
  "title": "Run a report from the API | Stripe Documentation",
  "description": "Access Stripe's financial reports programmatically to automate your reconciliation workflow.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/reporting/report_run/retrieve",
  "markdown": "# Retrieve a Report Run | Stripe API Reference\n\nRetrieves the details of an existing Report Run.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the specified `ReportRun` object if found, and raises [an error](#errors) otherwise.\n\nGET /v1/reporting/report\\_runs/:id\n\n```\ncurl https://api.stripe.com/v1/reporting/report_runs/frr_1MrQwrLkdIwHu7ixUov4x2b3 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"frr_1MrQwrLkdIwHu7ixUov4x2b3\",  \"object\": \"reporting.report_run\",  \"created\": 1680203749,  \"error\": null,  \"livemode\": false,  \"parameters\": {    \"interval_end\": 1680100000,    \"interval_start\": 1680000000  },  \"report_type\": \"balance.summary.1\",  \"result\": null,  \"status\": \"pending\",  \"succeeded_at\": null}\n```\n\n## [List all Report Runs](https://docs.stripe.com/api/reporting/report_run/list)\n\nReturns a list of Report Runs, with the most recent appearing first.\n\n### Parameters\n\n*   Only return Report Runs that were created during the given date interval.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Report Runs, starting after the argument `starting_after` if it is provided. Each entry in the array is a separate `ReportRun` object. If no more Report Runs are available, the resulting array will be empty.\n\nGET /v1/reporting/report\\_runs\n\n```\ncurl -G https://api.stripe.com/v1/reporting/report_runs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/reporting/report_runs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"frr_1MrQwrLkdIwHu7ixUov4x2b3\",      \"object\": \"reporting.report_run\",      \"created\": 1680203749,      \"error\": null,      \"livemode\": false,      \"parameters\": {        \"interval_end\": 1680100000,        \"interval_start\": 1680000000      },      \"report_type\": \"balance.summary.1\",      \"result\": null,      \"status\": \"pending\",      \"succeeded_at\": null    }    {...}    {...}  ],}\n```\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a Report Run | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/reporting/report_type",
  "markdown": "# Report Types | Stripe API Reference\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [The Report Type object](https://docs.stripe.com/api/reporting/report_type/object)\n\n### Attributes\n\n*   #### \n    \n    data\\_available\\_endtimestamp\n    \n    Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    data\\_available\\_starttimestamp\n    \n    Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.\n    \n*   Human-readable name of the Report Type\n    \n\n### More attributes\n\n*   #### \n    \n    default\\_columnsnullable array of strings\n    \n\n```\n{  \"id\": \"balance.summary.1\",  \"object\": \"reporting.report_type\",  \"data_available_end\": 1695081600,  \"data_available_start\": 1667952000,  \"default_columns\": [    \"category\",    \"description\",    \"net_amount\",    \"currency\"  ],  \"livemode\": false,  \"name\": \"Balance summary\",  \"updated\": 1695109133,  \"version\": 1}\n```\n\n## [Retrieve a Report Type](https://docs.stripe.com/api/reporting/report_type/retrieve)\n\nRetrieves the details of a Report Type. (Certain report types require a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).)\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the specified `ReportType` object if found, and raises [an error](#errors) otherwise.\n\nGET /v1/reporting/report\\_types/:id\n\n```\ncurl https://api.stripe.com/v1/reporting/report_types/balance.summary.1 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"balance.summary.1\",  \"object\": \"reporting.report_type\",  \"data_available_end\": 1695081600,  \"data_available_start\": 1667952000,  \"default_columns\": [    \"category\",    \"description\",    \"net_amount\",    \"currency\"  ],  \"livemode\": false,  \"name\": \"Balance summary\",  \"updated\": 1695109133,  \"version\": 1}\n```\n\n## [List all Report Types](https://docs.stripe.com/api/reporting/report_type/list)\n\nReturns a full list of Report Types.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA dictionary with a `data` property that contains an array of Report Types. Each entry is a separate `ReportType` object.\n\nGET /v1/reporting/report\\_types\n\n```\ncurl https://api.stripe.com/v1/reporting/report_types \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/reporting/report_types\",  \"has_more\": false,  \"data\": [    {      \"id\": \"balance.summary.1\",      \"object\": \"reporting.report_type\",      \"data_available_end\": 1695081600,      \"data_available_start\": 1667952000,      \"default_columns\": [        \"category\",        \"description\",        \"net_amount\",        \"currency\"      ],      \"livemode\": false,      \"name\": \"Balance summary\",      \"updated\": 1695109133,      \"version\": 1    }    {...}    {...}  ],}\n```\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Report Types | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/reporting/report_type/retrieve",
  "markdown": "# Retrieve a Report Type | Stripe API Reference\n\nRetrieves the details of a Report Type. (Certain report types require a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).)\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the specified `ReportType` object if found, and raises [an error](#errors) otherwise.\n\nGET /v1/reporting/report\\_types/:id\n\n```\ncurl https://api.stripe.com/v1/reporting/report_types/balance.summary.1 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"balance.summary.1\",  \"object\": \"reporting.report_type\",  \"data_available_end\": 1695081600,  \"data_available_start\": 1667952000,  \"default_columns\": [    \"category\",    \"description\",    \"net_amount\",    \"currency\"  ],  \"livemode\": false,  \"name\": \"Balance summary\",  \"updated\": 1695109133,  \"version\": 1}\n```\n\n## [List all Report Types](https://docs.stripe.com/api/reporting/report_type/list)\n\nReturns a full list of Report Types.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA dictionary with a `data` property that contains an array of Report Types. Each entry is a separate `ReportType` object.\n\nGET /v1/reporting/report\\_types\n\n```\ncurl https://api.stripe.com/v1/reporting/report_types \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/reporting/report_types\",  \"has_more\": false,  \"data\": [    {      \"id\": \"balance.summary.1\",      \"object\": \"reporting.report_type\",      \"data_available_end\": 1695081600,      \"data_available_start\": 1667952000,      \"default_columns\": [        \"category\",        \"description\",        \"net_amount\",        \"currency\"      ],      \"livemode\": false,      \"name\": \"Balance summary\",      \"updated\": 1695109133,      \"version\": 1    }    {...}    {...}  ],}\n```\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a Report Type | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/reporting/report_type/list",
  "markdown": "# List all Report Types | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Freporting%2Freport_type%2Flist)\n\nReturns a full list of Report Types.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA dictionary with a `data` property that contains an array of Report Types. Each entry is a separate `ReportType` object.\n\nGET /v1/reporting/report\\_types\n\n```\ncurl https://api.stripe.com/v1/reporting/report_types \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/reporting/report_types\",  \"has_more\": false,  \"data\": [    {      \"id\": \"balance.summary.1\",      \"object\": \"reporting.report_type\",      \"data_available_end\": 1695081600,      \"data_available_start\": 1667952000,      \"default_columns\": [        \"category\",        \"description\",        \"net_amount\",        \"currency\"      ],      \"livemode\": false,      \"name\": \"Balance summary\",      \"updated\": 1695109133,      \"version\": 1    }    {...}    {...}  ],}\n```\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all Report Types | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/financial_connections/accounts",
  "markdown": "# Accounts | Stripe API Reference\n\n## [The Account object](https://docs.stripe.com/api/financial_connections/accounts/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    account\\_holdernullable object\n    \n    The account holder that this account belongs to.\n    \n*   The most recent information about the account’s balance.\n    \n*   #### \n    \n    balance\\_refreshnullable object\n    \n    The state of the most recent attempt to refresh the account balance.\n    \n*   The type of the account. Account category is further divided in `subcategory`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `cash`<br><br>The account represents real funds held by the institution (e.g. a checking or savings account). |\n    | `credit`<br><br>The account represents credit extended by the institution (e.g. a credit card or mortgage). |\n    | `investment`<br><br>The account represents investments, or any account where there are funds of unknown liquidity. |\n    | `other`<br><br>The account does not fall under the other categories. |\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    display\\_namenullable string\n    \n    A human-readable name that has been assigned to this account, either by the account holder or by the institution.\n    \n*   The name of the institution that holds this account.\n    \n*   The last 4 digits of the account number. If present, this will be 4 numeric characters.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    ownershipnullable stringExpandable\n    \n    The most recent information about the account’s owners.\n    \n*   #### \n    \n    ownership\\_refreshnullable object\n    \n    The state of the most recent attempt to refresh the account owners.\n    \n*   #### \n    \n    permissionsnullable array of enums\n    \n    The list of permissions granted by this account.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balances`<br><br>Allows accessing balance data from the account. |\n    | `ownership`<br><br>Allows accessing ownership data from the account. |\n    | `payment_method`<br><br>Allows the creation of a payment method from the account. |\n    | `transactions`<br><br>Allows accessing transactions data from the account. |\n    \n*   The status of the link to the account.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Stripe is able to retrieve data from the Account without issues. |\n    | `disconnected`<br><br>Account connection has been terminated. |\n    | `inactive`<br><br>Stripe cannot retrieve data from the Account. |\n    \n*   If `category` is `cash`, one of:\n    \n    *   `checking`\n    *   `savings`\n    *   `other`\n    \n    If `category` is `credit`, one of:\n    \n    *   `mortgage`\n    *   `line_of_credit`\n    *   `credit_card`\n    *   `other`\n    \n    If `category` is `investment` or `other`, this will be `other`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `checking`<br><br>The account is a checking account. |\n    | `credit_card`<br><br>The account represents a credit card. |\n    | `line_of_credit`<br><br>The account represents a line of credit. |\n    | `mortgage`<br><br>The account represents a mortgage. |\n    | `other`<br><br>The account does not fall under any of the other subcategories. |\n    | `savings`<br><br>The account is a savings account. |\n    \n*   #### \n    \n    subscriptionsnullable array of enums\n    \n    The list of data refresh subscriptions requested on this account.\n    \n    Possible enum values\n    \n    `transactions`\n    \n    Subscribes to periodic transactions data refreshes from the account.\n    \n*   #### \n    \n    supported\\_payment\\_method\\_typesarray of enums\n    \n    The [PaymentMethod type](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type)(s) that can be created from this account.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `link`<br><br>A `link` PaymentMethod can be created. |\n    | `us_bank_account`<br><br>A `us_bank_account` PaymentMethod can be created. |\n    \n*   #### \n    \n    transaction\\_refreshnullable object\n    \n    The state of the most recent attempt to refresh the account transactions.\n    \n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"active\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```\n\n## [Retrieve an Account](https://docs.stripe.com/api/financial_connections/accounts/retrieve)\n\nRetrieves the details of an Financial Connections `Account`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nGET /v1/financial\\_connections/accounts/:id\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1MwVK82eZvKYlo2Cjw8FMxXf \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"active\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```\n\n## [List Accounts](https://docs.stripe.com/api/financial_connections/accounts/list)\n\nReturns a list of Financial Connections `Account` objects.\n\n### Parameters\n\n*   If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive.\n    \n*   If present, only return accounts that were collected as part of the given session.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` `Account` objects, starting after account `starting_after`. Each entry in the array is a separate `Account` object. If no more accounts are available, the resulting array will be empty. This request will raise an error if more than one of `account_holder[account]`, `account_holder[customer]`, or `session` is specified.\n\nGET /v1/financial\\_connections/accounts\n\n```\ncurl -G https://api.stripe.com/v1/financial_connections/accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/financial_connections/accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",      \"object\": \"linked_account\",      \"account_holder\": {        \"customer\": \"cus_9s6XI9OFIdpjIg\",        \"type\": \"customer\"      },      \"balance\": null,      \"balance_refresh\": null,      \"category\": \"cash\",      \"created\": 1681412208,      \"display_name\": \"Sample Checking Account\",      \"institution_name\": \"StripeBank\",      \"last4\": \"6789\",      \"livemode\": false,      \"ownership\": null,      \"ownership_refresh\": null,      \"permissions\": [],      \"status\": \"active\",      \"subcategory\": \"checking\",      \"subscriptions\": [],      \"supported_payment_method_types\": [        \"us_bank_account\"      ],      \"transaction_refresh\": null    }    {...}    {...}  ],}\n```\n\n## [Disconnect an Account](https://docs.stripe.com/api/financial_connections/accounts/disconnect)\n\nDisables your access to a Financial Connections `Account`. You will no longer be able to access data associated with the account (e.g. balances, transactions).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/disconnect\n\n```\ncurl -X POST https://api.stripe.com/v1/financial_connections/accounts/fca_1MwVK82eZvKYlo2Cjw8FMxXf/disconnect \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"disconnected\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```",
  "title": "Accounts | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/financial_connections/accounts/retrieve",
  "markdown": "# Retrieve an Account | Stripe API Reference\n\nRetrieves the details of an Financial Connections `Account`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nGET /v1/financial\\_connections/accounts/:id\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1MwVK82eZvKYlo2Cjw8FMxXf \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"active\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```\n\n## [List Accounts](https://docs.stripe.com/api/financial_connections/accounts/list)\n\nReturns a list of Financial Connections `Account` objects.\n\n### Parameters\n\n*   If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive.\n    \n*   If present, only return accounts that were collected as part of the given session.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` `Account` objects, starting after account `starting_after`. Each entry in the array is a separate `Account` object. If no more accounts are available, the resulting array will be empty. This request will raise an error if more than one of `account_holder[account]`, `account_holder[customer]`, or `session` is specified.\n\nGET /v1/financial\\_connections/accounts\n\n```\ncurl -G https://api.stripe.com/v1/financial_connections/accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/financial_connections/accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",      \"object\": \"linked_account\",      \"account_holder\": {        \"customer\": \"cus_9s6XI9OFIdpjIg\",        \"type\": \"customer\"      },      \"balance\": null,      \"balance_refresh\": null,      \"category\": \"cash\",      \"created\": 1681412208,      \"display_name\": \"Sample Checking Account\",      \"institution_name\": \"StripeBank\",      \"last4\": \"6789\",      \"livemode\": false,      \"ownership\": null,      \"ownership_refresh\": null,      \"permissions\": [],      \"status\": \"active\",      \"subcategory\": \"checking\",      \"subscriptions\": [],      \"supported_payment_method_types\": [        \"us_bank_account\"      ],      \"transaction_refresh\": null    }    {...}    {...}  ],}\n```\n\n## [Disconnect an Account](https://docs.stripe.com/api/financial_connections/accounts/disconnect)\n\nDisables your access to a Financial Connections `Account`. You will no longer be able to access data associated with the account (e.g. balances, transactions).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/disconnect\n\n```\ncurl -X POST https://api.stripe.com/v1/financial_connections/accounts/fca_1MwVK82eZvKYlo2Cjw8FMxXf/disconnect \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"disconnected\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```\n\n## [Refresh Account data](https://docs.stripe.com/api/financial_connections/accounts/refresh)\n\nRefreshes the data associated with a Financial Connections `Account`.\n\n### Parameters\n\n*   #### \n    \n    featuresarray of enumsRequired\n    \n    The list of account features that you would like to refresh.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balance`<br><br>Balance data from the account |\n    | `ownership`<br><br>Ownership data from the account |\n    | `transactions`<br><br>Transactions data from the account |\n    \n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided and if you have sufficient permissions to that account. Raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/refresh\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1MwVK82eZvKYlo2Cjw8FMxXf/refresh \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"features[]\"=balance\n```\n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": {    \"status\": \"pending\",    \"last_attempted_at\": 1681422295  },  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"pending\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```\n\n## [Subscribe to data refreshes for an Account](https://docs.stripe.com/api/financial_connections/accounts/subscribe)\n\nSubscribes to periodic refreshes of data associated with a Financial Connections `Account`.\n\n### Parameters\n\n*   #### \n    \n    featuresarray of enumsRequired\n    \n    The list of account features to which you would like to subscribe.\n    \n    Possible enum values\n    \n    `transactions`\n    \n    Transactions data from the account\n    \n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided and if you have sufficient permissions to that account. Raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/subscribe\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1NQay62eZvKYlo2C8dflHjWB/subscribe \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"features[]\"=transactions\n```\n\n```\n{  \"id\": \"fca_1NQay62eZvKYlo2C8dflHjWB\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XKzkNRiz8i3\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1688583746,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"active\",  \"subcategory\": \"checking\",  \"subscriptions\": [    \"transactions\"  ],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": {    \"id\": \"fctxnref_OD10iHSd7eaheDkeabbQfnJ7\",    \"status\": \"pending\",    \"last_attempted_at\": 1625337296  }}\n```",
  "title": "Retrieve an Account | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/entitlements/active-entitlement/list",
  "markdown": "# List all active entitlements | Stripe API Reference\n\nRetrieve a list of active entitlements for a customer\n\n### Parameters\n\n*   The ID of the customer.\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of active entitlements for a customer\n\nGET /v1/entitlements/active\\_entitlements\n\n```\ncurl -G https://api.stripe.com/v1/entitlements/active_entitlements \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_9s6XKzkNRiz8i3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/entitlements/active_entitlements\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ent_test_61QG5x2cU1GluFTYs41JqiESbLiX8C8O\",      \"object\": \"entitlements.active_entitlement\",      \"feature\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",      \"lookup_key\": \"seats-feature\",      \"livemode\": false    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all active entitlements | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/financial_connections/accounts/list",
  "markdown": "# List Accounts | Stripe API Reference\n\nReturns a list of Financial Connections `Account` objects.\n\n### Parameters\n\n*   If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive.\n    \n*   If present, only return accounts that were collected as part of the given session.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` `Account` objects, starting after account `starting_after`. Each entry in the array is a separate `Account` object. If no more accounts are available, the resulting array will be empty. This request will raise an error if more than one of `account_holder[account]`, `account_holder[customer]`, or `session` is specified.\n\nGET /v1/financial\\_connections/accounts\n\n```\ncurl -G https://api.stripe.com/v1/financial_connections/accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/financial_connections/accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",      \"object\": \"linked_account\",      \"account_holder\": {        \"customer\": \"cus_9s6XI9OFIdpjIg\",        \"type\": \"customer\"      },      \"balance\": null,      \"balance_refresh\": null,      \"category\": \"cash\",      \"created\": 1681412208,      \"display_name\": \"Sample Checking Account\",      \"institution_name\": \"StripeBank\",      \"last4\": \"6789\",      \"livemode\": false,      \"ownership\": null,      \"ownership_refresh\": null,      \"permissions\": [],      \"status\": \"active\",      \"subcategory\": \"checking\",      \"subscriptions\": [],      \"supported_payment_method_types\": [        \"us_bank_account\"      ],      \"transaction_refresh\": null    }    {...}    {...}  ],}\n```\n\n## [Disconnect an Account](https://docs.stripe.com/api/financial_connections/accounts/disconnect)\n\nDisables your access to a Financial Connections `Account`. You will no longer be able to access data associated with the account (e.g. balances, transactions).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/disconnect\n\n```\ncurl -X POST https://api.stripe.com/v1/financial_connections/accounts/fca_1MwVK82eZvKYlo2Cjw8FMxXf/disconnect \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"disconnected\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```\n\n## [Refresh Account data](https://docs.stripe.com/api/financial_connections/accounts/refresh)\n\nRefreshes the data associated with a Financial Connections `Account`.\n\n### Parameters\n\n*   #### \n    \n    featuresarray of enumsRequired\n    \n    The list of account features that you would like to refresh.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balance`<br><br>Balance data from the account |\n    | `ownership`<br><br>Ownership data from the account |\n    | `transactions`<br><br>Transactions data from the account |\n    \n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided and if you have sufficient permissions to that account. Raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/refresh\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1MwVK82eZvKYlo2Cjw8FMxXf/refresh \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"features[]\"=balance\n```\n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": {    \"status\": \"pending\",    \"last_attempted_at\": 1681422295  },  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"pending\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```\n\n## [Subscribe to data refreshes for an Account](https://docs.stripe.com/api/financial_connections/accounts/subscribe)\n\nSubscribes to periodic refreshes of data associated with a Financial Connections `Account`.\n\n### Parameters\n\n*   #### \n    \n    featuresarray of enumsRequired\n    \n    The list of account features to which you would like to subscribe.\n    \n    Possible enum values\n    \n    `transactions`\n    \n    Transactions data from the account\n    \n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided and if you have sufficient permissions to that account. Raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/subscribe\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1NQay62eZvKYlo2C8dflHjWB/subscribe \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"features[]\"=transactions\n```\n\n```\n{  \"id\": \"fca_1NQay62eZvKYlo2C8dflHjWB\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XKzkNRiz8i3\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1688583746,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"active\",  \"subcategory\": \"checking\",  \"subscriptions\": [    \"transactions\"  ],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": {    \"id\": \"fctxnref_OD10iHSd7eaheDkeabbQfnJ7\",    \"status\": \"pending\",    \"last_attempted_at\": 1625337296  }}\n```\n\n## [Unsubscribe from data refreshes for an Account](https://docs.stripe.com/api/financial_connections/accounts/unsubscribe)\n\nUnsubscribes from periodic refreshes of data associated with a Financial Connections `Account`.\n\n### Parameters\n\n*   #### \n    \n    featuresarray of enumsRequired\n    \n    The list of account features from which you would like to unsubscribe.\n    \n    Possible enum values\n    \n    `transactions`\n    \n    Transactions data from the account\n    \n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided and if you have sufficient permissions to that account. Raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/unsubscribe\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1NQayH2eZvKYlo2CMBkU6Y9s/unsubscribe \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"features[]\"=transactions\n```\n\n```\n{  \"id\": \"fca_1NQayH2eZvKYlo2CMBkU6Y9s\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XKzkNRiz8i3\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1688583757,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"active\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": {    \"id\": \"fctxnref_OD10EqMBikeOrWm7JW44fdpo\",    \"status\": \"succeeded\",    \"last_attempted_at\": 1625337296  }}\n```",
  "title": "List Accounts | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/financial_connections/accounts/disconnect",
  "markdown": "# Disconnect an Account | Stripe API Reference\n\nDisables your access to a Financial Connections `Account`. You will no longer be able to access data associated with the account (e.g. balances, transactions).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/disconnect\n\n```\ncurl -X POST https://api.stripe.com/v1/financial_connections/accounts/fca_1MwVK82eZvKYlo2Cjw8FMxXf/disconnect \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"disconnected\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```\n\n## [Refresh Account data](https://docs.stripe.com/api/financial_connections/accounts/refresh)\n\nRefreshes the data associated with a Financial Connections `Account`.\n\n### Parameters\n\n*   #### \n    \n    featuresarray of enumsRequired\n    \n    The list of account features that you would like to refresh.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balance`<br><br>Balance data from the account |\n    | `ownership`<br><br>Ownership data from the account |\n    | `transactions`<br><br>Transactions data from the account |\n    \n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided and if you have sufficient permissions to that account. Raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/refresh\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1MwVK82eZvKYlo2Cjw8FMxXf/refresh \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"features[]\"=balance\n```\n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": {    \"status\": \"pending\",    \"last_attempted_at\": 1681422295  },  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"pending\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```\n\n## [Subscribe to data refreshes for an Account](https://docs.stripe.com/api/financial_connections/accounts/subscribe)\n\nSubscribes to periodic refreshes of data associated with a Financial Connections `Account`.\n\n### Parameters\n\n*   #### \n    \n    featuresarray of enumsRequired\n    \n    The list of account features to which you would like to subscribe.\n    \n    Possible enum values\n    \n    `transactions`\n    \n    Transactions data from the account\n    \n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided and if you have sufficient permissions to that account. Raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/subscribe\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1NQay62eZvKYlo2C8dflHjWB/subscribe \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"features[]\"=transactions\n```\n\n```\n{  \"id\": \"fca_1NQay62eZvKYlo2C8dflHjWB\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XKzkNRiz8i3\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1688583746,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"active\",  \"subcategory\": \"checking\",  \"subscriptions\": [    \"transactions\"  ],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": {    \"id\": \"fctxnref_OD10iHSd7eaheDkeabbQfnJ7\",    \"status\": \"pending\",    \"last_attempted_at\": 1625337296  }}\n```\n\n## [Unsubscribe from data refreshes for an Account](https://docs.stripe.com/api/financial_connections/accounts/unsubscribe)\n\nUnsubscribes from periodic refreshes of data associated with a Financial Connections `Account`.\n\n### Parameters\n\n*   #### \n    \n    featuresarray of enumsRequired\n    \n    The list of account features from which you would like to unsubscribe.\n    \n    Possible enum values\n    \n    `transactions`\n    \n    Transactions data from the account\n    \n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided and if you have sufficient permissions to that account. Raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/unsubscribe\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1NQayH2eZvKYlo2CMBkU6Y9s/unsubscribe \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"features[]\"=transactions\n```\n\n```\n{  \"id\": \"fca_1NQayH2eZvKYlo2CMBkU6Y9s\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XKzkNRiz8i3\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1688583757,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"active\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": {    \"id\": \"fctxnref_OD10EqMBikeOrWm7JW44fdpo\",    \"status\": \"succeeded\",    \"last_attempted_at\": 1625337296  }}\n```\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Disconnect an Account | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/financial_connections/accounts/subscribe",
  "markdown": "# Subscribe to data refreshes for an Account\n\nSubscribes to periodic refreshes of data associated with a Financial Connections `Account`.\n\n### Parameters\n\n*   #### \n    \n    featuresarray of enumsRequired\n    \n    The list of account features to which you would like to subscribe.\n    \n    Possible enum values\n    \n    `transactions`\n    \n    Transactions data from the account\n    \n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided and if you have sufficient permissions to that account. Raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/subscribe\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1NQay62eZvKYlo2C8dflHjWB/subscribe \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"features[]\"=transactions\n```\n\n```\n{  \"id\": \"fca_1NQay62eZvKYlo2C8dflHjWB\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XKzkNRiz8i3\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1688583746,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"active\",  \"subcategory\": \"checking\",  \"subscriptions\": [    \"transactions\"  ],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": {    \"id\": \"fctxnref_OD10iHSd7eaheDkeabbQfnJ7\",    \"status\": \"pending\",    \"last_attempted_at\": 1625337296  }}\n```\n\n## [Unsubscribe from data refreshes for an Account](https://docs.stripe.com/api/financial_connections/accounts/unsubscribe)\n\nUnsubscribes from periodic refreshes of data associated with a Financial Connections `Account`.\n\n### Parameters\n\n*   #### \n    \n    featuresarray of enumsRequired\n    \n    The list of account features from which you would like to unsubscribe.\n    \n    Possible enum values\n    \n    `transactions`\n    \n    Transactions data from the account\n    \n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided and if you have sufficient permissions to that account. Raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/unsubscribe\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1NQayH2eZvKYlo2CMBkU6Y9s/unsubscribe \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"features[]\"=transactions\n```\n\n```\n{  \"id\": \"fca_1NQayH2eZvKYlo2CMBkU6Y9s\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XKzkNRiz8i3\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1688583757,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"active\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": {    \"id\": \"fctxnref_OD10EqMBikeOrWm7JW44fdpo\",    \"status\": \"succeeded\",    \"last_attempted_at\": 1625337296  }}\n```\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Subscribe to data refreshes for an Account | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/financial_connections/ownership",
  "markdown": "# Account Owner | Stripe API Reference\n\nDescribes an owner of an account.\n\n## [The Account Owner object](https://docs.stripe.com/api/financial_connections/ownership/owner-object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   The email address of the owner.\n    \n*   The full name of the owner.\n    \n*   The ownership object that this owner belongs to.\n    \n*   The raw phone number of the owner.\n    \n*   #### \n    \n    raw\\_addressnullable string\n    \n    The raw physical address of the owner.\n    \n*   #### \n    \n    refreshed\\_atnullable timestamp\n    \n    The timestamp of the refresh that updated this owner.\n    \n\n```\n{  \"id\": \"fcaown_1NtI9uBHO5VeT9SUKLJU5suZ\",  \"object\": \"financial_connections.account_owner\",  \"email\": \"nobody+janesmith@stripe.com\",  \"name\": \"Jane Smith\",  \"ownership\": \"fcaowns_1NtI9uBHO5VeT9SUSRe21lqt\",  \"phone\": \"+1 555-555-5555\",  \"raw_address\": \"123 Main Street, Everytown USA\",  \"refreshed_at\": null}\n```\n\n## [The Account Ownership object](https://docs.stripe.com/api/financial_connections/ownership/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   A paginated list of owners for this account.\n    \n\nThe Account Ownership object\n\n```\n{  \"id\": \"fcaowns_1MwVKR2eZvKYlo2CGV7Mmt6s\",  \"object\": \"linked_account_ownership\",  \"created\": 1681412227,  \"owners\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"url\": \"/v1/linked_accounts/fca_1MwVKR2eZvKYlo2CoMV2L3PV/owners?ownership=fcaowns_1MwVKR2eZvKYlo2CGV7Mmt6s\"  }}\n```\n\n## [List Account Owners](https://docs.stripe.com/api/financial_connections/ownership/list)\n\nLists all owners for a given `Account`\n\n### Parameters\n\n*   The ID of the ownership object to fetch owners from.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` owners for a given account, starting after owner `starting_after`. Each entry in the array is a separate owner object. If no more owners are available, the resulting array will be empty.\n\nGET /v1/financial\\_connections/accounts/:id/owners\n\n```\ncurl -G https://api.stripe.com/v1/financial_connections/accounts/fca_1NoEbE2eZvKYlo2CmmnAn2A1/owners \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d ownership=fcaowns_1NoEbE2eZvKYlo2C4Xj7vilA\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/financial_connections/accounts/fca_1NoEbE2eZvKYlo2CmmnAn2A1/owners\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/financial_connections/accounts/fca_1NoDzC2eZvKYlo2CwXpqO27d/owners\",      \"has_more\": false,      \"data\": [        {          \"id\": \"fcaown_1NoDzC2eZvKYlo2C1TlEZ0K2\",          \"object\": \"linked_account_owner\",          \"email\": \"nobody+janesmith@stripe.com\",          \"name\": \"Jane Smith\",          \"ownership\": \"fcaowns_1NoDzC2eZvKYlo2CAm1EDKTk\",          \"phone\": \"+1 555-555-5555\",          \"raw_address\": \"123 Main Street, Everytown USA\",          \"refreshed_at\": null        }      ]    }    {...}    {...}  ],}\n```\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Account Owner | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/financial_connections/accounts/unsubscribe",
  "markdown": "# Unsubscribe from data refreshes for an Account\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ffinancial_connections%2Faccounts%2Funsubscribe)\n\nUnsubscribes from periodic refreshes of data associated with a Financial Connections `Account`.\n\n### Parameters\n\n*   #### \n    \n    featuresarray of enumsRequired\n    \n    The list of account features from which you would like to unsubscribe.\n    \n    Possible enum values\n    \n    `transactions`\n    \n    Transactions data from the account\n    \n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided and if you have sufficient permissions to that account. Raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/unsubscribe\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1NQayH2eZvKYlo2CMBkU6Y9s/unsubscribe \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"features[]\"=transactions\n```\n\n```\n{  \"id\": \"fca_1NQayH2eZvKYlo2CMBkU6Y9s\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XKzkNRiz8i3\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1688583757,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"active\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": {    \"id\": \"fctxnref_OD10EqMBikeOrWm7JW44fdpo\",    \"status\": \"succeeded\",    \"last_attempted_at\": 1625337296  }}\n```\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Unsubscribe from data refreshes for an Account | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/financial_connections/accounts/refresh",
  "markdown": "# Refresh Account data | Stripe API Reference\n\nRefreshes the data associated with a Financial Connections `Account`.\n\n### Parameters\n\n*   #### \n    \n    featuresarray of enumsRequired\n    \n    The list of account features that you would like to refresh.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balance`<br><br>Balance data from the account |\n    | `ownership`<br><br>Ownership data from the account |\n    | `transactions`<br><br>Transactions data from the account |\n    \n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided and if you have sufficient permissions to that account. Raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/refresh\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1MwVK82eZvKYlo2Cjw8FMxXf/refresh \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"features[]\"=balance\n```\n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": {    \"status\": \"pending\",    \"last_attempted_at\": 1681422295  },  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"pending\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```\n\n## [Subscribe to data refreshes for an Account](https://docs.stripe.com/api/financial_connections/accounts/subscribe)\n\nSubscribes to periodic refreshes of data associated with a Financial Connections `Account`.\n\n### Parameters\n\n*   #### \n    \n    featuresarray of enumsRequired\n    \n    The list of account features to which you would like to subscribe.\n    \n    Possible enum values\n    \n    `transactions`\n    \n    Transactions data from the account\n    \n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided and if you have sufficient permissions to that account. Raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/subscribe\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1NQay62eZvKYlo2C8dflHjWB/subscribe \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"features[]\"=transactions\n```\n\n```\n{  \"id\": \"fca_1NQay62eZvKYlo2C8dflHjWB\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XKzkNRiz8i3\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1688583746,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"active\",  \"subcategory\": \"checking\",  \"subscriptions\": [    \"transactions\"  ],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": {    \"id\": \"fctxnref_OD10iHSd7eaheDkeabbQfnJ7\",    \"status\": \"pending\",    \"last_attempted_at\": 1625337296  }}\n```\n\n## [Unsubscribe from data refreshes for an Account](https://docs.stripe.com/api/financial_connections/accounts/unsubscribe)\n\nUnsubscribes from periodic refreshes of data associated with a Financial Connections `Account`.\n\n### Parameters\n\n*   #### \n    \n    featuresarray of enumsRequired\n    \n    The list of account features from which you would like to unsubscribe.\n    \n    Possible enum values\n    \n    `transactions`\n    \n    Transactions data from the account\n    \n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided and if you have sufficient permissions to that account. Raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/unsubscribe\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1NQayH2eZvKYlo2CMBkU6Y9s/unsubscribe \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"features[]\"=transactions\n```\n\n```\n{  \"id\": \"fca_1NQayH2eZvKYlo2CMBkU6Y9s\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XKzkNRiz8i3\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1688583757,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"active\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": {    \"id\": \"fctxnref_OD10EqMBikeOrWm7JW44fdpo\",    \"status\": \"succeeded\",    \"last_attempted_at\": 1625337296  }}\n```\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Refresh Account data | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/financial_connections/ownership/list",
  "markdown": "# List Account Owners | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ffinancial_connections%2Fownership%2Flist)\n\nLists all owners for a given `Account`\n\n### Parameters\n\n*   The ID of the ownership object to fetch owners from.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` owners for a given account, starting after owner `starting_after`. Each entry in the array is a separate owner object. If no more owners are available, the resulting array will be empty.\n\nGET /v1/financial\\_connections/accounts/:id/owners\n\n```\ncurl -G https://api.stripe.com/v1/financial_connections/accounts/fca_1NoEbE2eZvKYlo2CmmnAn2A1/owners \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d ownership=fcaowns_1NoEbE2eZvKYlo2C4Xj7vilA\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/financial_connections/accounts/fca_1NoEbE2eZvKYlo2CmmnAn2A1/owners\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/financial_connections/accounts/fca_1NoDzC2eZvKYlo2CwXpqO27d/owners\",      \"has_more\": false,      \"data\": [        {          \"id\": \"fcaown_1NoDzC2eZvKYlo2C1TlEZ0K2\",          \"object\": \"linked_account_owner\",          \"email\": \"nobody+janesmith@stripe.com\",          \"name\": \"Jane Smith\",          \"ownership\": \"fcaowns_1NoDzC2eZvKYlo2CAm1EDKTk\",          \"phone\": \"+1 555-555-5555\",          \"raw_address\": \"123 Main Street, Everytown USA\",          \"refreshed_at\": null        }      ]    }    {...}    {...}  ],}\n```\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List Account Owners | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/financial_connections/sessions/retrieve",
  "markdown": "# Retrieve a Session | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ffinancial_connections%2Fsessions%2Fretrieve)\n\nRetrieves the details of a Financial Connections `Session`\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Session` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nGET /v1/financial\\_connections/sessions/:id\n\n```\ncurl https://api.stripe.com/v1/financial_connections/sessions/fcsess_1MwtnGLkdIwHu7ixs7NPQ7dq \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fcsess_1MwtnGLkdIwHu7ixs7NPQ7dq\",  \"object\": \"financial_connections.session\",  \"account_holder\": {    \"customer\": \"cus_NiKSWdaFz2F6I0\",    \"type\": \"customer\"  },  \"accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/financial_connections/accounts\"  },  \"client_secret\": \"fcsess_client_secret_KRJTKvCY3IKoYTrW18EazcO3\",  \"filters\": {    \"countries\": [      \"US\"    ]  },  \"livemode\": false,  \"permissions\": [    \"balances\",    \"payment_method\"  ]}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a Session | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/financial_connections/sessions/create",
  "markdown": "# Create a Session | Stripe API Reference\n\nTo launch the Financial Connections authorization flow, create a `Session`. The session’s `client_secret` can be used to launch the flow using Stripe.js.\n\n### Parameters\n\n*   #### \n    \n    account\\_holderobjectRequired\n    \n    The account holder to link accounts for.\n    \n*   #### \n    \n    permissionsarray of stringsRequired\n    \n    List of data features that you would like to request access to.\n    \n    Possible values are `balances`, `transactions`, `ownership`, and `payment_method`.\n    \n*   Filters to restrict the kinds of accounts to collect.\n    \n*   List of data features that you would like to retrieve upon account creation.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balances`<br><br>Requests to prefetch balance data on accounts collected in this session. |\n    | `ownership`<br><br>Requests to prefetch ownership data on accounts collected in this session. |\n    | `transactions`<br><br>Requests to prefetch transaction data on accounts collected in this session. |\n    \n*   For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.\n    \n\n### Returns\n\nReturns the `Session` object.\n\nPOST /v1/financial\\_connections/sessions\n\n```\ncurl https://api.stripe.com/v1/financial_connections/sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"account_holder[type]\"=customer \\  -d \"account_holder[customer]\"=cus_NiKSWdaFz2F6I0 \\  -d \"permissions[]\"=payment_method \\  -d \"permissions[]\"=balances \\  -d \"filters[countries][]\"=US\n```\n\n```\n{  \"id\": \"fcsess_1MwtnGLkdIwHu7ixs7NPQ7dq\",  \"object\": \"financial_connections.session\",  \"account_holder\": {    \"customer\": \"cus_NiKSWdaFz2F6I0\",    \"type\": \"customer\"  },  \"accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/financial_connections/accounts\"  },  \"client_secret\": \"fcsess_client_secret_KRJTKvCY3IKoYTrW18EazcO3\",  \"filters\": {    \"countries\": [      \"US\"    ]  },  \"livemode\": false,  \"permissions\": [    \"balances\",    \"payment_method\"  ]}\n```\n\n## [Retrieve a Session](https://docs.stripe.com/api/financial_connections/sessions/retrieve)\n\nRetrieves the details of a Financial Connections `Session`\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Session` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nGET /v1/financial\\_connections/sessions/:id\n\n```\ncurl https://api.stripe.com/v1/financial_connections/sessions/fcsess_1MwtnGLkdIwHu7ixs7NPQ7dq \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fcsess_1MwtnGLkdIwHu7ixs7NPQ7dq\",  \"object\": \"financial_connections.session\",  \"account_holder\": {    \"customer\": \"cus_NiKSWdaFz2F6I0\",    \"type\": \"customer\"  },  \"accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/financial_connections/accounts\"  },  \"client_secret\": \"fcsess_client_secret_KRJTKvCY3IKoYTrW18EazcO3\",  \"filters\": {    \"countries\": [      \"US\"    ]  },  \"livemode\": false,  \"permissions\": [    \"balances\",    \"payment_method\"  ]}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create a Session | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/financial_connections/sessions",
  "markdown": "# Session | Stripe API Reference\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [The Session object](https://docs.stripe.com/api/financial_connections/sessions/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    account\\_holdernullable object\n    \n    The account holder for whom accounts are collected in this session.\n    \n*   The accounts that were collected as part of this Session.\n    \n*   A value that will be passed to the client to launch the authentication flow.\n    \n*   Filters applied to this session that restrict the kinds of accounts to collect.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    permissionsarray of enums\n    \n    Permissions requested for accounts collected during this session.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balances`<br><br>Requests access for balance data on accounts collected in this session. |\n    | `ownership`<br><br>Requests access for ownership data on accounts collected in this session. |\n    | `payment_method`<br><br>Requests permission for the creation of a payment method from an account collected in this session. |\n    | `transactions`<br><br>Requests access for transaction data on accounts collected in this session. |\n    \n*   #### \n    \n    prefetchnullable array of enums\n    \n    Data features requested to be retrieved upon account creation.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balances`<br><br>Requests to prefetch balance data on accounts collected in this session. |\n    | `ownership`<br><br>Requests to prefetch ownership data on accounts collected in this session. |\n    | `transactions`<br><br>Requests to prefetch transaction data on accounts collected in this session. |\n    \n*   #### \n    \n    return\\_urlnullable string\n    \n    For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.\n    \n\n```\n{  \"id\": \"fcsess_1MwtnGLkdIwHu7ixs7NPQ7dq\",  \"object\": \"financial_connections.session\",  \"account_holder\": {    \"customer\": \"cus_NiKSWdaFz2F6I0\",    \"type\": \"customer\"  },  \"accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/financial_connections/accounts\"  },  \"client_secret\": \"fcsess_client_secret_KRJTKvCY3IKoYTrW18EazcO3\",  \"filters\": {    \"countries\": [      \"US\"    ]  },  \"livemode\": false,  \"permissions\": [    \"balances\",    \"payment_method\"  ]}\n```\n\n## [Create a Session](https://docs.stripe.com/api/financial_connections/sessions/create)\n\nTo launch the Financial Connections authorization flow, create a `Session`. The session’s `client_secret` can be used to launch the flow using Stripe.js.\n\n### Parameters\n\n*   #### \n    \n    account\\_holderobjectRequired\n    \n    The account holder to link accounts for.\n    \n*   #### \n    \n    permissionsarray of stringsRequired\n    \n    List of data features that you would like to request access to.\n    \n    Possible values are `balances`, `transactions`, `ownership`, and `payment_method`.\n    \n*   Filters to restrict the kinds of accounts to collect.\n    \n*   List of data features that you would like to retrieve upon account creation.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balances`<br><br>Requests to prefetch balance data on accounts collected in this session. |\n    | `ownership`<br><br>Requests to prefetch ownership data on accounts collected in this session. |\n    | `transactions`<br><br>Requests to prefetch transaction data on accounts collected in this session. |\n    \n*   For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.\n    \n\n### Returns\n\nReturns the `Session` object.\n\nPOST /v1/financial\\_connections/sessions\n\n```\ncurl https://api.stripe.com/v1/financial_connections/sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"account_holder[type]\"=customer \\  -d \"account_holder[customer]\"=cus_NiKSWdaFz2F6I0 \\  -d \"permissions[]\"=payment_method \\  -d \"permissions[]\"=balances \\  -d \"filters[countries][]\"=US\n```\n\n```\n{  \"id\": \"fcsess_1MwtnGLkdIwHu7ixs7NPQ7dq\",  \"object\": \"financial_connections.session\",  \"account_holder\": {    \"customer\": \"cus_NiKSWdaFz2F6I0\",    \"type\": \"customer\"  },  \"accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/financial_connections/accounts\"  },  \"client_secret\": \"fcsess_client_secret_KRJTKvCY3IKoYTrW18EazcO3\",  \"filters\": {    \"countries\": [      \"US\"    ]  },  \"livemode\": false,  \"permissions\": [    \"balances\",    \"payment_method\"  ]}\n```\n\n## [Retrieve a Session](https://docs.stripe.com/api/financial_connections/sessions/retrieve)\n\nRetrieves the details of a Financial Connections `Session`\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Session` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nGET /v1/financial\\_connections/sessions/:id\n\n```\ncurl https://api.stripe.com/v1/financial_connections/sessions/fcsess_1MwtnGLkdIwHu7ixs7NPQ7dq \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fcsess_1MwtnGLkdIwHu7ixs7NPQ7dq\",  \"object\": \"financial_connections.session\",  \"account_holder\": {    \"customer\": \"cus_NiKSWdaFz2F6I0\",    \"type\": \"customer\"  },  \"accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/financial_connections/accounts\"  },  \"client_secret\": \"fcsess_client_secret_KRJTKvCY3IKoYTrW18EazcO3\",  \"filters\": {    \"countries\": [      \"US\"    ]  },  \"livemode\": false,  \"permissions\": [    \"balances\",    \"payment_method\"  ]}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Session | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/financial_connections/transactions",
  "markdown": "# Transactions | Stripe API Reference\n\n## [The Transaction object](https://docs.stripe.com/api/financial_connections/transactions/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   The ID of the Financial Connections Account this transaction belongs to.\n    \n*   The amount of this transaction, in cents.\n    \n\n*   The description of this transaction.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The status of the transaction.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `pending`<br><br>This transaction is processing and does not yet affect the account’s balance. |\n    | `posted`<br><br>This transaction has processed and affects the account’s balance. |\n    | `void`<br><br>This transaction has disappeared and no longer affects the account’s balance. |\n    \n*   The timestamps at which the transaction status was updated.\n    \n*   Time at which the transaction was transacted. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    transaction\\_refreshstring\n    \n    The token of the transaction refresh that last updated or created this transaction.\n    \n*   Time at which the object was last updated. Measured in seconds since the Unix epoch.\n    \n\n```\n{  \"id\": \"fctxn_1MwVKd2eZvKYlo2ChNw2UxSa\",  \"object\": \"financial_connections.transaction\",  \"account\": \"fca_1MwVKd2eZvKYlo2CnlgoF3I4\",  \"amount\": 300,  \"currency\": \"usd\",  \"description\": \"Rocket Rides\",  \"livemode\": false,  \"status\": \"posted\",  \"status_transitions\": {    \"posted_at\": 1681412239,    \"void_at\": null  },  \"transacted_at\": 1681412239,  \"transaction_refresh\": \"fctxnref_NhvAgiKSFDg9jOe6eIlj41X5\",  \"updated\": 1681412239}\n```\n\n## [Retrieve a Transaction](https://docs.stripe.com/api/financial-connections/transaction/retrieve)\n\nRetrieves the details of a Financial Connections `Transaction`\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Transaction` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nGET /v1/financial\\_connections/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/financial_connections/transactions/fctxn_1MwVKd2eZvKYlo2ChNw2UxSa \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fctxn_1MwVKd2eZvKYlo2ChNw2UxSa\",  \"object\": \"financial_connections.transaction\",  \"account\": \"fca_1MwVKd2eZvKYlo2CnlgoF3I4\",  \"amount\": 300,  \"currency\": \"usd\",  \"description\": \"Rocket Rides\",  \"livemode\": false,  \"status\": \"posted\",  \"status_transitions\": {    \"posted_at\": 1681412239,    \"void_at\": null  },  \"transacted_at\": 1681412239,  \"transaction_refresh\": \"fctxnref_NhvAgiKSFDg9jOe6eIlj41X5\",  \"updated\": 1681412239}\n```\n\n## [List Transactions](https://docs.stripe.com/api/financial_connections/transactions/list)\n\nReturns a list of Financial Connections `Transaction` objects.\n\n### Parameters\n\n*   The ID of the Stripe account whose transactions will be retrieved.\n    \n*   A filter on the list based on the object `transacted_at` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:\n    \n*   #### \n    \n    transaction\\_refreshobject\n    \n    A filter on the list based on the object `transaction_refresh` field. The value can be a dictionary with the following options:\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` `Transaction` objects, starting after transaction `starting_after`. Each entry in the array is a separate `Transaction` object. If no more transactions are available, the resulting array will be empty.\n\nGET /v1/financial\\_connections/transactions\n\n```\ncurl -G https://api.stripe.com/v1/financial_connections/transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d account=fca_1NpHiT2eZvKYlo2C6pRwOFjr \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/financial_connections/transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fctxn_1NpHiT2eZvKYlo2CZFvnM3HJ\",      \"object\": \"financial_connections.transaction\",      \"account\": \"fca_1NpHiT2eZvKYlo2C6pRwOFjr\",      \"amount\": 300,      \"currency\": \"usd\",      \"description\": \"Rocket Rides\",      \"livemode\": false,      \"status\": \"posted\",      \"status_transitions\": {        \"posted_at\": 1694467941,        \"void_at\": null      },      \"transacted_at\": 1694467941,      \"transaction_refresh\": \"fctxnref_OcWmGrWptAdJ2bmpYE2P0Hws\",      \"updated\": 1694467941    }    {...}    {...}  ],}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Transactions | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/identity/how-sessions-work",
  "markdown": "# How sessions work | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the status and lifecycle of VerificationSessions.\n\nAsynchronous verification flows are complex to manage because they depend on customer interactions that happen outside of your application. [VerificationSessions](https://docs.stripe.com/identity/verification-sessions) simplify this by keeping track of the status of the verification flow.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/d93e2a08ffc6bbfe4683e3f7d0fffe32.svg)\n\nrequires\\_input\n\nWhen the VerificationSession is created, it has a status of `requires_input` and is ready for your user to [begin the verification process](https://docs.stripe.com/identity/verify-identity-documents). We recommend creating the VerificationSession right before the start of the verification flow.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/placeholder-small.39c22a0580484afaeae18a522c157a3c.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/8ccc7708adc370d6365aa5558ee39a62.svg)\n\nprocessing\n\nAs soon as the user submits the session, the VerificationSession moves to `processing`. Most [verification checks](https://docs.stripe.com/identity/verification-checks) are processed in less than 1 minute.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/placeholder-small.39c22a0580484afaeae18a522c157a3c.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/6423ea22ac10bfa6996c6f9db9b0ad1d.svg)\n\nverified\n\nA VerificationSession with a status of `verified` means that the verification flow is complete. Processing of all the verification checks are complete and successfully verified.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/34cbc85e7b2159474edf46422b7762f7.svg)\n\nrequires\\_input\n\nIf any of the verification checks fail (for example, because of a manipulated document), the VerificationSession’s status returns to `requires_input`. You can find an explanation for the verification failure in the `last_error` field of the session. If you want your user to attempt verification again, you need to [Retrieve the VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/retrieve) to get a fresh URL or client secret. Details provided by the `provided_details` field might be shown to your user.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/3eb46c024752a66b38516e0f282b95af.svg)\n\ncanceled\n\nYou may [cancel a VerificationSession](https://docs.stripe.com/identity/verification-sessions#cancel) at any point before it’s `processing` or `verified`. This invalidates the VerificationSession for future submission attempts, and can’t be undone.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/placeholder-big.42eee111685869022a38a939474b3c71.svg)\n\n## Session events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Events](https://docs.stripe.com/api/events) are created every time a session changes status. Here’s a complete list of the VerificationSession [event types](https://docs.stripe.com/api#event_types):\n\n| Event type | Description |\n| --- | --- |\n| `identity.verification_session.created` | The session was [created](https://docs.stripe.com/identity/verification-sessions#create). |\n| `identity.verification_session.processing` | The user has successfully submitted their information, and verification checks have started processing. |\n| `identity.verification_session.verified` | Processing of all the [verification checks](https://docs.stripe.com/identity/verification-checks) have completed, and they’re all successfully verified. |\n| `identity.verification_session.requires_input` | Processing of all the [verification checks](https://docs.stripe.com/identity/verification-checks) have completed, and at least one of the checks failed. |\n| `identity.verification_session.canceled` | The session has been canceled and future submission attempts have been disabled. This event is sent when a session is [canceled](https://docs.stripe.com/identity/verification-sessions#cancel) or [redacted](https://docs.stripe.com/identity/verification-sessions#redact). |\n| `identity.verification_session.redacted` | The session was [redacted](https://docs.stripe.com/identity/verification-sessions#redact). You must create a [webhook endpoint](https://docs.stripe.com/api/webhook_endpoints) which explicitly subscribes to this event type to access it. Webhook endpoints which subscribe to all events will not include this event type. |\n\nYou might want to take action in response to certain events, such as emailing your user when a verification fails or succeeds.\n\nStripe recommends that you listen for events with [webhooks](https://docs.stripe.com/identity/handle-verification-outcomes).",
  "title": "How sessions work | Stripe Documentation",
  "description": "Learn about the status and lifecycle of VerificationSessions.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/financial-connections/transaction/retrieve",
  "markdown": "# Retrieve a Transaction | Stripe API Reference\n\nRetrieves the details of a Financial Connections `Transaction`\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Transaction` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nGET /v1/financial\\_connections/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/financial_connections/transactions/fctxn_1MwVKd2eZvKYlo2ChNw2UxSa \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fctxn_1MwVKd2eZvKYlo2ChNw2UxSa\",  \"object\": \"financial_connections.transaction\",  \"account\": \"fca_1MwVKd2eZvKYlo2CnlgoF3I4\",  \"amount\": 300,  \"currency\": \"usd\",  \"description\": \"Rocket Rides\",  \"livemode\": false,  \"status\": \"posted\",  \"status_transitions\": {    \"posted_at\": 1681412239,    \"void_at\": null  },  \"transacted_at\": 1681412239,  \"transaction_refresh\": \"fctxnref_NhvAgiKSFDg9jOe6eIlj41X5\",  \"updated\": 1681412239}\n```\n\n## [List Transactions](https://docs.stripe.com/api/financial_connections/transactions/list)\n\nReturns a list of Financial Connections `Transaction` objects.\n\n### Parameters\n\n*   The ID of the Stripe account whose transactions will be retrieved.\n    \n*   A filter on the list based on the object `transacted_at` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:\n    \n*   #### \n    \n    transaction\\_refreshobject\n    \n    A filter on the list based on the object `transaction_refresh` field. The value can be a dictionary with the following options:\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` `Transaction` objects, starting after transaction `starting_after`. Each entry in the array is a separate `Transaction` object. If no more transactions are available, the resulting array will be empty.\n\nGET /v1/financial\\_connections/transactions\n\n```\ncurl -G https://api.stripe.com/v1/financial_connections/transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d account=fca_1NpHiT2eZvKYlo2C6pRwOFjr \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/financial_connections/transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fctxn_1NpHiT2eZvKYlo2CZFvnM3HJ\",      \"object\": \"financial_connections.transaction\",      \"account\": \"fca_1NpHiT2eZvKYlo2C6pRwOFjr\",      \"amount\": 300,      \"currency\": \"usd\",      \"description\": \"Rocket Rides\",      \"livemode\": false,      \"status\": \"posted\",      \"status_transitions\": {        \"posted_at\": 1694467941,        \"void_at\": null      },      \"transacted_at\": 1694467941,      \"transaction_refresh\": \"fctxnref_OcWmGrWptAdJ2bmpYE2P0Hws\",      \"updated\": 1694467941    }    {...}    {...}  ],}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a Transaction | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/financial_connections/transactions/list",
  "markdown": "# List Transactions | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ffinancial_connections%2Ftransactions%2Flist)\n\nReturns a list of Financial Connections `Transaction` objects.\n\n### Parameters\n\n*   The ID of the Stripe account whose transactions will be retrieved.\n    \n*   A filter on the list based on the object `transacted_at` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:\n    \n*   #### \n    \n    transaction\\_refreshobject\n    \n    A filter on the list based on the object `transaction_refresh` field. The value can be a dictionary with the following options:\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` `Transaction` objects, starting after transaction `starting_after`. Each entry in the array is a separate `Transaction` object. If no more transactions are available, the resulting array will be empty.\n\nGET /v1/financial\\_connections/transactions\n\n```\ncurl -G https://api.stripe.com/v1/financial_connections/transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d account=fca_1NpHiT2eZvKYlo2C6pRwOFjr \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/financial_connections/transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fctxn_1NpHiT2eZvKYlo2CZFvnM3HJ\",      \"object\": \"financial_connections.transaction\",      \"account\": \"fca_1NpHiT2eZvKYlo2C6pRwOFjr\",      \"amount\": 300,      \"currency\": \"usd\",      \"description\": \"Rocket Rides\",      \"livemode\": false,      \"status\": \"posted\",      \"status_transitions\": {        \"posted_at\": 1694467941,        \"void_at\": null      },      \"transacted_at\": 1694467941,      \"transaction_refresh\": \"fctxnref_OcWmGrWptAdJ2bmpYE2P0Hws\",      \"updated\": 1694467941    }    {...}    {...}  ],}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List Transactions | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax/calculations",
  "markdown": "# Tax Calculations | Stripe API Reference\n\n## [The Tax Calculation object](https://docs.stripe.com/api/tax/calculations/object)\n\n### Attributes\n\n*   Unique identifier for the calculation.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Total after taxes.\n    \n\n*   The customer’s details, such as address and tax IDs.\n    \n*   #### \n    \n    expires\\_atnullable timestamp\n    \n    Timestamp of date at which the tax calculation will expire.\n    \n*   #### \n    \n    line\\_itemsnullable objectExpandable\n    \n    The list of items the customer is purchasing.\n    \n*   #### \n    \n    shipping\\_costnullable object\n    \n    The shipping cost details for the calculation.\n    \n*   #### \n    \n    tax\\_amount\\_exclusiveinteger\n    \n    The amount of tax to be collected on top of the line item prices.\n    \n*   #### \n    \n    tax\\_amount\\_inclusiveinteger\n    \n    The amount of tax already included in the line item prices.\n    \n*   #### \n    \n    tax\\_breakdownarray of objects\n    \n    Breakdown of individual tax amounts that add up to the total.\n    \n\n### More attributes\n\n*   #### \n    \n    ship\\_from\\_detailsnullable object\n    \n\nThe Tax Calculation object\n\n```\n{  \"id\": \"taxcalc_1OduxkBUZ691iUZ4iWvpMApI\",  \"object\": \"tax.calculation\",  \"amount_total\": 1953,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": \"Seattle\",      \"country\": \"US\",      \"line1\": \"9205thAve\",      \"line2\": null,      \"postal_code\": \"98104\",      \"state\": \"WA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"expires_at\": 1706708005,  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_PSqf3RMNZa23H4\",        \"object\": \"tax.calculation_line_item\",        \"amount\": 1499,        \"amount_tax\": 154,        \"livemode\": false,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Music Streaming Coupon\",        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_10000000\"      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/tax/calculations/taxcalc_1OduxkBUZ691iUZ4iWvpMApI/line_items\"  },  \"livemode\": false,  \"ship_from_details\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"tax_amount_exclusive\": 154,  \"tax_amount_inclusive\": 0,  \"tax_breakdown\": [    {      \"amount\": 154,      \"inclusive\": false,      \"tax_rate_details\": {        \"country\": \"US\",        \"percentage_decimal\": \"10.25\",        \"state\": \"WA\",        \"tax_type\": \"sales_tax\"      },      \"taxability_reason\": \"standard_rated\",      \"taxable_amount\": 1499    },    {      \"amount\": 0,      \"inclusive\": false,      \"tax_rate_details\": {        \"country\": \"DE\",        \"percentage_decimal\": \"0.0\",        \"state\": null,        \"tax_type\": \"vat\"      },      \"taxability_reason\": \"zero_rated\",      \"taxable_amount\": 300    }  ],  \"tax_date\": 1706535204}\n```\n\n## [Create a Tax Calculation](https://docs.stripe.com/api/tax/calculations/create)\n\nCalculates tax based on the input and returns a Tax `Calculation` object.\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objectsRequired\n    \n    A list of items the customer is purchasing.\n    \n*   #### \n    \n    customer\\_detailsobjectRequired unless customer provided\n    \n    Details about the customer, including address and tax IDs.\n    \n*   Shipping cost details to be used for the calculation.\n    \n\n### More parameters\n\n*   #### \n    \n    customerstringRequired unless customer\\_details provided\n    \n\n### Returns\n\nA Tax `Calculation` object containing the first 100 input `line_items` if the calculation succeeds. Otherwise, an error (for example, indicating that the customer address was invalid).\n\nPOST /v1/tax/calculations\n\n```\ncurl https://api.stripe.com/v1/tax/calculations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d currency=usd \\  -d \"customer_details[address][line1]\"=\"920 5th Ave\" \\  -d \"customer_details[address][city]\"=Seattle \\  -d \"customer_details[address][state]\"=WA \\  -d \"customer_details[address][postal_code]\"=98104 \\  -d \"customer_details[address][country]\"=US \\  -d \"customer_details[address_source]\"=shipping \\  -d \"line_items[0][amount]\"=1499 \\  -d \"line_items[0][tax_code]\"=txcd_10000000 \\  -d \"line_items[0][reference]\"=\"Music Streaming Coupon\" \\  -d \"shipping_cost[amount]\"=300 \\  -d \"expand[0]\"=line_items\n```\n\n```\n{  \"id\": \"taxcalc_1OduxkBUZ691iUZ4iWvpMApI\",  \"object\": \"tax.calculation\",  \"amount_total\": 1953,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": \"Seattle\",      \"country\": \"US\",      \"line1\": \"9205thAve\",      \"line2\": null,      \"postal_code\": \"98104\",      \"state\": \"WA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"expires_at\": 1706708005,  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_PSqf3RMNZa23H4\",        \"object\": \"tax.calculation_line_item\",        \"amount\": 1499,        \"amount_tax\": 154,        \"livemode\": false,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Music Streaming Coupon\",        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_10000000\"      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/tax/calculations/taxcalc_1OduxkBUZ691iUZ4iWvpMApI/line_items\"  },  \"livemode\": false,  \"ship_from_details\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"tax_amount_exclusive\": 154,  \"tax_amount_inclusive\": 0,  \"tax_breakdown\": [    {      \"amount\": 154,      \"inclusive\": false,      \"tax_rate_details\": {        \"country\": \"US\",        \"percentage_decimal\": \"10.25\",        \"state\": \"WA\",        \"tax_type\": \"sales_tax\"      },      \"taxability_reason\": \"standard_rated\",      \"taxable_amount\": 1499    },    {      \"amount\": 0,      \"inclusive\": false,      \"tax_rate_details\": {        \"country\": \"DE\",        \"percentage_decimal\": \"0.0\",        \"state\": null,        \"tax_type\": \"vat\"      },      \"taxability_reason\": \"zero_rated\",      \"taxable_amount\": 300    }  ],  \"tax_date\": 1706535204}\n```\n\n## [Retrieve a calculation's line items](https://docs.stripe.com/api/tax/calculations/line_items)\n\nRetrieves the line items of a tax calculation as a collection, if the calculation hasn’t expired.\n\n### Parameters\n\n*   A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.\n    \n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.\n    \n\n### Returns\n\nA list of Line Item objects if the Tax calculation is found. Otherwise returns a ‘not found’ error.\n\nGET /v1/tax/calculations/:id/line\\_items\n\n```\ncurl -G https://api.stripe.com/v1/tax/calculations/taxcalc_1NpJD42eZvKYlo2CUti522cz/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax/calculations/taxcalc_1NpJD42eZvKYlo2CUti522cz/line_items\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/tax/calculations/taxcalc_1NpJD42eZvKYlo2CUti522cz/line_items\",      \"has_more\": false,      \"data\": [        {          \"id\": \"tax_li_OcYJb5mQOSSSWD\",          \"object\": \"tax.calculation_line_item\",          \"amount\": 1499,          \"amount_tax\": 148,          \"livemode\": false,          \"product\": null,          \"quantity\": 1,          \"reference\": \"Pepperoni Pizza\",          \"tax_behavior\": \"exclusive\",          \"tax_code\": \"txcd_40060003\"        }      ]    }    {...}    {...}  ],}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Tax Calculations | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/identity/verification_sessions/create",
  "markdown": "# Create a VerificationSession | Stripe API Reference\n\nCreates a VerificationSession object.\n\nAfter the VerificationSession is created, display a verification modal using the session `client_secret` or send your users to the session’s `url`.\n\nIf your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.\n\nRelated guide: [Verify your users’ identity documents](https://docs.stripe.com/identity/verify-identity-documents)\n\n### Parameters\n\n*   #### \n    \n    client\\_reference\\_idstring\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A set of options for the session’s verification checks.\n    \n*   Details provided about the user being verified. These details may be shown to the user.\n    \n*   The URL that the user will be redirected to upon completing the verification flow.\n    \n*   The type of [verification check](https://docs.stripe.com/identity/verification-checks) to be performed. You must provide a `type` if not passing `verification_flow`.\n    \n*   The ID of a Verification Flow from the Dashboard. See https://docs.stripe.com/identity/verification-flows.\n    \n\n### Returns\n\nReturns the created VerificationSession object\n\nPOST /v1/identity/verification\\_sessions\n\n```\ncurl https://api.stripe.com/v1/identity/verification_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=document\n```\n\n```\n{  \"id\": \"vs_1NuN4zLkdIwHu7ixleE6HvkI\",  \"object\": \"identity.verification_session\",  \"client_secret\": \"...\",  \"created\": 1695680197,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {},  \"redaction\": null,  \"status\": \"requires_input\",  \"type\": \"document\",  \"url\": \"...\"}\n```\n\n## [Update a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/update)\n\nUpdates a VerificationSession object.\n\nWhen the session status is `requires_input`, you can use this method to update the verification check and options.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A set of options for the session’s verification checks.\n    \n*   Details provided about the user being verified. These details may be shown to the user.\n    \n\n### Returns\n\nReturns the updated VerificationSession object\n\nPOST /v1/identity/verification\\_sessions/:id\n\n```\ncurl https://api.stripe.com/v1/identity/verification_sessions/vs_1NuN9WLkdIwHu7ix597AR9uz \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=id_number\n```\n\n```\n{  \"id\": \"vs_1NuN9WLkdIwHu7ix597AR9uz\",  \"object\": \"identity.verification_session\",  \"client_secret\": \"...\",  \"created\": 1695680478,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {},  \"redaction\": null,  \"status\": \"requires_input\",  \"type\": \"id_number\",  \"url\": \"...\"}\n```\n\n## [Retrieve a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/retrieve)\n\nRetrieves the details of a VerificationSession that was previously created.\n\nWhen the session status is `requires_input`, you can use this method to retrieve a valid `client_secret` or `url` to allow re-submission.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a VerificationSession object\n\nGET /v1/identity/verification\\_sessions/:id\n\n```\ncurl https://api.stripe.com/v1/identity/verification_sessions/vs_1NuNAILkdIwHu7ixh7OtGMLw \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vs_1NuNAILkdIwHu7ixh7OtGMLw\",  \"object\": \"identity.verification_session\",  \"client_secret\": \"...\",  \"created\": 1695680526,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": null,  \"status\": \"requires_input\",  \"type\": \"document\",  \"url\": \"...\"}\n```\n\n## [List VerificationSessions](https://docs.stripe.com/api/identity/verification_sessions/list)\n\nReturns a list of VerificationSessions\n\n### Parameters\n\n*   #### \n    \n    client\\_reference\\_idstring\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   Only return VerificationSessions that were created during the given date interval.\n    \n*   Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://docs.stripe.com/identity/how-sessions-work).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The VerificationSession has been invalidated for future submission attempts. |\n    | `processing`<br><br>The session has been submitted and is being processed. Most [verification checks](https://docs.stripe.com/identity/verification-checks) are processed in less than 1 minute. |\n    | `requires_input`<br><br>Requires user input before processing can continue. |\n    | `verified`<br><br>Processing of all the verification checks are complete and successfully verified. |\n    \n\n### More parameters\n\n### Returns\n\nList of VerificationSession objects that match the provided filter criteria.\n\nGET /v1/identity/verification\\_sessions\n\n```\ncurl -G https://api.stripe.com/v1/identity/verification_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/identity/verification_sessions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"vs_1NuNAILkdIwHu7ixh7OtGMLw\",      \"object\": \"identity.verification_session\",      \"client_secret\": \"...\",      \"created\": 1695680526,      \"last_error\": null,      \"last_verification_report\": null,      \"livemode\": false,      \"metadata\": {},      \"options\": {        \"document\": {          \"require_matching_selfie\": true        }      },      \"redaction\": null,      \"status\": \"requires_input\",      \"type\": \"document\",      \"url\": \"...\"    }    {...}    {...}  ],}\n```\n\n## [Cancel a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/cancel)\n\nA VerificationSession object can be canceled when it is in `requires_input` [status](https://docs.stripe.com/identity/how-sessions-work).\n\nOnce canceled, future submission attempts are disabled. This cannot be undone. [Learn more](https://docs.stripe.com/identity/verification-sessions#cancel).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the canceled VerificationSession object\n\nPOST /v1/identity/verification\\_sessions/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/identity/verification_sessions/vs_1NuN3kLkdIwHu7ixk5OvTq3b/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vs_1NuN3kLkdIwHu7ixk5OvTq3b\",  \"object\": \"identity.verification_session\",  \"client_secret\": null,  \"created\": 1695680120,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": null,  \"status\": \"canceled\",  \"type\": \"document\",  \"url\": null}\n```",
  "title": "Create a VerificationSession | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/identity/verification_sessions/update",
  "markdown": "# Update a VerificationSession | Stripe API Reference\n\nUpdates a VerificationSession object.\n\nWhen the session status is `requires_input`, you can use this method to update the verification check and options.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A set of options for the session’s verification checks.\n    \n*   Details provided about the user being verified. These details may be shown to the user.\n    \n\n### Returns\n\nReturns the updated VerificationSession object\n\nPOST /v1/identity/verification\\_sessions/:id\n\n```\ncurl https://api.stripe.com/v1/identity/verification_sessions/vs_1NuN9WLkdIwHu7ix597AR9uz \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=id_number\n```\n\n```\n{  \"id\": \"vs_1NuN9WLkdIwHu7ix597AR9uz\",  \"object\": \"identity.verification_session\",  \"client_secret\": \"...\",  \"created\": 1695680478,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {},  \"redaction\": null,  \"status\": \"requires_input\",  \"type\": \"id_number\",  \"url\": \"...\"}\n```\n\n## [Retrieve a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/retrieve)\n\nRetrieves the details of a VerificationSession that was previously created.\n\nWhen the session status is `requires_input`, you can use this method to retrieve a valid `client_secret` or `url` to allow re-submission.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a VerificationSession object\n\nGET /v1/identity/verification\\_sessions/:id\n\n```\ncurl https://api.stripe.com/v1/identity/verification_sessions/vs_1NuNAILkdIwHu7ixh7OtGMLw \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vs_1NuNAILkdIwHu7ixh7OtGMLw\",  \"object\": \"identity.verification_session\",  \"client_secret\": \"...\",  \"created\": 1695680526,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": null,  \"status\": \"requires_input\",  \"type\": \"document\",  \"url\": \"...\"}\n```\n\n## [List VerificationSessions](https://docs.stripe.com/api/identity/verification_sessions/list)\n\nReturns a list of VerificationSessions\n\n### Parameters\n\n*   #### \n    \n    client\\_reference\\_idstring\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   Only return VerificationSessions that were created during the given date interval.\n    \n*   Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://docs.stripe.com/identity/how-sessions-work).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The VerificationSession has been invalidated for future submission attempts. |\n    | `processing`<br><br>The session has been submitted and is being processed. Most [verification checks](https://docs.stripe.com/identity/verification-checks) are processed in less than 1 minute. |\n    | `requires_input`<br><br>Requires user input before processing can continue. |\n    | `verified`<br><br>Processing of all the verification checks are complete and successfully verified. |\n    \n\n### More parameters\n\n### Returns\n\nList of VerificationSession objects that match the provided filter criteria.\n\nGET /v1/identity/verification\\_sessions\n\n```\ncurl -G https://api.stripe.com/v1/identity/verification_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/identity/verification_sessions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"vs_1NuNAILkdIwHu7ixh7OtGMLw\",      \"object\": \"identity.verification_session\",      \"client_secret\": \"...\",      \"created\": 1695680526,      \"last_error\": null,      \"last_verification_report\": null,      \"livemode\": false,      \"metadata\": {},      \"options\": {        \"document\": {          \"require_matching_selfie\": true        }      },      \"redaction\": null,      \"status\": \"requires_input\",      \"type\": \"document\",      \"url\": \"...\"    }    {...}    {...}  ],}\n```\n\n## [Cancel a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/cancel)\n\nA VerificationSession object can be canceled when it is in `requires_input` [status](https://docs.stripe.com/identity/how-sessions-work).\n\nOnce canceled, future submission attempts are disabled. This cannot be undone. [Learn more](https://docs.stripe.com/identity/verification-sessions#cancel).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the canceled VerificationSession object\n\nPOST /v1/identity/verification\\_sessions/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/identity/verification_sessions/vs_1NuN3kLkdIwHu7ixk5OvTq3b/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vs_1NuN3kLkdIwHu7ixk5OvTq3b\",  \"object\": \"identity.verification_session\",  \"client_secret\": null,  \"created\": 1695680120,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": null,  \"status\": \"canceled\",  \"type\": \"document\",  \"url\": null}\n```\n\n## [Redact a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/redact)\n\nRedact a VerificationSession to remove all collected information from Stripe. This will redact the VerificationSession and all objects related to it, including VerificationReports, Events, request logs, etc.\n\nA VerificationSession object can be redacted when it is in `requires_input` or `verified` [status](https://docs.stripe.com/identity/how-sessions-work). Redacting a VerificationSession in `requires_action` state will automatically cancel it.\n\nThe redaction process may take up to four days. When the redaction process is in progress, the VerificationSession’s `redaction.status` field will be set to `processing`; when the process is finished, it will change to `redacted` and an `identity.verification_session.redacted` event will be emitted.\n\nRedaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the fields that contain personal data will be replaced by the string `[redacted]` or a similar placeholder. The `metadata` field will also be erased. Redacted objects cannot be updated or used for any purpose.\n\n[Learn more](https://docs.stripe.com/identity/verification-sessions#redact).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the redacted VerificationSession object\n\nPOST /v1/identity/verification\\_sessions/:id/redact\n\n```\ncurl -X POST https://api.stripe.com/v1/identity/verification_sessions/vs_1NuN3kLkdIwHu7ixk5OvTq3b/redact \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vs_1NuN3kLkdIwHu7ixk5OvTq3b\",  \"object\": \"identity.verification_session\",  \"client_secret\": null,  \"created\": 1695680120,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": {    \"status\": \"processing\"  },  \"status\": \"canceled\",  \"type\": \"document\",  \"url\": null}\n```",
  "title": "Update a VerificationSession | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax/calculations/line_items",
  "markdown": "# Retrieve a calculation's line items\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftax%2Fcalculations%2Fline_items)\n\nRetrieves the line items of a tax calculation as a collection, if the calculation hasn’t expired.\n\n### Parameters\n\n*   A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.\n    \n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.\n    \n\n### Returns\n\nA list of Line Item objects if the Tax calculation is found. Otherwise returns a ‘not found’ error.\n\nGET /v1/tax/calculations/:id/line\\_items\n\n```\ncurl -G https://api.stripe.com/v1/tax/calculations/taxcalc_1NpJD42eZvKYlo2CUti522cz/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax/calculations/taxcalc_1NpJD42eZvKYlo2CUti522cz/line_items\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/tax/calculations/taxcalc_1NpJD42eZvKYlo2CUti522cz/line_items\",      \"has_more\": false,      \"data\": [        {          \"id\": \"tax_li_OcYJb5mQOSSSWD\",          \"object\": \"tax.calculation_line_item\",          \"amount\": 1499,          \"amount_tax\": 148,          \"livemode\": false,          \"product\": null,          \"quantity\": 1,          \"reference\": \"Pepperoni Pizza\",          \"tax_behavior\": \"exclusive\",          \"tax_code\": \"txcd_40060003\"        }      ]    }    {...}    {...}  ],}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a calculation's line items | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/identity/verification_sessions/retrieve",
  "markdown": "# Retrieve a VerificationSession | Stripe API Reference\n\nRetrieves the details of a VerificationSession that was previously created.\n\nWhen the session status is `requires_input`, you can use this method to retrieve a valid `client_secret` or `url` to allow re-submission.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a VerificationSession object\n\nGET /v1/identity/verification\\_sessions/:id\n\n```\ncurl https://api.stripe.com/v1/identity/verification_sessions/vs_1NuNAILkdIwHu7ixh7OtGMLw \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vs_1NuNAILkdIwHu7ixh7OtGMLw\",  \"object\": \"identity.verification_session\",  \"client_secret\": \"...\",  \"created\": 1695680526,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": null,  \"status\": \"requires_input\",  \"type\": \"document\",  \"url\": \"...\"}\n```\n\n## [List VerificationSessions](https://docs.stripe.com/api/identity/verification_sessions/list)\n\nReturns a list of VerificationSessions\n\n### Parameters\n\n*   #### \n    \n    client\\_reference\\_idstring\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   Only return VerificationSessions that were created during the given date interval.\n    \n*   Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://docs.stripe.com/identity/how-sessions-work).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The VerificationSession has been invalidated for future submission attempts. |\n    | `processing`<br><br>The session has been submitted and is being processed. Most [verification checks](https://docs.stripe.com/identity/verification-checks) are processed in less than 1 minute. |\n    | `requires_input`<br><br>Requires user input before processing can continue. |\n    | `verified`<br><br>Processing of all the verification checks are complete and successfully verified. |\n    \n\n### More parameters\n\n### Returns\n\nList of VerificationSession objects that match the provided filter criteria.\n\nGET /v1/identity/verification\\_sessions\n\n```\ncurl -G https://api.stripe.com/v1/identity/verification_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/identity/verification_sessions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"vs_1NuNAILkdIwHu7ixh7OtGMLw\",      \"object\": \"identity.verification_session\",      \"client_secret\": \"...\",      \"created\": 1695680526,      \"last_error\": null,      \"last_verification_report\": null,      \"livemode\": false,      \"metadata\": {},      \"options\": {        \"document\": {          \"require_matching_selfie\": true        }      },      \"redaction\": null,      \"status\": \"requires_input\",      \"type\": \"document\",      \"url\": \"...\"    }    {...}    {...}  ],}\n```\n\n## [Cancel a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/cancel)\n\nA VerificationSession object can be canceled when it is in `requires_input` [status](https://docs.stripe.com/identity/how-sessions-work).\n\nOnce canceled, future submission attempts are disabled. This cannot be undone. [Learn more](https://docs.stripe.com/identity/verification-sessions#cancel).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the canceled VerificationSession object\n\nPOST /v1/identity/verification\\_sessions/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/identity/verification_sessions/vs_1NuN3kLkdIwHu7ixk5OvTq3b/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vs_1NuN3kLkdIwHu7ixk5OvTq3b\",  \"object\": \"identity.verification_session\",  \"client_secret\": null,  \"created\": 1695680120,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": null,  \"status\": \"canceled\",  \"type\": \"document\",  \"url\": null}\n```\n\n## [Redact a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/redact)\n\nRedact a VerificationSession to remove all collected information from Stripe. This will redact the VerificationSession and all objects related to it, including VerificationReports, Events, request logs, etc.\n\nA VerificationSession object can be redacted when it is in `requires_input` or `verified` [status](https://docs.stripe.com/identity/how-sessions-work). Redacting a VerificationSession in `requires_action` state will automatically cancel it.\n\nThe redaction process may take up to four days. When the redaction process is in progress, the VerificationSession’s `redaction.status` field will be set to `processing`; when the process is finished, it will change to `redacted` and an `identity.verification_session.redacted` event will be emitted.\n\nRedaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the fields that contain personal data will be replaced by the string `[redacted]` or a similar placeholder. The `metadata` field will also be erased. Redacted objects cannot be updated or used for any purpose.\n\n[Learn more](https://docs.stripe.com/identity/verification-sessions#redact).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the redacted VerificationSession object\n\nPOST /v1/identity/verification\\_sessions/:id/redact\n\n```\ncurl -X POST https://api.stripe.com/v1/identity/verification_sessions/vs_1NuN3kLkdIwHu7ixk5OvTq3b/redact \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vs_1NuN3kLkdIwHu7ixk5OvTq3b\",  \"object\": \"identity.verification_session\",  \"client_secret\": null,  \"created\": 1695680120,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": {    \"status\": \"processing\"  },  \"status\": \"canceled\",  \"type\": \"document\",  \"url\": null}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a VerificationSession | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax/transactions/retrieve",
  "markdown": "# Retrieve a transaction | Stripe API Reference\n\nRetrieves a Tax `Transaction` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Tax `Transaction` object.\n\nGET /v1/tax/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/tax_1NaS0I2eZvKYlo2CRuMhUcmz \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tax_1NaS0I2eZvKYlo2CRuMhUcmz\",  \"object\": \"tax.transaction\",  \"created\": 1690932566,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": \"South San Francisco\",      \"country\": \"US\",      \"line1\": \"354 Oyster Point Blvd\",      \"line2\": \"\",      \"postal_code\": \"94080\",      \"state\": \"CA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_ONCP443tgfS8I1\",        \"object\": \"tax.transaction_line_item\",        \"amount\": 1499,        \"amount_tax\": 148,        \"livemode\": false,        \"metadata\": null,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Pepperoni Pizza\",        \"reversal\": null,        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_40060003\",        \"type\": \"transaction\"      }    ],    \"has_more\": false,    \"url\": \"/v1/tax/transactions/tax_1NaS0I2eZvKYlo2CRuMhUcmz/line_items\"  },  \"livemode\": false,  \"metadata\": null,  \"posted_at\": 1690932566,  \"reference\": \"myOrder_123\",  \"reversal\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"ship_from_details\": {    \"address\": {      \"postal_code\": \"75001\",      \"state\": \"TX\",      \"country\": \"US\"    }  },  \"tax_date\": 1690932566,  \"type\": \"transaction\"}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a transaction | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax/transactions/line_items",
  "markdown": "# Retrieve a transaction's line items\n\nRetrieves the line items of a committed standalone transaction as a collection.\n\n### Parameters\n\n*   A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.\n    \n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.\n    \n\n### Returns\n\nA list of Line Item objects if the Tax Transaction is found. Otherwise returns a ‘not found’ error.\n\nGET /v1/tax/transactions/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/tax_1NaTVd2eZvKYlo2CoOX2Nf7P/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tax_1NaTVd2eZvKYlo2CoOX2Nf7P\",  \"object\": \"list\",  \"url\": \"/v1/tax/transactions/tax_1NaTVd2eZvKYlo2CoOX2Nf7P/line_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tax_li_ONDxh8JZw14sP8\",      \"object\": \"tax.transaction_line_item\",      \"amount\": 1499,      \"amount_tax\": 148,      \"livemode\": false,      \"metadata\": null,      \"product\": null,      \"quantity\": 1,      \"reference\": \"Pepperoni Pizza\",      \"reversal\": null,      \"tax_behavior\": \"exclusive\",      \"tax_code\": \"txcd_40060003\",      \"type\": \"transaction\"    }  ]}\n```\n\n## [Retrieve a transaction](https://docs.stripe.com/api/tax/transactions/retrieve)\n\nRetrieves a Tax `Transaction` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Tax `Transaction` object.\n\nGET /v1/tax/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/tax_1NaS0I2eZvKYlo2CRuMhUcmz \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tax_1NaS0I2eZvKYlo2CRuMhUcmz\",  \"object\": \"tax.transaction\",  \"created\": 1690932566,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": \"South San Francisco\",      \"country\": \"US\",      \"line1\": \"354 Oyster Point Blvd\",      \"line2\": \"\",      \"postal_code\": \"94080\",      \"state\": \"CA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_ONCP443tgfS8I1\",        \"object\": \"tax.transaction_line_item\",        \"amount\": 1499,        \"amount_tax\": 148,        \"livemode\": false,        \"metadata\": null,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Pepperoni Pizza\",        \"reversal\": null,        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_40060003\",        \"type\": \"transaction\"      }    ],    \"has_more\": false,    \"url\": \"/v1/tax/transactions/tax_1NaS0I2eZvKYlo2CRuMhUcmz/line_items\"  },  \"livemode\": false,  \"metadata\": null,  \"posted_at\": 1690932566,  \"reference\": \"myOrder_123\",  \"reversal\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"ship_from_details\": {    \"address\": {      \"postal_code\": \"75001\",      \"state\": \"TX\",      \"country\": \"US\"    }  },  \"tax_date\": 1690932566,  \"type\": \"transaction\"}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a transaction's line items | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/crypto/quotes-api",
  "markdown": "# Quotes API | Stripe DocumentationThe Stripe Docs logo\n\n## Quotes APIBeta\n\n## Learn how to use the onramp quotes API.\n\nThe Quotes API allows platforms to fetch estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. You can specify a fixed source or destination amount and also limit the quotes to a subset of destination currencies or networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget. If the quote has expired before the user visits the onramp widget, the user might see a slightly different quote in the onramp widget.\n\n### Get quote![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEndpoint: `GET /v1/crypto/onramp_quotes`\n\n| Parameter name | Type (optional?) default: ? | Details |\n| --- | --- | --- |\n| source\\_currency | String (optional) default: `usd` | The [ISO-4217](https://www.iso.org/iso-4217-currency-codes.html) Currency code. We only support `usd` and `eur` currently. |\n| source\\_amount | String (optional) default: `100.00` | A string representation of the fiat amount that you need to onramp. If `source_amount` is set, `destination_amount` must be null (they’re mutually exclusive because you can only set a fixed amount for one end of the trade). |\n| destination\\_amount | String (optional) default: `null` | A string representation of the amount of `destination_currency` to be purchased. If `destination_amount` is set, `source_amount` must be null. When specifying this field, you must also set a single value for `destination_currencies` and a single value for `destination_networks` (so we know what cryptocurrency to quote). |\n| destination\\_currencies | Array<String> (optional) default: `null`<br><br>*   `['usdc', 'ethereum']` | The list of cryptocurrencies you want to generate quotes for. If left null, we retrieve quotes for all `destination_currencies` that `destination_networks` supports.<br><br>*   Currencies: `btc, eth, sol, matic, usdc``, xlm` |\n| destination\\_networks | Array<String> (optional) default: `null`<br><br>*   `['polygon', 'bitcoin', 'solana', 'ethereum']` | The list of cryptocurrency networks you want to generate quotes for. If left null, we retrieve quotes for `destination_currencies` in all networks.<br><br>*   Networks: `bitcoin, ethereum, solana, polygon``, stellar` |\n\nThe following section shows example requests with a variety of different parameters.\n\n### Example requests![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA basic curl request with parameters specified that fetches all destination currency-network pairs with a default source amount of 100 USD.\n\nRequest:\n\n`curl -G https://api.stripe.com/v1/crypto/onramp_quotes \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\nResponse:\n\n`{   \"id\": \"cd35838481497f403988360cc0ff5ce5c5ce7451ce8938f86d379dff7157d33d\",   \"rate_fetched_at\": 1674265380.6883376,   \"destination_network_quotes\": {     \"ethereum\": [       {         \"id\": \"7eb9ccb7c1bffadf3773ca1f56ba3a352fe4a226328e72142925a80e7242b70c\",         \"destination_currency\": \"eth\",         \"destination_amount\": \"0.060232255577506866\",         \"destination_network\": \"ethereum\",         \"fees\": {           \"network_fee_monetary\": \"1.41\",           \"transaction_fee_monetary\": \"3.03\"         },         \"source_total_amount\": \"104.44\"       },       {         \"id\": \"398de047128b6dff1abbc41519811db68dd8bcb69939b87c4a4621b1740a1c5b\",         \"destination_currency\": \"usdc\",         \"destination_amount\": \"100.00\",         \"destination_network\": \"ethereum\",         \"fees\": {           \"network_fee_monetary\": \"5.63\",           \"transaction_fee_monetary\": \"3.07\"         },         \"source_total_amount\": \"108.70\"       }     ],     ...   },   \"livemode\": true,   \"source_currency\": \"usd\",   \"source_amount\": \"100.00\" }`\n\nFetching all destination currency-network pairs with a source amount of 200 USD\n\nRequest:\n\n`curl -G https://api.stripe.com/v1/crypto/onramp_quotes \\     -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\     -d \"source_amount\"=\"200\"`\n\nResponse:\n\n`{   \"id\": \"2e5818944df6a2325c7e9c1e72d27174b9bedfc8e64ace47c081370a5b982a7b\",   \"rate_fetched_at\": 1674265506.3408287,   \"destination_network_quotes\": {     \"ethereum\": [       {         \"id\": \"d160a80828eabb6b6d4aeafac585eee62d95425c7fb7577866ab04b9a786df00\",         \"destination_currency\": \"eth\",         \"destination_amount\": \"0.253568242640499553\",         \"destination_network\": \"ethereum\",         \"fees\": {           \"network_fee_monetary\": \"1.45\",           \"transaction_fee_monetary\": \"12.71\"         },         \"source_total_amount\": \"214.20\"       },       {         \"id\": \"53f864cb28a42f11e1d9d5aff7e43ac96b056406f74cbf618399c6fa40f3d275\",         \"destination_currency\": \"usdc\",         \"destination_amount\": \"200.00\",         \"destination_network\": \"ethereum\",         \"fees\": {           \"network_fee_monetary\": \"5.80\",           \"transaction_fee_monetary\": \"12.76\"         },         \"source_total_amount\": \"218.56\"       }     ],     ...   },   \"livemode\": true,   \"source_currency\": \"usd\",   \"source_amount\": \"200.00\" }`\n\nFetching quotes for ETH and SOL on the Ethereum and Solana networks (which ends up being ETH on Ethereum and SOL on Solana). When `destination_currencies` and `destination_networks` are specified, each currency-network pair in their cross-product is considered, and returns a quote if the pair is valid. The default value for `destination_currencies` is all currencies and the default value for `destination_networks` is all networks.\n\nRequest:\n\n`curl -G https://api.stripe.com/v1/crypto/onramp_quotes \\       -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\       -d \"source_amount\"=\"200\" \\       -d \"destination_currencies[]\"=\"eth\" \\       -d \"destination_currencies[]\"=\"sol\" \\       -d \"destination_networks[]\"=\"ethereum\" \\       -d \"destination_networks[]\"=\"solana\"`\n\nResponse:\n\n`{   \"id\": \"c9ab6fd14f87290ef94b583f0dd346de8e197321e029776c12b7790cd83fb78c\",   \"rate_fetched_at\": 1674265576.8238478,   \"destination_network_quotes\": {     \"bitcoin\": [],     \"ethereum\": [       {         \"id\": \"97bbd7b9f8bc1a029264cdc28b47b636e989f8bcab96a80a3bded2094131e311\",         \"destination_currency\": \"eth\",         \"destination_amount\": \"0.253433817682353791\",         \"destination_network\": \"ethereum\",         \"fees\": {           \"network_fee_monetary\": \"1.46\",           \"transaction_fee_monetary\": \"12.71\"         },         \"source_total_amount\": \"214.17\"       }     ],     \"polygon\": [],     \"solana\": [       {         \"id\": \"79f00923b96543aa69d140172c7cefd0e73a2ed089d8935e63dcf21028698e23\",         \"destination_currency\": \"sol\",         \"destination_amount\": \"16.767237943\",         \"destination_network\": \"solana\",         \"fees\": {           \"network_fee_monetary\": \"0.01\",           \"transaction_fee_monetary\": \"12.70\"         },         \"source_total_amount\": \"212.71\"       }     ]   },   \"livemode\": true,   \"source_currency\": \"usd\",   \"source_amount\": \"200.00\" }`\n\nFetching quotes for USDC on Ethereum and Solana.\n\nRequest:\n\n`curl -G https://api.stripe.com/v1/crypto/onramp_quotes \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"source_amount\"=\"200\" \\   -d \"destination_currencies[]\"=\"usdc\" \\   -d \"destination_networks[]\"=\"ethereum\" \\   -d \"destination_networks[]\"=\"solana\"`\n\nResponse:\n\n`{   \"id\": \"8727e8de9a22915aea079973028054e31d362a328758a5953cee6ba1b6f22569\",   \"rate_fetched_at\": 1674268717.432479,   \"destination_network_quotes\": {     \"bitcoin\": [],     \"ethereum\": [       {         \"id\": \"603f29933c921d59b169572cf2d61da7d88f2a6973da0d6fcb686b3dec3de223\",         \"destination_currency\": \"usdc\",         \"destination_amount\": \"200.00\",         \"destination_network\": \"ethereum\",         \"fees\": {           \"network_fee_monetary\": \"5.88\",           \"transaction_fee_monetary\": \"12.76\"         },         \"source_total_amount\": \"218.64\"       }     ],     \"polygon\": [],     \"solana\": [       {         \"id\": \"38b8388072e6272e7a0c0d5ee1161d3d747362a574f54fe76f1554ff60e3a007\",         \"destination_currency\": \"usdc\",         \"destination_amount\": \"200.00\",         \"destination_network\": \"solana\",         \"fees\": {           \"network_fee_monetary\": \"0.01\",           \"transaction_fee_monetary\": \"12.70\"         },         \"source_total_amount\": \"212.71\"       }     ]   },   \"livemode\": true,   \"source_currency\": \"usd\",   \"source_amount\": \"200.00\" }`\n\nFetching a quote for a single destination currency-network pair (ETH on Ethereum) with `destination_amount` specified.\n\nRequest:\n\n`curl -G https://api.stripe.com/v1/crypto/onramp_quotes \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"destination_amount\"=\"0.42\" \\   -d \"destination_currencies[]\"=\"eth\" \\   -d \"destination_networks[]\"=\"ethereum\"`\n\nResponse:\n\n`{   \"id\": \"74f73859a8836293ce4f1e6757dc258c9f1016deea7b075faba8b5755d163168\",   \"rate_fetched_at\": 1674268804.6989243,   \"destination_network_quotes\": {     \"bitcoin\": null,     \"ethereum\": [       {         \"id\": \"f1adad5680b081031b03b89c174d25ce6b609416fc82f976423e95a089a10334\",         \"destination_currency\": \"eth\",         \"destination_amount\": \"0.420000000000000000\",         \"destination_network\": \"ethereum\",         \"fees\": {           \"network_fee_monetary\": \"1.45\",           \"transaction_fee_monetary\": \"21.06\"         },         \"source_total_amount\": \"719.53\"       }     ],     \"polygon\": null,     \"solana\": null   },   \"livemode\": true,   \"source_currency\": \"usd\",   \"source_amount\": \"697.02\" }`",
  "title": "Quotes API | Stripe Documentation",
  "description": "Learn how to use the onramp quotes API.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/climate/order",
  "markdown": "# Climate Order | Stripe API Reference\n\n## [The Climate order object](https://docs.stripe.com/api/climate/order/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Total amount of [Frontier](https://frontierclimate.com/)’s service fees in the currency’s smallest unit.\n    \n*   Total amount of the carbon removal in the currency’s smallest unit.\n    \n*   Total amount of the order including fees in the currency’s smallest unit.\n    \n*   #### \n    \n    beneficiarynullable object\n    \n    Publicly sharable reference for the end beneficiary of carbon removal. Assumed to be the Stripe account if not set.\n    \n*   #### \n    \n    canceled\\_atnullable timestamp\n    \n    Time at which the order was canceled. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    cancellation\\_reasonnullable enum\n    \n    Reason for the cancellation of this order.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `expired`<br><br>Order was not confirmed and expired automatically |\n    | `product_unavailable`<br><br>Order could not be fulfilled because the product is no longer available |\n    | `requested`<br><br>Order was canceled by a cancellation request |\n    \n*   #### \n    \n    certificatenullable string\n    \n    For delivered orders, a URL to a delivery certificate for the order.\n    \n*   #### \n    \n    confirmed\\_atnullable timestamp\n    \n    Time at which the order was confirmed. Measured in seconds since the Unix epoch.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase, representing the currency for this order.\n    \n*   #### \n    \n    delayed\\_atnullable timestamp\n    \n    Time at which the order’s expected\\_delivery\\_year was delayed. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    delivered\\_atnullable timestamp\n    \n    Time at which the order was delivered. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    delivery\\_detailsarray of objects\n    \n    Details about the delivery of carbon removal for this order.\n    \n*   #### \n    \n    expected\\_delivery\\_yearinteger\n    \n    The year this order is expected to be delivered.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    metric\\_tonsdecimal string\n    \n    Quantity of carbon removal that is included in this order.\n    \n*   Unique ID for the Climate `Product` this order is purchasing.\n    \n*   #### \n    \n    product\\_substituted\\_atnullable timestamp\n    \n    Time at which the order’s product was substituted for a different product. Measured in seconds since the Unix epoch.\n    \n*   The current status of this order.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `awaiting_funds`<br><br>Status when an order has been attached to a funding\\_source and is awaiting it’s settlement |\n    | `canceled`<br><br>Status when a reservation has been canceled |\n    | `confirmed`<br><br>Status when a reservation has been successfully confirmed and payment has been made |\n    | `delivered`<br><br>Status when a reservation has been delivered |\n    \n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {},  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"confirmed\"}\n```\n\n## [Create an order](https://docs.stripe.com/api/climate/order/create)\n\nCreates a Climate order object for a given Climate product. The order will be processed immediately after creation and payment will be deducted your Stripe balance.\n\n### Parameters\n\n*   Unique identifier of the Climate product.\n    \n*   Requested amount of carbon removal units. Either this or `metric_tons` must be specified.\n    \n*   Publicly sharable reference for the end beneficiary of carbon removal. Assumed to be the Stripe account if not set.\n    \n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Requested number of tons for the order. Either this or `amount` must be specified.\n    \n\n### Returns\n\nThe new Climate order object.\n\n```\ncurl https://api.stripe.com/v1/climate/orders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d metric_tons=\"0.01\" \\  -d product=climsku_frontier_offtake_portfolio_2027\n```\n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {},  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"confirmed\"}\n```\n\n## [Update an order](https://docs.stripe.com/api/climate/order/update)\n\nUpdates the specified order by setting the values of the parameters passed.\n\n### Parameters\n\n*   Unique identifier of the order.\n    \n*   Publicly sharable reference for the end beneficiary of carbon removal. Assumed to be the Stripe account if not set.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe updated Climate order object.\n\nPOST /v1/climate/orders/:id\n\n```\ncurl https://api.stripe.com/v1/climate/orders/climorder_1aTnU0B63jkB3XAQKUbA5yyl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"confirmed\"}\n```\n\n## [Retrieve an order](https://docs.stripe.com/api/climate/order/retrieve)\n\nRetrieves the details of a Climate order object with the given ID.\n\n### Parameters\n\n*   Unique identifier of the order.\n    \n\n### Returns\n\nReturns a Climate order object if a valid identifier was provided. Throws an error otherwise.\n\nGET /v1/climate/orders/:id\n\n```\ncurl https://api.stripe.com/v1/climate/orders/climorder_1aTnU0B63jkB3XAQKUbA5yyl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {},  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"confirmed\"}\n```",
  "title": "Climate Order | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/climate/order/create",
  "markdown": "# Create an order | Stripe API Reference\n\nCreates a Climate order object for a given Climate product. The order will be processed immediately after creation and payment will be deducted your Stripe balance.\n\n### Parameters\n\n*   Unique identifier of the Climate product.\n    \n*   Requested amount of carbon removal units. Either this or `metric_tons` must be specified.\n    \n*   Publicly sharable reference for the end beneficiary of carbon removal. Assumed to be the Stripe account if not set.\n    \n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Requested number of tons for the order. Either this or `amount` must be specified.\n    \n\n### Returns\n\nThe new Climate order object.\n\n```\ncurl https://api.stripe.com/v1/climate/orders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d metric_tons=\"0.01\" \\  -d product=climsku_frontier_offtake_portfolio_2027\n```\n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {},  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"confirmed\"}\n```\n\n## [Update an order](https://docs.stripe.com/api/climate/order/update)\n\nUpdates the specified order by setting the values of the parameters passed.\n\n### Parameters\n\n*   Unique identifier of the order.\n    \n*   Publicly sharable reference for the end beneficiary of carbon removal. Assumed to be the Stripe account if not set.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe updated Climate order object.\n\nPOST /v1/climate/orders/:id\n\n```\ncurl https://api.stripe.com/v1/climate/orders/climorder_1aTnU0B63jkB3XAQKUbA5yyl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"confirmed\"}\n```\n\n## [Retrieve an order](https://docs.stripe.com/api/climate/order/retrieve)\n\nRetrieves the details of a Climate order object with the given ID.\n\n### Parameters\n\n*   Unique identifier of the order.\n    \n\n### Returns\n\nReturns a Climate order object if a valid identifier was provided. Throws an error otherwise.\n\nGET /v1/climate/orders/:id\n\n```\ncurl https://api.stripe.com/v1/climate/orders/climorder_1aTnU0B63jkB3XAQKUbA5yyl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {},  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"confirmed\"}\n```\n\n## [List orders](https://docs.stripe.com/api/climate/order/list)\n\nLists all Climate order objects. The orders are returned sorted by creation date, with the most recently created orders appearing first.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` orders, starting after order `starting_after`. Each entry in the array is a separate order object. If no more orders are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/climate/orders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/climate/orders\",  \"has_more\": false,  \"data\": [    {      \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",      \"object\": \"climate.order\",      \"amount_fees\": 17,      \"amount_subtotal\": 550,      \"amount_total\": 567,      \"beneficiary\": {        \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"      },      \"canceled_at\": null,      \"cancellation_reason\": null,      \"certificate\": null,      \"confirmed_at\": 1881439205,      \"created\": 1881439205,      \"currency\": \"usd\",      \"delayed_at\": null,      \"delivered_at\": null,      \"delivery_details\": [],      \"expected_delivery_year\": 2027,      \"livemode\": false,      \"metadata\": {},      \"metric_tons\": \"0.01\",      \"product\": \"climsku_frontier_offtake_portfolio_2027\",      \"product_substituted_at\": null,      \"status\": \"confirmed\"    }    {...}    {...}  ],}\n```\n\n## [Cancel an order](https://docs.stripe.com/api/climate/order/cancel)\n\nCancels a Climate order. You can cancel an order within 24 hours of creation. Stripe refunds the reservation `amount_subtotal`, but not the `amount_fees` for user-triggered cancellations. Frontier might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe provides 90 days advance notice and refunds the `amount_total`.\n\n### Parameters\n\n*   Unique identifier of the order.\n    \n\n### Returns\n\nThe canceled Climate order object.\n\nPOST /v1/climate/orders/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/climate/orders/climorder_1aTnU0B63jkB3XAQKUbA5yyl/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": 1881439208,  \"cancellation_reason\": \"requested\",  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {},  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"canceled\"}\n```",
  "title": "Create an order | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/climate/order/update",
  "markdown": "# Update an order | Stripe API Reference\n\nUpdates the specified order by setting the values of the parameters passed.\n\n### Parameters\n\n*   Unique identifier of the order.\n    \n*   Publicly sharable reference for the end beneficiary of carbon removal. Assumed to be the Stripe account if not set.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe updated Climate order object.\n\nPOST /v1/climate/orders/:id\n\n```\ncurl https://api.stripe.com/v1/climate/orders/climorder_1aTnU0B63jkB3XAQKUbA5yyl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"confirmed\"}\n```\n\n## [Retrieve an order](https://docs.stripe.com/api/climate/order/retrieve)\n\nRetrieves the details of a Climate order object with the given ID.\n\n### Parameters\n\n*   Unique identifier of the order.\n    \n\n### Returns\n\nReturns a Climate order object if a valid identifier was provided. Throws an error otherwise.\n\nGET /v1/climate/orders/:id\n\n```\ncurl https://api.stripe.com/v1/climate/orders/climorder_1aTnU0B63jkB3XAQKUbA5yyl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {},  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"confirmed\"}\n```\n\n## [List orders](https://docs.stripe.com/api/climate/order/list)\n\nLists all Climate order objects. The orders are returned sorted by creation date, with the most recently created orders appearing first.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` orders, starting after order `starting_after`. Each entry in the array is a separate order object. If no more orders are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/climate/orders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/climate/orders\",  \"has_more\": false,  \"data\": [    {      \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",      \"object\": \"climate.order\",      \"amount_fees\": 17,      \"amount_subtotal\": 550,      \"amount_total\": 567,      \"beneficiary\": {        \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"      },      \"canceled_at\": null,      \"cancellation_reason\": null,      \"certificate\": null,      \"confirmed_at\": 1881439205,      \"created\": 1881439205,      \"currency\": \"usd\",      \"delayed_at\": null,      \"delivered_at\": null,      \"delivery_details\": [],      \"expected_delivery_year\": 2027,      \"livemode\": false,      \"metadata\": {},      \"metric_tons\": \"0.01\",      \"product\": \"climsku_frontier_offtake_portfolio_2027\",      \"product_substituted_at\": null,      \"status\": \"confirmed\"    }    {...}    {...}  ],}\n```\n\n## [Cancel an order](https://docs.stripe.com/api/climate/order/cancel)\n\nCancels a Climate order. You can cancel an order within 24 hours of creation. Stripe refunds the reservation `amount_subtotal`, but not the `amount_fees` for user-triggered cancellations. Frontier might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe provides 90 days advance notice and refunds the `amount_total`.\n\n### Parameters\n\n*   Unique identifier of the order.\n    \n\n### Returns\n\nThe canceled Climate order object.\n\nPOST /v1/climate/orders/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/climate/orders/climorder_1aTnU0B63jkB3XAQKUbA5yyl/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": 1881439208,  \"cancellation_reason\": \"requested\",  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {},  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"canceled\"}\n```\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update an order | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/climate/order/retrieve",
  "markdown": "# Retrieve an order | Stripe API Reference\n\nRetrieves the details of a Climate order object with the given ID.\n\n### Parameters\n\n*   Unique identifier of the order.\n    \n\n### Returns\n\nReturns a Climate order object if a valid identifier was provided. Throws an error otherwise.\n\nGET /v1/climate/orders/:id\n\n```\ncurl https://api.stripe.com/v1/climate/orders/climorder_1aTnU0B63jkB3XAQKUbA5yyl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {},  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"confirmed\"}\n```\n\n## [List orders](https://docs.stripe.com/api/climate/order/list)\n\nLists all Climate order objects. The orders are returned sorted by creation date, with the most recently created orders appearing first.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` orders, starting after order `starting_after`. Each entry in the array is a separate order object. If no more orders are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/climate/orders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/climate/orders\",  \"has_more\": false,  \"data\": [    {      \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",      \"object\": \"climate.order\",      \"amount_fees\": 17,      \"amount_subtotal\": 550,      \"amount_total\": 567,      \"beneficiary\": {        \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"      },      \"canceled_at\": null,      \"cancellation_reason\": null,      \"certificate\": null,      \"confirmed_at\": 1881439205,      \"created\": 1881439205,      \"currency\": \"usd\",      \"delayed_at\": null,      \"delivered_at\": null,      \"delivery_details\": [],      \"expected_delivery_year\": 2027,      \"livemode\": false,      \"metadata\": {},      \"metric_tons\": \"0.01\",      \"product\": \"climsku_frontier_offtake_portfolio_2027\",      \"product_substituted_at\": null,      \"status\": \"confirmed\"    }    {...}    {...}  ],}\n```\n\n## [Cancel an order](https://docs.stripe.com/api/climate/order/cancel)\n\nCancels a Climate order. You can cancel an order within 24 hours of creation. Stripe refunds the reservation `amount_subtotal`, but not the `amount_fees` for user-triggered cancellations. Frontier might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe provides 90 days advance notice and refunds the `amount_total`.\n\n### Parameters\n\n*   Unique identifier of the order.\n    \n\n### Returns\n\nThe canceled Climate order object.\n\nPOST /v1/climate/orders/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/climate/orders/climorder_1aTnU0B63jkB3XAQKUbA5yyl/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": 1881439208,  \"cancellation_reason\": \"requested\",  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {},  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"canceled\"}\n```\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve an order | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/identity/verification_sessions",
  "markdown": "# Verification Session | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fidentity%2Fverification_sessions)\n\n## [The VerificationSession object](https://docs.stripe.com/api/identity/verification_sessions/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    client\\_reference\\_idnullable string\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   #### \n    \n    client\\_secretnullable string\n    \n    The short-lived client secret used by Stripe.js to [show a verification modal](https://docs.stripe.com/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://docs.stripe.com/identity/verification-sessions#client-secret) to learn more.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    last\\_errornullable object\n    \n    If present, this property tells you the last error encountered when processing the verification.\n    \n*   #### \n    \n    last\\_verification\\_reportnullable stringExpandable\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   A set of options for the session’s verification checks.\n    \n*   #### \n    \n    provided\\_detailsnullable objectExpandable\n    \n    Details provided about the user being verified. These details may be shown to the user.\n    \n*   Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null.\n    \n*   Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://docs.stripe.com/identity/how-sessions-work).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The VerificationSession has been invalidated for future submission attempts. |\n    | `processing`<br><br>The session has been submitted and is being processed. Most [verification checks](https://docs.stripe.com/identity/verification-checks) are processed in less than 1 minute. |\n    | `requires_input`<br><br>Requires user input before processing can continue. |\n    | `verified`<br><br>Processing of all the verification checks are complete and successfully verified. |\n    \n\n*   The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://docs.stripe.com/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe.\n    \n*   #### \n    \n    verification\\_flownullable string\n    \n    The configuration token of a Verification Flow from the dashboard.\n    \n*   #### \n    \n    verified\\_outputsnullable objectExpandable\n    \n    The user’s verified data.\n    \n\nThe VerificationSession object\n\n```\n{  \"id\": \"vs_1NuNAILkdIwHu7ixh7OtGMLw\",  \"object\": \"identity.verification_session\",  \"client_secret\": \"...\",  \"created\": 1695680526,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": null,  \"status\": \"requires_input\",  \"type\": \"document\",  \"url\": \"...\"}\n```\n\n## [Create a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/create)\n\nCreates a VerificationSession object.\n\nAfter the VerificationSession is created, display a verification modal using the session `client_secret` or send your users to the session’s `url`.\n\nIf your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.\n\nRelated guide: [Verify your users’ identity documents](https://docs.stripe.com/identity/verify-identity-documents)\n\n### Parameters\n\n*   #### \n    \n    client\\_reference\\_idstring\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A set of options for the session’s verification checks.\n    \n*   Details provided about the user being verified. These details may be shown to the user.\n    \n*   The URL that the user will be redirected to upon completing the verification flow.\n    \n*   The type of [verification check](https://docs.stripe.com/identity/verification-checks) to be performed. You must provide a `type` if not passing `verification_flow`.\n    \n*   The ID of a Verification Flow from the Dashboard. See https://docs.stripe.com/identity/verification-flows.\n    \n\n### Returns\n\nReturns the created VerificationSession object\n\nPOST /v1/identity/verification\\_sessions\n\n```\ncurl https://api.stripe.com/v1/identity/verification_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=document\n```\n\n```\n{  \"id\": \"vs_1NuN4zLkdIwHu7ixleE6HvkI\",  \"object\": \"identity.verification_session\",  \"client_secret\": \"...\",  \"created\": 1695680197,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {},  \"redaction\": null,  \"status\": \"requires_input\",  \"type\": \"document\",  \"url\": \"...\"}\n```\n\n## [Update a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/update)\n\nUpdates a VerificationSession object.\n\nWhen the session status is `requires_input`, you can use this method to update the verification check and options.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A set of options for the session’s verification checks.\n    \n*   Details provided about the user being verified. These details may be shown to the user.\n    \n\n### Returns\n\nReturns the updated VerificationSession object\n\nPOST /v1/identity/verification\\_sessions/:id\n\n```\ncurl https://api.stripe.com/v1/identity/verification_sessions/vs_1NuN9WLkdIwHu7ix597AR9uz \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=id_number\n```\n\n```\n{  \"id\": \"vs_1NuN9WLkdIwHu7ix597AR9uz\",  \"object\": \"identity.verification_session\",  \"client_secret\": \"...\",  \"created\": 1695680478,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {},  \"redaction\": null,  \"status\": \"requires_input\",  \"type\": \"id_number\",  \"url\": \"...\"}\n```\n\n## [Retrieve a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/retrieve)\n\nRetrieves the details of a VerificationSession that was previously created.\n\nWhen the session status is `requires_input`, you can use this method to retrieve a valid `client_secret` or `url` to allow re-submission.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a VerificationSession object\n\nGET /v1/identity/verification\\_sessions/:id\n\n```\ncurl https://api.stripe.com/v1/identity/verification_sessions/vs_1NuNAILkdIwHu7ixh7OtGMLw \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vs_1NuNAILkdIwHu7ixh7OtGMLw\",  \"object\": \"identity.verification_session\",  \"client_secret\": \"...\",  \"created\": 1695680526,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": null,  \"status\": \"requires_input\",  \"type\": \"document\",  \"url\": \"...\"}\n```",
  "title": "Verification Session | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/climate/order/cancel",
  "markdown": "# Cancel an order | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fclimate%2Forder%2Fcancel)\n\nCancels a Climate order. You can cancel an order within 24 hours of creation. Stripe refunds the reservation `amount_subtotal`, but not the `amount_fees` for user-triggered cancellations. Frontier might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe provides 90 days advance notice and refunds the `amount_total`.\n\n### Parameters\n\n*   Unique identifier of the order.\n    \n\n### Returns\n\nThe canceled Climate order object.\n\nPOST /v1/climate/orders/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/climate/orders/climorder_1aTnU0B63jkB3XAQKUbA5yyl/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": 1881439208,  \"cancellation_reason\": \"requested\",  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {},  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"canceled\"}\n```\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Cancel an order | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/climate/product",
  "markdown": "# Climate Product | Stripe API Reference\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [The Climate product object](https://docs.stripe.com/api/climate/product/object)\n\n### Attributes\n\n*   Unique identifier for the object. For convenience, Climate product IDs are human-readable strings that start with `climsku_`. See [carbon removal inventory](https://stripe.com/docs/climate/orders/carbon-removal-inventory) for a list of available carbon removal products.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    current\\_prices\\_per\\_metric\\_tonobject\n    \n    Current prices for a metric ton of carbon removal in a currency’s smallest unit.\n    \n*   #### \n    \n    delivery\\_yearnullable integer\n    \n    The year in which the carbon removal is expected to be delivered.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    metric\\_tons\\_availabledecimal string\n    \n    The quantity of metric tons available for reservation.\n    \n*   The Climate product’s name.\n    \n*   #### \n    \n    suppliersarray of objects\n    \n    The carbon removal suppliers that fulfill orders for this Climate product.\n    \n\nThe Climate product object\n\n```\n{  \"id\": \"climsku_frontier_offtake_portfolio_2027\",  \"object\": \"climate.product\",  \"created\": 1881439203,  \"current_prices_per_metric_ton\": {    \"usd\": {      \"amount_fees\": 1650,      \"amount_subtotal\": 55000,      \"amount_total\": 56650    }  },  \"delivery_year\": 2027,  \"livemode\": false,  \"metric_tons_available\": \"18000\",  \"name\": \"Frontier's 2027 offtake portfolio\",  \"suppliers\": [    {      \"id\": \"climsup_charm_industrial\",      \"object\": \"climate.supplier\",      \"info_url\": \"https://frontierclimate.com/portfolio/charm-industrial\",      \"livemode\": false,      \"locations\": [        {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"latitude\": 37.7749,          \"longitude\": -122.4194,          \"region\": \"CA\"        }      ],      \"name\": \"Charm Industrial\",      \"removal_pathway\": \"biomass_carbon_removal_and_storage\"    }  ]}\n```\n\n## [Retrieve a product](https://docs.stripe.com/api/climate/product/retrieve)\n\nRetrieves the details of a Climate product with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a Climate product object if a valid identifier was provided. Throws an error otherwise.\n\nGET /v1/climate/products/:id\n\n```\ncurl https://api.stripe.com/v1/climate/products/climsku_frontier_offtake_portfolio_2027 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"climsku_frontier_offtake_portfolio_2027\",  \"object\": \"climate.product\",  \"created\": 1881439203,  \"current_prices_per_metric_ton\": {    \"usd\": {      \"amount_fees\": 1650,      \"amount_subtotal\": 55000,      \"amount_total\": 56650    }  },  \"delivery_year\": 2027,  \"livemode\": false,  \"metric_tons_available\": \"18000\",  \"name\": \"Frontier's 2027 offtake portfolio\",  \"suppliers\": [    {      \"id\": \"climsup_charm_industrial\",      \"object\": \"climate.supplier\",      \"info_url\": \"https://frontierclimate.com/portfolio/charm-industrial\",      \"livemode\": false,      \"locations\": [        {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"latitude\": 37.7749,          \"longitude\": -122.4194,          \"region\": \"CA\"        }      ],      \"name\": \"Charm Industrial\",      \"removal_pathway\": \"biomass_carbon_removal_and_storage\"    }  ]}\n```\n\n## [List products](https://docs.stripe.com/api/climate/product/list)\n\nLists all available Climate product objects.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` products, starting after product `starting_after`. Each entry in the array is a separate product object. If no more products are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/climate/products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/climate/products\",  \"has_more\": false,  \"data\": [    {      \"id\": \"climsku_frontier_offtake_portfolio_2027\",      \"object\": \"climate.product\",      \"created\": 1881439203,      \"current_prices_per_metric_ton\": {        \"usd\": {          \"amount_fees\": 1650,          \"amount_subtotal\": 55000,          \"amount_total\": 56650        }      },      \"delivery_year\": 2027,      \"livemode\": false,      \"metric_tons_available\": \"18000\",      \"name\": \"Frontier's 2027 offtake portfolio\",      \"suppliers\": [        {          \"id\": \"climsup_charm_industrial\",          \"object\": \"climate.supplier\",          \"info_url\": \"https://frontierclimate.com/portfolio/charm-industrial\",          \"livemode\": false,          \"locations\": [            {              \"city\": \"San Francisco\",              \"country\": \"US\",              \"latitude\": 37.7749,              \"longitude\": -122.4194,              \"region\": \"CA\"            }          ],          \"name\": \"Charm Industrial\",          \"removal_pathway\": \"biomass_carbon_removal_and_storage\"        }      ]    }    {...}    {...}  ],}\n```\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Climate Product | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/climate/product/retrieve",
  "markdown": "# Retrieve a product | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fclimate%2Fproduct%2Fretrieve)\n\nRetrieves the details of a Climate product with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a Climate product object if a valid identifier was provided. Throws an error otherwise.\n\nGET /v1/climate/products/:id\n\n```\ncurl https://api.stripe.com/v1/climate/products/climsku_frontier_offtake_portfolio_2027 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"climsku_frontier_offtake_portfolio_2027\",  \"object\": \"climate.product\",  \"created\": 1881439203,  \"current_prices_per_metric_ton\": {    \"usd\": {      \"amount_fees\": 1650,      \"amount_subtotal\": 55000,      \"amount_total\": 56650    }  },  \"delivery_year\": 2027,  \"livemode\": false,  \"metric_tons_available\": \"18000\",  \"name\": \"Frontier's 2027 offtake portfolio\",  \"suppliers\": [    {      \"id\": \"climsup_charm_industrial\",      \"object\": \"climate.supplier\",      \"info_url\": \"https://frontierclimate.com/portfolio/charm-industrial\",      \"livemode\": false,      \"locations\": [        {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"latitude\": 37.7749,          \"longitude\": -122.4194,          \"region\": \"CA\"        }      ],      \"name\": \"Charm Industrial\",      \"removal_pathway\": \"biomass_carbon_removal_and_storage\"    }  ]}\n```\n\n## [List products](https://docs.stripe.com/api/climate/product/list)\n\nLists all available Climate product objects.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` products, starting after product `starting_after`. Each entry in the array is a separate product object. If no more products are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/climate/products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/climate/products\",  \"has_more\": false,  \"data\": [    {      \"id\": \"climsku_frontier_offtake_portfolio_2027\",      \"object\": \"climate.product\",      \"created\": 1881439203,      \"current_prices_per_metric_ton\": {        \"usd\": {          \"amount_fees\": 1650,          \"amount_subtotal\": 55000,          \"amount_total\": 56650        }      },      \"delivery_year\": 2027,      \"livemode\": false,      \"metric_tons_available\": \"18000\",      \"name\": \"Frontier's 2027 offtake portfolio\",      \"suppliers\": [        {          \"id\": \"climsup_charm_industrial\",          \"object\": \"climate.supplier\",          \"info_url\": \"https://frontierclimate.com/portfolio/charm-industrial\",          \"livemode\": false,          \"locations\": [            {              \"city\": \"San Francisco\",              \"country\": \"US\",              \"latitude\": 37.7749,              \"longitude\": -122.4194,              \"region\": \"CA\"            }          ],          \"name\": \"Charm Industrial\",          \"removal_pathway\": \"biomass_carbon_removal_and_storage\"        }      ]    }    {...}    {...}  ],}\n```\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a product | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/climate/product/list",
  "markdown": "# List products | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fclimate%2Fproduct%2Flist)\n\nLists all available Climate product objects.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` products, starting after product `starting_after`. Each entry in the array is a separate product object. If no more products are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/climate/products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/climate/products\",  \"has_more\": false,  \"data\": [    {      \"id\": \"climsku_frontier_offtake_portfolio_2027\",      \"object\": \"climate.product\",      \"created\": 1881439203,      \"current_prices_per_metric_ton\": {        \"usd\": {          \"amount_fees\": 1650,          \"amount_subtotal\": 55000,          \"amount_total\": 56650        }      },      \"delivery_year\": 2027,      \"livemode\": false,      \"metric_tons_available\": \"18000\",      \"name\": \"Frontier's 2027 offtake portfolio\",      \"suppliers\": [        {          \"id\": \"climsup_charm_industrial\",          \"object\": \"climate.supplier\",          \"info_url\": \"https://frontierclimate.com/portfolio/charm-industrial\",          \"livemode\": false,          \"locations\": [            {              \"city\": \"San Francisco\",              \"country\": \"US\",              \"latitude\": 37.7749,              \"longitude\": -122.4194,              \"region\": \"CA\"            }          ],          \"name\": \"Charm Industrial\",          \"removal_pathway\": \"biomass_carbon_removal_and_storage\"        }      ]    }    {...}    {...}  ],}\n```\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List products | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/climate/supplier",
  "markdown": "# Climate Supplier | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fclimate%2Fsupplier)\n\nA supplier of carbon removal.\n\n## [The Climate supplier object](https://docs.stripe.com/api/climate/supplier/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Link to a webpage to learn more about the supplier.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    locationsarray of objects\n    \n    The locations in which this supplier operates.\n    \n*   Name of this carbon removal supplier.\n    \n*   The scientific pathway used for carbon removal.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `biomass_carbon_removal_and_storage`<br><br>Biomass carbon removal and storage |\n    | `direct_air_capture`<br><br>Direct air capture |\n    | `enhanced_weathering`<br><br>Enhanced weathering |\n    \n\nThe Climate supplier object\n\n```\n{  \"id\": \"climsup_charm_industrial\",  \"object\": \"climate.supplier\",  \"info_url\": \"https://frontierclimate.com/portfolio/charm-industrial\",  \"livemode\": false,  \"locations\": [    {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"latitude\": 37.7749,      \"longitude\": -122.4194,      \"region\": \"CA\"    }  ],  \"name\": \"Charm Industrial\",  \"removal_pathway\": \"biomass_carbon_removal_and_storage\"}\n```\n\n## [Retrieve a supplier](https://docs.stripe.com/api/climate/supplier/retrieve)\n\nRetrieves a Climate supplier object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Climate supplier object.\n\nGET /v1/climate/suppliers/:id\n\n```\ncurl https://api.stripe.com/v1/climate/suppliers/climsup_charm_industrial \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"climsup_charm_industrial\",  \"object\": \"climate.supplier\",  \"info_url\": \"https://frontierclimate.com/portfolio/charm-industrial\",  \"livemode\": false,  \"locations\": [    {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"latitude\": 37.7749,      \"longitude\": -122.4194,      \"region\": \"CA\"    }  ],  \"name\": \"Charm Industrial\",  \"removal_pathway\": \"biomass_carbon_removal_and_storage\"}\n```\n\n## [List suppliers](https://docs.stripe.com/api/climate/supplier/list)\n\nLists all available Climate supplier objects.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` suppliers, starting after supplier `starting_after`. Each entry in the array is a separate supplier object. If no more suppliers are available, the resulting array is empty.\n\nGET /v1/climate/suppliers\n\n```\ncurl -G https://api.stripe.com/v1/climate/suppliers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/climate/suppliers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"climsup_charm_industrial\",      \"object\": \"climate.supplier\",      \"info_url\": \"https://frontierclimate.com/portfolio/charm-industrial\",      \"livemode\": false,      \"locations\": [        {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"latitude\": 37.7749,          \"longitude\": -122.4194,          \"region\": \"CA\"        }      ],      \"name\": \"Charm Industrial\",      \"removal_pathway\": \"biomass_carbon_removal_and_storage\"    }    {...}    {...}  ],}\n```\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Climate Supplier | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/climate/supplier/retrieve",
  "markdown": "# Retrieve a supplier | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fclimate%2Fsupplier%2Fretrieve)\n\nRetrieves a Climate supplier object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Climate supplier object.\n\nGET /v1/climate/suppliers/:id\n\n```\ncurl https://api.stripe.com/v1/climate/suppliers/climsup_charm_industrial \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"climsup_charm_industrial\",  \"object\": \"climate.supplier\",  \"info_url\": \"https://frontierclimate.com/portfolio/charm-industrial\",  \"livemode\": false,  \"locations\": [    {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"latitude\": 37.7749,      \"longitude\": -122.4194,      \"region\": \"CA\"    }  ],  \"name\": \"Charm Industrial\",  \"removal_pathway\": \"biomass_carbon_removal_and_storage\"}\n```\n\n## [List suppliers](https://docs.stripe.com/api/climate/supplier/list)\n\nLists all available Climate supplier objects.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` suppliers, starting after supplier `starting_after`. Each entry in the array is a separate supplier object. If no more suppliers are available, the resulting array is empty.\n\nGET /v1/climate/suppliers\n\n```\ncurl -G https://api.stripe.com/v1/climate/suppliers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/climate/suppliers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"climsup_charm_industrial\",      \"object\": \"climate.supplier\",      \"info_url\": \"https://frontierclimate.com/portfolio/charm-industrial\",      \"livemode\": false,      \"locations\": [        {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"latitude\": 37.7749,          \"longitude\": -122.4194,          \"region\": \"CA\"        }      ],      \"name\": \"Charm Industrial\",      \"removal_pathway\": \"biomass_carbon_removal_and_storage\"    }    {...}    {...}  ],}\n```\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a supplier | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/climate/supplier/list",
  "markdown": "# List suppliers | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fclimate%2Fsupplier%2Flist)\n\nLists all available Climate supplier objects.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` suppliers, starting after supplier `starting_after`. Each entry in the array is a separate supplier object. If no more suppliers are available, the resulting array is empty.\n\nGET /v1/climate/suppliers\n\n```\ncurl -G https://api.stripe.com/v1/climate/suppliers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/climate/suppliers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"climsup_charm_industrial\",      \"object\": \"climate.supplier\",      \"info_url\": \"https://frontierclimate.com/portfolio/charm-industrial\",      \"livemode\": false,      \"locations\": [        {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"latitude\": 37.7749,          \"longitude\": -122.4194,          \"region\": \"CA\"        }      ],      \"name\": \"Charm Industrial\",      \"removal_pathway\": \"biomass_carbon_removal_and_storage\"    }    {...}    {...}  ],}\n```\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List suppliers | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/forwarding/request",
  "markdown": "# Forwarding Request | Stripe API Reference\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)\n\n## [The ForwardingRequest object](https://docs.stripe.com/api/forwarding/request/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed.\n    \n*   #### \n    \n    replacementsarray of enums\n    \n    The field kinds to be replaced in the forwarded request.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `card_cvc`<br><br>Replace the card cvc field |\n    | `card_expiry`<br><br>Replace the card expiry fields like month and year |\n    | `card_number`<br><br>Replace the card number field |\n    | `cardholder_name`<br><br>Replace the cardholder name field |\n    \n*   #### \n    \n    request\\_contextnullable object\n    \n    Context about the request from Stripe’s servers to the destination endpoint.\n    \n*   #### \n    \n    request\\_detailsnullable object\n    \n    The request that was sent to the destination endpoint. We redact any sensitive fields.\n    \n*   #### \n    \n    response\\_detailsnullable object\n    \n    The response that the destination endpoint returned to us. We redact any sensitive fields.\n    \n*   The destination URL for the forwarded request. Must be supported by the config.\n    \n\nThe ForwardingRequest object\n\n```\n{  \"id\": \"fwdreq_123\",  \"object\": \"forwarding.request\",  \"created\": 1234567890,  \"livemode\": false,  \"payment_method\": \"pm_456\",  \"request_details\": {    \"body\": \"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"424242******4242\\\",\\\"expiryMonth\\\":\\\"03\\\",\\\"expiryYear\\\":\\\"2030\\\",\\\"cvc\\\":\\\"***\\\",\\\"holderName\\\":\\\"First Last\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\",    \"headers\": [      {        \"name\": \"Destination-API-Key\",        \"value\": \"{{DESTINATION_API_KEY}}\"      },      {        \"name\": \"Destination-Idempotency-Key\",        \"value\": \"{{DESTINATION_IDEMPOTENCY_KEY}}\"      },      {        \"name\": \"Content-Type\",        \"value\": \"application/json\"      }    ],    \"http_method\": \"POST\"  },  \"request_context\": {    \"destination_ip_address\": \"35.190.113.80\",    \"destination_duration\": 234  },  \"response_details\": {    \"body\": \"{\\\"transactionId\\\":\\\"example1234\\\"}\",    \"headers\": [      {        \"name\": \"Content-Type\",        \"value\": \"application/json;charset=UTF-8\"      }    ],    \"status\": 200  },  \"url\": \"https://endpoint-url/v1/payments\",  \"replacements\": [    \"card_number\",    \"card_expiry\",    \"card_cvc\",    \"cardholder_name\"  ]}\n```\n\n## [Create a ForwardingRequest](https://docs.stripe.com/api/forwarding/forwarding_requests/create)\n\nCreates a ForwardingRequest object.\n\n### Parameters\n\n*   #### \n    \n    payment\\_methodstringRequired\n    \n    The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed.\n    \n*   #### \n    \n    replacementsarray of enumsRequired\n    \n    The field kinds to be replaced in the forwarded request.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `card_cvc`<br><br>Replace the card cvc field |\n    | `card_expiry`<br><br>Replace the card expiry fields like month and year |\n    | `card_number`<br><br>Replace the card number field |\n    | `cardholder_name`<br><br>Replace the cardholder name field |\n    \n*   The request body and headers to be sent to the destination endpoint.\n    \n*   The destination URL for the forwarded request. Must be supported by the config.\n    \n\n### Returns\n\nReturns a ForwardingRequest object.\n\nPOST /v1/forwarding/requests\n\n```\ncurl https://api.stripe.com/v1/forwarding/requests \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode url=\"https://endpoint-url/v1/payments\" \\  -d payment_method=pm_card_visa \\  -d \"replacements[0]\"=card_number \\  -d \"replacements[1]\"=card_expiry \\  -d \"replacements[2]\"=card_cvc \\  -d \"replacements[3]\"=cardholder_name \\  --data-urlencode \"request[body]\"=\"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"\\\",\\\"expiryMonth\\\":\\\"\\\",\\\"expiryYear\\\":\\\"\\\",\\\"cvc\\\":\\\"\\\",\\\"holderName\\\":\\\"\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\" \\  -d \"request[headers][0][name]\"=Destination-API-Key \\  -d \"request[headers][0][value]\"={{DESTINATION_API_KEY}} \\  -d \"request[headers][1][name]\"=Destination-Idempotency-Key \\  -d \"request[headers][1][value]\"={{DESTINATION_IDEMPOTENCY_KEY}}\n```\n\n```\n{  \"id\": \"fwdreq_123\",  \"object\": \"forwarding.request\",  \"created\": 1234567890,  \"livemode\": false,  \"payment_method\": \"pm_456\",  \"request_details\": {    \"body\": \"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"424242******4242\\\",\\\"expiryMonth\\\":\\\"03\\\",\\\"expiryYear\\\":\\\"2030\\\",\\\"cvc\\\":\\\"***\\\",\\\"holderName\\\":\\\"First Last\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\",    \"headers\": [      {        \"name\": \"Destination-API-Key\",        \"value\": \"{{DESTINATION_API_KEY}}\"      },      {        \"name\": \"Destination-Idempotency-Key\",        \"value\": \"{{DESTINATION_IDEMPOTENCY_KEY}}\"      },      {        \"name\": \"Content-Type\",        \"value\": \"application/json\"      }    ],    \"http_method\": \"POST\"  },  \"request_context\": {    \"destination_ip_address\": \"35.190.113.80\",    \"destination_duration\": 234  },  \"response_details\": {    \"body\": \"{\\\"transactionId\\\":\\\"example1234\\\"}\",    \"headers\": [      {        \"name\": \"Content-Type\",        \"value\": \"application/json;charset=UTF-8\"      }    ],    \"status\": 200  },  \"url\": \"https://endpoint-url/v1/payments\",  \"replacements\": [    \"card_number\",    \"card_expiry\",    \"card_cvc\",    \"cardholder_name\"  ]}\n```\n\n## [Retrieve a ForwardingRequest](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)\n\nRetrieves a ForwardingRequest object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a ForwardingRequest object.\n\nGET /v1/forwarding/requests/:id\n\n```\ncurl https://api.stripe.com/v1/forwarding/requests/fwdreq_123 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fwdreq_123\",  \"object\": \"forwarding.request\",  \"created\": 1234567890,  \"livemode\": false,  \"payment_method\": \"pm_456\",  \"request_details\": {    \"body\": \"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"424242******4242\\\",\\\"expiryMonth\\\":\\\"03\\\",\\\"expiryYear\\\":\\\"2030\\\",\\\"cvc\\\":\\\"***\\\",\\\"holderName\\\":\\\"First Last\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\",    \"headers\": [      {        \"name\": \"Destination-API-Key\",        \"value\": \"{{DESTINATION_API_KEY}}\"      },      {        \"name\": \"Destination-Idempotency-Key\",        \"value\": \"{{DESTINATION_IDEMPOTENCY_KEY}}\"      },      {        \"name\": \"Content-Type\",        \"value\": \"application/json\"      }    ],    \"http_method\": \"POST\"  },  \"request_context\": {    \"destination_ip_address\": \"35.190.113.80\",    \"destination_duration\": 234  },  \"response_details\": {    \"body\": \"{\\\"transactionId\\\":\\\"example1234\\\"}\",    \"headers\": [      {        \"name\": \"Content-Type\",        \"value\": \"application/json;charset=UTF-8\"      }    ],    \"status\": 200  },  \"url\": \"https://endpoint-url/v1/payments\",  \"replacements\": [    \"card_number\",    \"card_expiry\",    \"card_cvc\",    \"cardholder_name\"  ]}\n```\n\n## [List all ForwardingRequests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)\n\nLists all ForwardingRequest objects.\n\n### Parameters\n\n*   Similar to other List endpoints, filters results based on created timestamp. You can pass gt, gte, lt, and lte timestamp values.\n    \n*   A pagination cursor to fetch the previous page of the list. The value must be a ForwardingRequest ID.\n    \n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A pagination cursor to fetch the next page of the list. The value must be a ForwardingRequest ID.\n    \n\n### Returns\n\nReturns a list of ForwardingRequest objects.\n\nGET /v1/forwarding/requests\n\n```\ncurl -G https://api.stripe.com/v1/forwarding/requests \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/forwarding/requests\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fwdreq_123\",      \"object\": \"forwarding.request\",      \"created\": 1234567890,      \"livemode\": false,      \"payment_method\": \"pm_456\",      \"request_details\": {        \"body\": \"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"424242******4242\\\",\\\"expiryMonth\\\":\\\"03\\\",\\\"expiryYear\\\":\\\"2030\\\",\\\"cvc\\\":\\\"***\\\",\\\"holderName\\\":\\\"First Last\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\",        \"headers\": [          {            \"name\": \"Destination-API-Key\",            \"value\": \"{{DESTINATION_API_KEY}}\"          },          {            \"name\": \"Destination-Idempotency-Key\",            \"value\": \"{{DESTINATION_IDEMPOTENCY_KEY}}\"          },          {            \"name\": \"Content-Type\",            \"value\": \"application/json\"          }        ],        \"http_method\": \"POST\"      },      \"request_context\": {        \"destination_ip_address\": \"35.190.113.80\",        \"destination_duration\": 234      },      \"response_details\": {        \"body\": \"{\\\"transactionId\\\":\\\"example1234\\\"}\",        \"headers\": [          {            \"name\": \"Content-Type\",            \"value\": \"application/json;charset=UTF-8\"          }        ],        \"status\": 200      },      \"url\": \"https://endpoint-url/v1/payments\",      \"replacements\": [        \"card_number\",        \"card_expiry\",        \"card_cvc\",        \"cardholder_name\"      ]    }    {...}    {...}  ],}\n```",
  "title": "Forwarding Request | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/forwarding/forwarding_requests/create",
  "markdown": "# Create a ForwardingRequest | Stripe API Reference\n\nCreates a ForwardingRequest object.\n\n### Parameters\n\n*   #### \n    \n    payment\\_methodstringRequired\n    \n    The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed.\n    \n*   #### \n    \n    replacementsarray of enumsRequired\n    \n    The field kinds to be replaced in the forwarded request.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `card_cvc`<br><br>Replace the card cvc field |\n    | `card_expiry`<br><br>Replace the card expiry fields like month and year |\n    | `card_number`<br><br>Replace the card number field |\n    | `cardholder_name`<br><br>Replace the cardholder name field |\n    \n*   The request body and headers to be sent to the destination endpoint.\n    \n*   The destination URL for the forwarded request. Must be supported by the config.\n    \n\n### Returns\n\nReturns a ForwardingRequest object.\n\nPOST /v1/forwarding/requests\n\n```\ncurl https://api.stripe.com/v1/forwarding/requests \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode url=\"https://endpoint-url/v1/payments\" \\  -d payment_method=pm_card_visa \\  -d \"replacements[0]\"=card_number \\  -d \"replacements[1]\"=card_expiry \\  -d \"replacements[2]\"=card_cvc \\  -d \"replacements[3]\"=cardholder_name \\  --data-urlencode \"request[body]\"=\"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"\\\",\\\"expiryMonth\\\":\\\"\\\",\\\"expiryYear\\\":\\\"\\\",\\\"cvc\\\":\\\"\\\",\\\"holderName\\\":\\\"\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\" \\  -d \"request[headers][0][name]\"=Destination-API-Key \\  -d \"request[headers][0][value]\"={{DESTINATION_API_KEY}} \\  -d \"request[headers][1][name]\"=Destination-Idempotency-Key \\  -d \"request[headers][1][value]\"={{DESTINATION_IDEMPOTENCY_KEY}}\n```\n\n```\n{  \"id\": \"fwdreq_123\",  \"object\": \"forwarding.request\",  \"created\": 1234567890,  \"livemode\": false,  \"payment_method\": \"pm_456\",  \"request_details\": {    \"body\": \"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"424242******4242\\\",\\\"expiryMonth\\\":\\\"03\\\",\\\"expiryYear\\\":\\\"2030\\\",\\\"cvc\\\":\\\"***\\\",\\\"holderName\\\":\\\"First Last\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\",    \"headers\": [      {        \"name\": \"Destination-API-Key\",        \"value\": \"{{DESTINATION_API_KEY}}\"      },      {        \"name\": \"Destination-Idempotency-Key\",        \"value\": \"{{DESTINATION_IDEMPOTENCY_KEY}}\"      },      {        \"name\": \"Content-Type\",        \"value\": \"application/json\"      }    ],    \"http_method\": \"POST\"  },  \"request_context\": {    \"destination_ip_address\": \"35.190.113.80\",    \"destination_duration\": 234  },  \"response_details\": {    \"body\": \"{\\\"transactionId\\\":\\\"example1234\\\"}\",    \"headers\": [      {        \"name\": \"Content-Type\",        \"value\": \"application/json;charset=UTF-8\"      }    ],    \"status\": 200  },  \"url\": \"https://endpoint-url/v1/payments\",  \"replacements\": [    \"card_number\",    \"card_expiry\",    \"card_cvc\",    \"cardholder_name\"  ]}\n```\n\n## [Retrieve a ForwardingRequest](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)\n\nRetrieves a ForwardingRequest object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a ForwardingRequest object.\n\nGET /v1/forwarding/requests/:id\n\n```\ncurl https://api.stripe.com/v1/forwarding/requests/fwdreq_123 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fwdreq_123\",  \"object\": \"forwarding.request\",  \"created\": 1234567890,  \"livemode\": false,  \"payment_method\": \"pm_456\",  \"request_details\": {    \"body\": \"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"424242******4242\\\",\\\"expiryMonth\\\":\\\"03\\\",\\\"expiryYear\\\":\\\"2030\\\",\\\"cvc\\\":\\\"***\\\",\\\"holderName\\\":\\\"First Last\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\",    \"headers\": [      {        \"name\": \"Destination-API-Key\",        \"value\": \"{{DESTINATION_API_KEY}}\"      },      {        \"name\": \"Destination-Idempotency-Key\",        \"value\": \"{{DESTINATION_IDEMPOTENCY_KEY}}\"      },      {        \"name\": \"Content-Type\",        \"value\": \"application/json\"      }    ],    \"http_method\": \"POST\"  },  \"request_context\": {    \"destination_ip_address\": \"35.190.113.80\",    \"destination_duration\": 234  },  \"response_details\": {    \"body\": \"{\\\"transactionId\\\":\\\"example1234\\\"}\",    \"headers\": [      {        \"name\": \"Content-Type\",        \"value\": \"application/json;charset=UTF-8\"      }    ],    \"status\": 200  },  \"url\": \"https://endpoint-url/v1/payments\",  \"replacements\": [    \"card_number\",    \"card_expiry\",    \"card_cvc\",    \"cardholder_name\"  ]}\n```\n\n## [List all ForwardingRequests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)\n\nLists all ForwardingRequest objects.\n\n### Parameters\n\n*   Similar to other List endpoints, filters results based on created timestamp. You can pass gt, gte, lt, and lte timestamp values.\n    \n*   A pagination cursor to fetch the previous page of the list. The value must be a ForwardingRequest ID.\n    \n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A pagination cursor to fetch the next page of the list. The value must be a ForwardingRequest ID.\n    \n\n### Returns\n\nReturns a list of ForwardingRequest objects.\n\nGET /v1/forwarding/requests\n\n```\ncurl -G https://api.stripe.com/v1/forwarding/requests \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/forwarding/requests\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fwdreq_123\",      \"object\": \"forwarding.request\",      \"created\": 1234567890,      \"livemode\": false,      \"payment_method\": \"pm_456\",      \"request_details\": {        \"body\": \"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"424242******4242\\\",\\\"expiryMonth\\\":\\\"03\\\",\\\"expiryYear\\\":\\\"2030\\\",\\\"cvc\\\":\\\"***\\\",\\\"holderName\\\":\\\"First Last\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\",        \"headers\": [          {            \"name\": \"Destination-API-Key\",            \"value\": \"{{DESTINATION_API_KEY}}\"          },          {            \"name\": \"Destination-Idempotency-Key\",            \"value\": \"{{DESTINATION_IDEMPOTENCY_KEY}}\"          },          {            \"name\": \"Content-Type\",            \"value\": \"application/json\"          }        ],        \"http_method\": \"POST\"      },      \"request_context\": {        \"destination_ip_address\": \"35.190.113.80\",        \"destination_duration\": 234      },      \"response_details\": {        \"body\": \"{\\\"transactionId\\\":\\\"example1234\\\"}\",        \"headers\": [          {            \"name\": \"Content-Type\",            \"value\": \"application/json;charset=UTF-8\"          }        ],        \"status\": 200      },      \"url\": \"https://endpoint-url/v1/payments\",      \"replacements\": [        \"card_number\",        \"card_expiry\",        \"card_cvc\",        \"cardholder_name\"      ]    }    {...}    {...}  ],}\n```",
  "title": "Create a ForwardingRequest | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve",
  "markdown": "# Retrieve a ForwardingRequest | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fforwarding%2Fforwarding_requests%2Fretrieve)\n\nRetrieves a ForwardingRequest object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a ForwardingRequest object.\n\nGET /v1/forwarding/requests/:id\n\n```\ncurl https://api.stripe.com/v1/forwarding/requests/fwdreq_123 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fwdreq_123\",  \"object\": \"forwarding.request\",  \"created\": 1234567890,  \"livemode\": false,  \"payment_method\": \"pm_456\",  \"request_details\": {    \"body\": \"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"424242******4242\\\",\\\"expiryMonth\\\":\\\"03\\\",\\\"expiryYear\\\":\\\"2030\\\",\\\"cvc\\\":\\\"***\\\",\\\"holderName\\\":\\\"First Last\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\",    \"headers\": [      {        \"name\": \"Destination-API-Key\",        \"value\": \"{{DESTINATION_API_KEY}}\"      },      {        \"name\": \"Destination-Idempotency-Key\",        \"value\": \"{{DESTINATION_IDEMPOTENCY_KEY}}\"      },      {        \"name\": \"Content-Type\",        \"value\": \"application/json\"      }    ],    \"http_method\": \"POST\"  },  \"request_context\": {    \"destination_ip_address\": \"35.190.113.80\",    \"destination_duration\": 234  },  \"response_details\": {    \"body\": \"{\\\"transactionId\\\":\\\"example1234\\\"}\",    \"headers\": [      {        \"name\": \"Content-Type\",        \"value\": \"application/json;charset=UTF-8\"      }    ],    \"status\": 200  },  \"url\": \"https://endpoint-url/v1/payments\",  \"replacements\": [    \"card_number\",    \"card_expiry\",    \"card_cvc\",    \"cardholder_name\"  ]}\n```\n\n## [List all ForwardingRequests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)\n\nLists all ForwardingRequest objects.\n\n### Parameters\n\n*   Similar to other List endpoints, filters results based on created timestamp. You can pass gt, gte, lt, and lte timestamp values.\n    \n*   A pagination cursor to fetch the previous page of the list. The value must be a ForwardingRequest ID.\n    \n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A pagination cursor to fetch the next page of the list. The value must be a ForwardingRequest ID.\n    \n\n### Returns\n\nReturns a list of ForwardingRequest objects.\n\nGET /v1/forwarding/requests\n\n```\ncurl -G https://api.stripe.com/v1/forwarding/requests \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/forwarding/requests\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fwdreq_123\",      \"object\": \"forwarding.request\",      \"created\": 1234567890,      \"livemode\": false,      \"payment_method\": \"pm_456\",      \"request_details\": {        \"body\": \"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"424242******4242\\\",\\\"expiryMonth\\\":\\\"03\\\",\\\"expiryYear\\\":\\\"2030\\\",\\\"cvc\\\":\\\"***\\\",\\\"holderName\\\":\\\"First Last\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\",        \"headers\": [          {            \"name\": \"Destination-API-Key\",            \"value\": \"{{DESTINATION_API_KEY}}\"          },          {            \"name\": \"Destination-Idempotency-Key\",            \"value\": \"{{DESTINATION_IDEMPOTENCY_KEY}}\"          },          {            \"name\": \"Content-Type\",            \"value\": \"application/json\"          }        ],        \"http_method\": \"POST\"      },      \"request_context\": {        \"destination_ip_address\": \"35.190.113.80\",        \"destination_duration\": 234      },      \"response_details\": {        \"body\": \"{\\\"transactionId\\\":\\\"example1234\\\"}\",        \"headers\": [          {            \"name\": \"Content-Type\",            \"value\": \"application/json;charset=UTF-8\"          }        ],        \"status\": 200      },      \"url\": \"https://endpoint-url/v1/payments\",      \"replacements\": [        \"card_number\",        \"card_expiry\",        \"card_cvc\",        \"cardholder_name\"      ]    }    {...}    {...}  ],}\n```",
  "title": "Retrieve a ForwardingRequest | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/forwarding/forwarding_requests/list",
  "markdown": "# List all ForwardingRequests | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fforwarding%2Fforwarding_requests%2Flist)\n\nLists all ForwardingRequest objects.\n\n### Parameters\n\n*   Similar to other List endpoints, filters results based on created timestamp. You can pass gt, gte, lt, and lte timestamp values.\n    \n*   A pagination cursor to fetch the previous page of the list. The value must be a ForwardingRequest ID.\n    \n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A pagination cursor to fetch the next page of the list. The value must be a ForwardingRequest ID.\n    \n\n### Returns\n\nReturns a list of ForwardingRequest objects.\n\nGET /v1/forwarding/requests\n\n```\ncurl -G https://api.stripe.com/v1/forwarding/requests \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/forwarding/requests\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fwdreq_123\",      \"object\": \"forwarding.request\",      \"created\": 1234567890,      \"livemode\": false,      \"payment_method\": \"pm_456\",      \"request_details\": {        \"body\": \"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"424242******4242\\\",\\\"expiryMonth\\\":\\\"03\\\",\\\"expiryYear\\\":\\\"2030\\\",\\\"cvc\\\":\\\"***\\\",\\\"holderName\\\":\\\"First Last\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\",        \"headers\": [          {            \"name\": \"Destination-API-Key\",            \"value\": \"{{DESTINATION_API_KEY}}\"          },          {            \"name\": \"Destination-Idempotency-Key\",            \"value\": \"{{DESTINATION_IDEMPOTENCY_KEY}}\"          },          {            \"name\": \"Content-Type\",            \"value\": \"application/json\"          }        ],        \"http_method\": \"POST\"      },      \"request_context\": {        \"destination_ip_address\": \"35.190.113.80\",        \"destination_duration\": 234      },      \"response_details\": {        \"body\": \"{\\\"transactionId\\\":\\\"example1234\\\"}\",        \"headers\": [          {            \"name\": \"Content-Type\",            \"value\": \"application/json;charset=UTF-8\"          }        ],        \"status\": 200      },      \"url\": \"https://endpoint-url/v1/payments\",      \"replacements\": [        \"card_number\",        \"card_expiry\",        \"card_cvc\",        \"cardholder_name\"      ]    }    {...}    {...}  ],}\n```",
  "title": "List all ForwardingRequests | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/climate/order/list",
  "markdown": "# List orders | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fclimate%2Forder%2Flist)\n\nLists all Climate order objects. The orders are returned sorted by creation date, with the most recently created orders appearing first.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` orders, starting after order `starting_after`. Each entry in the array is a separate order object. If no more orders are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/climate/orders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/climate/orders\",  \"has_more\": false,  \"data\": [    {      \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",      \"object\": \"climate.order\",      \"amount_fees\": 17,      \"amount_subtotal\": 550,      \"amount_total\": 567,      \"beneficiary\": {        \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"      },      \"canceled_at\": null,      \"cancellation_reason\": null,      \"certificate\": null,      \"confirmed_at\": 1881439205,      \"created\": 1881439205,      \"currency\": \"usd\",      \"delayed_at\": null,      \"delivered_at\": null,      \"delivery_details\": [],      \"expected_delivery_year\": 2027,      \"livemode\": false,      \"metadata\": {},      \"metric_tons\": \"0.01\",      \"product\": \"climsku_frontier_offtake_portfolio_2027\",      \"product_substituted_at\": null,      \"status\": \"confirmed\"    }    {...}    {...}  ],}\n```\n\n## [Cancel an order](https://docs.stripe.com/api/climate/order/cancel)\n\nCancels a Climate order. You can cancel an order within 24 hours of creation. Stripe refunds the reservation `amount_subtotal`, but not the `amount_fees` for user-triggered cancellations. Frontier might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe provides 90 days advance notice and refunds the `amount_total`.\n\n### Parameters\n\n*   Unique identifier of the order.\n    \n\n### Returns\n\nThe canceled Climate order object.\n\nPOST /v1/climate/orders/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/climate/orders/climorder_1aTnU0B63jkB3XAQKUbA5yyl/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": 1881439208,  \"cancellation_reason\": \"requested\",  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {},  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"canceled\"}\n```\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List orders | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/webhook_endpoints/retrieve",
  "markdown": "# Retrieve a webhook endpoint | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fwebhook_endpoints%2Fretrieve)\n\nRetrieves the webhook endpoint with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a webhook endpoint if a valid webhook endpoint ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/webhook\\_endpoints/:id\n\n```\ncurl https://api.stripe.com/v1/webhook_endpoints/we_1Mr5jULkdIwHu7ix1ibLTM0x \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",  \"object\": \"webhook_endpoint\",  \"api_version\": null,  \"application\": null,  \"created\": 1680122196,  \"description\": null,  \"enabled_events\": [    \"charge.succeeded\",    \"charge.failed\"  ],  \"livemode\": false,  \"metadata\": {},  \"status\": \"enabled\",  \"url\": \"https://example.com/my/webhook/endpoint\"}\n```\n\n## [List all webhook endpoints](https://docs.stripe.com/api/webhook_endpoints/list)\n\nReturns a list of your webhook endpoints.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` webhook endpoints, starting after webhook endpoint `starting_after`. Each entry in the array is a separate webhook endpoint object. If no more webhook endpoints are available, the resulting array will be empty. This request should never raise an error.\n\nGET /v1/webhook\\_endpoints\n\n```\ncurl -G https://api.stripe.com/v1/webhook_endpoints \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/webhook_endpoints\",  \"has_more\": false,  \"data\": [    {      \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",      \"object\": \"webhook_endpoint\",      \"api_version\": null,      \"application\": null,      \"created\": 1680122196,      \"description\": null,      \"enabled_events\": [        \"charge.succeeded\",        \"charge.failed\"      ],      \"livemode\": false,      \"metadata\": {},      \"status\": \"enabled\",      \"url\": \"https://example.com/my/webhook/endpoint\"    }    {...}    {...}  ],}\n```\n\n## [Delete a webhook endpoint](https://docs.stripe.com/api/webhook_endpoints/delete)\n\nYou can also delete webhook endpoints via the [webhook endpoint management](https://dashboard.stripe.com/account/webhooks) page of the Stripe dashboard.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with the deleted webhook endpoints’s ID. Otherwise, this call raises [an error](#errors), such as if the webhook endpoint has already been deleted.\n\nDELETE /v1/webhook\\_endpoints/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/webhook_endpoints/we_1Mr5jULkdIwHu7ix1ibLTM0x \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",  \"object\": \"webhook_endpoint\",  \"deleted\": true}\n```",
  "title": "Retrieve a webhook endpoint | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/webhook_endpoints",
  "markdown": "# Webhook Endpoints | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fwebhook_endpoints)\n\n## [The Webhook Endpoint object](https://docs.stripe.com/api/webhook_endpoints/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    api\\_versionnullable string\n    \n    The API version events are rendered as for this webhook endpoint.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    An optional description of what the webhook is used for.\n    \n*   #### \n    \n    enabled\\_eventsarray of strings\n    \n    The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The endpoint’s secret, used to generate [webhook signatures](https://docs.stripe.com/webhooks/signatures). Only returned at creation.\n    \n*   The status of the webhook. It can be `enabled` or `disabled`.\n    \n*   The URL of the webhook endpoint.\n    \n\n### More attributes\n\n*   #### \n    \n    applicationnullable string\n    \n\nThe Webhook Endpoint object\n\n```\n{  \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",  \"object\": \"webhook_endpoint\",  \"api_version\": null,  \"application\": null,  \"created\": 1680122196,  \"description\": null,  \"enabled_events\": [    \"charge.succeeded\",    \"charge.failed\"  ],  \"livemode\": false,  \"metadata\": {},  \"secret\": \"whsec_wRNftLajMZNeslQOP6vEPm4iVx5NlZ6z\",  \"status\": \"enabled\",  \"url\": \"https://example.com/my/webhook/endpoint\"}\n```\n\n## [Create a webhook endpoint](https://docs.stripe.com/api/webhook_endpoints/create)\n\nA webhook endpoint must have a `url` and a list of `enabled_events`. You may optionally specify the Boolean `connect` parameter. If set to true, then a Connect webhook endpoint that notifies the specified `url` about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified `url` only about events from your account is created. You can also create webhook endpoints in the [webhooks settings](https://dashboard.stripe.com/account/webhooks) section of the Dashboard.\n\n### Parameters\n\n*   #### \n    \n    enabled\\_eventsarray of enumsRequired\n    \n    The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account.application.authorized`<br><br>Occurs whenever a user authorizes an application. Sent to the related application only. |\n    | `account.application.deauthorized`<br><br>Occurs whenever a user deauthorizes an application. Sent to the related application only. |\n    | `account.external_account.created`<br><br>Occurs whenever an external account is created. |\n    | `account.external_account.deleted`<br><br>Occurs whenever an external account is deleted. |\n    | `account.external_account.updated`<br><br>Occurs whenever an external account is updated. |\n    | `account.updated`<br><br>Occurs whenever an account status or property has changed. |\n    | `application_fee.created`<br><br>Occurs whenever an application fee is created on a charge. |\n    | `application_fee.refund.updated`<br><br>Occurs whenever an application fee refund is updated. |\n    | `application_fee.refunded`<br><br>Occurs whenever an application fee is refunded, whether from refunding a charge or from [refunding the application fee directly](#fee_refunds). This includes partial refunds. |\n    | `balance.available`<br><br>Occurs whenever your Stripe balance has been updated (e.g., when a charge is available to be paid out). By default, Stripe automatically transfers funds in your balance to your bank account on a daily basis. This event is not fired for negative transactions. |\n    | Show 336 more |\n    \n*   The URL of the webhook endpoint.\n    \n*   Events sent to this endpoint will be generated with this Stripe Version instead of your account’s default Stripe Version.\n    \n*   An optional description of what the webhook is used for.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns the webhook endpoint object with the `secret` field populated.\n\nPOST /v1/webhook\\_endpoints\n\n```\ncurl https://api.stripe.com/v1/webhook_endpoints \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"enabled_events[]\"=\"charge.succeeded\" \\  -d \"enabled_events[]\"=\"charge.failed\" \\  --data-urlencode url=\"https://example.com/my/webhook/endpoint\"\n```\n\n```\n{  \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",  \"object\": \"webhook_endpoint\",  \"api_version\": null,  \"application\": null,  \"created\": 1680122196,  \"description\": null,  \"enabled_events\": [    \"charge.succeeded\",    \"charge.failed\"  ],  \"livemode\": false,  \"metadata\": {},  \"secret\": \"whsec_wRNftLajMZNeslQOP6vEPm4iVx5NlZ6z\",  \"status\": \"enabled\",  \"url\": \"https://example.com/my/webhook/endpoint\"}\n```\n\n## [Update a webhook endpoint](https://docs.stripe.com/api/webhook_endpoints/update)\n\nUpdates the webhook endpoint. You may edit the `url`, the list of `enabled_events`, and the status of your endpoint.\n\n### Parameters\n\n*   An optional description of what the webhook is used for.\n    \n*   #### \n    \n    enabled\\_eventsarray of enums\n    \n    The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account.application.authorized`<br><br>Occurs whenever a user authorizes an application. Sent to the related application only. |\n    | `account.application.deauthorized`<br><br>Occurs whenever a user deauthorizes an application. Sent to the related application only. |\n    | `account.external_account.created`<br><br>Occurs whenever an external account is created. |\n    | `account.external_account.deleted`<br><br>Occurs whenever an external account is deleted. |\n    | `account.external_account.updated`<br><br>Occurs whenever an external account is updated. |\n    | `account.updated`<br><br>Occurs whenever an account status or property has changed. |\n    | `application_fee.created`<br><br>Occurs whenever an application fee is created on a charge. |\n    | `application_fee.refund.updated`<br><br>Occurs whenever an application fee refund is updated. |\n    | `application_fee.refunded`<br><br>Occurs whenever an application fee is refunded, whether from refunding a charge or from [refunding the application fee directly](#fee_refunds). This includes partial refunds. |\n    | `balance.available`<br><br>Occurs whenever your Stripe balance has been updated (e.g., when a charge is available to be paid out). By default, Stripe automatically transfers funds in your balance to your bank account on a daily basis. This event is not fired for negative transactions. |\n    | Show 336 more |\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The URL of the webhook endpoint.\n    \n\n### More parameters\n\n### Returns\n\nThe updated webhook endpoint object if successful. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/webhook\\_endpoints/:id\n\n```\ncurl https://api.stripe.com/v1/webhook_endpoints/we_1Mr5jULkdIwHu7ix1ibLTM0x \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"enabled_events[]\"=\"charge.succeeded\" \\  -d \"enabled_events[]\"=\"charge.failed\" \\  --data-urlencode url=\"https://example.com/new_endpoint\"\n```\n\n```\n{  \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",  \"object\": \"webhook_endpoint\",  \"api_version\": null,  \"application\": null,  \"created\": 1680122196,  \"description\": null,  \"enabled_events\": [    \"charge.succeeded\",    \"charge.failed\"  ],  \"livemode\": false,  \"metadata\": {},  \"status\": \"disabled\",  \"url\": \"https://example.com/new_endpoint\"}\n```\n\n## [Retrieve a webhook endpoint](https://docs.stripe.com/api/webhook_endpoints/retrieve)\n\nRetrieves the webhook endpoint with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a webhook endpoint if a valid webhook endpoint ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/webhook\\_endpoints/:id\n\n```\ncurl https://api.stripe.com/v1/webhook_endpoints/we_1Mr5jULkdIwHu7ix1ibLTM0x \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",  \"object\": \"webhook_endpoint\",  \"api_version\": null,  \"application\": null,  \"created\": 1680122196,  \"description\": null,  \"enabled_events\": [    \"charge.succeeded\",    \"charge.failed\"  ],  \"livemode\": false,  \"metadata\": {},  \"status\": \"enabled\",  \"url\": \"https://example.com/my/webhook/endpoint\"}\n```",
  "title": "Webhook Endpoints | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/webhook_endpoints/list",
  "markdown": "# List all webhook endpoints | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fwebhook_endpoints%2Flist)\n\nReturns a list of your webhook endpoints.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` webhook endpoints, starting after webhook endpoint `starting_after`. Each entry in the array is a separate webhook endpoint object. If no more webhook endpoints are available, the resulting array will be empty. This request should never raise an error.\n\nGET /v1/webhook\\_endpoints\n\n```\ncurl -G https://api.stripe.com/v1/webhook_endpoints \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/webhook_endpoints\",  \"has_more\": false,  \"data\": [    {      \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",      \"object\": \"webhook_endpoint\",      \"api_version\": null,      \"application\": null,      \"created\": 1680122196,      \"description\": null,      \"enabled_events\": [        \"charge.succeeded\",        \"charge.failed\"      ],      \"livemode\": false,      \"metadata\": {},      \"status\": \"enabled\",      \"url\": \"https://example.com/my/webhook/endpoint\"    }    {...}    {...}  ],}\n```\n\n## [Delete a webhook endpoint](https://docs.stripe.com/api/webhook_endpoints/delete)\n\nYou can also delete webhook endpoints via the [webhook endpoint management](https://dashboard.stripe.com/account/webhooks) page of the Stripe dashboard.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with the deleted webhook endpoints’s ID. Otherwise, this call raises [an error](#errors), such as if the webhook endpoint has already been deleted.\n\nDELETE /v1/webhook\\_endpoints/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/webhook_endpoints/we_1Mr5jULkdIwHu7ix1ibLTM0x \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",  \"object\": \"webhook_endpoint\",  \"deleted\": true}\n```",
  "title": "List all webhook endpoints | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/webhook_endpoints/delete",
  "markdown": "# Delete a webhook endpoint | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fwebhook_endpoints%2Fdelete)\n\nYou can also delete webhook endpoints via the [webhook endpoint management](https://dashboard.stripe.com/account/webhooks) page of the Stripe dashboard.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with the deleted webhook endpoints’s ID. Otherwise, this call raises [an error](#errors), such as if the webhook endpoint has already been deleted.\n\nDELETE /v1/webhook\\_endpoints/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/webhook_endpoints/we_1Mr5jULkdIwHu7ix1ibLTM0x \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",  \"object\": \"webhook_endpoint\",  \"deleted\": true}\n```",
  "title": "Delete a webhook endpoint | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/sources/ach-credit-transfer",
  "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
  "title": "Page not found | Stripe Documentation",
  "description": "Sorry, but the page you were looking for couldn't be found.",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/payment_intents/confirm_payment",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/api/events/types?lang=php",
  "markdown": "# Types of events | Stripe API Reference\n\n*   #### \n    \n    account.application.authorized`data.object` is an application\n    \n    Occurs whenever a user authorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.application.deauthorized`data.object` is an application\n    \n    Occurs whenever a user deauthorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.external\\_account.created`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is created.\n    \n*   #### \n    \n    account.external\\_account.deleted`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is deleted.\n    \n*   #### \n    \n    account.external\\_account.updated`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is updated.\n    \n*   #### \n    \n    account.updated`data.object` is an [account](#account_object)\n    \n    Occurs whenever an account status or property has changed.\n    \n*   #### \n    \n    application\\_fee.created`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is created on a charge.\n    \n*   #### \n    \n    application\\_fee.refund.updated`data.object` is a [fee refund](#fee_refund_object)\n    \n    Occurs whenever an application fee refund is updated.\n    \n*   #### \n    \n    application\\_fee.refunded`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is refunded, whether from refunding a charge or from [refunding the application fee directly](#fee_refunds). This includes partial refunds.\n    \n*   #### \n    \n    balance.available`data.object` is a [balance](#balance_object)\n    \n    Occurs whenever your Stripe balance has been updated (e.g., when a charge is available to be paid out). By default, Stripe automatically transfers funds in your balance to your bank account on a daily basis. This event is not fired for negative transactions.\n    \n*   #### \n    \n    billing\\_portal.configuration.created`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is created.\n    \n*   #### \n    \n    billing\\_portal.configuration.updated`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is updated.\n    \n*   #### \n    \n    billing\\_portal.session.created`data.object` is a [billing portal session](#portal_session_object)\n    \n    Occurs whenever a portal session is created.\n    \n*   #### \n    \n    capability.updated`data.object` is a [capability](#capability_object)\n    \n    Occurs whenever a capability has new requirements or a new status.\n    \n*   #### \n    \n    cash\\_balance.funds\\_available`data.object` is a [cash balance](#cash_balance_object)\n    \n    Occurs whenever there is a positive remaining cash balance after Stripe automatically reconciles new funds into the cash balance. If you enabled manual reconciliation, this webhook will fire whenever there are new funds into the cash balance.\n    \n*   #### \n    \n    charge.captured`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a previously uncaptured charge is captured.\n    \n*   #### \n    \n    charge.dispute.closed`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when a dispute is closed and the dispute status changes to `lost`, `warning_closed`, or `won`.\n    \n*   #### \n    \n    charge.dispute.created`data.object` is a [dispute](#dispute_object)\n    \n    Occurs whenever a customer disputes a charge with their bank.\n    \n*   #### \n    \n    charge.dispute.funds\\_reinstated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are reinstated to your account after a dispute is closed. This includes [partially refunded payments](https://docs.stripe.com/disputes#disputes-on-partially-refunded-payments).\n    \n*   #### \n    \n    charge.dispute.funds\\_withdrawn`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are removed from your account due to a dispute.\n    \n*   #### \n    \n    charge.dispute.updated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when the dispute is updated (usually with evidence).\n    \n*   #### \n    \n    charge.expired`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever an uncaptured charge expires.\n    \n*   #### \n    \n    charge.failed`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a failed charge attempt occurs.\n    \n*   #### \n    \n    charge.pending`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a pending charge is created.\n    \n*   #### \n    \n    charge.refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund is updated, on selected payment methods.\n    \n*   #### \n    \n    charge.refunded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is refunded, including partial refunds.\n    \n*   #### \n    \n    charge.succeeded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is successful.\n    \n*   #### \n    \n    charge.updated`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge description or metadata is updated, or upon an asynchronous capture.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_failed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method fails.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_succeeded`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method finally succeeds.\n    \n*   #### \n    \n    checkout.session.completed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session has been successfully completed.\n    \n*   #### \n    \n    checkout.session.expired`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session is expired.\n    \n*   #### \n    \n    climate.order.canceled`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is canceled.\n    \n*   #### \n    \n    climate.order.created`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is created.\n    \n*   #### \n    \n    climate.order.delayed`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delayed.\n    \n*   #### \n    \n    climate.order.delivered`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delivered.\n    \n*   #### \n    \n    climate.order.product\\_substituted`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order’s product is substituted for another.\n    \n*   #### \n    \n    climate.product.created`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is created.\n    \n*   #### \n    \n    climate.product.pricing\\_updated`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is updated.\n    \n*   #### \n    \n    coupon.created`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is created.\n    \n*   #### \n    \n    coupon.deleted`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is deleted.\n    \n*   #### \n    \n    coupon.updated`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is updated.\n    \n*   #### \n    \n    credit\\_note.created`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is created.\n    \n*   #### \n    \n    credit\\_note.updated`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is updated.\n    \n*   #### \n    \n    credit\\_note.voided`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is voided.\n    \n*   #### \n    \n    customer\\_cash\\_balance\\_transaction.created`data.object` is a [customer cash balance transaction](#customer_cash_balance_transaction_object)\n    \n    Occurs whenever a new customer cash balance transactions is created.\n    \n*   #### \n    \n    customer.created`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a new customer is created.\n    \n*   #### \n    \n    customer.deleted`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a customer is deleted.\n    \n*   #### \n    \n    customer.discount.created`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is attached to a customer.\n    \n*   #### \n    \n    customer.discount.deleted`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is removed from a customer.\n    \n*   #### \n    \n    customer.discount.updated`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a customer is switched from one coupon to another.\n    \n*   #### \n    \n    customer.source.created`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a new source is created for a customer.\n    \n*   #### \n    \n    customer.source.deleted`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is removed from a customer.\n    \n*   #### \n    \n    customer.source.expiring`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a card or source will expire at the end of the month. This event only works with legacy integrations using Card or Source objects. If you use the PaymentMethod API, this event won’t occur.\n    \n*   #### \n    \n    customer.source.updated`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source’s details are changed.\n    \n*   #### \n    \n    customer.subscription.created`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer is signed up for a new plan.\n    \n*   #### \n    \n    customer.subscription.deleted`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription ends.\n    \n*   #### \n    \n    customer.subscription.paused`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is paused. Only applies when subscriptions enter `status=paused`, not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is paused.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_applied`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update is applied, and the subscription is updated.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_expired`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update expires before the related invoice is paid.\n    \n*   #### \n    \n    customer.subscription.resumed`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is no longer paused. Only applies when a `status=paused` subscription is [resumed](https://docs.stripe.com/api/subscriptions/resume), not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is resumed.\n    \n*   #### \n    \n    customer.subscription.trial\\_will\\_end`data.object` is a [subscription](#subscription_object)\n    \n    Occurs three days before a subscription’s trial period is scheduled to end, or when a trial is ended immediately (using `trial_end=now`).\n    \n*   #### \n    \n    customer.subscription.updated`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active).\n    \n*   #### \n    \n    customer.tax\\_id.created`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is created for a customer.\n    \n*   #### \n    \n    customer.tax\\_id.deleted`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is deleted from a customer.\n    \n*   #### \n    \n    customer.tax\\_id.updated`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a customer’s tax ID is updated.\n    \n*   #### \n    \n    customer.updated`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever any property of a customer changes.\n    \n*   #### \n    \n    entitlements.active\\_entitlement\\_summary.updated`data.object` is an entitlements active entitlement summary\n    \n    Occurs whenever a customer’s entitlements change.\n    \n*   #### \n    \n    file.created`data.object` is a [file](#file_object)\n    \n    Occurs whenever a new Stripe-generated file is available for your account.\n    \n*   #### \n    \n    financial\\_connections.account.created`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a new Financial Connections account is created.\n    \n*   #### \n    \n    financial\\_connections.account.deactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `active` to `inactive`.\n    \n*   #### \n    \n    financial\\_connections.account.disconnected`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account is disconnected.\n    \n*   #### \n    \n    financial\\_connections.account.reactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `inactive` to `active`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_balance`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `balance_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_ownership`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `ownership_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_transactions`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `transaction_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    identity.verification\\_session.canceled`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is canceled\n    \n*   #### \n    \n    identity.verification\\_session.created`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is created\n    \n*   #### \n    \n    identity.verification\\_session.processing`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to processing\n    \n*   #### \n    \n    identity.verification\\_session.redacted`data.object` is an [identity verification session](#identity_verification_session_object)Selection required\n    \n    Occurs whenever a VerificationSession is redacted.\n    \n*   #### \n    \n    identity.verification\\_session.requires\\_input`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to require user input\n    \n*   #### \n    \n    identity.verification\\_session.verified`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to verified\n    \n*   #### \n    \n    invoice.created`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a new invoice is created. To learn how webhooks can be used with this event, and how they can affect it, see [Using Webhooks with Subscriptions](https://docs.stripe.com/subscriptions/webhooks).\n    \n*   #### \n    \n    invoice.deleted`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is deleted. Note: This event is not sent for [invoice previews](https://docs.stripe.com/api/invoices/create_preview).\n    \n*   #### \n    \n    invoice.finalization\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice cannot be finalized. See the invoice’s [last finalization error](https://docs.stripe.com/api/invoices/object#invoice_object-last_finalization_error) for details.\n    \n*   #### \n    \n    invoice.finalized`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is finalized and updated to be an open invoice.\n    \n*   #### \n    \n    invoice.marked\\_uncollectible`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is marked uncollectible.\n    \n*   #### \n    \n    invoice.overdue`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days after an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoice.paid`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band.\n    \n*   #### \n    \n    invoice.payment\\_action\\_required`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt requires further user action to complete.\n    \n*   #### \n    \n    invoice.payment\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method.\n    \n*   #### \n    \n    invoice.payment\\_succeeded`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds.\n    \n*   #### \n    \n    invoice.sent`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice email is sent out.\n    \n*   #### \n    \n    invoice.upcoming`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). Note: The received `Invoice` object will not have an invoice ID.\n    \n*   #### \n    \n    invoice.updated`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice changes (e.g., the invoice amount).\n    \n*   #### \n    \n    invoice.voided`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is voided.\n    \n*   #### \n    \n    invoice.will\\_be\\_due`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoiceitem.created`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is created.\n    \n*   #### \n    \n    invoiceitem.deleted`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is deleted.\n    \n*   #### \n    \n    issuing\\_authorization.created`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is created.\n    \n*   #### \n    \n    issuing\\_authorization.request`data.object` is an [issuing authorization](#issuing_authorization_object)Selection required\n    \n*   #### \n    \n    issuing\\_authorization.updated`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is updated.\n    \n*   #### \n    \n    issuing\\_card.created`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is created.\n    \n*   #### \n    \n    issuing\\_card.updated`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is updated.\n    \n*   #### \n    \n    issuing\\_cardholder.created`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is created.\n    \n*   #### \n    \n    issuing\\_cardholder.updated`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is updated.\n    \n*   #### \n    \n    issuing\\_dispute.closed`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is won, lost or expired.\n    \n*   #### \n    \n    issuing\\_dispute.created`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is created.\n    \n*   #### \n    \n    issuing\\_dispute.funds\\_reinstated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever funds are reinstated to your account for an Issuing dispute.\n    \n*   #### \n    \n    issuing\\_dispute.submitted`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is submitted.\n    \n*   #### \n    \n    issuing\\_dispute.updated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is updated.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.activated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is activated following the activation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.deactivated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is deactivated following the deactivation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.rejected`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is rejected by design review.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.updated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is updated.\n    \n*   #### \n    \n    issuing\\_token.created`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is created.\n    \n*   #### \n    \n    issuing\\_token.updated`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is updated.\n    \n*   #### \n    \n    issuing\\_transaction.created`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is created.\n    \n*   #### \n    \n    issuing\\_transaction.updated`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is updated.\n    \n*   #### \n    \n    mandate.updated`data.object` is a [mandate](#mandate_object)\n    \n    Occurs whenever a Mandate is updated.\n    \n*   #### \n    \n    payment\\_intent.amount\\_capturable\\_updated`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has funds to be captured. Check the `amount_capturable` property on the PaymentIntent to determine the amount that can be captured. You may capture the PaymentIntent with an `amount_to_capture` value up to the specified amount. [Learn more about capturing PaymentIntents.](https://docs.stripe.com/api/payment_intents/capture)\n    \n*   #### \n    \n    payment\\_intent.canceled`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent is canceled.\n    \n*   #### \n    \n    payment\\_intent.created`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a new PaymentIntent is created.\n    \n*   #### \n    \n    payment\\_intent.partially\\_funded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when funds are applied to a customer\\_balance PaymentIntent and the ‘amount\\_remaining’ changes.\n    \n*   #### \n    \n    payment\\_intent.payment\\_failed`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment.\n    \n*   #### \n    \n    payment\\_intent.processing`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has started processing.\n    \n*   #### \n    \n    payment\\_intent.requires\\_action`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent transitions to requires\\_action state\n    \n*   #### \n    \n    payment\\_intent.succeeded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has successfully completed payment.\n    \n*   #### \n    \n    payment\\_link.created`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is created.\n    \n*   #### \n    \n    payment\\_link.updated`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is updated.\n    \n*   #### \n    \n    payment\\_method.attached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a new payment method is attached to a customer.\n    \n*   #### \n    \n    payment\\_method.automatically\\_updated`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method’s details are automatically updated by the network.\n    \n*   #### \n    \n    payment\\_method.detached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method is detached from a customer.\n    \n*   #### \n    \n    payment\\_method.updated`data.object` is a [payment method](#payment_method_object)\n    \n*   #### \n    \n    payout.canceled`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is canceled.\n    \n*   #### \n    \n    payout.created`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is created.\n    \n*   #### \n    \n    payout.failed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout attempt fails.\n    \n*   #### \n    \n    payout.paid`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is _expected_ to be available in the destination account. If the payout fails, a `payout.failed` notification is also sent, at a later time.\n    \n*   #### \n    \n    payout.reconciliation\\_completed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever balance transactions paid out in an automatic payout can be queried.\n    \n*   #### \n    \n    payout.updated`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is updated.\n    \n*   #### \n    \n    person.created`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is created.\n    \n*   #### \n    \n    person.deleted`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is deleted.\n    \n*   #### \n    \n    person.updated`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is updated.\n    \n*   #### \n    \n    plan.created`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is created.\n    \n*   #### \n    \n    plan.deleted`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is deleted.\n    \n*   #### \n    \n    plan.updated`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is updated.\n    \n*   #### \n    \n    price.created`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is created.\n    \n*   #### \n    \n    price.deleted`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is deleted.\n    \n*   #### \n    \n    price.updated`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is updated.\n    \n*   #### \n    \n    product.created`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is created.\n    \n*   #### \n    \n    product.deleted`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is deleted.\n    \n*   #### \n    \n    product.updated`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is updated.\n    \n*   #### \n    \n    promotion\\_code.created`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is created.\n    \n*   #### \n    \n    promotion\\_code.updated`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is updated.\n    \n*   #### \n    \n    quote.accepted`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is accepted.\n    \n*   #### \n    \n    quote.canceled`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is canceled.\n    \n*   #### \n    \n    quote.created`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is created.\n    \n*   #### \n    \n    quote.finalized`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is finalized.\n    \n*   #### \n    \n    quote.will\\_expire`data.object` is a [quote](#quote_object)\n    \n    Occurs X number of days before a quote is scheduled to expire—where X is determined by Automations\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.created`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is created.\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.updated`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is updated.\n    \n*   #### \n    \n    refund.created`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is created.\n    \n*   #### \n    \n    refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is updated.\n    \n*   #### \n    \n    reporting.report\\_run.failed`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` failed to complete.\n    \n*   #### \n    \n    reporting.report\\_run.succeeded`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` completed successfully.\n    \n*   #### \n    \n    reporting.report\\_type.updated`data.object` is a [reporting report type](#reporting_report_type_object)Selection required\n    \n    Occurs whenever a `ReportType` is updated (typically to indicate that a new day’s data has come available).\n    \n*   #### \n    \n    review.closed`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is closed. The review’s `reason` field indicates why: `approved`, `disputed`, `refunded`, or `refunded_as_fraud`.\n    \n*   #### \n    \n    review.opened`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is opened.\n    \n*   #### \n    \n    setup\\_intent.canceled`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is canceled.\n    \n*   #### \n    \n    setup\\_intent.created`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a new SetupIntent is created.\n    \n*   #### \n    \n    setup\\_intent.requires\\_action`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is in requires\\_action state.\n    \n*   #### \n    \n    setup\\_intent.setup\\_failed`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent has failed the attempt to setup a payment method.\n    \n*   #### \n    \n    setup\\_intent.succeeded`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when an SetupIntent has successfully setup a payment method.\n    \n*   #### \n    \n    sigma.scheduled\\_query\\_run.created`data.object` is a [scheduled query run](#scheduled_query_run_object)\n    \n    Occurs whenever a Sigma scheduled query run finishes.\n    \n*   #### \n    \n    source.canceled`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is canceled.\n    \n*   #### \n    \n    source.chargeable`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source transitions to chargeable.\n    \n*   #### \n    \n    source.failed`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source fails.\n    \n*   #### \n    \n    source.mandate\\_notification`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source mandate notification method is set to manual.\n    \n*   #### \n    \n    source.refund\\_attributes\\_required`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever the refund attributes are required on a receiver source to process a refund or a mispayment.\n    \n*   Occurs whenever a source transaction is created.\n    \n*   Occurs whenever a source transaction is updated.\n    \n*   #### \n    \n    subscription\\_schedule.aborted`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled due to the underlying subscription being canceled because of delinquency.\n    \n*   #### \n    \n    subscription\\_schedule.canceled`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled.\n    \n*   #### \n    \n    subscription\\_schedule.completed`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is completed.\n    \n*   #### \n    \n    subscription\\_schedule.created`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is created.\n    \n*   #### \n    \n    subscription\\_schedule.expiring`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs 7 days before a subscription schedule will expire.\n    \n*   #### \n    \n    subscription\\_schedule.released`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is released.\n    \n*   #### \n    \n    subscription\\_schedule.updated`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is updated.\n    \n*   #### \n    \n    tax\\_rate.created`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a new tax rate is created.\n    \n*   #### \n    \n    tax\\_rate.updated`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a tax rate is updated.\n    \n*   #### \n    \n    tax.settings.updated`data.object` is a [tax settings](#tax_settings_object)\n    \n    Occurs whenever tax settings is updated.\n    \n*   #### \n    \n    terminal.reader.action\\_failed`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader failed.\n    \n*   #### \n    \n    terminal.reader.action\\_succeeded`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader was successful.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.advancing`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock starts advancing.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.created`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is created.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.deleted`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is deleted.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.internal\\_failure`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock fails to advance its frozen time.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.ready`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock transitions to a ready status.\n    \n*   #### \n    \n    topup.canceled`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is canceled.\n    \n*   #### \n    \n    topup.created`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is created.\n    \n*   #### \n    \n    topup.failed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up fails.\n    \n*   #### \n    \n    topup.reversed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is reversed.\n    \n*   #### \n    \n    topup.succeeded`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up succeeds.\n    \n*   #### \n    \n    transfer.created`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is created.\n    \n*   #### \n    \n    transfer.reversed`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is reversed, including partial reversals.\n    \n*   #### \n    \n    transfer.updated`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer’s description or metadata is updated.",
  "title": "Types of events | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/apple-pay/merchant-tokens?pay-element=web-pe",
  "markdown": "# Apple Pay merchant tokens | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Apple Pay merchant tokens for recurring, deferred, and automatic reload payments.\n\nAn [Apple Pay merchant token (MPAN)](https://developer.apple.com/apple-pay/merchant-tokens/) ties together a payment card, a business, and a customer, and enables the wallet holder to manage access to a card stored in their Apple wallet. Apple Pay’s latest guidelines recommend merchant tokens over device tokens (DPANs) because merchant tokens:\n\n*   Allow for continuity across multiple devices\n*   Enable recurring payments independent of a device\n*   Keep payment information active in a new device even when its removed from a lost or stolen device\n*   Come with lifecycle management features to monitor changes to a token or to see if a token has been revoked\n\n## Merchant token types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use Apple Pay to request an MPAN in three ways. Each type of request has different parameters that affect how the user is presented with Apple Wallet. Almost all request types provide the option to supply a `managementURL`, which routes customers to a webpage to manage their payment methods. If you request an MPAN and the issuer supports MPAN generation, you receive an MPAN. Otherwise, you receive a DPAN.\n\n| MPAN request type | Use case | Support |\n| --- | --- | --- |\n| Recurring [PKRecurringPaymentRequest](https://developer.apple.com/documentation/passkit/pkrecurringpaymentrequest) | Issues an MPAN for use in a recurring payment such as a subscription. | *   [Apple Pay on the Web](https://developer.apple.com/documentation/apple_pay_on_the_web)<br>*   iOS > v16.0 |\n| Automatic reload [PKAutomaticReloadPaymentRequest](https://developer.apple.com/documentation/passkit/pkautomaticreloadpaymentrequest) | Issues an MPAN for use in a store card top-up or prepaid account. Supported parameters:<br><br>*   `automaticReloadBilling` shows billing details when you present Apple Pay. | *   [Apple Pay on the Web](https://developer.apple.com/documentation/apple_pay_on_the_web)<br>*   iOS > v16.0 |\n| Deferred payment [PKDeferredPaymentRequest](https://developer.apple.com/documentation/passkit/pkdeferredpaymentrequest) | Issues an MPAN for use in reservations such as hotels. Supported parameters:<br><br>*   `freeCancellationDate` shows the cancellation deadline when you present Apple Pay.<br>*   `billingAgreement` shows the terms of service when you present Apple Pay. | *   [Apple Pay on the Web](https://developer.apple.com/documentation/apple_pay_on_the_web)<br>*   Xcode 14.3<br>*   iOS > v16.4 |\n\n## Add Apple Pay merchant tokens![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can add a [merchant token](https://developer.apple.com/apple-pay/merchant-tokens/) when presenting Apple Pay in the Express Checkout Element, web Payment Element, and mobile Payment Element. Stripe automatically handles merchant token requests in Stripe Checkout integrations.\n\n1.  Set up [Express Checkout Element integration](https://docs.stripe.com/elements/express-checkout-element/accept-a-payment).\n2.  Implement an event handler for the `click` event on the Express Checkout Element.\n3.  Pass the `applePay` object relevant to your MPAN use case (choose from the drop-down to see use case code samples).\n4.  Include relevant parameters for your use case.\n\n`expressCheckoutElement.on(\"click\", (e) => {   const options = {     applePay: {       recurringPaymentRequest: {         paymentDescription: \"Standard Subscription\",         regularBilling: {           amount: 1000,           label: \"Standard Package\",           recurringPaymentStartDate: new Date(\"2023-03-31\"),           recurringPaymentEndDate: new Date(\"2024-03-31\"),           recurringPaymentIntervalUnit: \"year\",           recurringPaymentIntervalCount: 1,         },         billingAgreement: \"billing agreement\",         managementURL: \"[https://stripe.com](https://stripe.com/)\",       },     },   };   e.resolve(options); });`\n\n## Merchant token auth rate monitoring![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor Sigma users, the `charges` table contains a `card_token_type` enum field to indicate the charge is using an `mpan` or `dpan` card. The following Sigma query example calculates the MPAN auth rate:\n\n`-- deduplicated MPAN auth rate select   100.0 * count(     case       when charge_outcome in ('authorized', 'manual_review') then 1     end   ) / count(*) as deduplicated_auth_rate_pct,   count(*) as n_attempts from   authentication_report_attempts a   join charges c on c.id = a.charge_id where   c.created >= date('2021-01-01')   and c.card_tokenization_method = 'apple_pay'   -- The new field added to charges table.   and c.card_token_type = 'mpan'   -- deduplicate multiple manual retries to a single representative charge   and is_final_attempt`",
  "title": "Apple Pay merchant tokens | Stripe Documentation",
  "description": "Learn how to use Apple Pay merchant tokens for recurring, deferred, and automatic reload payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-js/reference",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/elements/address-element?platform=ios",
  "markdown": "# Address Element | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Address Element to collect complete billing and shipping addresses.\n\n## Overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Address Element is an embeddable UI component for accepting complete addresses. Use it to collect shipping addresses, or when you need a complete billing address, such as for tax purposes.\n\nFeatures include:\n\n*   **Global support**: Support 236 regional address formats, including right-to-left address formats\n*   **Autocomplete**: Decrease checkout time, reduce validation errors, and increase checkout conversion with built-in address autocomplete\n*   **Prefill saved addresses**: Prefill addresses at page load when you already have an address saved for your customer\n*   **Customized appearance**: Customize the Address Element to match your page design with the [Appearance API](https://docs.stripe.com/elements/appearance-api)\n*   **Seamless Elements integration**: Reuse an existing Elements instance to save time, and pass data automatically with the Payment Element and Link\n*   **Support for any device**: Available for web, iOS, Android, and React Native mobile SDKs\n\n![Examples of a checkout process where a user selects the Add Shipping Address option. Then they're taken to a new screen to add their shipping address into a form. As they type in their address, auto-complete suggestions are presented for them to choose from.](https://b.stripecdn.com/docs-statics-srv/assets/ios-overview.4e83bb4e46fd7d131b5c4ff8abee27ea.png)\n\n## Start with a guide![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Address Element | Stripe Documentation",
  "description": "Use the Address Element to collect complete billing and shipping addresses.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/elements/address-element?platform=android",
  "markdown": "# Address Element | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Address Element to collect complete billing and shipping addresses.\n\n## Overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Address Element is an embeddable UI component for accepting complete addresses. Use it to collect shipping addresses, or when you need a complete billing address, such as for tax purposes.\n\nFeatures include:\n\n*   **Global support**: Support 236 regional address formats, including right-to-left address formats\n*   **Autocomplete**: Decrease checkout time, reduce validation errors, and increase checkout conversion with built-in address autocomplete\n*   **Prefill saved addresses**: Prefill addresses at page load when you already have an address saved for your customer\n*   **Customized appearance**: Customize the Address Element to match your page design with the [Appearance API](https://docs.stripe.com/elements/appearance-api)\n*   **Seamless Elements integration**: Reuse an existing Elements instance to save time, and pass data automatically with the Payment Element and Link\n*   **Support for any device**: Available for web, iOS, Android, and React Native mobile SDKs\n\n![Examples of a checkout process where a user selects the Add Shipping Address option. Then they're taken to a new screen to add their shipping address into a form. As they type in their address, auto-complete suggestions are presented for them to choose from.](https://b.stripecdn.com/docs-statics-srv/assets/android-overview.6061212dc737aa700b79242cb5f77782.png)\n\n## Start with a guide![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Address Element | Stripe Documentation",
  "description": "Use the Address Element to collect complete billing and shipping addresses.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/design-multiparty-platform",
  "markdown": "# Design a multiparty platform | Stripe DocumentationThe Stripe Docs logo\n\n## Design a Terminal integration with your business serving as a central platform.\n\nStripe Terminal is fully compatible with [Stripe Connect](https://docs.stripe.com/connect), enabling your platform or marketplace to accept in-person payments. If you aren’t familiar with Stripe Connect, we recommend going through the [Connect overview](https://docs.stripe.com/connect/overview).\n\nThere are two options for integrating Terminal with Connect, depending on [the account type you choose](https://docs.stripe.com/connect/accounts) for your platform’s connected accounts. To decide which option best suits your business’s needs, refer to the following table:\n\n## Express or Custom Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn a Connect integration with Express or Custom accounts, all API resources belong to the platform account. As needed, you can associate Terminal objects like [Readers](https://docs.stripe.com/api/terminal/readers) and [Locations](https://docs.stripe.com/api/terminal/locations) with a particular connected account by including them in the [metadata](https://docs.stripe.com/api/metadata) object on these resources.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/connect-custom-express-platform-architecture.fdc2dff12d1fcc3e74b6736f0ace2e7f.svg)\n\nWhen processing payments, you specify the connected account as the destination for the funds using the `on_behalf_of`, `transfer_data[destination]`, and `application_fee_amount` parameters. This creates a transfer to the connected account automatically and establishes the connected account as the merchant of record.\n\n## Standard Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn a Connect integration with Standard accounts, all API resources belong to individual connected accounts. When making API requests such as for creating locations, readers, and payments, you pass the connected account ID in the `Stripe-Account` header. This tells Stripe that the request is effectively being made by the connected account.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/connect-standard-platform-architecture.60513e24d398c9b81df0f9bb8e5f031a.svg)\n\nWhen processing payments, you also pass the connected account’s ID in the `Stripe-Account` header, which creates the charge directly on the connected account.",
  "title": "Design a multiparty platform | Stripe Documentation",
  "description": "Design a Terminal integration with your business serving as a central platform.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/charges/object",
  "markdown": "# The Charge object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).\n    \n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n    ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).\n    \n*   Billing information associated with the payment method at the time of the transaction.\n    \n\n*   #### \n    \n    customernullable stringExpandable\n    \n    ID of the customer this charge is for if one exists.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Whether the charge has been disputed.\n    \n*   #### \n    \n    invoicenullable stringExpandable\n    \n    ID of the invoice this charge is for if one exists.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    ID of the PaymentIntent associated with this charge, if one exists.\n    \n*   #### \n    \n    payment\\_method\\_detailsnullable object\n    \n    Details about the payment method at the time of the transaction.\n    \n*   #### \n    \n    receipt\\_emailnullable string\n    \n    This is the email address that the receipt for this charge was sent to.\n    \n*   Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.\n    \n*   Shipping information for the charge.\n    \n*   #### \n    \n    statement\\_descriptornullable string\n    \n    For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters.\n    \n*   #### \n    \n    statement\\_descriptor\\_suffixnullable string\n    \n    Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.\n    \n*   The status of the payment is either `succeeded`, `pending`, or `failed`.\n    \n\n### More attributes\n\n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_feenullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n*   #### \n    \n    calculated\\_statement\\_descriptornullable string\n    \n\n*   #### \n    \n    failure\\_balance\\_transactionnullable stringExpandable\n    \n*   #### \n    \n    failure\\_codenullable string\n    \n*   #### \n    \n    failure\\_messagenullable string\n    \n*   #### \n    \n    fraud\\_detailsnullable object\n    \n\n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n\n*   #### \n    \n    payment\\_methodnullable string\n    \n*   #### \n    \n    radar\\_optionsnullable object\n    \n*   #### \n    \n    receipt\\_numbernullable string\n    \n*   #### \n    \n    receipt\\_urlnullable string\n    \n*   #### \n    \n    refundsnullable objectExpandable\n    \n*   #### \n    \n    reviewnullable stringExpandable\n    \n*   #### \n    \n    source\\_transfernullable stringExpandableConnect only\n    \n*   #### \n    \n    transfernullable stringExpandableConnect only\n    \n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n*   #### \n    \n    transfer\\_groupnullable stringConnect only\n    \n\n```\n{  \"id\": \"ch_3MmlLrLkdIwHu7ix0snN0B15\",  \"object\": \"charge\",  \"amount\": 1099,  \"amount_captured\": 1099,  \"amount_refunded\": 0,  \"application\": null,  \"application_fee\": null,  \"application_fee_amount\": null,  \"balance_transaction\": \"txn_3MmlLrLkdIwHu7ix0uke3Ezy\",  \"billing_details\": {    \"address\": {      \"city\": null,      \"country\": null,      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    },    \"email\": null,    \"name\": null,    \"phone\": null  },  \"calculated_statement_descriptor\": \"Stripe\",  \"captured\": true,  \"created\": 1679090539,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"disputed\": false,  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"fraud_details\": {},  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"outcome\": {    \"network_status\": \"approved_by_network\",    \"reason\": null,    \"risk_level\": \"normal\",    \"risk_score\": 32,    \"seller_message\": \"Payment complete.\",    \"type\": \"authorized\"  },  \"paid\": true,  \"payment_intent\": null,  \"payment_method\": \"card_1MmlLrLkdIwHu7ixIJwEWSNR\",  \"payment_method_details\": {    \"card\": {      \"brand\": \"visa\",      \"checks\": {        \"address_line1_check\": null,        \"address_postal_code_check\": null,        \"cvc_check\": null      },      \"country\": \"US\",      \"exp_month\": 3,      \"exp_year\": 2024,      \"fingerprint\": \"mToisGZ01V71BCos\",      \"funding\": \"credit\",      \"installments\": null,      \"last4\": \"4242\",      \"mandate\": null,      \"network\": \"visa\",      \"three_d_secure\": null,      \"wallet\": null    },    \"type\": \"card\"  },  \"receipt_email\": null,  \"receipt_number\": null,  \"receipt_url\": \"https://pay.stripe.com/receipts/payment/CAcaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KOvG06AGMgZfBXyr1aw6LBa9vaaSRWU96d8qBwz9z2J_CObiV_H2-e8RezSK_sw0KISesp4czsOUlVKY\",  \"refunded\": false,  \"review\": null,  \"shipping\": null,  \"source_transfer\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Create a charge](https://docs.stripe.com/api/charges/create)Deprecated\n\nThis method is no longer recommended—use the [Payment Intents API](https://docs.stripe.com/api/payment_intents) to initiate a new payment instead. Confirmation of the PaymentIntent creates the `Charge` object used to request payment.\n\n### Parameters\n\n*   Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).\n    \n\n*   The ID of an existing customer that will be charged in this request.\n    \n*   An arbitrary string which you can attach to a `Charge` object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The email address to which this charge’s [receipt](https://docs.stripe.com/dashboard/receipts) will be sent. The receipt will not be sent until the charge is paid, and no receipts will be sent for test mode charges. If this charge is for a [Customer](https://docs.stripe.com/api/customers/object), the email address specified here will override the customer’s email address. If `receipt_email` is specified for a charge in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).\n    \n*   Shipping information for the charge. Helps prevent fraud on charges for physical goods.\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n    For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters.\n    \n*   #### \n    \n    statement\\_descriptor\\_suffixstring\n    \n    Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    transfer\\_groupstringConnect only\n    \n\n### Returns\n\nReturns the charge object if the charge succeeded. This call raises [an error](#errors) if something goes wrong. A common source of error is an invalid or expired card, or a valid card with insufficient available balance.\n\n```\ncurl https://api.stripe.com/v1/charges \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1099 \\  -d currency=usd \\  -d source=tok_visa\n```\n\n```\n{  \"id\": \"ch_3MmlLrLkdIwHu7ix0snN0B15\",  \"object\": \"charge\",  \"amount\": 1099,  \"amount_captured\": 1099,  \"amount_refunded\": 0,  \"application\": null,  \"application_fee\": null,  \"application_fee_amount\": null,  \"balance_transaction\": \"txn_3MmlLrLkdIwHu7ix0uke3Ezy\",  \"billing_details\": {    \"address\": {      \"city\": null,      \"country\": null,      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    },    \"email\": null,    \"name\": null,    \"phone\": null  },  \"calculated_statement_descriptor\": \"Stripe\",  \"captured\": true,  \"created\": 1679090539,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"disputed\": false,  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"fraud_details\": {},  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"outcome\": {    \"network_status\": \"approved_by_network\",    \"reason\": null,    \"risk_level\": \"normal\",    \"risk_score\": 32,    \"seller_message\": \"Payment complete.\",    \"type\": \"authorized\"  },  \"paid\": true,  \"payment_intent\": null,  \"payment_method\": \"card_1MmlLrLkdIwHu7ixIJwEWSNR\",  \"payment_method_details\": {    \"card\": {      \"brand\": \"visa\",      \"checks\": {        \"address_line1_check\": null,        \"address_postal_code_check\": null,        \"cvc_check\": null      },      \"country\": \"US\",      \"exp_month\": 3,      \"exp_year\": 2024,      \"fingerprint\": \"mToisGZ01V71BCos\",      \"funding\": \"credit\",      \"installments\": null,      \"last4\": \"4242\",      \"mandate\": null,      \"network\": \"visa\",      \"three_d_secure\": null,      \"wallet\": null    },    \"type\": \"card\"  },  \"receipt_email\": null,  \"receipt_number\": null,  \"receipt_url\": \"https://pay.stripe.com/receipts/payment/CAcaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KOvG06AGMgZfBXyr1aw6LBa9vaaSRWU96d8qBwz9z2J_CObiV_H2-e8RezSK_sw0KISesp4czsOUlVKY\",  \"refunded\": false,  \"review\": null,  \"shipping\": null,  \"source_transfer\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Update a charge](https://docs.stripe.com/api/charges/update)\n\nUpdates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   The ID of an existing customer that will be associated with this request. This field may only be updated if there is no existing associated customer with this charge.\n    \n*   An arbitrary string which you can attach to a charge object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   This is the email address that the receipt for this charge will be sent to. If this field is updated, then a new email receipt will be sent to the updated address.\n    \n*   Shipping information for the charge. Helps prevent fraud on charges for physical goods.\n    \n\n### More parameters\n\n*   #### \n    \n    transfer\\_groupstringConnect only\n    \n\n### Returns\n\nReturns the charge object if the update succeeded. This call will raise [an error](#errors) if update parameters are invalid.\n\n```\ncurl https://api.stripe.com/v1/charges/ch_3MmlLrLkdIwHu7ix0snN0B15 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[shipping]\"=express\n```\n\n```\n{  \"id\": \"ch_3MmlLrLkdIwHu7ix0snN0B15\",  \"object\": \"charge\",  \"amount\": 1099,  \"amount_captured\": 1099,  \"amount_refunded\": 0,  \"application\": null,  \"application_fee\": null,  \"application_fee_amount\": null,  \"balance_transaction\": \"txn_3MmlLrLkdIwHu7ix0uke3Ezy\",  \"billing_details\": {    \"address\": {      \"city\": null,      \"country\": null,      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    },    \"email\": null,    \"name\": null,    \"phone\": null  },  \"calculated_statement_descriptor\": \"Stripe\",  \"captured\": true,  \"created\": 1679090539,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"disputed\": false,  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"fraud_details\": {},  \"invoice\": null,  \"livemode\": false,  \"metadata\": {    \"shipping\": \"express\"  },  \"on_behalf_of\": null,  \"outcome\": {    \"network_status\": \"approved_by_network\",    \"reason\": null,    \"risk_level\": \"normal\",    \"risk_score\": 32,    \"seller_message\": \"Payment complete.\",    \"type\": \"authorized\"  },  \"paid\": true,  \"payment_intent\": null,  \"payment_method\": \"card_1MmlLrLkdIwHu7ixIJwEWSNR\",  \"payment_method_details\": {    \"card\": {      \"brand\": \"visa\",      \"checks\": {        \"address_line1_check\": null,        \"address_postal_code_check\": null,        \"cvc_check\": null      },      \"country\": \"US\",      \"exp_month\": 3,      \"exp_year\": 2024,      \"fingerprint\": \"mToisGZ01V71BCos\",      \"funding\": \"credit\",      \"installments\": null,      \"last4\": \"4242\",      \"mandate\": null,      \"network\": \"visa\",      \"network_token\": {        \"used\": false      },      \"three_d_secure\": null,      \"wallet\": null    },    \"type\": \"card\"  },  \"receipt_email\": null,  \"receipt_number\": null,  \"receipt_url\": \"https://pay.stripe.com/receipts/payment/CAcaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KPDLl6UGMgawkab5iK86LBYtkq0XrhiQf1RsA2ubesH4GHiixEU8_1-Wp7h4oQEdfSUGiZpJwtQHBErT\",  \"refunded\": false,  \"refunds\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/charges/ch_3MmlLrLkdIwHu7ix0snN0B15/refunds\"  },  \"review\": null,  \"shipping\": null,  \"source_transfer\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Retrieve a charge](https://docs.stripe.com/api/charges/retrieve)\n\nRetrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a charge if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/charges/ch_3MmlLrLkdIwHu7ix0snN0B15 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ch_3MmlLrLkdIwHu7ix0snN0B15\",  \"object\": \"charge\",  \"amount\": 1099,  \"amount_captured\": 1099,  \"amount_refunded\": 0,  \"application\": null,  \"application_fee\": null,  \"application_fee_amount\": null,  \"balance_transaction\": \"txn_3MmlLrLkdIwHu7ix0uke3Ezy\",  \"billing_details\": {    \"address\": {      \"city\": null,      \"country\": null,      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    },    \"email\": null,    \"name\": null,    \"phone\": null  },  \"calculated_statement_descriptor\": \"Stripe\",  \"captured\": true,  \"created\": 1679090539,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"disputed\": false,  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"fraud_details\": {},  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"outcome\": {    \"network_status\": \"approved_by_network\",    \"reason\": null,    \"risk_level\": \"normal\",    \"risk_score\": 32,    \"seller_message\": \"Payment complete.\",    \"type\": \"authorized\"  },  \"paid\": true,  \"payment_intent\": null,  \"payment_method\": \"card_1MmlLrLkdIwHu7ixIJwEWSNR\",  \"payment_method_details\": {    \"card\": {      \"brand\": \"visa\",      \"checks\": {        \"address_line1_check\": null,        \"address_postal_code_check\": null,        \"cvc_check\": null      },      \"country\": \"US\",      \"exp_month\": 3,      \"exp_year\": 2024,      \"fingerprint\": \"mToisGZ01V71BCos\",      \"funding\": \"credit\",      \"installments\": null,      \"last4\": \"4242\",      \"mandate\": null,      \"network\": \"visa\",      \"three_d_secure\": null,      \"wallet\": null    },    \"type\": \"card\"  },  \"receipt_email\": null,  \"receipt_number\": null,  \"receipt_url\": \"https://pay.stripe.com/receipts/payment/CAcaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KOvG06AGMgZfBXyr1aw6LBa9vaaSRWU96d8qBwz9z2J_CObiV_H2-e8RezSK_sw0KISesp4czsOUlVKY\",  \"refunded\": false,  \"review\": null,  \"shipping\": null,  \"source_transfer\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [List all charges](https://docs.stripe.com/api/charges/list)\n\nReturns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.\n\n### Parameters\n\n*   Only return charges for the customer specified by this customer ID.\n    \n\n### More parameters\n\n*   #### \n    \n    transfer\\_groupstringConnect only\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` charges, starting after charge `starting_after`. Each entry in the array is a separate charge object. If no more charges are available, the resulting array will be empty. If you provide a non-existent customer ID, this call raises [an error](#errors).\n\n```\ncurl -G https://api.stripe.com/v1/charges \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/charges\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ch_3MmlLrLkdIwHu7ix0snN0B15\",      \"object\": \"charge\",      \"amount\": 1099,      \"amount_captured\": 1099,      \"amount_refunded\": 0,      \"application\": null,      \"application_fee\": null,      \"application_fee_amount\": null,      \"balance_transaction\": \"txn_3MmlLrLkdIwHu7ix0uke3Ezy\",      \"billing_details\": {        \"address\": {          \"city\": null,          \"country\": null,          \"line1\": null,          \"line2\": null,          \"postal_code\": null,          \"state\": null        },        \"email\": null,        \"name\": null,        \"phone\": null      },      \"calculated_statement_descriptor\": \"Stripe\",      \"captured\": true,      \"created\": 1679090539,      \"currency\": \"usd\",      \"customer\": null,      \"description\": null,      \"disputed\": false,      \"failure_balance_transaction\": null,      \"failure_code\": null,      \"failure_message\": null,      \"fraud_details\": {},      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"on_behalf_of\": null,      \"outcome\": {        \"network_status\": \"approved_by_network\",        \"reason\": null,        \"risk_level\": \"normal\",        \"risk_score\": 32,        \"seller_message\": \"Payment complete.\",        \"type\": \"authorized\"      },      \"paid\": true,      \"payment_intent\": null,      \"payment_method\": \"card_1MmlLrLkdIwHu7ixIJwEWSNR\",      \"payment_method_details\": {        \"card\": {          \"brand\": \"visa\",          \"checks\": {            \"address_line1_check\": null,            \"address_postal_code_check\": null,            \"cvc_check\": null          },          \"country\": \"US\",          \"exp_month\": 3,          \"exp_year\": 2024,          \"fingerprint\": \"mToisGZ01V71BCos\",          \"funding\": \"credit\",          \"installments\": null,          \"last4\": \"4242\",          \"mandate\": null,          \"network\": \"visa\",          \"three_d_secure\": null,          \"wallet\": null        },        \"type\": \"card\"      },      \"receipt_email\": null,      \"receipt_number\": null,      \"receipt_url\": \"https://pay.stripe.com/receipts/payment/CAcaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KOvG06AGMgZfBXyr1aw6LBa9vaaSRWU96d8qBwz9z2J_CObiV_H2-e8RezSK_sw0KISesp4czsOUlVKY\",      \"refunded\": false,      \"review\": null,      \"shipping\": null,      \"source_transfer\": null,      \"statement_descriptor\": null,      \"statement_descriptor_suffix\": null,      \"status\": \"succeeded\",      \"transfer_data\": null,      \"transfer_group\": null    }    {...}    {...}  ],}\n```",
  "title": "The Charge object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/payments/setup-reader",
  "markdown": "# Select your reader | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Stripe's pre-certified card readers and Tap to Pay.\n\nStripe readers offer end-to-end encryption by default and remote management tools. Select your form of payment acceptance to learn how to set it up:\n\nIf you don’t have a reader, you can [order readers](https://docs.stripe.com/terminal/fleet/order-and-return-readers) from the Dashboard and have them shipped to a location of your choice. As a [Connect](https://docs.stripe.com/connect) platform, you can enable your connected accounts to receive readers and accessories at their business location.\n\nIf you’re not sure which reader is right for you, [design your integration](https://docs.stripe.com/terminal/designing-integration) and choose a reader that works with your application and physical sales environment.\n\nIf you don’t have a physical reader, you can use the simulated reader to build and test your Terminal integration. The simulated reader doesn’t require any setup and you can start by [setting up your integration](https://docs.stripe.com/terminal/payments/setup-integration).\n\nTo choose a reader or a platform, consult the tables on this page. Or, to explore specific combinations, see [Design an integration](https://docs.stripe.com/terminal/designing-integration).\n\n#### Warning\n\nStripe readers aren’t liquid-proof and we recommend that users make appropriate efforts to make sure their devices remain dry. If your device has experienced liquid ingress, we recommend that you stop using the device and let it dry thoroughly before attempting to re-use or charge the device. If your device doesn’t properly operate or charge properly after drying, you need to replace it.\n\n## Reader comparison ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis table shows the features of the currently available readers.\n\n### Device specs and accessories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nReader type\n\nStripe Reader S700, BBPOS WisePOS E, Stripe Reader M2, BBPOS WisePad 3, Tap to Pay\n\n| Attributes | [Stripe Reader S700](https://docs.stripe.com/terminal/readers/stripe-reader-s700) | [BBPOS WisePOS E](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepos-e) | [Stripe Reader M2](https://docs.stripe.com/terminal/payments/setup-reader/stripe-m2) | [BBPOS WisePad 3](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepad3) | [Tap to Pay](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay) |\n| --- | --- | --- | --- | --- | --- |\n| Approximate dimensions | 161.9 x 81.6 x 21.4 mm / 6.375 x 3.187 x 0.875 in | 188.6 x 76.2 x 32.7 mm / 7.43 x 3 x 1.29 in | 73.5 x 67 x 19.5 mm / 2.89 x 2.63 x 0.76 in | 69.7 x 121.7 x 17.7 mm / 2.74 x 4.79 x 0.7 in | –   |\n| Approximate weight | 318g | 318g | 85g / 2.99oz | 130g / 4.59oz |     |\n| Display | 5.5\" IPS LCD display with Gorilla glass, 1920 x 1080, 580 nit | 5\" IPS display capacitive touch screen | –   | 2.4\" color LCD (320 x 240) with backlight | –   |\n| Battery | Battery capacity: Rechargeable Li-polymer, 3.7V, 4,950mAh<br><br>Battery life: 2.5 hours time to charge, 140 hours (standby), 15 hours (active use) | Battery capacity: Rechargeable Li-polymer, 3.7v, 3,200mAh<br><br>Battery life: 2.75 hours time to charge, 250 hours (standby), 12 hours (active use) | Battery capacity: Rechargeable Li-polymer, 3.7V, 520mAh<br><br>Battery life: 2 hours time to charge, 42 hours (standby), 28 hours (active use) | Battery capacity: Rechargeable Li-polymer, 3.7v, 750 mAh<br><br>Battery life: 2 hours time to charge, 20 hours (standby), 15 hours (active use) | –   |\n| Memory | 4GB RAM | 2GB RAM | 128kb RAM | 128kb RAM | –   |\n| Storage | 64GB | 16GB | 1MB | 1MB | –   |\n| Processor | Octa Core A53 | Quad Core Cortex A7 | Cortex M4 Secure MCU | Cortex M4 Secure MCU | –   |\n| Charging connection | USB-C port, Accessory dock | Micro-USB port, Accessory dock | USB-C port | USB-C port, Accessory dock | –   |\n| Communication interface | WiFi, Ethernet (with optional hub) | WiFi, Ethernet (with optional dock) | Bluetooth, USB (Android SDK only) | Bluetooth 4.2 BLE, USB (Android SDK only) | –   |\n| Operating system | Android 10 | Android 9 | Proprietary | Proprietary | iOS 16.0 and later or Android 10.0 and later |\n| Camera | Front and rear present but not supported | Rear present but not supported | –   | –   | –   |\n| Audio jack |     |     | –   | –   | –   |\n| Microphone | Front and rear present but not supported | Front and rear present but not supported | –   | –   | –   |\n| [Security](https://support.stripe.com/questions/stripe-terminal-encryption-e2ee-vs-p2pe) | End-to-end encryption, P2PE ready, Mail order telephone order (MO/TO) P2PE<br><br>[PCI listing](https://listings.pcisecuritystandards.org/popups/pts_device.php?appnum=4-30512) | End-to-end encryption, P2PE ready , Mail order telephone order (MO/TO) P2PE<br><br>[PCI listing](https://listings.pcisecuritystandards.org/popups/pts_device.php?appnum=4-90102) | End-to-end encryption, P2PE ready<br><br>[PCI listing](https://listings.pcisecuritystandards.org/popups/pts_device.php?appnum=4-30457) | End-to-end encryption, P2PE ready<br><br>[PCI listing](https://listings.pcisecuritystandards.org/popups/pts_device.php?appnum=4-30378) | End-to-end encryption |\n| **Stripe-designed accessories** | Stripe case, Dock, Hub, Third-party stand | Dock | Dock, Mount | –   | –   |\n\n\\*Battery life information is only an estimate. Battery life varies depending on a number of factors including product specifications, settings, and applications or deployed features.\n\n## Integration platform comparison ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMobile application SDKs for all reader types:\n\n*   [Android SDK](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=android)\n*   [iOS SDK](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=ios)\n*   [React Native SDK](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=react-native)\n\nFor smart readers only without offline payment support:\n\n*   [Server-driven integration](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=server-driven), which uses the Stripe API rather than a Terminal client SDK\n*   [JavaScript SDK](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=js)\n\nChoose an integration based on the following factors:\n\n*   [Preferred reader](https://docs.stripe.com/terminal/payments/setup-reader#reader)\n*   [Desired features](https://docs.stripe.com/terminal/payments/setup-reader#feature-table)\n*   Your technology stack\n*   [Network requirements](https://docs.stripe.com/terminal/network-requirements)\n\n### Feature table ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis table lists the features of the five integration platforms.\n\n## Global availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNot all readers are available in every country. This table lists the readers and platforms you can use in each country.\n\n| Countries | Android\\*\\* | iOS\\*\\* | JavaScript | Server-Driven |\n| --- | --- | --- | --- | --- |\n| United States | ![](https://b.stripecdn.com/docs-statics-srv/assets/84052c4398178d23ae59cfdfd4c1a4e3.png)<br><br>Stripe Reader M2<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/84052c4398178d23ae59cfdfd4c1a4e3.png)<br><br>Stripe Reader M2<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart |\n| Canada<br><br>Italy<br><br>Netherlands | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay\\*<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay\\*<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700\\*<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart |\n| United Kingdom | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700\\*<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart |\n| Austria+<br><br>Belgium<br><br>Czech Republic+<br><br>Denmark<br><br>Finland+<br><br>Ireland<br><br>Luxembourg+<br><br>Malaysia+<br><br>Norway+<br><br>Portugal+<br><br>Spain<br><br>Sweden<br><br>Switzerland+ | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay\\*<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700\\*<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart |\n| New Zealand+<br><br>Singapore | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700\\*<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart |\n| Australia | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay\\*<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700\\*<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart |\n| France<br><br>Germany | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay\\*<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay\\*<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700\\*<br><br>Smart |\n\n+Terminal is currently in beta in this country.\n\n\\*This Terminal integration shape is currently in beta.\n\n\\*\\*Compatibility for this mobile SDK also applies when used with React Native.\n\n## Connection to Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore processing payments, you must [connect](https://docs.stripe.com/terminal/payments/connect-reader) a Terminal reader to your point of sale application using the Terminal SDK. Each reader can only connect to one instance of the SDK at a time. For example, if you want four mobile readers in your store and your app runs on iOS, you also need four iOS devices. Only one reader connects to the SDK at a time.\n\n## Pre-certification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn-person payments must follow strict rules to meet PCI compliance, PCI certifications, and EMV certifications.\n\nTerminal offers pre-certified readers that accept payment details (EMV, contactless, and swiped), encrypt sensitive card information, and return a token to your application through the Stripe Terminal SDK so you can confirm payment.\n\n## Reader software updates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe and our hardware partners periodically release reader software updates, which can include improvements and required security updates. Your application must include support for automatic updates. Failing to install a required update can prevent a reader from accepting payments. Smart readers update themselves automatically when powered on, sufficiently charged, and not in use. Bluetooth readers [update](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=bluetooth#update-reader) themselves automatically upon connection to your point of sale.\n\n## Other supported readers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Terminal also supports these readers. If you’re interested in these devices, [contact sales](https://stripe.com/contact/sales) to discuss or place an order.",
  "title": "Select your reader | Stripe Documentation",
  "description": "Learn about Stripe's pre-certified card readers and Tap to Pay.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/payments/setup-reader/stripe-m2",
  "markdown": "# Set up Stripe Reader M2\n\n## Learn how to set up the Stripe Reader M2.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/stripem2.bf6a7eabd353369bfa596a81ab51ca9a.png)\n\nStripe Reader M2 is a small reader that you can use with mobile applications. It uses Bluetooth Low Energy (LE) or USB (Android only) to [connect](https://docs.stripe.com/terminal/payments/connect-reader) to the Stripe Terminal SDK on a mobile device.\n\nThis reader is compatible with our iOS, Android, and React Native SDKs. To view the reader’s parts and features, see the [Stripe Reader M2 product sheet](https://d37ugbyn3rpeym.cloudfront.net/terminal/product-sheets/m2_product_sheet.pdf).\n\n#### Warning\n\nStripe readers aren’t liquid-proof and we recommend that users make appropriate efforts to make sure their devices remain dry. If your device has experienced liquid ingress, we recommend that you stop using the device and let it dry thoroughly before attempting to re-use or charge the device. If your device doesn’t properly operate or charge properly after drying, you need to replace it.\n\n## Turn the reader on and off ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTurn on the Stripe Reader M2 by pressing and releasing the power button. The status LEDs turn on for 2 seconds and the reader beeps twice. The reader waits for a Bluetooth connection for five minutes before turning off.\n\nWhen the reader [connects to a device running your app](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=bluetooth), the status LEDs on top of the reader flash four times. After connecting, the first status light begins flashing at five second intervals. The reader stays connected to your iOS or Android device while in standby mode and automatically exits standby mode when you resume activity.\n\nWhen connected, the reader automatically turns off after 10 hours of inactivity. You can turn off the reader manually by pressing and holding the power button for four seconds. You don’t need to turn off the reader to conserve power. When the reader turns off, the four LEDs light up and then turn off one by one to indicate it has turned off.\n\n#### Note\n\nWith typical usage, you only need to [charge the reader](#charging) fully once per day.\n\n## Charge the reader ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo charge the Stripe Reader M2, use the included cable or a USB 2.0 cable.\n\n## Check the battery status ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen the Stripe Reader M2 is on, you can press and release the power button once to check the battery level. The LEDs on top of the reader show the current status.\n\n| LEDs | Meaning |\n| --- | --- |\n|     | Full charge |\n|     | 75% charge |\n|     | 50% charge |\n|     | 25% charge |\n|     | (flashing) Charging |\n\n## Accessories for the reader ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use the [Stripe Reader M2](https://dashboard.stripe.com/terminal/shop) with an optional [dock](https://dashboard.stripe.com/terminal/shop/thsku_JokGg2oA2nariI) for countertop checkout, or an optional [mount](https://dashboard.stripe.com/terminal/shop/thsku_KFGV5dfkxwiGMW) for roaming checkout.\n\nYou can also design your own accessories for the Stripe Reader M2. To download the Stripe Reader M2 mechanical design files (.STP), you must first review and accept our [Terminal Design File License Agreement](https://stripe.com/legal/terminal-design). By downloading the file below, you agree to the terms outlined in the license.\n\n[Download Stripe design files](https://d37ugbyn3rpeym.cloudfront.net/terminal/stripe_reader_M2_mechanical_design_files_and_guidelines.zip)",
  "title": "Set up Stripe Reader M2 | Stripe Documentation",
  "description": "Learn how to set up the Stripe Reader M2.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/payments/connect-reader?reader-type=bluetooth",
  "markdown": "# Connect to a reader | Stripe DocumentationThe Stripe Docs logo\n\n## Connect your application to a Stripe Terminal reader.\n\n#### Note\n\nIf you haven’t chosen a reader yet, compare the available [Terminal readers](https://docs.stripe.com/terminal/payments/setup-reader) and choose one that best suits your needs.\n\nBluetooth-connected readers are Bluetooth LE devices. They collect payment details, but rely on a paired mobile device for communication with Stripe.\n\nFollow these steps to connect your app to a Terminal reader using Bluetooth:\n\n*   [Discover readers](#discover-readers)\n*   [Connect to a reader](#connect-reader)\n\n#### Caution\n\nDon’t use mobile device settings to pair with your reader. Pairing the reader through device settings makes the reader unavailable to connect to your app.\n\n[](#discover-readers)\n\nFirst, turn on the reader. Then, from your app, search for nearby Bluetooth-connected readers using the [discoverReaders](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPTerminal.html#/c:objc(cs)SCPTerminal(im)discoverReaders:delegate:completion:) method.\n\nReaderDiscoveryViewController.swift\n\n``import StripeTerminal  class ReaderDiscoveryViewController: UIViewController, DiscoveryDelegate {      var discoverCancelable: Cancelable?      // ...      // Action for a \"Discover Readers\" button     func discoverReadersAction() throws {         let config = try BluetoothScanDiscoveryConfigurationBuilder().build()         self.discoverCancelable = Terminal.shared.discoverReaders(config, delegate: self) { error in             if let error = error {                 print(\"discoverReaders failed: \\(error)\")             } else {                 print(\"discoverReaders succeeded\")             }         }     }      // ...      // MARK: DiscoveryDelegate      func terminal(_ terminal: Terminal, didUpdateDiscoveredReaders readers: [Reader]) {         // In your app, display the discovered reader(s) to the user.         // Call `connectBluetoothReader` after the user selects a reader to connect to.     } }``\n\n#### Bluetooth proximity \\* BBPOS Chipper 2X BT only![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBluetooth proximity filters search results to return the closest reader. When discovered, the reader flashes multicolored lights, allowing your user to identify the discovered reader among many other readers. After the SDK discovers a reader, it won’t switch to a closer reader unless you turn off the discovered reader.\n\nNote that when using Bluetooth proximity, the SDK returns the reader to your app’s callback twice. The first time, your app receives a `Reader` object populated with only the reader’s serial number. After a short delay, your app receives the same `Reader` object populated with new information, such as the reader’s battery level.\n\nWe recommend displaying the discovered reader in your app’s UI, letting the user either confirm connection to the reader or cancel if they don’t want to connect to this reader.\n\n#### Bluetooth scan ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBluetooth scan searches for all nearby readers and returns a list of discovered readers to your app. As the discovery process continues, the SDK continues to invoke the `DiscoveryDelegate.didUpdateDiscoveredReaders` method with the latest list of nearby readers.\n\nWith the Bluetooth scan discovery method, you can set a timeout to scan for a set period of time, which you can use for managing battery life or triggering an error message if no devices are found.\n\nIn your mobile application, we recommend displaying an auto-updating list of discovered readers, with serial numbers or labels to help users identify their reader.\n\n[](#connect-reader)\n\nTo connect to a discovered reader, call the `connectBluetoothReader` method from your app. As soon as the SDK connects to the reader, the reader’s status light shines solid blue.\n\nYou must [register your reader](https://docs.stripe.com/terminal/fleet/locations-and-zones) to a [location](https://docs.stripe.com/api/terminal/locations) upon connection. To do so, create and use a `BluetoothConnectionConfiguration` with the `locationId` set to the relevant location ID when connecting.\n\nReaderDiscoveryViewController.swift\n\n``// Call `connectBluetoothReader` with the selected reader and a connection config // to register to a location as set by your app. let connectionConfig: BluetoothConnectionConfiguration do {     connectionConfig = try BluetoothConnectionConfigurationBuilder(locationId:`` \n\n`\"{{LOCATION_ID}}\"`\n\n`).build() } catch {     // Handle the error building the connection configuration     return } Terminal.shared.connectBluetoothReader(selectedReader, delegate: readerDelegate, connectionConfig: connectionConfig) { reader, error in     if let reader = reader {         print(\"Successfully connected to reader: \\(reader)\")     } else if let error = error {         print(\"connectBluetoothReader failed: \\(error)\")     } }`\n\nFor your app to run in the background and remain connected to the reader, [configure your app](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=ios#configure) to include the required background mode.\n\nDon’t program your app to call `disconnectReader` to conserve power. The reader efficiently handles power management using its standby mode.\n\n### Handle reader disconnects ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReader disconnects can sometimes occur between your app and the reader. For example, the reader can disconnect from your app if it’s out of range or runs out of battery. You can simulate an unexpected disconnect while testing by powering off the reader.\n\nThe `BluetoothReaderDelegate` includes a `reader:didDisconnect:` method that provides your application with the `DisconnectReason` to help identify why the reader disconnected.\n\nWhen a reader disconnects, we recommend you automatically attempt reconnection and display notifications in your app relaying the reader status throughout the process.\n\nTo implement automatic reconnection:\n\n1.  Set `autoReconnectOnUnexpectedDisconnect` to true on the `ConnectionConfiguration`.\n2.  Implement the callbacks found in the `ReconnectionDelegate`.\n3.  Pass a `autoReconnectionDelegate` to your `BluetoothConnectionConfiguration`.\n    \n    `let connectionConfig: BluetoothConnectionConfiguration do {     connectionConfig = BluetoothConnectionConfigurationBuilder(locationId: presentLocationId)         .setAutoReconnectOnUnexpectedDisconnect(true)         .setAutoReconnectionDelegate(yourReconnectionDelegate)         .build() } catch {     // Handle error building the connection configuration     return }  Terminal.shared.connectBluetoothReader(reader, delegate: readerDelegate, connectionConfig: connectionConfig, completion: connectCompletion)`\n    \n4.  When the SDK sends [reader:didStartReconnect:disconnectReason:](https://stripe.dev/stripe-terminal-ios/docs/Protocols/SCPReconnectionDelegate.html#/c:objc(pl)SCPReconnectionDelegate(im)reader:didStartReconnect:disconnectReason:) to your app, display a message announcing that the reader lost connection and reconnection is in progress.\n    *   You can use the `Cancelable` object to stop the reconnection attempt at any time.\n5.  When the SDK indicates successful reconnection by sending [`readerDidSucceedReconnect:`](https://stripe.dev/stripe-terminal-ios/docs/Protocols/SCPReconnectionDelegate.html#/c:objc(pl)SCPReconnectionDelegate(im)readerDidSucceedReconnect:), display a message announcing the connection was restored and to continue normal operations.\n6.  If the SDK can’t reconnect to the reader and sends [`readerDidFailReconnect:`](https://stripe.dev/stripe-terminal-ios/docs/Protocols/SCPReconnectionDelegate.html#/c:objc(pl)SCPReconnectionDelegate(im)readerDidFailReconnect:), display a message stating that an unexpected disconnect occurred.\n\nReaderViewController.swift\n\n`import StripeTerminal  extension ReaderViewController: ReconnectionDelegate {     // MARK: ReconnectionDelegate      func terminal(_ terminal: Terminal, didStartReaderReconnect cancelable: Cancelable) {         // 1. Notified at the start of a reconnection attempt         // Use cancelable to stop reconnection at any time     }      func terminalDidSucceedReaderReconnect(_ terminal: Terminal) {         // 2. Notified when reader reconnection succeeds         // App is now connected     }     func terminalDidFailReaderReconnect(_ terminal: Terminal) {         // 3. Notified when reader reconnection fails         // App is now disconnected     } }`\n\nIf you don’t configure automatic reconnection, you can handle the disconnect callback to just display a message in the app alerting the user that the reader unexpectedly disconnected and initiate reader discovery and connection.\n\nReaderViewController.swift\n\n`import StripeTerminal  class ReaderViewController: UIViewController, TerminalDelegate {     override func viewDidLoad() {         super.viewDidLoad()         Terminal.shared.delegate = self     }      // ...      // MARK: TerminalDelegate      func terminal(_ terminal: Terminal, didReportUnexpectedReaderDisconnect reader: Reader) {         // Consider displaying a UI to notify the user and start rediscovering readers     } }`\n\n### Reboot the connected reader![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Reader M2 and BBPOS WisePad 3 automatically reboot after operating for 24 hours. However, you can force the reader to reboot and reset its 24-hour timer by using the `rebootReader` API. After this action, the reader disconnects from the SDK and then reboots. If you’re using automatic reconnect, the SDK attempts to restore the connection with the reader.\n\n`Terminal.shared.rebootReader { error in     if let error = error {         // Placeholder for handling the error     } else {         // Reboot succeeded and the reader will disconnect.         // If your app is using automatic reconnect the reconnect will begin.     } }`\n\n### Automatic reconnection on application start![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Terminal doesn’t automatically reconnect to a reader when your application starts. Instead, you can build a reconnection flow by storing reader IDs and attempting to connect to a known reader on startup.\n\n1.  When you successfully connect to a reader, save its serial number in a persistent data storage location, such as the [UserDefaults API](https://developer.apple.com/documentation/foundation/userdefaults) (iOS).\n2.  When your app launches, check the persistent data storage location for a saved serial number. If one is found, call the `discoverReaders` method so your application can try to find that reader again.\n3.  If the saved serial number matches any of the discovered readers, try connecting to that reader with the matching reader object returned from the call to `discoverReaders`. If the previously connected reader isn’t found, stop the discovery process.\n\nDisplay some UI during the discovery and connection process to indicate that an automatic reconnection is happening.\n\n[](#update-reader)\n\nYour application must update Bluetooth and USB readers to apply:\n\n*   Regional configurations that keep you up to date with card network and issuer requirements\n*   Security updates\n\nRequired updates start installing on connection to the reader. You can’t use the reader until updating completes.\n\n#### Note\n\nInstalling updates requires that the reader’s battery is charged to more than 50%.\n\n### Required updates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen immediately required updates are available for the reader, the integration’s `BluetoothReaderDelegate` receives the `didStartInstallingUpdate` callback with a `ReaderSoftwareUpdate`. The `ReaderSoftwareUpdate` provides the necessary details of the update including an estimate of the total update duration, indicated by `estimatedUpdateTime`. During the installation process, the Terminal’s `connectionStatus` transitions to `connecting` while the update is being installed on the reader.\n\nYour application must notify users of the update activity and display the progress in your UI. Clearly explain why connecting takes longer than normal.\n\nIf the required update process fails, Stripe communicates the error to the `BluetoothReaderDelegate`. You can’t reconnect to the reader after a required update failure unless:\n\n*   The reader runs the latest software version for the location within the last 30 days.\n*   The iOS SDK version is greater than or equal to `3.5.0`.\n\nIf the conditions are met, the connection process succeeds despite the required update being incomplete. Stripe retries the required update the next time you connect to that reader until it’s successfully installed.\n\nReaderViewController.swift\n\n`import UIKit import StripeTerminal  class ReaderViewController: UIViewController, BluetoothReaderDelegate {      // ...      // MARK: ReaderDelegate      func reader(_ reader: Reader, didStartInstallingUpdate update: ReaderSoftwareUpdate, cancelable: Cancelable?) {         // Show UI communicating that a required update has started installing     }      func reader(_ reader: Reader, didReportReaderSoftwareUpdateProgress progress: Float) {         // Update the progress of the install     }      func reader(_ reader: Reader, didFinishInstallingUpdate update: ReaderSoftwareUpdate?, error: Error?) {         // Report success or failure of the update     }      // ... }`\n\nYou can cancel required updates using the `Cancelable` object. However, this will result in a failed connection to the reader. For incremental-only updates no `Cancelable` is provided as these updates can not be canceled.\n\n### Optional updates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can defer optional updates until the specified date, after which they become required. The SDK notifies you of optional updates through the `BluetoothReaderDelegate` at any time the reader is connected but not performing a transaction. If an optional update is available, your application’s `BluetoothReaderDelegate` receives the `didReportAvailableUpdate` callback with the `ReaderSoftwareUpdate` object containing the update details, including:\n\n*   Estimated of update duration (`estimatedUpdateTime`)\n*   Date after which the update becomes required (`requiredAt`).\n\nThe update is also stored on the reader object as `reader.availableUpdate`. Call `Terminal.installAvailableUpdate` to install the update.\n\nIn your application, notify users that an update is available, and display a prompt to optionally continue with the update.\n\nTo proceed with the update, call `installAvailableUpdate`, which will install the update previously reported via `didReportAvailableUpdate`.\n\nAs the update proceeds, block the user from leaving the page in your app, and instruct the user to keep the reader in range and powered on until the update completes. We recommend also providing your user with a visual indicator of the update’s progress. The `BluetoothReaderDelegate` reports the update’s progress in the `didReportReaderSoftwareUpdateProgress` method.\n\nWhen an optional update’s `requiredAt` date has passed, the update won’t be installed until the reader is disconnected and reconnected.\n\nReaderViewController.swift\n\n``import UIKit import StripeTerminal  class ReaderViewController: UIViewController, BluetoothReaderDelegate {      // ...      // MARK: BluetoothReaderDelegate      func reader(_ reader: Reader, didReportAvailableUpdate update: ReaderSoftwareUpdate) {         // An update is available for the connected reader. Show this update in your application.         // This update can be installed using `Terminal.shared.installAvailableUpdate`.     }  }``\n\nSee [Testing reader updates](https://docs.stripe.com/terminal/references/testing#simulated-reader-updates) to learn more about making sure your application handles the different update types that a reader can have.\n\n## Next steps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou’ve connected your application to the reader. Next, collect your first Stripe Terminal payment.\n\n*   [Collect payments](https://docs.stripe.com/terminal/payments/collect-card-payment)\n\nThe BBPOS and Chipper™ name and logo are trademarks or registered trademarks of BBPOS Limited in the United States and/or other countries. The Verifone® name and logo are either trademarks or registered trademarks of Verifone in the United States and/or other countries. Use of the trademarks does not imply any endorsement by BBPOS or Verifone.",
  "title": "Connect to a reader | Stripe Documentation",
  "description": "Connect your application to a Stripe Terminal reader.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments",
  "markdown": "# Collect card payments while offline\n\nThe Terminal SDK allows your application to continue collecting payments using a mobile reader without a network connection.\n\n#### Warning\n\nWhen operating offline, payment information is collected at the time of sale, and authorization is only attempted after connectivity is restored and the payment is forwarded. You, as the user, assume all decline risk of the transaction. If the issuer declines the offline transaction, there’s no way to recover the funds, and you might not receive payment from the customer for goods or services already provided.\n\nTo reduce the chances of an issuer decline, you’re encouraged to:\n\n*   Reestablish internet connectivity as soon as possible to record the payments to Stripe.\n*   Restrict transactions if they exceed a certain amount.\n*   [Fail all offline payments](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#managing-risk-while-offline) if the SDK has stored a set of transactions whose sum exceeds a certain amount.\n\nOffline payments follow the same steps as online payments: create, collect, process, and capture the payment. Your device can transition from online to offline at any step in the process.\n\n1.  [Enable offline mode](#enable-offline-mode)\n2.  [Connect to a reader while offline](#connect-while-offline)\n3.  [Handle offline events](#handle-offline-events)\n4.  [Create a PaymentIntent while offline](#create-payment-intent)\n5.  [Collect a payment method](#collect-payment-method)\n6.  [Confirm the payment](#confirm-payment)\n7.  [Wait for payments to forward](#wait-for-forward)\n8.  [Capture the payment](#capture-payment)\n9.  [Examine offline payments](#examine-offline)\n\n[](#enable-offline-mode)\n\nTo use offline mode, your application needs to consume version `3.3.0` or later of the Terminal iOS SDK.\n\nUse a [Configuration](https://docs.stripe.com/api/terminal/configuration) object to enable offline mode for the [BBPOS Chipper 2X BT](https://docs.stripe.com/terminal/readers/bbpos-chipper2xbt), [Stripe Reader M2](https://docs.stripe.com/terminal/readers/stripe-m2) or [BBPOS WisePad 3](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepad3) devices at your `Location`.\n\n`curl https://api.stripe.com/v1/terminal/configurations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"offline[enabled]\"=true`\n\nAfter you enable offline mode on a `Configuration` object, you can [assign it](https://docs.stripe.com/terminal/fleet/configurations-overview?dashboard-or-api=api#create-a-configuration-for-an-individual-location) to a `Location`. You can also enable offline mode by default for all `Locations` by updating the [default](https://docs.stripe.com/terminal/fleet/configurations-overview?dashboard-or-api=api#retrieve-the-account-default-configuration) `Configuration` object for your account. Configuration API changes can take several minutes to propagate to your SDK and reader, and require you to disconnect from and reconnect to your reader to take effect.\n\n[](#connect-while-offline)\n\nThe SDK stores necessary `Location` information locally after connecting online. On subsequent offline connections, it uses the stored configuration information from that `Location`.\n\nTo connect to a reader while offline, you must have previously connected to any mobile reader of the same type at the same `Location` while online within the last 30 days, and have updated your reader’s software within that time. If you attempt to connect to a reader while offline without meeting these requirements, the request fails with an error.\n\n| Error | Resolution |\n| --- | --- |\n| **The SDK is not connected to the internet** | Make sure the `Location` you’re using is [configured](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments#enable-offline-mode) for offline mode. Otherwise, if your `Location` is properly configured, your POS hasn’t previously connected to any readers while online. You should first connect to any reader while online, and then connect to a reader of the same type while offline. |\n| **The selected reader requires a software update before it can be used to collect payments offline.** | The reader’s software hasn’t been updated in 30 days or more. Connect to the reader while online to update it. |\n| **The selected reader must be paired online at this location before it can be used to collect payments offline.** | You’re attempting to connect to a reader type that your POS hasn’t previously connected to while online. You must first connect to this reader or any reader of the same type while online. Or, if you want to connect while offline, you can connect to a reader type that your POS previously connected to while online. |\n\nIf you reinstall the application or perform any operation that clears the disk storage for the SDK, you lose any payments that the SDK has stored and not yet forwarded. Make sure there are no stored payments before you perform any destructive action.\n\n[\n\n## Handle offline events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-offline-events)\n\nImplement the `OfflineDelegate` protocol and pass it to Terminal to notify your application of offline-related events. You must set `OfflineDelegate` before collecting payments offline.\n\nYou can also query `Terminal.offlineStatus.sdk.networkStatus` to check the current network status of the SDK.\n\nThe SDK attempts to forward payments even if the network status is offline. This means your connection token provider might receive a request to provide a connection token, even if the SDK’s network status is offline. During payment collection, the network status determines if the SDK processes the payment online or immediately stores the payment.\n\nCustomOfflineDelegate.swift\n\n``import StripeTerminal  class CustomOfflineDelegate: OfflineDelegate {      func terminal(_ terminal: Terminal, didChangeOfflineStatus offlineStatus: OfflineStatus) {         // Check the value of `offlineStatus` and update your UI accordingly. For instance,         // you can check the SDK's network status at `offlineStatus.sdk.networkStatus`.         //         // You can also check the SDK's current offline status using         // `Terminal.shared.offlineStatus.sdk.networkStatus`.     }      func terminal(_ terminal: Terminal, didForwardPaymentIntent intent: PaymentIntent, error: Error?) {         // The PaymentIntent was successfully forwarded, or an error occurred.         // Reconcile any local state using the backend-generated `PaymentIntent.stripeId`         // and the metadata you supplied when creating the payment intent.         //         // Note that the `PaymentIntent.stripeId` may still be nil if creating the         // PaymentIntent in the backend failed.     }      func terminal(_ terminal: Terminal, didReportForwardingError error: Error) {         // A non-specific error occurred while forwarding a PaymentIntent.         // Check the error message and your integration implementation to         // troubleshoot.     } }``\n\n`import UIKit import StripeTerminal  @UIApplicationMain class AppDelegate: UIResponder, UIApplicationDelegate {      func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {         Terminal.setTokenProvider(APIClient.shared)         Terminal.shared.offlineDelegate = CustomOfflineDelegate()         // ...         return true     }      // ...  }`\n\n[](#create-payment-intent)\n\nTo support operating offline, you must use the SDK’s `createPaymentIntent` to create PaymentIntent objects.\n\nWhile operating offline, `PaymentIntent` objects have a null `stripeId`. We recommend adding a custom identifier to the PaymentIntent’s [metadata](https://docs.stripe.com/payments/payment-intents#storing-information-in-metadata) to help reconcile `PaymentIntent` objects created offline. Within your `OfflineDelegate.didForwardPaymentIntent`, you can use your identifier to correlate offline payments with payments that are successfully forwarded to Stripe.\n\nPaymentViewController.swift\n\n``import UIKit import StripeTerminal  class PaymentViewController: UIViewController {      // Action for a \"Checkout\" button     func checkoutAction() throws {         // Populate the correct transaction amount from your application.         let amount = UInt(10_00)          // Build up parameters for creating a `PaymentIntent`         let params = try PaymentIntentParametersBuilder(             amount: amount,             currency: \"usd\"         )         .setMetadata([\"offlineId\": UUID().uuidString])         .build()          // Your app might want to prevent offline payments for too large an amount.         // Here, we block the payment if the amount is over 1000 usd.         // Otherwise, we allow collecting offline if the network connection is unavailable.         let offlineBehavior: SCPOfflineBehavior = {             if amount > UInt(1_000_00) {                 return .requireOnline             } else {                 return .preferOnline             }         }()          let createConfiguration = try CreateConfigurationBuilder().setOfflineBehavior(offlineBehavior).build()         Terminal.shared.createPaymentIntent(params, createConfig: createConfiguration) { createResult, createError in             if let error = createError {                 // Handle offline-specific errors in your application (for example,                 // `offlineBehavior` was set to `.requireOnline` and the SDK is offline).                 print(\"createPaymentIntent failed: \\(error)\")             } else if let paymentIntent = createResult {                 print(\"createPaymentIntent succeeded\")                 // If the `PaymentIntent` was created offline, its `stripeId` field will be nil.                 if let onlineCreatedId = paymentIntent.stripeId {                     print(\"created online\");                 } else {                     print(\"created offline\")                 }             }         }     } }``\n\n#### Managing risk while offline![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `Terminal.createPaymentIntent` accepts a `CreateConfiguration` parameter. By default, if you’re operating offline, the Terminal SDK stores all offline payments, then forwards them to Stripe’s backend when connectivity is restored. You can pass a `CreateConfiguration` object with `offlineBehavior` set to `REQUIRE_ONLINE` to fail the current transaction if you’re operating offline. You might want to disallow transactions above a certain amount or disallow all offline transactions if the SDK has stored a set of transactions whose sum exceeds a certain amount.\n\nThe SDK exposes two properties to help you manage risk:\n\n1.  `Terminal.offlineStatus.sdk.offlinePaymentsCount`\n2.  `Terminal.offlineStatus.sdk.offlinePaymentAmountsByCurrency`\n\n#### Managing latency while offline![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Terminal SDK automatically determines whether to collect payments online or offline based on your network connectivity. However, you might want to operate offline despite having an active network connection – for example, if you need to collect transactions quickly and your network connection is slow. You can pass a `CreateConfiguration` object with `offlineBehavior` set to `FORCE_OFFLINE` to collect the payment offline regardless of connectivity. Payments collected offline while the Terminal SDK has an active network connection are forwarded in the background.\n\n[](#collect-payment-method)\n\nSwiping cards isn’t supported while offline. Tapping cards is also not supported in markets where [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") is required. Use the [BluetoothReaderDelegate didRequestReaderInput](https://stripe.dev/stripe-terminal-ios/docs/Protocols/SCPReaderDisplayDelegate.html#/c:objc(pl)SCPReaderDisplayDelegate(im)terminal:didRequestReaderInput:) method to display the valid card presentment options to the customer. Using the `initWithUpdatePaymentIntent` parameter in `CollectConfiguration` is disabled when offline mode is enabled unless the `offlineBehavior` is set to `REQUIRE_ONLINE`.\n\n#### Note\n\nPayment liability is your responsibility when operating your reader offline. Because magnetic stripe data is easy to spoof, Stripe disallows this option while operating offline.\n\nPaymentViewController.swift\n\n`import UIKit import StripeTerminal  class PaymentViewController: UIViewController {      // Action for a \"Checkout\" button     func checkoutAction() {         // SNIP: Create PaymentIntent         Terminal.shared.collectPaymentMethod(paymentIntent) { collectResult, collectError in             if let error = collectError {                 // Handle offline-specific errors in your application (for example,                 // unsupported payment method).                 print(\"collectPaymentMethod failed: \\(error)\")             }             else if let paymentIntent = collectResult {                 print(\"collectPaymentMethod succeeded\")                 // ... Confirm the payment             }         }     } }`\n\n[](#confirm-payment)\n\nThis step is similar to [confirming payments while online](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=ios#confirm-payment). The primary difference is that your integration must handle offline-specific error cases, such as when the transaction exceeds the Stripe-enforced offline maximum of 10,000 USD or equivalent in your operating currency.\n\nIn some cases, the SDK might create a `PaymentIntent` online, but confirm it while offline. When this happens, the `PaymentIntent` might have a non-null `stripeId`. You can check `offlineDetails.storedAt` to determine if it was confirmed offline.\n\nPaymentViewController.swift\n\n`import UIKit import StripeTerminal  class PaymentViewController: UIViewController {      // Action for a \"Checkout\" button     func checkoutAction() {          // SNIP: Create PaymentIntent, and collect payment method.         Terminal.shared.confirmPaymentIntent(paymentIntent) { confirmResult, confirmError in             if let error = confirmError {                 // Handle offline-specific errors in your application (for example,                 // unsupported payment method).                 print(\"confirmPaymentIntent failed: \\(error)\")             } else if let confirmedPaymentIntent= confirmResult {                 print(\"confirmPaymentIntent succeeded\")                 if let storedAt = paymentIntent.offlineDetails.storedAt {                     print(\"confirmed offline\");                 } else {                     print(\"confirmed online\")                 }             }         }     } }`\n\n#### Providing receipts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou might require information about the card used to complete a payment while offline. For example, you might need to generate a receipt for customers who require one at the time of purchase.\n\nIf the PaymentIntent is confirmed offline, retrieve its [OfflineCardPresentDetails](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPOfflineCardPresentDetails.html) from the `paymentIntent.offlineDetails.offlineCardPresentDetails` property.\n\nThis hash contains a [ReceiptDetails](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPReceiptDetails.html) property you can use to generate a receipt, as well as other card details like the cardholder name and card brand.\n\nNot all receipt details are available while operating offline. [Prebuilt email receipts](https://docs.stripe.com/terminal/features/receipts#prebuilt) are only sent after connectivity is restored and the payment is successfully captured.\n\n[](#wait-for-forward)\n\nWhen Internet access is restored, the SDK automatically begins forwarding the stored offline payments.\n\nIf you power off your POS device too soon, your payments might not be forwarded. You can query `Terminal.offlineStatus.sdk.networkStatus` to make sure your POS is online and can forward payments, and `Terminal.offlineStatus.sdk.offlinePaymentsCount` to check how many payments the Terminal SDK has to be forwarded.\n\n[](#capture-payment)\n\n#### Note\n\nWhile offline, you can create PaymentIntents with `captureMethod` set to `automatic`. Once you confirm these PaymentIntents, they have a `Succeeded` status instead of `RequiresCapture`. Stripe automatically captures the payments after you forward them.\n\nPayments that are successfully forwarded and authorized require capture from your backend or application:\n\n*   To capture payments from your backend, use [webhooks](https://docs.stripe.com/webhooks) to listen for PaymentIntents with a `requires_capture` status.\n*   To capture payments from your application, wait for your application to receive calls to `OfflineDelegate.didForwardPayment` for each PaymentIntent as the SDK forwards it. A PaymentIntent is ready to capture if its status is `RequiresCapture`.\n\nIf your application determines when to capture a PaymentIntent after `confirmPaymentIntent`, they’re ready to capture when the status is `RequiresCapture` , and the `offlineDetails` is null or has a `requiresUpload` of `NO` .\n\nCapture a payment after `confirmPaymentIntent`, if it’s confirmed online:\n\nPaymentViewController.swift\n\n``// SNIP: Create PaymentIntent, and collect payment method. Terminal.shared.confirmPaymentIntent(paymentIntent) { confirmResult, confirmError in     if let error = confirmError {         // Handle offline-specific errors in your application (for example,         // unsupported payment method).         print(\"confirmPaymentIntent failed: \\(error)\")     } else if let confirmedPaymentIntent = confirmResult {         if intent.status == .requiresCapture {             if let offlineDetails = confirmedPaymentIntent.offlineDetails(),                offlineDetails.requiresUpload {                 // Offline payment, wait for `didForwardPaymentIntent` (see snippet below)             } else {                 // Online payment, can be captured now             }         }         // else, handle other intent.status results here     } }``\n\nCapture an offline payment after the SDK forwards it in your OfflineDelegate’s `didForwardPaymentIntent`:\n\nCustomOfflineDelegate.swift\n\n`import StripeTerminal  class CustomOfflineDelegate: OfflineDelegate {     // ...     func terminal(_ terminal: Terminal, didForwardPaymentIntent intent: PaymentIntent, error: Error?) {         if let error = error {             // Handle the error appropriate for your application             return         }          if intent.status == .requiresCapture {             // The intent is ready to be captured.         } else {             // Handle the intent.status as appropriate.         }     }     // ... }`",
  "title": "Collect card payments while offline | Stripe Documentation",
  "description": "Collect card payments with intermittent, limited, or no internet connectivity.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/payments/connect-reader?reader-type=usb",
  "markdown": "# Connect to a reader | Stripe DocumentationThe Stripe Docs logo\n\nUse the Stripe Terminal Android SDK 2.22.0 (or later) to support USB connections for the [Stripe Reader M2](https://docs.stripe.com/terminal/payments/setup-reader/stripe-m2), [BBPOS WisePad 3](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepad3), and [BBPOS Chipper 2X BT](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-chipper2xbt) readers. USB-connected readers avoid Bluetooth interference and disconnection issues by using a wired connection to the reader.\n\nYou must use a USB cable that supports both data and charging, like the USB 2.0 cable that’s included with the Stripe Reader M2 and BBPOS WisePad 3. If the cable included with your Terminal reader is charge-only—like the one included with the BBPOS Chipper 2X BT—use a third-party USB 2.0 cable that can transfer data.\n\nFollow these steps to connect your app to a Terminal reader with a USB cable:\n\n*   [Discover readers](#discover-readers)\n*   [Connect to a reader](#connect-reader)\n\n#### Caution\n\nDon’t use mobile device settings to pair with your reader. Pairing the reader through device settings makes the reader unavailable to connect to your app.\n\n[](#discover-readers)\n\nUse the [discoverReaders](https://stripe.dev/stripe-terminal-android/core/com.stripe.stripeterminal/-terminal/discover-readers.html) method to enable your point-of-sale app to search for nearby readers. You must set `DiscoveryConfiguration.discoveryMethod` to USB to discover USB-connected devices.\n\nMake sure the reader is on and connected with a USB 2.0 cable to the device running your app. When prompted, grant permission to access the USB-connected reader.\n\nIf you’re plugging in the reader for the first time, an Android system prompt displays to connect to the reader. You can select the “Always open” checkbox to open your app without prompting when it’s connected to a reader.\n\nReaderDiscoveryActivity.kt\n\n``class ReaderDiscoveryActivity : AppCompatActivity(), DiscoveryListener {    var discoverCancelable: Cancelable? = null    // ...    // Action for a \"Discover Readers\" button    fun discoverReadersAction() {     val config = DiscoveryConfiguration.UsbDiscoveryConfiguration()      Terminal.getInstance().discoverReaders(config, this, object : Callback {       override fun onSuccess() {         println(\"discoverReaders succeeded\")       }        override fun onFailure(e: TerminalException) {         e.printStackTrace()       }     })    }    // DiscoveryListener   override fun onUpdateDiscoveredReaders(readers: List<Reader>) {     // In your app, display the discovered reader(s) to the user.     // Call `connectUsbReader` after the user selects a reader to connect to.    }  }``\n\n[](#connect-reader)\n\nTo connect to a discovered reader, call the `connectUsbReader` method from your app. As soon as the SDK connects to the reader, the reader’s status light shines solid blue.\n\nYou must [register your reader](https://docs.stripe.com/terminal/fleet/locations-and-zones) to a [location](https://docs.stripe.com/api/terminal/locations) upon connection. To do so, create and use a `UsbConnectionConfiguration` with the `locationId` set to the relevant location ID when connecting.\n\nReaderDiscoveryActivity.kt\n\n``// Call `connectUsbReader` with the selected reader and a connection config // to register to a location as set by your app. val connectionConfig = ConnectionConfiguration.UsbConnectionConfiguration(``\n  \n\n`\"{{LOCATION_ID}}\"`\n\n`) Terminal.getInstance().connectUsbReader(selectedReader, connectionConfig, readerListener, object : ReaderCallback() {    override fun onSuccess(reader: Reader) {     println(\"Successfully connected to reader\")   }    override fun onFailure(e: TerminalException) {     e.printStackTrace()   } })`\n\nDon’t program your app to call `disconnectReader` to conserve power. The reader efficiently handles power management using its standby mode.\n\n### Prioritize the connection type ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Terminal SDK doesn’t automatically prioritize one connection type over another. If you want the ability to toggle between discovering devices with USB or Bluetooth, you can implement this functionality in your point-of-sale app. Call `discoverReaders` and set the `discoveryMethod` in the `DiscoveryConfiguration`.\n\nTo switch between USB and Bluetooth, call `disconnectReader` for your current connection type before initiating the other type. For example, call `disconnectReader` for a Bluetooth-connected reader before calling `connectUsbReader`.\n\n### Handle reader disconnects ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReader disconnects can sometimes occur between your app and the reader. For example, the reader can disconnect from your app if the USB cable connecting it to your device is disconnected. You can simulate an unexpected disconnect while testing by powering off the reader.\n\nThe `ReaderListener` includes a `onDisconnect` callback that provides your application with the `DisconnectReason` to help identify why the reader disconnected.\n\nWhen a reader disconnects, we recommend you automatically attempt reconnection and display notifications in your app relaying the reader status throughout the process.\n\nTo implement automatic reconnection:\n\n1.  Set `autoReconnectOnUnexpectedDisconnect` to true on the `ConnectionConfiguration`.\n2.  Implement the callbacks found in the `ReaderReconnectionListener`.\n3.  Pass a `usbReaderReconnectionListener` to your `ConnectionConfiguration`.\n    \n    `val usbReaderReconnectionListener = yourReconnectionListener  Terminal.getInstance().connectUsbReader(     reader,     UsbConnectionConfiguration(connectLocationId, true, usbReaderReconnectionListener),     readerListener,     readerCallback, )`\n    \n4.  When the SDK sends [onReaderReconnectStarted](https://stripe.dev/stripe-terminal-android/external/com.stripe.stripeterminal.external.callable/-reader-reconnection-listener/index.html#2086493177%2FFunctions%2F-405186196) to your app, display a message announcing that the reader lost connection and reconnection is in progress.\n    *   You can use the `Cancelable` object to stop the reconnection attempt at any time.\n5.  When the SDK indicates successful reconnection by sending [`onReaderReconnectSucceeded`](https://stripe.dev/stripe-terminal-android/external/com.stripe.stripeterminal.external.callable/-reader-reconnection-listener/index.html#677433242%2FFunctions%2F-405186196), display a message announcing the connection was restored and to continue normal operations.\n6.  If the SDK can’t reconnect to the reader and sends [`onReaderReconnectFailed`](https://stripe.dev/stripe-terminal-android/external/com.stripe.stripeterminal.external.callable/-reader-reconnection-listener/index.html#-1023342536%2FFunctions%2F-405186196), display a message stating that an unexpected disconnect occurred.\n\n`val readerReconnectionListener = object : ReaderReconnectionListener {     override fun onReaderReconnectStarted(reader: Reader, cancelReconnect: Cancelable) {         // 1. Notified at the start of a reconnection attempt         // Use cancelable to stop reconnection at any time     }      override fun onReaderReconnectSucceeded(reader: Reader) {         // 2. Notified when reader reconnection succeeds         // App is now connected     }      override fun onReaderReconnectFailed(reader: Reader) {         // 3. Notified when reader reconnection fails         // App is now disconnected     } }`\n\nIf you don’t configure automatic reconnection, you can handle the disconnect callback to just display a message in the app alerting the user that the reader unexpectedly disconnected and initiate reader discovery and connection.\n\n`class ReaderActivity : AppCompatActivity(), TerminalListener {    // ...    Terminal.getInstance().setTerminalListener(this)    // TerminalListener   override fun onUnexpectedReaderDisconnect(reader: Reader) {     // Consider displaying a UI to notify the user and start rediscovering readers   } }`\n\n### Reboot the connected reader![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Reader M2 and BBPOS WisePad 3 automatically reboot after operating for 24 hours. However, you can force the reader to reboot and reset its 24-hour timer by using the `rebootReader` API. After this action, the reader disconnects from the SDK and then reboots. If you’re using automatic reconnect, the SDK attempts to restore the connection with the reader.\n\n`Terminal.getInstance().rebootReader(object : Callback {     override fun onSuccess() {         // Reboot succeeded and the reader will disconnect.         // If your app is using automatic reconnect the reconnect will begin.     }      override fun onFailure(e: TerminalException) {         // Placeholder for handling the error     } })`\n\n### Automatic reconnection on application start![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Terminal doesn’t automatically reconnect to a reader when your application starts. Instead, you can build a reconnection flow by storing reader IDs and attempting to connect to a known reader on startup.\n\n1.  When you successfully connect to a reader, save its serial number in a persistent data storage location, such as the [Shared Preferences API](https://developer.android.com/training/data-storage/shared-preferences) (Android).\n2.  When your app launches, check the persistent data storage location for a saved serial number. If one is found, call the `discoverReaders` method so your application can try to find that reader again.\n3.  If the saved serial number matches any of the discovered readers, try connecting to that reader with the matching reader object returned from the call to `discoverReaders`. If the previously connected reader isn’t found, stop the discovery process.\n\nDisplay some UI during the discovery and connection process to indicate that an automatic reconnection is happening.\n\n[](#update-reader)\n\nYou _must_ support updating the reader from your application. The reader can’t update itself. These updates include regional configurations that keep you up to date with card network and issuer requirements, as well as potential security updates. Required updates start installing on connection to the reader and must complete before you can use the reader.\n\n#### Note\n\nInstalling updates requires that the reader’s battery is charged to more than 50%.\n\n### Required updates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf there are immediately required updates for the reader, the Terminal `connectionStatus` changes to `ConnectionStatus.CONNECTING` while changes are sent. The connection process won’t complete until the required update is installed on the reader.\n\nFor updates expected to take greater than 30 seconds, your application’s `ReaderListener` receives `onStartInstallingUpdate` with a `ReaderSoftwareUpdate` object containing the update details. This includes an estimate of total update duration, `timeEstimate`.\n\nIn your app, notify users that an update is being installed and display the progress so it’s clear why the connection process is taking longer than usual.\n\n`class ReaderActivity : AppCompatActivity(), ReaderListener {      // ...      // ReaderListener      override fun onStartInstallingUpdate(update: ReaderSoftwareUpdate, cancelable: Cancelable) {         // Show UI communicating that a required update has started installing     }      override fun onReportReaderSoftwareUpdateProgress(progress: Float) {         // Update the progress of the install     }      override fun onFinishInstallingUpdate(update: ReaderSoftwareUpdate?, e: TerminalException?) {         // Report success or failure of the update     }      // ... }`\n\nYou can cancel required updates using the `Cancelable` object. However, this results in a failed connection to the reader. For incremental-only updates, no `Cancelable` is provided as these updates can’t be canceled.\n\n### Optional updates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOptional updates are announced to your `ReaderListener` any time the reader is connected but not performing a transaction. Your app’s `ReaderListener` receives the `onReportAvailableUpdate` callback with the `ReaderSoftwareUpdate` object containing the update details. This update is also stored on the reader object as `reader.availableUpdate`, and is installed when calling `Terminal.installAvailableUpdate`. The update object includes an estimate of update duration (`timeEstimate`) and the future date on which you must install the update (`requiredAt`).\n\nIn your app, notify users of the available update and display a prompt to optionally continue with the update. To continue, call `installAvailableUpdate` to install the update in `onReportAvailableUpdate`.\n\nWhile the update installs, block the user from leaving the page in your app, and instruct them to keep the reader plugged in and powered on until the update completes. We recommend providing your user with a visual indicator of the update’s progress. You can use the `onReportReaderSoftwareUpdateProgress` method in your `ReaderListener`.\n\nWhen the `requiredAt` date has passed, the optional update won’t install until you disconnect and reconnect the reader.\n\nYou can also defer optional updates, but they become required if you don’t install them by a certain date.\n\n``class ReaderActivity : AppCompatActivity(), ReaderListener {      // ...      // ReaderListener      override fun onReportAvailableUpdate(update: ReaderSoftwareUpdate) {         // An update is available for the connected reader. Show this update in your application.         // This update can be installed using `Terminal.getInstance().installAvailableUpdate`.     }      // ... }``\n\nThe BBPOS and Chipper™ name and logo are trademarks or registered trademarks of BBPOS Limited in the United States and/or other countries. The Verifone® name and logo are either trademarks or registered trademarks of Verifone in the United States and/or other countries. Use of the trademarks does not imply any endorsement by BBPOS or Verifone.",
  "title": "Connect to a reader | Stripe Documentation",
  "description": "Connect your application to a Stripe Terminal reader.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepos-e",
  "markdown": "# Set up BBPOS WisePOS E\n\n## Learn how to set up the BBPOS WisePOS E.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wisepos-floating-tall.e8478124cda0e088b2e19f503f574f53.png)\n\nThe BBPOS WisePOS E is a countertop reader for Stripe Terminal apps.\n\nThe [Stripe Terminal SDK connects to the reader](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=internet) over the internet, LAN, or [handoff mode](https://docs.stripe.com/terminal/features/apps-on-devices/build#discover-and-connect-a-reader). This reader is compatible with the following integrations:\n\n*   JavaScript SDK\n*   iOS SDK\n*   Android SDK\n*   React Native SDK\n*   Server-driven\n\nFor BBPOS WisePOS E, we recommend the [server-driven integration](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=server-driven), which uses the Stripe API instead of a Terminal SDK. To view the reader’s parts and features, see the [BBPOS WisePOS E product sheet](https://d37ugbyn3rpeym.cloudfront.net/terminal/product-sheets/wpe_product_sheet.pdf).\n\n#### Warning\n\nStripe readers aren’t liquid-proof and we recommend that users make appropriate efforts to make sure their devices remain dry. If your device has experienced liquid ingress, we recommend that you stop using the device and let it dry thoroughly before attempting to re-use or charge the device. If your device doesn’t properly operate or charge properly after drying, you need to replace it.\n\n## Turn the reader on and off ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you first receive the device, install the battery. With the back of the device facing you, lift up from the indentation at the bottom left corner to detach the back cover. Insert the battery by sliding it into the exposed slot with the gold connectors at the top aligned. After the battery is in place, charge the reader by using an outlet or the optional ethernet dock. Connect the reader to power by plugging the provided cable into the port with the lightning bolt symbol.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wisepos-power.97a74f498008baacd6b6d88a30cd5dfc.jpg)\n\nAfter the reader is fully charged, hold down the power button on the right hand side until the screen turns on. After the device powers on, press the power button to sleep or wake the device. To fully power off the device, hold down the power button until the power off option is shown on the screen, then select it.\n\nIn a countertop deployment, leaving the device on for extended periods is expected. With a full charge, you can expect the battery to last about eight hours.\n\n#### Note\n\nEven when it’s not in use, leave the BBPOS WisePOS E plugged in and powered on to receive automatic software updates.\n\n## Access settings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo open the settings menu, swipe right from the left edge of the reader screen to reveal a **Settings** button. Tap the **Settings** button and enter the admin PIN `07139`. From here, you can update your WiFi settings or generate a pairing code for device registration. Battery status is displayed at the top right of this screen. To close the settings menu, click the back arrow in the top left corner.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wisepos-settings-panel.527bfcfb5009c6fe05b374b6f717fa00.png)\n\nSettings button\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wisepos-pin-screen.9a2fe095ebd9ef5bbfe92a12e405411e.png)\n\nAdmin PIN screen\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-settings-panel.4b22ea6d170de5988f950d72ef86f03a.png)\n\nSettings menu\n\n## Screen timeout ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe screen times out when the reader isn’t connected to a power source. The default timeout of 1 hour improves battery performance. To update this value, go to the [settings](#settings), select **Appearance**, then select a new screen timeout from the dropdown. The device screen turns on automatically after a device interaction occurs (such as touching the screen), or when the device enters the payments flow and a payment is initiated.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-settings-panel.4b22ea6d170de5988f950d72ef86f03a.png)\n\nSettings menu\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-appearance-menu.4abf84bd3fe14a1061eaed8b93d4bd70.png)\n\nAppearance menu\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-timeout-menu.1b82032fea1418ca99c72a71c071b713.png)\n\nTimeout menu\n\n## Connect the reader to the internet ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBecause the BBPOS WisePOS E is a smart reader, its reader software communicates directly with Stripe. Your point of sale application communicates with the reader through either a LAN (using a Terminal SDK) or the internet (using the [server-driven integration](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=server-driven)). When communicating with the reader through the LAN, the reader must connect to the same local network as your point of sale application. If you’re running into issues connecting your reader to the internet, follow the [troubleshooting steps](https://docs.stripe.com/terminal/readers/bbpos-wisepos-e#troubleshooting) to diagnose the issue.\n\n### WiFi![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo connect to WiFi or switch networks, go to [settings](#settings), then select **WiFi settings** to choose the network and connect. Attempting to join a new network disconnects the reader from any existing wireless connection. See our [network requirements](https://docs.stripe.com/terminal/network-requirements) for details about supported WiFi networks.\n\n### Ethernet![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEthernet connectivity requires the use of an optional dock, which provides wired Ethernet connectivity and keeps your smart reader fully charged using the included charging cable. You can purchase the dock separately through the Stripe dashboard. The Ethernet Dock features a 10/100 Ethernet port and rubber feet for stable countertop use.\n\nTo set up the dock:\n\n*   Connect the Ethernet cable from your dock to your router.\n*   Connect the dock to power. It has a minimum power requirement of 5V-2A (10W) and includes a charging cable, which you can plug into any USB-A power adapter (not included).\n*   When both cables are connected, insert the reader into the dock.\n\nTo confirm that the reader is properly docked, verify the reader is charging and the Ethernet icon is visible in the status bar.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-battery-icon.d1e81d69ea61041f809e60d79e25be54.png)\n\nCharging icon\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-ethernet-icon.c5ae0533a503eb51ee9c8d587a854af0.png)\n\nEthernet icon\n\n#### Note\n\nThe dock’s charging cable must be USB-A to USB-C. The dock doesn’t work with a USB-C to USB-C connection.\n\nThe reader obtains an IP address using DHCP. As soon as the network cable is plugged in, the reader attempts to establish communication with Stripe.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wisepos-ethernet-dock.340a1e6d1be6fcab4fd2d577d79e5939.png)\n\n## Network priority![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe BBPOS WisePOS E prioritizes connecting through Ethernet if possible. Even if previously configured for WiFi, the reader switches to using an Ethernet connection when connected to the dock with a plugged-in Ethernet cable. If you remove the reader from the dock, it switches back to the WiFi connection.\n\nThe BBPOS WisePOS E resets its priority to Ethernet when rebooting. Even if previously configured for WiFi, the reader switches to Ethernet if it detects an Ethernet cable connection while starting up.\n\nIf you dock the reader, but you don’t have an Ethernet cable plugged in, it uses WiFi. Regardless of connectivity while docked, you can still connect to WiFi and manage networks on the device.\n\n## Change the UI appearance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBy default, the user interface of your BBPOS WisePOS E reader uses a dark theme.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-splash-screen.319df062b5b694a4ec91e1c309c48e48.png)\n\nWelcome screen\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-darkmode-pay.fdf5e2100ca53b54e100a28b8589b1d1.png)\n\nPayment screen\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-darkmode-subtotal.50779461be74aa98f600aef3e7715a16.png)\n\nTipping selection screen\\*\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-darkmode-total.eb4f25263c136bed268f68a6f5e82933.png)\n\nTotal screen\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-darkmode-approved.6eb33af4ca019de7621d07363e24dd8e.png)\n\nApproved screen\n\n\\*The tipping selection screen appears if [on-reader tipping](https://docs.stripe.com/terminal/features/collecting-tips/on-reader) is configured.\n\nYou can change the appearance of the UI to use a different theme in the settings menu. Go to [settings](#settings), then select **Appearance**, and select a new theme from the dropdown.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-settings-panel.4b22ea6d170de5988f950d72ef86f03a.png)\n\nSettings menu\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-appearance-menu.4abf84bd3fe14a1061eaed8b93d4bd70.png)\n\nAppearance menu\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-theme-menu.fc7bd14827a7767e62c9f1bcd49110fa.png)\n\nTheme menu\n\n## Change the default reader language ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [BBPOS WisePOS E](https://docs.stripe.com/terminal/readers/bbpos-wisepos-e) supports changing the reader language in the settings menu. Swipe right across the screen to access the settings menu, and select your language.\n\n## Accessories for the reader ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can design your own accessories for the BBPOS WisePOS E. To download the BBPOS WisePOS E mechanical design files (.STP), you must first review and accept our [Terminal Design File License Agreement](https://stripe.com/legal/terminal-design). By downloading the file below, you agree to the terms outlined in the license.\n\n[Download Stripe design files](https://d37ugbyn3rpeym.cloudfront.net/terminal/bbpos_wpe_mechanical_design_files_and_guidelines.zip)\n\nThe BBPOS and Chipper™ name and logo are trademarks or registered trademarks of BBPOS Limited in the United States and/or other countries. The Verifone® name and logo are either trademarks or registered trademarks of Verifone in the United States and/or other countries. Use of the trademarks does not imply any endorsement by BBPOS or Verifone.",
  "title": "Set up BBPOS WisePOS E | Stripe Documentation",
  "description": "Learn how to set up the BBPOS WisePOS E.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/readers/stripe-reader-s700",
  "markdown": "# Stripe Reader S700 | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Stripe Reader S700.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/S700-3D.041eca5dfd580cdc451a41020b4dd45a.png)\n\nThe [Stripe Reader S700](https://docs.stripe.com/terminal/payments/setup-reader/stripe-reader-s700) is an Android-based smart reader for countertop and handheld use. You can customize the on-reader checkout UI using both prebuilt and custom elements.\n\nThe [Stripe Terminal SDK connects to the reader](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=internet) over the internet, LAN, or [handoff mode](https://docs.stripe.com/terminal/features/apps-on-devices/build#discover-and-connect-a-reader). This reader is compatible with JavaScript SDK, iOS SDK, Android SDK, React Native SDK, and server-driven integrations.\n\nFor the Stripe Reader S700, we recommend the [server-driven integration](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=server-driven), which uses the Stripe API instead of a Terminal SDK. To view the reader’s parts and features, see the [Stripe Reader S700 product sheet](https://d37ugbyn3rpeym.cloudfront.net/docs/terminal/S700_Product_Sheet_legal_0240314.pdf).\n\n#### Warning\n\nStripe readers aren’t liquid-proof and we recommend that users make appropriate efforts to make sure their devices remain dry. If your device has experienced liquid ingress, we recommend that you stop using the device and let it dry thoroughly before attempting to re-use or charge the device. If your device doesn’t properly operate or charge properly after drying, you need to replace it.\n\n## Battery and charging status ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen the Stripe Reader S700 is on, you can check the battery level in the charging LED indicator.\n\n| LEDs | Meaning |\n| --- | --- |\n|     | The reader is fully charged with the power cable connected. |\n|     | (flashing) The reader is charging. |\n|     | The reader’s battery level is low (10-20% remaining). |\n|     | The reader’s battery level is critically low (1-9% remaining) or drained (1% remaining). |\n|     | The reader is off, or the reader is on with the power cable disconnected. |\n\nTo prolong the rechargeable battery life, the battery charging rate is reduced outside the 15C (59F) to 45C (113F) temperature rate. The charging stops if the unit temperature is below 0C (32F) or above 60C (140F).\n\n## Expected sounds during payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following table describes sounds that occur during successful and failed payments on Stripe Reader S700.\n\n|     | Tap | Chip | Swipe |\n| --- | --- | --- | --- |\n| Success | 1 long, high-pitched beep | No sound | Not applicable |\n| Failure | 2 short, low-pitched beeps | No sound | 2 short beeps |\n\n## Troubleshoot the reader ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMake sure your network meets all of our [network requirements](https://docs.stripe.com/terminal/network-requirements), and try the steps in the [network troubleshooting](https://docs.stripe.com/terminal/network-requirements#troubleshooting) section.\n\nTo begin troubleshooting, use the following common scenarios to help diagnose the issue.\n\n### The reader won’t charge ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Stripe Reader S700 requires a recommended 12W of power for successful operation and battery charging. Stripe recommends using the AC power adapter that was supplied with your reader to make sure ample power is supplied to the reader for operation and charging. You can order a replacement power adapter in the [Dashboard](https://dashboard.stripe.com/terminal/shop/).\n\nFor a deeply discharged battery, a slow charging mechanism is applied to safely bring the battery to a safe zone for faster charging. During this phase, the charging LED indicator on the unit is on, however, the display remains off. This phase can take up to 30 minutes for a deeply discharged battery.\n\nIf you’re connecting the Stripe Reader S700 to a computer or laptop, make sure the USB-C port can support the recommended 12W of power. The USB-A port standard _does not_ support this power level—_do not_ use it.\n\n### The reader can’t connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo check connectivity, go to the [reader settings](https://docs.stripe.com/terminal/payments/setup-reader/stripe-reader-s700#settings) and select **WiFi settings**. This displays all available WiFi networks. To see more details about the connection, tap the connected network name.\n\n### The reader won’t update ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your reader doesn’t update, it’s possible that it can’t connect to Stripe. To check its connectivity to Stripe, go to the [reader settings](https://docs.stripe.com/terminal/payments/setup-reader/stripe-reader-s700#settings), then select **Diagnostics**. This displays a list of troubleshooting tests. Check Stripe connectivity and make sure it says `Passed`. If the Stripe connectivity test fails, follow the [troubleshooting steps](#reader-has-ip-address,-but-is-unable-to-communicate-with-stripe).\n\nIf you use a router, refer to your router’s manual and reconfigure the networking setup.\n\n## Stripe reader software ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe maintains the software that controls the Stripe Reader S700. The reader receives updates automatically from Stripe when not in use. These can include improvements and required security updates from Stripe and our hardware partners. As reader software updates are made available, update your readers to the latest available version to continue using Stripe Terminal. Failing to install a required update can prevent a reader from accepting payments.\n\nThe reader restarts every day at midnight for PCI compliance, and disconnects from the POS app every morning. Leave your reader on and connected to power to receive automatic software updates. This ensures that updates happen at midnight (in the timezone of the [assigned location](https://docs.stripe.com/terminal/fleet/locations-and-zones)) to avoid interruption to sales. If you unplug the reader at night, an update could start when you turn it back on. To manually check for an update, reboot the reader.\n\n### Reader software version ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Stripe Reader S700 software consists of four components: the reader application, firmware, configuration, and key identifier. The following table summarizes the latest version of each of these components for the countries where the Stripe Reader S700 is available.\n\nYou can find your reader’s versions in the **Diagnostics** menu by swiping in from the left edge of the screen, tapping **Settings**, and entering the admin code, **0-7-1-3-9**.\n\n| Countries | Reader | Firmware | Configuration |\n| --- | --- | --- | --- |\n| United States | `2.24.2.0` | `1.00.00.16.SZZZ.07` | `szzz_us_v5` |\n| Canada | `2.24.2.0` | `1.00.00.16.SZZZ.07` | `szzz_ca_v2` |\n| Australia | `2.24.2.0` | `1.00.00.16.SZZZ.07` | `szzz_prod_au_v6` |\n| Malyasia<br><br>New Zealand | `2.24.2.0` | `1.00.00.16.SZZZ.07` | `szzz_prod_apac_on_v4` |\n| Singapore | `2.24.2.0` | `1.00.00.16.SZZZ.07` | `szzz_prod_apac_on_v4` |\n| United Kingdom<br><br>Ireland<br><br>Finland | `2.24.2.0` | `1.00.00.16.SZZZ.07` | `szzz_prod_eu_off_v2` |\n| Austria<br><br>Belgium<br><br>Denmark<br><br>France<br><br>Italy<br><br>Germany<br><br>Netherlands<br><br>Spain<br><br>Sweden<br><br>Czech Republic<br><br>Luxembourg<br><br>Portugal<br><br>Switzerland<br><br>Norway | `2.24.2.0` | `1.00.00.16.SZZZ.07` | `szzz_prod_eu_on_v3` |\n\n### Reader software changelog![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### 2024-06-25 (version 2.24.2.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   UI fixes for the Reader app.\n*   Fixed an issue where auto-rotate was not working correctly for Stipe S700.\n\n#### 2024-05-30 (version 2.23.3.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Bug fixes and stability improvements.\n*   Updated the custom tip entry screen to include enter and cancel buttons.\n\n#### 2024-04-18 (version 2.22.3.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Fixed an installation error for language packs.\n*   Updated the 50% battery requirement when performing a configuration or key update on the battery.\n*   Fixed an issue where readers attempted to use a 2nd Gen AC on contactless EMV.\n*   Added support for connecting to a hidden Enterprise WPA or WPA2-EAP network.\n*   Added a progress indicator for key, firmware, and configuration updates.\n\n#### 2024-03-18 (version 2.21.2.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Fixed the text size and made copy changes and UI modifications for AAA accessibility compliance.\n*   Updated `PaymentIntent` support for Magstripe + PIN for EFTPOS.\n*   Fixed bugs related to support for `PaymentIntent` when using offline mode.\n\n#### 2024-02-08 (version 2.20.4.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Fixed an issue where iOS SDK 2.x versions returned nil for the `CardPresent` object `charges.paymentMethodDetails.cardPresent`.\n\n#### 2024-02-08 (version 2.20.3.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Bug fixes and stability improvements\n\n#### 2023-12-11 (version 2.19.2.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updated SCA support.\n*   Fixed an issue where the network screen running multiple connect calls could cause Armada to become unauthenticated.\n*   Added issuer information in the `PaymentMethod` bindings.\n*   Updated the refund by `PaymentIntent.id`.\n*   Surfaced the language detected from the card in the `PaymentIntent`.\n\n#### 2023-11-16 (version 2.18.9.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Bug fixes and stability improvements\n\n#### 2023-11-08 (version 2.18.5.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Bug fixes and stability improvements\n\n#### 2023-10-18 (version 2.17.8.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Bug fixes and stability improvements\n\n#### 2023-09-21 (version 2.16.7.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Bug fixes and stability improvements\n\n#### 2023-07-12 (version 2.15.5.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Fixed an issue where the NFC logo was missing on the cart display.\n*   Fixed an issue where the reader app crashed during firmware updates.\n*   Improved recovery from an issue that caused the reader to stop responding.\n*   You no longer need to check a box when connecting to hidden WiFi networks.\n*   Disabling the payment tone now works as intended on the WisePOS E.\n\n#### 2023-06-12 (version 2.14.3.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Improved reliability and security of Stripe SDK to reader connectivity.\n*   Fixed an issue where saved networks couldn’t always be forgotten.\n\n#### 2023-04-03 (version 2.12.2.3)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Fixed an issue where ROM background downloads were occasionally interrupted.\n*   Fixed an issue where language selection occasionally failed after factory reset.\n\n#### 2023-03-14 (version 2.11.4.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Improved reliability and security of Stripe SDK to reader connectivity.\n\n#### 2023-02-06 (version 2.10.2.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Devices now have a one hour screen timeout when the reader isn’t connected to a power source.\n\n#### 2023-01-04 (version 2.9.2.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Various improvements to animations during the payment flow.\n*   Improved reliability and security of Stripe SDK to reader connectivity.\n\n#### 2022-10-17 (version 2.8.4.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Improved performance when processing several payments sequentially.\n\n#### 2022-09-19 (version 2.7.7.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Rolled out support for dark and light themes on the reader update screen.\n\n#### 2022-06-13 (version 2.4.2.3)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Rolled out a new default splash screen.\n*   Rolled out access to the **Appearance** setting screen to switch between dark and light themes.\n\n#### 2022-04-13 (version 2.2.3.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Improved reliability and security of Stripe SDK to reader connectivity.\n*   Improved support for custom splash screens by applying opacity to the status bar.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Set up Stripe Reader S700](https://docs.stripe.com/terminal/payments/setup-reader/stripe-reader-s700)\n*   [Set up your integration](https://docs.stripe.com/terminal/payments/setup-integration)\n*   [Connect to a reader](https://docs.stripe.com/terminal/payments/connect-reader)\n*   [Collect payments](https://docs.stripe.com/terminal/payments/collect-card-payment)\n\nThe BBPOS and Chipper™ name and logo are trademarks or registered trademarks of BBPOS Limited in the United States and/or other countries. The Verifone® name and logo are either trademarks or registered trademarks of Verifone in the United States and/or other countries. Use of the trademarks does not imply any endorsement by BBPOS or Verifone.",
  "title": "Stripe Reader S700 | Stripe Documentation",
  "description": "Learn about Stripe Reader S700.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/fleet/offline-mode",
  "markdown": "# Configure offline mode | Stripe DocumentationThe Stripe Docs logo\n\nWhen you’re operating with intermittent, limited, or no network connectivity, Stripe Terminal allows you to store payments locally on [your POS device](https://docs.stripe.com/terminal/features/operate-offline/overview). When a network connection is restored, the SDK automatically forwards any stored payments to Stripe.\n\nYou can configure offline mode in the Dashboard or in the Configuration API.\n\nTo enable (or disable) offline mode, navigate to the relevant configuration you want to change and edit it. If adding a new configuration, create a new one first.\n\n1.  Navigate to the [Manage locations](https://dashboard.stripe.com/terminal/locations) page.\n2.  Find the specific location you want to change.\n3.  Click the overflow menu () > **Edit configuration**.\n4.  Click **Edit** or **Override** next to the **Offline mode** icon.\n5.  Enable (or disable) the toggle depending on your preference.\n6.  Click **Update**.\n7.  Apply the configuration changes by clicking **Apply changes** on the configuration drawer.\n\nThe offline mode setting updates on the reader within 10 minutes.",
  "title": "Configure offline mode | Stripe Documentation",
  "description": "Enable or disable offline mode on your readers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/fleet/splash-screen",
  "markdown": "# Configure readers with a custom splash screen\n\nA splash screen is the default screen that displays when your reader is ready to accept payments. You can set a custom splash screen for these readers in one of two ways:\n\nYou can configure an account default splash screen, which applies to all readers in your fleet. You can also configure a custom splash screen for individual locations, which overrides the splash screen configured at the account level. Locations without a custom splash screen inherit the account default splash screen.\n\nTo update the splash screen, navigate to the relevant configuration you want to change and edit it. If adding a new configuration, create a new one first.\n\n1.  Navigate to the [Manage locations](https://dashboard.stripe.com/terminal/locations) page.\n2.  Find the specific location you want to change.\n3.  Click the overflow menu () > **Edit configuration**.\n4.  Click **Edit** or **Override** next to the **Splash screen** icon.\n5.  Select the reader type (for example, S700, BBPOS WisePOS E) to indicate which reader type to apply the splash screen to.\n    *   You can’t upload or apply a single splash screen across every reader type.\n6.  Upload an image to display on your readers. JPG and PNG images must be less than 2MB. GIF images must be less than 4 MB. Each reader has a specific display resolution and you must crop your JPG or PNG image to fit those dimensions. GIF images scale automatically.\n7.  Click **Done**.\n8.  Apply the configuration changes by clicking **Apply changes** on the configuration drawer.\n\n#### Note\n\nOnly Stripe S700 and BBPOS WisePOS E readers can use GIF images for the splash screen.\n\n| Reader | Resolution (W x H) |\n| --- | --- |\n| Stripe S700 | 1080 x 1920 |\n| BBPOS WisePOS E | 720 x 1280 |\n| Verifone P400 | 320 x 480 |\n\nAfter uploading, save the changes and apply the configuration. The splash screen updates on the reader within 10 minutes.",
  "title": "Configure readers with a custom splash screen | Stripe Documentation",
  "description": "Customize the default splash screen for your readers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/fleet/reboot-time",
  "markdown": "# Configure the reboot time window\n\n## Configure the reboot time windowBeta\n\n## Customize the reboot time window for your readers.\n\nBy default, BBPOS WisePOS E and Stripe Reader S700 readers reboot every 24 hours at midnight. If your business is open or processing payments during this time, you might want to set a custom reboot window to avoid any interruptions.\n\nYou can set a specific time period for the devices to reboot according to their registered location’s local time. For example, if a device is registered in a location with a local time corresponding to UTC-8:00, but it’s managed from a location in UTC-5:00, the reboot is scheduled to UTC-8:00.\n\n#### Note\n\nTo avoid disruption, not every reader in the location will update simultaneously. Instead, the readers will reboot randomly within the configured time period.\n\nTo change the reboot window, navigate to the relevant configuration you want to change and edit it. If adding a new configuration, create a new one first.\n\n1.  Navigate to the [Manage locations](https://dashboard.stripe.com/terminal/locations) page.\n2.  Find the specific location you want to change.\n3.  Click the overflow menu () > **Edit configuration**.\n4.  Click **Edit** or **Override** next to the **Reboot time** icon.\n5.  Select a start and end time.\n    *   If `start_hour` is less than `end_hour`, we consider them as values for the same day. If `start_hour` is greater than `end_hour`, we consider the `end_hour` a value for the next day.\n6.  Click **Update**.\n7.  Apply the configuration changes by clicking **Apply changes** on the configuration drawer.\n\nStripe sets the new reboot window within 10 minutes. If the reader has already rebooted for the day, the reboot window takes effect during the next time period.",
  "title": "Configure the reboot time window | Stripe Documentation",
  "description": "Customize the reboot time window for your readers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/payments/connect-reader?reader-type=internet",
  "markdown": "# Connect to a reader | Stripe DocumentationThe Stripe Docs logo\n\nSmart readers run Stripe reader software to communicate directly with Stripe over the internet. Before you can connect your application to a smart reader, you must register the reader to your Stripe account.\n\nThe simplest way to register your reader is to add it in the [Dashboard](https://dashboard.stripe.com/terminal).\n\n1.  If you already created a Location, click it. Otherwise, create one by clicking **\\+ New**.\n2.  Under the **Readers** section, click **\\+ New**.\n3.  Go to the [reader settings](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepos-e#settings), and then tap **Generate pairing code**.\n4.  Enter the code when prompted.\n\nAfter you register your reader, it’s ready to use with the server-driven integration. We recommend storing the reader ID (`tmr_xxx`) within your application so you know which reader to send transactions to from your point of sale. You can retrieve reader IDs using the [list readers](https://docs.stripe.com/api/terminal/readers/list) endpoint.\n\nThe BBPOS and Chipper™ name and logo are trademarks or registered trademarks of BBPOS Limited in the United States and/or other countries. The Verifone® name and logo are either trademarks or registered trademarks of Verifone in the United States and/or other countries. Use of the trademarks does not imply any endorsement by BBPOS or Verifone.",
  "title": "Connect to a reader | Stripe Documentation",
  "description": "Connect your application to a Stripe Terminal reader.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/fleet/tipping",
  "markdown": "# Configure on-reader tips | Stripe DocumentationThe Stripe Docs logo\n\nYou can use [on-reader tips](https://docs.stripe.com/terminal/features/collecting-tips/overview) to display suggested tip amounts on the reader before customers present their payment method. We support the following on-reader tip types:\n\nTo configure on-reader tips:\n\n1.  Navigate to the [Manage locations](https://dashboard.stripe.com/terminal/locations/) page.\n2.  Find the specific location you want to change.\n3.  Click the overflow menu () > **Edit configuration** to display the configuration drawer.\n4.  Click **Edit** or **Override** next to the **Tipping** icon.\n5.  Choose the **Tipping mode**.\n6.  Choose the **Currency**.\n7.  Enter the desired tipping options (for example, you can enter 10%, 15%, and 20% for percentage-based tipping), and repeat this process for different tipping modes and currencies.\n8.  Click **Review** to view your changes, then click **Confirm**.\n9.  Click **Apply changes**.\n\nStripe applies the tipping configurations on the reader within 10 minutes.",
  "title": "Configure on-reader tips | Stripe Documentation",
  "description": "Customize the tipping options displayed on your readers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/oauth-reference",
  "markdown": "# Connect OAuth reference | Stripe DocumentationThe Stripe Docs logo\n\n## This reference lists available public methods for our OAuth endpoints for Connect.\n\nThe OAuth [Connect](https://docs.stripe.com/connect \"Connect\") flow allows you to customize the user’s experience by passing additional parameters to Stripe. Some common examples are explained below, and the rest of the reference lists every possible option.\n\n#### Note\n\nAs a platform, remember that data you create for a Standard account (that is, charges, customers, [invoices](https://docs.stripe.com/api/invoices \"invoices\"), and so on) will be visible on their Stripe account. This also means if they connect other platforms, those platforms will have access to that data too.\n\nStarting in June 2021, Platforms using OAuth with `read_write` scope won’t be able to connect to accounts that are controlled by another platform.\n\n[Extensions](https://docs.stripe.com/building-extensions) won’t experience any changes to how OAuth behaves. Learn more about [OAuth changes for Standard Platforms](https://docs.stripe.com/connect/oauth-changes-for-standard-platforms).\n\n## Common examples![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Prefill fields![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nProvide the best possible user experience for users who need to create a new Stripe account by prefilling the account form fields with information you already have, like the user’s email and name. Prefilling has no effect if your user already has a Stripe account. You can’t prefill certain fields, including terms of service acceptance and RISA acceptance in Japan.\n\n### Dynamically set the redirect URI ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor security purposes, Stripe redirects a user only to a predefined URI. However, Connect allows you to define more than one redirect URI, which you can use to further customize the user’s experience. For example, you could redirect some of your users back to **https://sub1.example.com** and others to **https://sub2.example.com**.\n\nTo dynamically set the redirect URI:\n\n1.  In your [platform settings](https://dashboard.stripe.com/account/applications/settings), add each redirect URI.\n2.  Add a `redirect_uri` parameter to your authorization request and set the value to one of your redirect URIs.\n\n`https://connect.stripe.com/oauth/authorize?response_type=code&client_id={{CLIENT_ID}}&scope=read_write&redirect_uri=https://sub2.example.com`\n\nIf no `redirect_uri` is specified in the URL, then Stripe uses the first URI configured in your platform settings.\n\nFor Standard accounts: GET https://connect.stripe.com/oauth/authorize\n\nSends the user to Stripe to connect to your platform.\n\n### Request ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Parameter | Description |\n| --- | --- |\n| `client_id` | The unique identifier provided to your application, found in your [application settings](https://dashboard.stripe.com/account/applications/settings). |\n| `response_type` | The only option at the moment is **code**. |\n| `redirect_uri`Optional | The URL for the authorize [response](#get-authorize-response) redirect. If provided, this must exactly match one of the comma-separated `redirect_uri` values in your [application settings](https://dashboard.stripe.com/account/applications/settings). To protect yourself from certain forms of man-in-the-middle attacks, the live mode `redirect_uri` must use a secure HTTPS connection. Defaults to the `redirect_uri` in your application settings if not provided. |\n| `scope`OptionalStandard Only | **read\\_write** or **read\\_only**, depending on the level of access you need. Defaults to **read\\_only** for Standard accounts. Note **read\\_only** [can only be specified for extensions](https://docs.stripe.com/connect/oauth-changes-for-standard-platforms). |\n| `state`Optional | An arbitrary string value we’ll pass back to you, useful for CSRF protection. |\n\nThe following query string parameters are all optional—we use them to prefill details in the account form for new users. Some prefilled fields (for example, URL or product category) might be automatically hidden. Any parameters with invalid values are silently ignored.\n\nNote that some of these parameters apply only to Standard accounts (indicated).\n\n| Parameter | Description |\n| --- | --- |\n| `stripe_user[email]`Recommended | The user’s email address. Must be a valid email format. |\n| `stripe_user[url]`Recommended | The URL for the user’s business. This may be the user’s website, a profile page within your application, or another publicly available profile for the business, such as a LinkedIn or Facebook profile. It must be URL-encoded and include a scheme (**http** or **https**). If you prefill this field, include a description of the user’s products or services and their contact information in the linked page. If we don’t have enough information, we’ll have to reach out to the user directly before initiating payouts. |\n| `stripe_user[country]` | Two-letter country code (for example, **US** or **CA**). Must be a country that Stripe currently supports. |\n| `stripe_user[phone_number]` | The business phone number. Must be 10 digits only. Must also prefill `stripe_user[country]` with the corresponding country. |\n| `stripe_user[business_name]` | The legal name of the business. |\n| `stripe_user[business_type]` | The type of the business. For Standard accounts, the value must be **sole\\_prop**, **corporation**, **non\\_profit**, **partnership**, or **llc**. |\n| `stripe_user[first_name]` | First name of the person filling out a Stripe application. |\n| `stripe_user[last_name]` | Last name of the person filling out a Stripe application. |\n| `stripe_user[dob_day]` `stripe_user[dob_month]` `stripe_user[dob_year]` | Day (**0**\\-**31**), month (**1**\\-**12**), and year (**YYYY**, greater than 1900) for the birth date of the person filling out a Stripe application. If you choose to pass these parameters, you must pass all three. |\n| `stripe_user[street_address]`Standard only | Street address of the business. |\n| `stripe_user[city]`Standard only | Address city of the business. To prevent ambiguity, also prefill `stripe_user[country]` with the corresponding country. |\n| `stripe_user[state]`Standard only | Address state of the business. Must be the two-letter state or province code (for example, **NY** for a US business or **AB** for a Canadian one). Must also prefill `stripe_user[country]` with the corresponding country. |\n| `stripe_user[zip]`Standard only | Address postal code of the business. Must be a string. To prevent ambiguity, also prefill `stripe_user[country]` with the corresponding country. |\n| `stripe_user[physical_product]`Standard only | A string: **true** if the user sells a physical product, **false** otherwise. |\n| `stripe_user[product_description]` | A description of what the business is accepting payments for. |\n| `stripe_user[currency]`Standard only | Three-letter [ISO code](http://en.wikipedia.org/wiki/ISO_4217) representing currency, in lowercase (for example, **usd** or **cad**). Must be a valid country and currency combination that Stripe supports. Must prefill `stripe_user[country]` with the corresponding country. |\n| `stripe_user[first_name_kana]` | The Kana variation of the first name of the person filling out a Stripe application. Must prefill `stripe_user[country]` with **JP**, as this parameter is only relevant for Japan. |\n| `stripe_user[first_name_kanji]` | The Kanji variation of the first name of the person filling out a Stripe application. Must prefill `stripe_user[country]` with **JP**, as this parameter is only relevant for Japan. |\n| `stripe_user[last_name_kana]` | The Kana variation of the last name of the person filling out a Stripe application. Must prefill `stripe_user[country]` with **JP**, as this parameter is only relevant for Japan. |\n| `stripe_user[last_name_kanji]` | The Kanji variation of the last name of the person filling out a Stripe application. Must prefill `stripe_user[country]` with **JP**, as this parameter is only relevant for Japan. |\n| `stripe_user[gender]` | The gender of the person filling out a Stripe application. (International regulations require either **male** or **female**.) Must prefill `stripe_user[country]` with **JP**, as this parameter is only relevant for Japan. |\n| `stripe_user[block_kana]`Standard only | The Kana variation of the address block. This parameter is only relevant for Japan. You must prefill `stripe_user[country]` with **JP** and `stripe_user[zip]` with a valid Japanese postal code to use this parameter. |\n| `stripe_user[block_kanji]`Standard only | The Kanji variation of the address block. This parameter is only relevant for Japan. You must prefill `stripe_user[country]` with **JP** and `stripe_user[zip]` with a valid Japanese postal code to use this parameter. |\n| `stripe_user[building_kana]`Standard only | The Kana variation of the address building. This parameter is only relevant for Japan. You must prefill `stripe_user[country]` with **JP** and `stripe_user[zip]` with a valid Japanese postal code to use this parameter. |\n| `stripe_user[building_kanji]`Standard only | The Kanji variation of the address building. This parameter is only relevant for Japan. You must prefill `stripe_user[country]` with **JP** and `stripe_user[zip]` with a valid Japanese postal code to use this parameter. |\n\n### Response ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe user’s browser is redirected back to your [configured redirect URI](https://dashboard.stripe.com/account/applications/settings) or the value you passed in the `redirect_uri` parameter. When successful, you receive the following query parameters:\n\n| Parameter | Description |\n| --- | --- |\n| `code` | An authorization code you can use in the next call to get an access token for your user. This can only be used once and expires in 5 minutes. |\n| `scope` | **read\\_write** or **read\\_only**, depending what you passed on the initial GET request. |\n| `state` | The value of the `state` parameter you provided on the initial GET request. |\n\n### Error Response ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn case of an error, the user’s browser won’t be redirected except in the case of `access_denied`. Instead, errors will be returned in a JSON dictionary with the following fields:\n\n| Parameter | Description |\n| --- | --- |\n| `error` | A unique [error code](#get-authorize-error-codes) per error type. |\n| `error_description` | A human readable description of the error. |\n| `state` | The value of the `state` parameter you provided on the initial GET request. |\n\n### Error Codes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Parameter | Description |\n| --- | --- |\n| `access_denied` | User denied authorization. |\n| `invalid_scope` | Invalid `scope` parameter provided. |\n| `invalid_redirect_uri` | Provided `redirect_uri` parameter is an invalid URL or isn’t allowed by your [application settings](https://dashboard.stripe.com/account/applications/settings). |\n| `invalid_request` | Missing `response_type` parameter. |\n| `unsupported_response_type` | Unsupported `response_type` parameter. Currently the only supported `response_type` is **code**. |\n\n## Complete the connection and get the account ID ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPOST https://connect.stripe.com/oauth/token\n\nUsed both for turning an `authorization_code` into an account connection, and for getting a new access token using a `refresh_token`.\n\n### Request ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMake this call using your secret API key as a `client_secret` POST parameter:\n\n`curl https://connect.stripe.com/oauth/token \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"code\"=\"ac_123456789\" \\   -d \"grant_type\"=\"authorization_code\"`\n\nWhen converting an authorization code to an access token, you must use an API key that matches the mode—live or test—of the authorization code (which depends on whether the `client_id` used was production or development).\n\nWhen using a refresh token to request an access token, you may use either a test or live API key to obtain a test or live access token respectively. Any existing access token with the same scope and mode—live or test—is revoked.\n\n#### Note\n\nPer OAuth v2, this endpoint isn’t idempotent. Consuming an authorization code more than once revokes the account connection.\n\n| Parameter | Description |\n| --- | --- |\n| `grant_type` | **authorization\\_code** when turning an authorization code into an access token, or **refresh\\_token** when using a refresh token to get a new access token. |\n| `code` or `refresh_token` | The value of the `code` or `refresh_token`, depending on the `grant_type`. |\n| `scope`Optional | When requesting a new access token from a refresh token, any scope that has an equal or lesser scope as the refresh token. Has no effect when requesting an access token from an authorization code. Defaults to the scope of the refresh token. |\n\n### Response ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Parameter | Description |\n| --- | --- |\n| `scope` | The scope granted to the access token, depending on the scope of the authorization code and `scope` parameter. |\n| `stripe_user_id` | The unique ID of the account you have been granted access to, as a string. |\n| `livemode` | Indicates whether the platform’s access to perform updates on behalf of the connected account includes livemode access, or is limited to testmode actions. This matches the livemode of the application used [to authorize the OAuth request](#get-authorize). |\n| `token_type` | Always has a value of **bearer**. |\n| `access_token` | Deprecated Use the `Stripe-Account` [header](https://docs.stripe.com/connect/authentication#stripe-account-header) with your platform’s secret key (that can make requests on behalf of this Stripe account). |\n| `stripe_publishable_key` | Deprecated Use the `Stripe-Account` [header](https://docs.stripe.com/connect/authentication#stripe-account-header) with your platform’s publishable key (that can make requests on behalf of this Stripe account). |\n| `refresh_token` | Deprecated Can be used to get a new access token of an equal or lesser scope, or of a different live mode (where [applicable](https://docs.stripe.com/connect/testing#creating-accounts)). |\n\n### Error Response ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Parameter | Description |\n| --- | --- |\n| `error` | A unique [error code](#post-token-error-codes) per error type. |\n| `error_description` | A human readable description of the error. |\n\n### Error Codes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Parameter | Description |\n| --- | --- |\n| `invalid_request` | No `code`, `refresh_token`, or `grant_type` parameter provided (where required). |\n| `invalid_grant` | A variety of things can prompt this error:<br><br>*   `code` doesn’t exist, is expired, has been used, or doesn’t belong to you<br>*   `refresh_token` doesn’t exist or doesn’t belong to you<br>*   API key mode (live or test mode) doesn’t match the `code` or `refresh_token` mode |\n| `unsupported_grant_type` | Unsupported `grant_type` parameter specified. The only currently supported types are **authorization\\_code** and **refresh\\_token**. |\n| `invalid_scope` | Invalid `scope` parameter provided. |\n| `unsupported_response_type` | Unsupported `response_type` parameter. Currently the only supported `response_type` is **code**. |\n\n## Revoke the account’s access ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPOST https://connect.stripe.com/oauth/deauthorize\n\nUsed for revoking access to an account.\n\n#### Note\n\nYou can only revoke a Standard account’s access to your platform.\n\n### Request ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMake this call using your secret API key as an Authorization header.\n\n`curl https://connect.stripe.com/oauth/deauthorize \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d client_id=\"ca_FkyHCg7X8mlvCUdMDao4mMxagUfhIwXb\" \\   -d stripe_user_id=acct_ON3nXtRQkhmUIQ`\n\nWhen revoking access to an account, you must use an API key that matches the mode — live or test — used to connect to the account. Use a live mode API key if a production `client_id` created the connection, or a test mode API key for a development `client_id`.\n\n| Parameter | Description |\n| --- | --- |\n| `client_id` | The `client_id` of the application that you’d like to disconnect the account from. The account must be connected to this application. |\n| `stripe_user_id` | The account you’d like to disconnect from. |\n\n### Response ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Parameter | Description |\n| --- | --- |\n| `stripe_user_id` | The unique ID of the account you have revoked access to, as a string. This is the same as the `stripe_user_id` you passed in. If this is returned, the revocation is successful. |\n\n### Error Response ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Parameter | Description |\n| --- | --- |\n| `error` | A unique [error code](#post-deauthorize-error-codes) per error type. |\n| `error_description` | A human readable description of the error. |\n\n### Error Codes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Parameter | Description |\n| --- | --- |\n| `invalid_request` | No `client_id` or `stripe_user_id` parameter provided (where required). |\n| `invalid_client` | A variety of things can prompt this error:<br><br>*   `client_id` doesn’t belong to you<br>*   `stripe_user_id` doesn’t exist or isn’t connected to your application<br>*   API key mode (live or test mode) doesn’t match the `client_id` mode<br>*   `no_deauth_on_controlled_account` the account can’t be disconnected and instead use the [rejection API](https://docs.stripe.com/api/account/reject). |",
  "title": "Connect OAuth reference | Stripe Documentation",
  "description": "This reference lists available public methods for our OAuth endpoints for Connect.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=js",
  "markdown": "# Collect card payments | Stripe DocumentationThe Stripe Docs logo\n\nCollecting payments with Stripe Terminal requires writing a payment flow in your application. Use the Stripe Terminal SDK to create and update a [PaymentIntent](https://docs.stripe.com/api#payment_intents), an object representing a single payment session.\n\nDesigned to be robust to failures, the Terminal integration splits the payment process into several steps, each of which can be retried safely:\n\n1.  [Create a PaymentIntent](#create-payment)\n2.  [Collect a payment method](#collect-payment) you can define whether to [automatically](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) or [manually](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method) capture your payments\n3.  [Process the payment](#confirm-payment) Authorization on the customer’s card takes place when the SDK processes the payment.\n4.  (Optional) [Capture the payment](#capture-payment)\n\n[](#create-payment)\n\nThe first step when collecting payments is to start the payment flow. When a customer begins checking out, your application must create a `PaymentIntent` object. This represents a new payment session on Stripe.\n\nUse [test amounts](https://docs.stripe.com/terminal/references/testing#physical-test-cards) to try producing different results. An amount ending in `00` results in an approved payment.\n\nThe following example shows how to create a `PaymentIntent` on your server:\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1000 \\   -d \"currency\"=\"usd\" \\   -d \"payment_method_types[]\"=\"card_present\" \\   -d \"capture_method\"=\"manual\"`\n\nFor Terminal payments, the `payment_method_types` parameter must include `card_present`.\n\nYou can control the payment flow as follows:\n\n*   To fully control the payment flow for `card_present` payments, set the `capture_method` to `manual`. This allows you to add a reconciliation step before finalizing the payment.\n*   To authorize and capture payments in one step, set the `capture_method` to `automatic`.\n\nTo accept Interac payments in Canada, you must also include `interac_present` in `payment_method_types`. For more details, visit our [Canada documentation](https://docs.stripe.com/terminal/payments/regional?integration-country=CA).\n\nThe PaymentIntent contains a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret), a key that is unique to the individual PaymentIntent. To use the client secret, you must obtain it from the PaymentIntent on your server and [pass it to the client side](https://docs.stripe.com/payments/payment-intents#passing-to-client).\n\n`post '/create_payment_intent' do   intent = # ... Create or retrieve the PaymentIntent   {client_secret: intent.client_secret}.to_json end`\n\nUse the client secret as a parameter when calling [`collectPaymentMethod`](https://docs.stripe.com/terminal/references/api/js-sdk#collect-payment-method).\n\nThe `client_secret` is all you need in your client-side application to proceed to payment method collection.\n\n[](#collect-payment)\n\nAfter you’ve created a PaymentIntent, the next step is to collect a payment method with the SDK.\n\nIn order to collect a payment method, your app needs to be connected to a reader. The connected reader waits for a card to be presented after your app calls `collectPaymentMethod`.\n\n`async () => {   // clientSecret is the client_secret from the PaymentIntent you created in Step 1.   const result = await terminal.collectPaymentMethod(clientSecret);   if (result.error) {     // Placeholder for handling result.error   } else {     // Placeholder for processing result.paymentIntent   } }`\n\nThis method collects encrypted payment method data using the connected card reader, and associates the encrypted data with the local PaymentIntent.\n\n#### Caution\n\nCollecting a payment method happens locally and requires no authorization or updates to the Payment Intents API object until the next step, [process the payment](#confirm-payment).\n\n### Optionally inspect payment method details Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor advanced use cases, you can examine the payment method details of the presented card and perform your own business logic prior to authorization.\n\nUse the `update_payment_intent` parameter to attach a PaymentMethod to the server-side PaymentIntent. This data is returned in the `collectPaymentMethod` response.\n\n`async () => {   // clientSecret is the client_secret from the PaymentIntent you created in Step 1.   const result = await terminal.collectPaymentMethod(clientSecret, {     config_override: {       update_payment_intent: true     }   });   if (result.error) {     // Placeholder for handling result.error   } else {     const pm = result.paymentIntent.payment_method     const card = pm?.card_present ?? pm?.interac_present      // Placeholder for business logic on card before processing result.paymentIntent   } }`\n\n#### Note\n\nThis method attaches the collected encrypted payment method data with an update to the PaymentIntent object. It requires no authorization until the next step, [process the payment](#confirm-payment).\n\nThis advanced use case isn’t supported on the Verifone P400 or with simulated Terminal readers.\n\nYou can access attributes like card brand, funding, and other useful data at this point.\n\n#### Note\n\nStripe attempts to detect whether a mobile wallet is used in a transaction as shown in the `wallet.type` attribute. However, the attribute isn’t populated if the card’s issuing bank doesn’t support reader-driven identification of a mobile wallet, so accurate detection isn’t guaranteed. After authorization in the [confirmation](https://docs.stripe.com/terminal/payments/collect-card-payment#confirm-payment) step, Stripe receives up-to-date information from the networks and updates `wallet.type` reliably\n\n### Cancel collection ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Programmatic cancellation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can cancel collecting a payment method by calling [`cancelCollectPaymentMethod`](https://docs.stripe.com/terminal/references/api/js-sdk#cancel-collect-payment-method) in the JavaScript SDK.\n\n#### Customer-initiated cancellation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you set `enable_customer_cancellation` to true for a transaction, smart reader users see a cancel button. Tapping the cancel button cancels the active transaction.\n\n`terminal.collectPaymentMethod(   clientSecret,   {     config_override: {       enable_customer_cancellation: true     }   } )`\n\n### Handle events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Note\n\nThe JavaScript SDK only supports the Verifone P400, BBPOS WisePOS E, and Stripe Reader S700, which have a built-in display. Your application doesn’t need to display events from the payment method collection process to users, as the reader displays them. To clear the payment method on a transaction, the cashier can press the red **X** key.\n\n[](#confirm-payment)\n\nAfter successfully collecting a payment method from the customer, the next step is to process the payment with the SDK. When you’re ready to proceed with the payment, call `processPayment` with the updated `PaymentIntent` from [Step 2](#collect_payment).\n\n*   For manual capture of payments, a successful `processPayment` call results in a `PaymentIntent` with a status of `requires_capture`.\n*   For automatic capture of payments, the `PaymentIntent` transitions to a `succeeded` state.\n\n`async () => {   const result = await terminal.processPayment(paymentIntent);   if (result.error) {     // Placeholder for handling result.error   } else if (result.paymentIntent) {     // Placeholder for notifying your backend to capture result.paymentIntent.id   } }`\n\n#### Warning\n\nYou must manually capture `PaymentIntents` within two days or the authorization expires and funds are released to the customer.\n\n### Handle failures ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen processing a payment fails, the SDK returns an error that includes the updated `PaymentIntent`. Your application needs to inspect the `PaymentIntent` to decide how to deal with the error.\n\n| PaymentIntent Status | Meaning | Resolution |\n| --- | --- | --- |\n| `requires_payment_method` | Payment method declined | Try collecting a different payment method by calling `collectPaymentMethod` again with the same PaymentIntent. |\n| `requires_confirmation` | Temporary connectivity problem | Call `processPayment` again with the same PaymentIntent to retry the request. |\n| PaymentIntent is `nil` | Request to Stripe timed out, unknown PaymentIntent status | Retry processing the original PaymentIntent. Don’t create a new one, as that could result in multiple authorizations for the cardholder. |\n\nIf you encounter multiple, consecutive timeouts, there might be a problem with your connectivity. Make sure that your app can communicate with the internet.\n\n### Avoiding double charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe PaymentIntent object enables money movement at Stripe—use a single PaymentIntent to represent a transaction.\n\nRe-use the same PaymentIntent after a card is declined (for example, if it has insufficient funds), so your customer can try again with a different card.\n\nIf you edit the PaymentIntent, you must call `collectPaymentMethod` to update the payment information on the reader.\n\nA PaymentIntent must be in the `requires_payment_method` state before Stripe can process it. An authorized, captured, or canceled PaymentIntent can’t be processed by a reader.\n\n[](#capture-payment)\n\nIf you defined `capture_method` as `manual` during `PaymentIntent` creation in [Step 1](#create-payment), the SDK returns an authorized but not captured `PaymentIntent` to your application. Learn more about the difference between [authorization and capture](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method).\n\nWhen your app receives a confirmed `PaymentIntent` from the SDK, make sure it notifies your backend to capture the payment. Create an endpoint on your backend that accepts a `PaymentIntent` ID and sends a request to the Stripe API to capture it:\n\n`curl -X POST https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/capture \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nA successful `capture` call results in a `PaymentIntent` with a status of `succeeded`.\n\n#### Note\n\nTo ensure the application fee captured is correct for connected accounts, inspect each `PaymentIntent` and modify the application fee, if needed, prior to manually capturing the payment.\n\n### Reconcile payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo monitor the payments activity of your business, you may want to reconcile PaymentIntents with your internal orders system on your server at the end of a day’s activity.\n\nA PaymentIntent that retains a `requires_capture` status may represent two things:\n\n**Unnecessary authorization on your customer’s card statement**\n\n*   Cause: User abandons your app’s checkout flow in the middle of a transaction\n*   Solution: If the uncaptured PaymentIntent isn’t associated with a completed order on your server, you can [cancel](https://docs.stripe.com/api/payment_intents/cancel) it. A canceled PaymentIntent can no longer be used to perform charges.\n\n**Incomplete collection of funds from a customer**\n\n*   Cause: Failure of the request from your app notifying your backend to capture the payment\n*   Solution: If the uncaptured PaymentIntent is associated with a completed order on your server, and no other payment has been taken for the order (for example, a cash payment), you can [capture](https://docs.stripe.com/api/payment_intents/capture) it.\n\n### Collect tips US only![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn the US, eligible users can [collect tips when capturing payments](https://docs.stripe.com/terminal/features/collecting-tips/on-receipt).",
  "title": "Collect card payments | Stripe Documentation",
  "description": "Prepare your application and backend to collect card payments using Stripe Terminal.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/payments/regional?integration-country=CA",
  "markdown": "# Regional considerations | Stripe DocumentationThe Stripe Docs logo\n\n​​For the most part, you’ll be able to use a single Terminal integration in all supported countries. However, due to local payment methods or regulations there are some country-specific requirements. After going through the [sample integration](https://docs.stripe.com/terminal/quickstart), use this guide to learn about country-specific requirements for Terminal.\n\nRefer to the following table to understand which readers and SDK platforms you can use in each country.\n\n## Integrate Terminal in Canada![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe supports Visa, Mastercard, American Express, Discover, and [Interac](https://docs.stripe.com/terminal/payments/regional?integration-country=CA#interac-payments) payments in Canada. All transactions must be made in Canadian dollars (CAD). To accept Terminal charges in Canada, either your platform account or connected account must be in Canada.\n\n### Use locations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreate [Locations](https://docs.stripe.com/api/terminal/locations/create) for your business with addresses in Canada and [associate your readers to them](https://docs.stripe.com/terminal/fleet/locations-and-zones). This will ensure that they automatically download the configuration needed to properly process charges in Canada.\n\nA valid [address for a Location](https://docs.stripe.com/api/terminal/locations/create#create_terminal_location-address) in Canada must contain the `line1`, `city`, `state`, `postal_code`, and `country` properties.\n\n`curl https://api.stripe.com/v1/terminal/locations \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"display_name\"=\"HQ\" \\   -d \"address[line1]\"=\"3040 Bur Oak Ave\" \\   -d \"address[city]\"=\"Markham\" \\   -d \"address[state]\"=\"ON\" \\   -d \"address[country]\"=\"CA\" \\   -d \"address[postal_code]\"=\"L6B 0R1\" \\`\n\n### Reader software version![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nVerifone P400 readers operating in Canada must use the reader software version `3.0.1.15` or later. Read about [Verifone P400 software updates](https://docs.stripe.com/terminal/readers/verifone-p400#stripe-reader-software) for details.\n\nSimilarly, BBPOS WisePad 3 readers must use the reader software version `4.01.00.38_Prod_NA_off_v21_480001` or later. Read about [BBPOS WisePad 3 software updates](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=bluetooth#update-reader) for details.\n\n### Translation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Language regulations](http://www.legisquebec.gouv.qc.ca/en/showdoc/cs/C-11#ga:l_i-gb:l_vii-h1) require that services, including point-of-sale services, be provided in French unless English has been agreed upon by the cardholder and their card issuer. Terminal is built to help you comply with these requirements if they apply to your business.\n\n#### Default reader language ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Verifone P400](https://docs.stripe.com/terminal/readers/verifone-p400) interface displays text in French in addition to English if it is registered to a location with an address in Canada.\n\nThe [BBPOS WisePOS E](https://docs.stripe.com/terminal/readers/bbpos-wisepos-e) and [Stripe Reader S700](https://docs.stripe.com/terminal/readers/stripe-reader-s700) support changing reader language in the Settings panel. Swipe right across the screen to access the Settings panel, and select your language.\n\nThe [BBPOS WisePad 3](https://docs.stripe.com/terminal/readers/bbpos-wisepad3) supports changing reader language directly in the reader interface. After you have registered your reader to a [Location](https://docs.stripe.com/api/terminal/locations) with an address in Canada, the reader installs a language pack relevant for your region if one isn’t already in place. To view available language options and to select a language, click the **Power / Settings** button and scroll down using the arrow keys until you reach the language selection menu. Highlight your desired language and press the green **Enter** key.\n\n#### Transaction language ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter the cardholder has presented their card, the reader determines the cardholder’s preferred language. Each screen after that point is translated according to the cardholder’s preferences.\n\n#### Other translations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re required to provide services in or would like to translate text into French in addition to English, ensure that any of your [custom reader screens](https://docs.stripe.com/terminal/features/display) and [receipts](https://docs.stripe.com/terminal/features/receipts) display the appropriate translations.\n\n## Interac payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInterac is the interbank network that handles routing of debit payments in Canada. Consumer debit cards in Canada are branded with an Interac logo and may also be co-branded with another payment network’s logo. Even if the card is co-branded, however, all Interac debit transactions must be routed through Interac. To maximize card acceptance, you should build Interac support into your integration.\n\n#### Note\n\n### Create a PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo accept Interac transactions you need to create your payments using the `interac_present` payment method type. Include the `card_present` payment method type as well if you accept Visa, Mastercard, and American Express payments.\n\n#### Note\n\nLearn more about the in-person PaymentIntent flow [here](https://docs.stripe.com/terminal/payments/collect-card-payment).\n\n**Client-side**\n\nCreate a `PaymentIntent` from your client using the iOS, Android, or React Native SDK:\n\n#### Note\n\nClient-side `PaymentIntent` creation is possible with the iOS, Android, or React Native SDK. If you’re using the server-driven integration, create a `PaymentIntent` server-side.\n\n**Server-side**\n\nThe JavaScript SDK and the server-driven integration require you to create the `PaymentIntent` on your server. For iOS, Android, or React Native, you can create the `PaymentIntent` on your server if the information required to start a payment isn’t readily available in your app.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=999 \\  -d currency=cad \\  -d \"payment_method_types[]\"=card_present \\  -d \"payment_method_types[]\"=interac_present \\  -d capture_method=manual`\n\n### Collect and process a payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you [process the payment](https://docs.stripe.com/terminal/payments/collect-card-payment), the reader determines whether to route the payment across Interac rails based on the profile of the card presented.\n\nIn cases where the Interac card is co-branded, the `payment_method_details.interac_present.brand` field on a PaymentIntent’s returned [charge](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-interac_present-brand) reports the co-brand. The type field on the `payment_method` for an Interac transaction is always `interac_present`.\n\nThere are further Interac requirements that Stripe handles automatically for you, without additional integration work on your side:\n\n*   Before a card is presented, on-screen prompts are in the default reader language. After the card information has been collected, the localization is based on the language preference specified by the presented card.\n*   The reader automatically prompts for PIN in cases where it is required.\n*   Interac Flash (contactless) payments are limited to 250 CAD and generally up to three consecutive transactions. Transactions higher than 100 CAD or the fourth contactless transaction in a row require the customer to insert their Interac card and enter their PIN.\n\n### Capture and reconcile![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUnlike Visa, Mastercard, and American Express transactions, Interac transactions are authorized and automatically captured in a single step. Your application shouldn’t continue to capture the PaymentIntent – if you attempt to capture an `interac_present` payment, the Stripe API returns an error. Be careful to prevent unintended and duplicate payments in your integration; if failures or declines occur while processing Interac, you can attempt to re-use the same PaymentIntent from the original transaction to safeguard against double-charging.\n\n### Refund an Interac payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn-person refunds are mandatory for Interac transactions in Canada. You can’t create refunds in the API or in the Dashboard for these payments. In this flow, the reader prompts the cardholder to present the card used in the original charge. After the card details are read successfully, your application processes the refund. Like online refunds, you can perform partial refunds by passing in an amount less than the transaction value.\n\nThe currency and the card used for refund processing must match those of the original charge, otherwise the request fails with an error.\n\nAs a fallback, you can offer refunds to different payment methods such as store credit or cash.\n\nTo initiate an in-person refund for an Interac payment, call the [refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment) endpoint:\n\n`curl https://api.stripe.com/v1/terminal/readers/tmr_xxx/refund_payment \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_intent=pi_xxx \\  -d amount=2000`\n\nThe [status of the reader action](https://docs.stripe.com/api/terminal/readers/object#terminal_reader_object-action-status) is `in_progress`, as shown in the following example, until the customer presents a card on the reader:\n\n`{   \"id\": \"tmr_xxx\",   \"object\": \"terminal.reader\",   \"action\": {     \"type\": \"refund_payment\",     \"refund_payment\": {       \"payment_intent\": \"pi_xxx\"     },     \"status\": \"in_progress\",     \"failure_code\": null,     \"failure_message\": null   },   … }`\n\nIf you’re using a [simulated reader](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven&reader=simulated), you can simulate payment method presentment with the [present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method) endpoint:\n\n`curl https://api.stripe.com/v1/test_helpers/terminal/readers/tmr_xxx/present_payment_method \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d type=interac_present`\n\nA successful refund generates a [terminal.reader.action\\_succeeded](https://docs.stripe.com/api/events/types#event_types-terminal.reader.action_succeeded) event. The reader’s `action.status` value changes to `succeeded`, and the `action.refund_payment` has a [refund](https://docs.stripe.com/api/terminal/readers/object#terminal_reader_object-action-refund_payment-refund) attribute under it.\n\nA failed refund generates a [terminal.reader.action\\_failed](https://docs.stripe.com/api/events/types#event_types-terminal.reader.action_failed) event. The reader’s `action.status` value changes to `failed`, and the [action.failure\\_code](https://docs.stripe.com/api/terminal/readers/object#terminal_reader_object-action-failure_code) and [action.failure\\_message](https://docs.stripe.com/api/terminal/readers/object#terminal_reader_object-action-failure_message) properties each have a detailed failure explanation under them. The `action.refund_payment` property won’t have a `refund` attribute set under it.\n\nWe recommend using [webhooks](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#webhooks) to track when the reader action status changes.",
  "title": "Regional considerations | Stripe Documentation",
  "description": "Learn about regional considerations for integrating Terminal in different countries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/terminal/readers/object",
  "markdown": "# The Reader object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Type of reader, one of `bbpos_wisepad3`, `stripe_m2`, `bbpos_chipper2x`, `bbpos_wisepos_e`, `verifone_P400`, `simulated_wisepos_e`, or `mobile_phone_reader`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `bbpos_chipper2x` |\n    | `bbpos_wisepad3` |\n    | `bbpos_wisepos_e` |\n    | `mobile_phone_reader` |\n    | `simulated_wisepos_e` |\n    | `stripe_m2` |\n    | `verifone_P400` |\n    \n*   Custom label given to the reader for easier identification.\n    \n*   #### \n    \n    locationnullable stringExpandable\n    \n    The location identifier of the reader.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Serial number of the reader.\n    \n*   The networking status of the reader.\n    \n\n### More attributes\n\n*   #### \n    \n    device\\_sw\\_versionnullable string\n    \n*   #### \n    \n    ip\\_addressnullable string\n    \n*   #### \n    \n    last\\_seen\\_atnullable integerPreview feature\n    \n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Create a Reader](https://docs.stripe.com/api/terminal/readers/create)\n\nCreates a new `Reader` object.\n\n### Parameters\n\n*   #### \n    \n    registration\\_codestringRequired\n    \n    A code generated by the reader used for registering to an account.\n    \n*   Custom label given to the reader for easier identification. If no label is specified, the registration code will be used.\n    \n*   The location to assign the reader to.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a `Reader` object if creation succeeds.\n\nPOST /v1/terminal/readers\n\n```\ncurl https://api.stripe.com/v1/terminal/readers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d label=\"Blue Rabbit\" \\  -d registration_code=simulated-wpe \\  -d location=tml_FDOtHwxAAdIJOh\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Update a Reader](https://docs.stripe.com/api/terminal/readers/update)\n\nUpdates a `Reader` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   The new label of the reader.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an updated `Reader` object if a valid identifier was provided.\n\nPOST /v1/terminal/readers/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [Retrieve a Reader](https://docs.stripe.com/api/terminal/readers/retrieve)\n\nRetrieves a `Reader` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Reader` object if a valid identifier was provided.\n\nGET /v1/terminal/readers/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/readers/tmr_FDOt2wlRZEdpd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmr_FDOt2wlRZEdpd7\",  \"object\": \"terminal.reader\",  \"action\": null,  \"device_sw_version\": \"\",  \"device_type\": \"simulated_wisepos_e\",  \"ip_address\": \"0.0.0.0\",  \"label\": \"Blue Rabbit\",  \"last_seen_at\": 1681320543815,  \"livemode\": false,  \"location\": \"tml_FDOtHwxAAdIJOh\",  \"metadata\": {},  \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",  \"status\": \"online\"}\n```\n\n## [List all Readers](https://docs.stripe.com/api/terminal/readers/list)\n\nReturns a list of `Reader` objects.\n\n### Parameters\n\n*   Filters readers by device type\n    \n*   A location ID to filter the response list to only readers at the specific location\n    \n*   Filters readers by serial number\n    \n*   A status filter to filter readers to only offline or online readers\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` readers, starting after reader `starting_after`. Each entry in the array is a separate Terminal `Reader` object. If no more readers are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/terminal/readers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/readers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tmr_FDOt2wlRZEdpd7\",      \"object\": \"terminal.reader\",      \"action\": null,      \"device_sw_version\": \"\",      \"device_type\": \"simulated_wisepos_e\",      \"ip_address\": \"0.0.0.0\",      \"label\": \"Blue Rabbit\",      \"last_seen_at\": 1681320543815,      \"livemode\": false,      \"location\": \"tml_FDOtHwxAAdIJOh\",      \"metadata\": {},      \"serial_number\": \"259cd19c-b902-4730-96a1-09183be6e7f7\",      \"status\": \"online\"    }    {...}    {...}  ],}\n```",
  "title": "The Reader object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepad3",
  "markdown": "# Set up BBPOS WisePad 3\n\n## Learn how to set up the BBPOS WisePad 3.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wisepad-floating-thumb.d6e3015116e0b4295b0106e770b9843e.png)\n\nThe BBPOS WisePad 3 is a handheld reader for use with mobile applications. It uses Bluetooth Low Energy (BLE) or USB (Android only) to [connect](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=bluetooth) to the Stripe Terminal SDK on a mobile device. The WisePad 3 features a display and PIN pad, which facilitates use in countries where PIN-authenticated transactions are more common.\n\nThis reader is compatible with our iOS, Android, and React Native SDKs. To view the reader’s parts and features, see the [BBPOS WisePad 3 product sheet](https://d37ugbyn3rpeym.cloudfront.net/terminal/product-sheets/wp3_product_sheet.pdf).\n\n#### Warning\n\nStripe readers aren’t liquid-proof and we recommend that users make appropriate efforts to make sure their devices remain dry. If your device has experienced liquid ingress, we recommend that you stop using the device and let it dry thoroughly before attempting to re-use or charge the device. If your device doesn’t properly operate or charge properly after drying, you need to replace it.\n\n## Turn the reader on and off ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can turn on the BBPOS WisePad 3 reader by pressing and holding the power button, located at the top right of the PIN pad. The display powers on and shows the device’s splash screen.\n\nThe display dims after a few seconds of inactivity. If inactive and disconnected from your application for more than 5 minutes, it beeps and powers off. Turn off the reader manually by pressing and holding the power button until the LED display shows a “Power off?” prompt, then press the green enter button to confirm.\n\n#### Note\n\nWith typical usage, you generally need to [charge the reader](#charging) once per day. The reader can typically accept approximately 600 contact or 800 contactless transactions in a single charge cycle.\n\n## Charge the reader ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo charge the BBPOS WisePad 3, use the included cable or a USB-A to USB-C cable.\n\n## Default reader language ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [BBPOS WisePad 3](https://docs.stripe.com/terminal/readers/bbpos-wisepad3) supports changing reader language directly in the reader interface. After you have registered your reader to a [Location](https://docs.stripe.com/api/terminal/locations), the reader installs a language pack relevant for your region if one isn’t already in place. To view available language options and to select a language, click the **Power / Settings** button and scroll down using the arrow keys until you reach the language selection menu. Highlight your desired language and press the green **Enter** key.\n\n## Accessories for the reader ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can design your own accessories for the BBPOS WisePad 3. To download the BBPOS WisePad 3 mechanical design files (.STP), you must first review and accept our [Terminal Design File License Agreement](https://stripe.com/legal/terminal-design). By downloading the file below, you agree to the terms outlined in the license.\n\n[Download Stripe design files](https://d37ugbyn3rpeym.cloudfront.net/terminal/bbpos_wp3_mechanical_design_files_and_guidelines.zip)\n\nThe BBPOS and Chipper™ name and logo are trademarks or registered trademarks of BBPOS Limited in the United States and/or other countries. The Verifone® name and logo are either trademarks or registered trademarks of Verifone in the United States and/or other countries. Use of the trademarks does not imply any endorsement by BBPOS or Verifone.",
  "title": "Set up BBPOS WisePad 3 | Stripe Documentation",
  "description": "Learn how to set up the BBPOS WisePad 3.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/features/collecting-tips/on-receipt",
  "markdown": "# Collect on-receipt tips | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to allow customers to add tips to receipts.\n\nSome business types allow customers to add a tip to a transaction after authorizing the card. This is most common for businesses in the dining and hospitality space (for example, a restaurant or bar), where a customer can add a tip onto the receipt.\n\nIn the US, after you confirm a [PaymentIntent](https://docs.stripe.com/api/payment_intents), you can collect a tip by capturing more than the authorized amount. This is known as over-capture. After you capture the PaymentIntent, your customer sees the full captured amount reflected on their statement.\n\nTo collect a tip, you must create and confirm a PaymentIntent following the steps outlined in [collecting in-person payments](https://docs.stripe.com/terminal/payments/collect-card-payment). You can verify that a given PaymentIntent is eligible for over-capture by accessing [overcapture\\_supported](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-overcapture_supported).\n\nNext, [capture](https://docs.stripe.com/api/payment_intents/capture) more than the authorized amount by providing an [amount\\_to\\_capture](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-amount_to_capture) that’s equal to the sum of the confirmed PaymentIntent and tip amount.\n\n`curl https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/capture \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount_to_capture=1800`\n\nOver-capturing updates the PaymentIntent [amount](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount) to reflect the new total, inclusive of the tip. This doesn’t result in an additional authorization, so your customer won’t see any immediate updates on their credit card statement. To see the original amount authorized, use the [amount\\_authorized](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-amount_authorized) field in the PaymentIntent’s underlying [Charge](https://docs.stripe.com/api/charges) object.\n\n## Limits ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can over-capture up to 50% of the PaymentIntent’s authorized `amount`, or 50 USD, whichever is greater. For example, if your PaymentIntent’s authorized `amount` is 40 USD, you can capture up to 90 USD; if your PaymentIntent’s `amount` is 100 USD, you can capture up to 150 USD.\n\nIf you need to capture more than these limits allow, there are two options:\n\n*   If your MCC is eligible, you can use [incremental authorization](https://docs.stripe.com/terminal/features/incremental-authorizations) to increase the PaymentIntent’s `amount`.\n*   You can create a new PaymentIntent to capture the tip amount using the [generated\\_card](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error-payment_method-card-generated_from-payment_method_details-card_present-generated_card) payment method from the first PaymentIntent.\n\n## Availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn-receipt tipping is available for United States businesses with eligible merchant category codes (MCCs), for payments using Visa, Mastercard, Discover, and American Express card brands.\n\nBusinesses in the following categories are eligible to collect tips using over-capture:\n\n*   Taxicabs and limousines\n*   Eating places and restaurants\n*   Drinking places (alcoholic beverages)\n*   Fast food restaurants\n*   Beauty and barber shops\n*   Health and beauty spas\n\n#### Merchant category codes (MCCs)\n\nIf you’re not sure about the eligibility of your merchant category, you can contact [support](https://support.stripe.com/contact). If you’re a [Connect](https://docs.stripe.com/connect \"Connect\") user, [set the merchant category codes](https://docs.stripe.com/connect/setting-mcc) for your connected accounts to match their businesses.",
  "title": "Collect on-receipt tips | Stripe Documentation",
  "description": "Learn how to allow customers to add tips to receipts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/features/collecting-tips/on-reader",
  "markdown": "# Collect on-reader tips | Stripe DocumentationThe Stripe Docs logo\n\nWith on-reader tipping, you can display suggested tip amounts on the reader before the customer presents their payment method. The reader shows the customer three suggestions based on the [tipping option](https://docs.stripe.com/terminal/features/collecting-tips/on-reader#customize-tips-reader) that you set up. The reader automatically shows a tipping selection screen on every call to collect a payment. When you [confirm the payment](https://docs.stripe.com/terminal/payments/collect-card-payment#confirm-payment), the `PaymentIntent` is confirmed for an amount inclusive of the selected tip.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-darkmode-pay.fdf5e2100ca53b54e100a28b8589b1d1.png)\n\nPayment screen\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-darkmode-subtotal.50779461be74aa98f600aef3e7715a16.png)\n\nTipping selection screen (percentage)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-darkmode-total.eb4f25263c136bed268f68a6f5e82933.png)\n\nTotal screen\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-darkmode-approved.6eb33af4ca019de7621d07363e24dd8e.png)\n\nApproved screen\n\n[](#customize-tips-reader)\n\nUse a [Configuration](https://docs.stripe.com/api/terminal/configuration) object to set the tipping configuration for your [BBPOS WisePad 3](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepad3) or [BBPOS WisePOS E](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepos-e) readers:\n\n*   Suggest smart tips—The reader dynamically shows three percentages or amounts, depending on the size of the pre-tip amount.\n*   Suggest percentages—The reader displays three percentage-based tip amounts.\n*   Suggest amounts—The reader displays three tip amounts.\n\nTo use the on-reader tipping feature on your BBPOS WisePad 3, you must use one of the following Terminal SDK versions:\n\n*   Android SDK 2.8.1 or greater\n*   iOS SDK 2.16.1 or greater\n\nYou can suggest three tip percentages or three tip amounts on the reader. The reader dynamically displays either of these smart tips, depending on a pre-tip amount threshold. Create or update a `Configuration` object as follows. The tips you collect with on-reader tipping are post-tax tips.\n\n`curl https://api.stripe.com/v1/terminal/configurations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"tipping[usd][percentages][]\"=15 \\  -d \"tipping[usd][percentages][]\"=20 \\  -d \"tipping[usd][percentages][]\"=25 \\  -d \"tipping[usd][fixed_amounts][]\"=100 \\  -d \"tipping[usd][fixed_amounts][]\"=200 \\  -d \"tipping[usd][fixed_amounts][]\"=300 \\  -d \"tipping[usd][smart_tip_threshold]\"=1000`\n\nWith the above example, the reader dynamically chooses what to suggest:\n\n*   If the pre-tip amount is below the `smart_tip_threshold` (10 USD), the reader shows three buttons suggesting $1, $2, or $3 tips from top to bottom.\n*   If the pre-tip amount is at the `smart_tip_threshold` (10 USD) or above, the reader shows three buttons suggesting tips that are 15%, 20%, or 25% of the pre-tip total from top to bottom.\n\nIf specifying more than one currency in your `Configuration` object, you must provide the same configuration keys for each currency. In other words, if you only specify `percentages` for `USD`, you may not specify `fixed_amounts` or `smart_tip_threshold` for any other currencies.\n\nAfter you create a `Configuration` object with your tipping configuration, you can [assign the configuration](https://docs.stripe.com/terminal/fleet/configurations-overview?dashboard-or-api=api#create-a-configuration-for-an-individual-location) to your account or a location. BBPOS WisePad 3 readers receive new or updated configurations when they connect to your POS application. BBPOS WisePOS E readers can take up to 5 minutes to receive new or updated configurations.\n\n[](#collect-payment)\n\nFor on-reader tipping, follow the instructions for [collecting payments](https://docs.stripe.com/terminal/payments/collect-card-payment) and create your `PaymentIntents` with `capture_method` as `manual`.\n\nWhen you [collect a payment method](https://docs.stripe.com/terminal/payments/collect-card-payment#collect-payment), your customer sees a tip selection screen on the reader that prompts them to select a tip before asking for their payment method.\n\nDepending on your [tipping configuration](https://docs.stripe.com/terminal/features/collecting-tips/on-reader#customize-tips-reader), the customer can choose a suggested tip, specify a custom tip, or leave no tip.\n\nAfter the customer makes their selection, the reader waits for them to present a card.\n\nWhen you process the payment, the reader adds the selected tip. If the payment is successful, the [amount](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-amount) in the `PaymentIntent` and `Charge` updates to include the tip amount.\n\nThe tip amount is returned in the [amount\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_details) object:\n\n| Scenario | [amount](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_details-tip) return value |\n| --- | --- |\n| On-reader tipping is disabled | `null` |\n| On-reader tipping is enabled, no tip selected | `0` |\n| On-reader tipping is enabled, tip amount selected | The amount selected |\n\nCustomers won’t see a tipping selection screen in these cases:\n\n1.  The `Configuration` object is missing a tipping configuration.\n2.  You enabled `skipTipping` in your tipping configuration.\n3.  The reader is in an unsupported country.\n4.  A tipping configuration can’t be applied to the current payment currency. For example, if the payment is in EUR but the `Configuration` object only specifies a tipping configuration for USD.\n\nWhen [testing payments](https://docs.stripe.com/terminal/references/testing#physical-test-cards) with the Stripe reader, the total amount (inclusive of any tip) might trigger decline responses depending on the decimal value of the total amount.\n\n[](#skip-tipping)\n\nYou can ignore the tipping configuration, which allows you to hide the tip selection screen on your [BBPOS WisePad 3](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepad3) or [BBPOS WisePOS E](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepos-e) reader when collecting payments.\n\nYou can hide the tip selection screen for individual transactions or temporarily for all transactions, which allows your customers to go directly to the card presentment screen.\n\nFor example, your restaurant might want to accept tips on the reader for takeout orders, but only allow [on-receipt tips](https://docs.stripe.com/terminal/features/collecting-tips/on-receipt) for dine-in customers.\n\nInclude the following code on your server to enable bypassing the tip selection screen.\n\n`curl https://api.stripe.com/v1/terminal/readers/tmr_xxx/process_payment_intent \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_intent=\"<payment_intent>\" \\  -d \"process_config[skip_tipping]\"=true`\n\n[](#tip-eligible)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wpe-tip-eligible-amount.4c189af877d87bd89aaf405409f16548.png)\n\n#### Note\n\nWhen collecting a payment, you can set a tip-eligible amount that’s different from the pre-tip amount. Setting a tip-eligible amount changes the value that percentage-based tips are calculated from. The customer is also shown the tip-eligible amount alongside the pre-tip amount on the tip selection screen.\n\nYou can use this setting for businesses that provide services in addition to selling goods. For example, a salon that sells haircuts and bottles of shampoo might want their customer to know that they calculate percentage-based tips on haircuts only.\n\n`curl https://api.stripe.com/v1/terminal/readers/tmr_xxx/process_payment_intent \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_intent=\"<payment_intent>\" \\  -d \"process_config[tipping][amount_eligible]\"=1500`\n\nThe above example sets a tip-eligible amount based on the currency of the payment. For a payment in USD, the tip-eligible amount is 15 USD.\n\nThe value of `eligible_amount` must be 0 or higher. If `eligible_amount` is equal to 0, tipping is skipped regardless of the value of `skip_tipping`. If `eligible_amount` is equal to the payment intent amount, `eligible_amount` is ignored and the tip is calculated based on the specified amount.\n\n#### Common mistake\n\nSetting a tip-eligible amount that’s greater than 0 while attempting to skip tipping results in an error.",
  "title": "Collect on-reader tips | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=js",
  "markdown": "# Set up your integration | Stripe DocumentationThe Stripe Docs logo\n\n### Terminal JavaScript SDK requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you integrate with [smart readers](https://docs.stripe.com/terminal/smart-readers) using the JavaScript SDK, make sure your network meets [our network requirements](https://docs.stripe.com/terminal/network-requirements).\n\nGetting started with the JavaScript SDK requires three steps:\n\n1.  [Install the SDK and client library](#install) on your checkout page\n2.  [Set up the connection token endpoint](#connection-token) on your backend and web application\n3.  [Initialize the SDK](#initialize) in your web application\n\n#### Note\n\nIf you integrate your web application with the JavaScript SDK, you can run it in a mobile browser as long as the mobile device is connected to the same local network as the reader and devices on that network can communicate directly with one another.\n\n[](#install)\n\n#### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo get started, include this script on your checkout page. This script must always load directly from **https://js.stripe.com** for compatibility with the latest reader software. Don’t include the script in a bundle or host a copy yourself; this might break your integration without warning.\n\n#### Use the Terminal JS SDK as a module ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe also provide an npm package to load and use the Terminal JS SDK as a module. For more information, check out the [project on GitHub](https://github.com/stripe/terminal-js).\n\n#### Note\n\n#### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#connection-token)\n\n#### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo connect to a reader, your backend needs to give the SDK permission to use the reader with your Stripe account, by providing it with the [secret](https://docs.stripe.com/api/terminal/connection_tokens/object#terminal_connection_token_object-secret) from a [ConnectionToken](https://docs.stripe.com/api/terminal/connection_tokens). Your backend needs to only create connection tokens for clients that it trusts.\n\n`curl https://api.stripe.com/v1/terminal/connection_tokens \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -X \"POST\"`\n\nObtain the secret from the ConnectionToken on your server and pass it to the client side.\n\n`post '/connection_token' do   token = # ... Create or retrieve the ConnectionToken   {secret: token.secret}.to_json end`\n\n#### Caution\n\nThe ConnectionToken’s secret lets you connect to any Stripe Terminal reader and take payments with your Stripe account. Be sure to authenticate the endpoint for creating connection tokens and protect it from cross-site request forgery (CSRF).\n\n#### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo give the SDK access to this endpoint, create a function in your web application that requests a ConnectionToken from your backend and returns the `secret` from the ConnectionToken object.\n\n`async function fetchConnectionToken() {   // Your backend should call /v1/terminal/connection_tokens and return the JSON response from Stripe   const response = await fetch('https://{{YOUR_BACKEND_URL}}/connection_token', { method: \"POST\" });   const data = await response.json();   return data.secret; }`\n\nThis function is called whenever the SDK needs to authenticate with Stripe or the Reader. It’s also called when a new connection token is needed to connect to a reader (for example, when your app disconnects from a reader). If the SDK can’t retrieve a new connection token from your backend, connecting to a reader fails with the error from your server.\n\n#### Caution\n\nDo not cache or hardcode the connection token. The SDK manages the connection token’s lifecycle.\n\n[](#initialize)\n\nThe [`StripeTerminal`](https://docs.stripe.com/terminal/references/api/js-sdk#stripeterminal-create) object made available by the SDK exposes a generic interface for discovering readers, connecting to a reader, and creating payments. To initialize a `StripeTerminal` instance in your JavaScript application, provide the ConnectionToken function implemented in [Step 2](#connection-token).\n\nYou must also provide a function to handle unexpected disconnects from the reader, [`onUnexpectedReaderDisconnect`](https://docs.stripe.com/terminal/references/api/js-sdk#stripeterminal-create). In this function, your app needs to notify the user that the reader disconnected. You can also include a way to attempt to reconnect to a reader. For more information, see [Handling disconnects](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=js&reader-type=internet#handling-disconnects).\n\n`const terminal = StripeTerminal.create({   onFetchConnectionToken: fetchConnectionToken,   onUnexpectedReaderDisconnect: unexpectedDisconnect, });  function unexpectedDisconnect() {   // You might want to display UI to notify the user and start re-discovering readers }`\n\n## SDK updates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe periodically releases updates which can include new functionality, bug fixes, and security updates. Update your SDK as soon as a new version is available. The currently available SDKs are:\n\n*   [Stripe Terminal Android SDK](https://github.com/stripe/stripe-terminal-android/releases)\n*   [Stripe Terminal iOS SDK](https://github.com/stripe/stripe-terminal-ios/releases)\n*   [Stripe Terminal JavaScript SDK](https://docs.stripe.com/terminal/references/api/js-sdk#changelog)\n*   [Stripe Terminal React Native SDK](https://github.com/stripe/stripe-terminal-react-native)\n\n## Supported browsers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Stripe Terminal JavaScript SDK strives to support all recent versions of major browsers. We support:\n\n*   Edge on Windows.\n*   Firefox on desktop platforms.\n*   Chrome and Safari on all platforms.\n*   The Android native browser on Android 4.4 and later.\n\nIf you have issues with the Stripe Terminal JavaScript SDK on a specific browser, please email [support-terminal@stripe.com](mailto:support-terminal@stripe.com).\n\n#### Caution\n\nNote: Using the Stripe Terminal JavaScript SDK with React Native isn’t supported. To build Stripe Terminal into your mobile app with React Native, use the [Stripe Terminal React Native SDK](https://github.com/stripe/stripe-terminal-react-native).",
  "title": "Set up your integration | Stripe Documentation",
  "description": "Set up a Stripe Terminal SDK or server-driven integration to accept in-person payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/references/api",
  "markdown": "# Terminal API and SDK references\n\n[Skip to content](#main-content)\n\n## Explore the API references for the server-driven integration and Terminal SDKs.\n\nSign up for developer updates:",
  "title": "Terminal API and SDK references | Stripe Documentation",
  "description": "Explore the API references for the server-driven integration and Terminal SDKs.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=ios",
  "markdown": "# Set up your integration | Stripe DocumentationThe Stripe Docs logo\n\n#### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo connect to a reader, your backend needs to give the SDK permission to use the reader with your Stripe account, by providing it with the [secret](https://docs.stripe.com/api/terminal/connection_tokens/object#terminal_connection_token_object-secret) from a [ConnectionToken](https://docs.stripe.com/api/terminal/connection_tokens). Your backend needs to only create connection tokens for clients that it trusts.\n\n`curl https://api.stripe.com/v1/terminal/connection_tokens \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -X \"POST\"`\n\nObtain the secret from the ConnectionToken on your server and pass it to the client side.\n\n`post '/connection_token' do   token = # ... Create or retrieve the ConnectionToken   {secret: token.secret}.to_json end`\n\n#### Caution\n\nThe ConnectionToken’s secret lets you connect to any Stripe Terminal reader and take payments with your Stripe account. Be sure to authenticate the endpoint for creating connection tokens and protect it from cross-site request forgery (CSRF).\n\n#### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo give the SDK access to this endpoint, implement the [ConnectionTokenProvider](https://stripe.dev/stripe-terminal-ios/docs/Protocols/SCPConnectionTokenProvider.html) protocol in your app, which defines a single function that requests a ConnectionToken from your backend.\n\n``import StripeTerminal  // Example API client class for communicating with your backend class APIClient: ConnectionTokenProvider {      // For simplicity, this example class is a singleton     static let shared = APIClient()      // Fetches a ConnectionToken from your backend     func fetchConnectionToken(_ completion: @escaping ConnectionTokenCompletionBlock) {         let config = URLSessionConfiguration.default         let session = URLSession(configuration: config)         guard let url = URL(string: \"https://{{YOUR_BACKEND_URL}}/connection_token\") else {             fatalError(\"Invalid backend URL\")         }         var request = URLRequest(url: url)         request.httpMethod = \"POST\"         let task = session.dataTask(with: request) { (data, response, error) in             if let data = data {                 do {                     // Warning: casting using `as? [String: String]` looks simpler, but isn't safe:                     let json = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any]                     if let secret = json?[\"secret\"] as? String {                         completion(secret, nil)                     }                     else {                         let error = NSError(domain: \"com.stripe-terminal-ios.example\",                                             code: 2000,                                             userInfo: [NSLocalizedDescriptionKey: \"Missing `secret` in ConnectionToken JSON response\"])                         completion(nil, error)                     }                 }                 catch {                     completion(nil, error)                 }             }             else {                 let error = NSError(domain: \"com.stripe-terminal-ios.example\",                                     code: 1000,                                     userInfo: [NSLocalizedDescriptionKey: \"No data in response from ConnectionToken endpoint\"])                 completion(nil, error)             }         }         task.resume()     } }``\n\nThis function is called whenever the SDK needs to authenticate with Stripe or the Reader. It’s also called when a new connection token is needed to connect to a reader (for example, when your app disconnects from a reader). If the SDK can’t retrieve a new connection token from your backend, connecting to a reader fails with the error from your server.\n\n#### Caution\n\nDo not cache or hardcode the connection token. The SDK manages the connection token’s lifecycle.\n\n#### Certificate pinning\n\nIn most cases, you shouldn’t configure your application with certificate pinning. If your application does require it, see the [certificate pinning](https://docs.stripe.com/tls-certificates#certificate-pinning) docs.",
  "title": "Set up your integration | Stripe Documentation",
  "description": "Set up a Stripe Terminal SDK or server-driven integration to accept in-person payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=android",
  "markdown": "# Set up your integration | Stripe DocumentationThe Stripe Docs logo\n\n## Set up a Stripe Terminal SDK or server-driven integration to accept in-person payments.\n\nGetting started with the Android SDK requires four steps:\n\n1.  [Install the SDK](#install) in your app\n2.  [Configure your app](#configure)\n3.  [Set up the connection token endpoint](#connection-token) in your app and backend\n4.  [Initialize the SDK](#initialize) in your app\n\n[](#install)\n\n#### Caution\n\nThe SDK is no longer compatible with the support libraries, as we use Room to store and maintain state across the app lifecycle. Make sure your app has migrated to AndroidX.\n\nTo install the SDK, add `stripeterminal` to the `dependencies` block of your [app/build.gradle](https://developer.android.com/studio/build/dependencies) file:\n\n`apply plugin: 'com.android.application'  android { ... }  dependencies {   implementation \"com.stripe:stripeterminal:3.7.1\"   // ... }`\n\nNext, since the SDK relies on Java 8, you’ll need to specify that as your target Java version (also in `build.gradle`):\n\n`compileOptions {     sourceCompatibility JavaVersion.VERSION_1_8     targetCompatibility JavaVersion.VERSION_1_8 }`\n\n#### Note\n\n[](#configure)\n\nYou must enable the `ACCESS_FINE_LOCATION` permission. To connect a Bluetooth reader, you must also enable Bluetooth permissions. Add the appropriate permissions to your manifest as shown here:\n\n`<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /> <uses-permission android:name=\"android.permission.BLUETOOTH\" android:maxSdkVersion=\"30\" /> <uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\" android:maxSdkVersion=\"30\" /> <uses-permission android:name=\"android.permission.BLUETOOTH_CONNECT\" /> <uses-permission android:name=\"android.permission.BLUETOOTH_SCAN\" />`\n\nBefore initializing the [Terminal](https://stripe.dev/stripe-terminal-android/core/com.stripe.stripeterminal/-terminal/index.html) object, add the following check to make sure that the `ACCESS_FINE_LOCATION` permission is enabled in your app:\n\n`if (ContextCompat.checkSelfPermission(getActivity(),   Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {     String[] permissions = {Manifest.permission.ACCESS_FINE_LOCATION};     // REQUEST_CODE_LOCATION should be defined on your app level     ActivityCompat.requestPermissions(getActivity(), permissions, REQUEST_CODE_LOCATION); }`\n\nAlso verify that the app user grants location permission—the SDK doesn’t function without it. To do this, override the `onRequestPermissionsResult` method in your app and check the permission result.\n\n`@Override public void onRequestPermissionsResult(   int requestCode,   @NonNull String[] permissions,   @NonNull int[] grantResults ) {   super.onRequestPermissionsResult(requestCode, permissions, grantResults);    if (requestCode == REQUEST_CODE_LOCATION && grantResults.length > 0       && grantResults[0] != PackageManager.PERMISSION_GRANTED) {     throw new RuntimeException(\"Location services are required in order to \" +                 \"connect to a reader.\");   } }`\n\n#### Note\n\nTo reduce fraud risks associated with payments, and to minimize disputes, Stripe needs to know where payments occur. If the SDK can’t determine the location of the Android device, payments are disabled until location access is restored.\n\n[](#connection-token)\n\n#### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo connect to a reader, your backend needs to give the SDK permission to use the reader with your Stripe account, by providing it with the [secret](https://docs.stripe.com/api/terminal/connection_tokens/object#terminal_connection_token_object-secret) from a [ConnectionToken](https://docs.stripe.com/api/terminal/connection_tokens). Your backend needs to only create connection tokens for clients that it trusts.\n\n`curl https://api.stripe.com/v1/terminal/connection_tokens \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -X \"POST\"`\n\nObtain the secret from the ConnectionToken on your server and pass it to the client side.\n\n`post '/connection_token' do   token = # ... Create or retrieve the ConnectionToken   {secret: token.secret}.to_json end`\n\n#### Caution\n\nThe ConnectionToken’s secret lets you connect to any Stripe Terminal reader and take payments with your Stripe account. Be sure to authenticate the endpoint for creating connection tokens and protect it from cross-site request forgery (CSRF).\n\n#### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo give the SDK access to this endpoint, implement the [ConnectionTokenProvider](https://stripe.dev/stripe-terminal-android/external/com.stripe.stripeterminal.external.callable/-connection-token-provider/index.html) interface in your app, which defines a single function that requests a ConnectionToken from your backend.\n\n``public class TokenProvider implements ConnectionTokenProvider {   @Override   public void fetchConnectionToken(ConnectionTokenCallback callback) {     try {       // Your backend should call /v1/terminal/connection_tokens and return the       // JSON response from Stripe. When the request to your backend succeeds,       // return the `secret` from the response to the SDK.       callback.onSuccess(secret);     } catch (Exception e) {       callback.onFailure(         new ConnectionTokenException(\"Failed to fetch connection token\", e));     }   } }``\n\nThis function is called whenever the SDK needs to authenticate with Stripe or the Reader. It’s also called when a new connection token is needed to connect to a reader (for example, when your app disconnects from a reader). If the SDK can’t retrieve a new connection token from your backend, connecting to a reader fails with the error from your server.\n\n#### Caution\n\nDo not cache or hardcode the connection token. The SDK manages the connection token’s lifecycle.\n\n#### Certificate pinning\n\nIn most cases, you shouldn’t configure your application with certificate pinning. If your application does require it, see the [certificate pinning](https://docs.stripe.com/tls-certificates#certificate-pinning) docs.\n\n[](#initialize)\n\nThe Android SDK is lifecycle aware. To prevent memory leaks and ensure proper cleanup of long-running Terminal SDK processes, your application must implement an `Application` subclass where `TerminalApplicationDelegate` is used to inform the SDK of lifecycle events.\n\nThis subclass registers activity lifecycle callbacks:\n\n`// Substitute with your application name, and remember to keep it the same as your AndroidManifest.xml class StripeTerminalApplication extends Application {     @Override     public void onCreate() {         super.onCreate();         TerminalApplicationDelegate.onCreate(this);     } }`\n\nThe [Terminal](https://stripe.dev/stripe-terminal-android/core/com.stripe.stripeterminal/-terminal/index.html) class made available by the Stripe Terminal SDK exposes a generic interface for discovering readers, connecting to a reader, creating payment, and updating reader software.\n\nTo get started, provide the current application context, the [ConnectionTokenProvider](https://stripe.dev/stripe-terminal-android/external/com.stripe.stripeterminal.external.callable/-connection-token-provider/index.html) implemented in [Step 3](#connection-token), and a [TerminalListener](https://stripe.dev/stripe-terminal-android/external/com.stripe.stripeterminal.external.callable/-terminal-listener/index.html) object. You can use this listener to handle events from the SDK, such as disconnects. For more information, see [Handling disconnects](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=android&reader-type=bluetooth#handling-disconnects).\n\n`// Create your listener object. Override any methods that you want to be notified about TerminalListener listener = new TerminalListener() {     @Override     public void onUnexpectedReaderDisconnect(@NonNull Reader reader) {         // Handle unexpected disconnects here     } };  // Choose the level of messages that should be logged to your console LogLevel logLevel = LogLevel.VERBOSE;  // Create your token provider. TokenProvider tokenProvider = new TokenProvider();  // Pass in the current application context, your desired logging level, your token provider, and the listener you created if (!Terminal.isInitialized()) {     Terminal.initTerminal(getApplicationContext(), logLevel, tokenProvider, listener); }  // Since the Terminal is a singleton, you can call getInstance whenever you need it Terminal.getInstance();`\n\n#### Caution\n\nIf you’re upgrading from a version below `1.0.0-rc2`, note that `TerminalLifecycleObserver` and `Application` classes are now mandatory.\n\n## SDK updates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe periodically releases updates which can include new functionality, bug fixes, and security updates. Update your SDK as soon as a new version is available. The currently available SDKs are:\n\n*   [Stripe Terminal Android SDK](https://github.com/stripe/stripe-terminal-android/releases)\n*   [Stripe Terminal iOS SDK](https://github.com/stripe/stripe-terminal-ios/releases)\n*   [Stripe Terminal JavaScript SDK](https://docs.stripe.com/terminal/references/api/js-sdk#changelog)\n*   [Stripe Terminal React Native SDK](https://github.com/stripe/stripe-terminal-react-native)",
  "title": "Set up your integration | Stripe Documentation",
  "description": "Set up a Stripe Terminal SDK or server-driven integration to accept in-person payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=react-native",
  "markdown": "# Set up your integration | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nTerminal’s React Native library is in early beta and in active development. Please report any issues you encounter to our [github](https://github.com/stripe/stripe-terminal-react-native/issues/new/choose) project.\n\nGetting started with the React Native SDK requires four steps:\n\n1.  [Install the SDK](#install) in your app\n2.  [Configure your app](#configure)\n3.  [Set up the connection token endpoint](#connection-token) in your app and backend\n4.  [Initialize the SDK in your app](#initialize)\n\n[](#install)\n\nThe [React Native SDK](https://github.com/stripe/stripe-terminal-react-native) is open source and fully documented. Internally, it makes use of native iOS and Android SDKs. Install the SDK by running:\n\n`npm install @stripe/stripe-terminal-react-native`\n\n[](#configure)\n\n### Pods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must run `pod install` in your `ios` directory to install the native dependencies.\n\n### Permissions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo prepare your app to work with the Stripe Terminal SDK, make a few changes to your **Info.plist** file in Xcode.\n\n1.  Enable location services with the following key-value pair.\n    \n    To reduce fraud risks associated with payments, and to minimize disputes, Stripe must know where payments occur. If the SDK can’t determine the location of the iOS device, payments are disabled until location access is restored.\n    \n2.  Make sure that your app runs in the background and remains connected to Bluetooth readers.\n    \n    | Required background modes for Bluetooth readers |     |\n    | --- | --- |\n    | **Key** | [UIBackgroundModes](https://developer.apple.com/documentation/bundleresources/information_property_list/uibackgroundmodes) |\n    | **Value** | **bluetooth-central** (Uses Bluetooth LE accessories) |\n    \n    Setting the [bluetooth-central](https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/CoreBluetoothBackgroundProcessingForIOSApps/PerformingTasksWhileYourAppIsInTheBackground.html#//apple_ref/doc/uid/TP40013257-CH7-SW6) background mode lets the reader remain in standby mode when your app is running in the background, or when the iOS device is locked. Without this value, standby fails. When your app is running in the background, the reader can turn off automatically to conserve power.\n    \n3.  Allow your app to display a Bluetooth permission dialog. The app store requires including this, even if your app doesn’t support connecting to Bluetooth readers.\n    \n    iOS 13 introduced more specific permissions concerning an app’s use of Bluetooth peripherals. Apps that link with Core Bluetooth must include this key in their Info.plist file to prevent the app from crashing on its first launch.\n    \n4.  Pass app validation checks when you submit it to the App Store. As of SDK version 3.4.0, this permission requirement is removed.\n    \n    This is an example—you can rephrase the prompt for user permission in your app.\n    \n\nSave your app’s **Info.plist**. Now it’s configured correctly and ready for use with the Stripe Terminal SDK.\n\n[](#connection-token)\n\n#### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo connect to a reader, your backend needs to give the SDK permission to use the reader with your Stripe account, by providing it with the [secret](https://docs.stripe.com/api/terminal/connection_tokens/object#terminal_connection_token_object-secret) from a [ConnectionToken](https://docs.stripe.com/api/terminal/connection_tokens). Your backend needs to only create connection tokens for clients that it trusts.\n\n`curl https://api.stripe.com/v1/terminal/connection_tokens \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -X \"POST\"`\n\nObtain the secret from the ConnectionToken on your server and pass it to the client side.\n\n`post '/connection_token' do   token = # ... Create or retrieve the ConnectionToken   {secret: token.secret}.to_json end`\n\n#### Caution\n\nThe ConnectionToken’s secret lets you connect to any Stripe Terminal reader and take payments with your Stripe account. Be sure to authenticate the endpoint for creating connection tokens and protect it from cross-site request forgery (CSRF).\n\n#### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo give the SDK access to this endpoint, create a token provider single function that requests a `ConnectionToken` from your backend.\n\n``import { StripeTerminalProvider } from '@stripe/stripe-terminal-react-native';  const fetchTokenProvider = async () => {   const response = await fetch(`{YOUR BACKEND URL}/connection_token`, {     method: 'POST',     headers: {       'Content-Type': 'application/json',     },   });   const { secret } = await response.json();   return secret; };``\n\nThis function is called whenever the SDK needs to authenticate with Stripe or with the reader. It’s also called when a new connection token is needed to connect to a reader (for example, when your app disconnects from a reader). If the SDK can’t retrieve a new connection token from your backend, connecting to a reader fails with the error from your server.\n\n> Do not cache or hardcode the connection token. The SDK manages the connection token’s lifecycle.\n\n[](#initialize)\n\nTo get started, pass in your token provider implemented in [Step 3](#connection-token) to `StripeTerminalProvider` as a prop.\n\n``import { StripeTerminalProvider } from '@stripe/stripe-terminal-react-native';  function Root() {   const fetchTokenProvider = async () => {     const response = await fetch(`${API_URL}/connection_token`, {       method: 'POST',       headers: {         'Content-Type': 'application/json',       },     });     const { secret } = await response.json();     return secret;   };    return (     <StripeTerminalProvider       logLevel=\"verbose\"       tokenProvider={fetchTokenProvider}     >       <App />     </StripeTerminalProvider>   ); }``\n\nAs a last step, call the `initialize` method from `useStripeTerminal` hook. You must call the `initialize` method from a component nested within `StripeTerminalProvider` and not from the component that contains the `StripeTerminalProvider`.\n\n`function App() {   const { initialize } = useStripeTerminal();    useEffect(() => {     initialize();   }, [initialize]);    return <View />; }`\n\n## SDK updates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe periodically releases updates which can include new functionality, bug fixes, and security updates. Update your SDK as soon as a new version is available. The currently available SDKs are:\n\n*   [Stripe Terminal Android SDK](https://github.com/stripe/stripe-terminal-android/releases)\n*   [Stripe Terminal iOS SDK](https://github.com/stripe/stripe-terminal-ios/releases)\n*   [Stripe Terminal JavaScript SDK](https://docs.stripe.com/terminal/references/api/js-sdk#changelog)\n*   [Stripe Terminal React Native SDK](https://github.com/stripe/stripe-terminal-react-native)",
  "title": "Set up your integration | Stripe Documentation",
  "description": "Set up a Stripe Terminal SDK or server-driven integration to accept in-person payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/features/collect-data",
  "markdown": "# Collect data | Stripe DocumentationThe Stripe Docs logo\n\n## Collect dataBeta\n\n## Use Terminal for data collection with the reader hardware interfaces.\n\n**Available in:** 🌎 for [BBPOS Chipper2X BT](https://docs.stripe.com/terminal/readers/bbpos-chipper2xbt) and [Stripe M2](https://docs.stripe.com/terminal/readers/stripe-m2) using [Android SDK](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=android) and [iOS SDK](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=ios) 3.7.0 and up\n\nUse the Terminal SDK to read non-PCI payment instruments, such as gift cards, using the reader’s hardware interfaces like the magnetic stripe reader. This feature isn’t available offline.\n\n#### Beta\n\nAfter swiping the card, the Terminal SDK provides a tokenized data object. Securely retrieve the cleartext track data on your backend.\n\nThe Terminal reader only reads and stores cleartext magstripe data that follows these formats:\n\n*   The card data is available on track 2 only.\n*   The card data uses only the [ISO/IEC-7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) track 2 start sentinel `;` and end sentinel `?`, without the separator character.\n*   The card data consists only of numeric digits.\n\n[Contact the Terminal team](mailto:terminal-collect-data@stripe.com) if your card numbers don’t match one of these approved formats.\n\n[](#collect-data)\n\nUse `Terminal.collectData()` to prompt for data collection from your point of sale application. Specify the type of collected data you want to receive, such as magstripe, in a configuration passed to the function.\n\n`import UIKit import StripeTerminal  class PaymentViewController: UIViewController {     func readGiftCard() throws {         let config = try CollectDataConfigurationBuilder().setCollectDataType(.magstripe).build()         self.cancelable = Terminal.shared.collectData(config) { collectedData, collectError in             if let error = collectError {                 // Handle read errors                 print(\"Collect data failed: \\(error)\")             } else if let data = collectedData, let stripeId = data.stripeId {                 print(\"Received collected data token: \\(stripeId)\")             }         }     } }`\n\n[](#fetch-collected-data)\n\n[Fetch the cleartext data](https://docs.stripe.com/api/terminal/reader-collected_data) from your backend using the collected data token. The collected data is stored on Stripe’s servers for 24 hours.\n\n`curl https://api.stripe.com/v1/terminal/reader_collected_data/tmrcd_xxxxxxxx \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n#### Note\n\nStripe doesn’t perform and isn’t responsible for the authentication of collected data or the authorization of transactions using collected data. Stripe isn’t liable for any illegal conduct or fraud by any third party associated with the collected data.",
  "title": "Collect data | Stripe Documentation",
  "description": "Use Terminal for data collection with the reader hardware interfaces.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/readers/bbpos-chipper2xbt",
  "markdown": "# BBPOS Chipper 2X BT | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the BBPOS Chipper 2X BT reader.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/bbpos-photo-no-white.bf21912a012f27483d48a968515d723c.png)\n\nThe [BBPOS Chipper 2X BT](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-chipper2xbt) is a handheld reader for use with mobile applications. It uses [Bluetooth Low Energy (LE)](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=bluetooth) or [USB](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=android&reader-type=usb) (Android only) to connect to the Stripe Terminal SDK on a mobile device.\n\nThis reader is compatible with iOS, Android, and React Native SDKs. To view the reader’s parts and features, see the [BBPOS Chipper 2X BT product sheet](https://d37ugbyn3rpeym.cloudfront.net/terminal/product-sheets/c2xbt_product_sheet.pdf).\n\n## LED status lights ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe LEDs on the reader show the current reader and NFC status.\n\n### Reader status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you turn on the BBPOS Chipper 2X BT, the LED located beside the power button shows the reader’s current status.\n\n| Light | Meaning |\n| --- | --- |\n| **None** | The reader is off. |\n| **Flashing blue every second** | The reader is on and ready to connect to a device. (Will turn off after 5 min.) |\n| **Multicolored flashing** | The reader has been discovered using Bluetooth Proximity or USB (Android only) and is ready to connect. |\n| **Steady blue** | The reader is connected to a device. |\n| **Flashing blue every 5 seconds** | The reader is in standby mode. (Will remain in standby indefinitely.) |\n| **Alternating red and magenta** | The reader is charging. |\n| **Flashing red** | The reader’s battery is low. |\n| **Rapidly flashing blue and orange** | The reader has finished installing a software update. If the reader is unresponsive after the update completes, restart the reader by turning it off and on. |\n\n### NFC status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe LEDs above the NFC marking show the NFC reading status.\n\n| LEDs | Meaning |\n| --- | --- |\n|     | (flashing) The reader is connecting to the POS terminal. |\n|     | The reader is ready for tapping a card. |\n|     | (LEDs on in consecutive order) The reader is reading card information. |\n|     | (LEDs and one beep sound) The reader has successfully read the card. |\n|     | (No LEDs and one beep sound) The transaction is complete. |\n|     | (No LEDs and two beep sounds) Retry tapping a card. |\n\n### Reader software releases ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe software on the BBPOS Chipper 2X BT consists of a firmware version, configuration name, and key identifier. The reader **software version** joins these three components with underscores into a single string.\n\nNote there are 3 different revisions to the BBPOS Chipper 2X BT. The first 6 characters in the serial number identifies which revision you have.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Set up BBPOS Chipper 2X BT](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-chipper2xbt)\n*   [Set up your integration](https://docs.stripe.com/terminal/payments/setup-integration)\n*   [Connect to a reader](https://docs.stripe.com/terminal/payments/connect-reader)\n*   [Collect payments](https://docs.stripe.com/terminal/payments/collect-card-payment)\n\nThe BBPOS and Chipper™ name and logo are trademarks or registered trademarks of BBPOS Limited in the United States and/or other countries. The Verifone® name and logo are either trademarks or registered trademarks of Verifone in the United States and/or other countries. Use of the trademarks does not imply any endorsement by BBPOS or Verifone.",
  "title": "BBPOS Chipper 2X BT | Stripe Documentation",
  "description": "Learn about the BBPOS Chipper 2X BT reader.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/readers/stripe-m2",
  "markdown": "# Stripe Reader M2 | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the Stripe Reader M2 Bluetooth reader.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/stripem2.bf6a7eabd353369bfa596a81ab51ca9a.png)\n\nThe [Stripe Reader M2](https://docs.stripe.com/terminal/payments/setup-reader/stripe-m2) is a small, robust reader for use with mobile applications. It uses [Bluetooth Low Energy (LE)](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=bluetooth) or [USB](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=android&reader-type=usb) (Android only) to connect to the Stripe Terminal SDK on a mobile device.\n\nThis reader is compatible with our iOS, Android, and React Native SDKs. To view the reader’s parts and features, see the [Stripe Reader M2 product sheet](https://d37ugbyn3rpeym.cloudfront.net/terminal/product-sheets/m2_product_sheet.pdf).\n\n## LED status lights ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe LEDs on top of the reader show the current status.\n\n### Battery and charging status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen the Stripe Reader M2 is on, you can press and release the power button once to check the battery level.\n\n| LEDs | Meaning |\n| --- | --- |\n|     | Full charge |\n|     | 75% charge |\n|     | 50% charge |\n|     | 25% charge |\n|     | (flashing) Charging |\n\n### Connectivity and reader status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you connect to the Stripe Reader M2, you can check the LEDs for the reader status.\n\n| LEDs | Meaning |\n| --- | --- |\n|     | (flashing, three times) Reader is connected to Bluetooth or USB |\n|     | Reader is in bootloader mode |\n|     | Reader is in standby mode |\n|     | (flashing, every 0.1 seconds for 30 seconds) Reader tampered |\n|     | (30 seconds) Reader integrity check failed |\n\n## Reader software releases ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe software on the Stripe Reader M2 consists of a firmware version, configuration name, and key identifier. The reader **software version** joins these three components with underscores into a single string.\n\n| Latest Version |\n| --- |\n| `2.01.00.21-SZZZ_Prod_US_v10-480001` |\n\n#### Firmware versions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Version | Release Date | Description |\n| --- | --- | --- |\n| `2.01.00.21` | `2024-05-22` | *   Fixed an issue where repeatedly pressing the power button causes a Bluetooth disconnect.<br>*   Fixed a Bluetooth initialization error that can cause Bluetooth connection timeout.<br>*   Fixed a bug that prevented Tag DF841A from disabling the Clear Bluetooth link key feature.<br>*   Modified the YiChip Bluetooth library to fix a problem that occurs when Bluetooth continuously communicates for a long time, resulting in timeouts and disconnects.<br>*   Modified JCB CDA Signature Verification requirement according to EMV Bulletin No. 290.<br>*   Fixed an issue where ICC transactions can terminate due to incorrect ICC Rx length checking.<br>*   Updated the MH1901H crypto library. |\n| `2.01.00.20` | `2023-10-24` | Bug fixes and improvements. |\n| `2.01.00.17` | `2023-04-17` | Bug fixes and improvements. |\n| `2.01.00.16` | `2022-10-17` | Bug fixes and improvements. |\n| `2.01.00.15` | `2022-03-17` | Bug fixes and improvements. |\n| `2.01.00.05` | `2021-07-01` | The initial firmware version available for this device. |\n\n#### Configurations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Name | Release Date | Description |\n| --- | --- | --- |\n| `SZZZ_Prod_US_v10` | `2024-02-29` | Updates production configuration for this device. |\n| `SZZZ_Prod_US_v5` | `2023-04-17` | Updates production configuration for this device. |\n| `SZZZ_Prod_US_v1` | `2021-11-03` | Updates production configuration for this device. |\n| `SZZZ_Test_US_v6` | `2021-07-01` | The initial configuration available for this device. |\n\n#### Key identifiers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Identifier | Release Date | Description |\n| --- | --- | --- |\n| `480001` | `2021-07-01` | The initial key identifier available for this device. |\n\n## Accessories for the reader ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use the [Stripe Reader M2](https://dashboard.stripe.com/terminal/shop) with an optional [dock](https://dashboard.stripe.com/terminal/shop/thsku_JokGg2oA2nariI) for countertop checkout, or an optional [mount](https://dashboard.stripe.com/terminal/shop/thsku_KFGV5dfkxwiGMW) for roaming checkout.\n\nYou can also design your own accessories for the Stripe Reader M2. To download the Stripe Reader M2 mechanical design files (.STP), you must first review and accept our [Terminal Design File License Agreement](https://stripe.com/legal/terminal-design). By downloading the file below, you agree to the terms outlined in the license.\n\n[Download Stripe design files](https://d37ugbyn3rpeym.cloudfront.net/terminal/stripe_reader_M2_mechanical_design_files_and_guidelines.zip)\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Set up Stripe Reader M2](https://docs.stripe.com/terminal/payments/setup-reader/stripe-m2)\n*   [Set up your integration](https://docs.stripe.com/terminal/payments/setup-integration)\n*   [Connect to a reader](https://docs.stripe.com/terminal/payments/connect-reader)\n*   [Collect payments](https://docs.stripe.com/terminal/payments/collect-card-payment)",
  "title": "Stripe Reader M2 | Stripe Documentation",
  "description": "Learn about the Stripe Reader M2 Bluetooth reader.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/readers/bbpos-wisepad3",
  "markdown": "# BBPOS WisePad 3 | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the BBPOS WisePad 3 reader.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wisepad-floating-thumb.d6e3015116e0b4295b0106e770b9843e.png)\n\nThe [BBPOS WisePad 3](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepad3) is a handheld reader for use with mobile applications. It uses [Bluetooth Low Energy (LE)](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=bluetooth) or [USB](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=android&reader-type=usb) (Android only) to connect to the Stripe Terminal SDK on a mobile device. The WisePad 3 features a display and PIN pad, which facilitates usage in countries where PIN-authenticated transactions are more common.\n\nThis reader is compatible with our iOS, Android, and React Native SDKs. To view the reader’s parts and features, see the [BBPOS WisePad 3 product sheet](https://d37ugbyn3rpeym.cloudfront.net/terminal/product-sheets/wp3_product_sheet.pdf).\n\n### Reader software releases ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe software on the BBPOS Wisepad 3 consists of a firmware version, configuration name, and key identifier. The reader **software version** joins these three components with underscores into a single string.\n\n| Countries | Latest Version |\n| --- | --- |\n| Australia<br><br>Malaysia<br><br>New Zealand | `4.01.00.38_Prod_APAC1_on_v23_490001` |\n| Singapore | `4.01.00.38_Prod_APAC1_off_v12_490001` |\n| Austria<br><br>Belgium<br><br>France<br><br>Germany<br><br>Italy<br><br>Luxembourg<br><br>Netherlands<br><br>Switzerland | `4.01.00.38_Prod_EU_W1_on_v22_510001` |\n| Denmark<br><br>Norway<br><br>Sweden | `4.01.00.38_Prod_EU_W2_on_v14_510001` |\n| Spain<br><br>Portugal | `4.01.00.38_Prod_EU_W3_on_v8_510001` |\n| Czech Republic | `4.01.00.38_Prod_EU_E1_on_v4_51001` |\n| Ireland<br><br>United Kingdom<br><br>Finland | `4.01.00.38_Prod_EU_W1_off_v20_510001` |\n| Canada | `4.01.00.38_Prod_NA_off_v21_480001` |\n\n#### Firmware versions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Version | Release Date | Description |\n| --- | --- | --- |\n| `4.01.00.38` | 5/28/2024 | *   Added support for Girocard.<br>*   Added support for DCPOS certification configuration.<br>*   Fixed an error with JCB L3 Test Case 212-01 and 213-01.<br>*   Fixed the Unknown ICC card removed error.<br>*   Fixed the Discover DPAS L3 Test Case DGN CL 030.<br>*   Fixed an incorrect readTerminalSetting that impacted multiple tags.<br>*   Added a new key forcePinEntry at startEmv. |\n| `4.01.00.37` | 5/1/2024 | *   Fixed an issue where repeatedly pressing the power button caused a Bluetooth disconnect.<br>*   Fixed an issue with incorrect ICC Rx length checking that caused ICC Transaction Terminated.<br>*   Fixed an issue with the missing UI for MSR and Manual PAN Entry.<br>*   Fixed an issue with the incorrect USB attached/detached state during device restart.<br>*   Fixed a Bluetooth initialization error that could cause Bluetooth connection timeout.<br>*   Updated the YiChip Bluetooth library to fix the Bluetooth response to an empty packet causing a timeout and disconnection issue.<br>*   Modified the JCB CDA Signature Verification requirement according to EMV Bulletin No. 290.<br>*   Increased the temperature to stop or resume charging from 40℃ to 42℃. |\n| `4.01.00.33.SZZZ.01` | 1/16/2024 | Contains fix for an edge case scenario that resulted reader battery level decreasing. |\n| `4.01.00.33` | 12/3/2023 | Routine firmware maintenance updates and security updates. |\n| `4.01.00.32` | 4/10/2023 | Routine firmware maintenance updates and security updates. |\n| `4.01.00.28` | 10/19/2022 | Routine firmware maintenance updates and security updates. |\n| `4.01.00.27` | 8/30/2022 | Routine firmware maintenance updates and security updates. |\n| `4.01.00.25.SZZZ.01` | 7/27/2022 | Improves transaction processing time.  <br>Routine firmware maintenance updates and security updates. |\n| `4.01.00.24` | 4/27/2022 | Routine firmware maintenance updates and security updates. |\n| `4.01.00.23.szzz.01` | 2022-04-05 | Routine firmware maintenance updates. |\n| `4.01.00.18.szzz.02` | 2022-02-08 | Fix for missing payments data that resulted in failed collection. |\n| `4.01.00.18` | 2022-01-18 | Routine firmware maintenance updates. |\n| `4.01.00.17.SZZZ.01` | 2021-09-15 | Contains an additional fix for an edge case scenario that resulted in slower reader response time during PIN entry. |\n| `4.01.00.16` | 2021-08-05 | Contains a fix for an edge case scenario that resulted in slower reader response time during PIN entry. |\n| `4.01.00.15.beta4` | 2021-05-25 | Contains a fix for an edge case scenario that resulted in readers freezing during card presentment. |\n| `4.01.00.13` | 2021-04-21 | Routine firmware maintenance updates. |\n| `4.01.00.12.beta5` | 2021-02-22 | Contains fixes for Interac payments. |\n| `4.01.00.11` | 2021-01-27 | Routine firmware maintenance updates. |\n| `4.01.00.08.beta2` | 2020-10-14 | Improves reliability of transaction processing. |\n| `4.01.00.07` | 2020-09-02 | Allows language to be selected in the settings menu. |\n| `4.01.00.07.beta5` | 2020-08-31 | Improves reliability of reader events. |\n| `4.01.00.06.beta10` | 2020-06-30 | The initial firmware version available for this device. |\n\n#### Configurations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Region (PIN type) | Name | Release Date | Description |\n| --- | --- | --- | --- |\n| **APAC (Online PIN)**<br><br>Australia<br><br>Malaysia<br><br>New Zealand | `Prod_APAC1_on_v23` | 2024-04-16 | Updated config for Online PIN Asia Pacific countries. |\n| `Prod_APAC1_on_v21` | 2023-05-16 | Updated config for Online PIN Asia Pacific countries. |\n| `Prod_APAC1_on_v8` | 2021-05-19 | Updated config for Online PIN Asia Pacific countries. |\n| `Prod_APAC1_on_v7` | 2021-04-21 | Updated config for Online PIN Asia Pacific countries. |\n| `Prod_APAC1_on_v6` | 2020-11-06 | Updated config for Online PIN Asia Pacific countries. |\n| `Prod_APAC1_on_v5` | 2020-10-14 | Updated config for Online PIN Asia Pacific countries. |\n| `Prod_APAC1_on_v4` | 2020-08-28 | Initial config for Online PIN Asia Pacific countries. |\n| **APAC (Offline PIN)**<br><br>Singapore | `Prod_APAC1_off_v12` | 2024-04-24 | Updated config for Offline PIN Asia Pacific countries. |\n| `Prod_APAC1_off_v10` | 2023-05-09 | Updated config for Offline PIN Asia Pacific countries. |\n| `Prod_APAC1_off_v7` | 2021-05-19 | Updated config for Offline PIN Asia Pacific countries. |\n| `Prod_APAC1_off_v6` | 2021-04-21 | Updated config for Offline PIN Asia Pacific countries. |\n| `Prod_APAC1_off_v5` | 2020-10-14 | Updated config for Offline PIN Asia Pacific countries. |\n| `Prod_APAC1_off_v4` | 2020-08-28 | Initial config for Offline PIN Asia Pacific countries. |\n| **EMEA (Online PIN 1)**<br><br>Austria<br><br>Belgium<br><br>France<br><br>Germany<br><br>Netherlands<br><br>Switzerland | `Prod_EU_W1_on_v22` | 2024-05-07 | Updated config for Online PIN Western European countries. |\n| `Prod_EU_W1_on_v21` | 2023-06-01 | Updated display brightness. |\n| `Prod_EU_W1_on_v16` | 2021-10-17 | Updated config for Online PIN Western European countries. |\n| `Prod_EU_W1_on_v14` | 2021-10-06 | Added support for additional languages. |\n| `Prod_EU_W1_on_v13` | 2021-05-19 | Updated config for Online PIN Western European countries. |\n| `Prod_EU_W1_on_v9` | 2021-04-21 | Updated config for Online PIN Western European countries. |\n| `Prod_EU_W1_on_v8` | 2020-11-06 | Updated config for Online PIN Western European countries. |\n| `Prod_EU_W1_on_v7` | 2020-10-14 | Updated config for Online PIN Western European countries. |\n| **EMEA (Online PIN 2)**<br><br>Denmark<br><br>Norway<br><br>Sweden | `Prod_EU_W2_on_v14` | 2024-04-22 | Updated config for Online PIN Western European countries, sub-region 2. |\n| `Prod_EU_W2_on_v12` | 2023-04-19 | Updated config for Online PIN Western European countries, sub-region 2. |\n| `Prod_EU_W2_on_v2` | 2021-10-17 | Initial config for Online PIN Western European countries, sub-region 2. |\n| **EMEA (Online PIN 3)**<br><br>Spain | `Prod_EU_W3_on_v8` | 2024-04-29 | Updated config for Online PIN Western European countries, sub-region 3. |\n| `Prod_EU_W3_on_v6` | 2022-10-04 | Updated config for Online PIN Western European countries, sub-region 3. |\n| `Prod_EU_W3_on_v2` | 2021-10-17 | Initial config for Online PIN Western European countries, sub-region 3. |\n| **EMEA (Offline PIN)**<br><br>United Kingdom<br><br>Ireland | `Prod_EU_W1_off_v20` | 2024-04-22 | Updated config for Offline PIN Western European countries. |\n| `Prod_EU_W1_off_v18` | 2023-06-01 | Updated display brightness. |\n| `Prod_EU_W1_off_v12` | 2021-11-09 | Updated config for Offline PIN Western European countries. |\n| `Prod_EU_W1_off_v10` | 2021-10-06 | Added support for additional languages. |\n| `Prod_EU_W1_off_v9` | 2021-05-19 | Updated config for Offline PIN Western European countries. |\n| `Prod_EU_W1_off_v6` | 2021-04-21 | Updated config for Offline PIN Western European countries. |\n| `Prod_EU_W1_off_v5` | 2020-10-14 | Updated config for additional Offline PIN Western European countries. |\n| `Prod_EU_W1_off_v2` | 2020-08-28 | Initial config for Offline PIN Western European countries. |\n| **NA (Offline PIN)**<br><br>Canada | `Prod_NA_off_v21` | 2024-04-22 | Updated config for North American countries. |\n| `Prod_NA_off_v19` | 2023-06-01 | Updated display brightness. |\n| `Prod_NA_off_v7` | 2021-05-19 | Updated config for North American countries. |\n| `Prod_NA_off_v6` | 2021-04-21 | Updated config for North American countries. |\n| `Prod_NA_off_v5` | 2021-02-22 | Initial North American config. |\n\n#### Key identifiers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Identifier | Countries | Description |\n| --- | --- | --- |\n| `490001` | Australia<br><br>Malaysia<br><br>New Zealand<br><br>Singapore | The initial key identifier available for the Asia Pacific region on this device. |\n| `510001` | Austria<br><br>Belgium<br><br>Denmark<br><br>France<br><br>Germany<br><br>Ireland<br><br>Netherlands<br><br>Norway<br><br>Sweden<br><br>Spain<br><br>Switzerland<br><br>United Kingdom | The initial key identifier available for the European region on this device. |\n| `480001` | Canada | The initial key identifier available for the North American region on this device. |\n\n## Accessories for the reader ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can design your own accessories for the BBPOS WisePad 3. To download the BBPOS WisePad 3 mechanical design files (.STP), you must first review and accept our [Terminal Design File License Agreement](https://stripe.com/legal/terminal-design). By downloading the file below, you agree to the terms outlined in the license.\n\n[Download Stripe design files](https://d37ugbyn3rpeym.cloudfront.net/terminal/bbpos_wp3_mechanical_design_files_and_guidelines.zip)\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Set up BBPOS WisePad 3](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepad3)\n*   [Set up your integration](https://docs.stripe.com/terminal/payments/setup-integration)\n*   [Connect to a reader](https://docs.stripe.com/terminal/payments/connect-reader)\n*   [Collect payments](https://docs.stripe.com/terminal/payments/collect-card-payment)\n\nThe BBPOS and Chipper™ name and logo are trademarks or registered trademarks of BBPOS Limited in the United States and/or other countries. The Verifone® name and logo are either trademarks or registered trademarks of Verifone in the United States and/or other countries. Use of the trademarks does not imply any endorsement by BBPOS or Verifone.",
  "title": "BBPOS WisePad 3 | Stripe Documentation",
  "description": "Learn about the BBPOS WisePad 3 reader.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/references/sdk-migration-guide",
  "markdown": "# Terminal SDK migration guide | Stripe DocumentationThe Stripe Docs logo\n\nIf your application currently uses an Terminal iOS SDK version prior to 3.0.0, there are a few changes you need to make to upgrade and accept card present payments globally. For a detailed list of the changes from version 2.23.1 to 3.0.0, please reference the [SDK changelog](https://github.com/stripe/stripe-terminal-ios/releases/tag/v3.0.0).\n\n### Update your minimum supported version to iOS 13 or higher![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe regularly update the minimum supported version of our SDKs in order to focus on providing the best experience for our developers.\n\nExisting 2.X versions of the Terminal iOS SDK will continue to support devices running **iOS 11** and higher.\n\n### Update your DiscoveryConfiguration usage to the specific DiscoveryConfiguration implementation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn order to support configuration for different discovery methods, [SCPDiscoveryConfiguration](https://stripe.dev/stripe-terminal-ios/docs/Protocols/SCPDiscoveryConfiguration.html) is now a protocol that is implemented by several different types. Instead of providing a DiscoveryMethod, there are now individual classes to choose from in order to search for a specific type of reader:\n\nCreate the discovery configuration appropriate for your desired discovery method using the provided builder class and provide that to `discoverReaders`. The builder exposes setters for the properties that each configuration supports.\n\n### Update your discoverReaders and connectReader usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Canceling `discoverReaders` now calls the completion block with an error with code `SCPErrorCanceled`, just like all other cancelable methods.\n*   `discoverReaders` is now completed successfully right when `connectReader` is called. If `connectReader` fails, your integration needs to make a new call to `discoverReaders` in order to resume discovering readers.\n*   `discoverReaders` is no longer required to be running for `connectReader` to work. You’re now able to call `connectReader` with a previously discovered reader instance or to retry connecting without restarting `discoverReaders`.\n\n### Update your ReconnectionDelegate implementation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`SCPReconnectionDelegate` now provides the instance of the reader that is being reconnected to instead of the Terminal instance. If you implemented this delegate before you need to replace `terminal` in the method names with `reader`.\n\n### Update Parameters and Configuration class usage to use Builders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe input classes like `SCPCollectConfiguration` and `SCPPaymentIntentParameters` are now immutable and have associated builders provided to create them. All builders have a build method that validates the inputs and creates the class it builds.\n\n*   In Swift, `build()` throws and should be checked for errors.\n*   In Objective-C, you provide an `NSError **` out-parameter to receive the error, if any.\n\n`let paymentParams = try PaymentIntentParametersBuilder(amount: 100, currency: \"cad\")   .setCaptureMethod(.automatic)   .build()`\n\n### Remove any dependency on SCPErrorBusy![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`SCPErrorBusy` is removed. In SDK 3.0.0 and later, if you call a Terminal method while another is still in-progress the new calls now queue up. The commands are executed after all previous commands complete. If you were previously tracking state to prevent `SCPErrorBusy`, or were queuing your own commands to work around `SCPErrorBusy`, you can now make use of the command queue to simplify your code. If your application relied on `SCPErrorBusy` to know if a command is running, review your code to see if this could cause problems with queuing too many commands.\n\n### Review support for Offline Payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`SCPPaymentIntent.stripeId` is null for offline payments. If your integration only supports online payments, the `stripeId` will always be present and no changes are needed beyond checks to satisfy the presence of the ID. See [Collect card payments while offline](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments?terminal-sdk-platform=ios) for more details on how to process payments offline.\n\n`Terminal.shared.createPaymentIntent(params) { intent, error in   if let error = error {     // Placeholder for handling exception   }   guard let intentId = intent.stripeId else {     // PaymentIntent was created offline without an id. See intent.offlineDetails.     // This is only expected when offline mode is enabled.   } }`\n\n### Update your process calls to confirm![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`SCPTerminal.processPayment` is renamed to `SCPTerminal.confirmPaymentIntent` and `SCPTerminal.processRefund` is renamed to `SCPTerminal.confirmRefund`. The parameters for these methods haven’t changed but the error types have also been renamed to `SCPConfirmPaymentIntentError` and `SCPConfirmRefundError` respectively.\n\n### Update your readReusableCard usage to SetupIntents![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`SCPTerminal.readReusableCard` is removed. SetupIntents are the recommended path for saving cards without charging. SetupIntents follow a similar pattern to PaymentIntents where you create, collect, and then confirm the SetupIntent in the SDK. See [Save cards for online payments](https://docs.stripe.com/terminal/features/saving-cards/overview) for more details.",
  "title": "Terminal SDK migration guide | Stripe Documentation",
  "description": "Learn how to migrate to the latest version of the Stripe Terminal SDK.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/readers/bbpos-wisepos-e",
  "markdown": "# BBPOS WisePOS E | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the BBPOS WisePOS E reader.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/wisepos-floating-tall.e8478124cda0e088b2e19f503f574f53.png)\n\nThe [BBPOS WisePOS E](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepos-e) is a countertop reader for Stripe Terminal apps. It [connects](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=internet) to the Stripe Terminal SDK over the internet.\n\nThis reader is compatible with the following integrations: JavaScript, iOS, Android, and React Native SDKs and server-driven.\n\nFor BBPOS WisePOS E readers, we recommend the [server-driven integration](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=server-driven), which uses the Stripe API instead of a Terminal SDK. To view the reader’s parts and features, see the [BBPOS WisePOS E product sheet](https://d37ugbyn3rpeym.cloudfront.net/terminal/product-sheets/wpe_product_sheet.pdf).\n\n## LED status lights ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe LEDs above the LCD display show the current status.\n\n### Battery and charging status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen the BBPOS WisePOS E is on, you can check the battery level in the left LED array.\n\n| LEDs | Meaning |\n| --- | --- |\n|     | Charging or full charge |\n\n### Contactless and reader status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you connect to the BBPOS WisePOS E, you can check the reader status in the right LED array.\n\n| LEDs | Meaning |\n| --- | --- |\n|     | Reader is in bootloader mode. |\n|     | Reader integrity check failed or reader tampered. |\n|     | (2 seconds) Reader is experiencing a hard fault and might need replacing. Please [contact support](https://support.stripe.com/contact/). |\n\n## Expected sounds during payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following table describes sounds that occur during successful and failed payments on the BBPOS WisePOS E.\n\n|     | Tap | Chip | Swipe |\n| --- | --- | --- | --- |\n| Success | 1 long, high-pitched beep | No sound | No sound |\n| Failure | 1 long, high-pitched beep | No sound | No sound |\n\n## Troubleshoot the reader ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMake sure your network meets all of our [network requirements](https://docs.stripe.com/terminal/network-requirements), and try the steps in the [network troubleshooting](https://docs.stripe.com/terminal/network-requirements#troubleshooting) section.\n\nTo begin troubleshooting, use the following common scenarios to help diagnose the issue.\n\n### Reader is unable to connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo check connectivity, go to [settings](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepos-e#settings), then select **WiFi settings**. This displays all available WiFi networks. To see more details about the connection, tap the connected network name.\n\n### Reader is unable to connect to Ethernet, even though docked ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou must connect both cables before inserting the reader into the dock. Remove the reader and re-insert into the dock.\n\n### Reader is unable to update ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your reader doesn’t update, it’s possible that it can’t connect to Stripe. To check its connectivity to Stripe, go to [settings](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepos-e#settings), then select **Diagnostics**. This displays a list of troubleshooting tests. Check Stripe connectivity and make sure it says “Passed.” If the Stripe connectivity test fails, follow [these steps](#reader-has-ip-address,-but-is-unable-to-communicate-with-stripe).\n\n#### Note\n\nIf you use a router, refer to your router’s manual and reconfigure the networking setup.\n\n## Stripe reader software ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe maintains the software that controls the BBPOS WisePOS E. The reader receives updates automatically from Stripe when not in use. These can include improvements and required security updates from Stripe and our hardware partners. As reader software updates are made available, update your readers to the latest available version to continue using Stripe Terminal. Failing to install a required update can prevent a reader from accepting payments.\n\nThe reader restarts every day at midnight for PCI compliance, and disconnects from the POS app every morning. Leave your reader on and connected to power to receive automatic software updates. This ensures that updates happen at midnight (in the timezone of the [assigned location](https://docs.stripe.com/terminal/fleet/locations-and-zones)) to avoid interruption to sales. If you unplug the reader at night, an update could start when you turn it back on. To manually check for an update, reboot the reader.\n\n### Reader software version ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe BBPOS WisePOS E software consists of four components: the reader application, firmware, configuration, and key identifier. The following table summarizes the latest version of each of these components for the countries where WisePOS E is available. You can find your reader’s versions in the **Diagnostics** menu by swiping in from the left edge of the screen, tapping **Settings**, and entering the admin code, **0-7-1-3-9**.\n\n| Countries | Reader | Firmware | Configuration |\n| --- | --- | --- | --- |\n| United States | `2.24.2.0` | `5.00.01.27` | `szzz_us_v14` |\n| Canada | `2.24.2.0` | `5.00.01.27` | `szzz_ca_v13` |\n| Australia | `2.24.2.0` | `5.00.01.27.eftpos` | `szzz_prod_au_v2` |\n| Malaysia<br><br>New Zealand | `2.24.2.0` | `5.00.01.27` | `szzz_prod_apac_on_v4` |\n| Singapore | `2.24.2.0` | `5.00.01.27` | `szzz_prod_apac_off_v3` |\n| United Kingdom<br><br>Ireland<br><br>Finland | `2.24.2.0` | `5.00.01.27` | `szzz_prod_eu_off_v9` |\n| Austria<br><br>Belgium<br><br>Denmark<br><br>France<br><br>Italy<br><br>Germany<br><br>Netherlands<br><br>Spain<br><br>Sweden<br><br>Czech Republic<br><br>Luxembourg<br><br>Portugal<br><br>Switzerland<br><br>Norway | `2.24.2.0` | `5.00.01.27` | `szzz_prod_eu_on_v4` |\n\n### Reader software changelog![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### 2024-06-25 (version 2.24.2.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   UI fixes for the Reader app.\n*   Fixed an issue where auto-rotate was not working correctly for Stipe S700.\n\n#### 2024-05-30 (version 2.23.3.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Bug fixes and stability improvements.\n*   Updated the custom tip entry screen to include enter and cancel buttons.\n\n#### 2024-04-18 (version 2.22.3.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Fixed an installation error for language packs.\n*   Updated the 50% battery requirement when performing a configuration or key update on the battery.\n*   Fixed an issue where readers attempted to use a 2nd Gen AC on contactless EMV.\n*   Added support for connecting to a hidden Enterprise WPA or WPA2-EAP network.\n*   Added a progress indicator for key, firmware, and configuration updates.\n\n#### 2024-03-18 (version 2.21.2.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Fixed the text size and made copy changes and UI modifications for AAA accessibility compliance.\n*   Updated `PaymentIntent` support for Magstripe + PIN for EFTPOS.\n*   Fixed bugs related to support for `PaymentIntent` when using offline mode.\n\n#### 2024-02-08 (version 2.20.4.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Fixed an issue where iOS SDK 2.x versions returned nil for the `CardPresent` object `charges.paymentMethodDetails.cardPresent`.\n\n#### 2024-02-08 (version 2.20.3.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Bug fixes and stability improvements\n\n#### 2023-12-11 (version 2.19.2.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updated SCA support.\n*   Fixed an issue where the network screen running multiple connect calls could cause Armada to become unauthenticated.\n*   Added issuer information in the `PaymentMethod` bindings.\n*   Updated the refund by `PaymentIntent.id`.\n*   Surfaced the language detected from the card in the `PaymentIntent`.\n\n#### 2023-11-16 (version 2.18.9.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Bug fixes and stability improvements\n\n#### 2023-11-08 (version 2.18.5.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Bug fixes and stability improvements\n\n#### 2023-10-18 (version 2.17.8.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Bug fixes and stability improvements\n\n#### 2023-09-21 (version 2.16.7.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Bug fixes and stability improvements\n\n#### 2023-07-12 (version 2.15.5.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Fixed an issue where the NFC logo was missing on the cart display.\n*   Fixed an issue where the reader app crashed during firmware updates.\n*   Improved recovery from an issue that caused the reader to stop responding.\n*   You no longer need to check a box when connecting to hidden WiFi networks.\n*   Disabling the payment tone now works as intended on the WisePOS E.\n\n#### 2023-06-12 (version 2.14.3.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Improved reliability and security of Stripe SDK to reader connectivity.\n*   Fixed an issue where saved networks couldn’t always be forgotten.\n\n#### 2023-04-03 (version 2.12.2.3)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Fixed an issue where ROM background downloads were occasionally interrupted.\n*   Fixed an issue where language selection occasionally failed after factory reset.\n\n#### 2023-03-14 (version 2.11.4.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Improved reliability and security of Stripe SDK to reader connectivity.\n\n#### 2023-02-06 (version 2.10.2.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Devices now have a one hour screen timeout when the reader isn’t connected to a power source.\n\n#### 2023-01-04 (version 2.9.2.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Various improvements to animations during the payment flow.\n*   Improved reliability and security of Stripe SDK to reader connectivity.\n\n#### 2022-10-17 (version 2.8.4.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Improved performance when processing several payments sequentially.\n\n#### 2022-09-19 (version 2.7.7.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Rolled out support for dark and light themes on the reader update screen.\n\n#### 2022-06-13 (version 2.4.2.3)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Rolled out a new default splash screen.\n*   Rolled out access to the **Appearance** setting screen to switch between dark and light themes.\n\n#### 2022-04-13 (version 2.2.3.0)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Improved reliability and security of Stripe SDK to reader connectivity.\n*   Improved support for custom splash screens by applying opacity to the status bar.\n\n## Accessories for the reader ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can design your own accessories for the BBPOS WisePOS E. To download the BBPOS WisePOS E mechanical design files (.STP), you must first review and accept our [Terminal Design File License Agreement](https://stripe.com/legal/terminal-design). By downloading the file below, you agree to the terms outlined in the license.\n\n[Download Stripe design files](https://d37ugbyn3rpeym.cloudfront.net/terminal/bbpos_wpe_mechanical_design_files_and_guidelines.zip)\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Set up BBPOS WisePOS E](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepos-e)\n*   [Set up your integration](https://docs.stripe.com/terminal/payments/setup-integration)\n*   [Connect to a reader](https://docs.stripe.com/terminal/payments/connect-reader)\n*   [Collect payments](https://docs.stripe.com/terminal/payments/collect-card-payment)\n\nThe BBPOS and Chipper™ name and logo are trademarks or registered trademarks of BBPOS Limited in the United States and/or other countries. The Verifone® name and logo are either trademarks or registered trademarks of Verifone in the United States and/or other countries. Use of the trademarks does not imply any endorsement by BBPOS or Verifone.",
  "title": "BBPOS WisePOS E | Stripe Documentation",
  "description": "Learn about the BBPOS WisePOS E reader.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/readers/verifone-p400",
  "markdown": "# Verifone P400 | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the Verifone P400 reader.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/verifone-photo-no-white.4db160423e13297d7665a614bf9bd6f1.png)\n\nThe [Verifone P400](https://docs.stripe.com/terminal/payments/setup-reader/verifone-p400) is a countertop reader for Stripe Terminal apps. It [connects](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=internet) to the Stripe Terminal SDK over the internet.\n\nThis reader is compatible with JavaScript, iOS, Android, and React Native SDKs. To view the reader’s parts and features, see the [product sheet](https://www.verifone.com/sites/default/files/2018-01/p400_datasheet_ltr_013018.pdf).\n\n## Troubleshoot the reader ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMake sure your network meets all of our [network requirements](https://docs.stripe.com/terminal/network-requirements), and try the steps in the [network troubleshooting](https://docs.stripe.com/terminal/network-requirements#troubleshooting) section.\n\nTo begin troubleshooting, use the following common scenarios to help diagnose what’s broken.\n\n### Reader is unable to connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe provides two debug screens on the reader. Use these screens to help diagnose common connectivity and network issues. To access a debug screen, enter the following key sequences while on the splash screen:\n\n| Key Sequence | Debug Screen | Description |\n| --- | --- | --- |\n| **0-4-2-6-8** | Device Status | Shows the device’s IP address, account ID, location, gateway, network mask, and connectivity status. |\n| **0-8-6-2-4** | Connectivity | Starts a network test, by attempting to connect to the required endpoints. |\n\nTo exit a debug screen, press **0** on the keypad. You can also program your app to re-render the screen by calling any of these functions:\n\n*   `connectReader()`\n*   `collectPayment()`\n*   `setReaderDisplay()`\n\n#### Note\n\nDebug screens overlay the reader’s normal screen display, and can trigger only while on the [reader screens](#reader-screens) shown above.\n\n### Reader is unable to update ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your reader isn’t updating, it’s possible that it can’t connect to Stripe. Make sure the network it’s connected to meets our [network requirements](https://docs.stripe.com/terminal/network-requirements).\n\n### Reader doesn’t have IP address ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe **Device Status** [debug screen](#checking-connectivity) shows the reader’s IP address, or **No ETH** if the device doesn’t have an IP address. Use the following steps to debug a **No ETH** condition.\n\n**Other IP-address**\n\nIf the above steps don’t reveal an IP address on the reader, try these additional steps:\n\n*   Unplug and reconnect the Ethernet connection to the network source (that is, the modem for router networking, or your computer for bridged networking).\n*   Restart the reader with the network source attached to it. You can restart the reader by unplugging and reconnecting the power cable from the connector cable.\n*   Check the connectors for any broken hardware (such as bent pins).\n\n#### Note\n\nRemember to connect _production_ deployments to the merchant network through router networking.\n\n### Reader has IP address, but is unable to communicate with Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe **Connectivity** [debug screen](#checking-connectivity) indicates the connection status between the P400 and Stripe. Refer to our [network requirements](https://docs.stripe.com/terminal/network-requirements) for details and further troubleshooting steps.\n\n## Stripe reader software![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe maintains the software that controls the Verifone P400. The reader receives updates automatically from Stripe when not in use. Read about [reader software updates](https://docs.stripe.com/terminal/payments/setup-reader#reader-software-updates) for details. These can include improvements and required security updates from Stripe and our hardware partners. As reader software updates are made available, update your readers to the latest available version to continue using Stripe Terminal. Failing to install a required update can prevent a reader from accepting payments.\n\nThe reader restarts every day at midnight for PCI compliance, and disconnects from the POS app every morning. Leave your reader connected to power to receive automatic software updates. This ensures that updates happen at midnight (in the timezone of the [assigned location](https://docs.stripe.com/terminal/fleet/locations-and-zones)) to avoid interruption to sales. If you unplug the reader at night, an update could start when you turn it back on. To manually check for an update, reboot the reader.\n\nYou can always check the current reader version by pressing **0-4-2-6-8**.\n\n### Verifone P400 software releases![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Version | Description |\n| --- | --- |\n| `3.0.2.5` | Bug fixes and performance improvements. |\n| `3.0.2.3` | Fixed `cardholder_name` for contactless transactions. |\n| `3.0.2.1` | Updated server on-device to now host a unique PQDN per device. |\n| `3.0.1.18` | Improved reader reliability. |\n| `3.0.1.16` | Updated messaging to more strongly advocate for the use of contactless payment methods. |\n| `3.0.1.15` | Added automatic handling of soft declines. |\n| `3.0.1.14` | Added support for `cardholder_name` in payment method details. |\n| `3.0.1.13` | Added support for additional integration methods, fixed some localization issues. |\n| `3.0.1.12` | Fixed some international refunds issues, improved WiFi disconnection handling and retries. |\n| `3.0.1.10` | Added regional support for Canadian merchants. |\n| `3.0.1.8` | Added improved triaging tools, bug fixes, and prerequisite work for future features. |\n| `3.0.1.6` | Implemented WiFi upgrades improving re-connection of cached networks, bug fixes. |\n| `3.0.1.5` | Added support for regional EMV configurations, bug fixes. |\n| `3.0.1.2` | Changed red `X` button behavior in testmode (now clears a transaction’s payment method instead of canceling that transaction; this mirrors livemode behavior), added MAC address to Device Status debug screen, bug fixes. |\n| `3.0.1.0` | Added new reader screens for better UX, disabled contactless sources during `readReusableCard`, fixed bugs. |\n\nFor additional instruction on maintaining [PCI compliance](https://docs.stripe.com/security/guide#validating-pci-compliance \"PCI compliance\") when installing updates to your Verifone P400 device, refer to the reader PCI [implementation guide](https://stripe.com/files/terminal/terminal_implementation_guide.pdf).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Set up Verifone P400](https://docs.stripe.com/terminal/payments/setup-reader/verifone-p400)\n*   [Set up your integration](https://docs.stripe.com/terminal/payments/setup-integration)\n*   [Connect to a reader](https://docs.stripe.com/terminal/payments/connect-reader)\n*   [Collect payments](https://docs.stripe.com/terminal/payments/collect-card-payment)\n\nThe BBPOS and Chipper™ name and logo are trademarks or registered trademarks of BBPOS Limited in the United States and/or other countries. The Verifone® name and logo are either trademarks or registered trademarks of Verifone in the United States and/or other countries. Use of the trademarks does not imply any endorsement by BBPOS or Verifone.",
  "title": "Verifone P400 | Stripe Documentation",
  "description": "Learn about the Verifone P400 reader.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/radar/rules/supported-attributes",
  "markdown": "# Supported attributes | Stripe DocumentationThe Stripe Docs logo\n\n## Review a complete list of attributes supported in Radar rules.\n\nThe following attributes can be used within Radar to write rules. Learn how to write effective [rules](https://docs.stripe.com/radar/rules/reference).\n\n## Risk scores and levels![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**risk\\_level**\n\n_Case Insensitive String_\n\nnormal\n\nThe risk level of a given payment, as determined by Stripe. The supported values are: **normal**, **elevated**, **highest**, **not\\_assessed**.\n\n**risk\\_score**\n\n_Numeric_\n\n50\n\nThe risk score of a given payment, as determined by Stripe. The values range between 0 (least risky) and 100 (riskiest). By default, a risk score of 65 or above corresponds to a risk level of **elevated**, while a risk score of 75 or above corresponds to a risk level of **highest**. You can adjust the thresholds at [Risk Settings](https://docs.stripe.com/radar/risk-settings).\n\n## 3D Secure![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**is\\_3d\\_secure**\n\n_Boolean_\n\ntrue\n\nIdentifies if the payment uses a 3D Secure source.\n\n**is\\_3d\\_secure\\_authenticated**\n\n_Boolean_\n\ntrue\n\nIdentifies if the payment follows a successfully completed 3D Secure verification with authentication. (Authentication can be either risk-based or challenge-based.)\n\n**has\\_liability\\_shift**\n\n_Boolean_\n\ntrue\n\nTrue if the [liability shift rule](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments) might apply for this payment.\n\n## Address![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**billing\\_address**\n\n_Case Insensitive String_\n\n1234 Main St #2A Brooklyn NY 10022 US\n\nThe full provided cardholder billing address.\n\n**billing\\_address\\_line1**\n\n_Case Insensitive String_\n\n1234 Main St\n\nThe first line of the provided cardholder billing address (typically a street name and number).\n\n**billing\\_address\\_line2**\n\n_Case Insensitive String_\n\n#2A\n\nThe second line of the provided cardholder billing address (typically an apartment or unit number).\n\n**billing\\_address\\_postal\\_code**\n\n_Case Insensitive String_\n\n10022\n\nThe postal code (ZIP) of the provided cardholder billing address.\n\n**billing\\_address\\_city**\n\n_Case Insensitive String_\n\nBrooklyn\n\nThe city of the provided cardholder billing address.\n\n**billing\\_address\\_state**\n\n_Case Insensitive String_\n\nNY\n\nThe state of the provided cardholder billing address.\n\n**billing\\_address\\_country**\n\n_Case Insensitive Country_\n\nUS\n\nThe two-letter code corresponding to the country of the provided cardholder billing address.\n\n**shipping\\_address**\n\n_Case Insensitive String_\n\n1234 Main St #2A Brooklyn NY 10022 US\n\nThe full provided shipping address.\n\n**shipping\\_address\\_line1**\n\n_Case Insensitive String_\n\n1234 Main St\n\nThe first line of the provided shipping address (typically a street name and number).\n\n**shipping\\_address\\_line2**\n\n_Case Insensitive String_\n\n#2A\n\nThe second line of the provided shipping address (typically an apartment or unit number).\n\n**shipping\\_address\\_postal\\_code**\n\n_Case Insensitive String_\n\n10022\n\nThe postal code (ZIP) of the provided shipping address.\n\n**shipping\\_address\\_city**\n\n_Case Insensitive String_\n\nBrooklyn\n\nThe city of the provided shipping address.\n\n**shipping\\_address\\_state**\n\n_Case Insensitive String_\n\nNY\n\nThe state of the provided shipping address.\n\n**shipping\\_address\\_country**\n\n_Case Insensitive Country_\n\nUS\n\nThe two-letter code corresponding to the country of the provided shipping address.\n\n## Amount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**amount\\_in\\_xyz**\n\n_Numeric_\n\n50\n\nThe amount of the payment, converted to the currency specified by **xyz** (for example, **amount\\_in\\_usd**). Specify one of the following supported currencies and Stripe automatically calculates a [converted amount](#converted-amounts) to use: **aed**, **ars**, **aud**, **brl**, **cad**, **chf**, **clp**, **cop**, **czk**, **dkk**, **eur**, **gbp**, **hkd**, **huf**, **idr**, **ils**, **inr**, **jpy**, **khr**, **krw**, **mxn**, **myr**, **nok**, **nzd**, **php**, **pln**, **ron**, **rub**, **sek**, **sgd**, **thb**, **try**, **twd**, or **usd**. For decimal currencies (for example, **usd**), rules use the base currency unit rather than sub units (for example, dollars, not cents).\n\n**average\\_usd\\_amount\\_attempted\\_on\\_card\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe average amount (in USD) of attempted transactions for the card on your account. This value includes payments from 2020 onwards.\n\n**average\\_usd\\_amount\\_attempted\\_on\\_customer\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe average amount (in USD) of attempted transactions for the [Customer](https://docs.stripe.com/api/customers) object on your account. This value includes payments from 2020 onwards.\n\n**average\\_usd\\_amount\\_successful\\_on\\_card\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe average amount (in USD) of transactions that resulted in an authorization for the card on your account. This value includes payments from 2020 onwards.\n\n**average\\_usd\\_amount\\_successful\\_on\\_customer\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe average amount (in USD) of transactions that resulted in an authorization for the [Customer](https://docs.stripe.com/api/customers) object on your account. This value includes payments from 2020 onwards.\n\n**total\\_usd\\_amount\\_charged\\_on\\_card\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe total amount (in USD) of transactions from this card that were attempted on your account. This value includes payments from 2020 onwards.\n\n**total\\_usd\\_amount\\_charged\\_on\\_customer\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe total amount (in USD) of transactions from the [Customer](https://docs.stripe.com/api/customers) object that were attempted on your account. This value includes payments from 2020 onwards.\n\n**total\\_usd\\_amount\\_failed\\_on\\_card\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe total amount (in USD) of transactions from this card that failed (blocked or declined) on your account. This value includes payments from 2020 onwards.\n\n**total\\_usd\\_amount\\_failed\\_on\\_customer\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe total amount (in USD) of transactions from the [Customer](https://docs.stripe.com/api/customers) object that failed (blocked or declined) on your account. This value includes payments from 2020 onwards.\n\n**total\\_usd\\_amount\\_successful\\_on\\_card\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe total amount (in USD) of transactions that resulted in an authorization for the card on your account. This value includes payments from 2020 onwards.\n\n**total\\_usd\\_amount\\_successful\\_on\\_customer\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe total amount (in USD) of transactions that resulted in an authorization for the [Customer](https://docs.stripe.com/api/customers) object on your account. This value includes payments from 2020 onwards.\n\n## Card Info![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**card\\_bin**\n\n_Case Insensitive String_\n\n483312\n\nThe Bank Identification Number (BIN) of the card used to make the payment. The BIN is the first six digits of the card number.\n\n**card\\_brand**\n\n_Case Insensitive String_\n\nvisa\n\nThe brand of the card used to make the payment. The supported values are: **amex** (American Express), **visa** (Visa), **mc** (Mastercard), **dscvr** (Discover), **diners** (Diners Club), **interac** (Interac), **jcb** (JCB), and **cup** (UnionPay).\n\n**card\\_country**\n\n_Case Insensitive Country_\n\nUS\n\nThe two-letter code corresponding to the country where the card was issued.\n\n**card\\_fingerprint**\n\n_Case Sensitive String_\n\nexample\\_fingerprint\n\nThe fingerprint of the card used to make the payment. The card fingerprint is a unique identifier of a particular card number.\n\n**card\\_funding**\n\n_Case Insensitive String_\n\ncredit\n\nWhether the card is a prepaid, debit, or credit card. The supported values are: **credit**, **debit**, **prepaid**, **unknown**.\n\n**card\\_3d\\_secure\\_support**\n\n_Case Insensitive String_\n\nrequired\n\nThe level of [3D Secure](https://docs.stripe.com/payments/3d-secure) support for the card used to make the payment. The supported values are: **required**, **recommended**, **optional**, and **not\\_supported**.\n\n**charge\\_description**\n\n_Case Insensitive String_\n\npayment for order #12\n\nThe description supplied with the payment.\n\n**statement\\_descriptor** New\n\n_Case Insensitive String_\n\nexample descriptor\n\nThe [statement descriptor](https://docs.stripe.com/get-started/account/statement-descriptors) provided on a payment.\n\n## Card Usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**is\\_new\\_card\\_on\\_customer**\n\n_Boolean_\n\ntrue\n\nIdentifies if the card associated with the [Customer](https://docs.stripe.com/api/customers) object hasn’t been seen on a payment by that customer on your account.\n\n**card\\_count\\_for\\_billing\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this billing address from transactions on this account. This value includes payments from 2020 onwards.\n\n**card\\_count\\_for\\_billing\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this billing address from transactions on this account in the past week.\n\n**card\\_count\\_for\\_billing\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this billing address from transactions on this account in the past hour.\n\n**card\\_count\\_for\\_billing\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this billing address from transactions on this account in the past day.\n\n**card\\_count\\_for\\_customer\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with the [Customer](https://docs.stripe.com/api/customers) object from transactions on this account. This value includes payments from 2020 onwards.\n\n**card\\_count\\_for\\_customer\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with the [Customer](https://docs.stripe.com/api/customers) object from transactions on this account in the past week.\n\n**card\\_count\\_for\\_customer\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with the [Customer](https://docs.stripe.com/api/customers) object from transactions on this account in the past day.\n\n**card\\_count\\_for\\_customer\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with the [Customer](https://docs.stripe.com/api/customers) object from transactions on this account in the past hour.\n\n**card\\_count\\_for\\_email\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this email from transactions on this account. This value includes payments from 2020 onwards.\n\n**card\\_count\\_for\\_email\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this email from transactions on this account in the past week.\n\n**card\\_count\\_for\\_email\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this email from transactions on this account in the past day.\n\n**card\\_count\\_for\\_email\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this email from transactions on this account in the past hour.\n\n**card\\_count\\_for\\_ip\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this IP address from transactions on your account. This value includes payments from 2020 onwards.\n\n**card\\_count\\_for\\_ip\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this IP address from transactions on your account in the past week.\n\n**card\\_count\\_for\\_ip\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this IP address from transactions on your account in the past day.\n\n**card\\_count\\_for\\_ip\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this IP address from transactions on your account in the past hour.\n\n**card\\_count\\_for\\_shipping\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this shipping address from transactions on your account. This value includes payments from 2020 onwards.\n\n**card\\_count\\_for\\_shipping\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this shipping address from transactions on your account in the past week.\n\n**card\\_count\\_for\\_shipping\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this shipping address from transactions on your account in the past day.\n\n**card\\_count\\_for\\_shipping\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this shipping address from transactions on your account in the past hour.\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**authorized\\_charges\\_per\\_billing\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this billing address on your account. The value includes payments from 2020 onwards.\n\n**authorized\\_charges\\_per\\_billing\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this billing address in the past week on your account.\n\n**authorized\\_charges\\_per\\_billing\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this billing address in the past day on your account.\n\n**authorized\\_charges\\_per\\_billing\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this billing address in the past hour on your account.\n\n**authorized\\_charges\\_per\\_card\\_number\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this card on your account. The value includes payments from 2020 onwards.\n\n**authorized\\_charges\\_per\\_card\\_number\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this card in the past week on your account.\n\n**authorized\\_charges\\_per\\_card\\_number\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this card in the past day on your account.\n\n**authorized\\_charges\\_per\\_card\\_number\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this card in the past hour on your account.\n\n**authorized\\_charges\\_per\\_customer\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from the [Customer](https://docs.stripe.com/api/customers) object on your account. The value includes payments from 2020 onwards.\n\n**authorized\\_charges\\_per\\_customer\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from the [Customer](https://docs.stripe.com/api/customers) object in the past week on your account.\n\n**authorized\\_charges\\_per\\_customer\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from the [Customer](https://docs.stripe.com/api/customers) object in the past day on your account.\n\n**authorized\\_charges\\_per\\_customer\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from the [Customer](https://docs.stripe.com/api/customers) object in the past hour on your account.\n\n**authorized\\_charges\\_per\\_email\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from this email on your account. The value includes payments from 2020 onwards.\n\n**authorized\\_charges\\_per\\_email\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from this email in the past week on your account.\n\n**authorized\\_charges\\_per\\_email\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from this email in the past day on your account.\n\n**authorized\\_charges\\_per\\_email\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from this email in the past hour on your account.\n\n**authorized\\_charges\\_per\\_shipping\\_address\\_all\\_time** New\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this shipping address on your account. The value includes payments from 2020 onwards.\n\n**authorized\\_charges\\_per\\_shipping\\_address\\_weekly** New\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this shipping address in the past week on your account.\n\n**authorized\\_charges\\_per\\_shipping\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this shipping address in the past day on your account.\n\n**authorized\\_charges\\_per\\_shipping\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this shipping address in the past hour on your account.\n\n**authorized\\_charges\\_per\\_ip\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from this IP address on your account. The value includes payments from 2020 onwards.\n\n**authorized\\_charges\\_per\\_ip\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from this IP address in the past week on your account.\n\n**authorized\\_charges\\_per\\_ip\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from this IP address in the past day on your account.\n\n**authorized\\_charges\\_per\\_ip\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from this IP address in the past hour on your account.\n\n## Charges that were blocked![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**blocked\\_charges\\_per\\_billing\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this billing address on your account. This value includes payments from 2020 onwards.\n\n**blocked\\_charges\\_per\\_billing\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this billing address in the past week on your account.\n\n**blocked\\_charges\\_per\\_billing\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this billing address in the past day on your account.\n\n**blocked\\_charges\\_per\\_billing\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this billing address in the past hour on your account.\n\n**blocked\\_charges\\_per\\_card\\_number\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this card on your account. This value includes payments from 2020 onwards.\n\n**blocked\\_charges\\_per\\_card\\_number\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this card in the past week on your account.\n\n**blocked\\_charges\\_per\\_card\\_number\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this card in the past day on your account.\n\n**blocked\\_charges\\_per\\_card\\_number\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this card in the past hour on your account.\n\n**blocked\\_charges\\_per\\_customer\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked from the [Customer](https://docs.stripe.com/api/customers) object on your account. This value includes payments from 2020 onwards.\n\n**blocked\\_charges\\_per\\_customer\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked from the [Customer](https://docs.stripe.com/api/customers) object in the past week on your account.\n\n**blocked\\_charges\\_per\\_customer\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked from the [Customer](https://docs.stripe.com/api/customers) object in the past day on your account.\n\n**blocked\\_charges\\_per\\_customer\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked from the [Customer](https://docs.stripe.com/api/customers) object in the past hour on your account.\n\n**blocked\\_charges\\_per\\_email\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked from this email on your account. This value includes payments from 2020 onwards.\n\n**blocked\\_charges\\_per\\_email\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked from this email in the past week on your account.\n\n**blocked\\_charges\\_per\\_email\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked from this email in the past day on your account.\n\n**blocked\\_charges\\_per\\_email\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked from this email in the past hour on your account.\n\n**blocked\\_charges\\_per\\_shipping\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this shipping address on your account. This value includes payments from 2020 onwards.\n\n**blocked\\_charges\\_per\\_shipping\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this shipping address in the past week on your account.\n\n**blocked\\_charges\\_per\\_shipping\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this shipping address in the past day on your account.\n\n**blocked\\_charges\\_per\\_shipping\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this shipping address in the past hour on your account.\n\n**blocked\\_charges\\_per\\_ip\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this IP address on your account. This value includes payments from 2020 onwards.\n\n**blocked\\_charges\\_per\\_ip\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this IP address in the past week on your account.\n\n**blocked\\_charges\\_per\\_ip\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this IP address in the past day on your account.\n\n**blocked\\_charges\\_per\\_ip\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this IP address in the past hour on your account.\n\n## Charges that were declined![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**declined\\_charges\\_per\\_billing\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this billing address on your account. This value includes payments from 2020 onwards.\n\n**declined\\_charges\\_per\\_billing\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this billing address in the past week on your account.\n\n**declined\\_charges\\_per\\_billing\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this billing address in the past day on your account.\n\n**declined\\_charges\\_per\\_billing\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this billing address in the past hour on your account.\n\n**declined\\_charges\\_per\\_card\\_number\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this card on your account. This value includes payments from 2020 onwards.\n\n**declined\\_charges\\_per\\_card\\_number\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this card in the past week on your account.\n\n**declined\\_charges\\_per\\_card\\_number\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this card in the past day on your account.\n\n**declined\\_charges\\_per\\_card\\_number\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this card in the past hour on your account.\n\n**declined\\_charges\\_per\\_customer\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined from the [Customer](https://docs.stripe.com/api/customers) object on your account. This value includes payments from 2020 onwards.\n\n**declined\\_charges\\_per\\_customer\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined from the [Customer](https://docs.stripe.com/api/customers) object in the past week on your account.\n\n**declined\\_charges\\_per\\_customer\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined from the [Customer](https://docs.stripe.com/api/customers) object in the past day on your account.\n\n**declined\\_charges\\_per\\_customer\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined from the [Customer](https://docs.stripe.com/api/customers) object in the past hour on your account.\n\n**declined\\_charges\\_per\\_shipping\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this shipping address on your account. This value includes payments from 2020 onwards.\n\n**declined\\_charges\\_per\\_shipping\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this shipping address in the past week on your account.\n\n**declined\\_charges\\_per\\_shipping\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this shipping address in the past day on your account.\n\n**declined\\_charges\\_per\\_shipping\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this shipping address in the past hour on your account.\n\n**declined\\_charges\\_per\\_ip\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this IP address on your account. This value includes payments from 2020 onwards.\n\n**declined\\_charges\\_per\\_ip\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this IP address in the past week on your account.\n\n**declined\\_charges\\_per\\_ip\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this IP address in the past day on your account.\n\n**declined\\_charges\\_per\\_ip\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this IP address in the past hour on your account.\n\n**declined\\_charges\\_per\\_email\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined from this email on your account. This value includes payments from 2020 onwards.\n\n**declined\\_charges\\_per\\_email\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined from this email in the past week on your account.\n\n**declined\\_charges\\_per\\_email\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined from this email in the past day on your account.\n\n**declined\\_charges\\_per\\_email\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined from this email in the past hour on your account.\n\n## Total charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**total\\_charges\\_per\\_billing\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges on this billing address on your account. This value includes payments from 2020 onwards.\n\n**total\\_charges\\_per\\_billing\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges on this billing address in the past week on your account.\n\n**total\\_charges\\_per\\_billing\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges on this billing address in the past day on your account.\n\n**total\\_charges\\_per\\_billing\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges on this billing address in the past hour on your account.\n\n**total\\_charges\\_per\\_card\\_number\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges on this card on your account. This value includes payments from 2020 onwards.\n\n**total\\_charges\\_per\\_card\\_number\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges on this card in the past week on your account.\n\n**total\\_charges\\_per\\_card\\_number\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges on this card in the past day on your account.\n\n**total\\_charges\\_per\\_card\\_number\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges on this card in the past hour on your account.\n\n**total\\_charges\\_per\\_customer\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from the [Customer](https://docs.stripe.com/api/customers) object on your account. This value includes payments from 2020 onwards.\n\n**total\\_charges\\_per\\_customer\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from the [Customer](https://docs.stripe.com/api/customers) object in the past week on your account.\n\n**total\\_charges\\_per\\_customer\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from the [Customer](https://docs.stripe.com/api/customers) object in the past day on your account.\n\n**total\\_charges\\_per\\_customer\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from the [Customer](https://docs.stripe.com/api/customers) object in the past hour on your account.\n\n**total\\_charges\\_per\\_email\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this email on your account. This value includes payments from 2020 onwards.\n\n**total\\_charges\\_per\\_email\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this email in the past week on your account.\n\n**total\\_charges\\_per\\_email\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this email in the past day on your account.\n\n**total\\_charges\\_per\\_email\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this email in the past hour on your account.\n\n**total\\_charges\\_per\\_ip\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this IP address on your account. This value includes payments from 2020 onwards.\n\n**total\\_charges\\_per\\_ip\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this IP address in the past week on your account.\n\n**total\\_charges\\_per\\_ip\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this IP address in the past day on your account.\n\n**total\\_charges\\_per\\_ip\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this IP address in the past hour on your account.\n\n**total\\_charges\\_per\\_shipping\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this shipping address on your account. This value includes payments from 2020 onwards.\n\n**total\\_charges\\_per\\_shipping\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this shipping address in the past week on your account.\n\n**total\\_charges\\_per\\_shipping\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this shipping address in the past day on your account.\n\n**total\\_charges\\_per\\_shipping\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this shipping address in the past hour on your account.\n\n## Client information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**browser** New\n\n_Case Insensitive String_\n\nChrome 103.0.0\n\nThe customer’s browser name and version.\n\n**operating\\_system** New\n\n_Case Insensitive String_\n\nMac OS X 10.15.7\n\nThe customer’s operating system name and version.\n\n**user\\_agent** New\n\n_Case Insensitive String_\n\nmozilla/5.0 (macintosh; intel mac os x 10\\_15\\_7) applewebkit/537.36 (khtml, like gecko) chrome/103.0.0.0 safari/537.36\n\nThe customer’s user agent.\n\n## Customers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**customer**\n\n_Case Sensitive String_\n\ncus\\_AeFLnRaI51AbRi\n\nThe [Customer](https://docs.stripe.com/api/customers) object ID supplied with the payment.\n\n**total\\_customers\\_for\\_card\\_yearly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of [Customer](https://docs.stripe.com/api/customers) objects associated with this card on your account. This attribute only includes live mode Customer objects that interacted with your account in the past year. This data updates at most every 72 hours.\n\n**total\\_customers\\_for\\_card\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of [Customer](https://docs.stripe.com/api/customers) objects associated with this card on your account. This attribute only includes live mode Customer objects that interacted with your account in the past week. This data updates at most every 72 hours.\n\n**total\\_customers\\_for\\_email\\_yearly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of [Customer](https://docs.stripe.com/api/customers) objects associated with this email on your account. This attribute only includes live mode Customer objects that interacted with your account in the past year. This data updates at most every 72 hours.\n\n**total\\_customers\\_for\\_email\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of [Customer](https://docs.stripe.com/api/customers) objects associated with this email on your account. This attribute only includes live mode Customer objects that interacted with your account in the past week. This data updates at most every 72 hours.\n\n**total\\_customers\\_with\\_prior\\_fraud\\_activity\\_for\\_card\\_yearly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of [Customer](https://docs.stripe.com/api/customers) objects associated with this card that have fraud activity on your account. Fraud activity includes fraud disputes, early fraud warnings, and high risk Radar blocks. This attribute only includes live mode Customer objects that interacted with your account in the past year. This data updates at most every 72 hours.\n\n**total\\_customers\\_with\\_prior\\_fraud\\_activity\\_for\\_card\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of [Customer](https://docs.stripe.com/api/customers) objects associated with this card that have fraud activity on your account. Fraud activity includes fraud disputes, early fraud warnings, and high risk Radar blocks. This attribute only includes live mode Customer objects that interacted with your account in the past week. This data updates at most every 72 hours.\n\n**total\\_customers\\_with\\_prior\\_fraud\\_activity\\_for\\_email\\_yearly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of [Customer](https://docs.stripe.com/api/customers) objects associated with this email that have fraud activity on your account. Fraud activity includes fraud disputes, early fraud warnings, and high risk Radar blocks. This attribute only includes live mode Customer objects that interacted with your account in the past year. This data updates at most every 72 hours.\n\n**total\\_customers\\_with\\_prior\\_fraud\\_activity\\_for\\_email\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of [Customer](https://docs.stripe.com/api/customers) objects associated with this email that have fraud activity on your account. Fraud activity includes fraud disputes, early fraud warnings, and high risk Radar blocks. This attribute only includes live mode Customer objects that interacted with your account in the past week. This data updates at most every 72 hours.\n\n## Distance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**distance\\_between\\_billing\\_and\\_shipping\\_address** New\n\n_Numeric_\n\n50\n\nThe distance (in km) between the provided billing address and the provided shipping address.\n\n**distance\\_between\\_ip\\_and\\_billing\\_address** New\n\n_Numeric_\n\n50\n\nThe distance (in km) between the IP address from which the payment originates and the provided billing address.\n\n**distance\\_between\\_ip\\_and\\_shipping\\_address** New\n\n_Numeric_\n\n50\n\nThe distance (in km) between the IP address from which the payment originates and the provided shipping address.\n\n## Disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**dispute\\_count\\_on\\_card\\_number\\_all\\_time**\n\n_Bounded numeric (<=25)_\n\n10\n\nThe count of fraudulent disputes associated with charges from this card number on your account. This value includes payments from 2019 onwards.\n\n**dispute\\_count\\_on\\_card\\_number\\_yearly**\n\n_Bounded numeric (<=25)_\n\n10\n\nThe count of fraudulent disputes associated with charges from this card number on your account in the past year.\n\n**dispute\\_count\\_on\\_ip\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe count of fraudulent disputes associated with charges from this IP address on your account. This value includes payments from 2020 onwards.\n\n**dispute\\_count\\_on\\_ip\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe count of fraudulent disputes associated with charges from this IP address on your account in the past week.\n\n**dispute\\_count\\_on\\_ip\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe count of fraudulent disputes associated with charges from this IP address on your account in the past day.\n\n**dispute\\_count\\_on\\_ip\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe count of fraudulent disputes associated with charges from this IP address on your account in the past hour.\n\n## Early Fraud Warnings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**efw\\_count\\_on\\_card\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of [EFWs](https://docs.stripe.com/disputes/measuring#early-fraud-warnings) associated with charges from this card on your account. This value includes EFWs from 2020 onwards.\n\n**efw\\_count\\_on\\_card\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of [EFWs](https://docs.stripe.com/disputes/measuring#early-fraud-warnings) associated with charges from this card on your account in the past week.\n\n**efw\\_count\\_on\\_card\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of [EFWs](https://docs.stripe.com/disputes/measuring#early-fraud-warnings) associated with charges from this card on your account in the past day.\n\n**efw\\_count\\_on\\_card\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of [EFWs](https://docs.stripe.com/disputes/measuring#early-fraud-warnings) associated with charges from this card on your account in the past hour.\n\n**efw\\_count\\_on\\_ip\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of [EFWs](https://docs.stripe.com/disputes/measuring#early-fraud-warnings) associated with charges from this IP address on your account. This value includes EFWs from 2020 onwards.\n\n**efw\\_count\\_on\\_ip\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of [EFWs](https://docs.stripe.com/disputes/measuring#early-fraud-warnings) associated with charges from this IP address on your account in the past week.\n\n**efw\\_count\\_on\\_ip\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of [EFWs](https://docs.stripe.com/disputes/measuring#early-fraud-warnings) associated with charges from this IP address on your account in the past day.\n\n**efw\\_count\\_on\\_ip\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of [EFWs](https://docs.stripe.com/disputes/measuring#early-fraud-warnings) associated with charges from this IP address on your account in the past hour.\n\n## Email![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**email**\n\n_Case Insensitive String_\n\nuser@example.com\n\nThe email address supplied with the payment.\n\n**email\\_domain**\n\n_Case Insensitive String_\n\nexample.com\n\nThe domain of the email address supplied with the payment.\n\n**is\\_disposable\\_email**\n\n_Boolean_\n\ntrue\n\nIdentifies if the email address supplied with the payment uses a known throwaway email address provider. Stripe maintains a list of domains corresponding to throwaway email addresses.\n\nThe **email\\_domain** and **is\\_disposable\\_email** attributes use the email address found in any of the following fields:\n\n*   The `receipt_email` of the payment\n*   The `description` of the payment\n*   The `name` of the card (if an email address has been provided as the cardholder name)\n*   The `email` of the customer that the payment was created on\n*   The `description` of the customer\n\n## Email usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**email\\_count\\_for\\_billing\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this billing address from transactions on your account. This value includes payments from 2020 onwards.\n\n**email\\_count\\_for\\_billing\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this billing address from transactions on your account in the past week.\n\n**email\\_count\\_for\\_billing\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this billing address from transactions on your account in the past day.\n\n**email\\_count\\_for\\_billing\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this billing address from transactions on your account in the past hour.\n\n**email\\_count\\_for\\_card\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this card from transactions on your account. This value includes payments from 2020 onwards.\n\n**email\\_count\\_for\\_card\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this card from transactions on your account in the past week.\n\n**email\\_count\\_for\\_card\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this card from transactions on your account in the past day.\n\n**email\\_count\\_for\\_card\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this card from transactions on your account in the past hour.\n\n**email\\_count\\_for\\_ip\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this IP address from transactions on your account. This value includes payments from 2020 onwards.\n\n**email\\_count\\_for\\_ip\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this IP address from transactions on your account in the past week.\n\n**email\\_count\\_for\\_ip\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this IP address from transactions on your account in the past day.\n\n**email\\_count\\_for\\_ip\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this IP address from transactions on your account in the past hour.\n\n**email\\_count\\_for\\_shipping\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this shipping address from transactions on your account. This value includes payments from 2020 onwards.\n\n**email\\_count\\_for\\_shipping\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this shipping address from transactions on your account in the past week.\n\n**email\\_count\\_for\\_shipping\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this shipping address from transactions on your account in the past day.\n\n**email\\_count\\_for\\_shipping\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this shipping address from transactions on your account in the past hour.\n\n## IP address![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**ip\\_address**\n\n_Case Insensitive String_\n\n192.168.1.1\n\nThe IP address from which the payment originates. If payment is made with **digital\\_wallet**, the IP address might be missing due to obfuscation of the payment’s originating IP address.\n\n**ip\\_address\\_connection\\_type** New\n\n_Case Insensitive String_\n\ncellular\n\nThe connection type of the IP address from which the payment originates. We identify the following types of connections: **cable/dsl**, **cellular**, **corporate**, **dialup**.\n\n**ip\\_country**\n\n_Case Insensitive Country_\n\nUS\n\nThe two-letter code corresponding to the country-level geolocation of the IP address that the payment originates from.\n\n**ip\\_state** New\n\n_Case Insensitive State_\n\nCA\n\nThe ISO code corresponding to the state-level geolocation of the IP address that the payment originates from. If the country doesn’t have a state, this attribute populates with the country’s closest version of a state.\n\n**is\\_anonymous\\_ip**\n\n_Boolean_\n\ntrue\n\nIdentifies if the IP address from which the payment originates is a known proxy or Tor exit node. This information updates daily.\n\n**is\\_my\\_login\\_ip**\n\n_Boolean_\n\ntrue\n\nIdentifies if the IP address from which the payment originates has been used to log into your Stripe account. You can use this attribute as a proxy for “is my IP address.”\n\n## Issuer Checks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**address\\_line1\\_check**\n\n_Case Sensitive String_\n\npass\n\nA check by the card issuer to match the first line of the provided billing address (typically a street name and number) against the information they have on file for the cardholder. The supported values are: **pass**, **fail**, **unavailable**, **unchecked**, **not\\_provided**. ([This is a post-authorization attribute.](#post-authorization-attributes))\n\n**address\\_zip\\_check**\n\n_Case Sensitive String_\n\npass\n\nA check by the card issuer to match the provided postal code against the information they have on file for the cardholder. The supported values are: **pass**, **fail**, **unavailable**, **unchecked**, **not\\_provided**. ([This is a post-authorization attribute.](#post-authorization-attributes))\n\n**cvc\\_check**\n\n_Case Sensitive String_\n\npass\n\nA check by the card issuer to match the provided CVC (also referred to as CVV) against the information they have on file for the cardholder. The supported values are: **pass**, **fail**, **unavailable**, **unchecked**, **not\\_provided**. ([This is a post-authorization attribute.](#post-authorization-attributes))\n\n## Name![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**cardholder\\_name**\n\n_Case Insensitive String_\n\nJane Doe\n\nThe provided name with a purchaser’s card information. This attribute isn’t case sensitive, but it’s punctuation sensitive. You should only use this attribute to block names or name patterns of individuals who you have reason to believe have previously committed fraud on your service. We recommend that your customer service teams are prepared to respond to any customer complaints and to add legitimate end-customers to an “allowlist” where appropriate.\n\n**name\\_count\\_for\\_card\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of names associated with this card from transactions on your account. This value includes payments from 2020 onwards.\n\n**name\\_count\\_for\\_card\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of names associated with this card from transactions on your account in the past week.\n\n**name\\_count\\_for\\_card\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of names associated with this card from transactions on your account in the past day.\n\n**name\\_count\\_for\\_card\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of names associated with this card from transactions on your account in the past hour.\n\n## Other payment details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**currency** New\n\n_Case Insensitive String_\n\nusd\n\nThe 3-digit currency code representing the currency in which the customer paid for the transaction.\n\n**destination**\n\n_Case Sensitive String_\n\nacct\\_19KCB9AlaaEw6AgR\n\nFor Connect users creating [destination charges](https://docs.stripe.com/connect/destination-charges), the destination account on whose behalf the charge is made.\n\n**digital\\_wallet**\n\n_Case Insensitive String_\n\napple\\_pay\n\nThe type of digital wallet used to store payment information. The supported values are: **android\\_pay**, **amex\\_express\\_checkout**, **apple\\_pay**, **masterpass**, **samsung\\_pay**, **unknown**, **visa\\_checkout**, **none**. _Note: Except for **android\\_pay** (valid with or without cryptogram), these are only valid when we receive a cryptogram that can only be generated by a registered device, as opposed to an unencrypted Primary Account Number_.\n\n**is\\_checkout**\n\n_Boolean_\n\ntrue\n\nIdentifies if the payment is processed through [Checkout](https://docs.stripe.com/payments/checkout). (This attribute only applies to payments processed through the current version of [Checkout](https://docs.stripe.com/payments/checkout) and doesn’t capture payments through legacy Checkout.)\n\n**is\\_off\\_session**\n\n_Boolean_\n\ntrue\n\nIndicates when a Stripe Billing payment isn’t triggered by direct user action, or when the off\\_session flag is set at PaymentIntent confirmation.\n\n**is\\_recurring**\n\n_Boolean_\n\ntrue\n\nIdentifies if the payment is recurring, for example, from subscriptions.\n\n**has\\_cryptogram**\n\n_Boolean_\n\ntrue\n\nTrue when we receive a cryptogram that can only be generated by a registered device, as opposed to an unencrypted Primary Account Number.\n\n**transaction\\_type**\n\n_String_\n\ncharge\n\nThe type of the transaction. The supported values are: **charge**, **payment\\_intent**, **setup\\_intent**. The **payment\\_intent** value is only supported for Request Credentials rules. In that case, any Allow, Block, or Review rules run against the charge attempts created when confirming the payment.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**refund\\_count\\_on\\_card\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of refunds associated with this billing address from transactions on your account. This value includes payments from 2020 onwards.\n\n**refund\\_count\\_on\\_card\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of refunds associated with this card from transactions on your account in the past week.\n\n**refund\\_count\\_on\\_card\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of refunds associated with this card from transactions on your account in the past day.\n\n**refund\\_count\\_on\\_card\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of refunds associated with this card from transactions on your account in the past hour.\n\n## Time![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**hours\\_since\\_customer\\_was\\_created**\n\n_Numeric_\n\n50\n\nThe number of hours since the [Customer](https://docs.stripe.com/api/customers) object making the payment was created on your account.\n\n**hours\\_since\\_email\\_first\\_seen**\n\n_Numeric_\n\n50\n\nThe number of hours since the email address supplied with the payment was first seen on your account. This value includes payments from 2020 onwards.\n\n**hours\\_since\\_email\\_first\\_seen\\_on\\_stripe**\n\n_Numeric_\n\n50\n\nThe number of hours since the email address supplied with the payment was first seen on Stripe overall. This value includes payments from 2020 onwards.\n\n**hours\\_since\\_card\\_first\\_seen**\n\n_Numeric_\n\n50\n\nThe number of hours since the card for the payment was first seen on your account. This value includes payments from 2020 onwards.\n\n**hours\\_since\\_first\\_successful\\_auth\\_on\\_card**\n\n_Numeric_\n\n50\n\nThe number of hours since the first successful auth for the card associated with the payment happened on your account. This value includes payments from 2020 onwards.\n\n**minutes\\_since\\_customer\\_was\\_created**\n\n_Numeric_\n\n50\n\nThe number of minutes since the [Customer](https://docs.stripe.com/api/customers) object making the payment was created on your account.\n\n**minutes\\_since\\_email\\_first\\_seen**\n\n_Numeric_\n\n50\n\nThe number of minutes since the email address supplied with the payment was first seen on your account. This value includes payments from 2020 onwards.\n\n**minutes\\_since\\_email\\_first\\_seen\\_on\\_stripe**\n\n_Numeric_\n\n50\n\nThe number of minutes since the email address supplied with the payment was first seen on Stripe overall. This value includes payments from 2020 onwards.\n\n**minutes\\_since\\_card\\_first\\_seen**\n\n_Numeric_\n\n50\n\nThe number of minutes since the card for the payment was first seen on your account. This value includes payments from 2020 onwards.\n\n**minutes\\_since\\_first\\_successful\\_auth\\_on\\_card**\n\n_Numeric_\n\n50\n\nThe number of minutes since the first successful auth for the card associated with the payment happened on your account. This value includes payments from 2020 onwards.\n\n**seconds\\_since\\_customer\\_was\\_created**\n\n_Numeric_\n\n50\n\nThe number of seconds since the [Customer](https://docs.stripe.com/api/customers) object making the payment was created on your account.\n\n**seconds\\_since\\_email\\_first\\_seen**\n\n_Numeric_\n\n50\n\nThe number of seconds since the email address supplied with the payment was first seen on your account. This value includes payments from 2020 onwards.\n\n**seconds\\_since\\_email\\_first\\_seen\\_on\\_stripe**\n\n_Numeric_\n\n50\n\nThe number of seconds since the email address supplied with the payment was first seen on Stripe overall. This value includes payments from 2020 onwards.\n\n**seconds\\_since\\_card\\_first\\_seen**\n\n_Numeric_\n\n50\n\nThe number of seconds since the card for the payment was first seen on your account. This value includes payments from 2020 onwards.\n\n**seconds\\_since\\_first\\_successful\\_auth\\_on\\_card**\n\n_Numeric_\n\n50\n\nThe number of seconds since the first successful authorization for the card associated with the payment on your account. This value includes payments from 2020 onwards.",
  "title": "Supported attributes | Stripe Documentation",
  "description": "Review a complete list of attributes supported in Radar rules.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/disputes/prevention/card-testing",
  "markdown": "# Protect yourself from card testing\n\n## Learn about this fraudulent activity and how to protect yourself against it.\n\nCard testing is a type of fraudulent activity where someone tries to determine whether stolen card information is valid so that they can use it to make purchases. A fraudster may do this by purchasing stolen credit card information, and then attempting to validate or make purchases with those cards to determine which cards are still valid. Other common terms for card testing are “carding”, “account testing”, and “card checking.”\n\nFraudulent activity such as card testing is an unavoidable part of online commerce. Card testing, however, has consequences for the entire payments ecosystem, so merchants, card networks, and Stripe share responsibility to prevent it. At Stripe, we’re constantly improving our tools and systems to detect and reduce fraud, but you must remain vigilant with respect to fraud.\n\n## How card testing works ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCard testers use both authorizations and payments to determine whether the stolen or generated card information they have is valid or not.\n\n*   **Authorizations**—This is the recommended method to test cards, as authorizations don’t typically show up on cardholder statements. This also makes it less likely the cardholder will notice or report the fraudulent activity.\n*   **Payments**—Card testers prefer smaller payments, which are less likely to be noticed by cardholders and reported as fraudulent. This makes donation pages and businesses that facilitate small-value purchases ideal targets for card testers.\n\n## Consequences ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCard testing has many negative outcomes, some of which get worse over time as card testing continues:\n\n*   **Disputes**—Many types of card testing involve payments, some of which succeed. Customers notice successful payments and report them as fraud, which will result in disputes that cost you time and money.\n*   **Higher decline rates**—Card testing usually causes a large number of declines to be associated with your business. A high decline rate damages the reputation of your business with card issuers and card networks, which makes all of your transactions appear riskier. This can result in an increased decline rate for legitimate payments, even after card testing stops.\n*   **Additional fees**—Card testing activity can result in additional fees, such as authorization fees for custom pricing plans, and dispute fees.\n*   **Infrastructure strain**—Card testing usually results in numerous network requests and operations. This additional traffic can overburden your infrastructure and disrupt legitimate activity.\n*   **Damages ecosystem health**—Card testing has negative impacts on the financial system as a whole, so both Stripe and our financial partners want to help you stop it.\n\n## Active card testing checklist ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your integration is being exploited by card testers, we recommend that you take the following actions immediately:\n\n*   [Identify](https://docs.stripe.com/disputes/prevention/card-testing#identify-card-testing) the card testing activity.\n*   [Refund](https://docs.stripe.com/refunds) fraudulent payments to avoid disputes.\n*   Add one or more [mitigations](https://docs.stripe.com/disputes/prevention/card-testing#combine-mitigations) to your integration to stop the card testing.\n*   Monitor your integration to ensure your mitigations are effective.\n\n## Identify card testing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can identify most card testing activity by a significant increase in declines. When investigating card testing, you can view declines in three places in the Dashboard. These sections of the Dashboard give you both a high-level and detailed view of card testing activity:\n\n*   Payments that were blocked due to card testing will be indicated as such when you view **Payment Details** on blocked transactions.\n*   The graphs under [Developers](https://dashboard.stripe.com/developers) in the Dashboard show recent activity on your Stripe account. Elevated decline rates caused by card testing will usually show up on these graphs.\n*   Specific card testing declines will be in [your failed request logs](https://dashboard.stripe.com/logs?success=false) as 402 errors.\n\n![Identify card testing](https://b.stripecdn.com/docs-statics-srv/assets/identify-card-testing.b93053f0e243f06d55968d8717cbf3c0.png)\n\nPayment blocked due to suspected card testing\n\n## Prevent card testing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCard testers employ a wide variety of techniques to make their fraudulent activity difficult to block. As a result, simple firewall rules or filters based on things like user agent strings are usually not sufficient to prevent card testing on their own.\n\nOne of the most popular ways a card tester will attack you is by using your Stripe secret key to create charges and validations. Ensure that you’re [keeping your keys safe](https://docs.stripe.com/keys#safe-keys) and don’t publish your secret key publicly.\n\n#### Caution\n\nNot a developer? Using a plugin or platform? Preventing and mitigating card testing typically requires code-level changes, so you’ll need to show this documentation to the developer or vendor who wrote the code and work with them to prevent card testing.\n\n### Optimize your Stripe integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe has many automated and manual controls in place to mitigate card testing, including rate limiters, alerts, machine learning models, ongoing reviews, and so on. When we first detect that you’re under a card testing attack, we’ll apply as many controls as we can to mitigate the attack.\n\n_However, the success of Stripe’s controls depends on your integration and what signals you send to us_. We use many signals to distinguish between card testing and legitimate payments. While we compute some of these signals automatically, many of them depend on the information that your integration provides. In general, the more data your integration provides, the more successful card testing prevention can be.\n\nFurthermore, integrating with Stripe’s recommended integration enables us to run [CAPTCHA](https://www.hcaptcha.com/) automatically on suspected card testing charges. CAPTCHA is an effective challenge that stops fraudsters but is still low friction enough to allow your good users to use your service. To opt out of our CAPTCHA integration, reach out to [Stripe Support](https://support.stripe.com/contact/login).\n\nUsing one of our recommended payment integrations allows you to get the most out of Stripe’s card testing prevention. If you can’t use a recommended integration, include as much data as possible or implement your own controls.\n\n| Integration type | Card testing integration quality |\n| --- | --- |\n| [Stripe Payment Links](https://docs.stripe.com/payment-links) Recommended | Excellent |\n| [Stripe Checkout](https://docs.stripe.com/payments/checkout) Recommended | Excellent |\n| [Stripe Elements](https://docs.stripe.com/payments/elements) with Customer signals Recommended | Excellent |\n| Direct [API](https://docs.stripe.com/api) integration with client and Customer signals | Very good |\n| Direct [API](https://docs.stripe.com/api) integration with client signals | Good |\n| Direct [API](https://docs.stripe.com/api) integration with Customer signals | Fair |\n| Direct [API](https://docs.stripe.com/api) integration with no additional signals | Poor |\n\nIncluding the following information with your payments can have a significant impact on the performance of card testing models. Our recommended integrations enable you to collect this information, while direct integrations might need to explicitly include this data.\n\n*   [Advanced fraud detection](https://docs.stripe.com/disputes/prevention/advanced-fraud-detection) Highest impact\n*   IP address\n*   Customer email\n*   Customer name\n*   Billing address\n\nFinally, your API keys give you access to Stripe’s systems and a global financial network. That access is what card testers want to exploit, so it’s important to [keep your keys safe](https://docs.stripe.com/keys#safe-keys) and [put safeguards around the functionality those keys provide](https://docs.stripe.com/disputes/prevention/card-testing#combine-mitigations) to prevent fraud and other malicious activity.\n\n### Control implementation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEndpoints targeted by card testers typically allow them to do one of the following:\n\n*   Attach a card to a customer.\n*   Make a payment.\n\nAdding security restrictions to endpoints that expose this functionality will help you prevent or mitigate card testing. The restrictions you implement should make card testing impractical while having little to no impact on your legitimate traffic.\n\nThe specific security measures you add to your integration will vary depending on your situation and the needs of your business. Several common approaches are described below.\n\n### Add a CAPTCHA ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCard testers often use automated scripts that can be blocked using a CAPTCHA. [Google’s reCAPTCHA](https://developers.google.com/recaptcha/intro) is often effective for blocking card testing. They provide options for both visible and invisible CAPTCHAS, depending on your needs. If you’ve added a CAPTCHA to your integration but card testing hasn’t stopped, check the following:\n\n*   Make sure the CAPTCHA requires validation on all requests that enable card validations or payments with Stripe.\n*   Review the CAPTCHA documentation to make sure it has been implemented properly.\n*   If you’re using a CAPTCHA that provides a score, adjust the threshold at which you prevent requests from succeeding.\n*   Try a different CAPTCHA solution, such as switching from an invisible CAPTCHA to a visible one, or using a different CAPTCHA solution entirely.\n\n### Add rate limits ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn some cases, you can stop card testing by adding [rate limits](https://docs.stripe.com/rate-limits). Tailor these rate limits to stop the specific kind of card testing you’re experiencing. For example, if card testers use your integration to validate cards by attaching them to new customers, an effective deterrent might be to limit the number of new customers that can be created by a single IP address in one day.\n\n### Require login or session validation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCard testing can often be prevented by requiring login or session validation when performing certain actions, such as creating an account or making a payment. Some of [the safeguards that protect against Cross-Site Request Forgery (CSRF) attacks](https://owasp.org/www-project-cheat-sheets/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html) are also effective against some types of card testing, such as CSRF tokens.\n\n### Detect and prevent unusual behavior ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the Dashboard, [webhooks](https://docs.stripe.com/webhooks), or continuous monitoring with [Stripe Sigma or Data Pipelines](https://stripe.com/guides/improve-fraud-management-with-radar-for-fraud-teams-and-stripe-data) to track anomalies in your traffic. You can compare card testing activity to typical legitimate traffic, and then build filters that limit or prevent only the card testing activity. For example, you might make changes to your system that:\n\n*   Limit the number of cards that can be attached to a single customer\n*   Limit the number of customers that can be created with a single IP address\n*   Filter out requests with certain user agents or other parameters\n\nTo do so, you can leverage [custom rules](https://docs.stripe.com/radar/rules/reference#velocity-rules) in Radar for Fraud Teams. We cover that in the next section.\n\n### Build custom rules for your risk appetite![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRadar comes with built-in rules to block based on [bank checks](https://docs.stripe.com/radar/rules#traditional-bank-checks), such as [CVC](https://docs.stripe.com/disputes/prevention/verification \"Card verification code check (CVC)\") checks.\n\nIf you understand your customer behavior and want to customize the velocity of payments in detail, you can build [custom rules](https://docs.stripe.com/radar/rules/reference#velocity-rules) in Radar for Fraud Teams.\n\nYou can find examples in the [Radar 101 guide](https://stripe.com/guides/radar-rules-101#rules-that-help-prevent-card-testing-or-card-cashing).\n\n### Use a combination of mitigations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIt might make sense to combine multiple approaches to stop card testing in order to maximize the impact on fraudulent activity without having an adverse effect on legitimate traffic. For example, you might combine CAPTCHAS and rate limits so the first payment attempt from an IP address succeeds without restriction, but subsequent requests made by that same IP address for the next several hours require a captcha verification to succeed.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Advanced fraud detection](https://docs.stripe.com/disputes/prevention/advanced-fraud-detection)\n*   [Optimizing your Radar integration](https://docs.stripe.com/radar/integration)\n*   [Keeping your keys safe](https://docs.stripe.com/keys#safe-keys)\n*   [Radar 101 guide](https://stripe.com/guides/radar-rules-101)",
  "title": "Protect yourself from card testing | Stripe Documentation",
  "description": "Learn about this fraudulent activity and how to protect yourself against it.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/features/saving-cards/save-cards-directly",
  "markdown": "# Save directly without charging | Stripe DocumentationThe Stripe Docs logo\n\nUse [SetupIntents](https://docs.stripe.com/payments/setup-intents) to collect card details without charging the card. Saving cards with Stripe Terminal using SetupIntents requires you to:\n\n1.  Create or retrieve a [Customer](https://docs.stripe.com/api/customers \"Customers\") object.\n2.  Create a [SetupIntent](https://docs.stripe.com/api/setup_intents) object to track the process.\n3.  Collect a payment method after collecting the customer’s consent.\n4.  Submit the payment method details to Stripe.\n\n## Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use [SetupIntents](https://docs.stripe.com/payments/setup-intents) to collect card details on Visa, Mastercard, American Express, Discover, co-branded Interac, and co-branded eftpos cards. Single-branded Interac cards, single-branded eftpos cards, and [mobile wallets](https://docs.stripe.com/payments/wallets) (for example, Apple Pay or Google Pay) aren’t supported.\n\n#### Note\n\nThe server-driven-based SetupIntents API is compatible with BBPOS WisePOS E and Stripe Reader S700.\n\n[](#create-customer)\n\nTo charge a card saved with Stripe, you must attach it to a [Customer](https://docs.stripe.com/api/customers).\n\nWhen you include a customer in your [SetupIntent](https://docs.stripe.com/api/setup_intents) before confirming, Stripe automatically attaches the generated card payment method to the [Customer](https://docs.stripe.com/api/customers) object you provide.\n\nInclude the following code on your server to create a new `Customer`.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#create-setupintent)\n\n#### Note\n\nWe recommend providing a [customer ID](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-customer) while creating a SetupIntent—doing so attaches the card payment method to the `Customer` upon successful setup. If you don’t provide a customer ID, you must attach the payment method in a separate call.\n\nA [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that represents your intent to set up a customer’s payment method for future payments. The SetupIntent tracks the steps of this setup process. For Terminal, this includes collecting and recording cardholder consent.\n\nYou must create the SetupIntent on your server and include `card_present` on the `payment_method_types` parameter.\n\nThe SetupIntent contains a [client secret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret), which is a key that’s unique to the individual SetupIntent. You must obtain the [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") from the SetupIntent on your server and pass it to the client side.\n\n`post '/create_setup_intent' do   intent = # ... Create or retrieve the SetupIntent   {id: intent.id, client_secret: intent.client_secret}.to_json end`\n\n[](#collect-payment-method)\n\nAfter you create a SetupIntent, you need to collect a payment method with the SDK and collect customer consent. If the customer provides the required form of agreement or consent, set the `customer_consent_collected` boolean to `true`.\n\n#### Note\n\nCollect customer consent verbally or with a checkbox in your application. You must comply with all applicable laws, rules, and regulations in your region.\n\nYou must call the [process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent) endpoint, which handles both collecting and confirming the SetupIntent. If the customer provides consent, set the `customer_consent_collected` boolean to `true`.\n\n`curl https://api.stripe.com/v1/terminal/readers/{{READER_ID}}/process_setup_intent \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d setup_intent={{SETUP_INTENT_ID}} \\   -d customer_consent_collected=true`\n\nThis method collects encrypted payment method data using the connected card reader, and associates the encrypted data with the SetupIntent.\n\n### Cancel collection ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Programmatic cancellation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can cancel collecting a payment method by calling [cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action).\n\n#### Caution\n\nCollecting a payment method happens locally and requires no authorization or updates to the SetupIntent object until the next step.\n\n[](#submit-payment-method)\n\nYour previous call to [process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent) handles the confirm for you, so no further action is necessary.\n\nA successful setup returns a `succeeded` value for the SetupIntent’s [status](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-status) property, along with a [generated\\_card](https://docs.stripe.com/api/setup_attempts/object#setup_attempt_object-payment_method_details-card_present-generated_card), which is a reusable `card` payment method you can use for online payments.\n\n#### Note\n\nThe [setup\\_intent.payment\\_method](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-payment_method) is a `card_present` PaymentMethod that represents the tokenization of the card in-store and isn’t chargeable online.\n\nThe `generated_card` payment method automatically attaches to the customer you provided during [SetupIntent creation](https://docs.stripe.com/terminal/features/saving-cards/save-cards-directly#create-setupintent). You can retrieve the `generated_card` payment method by expanding the SetupIntent’s `latest_attempt` property.\n\n`curl -G https://api.stripe.com/v1/setup_intents/`\n\n`{{SETUP_INTENT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"expand[]\"=latest_attempt`\n\nAlternatively, you can retrieve the attached payment method by fetching the list of payment methods that gets attached to the customer.\n\n`curl -G https://api.stripe.com/v1/customers/`\n\n`{{CUSTOMER_ID}}`\n\n`/payment_methods \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d type=card`\n\nIf you didn’t provide a customer during SetupIntent creation, you can attach the `generated_card` to a Customer object in a separate call.\n\n`curl https://api.stripe.com/v1/payment_methods/`\n\n`{{PAYMENT_METHOD_ID}}`\n\n`/attach \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d customer=  {{CUSTOMER_ID}}    `\n\nIf the setup isn’t successful, inspect the returned error to determine the cause. For example, failing to collect and notify Stripe of customer consent results in an error.\n\n## Compliance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when saving a customer’s payment details. For example, the European Data Protection Board has issued guidance regarding saving payment details. These requirements generally apply if you want to save your customer’s payment method for future use, such as presenting a customer’s payment method to them in the checkout flow for a future purchase or charging them when they’re not actively using your website or app.\n\nAdd terms to your website or app that state how you plan to save payment method details and allow customers to opt in. If you plan to charge the customer while they’re offline, then at a minimum, make sure that your terms also cover the following:\n\n*   The customer’s agreement to your initiating a payment or a series of payments on their behalf for specified transactions.\n*   The anticipated timing and frequency of payments (for instance, whether charges are for scheduled installment or subscription payments, or for unscheduled top-ups).\n*   How the payment amount is determined.\n*   Your cancellation policy, if you’re setting up the payment method for a subscription service.\n\nMake sure you keep a record of your customer’s written agreement to these terms.\n\nWhen you save a payment method, it can only be used for the specific usage that you included in your terms. If you want to charge customers when they’re offline and also save the customer’s payment method to present to them as a saved payment method for future purchases, you must explicitly collect consent from the customer. One way to do so is with a “Save my payment method for future use” checkbox.",
  "title": "Save directly without charging | Stripe Documentation",
  "description": "Save card details for online reuse from an in-person transaction.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal/features/saving-cards/save-after-payment",
  "markdown": "# Save card details after payment\n\n## Take an in-person payment and save card details to use later, when the cardholder is not physically present.\n\nYou can’t reuse the `card_present` [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") from an in-person transaction, but in most cases you can create a reusable `generated_card` PaymentMethod that represents the same card. From your customer’s perspective, they’re the same payment method.\n\nRequest a `generated_card` when you create a PaymentIntent by specifying a value for [setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage). If the card supports being saved for future payments, successfully [processing or confirming the payment](https://docs.stripe.com/terminal/payments/collect-card-payment) returns the `generated_card` ID. If the PaymentIntent has an associated [Customer](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-customer), the `generated_card` automatically attaches to that Customer. If not, then you can manually attach it to a Customer later.\n\nWhen you request a `generated_card`, always verify that the [PaymentIntent.latest\\_charge](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-latest_charge) contains a [generated\\_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card). In some cases, such as when using certain cards stored in digital wallets, a successful payment doesn’t create a `generated_card`. If that happens, and you require a `generated_card`, you have two options:\n\n*   Prompt the cardholder to save a different card using [the flow to save a card without taking a payment](https://docs.stripe.com/terminal/features/saving-cards/save-cards-directly).\n*   Refund the in-person payment, indicate that the transaction failed, and instruct the cardholder to use a different card.\n\nThe initial, in-person payment benefits from liability shift and, in certain markets, [lower pricing](https://stripe.com/terminal#pricing) for standard Terminal payments. However, subsequent payments using the `generated_card` are card-not-present online transactions. For example:\n\n*   A gym customer pays in person for an initial session and a membership subscription. The transaction sets up a `generated_card` to use for future automatic membership renewals.\n*   A customer at a clothing store provides their email address when making a purchase at the checkout counter. The transaction creates a customer record and an associated `generated_card`. That allows the customer to log into the store’s website later and place an order using the same card.\n\n#### Note\n\nFor most businesses, when you process a [digital wallet payment](https://docs.stripe.com/payments/wallets) such as Apple Pay or Google Pay, you can’t create a `generated_card` or otherwise save the payment method for reuse. For car rental services and hotels, Stripe offers a limited private beta feature that allows you to save a digital wallet payment method for reuse. To request access, contact [stripe-terminal-betas@stripe.com](mailto:stripe-terminal-betas@stripe.com).\n\n### Client-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith the iOS, Android, and React Native SDKs, you can create a PaymentIntent client-side and provide the `customer` and set `setup_future_usage`.\n\n#### Note\n\nClient-side `PaymentIntent` creation is possible with the iOS or Android SDKs. If you’re using the JavaScript SDK for Stripe Terminal, create a `PaymentIntent` server-side.\n\n### Server-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe JavaScript SDK and server-driven integration require you to create the PaymentIntent on your server. For iOS or Android, you can create the PaymentIntent on your server if the information required to start a payment isn’t readily available in your app.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=card_present \\  -d amount=1099 \\  -d currency=usd \\  -d customer={{CUSTOMER_ID}} \\   -d setup_future_usage=off_session`\n\nYou can retrieve the saved card details by [listing](https://docs.stripe.com/api/payment_methods/list) the card payment methods associated with that customer.\n\n### Compliance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when saving a customer’s payment details. For example, the European Data Protection Board has issued guidance regarding saving payment details. These requirements generally apply if you want to save your customer’s payment method for future use, such as presenting a customer’s payment method to them in the checkout flow for a future purchase or charging them when they’re not actively using your website or app.\n\nAdd terms to your website or app that state how you plan to save payment method details and allow customers to opt in. If you plan to charge the customer while they’re offline, then at a minimum, make sure that your terms also cover the following:\n\n*   The customer’s agreement to your initiating a payment or a series of payments on their behalf for specified transactions.\n*   The anticipated timing and frequency of payments (for instance, whether charges are for scheduled installment or subscription payments, or for unscheduled top-ups).\n*   How the payment amount is determined.\n*   Your cancellation policy, if you’re setting up the payment method for a subscription service.\n\nMake sure you keep a record of your customer’s written agreement to these terms.\n\nWhen you save a payment method, it can only be used for the specific usage that you included in your terms. If you want to charge customers when they’re offline and also save the customer’s payment method to present to them as a saved payment method for future purchases, you must explicitly collect consent from the customer. One way to do so is with a “Save my payment method for future use” checkbox.",
  "title": "Save card details after payment | Stripe Documentation",
  "description": "Take an in-person payment and save card details to use later, when the cardholder is not physically present.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/radar/reviews/auth-and-capture",
  "markdown": "# Reviewing uncaptured payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use reviews if your Stripe integration uses auth and capture.\n\nBy default, you [create Stripe payments](https://docs.stripe.com/payments/accept-a-payment) in one step, which requires no further action on your part to send the funds to your bank account.\n\nHowever, Stripe also supports two-step payments, often called [auth and capture](https://support.stripe.com/questions/does-stripe-support-authorize-and-capture). If your integration uses this technique, keep in mind that **approving a review and capturing a payment are separate actions.**\n\n## Reviewing uncaptured payments in the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen Stripe places an uncaptured payment in review, the Dashboard displays a **Capture** button in addition to the set of buttons for closing the review by approving or refunding it. Also, because refunding uncaptured payments is often called “releasing” or “[reversing](https://docs.stripe.com/refunds#refund-requests),” uncaptured payments have a **Cancel** button instead of a **Refund** button.\n\n#### Note\n\nApproving the review doesn’t automatically capture the charge. You still need to click **Capture**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/uncaptured-payment.b9aab5781bebea8e1cc8f349dc2092bf.png)\n\n## Using the API to automatically capture approved payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThrough the API, you can set up your integration to:\n\n*   Immediately capture payments _not_ placed in `review`\n*   Leave payments placed in `review` uncaptured\n*   When the review is approved, capture the payment\n\n### Immediately capture payments not placed in review![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create an uncaptured payment, set the capture behavior accordingly in the API request. On success, check the payment intent’s [review](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-review) attribute. If the attribute is empty, capture the charge.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`# Get the credit card details submitted by the form # Create a PaymentIntent with manual capture payment_intent = Stripe::PaymentIntent.create({   amount: 1000,   currency: 'usd',   payment_method: '{{PAYMENT_METHOD_ID}}',   description: 'Example charge',   confirm: true,   capture_method: 'manual', })  # Check if the payment is in review. If not, capture it. if !payment_intent.review   payment_intent.capture end`\n\n### Capturing a payment after a review is approved![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy design, the previous step left the payments in `review` uncaptured. In this step, use [webhooks](https://docs.stripe.com/webhooks \"webhook\") to automate the process of capturing these payments upon approval.\n\nStart by [configuring your webhooks](https://docs.stripe.com/webhooks#register-webhook) to listen for the `review.closed` event. The event data includes the [review object](https://docs.stripe.com/api#review_object), and the object’s `reason` attribute indicates whether the review was approved, or if it was closed for some other reason (for example, the payment was refunded).\n\n`// Review object included in review.closed event webhook. {   \"id\": \"prv_08voh1589O8KAxCGPcIQpmkz\",   \"object\": \"review\",   \"payment_intent\": \"pi_1D0CsEITpIrAk4QYdrWDnbRS\",   \"created\": 1474379631,   \"livemode\": false,   \"open\": false,   \"reason\": \"approved\" }`\n\nIf `reason` is `approved`, capture the charge.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`post \"/my/webhook/url\" do   event_json = JSON.parse(request.body.read)   event = Stripe::Event.retrieve(event_json[\"id\"])    if event.type == 'review.closed'     review = event.object     if review.reason == 'approved'       pi = Stripe::PaymentIntent.retrieve(review.payment_intent)       pi.capture     end   end    status 200 end`\n\nTo capture approved payments, the review process must be completed within 7 days. Otherwise, as with any other uncaptured payment, the authorization automatically expires and you can no longer capture the payment.",
  "title": "Reviewing uncaptured payments | Stripe Documentation",
  "description": "Learn how to use reviews if your Stripe integration uses auth and capture.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/radar/analytics/fraud-insights",
  "markdown": "# Fraud insights | Stripe DocumentationThe Stripe Docs logo\n\n## Review fraud trends specific to your business so you can tailor your strategy.\n\nBuilding an effective fraud fighting strategy requires understanding the specific drivers of fraud for your business. If you use [Radar for Fraud Teams](https://docs.stripe.com/radar \"Radar for Fraud Teams\"), you can access the [Insights](https://dashboard.stripe.com/radar/insights) tab of the Radar page in your Dashboard to:\n\n*   Visualize the ratio of fraudulent and legitimate transactions across your payments.\n*   Identify combinations of Radar attributes that have material impact on your fraud rates.\n*   Adjust your Radar rules to effectively balance fraud prevention and legitimate customer conversion.\n\n## Configure your data set![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can specify the time period analyzed and what types of payment activity constitute fraud to further customize your results.\n\n### Specify the time period![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, we display statistics in near real-time for the prior 30 days of transaction history. To see data for a different time period:\n\n1.  Click the **Date** filter to open the time period editor.\n2.  Use the dropdown to choose a relative comparator.\n3.  Depending on the comparator you choose, set the parameters, such as _in the last 1 months_ or _between 2/26/2024 and 3/18/2024_.\n4.  Choose your local time zone or Greenwich Mean Time (UTC).\n5.  Click **Apply**.\n\n### Configure your fraud definition![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nClick **Configure** to choose which types of transactions to include as fraudulent in your Insights statistics.\n\n*   **All fraudulent transactions**: Payments disputed for fraud, reported as early fraud warning (EFW), or refunded as fraud\n*   **Only disputes**: Any disputed payment, regardless of [category](https://docs.stripe.com/disputes/categories)\n*   **Only fraudulent disputes**: Disputed payments in the fraud category\n*   **Only early fraud warnings**: Issuer-flagged suspicious payment [EFWs](https://docs.stripe.com/disputes/how-disputes-work#early-fraud-warnings)\n\n## Evaluate your fraud markers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe analyzes all the payments for the specified time period, then presents:\n\n*   A summary of the total fraudulent and legitimate payments for the time period.\n*   A table of the top rule attribute values that suggest a correlation with fraud, based on the ratio of fraudulent to legitimate payments.\n\nThe summary and each attribute in the table provide the following statistics:\n\n| Statistic | Description |\n| --- | --- |\n| Fraud percentage | The percentage of fraudulent payment volume where this rule attribute was present. |\n| Legitimate percentage | The percentage of legitimate payment volume where this rule attribute was present. |\n| Fraud volume | The total amount of the fraudulent payments where this rule attribute was present. |\n| Legitimate volume | The total amount of the legitimate payments where this rule attribute was present. |\n| Fraud count | The total number of fraudulent payments where this rule attribute was present. |\n| Legitimate count | The total number of legitimate payments where this rule attribute was present. |\n\n![Personalized fraud indicator results](https://b.stripecdn.com/docs-statics-srv/assets/fraud-insights-indicator-table.9f171b09a9e83d23e6cdb6b83a3fc2a7.png)\n\nPersonalized fraud indicator results\n\n## Use filters to discover high-risk attribute combinations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can add any of the attribute values presented as your top fraud indicators as a filter. Doing so adjusts the table to show a new set of top attribute values that corresponded to fraud _in combination with the filtered rule attribute value_. Continue applying filters in this way to find a combination of rule attribute values that block transactions with the attributes you desire.\n\nFor example, say your top indicator shows that 19% of fraudulent payment volume had Delaware as the billing state. Blocking all payments from Delaware isn’t sensible, but to further explore through filters, you might take the following steps:\n\n1.  Filter on “billing state is Delaware” and identify which other rule attributes corresponded most to fraud when the billing state is Delaware. In this case, you find that 42% of fraudulent payment volume where Delaware is the billing state has a shipping state that isn’t Delaware. That’s only 8% of the total fraudulent payment volume, and blocking all payments with billing state Delaware and a different shipping state is too aggressive, so you continue.\n2.  Add “shipping state is not Delaware” as a second filter. Applying both filters and looking at the resulting fraudulent payment volume reveals that 75% of it involves payments of greater than 500 USD. This amounts to 6% of the total fraudulent payment volume.\n3.  Add “payment amount greater than 500 USD” as a third filter. Comparing the results of all three filters to total payment volumes shows 6% of all fraudulent payment volume, but only 0.1% of all legitimate payment volume.\n4.  At this point, you might set up a rule to block payments of over 500 USD that have Delaware as the billing state and a different state for shipping. You can expect that rule to block 6% of fraudulent payment volume and only 0.1% of legitimate payment volume.\n\nAs the example illustrates, you can apply a series of filters to determine a set of rule attribute values that together identify a material percentage of fraudulent payment volume. When that set also reflects a low percentage of legitimate payment volume, a rule to block those values can effectively reduce fraud while having limited impact on legitimate payments.\n\n### Customize filters![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![Example chart about the risk score attribute](https://b.stripecdn.com/docs-statics-srv/assets/fraud-insights-custom-filter.09750cf1a92546047e0f096bf5585f5b.png)\n\nYou can also create a filter without using the rule attributes presented in the table.\n\n1.  Click **More filters**.\n2.  Choose the rule attribute that you want to create a filter for.\n3.  Depending on the attribute you choose, set the parameters, such as _Risk score is greater than 15_ or _Card bin is 4242_.\n4.  Click **Apply**.\n\n## Create a rule![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you assemble the set of filters that represent your optimum ratio between blocking the most risky transactions without compromising legitimate payments, you can automatically create a rule to prevent payments where all the selected attributes exist simultaneously.\n\n1.  Click **Add block rule** to slide open the rule editor.\n2.  Check that the rule accurately reflects the attributes you filtered.\n3.  (Optional) Augment the rule to include other attributes or your own custom metadata, such as product codes or retail locations. Try [Radar Assistant](https://docs.stripe.com/radar/rules#how-to-create-effective-rules) to generate a rule based on your natural language prompts.\n4.  Click **Test rule**.\n5.  If necessary, correct any validation errors and retest.\n6.  On the **Review new rule** page, review how this rule performs against your recent transactions to confirm whether you want to enable it.\n7.  Click **Add rule** to begin applying this rule to all future transactions.\n\n![Sliding drawer to create a rule from your applied filters](https://b.stripecdn.com/docs-statics-srv/assets/fraud-insights-create-rule.a985df06aaeac7f3d30eb9426922bd8f.png)\n\n## Inspect charts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can find visualizations of the attributes identified as your top drivers of fraud below the table of your most common fraud indicators. Each chart shows the percentages of total fraudulent and legitimate payment volume associated with given values of the attribute over a [specified time period](#specify-the-time-period).\n\n#### Note\n\nThe charts represent percentages of total payment volumes, not percentages of total numbers of payments. As an example, imagine that the **Billing state** graph shows 6% of fraudulent payment volume for Utah. That means the total amount charged for fraudulent payments with Utah as the billing state is 6% of the total amount charged for all fraudulent payments. It doesn’t indicate that 6% of all fraudulent payment transactions had Utah as the billing state.\n\nHover over any point in the chart to see additional metrics for both fraudulent and legitimate payments associated with that attribute value.\n\n![Example chart about the card count by IP address attribute](https://b.stripecdn.com/docs-statics-srv/assets/fraud-insights-chart.f60beaf9b98c5ece9587228c9b23b449.png)\n\nHovering displays additional volume and count metrics.\n\n| Metric | Description |\n| --- | --- |\n| **Percentage** | Percent of payments by volume at the selected point |\n| **Volume** | Total amount charged for payments at the selected point |\n| **Count** | Number of payments at the selected point |\n\n### Change chart attributes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe charts displayed reflect the [Radar rule attributes](https://docs.stripe.com/radar/rules/supported-attributes) corresponding to your top fraud drivers. To generate visualizations for other attributes:\n\n1.  Click **Select attributes**.\n2.  Scroll through the list or enter keywords in the search bar to find attributes.\n3.  Click an attribute’s card to select or deselect it. Selected attributes display a checkmark and the button displays the total number of attributes selected.\n4.  Click **Show x attributes** to generate the charts for your selected attributes.\n\n![Radar rule attribute selection modal](https://b.stripecdn.com/docs-statics-srv/assets/fraud-analytics-attribute-selector.686f8b86dbac286e1d030236176134f8.png)\n\nThe Radar rule attribute modal allows you to choose from more than 150 attributes.",
  "title": "Fraud insights | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/onboarding/quickstart",
  "markdown": "# Build a Connect integration | Stripe DocumentationThe Stripe Docs logo\n\nSearch the docs or ask a question",
  "title": "Build a Connect integration | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/direct-charges-fee-payer-behavior",
  "markdown": "# Fee behavior on connected accounts\n\n## Understand how to configure the billing behavior for new connected accounts.\n\nThe `controller.fees.payer` property on `v1/accounts` determines the set of billing behaviors you can expect for direct charges and product usages that occur on this connected account. This doc details the behavior of the different values it can have.\n\n#### Note\n\nAny activity occurring at the platform account level is billed to your platform regardless of the `controller.fees.payer` value on your connected accounts. For example, Stripe charges the platform directly for destination charges (with or without `on_behalf_of`) and card account updates for cards stored on your platform account.\n\n## Selecting billing behavior![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can only set the [controller.fees.payer](https://docs.stripe.com/api/accounts/create#create_account-controller-fees-payer) property when you create an account.\n\nThe following sections describe the behavior of each value.\n\n### `account`\n\nStripe collects fees directly from your connected account. We don’t charge any [Connect fees](https://stripe.com/connect/pricing) to it or to your platform.\n\nAny application fees that your platform bills to the connected account are in addition to Stripe fees.\n\nYou can set the payer type to `account` when you create connected accounts. Accounts created with `type=standard` also have this value.\n\n### `application`\n\nThe platform pays payment fees for direct charges and fees for Stripe products like Radar, Card Account Updater, and Instant Payouts. For complete details, see [the table below](#fee-payer-behaviors).\n\nThe platform also pays [Connect fees](https://stripe.com/connect/pricing) for these accounts .\n\nWe recommend that you monetize payments and Stripe products where the platform is billed by collecting fees from your connected accounts.\n\nYou can set the payer type to `application` when you create connected accounts.\n\nPlatforms that pay Stripe payment fees for direct charges can access dedicated reports.\n\nSee [Platform Reporting for direct charge payment fees paid by platform](https://docs.stripe.com/connect/direct-charge-buy-rate-reporting-overview).\n\n### `application_custom` or `application_express`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`application_custom` and `application_express` are assigned to accounts created with `type=custom` and `type=express`, respectively. Their billing behaviors for direct charges and connected account usage of Stripe products matches the historical behavior of Custom and Express accounts. For complete details, see [the table below](#fee-payer-behaviors).\n\nWe recommend that you monetize payments and Stripe products where the platform is billed by collecting fees from your connected accounts.\n\nYou can’t set the payer type to `application_custom` or `application_express` when you create connected accounts. They only apply to accounts created with `type=custom` or `type=express`.\n\n## List of fee behaviors for payer values ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen connected accounts pay Stripe fees, they’re the same as [fees paid by non-Connect Stripe users](https://stripe.com/pricing).\n\n| Product Category | account | application | application\\_custom | application\\_express |\n| --- | --- | --- | --- | --- |\n| **Stripe payment processing fees** | Connected Account | Platform | Connected Account | Connected Account |\n| **Dispute fees** | Connected Account | Platform | Connected Account | Connected Account |\n| **Instant Payouts** | Connected Account | Platform | Platform | Platform |\n| **LPM Payment Failure Fees** | Connected Account | Platform | Connected Account | Connected Account |\n| **Premium Payouts** | Connected Account | Platform | Platform | Platform |\n| **Invoicing and Subscriptions** | Connected Account | Platform | Platform | Platform |\n| **Radar** | Connected Account | Platform | Varies | Varies |\n| **Terminal Add-ons** | Connected Account | Platform | Connected Account | Connected Account |\n| **Stripe Tax** | Connected Account | Platform | Platform | Platform |\n| **3D Secure** | Connected Account | Platform | Varies | Varies |\n| **Adaptive Acceptance** | Connected Account | Platform | Platform | Platform |\n| **Card Account Updater** | Connected Account | Platform | Platform | Platform |\n| **Checkout Add-ons** | Connected Account | Platform | Platform | Platform |\n| **Instant bank account verifications** | Connected Account | Platform | Platform | Platform |",
  "title": "Fee behavior on connected accounts | Stripe Documentation",
  "description": "Understand how to configure the billing behavior for new connected accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/updating-service-agreements",
  "markdown": "# Updating service agreement acceptances | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to update your connected accounts and handle acceptance of the Stripe Connected Account Agreement and other disclosures.\n\nWorking with connected accounts where your platform is liable for negative balances, including Custom and Express accounts, provides a lot of flexibility. You can access almost every Stripe [account](https://docs.stripe.com/api/accounts) property through the API.\n\nPlatforms can use the API to perform many account management functions, including:\n\n*   Handle acceptance and re-acceptance of the Stripe Connected Account Agreement (for accounts with no Stripe-hosted Dashboard access, including Custom accounts).\n*   Handle [identity verification](https://docs.stripe.com/connect/identity-verification) (for accounts with no Stripe-hosted Dashboard access, including Custom accounts).\n*   Manage the connected business’s information, such as its name, logo, and URL.\n*   Set some charge behaviors.\n*   Establish [payout handling](https://docs.stripe.com/connect/payouts-connected-accounts).\n\nYou can make those account updates with an [update account](https://docs.stripe.com/api/accounts/update) call.\n\n## View and update a connected account through the platform’s Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can update some account settings in the [Connected accounts](https://dashboard.stripe.com/connect/accounts/overview) section of your Dashboard.\n\nClick any connected account in the list to open that account’s details page. The information that you can view and change depends on the account type or controller properties. Common tasks on this page include checking the status of payouts and searching for payments.\n\n## Stripe’s service agreements for connected accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo provide Stripe Connect services to your connected accounts, Stripe must establish a direct contractual relationship with them. That requires all connected accounts with no Stripe-hosted Dashboard access to accept the correct Stripe service agreement. The service agreement your accounts must accept depends on whether they are merchants subject to Stripe’s full terms of service or are payment recipients subject to the recipient service agreement. You’re responsible for making sure that your accounts agree to the correct service agreement before accepting or receiving payments through Stripe on your platform.\n\nIf, after onboarding, one of your connected accounts transfers its ownership or updates its verified tax identification number, the updated account owner must provide their agreement to the correct Stripe service agreement. You’re responsible for obtaining that agreement.\n\n### Referencing Stripe’s service agreement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must present your connected accounts with a link to the correct agreement, and they must expressly consent to it prior to using Stripe. For example, at the point of account activation, you can present language such as the following:\n\n### Add Stripe’s service agreement to your terms of service ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can make accepting Stripe’s service agreement easy for connected accounts by including it in your terms of service. In your terms, include a link to the correct Stripe service agreement and clearly state that accepting your terms includes accepting the Stripe service agreement. Here are some examples of text you can include in your terms:\n\nPayment processing services for \\[account holder term, for example, drivers or sellers\\] on \\[platform name\\] are provided by Stripe and are subject to the [Stripe Connected Account Agreement](https://stripe.com/connect-account/legal/full), which includes the [Stripe Terms of Service](https://stripe.com/legal) (collectively, the “Stripe Services Agreement”). By agreeing to \\[this agreement / these terms / and so on\\] or continuing to operate as a \\[account holder term\\] on \\[platform name\\], you agree to be bound by the Stripe Services Agreement, as the same may be modified by Stripe from time to time. As a condition of \\[platform name\\] enabling payment processing services through Stripe, you agree to provide \\[platform name\\] accurate and complete information about you and your business, and you authorize \\[platform name\\] to share it and transaction information related to your use of the payment processing services provided by Stripe.\n\n### Indicating acceptance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor connected accounts where the platform collects updated information for due or changed requirements, you must collect the updated acceptance of Stripe’s service agreement.\n\nTo indicate to Stripe that a connected account accepted Stripe’s service agreement, make an [update account call](https://docs.stripe.com/api/accounts/update), providing the acceptance date and IP address:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"tos_acceptance[date]\"=1609798905 \\  -d \"tos_acceptance[ip]\"=\"8.8.8.8\"`\n\n### Acquirer disclosure![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo meet Stripe’s Financial Partner requirements, you must advise your connected accounts of Stripe’s acquirers and their contact information in a clear and conspicuous manner, including [this disclosure](https://stripe.com/legal/acquirer-disclosure). For accounts that fall solely under the Recipient Service Agreement, you don’t need to include this disclosure.\n\nIf your accounts provide acceptance of Stripe’s service agreement through a Stripe onboarding product, it includes that disclosure.\n\n## Disclosing how Stripe processes connected account data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhile providing your connected accounts with Connect services, Stripe processes their data as explained in [Stripe’s Privacy Policy](https://stripe.com/privacy). You must disclose that to your accounts by providing them with a link to that policy.\n\nIn addition, connected accounts in Canada must consent to allow Stripe to obtain information from credit agencies to verify their identities. You can obtain that consent in your onboarding flow by incorporating language like the following where users agree to your terms of service:\n\n> Our payment processor can obtain information from credit agencies to verify your identity. That information will be used for the purposes described in their Privacy Policy.\n\nIf you are using a Stripe onboarding product like embedded onboarding, but providing a link to your own privacy policy, your privacy policy must include a link to Stripe’s Privacy Policy and the following language:\n\nPrivacy policy link\n\nWhen you provide personal data in connection with\n\nthe payment services\n\nReplace this placeholder with terminology you use to identify the services that Stripe provides to your connected accounts.\n\n, Stripe receives that personal data and processes it in accordance with Stripe’s Privacy Policy.\n\nFor Stripe to lawfully process personal data according to your instructions, you can be legally required to provide additional disclosures or obtain additional consents. Talk to your lawyer about which disclosures and consents might apply to your platform and connected accounts.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Identity Verification](https://docs.stripe.com/connect/identity-verification)\n*   [Account Tokens](https://docs.stripe.com/connect/account-tokens)\n*   [Control Bank and Debit Card Payouts](https://docs.stripe.com/connect/payouts-connected-accounts)\n*   [Manage bank accounts and debit cards](https://docs.stripe.com/connect/payouts-bank-accounts)\n*   [Receive payouts](https://docs.stripe.com/payouts)\n*   [Full API reference](https://docs.stripe.com/api)",
  "title": "Updating service agreement acceptances | Stripe Documentation",
  "description": "Learn how to update your connected accounts and handle acceptance of the Stripe Connected Account Agreement and other disclosures.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/custom/onboarding",
  "markdown": "# Onboarding solutions for Custom accounts\n\n## Choose the onboarding method for Custom accounts that suits your business.\n\nStripe offers several ways to onboard Custom connected accounts. You can choose the best onboarding method for your business.\n\n| Method | Pros | Cons |\n| --- | --- | --- |\n| [API-based onboarding](https://docs.stripe.com/connect/custom/onboarding#api-based-onboarding) | Exercise full control over your own UI | *   Expensive and time-consuming to build<br>*   Continuing high maintenance, especially to keep in compliance with changing global requirements<br>*   Can’t resolve Stripe risk reviews |\n| [Embedded onboarding](https://docs.stripe.com/connect/custom/onboarding#embedded-onboarding) new | *   [Highly themeable](https://docs.stripe.com/connect/customize-connect-embedded-components)<br>*   Limited or no Stripe branding<br>*   Connected accounts remain in the flow of your site<br>*   Low effort integration | Limited control over the flow logic |\n| [Stripe-hosted onboarding](https://docs.stripe.com/connect/custom/onboarding#stripe-hosted-onboarding) | Lowest effort integration | *   Stripe-branded with limited platform branding<br>*   Limited control over the flow logic<br>*   Connected accounts redirect to Stripe instead of completing the process without leaving your site |\n\n## API-based onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI-based onboarding involves building out each aspect of your site’s onboarding user interface to call the corresponding Stripe APIs. Your integration must satisfy all of Stripe’s onboarding requirements.\n\n### Establish Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following factors affect the [onboarding requirements](https://docs.stripe.com/connect/required-verification-information) for your connected accounts:\n\n*   The origin country of the connected accounts\n*   The [service agreement type](https://docs.stripe.com/connect/service-agreement-types) applicable to the connected accounts\n*   The [capabilities](https://docs.stripe.com/connect/account-capabilities) requested for the connected accounts\n*   The [business type](https://docs.stripe.com/api/accounts/object#account_object-business_type) (for example, individual or company) and [company.structure](https://docs.stripe.com/api/accounts/object#account_object-company-structure) (for example, public corporation or private partnership)\n\nUse the interactive form to see how changing these factors affects the requirements.\n\n### Requirements form![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Create forms to collect information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs a best practice, organize the required parameters into logical groupings or forms in your onboarding flow. You might wish to encode a mapping between the Stripe parameters and the logical groupings. Suggested logical groupings for parameters are shown in the first column of the example requirements table.\n\nAfter you encode the required parameters into your application, generate UIs for the parameters corresponding to these requirements. For each parameter, design a UI form that includes:\n\n*   Parameter label, localized to each supported country and language\n*   Parameter description, localized to each supported country and language\n*   Parameter input fields with data validation logic and document uploading where required\n\nIt’s important to architect your application logic to account for the possibility of additional parameters in the future. For example, Stripe might introduce new parameters, new verifications, or new thresholds that you must incorporate into your onboarding flows over time.\n\nChanging any of the factors that determine your connected accounts requirements means you must also adjust your collection forms. [Country](https://docs.stripe.com/api/accounts/object#account_object-country) and [service agreement type](https://docs.stripe.com/api/accounts/object#account_object-tos_acceptance-service_agreement) are immutable, while [capabilities](https://docs.stripe.com/api/accounts/object#account_object-capabilities) and [business type](https://docs.stripe.com/api/accounts/object#account_object-business_type) are mutable.\n\n*   To change an immutable field such as country or service agreement type, create a new connected account with the new values. Doing so produces new requirements for you to incorporate in your collection flows.\n*   To change a mutable field such as capabilities or business type, update the connected account. Doing so produces new requirements for you to incorporate in your collection flows.\n\n### Include Stripe Terms of Service Agreement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour connected accounts must accept Stripe terms of service before they can be activated. You can [wrap Stripe terms of service in your own terms of service](https://docs.stripe.com/connect/updating-service-agreements#adding-stripes-service-agreement-to-your-terms-of-service).\n\n### Create the Connected Account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Create Account](https://docs.stripe.com/api/accounts/create) API to create a connected account with country, service type agreement, desired capabilities, business type, and any other information matching your [requirements](#establish-requirements). At a minimum, you must specify `capabilities` and `type`. If you don’t specify other parameters, they’re assigned the following default values:\n\n*   The service type agreement (`tos_acceptance.service_agreement`) defaults to `full`.\n*   The `country` defaults to the same country as your platform.\n\nThe following code sample creates a Custom connected account with `card_payments` and `transfers` capabilities under a full service agreement for an individual.\n\n#### Note\n\nThis example includes only some of the fields you can set when creating an account. For a full list of the fields you can set, such as `address` and `website_url`, see the [Create Account API reference](https://docs.stripe.com/api/accounts/create).\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d country=US \\  -d type=custom \\  -d \"capabilities[card_payments][requested]\"=true \\  -d \"capabilities[transfers][requested]\"=true`\n\n### Take your account through the onboarding flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can enable connected accounts in either of two ways:\n\n*   Incremental onboarding strategy: Collect the minimum [required information](#establish-requirements) up front and the rest later\n*   Upfront onboarding strategy: Collect all information up front\n\nThe incremental onboarding strategy speeds up initial onboarding but requires additional information collection later on. The upfront onboarding strategy minimizes enablement disruption throughout the connected account’s lifecycle at the expense of a lengthier application process. You can decide which strategy better suits your use case.\n\nTo implement your onboarding strategy, inspect the requirements hash of the connected account you created. The requirements hash provides a complete list of parameters you must collect to activate the connected account.\n\n*   If you choose the incremental onboarding strategy, inspect the `currently_due` field in the requirements hash and build an onboarding flow that only collects for the listed parameters.\n*   If you choose the upfront onboarding strategy, inspect the `eventually_due` field in the requirements hash and build an onboarding flow that collects for all the listed parameters.\n\n`{   ...   \"requirements\": {     \"alternatives\": [],     \"current_deadline\": null,     \"currently_due\": [       \"business_profile.product_description\",       \"business_profile.support_phone\",       \"business_profile.url\",       \"external_account\",       \"tos_acceptance.date\",       \"tos_acceptance.ip\"     ],     \"disabled_reason\": \"requirements.past_due\",     \"errors\": [],     \"eventually_due\": [       \"business_profile.product_description\",       \"business_profile.support_phone\",       \"business_profile.url\",       \"external_account\",       \"tos_acceptance.date\",       \"tos_acceptance.ip\"     ],     \"past_due\": [],     \"pending_verification\": []   },   ... }`\n\n### Update the Connected Account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUpdate the connected account object with new information as it progresses through your onboarding flow. Perform an [Update Account](https://docs.stripe.com/api/accounts/update) call, identifying the connected account by the `id` value you stored earlier.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\   --data-urlencode \"business_profile[url]\"=\"[https://furever.dev](https://furever.dev/)\" \\  -d \"tos_acceptance[date]\"=1609798905 \\  -d \"tos_acceptance[ip]\"=\"8.8.8.8\"`\n\nStripe validates every update to a connected account. Update the account at each step in onboarding to allow Stripe to validate information as soon as it’s added, while your users continue through the onboarding flow. After Stripe confirms acceptance of our terms of service, any changes to the connected account trigger reverification. For example, if you change the connected account’s name and ID number, Stripe reruns verifications.\n\nWhen updating a connected account, you must handle any [verification errors](#verification-handling) or [HTTP error codes](https://docs.stripe.com/error-handling) returned by the Accounts API.\n\n## Embedded onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEmbedded onboarding is a highly themeable onboarding UI with limited Stripe branding. Connected account users interact with the embedded component without ever leaving your application. Embedded onboarding uses the [Accounts API](https://docs.stripe.com/api/accounts) to read the requirements and generate an onboarding form with robust data validation and that is localized for all Stripe-supported countries. In addition, embedded onboarding handles all:\n\n*   Business types\n*   Configurations of company representatives\n*   Verification document uploading\n*   Identify verification and statuses\n*   International bank accounts\n*   Error states\n\nYou can integrate embedded onboarding in a few lines of code, while API-based onboarding requires you to construct custom logic. To integrate embedded onboarding, follow our [embedded components guide](https://docs.stripe.com/connect/get-started-connect-embedded-components) and integrate the [Account onboarding](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding) embedded component.\n\n## Stripe hosted onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe hosted onboarding allows you to redirect your user to Stripe to complete the onboarding process in a co-branded interface. Create an [Account Link](https://docs.stripe.com/api/account_links) and direct your user to the hosted onboarding flow. The [return\\_url](https://docs.stripe.com/api/account_links/create#create_account_link-return_url) allows Stripe to return the user to your application and allow you to progress the connected account accordingly.\n\nTo integrate Stripe hosted onboarding, follow our [Stripe hosted onboarding guide](https://docs.stripe.com/connect/custom/hosted-onboarding).\n\n## Verification handling ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen the connected account’s data is submitted, Stripe verifies it. This process might take minutes or hours depending on the nature of the verification required. During this process, the capabilities you requested have [a pending status](https://docs.stripe.com/api/accounts/object#account_object-capabilities).\n\n### Review status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can retrieve the status of your connected account’s capabilities by:\n\n*   Inspecting the Account object’s [capabilities](https://docs.stripe.com/api/accounts/object#account_object-capabilities) hash for the relevant capability.\n*   Requesting capabilities directly from the [Capabilities API](https://docs.stripe.com/api/capabilities/retrieve) and inspecting the status of the relevant capability.\n*   Listening for `account.updated` [events](https://docs.stripe.com/api/events/types#event_types-account.updated) in your [webhook](https://docs.stripe.com/connect/webhooks) endpoint and inspecting the `capabilities` hash for the relevant capability.\n\nAfter verifications are complete, the capability becomes `active` and available to the connected account. Account verifications run continuously, and if a future verification fails, a capability can transition out of `active`. Listen for `account.updated` events to detect changes to capability states.\n\nConfirm that your Connect integration is compliant and operational by checking that the account’s `charges_enabled` and `payouts_enabled` are both true. You can use the API or listen for `account.updated` events. For details on other relevant fields, check the account’s [requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements) hash. You can’t confirm the integration based on a single value because statuses can vary depending on the application and related policies.\n\n*   [charges\\_enabled](https://docs.stripe.com/api/accounts/object#account_object-charges_enabled) confirms that your full charge path including the charge and transfer works correctly and evaluates if either `card_payments` or `transfers` capabilities are active.\n*   [payouts\\_enabled](https://docs.stripe.com/api/accounts/object#account_object-payouts_enabled) evaluates whether your connected account can pay out to an external account. Depending on your risk policies, you can allow your connected account to start transacting without payouts enabled. You [must eventually enable payouts](https://docs.stripe.com/connect/manage-payout-schedule) to pay your connected accounts.\n\nYou can use the following logic as a starting point for defining a summary status to display to your connected account.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`def account_state(account)   reqs = account.requirements    if reqs.disabled_reason && reqs.disabled_reason.include?(\"rejected\")     \"rejected\"   elsif account.payouts_enabled && account.charges_enabled     if reqs.pending_verification       \"pending enablement\"     elsif !reqs.disabled_reason && !reqs.currently_due       if !reqs.eventually_due         \"complete\"       else         \"enabled\"       end     else       \"restricted\"     end   elsif !account.payouts_enabled && account.charges_enabled     \"restricted (payouts disabled)\"   elsif !account.charges_enabled && account.payouts_enabled     \"restricted (charges disabled)\"   elsif reqs.past_due     \"restricted (past due)\"   elsif reqs.pending_verification     \"pending (disabled)\"   else     \"restricted\"   end end  accounts = Stripe::Account.list(limit: 10)  accounts.each do |account|     puts \"#{account.id} has state: #{account_state(account)}\" end`\n\n### Handle verification errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHandle verification failures differently depending on your onboarding flow.\n\n#### Note\n\nYou can’t use the API to respond to Stripe risk reviews. You can enable your connected accounts to respond using embedded components, Stripe-hosted onboarding, or remediation links. You can also use the Dashboard to respond to risk reviews on behalf of your connected accounts.\n\nListen to the [account.updated](https://docs.stripe.com/api/events/types#event_types-account.updated) event. If the account contains any `currently_due` fields when the `current_deadline` arrives, the corresponding functionality is disabled and those fields are added to `past_due`.\n\n[Create a form](#create-forms-to-collect-information) with clear instructions that the account can use to correct the information. Notify the account, then [submit the corrected information](#update-the-connected-account) using the Accounts API.\n\nIf you plan to create custom flows to handle all your verification errors:\n\n*   Review the details regarding all possible [verification errors and how to handle them](https://docs.stripe.com/connect/handling-api-verification).\n*   [Test verification states](https://docs.stripe.com/connect/testing-verification).",
  "title": "Onboarding solutions for Custom accounts | Stripe Documentation",
  "description": "Choose the onboarding method for Custom accounts that suits your business.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/acceptable-verification-documents",
  "markdown": "# Acceptable verification documents by country\n\n## Learn which documents Stripe accepts for verification of identity, address, and legal entity.\n\nSee the following list of documents that Stripe accepts as proof of identity, address, and entity for each country Stripe supports.\n\n## Common requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The format must be no more than one step removed from the original document:\n    *   Document copies and scans must be in PDF format and taken directly from the original document; they can’t be processed, converted, or embedded in other files\n    *   A picture of a physical document must be the original, unprocessed picture in JPEG or PNG format\n    *   Screenshots aren’t acceptable\n*   When the back side of a document contains required information, and you submit it using the API, include an image of the back side using the `document_back` parameter\n*   Photos and scans must be in color\n*   Images must not be low-quality\n*   Identity and legal entity documents must not be expired\n*   Documents must be readable and in a valid upload file format\n*   Documents must not be cropped or missing pages with crucial information, and all borders must be visible\n*   If the country of residence differs from the country of the account, a passport is required for identity verification\n\n## Select a country to view its requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Acceptable identification documents vary by country. A passport scan for identity verification is always preferred and, in some cases, is required. When a Stripe account and an individual associated with that Stripe account (for example, Business Representative, Owner) are from different countries, Stripe only accepts a passport to verify identity.\n\nAcceptable forms of identification:\n\n*   Letërnjoftimi (National Identity Card)\n*   Passport\n*   Leje Drejtimi (Driving License)\n*   çertifikatë regjistrimi (Business registration certificate)\n\nRequired information:\n\n*   Full legal name that matches the name in your Stripe profile\n*   Date of birth (DOB) that matches what’s in your Stripe profile\n*   Photo of person (except where exclusions apply)\n\n### Support articles![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Acceptable verification documents by country | Stripe Documentation",
  "description": "Learn which documents Stripe accepts for verification of identity, address, and legal entity.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/get-started-tax-reporting",
  "markdown": "# Get started with tax reporting\n\n## Use the Stripe 1099 tax reporting product to create, modify, file, and deliver tax forms for your connected accounts.\n\nStripe provides [capabilities](https://docs.stripe.com/connect/account-capabilities#tax-reporting) and a tax reporting dashboard to help platforms meet their [tax reporting obligations](https://support.stripe.com/questions/1099-tax-reporting-and-filing-for-platforms-and-marketplaces).\n\nLog in to your Stripe account and use the [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) view in the Dashboard to create, modify, file, and deliver 1099 tax forms for your connected accounts. If you use a [team](https://docs.stripe.com/get-started/account/teams), only team members with the Tax Analyst or Administrator [user role](https://docs.stripe.com/get-started/account/teams/roles) can access all tax-related features.\n\n## Tax season 2023 checklist![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFollow this guide to help you prepare for tax season.\n\n#### Key dates\n\n*   **November 1st**: If you’re using e-delivery, Stripe begins outreach to your connected accounts.\n*   **January 5th**: Last recommended day to enable Stripe [outreach](https://docs.stripe.com/connect/platform-express-dashboard-taxes-walkthrough) to your connected accounts to automatically collect paperless delivery consent and tax information.\n*   **January 10th**: The first date you can e-file tax forms in your Stripe Dashboard.\n*   **January 18th**: Last day that Stripe _could_ send pre-filing outreach to your connected accounts\n*   **January 23rd**: Latest recommended date to e-file tax forms in your Stripe Dashboard to have forms postmarked by the IRS deadline.\n*   **January 31st**: The IRS deadline to postmark 1099 tax forms to your connected accounts.\n*   **February 15th**: The last day that identity updates will automatically sync onto 1099 tax form drafts for tax year 2023.\n\n#### Caution\n\nAction forms in the `Needs attention` state to get missing name, address, and taxpayer ID (SSN or EIN) details from your connected accounts. You need this information for filing.\n\n[](#get-ready)\n\n*   [Configure](https://docs.stripe.com/connect/get-started-tax-reporting#set-tax-form-default-settings) your platform’s tax settings for tax year 2023. You need to do this even if you previously used the Stripe 1099 tax reporting product.\n*   Start reviewing [forms in the Needs attention state](https://docs.stripe.com/connect/identify-forms-missing-information) with missing tax information.\n*   Starting in August, you can edit tax forms [in your Dashboard](https://docs.stripe.com/connect/modify-tax-forms?method=dashboard) or through [CSV](https://docs.stripe.com/connect/modify-tax-forms?method=csv).\n    *   Provide any [missing identity information](https://docs.stripe.com/connect/identify-forms-missing-information) required for filing.\n    *   (Optional) [Update form totals](https://docs.stripe.com/connect/modify-tax-forms) to reflect payment transactions outside of Stripe.\n    *   (Optional) [Export transaction logs](https://docs.stripe.com/connect/calculation-methods#export-transaction-logs) to check which Stripe transactions have contributed to a 1099 form’s total.\n*   If you’re planning to use e-delivery, enable both e-delivery and outreach from Stripe as delivery preferences in your [tax form settings](https://dashboard.stripe.com/settings/connect/tax_forms).\n\n[](#outreach)\n\n*   Publish a [support article](https://docs.stripe.com/connect/platform-express-dashboard-taxes-faqs) explaining the tax timeline and your partnership with Stripe for taxes. View the [example article](https://docs.stripe.com/connect/platform-express-dashboard-taxes-faqs).\n*   Required for e-delivery:\n    *   Use the _Missing Email Address_ filter in your 1099 dashboard or [export tax forms](https://docs.stripe.com/connect/modify-tax-forms?method=csv) as a CSV to identify missing email addresses, since Column B will be blank if the email is missing. [Update email addresses](https://docs.stripe.com/api/accounts/update#update_account-email) with the Accounts API so we can email your connected accounts.\n    *   Make sure that your [Connect branding settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding) and your [support email address](https://dashboard.stripe.com/settings/public) are up to date.\n    *   Prepare your support teams for tax season 2023. View the [example FAQs](https://docs.stripe.com/connect/platform-express-dashboard-taxes-faqs) your support team might receive from your connected accounts.\n*   Recommended for e-delivery:\n    *   Notify your connected accounts when Stripe outreach occurs. View the [example email copy](https://docs.stripe.com/connect/platform-express-dashboard-taxes-communication#email-template:-post-stripe-email).\n\n[](#review-totals)\n\n*   Stripe begins [outreach](https://docs.stripe.com/connect/platform-express-dashboard-taxes-walkthrough) to your connected accounts starting the week of November 1st if you have opted into e-delivery / outreach from Stripe. We recommend opting in by **January 5th** so we can contact all of your accounts for pre-filing confirmation by January 18th, the last possible day for automated outreach from Stripe. Note, we don’t send outreach emails to platforms’ connected accounts until _7 days_ after you enable the setting.\n*   Continue [actioning forms](https://docs.stripe.com/connect/identify-forms-missing-information) in `Needs attention` and reach out to accounts with missing information.\n*   Audit tax calculations on some 1099 tax forms.\n*   Verify your [tax form settings](https://dashboard.stripe.com/settings/connect/tax_forms) so you’re ready to file 1099 tax forms in January.\n\n[](#file)\n\n*   Input [State Tax Registration](https://docs.stripe.com/connect/tax-forms-state-requirements) or withholding numbers for all states where you plan to file.\n*   [File tax forms](https://docs.stripe.com/connect/file-tax-forms) in your Stripe Dashboard no later than January 23rd. You can begin filing forms on January 10th.\n    *   When you press ‘File’ Stripe files any forms in a ‘Ready’ or ‘Ready!’ state.\n        *   If you have forms in a ‘Needs Attention’ state and wish to file them, you need to [explicitly update the filing requirement](https://docs.stripe.com/connect/modify-tax-forms?method=csv#tax-form-status) for these forms before filing.\n*   Stripe e-delivers or postmarks tax forms for postal delivery by January 31st.\n*   After February 15, payee identity updates (name, TIN, address) stop flowing onto the 1099 tax forms that haven’t been filed yet. This doesn’t impact forms that you already filed by February 15.\n\n## Set tax form default settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo configure the settings for tax forms in your account you must log in as the account owner. If you use a team, any user that has the Administrator user role for your account can configure settings. To get started with generating your tax forms for 2023, open the [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) page of the Dashboard, and then click **Get started**.\n\n![Tax dashboard with the get started button highlighted.](https://b.stripecdn.com/docs-statics-srv/assets/tax-net-new-user-landing-experience.6ed30557253b2ce8785af2deff182a8b.png)\n\nChoose the default tax form to generate for your connected accounts, the [calculation method](https://docs.stripe.com/connect/calculation-methods) to use for your tax form totals, the type of filer for your business, and the kind of transactions you process. We recommend that you use a tax advisor to determine which options are right for your business. You can change almost all [tax form settings](https://docs.stripe.com/connect/tax-form-settings) at any time for the forms that you haven’t filed.\n\n![Select a form type screen.](https://b.stripecdn.com/docs-statics-srv/assets/tax-form-settings-step.9fdf3acbf457f95499c2bdaa81ce7c2c.png)\n\nSelect a form type\n\n![Tax calculation screen.](https://b.stripecdn.com/docs-statics-srv/assets/tax-form-settings-step1.a54d8be2498440b91e4229e8426424a6.png)\n\nSelect tax calculation\n\n![Type of filer screen](https://b.stripecdn.com/docs-statics-srv/assets/tax-form-settings-step2.dd51a20dca664351848d6b48572ef368.png)\n\nSelect type of filer\n\n![Transaction screen.](https://b.stripecdn.com/docs-statics-srv/assets/tax-form-settings-step3.5c7890ebc89925cd89092b3fc3c0db9c.png)\n\nSelect types of transactions processed\n\nNext, confirm the business information that displays as the **Payer details** on all of your tax forms. Make any necessary changes, then click **Continue**.\n\n![Business information screen.](https://b.stripecdn.com/docs-statics-srv/assets/tax-business-info-step.56acf3720225276598592dffe50c9f34.png)\n\nNext, add state registration or withholding IDs for the states you plan to file with. You can enter these at any time in the future through [tax form settings](https://docs.stripe.com/connect/tax-form-settings).\n\n![State filing screen.](https://b.stripecdn.com/docs-statics-srv/assets/tax-state-filing-step.200b96a91d14dd22795110ac6865399e.png)\n\nThe next step involves choosing your delivery preferences to meet IRS obligations around delivering 1099 forms to payees. We offer two forms of [delivery](https://docs.stripe.com/connect/deliver-tax-forms):\n\n*   _E-delivery through the Stripe Express Dashboard:_ Owners of eligible connected accounts receive an electronic copy of the 1099 form through the Stripe Express App. Stripe sends an email invite to the connected account owners to confirm their tax details, collect their consent, and provide access to the electronic copy of the form. Read more about [how e-delivery works](https://docs.stripe.com/connect/express-dashboard-taxes).\n    \n*   _Paper delivery through postal mail:_ Stripe delivers the 1099 forms to the owners of eligible connected accounts through postal mail based on the address on the tax form. If e-delivery is enabled, but the connected account hasn’t provided e-delivery consent at the time of filing, we fall back on postal delivery to meet IRS obligations.\n    \n\n![Delivery method selection screen.](https://b.stripecdn.com/docs-statics-srv/assets/tax-delivery-preferences-step.72319e394a4f5216a0e18ad0dfbf076c.png)\n\nAs a final step, you can view a summary of your tax form settings to confirm your choices. After you confirm your settings, the tax forms dashboard opens, where you can view all of your tax forms for 2023.\n\n![Summary screen.](https://b.stripecdn.com/docs-statics-srv/assets/tax-summary-step.5bdede405d7cfef3c01442f44794bd0a.png)\n\n## View and filter tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can view all of the tax forms for your connected account using the [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) dashboard. Click the appropriate tab to filter the forms displayed. To display the **State filing status**, **Federal filing status**, or **Delivery filing status** instead of **Overall filing status**, click the gear icon to the right of the column heading and select the status to display.\n\n![Tax reporting page of the Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/tax_reporting_dashboard_new.c5898c0728da3cc9b274a72c2dd13229.png)\n\nYou can apply any of the existing filters to limit the results to only those records that match the filter criteria. For example, to display only records for a specific payee, choose the Payee name filter and then enter all or part of a name to match. The records displayed include only the records for payees with Payee names that match the string you used for the filter.\n\nYou can use the following filters to display tax forms:\n\n| Filter name | Filter values |\n| --- | --- |\n| Type | Type of tax form: 1099-K, 1099-MISC, or 1099-NEC |\n| Overall filing status | Overall status of tax form: Will not file, Needs attention, Ready, Filing, Accepted, or Rejected |\n| Federal filing status | Status of the Federal tax form: Will not file, Needs attention, Ready, Filing, Accepted, or Rejected |\n| State filing status | Status of the State tax form: Will not file, Needs attention, Ready, Filing, Accepted, or Rejected |\n| Delivery status | Delivery status of the tax form: Will not deliver, Needs attention, Ready, Scheduled, Delivering, Delivered, Failed |\n| Postal delivery status | Postal delivery status of the tax form: Will not deliver, Needs attention, Ready, Scheduled, Delivering, Delivered, Failed |\n| Electronic delivery status | Electronic delivery status of the tax form: Will not deliver, Needs attention, Ready, Scheduled, Delivering, Delivered, Failed |\n| Pre-filing confirmation status | Status of Stripe’s pre-filing outreach: Not eligible, Queued, Sent |\n| Stripe merchant ID | Tax forms for the specified merchant ID |\n| Forms grouped with | Tax forms grouped with the specified tax form ID |\n| Payee name | Tax forms for the payee |\n| Payee state | Tax forms for the payee’s state |\n| Needs attention | Needs attention status: Any reason, Address, Business name, TIN - Any reason, TIN - Missing, TIN - Mismatch |\n| YTD volume | Tax forms with the specified year-to-date volume |\n| Correction | Correction status: Correction, Original |\n| Threshold | State or federal threshold status: Meets federal threshold, Meets state threshold, Meets any threshold, Meets state and federal threshold, Meets neither state nor federal thresholds |\n| Email address | Tax forms with the specified email address |\n| Missing email address | Filter for tax forms that either have or don’t have email addresses: True, False |\n| Delta values | Filter for tax forms with delta values: With delta values, Without delta values |\n| Standalone forms | Filter for standalone tax forms: All standalone forms, No standalone forms |\n| E-delivery consent | Status of e-delivery consent collection: Provided, Not provided, Revoked |\n| Grouped TIN | Tax forms that have grouped TINs: Grouped forms only, No grouped forms |\n\n## Understand tax form status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe automatically calculates the overall status for each tax form, and allows you to apply filing requirements for each form as appropriate. The [filing requirement](https://docs.stripe.com/connect/modify-tax-forms?method=csv#tax-form-status) appears as a visual indicator in the tax form status. You can view the status for both State and Federal tax forms.\n\n| Status | Description | Next steps |\n| --- | --- | --- |\n| Accepted | The IRS or state accepted the tax form. | No further action required. |\n| Filing | The tax form has been queued for transmission to the IRS or state, and will be sent shortly. | No further action required. |\n| Filed | The tax form was sent to the IRS or state, but hasn’t been accepted yet. | No further action required. |\n| Exported | The tax form was included in a state filing export, which you can find on the [bulk jobs listing](https://dashboard.stripe.com/connect/taxes/forms/?showJobs=true). | You must download the export and manually submit these to the appropriate state reporting agency. |\n| Needs attention | The tax form is above the IRS or state threshold, but requires additional information before filing. | Most tax forms require additional information before filing. You can [update the form](https://docs.stripe.com/connect/modify-tax-forms) or update the connected account. If you determine that you shouldn’t file the tax form, or you want to file with incomplete information, you can [update the filing requirement](https://docs.stripe.com/connect/modify-tax-forms). |\n| Ready | The tax form is above the IRS or state threshold and ready to file. | File most tax forms. If you determine that you shouldn’t file the tax form, you can [update the filing requirement](https://docs.stripe.com/connect/modify-tax-forms). |\n| Rejected | The IRS or state rejected the tax form. | Review the IRS [information return penalties](https://www.irs.gov/government-entities/federal-state-local-governments/increase-in-information-return-penalties), and your connected accounts’ tax forms for incorrect names or tax identification numbers. You have 60 days from the initial submission to file corrected tax forms to the IRS. Learn more about [handling rejections](https://docs.stripe.com/connect/correct-tax-forms#correction-reasons). |\n| Will not file | The tax form is below the IRS or state threshold, or was overridden and won’t be filed. | Most tax forms don’t require further action. If you determine that you should file the tax form, (for example, if the connected account has withholding data), you can [update the form](https://docs.stripe.com/connect/modify-tax-forms). |\n\n## Understand tax form TIN status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPlatforms need valid TINs on the tax forms to ensure that the IRS and/or state accepts the forms, and Stripe displays the status of the TIN in the Tax Form Editor as follows:\n\n| Status | Description | Next steps |\n| --- | --- | --- |\n| Verified | Name & TIN are verified | No further action required. |\n| Mismatch | Name + TIN didn’t match the records in IRS and need to be resolved before filing | Follow up with the account to get a name + TIN that matches IRS records. If you still want to file the form in this state, change the [Filing requirement](https://docs.stripe.com/connect/modify-tax-forms?method=csv#tax-form-status) to **Required even if incomplete**. |\n| Overwritten | Platform has overwritten the Name and/or TIN | Verify the name + TIN directly with the IRS and/or use a third party TIN verification tool. You can still file this form in this status. |\n| Provided | Name and TIN were inherited from Connect Settings, but Stripe didn’t verify. | Verify the name + TIN directly with the IRS and/or use a third party TIN verification tool. You can still file this form in this status. |\n| Missing | Name or TIN not provided and needs to be resolved before filing | Follow up with the account to get a name + TIN that matches IRS records. If you still want to file the form in this state, change the Filing requirement to **Required even if incomplete**. |\n\n## Understand tax form delivery status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe sends your tax forms using the delivery method you set for your account, either mail or e-delivery. The [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) page shows the delivery status for your tax forms. The following table describes each possible delivery status.\n\n| Status | Description | Next steps |\n| --- | --- | --- |\n| Delivered | The forms were successfully delivered. | No further action required. |\n| Delivering | The forms were sent, but haven’t been received. | No further action required. |\n| Failed | The forms were not successfully delivered. | No further action required. |\n| Needs attention | The forms are ready to send, but require additional information. | Most tax forms require additional information before delivering. You can update the form or update the user information for the connected account. |\n| Ready | These forms are sent when the forms are filed. | No further action required. |\n| Scheduled | The forms are scheduled for delivery. | No further action required. |\n| Will not deliver | The forms won’t be delivered. | No further action required. |\n\n## Updating tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can [Update 1099 tax forms](https://docs.stripe.com/connect/modify-tax-forms) for the current year and choose whether or not to include tax identification numbers (TIN).",
  "title": "Get started with tax reporting | Stripe Documentation",
  "description": "Use the Stripe 1099 tax reporting product to create, modify, file, and deliver tax forms for your connected accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/platform-express-dashboard-taxes",
  "markdown": "# 1099 tax support and communication guide\n\n## Learn how to use Stripe Express to manage 1099 Tax forms for connected accounts.\n\n## How to use this guide![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs tax season approaches, Stripe created this guide to help you understand how you can work with your connected accounts to collect verified tax information for the upcoming tax season through Stripe Express. The guide answers many commonly asked questions, and includes example communications and FAQs that you can customize for your platform. We designed our communication proposals and FAQs as recommendations, and we encourage you to adjust for the needs of your platform. This guide covers the following topics:\n\n1.  [Implementation and timeline](https://docs.stripe.com/connect/platform-express-dashboard-taxes-implementation) - provides general implementation guidelines and expectations for using Stripe Express tax forms.\n    \n2.  [Product walkthrough](https://docs.stripe.com/connect/platform-express-dashboard-taxes-walkthrough) - highlights key aspects of Stripe Express so that you and your support team have a better understanding of the user experience.\n    \n3.  [Communications recommendations](https://docs.stripe.com/connect/platform-express-dashboard-taxes-communication) - provides general templates that you can use to help prepare your connected accounts for communications from Stripe during tax season.\n    \n4.  [Support resources](https://docs.stripe.com/connect/platform-express-dashboard-taxes-faqs) - includes a detailed guide on how to resolve the top questions from connected accounts during 1099 tax season and example FAQs to use for your own support resources.",
  "title": "1099 tax support and communication guide | Stripe Documentation",
  "description": "Learn how to use Stripe Express to manage 1099 Tax forms for connected accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/calculation-methods",
  "markdown": "# Choose a calculation method | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the calculation methods for reporting charges and payouts.\n\nThe Stripe 1099 tax reporting product allows platforms to select a calculation method, depending on the type of 1099 form they must file. While these calculation methods reflect the most common reporting scenarios, you can import CSV files and edit the amount on each 1099 form to better match the requirements.\n\n#### Note\n\nStripe recommends that you consult a tax advisor to determine your tax filing and reporting requirements.\n\n| Available calculation method | 1099-K | 1099-MISC | 1099-NEC |\n| --- | --- | --- | --- |\n| Payments including fees | Yes | Yes | Yes |\n| Payments excluding fees | Yes | Yes | Yes |\n| Payouts only |     | Yes | Yes |\n\n## Payments including fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis payment calculation method includes all charges and transfers _including_ any fees related to each transaction. Such fees might be:\n\n*   Stripe processing and foreign currency conversion fees\n*   Platform fees\n\nFor Form 1099-K, the IRS requires reporting [gross reportable amounts](https://www.irs.gov/instructions/i1099k#idm140262090779520) without any adjustments. It’s the taxpayer’s responsibility to determine their taxable income by taking into account their business expenses and deductions.\n\nDepending on your business, you may determine this payment calculation method is also appropriate for the amounts on their Forms 1099-MISC or 1099-NEC.\n\n#### Note\n\nRefunded charges aren’t deducted when using this calculation method.\n\n### Example 1![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOn December 31, 2020, a customer buys flowers for 100 USD from an online flower shop. The flower shop is a connected account and the [destination charge](https://docs.stripe.com/connect/destination-charges#flow-of-funds-app-fee) uses the platform’s API key. The charge authorization and capture time are the same since partial authorization wasn’t specified. The platform retains a 2 USD platform fee and a 3.20 USD Stripe fee nets directly out of the connected account’s charge.\n\nOn January 2, 2021, the issuing bank settles the money to Stripe. On January 7, 2021, a [payout](https://docs.stripe.com/payouts \"payout\") occurs from the connected account’s Stripe balance to their bank account, and includes the proceeds from this sale. With this method, the platform can report 100 USD on their 1099 form for 2021, and no amount for 2020.\n\n| Description | Amount |\n| --- | --- |\n| Customer charged | 100 USD |\n| Increase in connected account’s Stripe balance | 94.80 USD |\n| Increase in platform account’s Stripe balance | 2 USD |\n| **Amount reported with this method** | 100 USD |\n\nAssume the same conditions, but a [direct charge](https://docs.stripe.com/connect/direct-charges#flow-of-funds-with-fees) uses the connected account’s API key. With this method, the platform can report the same 100 USD on their 1099 form for 2021.\n\n### Example 2![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAssume the same conditions as Example 1, but the connected account issues a refund the same day as the charge because they’re unable to fulfill the order. Ignore any potential Stripe fees for refunds.\n\n| Description | Amount |\n| --- | --- |\n| Customer charged | 100 USD |\n| Customer refunded | 100 USD |\n| Net change in connected account’s Stripe balance | 0 USD |\n| Net change in platform account’s Stripe balance | 0 USD |\n| **Amount reported with this method** | 100 USD |\n\nWith this method, the platform can report the same 100 USD on their 1099 form for 2021, and no amount for 2020.\n\n## Payments excluding fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis payment calculation method includes all charges and transfers _excluding_ any fees related to each transaction. Such fees might be:\n\n*   Stripe processing and foreign currency conversion fees\n*   Platform fees\n\nThis method is useful if the platform wants to remove their fee from the amount reported for the connected account.\n\nFor example, in the [destination charge](https://docs.stripe.com/connect/destination-charges#flow-of-funds-app-fee) flow, the application fee is attributed to the connected account, but a platform might pass the application fee to the end customer to pay the platform. Those funds aren’t necessarily attributable or even known to the connected account. While platforms acknowledge that gross amounts should be reported to their connected accounts on the Form 1099-K, they might think the gross amount to report should be payments excluding fees.\n\nFor Form 1099-K, the IRS requires reporting gross amounts for all reportable transactions, without any adjustments for refunds, fees, credits, cash equivalents, or discounts. Because platforms use [Connect](https://docs.stripe.com/connect \"Connect\") differently, we recommend working with a tax advisor to determine if this method is right for you based on the 1099 form you want to file.\n\nDepending on your business, you may determine this payment calculation method is also appropriate for the amounts on their Forms 1099-MISC or 1099-NEC.\n\n#### Note\n\nStripe doesn’t deduct refunded charges when using this calculation method.\n\n### Example ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn December 31, 2020, a customer buys flowers for 100 USD from an online flower shop. The flower shop is a connected account and the [destination charge](https://docs.stripe.com/connect/destination-charges#flow-of-funds-app-fee) uses the platform’s API key. The destination charge specifies an amount of 100 USD and a `transfer_data[amount]` of 94.80 USD. The charge authorization and capture time are the same since partial authorization wasn’t specified. The platform retains a 2 USD platform fee and a 3.20 USD Stripe fee nets directly out of the connected account’s charge.\n\nOn January 2, 2021, the issuing bank settles the money to Stripe. On January 7, 2021, a payout occurs from the connected account’s Stripe balance to their bank account, and includes the proceeds from this sale. With this method, the platform can report 94.80 USD on their 1099 form for 2021, and no amount for 2020.\n\n| Description | Amount |\n| --- | --- |\n| Customer charged | 100 USD |\n| Increase in connected account’s Stripe balance | 94.80 USD |\n| Increase in platform account’s Stripe balance | 2 USD |\n| **Amount reported with this method** | 94.80 USD |\n\nAssume the same conditions, but the [destination charge](https://docs.stripe.com/connect/destination-charges#flow-of-funds-app-fee) specifies an amount of 100 USD and an `application_fee_amount` of 5.20 USD. The Stripe fee is deducted on the platform’s account from the 5.20 USD. With this method, the platform can report the same 94.80 USD on their 1099 form for 2021.\n\nAssume the same conditions, but a [direct charge](https://docs.stripe.com/connect/direct-charges#flow-of-funds-with-fees) uses the connected account’s API key. The direct charge specifies an amount of 100 USD and an `application_fee_amount` of 5.20 USD. With this method, the platform can report the same 94.80 USD on their 1099 form for 2021.\n\n## Payouts only![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe payouts only method lets you report only the amount that was paid out to the connected account’s bank account, minus any payout reversals. The amount may also include payments that aren’t related to a specific charge transaction. This calculation method takes into consideration `payouts` and not `charges`.\n\nBecause platforms use Connect differently, we recommend working with a tax advisor to determine if this method is right for you based on the 1099 form you want to file.\n\n### Example ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn December 31, 2020, a customer buys flowers for 100 USD from an online flower shop. The flower shop is a connected account and the [destination charge](https://docs.stripe.com/connect/destination-charges#flow-of-funds-app-fee) uses the platform’s API key. The charge authorization and capture time are the same since partial authorization wasn’t specified. The platform retains a 2 USD platform fee and a 3.20 USD Stripe fee nets directly out of the connected account’s charge.\n\nOn January 2, 2021, the issuing bank settles the money to Stripe. On January 7, 2021, a payout of 94.80 USD occurs from the connected account’s Stripe balance to their bank account, and includes the proceeds from this sale. With this method, the platform can report 94.80 USD on their 1099 form for 2021, and no amount for 2020.\n\n| Description | Amount |\n| --- | --- |\n| Customer charged | 100 USD |\n| Increase in connected account’s Stripe balance | 94.80 USD |\n| Increase in platform account’s Stripe balance | 2 USD |\n| **Amount reported with this method (2020)** | 0 USD |\n| **Amount reported with this method (2021)** | 94.80 USD |\n\nAssume the same conditions, but a [direct charge](https://docs.stripe.com/connect/direct-charges#flow-of-funds-with-fees) uses the connected account’s API key. On January 7, 2021, a payout of 94.80 USD occurs from the connected account’s Stripe balance to their bank account, and includes the proceeds from this sale. With this method, the platform can report the same 94.80 USD on their 1099 form for 2021.\n\n## Additional calculation method topics![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following sections discuss calculation method topics that might be applicable to your platform.\n\n### Transactions included in calculations for the account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe inclusion of transactions in the Form 1099 calculations for the forms you will issue depends on the connected account’s `controller.fees.payer` property.\n\n*   Transactions on accounts where `controller.fees.payer` = `application_custom` or `application_express` are included in the calculations.\n*   Transactions on accounts where `controller.fees.payer` = `application` could be included if the application fees for those transactions are paid to the platform. Otherwise, the transactions could be included in a Stripe-issued 1099.\n*   Transactions on accounts where `controller.fees.payer` = `account` won’t be included, but instead could be included in a Stripe-issued 1099 to the account.\n\n### Timing and recognition of transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe uses the [`available_on` date](https://docs.stripe.com/api/balance_transactions/object#balance_transaction_object-available_on) of the balance transaction associated with the payment to determine which tax year the transaction belongs to. The `available_on` date represents the date the funds become available in the Stripe account. We believe this approach best matches the IRS’s instructions.\n\n### Card not present payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIRS Form 1099-K box “1b” reports the volume of “card not present” payments. Stripe classifies a payment as “card present” or “card not present” based on the [PaymentMethod `type`](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type) associated with that payment. The following PaymentMethod `type` values are “card present”. All others are “card not present”:\n\n1.  `card_present`\n2.  `interac_present`\n\n### Tax form totals![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe recommend that platforms audit Stripe transactions that have contributed to a form’s totals by [exporting the transaction log](https://docs.stripe.com/connect/calculation-methods#export-transaction-logs).\n\nAccount transactions performed outside of Stripe aren’t included in form totals. To include non-Stripe transactions, platforms must manually adjust the form box amounts before filing.\n\nTransactions created with the [Transfers API](https://docs.stripe.com/api/transfers) to credit connected accounts (for example, handling dispute reversals and refund failures) are included in 1099-K form totals. Debits from connected accounts are excluded. To remove these credit transfers from the form, platforms must manually adjust the form box amounts before filing.\n\n### Separate charges and transfers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe derives the reportable amount for a separate charge and transfer from the transfer, not the charge.\n\nAdditionally, you must use the [`source_transaction` parameter](https://docs.stripe.com/api/transfers/object#transfer_object-source_transaction) to associate a charge with a transfer from your platform to a connected account—Stripe classifies any transfers without this parameter as “card not present” transactions.\n\nIf you initially created a separate charge and transfer with a link from the transfer to the charge and later updated the `Charge` object to include the transfer, we treat it like a destination charge in calculations. The gross amount on your draft form might change if you’ve opted to include fees, as we’ll now include the charge in our considerations.\n\n### Foreign exchange rate conversions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe’s 1099 calculation methods convert non-USD transactions to USD using the market exchange rate from the day the transaction is created. This method might yield a different value than the Stripe Dashboard shows because we compute that value using an intra-day exchange rate adjusted for Stripe’s foreign exchange fee.\n\n### Cancelled asynchronous payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf a user cancels an asynchronous payment (for example, ACH debit) that would’ve otherwise been successful before the payment completes, that payment might still be included in the results of the “payments including fees” and “payments excluding fees” methods.\n\n## Export transaction logs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor tax year 2022 and later, you can use the [Stripe Dashboard](https://dashboard.stripe.com/connect/taxes/forms) to export the transaction log of each 1099 form. A transaction log lists the Stripe transactions that have contributed to a form’s total. This log allows you to audit transaction discrepancies and answer questions from your connected accounts about which transactions Stripe includes in their tax forms.\n\nAfter you export the transaction log, the sum of its **Calculation Amount** column reflects the form total that you see on the 1099. For each transaction, we show the applicable **merchant\\_id**, **balance\\_transaction\\_id**, **charge\\_id**, and **transfer\\_id** along with the calculation amount relevant to that transaction. The calculation amount is dependent on the type of calculation method you choose. The 1099-K form transaction logs list **card\\_not\\_present\\_volume** and **transaction\\_count** to match the values on the form.\n\n#### Note\n\nTransaction logs only contain Stripe transactions. [Manual updates](https://docs.stripe.com/connect/modify-tax-forms) through CSV imports or the Dashboard’s Tax form editor won’t be included in the transaction log.\n\nTo export the transaction log of a tax form:\n\n1.  Navigate to the [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) page in the Dashboard.\n2.  Select the checkbox next to the tax form.\n3.  Click the overflow menu () at the top-right of the tax form and select **Export transaction log**.\n4.  Specify the date range and rows that you want to export. Use the default export settings to capture all the details of the entire year. The transaction log file downloads in your browser. Keep the email notification option selected if you want to receive an email containing a link to download your transaction log.\n\nThe transaction log file downloads after Stripe finishes the export process. If you exported with the email notification option selected, Stripe also sends you an email from `notification@stripe.com` with a link to download your transaction log.",
  "title": "Choose a calculation method | Stripe Documentation",
  "description": "Learn about the calculation methods for reporting charges and payouts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/direct-charges-multiple-accounts",
  "markdown": "# Share payment methods across multiple accounts for direct charges\n\n## Save payment details on your platform and clone them to connected accounts for direct charges.\n\nIf you need to create direct charges on multiple connected accounts using the same saved payment information, use this approach. Otherwise, use [our guide for creating direct charges](https://docs.stripe.com/connect/direct-charges).\n\n## Save payment details on your platform ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayment details need to be set up for future use and saved on your platform account when provided by your customer. Setup is only required one time per payment method.\n\n### Create a customer on your platform ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn your platform account, use the [Customers API](https://docs.stripe.com/api/customers) to create a customer to represent the person paying.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d name=\"Jenny Rosen\"`\n\n### Create a SetupIntent on your platform ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you’re ready to collect payment details, use the [Setup Intents API](https://docs.stripe.com/api/setup_intents) to create a [SetupIntent](https://docs.stripe.com/api/setup_intents \"Setup Intents API\") on your platform and associate it with the customer you created in the previous step.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}    `\n\nIf your platform is in a different country than your connected accounts, the set up performed on your platform might not be sufficient. For example, if your platform is in the US, the set up process might not trigger authentication required for direct charges in countries subject to [SCA enforcement](https://docs.stripe.com/strong-customer-authentication/sca-enforcement). In cases like this, you might need to use [on\\_behalf\\_of](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-on_behalf_of) to specify a connected account in another country to perform the proper setup.\n\n#### Note\n\nIf you want to take a payment on your platform account (not a direct charge) at the same time you set up the payment method for future use, you can create a PaymentIntent with [setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage) instead.\n\n### Confirm the SetupIntent ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSend the SetupIntent’s [client\\_secret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret) to your front end and use our client-side SDKs or UI components to collect payment details and confirm the SetupIntent. For example, you can [use the Payment Element to collect payment information and confirm the SetupIntent](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#collect-payment-details).\n\nConfirming on the client allows the customer to go through any flows required to set up their payment details for future use, like authentication with [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\").\n\nA successful confirmation creates a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") and attaches it to the customer for future use.\n\n## Clone and create direct charges on connected accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you have a PaymentMethod set up for future use on your platform, clone it to a connected account and create a direct charge.\n\n### Clone the PaymentMethod to the connected account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the [Payment Methods API](https://docs.stripe.com/api/payment_methods) to clone the PaymentMethod saved on your platform account to the connected account.\n\n#### Note\n\nOnly some types of PaymentMethods can be cloned. Cloning is currently supported for PaymentMethods which have `type` set to either `card` or `us_bank_account`.\n\n`curl https://api.stripe.com/v1/payment_methods \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d customer=  {{PLATFORM_CUSTOMER_ID}}   \\  -d payment_method=  {{PAYMENT_METHOD_ID}}    `\n\nThe cloned PaymentMethod has a new ID, and is an independent object. It isn’t linked to, or kept in sync with, the PaymentMethod on your platform. The cloned PaymentMethod inherits the setup performed on your platform account. You don’t need to set it up for future use again on the connected account.\n\n### Create and confirm a PaymentIntent on the connected account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNow use the [Payment Intents API](https://docs.stripe.com/api/payment_intents) to create and confirm a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") on the connected account with the cloned PaymentMethod to create a direct charge:\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d payment_method=  {{PAYMENT_METHOD_ID}}   \\  -d currency=USD \\  -d amount=1099 \\  -d off_session=true \\  -d confirm=true`\n\nCreating a charge with the cloned PaymentMethod consumes it, because it’s not attached to a customer. You can’t use a consumed PaymentMethod again, but the original PaymentMethod on your platform remains unaffected and you can still clone and reuse it for future charges.\n\n#### Note\n\nIf you want to use the cloned PaymentMethod for recurring direct charges on a connected account, don’t create PaymentIntents directly. Instead, create a customer on the connected account, attach the cloned PaymentMethod to it to enable reuse, and create a [Subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") for the recurring payments.\n\n## Handle customer and payment updates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou only need to update the customer and PaymentMethod on your platform account. The PaymentMethod will be cloned for each direct charge, ensuring you’re always using the newest version. The customer only exists on your platform account, so there are no customer details to synchronize across multiple accounts.",
  "title": "Share payment methods across multiple accounts for direct charges | Stripe Documentation",
  "description": "Save payment details on your platform and clone them to connected accounts for direct charges.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/cloning-customers-across-accounts",
  "markdown": "# Clone customers across accounts | Stripe DocumentationThe Stripe Docs logo\n\nWith the token generated in the previous step, [attach this token to a customer](https://docs.stripe.com/api#create_customer) on the connected account.\n\n#### Caution\n\nCharges that are made on the cloned customer aren’t reflected on the original customer. This feature is intended for multiple connected accounts that need to charge the same user.\n\n#### Caution\n\nIf your platform uses the [Payment Methods API](https://docs.stripe.com/payments/payment-methods), you must pass the payment method ID as the `payment_method` parameter instead of passing the `source` parameter.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d source=  {{TOKEN_ID}}    `\n\nThen, use the customer ID (for example, `cus_knMsLEgYMmoour`) and the payment method ID (for example, `card_VLt5MohQBvvbyA`) returned by the `customers.create` call to charge the customer.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d amount=999 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method=  {{PAYMENT_METHOD_ID}}    `",
  "title": "Clone customers across accounts | Stripe Documentation",
  "description": "With Connect, you can clone your customers' payment information across multiple connected accounts for reuse.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/onboarding",
  "markdown": "# Choose your onboarding configuration | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the different options for onboarding your connected accounts.\n\nStripe offers several different onboarding options:\n\n*   **Stripe-hosted onboarding**: Your connected accounts go through the onboarding flow in a Stripe-hosted web form.\n*   **Embedded onboarding**: You embed the Account onboarding component directly in your application and your connected accounts go through the onboarding flow without leaving your application.\n*   **API onboarding**: You use Stripe’s APIs to build your own customized onboarding UI.\n\nChoose the onboarding option that best fits your business. Stripe recommends using Stripe-hosted onboarding or Embedded onboarding. These options automatically update to handle changing requirements when they apply to a connected account.\n\n|     | [**STRIPE-HOSTED ONBOARDING**](https://docs.stripe.com/connect/hosted-onboarding) | [**EMBEDDED ONBOARDING**](https://docs.stripe.com/connect/embedded-onboarding) | [**API ONBOARDING**](https://docs.stripe.com/connect/api-onboarding) |\n| --- | --- | --- | --- |\n| **INTEGRATION EFFORT** | Low coding | More coding | Most coding |\n| **CUSTOMIZATION** | Stripe-branded with limited platform branding | [Highly themeable](https://docs.stripe.com/connect/customize-connect-embedded-components) with limited Stripe branding | Full control over your own UI |\n| **AUTOMATIC UPDATES FOR NEW COMPLIANCE REQUIREMENTS** | Immediate | Immediate | Requires integration changes |\n| **SUPPORT NEW COUNTRIES WITHOUT INTEGRATION CHANGES** |     |     |     |\n| **FLOW LOGIC** | Limited control | Limited control | Full control |\n| **IDEAL FOR** | Platforms that want Stripe to handle onboarding | Platforms that want a branded onboarding flow within their application | Platforms that require full control of the onboarding flow and have the resources to build and maintain it |\n\n## Stripe-hosted onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe-hosted onboarding is a web form hosted by Stripe with your brand’s name, color, and icon. Stripe-hosted onboarding uses the [Accounts API](https://docs.stripe.com/api/accounts) to read the requirements and generate an onboarding form with robust data validation and is localized for all Stripe-supported countries.\n\nUse Stripe-hosted onboarding if you want Stripe to handle onboarding with little effort from your platform.\n\n[Learn more about Stripe-hosted onboarding](https://docs.stripe.com/connect/hosted-onboarding)\n\n## Embedded onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEmbedded onboarding is a highly themeable onboarding UI with limited Stripe branding. Your platform embeds the [Account onboarding component](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding) in your application, and your connected accounts interact with the embedded component without ever leaving your application. Embedded onboarding uses the [Accounts API](https://docs.stripe.com/api/accounts) to read the requirements and generate an onboarding form with robust data validation and is localized for all Stripe-supported countries.\n\nWith embedded onboarding, you get a customized onboarding flow without the complexity and maintenance associated with updating your onboarding integration as compliance requirements change.\n\n[Learn more about Embedded onboarding](https://docs.stripe.com/connect/embedded-onboarding)\n\n## API onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou use the [Accounts API](https://docs.stripe.com/api/accounts) to build an onboarding flow and handle identity verification, localization, and error handling for each country your connected accounts onboard in. Stripe can be completely invisible to the account holder. Your platform is responsible for all interactions with your connected accounts and for collecting all the information needed to verify each account. Verification requirements are updated as laws and regulations change around the world. You must plan on reviewing and updating onboarding requirements at least every six months.\n\nStripe doesn’t recommend this option unless you’re fully committed to the operational complexity required to build and maintain an API onboarding flow. For a customized onboarding flow, Stripe strongly recommends embedded onboarding.\n\n[Learn more about API onboarding](https://docs.stripe.com/connect/api-onboarding)",
  "title": "Choose your onboarding configuration | Stripe Documentation",
  "description": "Learn about the different options for onboarding your connected accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/embedded-risk",
  "markdown": "# Embedded Stripe Managed Risk | Stripe DocumentationThe Stripe Docs logo\n\n## Embed Stripe risk management features into your own website.\n\nWith [Stripe Managed Risk](https://docs.stripe.com/connect/risk-management/managed-risk), we provide an end-to-end business risk management solution and your platform isn’t liable for your connected accounts’ negative balances. For connected accounts without access to a Stripe-hosted dashboard, Stripe Managed Risk requires that your website includes the following embedded components:\n\n*   Account onboarding\n*   Account management\n*   Notification banner\n\nThrough those embedded components, Stripe provides:\n\n*   Ongoing monitoring and detection of connected accounts’ credit, fraud, and supportability risk\n*   Risk interventions to ensure business supportability and prevent losses\n*   Co-branded emails and embedded notifications to inform businesses of interventions\n*   Embedded forms to respond to and remediate interventions\n*   Stripe risk operations to review merchant information and make risk decisions\n*   Stripe liability for connected account negative balances\n\n## Risk interventions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith Stripe Managed Risk, Stripe takes the following actions throughout a connected account’s operations:\n\n*   Verifies the information collected during onboarding\n*   Evaluates ongoing fraud risk\n*   Monitors compliance\n\nWhen Stripe detects elevated risk or non-compliance, we raise a risk review or apply a risk intervention, which is an action taken to mitigate losses, such as:\n\n*   Pausing payouts or charges\n*   Holding reserves\n*   Prohibiting the account from using payment processing services\n\nWhile some high-priority interventions have consequences that take effect immediately, most interventions notify connected accounts with a deadline to respond before their business is disrupted. Connected accounts are responsible for promptly reviewing and responding to interventions.\n\n## Emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen Stripe raises a risk intervention, we email the connected account to notify them of the issue. The email provides high-level guidance on:\n\n*   What the business must do to resolve the issue\n*   By when the business must address the issue\n*   Consequences to the business if no action is taken\n\nRisk intervention emails might include links to more information about a particular topic, such as restricted business lists or how card brand monitoring programs work. Emails might also include links to details about activity on the connected account, like disputed payments or reserve balances.\n\nEmails sent to fully embedded connected accounts include:\n\n*   Co-branding\n*   A primary button that takes users to the embedded notification banner (as configured in your Connect [Emails](https://dashboard.stripe.com/settings/connect/emails))\n*   Links leading to the co-branded support site (see Support) and your embedded components\n\nThe following example shows a fully embedded risk intervention email:\n\n![Sample risk intervention email from the Furever demo.](https://b.stripecdn.com/docs-statics-srv/assets/embedded-managed-risk-email.0084c37ff7da0310d58aabebd565d2e5.png)\n\nIn addition to notifying connected accounts about risk interventions through email, Stripe also renders alerts via the [notification banner component](https://docs.stripe.com/connect/supported-embedded-components/notification-banner). The notification banner only appears when there are active notifications.\n\nThe notification banner provides high level guidance on:\n\n*   What the business must do to resolve the issue\n*   By when the business must address the issue\n*   Consequences to the business if no action is taken\n\n![Sample embedded risk notification banner from the Furever demo.](https://b.stripecdn.com/docs-statics-srv/assets/embedded-managed-risk-notif.c24e386e68a8a56ded5eefb122049842.png)\n\nIn the example above, the banner shows a single notification requiring action within two days to continue taking payments and receiving payouts. The banner’s headline states whether the intervention affects payments, payouts, or both.\n\nThe banner can also have multiple notifications to help connected accounts quickly address all open issues.\n\n![Sample of multiple embedded risk notifications in the banner.](https://b.stripecdn.com/docs-statics-srv/assets/embedded-managed-risk-notif-multiple.9c9218df9607342367840d9d35656cab.png)\n\nMultiple notifications in the embedded notification banner\n\nThe notification’s due date indicator shows how much time is remaining and becomes red to indicate overdue requirements that the connected account must address urgently to avoid consequences.\n\n![Sample past due embedded risk notification.](https://b.stripecdn.com/docs-statics-srv/assets/embedded-managed-risk-notif-pastdue.98fa5f8c10d84861178fbbb51392d8be.png)\n\nNotification for a past due risk intervention\n\nAfter the connected account responds, the notification updates to indicate that no action is required.\n\n![Sample embedded risk in-review notification.](https://b.stripecdn.com/docs-statics-srv/assets/embedded-managed-risk-notif-inreview.7d990f036474fc4d0a630867e202ee13.png)\n\nNotification for an in-review risk intervention\n\nWhen all notifications are in review the banner automatically collapses and can be expanded to see more details.\n\n![embedded-managed-risk-notif-collapse](https://b.stripecdn.com/docs-statics-srv/assets/embedded-managed-risk-notif-collapse.99b06a09be12ecd64d30c8116b930f3c.png)\n\nCollapsed notification banner\n\nThe banner informs your connected account when Stripe suspends their operation and provides a means for contacting support to appeal.\n\n![embedded-managed-risk-notif-reject](https://b.stripecdn.com/docs-statics-srv/assets/embedded-managed-risk-notif-reject.94843e428028f640d3ea79f8bac8822c.png)\n\nNotification of unsupportable business\n\n## Responding to interventions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNotifications in the [notification banner](https://docs.stripe.com/connect/supported-embedded-components/notification-banner) include a button that the account user can click to respond directly in a modal window. In the following example, the notification prompts the user to complete an identity verification.\n\n![embedded-managed-risk-remediation-ID](https://b.stripecdn.com/docs-statics-srv/assets/embedded-managed-risk-remediation-ID.e518cff147ff3ef2d8c7fa3b6d7455f5.png)\n\nEmbedded identity verification\n\nConnected accounts must authenticate with Stripe to resolve risk interventions in the modal window.\n\nSome interventions might request additional information about the business or its operations, which the user can provide and submit directly from within the modal, as shown in the following example.\n\n![embedded-managed-risk-remediation-form](https://b.stripecdn.com/docs-statics-srv/assets/embedded-managed-risk-remediation-form.121ec16bc88310db4db00d5ca5ef2dcb.png)\n\nEmbedded form to respond to risk intervention\n\nMost intervention emails include a button directing users to the notification banner where they can respond directly. In rare cases, the email might direct the user to respond by replying to the email.\n\n## Support for risk issues![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf a connected account needs help with a risk issue, they can:\n\n*   Contact Stripe’s risk specialist team using the **Contact support** link at the bottom of the response modal.\n*   Reply to any risk email to create a support request.\n\nThe forms provided through the intervention notifications are the fastest resolution for risk issues because they minimize the back-and-forth nature of email communication.",
  "title": "Embedded Stripe Managed Risk | Stripe Documentation",
  "description": "Embed Stripe risk management features into your own website.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/embedded-comms",
  "markdown": "# Email communications in embedded Connect integrations\n\n## Customize Stripe notifications to your connected accounts in a fully embedded integration.\n\nIn an embedded Connect integration, when connected accounts must review information or take action, Stripe sends email communications directly to them. Those emails direct your connected accounts to embedded components on your website to review information or take required action. You must provide Stripe with the URLs for those components so we can include them in the emails.\n\nYou can customize the messages that Stripe sends to match your platform brand, and you can view an account’s Stripe email history on the account’s details page.\n\n## Communications that Stripe sends to your connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe send the following emails to your connected accounts:\n\n*   **Account emails** verify an account’s information, such as additions or changes to an email address, phone number, or bank account.\n*   **Compliance emails** notify accounts to provide required information. Stripe often needs to collect further information to maintain compliance with our financial partners.\n*   **Risk emails** notify accounts when they are under a risk review. These emails often provide instructions on how to submit information to resolve a risk action; for example, to remove a pause on payouts.\n*   **Tax emails** (only when Stripe collects Stripe fees directly from connected accounts) notify users when their tax invoices or 1099s are ready to download.\n\nIf you want to send any other payments-related emails to your connected accounts, you must send them yourself. For example, to send emails for new disputes, [listen for](https://docs.stripe.com/webhooks) the `charge.dispute.created` event on a connected account. When that event occurs, use [the Disputes API](https://docs.stripe.com/api/disputes) to get the details and email them to the account.\n\nYou must [update your Connect settings with the URLs](https://dashboard.stripe.com/settings/connect/site-links) of your payments and account workflows so Stripe’s email communications can include links for your accounts to respond.\n\n## Site links to your website components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEmails sent by Stripe that contain a call to action include a link to perform that action. For example, if we send an email directing a connected account to respond to a risk notification, it must include a link to the page where you embedded your Notification banner component.\n\nBefore you can create a live mode Account Session, you must provide the URLs where you have integrated the embedded components into your website. Configure the sending email domain and embedded component URLs in the **Site links** section of [your platform’s Connect settings](https://dashboard.stripe.com/settings/connect/embedded_ui).\n\n#### Note\n\nTest mode environments use the same URLs as live mode.\n\nFor embedded components integrated in your site, select **Yes** and enter the URL of the page that hosts the component. For any actions not handled by an embedded component, select **No** and enter the URL of the page on your site where the account can perform the action. After entering the URLs, test them to verify that they open the right pages. You can test a link by clicking **Validate**.\n\nYou must set URLs for the following:\n\n*   Notification banner\n*   Account management\n*   Payments\n*   Payouts\n*   Balances\n*   Documents (when Stripe collects Stripe fees directly from connected accounts)\n\nWhen sending an email, Stripe automatically appends the connected account ID to the redirect URL as the `stripe_account_id` parameter. Use that parameter to identify the account and verify that they’re authenticated. Set up the route on your server to read the parameters and display the correct embedded component.\n\n## Preview and customize communications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can customize the co-branded communications that we send to your connected accounts in your [communication settings](https://dashboard.stripe.com/settings/connect/communication). To customize a category of emails, click **Preview and customize**.\n\n### Customize email branding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can set your Business name, Logo, Icon, Brand color, and Accent color. Stripe uses these values in the co-branded emails we send to your connected accounts.\n\n### Customize email domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, emails are sent from a stripe.com address. You can [customize the domain](https://docs.stripe.com/get-started/account/email-domain), but not the specific address. We set the address automatically [based on the context of the message](https://support.stripe.com/questions/custom-email-domain).\n\n### Preview and test emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you customize a category of co-branded Stripe emails, you can check their appearance and test their links in the preview on the right side of the page. Select a specific email from the **Preview** dropdown list. You can also send test emails to verify that they’re working correctly by clicking **Send email**.\n\n### View the history of emails sent to connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can see the emails that Stripe has sent to your connected accounts on the account details page under **Emails to this account**. To see the details of an email, including its exact contents, its To: address, and its status (such as whether it was delivered successfully or was opened), click it in the list.",
  "title": "Email communications in embedded Connect integrations | Stripe Documentation",
  "description": "Customize Stripe notifications to your connected accounts in a fully embedded integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/embedded-support",
  "markdown": "# Embedded Connect Support | Stripe DocumentationThe Stripe Docs logo\n\n## Use Stripe support management features from your own website.\n\nIn some configurations that use embedded components, Stripe provides targeted support for your connected accounts. That support is available when your connected accounts don’t have access to a Stripe-hosted Dashboard and your platform isn’t liable for their negative balances. It includes:\n\n*   A Stripe-hosted support site with self-serve content specific to Stripe’s embedded components\n*   Access to email and live chat support for your connected accounts\n*   Links to the self-serve support site in your embedded components and co-branded risk and compliance emails\n\nYour connected accounts might need help with payment processing-specific issues like responding to disputes or confirming expected fund settlement times. They can also have questions about risk interventions where only Stripe has full visibility and control. Providing direct access to Stripe Support for such situations greatly reduces your platform support team’s operational load. In addition, you can implement a complete self-serve solution for risk interventions by combining that support access with [Stripe Managed Risk](https://docs.stripe.com/connect/embedded-risk).\n\n## Prerequisites![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet up your platform with [a fully embedded connect configuration](https://docs.stripe.com/connect/build-full-embedded-integration). The Stripe-hosted self-serve support site becomes discoverable to your users after you implement the required [embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components) for your configuration.\n\n## Access the support site![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour users can access the Stripe-hosted support site at `https://support.stripe.com/embedded-connect/`.\n\nEmbedded components include **Contact support** links in the bottom right of each dialog. We also include links in flows where users are most likely to need Stripe’s help.\n\n![Dialog showing contact support link](https://b.stripecdn.com/docs-statics-srv/assets/embedded-support-link.8b61571aab6de31dc1c643f8616b0ca0.png)\n\nEach of the following embedded components contains links to contact support:\n\n*   Account management\n    *   Edit Professional details\n    *   Edit Public details\n    *   Edit Personal details\n    *   Edit Payout details\n*   Notification banner\n    *   Compliance forms\n    *   Risk forms\n*   Onboarding\n*   Authentication dialog\n\n## Self-serve help![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe support site includes articles and related questions across several topic areas, including the following:\n\n*   Accounts\n*   Declines\n*   Disputes\n*   Fraud\n*   Legal\n*   Payments\n*   Payouts\n*   Privacy\n*   Refunds\n*   Reserves\n*   Verification\n\n![Example support site article](https://b.stripecdn.com/docs-statics-srv/assets/support-site-article-example.2094c3de78b4ddf05bd4008ea5aa00fc.png)\n\n**Contact support** links appear on the right side of each page on the self-serve support site.\n\nIf the user is authenticated (for example, provided an SMS OTP), clicking the link opens a support widget. The widget lets them start a real-time chat with Support or send an email.\n\n![Contact support through the support site](https://b.stripecdn.com/docs-statics-srv/assets/support-site-contact-auth.17ef846eb63e7144f1b6f4855fc05f8f.png)\n\nClicking the link while not authenticated, or clicking **Send us an email** in the widget, opens a form to open a support case by email.\n\n![Chat with support through the support site](https://b.stripecdn.com/docs-statics-srv/assets/support-site-email-form.51af965dc976df6654d3909442e33ffe.png)",
  "title": "Embedded Connect Support | Stripe Documentation",
  "description": "Use Stripe support management features from your own website.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/account/retrieve",
  "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
  "title": "Page not found | Stripe Documentation",
  "description": "Sorry, but the page you were looking for couldn't be found.",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/connect/tax-forms-state-requirements",
  "markdown": "# File tax forms with states\n\n## Learn about the state requirements for filing 1099 forms.\n\nWhen you [file](https://docs.stripe.com/connect/file-tax-forms) your 1099 forms from the [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) view in the Dashboard, Stripe submits your forms to the IRS and all qualifying states. We automatically apply state thresholds when generating 1099 tax forms, so you can easily determine which forms need state filing based on the addresses of your connected accounts.\n\n#### Note\n\nStripe supports e-filing in all states but won’t transmit forms to states on your behalf that have backup or state withholding amounts. Review [1099 form requirements by state](https://docs.stripe.com/connect/tax-forms-state-requirements#check-1099-form-requirements-by-state) and work with your tax advisor to make sure you understand the tax requirements specific to your business.\n\n## Prepare to file with the states![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore filing forms in your Dashboard, do the following to make sure forms are filed correctly with both the IRS and states:\n\n[](#choose-form-type)\n\n[Configure your tax forms settings](https://docs.stripe.com/connect/get-started-tax-reporting#set-tax-form-default-settings) to choose the tax form type (or types) you’ll file: 1099-K, 1099-NEC, or 1099-MISC. Each state has different requirements for each form type.\n\n[](#determine-location)\n\nIn the [Dashboard](https://dashboard.stripe.com/connect/taxes/forms), you can either [export](https://docs.stripe.com/connect/modify-tax-forms?method=csv) a CSV file with state information (reported in the **payee\\_region** column) or filter by **Payee state**.\n\n![Filter by payee state](https://b.stripecdn.com/docs-statics-srv/assets/payee_state.f077495dfbceb3bba62b27c5aee2bb9f.png)\n\n[](#determine-states)\n\nSome state 1099 filings also require a state tax registration or withholding ID. Refer to the tables in the [Check 1099 form requirements by state](https://docs.stripe.com/connect/tax-forms-state-requirements#check-1099-form-requirements-by-state) section to determine where you might need state online accounts and IDs.\n\n[](#add-state-reg)\n\nAfter you obtain the registration or withholding ID, add the states in which you’ll file and the corresponding IDs on the [Tax forms settings](https://dashboard.stripe.com/settings/connect/tax_forms) page. In the Dashboard, click **Settings**. On **Product settings**, under **Connect**, click **Tax form settings**.\n\n![Add the state tax registration or withholding ID for each state you'll file](https://b.stripecdn.com/docs-statics-srv/assets/state_tax_registration_id.b61e81338146c94a3e98ee995cd866ce.png)\n\nRefer to the tables in the [Check 1099 form requirements by state](https://docs.stripe.com/connect/tax-forms-state-requirements#check-1099-form-requirements-by-state) section to determine where you might need state online accounts and IDs. If prompted that some state registration or withholding IDs were missing during filing, you need to go to the Connect [Tax forms settings](https://dashboard.stripe.com/settings/connect/tax_forms) page, add the missing IDs, and then go through the filing flow again.\n\n## State-by-state breakdown![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you’re ready to [file forms in your Dashboard](https://docs.stripe.com/connect/file-tax-forms), the forms for IRS and state reporting agencies will be filed at the same time. To understand the number of forms being filed in each state, click **Show state-by-state breakdown** on the **File Federal and state tax forms** window in the filing flow. This page also indicates whether the state’s registration or withholding ID is missing or has already been provided. A yellow informational banner displays at the top of every page in the filing flow if state IDs are missing from states that are being filed.\n\n![Review filing details page displaying a banner to indicate a missing Tax ID.](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-review-filing-missing-ID.40d5902778ca845d5190d1679d9f4ee8.png)\n\n## Withholding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe can’t file tax forms with the state authorities if state withholding is present. If you have forms with state withholding, Stripe won’t file those with the states but will make the files available as an export and file with the IRS. Please check the **Exports & Imports** section in the Dashboard for the downloaded file. Please consult a tax advisor on how/whether to file these forms with state agencies.\n\n## Check 1099 form requirements by state![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nChoose the form type to view state filing requirements:\n\n*   [1099-K](https://docs.stripe.com/connect/1099-K)\n*   [1099-NEC](https://docs.stripe.com/connect/1099-NEC)\n*   [1099-MISC](https://docs.stripe.com/connect/1099-MISC)\n\n## Correct 1099 reports with the states![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you file a correction with the IRS, the state correction is filed at the same time. To file a [correction](https://docs.stripe.com/connect/correct-tax-forms) with a state for a form that was already filed, you must create a correction.\n\n## Frequently asked questions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following section provides answers to common questions about filing tax forms through Connect.\n\n### What happens if a connected account needs their form filed in multiple states?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe does not support this at the moment. Stripe only checks eligibility and files in the state where the connected account’s address is registered.\n\n### When we click “File”, does Stripe file with the IRS and the States at the same time, or do we have the ability to make changes if one has a later deadline?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe files with the IRS and the State right away when you file the submission and you can’t make changes to that. But platforms are always able to make “corrections” and then file them and Stripe takes care of processing those corrections to the IRS and the State.\n\n### How do I know if a particular form will be filed with the state?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe’ve introduced a new State filing status. For more information, see [Understand tax form status](https://docs.stripe.com/connect/get-started-tax-reporting#understand-tax-form-status).\n\n### Can I override the filing requirement for State filing without overriding the filing requirement for Federal filing?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNo. If you override the filing requirements, it applies to both federal and state filing.\n\n### Why wasn’t the state filing status overridden when I selected “File even if incomplete”?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you choose to override the filing status and select **File even if incomplete**, there are still certain edge cases where your form might still have a state filing status of `Needs Attention`. This is done to minimize the risk of rejections from the state. Take note of the following state-specific rules:\n\n*   Pennsylvania: The form must have a non-zero Taxpayer Identification Number (TIN) and pass a basic address validation check, which requires at least one digit and one number in the address.\n*   Illinois: The form must have a non-zero TIN and a valid payee name.\n*   Oregon: The form must have a non-zero TIN.\n*   District of Columbia: The form cannot have a TIN with all digits being the same number.",
  "title": "File tax forms with states | Stripe Documentation",
  "description": "Learn about the state requirements for filing 1099 forms.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/connect-w8-w9-onboarding",
  "markdown": "# Connect W-8 and W-9 | Stripe DocumentationThe Stripe Docs logo\n\n## Use Stripe's W-8 and W-9 Connect product to collect the necessary tax forms from your users.\n\n## What’s the Stripe W-8 and W-9 Connect product?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe’s W-8 and W-9 Connect product provides a seamless way to collect certified tax information from connected accounts through the Express Dashboard or Stripe-hosted onboarding. This includes the name, address, and TIN (Tax ID) of a taxpayer. A [W-9 tax form](https://www.irs.gov/pub/irs-pdf/fw9.pdf) is for [US residents or citizens](https://www.irs.gov/individuals/international-taxpayers/classification-of-taxpayers-for-us-tax-purposes) and is used to confirm their TIN (SSN/ITIN/EIN). A [W-8 tax form](https://www.irs.gov/pub/irs-pdf/fw8ben.pdf) is for non-US tax residents and is used to certify their name, address, and foreign TIN (if applicable), to confirm that they’re not a US taxpayer. A non-US resident can also specify the appropriate treaty and/or withholding rates applicable to their business.\n\nPlatforms might be subject to IRS fines up to 290 USD per incorrect submission if they file 1099s with incorrect information. W-8 and W-9s provide a way for Platforms to collect certified tax information throughout the year directly from your Connected Accounts before issuing 1099s to make sure the correct information is used on the appropriate 1099 forms.\n\nWith the W-8 and W-9 Connect product, your connected accounts can complete the appropriate W8 or W9 form with a few simple clicks. Any information connected accounts have already provided is pre-populated onto the forms for the ease of your users. They only need to confirm the information is accurate and make updates where needed. No more PDFs, emails, or wet-ink signatures needed.\n\nPlatforms will have a fully customizable Dashboard which tracks the status of all W-8 or W-9 requests. You’ll be able to easily see which users have completed the appropriate documentation and which users are still pending, and you can download PDFs of any submitted forms.\n\nConnected Accounts will also have a unified tax experience where they can manage completing their tax forms and storage of their tax documents all within the Tax Center.\n\n![Stripe W-8 and W-9 forms dashboard.](https://b.stripecdn.com/docs-statics-srv/assets/w8-w9-dashboard.fca7e6602823d2420c3c1828b4bad753.svg)\n\nStripe W-8 and W-9 forms dashboard\n\n## How does it work?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPlatforms determine appropriate collection timing for when to request a W-8 or W-9. If choosing to collect at onboarding, all new users are asked to verify and attest to their tax information. If choosing to collect at a later date, Platforms request W-8 or W-9 collection with the [Accounts API](https://docs.stripe.com/api/connected_accounts) and then route their user to verify and attest to their tax information. Platforms can also request W-8 or W-9 collection from all accounts—existing accounts will be notified at that time.\n\n![Customize the W-8, W-9 collection configuration.](https://b.stripecdn.com/docs-statics-srv/assets/w8-w9-platform-settings.470e604d117bbd4bac5cd400d59b0eb7.png)\n\nCustomize the W-8 and W-9 collection configuration\n\nPlatforms have full customization in setting enforcement thresholds to determine when Connected Accounts will be required to submit a W-8/W-9 tax form:\n\n*   **Volume**: Block payouts if a W-8 or W-9 isn’t submitted after processing _x_ USD.\n*   **Time**: Block payouts if a W-8 or W-9 isn’t submitted after _x_ days.\n*   **Combo**: Block payouts if a W-8 or W-9 isn’t submitted after _x_ days or after processing _x_ USD.\n\n## How do I get started?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCurrently, access to Stripe’s W-8/W-9 Connect product is limited to US beta users. To request access to the beta and to learn more about pricing, reach out to your account team or [contact Stripe](https://stripe.com/contact/sales) for more information.",
  "title": "Connect W-8 and W-9 | Stripe Documentation",
  "description": "Use Stripe's W-8 and W-9 Connect product to collect the necessary tax forms from your users.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/platform-express-dashboard-taxes-walkthrough",
  "markdown": "# 1099 Tax Support product walkthrough\n\n## Learn about how to manage 1099 Tax forms for connected accounts using Express.\n\nThe images in this section describe an example of the product flow connected accounts could encounter. We provide these images to help give you and your support team an idea of the overall user experience. Feel free to reach out to Stripe support with any questions about this flow.\n\n[](#express-dashboard)\n\nEnabling e-delivery for tax year 2023 gives your Custom or Express connected accounts access to Stripe Express Tax Forms page, a prebuilt web and mobile dashboard for managing their tax information and receiving 1099s electronically.\n\nAs you configure your [tax form settings](https://dashboard.stripe.com/settings/connect/tax_forms), you can also choose to have Stripe send pre-filing confirmation emails to collect tax information and paperless delivery consent directly from your connected accounts. We’ll email your eligible connected accounts starting the week of November 1st.\n\n![Stripe Express dashboard for connected account taxes](https://b.stripecdn.com/docs-statics-srv/assets/stripe-express-tax-dashboard-2023.4fc699b9b7f560443aacd25b89d14a59.png)\n\nThe Stripe Express Dashboard where payees can grant e-delivery consent, download their 1099 tax forms, and update their tax information.\n\n![Stripe Express dashboard for connected accounts](https://b.stripecdn.com/docs-statics-srv/assets/stripe-express-dashboard.75de9515d0222275afb3c67a4d6117c4.png)\n\nConnected accounts can also use the Express Dashboard to view their available balance, see upcoming payouts, and track their earnings in real time.\n\n#### Note\n\nIf you don’t want to give your Custom connected accounts access to the Stripe Express Dashboard or if you don’t want Stripe to email your connected accounts, select postal delivery and disable electronic delivery in your [tax form settings](https://dashboard.stripe.com/settings/connect/tax_forms).\n\n[](#receive-email)\n\nYour connected account receives an email from Stripe asking them to confirm their tax information and update their delivery preferences. The subject line reads ‘Get your \\[Platform\\_Name\\] 2023 tax forms faster by enabling e-delivery.’ The following image displays the content of the email.\n\n![Stripe Express Tax form email from Stripe.](https://b.stripecdn.com/docs-statics-srv/assets/tax-form-confirm-information-email-2023.8868bb92bbd3f2fd5fa0e2fe319c11ab.png)\n\nStripe Express Tax form email from Stripe\n\n[](#verify-info)\n\n_Applies to Custom connected accounts only_. After your user clicks the **Get Started** button in Stripe’s email to connected accounts, they are taken to this screen. If they are already logged in to their Stripe Express account, they proceed to the next screen. This step is only needed if they don’t have a Stripe Express account already.\n\n![The Stripe Express page to create an account.](https://b.stripecdn.com/docs-statics-srv/assets/tax-create-stripe-express-account.7bfe7be3830ecb6ca313cadfa256e758.png)\n\nThe Stripe Express page to create an account\n\n[](#two-factor)\n\nExpress and Custom connected accounts who are logged in to their Stripe Express accounts, already have a Stripe Express account, or who have proceeded from the login screen, are asked for a code sent to the phone number they have on file for their account, or the one they just entered.\n\n![Stripe Express account two-factor authentication dialog.](https://b.stripecdn.com/docs-statics-srv/assets/tax-verify-phone.a6b5b1e2455c322950902d1355324d4d.png)\n\nThe Stripe Express account phone number verification dialog.\n\n[](#verify-identity)\n\n**Applies to Custom connected accounts only**. After phone number verification is complete, Stripe provides the connected account with prompts to verify their identity. These are details that should be associated with their connected account. This step is only required for Custom accounts that haven’t already onboarded to Stripe Express. If, after a few attempts, a connected account is unable to enter details that match their account, they’re prompted to check with you as the platform to confirm their details. The error message reads ‘One of the fields didn’t match the information we received from \\[Platform\\_Name\\]. You can try again, or check that your information with \\[Platform\\_Name\\] is up to date.’\n\n![Stripe Express account Verify your identity dialog](https://b.stripecdn.com/docs-statics-srv/assets/tax-verify-identity.7f5df7551dfbb1801cdde12ed9c0dd36.png)\n\nThe Stripe Express account **Verify your identity** dialog.\n\n[](#tax-forms-page)\n\nAfter the connected account’s details are verified, they’re taken to the **Tax forms** page in Stripe Express where they can confirm their tax information they have on file for their account and agree to paperless delivery of their 1099 tax form.\n\n![The Tax forms page of the Express Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-page.0430a010ebfa14b6c8914a90376e7a49.png)\n\nThe Tax forms page of the Express Dashboard.\n\nThey’re prompted to confirm tax information but can choose to skip temporarily if they want to leave their information as is. Your accounts could get blocked if you’ve applied 1099 capabilities and the connected account updates their value to a name and TIN combination that doesn’t match against IRS records. If the connected account is verified and then changes their name or TIN, they’re asked to re-sign a new Stripe Terms Of Service Agreement. Similarly, if Stripe is unable to complete KYC requirements on them based on the information they provided, their account payouts are blocked until they log back in to Stripe Express and correct their information.\n\n![The dialog displayed to connected accounts to confirm their information.](https://b.stripecdn.com/docs-statics-srv/assets/tax-confirm-information.1801e85e31759f80b4e3ffd7fe974778.png)\n\nThe dialog displayed to users to confirm their information.\n\n[](#for-delivery)\n\nAfter the tax information is confirmed, Stripe prompts the connected account to agree to paperless delivery.\n\n![The dialog to consent to paperless delivery of tax forms](https://b.stripecdn.com/docs-statics-srv/assets/tax-consent-edelivery.603807401bba412dd0c3bc383d5abd52.png)\n\nThe dialog to consent to paperless delivery of tax forms.\n\nIf you’ve enabled optional postal delivery, after agreeing to paperless delivery consent, your connected accounts can choose to request a paper copy in addition to the e-delivery of the tax form.\n\n![The dialog to optionally request a paper copy of tax forms](https://b.stripecdn.com/docs-statics-srv/assets/stripe-express-tax-postal-delivery-option.9fe97c25a15822fbe4713b2c281ec96a.png)\n\n[](#email-from-stripe)\n\nAfter filing 1099 tax forms in your Stripe dashboard, your connected account receives an email from Stripe to view their tax form electronically. The subject line reads ‘Your \\[Platform\\_Name\\] 1099 tax form is ready.’ The following image displays the content of the email.\n\n![The 1099 electronic delivery email to users](https://b.stripecdn.com/docs-statics-srv/assets/tax-form-delivery-stripe-as-sender-2023-updated-threshold.408645c565172d0dc413e8a3cc1a860d.jpeg)\n\n[](#display-tax-forms-page)\n\nAfter a connected account agrees to the e-delivery terms, they can download their form when your platform makes it available.\n\n![Stripe Express dashboard where payees can download their 1099 tax forms](https://b.stripecdn.com/docs-statics-srv/assets/stripe-express-tax-dashboard.78c8723a939c34a01e17ae807ffa31d2.png)\n\nThe dashboard where payees can download their 1099 tax forms.\n\nMost connected account owners are prompted to enter the last four digits of the TIN on their 1099 tax form before being able to download a copy of the form. Downloads aren’t available for 24 hours after an update has been made to any personal identity information including name, address, business type, or TIN.\n\n![The dialog to verify your SSN information to securely access tax forms.](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-secure-access.5d000d31ccbd402d50cb3a2731dce4f2.png)\n\n#### Caution\n\nConnected accounts that do not agree to paperless delivery are unable to download their 1099 tax forms and resolve the call to action in their dashboard. Turn on paper delivery in your Stripe [Tax form settings](https://dashboard.stripe.com/settings/connect/tax_forms) to make sure that recipients who don’t consent to e-delivery still receive paper forms.",
  "title": "1099 Tax Support product walkthrough | Stripe Documentation",
  "description": "Learn about how to manage 1099 Tax forms for connected accounts using Express.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/payment-methods",
  "markdown": "# Adding payment method capabilities | Stripe DocumentationThe Stripe Docs logo\n\nFrom the connected accounts [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods), navigate to the payment method you’re interested in.\n\nUse the arrow on the left side of the payment method to expand the details of the payment method. Within this view, you can see the eligibility of each of your connected accounts to use the payment method.\n\n#### Note\n\nThis view includes connected accounts that:\n\n*   Have processed a payment in the last 90 days and are older than 30 days.\n*   Are less than 30 days old, regardless of their payment activity.\n\n![Eligibility details for a payment method](https://b.stripecdn.com/docs-statics-srv/assets/eligibility-results.088e99a8299c21267b07a7b1ba1bd7d6.png)\n\nEligibility details for a payment method\n\nEach connected account appears in one of four different categories:\n\n| Category | Description |\n| --- | --- |\n| Enabled | These businesses already have the capability for this payment method set to `active`. |\n| Eligible | These businesses have met all compliance requirements and passed any relevant MCC checks to have the payment method capability set to `active` when requested. |\n| Missing Info | These businesses are missing some compliance plan information needed to add the payment method. |\n| Ineligible | These businesses aren’t eligible for the payment method, either due to country location or MCC. |\n\nCountries you have connected accounts in that aren’t supported by the payment method appear grayed out.",
  "title": "Adding payment method capabilities | Stripe Documentation",
  "description": "Onboard your connected accounts to accept different payment methods.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/payment_intents/confirm",
  "markdown": "# Confirm a PaymentIntent | Stripe API Reference\n\nConfirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment. If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the `requires_action` status and suggest additional actions via `next_action`. If payment fails, the PaymentIntent transitions to the `requires_payment_method` status or the `canceled` status if the confirmation limit is reached. If payment succeeds, the PaymentIntent will transition to the `succeeded` status (or `requires_capture`, if `capture_method` is set to `manual`). If the `confirmation_method` is `automatic`, payment may be attempted using our [client SDKs](https://docs.stripe.com/stripe-js/reference#stripe-handle-card-payment) and the PaymentIntent’s [client\\_secret](#payment_intent_object-client_secret). After `next_action`s are handled by the client, no additional confirmation is required to complete the payment. If the `confirmation_method` is `manual`, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the `requires_confirmation` state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt.\n\n### Parameters\n\n*   ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://docs.stripe.com/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.\n    \n*   Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).\n    \n*   Indicates that you intend to make future payments with this PaymentIntent’s payment method.\n    \n    Providing this parameter will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://docs.stripe.com/api/payment_methods/attach) to a Customer after the transaction completes.\n    \n    When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://docs.stripe.com/strong-customer-authentication).\n    \n    If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   Shipping information for this PaymentIntent.\n    \n\n### More parameters\n\n*   #### \n    \n    capture\\_methodenumsecret key only\n    \n\n*   #### \n    \n    error\\_on\\_requires\\_actionboolean\n    \n*   #### \n    \n    mandatestringsecret key only\n    \n\n*   #### \n    \n    off\\_sessionboolean | stringsecret key only\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobjectsecret key only\n    \n*   #### \n    \n    payment\\_method\\_typesarray of stringssecret key only\n    \n*   #### \n    \n    radar\\_optionsobjectsecret key only\n    \n\n### Returns\n\nReturns the resulting PaymentIntent after all possible transitions are applied.\n\nPOST /v1/payment\\_intents/:id/confirm\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_3MtweELkdIwHu7ix0Dt0gF2H/confirm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_method=pm_card_visa \\  --data-urlencode return_url=\"https://www.example.com\"\n```\n\n```\n{  \"id\": \"pi_3MtweELkdIwHu7ix0Dt0gF2H\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 2000,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtweELkdIwHu7ix0Dt0gF2H_secret_ALlpPMIZse0ac8YzPxkMkFgGC\",  \"confirmation_method\": \"automatic\",  \"created\": 1680802258,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": \"ch_3MtweELkdIwHu7ix05lnLAFd\",  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1MtweELkdIwHu7ixxrsejPtG\",  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Increment an authorization](https://docs.stripe.com/api/payment_intents/increment_authorization)\n\nPerform an incremental authorization on an eligible [PaymentIntent](https://docs.stripe.com/api/payment_intents/object). To be eligible, the PaymentIntent’s status must be `requires_capture` and [incremental\\_authorization\\_supported](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) must be `true`.\n\nIncremental authorizations attempt to increase the authorized amount on your customer’s card to the new, higher `amount` provided. Similar to the initial authorization, incremental authorizations can be declined. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.\n\nIf the incremental authorization succeeds, the PaymentIntent object returns with the updated [amount](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount). If the incremental authorization fails, a [card\\_declined](https://docs.stripe.com/error-codes#card-declined) error returns, and no other fields on the PaymentIntent or Charge update. The PaymentIntent object remains capturable for the previously authorized amount.\n\nEach PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines. After it’s captured, a PaymentIntent can no longer be incremented.\n\nLearn more about [incremental authorizations](https://docs.stripe.com/terminal/features/incremental-authorizations).\n\n### Parameters\n\n*   The updated total amount that you intend to collect from the cardholder. This amount must be greater than the currently authorized amount.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    For card charges, use [statement\\_descriptor\\_suffix](https://stripe.com/docs/payments/account/statement-descriptors#dynamic). Otherwise, you can use this value as the complete description of a charge on your customers’ statements. It must contain at least one letter and be 1–22 characters long.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns a PaymentIntent object with the updated amount if the incremental authorization succeeds. Returns an error if the incremental authorization failed or the PaymentIntent isn’t eligible for incremental authorizations.\n\nPOST /v1/payment\\_intents/:id/increment\\_authorization\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_1DtBRR2eZvKYlo2CmCVxxvd7/increment_authorization \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=2099\n```\n\n```\n{  \"id\": \"pi_1DtBRR2eZvKYlo2CmCVxxvd7\",  \"object\": \"payment_intent\",  \"amount\": 2099,  \"amount_capturable\": 2099,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": null,  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"manual\",  \"client_secret\": \"pi_1DtBRR2eZvKYlo2CmCVxxvd7_secret_cWsUkvyTOjhLKh5Wxu61nYc0i\",  \"confirmation_method\": \"automatic\",  \"created\": 1680196960,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": \"ch_3MrPBM2eZvKYlo2C1CEBUD4A\",  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1MrPBL2eZvKYlo2CaNa8L11Z\",  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"processing\": null,  \"receipt_email\": null,  \"redaction\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_capture\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Reconcile a customer\\_balance PaymentIntent](https://docs.stripe.com/api/payment_intents/apply_customer_balance)\n\nManually reconcile the remaining amount for a `customer_balance` PaymentIntent.\n\n### Parameters\n\n*   Amount that you intend to apply to this PaymentIntent from the customer’s cash balance.\n    \n    A positive integer representing how much to charge in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (for example, 100 cents to charge 1 USD or 100 to charge 100 JPY, a zero-decimal currency).\n    \n    The maximum amount is the amount of the PaymentIntent.\n    \n    When you omit the amount, it defaults to the remaining amount requested on the PaymentIntent.\n    \n\n### Returns\n\nReturns a PaymentIntent object.\n\nPOST /v1/payment\\_intents/:id/apply\\_customer\\_balance\n\n```\ncurl -X POST https://api.stripe.com/v1/payment_intents/pi_1GszwY2eZvKYlo2CohCEmT6b/apply_customer_balance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_1GszwY2eZvKYlo2CohCEmT6b\",  \"object\": \"payment_intent\",  \"amount\": 1000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": null,  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_1GszwY2eZvKYlo2CohCEmT6b_secret_1jQJzqkrQvx4BpwI5hn6WSEO5\",  \"confirmation_method\": \"automatic\",  \"created\": 1591918582,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"Created by stripe.com/docs demo\",  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"processing\": null,  \"receipt_email\": null,  \"redaction\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Search PaymentIntents](https://docs.stripe.com/api/payment_intents/search)\n\nSearch for PaymentIntents you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` PaymentIntents. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\nGET /v1/payment\\_intents/search\n\n```\ncurl -G https://api.stripe.com/v1/payment_intents/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d query=\"amount>1000\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/payment_intents/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",      \"object\": \"payment_intent\",      \"amount\": 2000,      \"amount_capturable\": 0,      \"amount_details\": {        \"tip\": {}      },      \"amount_received\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"automatic_payment_methods\": {        \"enabled\": true      },      \"canceled_at\": null,      \"cancellation_reason\": null,      \"capture_method\": \"automatic\",      \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",      \"confirmation_method\": \"automatic\",      \"created\": 1680800504,      \"currency\": \"usd\",      \"customer\": null,      \"description\": null,      \"invoice\": null,      \"last_payment_error\": null,      \"latest_charge\": null,      \"livemode\": false,      \"metadata\": {},      \"next_action\": null,      \"on_behalf_of\": null,      \"payment_method\": null,      \"payment_method_options\": {        \"card\": {          \"installments\": null,          \"mandate_options\": null,          \"network\": null,          \"request_three_d_secure\": \"automatic\"        },        \"link\": {          \"persistent_token\": null        }      },      \"payment_method_types\": [        \"card\",        \"link\"      ],      \"processing\": null,      \"receipt_email\": null,      \"review\": null,      \"setup_future_usage\": null,      \"shipping\": null,      \"source\": null,      \"statement_descriptor\": null,      \"statement_descriptor_suffix\": null,      \"status\": \"requires_payment_method\",      \"transfer_data\": null,      \"transfer_group\": null    }    {...}    {...}  ],}\n```\n\n## [Verify microdeposits on a PaymentIntent](https://docs.stripe.com/api/payment_intents/verify_microdeposits)\n\nVerifies microdeposits on a PaymentIntent object.\n\n### Parameters\n\n*   Two positive integers, in _cents_, equal to the values of the microdeposits sent to the bank account.\n    \n*   A six-character code starting with SM present in the microdeposit sent to the bank account.\n    \n\n### Returns\n\nReturns a PaymentIntent object.\n\nPOST /v1/payment\\_intents/:id/verify\\_microdeposits\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_1DtBRR2eZvKYlo2CmCVxxvd7/verify_microdeposits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"amounts[]\"=32 \\  -d \"amounts[]\"=45\n```\n\n```\n{  \"id\": \"pi_1DtBRR2eZvKYlo2CmCVxxvd7\",  \"object\": \"payment_intent\",  \"amount\": 1099,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": null,  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_1DtBRR2eZvKYlo2CmCVxxvd7_secret_l80vlOGz9kZQwnzocExJQUsJx\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800210,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1Mtw7C2eZvKYlo2CPsW0F8g0\",  \"payment_method_options\": {    \"acss_debit\": {      \"mandate_options\": {        \"interval_description\": \"First day of every month\",        \"payment_schedule\": \"interval\",        \"transaction_type\": \"personal\"      },      \"verification_method\": \"automatic\"    }  },  \"payment_method_types\": [    \"acss_debit\"  ],  \"processing\": null,  \"receipt_email\": null,  \"redaction\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```",
  "title": "Confirm a PaymentIntent | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/connect-tax-id-onboarding",
  "markdown": "# Tax ID Additional Verification | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax ID Additional Verification to collect and verify the Tax ID of your users.\n\nConnect [dynamically requires onboarding information](https://docs.stripe.com/connect/required-verification-information) to keep your [accounts](https://docs.stripe.com/connect/accounts) compliant, but you can influence what information Connect requires in your platform by adding additional verifications (AVs) to accounts. Requesting an additional verification requires your connected accounts to provide certain information, which is then verified.\n\nPlatforms might be subject to IRS fines up to 290 USD per submission if they file 1099s with incorrect information (for example, name or tax ID mismatches). The Tax ID AV provides a way for platforms to collect certified tax IDs throughout the year directly from your connected accounts before issuing 1099s, to make sure the appropriate 1099 tax forms use the correct Taxpayer Identification Number (TIN).\n\nThe Tax ID Additional Verification performs a name and TIN check either at the personal level or business level based on [required verification information for taxes](https://docs.stripe.com/connect/required-verification-information-taxes).\n\n## How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Tax ID Additional Verification allows you to enforce the mandatory collection and verification of tax ID requirements for a connected account. Platforms add requirements for Tax ID collection/verification for a connected account using the [Accounts API](https://docs.stripe.com/api/connected_accounts).\n\nFor Custom Connect platforms, after you add the requirements on a connected account, your platform can [Create an account link](https://docs.stripe.com/api/account_links/create) to redirect the user from your platform to [Connect Onboarding](https://docs.stripe.com/connect/express-accounts). Alternatively, you can collect the requirements directly from your platform, and then send it to Stripe using [Update an account](https://docs.stripe.com/api/accounts/update). For Express Connect platforms, Stripe sends the Express connected accounts an email to complete the missing or invalid requirements using the [Express Dashboard](https://docs.stripe.com/connect/express-dashboard).\n\nAfter Stripe receives the user’s TIN, we automatically verify it by comparing it with the IRS database. If the IRS database confirms the TIN is a match, the requirements are considered satisfied. If the IRS database doesn’t return a TIN match with the connected account’s tax details, then enforcement limits are triggered.\n\nPlatforms have full customization in setting **enforcement limits** to determine when Connected Accounts are required to provide a verified TIN. You can set the following enforcement limits to impose disablement of payouts or payouts or payments if a verified TIN isn’t on file:\n\n*   **Upfront**: Block payouts or payments if a verified TIN isn’t on file immediately.\n*   **Volume**: Block payouts or payments if a verified TIN isn’t on file after processing _x_ USD.\n*   **Time**: Block payouts or payments if a verified TIN isn’t on file after _x_ days.\n*   **Combo**: Block payouts or payments if a verified TIN isn’t on file after _x_ days or after processing _x_ USD.\n\n## Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCurrently, access to Stripe’s Tax ID Additional Verification is limited to US beta users. To request access to the beta, reach out to your account team or [contact Stripe](https://stripe.com/contact/sales) for more information.",
  "title": "Tax ID Additional Verification | Stripe Documentation",
  "description": "Learn how to use Stripe Tax ID Additional Verification to collect and verify the Tax ID of your users.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/capabilities/list?lang=curl",
  "markdown": "# List all account capabilities | Stripe API Reference\n\nReturns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA dictionary with a `data` property that contains an array of the capabilities of this account. Each entry in the array is a separate capability object.\n\nGET /v1/accounts/:id/capabilities\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/capabilities \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/capabilities\",  \"has_more\": false,  \"data\": [    {      \"id\": \"card_payments\",      \"object\": \"capability\",      \"account\": \"acct_1032D82eZvKYlo2C\",      \"future_requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"requested\": true,      \"requested_at\": 1693951912,      \"requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"status\": \"inactive\"    }  ]}\n```\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all account capabilities | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/update-verified-information",
  "markdown": "# Update verified user information | Stripe DocumentationThe Stripe Docs logo\n\n## Learn what verified information you can update for your connected accounts.\n\nFor connected accounts where your platform collects updated information for due or changed requirements, you collect the [required information](https://docs.stripe.com/connect/required-verification-information) for each account during onboarding, and Stripe verifies it. If you update verified user information, Stripe must review it. If Stripe can’t verify it, you have a grace period of 14 days to resolve any issues and complete verification.\n\nDuring this grace period, the account functionality remains the same. For example, if charges or [payouts](https://docs.stripe.com/payouts \"payout\") were previously enabled, they’ll continue to be enabled until the grace period ends. The value of [requirements.current\\_deadline](https://docs.stripe.com/api/capabilities/object#capability_object-requirements-current_deadline) determines the end of the grace period and isn’t extended if you update additional information. Resolve all requirements by the end of the grace period to prevent charges or payouts from being disabled.\n\nThese fields can be updated, with a grace period, after they’ve been verified:\n\n*   Business name\n*   Business type\n*   First name\n*   Last name\n*   Date of birth\n*   Business tax ID\n*   Tax ID registrar\n*   Personal ID number\n\nThese fields can’t be updated after a company has been verified:\n\n*   Verification documents\n\n## Change the account representative![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must specify a representative to activate the account, agree to Stripe’s terms, and act as primary contact for the account. You can change the account representative for any reason (for example, the designated representative left the company or they no longer serve as owner or executive).\n\nDo the following to change the account representative:\n\n*   If necessary, add a [Person](https://docs.stripe.com/api/persons/object#person_object-verification) object for the new representative. Stripe recommends that you verify the `Person` before proceeding, whether you designate an existing `Person` as the new representative or add a new `Person`.\n*   Update the [Person](https://docs.stripe.com/api/persons/object#person_object-verification) object to remove them as the current representative:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n`/persons/  {{PERSON_ID}}   \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"relationship[representative]\"=false`\n\n*   Update the [Person](https://docs.stripe.com/api/persons/object#person_object-verification) object to nominate the new representative:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n`/persons/  {{PERSON_ID}}   \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"relationship[representative]\"=true`\n\n*   Monitor the `requirements.currently_due` and `requirements.past_due` arrays to make sure that verification of the new representative is complete. Even if the new representative `Person` is already verified, there might be additional requirements for the representative role.\n\nAfter you set a representative to `false`, Stripe allows a grace period of 14 days for you to set the new representative to `true` and to complete verification.\n\n## Update the account tax identification number![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Note\n\nConnected account owners in Brazil can’t update Tax IDs (personal\\* or business) after verification.\n\nWhen your connected account updates its verified Tax ID (personal\\* or business), the account must agree again to the Stripe Services Agreement (SSA). Doing so accepts the transfer of ownership of their account and its balances from the entity assigned the initial Tax ID to the one assigned the new Tax ID. The information below describes the process for collecting this requirement when changing an account’s verified Tax ID.\n\n*   This applies when you update or resubmit a verified representative’s existing ID number and ssn\\_last\\_4.\n\n### Update Tax ID with a grace period![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter the account updates its Tax ID, the account enters a 14-day grace period during which it must agree once again to the Stripe Services Agreement (SSA) and make sure it’s compliant with all requirements. If the connected account can’t meet its requirements after 14 days, then charges and payouts for the account are paused\n\nYou have a few ways to collect this requirement:\n\n*   If you use Connect Onboarding, you can provide a link to Stripe’s onboarding flow. From there, the account can fulfill any necessary requirements.\n    \n    *   For accounts with access to [the Stripe Express Dashboard](https://docs.stripe.com/connect/express-dashboard), you can create a single-use Dashboard login link that allows the account to edit their tax identification number and agree once again to the Stripe Services Agreement (SSA).\n    *   For accounts with no Stripe-hosted Dashboard access, you can provide a link to [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding#account_update), where your account can edit their tax identification number and agree once again to the Stripe Services Agreement (SSA).\n*   If you onboard your connected accounts through your platform rather than using Connect Onboarding, you must collect this requirement by following the instructions in the following section.\n    \n\n### Collect agreement of the Stripe Services Agreement once again![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you allow accounts with no Stripe-hosted Dashboard access, including Custom accounts, to update their verified Tax ID through your platform, you must add a section to make it clear that the account agrees once again to the Stripe Services Agreement (SSA). You must also make it clear that the account owner associated with the original TIN agrees to transfer ownership of the account and its balances to the owner associated with the updated TIN.\n\nOne way to achieve this is by including a clear reference and link to the agreement language below, then documenting that the account agrees using the [update account](https://docs.stripe.com/api/accounts/update) API:\n\n_If you own the Stripe account associated with the original TIN, you agree to transfer ownership of the account and balances to the updated account owner (associated with the updated TIN), and that the updated owner has agreed to assume your agreements with Stripe. If you are the updated owner, you acknowledge that the ownership of this Stripe account has been transferred to you and that you assume the agreements that the prior account owner has with Stripe._\n\nUse the [update account](https://docs.stripe.com/api/accounts/update) API to collect the requirements, providing the user’s IP address and the acceptance date as a timestamp. The acceptance date of the signature (`tos_acceptance[date]`) must be the time that your connected account requested the update to the Tax ID number. It can also be any time after they requested the update.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"tos_acceptance[date]\"=1609798905 \\  -d \"tos_acceptance[ip]\"=\"8.8.8.8\"`",
  "title": "Update verified user information | Stripe Documentation",
  "description": "Learn what verified information you can update for your connected accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/deliver-tax-forms",
  "markdown": "# Deliver your 1099 tax forms\n\n## Learn about 1099 form delivery requirements and how to deliver your tax forms, including e-delivery and postal delivery.\n\n#### Getting your 1099 Forms\n\nIf you work for a platform that pays you via Stripe and want to learn about your 1099 forms and how to get them, see [1099 tax forms](https://support.stripe.com/express/topics/1099-tax-forms) on the Stripe Support site.\n\nRevenue authorities (such as the IRS) typically require that you deliver a copy of the tax form to the payee, in addition to [filing the tax form](https://docs.stripe.com/connect/file-tax-forms). Per IRS recommendations, the tax form you deliver is a “Copy B” with the payee taxpayer identification number (TIN) redacted to the last four digits.\n\nThe IRS requires you to provide tax forms to payees using postal mail unless you’ve obtained consent from the payee to only deliver the forms electronically. If you don’t obtain consent for e-delivery, you can still e-deliver as long as you also mail the copy of the tax form to the payee. For more information, see the IRS [Requirements for Furnishing Information Returns Electronically](https://www.irs.gov/government-entities/federal-state-local-governments/requirements-for-furnishing-form-1099-g-electronically).\n\nYou must deliver tax forms by the first business day on or after January 31st. For postal delivery, tax forms must be postmarked by this date.\n\nTax forms are always delivered to payees the first time they’re filed with a revenue authority. This includes e-filing with the IRS as well as states. If a tax form is both e-filed with the IRS and to a state, it’s only delivered on the first of these events.\n\n## Delivery options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are three options for delivering tax forms:\n\n*   **E-delivery with the Stripe Express Dashboard:** Use the Stripe Express Dashboard to collect e-delivery consent and deliver tax forms.\n*   **E-delivery with Tax Forms API** Beta: Use the Tax Forms API to directly control and manage the entire e-delivery flow.\n*   **Postal delivery:** Use Stripe to send tax forms using postal delivery.\n\n## E-delivery with the Stripe Express Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour connected accounts are eligible to access their e-delivered tax forms through the Express Dashboard if your connected accounts already have access to the Express Dashboard or if you own the full onboarding and management process for your connected accounts. Even if your platform is eligible, some of your connected accounts might not be eligible. Connected accounts that aren’t eligible for hosted e-delivery include:\n\n*   Multi-user accounts\n*   Vendors without a stripe account\n*   Users who have multiple accounts on your platform with the same email address To view a full list of the types of connected accounts that aren’t eligible for e-delivery through the Express Dashboard, see [Which accounts get access to e-delivery](https://docs.stripe.com/connect/express-dashboard-taxes#which-accounts-get-access-to-e-delivery).\n\nConnected account users must provide e-delivery consent to view and download their forms online. The e-delivery consent is applicable to all future electronic deliveries. Enable postal delivery to make sure that eligible accounts receive their tax forms. Consult your tax advisors if you want to completely opt out of paper delivery.\n\n### Prerequisites for using tax form e-delivery ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMake sure that the email address is available and current for the connected accounts on your platform where you own the user experience. You can confirm that an email address for an account is available. Use the following command to view the email address for a connected account:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\   --data-urlencode email=\"jennyrosen@gmail.com\"`\n\n### Turn on e-delivery ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo turn on e-delivery for your account, open the [Tax forms settings](https://dashboard.stripe.com/settings/connect/tax_forms) page in the Dashboard, then choose **Optimize for e-delivery** in the **Delivery settings** section.\n\nAdditionally, you can select the **Have Stripe collect tax information automatically** option to have Stripe email your connected accounts and ask them to update their tax information and delivery preferences. Learn more about [e-delivery for connected accounts](https://docs.stripe.com/connect/platform-express-dashboard-taxes-walkthrough).\n\n### File and deliver 1099 forms ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Express Dashboard is where eligible Connect platforms deliver 1099s to their users. Toward the end of January, when you click file and deliver, your finalized tax forms are automatically sent out to your connected accounts. They’ll receive another email letting them know their tax forms are ready and get a link to download the forms directly from the **Tax forms** tab in the Express App. If a connected account user later consents to e-delivery, it applies only to future years because paper forms were already sent.\n\n![Connect tac forms page showing forms that are ready to download.](https://b.stripecdn.com/docs-statics-srv/assets/connect-tax-form-ready-download.45cd97db253255d3fd8878606e74050c.png)\n\n## E-delivery with Tax Forms API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Beta\n\nThe Tax Forms API is available in limited beta. To request access to the beta, reach out to your account team or contact Stripe for more information. Access is not guaranteed. At this time, we are unable to support additional beta requests for tax year 2023.\n\nYou can use the Tax Forms API to deliver forms to your users directly. With the API, you build and brand the e-delivery flow in your platform and Stripe doesn’t interact with your users directly. You also need to manage the collection of e-delivery consent, how your users access the e-delivered forms, and any user identity changes or corrections that go through your platform.\n\nWe’ll use a fictitious account StripeDelivers, a delivery platform to walk through the API.\n\n### Getting started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe recommends disabling e-delivery and outreach from Stripe — otherwise your users will also have their e-delivered forms accessible through the Stripe Express Dashboard.\n\n### Collect paperless delivery consent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPer [IRS requirements](https://www.irs.gov/government-entities/federal-state-local-governments/requirements-for-furnishing-form-1099-g-electronically), a StripeDelivers account holder who wants to receive tax correspondence electronically instead of by mail must opt out of receiving postal mail. When an account holder provides or revokes consent, the app sends a `POST` request to update the connected account’s tax form settings. If an account holder provides consent, Stripe doesn’t mail a copy of their 1099-K form unless you require postal mailing for all accounts in your [delivery settings](https://docs.stripe.com/connect/tax-form-settings#delivery-method-settings).\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"settings[tax_forms][consented_to_paperless_delivery]\"=true`\n\n### Retrieving tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripeDelivers wants to create a view of a connected account’s filed 1099-K tax forms in their platform’s app, to satisfy the platform’s IRS tax reporting requirement and inform the account holder of their taxable income.\n\nThe developer needs to upload each 1099-K to the platform’s servers to make them available to the view. The app sends a `GET` request for a list of tax forms from Stripe’s Tax Forms API on each user request.\n\n`curl -G https://api.stripe.com/v1/tax/forms \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; retrieve_tax_forms_beta=v1;\" \\   -d type=us_1099_k \\  -d \"payee[account]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\nWhen a user requests a PDF version of the form, the app sends a `GET` request to Stripe’s Files API, caches it, and returns it in the response.\n\n`curl https://files.stripe.com/v1/tax/forms/taxform_123/pdf \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -H \"Stripe-Version: 2022-11-15; retrieve_tax_forms_beta=v1;\" \\   -o \"/tmp/tmp.pdf\"`\n\n### Notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Note\n\nTo receive `tax.form.updated` webhooks, you need to create a webhook endpoint with the Tax Forms API beta `Stripe-Version` header.\n\nStripeDelivers wants to notify an account by email when a form is accepted by the IRS. When StripeDelivers receives a `tax.form.updated` webhook and determines that the form has moved to `accepted`, it sends an email to the user with a download link.\n\n## Postal delivery ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you want to mail your tax forms, you must file by January 23rd, 2024 to guarantee the tax forms are postmarked by January 31st, 2024. You must also provide a valid US return address to comply with USPS guidelines.\n\nYou can use postal delivery for any deliverable address, including PO boxes. For compliance reasons, Stripe doesn’t allow you to set a PO box as the address for a connected account; however, you can use [Tax form editor](https://docs.stripe.com/connect/modify-tax-forms?method=dashboard) or [CSV import](https://docs.stripe.com/connect/modify-tax-forms?method=csv#import-tax-forms) to modify the address on the tax form.\n\nYou may have connected accounts that are only eligible for state filing and not with the IRS. When you use Stripe to file your forms with the IRS and states, Forms 1099 for the state are mailed to these connected accounts after you finish filing.\n\nIf you use CSV import to override the default delivery method, this also affects the state mailing. For example, if you set **postal\\_delivery** to `false`, Stripe doesn’t mail the 1099 form to the connected account for state reporting.",
  "title": "Deliver your 1099 tax forms | Stripe Documentation",
  "description": "Learn about 1099 form delivery requirements and how to deliver your tax forms, including e-delivery and postal delivery.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/handling-api-verification?country=CA&document-type=entity",
  "markdown": "# Handle verification with the API\n\n## Learn how Connect platforms can use webhooks and the API to handle verification of connected accounts.\n\nPlatforms with accounts created using the API can provide Stripe with necessary information about their users for [Know Your Customer](https://support.stripe.com/questions/know-your-customer) (KYC) purposes. Platforms can use [Connect](https://docs.stripe.com/connect \"Connect\") Onboarding to collect KYC information, or use the [Accounts](https://docs.stripe.com/api/accounts) and [Persons](https://docs.stripe.com/api/persons) APIs to provide Stripe with required information. We’ll then perform verification, asking for more information when needed.\n\nThe rest of this page goes through how platforms:\n\n*   Discover verification requirements for a connected account\n*   Provide the necessary information to Stripe\n\n#### Note\n\nYou can’t use the API to respond to Stripe risk reviews. You can enable your connected accounts to respond using embedded components, Stripe-hosted onboarding, or remediation links. You can also use the Dashboard to respond to risk reviews on behalf of your connected accounts.\n\n## Verification process![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore enabling charges and [payouts](https://docs.stripe.com/payouts \"payout\") for a connected account, Stripe needs certain information that varies based on:\n\n*   The origin country of the connected accounts\n*   The [service agreement type](https://docs.stripe.com/connect/service-agreement-types) applicable to the connected accounts\n*   The [capabilities](https://docs.stripe.com/connect/account-capabilities) requested for the connected accounts\n*   The [business type](https://docs.stripe.com/api/accounts/object#account_object-business_type) (for example, individual or company) and [company.structure](https://docs.stripe.com/api/accounts/object#account_object-company-structure) (for example, public corporation or private partnership)\n\nPlatforms need to choose the proper [onboarding flow](https://docs.stripe.com/connect/identity-verification#onboarding-flows) for their business and users to meet the KYC requirements. Broadly speaking, this means providing all the requisite information upfront or incrementally. Either way, set up your integration to watch for and respond to requests from Stripe.\n\n1.  Establish a [Connect webhook](https://docs.stripe.com/connect/webhooks) URL in your [webhook settings](https://dashboard.stripe.com/account/webhooks) to watch for activity, especially events of the `account.updated` type. When using the [Persons API](https://docs.stripe.com/api/persons), you should also watch for `person.updated` events.\n2.  Immediately after creating an account, check the `Account` object’s [requirements.currently\\_due](https://docs.stripe.com/api/accounts/object#account_object-requirements-currently_due) attribute for any additional requirements. Obtain any required information from the user and update the connected account.\n3.  Continue watching for `account.updated` event notifications to see if the `requirements` hash changes, and reach out to your user for additional information as needed.\n\nWhen you provide additional information, you don’t need to resubmit any previously verified details. For example, if the `dob` is already verified, you don’t need to provide it again in subsequent updates.\n\n#### Caution\n\nWhen `requirements.currently_due` isn’t empty, additional information is required. Connected accounts might be blocked from creating charges, receiving payouts, or performing certain tasks if you don’t provide this information in a timely manner.\n\n### Change information after verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter an individual or company is verified, you can [change some of their information](https://docs.stripe.com/connect/update-verified-information), with limitations. See the [Update Account](https://docs.stripe.com/api/accounts/update) API for limitations based on the configuration of the connected account. [Contact support](https://support.stripe.com/contact) to make changes outside of these limitations.\n\n## Determine if verification is needed ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you receive an `account.updated` event to your webhook or [fetch an account](https://docs.stripe.com/api#retrieve_account) with the API, you receive an [Account](https://docs.stripe.com/api/accounts/object) object. The `Account` object’s `charges_enabled` and `payouts_enabled` attributes indicate whether the account can create charges and accept payouts.\n\nThe `Account` object has a `requirements` hash, representing the requirements needed to verify the account.\n\nThe `requirements` hash has the following arrays:\n\n*   `eventually_due`: Fields that you might need to collect, assuming all thresholds are reached. As they become required, they appear in `currently_due` and set the `current_deadline`. All required information starts in this array.\n*   `currently_due`: Fields that you must collect by the `current_deadline` for the connected account to remain enabled. `currently_due` is a subset of `eventually_due`.\n*   `past_due`: Fields you didn’t submit by the deadline, which disabled the connected account. `past_due` is a subset of `currently_due`.\n*   `errors`: The list of reasons why a particular field in `currently_due` or `past_due` must be collected again because validation or verification failed.\n*   `disabled_reason`: Describes why the connected account isn’t enabled.\n*   `current_deadline`: Date by which the fields in `currently_due` must be collected to keep the account enabled. The account may be disabled sooner if the next threshold is reached before the `currently_due` fields are collected.\n*   `pending_verification`: Fields that might become required depending on the results of verification or review. It’s an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending.\n\nThe example below shows what the `requirements` hash might look like for an account that has some information that’s `currently_due`, some information that’s `eventually_due`, and some information that’s raising verification `errors`.\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"requirements\": {       \"disabled_reason\": null,       \"current_deadline\": 1529085600,       \"past_due\": [],       \"currently_due\": [           \"company.tax_id\",           \"company.verification.document\",           \"tos_acceptance.date\",           \"tos_acceptance.ip\"       ],       \"eventually_due\": [           \"company.address.city\",           \"company.address.line1\",           \"company.address.postal_code\",           \"company.address.state\",           \"company.tax_id\",           \"company.verification.document\",           \"external_account\",           \"tos_acceptance.date\",           \"tos_acceptance.ip\"       ],       \"errors\": [           {             \"requirement\": \"company.verification.document\",             \"reason\": \"The company name on the account couldn't be verified. Either update your business name or upload a document containing the business name.\",             \"code\": \"failed_name_match\"           },       ]   },   ... }`\n\nIf `requirements.currently_due` contains entries, check `requirements.current_deadline`. The `current_deadline` is a Unix timestamp identifying when information is needed. Usually, if Stripe doesn’t receive the information by the `current_deadline`, payouts on the account are disabled. However, other consequences might apply in some situations. For example, if payouts are already disabled and the account is unresponsive to our inquiries, Stripe might also disable the ability to process charges.\n\nSeparately, the [requirements.disabled\\_reason](https://docs.stripe.com/api/accounts/object#account_object-requirements-disabled_reason) property can have a value. The value is a string describing the reason why this account is unable to make payouts or charges. In some instances, platforms and connected accounts can submit a form to resolve or appeal the reason.\n\n*   Connected accounts with access to the full Stripe Dashboard and Standard accounts can access additional information (if available) in the Dashboard.\n*   Platforms in any Connect configuration can navigate to [Accounts to review](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) to understand an account’s `disabled_reason`. You might be able to provide additional information on behalf of your connected accounts. If the disabled reason is associated with an appeal, you can generate a link to a form for the account to resolve the appeal.\n\n| Reason | Meaning |\n| --- | --- |\n| `action_required.requested_capabilities` | You need to request capabilities for the connected account. For details, see [Request and unrequest capabilities](https://docs.stripe.com/connect/account-capabilities#requesting-unrequesting). |\n| `listed` | Account might be on a prohibited persons or companies list (Stripe investigates and either rejects or reinstates the account accordingly). |\n| `rejected.fraud` | Account is rejected due to suspected fraud or illegal activity. |\n| `rejected.incomplete_verification` | The account is rejected from incomplete verification requirements within the required threshold. |\n| `rejected.listed` | Account is rejected because it’s on a third-party prohibited persons or companies list (such as financial services provider or government). |\n| `rejected.other` | Account is rejected for another reason. |\n| `rejected.terms_of_service` | Account is rejected due to suspected terms of service violations. |\n| `requirements.past_due` | Additional verification information is required to enable capabilities on this account. |\n| `requirements.pending_verification` | Stripe is currently verifying information on the connected account. No action is required. Inspect the [requirements.pending\\_verification](https://docs.stripe.com/api/accounts/object#account_object-requirements-pending_verification) array to see the information being verified. |\n| `under_review` | The account is under review by Stripe. |\n\n## Validation and verification errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Account](https://docs.stripe.com/api/accounts/object) object includes a [requirements.errors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors) array that explains why the validation or verification requirements haven’t been met, which are needed to enable your account and capabilities. The `errors` array has the following attributes:\n\n*   `requirement`: Specifies which information from the `currently_due` array is needed.\n*   `code`: Indicates the type of error that occurred. See the [API reference](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors-code) for all possible error codes.\n*   `reason`: Explains why the error occurred and how to resolve the error.\n\nBelow is an example that shows what the `errors` array might look like for an account with requirements that are `currently_due`. The example shows the reason why the submitted information can’t be used to enable the account, and how to resolve the error. If verification or validation is unsuccessful, requirements can reappear in `currently_due` with error information. Set a [Connect webhook](https://docs.stripe.com/connect/webhooks) to receive the `account.updated` event to receive these updates.\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"requirements\": {       \"current_deadline\": 1234567800,       \"currently_due\": [           \"company.address.line1\",           \"{{PERSON_ID}}.verification.document\",       ],       \"errors\": [           {             \"requirement\": \"company.address.line1\",             \"code\": \"invalid_street_address\",             \"reason\": \"The provided street address cannot be found. Please verify the street name and number are correct in \\\"10 Downing Street\\\"\",           },           {             \"requirement\": \"{{PERSON_ID}}.verification.document\",             \"code\": \"verification_document_failed_greyscale\",             \"reason\": \"Greyscale documents cannot be read. Please upload a color copy of the document.\",           }       ]   },   ... }`\n\nIf verification or validation is unsuccessful but no requirements are currently due, a webhook triggers indicating that required information is eventually due.\n\n## Business information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen information about a business is submitted, Stripe verifies the new information. For example, Stripe might verify that the provided business URL is valid, reachable, and includes information about the business. To retrieve the status of verification information regarding a business, utilize the `requirements` on the Account object.\n\nBelow is a list of errors related to business information verification:\n\n| Error | Resolution |\n| --- | --- |\n| `invalid_business_profile_name` | Business names must be easy for people to understand and must consist of recognizable words. |\n| `invalid_business_profile_name_denylisted` | Generic or well-known business names aren’t supported. Make sure the provided business name matches the account’s business. |\n| `invalid_product_description_length` | A product description must be at least 10 characters. |\n| `invalid_product_description_url_match` | A product description must be different from the URL of the business. |\n| `invalid_url_denylisted`<br><br>`invalid_url_format`<br><br>`invalid_url_web_presence_detected`<br><br>`invalid_url_website_business_information_mismatch`<br><br>`invalid_url_website_empty`<br><br>`invalid_url_website_inaccessible`<br><br>`invalid_url_website_inaccessible_geoblocked`<br><br>`invalid_url_website_inaccessible_password_protected`<br><br>`invalid_url_website_incomplete`<br><br>`invalid_url_website_incomplete_cancellation_policy`<br><br>`invalid_url_website_incomplete_customer_service_details`<br><br>`invalid_url_website_incomplete_legal_restrictions`<br><br>`invalid_url_website_incomplete_refund_policy`<br><br>`invalid_url_website_incomplete_return_policy`<br><br>`invalid_url_website_incomplete_terms_and_conditions`<br><br>`invalid_url_website_incomplete_under_construction`<br><br>`invalid_url_website_other` | See [handling URL verification errors](#url-verification) below. |\n\n## Statement descriptors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe validates the statement descriptor and statement descriptor prefix when [set on an account](https://docs.stripe.com/connect/statement-descriptors). For example, Stripe might verify that the provided statement descriptor matches the description of the business. When validating the statement descriptor matches the business description, Stripe uses the first 22 characters of the statement descriptor, representing the part that is provided to the card networks. A business description is a close match of the account’s `business_profile.name`, `business_profile.url`, or the name of the company or individual.\n\nTo retrieve the status of verification information regarding statement descriptors, review the `requirements` on the Account object. Below is a list of errors related to statement descriptor verification:\n\n| Error | Resolution |\n| --- | --- |\n| `invalid_statement_descriptor_length` | A statement descriptor must be at least 5 characters. |\n| `invalid_statement_descriptor_business_mismatch` | A statement descriptor must be similar to the business name, legal entity name, or URL of the account. |\n| `invalid_statement_descriptor_denylisted`<br><br>`invalid_statement_descriptor_prefix_denylisted` | Generic or well-known statement descriptors aren’t supported. |\n| `invalid_statement_descriptor_prefix_mismatch` | The statement descriptor prefix must be similar to your statement descriptor, business name, legal entity name, or URL. |\n\n## Person information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDuring the verification process, information about the persons associated with an account needs to be collected. If you onboard:\n\n*   Only companies, use the [Persons](https://docs.stripe.com/api/persons) API to collect this information.\n*   Only individuals, you can use the [Persons](https://docs.stripe.com/api/persons) API or the [individual](https://docs.stripe.com/api/accounts/object#account_object-individual) hash on the Account object.\n*   A combination of individuals and companies, use the [Persons](https://docs.stripe.com/api/persons) API to collect this information. This way you collect information in the same manner regardless of business type.\n\nTo retrieve the status of verification information regarding a person, utilize the Person object’s [verification](https://docs.stripe.com/api/persons/object#person_object-verification) subhash:\n\n`{   \"id\":` \n\n`\"{{PERSON_ID}}\"`\n\n`,   \"object\": \"person\",   ...   \"verification\": {     \"document\": null   }   ... }`\n\nYou can look up the definition for each verification attribute on the [Person](https://docs.stripe.com/api/persons/object#person_object-verification) object. The two attributes worth noting are `status` and `details`.\n\n`status` indicates the state of verification for the person:\n\n*   `pending`: Stripe is currently trying to verify this entity.\n*   `unverified`: Stripe isn’t able to verify this entity right now, either because verification has failed or because we don’t have enough information to attempt verification.\n*   `verified`: Stripe has successfully verified this entity.\n\nNote that an `unverified` status isn’t necessarily an urgent issue, but it does mean that Stripe might request more information soon.\n\nThe `details` attribute provides an explanation for the current `status`.\n\nBelow is a list of errors related to person verification:\n\n| Error | Resolution |\n| --- | --- |\n| `invalid_address_city_state_postal_code` | Stripe couldn’t validate the combination of the city, state, and postal code in the provided address. |\n| `invalid_address_highway_contract_box` | The address of the person must be a valid physical address from which the account conducts business and can’t be a Highway Contract Box. |\n| `invalid_address_private_mailbox` | The address of the person must be a valid physical address from which the account conducts business and can’t be a private mailbox. |\n| `invalid_dob_age_under_minimum` | The person must be at least 13 years old. |\n| `invalid_dob_age_over_maximum` | The person’s date of birth must be within the past 120 years. |\n| `invalid_phone_number` | Stripe couldn’t validate the phone number on the account. Make sure the formatting matches the country of the person. |\n| `invalid_street_address` | Stripe couldn’t validate the street name and/or number for the provided address. |\n| `invalid_tax_id`<br><br>`invalid_tax_id_format` | Tax IDs must be a unique set of 9 numbers without dashes or other special characters. |\n\n## Acceptable verification documents by country ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSee the following list of documents that Stripe accepts as proof of identity, address, and entity for each country Stripe supports.\n\n## Common requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The format must be no more than one step removed from the original document:\n    *   Document copies and scans must be in PDF format and taken directly from the original document; they can’t be processed, converted, or embedded in other files\n    *   A picture of a physical document must be the original, unprocessed picture in JPEG or PNG format\n    *   Screenshots aren’t acceptable\n*   When the back side of a document contains required information, and you submit it using the API, include an image of the back side using the `document_back` parameter\n*   Photos and scans must be in color\n*   Images must not be low-quality\n*   Identity and legal entity documents must not be expired\n*   Documents must be readable and in a valid upload file format\n*   Documents must not be cropped or missing pages with crucial information, and all borders must be visible\n*   If the country of residence differs from the country of the account, a passport is required for identity verification\n\n## Select a country to view its requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAcceptable forms of legal entity verification:\n\n*   çertifikatë regjistrimi (Business registration certificate)\n*   LICENCË (Business license)\n\nRequired information:\n\n*   Full company legal entity name that matches the legal entity name in your Stripe profile\n*   Tax ID from the local tax authority that matches what’s in your Stripe profile\n*   Company address that matches what’s in your Stripe profile\n\n### Support articles![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Company information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDuring the verification process, you might need to collect information about the company for an account.\n\nTo retrieve the status of verification information regarding an account’s company, use the Account’s [company.verification](https://docs.stripe.com/api/accounts/object#account_object-company-verification) subhash:\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   ...   \"company\": {     \"verification\": {       \"document\": null     },     ...   },   ... }`\n\nYou can look up the definition for each verification attribute on the [Account](https://docs.stripe.com/api/accounts/object#account_object-company-verification) object.\n\n## Handle document verification problems![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMany complications with the verification process involve the uploaded document itself. To help you recognize and handle the most common problems, the table below lists possible values for the error `code` (in the `requirements.errors` array) and the likely resolutions for each error.\n\nBelow is a list of errors related to document upload:\n\n| Error | Resolution |\n| --- | --- |\n| `verification_document_corrupt`<br><br>`verification_document_failed_copy`<br><br>`verification_document_failed_greyscale`<br><br>`verification_document_incomplete`<br><br>`verification_document_not_readable`<br><br>`verification_document_not_uploaded`<br><br>`verification_document_not_signed`<br><br>`verification_document_missing_back`<br><br>`verification_document_missing_front`<br><br>`verification_document_too_large` | The upload failed due to a problem with the file itself. Ask your user to provide a new file that meets these requirements:<br><br>*   Color image (8,000 pixels by 8,000 pixels or smaller)<br>*   10 MB or less<br>*   Identity documents are JPG or PNG format<br>*   Address or legal entity documents are JPG, PNG, or PDF format<br>*   Legal entity documents must include all pages<br>*   Must not be password protected |\n| `verification_document_country_not_supported`<br><br>`verification_document_invalid`<br><br>`verification_document_type_not_supported` | The provided file isn’t an acceptable form of ID from a supported country, or isn’t a type of legal entity document that is expected. Ask your user to provide a new file that meets that requirement. For a list, see [Acceptable ID types by country](#acceptable-verification-documents). |\n| `verification_failed_other`<br><br>`verification_document_failed_other` | Your team can contact Stripe to learn more about why identity verification failed. |\n| `verification_document_expired`<br><br>`verification_document_issue_or_expiry_date_missing` | The issue or expiry date is missing on the document, or the document is expired. If it’s an identity document, its expiration date must be after the date the document was submitted. If it’s an address document, the issue date must be within the last six months. |\n\nBelow is a list of errors related to identity verification:\n\n| Error | Resolution |\n| --- | --- |\n| `verification_failed_keyed_identity` | The name on the account couldn’t be verified. Ask your user to verify that they have provided their full legal name and to also provide a photo ID matching that name. |\n| `verification_document_name_mismatch`<br><br>`verification_document_dob_mismatch`<br><br>`verification_document_address_mismatch`<br><br>`verification_document_id_number_mismatch`<br><br>`verification_document_photo_mismatch` | The information on the ID document doesn’t match the information provided by the user. Ask your user to verify and correct the provided information on the account. |\n| `verification_document_fraudulent`<br><br>`verification_document_manipulated` | The document might have been altered so it couldn’t be verified. Your team can contact Stripe to learn more. |\n\nBelow is a list of errors related to business verification:\n\n| Error | Resolution |\n| --- | --- |\n| `verification_failed_keyed_match`<br><br>`verification_failed_document_match` | The information on the account couldn’t be verified. Your user can either upload a document to confirm their account details, or update their information on their account. |\n| `verification_failed_tax_id_not_issued`<br><br>`verification_failed_tax_id_match` | The information that your user provided couldn’t be verified with the IRS. Ask your user to correct any possible errors in the company name or tax ID, or upload a document that contains those fields. (US only) |\n| `verification_failed_id_number_match`<br><br>`verification_failed_name_match`<br><br>`verification_failed_address_match` | The information on the document doesn’t match the information provided by the user. Ask your user to verify and correct the provided information on the account, or upload a document with information that matches the account. |\n| `verification_document_address_missing`<br><br>`verification_document_id_number_missing`<br><br>`verification_document_name_missing` | The uploaded document is missing a required field. Ask your user to upload another document that contains the missing field. |\n\n#### Caution\n\nDon’t resubmit a file that previously failed. Duplicate uploads immediately trigger an error and aren’t rechecked.\n\n## Handle URL verification errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nURLs for e-commerce businesses need to conform to certain card network standards. See the [website checklist](https://docs.stripe.com/get-started/checklist/website) for best practices for URLs and common elements for e-commerce businesses. Stripe conducts a number of verifications for URL integrity. There are two methods to resolve URL integrity errors:\n\n*   **Using the API** - Use the error code to handle the URL issue. If you need to update the URL, use the [Update Account](https://docs.stripe.com/api/accounts/update) API, which also causes Stripe to verify the updated URL. If you don’t have to update the URL, Stripe still needs to clear the error by verifying the URL again. After you make any other required updates, trigger reverification by using the API to change the URL to any other value and then change it back.\n*   **Using the Dashboard** - Platforms can use the [Accounts to review](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) page in the Stripe Dashboard to understand the impact to their connected accounts and what actions to take.\n\nNot all URL-related issues can be resolved using the API. Certain types of URL integrity errors require additional information on how to access the connected account’s webpage or to attest that the account is exempt from URL requirements. These types of issues require that you or your connected account provide supplemental information. Visit your [Accounts to review](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) page to resolve the error, or direct your connected account to [contact Stripe Support](https://support.stripe.com/contact).\n\n#### Note\n\nStripe’s Terms of Service requires all e-commerce businesses to populate the [business\\_profile.url](https://docs.stripe.com/api/accounts/object#account_object-business_profile-url) property with a working URL of their business website when activating an account with the `card_payments` capability. An account is considered an e-commerce business if it promotes or sells any products or services through an online website, social media profile, or mobile application. If the account doesn’t operate a website to promote their business, sell products, or accept payments, they’re required to provide [business\\_profile.product\\_description](https://docs.stripe.com/api/accounts/object#account_object-business_profile-product_description) instead. A product description needs to detail the type of products being sold as well as the manner in which the account’s customers are being charged (i.e. in person transactions).\n\nTo help you handle the most common errors associated with the `business_profile.url` field, the following table lists the related error codes (in the `requirements.errors` array) and possible resolutions.\n\n| Error | Resolution |\n| --- | --- |\n| `invalid_url_denylisted` | The URL provided for the account matches a generic business website URL. A URL that is specific to the business of the account must be provided. |\n| `invalid_url_format` | The URL provided for the account is in the incorrect format. A URL in a correct format must be provided, such as `https://example.com`. |\n| `invalid_url_website_inaccessible` | We can’t reach the website at the URL provided for the account. To resolve this issue, update the account with a reachable URL. If the problem persists, go to your [Accounts to review Dashboard page](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) and respond to the intervention in the **Actions required** list or contact Stripe support. |\n| `invalid_url_website_business_information_mismatch` | Information on the account’s website does not match information on the account’s Stripe account. Please view your Accounts to review page in the Dashboard or the account must make sure that the information on the website matches the account’s business. |\n| `invalid_url_website_incomplete` | The account’s website seems to be missing some required information. Learn more about [the information a website must include](https://support.stripe.com/questions/information-required-on-your-business-website-to-use-stripe). |\n| `invalid_url_website_other` | We’re unable to verify the account’s business using the URL of the website, social media profile, or mobile application provided. A new URL must be provided. View your Accounts to review page or the account must contact Stripe support if no URL exists. |\n| `invalid_url_web_presence_detected` | We have detected that the account uses a website, social media profile, or mobile application to sell or promote products or services, but a URL hasn’t been provided for the account. The account should have a URL that isn’t a generic URL for the website or social media provider. |\n| `invalid_url_website_incomplete_customer_service_details` | The account’s website doesn’t contain customer service details, which are required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add these details to its website. |\n| `invalid_url_website_incomplete_return_policy` | The account’s website doesn’t contain a return policy and process, which are required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add a return policy and process to its website. |\n| `invalid_url_website_incomplete_refund_policy` | The account’s website doesn’t contain a refund policy, which is required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add a refund policy to its website. |\n| `invalid_url_website_incomplete_cancellation_policy` | The account’s website doesn’t contain a cancellation policy, which is required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add a cancellation policy to its website. |\n| `invalid_url_website_incomplete_legal_restrictions` | The account’s website suggests that it’s selling goods that have either legal or export restrictions. View your Accounts to review page or the account must remove those goods from its website. |\n| `invalid_url_website_incomplete_terms_and_conditions` | The account’s website doesn’t contain terms and conditions, which are required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add terms and conditions to its website. |\n| `invalid_url_website_incomplete_under_construction` | The account’s website is under construction. Please view your Accounts to review page in the Dashboard or the account must complete construction of its website. |\n| `invalid_url_website_inaccessible_password_protected` | The account’s website is password-protected. Please view your Accounts to review page in the Dashboard or the account must contact Stripe Support with instructions to access the website. |\n| `invalid_url_website_inaccessible_geoblocked` | Stripe couldn’t access the account’s website because it is geoblocked. Please view your Accounts to review page in the Dashboard or the account must contact Stripe Support with instructions to access the website. |\n| `invalid_url_website_empty` | The account’s website doesn’t have any content. Please view your Accounts to review page in the Dashboard or the account must add content that represents its products and services. |\n\n## Handle identity verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can respond in two ways to an identity verification change. The first is to perform an [Update Account](https://docs.stripe.com/connect/updating-service-agreements) call, correcting or adding information.\n\nSecondarily, we might ask you to upload a document. Depending on how much of the user’s information Stripe has been able to verify, we might require three different types of document uploads. You can determine what documents to upload based on the fields listed in `requirements.currently_due`:\n\n*   `person.verification.document`: Requires a color scan or photo of an acceptable form of ID.\n*   `person.verification.additional_document`: Requires a color scan or photo of a document verifying the user’s address, such as a utility bill.\n*   `company.verification.document`: Requires a proof of entity document establishing the business’ entity ID number, such as the company’s articles of incorporation.\n\nUploading a document is a two-step process:\n\n1.  Upload the file to Stripe\n2.  Attach the file to the account\n\n#### Note\n\nFor security reasons, Stripe doesn’t accept copies of IDs sent by email.\n\n### Upload a file ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo upload a file, use the [Create File](https://docs.stripe.com/api/files/create) API by using a POST to send the file data as part of a multipart/form-data request.\n\nThe uploaded file must meet these requirements:\n\n*   Color image (8,000 pixels by 8,000 pixels or smaller)\n*   10 MB or less\n*   Identity documents are JPG or PNG format\n*   Address or legal entity documents are JPG, PNG, or PDF format\n\nPass the file data in the `file` parameter and set the `purpose` parameter to `identity_document`:\n\n`curl https://files.stripe.com/v1/files \\   -u` \n\n`sk_test_Hrs6SAopgFPF0bZXSN3f6ELN`\n\n`: \\   -H \"Stripe-Account: {{CONNECTED_STRIPE_ACCOUNT_ID}}\" \\   -F \"purpose\"=\"identity_document\" \\   -F \"file\"=\"@/path/to/a/file\"`\n\nThis request uploads the file and returns a token:\n\n`{   \"id\":` \n\n`\"{{FILE_ID}}\"`\n\n`,   \"created\": 1403047735,   \"size\": 4908 }`\n\nYou may then use the token’s `id` value to attach the file to a connected account for identity verification.\n\n### Attach the file ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you upload the file and receive a representative token, provide the file ID using the appropriate field in your [Update Account](https://docs.stripe.com/connect/updating-service-agreements) call.\n\nBelow is an example for an ID document:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n`/persons/  {{PERSON_ID}}   \\  -u \"  sk_test_Hrs6SAopgFPF0bZXSN3f6ELN  :\" \\  -d \"verification[document][front]\"=  {{FILE_ID}}    `\n\nBelow is an example for a company document:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_Hrs6SAopgFPF0bZXSN3f6ELN  :\" \\  -d \"company[verification][document][front]\"=  {{FILE_ID}}`\n\nThis update changes `verification.status` to `pending`. If an additional person needs to be verified, use the [Persons](https://docs.stripe.com/api/persons) API to update them.\n\n### Confirm ID verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf the color scan or photo of the ID passes Stripe’s checks, the document requirement is removed from `requirements.currently_due`. Satisfying all verification requirements for the person or company triggers an `account.updated` webhook notification signaling the verification process is complete.\n\nVerification can take Stripe from a few minutes, to a couple business days to complete, depending on how readable the provided image is.\n\nIf the verification attempt fails, the `requirements.errors` array contains an error stating the cause. The `error[reason]`, such as “The image supplied isn’t readable,” is safe to present to your user, but isn’t localized. The response also contains an `error[code]` value, such as `verification_document_not_readable`, which you can use to localize errors for your users. Upon failure, `requirements.currently_due` indicates that a new ID upload is required. If the deadline for verification is near, `requirements.current_deadline` might also be populated with a date. Verification failure also triggers an `account.updated` webhook notification.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Update service agreements](https://docs.stripe.com/connect/updating-service-agreements)\n*   [File upload guide](https://docs.stripe.com/file-upload)\n*   [Identity verification for connected accounts](https://docs.stripe.com/connect/identity-verification)\n*   [Account tokens](https://docs.stripe.com/connect/account-tokens)\n*   [Testing Connect](https://docs.stripe.com/connect/testing)\n*   [Testing account identity verification](https://docs.stripe.com/connect/testing-verification)\n*   [Required verification information](https://docs.stripe.com/connect/required-verification-information)",
  "title": "Handle verification with the API | Stripe Documentation",
  "description": "Learn how Connect platforms can use webhooks and the API to handle verification of connected accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/persons/object",
  "markdown": "# The Person object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The account the person is associated with.\n    \n\n*   The person’s date of birth.\n    \n*   The person’s email address.\n    \n*   #### \n    \n    first\\_namenullable string\n    \n    The person’s first name.\n    \n*   The person’s last name.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The person’s phone number.\n    \n*   Describes the person’s relationship to the account.\n    \n*   #### \n    \n    requirementsnullable object\n    \n    Information about the requirements for this person, including what information needs to be collected, and by when.\n    \n\n### More attributes\n\n*   #### \n    \n    additional\\_tos\\_acceptancesobject\n    \n*   #### \n    \n    address\\_kananullable object\n    \n*   #### \n    \n    address\\_kanjinullable object\n    \n\n*   #### \n    \n    first\\_name\\_kananullable string\n    \n*   #### \n    \n    first\\_name\\_kanjinullable string\n    \n*   #### \n    \n    full\\_name\\_aliasesnullable array of strings\n    \n*   #### \n    \n    future\\_requirementsnullable object\n    \n\n*   #### \n    \n    id\\_number\\_providedboolean\n    \n*   #### \n    \n    id\\_number\\_secondary\\_providednullable boolean\n    \n*   #### \n    \n    last\\_name\\_kananullable string\n    \n*   #### \n    \n    last\\_name\\_kanjinullable string\n    \n*   #### \n    \n    maiden\\_namenullable string\n    \n*   #### \n    \n    nationalitynullable string\n    \n*   #### \n    \n    political\\_exposurenullable enum\n    \n*   #### \n    \n    registered\\_addressnullable object\n    \n*   #### \n    \n    ssn\\_last\\_4\\_providedboolean\n    \n\n## [Create a person](https://docs.stripe.com/api/persons/create)\n\nCreates a new person.\n\n### Parameters\n\n*   The person’s date of birth.\n    \n*   The person’s email address.\n    \n*   The person’s first name.\n    \n*   The person’s ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).\n    \n*   The person’s last name.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The person’s phone number.\n    \n*   The relationship that this person has with the account’s legal entity.\n    \n*   The last four digits of the person’s Social Security number (U.S. only).\n    \n\n### More parameters\n\n*   #### \n    \n    additional\\_tos\\_acceptancesobject\n    \n\n*   #### \n    \n    full\\_name\\_aliasesarray of strings\n    \n\n*   #### \n    \n    id\\_number\\_secondarystring\n    \n\n### Returns\n\nReturns a person object.\n\nPOST /v1/accounts/:id/persons\n\n```\ncurl -X POST https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"person_1N9XNb2eZvKYlo2CjPX7xF6F\",  \"object\": \"person\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"created\": 1684518375,  \"dob\": {    \"day\": null,    \"month\": null,    \"year\": null  },  \"first_name\": null,  \"future_requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"id_number_provided\": false,  \"last_name\": null,  \"metadata\": {},  \"relationship\": {    \"director\": false,    \"executive\": false,    \"owner\": false,    \"percent_ownership\": null,    \"representative\": false,    \"title\": null  },  \"requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"ssn_last_4_provided\": false,  \"verification\": {    \"additional_document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"details\": null,    \"details_code\": null,    \"document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"status\": \"unverified\"  }}\n```\n\n## [Update a person](https://docs.stripe.com/api/persons/update)\n\nUpdates an existing person.\n\n### Parameters\n\n*   The person’s date of birth.\n    \n*   The person’s email address.\n    \n*   The person’s first name.\n    \n*   The person’s ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).\n    \n*   The person’s last name.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The person’s phone number.\n    \n*   The relationship that this person has with the account’s legal entity.\n    \n*   The last four digits of the person’s Social Security number (U.S. only).\n    \n\n### More parameters\n\n*   #### \n    \n    additional\\_tos\\_acceptancesobject\n    \n\n*   #### \n    \n    full\\_name\\_aliasesarray of strings\n    \n\n*   #### \n    \n    id\\_number\\_secondarystring\n    \n\n### Returns\n\nReturns a person object.\n\nPOST /v1/accounts/:id/persons/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons/person_1MqjB62eZvKYlo2CaeEJzKVR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",  \"person\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",  \"object\": \"person\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"created\": 1680035496,  \"dob\": {    \"day\": null,    \"month\": null,    \"year\": null  },  \"first_name\": \"Jane\",  \"future_requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"id_number_provided\": false,  \"last_name\": \"Diaz\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"relationship\": {    \"director\": false,    \"executive\": false,    \"owner\": false,    \"percent_ownership\": null,    \"representative\": false,    \"title\": null  },  \"requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"ssn_last_4_provided\": false,  \"verification\": {    \"additional_document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"details\": null,    \"details_code\": null,    \"document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"status\": \"unverified\"  }}\n```\n\n## [Retrieve a person](https://docs.stripe.com/api/persons/retrieve)\n\nRetrieves an existing person.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a person object.\n\nGET /v1/accounts/:id/persons/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons/person_1MqjB62eZvKYlo2CaeEJzKVR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"person_1N9XNb2eZvKYlo2CjPX7xF6F\",  \"object\": \"person\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"created\": 1684518375,  \"dob\": {    \"day\": null,    \"month\": null,    \"year\": null  },  \"first_name\": null,  \"future_requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"id_number_provided\": false,  \"last_name\": null,  \"metadata\": {},  \"relationship\": {    \"director\": false,    \"executive\": false,    \"owner\": false,    \"percent_ownership\": null,    \"representative\": false,    \"title\": null  },  \"requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"ssn_last_4_provided\": false,  \"verification\": {    \"additional_document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"details\": null,    \"details_code\": null,    \"document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"status\": \"unverified\"  }}\n```\n\n## [List all persons](https://docs.stripe.com/api/persons/list)\n\nReturns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.\n\n### Parameters\n\n*   Filters on the list of people returned based on the person’s relationship to the account’s company.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` people, starting after person `starting_after`. Each entry in the array is a separate person object. If no more people are available, the resulting array will be empty.\n\nGET /v1/accounts/:id/persons\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/persons\",  \"has_more\": false,  \"data\": [    {      \"id\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",      \"person\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",      \"object\": \"person\",      \"account\": \"acct_1032D82eZvKYlo2C\",      \"created\": 1680035496,      \"dob\": {        \"day\": null,        \"month\": null,        \"year\": null      },      \"first_name\": \"Jane\",      \"future_requirements\": {        \"alternatives\": [],        \"currently_due\": [],        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"id_number_provided\": false,      \"last_name\": \"Diaz\",      \"metadata\": {},      \"relationship\": {        \"director\": false,        \"executive\": false,        \"owner\": false,        \"percent_ownership\": null,        \"representative\": false,        \"title\": null      },      \"requirements\": {        \"alternatives\": [],        \"currently_due\": [],        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"ssn_last_4_provided\": false,      \"verification\": {        \"additional_document\": {          \"back\": null,          \"details\": null,          \"details_code\": null,          \"front\": null        },        \"details\": null,        \"details_code\": null,        \"document\": {          \"back\": null,          \"details\": null,          \"details_code\": null,          \"front\": null        },        \"status\": \"unverified\"      }    }    {...}    {...}  ],}\n```",
  "title": "The Person object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/payment_intents",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/connect/handling-api-verification?country=CA&document-type=identity",
  "markdown": "# Handle verification with the API\n\n## Learn how Connect platforms can use webhooks and the API to handle verification of connected accounts.\n\nPlatforms with accounts created using the API can provide Stripe with necessary information about their users for [Know Your Customer](https://support.stripe.com/questions/know-your-customer) (KYC) purposes. Platforms can use [Connect](https://docs.stripe.com/connect \"Connect\") Onboarding to collect KYC information, or use the [Accounts](https://docs.stripe.com/api/accounts) and [Persons](https://docs.stripe.com/api/persons) APIs to provide Stripe with required information. We’ll then perform verification, asking for more information when needed.\n\nThe rest of this page goes through how platforms:\n\n*   Discover verification requirements for a connected account\n*   Provide the necessary information to Stripe\n\n#### Note\n\nYou can’t use the API to respond to Stripe risk reviews. You can enable your connected accounts to respond using embedded components, Stripe-hosted onboarding, or remediation links. You can also use the Dashboard to respond to risk reviews on behalf of your connected accounts.\n\n## Verification process![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore enabling charges and [payouts](https://docs.stripe.com/payouts \"payout\") for a connected account, Stripe needs certain information that varies based on:\n\n*   The origin country of the connected accounts\n*   The [service agreement type](https://docs.stripe.com/connect/service-agreement-types) applicable to the connected accounts\n*   The [capabilities](https://docs.stripe.com/connect/account-capabilities) requested for the connected accounts\n*   The [business type](https://docs.stripe.com/api/accounts/object#account_object-business_type) (for example, individual or company) and [company.structure](https://docs.stripe.com/api/accounts/object#account_object-company-structure) (for example, public corporation or private partnership)\n\nPlatforms need to choose the proper [onboarding flow](https://docs.stripe.com/connect/identity-verification#onboarding-flows) for their business and users to meet the KYC requirements. Broadly speaking, this means providing all the requisite information upfront or incrementally. Either way, set up your integration to watch for and respond to requests from Stripe.\n\n1.  Establish a [Connect webhook](https://docs.stripe.com/connect/webhooks) URL in your [webhook settings](https://dashboard.stripe.com/account/webhooks) to watch for activity, especially events of the `account.updated` type. When using the [Persons API](https://docs.stripe.com/api/persons), you should also watch for `person.updated` events.\n2.  Immediately after creating an account, check the `Account` object’s [requirements.currently\\_due](https://docs.stripe.com/api/accounts/object#account_object-requirements-currently_due) attribute for any additional requirements. Obtain any required information from the user and update the connected account.\n3.  Continue watching for `account.updated` event notifications to see if the `requirements` hash changes, and reach out to your user for additional information as needed.\n\nWhen you provide additional information, you don’t need to resubmit any previously verified details. For example, if the `dob` is already verified, you don’t need to provide it again in subsequent updates.\n\n#### Caution\n\nWhen `requirements.currently_due` isn’t empty, additional information is required. Connected accounts might be blocked from creating charges, receiving payouts, or performing certain tasks if you don’t provide this information in a timely manner.\n\n### Change information after verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter an individual or company is verified, you can [change some of their information](https://docs.stripe.com/connect/update-verified-information), with limitations. See the [Update Account](https://docs.stripe.com/api/accounts/update) API for limitations based on the configuration of the connected account. [Contact support](https://support.stripe.com/contact) to make changes outside of these limitations.\n\n## Determine if verification is needed ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you receive an `account.updated` event to your webhook or [fetch an account](https://docs.stripe.com/api#retrieve_account) with the API, you receive an [Account](https://docs.stripe.com/api/accounts/object) object. The `Account` object’s `charges_enabled` and `payouts_enabled` attributes indicate whether the account can create charges and accept payouts.\n\nThe `Account` object has a `requirements` hash, representing the requirements needed to verify the account.\n\nThe `requirements` hash has the following arrays:\n\n*   `eventually_due`: Fields that you might need to collect, assuming all thresholds are reached. As they become required, they appear in `currently_due` and set the `current_deadline`. All required information starts in this array.\n*   `currently_due`: Fields that you must collect by the `current_deadline` for the connected account to remain enabled. `currently_due` is a subset of `eventually_due`.\n*   `past_due`: Fields you didn’t submit by the deadline, which disabled the connected account. `past_due` is a subset of `currently_due`.\n*   `errors`: The list of reasons why a particular field in `currently_due` or `past_due` must be collected again because validation or verification failed.\n*   `disabled_reason`: Describes why the connected account isn’t enabled.\n*   `current_deadline`: Date by which the fields in `currently_due` must be collected to keep the account enabled. The account may be disabled sooner if the next threshold is reached before the `currently_due` fields are collected.\n*   `pending_verification`: Fields that might become required depending on the results of verification or review. It’s an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending.\n\nThe example below shows what the `requirements` hash might look like for an account that has some information that’s `currently_due`, some information that’s `eventually_due`, and some information that’s raising verification `errors`.\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"requirements\": {       \"disabled_reason\": null,       \"current_deadline\": 1529085600,       \"past_due\": [],       \"currently_due\": [           \"company.tax_id\",           \"company.verification.document\",           \"tos_acceptance.date\",           \"tos_acceptance.ip\"       ],       \"eventually_due\": [           \"company.address.city\",           \"company.address.line1\",           \"company.address.postal_code\",           \"company.address.state\",           \"company.tax_id\",           \"company.verification.document\",           \"external_account\",           \"tos_acceptance.date\",           \"tos_acceptance.ip\"       ],       \"errors\": [           {             \"requirement\": \"company.verification.document\",             \"reason\": \"The company name on the account couldn't be verified. Either update your business name or upload a document containing the business name.\",             \"code\": \"failed_name_match\"           },       ]   },   ... }`\n\nIf `requirements.currently_due` contains entries, check `requirements.current_deadline`. The `current_deadline` is a Unix timestamp identifying when information is needed. Usually, if Stripe doesn’t receive the information by the `current_deadline`, payouts on the account are disabled. However, other consequences might apply in some situations. For example, if payouts are already disabled and the account is unresponsive to our inquiries, Stripe might also disable the ability to process charges.\n\nSeparately, the [requirements.disabled\\_reason](https://docs.stripe.com/api/accounts/object#account_object-requirements-disabled_reason) property can have a value. The value is a string describing the reason why this account is unable to make payouts or charges. In some instances, platforms and connected accounts can submit a form to resolve or appeal the reason.\n\n*   Connected accounts with access to the full Stripe Dashboard and Standard accounts can access additional information (if available) in the Dashboard.\n*   Platforms in any Connect configuration can navigate to [Accounts to review](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) to understand an account’s `disabled_reason`. You might be able to provide additional information on behalf of your connected accounts. If the disabled reason is associated with an appeal, you can generate a link to a form for the account to resolve the appeal.\n\n| Reason | Meaning |\n| --- | --- |\n| `action_required.requested_capabilities` | You need to request capabilities for the connected account. For details, see [Request and unrequest capabilities](https://docs.stripe.com/connect/account-capabilities#requesting-unrequesting). |\n| `listed` | Account might be on a prohibited persons or companies list (Stripe investigates and either rejects or reinstates the account accordingly). |\n| `rejected.fraud` | Account is rejected due to suspected fraud or illegal activity. |\n| `rejected.incomplete_verification` | The account is rejected from incomplete verification requirements within the required threshold. |\n| `rejected.listed` | Account is rejected because it’s on a third-party prohibited persons or companies list (such as financial services provider or government). |\n| `rejected.other` | Account is rejected for another reason. |\n| `rejected.terms_of_service` | Account is rejected due to suspected terms of service violations. |\n| `requirements.past_due` | Additional verification information is required to enable capabilities on this account. |\n| `requirements.pending_verification` | Stripe is currently verifying information on the connected account. No action is required. Inspect the [requirements.pending\\_verification](https://docs.stripe.com/api/accounts/object#account_object-requirements-pending_verification) array to see the information being verified. |\n| `under_review` | The account is under review by Stripe. |\n\n## Validation and verification errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Account](https://docs.stripe.com/api/accounts/object) object includes a [requirements.errors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors) array that explains why the validation or verification requirements haven’t been met, which are needed to enable your account and capabilities. The `errors` array has the following attributes:\n\n*   `requirement`: Specifies which information from the `currently_due` array is needed.\n*   `code`: Indicates the type of error that occurred. See the [API reference](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors-code) for all possible error codes.\n*   `reason`: Explains why the error occurred and how to resolve the error.\n\nBelow is an example that shows what the `errors` array might look like for an account with requirements that are `currently_due`. The example shows the reason why the submitted information can’t be used to enable the account, and how to resolve the error. If verification or validation is unsuccessful, requirements can reappear in `currently_due` with error information. Set a [Connect webhook](https://docs.stripe.com/connect/webhooks) to receive the `account.updated` event to receive these updates.\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"requirements\": {       \"current_deadline\": 1234567800,       \"currently_due\": [           \"company.address.line1\",           \"{{PERSON_ID}}.verification.document\",       ],       \"errors\": [           {             \"requirement\": \"company.address.line1\",             \"code\": \"invalid_street_address\",             \"reason\": \"The provided street address cannot be found. Please verify the street name and number are correct in \\\"10 Downing Street\\\"\",           },           {             \"requirement\": \"{{PERSON_ID}}.verification.document\",             \"code\": \"verification_document_failed_greyscale\",             \"reason\": \"Greyscale documents cannot be read. Please upload a color copy of the document.\",           }       ]   },   ... }`\n\nIf verification or validation is unsuccessful but no requirements are currently due, a webhook triggers indicating that required information is eventually due.\n\n## Business information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen information about a business is submitted, Stripe verifies the new information. For example, Stripe might verify that the provided business URL is valid, reachable, and includes information about the business. To retrieve the status of verification information regarding a business, utilize the `requirements` on the Account object.\n\nBelow is a list of errors related to business information verification:\n\n| Error | Resolution |\n| --- | --- |\n| `invalid_business_profile_name` | Business names must be easy for people to understand and must consist of recognizable words. |\n| `invalid_business_profile_name_denylisted` | Generic or well-known business names aren’t supported. Make sure the provided business name matches the account’s business. |\n| `invalid_product_description_length` | A product description must be at least 10 characters. |\n| `invalid_product_description_url_match` | A product description must be different from the URL of the business. |\n| `invalid_url_denylisted`<br><br>`invalid_url_format`<br><br>`invalid_url_web_presence_detected`<br><br>`invalid_url_website_business_information_mismatch`<br><br>`invalid_url_website_empty`<br><br>`invalid_url_website_inaccessible`<br><br>`invalid_url_website_inaccessible_geoblocked`<br><br>`invalid_url_website_inaccessible_password_protected`<br><br>`invalid_url_website_incomplete`<br><br>`invalid_url_website_incomplete_cancellation_policy`<br><br>`invalid_url_website_incomplete_customer_service_details`<br><br>`invalid_url_website_incomplete_legal_restrictions`<br><br>`invalid_url_website_incomplete_refund_policy`<br><br>`invalid_url_website_incomplete_return_policy`<br><br>`invalid_url_website_incomplete_terms_and_conditions`<br><br>`invalid_url_website_incomplete_under_construction`<br><br>`invalid_url_website_other` | See [handling URL verification errors](#url-verification) below. |\n\n## Statement descriptors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe validates the statement descriptor and statement descriptor prefix when [set on an account](https://docs.stripe.com/connect/statement-descriptors). For example, Stripe might verify that the provided statement descriptor matches the description of the business. When validating the statement descriptor matches the business description, Stripe uses the first 22 characters of the statement descriptor, representing the part that is provided to the card networks. A business description is a close match of the account’s `business_profile.name`, `business_profile.url`, or the name of the company or individual.\n\nTo retrieve the status of verification information regarding statement descriptors, re