[
  {
    "url": "https://docs.stripe.com/error-codes",
    "markdown": "# Error codes | Stripe DocumentationThe Stripe Docs logo\n\nBelow is a list of possible error codes, along with additional information about how to resolve them. For convenience, every Error object links to this list in its [doc\\_url](https://docs.stripe.com/api/errors#errors-doc_url) attribute.\n\n### `account_closed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe customer’s bank account has been closed.\n\n### `account_country_invalid_address`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe country of the business address provided does not match the country of the account. Businesses must be located in the same country as the account.\n\n### `account_error_country_change_requires_additional_steps`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour account has already onboarded as a Connect platform. Changing your country requires additional steps. Please reach out to Stripe support for more information.\n\n### `account_information_mismatch`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome account information mismatches with one another. For example, some banks might require that the business\\_profile.name must match the account holder name.\n\n### `account_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe account ID provided as a value for the `Stripe-Account` header is invalid. Check that your requests are specifying a valid account ID.\n\n### `account_number_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe bank account number provided is invalid (e.g., missing digits). Bank account information varies from country to country. We recommend creating validations in your entry forms based on the [bank account formats](https://docs.stripe.com/connect/payouts-bank-accounts) we provide.\n\n### `acss_debit_session_incomplete`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe ACSS debit session is not ready to transition to complete status yet. Please try again the request later.\n\n### `alipay_upgrade_required`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis method for creating Alipay payments is not supported anymore. Please upgrade your integration to use [Sources](https://stripe.com/docs/sources/alipay) instead.\n\n### `amount_too_large`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe specified amount is greater than the maximum amount allowed. Use a lower amount and try again.\n\n### `amount_too_small`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe specified amount is less than the minimum amount allowed. Use a higher amount and try again.\n\n### `api_key_expired`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe API key provided has expired. Obtain your current API keys from the [Dashboard](https://dashboard.stripe.com/account/apikeys) and update your integration to use them.\n\n### `application_fees_not_allowed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe proposed money movement could not be completed due to regulatory reasons.\n\n### `authentication_required`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe payment requires authentication to proceed. If your customer is [off session](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session), notify your customer to return to your application and complete the payment. If you provided the [error\\_on\\_requires\\_action](https://docs.stripe.com/payments/without-card-authentication) parameter, then your customer should try another card that does not require authentication.\n\n### `balance_insufficient`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe transfer or payout could not be completed because the associated account does not have a sufficient balance available. Create a new transfer or payout using an amount less than or equal to the account’s available balance.\n\n### `balance_invalid_parameter`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInvalid parameter was provided in the balance method object. Check our API documentation or the returned error message for more context.\n\n### `bank_account_bad_routing_numbers`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe bank account is known to not support the currency in question.\n\n### `bank_account_declined`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe bank account provided can not be used to charge, either because it is not verified yet or it is not supported.\n\n### `bank_account_exists`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe bank account provided already exists on the specified [Customer](https://docs.stripe.com/api#update_customer-source) object. If the bank account should also be attached to a different customer, include the correct customer ID when making the request again.\n\n### `bank_account_restricted`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe customer’s account cannot be used with the payment method.\n\n### `bank_account_unusable`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe bank account provided cannot be used. A different bank account must be used.\n\n### `bank_account_unverified`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour Connect platform is attempting to share an unverified bank account with a connected account.\n\n### `bank_account_verification_failed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe bank account cannot be verified, either because the microdeposit amounts provided do not match the actual amounts, or because verification has failed too many times.\n\n### `billing_invalid_mandate`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Subscription or Invoice attempted payment on a PaymentMethod without an active mandate. In order to create Subscription or Invoice payments with this PaymentMethod, it must be confirmed on-session with a PaymentIntent or SetupIntent first.\n\n### `bitcoin_upgrade_required`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis method for creating Bitcoin payments is not supported anymore. Please upgrade your integration to use [Sources](https://stripe.com/docs/sources) instead.\n\nThe charge cannot be [captured](https://docs.stripe.com/charges/placing-a-hold) as the authorization has expired. Refer to the payment method’s documentation to learn more.\n\n### `capture_unauthorized_payment`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe charge you’re attempting to [capture](https://docs.stripe.com/charges/placing-a-hold) has not been authorized for capturing payment.\n\n### `card_decline_rate_limit_exceeded`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis card has been declined too many times. You can try to charge this card again after 24 hours. We suggest reaching out to your customer to make sure they have entered all of their information correctly and that there are no issues with their card.\n\n### `card_declined`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card has been declined. When a card is declined, the error returned also includes the `decline_code` attribute with the reason why the card was declined. Refer to our [decline codes](https://docs.stripe.com/declines/codes) documentation to learn more.\n\n### `cardholder_phone_number_required`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must have a `phone_number` on file for Issuing Cardholders who will be creating EU cards. You cannot create EU cards without a `phone_number` on file for the cardholder. See the [3D Secure Documenation](https://docs.stripe.com/issuing/3d-secure) for more details.\n\n### `charge_already_captured`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe charge you’re attempting to [capture](https://docs.stripe.com/charges/placing-a-hold) has already been captured. Update the request with an uncaptured charge ID.\n\n### `charge_already_refunded`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe charge you’re attempting to [refund](https://docs.stripe.com/refunds) has already been refunded. Update the request to use the ID of a charge that has not been refunded.\n\n### `charge_disputed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe charge you’re attempting to [refund](https://docs.stripe.com/refunds) has been charged back. Check the [disputes documentation](https://docs.stripe.com/disputes) to learn how to respond to the dispute.\n\n### `charge_exceeds_source_limit`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis charge would cause you to exceed your rolling-window processing limit for this source type. Please retry the charge later, or [contact us](https://support.stripe.com/email) to request a higher processing limit.\n\n### `charge_invalid_parameter`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne or more provided parameters was not allowed for the given operation on the Charge. Check our [API reference](https://docs.stripe.com/api/charges) or the returned error message to see which values were not correct for that Charge.\n\n### `charge_not_refundable`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAttempt to refund a charge was unsuccessful because the charge is no longer refundable.\n\n### `clearing_code_unsupported`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe clearing code provided is not supported.\n\n### `country_code_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe country code provided was invalid.\n\n### `country_unsupported`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour platform attempted to create a custom account in a country that is not yet supported. Make sure that users can only sign up in [countries supported by custom accounts](https://docs.stripe.com/connect/custom-accounts#country).\n\n### `coupon_expired`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [coupon](https://docs.stripe.com/api#coupons) provided for a [subscription](https://docs.stripe.com/api#subscriptions) or [order](https://docs.stripe.com/api#orders) has expired. Either create a new coupon, or use an existing one that is valid.\n\n### `customer_max_payment_methods`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe maximum number of [PaymentMethods](https://docs.stripe.com/api/payment_methods) for this [Customer](https://docs.stripe.com/api/customers) has been reached. Either [detach](https://docs.stripe.com/api/payment_methods/detach) some PaymentMethods from this Customer or proceed with a different Customer.\n\n### `customer_max_subscriptions`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe maximum number of subscriptions for a customer has been reached. [Contact us](https://support.stripe.com/email) if you are receiving this error.\n\n### `customer_tax_location_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe customer location information cannot be used to accurately determine tax rates. Verify that address fields such as country, state, and postal code have been added correctly. See the [supported address formats](https://docs.stripe.com/tax/customer-locations#supported-formats).\n\n### `debit_not_authorized`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe customer has notified their bank that this payment was unauthorized.\n\n### `email_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe email address is invalid (e.g., not properly formatted). Check that the email address is properly formatted and only includes [allowed characters](https://en.wikipedia.org/wiki/Email_address#Local-part).\n\n### `expired_card`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card has expired. Check the expiration date or use a different card.\n\n### `financial_connections_account_inactive`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nData cannot be refreshed on inactive Financial Connections accounts.\n\n### `financial_connections_no_successful_transaction_refresh`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTransaction data can only be retrieved for accounts that have at least one successful transaction refresh.\n\n### `forwarding_api_inactive`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe vault and forward API is currently not accessible with this account and/or config. Please [contact us](https://support.stripe.com/contact) if you are receiving this error.\n\n### `forwarding_api_invalid_parameter`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInvalid parameter was provided in the vault and forward API. Check our API documentation or the returned error message for more context.\n\n### `forwarding_api_upstream_connection_error`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe did not receive a response from the destination endpoint.\n\n### `forwarding_api_upstream_connection_timeout`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe request to the destination endpoint timed out.\n\n### `idempotency_key_in_use`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe idempotency key provided is currently being used in another request. This occurs if your integration is making duplicate requests simultaneously.\n\n### `incorrect_address`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card’s address is incorrect. Check the card’s address or use a different card.\n\n### `incorrect_cvc`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card’s security code is incorrect. Check the card’s security code or use a different card.\n\n### `incorrect_number`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card number is incorrect. Check the card’s number or use a different card.\n\n### `incorrect_zip`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card’s postal code is incorrect. Check the card’s postal code or use a different card.\n\n### `instant_payouts_config_disabled`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis connected account is not eligible for Instant Payouts. Ask the platform to enable Instant Payouts.\n\n### `instant_payouts_currency_disabled`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis connected account is not eligible for Instant Payouts in this currency. Ask the platform to enable Instant Payouts in this currency.\n\n### `instant_payouts_limit_exceeded`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou have reached your daily processing limits for Instant Payouts.\n\n### `instant_payouts_unsupported`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis card is not eligible for Instant Payouts. Try a debit card from a [supported bank](https://stripe.com/docs/payouts/instant-payouts-banks).\n\n### `insufficient_funds`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe customer’s account has insufficient funds to cover this payment.\n\n### `intent_invalid_state`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIntent is not in the state that is required to perform the operation.\n\n### `intent_verification_method_missing`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIntent does not have verification method specified in its PaymentMethodOptions object.\n\n### `invalid_card_type`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card provided as an [external account](https://stripe.com/docs/api#external_accounts) is not supported for payouts. Provide a non-prepaid debit card instead.\n\n### `invalid_characters`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis value provided to the field contains characters that are unsupported by the field.\n\n### `invalid_cvc`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card’s security code is invalid. Check the card’s security code or use a different card.\n\n### `invalid_expiry_month`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card’s expiration month is incorrect. Check the expiration date or use a different card.\n\n### `invalid_expiry_year`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card’s expiration year is incorrect. Check the expiration date or use a different card.\n\n### `invalid_number`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card number is invalid. Check the card details or use a different card.\n\n### `invalid_source_usage`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe source cannot be used because it is not in the correct state (e.g., a charge request is trying to use a source with a `pending`, `failed`, or `consumed` source). Check the [status](https://docs.stripe.com/api#source_object-status) of the source you are attempting to use.\n\n### `invalid_tax_location`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe specified location is invalid. Check the [Supported address formats](https://docs.stripe.com/tax/customer-locations#supported-formats) for the address formats supported when calculating tax.\n\n### `invoice_no_customer_line_items`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAn invoice cannot be generated for the specified customer as there are no pending invoice items. Check that the correct customer is being specified or create any necessary invoice items first.\n\n### `invoice_no_payment_method_types`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAn invoice cannot be finalized because there are no payment method types available to process the payment. Your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice) or the invoice’s [`payment_settings`](https://docs.stripe.com/api/invoices/object#invoice_object-payment_settings) might be restricting which payment methods are available, or you might need to activate more [payment methods](https://dashboard.stripe.com/settings/payments) in the Dashboard.\n\n### `invoice_no_subscription_line_items`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAn invoice cannot be generated for the specified subscription as there are no pending invoice items. Check that the correct subscription is being specified or create any necessary invoice items first.\n\n### `invoice_not_editable`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe specified invoice can no longer be edited. Instead, consider creating additional [invoice items](https://docs.stripe.com/billing/invoices/subscription#adding-upcoming-invoice-items) that will be applied to the next invoice. You can either [manually generate](https://docs.stripe.com/billing/invoices/subscription#generating-invoices) the next invoice or wait for it to be automatically generated at the end of the billing cycle.\n\n### `invoice_on_behalf_of_not_editable`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou cannot update the `on_behalf_of` property of an invoice after the invoice has been assigned a number.\n\n### `invoice_payment_intent_requires_action`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis payment requires additional user action before it can be completed successfully. Payment can be completed using the PaymentIntent associated with the invoice. See [this page](https://stripe.com/docs/billing/subscriptions/payment#handling-action-required) for more details.\n\n### `invoice_upcoming_none`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere is no upcoming invoice on the specified customer to preview. Only customers with active subscriptions or pending invoice items have invoices that can be previewed.\n\n### `livemode_mismatch`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTest and live mode API keys, requests, and objects are only available within the mode they are in.\n\n### `lock_timeout`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis object cannot be accessed right now because another API request or Stripe process is currently accessing it. If you see this error intermittently, retry the request. If you see this error frequently and are making multiple concurrent requests to a single object, make your requests serially or at a lower rate. See the [rate limit documentation](https://docs.stripe.com/rate-limits#object-lock-timeouts) for more details.\n\n### `missing`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBoth a customer and source ID have been provided, but the source has not been saved to the customer. To create a charge for a customer with a specified source, you must first [save the card details](https://docs.stripe.com/saving-cards).\n\n### `no_account`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe bank account could not be located.\n\n### `not_allowed_on_standard_account`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTransfers and payouts on behalf of a Standard connected account are not allowed.\n\n### `out_of_inventory`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne or more line item(s) are out of stock. If more stock is available, update the inventory’s orderable quantity and try again.\n\n### `ownership_declaration_not_allowed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCompany ownership declaration is allowed only during account updates and accounts created via account tokens.\n\n### `parameter_invalid_empty`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne or more required values were not provided. Make sure requests include all required parameters.\n\n### `parameter_invalid_integer`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne or more of the parameters requires an integer, but the values provided were a different type. Make sure that only supported values are provided for each attribute. Refer to our [API documentation](https://stripe.com/docs/api) to look up the type of data each attribute supports.\n\n### `parameter_invalid_string_blank`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne or more values provided only included whitespace. Check the values in your request and update any that contain only whitespace.\n\n### `parameter_invalid_string_empty`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne or more required string values is empty. Make sure that string values contain at least one character.\n\n### `parameter_missing`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne or more required values are missing. Check our [API documentation](https://docs.stripe.com/api) to see which values are required to create or modify the specified resource.\n\n### `parameter_unknown`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe request contains one or more unexpected parameters. Remove these and try again.\n\n### `parameters_exclusive`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTwo or more mutually exclusive parameters were provided. Check our [API documentation](https://docs.stripe.com/api) or the returned error message to see which values are permitted when creating or modifying the specified resource.\n\n### `payment_intent_action_required`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe provided payment method requires customer actions to complete, but `error_on_requires_action` was set. If you’d like to add this payment method to your integration, we recommend that you first [upgrade your integration to handle actions](https://docs.stripe.com/payments/payment-intents/upgrade-to-handle-actions).\n\n### `payment_intent_authentication_failure`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe provided payment method has failed authentication. Provide a new payment method to attempt to fulfill this PaymentIntent again.\n\n### `payment_intent_incompatible_payment_method`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe PaymentIntent expected a payment method with different properties than what was provided.\n\n### `payment_intent_invalid_parameter`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne or more provided parameters was not allowed for the given operation on the PaymentIntent. Check our [API reference](https://docs.stripe.com/api/payment_intents) or the returned error message to see which values were not correct for that PaymentIntent.\n\n### `payment_intent_konbini_rejected_confirmation_number`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `confirmation_number` provided in `payment_method_options[konbini]` was rejected by the processing partner at time of PaymentIntent confirmation.\n\n### `payment_intent_mandate_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe provided mandate is invalid and can not be used for the payment intent.\n\n### `payment_intent_payment_attempt_expired`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe latest payment attempt for the PaymentIntent has expired. Check the [`last_payment_error`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error) property on the PaymentIntent for more details, and provide a new payment method to attempt to fulfill this PaymentIntent again.\n\n### `payment_intent_payment_attempt_failed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe latest payment attempt for the PaymentIntent has failed. Check the [`last_payment_error`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error) property on the PaymentIntent for more details, and provide a new payment method to attempt to fulfill this PaymentIntent again.\n\n### `payment_intent_unexpected_state`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe PaymentIntent’s state was incompatible with the operation you were trying to perform.\n\n### `payment_method_bank_account_already_verified`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis bank account has already been verified.\n\n### `payment_method_bank_account_blocked`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis bank account has failed verification in the past and can not be used. [Contact us](https://support.stripe.com/email) if you wish to attempt to use these bank account credentials.\n\n### `payment_method_billing_details_address_missing`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe PaymentMethod’s billing details is missing address details. Please update the missing fields and try again.\n\n### `payment_method_configuration_failures`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAttempt to create or modify Payment Method Configuration was unsuccessful.\n\n### `payment_method_currency_mismatch`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe currency specified does not match the currency for the attached payment method. A payment can only be created for the same currency as the corresponding payment method.\n\n### `payment_method_customer_decline`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe customer did not approve the payment. Please provide a new payment method to attempt to fulfill this intent again.\n\n### `payment_method_invalid_parameter`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInvalid parameter was provided in the payment method object. Check our [API documentation](https://docs.stripe.com/api) or the returned error message for more context.\n\n### `payment_method_invalid_parameter_testmode`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe parameter provided for payment method is not allowed to be used in testmode. Check our [API documentation](https://docs.stripe.com/api) or the returned error message for more context.\n\n### `payment_method_microdeposit_failed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMicrodeposits were failed to be deposited into the customer’s bank account. Please check the account, institution and transit numbers as well as the currency type.\n\n### `payment_method_microdeposit_verification_amounts_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must provide exactly two microdeposit amounts.\n\n### `payment_method_microdeposit_verification_amounts_mismatch`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe amounts provided do not match the amounts that were sent to the bank account.\n\n### `payment_method_microdeposit_verification_attempts_exceeded`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou have exceeded the number of allowed verification attempts.\n\n### `payment_method_microdeposit_verification_descriptor_code_mismatch`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe verification code provided does not match the one sent to the bank account.\n\n### `payment_method_microdeposit_verification_timeout`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayment method should be verified with microdeposits within the required period.\n\n### `payment_method_not_available`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe payment processor for the provided payment method is temporarily unavailable. Please try a different payment method or retry later with the same payment method.\n\n### `payment_method_provider_decline`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe payment or setup attempt was declined by the issuer or customer. Check the [`last_payment_error`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error) or [`last_setup_error`](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-last_setup_error) property on the PaymentIntent or SetupIntent respectively for more details, and provide a new payment method to attempt to fulfill this intent again.\n\n### `payment_method_provider_timeout`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe payment method failed due to a timeout. Check the [`last_payment_error`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error) or [`last_setup_error`](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-last_setup_error) property on the PaymentIntent or SetupIntent respectively for more details, and provide a new payment method to attempt to fulfill this intent again.\n\n### `payment_method_unactivated`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe operation cannot be performed as the payment method used has not been activated. Activate the payment method in the [Dashboard](https://dashboard.stripe.com/account/payments/settings), then try again.\n\n### `payment_method_unexpected_state`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe provided payment method’s state was incompatible with the operation you were trying to perform. Confirm that the payment method is in an allowed state for the given operation before attempting to perform it.\n\n### `payment_method_unsupported_type`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe API only supports payment methods of certain types.\n\n### `payout_reconciliation_not_ready`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nReconciliation for this payout is still in progress.\n\n### `payouts_limit_exceeded`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou have reached your daily processing limits for this payout type.\n\n### `payouts_not_allowed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayouts have been disabled on the connected account. Check the connected account’s status to see if any [additional information](https://docs.stripe.com/connect/identity-verification) needs to be provided, or if payouts have been disabled for [another reason](https://docs.stripe.com/connect/handling-api-verification#determining-if-identity-verification-is-needed).\n\n### `platform_account_required`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOnly Stripe Connect platforms can work with other accounts. If you need to setup a Stripe Connect platform, you can do so [in the dashboard](https://dashboard.stripe.com/account/applications/settings).\n\n### `platform_api_key_expired`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe API key provided by your Connect platform has expired. This occurs if your platform has either generated a new key or the connected account has been disconnected from the platform. Obtain your current API keys from the [Dashboard](https://dashboard.stripe.com/account/apikeys) and update your integration, or reach out to the user and reconnect the account.\n\n### `postal_code_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe postal code provided was incorrect.\n\n### `processing_error`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAn error occurred while processing the card. Try again later or with a different payment method.\n\n### `product_inactive`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe product this SKU belongs to is no longer available for purchase.\n\n### `progressive_onboarding_limit_exceeded`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nProgressive onboarding limit has been reached for the platform.\n\n### `rate_limit`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nToo many requests hit the API too quickly. We recommend an exponential backoff of your requests.\n\n### `refer_to_customer`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe customer has stopped the payment with their bank. Contact them for details and to arrange payment.\n\n### `refund_disputed_payment`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou cannot refund a disputed payment.\n\n### `resource_already_exists`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA resource with a user-specified ID (e.g., plan or coupon) already exists. Use a different, unique value for `id` and try again.\n\n### `resource_missing`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe ID provided is not valid. Either the resource does not exist, or an ID for a different resource has been provided.\n\n### `return_intent_already_processed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou cannot confirm this refund as it is already processed.\n\n### `routing_number_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe bank routing number provided is invalid.\n\n### `secret_key_required`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe API key provided is a publishable key, but a secret key is required. Obtain your current API keys from the [Dashboard](https://dashboard.stripe.com/account/apikeys) and update your integration to use them.\n\n### `sepa_unsupported_account`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour account does not support [SEPA](https://docs.stripe.com/sources/sepa-debit) payments.\n\n### `setup_attempt_failed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe latest setup attempt for the SetupIntent has failed. Check the `last_setup_error` property on the SetupIntent for more details, and provide a new payment method to attempt to set it up again.\n\n### `setup_intent_authentication_failure`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe provided payment method has failed authentication. Provide a new payment method to attempt to fulfill this SetupIntent again.\n\n### `setup_intent_invalid_parameter`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne or more provided parameters was not allowed for the given operation on the SetupIntent. Check our [API reference](https://docs.stripe.com/api/setup_intents) or the returned error message to see which values were not correct for that SetupIntent.\n\n### `setup_intent_mandate_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe provided mandate is invalid and can not be used for the setup intent.\n\n### `setup_intent_setup_attempt_expired`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe latest setup attempt for the SetupIntent has expired. Check the [`last_setup_error`](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-last_setup_error) property on the SetupIntent for more details, and provide a new payment method to attempt to complete this SetupIntent again.\n\n### `setup_intent_unexpected_state`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe SetupIntent’s state was incompatible with the operation you were trying to perform.\n\n### `shipping_address_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe shipping address information cannot be used to accurately determine tax rates. Verify that address fields such as zip code, state, or province have been added correctly.\n\n### `shipping_calculation_failed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nShipping calculation failed as the information provided was either incorrect or could not be verified.\n\n### `sku_inactive`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe SKU is inactive and no longer available for purchase. Use a different SKU, or make the current SKU active again.\n\n### `state_unsupported`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOccurs when providing the `legal_entity` information for a U.S. custom account, if the provided state is not supported. (This is mostly associated states and territories.)\n\n### `status_transition_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe requested status transition is not valid.\n\n### `stripe_tax_inactive`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Tax has not been activated on your account. Check the [setup documentation](https://docs.stripe.com/tax/set-up) to get started.\n\n### `tax_id_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax ID number provided is invalid (e.g., missing digits). Tax ID information varies from country to country, but must be at least nine digits.\n\n### `taxes_calculation_failed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTax calculation for the order failed.\n\n### `terminal_location_country_unsupported`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTerminal is currently only available in some countries. Locations in your country cannot be created in livemode.\n\n### `terminal_reader_busy`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nReader is currently busy processing another request. Please reference the [integration guide](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#handle-errors) for details on how to handle this error.\n\n### `terminal_reader_hardware_fault`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nReader can no longer accept payments as an unrecoverable hardware fault has been detected. Please reach out to Stripe support at https://support.stripe.com/contact/email and provide your reader’s serial number for replacement.\n\n### `terminal_reader_invalid_location_for_payment`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nReader can’t take payments in the currently registered Location. Please register the reader to a new Location. See [Manage locations](https://stripe.com/docs/terminal/fleet/locations) for more information.\n\n### `terminal_reader_offline`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nReader is currently offline, please ensure the reader is powered on and connected to the internet before retrying your request. Reference the [integration guide](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#handle-errors) for details on how to handle this error.\n\n### `terminal_reader_timeout`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere was a timeout when sending this command to the reader. Please reference the [integration guide](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#handle-errors) for details on how to handle this error.\n\n### `testmode_charges_only`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour account has not been activated and can only make test charges. [Activate your account](https://dashboard.stripe.com/account/onboarding) in the Dashboard to begin processing live charges.\n\n### `tls_version_unsupported`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour integration is using an older version of [TLS](https://docs.stripe.com/security#tls) that is unsupported. You must be using TLS 1.2 or above.\n\n### `token_already_used`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe token provided has already been used. You must create a new token before you can retry this request.\n\n### `token_card_network_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInvalid card network parameter was provided in the card token object. Check our [API documentation](https://docs.stripe.com/api) or the returned error message for more context.\n\n### `token_in_use`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe token provided is currently being used in another request. This occurs if your integration is making duplicate requests simultaneously.\n\n### `transfer_source_balance_parameters_mismatch`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a Transfer, the `payments` parameter in `source_balance` should not be passed in when balance `type` is set to `issuing`.\n\n### `transfers_not_allowed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe requested transfer cannot be created. [Contact us](https://support.stripe.com/email) if you are receiving this error.\n\n### `url_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe URL provided is invalid.",
    "title": "Error codes | Stripe Documentation",
    "description": "Learn more about error codes and how to resolve them.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/errors/handling",
    "markdown": "# Handling errors | Stripe API Reference\n\nOur Client libraries raise exceptions for many reasons, such as a failed charge, invalid parameters, authentication errors, and network unavailability. We recommend writing code that gracefully handles all possible API exceptions.\n\n*   Related guide: [Error Handling](https://docs.stripe.com/error-handling)\n\n```\n# Select a client library to see examples of# handling different kinds of errors.\n```\n\n## [Expanding Responses](https://docs.stripe.com/api/expanding_objects)\n\nMany objects allow you to request additional information as an expanded response by using the `expand` request parameter. This parameter is available on all API requests, and applies to the response of that request only. You can expand responses in two ways.\n\nIn many cases, an object contains the ID of a related object in its response properties. For example, a `Charge` might have an associated Customer ID. You can expand these objects in line with the expand request parameter. The `expandable` label in this documentation indicates ID fields that you can expand into objects.\n\nSome available fields aren’t included in the responses by default, such as the `number` and `cvc` fields for the Issuing Card object. You can request these fields as an expanded response by using the `expand` request parameter.\n\nYou can expand recursively by specifying nested fields after a dot (`.`). For example, requesting `invoice.subscription` on a charge expands the `invoice` property into a full Invoice object, then expands the `subscription` property on that invoice into a full Subscription object.\n\nYou can use the `expand` parameter on any endpoint that returns expandable fields, including list, create, and update endpoints.\n\nExpansions on list requests start with the `data` property. For example, you can expand `data.customers` on a request to list charges and associated customers. Performing deep expansions on numerous list requests might result in slower processing times.\n\nExpansions have a maximum depth of four levels (for example, the deepest expansion allowed when listing charges is `data.invoice.subscription.default_source`).\n\nYou can expand multiple objects at the same time by identifying multiple items in the `expand` array.\n\n*   Related guide: [Expanding responses](https://docs.stripe.com/expand)\n*   Related video: [Expand](https://www.youtube.com/watch?v=m8Vj_CEWyQc)\n\n```\ncurl https://api.stripe.com/v1/charges/ch_3LmzzQ2eZvKYlo2C0XjzUzJV \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -d \"expand[]\"=customer \\  -d \"expand[]\"=\"invoice.subscription\" \\  -G\n```\n\n```\n{  \"id\": \"ch_3LmzzQ2eZvKYlo2C0XjzUzJV\",  \"object\": \"charge\",  \"customer\": {    \"id\": \"cu_14HOpH2eZvKYlo2CxXIM7Pb2\",    \"object\": \"customer\",    // ...  },  \"invoice\": {    \"id\": \"in_1LmzzQ2eZvKYlo2CpyWn8szu\",    \"object\": \"invoice\",    \"subscription\": {      \"id\": \"su_1LmzoG2eZvKYlo2Cpw6S7dAq\",      \"object\": \"subscription\",      // ...    },    // ...  },  // ...}\n```\n\n## [Idempotent requests](https://docs.stripe.com/api/idempotent_requests)\n\nThe API supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. When creating or updating an object, use an idempotency key. Then, if a connection error occurs, you can safely repeat the request without risk of creating a second object or performing the update twice.\n\nTo perform an idempotent request, provide an additional `IdempotencyKey` element to the request options.\n\nStripe’s idempotency works by saving the resulting status code and body of the first request made for any given idempotency key, regardless of whether it succeeds or fails. Subsequent requests with the same key return the same result, including `500` errors.\n\nA client generates an idempotency key, which is a unique key that the server uses to recognize subsequent retries of the same request. How you create unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions. Idempotency keys are up to 255 characters long.\n\nYou can remove keys from the system automatically after they’re at least 24 hours old. We generate a new request if a key is reused after the original is pruned. The idempotency layer compares incoming parameters to those of the original request and errors if they’re the same to prevent accidental misuse.\n\nWe save results only after the execution of an endpoint begins. If incoming parameters fail validation, or the request conflicts with another request that’s executing concurrently, we don’t save the idempotent result because no API endpoint initiates the execution. You can retry these requests. Learn more about when you can [retry idempotent requests](https://docs.stripe.com/error-low-level#idempotency).\n\nAll `POST` requests accept idempotency keys. Don’t send idempotency keys in `GET` and `DELETE` requests because it has no effect. These requests are idempotent by definition.\n\n```\ncurl https://api.stripe.com/v1/customers \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -H \"Idempotency-Key: KG5LxwFBepaKHyUD\" \\  -d description=\"My First Test Customer (created for API docs at https://docs.stripe.com/api)\"\n```\n\n## [Metadata](https://docs.stripe.com/api/metadata)\n\nUpdateable Stripe objects—including [Account](https://docs.stripe.com/api/accounts), [Charge](https://docs.stripe.com/api/charges), [Customer](https://docs.stripe.com/api/customers), [PaymentIntent](https://docs.stripe.com/api/payment_intents), [Refund](https://docs.stripe.com/api/refunds), [Subscription](https://docs.stripe.com/api/subscriptions), and [Transfer](https://docs.stripe.com/api/transfers) have a `metadata` parameter. You can use this parameter to attach key-value data to these Stripe objects.\n\nYou can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long.\n\nYou can use metadata to store additional, structured information on an object. For example, you could store your user’s full name and corresponding unique identifier from your system on a Stripe [Customer](https://docs.stripe.com/api/customers) object. Stripe doesn’t use metadata—for example, we don’t use it to authorize or decline a charge and it won’t be seen by your users unless you choose to show it to them.\n\nSome of the objects listed above also support a `description` parameter. You can use the `description` parameter to annotate a charge-for example, a human-readable description such as `2 shirts for test@example.com`. Unlike `metadata`, `description` is a single string, which your users might see (for example, in email receipts Stripe sends on your behalf).\n\nDon’t store any sensitive information (bank account numbers, card details, and so on) as metadata or in the `description` parameter.\n\n*   Related guide: [Metadata](https://docs.stripe.com/metadata)\n\n## Sample metadata use cases\n\n*   **Link IDs**: Attach your system’s unique IDs to a Stripe object to simplify lookups. For example, add your order number to a charge, your user ID to a customer or recipient, or a unique receipt number to a transfer.\n*   **Refund papertrails**: Store information about the reason for a refund and the individual responsible for its creation.\n*   **Customer details**: Annotate a customer by storing an internal ID for your future use.\n\n```\ncurl https://api.stripe.com/v1/customers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cus_123456789\",  \"object\": \"customer\",  \"address\": {    \"city\": \"city\",    \"country\": \"US\",    \"line1\": \"line 1\",    \"line2\": \"line 2\",    \"postal_code\": \"90210\",    \"state\": \"CA\"  },  \"balance\": 0,  \"created\": 1483565364,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": null,  \"invoice_prefix\": \"C11F7E1\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": null,  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\"}\n```",
    "title": "Handling errors | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/declines",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Declines\n\n## Learn about payment declines and how to lower your decline rate.\n\nPayments can fail for a variety of reasons, including some that help prevent fraudulent transactions. Stripe works to reduce decline rates across all supported payment methods. We work with issuers and networks to improve acceptance rates, often without affecting your integration.\n\nThere are three reasons why a payment might fail:\n\n*   [Issuer declines](https://docs.stripe.com/declines#issuer-declines)\n*   [Blocked payments](https://docs.stripe.com/declines#blocked-payments)\n*   [Invalid API calls](https://docs.stripe.com/declines#invalid-api-calls)\n\nYou need to handle each type of payment failure differently. For every failure, you can use the [Dashboard](https://dashboard.stripe.com/payments) or API to review a payment’s details. When using the API, look at the `Charge` object’s [outcome](https://docs.stripe.com/api/charges/object#charge_object-outcome). This attribute covers the payment failure type and provides information about its cause.\n\nStripe handles non-card payment method declines similarly to card declines. Stripe sends you a response code that includes information about the decline, for example, if it’s due to insufficient funds, a lost or stolen card, or another reason.\n\n## Issuer declines ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen your customer’s card issuer receives a charge, their automated systems and models decide whether to authorize it. These tools analyze signals such as spending habits, account balance, and card data (expiration date, address information, and CVC).\n\nIf the card issuer declines a payment, Stripe shares with you all of the decline information we receive. This information is available in the Dashboard and through the API. When issuers provide specific explanations, such as an incorrect card number or low funds, these explanations return to Stripe through [decline codes](https://docs.stripe.com/declines/codes).\n\n## Blocked payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Stripe Radar](https://docs.stripe.com/radar \"Radar\") blocks high risk payments, such as those with mismatched CVC or postal code values. This automated fraud prevention product evaluates each payment, without requiring any action from you.\n\n![A payment that Radar declined](https://b.stripecdn.com/docs-statics-srv/assets/payment-high-risk-allow-list.1dd70f2d0e26384f44e8eeeb59eaf533.png)\n\nA payment that Radar declined\n\nWhen Stripe blocks a payment, it obtains initial authorization from the card issuer but refrains from charging the card. This precaution helps prevent potential fraudulent payments that might lead to disputes.\n\nFor some card types, customers might see the card issuer’s authorization for the payment amount on their statement. However, Stripe hasn’t charged this amount or withdrawn funds. The card issuer typically removes this authorization from the customer’s statement within a few days.\n\nIf you recognize a blocked payment as legitimate, you can lift the block by locating the payment in the [Dashboard](https://dashboard.stripe.com/payments) and clicking **Add to allow list**. This action doesn’t retry the payment but prevents Stripe Radar from blocking future payment attempts using the same card or email address.\n\n#### Note\n\nDon’t see the **Add to allow list** button on the payment details page? [Contact Stripe](https://support.stripe.com/email) to add this feature to your Radar account.\n\nWhen using the API, the `outcome` of a blocked payment reflects the type of payment failure and the reason for it, along with the evaluated risk level.\n\n`... outcome: {   network_status: \"not_sent_to_network\",   reason: \"highest_risk_level\",   risk_level: \"highest\",   seller_message: \"Stripe blocked this charge as too risky.\",   type: \"blocked\" }, ...`\n\n## Invalid API calls ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn the API, you might see an invalid API call like the following:\n\n`curl https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=2000 \\  -d currency=usd \\  -d source=tok_invalid \\   --data-urlencode description=\"Charge for jenny.rosen@example.com\"`\n\nThe invalid API call generates an error response that might look like this:\n\nThe [outcome](https://docs.stripe.com/api#charge_object-outcome) of a declined payment includes the type of payment failure and the [reason](https://docs.stripe.com/api#charge_object-outcome-reason), based on the card issuer’s decline code. The reason might contain information other than the issuer’s response code, for example, if a Radar rule evaluation blocked the charge.\n\n``... outcome: {   network_status: \"declined_by_network\",   reason: \"expired_card\",   risk_level: \"normal\",   seller_message: \"The bank returned the decline code `expired_card`.\",   type: \"issuer_declined\" }, ...``\n\nAs you develop your Stripe integration, continuously [test](https://docs.stripe.com/testing) it to identify any potential bugs that might lead to invalid API calls. Invalid API calls typically don’t result in a payment appearing in your Dashboard. However, you might see the payment appear in a few cases.\n\n`... outcome: {   network_status: \"not_sent_to_network\",   type: \"invalid\" }, ...`",
    "title": "Declines | Stripe Documentation",
    "description": "Learn about payment declines and how to lower your decline rate.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/error-handling",
    "markdown": "# Error handling | Stripe DocumentationThe Stripe Docs logo\n\n## Catch and respond to declines, invalid data, network problems, and more.\n\nStripe offers many kinds of errors. They can reflect external events, like declined payments and network interruptions, or code problems, like invalid API calls.\n\nTo handle errors, use some or all of the techniques in the table below. No matter what technique you use, you can follow up with our [recommended responses for each error type](#error-types).\n\n| Technique | Purpose | When needed |\n| --- | --- | --- |\n| [Catch exceptions](#catch-exceptions) | Recover when an API call can’t continue | Always |\n| [Monitor webhooks](#monitor-webhooks) | React to notifications from Stripe | Sometimes |\n| [Get stored information about failures](#use-stored-information) | Investigate past problems and support other techniques | Sometimes |\n\n## Catch exceptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf an immediate problem prevents an API call from continuing, the Stripe Ruby library raises an exception. It’s a best practice to catch and handle exceptions.\n\nTo catch an exception, use Ruby’s `rescue` keyword. Catch `Stripe::StripeError` or its subclasses to handle Stripe-specific exceptions only. Each subclass represents a different kind of exception. When you catch an exception, you can [use its class to choose a response](#error-types).\n\n`require 'stripe'  Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`def example_function(params)   begin     Stripe::PaymentIntent.create(params)   rescue Stripe::CardError => e     puts \"A payment error occurred: #{e.error.message}\"   rescue Stripe::InvalidRequestError => e     puts \"An invalid request occurred.\"   rescue Stripe::StripeError => e     puts \"Another problem occurred, maybe unrelated to Stripe.\"   else     puts \"No error.\"   end end`\n\nAfter setting up exception handling, test it on a variety of data, including [test cards](https://docs.stripe.com/testing), to simulate different payment outcomes.\n\n`example_function(   # The required parameter currency is missing,   amount: 2000,   confirm: true,   payment_method:` \n\n`'pm_card_visa'`\n\n`, )`\n\n`An invalid request occurred.`\n\n## Monitor webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe notifies you about many kinds of problems using [webhooks](https://docs.stripe.com/webhooks \"webhook\"). This includes problems that don’t follow immediately after an API call. For example:\n\n*   You lose a dispute.\n*   A recurring payment fails after months of success.\n*   Your frontend [confirms](https://docs.stripe.com/api/payment_intents/confirm \"confirm\") a payment, but goes offline before finding out the payment fails. (The backend still receives webhook notification, even though it wasn’t the one to make the API call.)\n\nYou don’t need to handle every webhook event type. In fact, some integrations don’t handle any.\n\nIn your webhook handler, start with the basic steps from the [webhook builder](https://docs.stripe.com/webhooks/quickstart): get an event object and use the event type to find out what happened. Then, if the event type indicates an error, follow these extra steps:\n\n1.  Access [event.data.object](https://docs.stripe.com/api/events/object#event_object-data-object) to retrieve the affected object.\n2.  [Use stored information](#use-stored-information) on the affected object to gain context, including an error object.\n3.  [Use its type to choose a response](#error-types).\n\n`require 'stripe' require 'sinatra' post '/webhook' do   payload = request.body.read   data = JSON.parse(payload, symbolize_names: true)    # Get the event object   event = Stripe::Event.construct_from(data)    # Use the event type to find out what happened   case event.type   when 'payment_intent.payment_failed'      # Get the object affected     payment_intent = event.data.object      # Use stored information to get an error object     e = payment_intent.last_payment_error      # Use its type to choose a response     case e.type     when 'card_error'       puts \"A payment error occurred: #{e.message}\"     when 'invalid_request'       puts \"An invalid request occurred.\"     else       puts \"Another problem occurred, maybe unrelated to Stripe.\"     end   end    content_type 'application/json'   {     status: 'success'   }.to_json end`\n\nTo test how your integration responds to webhook events, you can [trigger webhook events locally](https://docs.stripe.com/webhooks#test-webhook). After completing the setup steps at that link, trigger a failed payment to see the resulting error message.\n\n`stripe trigger payment_intent.payment_failed`\n\n`A payment error occurred: Your card was declined.`\n\n## Get stored information about failures ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMany objects store information about failures. That means that if something already went wrong, you can retrieve the object and examine it to learn more. In many cases, stored information is in the form of an error object, and you can [use its type to choose a response](#error-types).\n\nFor instance:\n\n1.  Retrieve a specific payment intent.\n2.  Check if it experienced a payment error by determining if [last\\_payment\\_error](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error) is empty.\n3.  If it did, log the error, including its type and the affected object.\n\n`require 'stripe' Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`payment_intent = Stripe::PaymentIntent.retrieve(  '{{PAYMENT_INTENT_ID}}'  ) e = payment_intent.last_payment_error if !e.nil?   puts \"PaymentIntent #{payment_intent.id} experienced a #{e.type}.\" end`\n\nHere are common objects that store information about failures.\n\nTo test code that uses stored information about failures, you often need to simulate failed transactions. You can often do this using [test cards](https://docs.stripe.com/testing) or test bank numbers. For example:\n\n*   [Simulate a declined payment](https://docs.stripe.com/testing#declined-payments), for creating failed Charges, PaymentIntents, SetupIntents, and so on.\n*   [Simulate a failed payout](https://docs.stripe.com/connect/testing#account-numbers).\n*   [Simulate a failed refund](https://docs.stripe.com/testing#refunds).\n\n## Types of error and responses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn the Stripe Ruby library, error objects belong to `stripe.error.StripeError` and its subclasses. Use the documentation for each class for advice on responding.\n\n| Name | Class | Description |\n| --- | --- | --- |\n| Payment error | [Stripe::CardError](#payment-errors) | An error occurred during a payment, involving one of these situations:<br><br>*   [Payment blocked for suspected fraud](#payment-blocked)<br>*   [Payment declined by the issuer](#payment-declined).<br>*   [Other payment errors](#other-payment-errors). |\n| Invalid request error | [Stripe::InvalidRequestError](#invalid-request-errors) | You made an API call with the wrong parameters, in the wrong state, or in an invalid way. |\n| Connection error | [Stripe::APIConnectionError](#connection-errors) | There was a network problem between your server and Stripe. |\n| API error | [Stripe::APIError](#api-errors) | Something went wrong on Stripe’s end. (These are rare.) |\n| Authentication error | [Stripe::AuthenticationError](#authentication-errors) | Stripe can’t authenticate you with the information provided. |\n| Idempotency error | [Stripe::IdempotencyError](#idempotency-errors) | You used an [idempotency key](https://docs.stripe.com/api/idempotent_requests) for something unexpected, like replaying a request but passing different parameters. |\n| Permission error | [Stripe::PermissionError](#permission-errors) | The API key used for this request does not have the necessary permissions. |\n| Rate limit error | [Stripe::RateLimitError](#rate-limit-errors) | You made too many API calls in too short a time. |\n| Signature verification error | [Stripe::SignatureVerificationError](#signature-verification-errors) | You’re using [webhook](https://docs.stripe.com/webhooks \"webhook\") [signature verification](https://docs.stripe.com/webhooks#verify-events) and couldn’t verify that a webhook event is authentic. |\n\n## Payment errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayment errors—sometimes called “card errors” for historical reasons—cover a wide range of common problems. They come in three categories:\n\n*   [Payment blocked for suspected fraud](#payment-blocked)\n*   [Payment declined by the issuer](#payment-declined)\n*   [Other payment errors](#other-payment-errors)\n\nTo distinguish these categories or get more information about how to respond, consult the [error code](https://docs.stripe.com/error-codes), [decline code](https://docs.stripe.com/declines/codes), and [charge outcome](https://docs.stripe.com/api/charges/object#charge_object-outcome).\n\n(To find the charge outcome from an error object, first get the [Payment Intent that’s involved](https://docs.stripe.com/api/errors#errors-payment_intent) and the [latest Charge it created](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-latest_charge). See the example below for a demonstration.)\n\n`require 'stripe' Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`def example_function(params)   begin     Stripe::PaymentIntent.create(params)   rescue Stripe::CardError => e     charge = Stripe::Charge.retrieve(e.error.payment_intent.latest_charge)     if charge.outcome.type == 'blocked'       puts 'Payment blocked for suspected fraud.'     elsif e.code == 'card_declined'       puts 'Payment declined by the issuer.'     elsif e.code == 'expired_card'       puts 'Card expired.'     else       puts 'Other card error.'     end   end end`\n\nUsers on API version [2022-08-01](https://docs.stripe.com/upgrades#2022-08-01) or older:\n\n(To find the charge outcome from an error object, first get the [Payment Intent that’s involved](https://docs.stripe.com/api/errors#errors-payment_intent) and the [latest Charge it created](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-charges-data). See the example below for a demonstration.)\n\n`require 'stripe' Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`def example_function(params)   begin     Stripe::PaymentIntent.create(params)   rescue Stripe::CardError => e     if e.error.payment_intent.charges.data[0].outcome.type == 'blocked'       puts 'Payment blocked for suspected fraud.'     elsif e.code == 'card_declined'       puts 'Payment declined by the issuer.'     elsif e.code == 'expired_card'       puts 'Card expired.'     else       puts 'Other card error.'     end   end end`\n\nYou can trigger some common kinds of payment error with test cards. Consult these lists for options:\n\n*   [Simulating payments blocked for fraud risk](https://docs.stripe.com/testing#fraud-prevention)\n*   [Simulating declined payments and other card errors](https://docs.stripe.com/testing#declined-payments)\n\nThe test code below demonstrates a few possibilities.\n\n`example_function(   currency: 'usd',   amount: 2000,   confirm: true,   payment_method:` \n\n`'pm_card_radarBlock'`\n\n`, )`\n\n`Payment blocked for suspected fraud.`\n\n### Payment blocked for suspected fraud ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `Stripe::CardError` |\n| **Codes** | `charge = Stripe::Charge.retrieve(e.error.payment_intent.latest_charge) charge.outcome.type == 'blocked'` |\n| **Codes** | `e.error.payment_intent.charges.data[0].outcome.type == 'blocked'` |\n| **Problem** | Stripe’s fraud prevention system, [Radar](https://docs.stripe.com/radar \"Radar for Fraud Teams\"), blocked the payment |\n| **Solutions** | This error can occur when your integration is working correctly. Catch it and prompt the customer for a different payment method.<br><br>To block fewer legitimate payments, try these:<br><br>*   [Optimize your Radar integration](https://docs.stripe.com/radar/integration) to collect more detailed information.<br>*   Use [Payment Links](https://docs.stripe.com/payment-links), [Checkout](https://docs.stripe.com/payments/checkout), or [Stripe Elements](https://docs.stripe.com/payments/elements) for prebuilt optimized form elements.<br><br>[Radar for Fraud Teams](https://docs.stripe.com/radar \"Radar for Fraud Teams\") customers have these additional options:<br><br>*   To exempt a specific payment, add it to your allowlist. Radar for Fraud Teams<br>*   To change your risk tolerance, adjust your [risk settings](https://docs.stripe.com/radar/risk-settings). Radar for Fraud Teams<br>*   To change the criteria for blocking a payment, use [custom rules](https://docs.stripe.com/radar/rules). Radar for Fraud Teams<br><br>You can test your integration’s settings with [test cards that simulate fraud](https://docs.stripe.com/radar/testing). If you have custom Radar rules, follow the testing advice in the [Radar documentation](https://docs.stripe.com/radar/testing). |\n\n### Payment declined by the issuer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n### Other payment errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `Stripe::CardError` |\n| **Problem** | Another payment error occurred. |\n| **Solutions** | This error can occur when your integration is working correctly. Use the error code to determine what next steps are appropriate. See the [documentation on error codes](https://docs.stripe.com/error-codes) for appropriate responses to each code. |\n\n## Invalid request errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `Stripe::InvalidRequestError` |\n| **Problem** | You made an API call with the wrong parameters, in the wrong state, or in an invalid way. |\n| **Solutions** | In most cases, the problem is with the request itself. Either its parameters are invalid or it can’t be carried out in your integration’s current state.<br><br>*   Consult the [error code documentation](https://docs.stripe.com/error-codes) for details on the problem.<br>*   For convenience, you can follow the link at for documentation about the error code.<br>*   If the error involves a specific parameter, use to determine which one. |\n\n## Connection errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `Stripe::APIConnectionError` |\n| **Problem** | There was a network problem between your server and Stripe. |\n| **Solutions** | Treat the result of the API call as indeterminate. That is, don’t assume that it succeeded or that if failed.<br><br>To find out if it succeeded, you can:<br><br>*   Retrieve the relevant object from Stripe and check its status.<br>*   Listen for webhook notification that the operation succeeded or failed.<br><br>To make it easier to recover from connection errors, you can:<br><br>*   When creating or updating an object, use an [idempotency key](https://docs.stripe.com/api/idempotent_requests). Then, if a connection error occurs, you can safely repeat the request without risk of creating a second object or performing the update twice. Repeat the request with the same idempotency key until you receive a clear success or failure. For advanced advice on this strategy, see [Low-level error handling](https://docs.stripe.com/error-low-level#idempotency).<br>*   Turn on [automatic retries.](#automatic-retries) Then, Stripe generates idempotency keys for you, and repeats requests for you when it is safe to do so.<br><br>This error can mask others. It’s possible that when the connection error resolves, some other error becomes apparent. Check for errors in all of these solutions just as you would in the original request. |\n\n## API errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `Stripe::APIError` |\n| **Problem** | Something went wrong on Stripe’s end. (These are rare.) |\n| **Solutions** | Treat the result of the API call as indeterminate. That is, don’t assume that it succeeded or that it failed.<br><br>Rely on [webhooks](https://docs.stripe.com/webhooks \"webhook\") for information about the outcome. Whenever possible, Stripe fires webhooks for any new objects we create as we solve a problem.<br><br>To set your integration up for maximum robustness in unusual situations, see [this advanced discussion of server errors.](https://docs.stripe.com/error-low-level#server-errors) |\n\n## Authentication errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `Stripe::AuthenticationError` |\n| **Problem** | Stripe can’t authenticate you with the information provided. |\n| **Solutions** | *   Use the correct [API key](https://docs.stripe.com/keys).<br>*   Make sure you aren’t using a key that you [“rolled” or revoked](https://docs.stripe.com/keys#rolling-keys). |\n\n## Idempotency errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `Stripe::IdempotencyError` |\n| **Problem** | You used an [idempotency key](https://docs.stripe.com/api/idempotent_requests) for something unexpected, like replaying a request but passing different parameters. |\n| **Solutions** | *   After you use an idempotency key, only reuse it for identical API calls.<br>*   Use idempotency keys under the limit of 255 characters. |\n\n## Permission errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `Stripe::PermissionError` |\n| **Problem** | The API key used for this request does not have the necessary permissions. |\n| **Solutions** | *   Are you using a [restricted API key](https://docs.stripe.com/keys#limit-access) for a service it doesn’t have access to?<br>*   Are you performing an action in the Dashboard while logged in as a [user role](https://docs.stripe.com/get-started/account/teams/roles) that lacks permission? |\n\n## Rate limit errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `Stripe::RateLimitError` |\n| **Problem** | You made too many API calls in too short a time. |\n| **Solutions** | *   If a single API call triggers this error, wait and try it again.<br>*   To handle rate-limiting automatically, retry the API call after a delay, and increase the delay exponentially if the error continues. See the documentation on [rate limits](https://docs.stripe.com/rate-limits) for further advice.<br>*   If you anticipate a large increase in traffic and want to request an increased rate limit, [contact support](https://support.stripe.com/) in advance. |\n\n## Signature verification errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `Stripe::SignatureVerificationError` |\n| **Problem** | You’re using [webhook](https://docs.stripe.com/webhooks \"webhook\") [signature verification](https://docs.stripe.com/webhooks#verify-events) and couldn’t verify that a webhook event is authentic. |\n| **Solutions** | This error can occur when your integration is working correctly. If you use webhook signature verification and a third party attempts to send you a fake or malicious webhook, then verification fails and this error is the result. Catch it and respond with a `400 Bad Request` status code.<br><br>If you receive this error when you shouldn’t—for instance, with webhooks that you know originate with Stripe—then see the documentation on [checking webhook signatures](https://docs.stripe.com/webhooks#verify-events) for further advice. In particular, make sure you’re using the correct endpoint secret. This is different from your API key. |",
    "title": "Error handling | Stripe Documentation",
    "description": "Catch and respond to declines, invalid data, network problems, and more.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_intents/object",
    "markdown": "# The PaymentIntent object | Stripe API Reference\n\n### Attributes\n\n*   #### \n    \n    idstringretrievable with publishable key\n    \n    Unique identifier for the object.\n    \n*   #### \n    \n    amountintegerretrievable with publishable key\n    \n    Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).\n    \n*   #### \n    \n    automatic\\_payment\\_methodsnullable objectretrievable with publishable key\n    \n*   #### \n    \n    client\\_secretnullable stringretrievable with publishable key\n    \n    The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.\n    \n    The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.\n    \n    Refer to our docs to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.\n    \n*   #### \n    \n    currencyenumretrievable with publishable key\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n    ID of the Customer this PaymentIntent belongs to, if one exists.\n    \n    Payment methods attached to other Customers cannot be used with this PaymentIntent.\n    \n    If present in combination with [setup\\_future\\_usage](#payment_intent_object-setup_future_usage), this PaymentIntent’s payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.\n    \n*   #### \n    \n    descriptionnullable stringretrievable with publishable key\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    last\\_payment\\_errornullable objectretrievable with publishable key\n    \n    The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.\n    \n*   #### \n    \n    latest\\_chargenullable stringExpandable\n    \n    The latest charge created by this PaymentIntent.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Learn more about [storing information in metadata](https://docs.stripe.com/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).\n    \n*   #### \n    \n    next\\_actionnullable objectretrievable with publishable key\n    \n    If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source.\n    \n*   #### \n    \n    payment\\_methodnullable stringExpandableretrievable with publishable key\n    \n    ID of the payment method used in this PaymentIntent.\n    \n*   #### \n    \n    receipt\\_emailnullable stringretrievable with publishable key\n    \n    Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).\n    \n*   #### \n    \n    setup\\_future\\_usagenullable enumretrievable with publishable key\n    \n    Indicates that you intend to make future payments with this PaymentIntent’s payment method.\n    \n    Providing this parameter will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://docs.stripe.com/api/payment_methods/attach) to a Customer after the transaction completes.\n    \n    When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://docs.stripe.com/strong-customer-authentication).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   #### \n    \n    shippingnullable objectretrievable with publishable key\n    \n    Shipping information for this PaymentIntent.\n    \n*   #### \n    \n    statement\\_descriptornullable string\n    \n    For card charges, use [statement\\_descriptor\\_suffix](https://stripe.com/docs/payments/account/statement-descriptors#dynamic). Otherwise, you can use this value as the complete description of a charge on your customers’ statements. It must contain at least one letter and be 1–22 characters long.\n    \n*   #### \n    \n    statement\\_descriptor\\_suffixnullable string\n    \n    Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.\n    \n*   #### \n    \n    statusenumretrievable with publishable key\n    \n    Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://docs.stripe.com/payments/intents#intent-statuses).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled` |\n    | `processing` |\n    | `requires_action` |\n    | `requires_capture` |\n    | `requires_confirmation` |\n    | `requires_payment_method` |\n    | `succeeded` |\n    \n\n### More attributes\n\n*   #### \n    \n    objectstringretrievable with publishable key\n    \n\n*   #### \n    \n    amount\\_detailsnullable object\n    \n\n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n*   #### \n    \n    canceled\\_atnullable timestampretrievable with publishable key\n    \n*   #### \n    \n    cancellation\\_reasonnullable enumretrievable with publishable key\n    \n*   #### \n    \n    capture\\_methodenumretrievable with publishable key\n    \n*   #### \n    \n    confirmation\\_methodenumretrievable with publishable key\n    \n*   #### \n    \n    createdtimestampretrievable with publishable key\n    \n*   #### \n    \n    invoicenullable stringExpandable\n    \n*   #### \n    \n    livemodebooleanretrievable with publishable key\n    \n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n*   #### \n    \n    payment\\_method\\_configuration\\_detailsnullable object\n    \n*   #### \n    \n    payment\\_method\\_optionsnullable object\n    \n*   #### \n    \n    payment\\_method\\_typesarray of stringsretrievable with publishable key\n    \n*   #### \n    \n    processingnullable objectretrievable with publishable key\n    \n*   #### \n    \n    reviewnullable stringExpandable\n    \n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n*   #### \n    \n    transfer\\_groupnullable stringConnect only\n    \n\n```\n{  \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800504,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Create a PaymentIntent](https://docs.stripe.com/api/payment_intents/create)\n\nCreates a PaymentIntent object.\n\nAfter the PaymentIntent is created, attach a payment method and [confirm](https://docs.stripe.com/api/payment_intents/confirm) to continue the payment. Learn more about [the available payment flows with the Payment Intents API](https://docs.stripe.com/payments/payment-intents).\n\nWhen you use `confirm=true` during creation, it’s equivalent to creating and confirming the PaymentIntent in the same call. You can use any parameters available in the [confirm API](https://docs.stripe.com/api/payment_intents/confirm) when you supply `confirm=true`.\n\n### Parameters\n\n*   Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).\n    \n\n*   #### \n    \n    automatic\\_payment\\_methodsobject\n    \n    When you enable this parameter, this PaymentIntent accepts payment methods that you enable in the Dashboard and that are compatible with this PaymentIntent’s other parameters.\n    \n*   Set to `true` to attempt to [confirm this PaymentIntent](https://docs.stripe.com/api/payment_intents/confirm) immediately. This parameter defaults to `false`. When creating and confirming a PaymentIntent at the same time, you can also provide the parameters available in the [Confirm API](https://docs.stripe.com/api/payment_intents/confirm).\n    \n*   ID of the Customer this PaymentIntent belongs to, if one exists.\n    \n    Payment methods attached to other Customers cannot be used with this PaymentIntent.\n    \n    If present in combination with [setup\\_future\\_usage](#payment_intent_object-setup_future_usage), this PaymentIntent’s payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    off\\_sessionboolean | stringonly when confirm=true\n    \n    Set to `true` to indicate that the customer isn’t in your checkout flow during this payment attempt and can’t authenticate. Use this parameter in scenarios where you collect card details and [charge them later](https://docs.stripe.com/payments/cards/charging-saved-cards). This parameter can only be used with [`confirm=true`](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm).\n    \n*   ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://docs.stripe.com/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.\n    \n    If you omit this parameter with `confirm=true`, `customer.default_source` attaches as this PaymentIntent’s payment instrument to improve migration for users of the Charges API. We recommend that you explicitly provide the `payment_method` moving forward.\n    \n*   Email address to send the receipt to. If you specify `receipt_email` for a payment in live mode, you send a receipt regardless of your [email settings](https://dashboard.stripe.com/account/emails).\n    \n*   Indicates that you intend to make future payments with this PaymentIntent’s payment method.\n    \n    Providing this parameter will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://docs.stripe.com/api/payment_methods/attach) to a Customer after the transaction completes.\n    \n    When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://docs.stripe.com/strong-customer-authentication).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   Shipping information for this PaymentIntent.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    For card charges, use [statement\\_descriptor\\_suffix](https://stripe.com/docs/payments/account/statement-descriptors#dynamic). Otherwise, you can use this value as the complete description of a charge on your customers’ statements. It must contain at least one letter and be 1–22 characters long.\n    \n*   #### \n    \n    statement\\_descriptor\\_suffixstring\n    \n    Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. The concatenated descriptor must contain 1-22 characters.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    confirmation\\_tokenstringonly when confirm=true\n    \n*   #### \n    \n    error\\_on\\_requires\\_actionbooleanonly when confirm=true\n    \n*   #### \n    \n    mandatestringonly when confirm=true\n    \n*   #### \n    \n    mandate\\_dataobjectonly when confirm=true\n    \n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n*   #### \n    \n    payment\\_method\\_configurationstring\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobject\n    \n*   #### \n    \n    payment\\_method\\_typesarray of strings\n    \n\n*   #### \n    \n    return\\_urlstringonly when confirm=true\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    transfer\\_groupstringConnect only\n    \n\n### Returns\n\nReturns a PaymentIntent object.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=2000 \\  -d currency=usd \\  -d \"automatic_payment_methods[enabled]\"=true\n```\n\n```\n{  \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800504,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Update a PaymentIntent](https://docs.stripe.com/api/payment_intents/update)\n\nUpdates properties on a PaymentIntent object without confirming.\n\nDepending on which properties you update, you might need to confirm the PaymentIntent again. For example, updating the `payment_method` always requires you to confirm the PaymentIntent again. If you prefer to update and confirm at the same time, we recommend updating properties through the [confirm API](https://docs.stripe.com/api/payment_intents/confirm) instead.\n\n### Parameters\n\n*   Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).\n    \n\n*   ID of the Customer this PaymentIntent belongs to, if one exists.\n    \n    Payment methods attached to other Customers cannot be used with this PaymentIntent.\n    \n    If present in combination with [setup\\_future\\_usage](#payment_intent_object-setup_future_usage), this PaymentIntent’s payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://docs.stripe.com/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.\n    \n*   Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).\n    \n*   Indicates that you intend to make future payments with this PaymentIntent’s payment method.\n    \n    Providing this parameter will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://docs.stripe.com/api/payment_methods/attach) to a Customer after the transaction completes.\n    \n    When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://docs.stripe.com/strong-customer-authentication).\n    \n    If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   Shipping information for this PaymentIntent.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    For card charges, use [statement\\_descriptor\\_suffix](https://stripe.com/docs/payments/account/statement-descriptors#dynamic). Otherwise, you can use this value as the complete description of a charge on your customers’ statements. It must contain at least one letter and be 1–22 characters long.\n    \n*   #### \n    \n    statement\\_descriptor\\_suffixstring\n    \n    Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    capture\\_methodenumsecret key only\n    \n*   #### \n    \n    payment\\_method\\_configurationstring\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobject\n    \n*   #### \n    \n    payment\\_method\\_typesarray of strings\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    transfer\\_groupstringConnect only\n    \n\n### Returns\n\nReturns a PaymentIntent object.\n\nPOST /v1/payment\\_intents/:id\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_3MtwBwLkdIwHu7ix28a3tqPa \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800504,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Retrieve a PaymentIntent](https://docs.stripe.com/api/payment_intents/retrieve)\n\nRetrieves the details of a PaymentIntent that has previously been created.\n\nYou can retrieve a PaymentIntent client-side using a publishable key when the `client_secret` is in the query string.\n\nIf you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the [payment intent](#payment_intent_object) object reference for more details.\n\n### Parameters\n\n*   #### \n    \n    client\\_secretstringRequired if you use a publishable key.\n    \n    The client secret of the PaymentIntent. We require it if you use a publishable key to retrieve the source.\n    \n\n### Returns\n\nReturns a PaymentIntent if a valid identifier was provided.\n\nGET /v1/payment\\_intents/:id\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_3MtwBwLkdIwHu7ix28a3tqPa \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800504,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [List all PaymentIntents](https://docs.stripe.com/api/payment_intents/list)\n\nReturns a list of PaymentIntents.\n\n### Parameters\n\n*   Only return PaymentIntents for the customer that this customer ID specifies.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` PaymentIntents, starting after PaymentIntent `starting_after`. Each entry in the array is a separate PaymentIntent object. If no other PaymentIntents are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/payment_intents \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/payment_intents\",  \"has_more\": false,  \"data\": [    {      \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",      \"object\": \"payment_intent\",      \"amount\": 2000,      \"amount_capturable\": 0,      \"amount_details\": {        \"tip\": {}      },      \"amount_received\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"automatic_payment_methods\": {        \"enabled\": true      },      \"canceled_at\": null,      \"cancellation_reason\": null,      \"capture_method\": \"automatic\",      \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",      \"confirmation_method\": \"automatic\",      \"created\": 1680800504,      \"currency\": \"usd\",      \"customer\": null,      \"description\": null,      \"invoice\": null,      \"last_payment_error\": null,      \"latest_charge\": null,      \"livemode\": false,      \"metadata\": {},      \"next_action\": null,      \"on_behalf_of\": null,      \"payment_method\": null,      \"payment_method_options\": {        \"card\": {          \"installments\": null,          \"mandate_options\": null,          \"network\": null,          \"request_three_d_secure\": \"automatic\"        },        \"link\": {          \"persistent_token\": null        }      },      \"payment_method_types\": [        \"card\",        \"link\"      ],      \"processing\": null,      \"receipt_email\": null,      \"review\": null,      \"setup_future_usage\": null,      \"shipping\": null,      \"source\": null,      \"statement_descriptor\": null,      \"statement_descriptor_suffix\": null,      \"status\": \"requires_payment_method\",      \"transfer_data\": null,      \"transfer_group\": null    }    {...}    {...}  ],}\n```",
    "title": "The PaymentIntent object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/connected-accounts",
    "markdown": "# Connected Accounts | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fconnected-accounts)\n\nTo act as connected accounts, clients can issue requests using the `Stripe-Account` special header. Make sure that this header contains a Stripe account ID, which usually starts with the `acct_` prefix.\n\nThe value is set per-request as shown in the adjacent code sample. Methods on the returned object reuse the same account ID.\n\n*   Related guide: [Making API calls for connected accounts](https://docs.stripe.com/connect/authentication)\n\n```\ncurl https://api.stripe.com/v1/charges/ch_3LmjFA2eZvKYlo2C09TLIsrw \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -H \"Stripe-Account: acct_1032D82eZvKYlo2C\" \\  -G\n```\n\n## [Errors](https://docs.stripe.com/api/errors)\n\nStripe uses conventional HTTP response codes to indicate the success or failure of an API request. In general: Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, a charge failed, etc.). Codes in the `5xx` range indicate an error with Stripe’s servers (these are rare).\n\nSome `4xx` errors that could be handled programmatically (e.g., a card is [declined](https://docs.stripe.com/declines)) include an [error code](https://docs.stripe.com/error-codes) that briefly explains the error reported.\n\n### Attributes\n\n*   The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `api_error` |\n    | `card_error` |\n    | `idempotency_error` |\n    | `invalid_request_error` |\n    \n*   For some errors that could be handled programmatically, a short string indicating the [error code](https://docs.stripe.com/error-codes) reported.\n    \n*   #### \n    \n    decline\\_codenullable string\n    \n*   A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n    \n*   If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.\n    \n*   #### \n    \n    payment\\_intentnullable object\n    \n\n### More\n\n*   #### \n    \n    payment\\_method\\_typenullable string\n    \n\n*   #### \n    \n    request\\_log\\_urlnullable string\n    \n*   #### \n    \n    setup\\_intentnullable object\n    \n\n*   #### \n    \n    payment\\_methodnullable object\n    \n\nHTTP Status Code Summary\n\n|     |     |     |\n| --- | --- | --- |\n| 200 | OK  | Everything worked as expected. |\n| 400 | Bad Request | The request was unacceptable, often due to missing a required parameter. |\n| 401 | Unauthorized | No valid API key provided. |\n| 402 | Request Failed | The parameters were valid but the request failed. |\n| 403 | Forbidden | The API key doesn’t have permissions to perform the request. |\n| 404 | Not Found | The requested resource doesn’t exist. |\n| 409 | Conflict | The request conflicts with another request (perhaps due to using the same idempotent key). |\n| 429 | Too Many Requests | Too many requests hit the API too quickly. We recommend an exponential backoff of your requests. |\n| 500, 502, 503, 504 | Server Errors | Something went wrong on Stripe’s end. (These are rare.) |\n\nError Types\n\n|     |     |\n| --- | --- |\n| `api_error` | API errors cover any other type of problem (e.g., a temporary problem with Stripe’s servers), and are extremely uncommon. |\n| `card_error` | Card errors are the most common type of error you should expect to handle. They result when the user enters a card that can’t be charged for some reason. |\n| `idempotency_error` | Idempotency errors occur when an `Idempotency-Key` is re-used on a request that does not match the first request’s API endpoint and parameters. |\n| `invalid_request_error` | Invalid request errors arise when your request has invalid parameters. |\n\n## [Handling errors](https://docs.stripe.com/api/errors/handling)\n\nOur Client libraries raise exceptions for many reasons, such as a failed charge, invalid parameters, authentication errors, and network unavailability. We recommend writing code that gracefully handles all possible API exceptions.\n\n*   Related guide: [Error Handling](https://docs.stripe.com/error-handling)\n\n```\n# Select a client library to see examples of# handling different kinds of errors.\n```\n\n## [Expanding Responses](https://docs.stripe.com/api/expanding_objects)\n\nMany objects allow you to request additional information as an expanded response by using the `expand` request parameter. This parameter is available on all API requests, and applies to the response of that request only. You can expand responses in two ways.\n\nIn many cases, an object contains the ID of a related object in its response properties. For example, a `Charge` might have an associated Customer ID. You can expand these objects in line with the expand request parameter. The `expandable` label in this documentation indicates ID fields that you can expand into objects.\n\nSome available fields aren’t included in the responses by default, such as the `number` and `cvc` fields for the Issuing Card object. You can request these fields as an expanded response by using the `expand` request parameter.\n\nYou can expand recursively by specifying nested fields after a dot (`.`). For example, requesting `invoice.subscription` on a charge expands the `invoice` property into a full Invoice object, then expands the `subscription` property on that invoice into a full Subscription object.\n\nYou can use the `expand` parameter on any endpoint that returns expandable fields, including list, create, and update endpoints.\n\nExpansions on list requests start with the `data` property. For example, you can expand `data.customers` on a request to list charges and associated customers. Performing deep expansions on numerous list requests might result in slower processing times.\n\nExpansions have a maximum depth of four levels (for example, the deepest expansion allowed when listing charges is `data.invoice.subscription.default_source`).\n\nYou can expand multiple objects at the same time by identifying multiple items in the `expand` array.\n\n*   Related guide: [Expanding responses](https://docs.stripe.com/expand)\n*   Related video: [Expand](https://www.youtube.com/watch?v=m8Vj_CEWyQc)\n\n```\ncurl https://api.stripe.com/v1/charges/ch_3LmzzQ2eZvKYlo2C0XjzUzJV \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -d \"expand[]\"=customer \\  -d \"expand[]\"=\"invoice.subscription\" \\  -G\n```\n\n```\n{  \"id\": \"ch_3LmzzQ2eZvKYlo2C0XjzUzJV\",  \"object\": \"charge\",  \"customer\": {    \"id\": \"cu_14HOpH2eZvKYlo2CxXIM7Pb2\",    \"object\": \"customer\",    // ...  },  \"invoice\": {    \"id\": \"in_1LmzzQ2eZvKYlo2CpyWn8szu\",    \"object\": \"invoice\",    \"subscription\": {      \"id\": \"su_1LmzoG2eZvKYlo2Cpw6S7dAq\",      \"object\": \"subscription\",      // ...    },    // ...  },  // ...}\n```\n\n## [Idempotent requests](https://docs.stripe.com/api/idempotent_requests)\n\nThe API supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. When creating or updating an object, use an idempotency key. Then, if a connection error occurs, you can safely repeat the request without risk of creating a second object or performing the update twice.\n\nTo perform an idempotent request, provide an additional `IdempotencyKey` element to the request options.\n\nStripe’s idempotency works by saving the resulting status code and body of the first request made for any given idempotency key, regardless of whether it succeeds or fails. Subsequent requests with the same key return the same result, including `500` errors.\n\nA client generates an idempotency key, which is a unique key that the server uses to recognize subsequent retries of the same request. How you create unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions. Idempotency keys are up to 255 characters long.\n\nYou can remove keys from the system automatically after they’re at least 24 hours old. We generate a new request if a key is reused after the original is pruned. The idempotency layer compares incoming parameters to those of the original request and errors if they’re the same to prevent accidental misuse.\n\nWe save results only after the execution of an endpoint begins. If incoming parameters fail validation, or the request conflicts with another request that’s executing concurrently, we don’t save the idempotent result because no API endpoint initiates the execution. You can retry these requests. Learn more about when you can [retry idempotent requests](https://docs.stripe.com/error-low-level#idempotency).\n\nAll `POST` requests accept idempotency keys. Don’t send idempotency keys in `GET` and `DELETE` requests because it has no effect. These requests are idempotent by definition.\n\n```\ncurl https://api.stripe.com/v1/customers \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -H \"Idempotency-Key: KG5LxwFBepaKHyUD\" \\  -d description=\"My First Test Customer (created for API docs at https://docs.stripe.com/api)\"\n```",
    "title": "Connected Accounts | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/expanding_objects",
    "markdown": "# Expanding Responses | Stripe API Reference\n\nMany objects allow you to request additional information as an expanded response by using the `expand` request parameter. This parameter is available on all API requests, and applies to the response of that request only. You can expand responses in two ways.\n\nIn many cases, an object contains the ID of a related object in its response properties. For example, a `Charge` might have an associated Customer ID. You can expand these objects in line with the expand request parameter. The `expandable` label in this documentation indicates ID fields that you can expand into objects.\n\nSome available fields aren’t included in the responses by default, such as the `number` and `cvc` fields for the Issuing Card object. You can request these fields as an expanded response by using the `expand` request parameter.\n\nYou can expand recursively by specifying nested fields after a dot (`.`). For example, requesting `invoice.subscription` on a charge expands the `invoice` property into a full Invoice object, then expands the `subscription` property on that invoice into a full Subscription object.\n\nYou can use the `expand` parameter on any endpoint that returns expandable fields, including list, create, and update endpoints.\n\nExpansions on list requests start with the `data` property. For example, you can expand `data.customers` on a request to list charges and associated customers. Performing deep expansions on numerous list requests might result in slower processing times.\n\nExpansions have a maximum depth of four levels (for example, the deepest expansion allowed when listing charges is `data.invoice.subscription.default_source`).\n\nYou can expand multiple objects at the same time by identifying multiple items in the `expand` array.\n\n*   Related guide: [Expanding responses](https://docs.stripe.com/expand)\n*   Related video: [Expand](https://www.youtube.com/watch?v=m8Vj_CEWyQc)\n\n```\ncurl https://api.stripe.com/v1/charges/ch_3LmzzQ2eZvKYlo2C0XjzUzJV \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -d \"expand[]\"=customer \\  -d \"expand[]\"=\"invoice.subscription\" \\  -G\n```\n\n```\n{  \"id\": \"ch_3LmzzQ2eZvKYlo2C0XjzUzJV\",  \"object\": \"charge\",  \"customer\": {    \"id\": \"cu_14HOpH2eZvKYlo2CxXIM7Pb2\",    \"object\": \"customer\",    // ...  },  \"invoice\": {    \"id\": \"in_1LmzzQ2eZvKYlo2CpyWn8szu\",    \"object\": \"invoice\",    \"subscription\": {      \"id\": \"su_1LmzoG2eZvKYlo2Cpw6S7dAq\",      \"object\": \"subscription\",      // ...    },    // ...  },  // ...}\n```\n\n## [Idempotent requests](https://docs.stripe.com/api/idempotent_requests)\n\nThe API supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. When creating or updating an object, use an idempotency key. Then, if a connection error occurs, you can safely repeat the request without risk of creating a second object or performing the update twice.\n\nTo perform an idempotent request, provide an additional `IdempotencyKey` element to the request options.\n\nStripe’s idempotency works by saving the resulting status code and body of the first request made for any given idempotency key, regardless of whether it succeeds or fails. Subsequent requests with the same key return the same result, including `500` errors.\n\nA client generates an idempotency key, which is a unique key that the server uses to recognize subsequent retries of the same request. How you create unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions. Idempotency keys are up to 255 characters long.\n\nYou can remove keys from the system automatically after they’re at least 24 hours old. We generate a new request if a key is reused after the original is pruned. The idempotency layer compares incoming parameters to those of the original request and errors if they’re the same to prevent accidental misuse.\n\nWe save results only after the execution of an endpoint begins. If incoming parameters fail validation, or the request conflicts with another request that’s executing concurrently, we don’t save the idempotent result because no API endpoint initiates the execution. You can retry these requests. Learn more about when you can [retry idempotent requests](https://docs.stripe.com/error-low-level#idempotency).\n\nAll `POST` requests accept idempotency keys. Don’t send idempotency keys in `GET` and `DELETE` requests because it has no effect. These requests are idempotent by definition.\n\n```\ncurl https://api.stripe.com/v1/customers \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -H \"Idempotency-Key: KG5LxwFBepaKHyUD\" \\  -d description=\"My First Test Customer (created for API docs at https://docs.stripe.com/api)\"\n```\n\n## [Metadata](https://docs.stripe.com/api/metadata)\n\nUpdateable Stripe objects—including [Account](https://docs.stripe.com/api/accounts), [Charge](https://docs.stripe.com/api/charges), [Customer](https://docs.stripe.com/api/customers), [PaymentIntent](https://docs.stripe.com/api/payment_intents), [Refund](https://docs.stripe.com/api/refunds), [Subscription](https://docs.stripe.com/api/subscriptions), and [Transfer](https://docs.stripe.com/api/transfers) have a `metadata` parameter. You can use this parameter to attach key-value data to these Stripe objects.\n\nYou can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long.\n\nYou can use metadata to store additional, structured information on an object. For example, you could store your user’s full name and corresponding unique identifier from your system on a Stripe [Customer](https://docs.stripe.com/api/customers) object. Stripe doesn’t use metadata—for example, we don’t use it to authorize or decline a charge and it won’t be seen by your users unless you choose to show it to them.\n\nSome of the objects listed above also support a `description` parameter. You can use the `description` parameter to annotate a charge-for example, a human-readable description such as `2 shirts for test@example.com`. Unlike `metadata`, `description` is a single string, which your users might see (for example, in email receipts Stripe sends on your behalf).\n\nDon’t store any sensitive information (bank account numbers, card details, and so on) as metadata or in the `description` parameter.\n\n*   Related guide: [Metadata](https://docs.stripe.com/metadata)\n\n## Sample metadata use cases\n\n*   **Link IDs**: Attach your system’s unique IDs to a Stripe object to simplify lookups. For example, add your order number to a charge, your user ID to a customer or recipient, or a unique receipt number to a transfer.\n*   **Refund papertrails**: Store information about the reason for a refund and the individual responsible for its creation.\n*   **Customer details**: Annotate a customer by storing an internal ID for your future use.\n\n```\ncurl https://api.stripe.com/v1/customers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cus_123456789\",  \"object\": \"customer\",  \"address\": {    \"city\": \"city\",    \"country\": \"US\",    \"line1\": \"line 1\",    \"line2\": \"line 2\",    \"postal_code\": \"90210\",    \"state\": \"CA\"  },  \"balance\": 0,  \"created\": 1483565364,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": null,  \"invoice_prefix\": \"C11F7E1\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": null,  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\"}\n```",
    "title": "Expanding Responses | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/authentication",
    "markdown": "# Authentication | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fauthentication)\n\nThe Stripe API uses [API keys](https://docs.stripe.com/keys) to authenticate requests. You can view and manage your API keys in [the Stripe Dashboard](https://dashboard.stripe.com/login?redirect=/apikeys).\n\nTest mode secret keys have the prefix `sk_test_` and live mode secret keys have the prefix `sk_live_`. Alternatively, you can use [restricted API keys](https://docs.stripe.com/keys#limit-access) for granular permissions.\n\nYour API keys carry many privileges, so be sure to keep them secure! Do not share your secret API keys in publicly accessible areas such as GitHub, client-side code, and so forth.\n\nAll API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Calls made over plain HTTP will fail. API requests without authentication will also fail.\n\n```\ncurl https://api.stripe.com/v1/charges \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:# The colon prevents curl from asking for a password.\n```\n\nYour API Key\n\nA sample test API key is included in all the examples here, so you can test any example right away. Do not submit any personally identifiable information in requests made with this key.\n\nTo test requests using your account, replace the sample API key with your actual API key or [sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fauthentication).\n\n## [Connected Accounts](https://docs.stripe.com/api/connected-accounts)\n\nTo act as connected accounts, clients can issue requests using the `Stripe-Account` special header. Make sure that this header contains a Stripe account ID, which usually starts with the `acct_` prefix.\n\nThe value is set per-request as shown in the adjacent code sample. Methods on the returned object reuse the same account ID.\n\n*   Related guide: [Making API calls for connected accounts](https://docs.stripe.com/connect/authentication)\n\n```\ncurl https://api.stripe.com/v1/charges/ch_3LmjFA2eZvKYlo2C09TLIsrw \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -H \"Stripe-Account: acct_1032D82eZvKYlo2C\" \\  -G\n```\n\n## [Errors](https://docs.stripe.com/api/errors)\n\nStripe uses conventional HTTP response codes to indicate the success or failure of an API request. In general: Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, a charge failed, etc.). Codes in the `5xx` range indicate an error with Stripe’s servers (these are rare).\n\nSome `4xx` errors that could be handled programmatically (e.g., a card is [declined](https://docs.stripe.com/declines)) include an [error code](https://docs.stripe.com/error-codes) that briefly explains the error reported.\n\n### Attributes\n\n*   The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `api_error` |\n    | `card_error` |\n    | `idempotency_error` |\n    | `invalid_request_error` |\n    \n*   For some errors that could be handled programmatically, a short string indicating the [error code](https://docs.stripe.com/error-codes) reported.\n    \n*   #### \n    \n    decline\\_codenullable string\n    \n*   A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n    \n*   If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.\n    \n*   #### \n    \n    payment\\_intentnullable object\n    \n\n### More\n\n*   #### \n    \n    payment\\_method\\_typenullable string\n    \n\n*   #### \n    \n    request\\_log\\_urlnullable string\n    \n*   #### \n    \n    setup\\_intentnullable object\n    \n\n*   #### \n    \n    payment\\_methodnullable object\n    \n\nHTTP Status Code Summary\n\n|     |     |     |\n| --- | --- | --- |\n| 200 | OK  | Everything worked as expected. |\n| 400 | Bad Request | The request was unacceptable, often due to missing a required parameter. |\n| 401 | Unauthorized | No valid API key provided. |\n| 402 | Request Failed | The parameters were valid but the request failed. |\n| 403 | Forbidden | The API key doesn’t have permissions to perform the request. |\n| 404 | Not Found | The requested resource doesn’t exist. |\n| 409 | Conflict | The request conflicts with another request (perhaps due to using the same idempotent key). |\n| 429 | Too Many Requests | Too many requests hit the API too quickly. We recommend an exponential backoff of your requests. |\n| 500, 502, 503, 504 | Server Errors | Something went wrong on Stripe’s end. (These are rare.) |\n\nError Types\n\n|     |     |\n| --- | --- |\n| `api_error` | API errors cover any other type of problem (e.g., a temporary problem with Stripe’s servers), and are extremely uncommon. |\n| `card_error` | Card errors are the most common type of error you should expect to handle. They result when the user enters a card that can’t be charged for some reason. |\n| `idempotency_error` | Idempotency errors occur when an `Idempotency-Key` is re-used on a request that does not match the first request’s API endpoint and parameters. |\n| `invalid_request_error` | Invalid request errors arise when your request has invalid parameters. |\n\n## [Handling errors](https://docs.stripe.com/api/errors/handling)\n\nOur Client libraries raise exceptions for many reasons, such as a failed charge, invalid parameters, authentication errors, and network unavailability. We recommend writing code that gracefully handles all possible API exceptions.\n\n*   Related guide: [Error Handling](https://docs.stripe.com/error-handling)\n\n```\n# Select a client library to see examples of# handling different kinds of errors.\n```\n\n## [Expanding Responses](https://docs.stripe.com/api/expanding_objects)\n\nMany objects allow you to request additional information as an expanded response by using the `expand` request parameter. This parameter is available on all API requests, and applies to the response of that request only. You can expand responses in two ways.\n\nIn many cases, an object contains the ID of a related object in its response properties. For example, a `Charge` might have an associated Customer ID. You can expand these objects in line with the expand request parameter. The `expandable` label in this documentation indicates ID fields that you can expand into objects.\n\nSome available fields aren’t included in the responses by default, such as the `number` and `cvc` fields for the Issuing Card object. You can request these fields as an expanded response by using the `expand` request parameter.\n\nYou can expand recursively by specifying nested fields after a dot (`.`). For example, requesting `invoice.subscription` on a charge expands the `invoice` property into a full Invoice object, then expands the `subscription` property on that invoice into a full Subscription object.\n\nYou can use the `expand` parameter on any endpoint that returns expandable fields, including list, create, and update endpoints.\n\nExpansions on list requests start with the `data` property. For example, you can expand `data.customers` on a request to list charges and associated customers. Performing deep expansions on numerous list requests might result in slower processing times.\n\nExpansions have a maximum depth of four levels (for example, the deepest expansion allowed when listing charges is `data.invoice.subscription.default_source`).\n\nYou can expand multiple objects at the same time by identifying multiple items in the `expand` array.\n\n*   Related guide: [Expanding responses](https://docs.stripe.com/expand)\n*   Related video: [Expand](https://www.youtube.com/watch?v=m8Vj_CEWyQc)\n\n```\ncurl https://api.stripe.com/v1/charges/ch_3LmzzQ2eZvKYlo2C0XjzUzJV \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -d \"expand[]\"=customer \\  -d \"expand[]\"=\"invoice.subscription\" \\  -G\n```\n\n```\n{  \"id\": \"ch_3LmzzQ2eZvKYlo2C0XjzUzJV\",  \"object\": \"charge\",  \"customer\": {    \"id\": \"cu_14HOpH2eZvKYlo2CxXIM7Pb2\",    \"object\": \"customer\",    // ...  },  \"invoice\": {    \"id\": \"in_1LmzzQ2eZvKYlo2CpyWn8szu\",    \"object\": \"invoice\",    \"subscription\": {      \"id\": \"su_1LmzoG2eZvKYlo2Cpw6S7dAq\",      \"object\": \"subscription\",      // ...    },    // ...  },  // ...}\n```",
    "title": "Authentication | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/errors",
    "markdown": "# Errors | Stripe API Reference\n\nStripe uses conventional HTTP response codes to indicate the success or failure of an API request. In general: Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, a charge failed, etc.). Codes in the `5xx` range indicate an error with Stripe’s servers (these are rare).\n\nSome `4xx` errors that could be handled programmatically (e.g., a card is [declined](https://docs.stripe.com/declines)) include an [error code](https://docs.stripe.com/error-codes) that briefly explains the error reported.\n\n### Attributes\n\n*   The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `api_error` |\n    | `card_error` |\n    | `idempotency_error` |\n    | `invalid_request_error` |\n    \n*   For some errors that could be handled programmatically, a short string indicating the [error code](https://docs.stripe.com/error-codes) reported.\n    \n*   #### \n    \n    decline\\_codenullable string\n    \n*   A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n    \n*   If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.\n    \n*   #### \n    \n    payment\\_intentnullable object\n    \n\n### More\n\n*   #### \n    \n    payment\\_method\\_typenullable string\n    \n\n*   #### \n    \n    request\\_log\\_urlnullable string\n    \n*   #### \n    \n    setup\\_intentnullable object\n    \n\n*   #### \n    \n    payment\\_methodnullable object\n    \n\nHTTP Status Code Summary\n\n|     |     |     |\n| --- | --- | --- |\n| 200 | OK  | Everything worked as expected. |\n| 400 | Bad Request | The request was unacceptable, often due to missing a required parameter. |\n| 401 | Unauthorized | No valid API key provided. |\n| 402 | Request Failed | The parameters were valid but the request failed. |\n| 403 | Forbidden | The API key doesn’t have permissions to perform the request. |\n| 404 | Not Found | The requested resource doesn’t exist. |\n| 409 | Conflict | The request conflicts with another request (perhaps due to using the same idempotent key). |\n| 429 | Too Many Requests | Too many requests hit the API too quickly. We recommend an exponential backoff of your requests. |\n| 500, 502, 503, 504 | Server Errors | Something went wrong on Stripe’s end. (These are rare.) |\n\nError Types\n\n|     |     |\n| --- | --- |\n| `api_error` | API errors cover any other type of problem (e.g., a temporary problem with Stripe’s servers), and are extremely uncommon. |\n| `card_error` | Card errors are the most common type of error you should expect to handle. They result when the user enters a card that can’t be charged for some reason. |\n| `idempotency_error` | Idempotency errors occur when an `Idempotency-Key` is re-used on a request that does not match the first request’s API endpoint and parameters. |\n| `invalid_request_error` | Invalid request errors arise when your request has invalid parameters. |\n\n## [Handling errors](https://docs.stripe.com/api/errors/handling)\n\nOur Client libraries raise exceptions for many reasons, such as a failed charge, invalid parameters, authentication errors, and network unavailability. We recommend writing code that gracefully handles all possible API exceptions.\n\n*   Related guide: [Error Handling](https://docs.stripe.com/error-handling)\n\n```\n# Select a client library to see examples of# handling different kinds of errors.\n```\n\n## [Expanding Responses](https://docs.stripe.com/api/expanding_objects)\n\nMany objects allow you to request additional information as an expanded response by using the `expand` request parameter. This parameter is available on all API requests, and applies to the response of that request only. You can expand responses in two ways.\n\nIn many cases, an object contains the ID of a related object in its response properties. For example, a `Charge` might have an associated Customer ID. You can expand these objects in line with the expand request parameter. The `expandable` label in this documentation indicates ID fields that you can expand into objects.\n\nSome available fields aren’t included in the responses by default, such as the `number` and `cvc` fields for the Issuing Card object. You can request these fields as an expanded response by using the `expand` request parameter.\n\nYou can expand recursively by specifying nested fields after a dot (`.`). For example, requesting `invoice.subscription` on a charge expands the `invoice` property into a full Invoice object, then expands the `subscription` property on that invoice into a full Subscription object.\n\nYou can use the `expand` parameter on any endpoint that returns expandable fields, including list, create, and update endpoints.\n\nExpansions on list requests start with the `data` property. For example, you can expand `data.customers` on a request to list charges and associated customers. Performing deep expansions on numerous list requests might result in slower processing times.\n\nExpansions have a maximum depth of four levels (for example, the deepest expansion allowed when listing charges is `data.invoice.subscription.default_source`).\n\nYou can expand multiple objects at the same time by identifying multiple items in the `expand` array.\n\n*   Related guide: [Expanding responses](https://docs.stripe.com/expand)\n*   Related video: [Expand](https://www.youtube.com/watch?v=m8Vj_CEWyQc)\n\n```\ncurl https://api.stripe.com/v1/charges/ch_3LmzzQ2eZvKYlo2C0XjzUzJV \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -d \"expand[]\"=customer \\  -d \"expand[]\"=\"invoice.subscription\" \\  -G\n```\n\n```\n{  \"id\": \"ch_3LmzzQ2eZvKYlo2C0XjzUzJV\",  \"object\": \"charge\",  \"customer\": {    \"id\": \"cu_14HOpH2eZvKYlo2CxXIM7Pb2\",    \"object\": \"customer\",    // ...  },  \"invoice\": {    \"id\": \"in_1LmzzQ2eZvKYlo2CpyWn8szu\",    \"object\": \"invoice\",    \"subscription\": {      \"id\": \"su_1LmzoG2eZvKYlo2Cpw6S7dAq\",      \"object\": \"subscription\",      // ...    },    // ...  },  // ...}\n```\n\n## [Idempotent requests](https://docs.stripe.com/api/idempotent_requests)\n\nThe API supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. When creating or updating an object, use an idempotency key. Then, if a connection error occurs, you can safely repeat the request without risk of creating a second object or performing the update twice.\n\nTo perform an idempotent request, provide an additional `IdempotencyKey` element to the request options.\n\nStripe’s idempotency works by saving the resulting status code and body of the first request made for any given idempotency key, regardless of whether it succeeds or fails. Subsequent requests with the same key return the same result, including `500` errors.\n\nA client generates an idempotency key, which is a unique key that the server uses to recognize subsequent retries of the same request. How you create unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions. Idempotency keys are up to 255 characters long.\n\nYou can remove keys from the system automatically after they’re at least 24 hours old. We generate a new request if a key is reused after the original is pruned. The idempotency layer compares incoming parameters to those of the original request and errors if they’re the same to prevent accidental misuse.\n\nWe save results only after the execution of an endpoint begins. If incoming parameters fail validation, or the request conflicts with another request that’s executing concurrently, we don’t save the idempotent result because no API endpoint initiates the execution. You can retry these requests. Learn more about when you can [retry idempotent requests](https://docs.stripe.com/error-low-level#idempotency).\n\nAll `POST` requests accept idempotency keys. Don’t send idempotency keys in `GET` and `DELETE` requests because it has no effect. These requests are idempotent by definition.\n\n```\ncurl https://api.stripe.com/v1/customers \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -H \"Idempotency-Key: KG5LxwFBepaKHyUD\" \\  -d description=\"My First Test Customer (created for API docs at https://docs.stripe.com/api)\"\n```\n\n## [Metadata](https://docs.stripe.com/api/metadata)\n\nUpdateable Stripe objects—including [Account](https://docs.stripe.com/api/accounts), [Charge](https://docs.stripe.com/api/charges), [Customer](https://docs.stripe.com/api/customers), [PaymentIntent](https://docs.stripe.com/api/payment_intents), [Refund](https://docs.stripe.com/api/refunds), [Subscription](https://docs.stripe.com/api/subscriptions), and [Transfer](https://docs.stripe.com/api/transfers) have a `metadata` parameter. You can use this parameter to attach key-value data to these Stripe objects.\n\nYou can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long.\n\nYou can use metadata to store additional, structured information on an object. For example, you could store your user’s full name and corresponding unique identifier from your system on a Stripe [Customer](https://docs.stripe.com/api/customers) object. Stripe doesn’t use metadata—for example, we don’t use it to authorize or decline a charge and it won’t be seen by your users unless you choose to show it to them.\n\nSome of the objects listed above also support a `description` parameter. You can use the `description` parameter to annotate a charge-for example, a human-readable description such as `2 shirts for test@example.com`. Unlike `metadata`, `description` is a single string, which your users might see (for example, in email receipts Stripe sends on your behalf).\n\nDon’t store any sensitive information (bank account numbers, card details, and so on) as metadata or in the `description` parameter.\n\n*   Related guide: [Metadata](https://docs.stripe.com/metadata)\n\n## Sample metadata use cases\n\n*   **Link IDs**: Attach your system’s unique IDs to a Stripe object to simplify lookups. For example, add your order number to a charge, your user ID to a customer or recipient, or a unique receipt number to a transfer.\n*   **Refund papertrails**: Store information about the reason for a refund and the individual responsible for its creation.\n*   **Customer details**: Annotate a customer by storing an internal ID for your future use.\n\n```\ncurl https://api.stripe.com/v1/customers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cus_123456789\",  \"object\": \"customer\",  \"address\": {    \"city\": \"city\",    \"country\": \"US\",    \"line1\": \"line 1\",    \"line2\": \"line 2\",    \"postal_code\": \"90210\",    \"state\": \"CA\"  },  \"balance\": 0,  \"created\": 1483565364,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": null,  \"invoice_prefix\": \"C11F7E1\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": null,  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\"}\n```",
    "title": "Errors | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/idempotent_requests",
    "markdown": "# Idempotent requests | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fidempotent_requests)\n\nThe API supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. When creating or updating an object, use an idempotency key. Then, if a connection error occurs, you can safely repeat the request without risk of creating a second object or performing the update twice.\n\nTo perform an idempotent request, provide an additional `IdempotencyKey` element to the request options.\n\nStripe’s idempotency works by saving the resulting status code and body of the first request made for any given idempotency key, regardless of whether it succeeds or fails. Subsequent requests with the same key return the same result, including `500` errors.\n\nA client generates an idempotency key, which is a unique key that the server uses to recognize subsequent retries of the same request. How you create unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions. Idempotency keys are up to 255 characters long.\n\nYou can remove keys from the system automatically after they’re at least 24 hours old. We generate a new request if a key is reused after the original is pruned. The idempotency layer compares incoming parameters to those of the original request and errors if they’re the same to prevent accidental misuse.\n\nWe save results only after the execution of an endpoint begins. If incoming parameters fail validation, or the request conflicts with another request that’s executing concurrently, we don’t save the idempotent result because no API endpoint initiates the execution. You can retry these requests. Learn more about when you can [retry idempotent requests](https://docs.stripe.com/error-low-level#idempotency).\n\nAll `POST` requests accept idempotency keys. Don’t send idempotency keys in `GET` and `DELETE` requests because it has no effect. These requests are idempotent by definition.\n\n```\ncurl https://api.stripe.com/v1/customers \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -H \"Idempotency-Key: KG5LxwFBepaKHyUD\" \\  -d description=\"My First Test Customer (created for API docs at https://docs.stripe.com/api)\"\n```\n\n## [Metadata](https://docs.stripe.com/api/metadata)\n\nUpdateable Stripe objects—including [Account](https://docs.stripe.com/api/accounts), [Charge](https://docs.stripe.com/api/charges), [Customer](https://docs.stripe.com/api/customers), [PaymentIntent](https://docs.stripe.com/api/payment_intents), [Refund](https://docs.stripe.com/api/refunds), [Subscription](https://docs.stripe.com/api/subscriptions), and [Transfer](https://docs.stripe.com/api/transfers) have a `metadata` parameter. You can use this parameter to attach key-value data to these Stripe objects.\n\nYou can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long.\n\nYou can use metadata to store additional, structured information on an object. For example, you could store your user’s full name and corresponding unique identifier from your system on a Stripe [Customer](https://docs.stripe.com/api/customers) object. Stripe doesn’t use metadata—for example, we don’t use it to authorize or decline a charge and it won’t be seen by your users unless you choose to show it to them.\n\nSome of the objects listed above also support a `description` parameter. You can use the `description` parameter to annotate a charge-for example, a human-readable description such as `2 shirts for test@example.com`. Unlike `metadata`, `description` is a single string, which your users might see (for example, in email receipts Stripe sends on your behalf).\n\nDon’t store any sensitive information (bank account numbers, card details, and so on) as metadata or in the `description` parameter.\n\n*   Related guide: [Metadata](https://docs.stripe.com/metadata)\n\n## Sample metadata use cases\n\n*   **Link IDs**: Attach your system’s unique IDs to a Stripe object to simplify lookups. For example, add your order number to a charge, your user ID to a customer or recipient, or a unique receipt number to a transfer.\n*   **Refund papertrails**: Store information about the reason for a refund and the individual responsible for its creation.\n*   **Customer details**: Annotate a customer by storing an internal ID for your future use.\n\n```\ncurl https://api.stripe.com/v1/customers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cus_123456789\",  \"object\": \"customer\",  \"address\": {    \"city\": \"city\",    \"country\": \"US\",    \"line1\": \"line 1\",    \"line2\": \"line 2\",    \"postal_code\": \"90210\",    \"state\": \"CA\"  },  \"balance\": 0,  \"created\": 1483565364,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": null,  \"invoice_prefix\": \"C11F7E1\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": null,  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\"}\n```",
    "title": "Idempotent requests | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/metadata",
    "markdown": "# Metadata | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fmetadata)\n\nUpdateable Stripe objects—including [Account](https://docs.stripe.com/api/accounts), [Charge](https://docs.stripe.com/api/charges), [Customer](https://docs.stripe.com/api/customers), [PaymentIntent](https://docs.stripe.com/api/payment_intents), [Refund](https://docs.stripe.com/api/refunds), [Subscription](https://docs.stripe.com/api/subscriptions), and [Transfer](https://docs.stripe.com/api/transfers) have a `metadata` parameter. You can use this parameter to attach key-value data to these Stripe objects.\n\nYou can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long.\n\nYou can use metadata to store additional, structured information on an object. For example, you could store your user’s full name and corresponding unique identifier from your system on a Stripe [Customer](https://docs.stripe.com/api/customers) object. Stripe doesn’t use metadata—for example, we don’t use it to authorize or decline a charge and it won’t be seen by your users unless you choose to show it to them.\n\nSome of the objects listed above also support a `description` parameter. You can use the `description` parameter to annotate a charge-for example, a human-readable description such as `2 shirts for test@example.com`. Unlike `metadata`, `description` is a single string, which your users might see (for example, in email receipts Stripe sends on your behalf).\n\nDon’t store any sensitive information (bank account numbers, card details, and so on) as metadata or in the `description` parameter.\n\n*   Related guide: [Metadata](https://docs.stripe.com/metadata)\n\n## Sample metadata use cases\n\n*   **Link IDs**: Attach your system’s unique IDs to a Stripe object to simplify lookups. For example, add your order number to a charge, your user ID to a customer or recipient, or a unique receipt number to a transfer.\n*   **Refund papertrails**: Store information about the reason for a refund and the individual responsible for its creation.\n*   **Customer details**: Annotate a customer by storing an internal ID for your future use.\n\n```\ncurl https://api.stripe.com/v1/customers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cus_123456789\",  \"object\": \"customer\",  \"address\": {    \"city\": \"city\",    \"country\": \"US\",    \"line1\": \"line 1\",    \"line2\": \"line 2\",    \"postal_code\": \"90210\",    \"state\": \"CA\"  },  \"balance\": 0,  \"created\": 1483565364,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": null,  \"invoice_prefix\": \"C11F7E1\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": null,  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\"}\n```\n\n## [Request IDs](https://docs.stripe.com/api/request_ids)\n\nEach API request has an associated request identifier. You can find this value in the response headers, under `Request-Id`. You can also find request identifiers in the URLs of individual request logs in your [Dashboard](https://dashboard.stripe.com/logs).\n\nTo expedite the resolution process, provide the request identifier when you contact us about a specific request.\n\n```\ncurl https://api.stripe.com/v1/customers \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -D \"-\" \\  -X POST\n```",
    "title": "Metadata | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/pagination",
    "markdown": "# Pagination | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fpagination)\n\n## [Request IDs](https://docs.stripe.com/api/request_ids)\n\nEach API request has an associated request identifier. You can find this value in the response headers, under `Request-Id`. You can also find request identifiers in the URLs of individual request logs in your [Dashboard](https://dashboard.stripe.com/logs).\n\nTo expedite the resolution process, provide the request identifier when you contact us about a specific request.\n\n```\ncurl https://api.stripe.com/v1/customers \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -D \"-\" \\  -X POST\n```\n\n## [Versioning](https://docs.stripe.com/api/versioning)\n\n```\ncurl https://api.stripe.com/v1/charges \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -H \"Stripe-Version: 2024-06-20\"\n```",
    "title": "Pagination | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/request_ids",
    "markdown": "# Request IDs | Stripe API Reference\n\nEach API request has an associated request identifier. You can find this value in the response headers, under `Request-Id`. You can also find request identifiers in the URLs of individual request logs in your [Dashboard](https://dashboard.stripe.com/logs).\n\nTo expedite the resolution process, provide the request identifier when you contact us about a specific request.\n\n```\ncurl https://api.stripe.com/v1/customers \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -D \"-\" \\  -X POST\n```\n\n## [Versioning](https://docs.stripe.com/api/versioning)\n\n```\ncurl https://api.stripe.com/v1/charges \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -H \"Stripe-Version: 2024-06-20\"\n```\n\n## [Balance](https://docs.stripe.com/api/balance)\n\nThis is an object representing your Stripe balance. You can retrieve it to see the balance currently on your Stripe account.\n\nYou can also retrieve the balance history, which contains a list of [transactions](https://docs.stripe.com/reporting/balance-transaction-types) that contributed to the balance (charges, payouts, and so forth).\n\nThe available and pending amounts for each currency are broken down further by payment source types.\n\nRelated guide: [Understanding Connect account balances](https://docs.stripe.com/connect/account-balances)\n\n## [Balance Transactions](https://docs.stripe.com/api/balance_transactions)\n\nBalance transactions represent funds moving through your Stripe account. Stripe creates them for every type of transaction that enters or leaves your Stripe account balance.\n\nRelated guide: [Balance transaction types](https://docs.stripe.com/reports/balance-transaction-types)\n\n## [Customer Session](https://docs.stripe.com/api/customer_sessions)\n\nA Customer Session allows you to grant Stripe’s frontend SDKs (like Stripe.js) client-side access control over a Customer.\n\n## [Disputes](https://docs.stripe.com/api/disputes)\n\nA dispute occurs when a customer questions your charge with their card issuer. When this happens, you have the opportunity to respond to the dispute with evidence that shows that the charge is legitimate.\n\nRelated guide: [Disputes and fraud](https://docs.stripe.com/disputes)\n\n## [Events](https://docs.stripe.com/api/events)\n\nEvents are our way of letting you know when something interesting happens in your account. When an interesting event occurs, we create a new `Event` object. For example, when a charge succeeds, we create a `charge.succeeded` event, and when an invoice payment attempt fails, we create an `invoice.payment_failed` event. Certain API requests might create multiple events. For example, if you create a new subscription for a customer, you receive both a `customer.subscription.created` event and a `charge.succeeded` event.\n\nEvents occur when the state of another API resource changes. The event’s data field embeds the resource’s state at the time of the change. For example, a `charge.succeeded` event contains a charge, and an `invoice.payment_failed` event contains an invoice.\n\nAs with other API resources, you can use endpoints to retrieve an [individual event](#retrieve_event) or a [list of events](#list_events) from the API. We also have a separate [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the `Event` objects directly to an endpoint on your server. You can manage webhooks in your [account settings](https://dashboard.stripe.com/account/webhooks). Learn how to [listen for events](https://docs.stripe.com/webhooks) so that your integration can automatically trigger reactions.\n\nWhen using [Connect](https://docs.stripe.com/connect), you can also receive event notifications that occur in connected accounts. For these events, there’s an additional `account` attribute in the received `Event` object.\n\nWe only guarantee access to events through the [Retrieve Event API](#retrieve_event) for 30 days.\n\n## [Files](https://docs.stripe.com/api/files)\n\nThis object represents files hosted on Stripe’s servers. You can upload files with the [create file](#create_file) request (for example, when uploading dispute evidence). Stripe also creates files independently (for example, the results of a [Sigma scheduled query](#scheduled_queries)).\n\nRelated guide: [File upload guide](https://docs.stripe.com/file-upload)\n\n## [File Links](https://docs.stripe.com/api/file_links)\n\nTo share the contents of a `File` object with non-Stripe users, you can create a `FileLink`. `FileLink`s contain a URL that you can use to retrieve the contents of the file without authentication.\n\n## [Mandates](https://docs.stripe.com/api/mandates)\n\nA Mandate is a record of the permission that your customer gives you to debit their payment method.\n\n## [Setup Attempts](https://docs.stripe.com/api/setup_attempts)\n\nA SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation is successful or unsuccessful. You can use SetupAttempts to inspect details of a specific attempt at setting up a payment method using a SetupIntent.\n\n## [Confirmation Token](https://docs.stripe.com/api/confirmation_tokens)\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Request IDs | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/balance",
    "markdown": "# Balance | Stripe API Reference\n\nThis is an object representing your Stripe balance. You can retrieve it to see the balance currently on your Stripe account.\n\nYou can also retrieve the balance history, which contains a list of [transactions](https://docs.stripe.com/reporting/balance-transaction-types) that contributed to the balance (charges, payouts, and so forth).\n\nThe available and pending amounts for each currency are broken down further by payment source types.\n\nRelated guide: [Understanding Connect account balances](https://docs.stripe.com/connect/account-balances)\n\n## [The Balance object](https://docs.stripe.com/api/balance/balance_object)\n\n### Attributes\n\n*   #### \n    \n    availablearray of objects\n    \n    Available funds that you can transfer or pay out automatically by Stripe or explicitly through the [Transfers API](#transfers) or [Payouts API](#payouts). You can find the available balance for each currency and payment type in the `source_types` property.\n    \n*   Funds that aren’t available in the balance yet. You can find the pending balance for each currency and each payment type in the `source_types` property.\n    \n\n### More attributes\n\n*   #### \n    \n    connect\\_reservednullable array of objectsConnect only\n    \n*   #### \n    \n    instant\\_availablenullable array of objects\n    \n\n```\n{  \"object\": \"balance\",  \"available\": [    {      \"amount\": 666670,      \"currency\": \"usd\",      \"source_types\": {        \"card\": 666670      }    }  ],  \"connect_reserved\": [    {      \"amount\": 0,      \"currency\": \"usd\"    }  ],  \"livemode\": false,  \"pending\": [    {      \"amount\": 61414,      \"currency\": \"usd\",      \"source_types\": {        \"card\": 61414      }    }  ]}\n```\n\n## [Retrieve balance](https://docs.stripe.com/api/balance/balance_retrieve)\n\nRetrieves the current account balance, based on the authentication that was used to make the request. For a sample request, see [Accounting for negative balances](https://docs.stripe.com/connect/account-balances#accounting-for-negative-balances).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a balance object for the account that was authenticated in the request.\n\n```\ncurl https://api.stripe.com/v1/balance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"balance\",  \"available\": [    {      \"amount\": 666670,      \"currency\": \"usd\",      \"source_types\": {        \"card\": 666670      }    }  ],  \"connect_reserved\": [    {      \"amount\": 0,      \"currency\": \"usd\"    }  ],  \"livemode\": false,  \"pending\": [    {      \"amount\": 61414,      \"currency\": \"usd\",      \"source_types\": {        \"card\": 61414      }    }  ]}\n```\n\n## [Balance Transactions](https://docs.stripe.com/api/balance_transactions)\n\nBalance transactions represent funds moving through your Stripe account. Stripe creates them for every type of transaction that enters or leaves your Stripe account balance.\n\nRelated guide: [Balance transaction types](https://docs.stripe.com/reports/balance-transaction-types)\n\n## [Customer Session](https://docs.stripe.com/api/customer_sessions)\n\nA Customer Session allows you to grant Stripe’s frontend SDKs (like Stripe.js) client-side access control over a Customer.\n\n## [Disputes](https://docs.stripe.com/api/disputes)\n\nA dispute occurs when a customer questions your charge with their card issuer. When this happens, you have the opportunity to respond to the dispute with evidence that shows that the charge is legitimate.\n\nRelated guide: [Disputes and fraud](https://docs.stripe.com/disputes)\n\n## [Events](https://docs.stripe.com/api/events)\n\nEvents are our way of letting you know when something interesting happens in your account. When an interesting event occurs, we create a new `Event` object. For example, when a charge succeeds, we create a `charge.succeeded` event, and when an invoice payment attempt fails, we create an `invoice.payment_failed` event. Certain API requests might create multiple events. For example, if you create a new subscription for a customer, you receive both a `customer.subscription.created` event and a `charge.succeeded` event.\n\nEvents occur when the state of another API resource changes. The event’s data field embeds the resource’s state at the time of the change. For example, a `charge.succeeded` event contains a charge, and an `invoice.payment_failed` event contains an invoice.\n\nAs with other API resources, you can use endpoints to retrieve an [individual event](#retrieve_event) or a [list of events](#list_events) from the API. We also have a separate [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the `Event` objects directly to an endpoint on your server. You can manage webhooks in your [account settings](https://dashboard.stripe.com/account/webhooks). Learn how to [listen for events](https://docs.stripe.com/webhooks) so that your integration can automatically trigger reactions.\n\nWhen using [Connect](https://docs.stripe.com/connect), you can also receive event notifications that occur in connected accounts. For these events, there’s an additional `account` attribute in the received `Event` object.\n\nWe only guarantee access to events through the [Retrieve Event API](#retrieve_event) for 30 days.\n\n## [Files](https://docs.stripe.com/api/files)\n\nThis object represents files hosted on Stripe’s servers. You can upload files with the [create file](#create_file) request (for example, when uploading dispute evidence). Stripe also creates files independently (for example, the results of a [Sigma scheduled query](#scheduled_queries)).\n\nRelated guide: [File upload guide](https://docs.stripe.com/file-upload)\n\n## [File Links](https://docs.stripe.com/api/file_links)\n\nTo share the contents of a `File` object with non-Stripe users, you can create a `FileLink`. `FileLink`s contain a URL that you can use to retrieve the contents of the file without authentication.\n\n## [Mandates](https://docs.stripe.com/api/mandates)\n\nA Mandate is a record of the permission that your customer gives you to debit their payment method.\n\n## [Setup Attempts](https://docs.stripe.com/api/setup_attempts)\n\nA SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation is successful or unsuccessful. You can use SetupAttempts to inspect details of a specific attempt at setting up a payment method using a SetupIntent.\n\n## [Confirmation Token](https://docs.stripe.com/api/confirmation_tokens)\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Balance | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customers",
    "markdown": "# Customers | Stripe API Reference\n\n## [The Customer object](https://docs.stripe.com/api/customers/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   The customer’s email address.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The customer’s full name or business name.\n    \n*   The customer’s phone number.\n    \n*   Mailing and shipping address for the customer. Appears on invoices emailed to this customer.\n    \n\n### More attributes\n\n*   #### \n    \n    cash\\_balancenullable objectExpandable\n    \n\n*   #### \n    \n    default\\_sourcenullable stringExpandable\n    \n*   #### \n    \n    delinquentnullable boolean\n    \n\n*   #### \n    \n    invoice\\_credit\\_balanceobjectExpandable\n    \n*   #### \n    \n    invoice\\_prefixnullable string\n    \n\n*   #### \n    \n    next\\_invoice\\_sequencenullable integer\n    \n*   #### \n    \n    preferred\\_localesnullable array of strings\n    \n*   #### \n    \n    sourcesnullable objectExpandable\n    \n*   #### \n    \n    subscriptionsnullable objectExpandable\n    \n\n*   #### \n    \n    tax\\_idsnullable objectExpandable\n    \n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [Create a customer](https://docs.stripe.com/api/customers/create)\n\n### Parameters\n\n*   An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.\n    \n*   Customer’s email address. It’s displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to _512 characters_.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The customer’s full name or business name.\n    \n*   The ID of the PaymentMethod to attach to the customer.\n    \n*   The customer’s phone number.\n    \n*   The customer’s shipping information. Appears on invoices emailed to this customer.\n    \n\n### More parameters\n\n*   #### \n    \n    next\\_invoice\\_sequenceinteger\n    \n*   #### \n    \n    preferred\\_localesarray of strings\n    \n\n*   #### \n    \n    tax\\_id\\_dataarray of objects\n    \n\n### Returns\n\nReturns the Customer object after successful customer creation. Raises [an error](#errors) if create parameters are invalid (for example, specifying an invalid coupon or an invalid source).\n\n```\ncurl https://api.stripe.com/v1/customers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Jenny Rosen\" \\  --data-urlencode email=\"jennyrosen@example.com\"\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [Update a customer](https://docs.stripe.com/api/customers/update)\n\nUpdates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the **source** parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the **source** parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the `past_due` state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the **default\\_source** for a customer will not trigger this behavior.\n\nThis request accepts mostly the same arguments as the customer creation call.\n\n### Parameters\n\n*   An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.\n    \n*   Customer’s email address. It’s displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to _512 characters_.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The customer’s full name or business name.\n    \n*   The customer’s phone number.\n    \n*   The customer’s shipping information. Appears on invoices emailed to this customer.\n    \n\n### More parameters\n\n*   #### \n    \n    next\\_invoice\\_sequenceinteger\n    \n*   #### \n    \n    preferred\\_localesarray of strings\n    \n\n### Returns\n\nReturns the customer object if the update succeeded. Raises [an error](#errors) if update parameters are invalid (e.g. specifying an invalid coupon or an invalid source).\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NffrFeUfNV2Hib \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [Retrieve a customer](https://docs.stripe.com/api/customers/retrieve)\n\nRetrieves a Customer object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the Customer object for a valid identifier. If it’s for a deleted Customer, a subset of the customer’s information is returned, including a `deleted` property that’s set to true.\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NffrFeUfNV2Hib \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```",
    "title": "Customers | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/versioning",
    "markdown": "# Versioning | Stripe API Reference\n\n```\ncurl https://api.stripe.com/v1/charges \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -H \"Stripe-Version: 2024-06-20\"\n```\n\n## [Balance](https://docs.stripe.com/api/balance)\n\nThis is an object representing your Stripe balance. You can retrieve it to see the balance currently on your Stripe account.\n\nYou can also retrieve the balance history, which contains a list of [transactions](https://docs.stripe.com/reporting/balance-transaction-types) that contributed to the balance (charges, payouts, and so forth).\n\nThe available and pending amounts for each currency are broken down further by payment source types.\n\nRelated guide: [Understanding Connect account balances](https://docs.stripe.com/connect/account-balances)\n\n## [Balance Transactions](https://docs.stripe.com/api/balance_transactions)\n\nBalance transactions represent funds moving through your Stripe account. Stripe creates them for every type of transaction that enters or leaves your Stripe account balance.\n\nRelated guide: [Balance transaction types](https://docs.stripe.com/reports/balance-transaction-types)\n\n## [Customer Session](https://docs.stripe.com/api/customer_sessions)\n\nA Customer Session allows you to grant Stripe’s frontend SDKs (like Stripe.js) client-side access control over a Customer.\n\n## [Disputes](https://docs.stripe.com/api/disputes)\n\nA dispute occurs when a customer questions your charge with their card issuer. When this happens, you have the opportunity to respond to the dispute with evidence that shows that the charge is legitimate.\n\nRelated guide: [Disputes and fraud](https://docs.stripe.com/disputes)\n\n## [Events](https://docs.stripe.com/api/events)\n\nEvents are our way of letting you know when something interesting happens in your account. When an interesting event occurs, we create a new `Event` object. For example, when a charge succeeds, we create a `charge.succeeded` event, and when an invoice payment attempt fails, we create an `invoice.payment_failed` event. Certain API requests might create multiple events. For example, if you create a new subscription for a customer, you receive both a `customer.subscription.created` event and a `charge.succeeded` event.\n\nEvents occur when the state of another API resource changes. The event’s data field embeds the resource’s state at the time of the change. For example, a `charge.succeeded` event contains a charge, and an `invoice.payment_failed` event contains an invoice.\n\nAs with other API resources, you can use endpoints to retrieve an [individual event](#retrieve_event) or a [list of events](#list_events) from the API. We also have a separate [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the `Event` objects directly to an endpoint on your server. You can manage webhooks in your [account settings](https://dashboard.stripe.com/account/webhooks). Learn how to [listen for events](https://docs.stripe.com/webhooks) so that your integration can automatically trigger reactions.\n\nWhen using [Connect](https://docs.stripe.com/connect), you can also receive event notifications that occur in connected accounts. For these events, there’s an additional `account` attribute in the received `Event` object.\n\nWe only guarantee access to events through the [Retrieve Event API](#retrieve_event) for 30 days.\n\n## [Files](https://docs.stripe.com/api/files)\n\nThis object represents files hosted on Stripe’s servers. You can upload files with the [create file](#create_file) request (for example, when uploading dispute evidence). Stripe also creates files independently (for example, the results of a [Sigma scheduled query](#scheduled_queries)).\n\nRelated guide: [File upload guide](https://docs.stripe.com/file-upload)\n\n## [File Links](https://docs.stripe.com/api/file_links)\n\nTo share the contents of a `File` object with non-Stripe users, you can create a `FileLink`. `FileLink`s contain a URL that you can use to retrieve the contents of the file without authentication.\n\n## [Mandates](https://docs.stripe.com/api/mandates)\n\nA Mandate is a record of the permission that your customer gives you to debit their payment method.\n\n## [Setup Attempts](https://docs.stripe.com/api/setup_attempts)\n\nA SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation is successful or unsuccessful. You can use SetupAttempts to inspect details of a specific attempt at setting up a payment method using a SetupIntent.\n\n## [Confirmation Token](https://docs.stripe.com/api/confirmation_tokens)\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Versioning | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/balance_transactions",
    "markdown": "# Balance Transactions | Stripe API Reference\n\nBalance transactions represent funds moving through your Stripe account. Stripe creates them for every type of transaction that enters or leaves your Stripe account balance.\n\nRelated guide: [Balance transaction types](https://docs.stripe.com/reports/balance-transaction-types)\n\n## [The Balance Transaction object](https://docs.stripe.com/api/balance_transactions/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Gross amount of this transaction (in cents). A positive value represents funds charged to another party, and a negative value represents funds sent to another party.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Fees (in cents) paid for this transaction. Represented as a positive integer when assessed.\n    \n*   #### \n    \n    fee\\_detailsarray of objects\n    \n    Detailed breakdown of fees (in cents) paid for this transaction.\n    \n*   Net impact to a Stripe balance (in cents). A positive value represents incrementing a Stripe balance, and a negative value decrementing a Stripe balance. You can calculate the net impact of a transaction on a balance by `amount` - `fee`\n    \n*   #### \n    \n    sourcenullable stringExpandable\n    \n    This transaction relates to the Stripe object.\n    \n*   The transaction’s net funds status in the Stripe balance, which are either `available` or `pending`.\n    \n*   Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. Learn more about [balance transaction types and what they represent](https://stripe.com/docs/reports/balance-transaction-types). To classify transactions for accounting purposes, consider `reporting_category` instead.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `adjustment` |\n    | `advance` |\n    | `advance_funding` |\n    | `anticipation_repayment` |\n    | `application_fee` |\n    | `application_fee_refund` |\n    | `charge` |\n    | `climate_order_purchase` |\n    | `climate_order_refund` |\n    | `connect_collection_transfer` |\n    | Show 30 more |\n    \n\n### More attributes\n\n*   #### \n    \n    exchange\\_ratenullable float\n    \n\nThe Balance Transaction object\n\n```\n{  \"id\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",  \"object\": \"balance_transaction\",  \"amount\": -400,  \"available_on\": 1678043844,  \"created\": 1678043844,  \"currency\": \"usd\",  \"description\": null,  \"exchange_rate\": null,  \"fee\": 0,  \"fee_details\": [],  \"net\": -400,  \"reporting_category\": \"transfer\",  \"source\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",  \"status\": \"available\",  \"type\": \"transfer\"}\n```\n\n## [Retrieve a balance transaction](https://docs.stripe.com/api/balance_transactions/retrieve)\n\nRetrieves the balance transaction with the given ID.\n\nNote that this endpoint previously used the path `/v1/balance/history/:id`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a balance transaction if a valid balance transaction ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/balance_transactions/txn_1MiN3gLkdIwHu7ixxapQrznl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",  \"object\": \"balance_transaction\",  \"amount\": -400,  \"available_on\": 1678043844,  \"created\": 1678043844,  \"currency\": \"usd\",  \"description\": null,  \"exchange_rate\": null,  \"fee\": 0,  \"fee_details\": [],  \"net\": -400,  \"reporting_category\": \"transfer\",  \"source\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",  \"status\": \"available\",  \"type\": \"transfer\"}\n```\n\n## [List all balance transactions](https://docs.stripe.com/api/balance_transactions/list)\n\nReturns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.\n\nNote that this endpoint was previously called “Balance history” and used the path `/v1/balance/history`.\n\n### Parameters\n\n*   For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID.\n    \n*   Only returns transactions of the given type. One of: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` transactions, starting after transaction `starting_after`. Each entry in the array is a separate transaction history object. If no more transactions are available, the resulting array will be empty.\n\nGET /v1/balance\\_transactions\n\n```\ncurl -G https://api.stripe.com/v1/balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/balance_transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",      \"object\": \"balance_transaction\",      \"amount\": -400,      \"available_on\": 1678043844,      \"created\": 1678043844,      \"currency\": \"usd\",      \"description\": null,      \"exchange_rate\": null,      \"fee\": 0,      \"fee_details\": [],      \"net\": -400,      \"reporting_category\": \"transfer\",      \"source\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",      \"status\": \"available\",      \"type\": \"transfer\"    }    {...}    {...}  ],}\n```\n\n## [Customer Session](https://docs.stripe.com/api/customer_sessions)\n\nA Customer Session allows you to grant Stripe’s frontend SDKs (like Stripe.js) client-side access control over a Customer.\n\n## [Disputes](https://docs.stripe.com/api/disputes)\n\nA dispute occurs when a customer questions your charge with their card issuer. When this happens, you have the opportunity to respond to the dispute with evidence that shows that the charge is legitimate.\n\nRelated guide: [Disputes and fraud](https://docs.stripe.com/disputes)\n\n## [Events](https://docs.stripe.com/api/events)\n\nEvents are our way of letting you know when something interesting happens in your account. When an interesting event occurs, we create a new `Event` object. For example, when a charge succeeds, we create a `charge.succeeded` event, and when an invoice payment attempt fails, we create an `invoice.payment_failed` event. Certain API requests might create multiple events. For example, if you create a new subscription for a customer, you receive both a `customer.subscription.created` event and a `charge.succeeded` event.\n\nEvents occur when the state of another API resource changes. The event’s data field embeds the resource’s state at the time of the change. For example, a `charge.succeeded` event contains a charge, and an `invoice.payment_failed` event contains an invoice.\n\nAs with other API resources, you can use endpoints to retrieve an [individual event](#retrieve_event) or a [list of events](#list_events) from the API. We also have a separate [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the `Event` objects directly to an endpoint on your server. You can manage webhooks in your [account settings](https://dashboard.stripe.com/account/webhooks). Learn how to [listen for events](https://docs.stripe.com/webhooks) so that your integration can automatically trigger reactions.\n\nWhen using [Connect](https://docs.stripe.com/connect), you can also receive event notifications that occur in connected accounts. For these events, there’s an additional `account` attribute in the received `Event` object.\n\nWe only guarantee access to events through the [Retrieve Event API](#retrieve_event) for 30 days.\n\n## [Files](https://docs.stripe.com/api/files)\n\nThis object represents files hosted on Stripe’s servers. You can upload files with the [create file](#create_file) request (for example, when uploading dispute evidence). Stripe also creates files independently (for example, the results of a [Sigma scheduled query](#scheduled_queries)).\n\nRelated guide: [File upload guide](https://docs.stripe.com/file-upload)\n\n## [File Links](https://docs.stripe.com/api/file_links)\n\nTo share the contents of a `File` object with non-Stripe users, you can create a `FileLink`. `FileLink`s contain a URL that you can use to retrieve the contents of the file without authentication.\n\n## [Mandates](https://docs.stripe.com/api/mandates)\n\nA Mandate is a record of the permission that your customer gives you to debit their payment method.\n\n## [Setup Attempts](https://docs.stripe.com/api/setup_attempts)\n\nA SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation is successful or unsuccessful. You can use SetupAttempts to inspect details of a specific attempt at setting up a payment method using a SetupIntent.\n\n## [Confirmation Token](https://docs.stripe.com/api/confirmation_tokens)\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Balance Transactions | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customer_sessions",
    "markdown": "# Customer Session | Stripe API Reference\n\nA Customer Session allows you to grant Stripe’s frontend SDKs (like Stripe.js) client-side access control over a Customer.\n\n## [The Customer Session object](https://docs.stripe.com/api/customer_sessions/object)\n\n### Attributes\n\n*   The client secret of this Customer Session. Used on the client to set up secure access to the given `customer`.\n    \n    The client secret can be used to provide access to `customer` from your frontend. It should not be stored, logged, or exposed to anyone other than the relevant customer. Make sure that you have TLS enabled on any page that includes the client secret.\n    \n*   This hash defines which component is enabled and the features it supports.\n    \n*   The Customer the Customer Session was created for.\n    \n*   The timestamp at which this Customer Session will expire.\n    \n\n### More attributes\n\nThe Customer Session object\n\n```\n{  \"object\": \"customer_session\",  \"client_secret\": \"_POpxYpmkXdtttYtZQYhrsOJZ2RCQ9kCqqXRU6qrP5c4Jgje\",  \"components\": {    \"buy_button\": {      \"enabled\": false    },    \"pricing_table\": {      \"enabled\": true    }  },  \"customer\": \"cus_PO34b57IOUb83c\",  \"expires_at\": 1684790027,  \"livemode\": false}\n```\n\n## [Create a Customer Session](https://docs.stripe.com/api/customer_sessions/create)\n\nCreates a Customer Session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.\n\n### Parameters\n\n*   Configuration for each component. Exactly 1 component must be enabled.\n    \n*   The ID of an existing customer for which to create the Customer Session.\n    \n\n### Returns\n\nReturns a Customer Session object.\n\nPOST /v1/customer\\_sessions\n\n```\ncurl https://api.stripe.com/v1/customer_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_PO34b57IOUb83c \\  -d \"components[pricing_table][enabled]\"=true\n```\n\n```\n{  \"object\": \"customer_session\",  \"client_secret\": \"_POpxYpmkXdtttYtZQYhrsOJZ2RCQ9kCqqXRU6qrP5c4Jgje\",  \"components\": {    \"buy_button\": {      \"enabled\": false    },    \"pricing_table\": {      \"enabled\": true    }  },  \"customer\": \"cus_PO34b57IOUb83c\",  \"expires_at\": 1684790027,  \"livemode\": false}\n```\n\n## [Disputes](https://docs.stripe.com/api/disputes)\n\nA dispute occurs when a customer questions your charge with their card issuer. When this happens, you have the opportunity to respond to the dispute with evidence that shows that the charge is legitimate.\n\nRelated guide: [Disputes and fraud](https://docs.stripe.com/disputes)\n\n## [Events](https://docs.stripe.com/api/events)\n\nEvents are our way of letting you know when something interesting happens in your account. When an interesting event occurs, we create a new `Event` object. For example, when a charge succeeds, we create a `charge.succeeded` event, and when an invoice payment attempt fails, we create an `invoice.payment_failed` event. Certain API requests might create multiple events. For example, if you create a new subscription for a customer, you receive both a `customer.subscription.created` event and a `charge.succeeded` event.\n\nEvents occur when the state of another API resource changes. The event’s data field embeds the resource’s state at the time of the change. For example, a `charge.succeeded` event contains a charge, and an `invoice.payment_failed` event contains an invoice.\n\nAs with other API resources, you can use endpoints to retrieve an [individual event](#retrieve_event) or a [list of events](#list_events) from the API. We also have a separate [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the `Event` objects directly to an endpoint on your server. You can manage webhooks in your [account settings](https://dashboard.stripe.com/account/webhooks). Learn how to [listen for events](https://docs.stripe.com/webhooks) so that your integration can automatically trigger reactions.\n\nWhen using [Connect](https://docs.stripe.com/connect), you can also receive event notifications that occur in connected accounts. For these events, there’s an additional `account` attribute in the received `Event` object.\n\nWe only guarantee access to events through the [Retrieve Event API](#retrieve_event) for 30 days.\n\n## [Files](https://docs.stripe.com/api/files)\n\nThis object represents files hosted on Stripe’s servers. You can upload files with the [create file](#create_file) request (for example, when uploading dispute evidence). Stripe also creates files independently (for example, the results of a [Sigma scheduled query](#scheduled_queries)).\n\nRelated guide: [File upload guide](https://docs.stripe.com/file-upload)\n\n## [File Links](https://docs.stripe.com/api/file_links)\n\nTo share the contents of a `File` object with non-Stripe users, you can create a `FileLink`. `FileLink`s contain a URL that you can use to retrieve the contents of the file without authentication.\n\n## [Mandates](https://docs.stripe.com/api/mandates)\n\nA Mandate is a record of the permission that your customer gives you to debit their payment method.\n\n## [Setup Attempts](https://docs.stripe.com/api/setup_attempts)\n\nA SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation is successful or unsuccessful. You can use SetupAttempts to inspect details of a specific attempt at setting up a payment method using a SetupIntent.\n\n## [Confirmation Token](https://docs.stripe.com/api/confirmation_tokens)\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Customer Session | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/disputes",
    "markdown": "# Disputes | Stripe API Reference\n\nA dispute occurs when a customer questions your charge with their card issuer. When this happens, you have the opportunity to respond to the dispute with evidence that shows that the charge is legitimate.\n\nRelated guide: [Disputes and fraud](https://docs.stripe.com/disputes)\n\n## [The Dispute object](https://docs.stripe.com/api/disputes/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Disputed amount. Usually the amount of the charge, but it can differ (usually because of currency fluctuation or because only part of the order is disputed).\n    \n*   ID of the charge that’s disputed.\n    \n\n*   Evidence provided to respond to a dispute. Updating any field in the hash submits all fields in the hash for review.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    ID of the PaymentIntent that’s disputed.\n    \n*   Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Learn more about [dispute reasons](https://docs.stripe.com/disputes/categories).\n    \n*   Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `won`, or `lost`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `lost` |\n    | `needs_response` |\n    | `under_review` |\n    | `warning_closed` |\n    | `warning_needs_response` |\n    | `warning_under_review` |\n    | `won` |\n    \n\n### More attributes\n\n*   #### \n    \n    balance\\_transactionsarray of objects\n    \n\n*   #### \n    \n    is\\_charge\\_refundableboolean\n    \n\n*   #### \n    \n    payment\\_method\\_detailsnullable object\n    \n\n```\n{  \"id\": \"dp_1MtJUT2eZvKYlo2CNaw2HvEv\",  \"object\": \"dispute\",  \"amount\": 1000,  \"balance_transactions\": [],  \"charge\": \"ch_1AZtxr2eZvKYlo2CJDX8whov\",  \"created\": 1680651737,  \"currency\": \"usd\",  \"evidence\": {    \"access_activity_log\": null,    \"billing_address\": null,    \"cancellation_policy\": null,    \"cancellation_policy_disclosure\": null,    \"cancellation_rebuttal\": null,    \"customer_communication\": null,    \"customer_email_address\": null,    \"customer_name\": null,    \"customer_purchase_ip\": null,    \"customer_signature\": null,    \"duplicate_charge_documentation\": null,    \"duplicate_charge_explanation\": null,    \"duplicate_charge_id\": null,    \"product_description\": null,    \"receipt\": null,    \"refund_policy\": null,    \"refund_policy_disclosure\": null,    \"refund_refusal_explanation\": null,    \"service_date\": null,    \"service_documentation\": null,    \"shipping_address\": null,    \"shipping_carrier\": null,    \"shipping_date\": null,    \"shipping_documentation\": null,    \"shipping_tracking_number\": null,    \"uncategorized_file\": null,    \"uncategorized_text\": null  },  \"evidence_details\": {    \"due_by\": 1682294399,    \"has_evidence\": false,    \"past_due\": false,    \"submission_count\": 0  },  \"is_charge_refundable\": true,  \"livemode\": false,  \"metadata\": {},  \"payment_intent\": null,  \"reason\": \"general\",  \"status\": \"warning_needs_response\"}\n```\n\n## [Update a dispute](https://docs.stripe.com/api/disputes/update)\n\nWhen you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your [dashboard](https://dashboard.stripe.com/disputes), but if you prefer, you can use the API to submit evidence programmatically.\n\nDepending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our [guide to dispute types](https://docs.stripe.com/disputes/categories).\n\n### Parameters\n\n*   Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default).\n    \n\n### Returns\n\nReturns the dispute object.\n\n```\ncurl https://api.stripe.com/v1/disputes/dp_1MtJUT2eZvKYlo2CNaw2HvEv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"dp_1MtJUT2eZvKYlo2CNaw2HvEv\",  \"object\": \"dispute\",  \"amount\": 1000,  \"balance_transactions\": [],  \"charge\": \"ch_1AZtxr2eZvKYlo2CJDX8whov\",  \"created\": 1680651737,  \"currency\": \"usd\",  \"evidence\": {    \"access_activity_log\": null,    \"billing_address\": null,    \"cancellation_policy\": null,    \"cancellation_policy_disclosure\": null,    \"cancellation_rebuttal\": null,    \"customer_communication\": null,    \"customer_email_address\": null,    \"customer_name\": null,    \"customer_purchase_ip\": null,    \"customer_signature\": null,    \"duplicate_charge_documentation\": null,    \"duplicate_charge_explanation\": null,    \"duplicate_charge_id\": null,    \"product_description\": null,    \"receipt\": null,    \"refund_policy\": null,    \"refund_policy_disclosure\": null,    \"refund_refusal_explanation\": null,    \"service_date\": null,    \"service_documentation\": null,    \"shipping_address\": null,    \"shipping_carrier\": null,    \"shipping_date\": null,    \"shipping_documentation\": null,    \"shipping_tracking_number\": null,    \"uncategorized_file\": null,    \"uncategorized_text\": null  },  \"evidence_details\": {    \"due_by\": 1682294399,    \"has_evidence\": false,    \"past_due\": false,    \"submission_count\": 0  },  \"is_charge_refundable\": true,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"payment_intent\": null,  \"reason\": \"general\",  \"status\": \"warning_needs_response\"}\n```\n\n## [Retrieve a dispute](https://docs.stripe.com/api/disputes/retrieve)\n\nRetrieves the dispute with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a dispute if a valid dispute ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/disputes/dp_1MtJUT2eZvKYlo2CNaw2HvEv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"dp_1MtJUT2eZvKYlo2CNaw2HvEv\",  \"object\": \"dispute\",  \"amount\": 1000,  \"balance_transactions\": [],  \"charge\": \"ch_1AZtxr2eZvKYlo2CJDX8whov\",  \"created\": 1680651737,  \"currency\": \"usd\",  \"evidence\": {    \"access_activity_log\": null,    \"billing_address\": null,    \"cancellation_policy\": null,    \"cancellation_policy_disclosure\": null,    \"cancellation_rebuttal\": null,    \"customer_communication\": null,    \"customer_email_address\": null,    \"customer_name\": null,    \"customer_purchase_ip\": null,    \"customer_signature\": null,    \"duplicate_charge_documentation\": null,    \"duplicate_charge_explanation\": null,    \"duplicate_charge_id\": null,    \"product_description\": null,    \"receipt\": null,    \"refund_policy\": null,    \"refund_policy_disclosure\": null,    \"refund_refusal_explanation\": null,    \"service_date\": null,    \"service_documentation\": null,    \"shipping_address\": null,    \"shipping_carrier\": null,    \"shipping_date\": null,    \"shipping_documentation\": null,    \"shipping_tracking_number\": null,    \"uncategorized_file\": null,    \"uncategorized_text\": null  },  \"evidence_details\": {    \"due_by\": 1682294399,    \"has_evidence\": false,    \"past_due\": false,    \"submission_count\": 0  },  \"is_charge_refundable\": true,  \"livemode\": false,  \"metadata\": {},  \"payment_intent\": null,  \"reason\": \"general\",  \"status\": \"warning_needs_response\"}\n```\n\n## [List all disputes](https://docs.stripe.com/api/disputes/list)\n\nReturns a list of your disputes.\n\n### Parameters\n\n*   Only return disputes associated to the charge specified by this charge ID.\n    \n*   Only return disputes associated to the PaymentIntent specified by this PaymentIntent ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` disputes, starting after dispute `starting_after`. Each entry in the array is a separate dispute object. If no more disputes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/disputes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/disputes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"dp_1MtJUT2eZvKYlo2CNaw2HvEv\",      \"object\": \"dispute\",      \"amount\": 1000,      \"balance_transactions\": [],      \"charge\": \"ch_1AZtxr2eZvKYlo2CJDX8whov\",      \"created\": 1680651737,      \"currency\": \"usd\",      \"evidence\": {        \"access_activity_log\": null,        \"billing_address\": null,        \"cancellation_policy\": null,        \"cancellation_policy_disclosure\": null,        \"cancellation_rebuttal\": null,        \"customer_communication\": null,        \"customer_email_address\": null,        \"customer_name\": null,        \"customer_purchase_ip\": null,        \"customer_signature\": null,        \"duplicate_charge_documentation\": null,        \"duplicate_charge_explanation\": null,        \"duplicate_charge_id\": null,        \"product_description\": null,        \"receipt\": null,        \"refund_policy\": null,        \"refund_policy_disclosure\": null,        \"refund_refusal_explanation\": null,        \"service_date\": null,        \"service_documentation\": null,        \"shipping_address\": null,        \"shipping_carrier\": null,        \"shipping_date\": null,        \"shipping_documentation\": null,        \"shipping_tracking_number\": null,        \"uncategorized_file\": null,        \"uncategorized_text\": null      },      \"evidence_details\": {        \"due_by\": 1682294399,        \"has_evidence\": false,        \"past_due\": false,        \"submission_count\": 0      },      \"is_charge_refundable\": true,      \"livemode\": false,      \"metadata\": {},      \"payment_intent\": null,      \"reason\": \"general\",      \"status\": \"warning_needs_response\"    }    {...}    {...}  ],}\n```",
    "title": "Disputes | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/events",
    "markdown": "# Events | Stripe API Reference\n\n*   #### \n    \n    account.application.authorized`data.object` is an application\n    \n    Occurs whenever a user authorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.application.deauthorized`data.object` is an application\n    \n    Occurs whenever a user deauthorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.external\\_account.created`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is created.\n    \n*   #### \n    \n    account.external\\_account.deleted`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is deleted.\n    \n*   #### \n    \n    account.external\\_account.updated`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is updated.\n    \n*   #### \n    \n    account.updated`data.object` is an [account](#account_object)\n    \n    Occurs whenever an account status or property has changed.\n    \n*   #### \n    \n    application\\_fee.created`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is created on a charge.\n    \n*   #### \n    \n    application\\_fee.refund.updated`data.object` is a [fee refund](#fee_refund_object)\n    \n    Occurs whenever an application fee refund is updated.\n    \n*   #### \n    \n    application\\_fee.refunded`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is refunded, whether from refunding a charge or from [refunding the application fee directly](#fee_refunds). This includes partial refunds.\n    \n*   #### \n    \n    balance.available`data.object` is a [balance](#balance_object)\n    \n    Occurs whenever your Stripe balance has been updated (e.g., when a charge is available to be paid out). By default, Stripe automatically transfers funds in your balance to your bank account on a daily basis. This event is not fired for negative transactions.\n    \n*   #### \n    \n    billing\\_portal.configuration.created`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is created.\n    \n*   #### \n    \n    billing\\_portal.configuration.updated`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is updated.\n    \n*   #### \n    \n    billing\\_portal.session.created`data.object` is a [billing portal session](#portal_session_object)\n    \n    Occurs whenever a portal session is created.\n    \n*   #### \n    \n    capability.updated`data.object` is a [capability](#capability_object)\n    \n    Occurs whenever a capability has new requirements or a new status.\n    \n*   #### \n    \n    cash\\_balance.funds\\_available`data.object` is a [cash balance](#cash_balance_object)\n    \n    Occurs whenever there is a positive remaining cash balance after Stripe automatically reconciles new funds into the cash balance. If you enabled manual reconciliation, this webhook will fire whenever there are new funds into the cash balance.\n    \n*   #### \n    \n    charge.captured`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a previously uncaptured charge is captured.\n    \n*   #### \n    \n    charge.dispute.closed`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when a dispute is closed and the dispute status changes to `lost`, `warning_closed`, or `won`.\n    \n*   #### \n    \n    charge.dispute.created`data.object` is a [dispute](#dispute_object)\n    \n    Occurs whenever a customer disputes a charge with their bank.\n    \n*   #### \n    \n    charge.dispute.funds\\_reinstated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are reinstated to your account after a dispute is closed. This includes [partially refunded payments](https://docs.stripe.com/disputes#disputes-on-partially-refunded-payments).\n    \n*   #### \n    \n    charge.dispute.funds\\_withdrawn`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are removed from your account due to a dispute.\n    \n*   #### \n    \n    charge.dispute.updated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when the dispute is updated (usually with evidence).\n    \n*   #### \n    \n    charge.expired`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever an uncaptured charge expires.\n    \n*   #### \n    \n    charge.failed`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a failed charge attempt occurs.\n    \n*   #### \n    \n    charge.pending`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a pending charge is created.\n    \n*   #### \n    \n    charge.refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund is updated, on selected payment methods.\n    \n*   #### \n    \n    charge.refunded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is refunded, including partial refunds.\n    \n*   #### \n    \n    charge.succeeded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is successful.\n    \n*   #### \n    \n    charge.updated`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge description or metadata is updated, or upon an asynchronous capture.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_failed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method fails.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_succeeded`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method finally succeeds.\n    \n*   #### \n    \n    checkout.session.completed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session has been successfully completed.\n    \n*   #### \n    \n    checkout.session.expired`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session is expired.\n    \n*   #### \n    \n    climate.order.canceled`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is canceled.\n    \n*   #### \n    \n    climate.order.created`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is created.\n    \n*   #### \n    \n    climate.order.delayed`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delayed.\n    \n*   #### \n    \n    climate.order.delivered`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delivered.\n    \n*   #### \n    \n    climate.order.product\\_substituted`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order’s product is substituted for another.\n    \n*   #### \n    \n    climate.product.created`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is created.\n    \n*   #### \n    \n    climate.product.pricing\\_updated`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is updated.\n    \n*   #### \n    \n    coupon.created`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is created.\n    \n*   #### \n    \n    coupon.deleted`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is deleted.\n    \n*   #### \n    \n    coupon.updated`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is updated.\n    \n*   #### \n    \n    credit\\_note.created`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is created.\n    \n*   #### \n    \n    credit\\_note.updated`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is updated.\n    \n*   #### \n    \n    credit\\_note.voided`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is voided.\n    \n*   #### \n    \n    customer\\_cash\\_balance\\_transaction.created`data.object` is a [customer cash balance transaction](#customer_cash_balance_transaction_object)\n    \n    Occurs whenever a new customer cash balance transactions is created.\n    \n*   #### \n    \n    customer.created`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a new customer is created.\n    \n*   #### \n    \n    customer.deleted`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a customer is deleted.\n    \n*   #### \n    \n    customer.discount.created`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is attached to a customer.\n    \n*   #### \n    \n    customer.discount.deleted`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is removed from a customer.\n    \n*   #### \n    \n    customer.discount.updated`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a customer is switched from one coupon to another.\n    \n*   #### \n    \n    customer.source.created`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a new source is created for a customer.\n    \n*   #### \n    \n    customer.source.deleted`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is removed from a customer.\n    \n*   #### \n    \n    customer.source.expiring`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a card or source will expire at the end of the month. This event only works with legacy integrations using Card or Source objects. If you use the PaymentMethod API, this event won’t occur.\n    \n*   #### \n    \n    customer.source.updated`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source’s details are changed.\n    \n*   #### \n    \n    customer.subscription.created`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer is signed up for a new plan.\n    \n*   #### \n    \n    customer.subscription.deleted`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription ends.\n    \n*   #### \n    \n    customer.subscription.paused`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is paused. Only applies when subscriptions enter `status=paused`, not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is paused.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_applied`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update is applied, and the subscription is updated.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_expired`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update expires before the related invoice is paid.\n    \n*   #### \n    \n    customer.subscription.resumed`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is no longer paused. Only applies when a `status=paused` subscription is [resumed](https://docs.stripe.com/api/subscriptions/resume), not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is resumed.\n    \n*   #### \n    \n    customer.subscription.trial\\_will\\_end`data.object` is a [subscription](#subscription_object)\n    \n    Occurs three days before a subscription’s trial period is scheduled to end, or when a trial is ended immediately (using `trial_end=now`).\n    \n*   #### \n    \n    customer.subscription.updated`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active).\n    \n*   #### \n    \n    customer.tax\\_id.created`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is created for a customer.\n    \n*   #### \n    \n    customer.tax\\_id.deleted`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is deleted from a customer.\n    \n*   #### \n    \n    customer.tax\\_id.updated`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a customer’s tax ID is updated.\n    \n*   #### \n    \n    customer.updated`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever any property of a customer changes.\n    \n*   #### \n    \n    entitlements.active\\_entitlement\\_summary.updated`data.object` is an entitlements active entitlement summary\n    \n    Occurs whenever a customer’s entitlements change.\n    \n*   #### \n    \n    file.created`data.object` is a [file](#file_object)\n    \n    Occurs whenever a new Stripe-generated file is available for your account.\n    \n*   #### \n    \n    financial\\_connections.account.created`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a new Financial Connections account is created.\n    \n*   #### \n    \n    financial\\_connections.account.deactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `active` to `inactive`.\n    \n*   #### \n    \n    financial\\_connections.account.disconnected`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account is disconnected.\n    \n*   #### \n    \n    financial\\_connections.account.reactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `inactive` to `active`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_balance`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `balance_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_ownership`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `ownership_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_transactions`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `transaction_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    identity.verification\\_session.canceled`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is canceled\n    \n*   #### \n    \n    identity.verification\\_session.created`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is created\n    \n*   #### \n    \n    identity.verification\\_session.processing`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to processing\n    \n*   #### \n    \n    identity.verification\\_session.redacted`data.object` is an [identity verification session](#identity_verification_session_object)Selection required\n    \n    Occurs whenever a VerificationSession is redacted.\n    \n*   #### \n    \n    identity.verification\\_session.requires\\_input`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to require user input\n    \n*   #### \n    \n    identity.verification\\_session.verified`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to verified\n    \n*   #### \n    \n    invoice.created`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a new invoice is created. To learn how webhooks can be used with this event, and how they can affect it, see [Using Webhooks with Subscriptions](https://docs.stripe.com/subscriptions/webhooks).\n    \n*   #### \n    \n    invoice.deleted`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is deleted. Note: This event is not sent for [invoice previews](https://docs.stripe.com/api/invoices/create_preview).\n    \n*   #### \n    \n    invoice.finalization\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice cannot be finalized. See the invoice’s [last finalization error](https://docs.stripe.com/api/invoices/object#invoice_object-last_finalization_error) for details.\n    \n*   #### \n    \n    invoice.finalized`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is finalized and updated to be an open invoice.\n    \n*   #### \n    \n    invoice.marked\\_uncollectible`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is marked uncollectible.\n    \n*   #### \n    \n    invoice.overdue`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days after an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoice.paid`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band.\n    \n*   #### \n    \n    invoice.payment\\_action\\_required`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt requires further user action to complete.\n    \n*   #### \n    \n    invoice.payment\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method.\n    \n*   #### \n    \n    invoice.payment\\_succeeded`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds.\n    \n*   #### \n    \n    invoice.sent`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice email is sent out.\n    \n*   #### \n    \n    invoice.upcoming`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). Note: The received `Invoice` object will not have an invoice ID.\n    \n*   #### \n    \n    invoice.updated`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice changes (e.g., the invoice amount).\n    \n*   #### \n    \n    invoice.voided`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is voided.\n    \n*   #### \n    \n    invoice.will\\_be\\_due`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoiceitem.created`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is created.\n    \n*   #### \n    \n    invoiceitem.deleted`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is deleted.\n    \n*   #### \n    \n    issuing\\_authorization.created`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is created.\n    \n*   #### \n    \n    issuing\\_authorization.request`data.object` is an [issuing authorization](#issuing_authorization_object)Selection required\n    \n*   #### \n    \n    issuing\\_authorization.updated`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is updated.\n    \n*   #### \n    \n    issuing\\_card.created`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is created.\n    \n*   #### \n    \n    issuing\\_card.updated`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is updated.\n    \n*   #### \n    \n    issuing\\_cardholder.created`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is created.\n    \n*   #### \n    \n    issuing\\_cardholder.updated`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is updated.\n    \n*   #### \n    \n    issuing\\_dispute.closed`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is won, lost or expired.\n    \n*   #### \n    \n    issuing\\_dispute.created`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is created.\n    \n*   #### \n    \n    issuing\\_dispute.funds\\_reinstated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever funds are reinstated to your account for an Issuing dispute.\n    \n*   #### \n    \n    issuing\\_dispute.submitted`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is submitted.\n    \n*   #### \n    \n    issuing\\_dispute.updated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is updated.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.activated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is activated following the activation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.deactivated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is deactivated following the deactivation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.rejected`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is rejected by design review.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.updated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is updated.\n    \n*   #### \n    \n    issuing\\_token.created`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is created.\n    \n*   #### \n    \n    issuing\\_token.updated`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is updated.\n    \n*   #### \n    \n    issuing\\_transaction.created`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is created.\n    \n*   #### \n    \n    issuing\\_transaction.updated`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is updated.\n    \n*   #### \n    \n    mandate.updated`data.object` is a [mandate](#mandate_object)\n    \n    Occurs whenever a Mandate is updated.\n    \n*   #### \n    \n    payment\\_intent.amount\\_capturable\\_updated`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has funds to be captured. Check the `amount_capturable` property on the PaymentIntent to determine the amount that can be captured. You may capture the PaymentIntent with an `amount_to_capture` value up to the specified amount. [Learn more about capturing PaymentIntents.](https://docs.stripe.com/api/payment_intents/capture)\n    \n*   #### \n    \n    payment\\_intent.canceled`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent is canceled.\n    \n*   #### \n    \n    payment\\_intent.created`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a new PaymentIntent is created.\n    \n*   #### \n    \n    payment\\_intent.partially\\_funded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when funds are applied to a customer\\_balance PaymentIntent and the ‘amount\\_remaining’ changes.\n    \n*   #### \n    \n    payment\\_intent.payment\\_failed`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment.\n    \n*   #### \n    \n    payment\\_intent.processing`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has started processing.\n    \n*   #### \n    \n    payment\\_intent.requires\\_action`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent transitions to requires\\_action state\n    \n*   #### \n    \n    payment\\_intent.succeeded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has successfully completed payment.\n    \n*   #### \n    \n    payment\\_link.created`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is created.\n    \n*   #### \n    \n    payment\\_link.updated`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is updated.\n    \n*   #### \n    \n    payment\\_method.attached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a new payment method is attached to a customer.\n    \n*   #### \n    \n    payment\\_method.automatically\\_updated`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method’s details are automatically updated by the network.\n    \n*   #### \n    \n    payment\\_method.detached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method is detached from a customer.\n    \n*   #### \n    \n    payment\\_method.updated`data.object` is a [payment method](#payment_method_object)\n    \n*   #### \n    \n    payout.canceled`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is canceled.\n    \n*   #### \n    \n    payout.created`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is created.\n    \n*   #### \n    \n    payout.failed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout attempt fails.\n    \n*   #### \n    \n    payout.paid`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is _expected_ to be available in the destination account. If the payout fails, a `payout.failed` notification is also sent, at a later time.\n    \n*   #### \n    \n    payout.reconciliation\\_completed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever balance transactions paid out in an automatic payout can be queried.\n    \n*   #### \n    \n    payout.updated`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is updated.\n    \n*   #### \n    \n    person.created`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is created.\n    \n*   #### \n    \n    person.deleted`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is deleted.\n    \n*   #### \n    \n    person.updated`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is updated.\n    \n*   #### \n    \n    plan.created`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is created.\n    \n*   #### \n    \n    plan.deleted`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is deleted.\n    \n*   #### \n    \n    plan.updated`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is updated.\n    \n*   #### \n    \n    price.created`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is created.\n    \n*   #### \n    \n    price.deleted`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is deleted.\n    \n*   #### \n    \n    price.updated`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is updated.\n    \n*   #### \n    \n    product.created`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is created.\n    \n*   #### \n    \n    product.deleted`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is deleted.\n    \n*   #### \n    \n    product.updated`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is updated.\n    \n*   #### \n    \n    promotion\\_code.created`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is created.\n    \n*   #### \n    \n    promotion\\_code.updated`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is updated.\n    \n*   #### \n    \n    quote.accepted`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is accepted.\n    \n*   #### \n    \n    quote.canceled`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is canceled.\n    \n*   #### \n    \n    quote.created`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is created.\n    \n*   #### \n    \n    quote.finalized`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is finalized.\n    \n*   #### \n    \n    quote.will\\_expire`data.object` is a [quote](#quote_object)\n    \n    Occurs X number of days before a quote is scheduled to expire—where X is determined by Automations\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.created`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is created.\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.updated`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is updated.\n    \n*   #### \n    \n    refund.created`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is created.\n    \n*   #### \n    \n    refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is updated.\n    \n*   #### \n    \n    reporting.report\\_run.failed`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` failed to complete.\n    \n*   #### \n    \n    reporting.report\\_run.succeeded`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` completed successfully.\n    \n*   #### \n    \n    reporting.report\\_type.updated`data.object` is a [reporting report type](#reporting_report_type_object)Selection required\n    \n    Occurs whenever a `ReportType` is updated (typically to indicate that a new day’s data has come available).\n    \n*   #### \n    \n    review.closed`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is closed. The review’s `reason` field indicates why: `approved`, `disputed`, `refunded`, or `refunded_as_fraud`.\n    \n*   #### \n    \n    review.opened`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is opened.\n    \n*   #### \n    \n    setup\\_intent.canceled`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is canceled.\n    \n*   #### \n    \n    setup\\_intent.created`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a new SetupIntent is created.\n    \n*   #### \n    \n    setup\\_intent.requires\\_action`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is in requires\\_action state.\n    \n*   #### \n    \n    setup\\_intent.setup\\_failed`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent has failed the attempt to setup a payment method.\n    \n*   #### \n    \n    setup\\_intent.succeeded`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when an SetupIntent has successfully setup a payment method.\n    \n*   #### \n    \n    sigma.scheduled\\_query\\_run.created`data.object` is a [scheduled query run](#scheduled_query_run_object)\n    \n    Occurs whenever a Sigma scheduled query run finishes.\n    \n*   #### \n    \n    source.canceled`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is canceled.\n    \n*   #### \n    \n    source.chargeable`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source transitions to chargeable.\n    \n*   #### \n    \n    source.failed`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source fails.\n    \n*   #### \n    \n    source.mandate\\_notification`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source mandate notification method is set to manual.\n    \n*   #### \n    \n    source.refund\\_attributes\\_required`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever the refund attributes are required on a receiver source to process a refund or a mispayment.\n    \n*   Occurs whenever a source transaction is created.\n    \n*   Occurs whenever a source transaction is updated.\n    \n*   #### \n    \n    subscription\\_schedule.aborted`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled due to the underlying subscription being canceled because of delinquency.\n    \n*   #### \n    \n    subscription\\_schedule.canceled`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled.\n    \n*   #### \n    \n    subscription\\_schedule.completed`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is completed.\n    \n*   #### \n    \n    subscription\\_schedule.created`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is created.\n    \n*   #### \n    \n    subscription\\_schedule.expiring`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs 7 days before a subscription schedule will expire.\n    \n*   #### \n    \n    subscription\\_schedule.released`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is released.\n    \n*   #### \n    \n    subscription\\_schedule.updated`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is updated.\n    \n*   #### \n    \n    tax\\_rate.created`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a new tax rate is created.\n    \n*   #### \n    \n    tax\\_rate.updated`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a tax rate is updated.\n    \n*   #### \n    \n    tax.settings.updated`data.object` is a [tax settings](#tax_settings_object)\n    \n    Occurs whenever tax settings is updated.\n    \n*   #### \n    \n    terminal.reader.action\\_failed`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader failed.\n    \n*   #### \n    \n    terminal.reader.action\\_succeeded`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader was successful.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.advancing`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock starts advancing.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.created`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is created.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.deleted`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is deleted.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.internal\\_failure`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock fails to advance its frozen time.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.ready`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock transitions to a ready status.\n    \n*   #### \n    \n    topup.canceled`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is canceled.\n    \n*   #### \n    \n    topup.created`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is created.\n    \n*   #### \n    \n    topup.failed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up fails.\n    \n*   #### \n    \n    topup.reversed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is reversed.\n    \n*   #### \n    \n    topup.succeeded`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up succeeds.\n    \n*   #### \n    \n    transfer.created`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is created.\n    \n*   #### \n    \n    transfer.reversed`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is reversed, including partial reversals.\n    \n*   #### \n    \n    transfer.updated`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer’s description or metadata is updated.",
    "title": "Events | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/file_links",
    "markdown": "# File Links | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ffile_links)\n\nTo share the contents of a `File` object with non-Stripe users, you can create a `FileLink`. `FileLink`s contain a URL that you can use to retrieve the contents of the file without authentication.\n\n## [The File Link object](https://docs.stripe.com/api/file_links/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    expires\\_atnullable timestamp\n    \n    Time that the link expires.\n    \n*   The file object this link points to.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The publicly accessible URL to download the file.\n    \n\n### More attributes\n\n```\n{  \"id\": \"link_1Mr23jLkdIwHu7ix65betcoo\",  \"object\": \"file_link\",  \"created\": 1680108075,  \"expired\": false,  \"expires_at\": null,  \"file\": \"file_1Mr23iLkdIwHu7ixQkCV3CBR\",  \"livemode\": false,  \"metadata\": {},  \"url\": \"https://files.stripe.com/links/MDB8YWNjdF8xTTJKVGtMa2RJd0h1N2l4fGZsX3Rlc3RfaXVoY2hrUnJPMzlBR3dPb01XMmFkSTVq00yUPLFf3h\"}\n```\n\n## [Create a file link](https://docs.stripe.com/api/file_links/create)\n\nCreates a new file link object.\n\n### Parameters\n\n*   The ID of the file. The file’s `purpose` must be one of the following: `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `identity_document_downloadable`, `pci_document`, `selfie`, `sigma_scheduled_query`, `tax_document_user_upload`, or `terminal_reader_splashscreen`.\n    \n*   The link isn’t usable after this future timestamp.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the file link object if successful and raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/file_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d file=file_1Mr23iLkdIwHu7ixQkCV3CBR\n```\n\n```\n{  \"id\": \"link_1Mr23jLkdIwHu7ix65betcoo\",  \"object\": \"file_link\",  \"created\": 1680108075,  \"expired\": false,  \"expires_at\": null,  \"file\": \"file_1Mr23iLkdIwHu7ixQkCV3CBR\",  \"livemode\": false,  \"metadata\": {},  \"url\": \"https://files.stripe.com/links/MDB8YWNjdF8xTTJKVGtMa2RJd0h1N2l4fGZsX3Rlc3RfaXVoY2hrUnJPMzlBR3dPb01XMmFkSTVq00yUPLFf3h\"}\n```\n\n## [Update a file link](https://docs.stripe.com/api/file_links/update)\n\nUpdates an existing file link object. Expired links can no longer be updated.\n\n### Parameters\n\n*   #### \n    \n    expires\\_atstring | timestamp\n    \n    A future timestamp after which the link will no longer be usable, or `now` to expire the link immediately.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the file link object if successful, and raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/file_links/link_1Mr23jLkdIwHu7ix65betcoo \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"link_1Mr23jLkdIwHu7ix65betcoo\",  \"object\": \"file_link\",  \"created\": 1680108075,  \"expired\": false,  \"expires_at\": null,  \"file\": \"file_1Mr23iLkdIwHu7ixQkCV3CBR\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"url\": \"https://files.stripe.com/links/MDB8YWNjdF8xTTJKVGtMa2RJd0h1N2l4fGZsX3Rlc3RfaXVoY2hrUnJPMzlBR3dPb01XMmFkSTVq00yUPLFf3h\"}\n```\n\n## [Retrieve a file link](https://docs.stripe.com/api/file_links/retrieve)\n\nRetrieves the file link with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nIf the identifier you provide is valid, a file link object returns. If not, Stripe raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/file_links/link_1Mr23jLkdIwHu7ix65betcoo \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"link_1Mr23jLkdIwHu7ix65betcoo\",  \"object\": \"file_link\",  \"created\": 1680108075,  \"expired\": false,  \"expires_at\": null,  \"file\": \"file_1Mr23iLkdIwHu7ixQkCV3CBR\",  \"livemode\": false,  \"metadata\": {},  \"url\": \"https://files.stripe.com/links/MDB8YWNjdF8xTTJKVGtMa2RJd0h1N2l4fGZsX3Rlc3RfaXVoY2hrUnJPMzlBR3dPb01XMmFkSTVq00yUPLFf3h\"}\n```",
    "title": "File Links | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_intents",
    "markdown": "# Payment Intents | Stripe API Reference\n\n## [The PaymentIntent object](https://docs.stripe.com/api/payment_intents/object)\n\n### Attributes\n\n*   #### \n    \n    idstringretrievable with publishable key\n    \n    Unique identifier for the object.\n    \n*   #### \n    \n    amountintegerretrievable with publishable key\n    \n    Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).\n    \n*   #### \n    \n    automatic\\_payment\\_methodsnullable objectretrievable with publishable key\n    \n*   #### \n    \n    client\\_secretnullable stringretrievable with publishable key\n    \n    The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.\n    \n    The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.\n    \n    Refer to our docs to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.\n    \n*   #### \n    \n    currencyenumretrievable with publishable key\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n    ID of the Customer this PaymentIntent belongs to, if one exists.\n    \n    Payment methods attached to other Customers cannot be used with this PaymentIntent.\n    \n    If present in combination with [setup\\_future\\_usage](#payment_intent_object-setup_future_usage), this PaymentIntent’s payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.\n    \n*   #### \n    \n    descriptionnullable stringretrievable with publishable key\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    last\\_payment\\_errornullable objectretrievable with publishable key\n    \n    The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.\n    \n*   #### \n    \n    latest\\_chargenullable stringExpandable\n    \n    The latest charge created by this PaymentIntent.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Learn more about [storing information in metadata](https://docs.stripe.com/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).\n    \n*   #### \n    \n    next\\_actionnullable objectretrievable with publishable key\n    \n    If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source.\n    \n*   #### \n    \n    payment\\_methodnullable stringExpandableretrievable with publishable key\n    \n    ID of the payment method used in this PaymentIntent.\n    \n*   #### \n    \n    receipt\\_emailnullable stringretrievable with publishable key\n    \n    Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).\n    \n*   #### \n    \n    setup\\_future\\_usagenullable enumretrievable with publishable key\n    \n    Indicates that you intend to make future payments with this PaymentIntent’s payment method.\n    \n    Providing this parameter will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://docs.stripe.com/api/payment_methods/attach) to a Customer after the transaction completes.\n    \n    When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://docs.stripe.com/strong-customer-authentication).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   #### \n    \n    shippingnullable objectretrievable with publishable key\n    \n    Shipping information for this PaymentIntent.\n    \n*   #### \n    \n    statement\\_descriptornullable string\n    \n    For card charges, use [statement\\_descriptor\\_suffix](https://stripe.com/docs/payments/account/statement-descriptors#dynamic). Otherwise, you can use this value as the complete description of a charge on your customers’ statements. It must contain at least one letter and be 1–22 characters long.\n    \n*   #### \n    \n    statement\\_descriptor\\_suffixnullable string\n    \n    Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.\n    \n*   #### \n    \n    statusenumretrievable with publishable key\n    \n    Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://docs.stripe.com/payments/intents#intent-statuses).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled` |\n    | `processing` |\n    | `requires_action` |\n    | `requires_capture` |\n    | `requires_confirmation` |\n    | `requires_payment_method` |\n    | `succeeded` |\n    \n\n### More attributes\n\n*   #### \n    \n    objectstringretrievable with publishable key\n    \n\n*   #### \n    \n    amount\\_detailsnullable object\n    \n\n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n*   #### \n    \n    canceled\\_atnullable timestampretrievable with publishable key\n    \n*   #### \n    \n    cancellation\\_reasonnullable enumretrievable with publishable key\n    \n*   #### \n    \n    capture\\_methodenumretrievable with publishable key\n    \n*   #### \n    \n    confirmation\\_methodenumretrievable with publishable key\n    \n*   #### \n    \n    createdtimestampretrievable with publishable key\n    \n*   #### \n    \n    invoicenullable stringExpandable\n    \n*   #### \n    \n    livemodebooleanretrievable with publishable key\n    \n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n*   #### \n    \n    payment\\_method\\_configuration\\_detailsnullable object\n    \n*   #### \n    \n    payment\\_method\\_optionsnullable object\n    \n*   #### \n    \n    payment\\_method\\_typesarray of stringsretrievable with publishable key\n    \n*   #### \n    \n    processingnullable objectretrievable with publishable key\n    \n*   #### \n    \n    reviewnullable stringExpandable\n    \n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n*   #### \n    \n    transfer\\_groupnullable stringConnect only\n    \n\n```\n{  \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800504,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Create a PaymentIntent](https://docs.stripe.com/api/payment_intents/create)\n\nCreates a PaymentIntent object.\n\nAfter the PaymentIntent is created, attach a payment method and [confirm](https://docs.stripe.com/api/payment_intents/confirm) to continue the payment. Learn more about [the available payment flows with the Payment Intents API](https://docs.stripe.com/payments/payment-intents).\n\nWhen you use `confirm=true` during creation, it’s equivalent to creating and confirming the PaymentIntent in the same call. You can use any parameters available in the [confirm API](https://docs.stripe.com/api/payment_intents/confirm) when you supply `confirm=true`.\n\n### Parameters\n\n*   Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).\n    \n\n*   #### \n    \n    automatic\\_payment\\_methodsobject\n    \n    When you enable this parameter, this PaymentIntent accepts payment methods that you enable in the Dashboard and that are compatible with this PaymentIntent’s other parameters.\n    \n*   Set to `true` to attempt to [confirm this PaymentIntent](https://docs.stripe.com/api/payment_intents/confirm) immediately. This parameter defaults to `false`. When creating and confirming a PaymentIntent at the same time, you can also provide the parameters available in the [Confirm API](https://docs.stripe.com/api/payment_intents/confirm).\n    \n*   ID of the Customer this PaymentIntent belongs to, if one exists.\n    \n    Payment methods attached to other Customers cannot be used with this PaymentIntent.\n    \n    If present in combination with [setup\\_future\\_usage](#payment_intent_object-setup_future_usage), this PaymentIntent’s payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    off\\_sessionboolean | stringonly when confirm=true\n    \n    Set to `true` to indicate that the customer isn’t in your checkout flow during this payment attempt and can’t authenticate. Use this parameter in scenarios where you collect card details and [charge them later](https://docs.stripe.com/payments/cards/charging-saved-cards). This parameter can only be used with [`confirm=true`](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm).\n    \n*   ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://docs.stripe.com/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.\n    \n    If you omit this parameter with `confirm=true`, `customer.default_source` attaches as this PaymentIntent’s payment instrument to improve migration for users of the Charges API. We recommend that you explicitly provide the `payment_method` moving forward.\n    \n*   Email address to send the receipt to. If you specify `receipt_email` for a payment in live mode, you send a receipt regardless of your [email settings](https://dashboard.stripe.com/account/emails).\n    \n*   Indicates that you intend to make future payments with this PaymentIntent’s payment method.\n    \n    Providing this parameter will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://docs.stripe.com/api/payment_methods/attach) to a Customer after the transaction completes.\n    \n    When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://docs.stripe.com/strong-customer-authentication).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   Shipping information for this PaymentIntent.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    For card charges, use [statement\\_descriptor\\_suffix](https://stripe.com/docs/payments/account/statement-descriptors#dynamic). Otherwise, you can use this value as the complete description of a charge on your customers’ statements. It must contain at least one letter and be 1–22 characters long.\n    \n*   #### \n    \n    statement\\_descriptor\\_suffixstring\n    \n    Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. The concatenated descriptor must contain 1-22 characters.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    confirmation\\_tokenstringonly when confirm=true\n    \n*   #### \n    \n    error\\_on\\_requires\\_actionbooleanonly when confirm=true\n    \n*   #### \n    \n    mandatestringonly when confirm=true\n    \n*   #### \n    \n    mandate\\_dataobjectonly when confirm=true\n    \n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n*   #### \n    \n    payment\\_method\\_configurationstring\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobject\n    \n*   #### \n    \n    payment\\_method\\_typesarray of strings\n    \n\n*   #### \n    \n    return\\_urlstringonly when confirm=true\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    transfer\\_groupstringConnect only\n    \n\n### Returns\n\nReturns a PaymentIntent object.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=2000 \\  -d currency=usd \\  -d \"automatic_payment_methods[enabled]\"=true\n```\n\n```\n{  \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800504,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Update a PaymentIntent](https://docs.stripe.com/api/payment_intents/update)\n\nUpdates properties on a PaymentIntent object without confirming.\n\nDepending on which properties you update, you might need to confirm the PaymentIntent again. For example, updating the `payment_method` always requires you to confirm the PaymentIntent again. If you prefer to update and confirm at the same time, we recommend updating properties through the [confirm API](https://docs.stripe.com/api/payment_intents/confirm) instead.\n\n### Parameters\n\n*   Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).\n    \n\n*   ID of the Customer this PaymentIntent belongs to, if one exists.\n    \n    Payment methods attached to other Customers cannot be used with this PaymentIntent.\n    \n    If present in combination with [setup\\_future\\_usage](#payment_intent_object-setup_future_usage), this PaymentIntent’s payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://docs.stripe.com/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.\n    \n*   Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).\n    \n*   Indicates that you intend to make future payments with this PaymentIntent’s payment method.\n    \n    Providing this parameter will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://docs.stripe.com/api/payment_methods/attach) to a Customer after the transaction completes.\n    \n    When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://docs.stripe.com/strong-customer-authentication).\n    \n    If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   Shipping information for this PaymentIntent.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    For card charges, use [statement\\_descriptor\\_suffix](https://stripe.com/docs/payments/account/statement-descriptors#dynamic). Otherwise, you can use this value as the complete description of a charge on your customers’ statements. It must contain at least one letter and be 1–22 characters long.\n    \n*   #### \n    \n    statement\\_descriptor\\_suffixstring\n    \n    Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    capture\\_methodenumsecret key only\n    \n*   #### \n    \n    payment\\_method\\_configurationstring\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobject\n    \n*   #### \n    \n    payment\\_method\\_typesarray of strings\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    transfer\\_groupstringConnect only\n    \n\n### Returns\n\nReturns a PaymentIntent object.\n\nPOST /v1/payment\\_intents/:id\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_3MtwBwLkdIwHu7ix28a3tqPa \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800504,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Retrieve a PaymentIntent](https://docs.stripe.com/api/payment_intents/retrieve)\n\nRetrieves the details of a PaymentIntent that has previously been created.\n\nYou can retrieve a PaymentIntent client-side using a publishable key when the `client_secret` is in the query string.\n\nIf you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the [payment intent](#payment_intent_object) object reference for more details.\n\n### Parameters\n\n*   #### \n    \n    client\\_secretstringRequired if you use a publishable key.\n    \n    The client secret of the PaymentIntent. We require it if you use a publishable key to retrieve the source.\n    \n\n### Returns\n\nReturns a PaymentIntent if a valid identifier was provided.\n\nGET /v1/payment\\_intents/:id\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_3MtwBwLkdIwHu7ix28a3tqPa \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800504,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```",
    "title": "Payment Intents | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/files",
    "markdown": "# Files | Stripe API Reference\n\nThis object represents files hosted on Stripe’s servers. You can upload files with the [create file](#create_file) request (for example, when uploading dispute evidence). Stripe also creates files independently (for example, the results of a [Sigma scheduled query](#scheduled_queries)).\n\nRelated guide: [File upload guide](https://docs.stripe.com/file-upload)\n\n## [The File object](https://docs.stripe.com/api/files/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The [purpose](https://docs.stripe.com/file-upload#uploading-a-file) of the uploaded file.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_requirement`<br><br>Additional documentation requirements that can be requested for an account. |\n    | `additional_verification`<br><br>Additional verification for custom accounts. |\n    | `business_icon`<br><br>A business icon. |\n    | `business_logo`<br><br>A business logo. |\n    | `customer_signature`<br><br>Customer signature image. |\n    | `dispute_evidence`<br><br>Evidence to submit with a dispute response. |\n    | `finance_report_run`<br><br>User-accessible copies of query results from the Reporting dataset. |\n    | `identity_document`<br><br>A document to verify the identity of an account owner during account provisioning. |\n    | `identity_document_downloadable`<br><br>Image of a document collected by Stripe Identity. |\n    | `pci_document`<br><br>A self-assessment PCI questionnaire. |\n    | Show 4 more |\n    \n*   The returned file type (for example, `csv`, `pdf`, `jpg`, or `png`).\n    \n\n### More attributes\n\n*   #### \n    \n    expires\\_atnullable timestamp\n    \n\n```\n{  \"id\": \"file_1Mr4LDLkdIwHu7ixFCz0dZiH\",  \"object\": \"file\",  \"created\": 1680116847,  \"expires_at\": 1703444847,  \"filename\": \"file.png\",  \"links\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"url\": \"/v1/file_links?file=file_1Mr4LDLkdIwHu7ixFCz0dZiH\"  },  \"purpose\": \"dispute_evidence\",  \"size\": 8429,  \"title\": null,  \"type\": \"png\",  \"url\": \"https://files.stripe.com/v1/files/file_1Mr4LDLkdIwHu7ixFCz0dZiH/contents\"}\n```\n\n## [Create a file](https://docs.stripe.com/api/files/create)\n\nTo upload a file to Stripe, you need to send a request of type `multipart/form-data`. Include the file you want to upload in the request, and the parameters for creating a file.\n\nAll of Stripe’s officially supported Client libraries support sending `multipart/form-data`.\n\n### Parameters\n\n*   A file to upload. Make sure that the specifications follow RFC 2388, which defines file transfers for the `multipart/form-data` protocol.\n    \n*   The [purpose](https://docs.stripe.com/file-upload#uploading-a-file) of the uploaded file.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_requirement`<br><br>Additional documentation requirements that can be requested for an account. |\n    | `additional_verification`<br><br>Additional verification for custom accounts. |\n    | `business_icon`<br><br>A business icon. |\n    | `business_logo`<br><br>A business logo. |\n    | `customer_signature`<br><br>Customer signature image. |\n    | `dispute_evidence`<br><br>Evidence to submit with a dispute response. |\n    | `identity_document`<br><br>A document to verify the identity of an account owner during account provisioning. |\n    | `pci_document`<br><br>A self-assessment PCI questionnaire. |\n    | `tax_document_user_upload`<br><br>A user-uploaded tax document. |\n    | `terminal_reader_splashscreen`<br><br>Splashscreen to be displayed on Terminal readers. |\n    \n\n### More parameters\n\n### Returns\n\nReturns the file object.\n\n```\ncurl https://files.stripe.com/v1/files \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -F purpose=dispute_evidence \\  -F file=\"@/path/to/a/file.jpg\"\n```\n\n```\n{  \"id\": \"file_1Mr4LDLkdIwHu7ixFCz0dZiH\",  \"object\": \"file\",  \"created\": 1680116847,  \"expires_at\": 1703444847,  \"filename\": \"file.png\",  \"links\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"url\": \"/v1/file_links?file=file_1Mr4LDLkdIwHu7ixFCz0dZiH\"  },  \"purpose\": \"dispute_evidence\",  \"size\": 8429,  \"title\": null,  \"type\": \"png\",  \"url\": \"https://files.stripe.com/v1/files/file_1Mr4LDLkdIwHu7ixFCz0dZiH/contents\"}\n```\n\n## [Retrieve a file](https://docs.stripe.com/api/files/retrieve)\n\nRetrieves the details of an existing file object. After you supply a unique file ID, Stripe returns the corresponding file object. Learn how to [access file contents](https://docs.stripe.com/file-upload#download-file-contents).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nIf the identifier you provide is valid, a file object returns. If not, Stripe raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/files/@/path/to/a/file.png \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"file_1Mr4LDLkdIwHu7ixFCz0dZiH\",  \"object\": \"file\",  \"created\": 1680116847,  \"expires_at\": 1703444847,  \"filename\": \"file.png\",  \"links\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"url\": \"/v1/file_links?file=file_1Mr4LDLkdIwHu7ixFCz0dZiH\"  },  \"purpose\": \"dispute_evidence\",  \"size\": 8429,  \"title\": null,  \"type\": \"png\",  \"url\": \"https://files.stripe.com/v1/files/file_1Mr4LDLkdIwHu7ixFCz0dZiH/contents\"}\n```\n\n## [List all files](https://docs.stripe.com/api/files/list)\n\nReturns a list of the files that your account has access to. Stripe sorts and returns the files by their creation dates, placing the most recently created files at the top.\n\n### Parameters\n\n*   Filter queries by the file purpose. If you don’t provide a purpose, the queries return unfiltered files.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` files, starting after the `starting_after` file. Each entry in the array is a separate file object. If there aren’t additional available files, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/files \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/files\",  \"has_more\": false,  \"data\": [    {      \"id\": \"file_1Mr4LDLkdIwHu7ixFCz0dZiH\",      \"object\": \"file\",      \"created\": 1680116847,      \"expires_at\": 1703444847,      \"filename\": \"file.png\",      \"links\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"url\": \"/v1/file_links?file=file_1Mr4LDLkdIwHu7ixFCz0dZiH\"      },      \"purpose\": \"dispute_evidence\",      \"size\": 8429,      \"title\": null,      \"type\": \"png\",      \"url\": \"https://files.stripe.com/v1/files/file_1Mr4LDLkdIwHu7ixFCz0dZiH/contents\"    }    {...}    {...}  ],}\n```",
    "title": "Files | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/mandates",
    "markdown": "# Mandates | Stripe API Reference\n\nA Mandate is a record of the permission that your customer gives you to debit their payment method.\n\n## [The Mandate object](https://docs.stripe.com/api/mandates/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    customer\\_acceptanceobject\n    \n    Details about the customer’s acceptance of the mandate.\n    \n*   #### \n    \n    payment\\_methodstringExpandable\n    \n    ID of the payment method associated with this mandate.\n    \n*   #### \n    \n    payment\\_method\\_detailsobject\n    \n    Additional mandate information specific to the payment method type.\n    \n*   The mandate status indicates whether or not you can use it to initiate a payment.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The mandate can be used to initiate a payment. |\n    | `inactive`<br><br>The mandate was rejected, revoked, or previously used, and may not be used to initiate future payments. |\n    | `pending`<br><br>The mandate is newly created and is not yet active or inactive. |\n    \n*   The type of the mandate.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `multi_use`<br><br>Represents permission given for multiple payments. |\n    | `single_use`<br><br>Represents a one-time permission given for a single payment. |\n    \n\n### More attributes\n\n*   #### \n    \n    on\\_behalf\\_ofnullable stringConnect only\n    \n*   #### \n    \n    single\\_usenullable object\n    \n\n```\n{  \"id\": \"mandate_1MvojA2eZvKYlo2CvqTABjZs\",  \"object\": \"mandate\",  \"customer_acceptance\": {    \"accepted_at\": 123456789,    \"online\": {      \"ip_address\": \"127.0.0.0\",      \"user_agent\": \"device\"    },    \"type\": \"online\"  },  \"livemode\": false,  \"multi_use\": {},  \"payment_method\": \"pm_123456789\",  \"payment_method_details\": {    \"sepa_debit\": {      \"reference\": \"123456789\",      \"url\": \"\"    },    \"type\": \"sepa_debit\"  },  \"status\": \"active\",  \"type\": \"multi_use\"}\n```\n\n## [Retrieve a Mandate](https://docs.stripe.com/api/mandates/retrieve)\n\nRetrieves a Mandate object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a Mandate object.\n\n```\ncurl https://api.stripe.com/v1/mandates/mandate_1MvojA2eZvKYlo2CvqTABjZs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mandate_1MvojA2eZvKYlo2CvqTABjZs\",  \"object\": \"mandate\",  \"customer_acceptance\": {    \"accepted_at\": 123456789,    \"online\": {      \"ip_address\": \"127.0.0.0\",      \"user_agent\": \"device\"    },    \"type\": \"online\"  },  \"livemode\": false,  \"multi_use\": {},  \"payment_method\": \"pm_123456789\",  \"payment_method_details\": {    \"sepa_debit\": {      \"reference\": \"123456789\",      \"url\": \"\"    },    \"type\": \"sepa_debit\"  },  \"status\": \"active\",  \"type\": \"multi_use\"}\n```\n\n## [Setup Attempts](https://docs.stripe.com/api/setup_attempts)\n\nA SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation is successful or unsuccessful. You can use SetupAttempts to inspect details of a specific attempt at setting up a payment method using a SetupIntent.\n\n## [Confirmation Token](https://docs.stripe.com/api/confirmation_tokens)\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Mandates | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/setup_intents",
    "markdown": "# Setup Intents | Stripe API Reference\n\n## [The SetupIntent object](https://docs.stripe.com/api/setup_intents/object)\n\n### Attributes\n\n*   #### \n    \n    idstringretrievable with publishable key\n    \n    Unique identifier for the object.\n    \n*   #### \n    \n    automatic\\_payment\\_methodsnullable object\n    \n    Settings for dynamic payment methods compatible with this Setup Intent\n    \n*   #### \n    \n    client\\_secretnullable stringretrievable with publishable key\n    \n    The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.\n    \n    The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n    ID of the Customer this SetupIntent belongs to, if one exists.\n    \n    If present, the SetupIntent’s payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.\n    \n*   #### \n    \n    descriptionnullable stringretrievable with publishable key\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    last\\_setup\\_errornullable objectretrievable with publishable key\n    \n    The error encountered in the previous SetupIntent confirmation.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    next\\_actionnullable objectretrievable with publishable key\n    \n    If present, this property tells you what actions you need to take in order for your customer to continue payment setup.\n    \n*   #### \n    \n    payment\\_methodnullable stringExpandableretrievable with publishable key\n    \n    ID of the payment method used with this SetupIntent.\n    \n*   #### \n    \n    statusenumretrievable with publishable key\n    \n    [Status](https://docs.stripe.com/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled` |\n    | `processing` |\n    | `requires_action` |\n    | `requires_confirmation` |\n    | `requires_payment_method` |\n    | `succeeded` |\n    \n*   #### \n    \n    usagestringretrievable with publishable key\n    \n    Indicates how the payment method is intended to be used in the future.\n    \n    Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.\n    \n\n### More attributes\n\n*   #### \n    \n    objectstringretrievable with publishable key\n    \n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    attach\\_to\\_selfnullable boolean\n    \n*   #### \n    \n    cancellation\\_reasonnullable enumretrievable with publishable key\n    \n*   #### \n    \n    createdtimestampretrievable with publishable key\n    \n*   #### \n    \n    flow\\_directionsnullable array of enums\n    \n*   #### \n    \n    latest\\_attemptnullable stringExpandable\n    \n*   #### \n    \n    livemodebooleanretrievable with publishable key\n    \n*   #### \n    \n    mandatenullable stringExpandable\n    \n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n*   #### \n    \n    payment\\_method\\_configuration\\_detailsnullable object\n    \n*   #### \n    \n    payment\\_method\\_optionsnullable object\n    \n*   #### \n    \n    payment\\_method\\_typesarray of stringsretrievable with publishable key\n    \n*   #### \n    \n    single\\_use\\_mandatenullable stringExpandable\n    \n\n```\n{  \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",  \"object\": \"setup_intent\",  \"application\": null,  \"cancellation_reason\": null,  \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",  \"created\": 1678942624,  \"customer\": null,  \"description\": null,  \"flow_directions\": null,  \"last_setup_error\": null,  \"latest_attempt\": null,  \"livemode\": false,  \"mandate\": null,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"single_use_mandate\": null,  \"status\": \"requires_payment_method\",  \"usage\": \"off_session\"}\n```\n\n## [Create a SetupIntent](https://docs.stripe.com/api/setup_intents/create)\n\nCreates a SetupIntent object.\n\nAfter you create the SetupIntent, attach a payment method and [confirm](https://docs.stripe.com/api/setup_intents/confirm) it to collect any required permissions to charge the payment method later.\n\n### Parameters\n\n*   #### \n    \n    automatic\\_payment\\_methodsobject\n    \n    When you enable this parameter, this SetupIntent accepts payment methods that you enable in the Dashboard and that are compatible with its other parameters.\n    \n*   Set to `true` to attempt to confirm this SetupIntent immediately. This parameter defaults to `false`. If a card is the attached payment method, you can provide a `return_url` in case further authentication is necessary.\n    \n*   ID of the Customer this SetupIntent belongs to, if one exists.\n    \n    If present, the SetupIntent’s payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.\n    \n*   Indicates how the payment method is intended to be used in the future. If not provided, this value defaults to `off_session`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. |\n    \n\n### More parameters\n\n*   #### \n    \n    confirmation\\_tokenstringonly when confirm=true\n    \n*   #### \n    \n    flow\\_directionsarray of enums\n    \n*   #### \n    \n    mandate\\_dataobjectonly when confirm=true\n    \n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n*   #### \n    \n    payment\\_method\\_configurationstring\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobject\n    \n*   #### \n    \n    payment\\_method\\_typesarray of strings\n    \n*   #### \n    \n    return\\_urlstringonly when confirm=true\n    \n\n### Returns\n\nReturns a SetupIntent object.\n\n```\ncurl https://api.stripe.com/v1/setup_intents \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"payment_method_types[]\"=card\n```\n\n```\n{  \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",  \"object\": \"setup_intent\",  \"application\": null,  \"cancellation_reason\": null,  \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",  \"created\": 1678942624,  \"customer\": null,  \"description\": null,  \"flow_directions\": null,  \"last_setup_error\": null,  \"latest_attempt\": null,  \"livemode\": false,  \"mandate\": null,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"single_use_mandate\": null,  \"status\": \"requires_payment_method\",  \"usage\": \"off_session\"}\n```\n\n## [Update a SetupIntent](https://docs.stripe.com/api/setup_intents/update)\n\nUpdates a SetupIntent object.\n\n### Parameters\n\n*   ID of the Customer this SetupIntent belongs to, if one exists.\n    \n    If present, the SetupIntent’s payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.\n    \n\n### More parameters\n\n*   #### \n    \n    flow\\_directionsarray of enums\n    \n*   #### \n    \n    payment\\_method\\_configurationstring\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobject\n    \n*   #### \n    \n    payment\\_method\\_typesarray of strings\n    \n\n### Returns\n\nReturns a SetupIntent object.\n\nPOST /v1/setup\\_intents/:id\n\n```\ncurl https://api.stripe.com/v1/setup_intents/seti_1Mm8s8LkdIwHu7ix0OXBfTRG \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",  \"object\": \"setup_intent\",  \"application\": null,  \"cancellation_reason\": null,  \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",  \"created\": 1678942624,  \"customer\": null,  \"description\": null,  \"flow_directions\": null,  \"last_setup_error\": null,  \"latest_attempt\": null,  \"livemode\": false,  \"mandate\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"single_use_mandate\": null,  \"status\": \"requires_payment_method\",  \"usage\": \"off_session\"}\n```\n\n## [Retrieve a SetupIntent](https://docs.stripe.com/api/setup_intents/retrieve)\n\nRetrieves the details of a SetupIntent that has previously been created.\n\nClient-side retrieval using a publishable key is allowed when the `client_secret` is provided in the query string.\n\nWhen retrieved with a publishable key, only a subset of properties will be returned. Please refer to the [SetupIntent](#setup_intent_object) object reference for more details.\n\n### Parameters\n\n*   #### \n    \n    client\\_secretstringRequired if using publishable key\n    \n    The client secret of the SetupIntent. We require this string if you use a publishable key to retrieve the SetupIntent.\n    \n\n### Returns\n\nReturns a SetupIntent if a valid identifier was provided.\n\nGET /v1/setup\\_intents/:id\n\n```\ncurl https://api.stripe.com/v1/setup_intents/seti_1Mm8s8LkdIwHu7ix0OXBfTRG \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",  \"object\": \"setup_intent\",  \"application\": null,  \"cancellation_reason\": null,  \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",  \"created\": 1678942624,  \"customer\": null,  \"description\": null,  \"flow_directions\": null,  \"last_setup_error\": null,  \"latest_attempt\": null,  \"livemode\": false,  \"mandate\": null,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"single_use_mandate\": null,  \"status\": \"requires_payment_method\",  \"usage\": \"off_session\"}\n```",
    "title": "Setup Intents | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payouts",
    "markdown": "# Payouts | Stripe API Reference\n\n## [The Payout object](https://docs.stripe.com/api/payouts/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The amount (in cents) that transfers to your bank account or debit card.\n    \n*   Date that you can expect the payout to arrive in the bank. This factors in delays to account for weekends or bank holidays.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    statement\\_descriptornullable string\n    \n    Extra information about a payout that displays on the user’s bank statement.\n    \n*   Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it’s submitted to the bank, when it becomes `in_transit`. The status changes to `paid` if the transaction succeeds, or to `failed` or `canceled` (within 5 business days). Some payouts that fail might initially show as `paid`, then change to `failed`.\n    \n\n### More attributes\n\n*   #### \n    \n    application\\_feenullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n\n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\n*   #### \n    \n    destinationnullable stringExpandable\n    \n*   #### \n    \n    failure\\_balance\\_transactionnullable stringExpandable\n    \n*   #### \n    \n    failure\\_codenullable enum\n    \n*   #### \n    \n    failure\\_messagenullable string\n    \n\n*   #### \n    \n    original\\_payoutnullable stringExpandable\n    \n*   #### \n    \n    reconciliation\\_statusenum\n    \n*   #### \n    \n    reversed\\_bynullable stringExpandable\n    \n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {},  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```\n\n## [Create a payout](https://docs.stripe.com/api/payouts/create)\n\nTo send funds to your own bank account, create a new payout object. Your [Stripe balance](#balance) must cover the payout amount. If it doesn’t, you receive an “Insufficient Funds” error.\n\nIf your API key is in test mode, money won’t actually be sent, though every other action occurs as if you’re in live mode.\n\nIf you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The [balance object](#balance_object) details available and pending amounts by source type.\n\n### Parameters\n\n*   A positive integer in cents representing how much to payout.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    A string that displays on the recipient’s bank or card statement (up to 22 characters). A `statement_descriptor` that’s longer than 22 characters return an error. Most banks truncate this information and display it inconsistently. Some banks might not display it at all.\n    \n\n### More parameters\n\n### Returns\n\nReturns a payout object if no initial errors are present during the payout creation (invalid routing number, insufficient funds, and so on). We initially mark the status of the payout object as `pending`.\n\n```\ncurl https://api.stripe.com/v1/payouts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1100 \\  -d currency=usd\n```\n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {},  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```\n\n## [Update a payout](https://docs.stripe.com/api/payouts/update)\n\nUpdates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you don’t provide. This request only accepts the metadata as arguments.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the payout object if the update succeeds. This call raises [an error](#errors) if update parameters are invalid.\n\n```\ncurl https://api.stripe.com/v1/payouts/po_1OaFDbEcg9tTZuTgNYmX0PKB \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```\n\n## [Retrieve a payout](https://docs.stripe.com/api/payouts/retrieve)\n\nRetrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a payout object if a you provide a valid identifier. raises [An error](#errors) occurs otherwise.\n\n```\ncurl https://api.stripe.com/v1/payouts/po_1OaFDbEcg9tTZuTgNYmX0PKB \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {},  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```",
    "title": "Payouts | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/setup_attempts",
    "markdown": "# Setup Attempts | Stripe API Reference\n\nA SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation is successful or unsuccessful. You can use SetupAttempts to inspect details of a specific attempt at setting up a payment method using a SetupIntent.\n\n## [The SetupAttempt object](https://docs.stripe.com/api/setup_attempts/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    applicationnullable stringExpandable\n    \n    The value of [application](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation.\n    \n*   #### \n    \n    attach\\_to\\_selfnullable boolean\n    \n    If present, the SetupIntent’s payment method will be attached to the in-context Stripe Account.\n    \n    It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.\n    \n*   #### \n    \n    createdtimestampretrievable with publishable key\n    \n    Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n    The value of [customer](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation.\n    \n*   #### \n    \n    flow\\_directionsnullable array of enums\n    \n    Indicates the directions of money movement for which this payment method is intended to be used.\n    \n    Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.\n    \n*   #### \n    \n    livemodebooleanretrievable with publishable key\n    \n    Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandable\n    \n    The value of [on\\_behalf\\_of](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation.\n    \n*   #### \n    \n    payment\\_methodstringExpandableretrievable with publishable key\n    \n    ID of the payment method used with this SetupAttempt.\n    \n*   #### \n    \n    payment\\_method\\_detailsobject\n    \n    Details about the payment method at the time of SetupIntent confirmation.\n    \n*   #### \n    \n    setup\\_errornullable object\n    \n    The error encountered during this attempt to confirm the SetupIntent, if any.\n    \n*   #### \n    \n    setup\\_intentstringExpandable\n    \n    ID of the SetupIntent that this attempt belongs to.\n    \n*   Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`.\n    \n*   The value of [usage](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`.\n    \n\n```\n{  \"id\": \"setatt_1ErTsH2eZvKYlo2CI7ukcoF7\",  \"object\": \"setup_attempt\",  \"application\": null,  \"created\": 1562004309,  \"customer\": null,  \"flow_directions\": null,  \"livemode\": false,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1ErTsG2eZvKYlo2CH0DNen59\",  \"payment_method_details\": {    \"card\": {      \"three_d_secure\": null    },    \"type\": \"card\"  },  \"setup_error\": null,  \"setup_intent\": \"seti_1ErTsG2eZvKYlo2CKaT8MITz\",  \"status\": \"succeeded\",  \"usage\": \"off_session\"}\n```\n\n## [List all SetupAttempts](https://docs.stripe.com/api/setup_attempts/list)\n\nReturns a list of SetupAttempts that associate with a provided SetupIntent.\n\n### Parameters\n\n*   #### \n    \n    setup\\_intentstringRequired\n    \n    Only return SetupAttempts created by the SetupIntent specified by this ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` SetupAttempts that are created by the specified SetupIntent, which start after SetupAttempts `starting_after`. Each entry in the array is a separate SetupAttempts object. If no other SetupAttempts are available, the resulting array is be empty. This request should never raise an error.\n\n```\ncurl -G https://api.stripe.com/v1/setup_attempts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d setup_intent=seti_1ErTsG2eZvKYlo2CKaT8MITz\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/setup_attempts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"setatt_1ErTsH2eZvKYlo2CI7ukcoF7\",      \"object\": \"setup_attempt\",      \"application\": null,      \"created\": 1562004309,      \"customer\": null,      \"flow_directions\": null,      \"livemode\": false,      \"on_behalf_of\": null,      \"payment_method\": \"pm_1ErTsG2eZvKYlo2CH0DNen59\",      \"payment_method_details\": {        \"card\": {          \"three_d_secure\": null        },        \"type\": \"card\"      },      \"setup_error\": null,      \"setup_intent\": \"seti_1ErTsG2eZvKYlo2CKaT8MITz\",      \"status\": \"succeeded\",      \"usage\": \"off_session\"    }    {...}    {...}  ],}\n```\n\n## [Confirmation Token](https://docs.stripe.com/api/confirmation_tokens)\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Setup Attempts | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/refunds",
    "markdown": "# Refunds | Stripe API Reference\n\n## [The Refund object](https://docs.stripe.com/api/refunds/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount, in cents.\n    \n*   #### \n    \n    chargenullable stringExpandable\n    \n    ID of the charge that’s refunded.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. You can use this for displaying to users (available on non-card refunds only).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    ID of the PaymentIntent that’s refunded.\n    \n*   Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).\n    \n*   Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://docs.stripe.com/refunds#failed-refunds).\n    \n\n### More attributes\n\n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\n*   #### \n    \n    destination\\_detailsnullable object\n    \n*   #### \n    \n    failure\\_balance\\_transactionnullable stringExpandable\n    \n*   #### \n    \n    failure\\_reasonnullable string\n    \n*   #### \n    \n    instructions\\_emailnullable string\n    \n*   #### \n    \n    next\\_actionnullable object\n    \n*   #### \n    \n    receipt\\_numbernullable string\n    \n*   #### \n    \n    source\\_transfer\\_reversalnullable stringExpandableConnect only\n    \n*   #### \n    \n    transfer\\_reversalnullable stringExpandableConnect only\n    \n\n```\n{  \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",  \"object\": \"refund\",  \"amount\": 1000,  \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",  \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",  \"created\": 1692942318,  \"currency\": \"usd\",  \"destination_details\": {    \"card\": {      \"reference\": \"123456789012\",      \"reference_status\": \"available\",      \"reference_type\": \"acquirer_reference_number\",      \"type\": \"refund\"    },    \"type\": \"card\"  },  \"metadata\": {},  \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",  \"reason\": null,  \"receipt_number\": null,  \"source_transfer_reversal\": null,  \"status\": \"succeeded\",  \"transfer_reversal\": null}\n```\n\n## [Create a refund](https://docs.stripe.com/api/refunds/create)\n\nWhen you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.\n\nCreating a new refund will refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.\n\nYou can optionally refund only part of a charge. You can do so multiple times, until the entire charge has been refunded.\n\nOnce entirely refunded, a charge can’t be refunded again. This method will raise an error when called on an already-refunded charge, or when trying to refund more money than is left on a charge.\n\n### Parameters\n\n*   A positive integer in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) representing how much of this charge to refund. Can refund only up to the remaining, unrefunded amount of the charge.\n    \n*   The identifier of the charge to refund.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The identifier of the PaymentIntent to refund.\n    \n*   String indicating the reason for the refund. If set, possible values are `duplicate`, `fraudulent`, and `requested_by_customer`. If you believe the charge to be fraudulent, specifying `fraudulent` as the reason will add the associated card and email to your [block lists](https://docs.stripe.com/radar/lists), and will also help us improve our fraud detection algorithms.\n    \n\n### More parameters\n\n*   #### \n    \n    refund\\_application\\_feebooleanConnect only\n    \n*   #### \n    \n    reverse\\_transferbooleanConnect only\n    \n\n### Returns\n\nReturns the `Refund` object if the refund succeeded. Raises [an error](#errors) if the Charge/PaymentIntent has already been refunded, or if an invalid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/refunds \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d charge=ch_1NirD82eZvKYlo2CIvbtLWuY\n```\n\n```\n{  \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",  \"object\": \"refund\",  \"amount\": 1000,  \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",  \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",  \"created\": 1692942318,  \"currency\": \"usd\",  \"destination_details\": {    \"card\": {      \"reference\": \"123456789012\",      \"reference_status\": \"available\",      \"reference_type\": \"acquirer_reference_number\",      \"type\": \"refund\"    },    \"type\": \"card\"  },  \"metadata\": {},  \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",  \"reason\": null,  \"receipt_number\": null,  \"source_transfer_reversal\": null,  \"status\": \"succeeded\",  \"transfer_reversal\": null}\n```\n\n## [Update a refund](https://docs.stripe.com/api/refunds/update)\n\nUpdates the refund that you specify by setting the values of the passed parameters. Any parameters that you don’t provide remain unchanged.\n\nThis request only accepts `metadata` as an argument.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the refund object if the update succeeds. This call raises [an error](#errors) if update parameters are invalid.\n\n```\ncurl https://api.stripe.com/v1/refunds/re_1Nispe2eZvKYlo2Cd31jOCgZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",  \"object\": \"refund\",  \"amount\": 1000,  \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",  \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",  \"created\": 1692942318,  \"currency\": \"usd\",  \"destination_details\": {    \"card\": {      \"reference\": \"123456789012\",      \"reference_status\": \"available\",      \"reference_type\": \"acquirer_reference_number\",      \"type\": \"refund\"    },    \"type\": \"card\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",  \"reason\": null,  \"receipt_number\": null,  \"source_transfer_reversal\": null,  \"status\": \"succeeded\",  \"transfer_reversal\": null}\n```\n\n## [Retrieve a refund](https://docs.stripe.com/api/refunds/retrieve)\n\nRetrieves the details of an existing refund.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a refund if you provide a valid ID. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/refunds/re_1Nispe2eZvKYlo2Cd31jOCgZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",  \"object\": \"refund\",  \"amount\": 1000,  \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",  \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",  \"created\": 1692942318,  \"currency\": \"usd\",  \"destination_details\": {    \"card\": {      \"reference\": \"123456789012\",      \"reference_status\": \"available\",      \"reference_type\": \"acquirer_reference_number\",      \"type\": \"refund\"    },    \"type\": \"card\"  },  \"metadata\": {},  \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",  \"reason\": null,  \"receipt_number\": null,  \"source_transfer_reversal\": null,  \"status\": \"succeeded\",  \"transfer_reversal\": null}\n```",
    "title": "Refunds | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/samples/identity/modal",
    "markdown": "# Identity verification (modal) | Stripe DocumentationThe Stripe Docs logo\n\nSearch the docs or ask a question",
    "title": "Identity verification (modal) | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/confirmation_tokens",
    "markdown": "# Confirmation Token | Stripe API Reference\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [The Confirmation Token object](https://docs.stripe.com/api/confirmation_tokens/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    expires\\_atnullable timestamp\n    \n    Time at which this ConfirmationToken expires and can no longer be used to confirm a PaymentIntent or SetupIntent.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    mandate\\_datanullable object\n    \n    Data used for generating a Mandate.\n    \n*   #### \n    \n    payment\\_intentnullable string\n    \n    ID of the PaymentIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used.\n    \n*   #### \n    \n    payment\\_method\\_optionsnullable object\n    \n    Payment-method-specific configuration for this ConfirmationToken.\n    \n*   #### \n    \n    payment\\_method\\_previewnullable object\n    \n    Payment details collected by the Payment Element, used to create a PaymentMethod when a PaymentIntent or SetupIntent is confirmed with this ConfirmationToken.\n    \n*   #### \n    \n    return\\_urlnullable string\n    \n    Return URL used to confirm the Intent.\n    \n*   #### \n    \n    setup\\_future\\_usagenullable enum\n    \n    Indicates that you intend to make future payments with this ConfirmationToken’s payment method.\n    \n    The presence of this property will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   #### \n    \n    setup\\_intentnullable string\n    \n    ID of the SetupIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used.\n    \n*   Shipping information collected on this ConfirmationToken.\n    \n*   Indicates whether the Stripe SDK is used to handle confirmation flow. Defaults to `true` on ConfirmationToken.\n    \n\nThe Confirmation Token object\n\n```\n{  \"id\": \"ctoken_1NnQUf2eZvKYlo2CIObdtbnb\",  \"object\": \"confirmation_token\",  \"created\": 1694025025,  \"expires_at\": 1694068225,  \"livemode\": true,  \"mandate_data\": null,  \"payment_intent\": null,  \"payment_method\": null,  \"payment_method_preview\": {    \"billing_details\": {      \"address\": {        \"city\": \"Hyde Park\",        \"country\": \"US\",        \"line1\": \"50 Sprague St\",        \"line2\": \"\",        \"postal_code\": \"02136\",        \"state\": \"MA\"      },      \"email\": \"jennyrosen@stripe.com\",      \"name\": \"Jenny Rosen\",      \"phone\": null    },    \"card\": {      \"brand\": \"visa\",      \"checks\": {        \"address_line1_check\": null,        \"address_postal_code_check\": null,        \"cvc_check\": null      },      \"country\": \"US\",      \"display_brand\": \"visa\",      \"exp_month\": 8,      \"exp_year\": 2026,      \"funding\": \"credit\",      \"generated_from\": null,      \"last4\": \"4242\",      \"networks\": {        \"available\": [          \"visa\"        ],        \"preferred\": null      },      \"three_d_secure_usage\": {        \"supported\": true      },      \"wallet\": null    },    \"type\": \"card\"  },  \"return_url\": \"https://example.com/return\",  \"setup_future_usage\": \"off_session\",  \"setup_intent\": null,  \"shipping\": {    \"address\": {      \"city\": \"Hyde Park\",      \"country\": \"US\",      \"line1\": \"50 Sprague St\",      \"line2\": \"\",      \"postal_code\": \"02136\",      \"state\": \"MA\"    },    \"name\": \"Jenny Rosen\",    \"phone\": null  }}\n```\n\n## [Retrieve a ConfirmationToken](https://docs.stripe.com/api/confirmation_tokens/retrieve)\n\nRetrieves an existing ConfirmationToken object\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the specified ConfirmationToken\n\nGET /v1/confirmation\\_tokens/:id\n\n```\ncurl https://api.stripe.com/v1/confirmation_tokens/ctoken_1NnQUf2eZvKYlo2CIObdtbnb \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ctoken_1NnQUf2eZvKYlo2CIObdtbnb\",  \"object\": \"confirmation_token\",  \"created\": 1694025025,  \"expires_at\": 1694068225,  \"livemode\": true,  \"mandate_data\": null,  \"payment_intent\": null,  \"payment_method\": null,  \"payment_method_preview\": {    \"billing_details\": {      \"address\": {        \"city\": \"Hyde Park\",        \"country\": \"US\",        \"line1\": \"50 Sprague St\",        \"line2\": \"\",        \"postal_code\": \"02136\",        \"state\": \"MA\"      },      \"email\": \"jennyrosen@stripe.com\",      \"name\": \"Jenny Rosen\",      \"phone\": null    },    \"card\": {      \"brand\": \"visa\",      \"checks\": {        \"address_line1_check\": null,        \"address_postal_code_check\": null,        \"cvc_check\": null      },      \"country\": \"US\",      \"display_brand\": \"visa\",      \"exp_month\": 8,      \"exp_year\": 2026,      \"funding\": \"credit\",      \"generated_from\": null,      \"last4\": \"4242\",      \"networks\": {        \"available\": [          \"visa\"        ],        \"preferred\": null      },      \"three_d_secure_usage\": {        \"supported\": true      },      \"wallet\": null    },    \"type\": \"card\"  },  \"return_url\": \"https://example.com/return\",  \"setup_future_usage\": \"off_session\",  \"setup_intent\": null,  \"shipping\": {    \"address\": {      \"city\": \"Hyde Park\",      \"country\": \"US\",      \"line1\": \"50 Sprague St\",      \"line2\": \"\",      \"postal_code\": \"02136\",      \"state\": \"MA\"    },    \"name\": \"Jenny Rosen\",    \"phone\": null  }}\n```\n\n## [Create a test Confirmation Token](https://docs.stripe.com/api/confirmation_tokens/test_create)Test helper\n\nCreates a test mode Confirmation Token server side for your integration tests.\n\n### Parameters\n\n*   ID of an existing PaymentMethod.\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n    If provided, this hash will be used to create a PaymentMethod.\n    \n*   Return URL used to confirm the Intent.\n    \n*   Indicates that you intend to make future payments with this ConfirmationToken’s payment method.\n    \n    The presence of this property will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   Shipping information for this ConfirmationToken.\n    \n\n### Returns\n\nReturns a testmode Confirmation Token\n\nPOST /v1/test\\_helpers/confirmation\\_tokens\n\n```\ncurl https://api.stripe.com/v1/test_helpers/confirmation_tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_method=pm_card_visa\n```\n\n```\n{  \"id\": \"ctoken_1Ow71CL4FhS6zgoxWjxc7sfr\",  \"object\": \"confirmation_token\",  \"created\": 1710871450,  \"expires_at\": 1710914650,  \"livemode\": false,  \"payment_intent\": null,  \"payment_method_preview\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": null,      \"phone\": null    },    \"card\": {      \"brand\": \"visa\",      \"checks\": {        \"address_line1_check\": null,        \"address_postal_code_check\": null,        \"cvc_check\": \"unchecked\"      },      \"country\": \"US\",      \"display_brand\": \"visa\",      \"exp_month\": 3,      \"exp_year\": 2025,      \"fingerprint\": \"jbGyCKrSRsFpOBWP\",      \"funding\": \"credit\",      \"generated_from\": null,      \"last4\": \"4242\",      \"networks\": {        \"available\": [          \"visa\"        ],        \"preferred\": null      },      \"three_d_secure_usage\": {        \"supported\": true      },      \"wallet\": null    },    \"type\": \"card\"  },  \"return_url\": null,  \"setup_future_usage\": null,  \"setup_intent\": null,  \"shipping\": null,  \"use_stripe_sdk\": true}\n```\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Confirmation Token | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/samples/identity/redirect",
    "markdown": "# Identity verification (redirect) | Stripe DocumentationThe Stripe Docs logo\n\nSearch the docs or ask a question",
    "title": "Identity verification (redirect) | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/paymentintents/lifecycle",
    "markdown": "# How PaymentIntents work | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how PaymentIntents work within the payment flow.\n\nPayments involving [asynchronous](https://en.wikipedia.org/wiki/Asynchronous_system \"asynchronous\") processes can be complex to manage. For example, a user might be required to confirm a payment using [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\"). Asynchronous payment flows are hard to manage because they depend on customer interactions that happen outside of your application. [PaymentIntents](https://docs.stripe.com/api/payment_intents) and [SetupIntents](https://docs.stripe.com/api/setup_intents) simplify management by tracking the status of the flow in a _state machine_.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/1ab45e9a3dd360cdbbe998626aaa5ca1.svg)\n\nrequires\\_payment\\_method\n\nWhen the PaymentIntent is created, it has a status of `requires_payment_method`1 [until a payment method is attached](https://docs.stripe.com/payments/payment-methods/overview).\n\nWe recommend creating the PaymentIntent as soon as you know how much you want to charge, so that Stripe can record all the attempted payments.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/requires-payment-method.21aed536306bea4c2247fff2ea66f08d.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/d93e2a08ffc6bbfe4683e3f7d0fffe32.svg)\n\nrequires\\_confirmation\n\nOptional\n\nAfter the customer provides their payment information, the PaymentIntent is ready to be confirmed.\n\nIn most integrations, this state is skipped because payment method information is submitted at the same time that the payment is confirmed.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/requires-confirmation.a6c272d9b055a3478607d8775f1fc50d.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/94646c1d7332e58bd1d56e6cebd1a40e.svg)\n\nrequires\\_action\n\nIf the payment requires additional actions, such as authenticating with [3D Secure](https://docs.stripe.com/payments/3d-secure), the PaymentIntent has a status of `requires_action`1.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/requires-action.a062dfa0d428b32132566ba7ef1d7243.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/8ccc7708adc370d6365aa5558ee39a62.svg)\n\nprocessing\n\nAfter required actions are handled, the PaymentIntent moves to `processing` for asynchronous payment methods, such as bank debits. These types of payment methods can take up to a few days to process. Other payment methods, such as cards, are processed more quickly and don’t go into the `processing` status.\n\nIf you’re separately [authorizing and capturing funds](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method), your PaymentIntent can instead move to `requires_capture`. In that case, attempting to capture the funds moves it to `processing`.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/processing.c663be2135026c121cbc874940a75208.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/6423ea22ac10bfa6996c6f9db9b0ad1d.svg)\n\nsucceeded\n\nA PaymentIntent with a status of succeeded means that the payment flow it is driving is complete.\n\nThe funds are now in your account and you can confidently fulfill the order. If you need to refund the customer, you can use the Refunds API.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/succeeded.949bd1ab653cc1b01743b30d117d92eb.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/34cbc85e7b2159474edf46422b7762f7.svg)\n\nrequires\\_payment\\_method\n\nIf the payment attempt fails (for example due to a decline), the PaymentIntent’s status returns to `requires_payment_method` so that the payment can be retried.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/failed.6db418ae7d0080b133e55d193f6d4bac.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/3eb46c024752a66b38516e0f282b95af.svg)\n\ncanceled\n\nYou can cancel a PaymentIntent at any point before it’s in a `processing`2 or `succeeded` state. Canceling it invalidates the PaymentIntent for future payment attempts, and can’t be undone. If any funds have been held, cancellation releases them.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/canceled.2f4b54d22ada83182bc807459c912d64.svg)",
    "title": "How PaymentIntents work | Stripe Documentation",
    "description": "Learn how PaymentIntents work within the payment flow.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-intents/migration/charges",
    "markdown": "# Charges versus Payment Intents APIs\n\n## Learn about the differences between Stripe's two core payment APIs and when to use them.\n\n## Understanding the Stripe payment APIs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are three ways to accept payments on Stripe today:\n\n*   Stripe Checkout\n*   Charges API\n*   [Payment Intents API](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\")\n\n[Stripe Checkout](https://docs.stripe.com/payments/checkout) is a prebuilt payment page that you can redirect your customer to for simple purchases and [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). It provides many features, such as Apple Pay, Google Pay, internationalization, and form validation.\n\nThe [Charges](https://docs.stripe.com/api/charges) and [Payment Intents](https://docs.stripe.com/api/payment_intents) APIs let you build custom payment flows and experiences.\n\nThe Payment Intents API is the unifying API for all Stripe products and payment methods. While we are not deprecating Charges, new features are only available with the Payment Intents API.\n\nFor a full feature comparison, see the table below:\n\n| Charges API | Payment Intents API |\n| --- | --- |\n| Used by businesses with customers primarily in the US / Canada who want a simple way to accept cards. | Required for businesses that accept multiple payment methods and cards requiring authentication (for example, due to [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") in Europe). |\n| Works on Web, iOS, and Android. | Works on Web, iOS, and Android. Can also be used to accept in-store payments with Terminal. |\n| Supports cards and all payment methods on the [Sources API](https://docs.stripe.com/sources). | Supports cards, cards requiring 3DS, iDEAL, SEPA, and [many other payment methods](https://docs.stripe.com/payments/payment-methods/overview). |\n| Is **not SCA** ready | [Is SCA ready](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") |\n\n## Migrating code that reads from charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you have an application with multiple payment flows and incrementally migrating each one from the Charges API to the [Payment Intents API](https://docs.stripe.com/payments/payment-intents), you should first update any code that reads from the [Charge](https://docs.stripe.com/api/charges) object. To help with this, the charge object has two additional properties, [payment\\_method\\_details](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details) and [billing\\_details](https://docs.stripe.com/api/charges/object#charge_object-billing_details), which provide a consistent interface for reading the details of the payment method used for the charge.\n\nThese fields are available on all API versions and on charge objects created with both the Charges API and the Payment Intents API.\n\nThe following table shows commonly used properties on a charge and how the same information can be accessed using the additional properties:\n\n| Description | Before | After |\n| --- | --- | --- |\n| Details about the payment method used to create a charge | `charge.source` | `charge.payment_method_details` |\n| ID of the payment method used for the charge | `charge.source.id` | `charge.payment_method` |\n| Type of payment method used | `charge.source.object` (for example, `card` or `bank_account`) | `charge.payment_method_details.type` |\n| Billing information for the charge (for example, billing postal code) | `charge.source.address_zip` | `charge.billing_details.address.postal_code` |\n| Name of the cardholder | `charge.source.name` | `charge.billing_details.name` |\n| Last 4 digits of the card used | `charge.source.last4` | `charge.payment_method_details.card.last4` |\n| Fingerprint of the card | `charge.source.fingerprint` | `charge.payment_method_details.card.fingerprint` |\n| CVC verification status for the charge | `charge.source.cvc_check` | `charge.payment_method_details.card.checks.cvc_check` |\n| Card brand values | `charge.source.brand` can be one of: `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa` | `charge.payment_method_details.card.brand` can be one of: `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa` |\n| Google Pay enum value | `charge.source.tokenization_method` is `android_pay` | `card.wallet.type` within `charge.payment_method_details` is `google_pay` |",
    "title": "Charges versus Payment Intents APIs | Stripe Documentation",
    "description": "Learn about the differences between Stripe's two core payment APIs and when to use them.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-intents/asynchronous-capture",
    "markdown": "# Asynchronous Capture | Stripe DocumentationThe Stripe Docs logo\n\nTo upgrade your existing integration and add support for asynchronous capture, use `automatic_async` as the capture method when creating a PaymentIntent:\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=2000 \\   -d currency=usd \\   -d \"payment_method_types[]\"=card \\   -d payment_method=pm_card_visa \\   -d capture_method=automatic_async \\   -d confirm=true`\n\nYou might need to make additional changes when you opt into asynchronous capture since the API response and some webhooks have different behavior than with other capture methods.\n\nFor all payments, the [balance\\_transaction](https://docs.stripe.com/api/balance_transactions) is `null` on the following objects. For Connect payments, the [transfer](https://docs.stripe.com/api/charges/object#charge_object-transfer) and [application\\_fee](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-application_fee_amount) are also `null` on the following objects:\n\n*   attached [Charge](https://docs.stripe.com/api/charges/object) object of the API response\n*   [charge.succeeded](https://docs.stripe.com/api/events/types#event_types-charge.succeeded) webhook\n*   [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) webhook\n\nModified Charge object on the [charge.succeeded](https://docs.stripe.com/api/events/types#event_types-charge.succeeded) webhook:\n\n`# Charge Object {     \"id\": \"ch_123\",     \"object\": \"charge\",     \"amount_captured\": 1000, # the capture has happened     \"application_fee_amount\": 100,     \"captured\": true,     \"balance_transaction\": \"txn_123\", # applicable to all charges.     \"transfer\": \"tr_123\",         # applicable to destination charge only.     \"application_fee\": \"fee_123\", # applicable to destination charge only.     \"balance_transaction\": null,  # object might not be created yet, might be shown as nil.     \"transfer\": null,             # object might not be created yet, might be shown as nil.     \"application_fee\": null,      # object might not be created yet, might be shown as nil.     ... }`\n\nModified API response and [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) webhook: (different based on [API version](https://docs.stripe.com/upgrades))\n\n`# PaymentIntent Object {   \"id\": \"pi_123\",   \"object\": \"payment_intent\",   \"capture_method\": \"automatic_async\",   \"status\": \"succeeded\",   \"latest_charge\": \"ch_**\" # if expanded, this is the Modified Charge object above }`",
    "title": "Asynchronous Capture | Stripe Documentation",
    "description": "Learn how to use Asynchronous Capture to enable faster PaymentIntent confirmations.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-intents/verifying-status",
    "markdown": "# Payment status updates | Stripe DocumentationThe Stripe Docs logo\n\n## Monitor and verify payment status, so that you can respond to successful and failed payments.\n\n[PaymentIntents](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") update in response to actions taken by the customer or payment method. Your integration can inspect the PaymentIntent to determine the status of the payment process, so that you can take business actions or respond to states that require further intervention.\n\nYou can also use the Stripe Dashboard to configure your account to email you about payment status, such as successful payments. Change your [email notifications](https://docs.stripe.com/get-started/account/teams#email-notifications) in your [user settings](https://dashboard.stripe.com/settings/user).\n\n## Check PaymentIntent status on the client ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen completing a payment on the client with the [confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment) function, you can inspect the returned PaymentIntent to determine its current status:\n\n`(async () => {   const {paymentIntent, error} = await stripe.confirmCardPayment(clientSecret);   if (error) {     // Handle error here   } else if (paymentIntent && paymentIntent.status === 'succeeded') {     // Handle successful payment here   } })();`\n\nThe following are the possible outcomes of using the `confirmCardPayment` function:\n\n| **Event** | **What Happened** | **Expected Integration** |\n| --- | --- | --- |\n| Resolves with a PaymentIntent | The customer completed payment on your checkout page | Inform the customer that their payment succeeded |\n| Resolves with an error | The customer’s payment failed on your checkout page | Display an error message and prompt your customer to attempt payment again |\n\nThe promise returned by `confirmCardPayment` resolves when the payment process has either completed or failed with an error. When it completes successfully and returns a PaymentIntent, the status is always `succeeded` (or `requires_capture` if [capturing later](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method)). When the payment requires an additional step such as authentication, the promise doesn’t resolve until that step is either complete or has timed out.\n\n## Check PaymentIntent status on the client without using confirmCardPayment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo check the status of a PaymentIntent without using the `confirmCardPayment` function, retrieve it independently by using the [`retrievePaymentIntent`](https://docs.stripe.com/js/payment_intents/retrieve_payment_intent) function and passing in the [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\").\n\nThe following are some [possible statuses](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-status) of the PaymentIntent following a confirmation:\n\n| **What Happened** | **Expected PaymentIntent Status** |\n| --- | --- |\n| The customer completed payment on your checkout page | `succeeded` |\n| The customer didn’t complete the checkout | `requires_action` |\n| The customer’s payment failed on your checkout page | `requires_payment_method` |\n\n[Read more about the PaymentIntent statuses](https://docs.stripe.com/payments/paymentintents/lifecycle).\n\n`(async () => {   const {paymentIntent} = await stripe.retrievePaymentIntent(clientSecret);   if (paymentIntent && paymentIntent.status === 'succeeded') {     // Handle successful payment here   } else {     // Handle unsuccessful, processing, or canceled payments and API errors here   } })();`\n\n## Monitor a PaymentIntent with webhooks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe can send [webhook](https://docs.stripe.com/webhooks \"webhook\") events to your server to notify you when the status of a PaymentIntent changes, which you can use for purposes such as determining when to fulfill goods and services.\n\nDon’t attempt to handle order fulfillment on the client side because customers can leave the page after payment is complete but before the fulfillment process initiates. Instead, use webhooks to monitor the `payment_intent.succeeded` event and handle its completion asynchronously instead of attempting to initiate fulfillment on the client side.\n\n#### Caution\n\nIt’s technically possible to use polling instead of webhooks to monitor for changes caused by asynchronous operations—repeatedly retrieving a PaymentIntent so that you can check its status—but doing so is much less reliable and might cause rate limiiting issues. Stripe enforces [rate limiting](https://docs.stripe.com/testing#rate-limits) on API requests, so exercise caution if you decide to use polling.\n\nTo handle a webhook event, create a route on your server and configure a corresponding webhook endpoint [in the Dashboard](https://dashboard.stripe.com/account/webhooks). Stripe sends the `payment_intent.succeeded` event when a payment succeeds, and the `payment_intent.payment_failed` event when a payment fails.\n\nThe webhook payload includes the PaymentIntent object. The following example shows how to handle both events:\n\n`require 'sinatra' require 'stripe'  post '/webhook' do     payload = request.body.read     sig_header = request.env['HTTP_STRIPE_SIGNATURE']     event = nil      begin         event = Stripe::Webhook.construct_event(             payload, sig_header, endpoint_secret         )     rescue JSON::ParserError => e         # Invalid payload         status 400         return     rescue Stripe::SignatureVerificationError => e         # Invalid signature         status 400         return     end      case event['type']     when 'payment_intent.succeeded'         intent = event['data']['object']         puts \"Succeeded:\", intent['id']         # Fulfill the customer's purchase     when 'payment_intent.payment_failed'         intent = event['data']['object']         error_message = intent['last_payment_error'] && intent['last_payment_error']['message']         puts \"Failed:\", intent['id'], error_message         # Notify the customer that payment failed     end      status 200 end`\n\nWhen payment is unsuccessful, you can find more details by inspecting the PaymentIntent’s `last_payment_error` property. You can notify the customer that their payment didn’t complete and encourage them to try again with a different payment method. Reuse the same PaymentIntent to continue tracking the customer’s purchase.\n\n### Handling specific webhook events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following list describes how to handle webhook events:\n\n| Event | Description | Next steps |\n| --- | --- | --- |\n| `processing` | The customer’s payment was submitted to Stripe successfully. Only applicable to payment methods with [delayed success confirmation](https://docs.stripe.com/payments/payment-methods). | Wait for the initiated payment to succeed or fail. |\n| `succeeded` | The customer’s payment succeeded | Fulfill the purchased goods or services |\n| `amount_capturable_updated` | The customer’s payment is authorized and ready for capture | Capture the funds that are available for payment |\n| `payment_failed` | The customer’s payment was declined by a card network or otherwise expired | Reach out to your customer through email or push notification and prompt them to provide another payment method |\n\nTo test webhooks locally, you can use [Stripe CLI](https://docs.stripe.com/stripe-cli). After you install it, you can forward events to your server:\n\n`stripe listen --forward-to localhost:4242/webhook Ready! Your webhook signing secret is '{{WEBHOOK_SIGNING_SECRET}}' (^C to quit)`\n\nLearn more about [setting up webhooks](https://docs.stripe.com/webhooks).\n\n## Identifying charges on a PaymentIntent ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you attempt to collect payment from a customer, the PaymentIntent creates a [Charge](https://docs.stripe.com/api/charges). To get the ID of the most recent charge, inspect the PaymentIntent’s [latest\\_charge](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-latest_charge) property:\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`intent = Stripe::PaymentIntent.retrieve('{{PAYMENT_INTENT_ID}}') latest_charge = intent.latest_charge`\n\nTo view all of the charges associated with a PaymentIntent, including any unsuccessful charges, [list all charges](https://docs.stripe.com/api/charges/list#list_charges-payment_intent) and specify the `payment_intent​` parameter.\n\n`curl -G https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_intent=  {{PAYMENT_INTENT_ID}}    `\n\n## Handling next actions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome payment methods require additional steps, such as authentication, to complete the payment process. Stripe.js handles these automatically when confirming the PaymentIntent, but if you have an advanced integration, you might want to handle these manually.\n\nThe PaymentIntent’s [next\\_action](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action) property exposes the next step that your integration must handle to complete the payment. The type of possible next actions can differ between various payment methods. You can find a full list of possible next actions in the [API documentation](https://docs.stripe.com/api#payment_intent_object-next_action-type).\n\nYou can refer to the [payment methods documentation](https://docs.stripe.com/payments/payment-methods/overview) for more details about how to handle their required next actions.",
    "title": "Payment status updates | Stripe Documentation",
    "description": "Monitor and verify payment status, so that you can respond to successful and failed payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/accept-a-payment?ui=elements",
    "markdown": "# Accept a payment | Stripe DocumentationThe Stripe Docs logo\n\n## Securely accept payments online.\n\nBuild a payment form or use a prebuilt checkout page to start accepting online payments.\n\nBuild a custom payments integration by embedding UI components on your site, using [Stripe Elements](https://docs.stripe.com/payments/elements). See how this integration [compares to Stripe’s other integration types](https://docs.stripe.com/payments/accept-a-payment/web/compare-integrations).\n\nThe client-side and server-side code builds a checkout form that accepts various payment methods.\n\nThis demo only displays Google Pay or Apple Pay if you have an active card with either wallet. To see how Link works, type in any email address into the email input.\n\n### Integration effort\n\n### Integration type\n\nCombine UI components into a custom payment flow\n\n### UI customization\n\n#### Interested in using Stripe Tax, discounts, shipping, or currency conversion?\n\nWe’re developing a Payment Element integration that manages tax, discounts, shipping, and currency conversion. Read the [Build a checkout page](https://docs.stripe.com/checkout/custom-checkout) guide to learn more.\n\n[](#set-up-stripe)\n\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign in](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-intent)\n\n#### Note\n\nThe [PaymentIntent](https://docs.stripe.com/api/payment_intents) object represents your intent to collect payment from a customer and tracks charge attempts and state changes throughout the payment process.\n\n### Create the PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreate a PaymentIntent on your server with an [amount](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-amount) and [currency](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-currency). In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default. You can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow.\n\nStripe uses your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) to display the payment methods you have enabled. To see how your payment methods appear to customers, enter a transaction ID or set an order amount and currency in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods/review). To override payment methods, manually list any that you want to enable using the [payment\\_method\\_types](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-payment_method_types) attribute.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d \"automatic_payment_methods[enabled]\"=true`\n\nIn the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.\n\n#### Note\n\nAlways decide how much to charge on the server side, a trusted environment, as opposed to the client. This prevents malicious customers from being able to choose their own prices.\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe PaymentIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the PaymentIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\n[](#web-collect-payment-details)\n\nCollect payment details on the client with the [Payment Element](https://docs.stripe.com/payments/payment-element). The Payment Element is a prebuilt UI component that simplifies collecting payment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information to Stripe over an HTTPS connection. Avoid placing the Payment Element within another iframe because some payment methods require redirecting to another page for payment confirmation.\n\nIf you do choose to use an iframe and want to accept Apple Pay or Google Pay, the iframe must have the [allow](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-allowpaymentrequest) attribute set to equal `\"payment *\"`.\n\nThe checkout page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS, but remember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your payment page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your payment page. Create an empty DOM node (container) with a unique ID in your payment form:\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Submit</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the previous form loads, create an instance of the Payment Element and mount it to the container DOM node. Pass the [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) from the previous step into `options` when you create the [Elements](https://docs.stripe.com/js/elements_object/create) instance:\n\nHandle the client secret carefully because it can complete the charge. Don’t log it, embed it in URLs, or expose it to anyone but the customer.\n\n`const options = {   clientSecret: '{{CLIENT_SECRET}}',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements to use in checkout form, passing the client secret obtained in a previous step const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to pick a payment method. For each payment method, the form automatically asks the customer to fill in all necessary payment details.\n\n### Customize appearance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-appearance) into `options` when creating the `Elements` provider.\n\n### Collect addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element only collects the necessary billing address details. To collect a customer’s full billing address (to calculate the tax for digital goods and services, for example) or shipping address, use the [Address Element](https://docs.stripe.com/elements/address-element).\n\n### Request Apple Pay merchant token![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’ve configured your integration to [accept Apple Pay payments](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements#apple-pay-and-google-pay), we recommend configuring the Apple Pay interface to return a merchant token to enable merchant initiated transactions (MIT). [Request the relevant merchant token type](https://docs.stripe.com/apple-pay/merchant-tokens?pay-element=web-pe) in the Payment Element.\n\n[](#web-submit-payment)\n\nUse [stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment) to complete the payment using details from the Payment Element. Provide a [return\\_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url) to this function to indicate where Stripe should redirect the user after they complete the payment. Your user may be first redirected to an intermediate site, like a bank authorization page, before being redirected to the `return_url`. Card payments immediately redirect to the `return_url` when a payment is successful.\n\nIf you don’t want to redirect for card payments after payment completion, you can set [redirect](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect) to `if_required`. This only redirects customers that check out with redirect-based payment methods.\n\n``const form = document.getElementById('payment-form');  form.addEventListener('submit', async (event) => {   event.preventDefault();    const {error} = await stripe.confirmPayment({     //`Elements` instance that was used to create the Payment Element     elements,     confirmParams: {       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',     },   });    if (error) {     // This point will only be reached if there is an immediate error when     // confirming the payment. Show error to your customer (for example, payment     // details incomplete)     const messageContainer = document.querySelector('#error-message');     messageContainer.textContent = error.message;   } else {     // Your customer will be redirected to your `return_url`. For some payment     // methods like iDEAL, your customer will be redirected to an intermediate     // site first to authorize the payment, then redirected to the `return_url`.   } });``\n\nMake sure the `return_url` corresponds to a page on your website that provides the status of the payment. When Stripe redirects the customer to the `return_url`, we provide the following URL query parameters:\n\n| Parameter | Description |\n| --- | --- |\n| `payment_intent` | The unique identifier for the `PaymentIntent`. |\n| `payment_intent_client_secret` | The [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent` object. |\n\n#### Caution\n\nIf you have tooling that tracks the customer’s browser session, you might need to add the `stripe.com` domain to the referrer exclude list. Redirects cause some tools to create new sessions, which prevents you from tracking the complete session.\n\nUse one of the query parameters to retrieve the PaymentIntent. Inspect the [status of the PaymentIntent](https://docs.stripe.com/payments/paymentintents/lifecycle) to decide what to show your customers. You can also append your own query parameters when providing the `return_url`, which persist through the redirect process.\n\n`// Initialize Stripe.js using your publishable key const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``);  // Retrieve the \"payment_intent_client_secret\" query parameter appended to // your return_url by Stripe.js const clientSecret = new URLSearchParams(window.location.search).get(   'payment_intent_client_secret' );  // Retrieve the PaymentIntent stripe.retrievePaymentIntent(clientSecret).then(({paymentIntent}) => {   const message = document.querySelector('#message')    // Inspect the PaymentIntent `status` to indicate the status of the payment   // to your customer.   //   // Some payment methods will [immediately succeed or fail][0] upon   // confirmation, while others will first enter a `processing` state.   //   // [0]: [https://stripe.com/docs/payments/payment-methods#payment-notification](https://stripe.com/docs/payments/payment-methods#payment-notification)   switch (paymentIntent.status) {     case 'succeeded':       message.innerText = 'Success! Payment received.';       break;      case 'processing':       message.innerText = \"Payment processing. We'll update you when payment is received.\";       break;      case 'requires_payment_method':       message.innerText = 'Payment failed. Please try another payment method.';       // Redirect your user back to your payment page to attempt collecting       // payment again       break;      default:       message.innerText = 'Something went wrong.';       break;   } });``\n\n[](#web-post-payment)\n\nStripe sends a [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) event when the payment completes. Use the [Dashboard webhook tool](https://dashboard.stripe.com/webhooks) or follow the [webhook guide](https://docs.stripe.com/webhooks/quickstart) to receive these events and run actions, such as sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes, and malicious clients could manipulate the response. Setting up your integration to listen for asynchronous events is what enables you to accept [different types of payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\nIn addition to handling the `payment_intent.succeeded` event, we recommend handling these other events when collecting payments with the Payment Element:\n\n| Event | Description | Action |\n| --- | --- | --- |\n| [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.succeeded) | Sent when a customer successfully completes a payment. | Send the customer an order confirmation and fulfill their order. |\n| [payment\\_intent.processing](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.processing) | Sent when a customer successfully initiates a payment, but the payment has yet to complete. This event is most commonly sent when the customer initiates a bank debit. It’s followed by either a `payment_intent.succeeded` or `payment_intent.payment_failed` event in the future. | Send the customer an order confirmation that indicates their payment is pending. For digital goods, you might want to fulfill the order before waiting for payment to complete. |\n| [payment\\_intent.payment\\_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed) | Sent when a customer attempts a payment, but the payment fails. | If a payment transitions from `processing` to `payment_failed`, offer the customer another attempt to pay. |\n\n[](#web-test-the-integration)\n\nTo test your custom payments integration:\n\n1.  Create a Payment Intent and retrieve the client secret.\n2.  Fill out the payment details with a method from the following table.\n    *   Enter any future date for card expiry.\n    *   Enter any 3-digit number for CVC.\n    *   Enter any billing postal code.\n3.  Submit the payment to Stripe. You’re redirected to your `return_url`.\n4.  Go to the Dashboard and look for the payment on the [Payments page](https://dashboard.stripe.com/test/payments?status%5B0%5D=successful). If your payment succeeded, you’ll see it in that list.\n5.  Click your payment to see more details, like billing information and the list of purchased items. You can use this information to fulfill the order.\n\nLearn more about [testing your integration](https://docs.stripe.com/testing).\n\n| Card number | Scenario | How to test |\n| --- | --- | --- |\n|     | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n\nSee [Testing](https://docs.stripe.com/testing) for additional information to test your integration.\n\n[](#disclose-cookies)\n\nStripe collects information on customer interactions with Elements to provide services to you, prevent fraud, and improve its services. This includes using cookies and IP addresses to identify which Elements a customer saw during a single checkout session. You’re responsible for disclosing and obtaining all rights and consents necessary for Stripe to use data in these ways. For more information, visit our [privacy center](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Stripe Elements](https://docs.stripe.com/payments/elements)\n*   [Set up future payments](https://docs.stripe.com/payments/save-and-reuse)\n*   [Save payment details during payment](https://docs.stripe.com/payments/save-during-payment)\n*   [Calculate sales tax, GST and VAT in your payment flow](https://docs.stripe.com/tax/custom)",
    "title": "Accept a payment | Stripe Documentation",
    "description": "Securely accept payments online.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_methods",
    "markdown": "# Payment Methods | Stripe API Reference\n\n## [The PaymentMethod object](https://docs.stripe.com/api/payment_methods/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n    The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `acss_debit`<br><br>[Pre-authorized debit payments](https://docs.stripe.com/payments/acss-debit) are used to debit Canadian bank accounts through the Automated Clearing Settlement System (ACSS). |\n    | `affirm`<br><br>[Affirm](https://docs.stripe.com/payments/affirm) is a buy now, pay later payment method in the US. |\n    | `afterpay_clearpay`<br><br>[Afterpay / Clearpay](https://docs.stripe.com/payments/afterpay-clearpay) is a buy now, pay later payment method used in Australia, Canada, France, New Zealand, Spain, the UK, and the US. |\n    | `alipay`<br><br>[Alipay](https://docs.stripe.com/payments/alipay) is a digital wallet payment method used in China. |\n    | `amazon_pay`<br><br>[Amazon Pay](https://docs.stripe.com/payments/amazon-pay) is a Wallet payment method that lets hundreds of millions of Amazon customers pay their way, every day. |\n    | `au_becs_debit`<br><br>[BECS Direct Debit](https://docs.stripe.com/payments/au-becs-debit) is used to debit Australian bank accounts through the Bulk Electronic Clearing System (BECS). |\n    | `bacs_debit`<br><br>[Bacs Direct Debit](https://docs.stripe.com/payments/payment-methods/bacs-debit) is used to debit UK bank accounts. |\n    | `bancontact`<br><br>[Bancontact](https://docs.stripe.com/payments/bancontact) is a bank redirect payment method used in Belgium. |\n    | `blik`<br><br>[BLIK](https://docs.stripe.com/payments/blik) is a single-use payment method common in Poland. |\n    | `boleto`<br><br>[Boleto](https://docs.stripe.com/payments/boleto) is a voucher-based payment method used in Brazil. |\n    | Show 68 more |\n    \n\n### More attributes\n\n*   #### \n    \n    acss\\_debitnullable object\n    \n\n*   #### \n    \n    afterpay\\_clearpaynullable object\n    \n\n*   #### \n    \n    allow\\_redisplaynullable enum\n    \n*   #### \n    \n    amazon\\_paynullable object\n    \n*   #### \n    \n    au\\_becs\\_debitnullable object\n    \n*   #### \n    \n    bacs\\_debitnullable object\n    \n*   #### \n    \n    bancontactnullable object\n    \n\n*   #### \n    \n    card\\_presentnullable object\n    \n\n*   #### \n    \n    customer\\_balancenullable object\n    \n\n*   #### \n    \n    interac\\_presentnullable objectPreview feature\n    \n\n*   #### \n    \n    multibanconullable object\n    \n\n*   #### \n    \n    radar\\_optionsnullable object\n    \n*   #### \n    \n    revolut\\_paynullable object\n    \n*   #### \n    \n    sepa\\_debitnullable object\n    \n\n*   #### \n    \n    us\\_bank\\_accountnullable object\n    \n*   #### \n    \n    wechat\\_paynullable object\n    \n\n```\n{  \"id\": \"pm_1MqLiJLkdIwHu7ixUEgbFdYF\",  \"object\": \"payment_method\",  \"billing_details\": {    \"address\": {      \"city\": null,      \"country\": null,      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    },    \"email\": null,    \"name\": null,    \"phone\": null  },  \"card\": {    \"brand\": \"visa\",    \"checks\": {      \"address_line1_check\": null,      \"address_postal_code_check\": null,      \"cvc_check\": \"unchecked\"    },    \"country\": \"US\",    \"exp_month\": 8,    \"exp_year\": 2026,    \"fingerprint\": \"mToisGZ01V71BCos\",    \"funding\": \"credit\",    \"generated_from\": null,    \"last4\": \"4242\",    \"networks\": {      \"available\": [        \"visa\"      ],      \"preferred\": null    },    \"three_d_secure_usage\": {      \"supported\": true    },    \"wallet\": null  },  \"created\": 1679945299,  \"customer\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"card\"}\n```\n\n## [Create a PaymentMethod](https://docs.stripe.com/api/payment_methods/create)\n\nCreates a PaymentMethod object. Read the [Stripe.js reference](https://docs.stripe.com/stripe-js/reference#stripe-create-payment-method) to learn how to create PaymentMethods via Stripe.js.\n\nInstead of creating a PaymentMethod directly, we recommend using the [PaymentIntents](https://docs.stripe.com/payments/accept-a-payment) API to accept a payment immediately or the [SetupIntent](https://docs.stripe.com/payments/save-and-reuse) API to collect payment method details ahead of a future payment.\n\n### Parameters\n\n*   The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `acss_debit`<br><br>[Pre-authorized debit payments](https://docs.stripe.com/payments/acss-debit) are used to debit Canadian bank accounts through the Automated Clearing Settlement System (ACSS). |\n    | `affirm`<br><br>[Affirm](https://docs.stripe.com/payments/affirm) is a buy now, pay later payment method in the US. |\n    | `afterpay_clearpay`<br><br>[Afterpay / Clearpay](https://docs.stripe.com/payments/afterpay-clearpay) is a buy now, pay later payment method used in Australia, Canada, France, New Zealand, Spain, the UK, and the US. |\n    | `alipay`<br><br>[Alipay](https://docs.stripe.com/payments/alipay) is a digital wallet payment method used in China. |\n    | `amazon_pay`<br><br>[Amazon Pay](https://docs.stripe.com/payments/amazon-pay) is a Wallet payment method that lets hundreds of millions of Amazon customers pay their way, every day. |\n    | `au_becs_debit`<br><br>[BECS Direct Debit](https://docs.stripe.com/payments/au-becs-debit) is used to debit Australian bank accounts through the Bulk Electronic Clearing System (BECS). |\n    | `bacs_debit`<br><br>[Bacs Direct Debit](https://docs.stripe.com/payments/payment-methods/bacs-debit) is used to debit UK bank accounts. |\n    | `bancontact`<br><br>[Bancontact](https://docs.stripe.com/payments/bancontact) is a bank redirect payment method used in Belgium. |\n    | `blik`<br><br>[BLIK](https://docs.stripe.com/payments/blik) is a single-use payment method common in Poland. |\n    | `boleto`<br><br>[Boleto](https://docs.stripe.com/payments/boleto) is a voucher-based payment method used in Brazil. |\n    | Show 67 more |\n    \n*   Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    interac\\_presentobjectPreview feature\n    \n\n### Returns\n\nReturns a PaymentMethod object.\n\n```\ncurl https://api.stripe.com/v1/payment_methods \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=card \\  -d \"card[number]\"=4242424242424242 \\  -d \"card[exp_month]\"=8 \\  -d \"card[exp_year]\"=2026 \\  -d \"card[cvc]\"=314\n```\n\n```\n{  \"id\": \"pm_1MqLiJLkdIwHu7ixUEgbFdYF\",  \"object\": \"payment_method\",  \"billing_details\": {    \"address\": {      \"city\": null,      \"country\": null,      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    },    \"email\": null,    \"name\": null,    \"phone\": null  },  \"card\": {    \"brand\": \"visa\",    \"checks\": {      \"address_line1_check\": null,      \"address_postal_code_check\": null,      \"cvc_check\": \"unchecked\"    },    \"country\": \"US\",    \"exp_month\": 8,    \"exp_year\": 2026,    \"fingerprint\": \"mToisGZ01V71BCos\",    \"funding\": \"credit\",    \"generated_from\": null,    \"last4\": \"4242\",    \"networks\": {      \"available\": [        \"visa\"      ],      \"preferred\": null    },    \"three_d_secure_usage\": {      \"supported\": true    },    \"wallet\": null  },  \"created\": 1679945299,  \"customer\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"card\"}\n```\n\n## [Update a PaymentMethod](https://docs.stripe.com/api/payment_methods/update)\n\nUpdates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.\n\n### Parameters\n\n*   Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns a PaymentMethod object.\n\nPOST /v1/payment\\_methods/:id\n\n```\ncurl https://api.stripe.com/v1/payment_methods/pm_1MqLiJLkdIwHu7ixUEgbFdYF \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"pm_1MqLiJLkdIwHu7ixUEgbFdYF\",  \"object\": \"payment_method\",  \"billing_details\": {    \"address\": {      \"city\": null,      \"country\": null,      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    },    \"email\": null,    \"name\": null,    \"phone\": null  },  \"card\": {    \"brand\": \"visa\",    \"checks\": {      \"address_line1_check\": null,      \"address_postal_code_check\": null,      \"cvc_check\": \"unchecked\"    },    \"country\": \"US\",    \"exp_month\": 8,    \"exp_year\": 2026,    \"fingerprint\": \"mToisGZ01V71BCos\",    \"funding\": \"credit\",    \"generated_from\": null,    \"last4\": \"4242\",    \"networks\": {      \"available\": [        \"visa\"      ],      \"preferred\": null    },    \"three_d_secure_usage\": {      \"supported\": true    },    \"wallet\": null  },  \"created\": 1679945299,  \"customer\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"type\": \"card\"}\n```\n\n## [Retrieve a Customer's PaymentMethod](https://docs.stripe.com/api/payment_methods/customer)\n\nRetrieves a PaymentMethod object for a given Customer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a PaymentMethod object.\n\nGET /v1/customers/:id/payment\\_methods/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_9s6XKzkNRiz8i3/payment_methods/pm_1NVChw2eZvKYlo2CHxiM5E2E \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pm_1NVChw2eZvKYlo2CHxiM5E2E\",  \"object\": \"payment_method\",  \"billing_details\": {    \"address\": {      \"city\": null,      \"country\": null,      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    },    \"email\": null,    \"name\": null,    \"phone\": null  },  \"card\": {    \"brand\": \"visa\",    \"checks\": {      \"address_line1_check\": null,      \"address_postal_code_check\": null,      \"cvc_check\": \"pass\"    },    \"country\": \"US\",    \"exp_month\": 12,    \"exp_year\": 2034,    \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",    \"funding\": \"credit\",    \"generated_from\": null,    \"last4\": \"4242\",    \"networks\": {      \"available\": [        \"visa\"      ],      \"preferred\": null    },    \"three_d_secure_usage\": {      \"supported\": true    },    \"wallet\": null  },  \"created\": 1689682128,  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"livemode\": false,  \"metadata\": {},  \"redaction\": null,  \"type\": \"card\"}\n```",
    "title": "Payment Methods | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_intents/create",
    "markdown": "# Create a PaymentIntent | Stripe API Reference\n\nCreates a PaymentIntent object.\n\nAfter the PaymentIntent is created, attach a payment method and [confirm](https://docs.stripe.com/api/payment_intents/confirm) to continue the payment. Learn more about [the available payment flows with the Payment Intents API](https://docs.stripe.com/payments/payment-intents).\n\nWhen you use `confirm=true` during creation, it’s equivalent to creating and confirming the PaymentIntent in the same call. You can use any parameters available in the [confirm API](https://docs.stripe.com/api/payment_intents/confirm) when you supply `confirm=true`.\n\n### Parameters\n\n*   Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).\n    \n\n*   #### \n    \n    automatic\\_payment\\_methodsobject\n    \n    When you enable this parameter, this PaymentIntent accepts payment methods that you enable in the Dashboard and that are compatible with this PaymentIntent’s other parameters.\n    \n*   Set to `true` to attempt to [confirm this PaymentIntent](https://docs.stripe.com/api/payment_intents/confirm) immediately. This parameter defaults to `false`. When creating and confirming a PaymentIntent at the same time, you can also provide the parameters available in the [Confirm API](https://docs.stripe.com/api/payment_intents/confirm).\n    \n*   ID of the Customer this PaymentIntent belongs to, if one exists.\n    \n    Payment methods attached to other Customers cannot be used with this PaymentIntent.\n    \n    If present in combination with [setup\\_future\\_usage](#payment_intent_object-setup_future_usage), this PaymentIntent’s payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    off\\_sessionboolean | stringonly when confirm=true\n    \n    Set to `true` to indicate that the customer isn’t in your checkout flow during this payment attempt and can’t authenticate. Use this parameter in scenarios where you collect card details and [charge them later](https://docs.stripe.com/payments/cards/charging-saved-cards). This parameter can only be used with [`confirm=true`](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm).\n    \n*   ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://docs.stripe.com/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.\n    \n    If you omit this parameter with `confirm=true`, `customer.default_source` attaches as this PaymentIntent’s payment instrument to improve migration for users of the Charges API. We recommend that you explicitly provide the `payment_method` moving forward.\n    \n*   Email address to send the receipt to. If you specify `receipt_email` for a payment in live mode, you send a receipt regardless of your [email settings](https://dashboard.stripe.com/account/emails).\n    \n*   Indicates that you intend to make future payments with this PaymentIntent’s payment method.\n    \n    Providing this parameter will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://docs.stripe.com/api/payment_methods/attach) to a Customer after the transaction completes.\n    \n    When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://docs.stripe.com/strong-customer-authentication).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   Shipping information for this PaymentIntent.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    For card charges, use [statement\\_descriptor\\_suffix](https://stripe.com/docs/payments/account/statement-descriptors#dynamic). Otherwise, you can use this value as the complete description of a charge on your customers’ statements. It must contain at least one letter and be 1–22 characters long.\n    \n*   #### \n    \n    statement\\_descriptor\\_suffixstring\n    \n    Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. The concatenated descriptor must contain 1-22 characters.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    confirmation\\_tokenstringonly when confirm=true\n    \n*   #### \n    \n    error\\_on\\_requires\\_actionbooleanonly when confirm=true\n    \n*   #### \n    \n    mandatestringonly when confirm=true\n    \n*   #### \n    \n    mandate\\_dataobjectonly when confirm=true\n    \n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n*   #### \n    \n    payment\\_method\\_configurationstring\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobject\n    \n*   #### \n    \n    payment\\_method\\_typesarray of strings\n    \n\n*   #### \n    \n    return\\_urlstringonly when confirm=true\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    transfer\\_groupstringConnect only\n    \n\n### Returns\n\nReturns a PaymentIntent object.\n\n```\ncurl https://api.stripe.com/v1/payment_intents \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=2000 \\  -d currency=usd \\  -d \"automatic_payment_methods[enabled]\"=true\n```\n\n```\n{  \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800504,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Update a PaymentIntent](https://docs.stripe.com/api/payment_intents/update)\n\nUpdates properties on a PaymentIntent object without confirming.\n\nDepending on which properties you update, you might need to confirm the PaymentIntent again. For example, updating the `payment_method` always requires you to confirm the PaymentIntent again. If you prefer to update and confirm at the same time, we recommend updating properties through the [confirm API](https://docs.stripe.com/api/payment_intents/confirm) instead.\n\n### Parameters\n\n*   Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).\n    \n\n*   ID of the Customer this PaymentIntent belongs to, if one exists.\n    \n    Payment methods attached to other Customers cannot be used with this PaymentIntent.\n    \n    If present in combination with [setup\\_future\\_usage](#payment_intent_object-setup_future_usage), this PaymentIntent’s payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://docs.stripe.com/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.\n    \n*   Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).\n    \n*   Indicates that you intend to make future payments with this PaymentIntent’s payment method.\n    \n    Providing this parameter will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://docs.stripe.com/api/payment_methods/attach) to a Customer after the transaction completes.\n    \n    When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://docs.stripe.com/strong-customer-authentication).\n    \n    If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   Shipping information for this PaymentIntent.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    For card charges, use [statement\\_descriptor\\_suffix](https://stripe.com/docs/payments/account/statement-descriptors#dynamic). Otherwise, you can use this value as the complete description of a charge on your customers’ statements. It must contain at least one letter and be 1–22 characters long.\n    \n*   #### \n    \n    statement\\_descriptor\\_suffixstring\n    \n    Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    capture\\_methodenumsecret key only\n    \n*   #### \n    \n    payment\\_method\\_configurationstring\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobject\n    \n*   #### \n    \n    payment\\_method\\_typesarray of strings\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    transfer\\_groupstringConnect only\n    \n\n### Returns\n\nReturns a PaymentIntent object.\n\nPOST /v1/payment\\_intents/:id\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_3MtwBwLkdIwHu7ix28a3tqPa \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800504,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Retrieve a PaymentIntent](https://docs.stripe.com/api/payment_intents/retrieve)\n\nRetrieves the details of a PaymentIntent that has previously been created.\n\nYou can retrieve a PaymentIntent client-side using a publishable key when the `client_secret` is in the query string.\n\nIf you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the [payment intent](#payment_intent_object) object reference for more details.\n\n### Parameters\n\n*   #### \n    \n    client\\_secretstringRequired if you use a publishable key.\n    \n    The client secret of the PaymentIntent. We require it if you use a publishable key to retrieve the source.\n    \n\n### Returns\n\nReturns a PaymentIntent if a valid identifier was provided.\n\nGET /v1/payment\\_intents/:id\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_3MtwBwLkdIwHu7ix28a3tqPa \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800504,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [List all PaymentIntents](https://docs.stripe.com/api/payment_intents/list)\n\nReturns a list of PaymentIntents.\n\n### Parameters\n\n*   Only return PaymentIntents for the customer that this customer ID specifies.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` PaymentIntents, starting after PaymentIntent `starting_after`. Each entry in the array is a separate PaymentIntent object. If no other PaymentIntents are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/payment_intents \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/payment_intents\",  \"has_more\": false,  \"data\": [    {      \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",      \"object\": \"payment_intent\",      \"amount\": 2000,      \"amount_capturable\": 0,      \"amount_details\": {        \"tip\": {}      },      \"amount_received\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"automatic_payment_methods\": {        \"enabled\": true      },      \"canceled_at\": null,      \"cancellation_reason\": null,      \"capture_method\": \"automatic\",      \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",      \"confirmation_method\": \"automatic\",      \"created\": 1680800504,      \"currency\": \"usd\",      \"customer\": null,      \"description\": null,      \"invoice\": null,      \"last_payment_error\": null,      \"latest_charge\": null,      \"livemode\": false,      \"metadata\": {},      \"next_action\": null,      \"on_behalf_of\": null,      \"payment_method\": null,      \"payment_method_options\": {        \"card\": {          \"installments\": null,          \"mandate_options\": null,          \"network\": null,          \"request_three_d_secure\": \"automatic\"        },        \"link\": {          \"persistent_token\": null        }      },      \"payment_method_types\": [        \"card\",        \"link\"      ],      \"processing\": null,      \"receipt_email\": null,      \"review\": null,      \"setup_future_usage\": null,      \"shipping\": null,      \"source\": null,      \"statement_descriptor\": null,      \"statement_descriptor_suffix\": null,      \"status\": \"requires_payment_method\",      \"transfer_data\": null,      \"transfer_group\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a PaymentIntent](https://docs.stripe.com/api/payment_intents/cancel)\n\nYou can cancel a PaymentIntent object when it’s in one of these statuses: `requires_payment_method`, `requires_capture`, `requires_confirmation`, `requires_action` or, [in rare cases](https://docs.stripe.com/payments/intents), `processing`.\n\nAfter it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a `status` of `requires_capture`, the remaining `amount_capturable` is automatically refunded.\n\nYou can’t cancel the PaymentIntent for a Checkout Session. [Expire the Checkout Session](https://docs.stripe.com/api/checkout/sessions/expire) instead.\n\n### Parameters\n\n*   #### \n    \n    cancellation\\_reasonstring\n    \n    Reason for canceling this PaymentIntent. Possible values are: `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`\n    \n\n### Returns\n\nReturns a PaymentIntent object if the cancellation succeeds. Returns an error if the PaymentIntent is already canceled or isn’t in a cancelable state.\n\nPOST /v1/payment\\_intents/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/payment_intents/pi_3MtwBwLkdIwHu7ix28a3tqPa/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": 1680801569,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800504,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"canceled\",  \"transfer_data\": null,  \"transfer_group\": null}\n```",
    "title": "Create a PaymentIntent | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/security/guide",
    "markdown": "# Integration security guide | Stripe DocumentationThe Stripe Docs logo\n\n## Ensure PCI compliance and secure customer-server communications.\n\nAnyone involved with the processing, transmission, or storage of card data must comply with the [Payment Card Industry Data Security Standard](https://www.pcisecuritystandards.org/pci_security/) (PCI DSS). An independent PCI Qualified Security Assessor (QSA) audited and certified Stripe as a [PCI Level 1 Service Provider](https://www.visa.com/splisting/searchGrsp.do?companyNameCriteria=stripe,%20inc). This is the most stringent level of certification available in the payments industry.\n\n[PCI compliance](https://docs.stripe.com/security/guide#validating-pci-compliance \"PCI compliance\") is a shared responsibility and applies to both Stripe and your business. When accepting payments, you must do so in a PCI compliant manner. The simplest way for you to be PCI compliant is to never see (or have access to) card data at all. Stripe makes this easy for you as we can do the heavy lifting to protect your customers’ card information. You can simplify your PCI compliance as long as you:\n\n*   Use one of our recommended [payments integrations](https://docs.stripe.com/payments) to collect payment information, which is securely transmitted directly to Stripe without it passing through your servers.\n*   Serve your payment pages securely using [Transport Layer Security](#tls) ([TLS](https://docs.stripe.com/security/guide#tls \"TLS\")) so that they make use of HTTPS\n*   Review and [validate](#validating-pci-compliance) your account’s PCI compliance annually.\n\n## Validate your PCI compliance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAll Stripe users must validate their PCI compliance annually. Most users can do this with a [Self-Assessment Questionnaire](https://www.pcisecuritystandards.org/document_library?category=saqs#results) (SAQ) provided by the [PCI Security Standards Council](https://www.pcisecuritystandards.org/). The type of SAQ depends on how you integrated Stripe and which of the methods below you use to collect card data. Certain methods might require you to upload additional PCI documentation to us. If this is necessary, you can upload them in the Dashboard. If you’re using more than one of the methods below, you don’t need to upload multiple SAQs.\n\nIf you’re not sure how to prove that your business is PCI compliant (for example, a third-party built your integration), we suggest that you talk to a PCI QSA to determine how to best validate your compliance according to the [current guidance](https://pcissc.secure.force.com/faq/articles/Frequently_Asked_Question/If-a-merchant-develops-an-application-that-runs-on-a-consumer-s-device-e-g-smartphone-tablet-or-laptop-that-is-used-to-accept-payment-card-data-what-are-the-merchant-s-obligations-regarding-PCI-DSS-and-PA-DSS-for-that-application) from the PCI Council.\n\n### PCI compliance requirement by integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Integration | Requirement | Recommendation |\n| --- | --- | --- |\n| Direct API | SAQ D | When you pass card information directly to Stripe’s API, your integration is directly handling that data and you’re required to annually prove your PCI compliance using the [SAQ D](https://www.pcisecuritystandards.org/documents/PCI-DSS-v3_2_1-SAQ-D_Merchant.pdf)–the most demanding of the SAQs. To reduce this burden:<br><br>*   Integrate with [Checkout](https://docs.stripe.com/payments/checkout), [Elements](https://docs.stripe.com/payments/elements), or our [mobile SDKs](https://docs.stripe.com/payments/accept-a-payment).<br>*   Migrate to [client-side tokenization](https://docs.stripe.com/payments/elements) of card information.<br><br>In addition, our fraud prevention tool, [Radar](https://docs.stripe.com/radar), which includes [risk evaluation](https://docs.stripe.com/radar/risk-evaluation) and [rules](https://docs.stripe.com/radar/rules), is only available when using any of our methods of client-side tokenization. |\n| Checkout or Elements | SAQ A | [Checkout](https://docs.stripe.com/payments/checkout) and [Stripe.js and Elements](https://docs.stripe.com/payments/elements) host all card data collection inputs within an iframe served from Stripe’s domain (not yours) so your customers’ card information never touches your servers. Because of this, you have the lightest PCI compliance burden. |\n| Connect | SAQ A | If you exclusively collect card data through a Connect platform (for example, Squarespace), we can determine whether the platform provides the necessary PCI documentation. |\n| Dashboard | SAQ C-VT | Manual card payments through the Dashboard are possible for exceptional circumstances only, not routine payment processing. Provide a suitable payment form or mobile application for your customers to enter their card information.<br><br>We can’t verify that manually entered card information is secure outside of Stripe, so you must protect card data in accordance with PCI compliance requirements and complete the [SAQ C-VT](https://www.pcisecuritystandards.org/documents/PCI-DSS-v3_2_1-SAQ-C_VT.pdf) annually to prove your business is PCI compliant. |\n| Mobile SDK | SAQ A | Stripe’s [mobile SDK](https://docs.stripe.com/payments/accept-a-payment) development and change control complies with PCI DSS (requirements 6.3-6.5) and deploys through our PCI validated systems. When you only use UI components from our official SDKs for iOS or Android, or build a payment form with [Elements](https://docs.stripe.com/payments/elements) in a WebView, card numbers pass directly from your customers to Stripe, so you have the lightest PCI compliance burden.<br><br>If you do otherwise, such as writing your own code to handle card information, you might be responsible for additional PCI DSS requirements (6.3-6.5) and would be ineligible for an SAQ A. Talk to a PCI QSA to determine how to best validate your compliance according to the [current guidance](https://pcissc.secure.force.com/faq/articles/Frequently_Asked_Question/If-a-merchant-develops-an-application-that-runs-on-a-consumer-s-device-e-g-smartphone-tablet-or-laptop-that-is-used-to-accept-payment-card-data-what-are-the-merchant-s-obligations-regarding-PCI-DSS-and-PA-DSS-for-that-application) from the PCI Council.<br><br>If your application requires your customers to enter their information on their own devices, then you qualify for SAQ A. If your application accepts card information for multiple customers on your device (for example, a point of sale app), consult a [PCI QSA](https://www.pcisecuritystandards.org/assessors_and_solutions/qualified_security_assessors) to learn how to best validate your PCI compliance. |\n| Stripe.js v2 | SAQ A-EP | Using Stripe.js v2 to pass card data entered in a form hosted on your own site requires completing the [SAQ A-EP](https://www.pcisecuritystandards.org/documents/PCI-DSS-v3_2_1-SAQ-A_EP.pdf) annually to prove your business is PCI compliant.<br><br>Alternatively, both [Checkout](https://docs.stripe.com/payments/checkout) and [Elements](https://docs.stripe.com/payments/elements) allow you the flexibility and customizability of a self-hosted form, while also meeting PCI eligibility for the SAQ A. |\n| Terminal | SAQ C | If you exclusively collect card data through Stripe Terminal, you can validate using SAQ C.<br><br>If you integrate with Stripe using additional methods listed in this table, you must illustrate compliance for them separately as described. |\n\n#### Warning\n\nIf you’re processing more than 6 million transactions per year with Visa or MasterCard, or more than 2.5 million transactions with American Express, or are otherwise deemed to be a Level 1 provider by any of the card networks, you’re not eligible to use a SAQ to prove PCI compliance. Payment brands require you to complete a [Report on Compliance](https://www.pcisecuritystandards.org/documents/PCI-DSS-v3_2_1-ROC-Reporting-Template.pdf) (RoC) to validate your PCI compliance annually.\n\n## Use TLS and HTTPS ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTLS refers to the process of securely transmitting data between the client—the app or browser that your customer is using—and your server. The Secure Sockets Layer (SSL) protocol originally performed this, but is outdated and no longer secure. TLS replaced SSL, but the term _SSL_ continues to be used colloquially when referring to TLS and its function to protect transmitted data.\n\nPayment pages must use a recent version (TLS 1.2 or above) because it significantly reduces the risk of man-in-the-middle attacks for both you and your customers. TLS attempts to accomplish the following:\n\n*   Encrypt and verify the integrity of traffic between the client and your server.\n*   Verify that the client is communicating with the correct server. In practice, this usually means verifying that the owner of the domain and the owner of the server are the same entity. This helps prevent man-in-the-middle attacks. Without it, there’s no guarantee that you’re encrypting traffic to the right recipient.\n\nAdditionally, your customers are more comfortable sharing sensitive information on pages visibly served over HTTPS, which can help increase your customer conversion rate.\n\nYou can [test](https://docs.stripe.com/testing) your integration without using HTTPS if you need to, and enable it when you’re ready to accept live charges. However, all interactions between your server and Stripe must use HTTPS (that is, when using our libraries).\n\n## Set up TLS ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsing TLS requires a _digital certificate_—a file issued by a certification authority (CA). Installing this certificate assures the client that it’s actually communicating with the server it expects to be talking to, and not an impostor. Obtain a digital certificate from a reputable certificate provider, such as:\n\n*   [Let’s Encrypt](https://letsencrypt.org/)\n*   [DigiCert](https://www.digicert.com/tls-ssl/basic-tls-ssl-certificates)\n*   [NameCheap](https://www.namecheap.com/security/ssl-certificates.aspx)\n\nCertificates vary in cost, depending on the type of certificate and provider. “Let’s Encrypt” is a certificate authority that provides certificates for free.\n\nTo set up TLS:\n\n1.  Purchase a certificate from a suitable provider.\n2.  Configure your server to use the certificate. This step can be complex, so follow the installation guide of the provider you use.\n\nAs TLS is a complex suite of cryptographic tools, it’s easy to miss a few details. We recommend using the [SSL Server Test](https://www.ssllabs.com/ssltest/) by Qualys SSL Labs to make sure you set up everything in a secure way.\n\n## Security considerations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIncluding JavaScript from other sites makes your security dependent on theirs and poses a security risk. If they’re ever compromised, an attacker could execute arbitrary code on your page. In practice, many sites use JavaScript for services like Google Analytics, even on secure pages. Nonetheless, we recommend trying to minimize it.\n\nIf you’re using [webhooks](https://docs.stripe.com/webhooks \"webhook\"), use TLS for the endpoint to avoid traffic being intercepted and having notifications altered (sensitive information is never included in a webhook event).\n\nWhile complying with the Data Security Standards is important, it shouldn’t be where you stop thinking about security. Some good resources to learn about web security are:\n\n*   [OWASP](https://owasp.org/)\n*   [SANS](https://www.sans.org/reading-room/)\n*   [NIST](http://csrc.nist.gov/)\n\n### Out-of-scope card data that you can safely store ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe returns non-sensitive card information in the response to a charge request. This includes the card type, the last four digits of the card, and the expiration date. This information isn’t subject to PCI compliance, so you’re able to store any of these properties in your database. Additionally, you can store anything returned by our [API](https://docs.stripe.com/api).\n\n### Content Security Policy ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’ve deployed a [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP \"Content Security Policy\"), the full set of directives that Checkout, Connect embedded components, and Stripe.js require are:\n\n*   `connect-src`, `https://checkout.stripe.com`\n*   `frame-src`, `https://checkout.stripe.com`\n*   `script-src`, `https://checkout.stripe.com`\n*   `img-src`, `https://*.stripe.com`",
    "title": "Integration security guide | Stripe Documentation",
    "description": "Ensure PCI compliance and secure customer-server communications.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/accept-a-payment?platform=ios",
    "markdown": "# Accept a payment | Stripe DocumentationThe Stripe Docs logo\n\n## Securely accept payments online.\n\nBuild a payment form or use a prebuilt checkout page to start accepting online payments.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/ios-overview.83089c5582bf1fdc7b61fac7e8602497.png)\n\nIntegrate Stripe’s prebuilt payment UI into the checkout of your iOS app with the [`PaymentSheet`](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet.html) class. See our sample integration [on GitHub](https://github.com/stripe/stripe-ios/tree/master/Example/PaymentSheet%20Example).\n\n#### Interested in displaying payment methods directly in your checkout screen?\n\nWe’re exploring an integration that lets you embed a prebuilt view directly in your checkout to display payment methods. [Sign up for early access.](#)\n\n[](#ios-setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis integration requires endpoints on your server that talk to the Stripe API. Use our official libraries for access to the Stripe API from your server:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Stripe iOS SDK](https://github.com/stripe/stripe-ios) is open source, [fully documented](https://stripe.dev/stripe-ios/index.html), and compatible with apps supporting iOS 13 or above.\n\nTo install the SDK, follow these steps:\n\n1.  In Xcode, select **File** > **Add Packages…** and enter `https://github.com/stripe/stripe-ios-spm` as the repository URL.\n2.  Select the latest version number from our [releases page](https://github.com/stripe/stripe-ios/releases).\n3.  Add the **StripePaymentSheet** product to the [target of your app](https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app).\n\n[](#ios-enable-payment-methods)\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[](#add-server-endpoint)\n\n#### Note\n\nThis integration uses three Stripe API objects:\n\n1.  [PaymentIntent](https://docs.stripe.com/api/payment_intents): Stripe uses this to represent your intent to collect payment from a customer, tracking your charge attempts and payment state changes throughout the process.\n    \n2.  (Optional) [Customer](https://docs.stripe.com/api/customers): To set up a payment method for future payments, you must attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\"). Create a Customer object when your customer creates an account with your business. If your customer is making a payment as a guest, you can create a Customer object before payment and associate it with your own internal representation of the customer’s account later.\n    \n3.  (Optional) Customer Ephemeral Key: Information on the Customer object is sensitive, and can’t be retrieved directly from an app. An Ephemeral Key grants the SDK temporary access to the Customer.\n    \n\n#### Note\n\nIf you never save cards to a Customer and don’t allow returning Customers to reuse saved cards, you can omit the Customer and Customer Ephemeral Key objects from your integration.\n\nFor security reasons, your app can’t create these objects. Instead, add an endpoint on your server that:\n\n1.  Retrieves the Customer, or creates a new one.\n2.  Creates an Ephemeral Key for the Customer.\n3.  Creates a PaymentIntent with the [amount](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-amount), [currency](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-currency), and [customer](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-customer). You can also optionally include the `automatic_payment_methods` parameter. Stripe enables its functionality by default in the latest version of the API.\n4.  Returns the Payment Intent’s [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"), the Ephemeral Key’s `secret`, the Customer’s [id](https://docs.stripe.com/api/customers/object#customer_object-id), and your [publishable key](https://dashboard.stripe.com/apikeys) to your app.\n\nThe payment methods shown to customers during the checkout process are also included on the PaymentIntent. You can let Stripe pull payment methods from your Dashboard settings or you can list them manually. Regardless of the option you choose, know that the currency passed in the PaymentIntent filters the payment methods shown to the customer. For example, if you pass `eur` on the PaymentIntent and have OXXO enabled in the Dashboard, OXXO won’t be shown to the customer because OXXO doesn’t support `eur` payments.\n\nUnless your integration requires a code-based option for offering payment methods, Stripe recommends the automated option. This is because Stripe evaluates the currency, payment method restrictions, and other parameters to determine the list of supported payment methods. Payment methods that increase conversion and that are most relevant to the currency and customer’s location are prioritized.\n\n#### Note\n\nTest a running implementation of this endpoint on [Glitch](https://glitch.com/edit/#!/remix/stripe-mobile-payment-sheet-automatic).\n\nYou can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow. The PaymentIntent is created using the payment methods you configured in the Dashboard. If you don’t want to use the Dashboard or if you want to specify payment methods manually, you can list them using the `payment_method_types` attribute.\n\n`# Create a Customer (use an existing Customer ID if this is a returning customer) curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n``: \\   -X \"POST\"  # Create an Ephemeral Key for the Customer curl https://api.stripe.com/v1/ephemeral_keys \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -H \"Stripe-Version: 2024-06-20\" \\   -X \"POST\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\  # Create a PaymentIntent curl https://api.stripe.com/v1/payment_intents \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -X \"POST\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"amount\"=1099 \\   -d \"currency\"=\"eur\" \\   # In the latest version of the API, specifying the `automatic_payment_methods` parameter   # is optional because Stripe enables its functionality by default.   -d \"automatic_payment_methods[enabled]\"=true \\``\n\n[](#ios-collect-payment-details)\n\nTo display the mobile Payment Element on your checkout screen, make sure you:\n\n*   Display the products the customer is purchasing along with the total amount\n*   Use the [Address Element](https://docs.stripe.com/elements/address-element?platform=ios) to collect any required shipping information from the customer\n*   Add a checkout button to display Stripe’s UI\n\nIn your app’s checkout screen, fetch the PaymentIntent client secret, Ephemeral Key secret, Customer ID, and publishable key from the endpoint you created in the previous step. Set your publishable key using `StripeAPI.shared` and initialize [PaymentSheet](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet.html).\n\n``import UIKit import StripePaymentSheet  class CheckoutViewController: UIViewController {   @IBOutlet weak var checkoutButton: UIButton!   var paymentSheet: PaymentSheet?   let backendCheckoutUrl = URL(string: \"Your backend endpoint/payment-sheet\")! // Your backend endpoint    override func viewDidLoad() {     super.viewDidLoad()      checkoutButton.addTarget(self, action: #selector(didTapCheckoutButton), for: .touchUpInside)     checkoutButton.isEnabled = false      // MARK: Fetch the PaymentIntent client secret, Ephemeral Key secret, Customer ID, and publishable key     var request = URLRequest(url: backendCheckoutUrl)     request.httpMethod = \"POST\"     let task = URLSession.shared.dataTask(with: request, completionHandler: { [weak self] (data, response, error) in       guard let data = data,             let json = try? JSONSerialization.jsonObject(with: data, options: []) as? [String : Any],             let customerId = json[\"customer\"] as? String,             let customerEphemeralKeySecret = json[\"ephemeralKey\"] as? String,             let paymentIntentClientSecret = json[\"paymentIntent\"] as? String,             let publishableKey = json[\"publishableKey\"] as? String,             let self = self else {         // Handle error         return       }        STPAPIClient.shared.publishableKey = publishableKey       // MARK: Create a PaymentSheet instance       var configuration = PaymentSheet.Configuration()       configuration.merchantDisplayName = \"Example, Inc.\"       configuration.customer = .init(id: customerId, ephemeralKeySecret: customerEphemeralKeySecret)       // Set `allowsDelayedPaymentMethods` to true if your business handles       // delayed notification payment methods like US bank accounts.       configuration.allowsDelayedPaymentMethods = true       self.paymentSheet = PaymentSheet(paymentIntentClientSecret: paymentIntentClientSecret, configuration: configuration)        DispatchQueue.main.async {         self.checkoutButton.isEnabled = true       }     })     task.resume()   }  }``\n\nWhen the customer taps the **Checkout** button, call `present` to present the PaymentSheet. After the customer completes the payment, Stripe dismisses the PaymentSheet and calls the completion block with [PaymentSheetResult](https://stripe.dev/stripe-ios/stripe-paymentsheet/Enums/PaymentSheetResult.html).\n\n`@objc func didTapCheckoutButton() {   // MARK: Start the checkout process   paymentSheet?.present(from: self) { paymentResult in     // MARK: Handle the payment result     switch paymentResult {     case .completed:       print(\"Your order is confirmed\")     case .canceled:       print(\"Canceled!\")     case .failed(let error):       print(\"Payment failed: \\(error)\")     }   } }`\n\nIf `PaymentSheetResult` is `.completed`, inform the user (for example, by displaying an order confirmation screen).\n\nSetting `allowsDelayedPaymentMethods` to true allows [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment methods like US bank accounts. For these payment methods, the final payment status isn’t known when the `PaymentSheet` completes, and instead succeeds or fails later. If you support these types of payment methods, inform the customer their order is confirmed and only fulfill their order (for example, ship their product) when the payment is successful.\n\n[](#ios-set-up-return-url)\n\nThe customer may go out of your app to authenticate, for example, in Safari or their banking app. To allow them to automatically return to your app after authenticating, [configure a custom URL scheme](https://developer.apple.com/documentation/xcode/defining-a-custom-url-scheme-for-your-app) or [universal link](https://developer.apple.com/documentation/xcode/allowing-apps-and-websites-to-link-to-your-content) and set up your app delegate to forward the URL to the SDK.\n\n`// This method handles opening custom URL schemes (for example, \"your-app://stripe-redirect\") func scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>) {     guard let url = URLContexts.first?.url else {         return     }     let stripeHandled = StripeAPI.handleURLCallback(with: url)     if (!stripeHandled) {         // This was not a Stripe url – handle the URL normally as you would     } }`\n\nAdditionally, set the [`returnURL`](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet/Configuration.html#/s:6Stripe12PaymentSheetC13ConfigurationV9returnURLSSSgvp) on your [`PaymentSheet.Configuration`](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet/Configuration.html) object to the URL for your app.\n\n`var configuration = PaymentSheet.Configuration() configuration.returnURL = \"your-app://stripe-redirect\"`\n\n[](#ios-post-payment)\n\nStripe sends a [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) event when the payment completes. Use the [Dashboard webhook tool](https://dashboard.stripe.com/webhooks) or follow the [webhook guide](https://docs.stripe.com/webhooks/quickstart) to receive these events and run actions, such as sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes, and malicious clients could manipulate the response. Setting up your integration to listen for asynchronous events is what enables you to accept [different types of payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\nIn addition to handling the `payment_intent.succeeded` event, we recommend handling these other events when collecting payments with the Payment Element:\n\n| Event | Description | Action |\n| --- | --- | --- |\n| [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.succeeded) | Sent when a customer successfully completes a payment. | Send the customer an order confirmation and fulfill their order. |\n| [payment\\_intent.processing](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.processing) | Sent when a customer successfully initiates a payment, but the payment has yet to complete. This event is most commonly sent when the customer initiates a bank debit. It’s followed by either a `payment_intent.succeeded` or `payment_intent.payment_failed` event in the future. | Send the customer an order confirmation that indicates their payment is pending. For digital goods, you might want to fulfill the order before waiting for payment to complete. |\n| [payment\\_intent.payment\\_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed) | Sent when a customer attempts a payment, but the payment fails. | If a payment transitions from `processing` to `payment_failed`, offer the customer another attempt to pay. |\n\n[](#ios-test-the-integration)\n\n| Card number | Scenario | How to test |\n| --- | --- | --- |\n|     | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n\nSee [Testing](https://docs.stripe.com/testing) for additional information to test your integration.",
    "title": "Accept a payment | Stripe Documentation",
    "description": "Securely accept payments online.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/accept-a-payment?platform=android",
    "markdown": "# Accept a payment | Stripe DocumentationThe Stripe Docs logo\n\n## Securely accept payments online.\n\nBuild a payment form or use a prebuilt checkout page to start accepting online payments.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/android-overview.f74ce8f6582c90c57e8c09b395ed4f52.png)\n\nIntegrate Stripe’s prebuilt payment UI into the checkout of your Android app with the [`PaymentSheet`](https://stripe.dev/stripe-android/paymentsheet/com.stripe.android.paymentsheet/-payment-sheet/index.html) class.\n\n#### Interested in displaying payment methods directly in your checkout screen?\n\nWe’re exploring an integration that lets you embed a prebuilt view directly in your checkout to display payment methods. [Sign up for early access.](#)\n\n[\n\n## Set up Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#androidsetup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis integration requires endpoints on your server that talk to the Stripe API. Use the official libraries for access to the Stripe API from your server:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Stripe Android SDK](https://github.com/stripe/stripe-android) is open source and [fully documented](https://stripe.dev/stripe-android/).\n\nTo install the SDK, add `stripe-android` to the `dependencies` block of your [`app/build.gradle`](https://developer.android.com/studio/build/dependencies) file:\n\n`apply plugin: 'com.android.application'  android { ... }  dependencies {   // ...    // Stripe Android SDK   implementation 'com.stripe:stripe-android:20.48.0' }`\n\n[\n\n## Enable payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#android-enable-payment-methods)\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[](#add-server-endpoint)\n\n#### Note\n\nThis integration uses three Stripe API objects:\n\n1.  [PaymentIntent](https://docs.stripe.com/api/payment_intents): Stripe uses this to represent your intent to collect payment from a customer, tracking your charge attempts and payment state changes throughout the process.\n    \n2.  (Optional) [Customer](https://docs.stripe.com/api/customers): To set up a payment method for future payments, you must attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\"). Create a Customer object when your customer creates an account with your business. If your customer is making a payment as a guest, you can create a Customer object before payment and associate it with your own internal representation of the customer’s account later.\n    \n3.  (Optional) Customer Ephemeral Key: Information on the Customer object is sensitive, and can’t be retrieved directly from an app. An Ephemeral Key grants the SDK temporary access to the Customer.\n    \n\n#### Note\n\nIf you never save cards to a Customer and don’t allow returning Customers to reuse saved cards, you can omit the Customer and Customer Ephemeral Key objects from your integration.\n\nFor security reasons, your app can’t create these objects. Instead, add an endpoint on your server that:\n\n1.  Retrieves the Customer, or creates a new one.\n2.  Creates an Ephemeral Key for the Customer.\n3.  Creates a PaymentIntent with the [amount](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-amount), [currency](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-currency), and [customer](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-customer). You can also optionally include the `automatic_payment_methods` parameter. Stripe enables its functionality by default in the latest version of the API.\n4.  Returns the Payment Intent’s [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"), the Ephemeral Key’s `secret`, the Customer’s [id](https://docs.stripe.com/api/customers/object#customer_object-id), and your [publishable key](https://dashboard.stripe.com/apikeys) to your app.\n\nThe payment methods shown to customers during the checkout process are also included on the PaymentIntent. You can let Stripe pull payment methods from your Dashboard settings or you can list them manually. Regardless of the option you choose, know that the currency passed in the PaymentIntent filters the payment methods shown to the customer. For example, if you pass `eur` on the PaymentIntent and have OXXO enabled in the Dashboard, OXXO won’t be shown to the customer because OXXO doesn’t support `eur` payments.\n\nUnless your integration requires a code-based option for offering payment methods, Stripe recommends the automated option. This is because Stripe evaluates the currency, payment method restrictions, and other parameters to determine the list of supported payment methods. Payment methods that increase conversion and that are most relevant to the currency and customer’s location are prioritized.\n\n#### Note\n\nTest a running implementation of this endpoint on [Glitch](https://glitch.com/edit/#!/remix/stripe-mobile-payment-sheet-automatic).\n\nYou can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow. The PaymentIntent is created using the payment methods you configured in the Dashboard. If you don’t want to use the Dashboard or if you want to specify payment methods manually, you can list them using the `payment_method_types` attribute.\n\n`# Create a Customer (use an existing Customer ID if this is a returning customer) curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n``: \\   -X \"POST\"  # Create an Ephemeral Key for the Customer curl https://api.stripe.com/v1/ephemeral_keys \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -H \"Stripe-Version: 2024-06-20\" \\   -X \"POST\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\  # Create a PaymentIntent curl https://api.stripe.com/v1/payment_intents \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -X \"POST\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"amount\"=1099 \\   -d \"currency\"=\"eur\" \\   # In the latest version of the API, specifying the `automatic_payment_methods` parameter   # is optional because Stripe enables its functionality by default.   -d \"automatic_payment_methods[enabled]\"=true \\``\n\n[\n\n## Collect payment details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#android-collect-payment-details)\n\nBefore displaying the mobile Payment Element, your checkout page should:\n\n*   Show the products being purchased and the total amount\n*   Collect any required shipping information using the [Address Element](https://docs.stripe.com/elements/address-element?platform=android)\n*   Include a checkout button to present Stripe’s UI\n\n[Initialize](https://stripe.dev/stripe-android/paymentsheet/com.stripe.android.paymentsheet/-payment-sheet/index.html#-394860221%2FConstructors%2F2002900378) a `PaymentSheet` instance inside `onCreate` of your checkout Activity, passing a method to handle the result.\n\n`import androidx.compose.runtime.Composable import com.stripe.android.paymentsheet.PaymentSheetResult import com.stripe.android.paymentsheet.rememberPaymentSheet  @Composable fun App() {   val paymentSheet = rememberPaymentSheet(::onPaymentSheetResult)  }  private fun onPaymentSheetResult(paymentSheetResult: PaymentSheetResult) {   // implemented in the next steps }`\n\nNext, fetch the PaymentIntent client secret, Ephemeral Key secret, Customer ID, and publishable key from the endpoint you created in the previous step. Set the publishable key using `PaymentConfiguration` and store the others for use when you present the PaymentSheet.\n\n`import androidx.compose.runtime.Composable import androidx.compose.runtime.LaunchedEffect import androidx.compose.runtime.getValue import androidx.compose.runtime.mutableStateOf import androidx.compose.runtime.remember import androidx.compose.runtime.setValue import androidx.compose.ui.platform.LocalContext // Add the following lines to build.gradle to use this example's networking library: //   implementation 'com.github.kittinunf.fuel:fuel:2.3.1' //   implementation 'com.github.kittinunf.fuel:fuel-json:2.3.1' import com.github.kittinunf.fuel.httpPost import com.github.kittinunf.fuel.json.responseJson import com.stripe.android.PaymentConfiguration import com.stripe.android.paymentsheet.PaymentSheet import com.stripe.android.paymentsheet.PaymentSheetResult import com.stripe.android.paymentsheet.rememberPaymentSheet import com.github.kittinunf.result.Result  @Composable fun App() {   val paymentSheet = rememberPaymentSheet(::onPaymentSheetResult)   val context = LocalContext.current   var customerConfig by remember { mutableStateOf<PaymentSheet.CustomerConfiguration?>(null) }   var paymentIntentClientSecret by remember { mutableStateOf<String?>(null) }    LaunchedEffect(context) {     \"Your backend endpoint/payment-sheet\".httpPost().responseJson { _, _, result ->       if (result is Result.Success) {         val responseJson = result.get().obj()         paymentIntentClientSecret = responseJson.getString(\"paymentIntent\")         customerConfig = PaymentSheet.CustomerConfiguration(           responseJson.getString(\"customer\"),           responseJson.getString(\"ephemeralKey\")         )         val publishableKey = responseJson.getString(\"publishableKey\")         PaymentConfiguration.init(context, publishableKey)       }     }   } }  private fun onPaymentSheetResult(paymentSheetResult: PaymentSheetResult) {   // implemented in the next steps }`\n\nWhen the customer taps your checkout button, call [`presentWithPaymentIntent`](https://stripe.dev/stripe-android/paymentsheet/com.stripe.android.paymentsheet/-payment-sheet/index.html#1814490530%2FFunctions%2F2002900378) to present the payment sheet. After the customer completes the payment, the sheet dismisses and the [`PaymentSheetResultCallback`](https://stripe.dev/stripe-android/paymentsheet/com.stripe.android.paymentsheet/-payment-sheet-result-callback/index.html) is called with a [`PaymentSheetResult`](https://stripe.dev/stripe-android/paymentsheet/com.stripe.android.paymentsheet/-payment-sheet-result/index.html).\n\n``import androidx.compose.material.Button import androidx.compose.material.Text import androidx.compose.runtime.Composable import androidx.compose.runtime.LaunchedEffect import androidx.compose.runtime.getValue import androidx.compose.runtime.mutableStateOf import androidx.compose.runtime.remember import androidx.compose.runtime.setValue import androidx.compose.ui.platform.LocalContext // Add the following lines to build.gradle to use this example's networking library: //   implementation 'com.github.kittinunf.fuel:fuel:2.3.1' //   implementation 'com.github.kittinunf.fuel:fuel-json:2.3.1' import com.github.kittinunf.fuel.httpPost import com.github.kittinunf.fuel.json.responseJson import com.stripe.android.PaymentConfiguration import com.stripe.android.paymentsheet.PaymentSheet import com.stripe.android.paymentsheet.PaymentSheetResult import com.stripe.android.paymentsheet.rememberPaymentSheet import com.github.kittinunf.result.Result  @Composable fun App() {   val paymentSheet = rememberPaymentSheet(::onPaymentSheetResult)   val context = LocalContext.current   var customerConfig by remember { mutableStateOf<PaymentSheet.CustomerConfiguration?>(null) }   var paymentIntentClientSecret by remember { mutableStateOf<String?>(null) }    LaunchedEffect(context) {     \"Your backend endpoint/payment-sheet\".httpPost().responseJson { _, _, result ->       if (result is Result.Success) {         val responseJson = result.get().obj()         paymentIntentClientSecret = responseJson.getString(\"paymentIntent\")         customerConfig = PaymentSheet.CustomerConfiguration(           responseJson.getString(\"customer\"),           responseJson.getString(\"ephemeralKey\")         )         val publishableKey = responseJson.getString(\"publishableKey\")         PaymentConfiguration.init(context, publishableKey)       }     }   }    Button(     onClick = {       val currentConfig = customerConfig       val currentClientSecret = paymentIntentClientSecret        if (currentConfig != null && currentClientSecret != null) {         presentPaymentSheet(paymentSheet, currentConfig, currentClientSecret)       }     }   ) {     Text(\"Checkout\")   } }  private fun presentPaymentSheet(   paymentSheet: PaymentSheet,   customerConfig: PaymentSheet.CustomerConfiguration,   paymentIntentClientSecret: String ) {   paymentSheet.presentWithPaymentIntent(     paymentIntentClientSecret,     PaymentSheet.Configuration(       merchantDisplayName = \"My merchant name\",       customer = customerConfig,       // Set `allowsDelayedPaymentMethods` to true if your business handles       // delayed notification payment methods like US bank accounts.       allowsDelayedPaymentMethods = true     )   ) }  private fun onPaymentSheetResult(paymentSheetResult: PaymentSheetResult) {   when(paymentSheetResult) {     is PaymentSheetResult.Canceled -> {       print(\"Canceled\")     }     is PaymentSheetResult.Failed -> {       print(\"Error: ${paymentSheetResult.error}\")     }     is PaymentSheetResult.Completed -> {       // Display for example, an order confirmation screen       print(\"Completed\")     }   } }``\n\nSetting `allowsDelayedPaymentMethods` to true allows [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment methods like US bank accounts. For these payment methods, the final payment status isn’t known when the `PaymentSheet` completes, and instead succeeds or fails later. If you support these types of payment methods, inform the customer their order is confirmed and only fulfill their order (for example, ship their product) when the payment is successful.\n\n[\n\n## Handle post-payment events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#android-post-payment)\n\nStripe sends a [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) event when the payment completes. Use the [Dashboard webhook tool](https://dashboard.stripe.com/webhooks) or follow the [webhook guide](https://docs.stripe.com/webhooks/quickstart) to receive these events and run actions, such as sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes, and malicious clients could manipulate the response. Setting up your integration to listen for asynchronous events is what enables you to accept [different types of payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\nIn addition to handling the `payment_intent.succeeded` event, we recommend handling these other events when collecting payments with the Payment Element:\n\n| Event | Description | Action |\n| --- | --- | --- |\n| [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.succeeded) | Sent when a customer successfully completes a payment. | Send the customer an order confirmation and fulfill their order. |\n| [payment\\_intent.processing](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.processing) | Sent when a customer successfully initiates a payment, but the payment has yet to complete. This event is most commonly sent when the customer initiates a bank debit. It’s followed by either a `payment_intent.succeeded` or `payment_intent.payment_failed` event in the future. | Send the customer an order confirmation that indicates their payment is pending. For digital goods, you might want to fulfill the order before waiting for payment to complete. |\n| [payment\\_intent.payment\\_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed) | Sent when a customer attempts a payment, but the payment fails. | If a payment transitions from `processing` to `payment_failed`, offer the customer another attempt to pay. |\n\n[\n\n## Test the integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#android-test-the-integration)\n\n| Card number | Scenario | How to test |\n| --- | --- | --- |\n|     | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n\nSee [Testing](https://docs.stripe.com/testing) for additional information to test your integration.",
    "title": "Accept a payment | Stripe Documentation",
    "description": "Securely accept payments online.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/overview",
    "markdown": "# Accept in-person payments with Terminal\n\n## Learn how Terminal works.\n\nWith [Stripe Terminal](https://docs.stripe.com/terminal), you can integrate Stripe payments into your existing in-person checkout flow or build in-person payments into your native mobile or web-based application.\n\nTerminal comes with SDKs built for modern development environments, Tap to Pay on [iPhone](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay?platform=ios) and [Android](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay?platform=android), [pre-certified readers](https://docs.stripe.com/terminal/payments/setup-reader), and tools for ordering and managing readers from the Stripe Dashboard. Build a SaaS platform or marketplace using [Connect](https://docs.stripe.com/connect) or initiate subscriptions in-store with [Billing](https://docs.stripe.com/billing).\n\nStripe Terminal is available in the following countries:\n\n### Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAustralia\n\nBelgium\n\nCanada\n\nDenmark\n\nFrance\n\nGermany\n\nIreland\n\nItaly\n\nNetherlands\n\nSingapore\n\nSpain\n\nSweden\n\nUnited Kingdom\n\nUnited States\n\n### Available in Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAustria\n\nCzech Republic\n\nFinland\n\nLuxembourg\n\nMalaysia\n\nNew Zealand\n\nNorway\n\nPortugal\n\nSwitzerland\n\nYou can only collect payments in your local currency with [supported card brands](https://docs.stripe.com/terminal/payments/collect-card-payment/supported-card-brands). Stripe Terminal offers pre-certified readers and Tap to Pay, which allows users to accept in-person contactless payments with a compatible [iPhone](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay?platform=ios) or [Android](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay?platform=android) device and the Stripe Terminal SDK. Hardware must be shipped to physical addresses (not PO boxes). If you’re outside the available countries, you can [request an invite](https://stripe.com/terminal#request-invite) to test Terminal.\n\n## Features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse Terminal to take the complexity out of in-person payments:\n\n*   **Online compatibility**: Unify your online and in-person payments in a single system.\n*   **Flexible SDKs**: Use Terminal’s JavaScript, iOS, Android, or React Native SDK to integrate your existing point of sale (POS), or build a modern POS tailored to your business. Use the [server-driven integration](https://support.stripe.com/questions/terminal-server-driven-integration) to integrate directly using the Stripe API.\n*   **Reader choices**: Choose from [different readers](https://docs.stripe.com/terminal/payments/setup-reader) depending on your business needs.\n*   **Connection types**: [Connect](https://docs.stripe.com/terminal/payments/connect-reader) to your Terminal reader with Bluetooth, USB (Android with mobile readers only), or internet, depending on your physical sales environment.\n*   **Ordering and fleet management from the Stripe Dashboard**: Order [pre-certified readers](https://docs.stripe.com/terminal/fleet/order-and-return-readers) and [monitor your fleet of readers](https://docs.stripe.com/terminal/fleet/locations-and-zones) from the Stripe Dashboard.\n\n## How Terminal works ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA Stripe Terminal deployment consists of four main components:\n\n*   Your web-based, mobile, or desktop application\n*   Your backend\n*   A Stripe Terminal reader\n*   The Stripe Terminal SDK\n\nThe SDK facilitates communication between your point of sale application logic, the firmware running on the reader, and the Stripe API so you can accept in-person payments in the same way as you accept online payments with Stripe. The SDK is available for JavaScript, iOS, Android applications. You can develop desktop applications using a server-driven integration.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/ecosystem-diagram.96b4137c8fbb6e9e7c91d97a27289e01.png)\n\nStripe Terminal offers a selection of [pre-certified readers](https://docs.stripe.com/terminal/payments/setup-reader) that accept payment details (EMV, contactless, and swiped), encrypt sensitive card information, and return a token to your application (through the Stripe Terminal SDK) so you can confirm payment.\n\nStripe Terminal works only with our pre-certified card readers and compatible Tap to Pay [iPhone](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay?platform=ios) and [Android](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay?platform=android) devices. This ensures secure transactions by our end-to-end encryption, by default, and up-to-date readers through our remote management tools.\n\nYou can [order readers and accessories](https://docs.stripe.com/terminal/fleet/order-and-return-readers) from the Stripe Dashboard and get them shipped to a location of your choice. As a [Connect](https://docs.stripe.com/connect) platform, you can even enable your connected accounts to receive readers and accessories at their business location.\n\n## Use cases ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Terminal is built with developers in mind. Its flexible design supports a wide range of use cases:\n\n*   Extend your online business to the physical world.\n*   Enable in-person payments for your [Connect](https://docs.stripe.com/connect) platform, with readers for each connected account.\n*   Collect payments in-person and use those card details for recurring online payments with [Billing](https://docs.stripe.com/billing).\n*   Build a new, customized point of sale application or integrate with your existing point of sale application, while taking advantage of the Stripe API for processing payments.\n\nChoose an SDK that works best for you and combine it with a reader that works best for you. This documentation provides all the information you need to design your in-person payments solution, order readers and accessories, integrate, and deploy.\n\n## Scope of integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe full scope of an integration consists of four major steps.\n\n1.  Use the [sample integration](https://docs.stripe.com/terminal/quickstart) to get up and running with an integration quickly.\n2.  [Design your integration](https://docs.stripe.com/terminal/designing-integration) to create in-person payments.\n3.  [Integrate the SDK](https://docs.stripe.com/terminal/payments/setup-integration) in your application. Use the simulated reader to emulate reader behavior for all the Terminal flows while building your initial integration.\n4.  [Order](https://docs.stripe.com/terminal/fleet/order-and-return-readers) a physical reader and test card.\n\nFrom there, explore the docs to see all you can do with your Terminal integration. We recommend [testing your integration](https://docs.stripe.com/terminal/references/testing) and reviewing the [checklist](https://docs.stripe.com/terminal/references/checklist) before going live.",
    "title": "Accept in-person payments with Terminal | Stripe Documentation",
    "description": "Learn how Terminal works.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/save-and-reuse",
    "markdown": "# Set up future payments | Stripe DocumentationThe Stripe Docs logo\n\nTo collect customer payment details that you can reuse later, use Checkout’s setup mode. Setup mode uses the [Setup Intents API](https://docs.stripe.com/api/setup_intents) to create [Payment Methods](https://docs.stripe.com/api/payment_methods).\n\nCheck out our [full, working sample on GitHub](https://github.com/stripe-samples/checkout-remember-me-with-twilio-verify).\n\n[](#set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-checkout-session)\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nTo create a setup mode Session, use the `mode` parameter with a value of `setup` when creating the Session. You can optionally specify the [customer parameter](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-customer) to automatically attach the created payment method to an existing customer. Checkout uses [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) by default, which requires you to pass the [currency](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-currency) parameter when using `setup` mode.\n\nAppend the `{CHECKOUT_SESSION_ID}` template variable to the `success_url` to get access to the Session ID after your customer successfully completes a Checkout Session. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=setup \\  -d currency=usd \\  -d customer={{CUSTOMER_ID}} \\   --data-urlencode success_url=\"https://example.com/success?session_id={CHECKOUT_SESSION_ID}\"`\n\n[](#retrieve-checkout-session)\n\nAfter a customer successfully completes their Checkout Session, you need to retrieve the Session object. There are two ways to do this:\n\n*   **Asynchronously**: Handle `checkout.session.completed` [webhooks](https://docs.stripe.com/webhooks \"webhook\"), which contain a Session object. Learn more about [setting up webhooks](https://docs.stripe.com/webhooks).\n*   **Synchronously**: Obtain the Session ID from the `success_url` when a user redirects back to your site. Use the Session ID to [retrieve](https://docs.stripe.com/api/checkout/sessions/retrieve) the Session object.\n\n`curl https://api.stripe.com/v1/checkout/sessions/cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nThe right choice depends on your tolerance for dropoff, as customers may not always reach the `success_url` after a successful payment. It’s possible for them close their browser tab before the redirect occurs. Handling webhooks prevents your integration from being susceptible to this form of dropoff.\n\nAfter you have retrieved the Session object, get the value of the `setup_intent` key, which is the ID for the SetupIntent created during the Checkout Session. A [SetupIntent](https://docs.stripe.com/payments/setup-intents) is an object used to set up the customer’s bank account information for future payments.\n\nExample `checkout.session.completed` payload:\n\n`{   \"id\": \"evt_1Ep24XHssDVaQm2PpwS19Yt0\",   \"object\": \"event\",   \"api_version\": \"2019-03-14\",   \"created\": 1561420781,   \"data\": {     \"object\": {       \"id\": \"cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k\",       \"object\": \"checkout.session\",       \"billing_address_collection\": null,       \"client_reference_id\": null,       \"customer\": \"\",       \"customer_email\": null,       \"display_items\": [],       \"mode\": \"setup\",       \"setup_intent\": \"seti_1EzVO3HssDVaQm2PJjXHmLlM\",       \"submit_type\": null,       \"subscription\": null,       \"success_url\": \"[https://example.com/success](https://example.com/success)\"     }   },   \"livemode\": false,   \"pending_webhooks\": 1,   \"request\": {     \"id\": null,     \"idempotency_key\": null   },   \"type\": \"checkout.session.completed\" }`\n\nNote the `setup_intent` ID for the next step.\n\n[](#retrieve-setup-intent)\n\nUsing the `setup_intent` ID, [retrieve](https://docs.stripe.com/api/setup_intents/retrieve) the SetupIntent object. The returned object contains a `payment_method` ID that you can attach to a customer in the next step.\n\n`curl https://api.stripe.com/v1/setup_intents/seti_1EzVO3HssDVaQm2PJjXHmLlM \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n#### Note\n\nIf you’re requesting this information synchronously from the Stripe API (as opposed to handling webhooks), you can combine the previous step with this step by [expanding](https://docs.stripe.com/api/expanding_objects) the SetupIntent object in the request to the /v1/checkout/session endpoint. Doing this prevents you from having to make two network requests to access the newly created PaymentMethod ID.\n\n[](#use-payment-method)\n\nIf you didn’t create the Checkout Session with an existing customer, use the `payment_method` ID to [attach](https://docs.stripe.com/api/payment_methods/attach) the [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") to a [Customer](https://docs.stripe.com/api/customers \"Customers\"). After you attach the PaymentMethod to a customer, you can charge the PaymentMethod using a [PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method).\n\n[](#disclose-cookies)\n\nStripe collects information on customer interactions with Elements to provide services to you, prevent fraud, and improve its services. This includes using cookies and IP addresses to identify which Elements a customer saw during a single checkout session. You’re responsible for disclosing and obtaining all rights and consents necessary for Stripe to use data in these ways. For more information, visit our [privacy center](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).",
    "title": "Set up future payments | Stripe Documentation",
    "description": "Learn how to save payment details and charge your customers later.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/designing-integration",
    "markdown": "# Design an integration | Stripe DocumentationThe Stripe Docs logo\n\n## M2 reader features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Miniature reader\n*   Optional dock for countertop or mount for mobile roaming\n*   Contactless, chip, and swipe payments\n\nNot a coder? [Find a Stripe partner who supports Terminal](https://stripe.com/partners/directory?p=Terminal).\n\n## Architecture![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWrite your application using the Terminal SDK. The application uses the SDK to communicate with the reader, your back end, and the Stripe API.\n\nThe structure of the integration looks like this:\n\n![Integration architecture for Bluetooth readers](https://b.stripecdn.com/docs-statics-srv/assets/bluetooth-readers-integration-architecture.9d2a56e6b18d403812709a3e7732e583.png)\n\nYou can build a working example of an integration like this using the [Terminal Quickstart](https://docs.stripe.com/terminal/quickstart).\n\n## Organize readers and locations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you connect a reader to a Terminal integration, you must create one or more [Locations](https://docs.stripe.com/api/terminal/locations), either [in the Dashboard](https://dashboard.stripe.com/terminal/locations) or [using the API](https://docs.stripe.com/terminal/fleet/locations-and-zones#create-locations-and-zones). Then, when you [connect to your reader](https://docs.stripe.com/terminal/payments/connect-reader), specify one of those locations.\n\nLocations represent physical places where your readers operate. Stripe needs location information to process payments correctly and keep your reader up to date. If your business requires you to move your readers frequently, your locations can use addresses that represent a primary place of business.\n\n## Prototyping![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you first begin writing your application, you can test it with a simulated reader and simulated cards. The [Terminal Quickstart](https://docs.stripe.com/terminal/quickstart) demonstrates an app at this stage of development.\n\nWhen you’re ready to work with actual hardware, follow these steps:\n\n1.  [Order an M2 reader and physical test cards](https://dashboard.stripe.com/terminal/shop).\n2.  Connect to the reader [using Bluetooth](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=bluetooth) or [USB](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=usb).\n3.  [Test your logic with physical test cards](https://docs.stripe.com/terminal/references/testing#physical-test-cards).\n\n## Next steps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Set up your integration to start writing code](https://docs.stripe.com/terminal/payments/setup-integration).\n*   [Terminal Quickstart code example](https://docs.stripe.com/terminal/quickstart).\n*   [Order readers, accessories, and test cards](https://dashboard.stripe.com/terminal/shop).",
    "title": "Design an integration | Stripe Documentation",
    "description": "Choose a reader and platform and see how they work together.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/example-applications",
    "markdown": "# Example applications | Stripe DocumentationThe Stripe Docs logo\n\n## Try Stripe Terminal by using the example applications and simulated reader.\n\n#### Note\n\nA Stripe Terminal integration starts with your point of sale application running at a physical location. Your point of sale application communicates with a reader through the Terminal SDK to collect in-person payments from your customers. Your backend works with your point of sale application to authenticate the Terminal SDK and finalize payments.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/example-app-simulator-integration-architecture.c687f5119cda8972233e61f684ae56a5.png)\n\nBefore starting your own integration, we recommend setting up one of the Terminal example applications. This will give you a better feel for how the components of a Terminal integration fit together and show you the interactions between the SDK, the reader, your point of sale application, and your backend code.\n\n[](#set-up-backend)\n\nTo get started with the example applications, set up the Sinatra-based [example backend](https://github.com/stripe/example-terminal-backend) by following the instructions in the [README](https://github.com/stripe/example-terminal-backend). You can either run the backend locally or deploy it to Render with a free account. The example backend works with the example application to authenticate the Terminal SDK and finalize payments.\n\n[](#run-example-app)\n\nBuild and run one of the example applications:\n\n1.  Clone the example from [GitHub](https://github.com/stripe/stripe-terminal-js-demo):\n\n1.  Run the following commands to run the example:\n\n`cd stripe-terminal-js-demo npm install npm run start`\n\n1.  In the running example, enter the URL of the example backend that you deployed in [step 1](#set-up-backend).\n\n[](#connect-simulated-reader)\n\nAfter you have the example running, select **Use simulator** to connect to a [simulated reader](https://docs.stripe.com/terminal/references/testing#simulated-reader).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/js-example-app-simulator.c226b6ba5461d0c5b3b8f06c0c1a3469.png)\n\nThe JavaScript example app connected to a simulated reader\n\nThe simulated reader handles events just like a physical reader, so you can continue to collecting your first payment.\n\nThe simulated reader functionality is built into the SDK, so you can use it to develop and test your own point of sale application without connecting to a physical device.\n\n[](#collect-payment)\n\nCollect your first payment using the example application and a simulated reader. Each of the examples features an event log for you to reference as you integrate Terminal in your own application. As you collect your first payment, you’ll see the following sequence:\n\n*   **Create payment**: The example application collects a payment method using the SDK.\n*   **Collect payment method**: The simulated reader receives a card.\n*   **Process and capture**: The example application and backend finalize the payment.\n\n#### Note\n\n![Javascript example app connected to simulated reader](https://b.stripecdn.com/docs-statics-srv/assets/js-example-app-payment.8069a69561566519d001038a46bfe6b5.png)\n\nCollecting a payment, using the JavaScript example app and a simulated reader",
    "title": "Example applications | Stripe Documentation",
    "description": "Try Stripe Terminal by using the example applications and simulated reader.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/quickstart",
    "markdown": "# Accept in-person payments | Stripe DocumentationThe Stripe Docs logo\n\nSearch the docs or ask a question",
    "title": "Accept in-person payments | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/payments/connect-reader",
    "markdown": "# Connect to a reader | Stripe DocumentationThe Stripe Docs logo\n\nStripe provides a simulated server-driven reader so you can develop and test your app and simulate Terminal payments, without connecting to physical hardware.\n\n## Create a simulated reader![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a simulated reader use the designated [registration code](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=server-driven&reader-type=smart#register-reader) (`simulated-wpe` or `simulated-s700`) when registering the reader. This registration code creates a simulated WisePOS E or Stripe S700 reader object in test mode only. You can register the simulated reader using the Stripe API:\n\n`curl https://api.stripe.com/v1/terminal/readers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d location=  {{LOCATION_ID}}   \\  -d registration_code=simulated-wpe`\n\nThis returns a [reader](https://docs.stripe.com/api/terminal/readers) object representing your simulated reader:\n\n`{   \"id\": \"tmr_xxx\",   \"object\": \"terminal.reader\",   \"device_sw_version\": \"\",   \"device_type\": \"simulated_wisepos_e\",   \"ip_address\": \"0.0.0.0\",   \"label\": \"simulated-wpe-xxx-xxx-xx-xxx\",   \"livemode\": false,   \"location\": \"tml_xxx\",   \"serial_number\": \"simulated-wpe-xxx-xxx-xx-xxx\",   \"status\": \"online\" }`\n\n## Query your simulated reader![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe simulated reader behaves like a real reader. You can retrieve its information from the [reader endpoint](https://docs.stripe.com/api/terminal/readers/retrieve):\n\n`curl https://api.stripe.com/v1/terminal/readers/tmr_xxx \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n`{   \"id\": \"tmr_xxx\",   \"object\": \"terminal.reader\",   \"action\": null,   \"device_sw_version\": \"\",   \"device_type\": \"simulated_wisepos_e\",   \"ip_address\": \"0.0.0.0\",   \"label\": \"simulated-wpe-xxx-xxx-xx-xxx\",   \"livemode\": false,   \"location\": \"tml_xxx\",   \"metadata\": {   },   \"serial_number\": \"simulated-wpe-xxx-xxx-xx-xxx\",   \"status\": \"offline\" }`\n\nThe BBPOS and Chipper™ name and logo are trademarks or registered trademarks of BBPOS Limited in the United States and/or other countries. The Verifone® name and logo are either trademarks or registered trademarks of Verifone in the United States and/or other countries. Use of the trademarks does not imply any endorsement by BBPOS or Verifone.",
    "title": "Connect to a reader | Stripe Documentation",
    "description": "Connect your application to a Stripe Terminal reader.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/payments/setup-integration",
    "markdown": "# Set up your integration | Stripe DocumentationThe Stripe Docs logo\n\nServer-driven integrations use the Stripe API instead of a Terminal SDK to connect to [WisePOS E or Stripe Reader S700 smart readers](https://docs.stripe.com/terminal/smart-readers) and collect in-person payments. This allows you to:\n\n*   Use Terminal even if your infrastructure doesn’t support iOS, Android, or JavaScript SDKs\n*   Build a Terminal integration that’s powered by your custom middleware or cloud-based infrastructure\n*   Integrate any device including a .NET-based point of sale to Terminal\n*   Improve reader network connections using an internet connection instead of the local area network\n*   Make curl requests to prototype an integration\n\nServer-driven integration doesn’t support:\n\n*   [Stripe Terminal Bluetooth readers](https://docs.stripe.com/terminal/bluetooth-readers)\n*   [Collect card payments while offline](https://docs.stripe.com/terminal/features/operate-offline/collect-card-payments)\n\nYou can start your server-driven integration with the following components:\n\n*   **Your point of sale application**: The operator-facing UI that employees see when creating a transaction.\n*   **Your backend infrastructure**: Mediates requests from your point of sale application and makes requests to the Stripe API during the transaction.\n*   **The Stripe API**: Receives requests and forwards them to a smart reader, such as the [BBPOS WisePOS E reader](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepos-e) or [Stripe Reader S700](https://docs.stripe.com/terminal/readers/stripe-reader-s700). Stripe also sends [webhooks](https://docs.stripe.com/webhooks \"webhook\") to your backend infrastructure with the payment status.\n*   **A BBPOS WisePOS E reader, Stripe Reader S700, or simulated reader**: Prompts the cardholder for payment and communicates with Stripe and our financial infrastructure to process the payment. You can create a simulated reader if you don’t yet have a physical reader.\n\n![Server-driven integration architecture](https://b.stripecdn.com/docs-statics-srv/assets/server-driven-integration-architecture.a8499c1169a540cef98c9dd539f99a61.png)",
    "title": "Set up your integration | Stripe Documentation",
    "description": "Set up a Stripe Terminal SDK or server-driven integration to accept in-person payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/fleet/configurations-overview",
    "markdown": "# Terminal configurations | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use the Terminal Configurations object to apply configurations to your readers.\n\nThe Terminal [Configuration](https://docs.stripe.com/api/terminal/configuration) object contains all relevant configurations for a reader, such as the splash screen, tipping settings, offline mode, and so on. Because these settings are hierarchical, you can apply a configuration at either the account level or at the individual location level. You can set configurations in the following ways:\n\n*   On individual [Locations](https://docs.stripe.com/api/terminal/locations): Applies to all readers registered to that Location\n*   At the account level: Applies to all readers in your fleet\n\nYou can override account-level settings with location-level settings. If you don’t configure settings at the location level, they inherit the account-level settings.\n\n#### Note\n\nWe don’t support assigning or adding configurations to zones.\n\nFor example, you can model your `Configuration` objects as follows:\n\n![Configuration Hierarchy](https://b.stripecdn.com/docs-statics-srv/assets/configuration-object-tree.5ec745ad57500a800c4f34f0a970224e.png)\n\nIn this scenario, Location 3 inherits the configurations from the account “Default configuration”, while Locations 1 and 2 have their own configuration.\n\n#### Note\n\nIf you don’t set a configuration on the location-level, the Location inherits the default configuration on the account. For example, if you don’t set the splash screen on the Location, it inherits it from the default configuration set at the account level.\n\nAny configuration changes made with the API or Dashboard can take up to 10 minutes to reflect on the target readers.\n\nYou can view and manage your configurations in the Stripe Dashboard. To manage your configurations, click **Manage locations** on the Readers tab. Stripe displays a list of configurations on the right hand side of the page. To view additional configurations, click **View more** at the bottom of the list.\n\n### Update the default configuration for the account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Select the overflow menu () on the **All locations** list item (top).\n2.  Click **Edit configuration**.\n3.  Click **Override** for each configuration type you want to update.\n4.  Click **Apply changes**.\n\nAll readers across all locations inherit the configuration settings that you set, unless there’s an override set on the configuration for the location. The reader updates within 10 minutes after you add the configuration.\n\n### Create a new configuration for a location![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Select the overflow menu () on the location item.\n2.  Click **Add configuration**.\n3.  Enter a name for the configuration. You can use this name more than once.\n4.  Click **Override** for each configuration type you want to update.\n5.  Click **Apply changes**.\n\nAll readers in the location inherit the configuration settings that you set. The reader updates within 10 minutes after you add the configuration.\n\n### Update an existing configuration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Select the overflow menu () on either the location list item (left side) or the configuration itself (right side).\n2.  Click **Edit configuration**.\n3.  Click **Override** for each configuration type you want to update.\n4.  Click **Apply changes**.\n\nAll the readers in the location update within 10 minutes.\n\n### Delete an existing configuration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Select the overflow menu () on either the location list item (left side) or the configuration itself (right side).\n2.  Click **Delete configuration**.\n\nAfter you delete the configuration, the readers in the location default back to the account’s default configuration within 10 minutes.",
    "title": "Terminal configurations | Stripe Documentation",
    "description": "Learn how to use the Terminal Configurations object to apply configurations to your readers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/connect",
    "markdown": "# Use Terminal with Connect | Stripe DocumentationThe Stripe Docs logo\n\n## Integrate Stripe Terminal with your Connect platform.\n\nStripe Terminal is fully compatible with [Connect](https://docs.stripe.com/connect \"Connect\"), enabling your platform or marketplace to accept in-person payments.\n\nThe way Terminal creates API objects depends on whether you use [direct charges](https://docs.stripe.com/connect/direct-charges) or [destination charges](https://docs.stripe.com/connect/destination-charges). If you use direct charges, all Terminal API objects belong to connected accounts. If you use destination charges, all Terminal API objects are created on your platform account. In both cases, use [Locations](https://docs.stripe.com/api/terminal/locations) to group readers as you see fit.\n\n#### Note\n\nTerminal Connect Accounts must have the `card_payments` capability to perform transactions.\n\n## Direct charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith [direct charges](https://docs.stripe.com/connect/direct-charges), API objects belong to the connected account rather than the platform. The connected account is responsible for the cost of Stripe fees, refunds, and chargebacks.\n\nIn the Dashboard, you can view your Terminal data by logging in as the connected account.\n\n### Create locations and readers Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith [direct charges](https://docs.stripe.com/connect/direct-charges), you must create payment objects that belong to the connected account. You must create other Terminal API objects like [Locations](https://docs.stripe.com/api/terminal/locations) and [Readers](https://docs.stripe.com/api/terminal/readers) that belong to the same connected account.\n\nTo [create a Location](https://docs.stripe.com/terminal/fleet/locations-and-zones) belonging to a connected account, use the `Stripe-Account` header.\n\n`curl https://api.stripe.com/v1/terminal/locations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d display_name=HQ \\  -d \"address[line1]\"=\"1272 Valencia Street\" \\  -d \"address[city]\"=\"San Francisco\" \\  -d \"address[state]\"=CA \\  -d \"address[country]\"=US \\  -d \"address[postal_code]\"=94110`\n\nBefore you can connect your application to a [smart reader](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=internet), you must register the reader to a Stripe account. To register a reader to a connected account, use the `Stripe-Account` header.\n\n`curl https://api.stripe.com/v1/terminal/readers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d registration_code={{READER_REGISTRATION_CODE}} \\   --data-urlencode label=\"Alice's reader\" \\  -d location=  {{LOCATION_ID}}    `\n\n### Create connection tokens Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Note\n\nWhen using [Connect OAuth](https://docs.stripe.com/connect/oauth-reference) authentication, the connected account needs to be authorized for live mode and test mode separately, using the respective application Client ID for each mode.\n\nWhen creating a [ConnectionToken](https://docs.stripe.com/api/terminal/connection_tokens) for the Terminal SDK, set the `Stripe-Account` header to the connected account accepting payments. You may also provide a `location` parameter to control access to readers. If you provide a location, the ConnectionToken is only usable with readers assigned to that location. If you don’t provide a location, the ConnectionToken is usable with all readers.\n\n`curl https://api.stripe.com/v1/terminal/connection_tokens \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d location=  {{LOCATION_ID}}    `\n\n### Create PaymentIntents Client-side Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the iOS, Android, and React Native SDKs, you can create a PaymentIntent on the client or server. The JavaScript SDK only supports server-side creation.\n\n#### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen creating a PaymentIntent client-side for direct charges, you don’t need to specify any additional parameters for the PaymentIntent. Instead, when creating a ConnectionToken, set the `Stripe-Account` header to the connected account accepting payments. The iOS, Android, and React Native SDKs create the PaymentIntent on the same connected account the ConnectionToken belongs to. For more information, see [Create Payment Intents Client-side](https://docs.stripe.com/terminal/payments/collect-card-payment#create-client-side).\n\n#### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe JavaScript SDK requires you to create the PaymentIntent on your server. For iOS or Android, you might want to create the PaymentIntent on your server if the information required to start a payment isn’t readily available in your app. For more information, see [Create Payment Intents Server-side](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=js#create-payment).\n\nWhen creating a PaymentIntent server-side for direct charges, set the `Stripe-Account` header to the connected account.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card_present \\  -d capture_method=manual`\n\n## Destination charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen using [destination charges](https://docs.stripe.com/connect/destination-charges), API objects like Payment Intents and Locations belong to your platform account. Each payment creates a transfer to a connected account automatically.\n\nIn the Dashboard, you can view your Terminal data directly when logged into your platform account.\n\n### Create locations and readers Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe best way to group Reader objects by connected account is by assigning them to Locations. On your platform account, [create a Location](https://docs.stripe.com/terminal/fleet/locations-and-zones) for a connected account using a display name that identifies the account.\n\n`curl https://api.stripe.com/v1/terminal/locations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d display_name=HQ \\  -d \"address[line1]\"=\"1272 Valencia Street\" \\  -d \"address[city]\"=\"San Francisco\" \\  -d \"address[state]\"=CA \\  -d \"address[country]\"=US \\  -d \"address[postal_code]\"=94110`\n\nBefore you can connect your application to a [smart reader](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=internet), you must register the reader to your platform account.\n\n`curl https://api.stripe.com/v1/terminal/readers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d registration_code={{READER_REGISTRATION_CODE}} \\   --data-urlencode label=\"Alice's reader\" \\  -d location=  {{LOCATION_ID}}    `\n\n### Create connection tokens Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen creating a ConnectionToken for the Terminal SDK, use your platform account’s secret key. Don’t set the `Stripe-Account` header. Provide a `location` parameter to control access to readers. If you provide a location, the ConnectionToken is only usable with readers assigned to that location. If you don’t provide a location, the ConnectionToken is usable with all readers.\n\n`curl https://api.stripe.com/v1/terminal/connection_tokens \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d location=  {{LOCATION_ID}}    `\n\n### Create PaymentIntents Client-side Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen creating a PaymentIntent using destination charges, provide the [on\\_behalf\\_of](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-on_behalf_of) and [transfer\\_data\\[destination\\]](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-transfer_data-destination), and [application\\_fee\\_amount](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-application_fee_amount) parameters.\n\nThe `on_behalf_of` parameter is the ID of the connected account that will become the settlement merchant for the payment. For Terminal transactions, this parameter **must** be set in cases where the platform country isn’t the same as the Connect account country. When `on_behalf_of` is set, Stripe automatically:\n\n*   Settles charges in the country of the specified account, thereby minimizing declines and avoiding currency conversions.\n*   Uses the fee structure for the connected account’s country.\n*   Lists the connected account’s address and phone number on the customer’s credit card statement, as opposed to the platform’s address and phone number (only occurs if the account and platform are in different countries).\n\nFor `transfer_data[destination]`, set the ID of the connected account that receives the transfer.\n\nFinally, you may withhold an application fee for your platform by providing the [application\\_fee\\_amount](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-application_fee_amount) parameter.\n\n#### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the iOS, Android, and React Native SDKs, you can create a PaymentIntent client-side and provide the `onBehalfOf`, `transferDataDestination`, and `applicationFeeAmount` parameters.\n\n#### Note\n\nClient-side `PaymentIntent` creation is possible with the iOS or Android SDKs. If you’re using the JavaScript SDK for Stripe Terminal, create a `PaymentIntent` server-side.\n\n#### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe JavaScript SDK requires you to create the PaymentIntent on your server. For iOS or Android, you want to create the PaymentIntent on your server if the information required to start a payment isn’t readily available in your app. For more information, see [Create Payment Intents Server-side](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=js#create-payment).\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card_present \\  -d capture_method=manual \\  -d application_fee_amount=200 \\  -d on_behalf_of=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}    `",
    "title": "Use Terminal with Connect | Stripe Documentation",
    "description": "Integrate Stripe Terminal with your Connect platform.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/payments/regional",
    "markdown": "# Regional considerations | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about regional considerations for integrating Terminal in different countries.\n\n​​For the most part, you’ll be able to use a single Terminal integration in all supported countries. However, due to local payment methods or regulations there are some country-specific requirements. After going through the [sample integration](https://docs.stripe.com/terminal/quickstart), use this guide to learn about country-specific requirements for Terminal.\n\n#### Note\n\nIn order to process Terminal payments, both the Stripe account receiving the funds and the [location](https://docs.stripe.com/terminal/fleet/locations-and-zones) associated with the reader must be in the same country, accepting local currency only.\n\n## Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRefer to the following table to understand which readers and SDK platforms you can use in each country.\n\n| Countries | Android\\*\\* | iOS\\*\\* | JavaScript | Server-Driven |\n| --- | --- | --- | --- | --- |\n| United States | ![](https://b.stripecdn.com/docs-statics-srv/assets/84052c4398178d23ae59cfdfd4c1a4e3.png)<br><br>Stripe Reader M2<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/84052c4398178d23ae59cfdfd4c1a4e3.png)<br><br>Stripe Reader M2<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart |\n| Canada<br><br>Italy<br><br>Netherlands | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay\\*<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay\\*<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700\\*<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart |\n| United Kingdom | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700\\*<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart |\n| Austria+<br><br>Belgium<br><br>Czech Republic+<br><br>Denmark<br><br>Finland+<br><br>Ireland<br><br>Luxembourg+<br><br>Malaysia+<br><br>Norway+<br><br>Portugal+<br><br>Spain<br><br>Sweden<br><br>Switzerland+ | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay\\*<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700\\*<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart |\n| New Zealand+<br><br>Singapore | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700\\*<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart |\n| Australia | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay\\*<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700\\*<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/82164fdc231fdbe1b4e24dfc17c9ac63.png)<br><br>WisePOS E<br><br>Smart |\n| France<br><br>Germany | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth or USB<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay\\*<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/ba9684bdc9a5096c66da38a228968305.png)<br><br>WisePad 3<br><br>Bluetooth<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart<br><br>![](https://b.stripecdn.com/docs-statics-srv/assets/cbf74926d4a083809dadd9b11bd16740.png)<br><br>Tap to Pay\\*<br><br>Embedded | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700<br><br>Smart | ![](https://b.stripecdn.com/docs-statics-srv/assets/42b650b92fa5647632d194573102d0e3.png)<br><br>Stripe Reader S700\\*<br><br>Smart |\n\n+Terminal is currently in beta in this country.\n\n\\*This Terminal integration shape is currently in beta.\n\n\\*\\*Compatibility for this mobile SDK also applies when used with React Native.\n\n## Integrate Terminal in the United States![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe supports Visa, Mastercard, American Express, and Discover payments in the United States. All transactions must be made in US dollars (USD). To accept Terminal charges in the United States, either your platform account or connected account must be in the United States.\n\n### Use locations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreate [Locations](https://docs.stripe.com/api/terminal/locations/create) for your business with addresses in the United States and [associate your readers to them](https://docs.stripe.com/terminal/fleet/locations-and-zones). This will ensure that they automatically download the configuration needed to properly process charges in the United States.\n\nA valid [address for a Location](https://docs.stripe.com/api/terminal/locations/create#create_terminal_location-address) in the United States must contain the `line1`, `city`, `state`, `postal_code`, and `country` properties.\n\n`curl https://api.stripe.com/v1/terminal/locations \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"display_name\"=\"HQ\" \\   -d \"address[line1]\"=\"1272 Valencia Street\" \\   -d \"address[city]\"=\"San Francisco\" \\   -d \"address[state]\"=\"CA\" \\   -d \"address[country]\"=\"US\" \\   -d \"address[postal_code]\"=\"94110\" \\`",
    "title": "Regional considerations | Stripe Documentation",
    "description": "Learn about regional considerations for integrating Terminal in different countries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/payments/collect-card-payment",
    "markdown": "# Collect card payments | Stripe DocumentationThe Stripe Docs logo\n\nFor BBPOS WisePOS E and Stripe Reader S700, we recommend server-side integration because it uses the Stripe API instead of a Terminal SDK to collect payments.\n\nCollecting payments with Stripe Terminal requires writing a payment flow in your application. Use the Stripe Terminal SDK to create and update a [PaymentIntent](https://docs.stripe.com/api#payment_intents), an object representing a single payment session.\n\nWhile the core concepts are similar to SDK-based integrations, you follow slightly different steps with the server-driven integration:\n\n1.  [Create a PaymentIntent](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#create-payment). You can define whether to [automatically](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) or [manually](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method) capture your payments.\n2.  [Process the payment](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#process-payment). Authorization on the customer’s card takes place when the reader processes the payment.\n3.  (Optional) [Capture the PaymentIntent](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#capture-payment)\n\n[](#create-payment)\n\nThe first step in collecting payments is to start the payment flow. When a customer begins checking out, your backend must create a [PaymentIntent](https://docs.stripe.com/api/payment_intents) object that represents a new payment session on Stripe. With the server-driven integration, you create the PaymentIntent server-side.\n\nIn test mode, you can use [test amounts](https://docs.stripe.com/terminal/references/testing#standard-test-cards) to simulate different error scenarios. In live mode, the amount of the PaymentIntent displays on the reader for payment.\n\nFor Terminal payments, the `payment_method_types` parameter must include `card_present`.\n\nTo accept Interac payments in Canada, you must also include `interac_present` in `payment_method_types`. Learn about [regional considerations for Canada](https://docs.stripe.com/terminal/payments/regional?integration-country=CA#create-a-paymentintent).\n\nYou can control the payment flow as follows:\n\n*   To fully control the payment flow for `card_present` payments, set the `capture_method` to `manual`. This allows you to add a reconciliation step before finalizing the payment.\n*   To authorize and capture payments in one step, set the `capture_method` to `automatic`.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d currency=usd \\  -d \"payment_method_types[]\"=card_present \\  -d capture_method=manual \\  -d amount=1000`\n\n[](#process-payment)\n\nYou can process a payment immediately with the card presented by a customer, or instead inspect card details before proceeding to process the payment. For most use cases, we recommend processing immediately, as it is a simpler integration with less API calls and webhook events. However, if you would like to insert your own business logic before the card is authorized, you can use the two-step collect-and-confirm flow.\n\nAfter you create a PaymentIntent, the next step is to process the payment. The reader prompts the customer to insert or tap their card and then authorizes the payment.\n\nTo collect payment, make a request to Stripe with the ID of the PaymentIntent you created and the reader you want to use for the transaction.\n\n`curl https://api.stripe.com/v1/terminal/readers/tmr_xxx/process_payment_intent \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_intent=pi_xxx`\n\nProcessing the payment happens asynchronously. A cardholder might take a few seconds to get their card from their wallet or pose a question to the operator during payment. When you process a payment, Stripe immediately responds to the request with an HTTP `200` status code and returns a [reader](https://docs.stripe.com/api/terminal/readers) with an action status of `in_progress`.\n\nSimultaneously, the reader screen switches to a UI that prompts the customer to insert their card. To [verify the reader state](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#verify-reader), listen to the `terminal.reader.action_succeeded` webhook or poll the Reader and PaymentIntent status to receive the status of the payment.\n\n`curl https://api.stripe.com/v1/terminal/readers/tmr_xxx \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n`{   \"id\": \"tmr_xxx\",   \"object\": \"terminal.reader\",   ...   \"status\": \"online\",   \"action\": {     \"type\": \"process_payment_intent\",     \"process_payment_intent\": {       \"payment_intent\": \"pi_xxx\"     },     \"status\": \"in_progress\",     \"failure_code\": null,     \"failure_message\": null   } }`\n\nIf you’re using a simulated reader, use the [present\\_payment\\_method](https://docs.stripe.com/terminal/references/testing#simulated-card-presentment) endpoint to simulate a cardholder tapping or inserting their card on the reader. Use [test cards](https://docs.stripe.com/terminal/references/testing#standard-test-cards) to simulate different success or failure scenarios.\n\n[](#capture-payment)\n\nIf you defined `capture_method` as `manual` during PaymentIntent creation in [Step 1](#create-payment), the SDK returns an authorized but not captured PaymentIntent to your application. Learn more about the difference between [authorization and capture](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method). When your application receives a confirmed PaymentIntent, make sure it notifies your backend to capture the PaymentIntent. To do so, create an endpoint on your backend that accepts a PaymentIntent ID and sends a request to the Stripe API to capture it.\n\n`curl -X POST https://api.stripe.com/v1/payment_intents/pi_xxx/capture \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nA successful capture call results in a PaymentIntent with a status of `succeeded`.\n\n#### Warning\n\nYou must manually capture `PaymentIntents` within two days or the authorization expires and funds are released to the customer.\n\n[](#verify-reader)\n\nTo make sure the reader completed an action, your application must verify the reader state before initiating a new reader action or continuing to capture the payment. In most cases, this verification allows you to confirm a successful (approved) payment and show any relevant UX to your operator for them to complete the transaction. In other cases, you might need to [handle errors](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=api#handle-errors), including declined payments.\n\nUse one of the following to check the reader status:\n\n*   [Listen to webhooks](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#webhooks)\n*   [Poll the Stripe API](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#stripe-api)\n*   [Use the PaymentIntent](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#payment-intent)\n*   [Use the reader object](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#reader-object)\n\n#### Listen to webhooks Recommended![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor maximum resiliency, we recommend your application listens to [webhooks](https://docs.stripe.com/webhooks) from Stripe to receive real-time notifications of the reader status. Stripe sends three webhooks to notify your application of a reader’s action status:\n\n| Status | Description |\n| --- | --- |\n| `terminal.reader.action_succeeded` | Sent when a reader action succeeds, such as when a payment is authorized successfully. |\n| `terminal.reader.action_failed` | Sent when a reader action fails, such as when a card is declined due to insufficient funds. |\n| `terminal.reader.action_updated` Beta | Sent when a reader action is updated, such as when a payment method is collected (only triggered for the `collect_payment_method` action). |\n\nTo listen for these webhooks, create a [webhook](https://docs.stripe.com/webhooks) endpoint. We recommend having a dedicated webhook endpoint for only these events because they’re high priority and in the critical payment path.\n\nTo retrieve `terminal.reader.action_updated` events, webhook endpoints must have the `terminal_collect_confirm_beta` beta header set. Create webhooks to have the same API version and beta header as your `collect_payment_method` and `confirm_payment_intent` calls.\n\n`curl https://api.stripe.com/v1/webhook_endpoints \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"enabled_events[]\"=\"terminal.reader.action_succeeded\" \\  -d \"enabled_events[]\"=\"terminal.reader.action_failed\" \\   --data-urlencode url=\"[https://example.com/my/webhook/endpoint](https://example.com/my/webhook/endpoint)\"`\n\n#### Poll the Stripe API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn case of webhook delivery issues, you can poll the Stripe API by adding a `check status` button to your point of sale interface that the operator can invoke, if needed.\n\n#### Use the PaymentIntent ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can retrieve the PaymentIntent that you passed to the reader for processing. When you create a PaymentIntent it has an initial status of `requires_payment_method`. After you successfully collect the payment method, the status updates to `requires_confirmation`. After the payment processes successfully, the status updates to `requires_capture`.\n\n`curl https://api.stripe.com/v1/payment_intents/`\n\n`{{PAYMENT_INTENT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\n#### Use the reader object ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use the [Reader](https://docs.stripe.com/api/terminal/readers/object) object, which contains an [action](https://docs.stripe.com/api/terminal/readers/object#terminal_reader_object-action) attribute that shows the latest action received by the reader and its status. Your application can [retrieve a Reader](https://docs.stripe.com/api/terminal/readers/retrieve) to check if the [status](https://docs.stripe.com/api/terminal/readers/object#terminal_reader_object-action-status) of the reader action has changed.\n\n`curl https://api.stripe.com/v1/terminal/readers/tmr_xxx \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nThe Reader object is also returned as the response to the process payment step. The `action` type when processing a payment is `process_payment_intent`.\n\nThe `action.status` updates to `succeeded` for a successful payment. This means you can proceed with completing the transaction. Other values for `action.status` include `failed` or `in_progress`.\n\n[\n\n## Handle errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-errors)\n\nThe following errors are the most common types your application needs to handle:\n\n*   [Avoiding double charges](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#avoiding-double-charges)\n*   [Payment failures](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#payment-failures)\n*   [Payment timeout](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#payment-timeout)\n*   [Payment cancellation](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#payment-cancellation)\n*   [Reader busy](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#reader-busy)\n*   [Reader timeout](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#reader-timeout)\n*   [Reader offline](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#reader-offline)\n*   [Missing webhooks](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#missing-webhooks)\n*   [Delayed webhooks](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#delayed-webhooks)\n\n### Avoiding double charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe PaymentIntent object enables money movement at Stripe—use a single PaymentIntent to represent a transaction.\n\nRe-use the same PaymentIntent after a card is declined (for example, if it has insufficient funds), so your customer can try again with a different card.\n\nIf you edit the PaymentIntent, you must call [process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent) to update the payment information on the reader.\n\nA PaymentIntent must be in the `requires_payment_method` state before Stripe can process it. An authorized, captured, or canceled PaymentIntent can’t be processed by a reader and results in an `intent_invalid_state` error:\n\n`curl https://api.stripe.com/v1/terminal/readers/tmr_xxx/process_payment_intent \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_intent=pi_xxx`\n\n### Payment failures ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe most common payment failure is a failed payment authorization (for example, a payment that’s declined by the customer’s bank due to insufficient funds).\n\nWhen a payment authorization fails, Stripe sends the `terminal.reader.action_failed` webhook. Check the [action.failure\\_code](https://docs.stripe.com/api/terminal/readers/object#terminal_reader_object-action-failure_code) and [action.failure\\_message](https://docs.stripe.com/api/terminal/readers/object#terminal_reader_object-action-failure_message) attributes to know why a payment is declined:\n\n`{   \"id\": \"tmr_xxx\",   \"object\": \"terminal.reader\",   \"action\": {     \"failure_code\": \"card_declined\",     \"failure_message\": \"Your card has insufficient funds.\",     \"process_payment_intent\": {       \"payment_intent\": \"pi_xxx\"     },     \"status\": \"failed\",     \"type\": \"process_payment_intent\"   },   ... }`\n\nIn the case of a declined card, prompt the customer for an alternative form of payment. Use the same PaymentIntent in another request to the [process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/object#terminal_reader_object-action-process_payment_intent) endpoint. If you create a new PaymentIntent, you must [cancel](https://docs.stripe.com/api/payment_intents/cancel) the failed PaymentIntent to prevent double charges.\n\nFor card read errors (for example, an error reading the chip), the reader automatically prompts the customer to retry without any notification to your application. If multiple retries fail, you can prompt for another payment method by making another [process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/object#terminal_reader_object-action-process_payment_intent) request.\n\n### Payment timeout ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA reader with unreliable internet connectivity can fail to process a payment because of a networking request timeout when authorizing the card. The reader shows a processing screen for several seconds, followed by a failure screen, and you receive a `terminal.reader.action_failed` webhook with a `failure_code` of `connection_error`:\n\n`{   \"id\": \"tmr_xxx\",   \"object\": \"terminal.reader\",   \"action\": {     \"failure_code\": \"connection_error\",     \"failure_message\": \"Could not connect to Stripe.\",     \"process_payment_intent\": {       \"payment_intent\": \"pi_xxx\"     },     \"status\": \"failed\",     \"type\": \"process_payment_intent\"   },   ... }`\n\nThe payment confirmation request might have been processed by Stripe’s backend systems, but the reader might have disconnected before receiving the response from Stripe. When receiving a webhook with this failure code, fetch the PaymentIntent `status` to verify if the payment is successfully authorized.\n\nMake sure your network meets our [network requirements](https://docs.stripe.com/terminal/network-requirements) to minimize timeouts.\n\n### Payment cancellation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Programmatic cancellation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou might need to cancel an in-flight payment. For example, if a customer adds items to their purchase after your integration has already initiated payment collection on the reader. Use the [cancel\\_action](https://docs.stripe.com/api/terminal/readers/object#terminal_reader_object-action-cancel_action) endpoint to reset the reader:\n\n`curl -X POST https://api.stripe.com/v1/terminal/readers/tmr_xxx/cancel_action \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n#### Note\n\nYou can’t cancel a reader action in the middle of a payment authorization. If a customer has already presented their card to pay on the reader, you must wait for processing to complete. An authorization normally takes a few seconds to complete. Calling [cancel\\_action](https://docs.stripe.com/api/terminal/readers/object#terminal_reader_object-action-cancel_action) during an authorization results in a `terminal_reader_busy` error.\n\n#### Customer-initiated cancellation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsers can set the value of `enable_customer_cancellation` on these endpoints:\n\n*   [`process_payment_intent`](https://docs.stripe.com/api/terminal/readers/process_payment_intent)\n*   [`process_setup_intent`](https://docs.stripe.com/api/terminal/readers/process_setup_intent)\n*   [`collect_payment_method`](https://docs.stripe.com/api/terminal/readers/collect_payment_method)\n*   [`refund_payment`](https://docs.stripe.com/api/terminal/readers/refund_payment)\n\n`curl https://api.stripe.com/v1/terminal/readers/tmr_xxx/process_payment_intent \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_intent=pi_xxx \\  -d \"process_config[enable_customer_cancellation]\"=true`\n\nWhen set to true, smart reader users see a cancel button.\n\n![Payment collection screen with customer cancellation button](https://b.stripecdn.com/docs-statics-srv/assets/customer-cancellation-light-mode.c9ff8361795a2bf4d9e307eee8669775.png)\n\nPayment collection with cancellation enabled\n\nTapping the cancel button cancels the active transaction. Stripe sends a `terminal.reader.action_failed` webhook with a failure\\_code of `customer_canceled`.\n\n`{   \"action\": {     \"failure_code\": \"customer_canceled\",     \"failure_message\": \"This action could not be completed due to an error on the card reader.\",     \"process_payment_intent\": {       \"payment_intent\": \"pi_xxx\",       \"process_config\": {         \"enable_customer_cancellation\": true       }     },     \"status\": \"failed\",     \"type\": \"process_payment_intent\"   } }`\n\n### Reader busy ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA reader can only process one request at a time. If you make two API requests to the same reader in parallel, one of them fails with a `terminal_reader_busy` error:\n\n`curl https://api.stripe.com/v1/terminal/readers/tmr_xxx/process_payment_intent \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_intent=pi_xxx`\n\nA reader also rejects an API request if it’s busy performing updates or changing settings.\n\n### Reader timeout ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn rare occasions, a reader might fail to respond to an API request on time because of temporary networking issues. If this happens, you receive a `terminal_reader_timeout` error code:\n\n`curl https://api.stripe.com/v1/terminal/readers/tmr_xxx/process_payment_intent \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_intent=pi_xxx`\n\nIn this case, we recommend you retry the API request. Make sure your network meets our [network requirements](https://docs.stripe.com/terminal/network-requirements) to minimize timeouts.\n\nOn rare occasions, a `terminal_reader_timeout` error code is a false negative. In this scenario, you receive a `terminal_reader_timeout` error from the API as described above, but the reader has actually received the command successfully. False negatives happen when Stripe sends a message to the reader, but doesn’t receive an acknowledgement back from the reader due to temporary networking failures.\n\n### Reader offline ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA location losing its internet connection might result in interrupted communication between the reader and Stripe. In this case, a reader is unresponsive to events initiated from your point of sale application and backend infrastructure.\n\nA reader that consistently fails to respond to API requests is most likely powered off (for example, the power cord is disconnected or it’s out of battery) or not correctly connected to the internet.\n\nA reader is considered offline if Stripe hasn’t received any signal from that reader in the past 2 minutes. Attempting to call API methods on a reader that’s offline results in a `terminal_reader_offline` error code:\n\nRefer to our [network requirements](https://docs.stripe.com/terminal/network-requirements) to make sure a reader is correctly connected to the internet.\n\n### Missing webhooks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen a reader disconnects in the middle of a payment, it can’t update its action status in the API. In this scenario, the reader shows an error screen after a card is presented. However, the Reader object in the API doesn’t update to reflect the failure on the device, and you also don’t get reader action webhooks. A reader might be left with an action status of `in_progress` when this happens, and a cashier has to intervene by calling the [cancel\\_action](https://docs.stripe.com/api/terminal/readers/object#terminal_reader_object-action-cancel_action) endpoint to reset the reader state.\n\n### Delayed webhooks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn rare occasions, if Stripe is having an outage, reader action webhooks might be late. You can query the status of the Reader or the PaymentIntent objects to know what their latest state is.\n\n[](#webhook-events)\n\n| Webhook | Description |\n| --- | --- |\n| `terminal.reader.action_succeeded` | Sent when an asynchronous action succeeds. Sent for actions that need card presentment, such as `process_payment_intent`, `confirm_payment_intent`, `process_setup_intent`, and `refund_payment`. |\n| `terminal.reader.action_failed` | Sent when an asynchronous action fails. Sent for actions that need card presentment such as `process_payment_intent`, `process_setup_intent`, `refund_payment`. No webhook is sent for the `set_reader_display` and `cancel_action` actions. Your integration must [handle these errors](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#handle-errors). |\n| `terminal.reader.action_updated` | Sent when an asynchronous action is updated. Sent for actions such as `collect_payment_method`. |",
    "title": "Collect card payments | Stripe Documentation",
    "description": "Prepare your application and backend to collect card payments using Stripe Terminal.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/collecting-tips/overview",
    "markdown": "# Collect tips | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the different ways you can collect tips from customers.\n\nUse Terminal to collect tips from your customer before or after authorizing a payment. You can collect voluntary tips in two ways:\n\n*   [On-receipt tipping](https://docs.stripe.com/terminal/features/collecting-tips/on-receipt): Tips are collected when the payment is captured. This method is most commonly used when collecting tips on printed paper receipts.\n*   [On-reader tipping](https://docs.stripe.com/terminal/features/collecting-tips/on-reader): The card reader suggests tips to customers before collecting payment.\n\nFor mandatory tips, you must include the tip amount in the original `PaymentIntent` [amount](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount). You can’t use on-receipt or on-reader tipping.\n\n## On-receipt versus on-reader tipping![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe table below outlines some differences between on-receipt tipping and on-reader tipping.\n\n|     | On-reader tipping | On-receipt tipping |\n| --- | --- | --- |\n| Country | BBPOS WisePad 3:<br><br>Available in:<br><br>Stripe Reader S700 and BBPOS WisePOS E:<br><br>Available in: |     |\n| Reader | [BBPOS WisePad 3](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepad3)<br><br>[BBPOS WisePOS E](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepos-e)<br><br>[Stripe Reader S700](https://docs.stripe.com/terminal/readers/stripe-reader-s700) | Any |\n| Integrations/SDKs | BBPOS WisePad 3:<br><br>*   Android SDK<br>*   iOS SDK<br>*   React Native SDK<br><br>BBPOS WisePOS E and Stripe Reader S700:<br><br>*   All SDKs (JS, iOS, Android, React Native), server-driven | All SDKs (JS, iOS, Android, React Native), server-driven |\n| Merchant category | Any | Restricted |\n| Card brand | Any | Visa, Mastercard, American Express, Discover |\n| Tipping limit | [Maximum charge amount](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts) for the total amount inclusive of the tip, which is eight or nine digits depending on the currency | [Maximum charge amount](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts) for the total amount inclusive of the tip |\n| Customer experience | Tips suggested on the reader | Tips set with custom integration on the point of sale or on a paper receipt |\n| Customer credit card statement | Shows the payment amount inclusive of the tip, without waiting for settlement | Shows an initial pending authorization that’s later updated to reflect the initial amount inclusive of the tip |\n\n## How tips are displayed on-receipt or on-reader ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn-receipt and on-reader tipping use the [PaymentIntents](https://docs.stripe.com/api/payment_intents) API, work with all Terminal SDKs ([JavaScript](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=js), [iOS](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=ios), [Android](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=android), [React Native](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=react-native)) and [server-driven integrations](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=server-driven), and require [manual capture](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method).\n\n#### Caution\n\nChoose only one tipping method per `PaymentIntent`. If you use on-reader tipping, you can’t use the same `PaymentIntent` for on-receipt tipping.\n\nThe table below summarizes the specific API behavior.\n\n|     | On-reader tipping | On-receipt tipping |\n| --- | --- | --- |\n| Tips in the API request | The reader automatically adds the customer-selected tip when processing a payment. | You add the tip amount and pass the total [amount\\_to\\_capture](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-amount_to_capture) when [capturing a PaymentIntent](https://docs.stripe.com/api/payment_intents/capture). The `amount_to_capture` field is inclusive of the tip. |\n| Tips and API response amount | The [amount\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_details) object appears in the API response when processing a payment. The tip amount is returned in the `amount_details` object. | Tips aren’t directly represented but can be derived from the [Charge](https://docs.stripe.com/api/charges/object) object. The `amount` in the `PaymentIntent` capture response is inclusive of the tip. |\n| Tips in the underlying `Charge` object | Tips aren’t directly represented in the `Charge` object.<br><br>After capture, the fields below all show the same value inclusive of the tip.<br><br>*   [amount](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-amount)<br>*   [amount\\_authorized](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-amount_authorized)<br>*   [amount\\_captured](https://docs.stripe.com/api/charges/object#charge_object-amount_captured) | Tips can be derived from the `Charge` object. You can derive the tip by subtracting `amount_authorized` from `amount`.<br><br>*   `amount_authorized` is the original authorized amount exclusive of the tip.<br>*   `amount_captured` and `amount` are the same and both are inclusive of the tip. |",
    "title": "Collect tips | Stripe Documentation",
    "description": "Learn about the different ways you can collect tips from customers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/network-requirements",
    "markdown": "# Stripe Terminal network requirements | Stripe DocumentationThe Stripe Docs logo\n\n## Make sure your network is ready for Terminal, and troubleshoot common issues.\n\nTerminal network requirements vary depending on the readers you use and the way you build your integration.  If your network doesn’t meet the requirements outlined below, your Terminal integration won’t work as expected.\n\nIf you plan to use Terminal readers in remote locations with unfamiliar or unknown network conditions, be prepared to handle unexpected network-related issues.  When using smart readers, we recommend a [server-driven integration](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=server-driven) to minimize the number of potential network issues you might encounter.\n\n## Bluetooth readers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Bluetooth readers](https://docs.stripe.com/terminal/bluetooth-readers) rely on your point of sale device for internet connectivity and have the following network requirements:\n\n*   Your point of sale device must be connected to the internet, and must be able to connect to [Stripe’s infrastructure](https://docs.stripe.com/ips).\n*   The operating environment must be free of interference that prevents Bluetooth devices from working normally (for example, excessive microwave oven use produces interference on the 2.4GHz band, and can disrupt Bluetooth connections).\n\n## Smart readers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Smart readers](https://docs.stripe.com/terminal/smart-readers) connect directly to your network and use that connection to access the internet and Stripe. When using one of our Terminal SDKs, your point of sale device and the smart reader also communicate directly with each other over your local network.\n\nSmart readers have the following network requirements:\n\n*   Your network must support IPv4.\n    *   IPv6-only networks aren’t supported.\n    *   Some readers can connect to IPv6 networks through DHCP, but must also be assigned an IPv4 address. Changing advanced settings such as static IP, router, subnet mask, and DNS are not supported with IPv6.\n*   Terminal readers must be assigned a [private IP address](https://en.wikipedia.org/wiki/Private_network).\n*   Both the Terminal reader and your point of sale device must be able to connect to [Stripe’s infrastructure](https://docs.stripe.com/ips).\n*   If your Terminal readers support both WiFi and Ethernet, use one or the other, not both—attempting to use WiFi and Ethernet at the same time results in an unstable connection and intermittent downtime.\n    *   If you use WiFi, you can use a dock without connecting an Ethernet cable (for example, for charging or accessories only).\n*   WiFi networks must use WPA/WPA2/WPA3-Personal or WPA2/WPA3 EAP-PEAP Enterprise encryption, and must be password protected.\n    *   Verifone P400 readers only support WPA-Personal or WPA2-Personal encryption.\n*   Ethernet networks must support 10/100 Ethernet devices.\n*   If your network uses dynamic IP address assignment, your DHCP server configuration needs to allow Terminal readers to retain the same IP address for at least an entire workday.\n*   If your network limits the duration of network sessions (including idle sessions), the minimum session length for Terminal readers must be at least an entire workday.\n*   If you use one of our Terminal SDKs on a separate point of sale device (for example, not an app running on the Terminal reader itself), you must also meet the following requirements:\n    *   The reader must be on the same local network as your point of sale device.\n    *   The reader must be able to communicate directly with your point of sale device through your local network.\n    *   The DNS servers used by your point of sale device must be able to resolve internet-routable hostnames to local IP addresses.\n\n## Troubleshooting ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen network-related issues occur, experienced personnel should be physically present to diagnose and correct problems.  Make sure you account for this when planning your Terminal integration, deployment, and maintenance.\n\n#### Note\n\nBecause of the large variety of network configurations and infrastructure, Stripe can only help with basic network questions. The operation and troubleshooting of your network is your responsibility.\n\nIf you encounter an issue, determine whether the cause is the network or something else.  You can rule out the network as the cause of an issue by temporarily moving one or more of your Terminal readers and point of sale devices to a different network and internet connection—then check to see if the same issue occurs there. Mobile hotspots work well for this kind of testing.\n\nIf the issue persists on a different network and Internet connection, perform additional testing and debugging of your integration’s code.  If you need help, [contact support](https://support.stripe.com/contact) and provide as much technical detail as possible (for example, error messages, logs, and so on).\n\nIf the issue only happens on your network, try the following:\n\n*   Make sure your network meets all of the requirements listed above, especially if anything about the network has changed recently.\n*   Check your firewall and other security configurations to make sure access to [Stripe’s infrastructure](https://docs.stripe.com/ips) isn’t being blocked.\n*   Try a different connection for both the Terminal reader and your point of sale device (for example, switch from WiFi to Ethernet).\n*   For WiFi, make sure all devices have good signal strength.\n*   For Ethernet, try using different network cables.\n*   Confirm smart readers have the expected IP and subnet assigned.\n*   If you’re using smart readers and our Terminal SDK on a separate point of sale device:\n    *   On your point of sale device, try resolving `10-42-42-42.test.device.stripe-terminal-local-reader.net` to an IP address. That hostname should resolve to the IP `10.42.42.42`. If it resolves to a different IP, or if DNS resolution fails, configure your point of sale device to use [Cloudflare DNS servers](https://1.1.1.1/dns/) (`1.1.1.1` and `1.0.0.1`) or [Google DNS servers](https://developers.google.com/speed/public-dns) (`8.8.8.8` and `8.8.4.4`) and try again.\n    *   Check your router’s configuration to see if connections between wireless (WiFi) clients and wired (Ethernet) clients are being blocked.\n    *   Make sure you can ping the Terminal reader’s IP address from your point of sale device.",
    "title": "Stripe Terminal network requirements | Stripe Documentation",
    "description": "Make sure your network is ready for Terminal, and troubleshoot common issues.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/bluetooth-readers",
    "markdown": "# Stripe Terminal Bluetooth readers | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Stripe's pre-certified in-person payment readers.\n\nTerminal’s Bluetooth readers work with iOS, Android, and React Native SDKs and use Bluetooth Low Energy or USB (on Android devices only) to connect to the SDKs on a mobile device.\n\n## Reader software updates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe and our hardware partners periodically release reader software updates, which can include improvements and required security updates. Bluetooth readers update themselves automatically upon connection to your point of sale. You must support updating the readers from your application. Failing to install a required update can prevent a reader from accepting payments.\n\n#### Note\n\nBluetooth readers force a reboot and disconnect from the POS app 24 hours after the last boot.",
    "title": "Stripe Terminal Bluetooth readers | Stripe Documentation",
    "description": "Learn about Stripe's pre-certified in-person payment readers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/collect-inputs",
    "markdown": "# Collect Inputs | Stripe DocumentationThe Stripe Docs logo\n\n## Collect InputsBeta\n\n## Use Terminal to collect inputs from your customers.\n\n**Available in:** 🌎 for [Stripe S700](https://docs.stripe.com/terminal/readers/stripe-reader-s700) and [BBPOS WisePOS E](https://docs.stripe.com/terminal/readers/bbpos-wisepos-e) using [server-driven integration](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=server-driven), [Javascript SDK](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=js), [iOS SDK](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=ios), or [Android SDK](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=android), or [React Native](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=react-native).\n\n#### Note\n\nThis feature was formerly known as On-Reader Forms. To request access to the Collect Inputs beta for server-driven, JavaScript SDK, iOS SDK, Android SDK, or React Native email us at [stripe-terminal-betas@stripe.com](mailto:stripe-terminal-betas@stripe.com)\\]\n\n[](#collect-inputs)\n\nIn addition to collecting payments, Terminal smart readers allow you to display forms and collect information from customers. You make requests to the Stripe API, and the API communicates with the reader to display a prebuilt UI to collect customer input. Stripe notifies your backend of the customer’s responses using [webhooks](https://docs.stripe.com/webhooks \"webhook\").\n\nTo collect inputs using Terminal’s smart readers, use the [collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs) command. You can specify up to 5 inputs at a time, and the reader collects them in sequence. Stripe smart readers currently support six input types:\n\n*   The `selection` input type allows you to display up to 4 choices for a customer to select from.\n*   The `signature` input type allows you to collect a signature using the reader’s touchscreen.\n*   The `email` input type allows you to collect an email address from a customer.\n*   The `phone` input type allows you to collect a phone number from a customer.\n*   The `text` input type allows you to collect additional information from customers.\n*   The `numeric` input type allows you to collect additional information from customers.\n\n![Supported input types.](https://b.stripecdn.com/docs-statics-srv/assets/collect-inputs-form-types.9715c2bbc0105378c9c4a5e8e1c4eb59.png)\n\nSupported input types.\n\nYou can customize the appearance and behavior of all input types:\n\n*   Set important inputs as [required](https://docs.stripe.com/api/terminal/readers/collect_inputs#collect_inputs-inputs-required) to make sure they’re collected. For required inputs, the skip button is hidden.\n*   Provide context to your customer by specifying the text you want to display on the reader screen for each input using [custom\\_text](https://docs.stripe.com/api/terminal/readers/collect_inputs#collect_inputs-inputs-custom_text).\n*   Add up to 4 [toggles](https://docs.stripe.com/api/terminal/readers/collect_inputs#collect_inputs-inputs-toggles) that customers can enable or disable for boolean options, agreements, or opt-ins.\n\n![Toggles in email and selection form](https://b.stripecdn.com/docs-statics-srv/assets/collect-inputs-toggle.3183c0c14cc916374d588ba54ad34639.png)\n\nEmail and selection form with toggle\n\nAdditional customization is available for [selection](https://docs.stripe.com/api/terminal/readers/collect_inputs#collect_inputs-inputs-selection) inputs. When specifying the [choices](https://docs.stripe.com/api/terminal/readers/collect_inputs#collect_inputs-inputs-selection-choices) you want to display to the customer, you can emphasize or de-emphasize choices using the [style](https://docs.stripe.com/api/terminal/readers/collect_inputs#collect_inputs-inputs-selection-choices-style) parameter.\n\n![Selection choice styles](https://b.stripecdn.com/docs-statics-srv/assets/collect-inputs-choice-style.dc4d2fcb98ee649a29bc43df806c114a.png)\n\nPrimary and secondary selection choice styles\n\nIn addition to the list of inputs, you might want to include [metadata](https://docs.stripe.com/api/terminal/readers/collect_inputs#collect_inputs-metadata) in your request. The request payload includes the specified metadata, which appears in both the synchronous response and the success or failure webhooks. By including a unique identifier such as a customer ID or order ID, you can more easily identify and handle the incoming webhook.\n\n`curl https://api.stripe.com/v1/terminal/readers/`\n\n`{{READER_ID}}`\n\n`/collect_inputs \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Version: 2024-06-20; terminal_collect_inputs_beta=v1;\" \\   -d \"inputs[0][type]\"=signature \\  -d \"inputs[0][custom_text][title]\"=\"Rental Agreement\" \\  -d \"inputs[0][custom_text][description]\"=\"Please sign below to indicate that you agree to the rental agreement.\" \\  -d \"inputs[0][custom_text][submit_button]\"=Submit \\  -d \"inputs[0][required]\"=true \\  -d \"inputs[1][type]\"=selection \\  -d \"inputs[1][selection][choices][0][style]\"=primary \\  -d \"inputs[1][selection][choices][0][value]\"=Email \\  -d \"inputs[1][selection][choices][1][style]\"=primary \\  -d \"inputs[1][selection][choices][1][value]\"=Printed \\  -d \"inputs[1][selection][choices][2][style]\"=secondary \\  -d \"inputs[1][selection][choices][2][value]\"=\"No thanks\" \\  -d \"inputs[1][custom_text][title]\"=Receipt \\   --data-urlencode \"inputs[1][custom_text][description]\"=\"How would you like your receipt?\" \\  -d \"inputs[1][required]\"=true \\  -d \"inputs[2][type]\"=email \\  -d \"inputs[2][custom_text][title]\"=\"Enter your email\" \\   --data-urlencode \"inputs[2][custom_text][description]\"=\"We'll send updates on your order and occasional deals\" \\  -d \"inputs[2][required]\"=true \\  -d \"inputs[2][toggles][0][title]\"=\"Opt-in for marketing emails\" \\  -d \"inputs[2][toggles][0][default_value]\"=enabled \\  -d \"metadata[order_number]\"=12345`\n\n#### Beta\n\nYou must include the `terminal_collect_inputs_beta=v1` header to use the `collect_inputs` preview feature. The [reader](https://docs.stripe.com/api/terminal/readers/object) object won’t include the [collect\\_inputs](https://docs.stripe.com/api/terminal/readers/object#terminal_reader_object-action-collect_inputs) object in API responses if you omit the header.\n\n#### Note\n\nDon’t use `collect_inputs` to collect sensitive data (including protected health information and customer payment card information), or any information restricted by law.\n\n[](#customer-interaction)\n\nWhen the reader begins collecting inputs, it displays the first input from the list you specified to the customer. The customer must make a selection or provide a signature to proceed with required inputs. However, for optional inputs, the customer has the option to skip to the next requested input.\n\nAfter the customer has either submitted or skipped all inputs, Stripe updates the reader object and sends out the `terminal.reader.action_succeeded` webhook.\n\n#### Note\n\nYou are fully responsible for being aware of, and complying with all applicable laws and regulations governing your use of this feature, and must in relation to such use, obtain, as applicable, all necessary consents, authorizations, licenses, rights, and permissions. If you use input collected by, or output displayed from a Terminal smart reader to enter into contracts with, or provide notices to your customers, you are fully responsible for ensuring the legal validity and enforceability of such contracts or notices.\n\n[](#receive-input-data)\n\nUse the curl command below as an example to create a webhook endpoint to receive the collected inputs.\n\n`curl https://api.stripe.com/v1/webhook_endpoints \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   --header \"Stripe-Version: 2023-10-16; terminal_collect_inputs_beta=v1\" \\   --data-urlencode \"url\"=\"[https://example.com/webhook/endpoint](https://example.com/webhook/endpoint)\" \\   --data-urlencode \"api_version\"=\"2023-10-16;terminal_collect_inputs_beta=v1\" \\   --data-urlencode \"enabled_events[]\"=\"terminal.reader.action_succeeded\" \\   --data-urlencode \"enabled_events[]\"=\"terminal.reader.action_failed\"`\n\n#### Caution\n\nYou must create the webhook endpoint directly with Stripe’s [/v1/webhook\\_endpoints](https://docs.stripe.com/api/webhook_endpoints/create) API. The [collect\\_inputs object](https://docs.stripe.com/api/terminal/readers/object#terminal_reader_object-action-collect_inputs) doesn’t return complete results if you create the webhook endpoint with Stripe CLI or Stripe server-side SDKs. To make sure that the `collect_inputs` object is present in the webhook payload, include `terminal_collect_inputs_beta=v1` in the request header and set the `api_version` property when you [create the webhook endpoint](https://docs.stripe.com/api/webhook_endpoints/create).\n\nYou won’t be able to update an existing webhook to start listening to collected inputs, you must create a new one.\n\nWhen all inputs have been collected or skipped, Stripe sends a request to your webhook endpoint. The request payload is identical to the response when calling [collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs), but adds a few additional parameters:\n\n*   The `value` parameter is populated for each collected input.\n    *   For signature type inputs, the [value](https://docs.stripe.com/api/terminal/readers/object#terminal_reader_object-action-collect_inputs-inputs-signature-value) is a [file ID](https://docs.stripe.com/api/files/object#file_object-id) that [retrieves](https://docs.stripe.com/api/files/retrieve) the signature image as an SVG.\n    *   For selection type inputs, the [value](https://docs.stripe.com/api/terminal/readers/object#terminal_reader_object-action-collect_inputs-inputs-selection-value) is the string of the selected choice’s `value`.\n    *   For phone, email, text, and numeric inputs, the value is the string of the customer’s response.\n*   If an optional input is skipped by the customer, the [skipped](https://docs.stripe.com/api/terminal/readers/object#terminal_reader_object-action-collect_inputs-inputs-skipped) parameter is set to `true`.\n*   The `value` of each toggle is populated with `enabled` or `disabled`.\n\nSubscribe to webhooks to receive collected inputs as soon as they’re available. You can [retrieve the reader](https://docs.stripe.com/api/terminal/readers/retrieve) with the `terminal_collect_inputs_beta=v1` request header as a backup if your backend fails to consume the webhook.\n\nStripe sends two webhooks to notify your backend of the reader’s status:\n\n*   `terminal.reader.action_succeeded`: Sent when a `collect_inputs` action succeeds.\n*   `terminal.reader.action_failed`: Sent when a `collect_inputs` action fails. This includes timeouts, which occur after the reader screen isn’t touched for 2 minutes.\n\n[](#download-signature-images)\n\nTo receive the collected signature image, [retrieve the file](https://docs.stripe.com/api/files/retrieve) and use your secret key to access its [URL](https://docs.stripe.com/api/files/object#file_object-url).\n\n#### Note\n\nStripe stores the signature images you collect for 7 days. If you need to use signature images more than 7 days after collecting them, download the file and store it. You are fully responsible for being aware of and complying with all laws that apply to your use, storage, and disclosure of your customers’ signatures.\n\n## Beta SDK![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use one of Stripe’s [server-side SDKs](https://docs.stripe.com/libraries), you must install a beta version. For installation instructions, refer to the relevant GitHub page for the server SDK you want to use.\n\nYou also need to configure your SDK’s API version to include the beta header mentioned above. View [language-specific examples of how to accomplish this](https://docs.stripe.com/api/versioning).",
    "title": "Collect Inputs | Stripe Documentation",
    "description": "Use Terminal to collect inputs from your customers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/smart-readers",
    "markdown": "# Stripe Terminal smart readers | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Stripe's pre-certified in-person payment readers.\n\nTerminal’s smart readers are compatible with the JavaScript, iOS, Android, and React Native SDKs. In addition to the Terminal SDKs, the BBPOS WisePOS E and the Stripe Reader S700 are compatible with server-driven integration. Smart readers communicate with the SDKs and Stripe API over the internet.\n\n### Reader software updates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe maintains the software that controls smart readers. The readers receive updates automatically from Stripe when not in use. Leave your reader connected to power to receive automatic software updates. This ensures that updates happen at midnight (in the timezone of the assigned location) to avoid interruption to sales. If you unplug the reader at night, an update could start when you turn it back on. To manually check for an update, reboot the reader.\n\n#### Note\n\nSmart readers restart every day at midnight for PCI compliance, and disconnect from the POS app every morning.",
    "title": "Stripe Terminal smart readers | Stripe Documentation",
    "description": "Learn about Stripe's pre-certified in-person payment readers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/radar/rules/reference",
    "markdown": "# Rules reference | Stripe DocumentationThe Stripe Docs logo\n\n## Learn more about the structure of rules and the order in which Radar processes them.\n\nBefore creating a rule, you need to understand how they’re processed and what payment attributes you can use to set evaluation criteria. The Stripe machine-learning fraud systems can block many fraudulent payments for you, but you can also set up rules that are unique to your business using the [supported attributes](#supported-attributes).\n\n## Rule processing and ordering![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe action a rule takes determines the order in which it’s processed. [Radar](https://docs.stripe.com/radar \"Radar\") evaluates each payment against the rules you create and rules have the following order of priority:\n\n1.  **Request 3DS**: Rules that when used with the [Payment Intents API](https://docs.stripe.com/payments/payment-intents) or [Checkout](https://docs.stripe.com/payments/checkout), _request_ the issuer to do [3D Secure authentication](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") if supported. Radar evaluates these before any block, review, or allow rules.\n2.  **Allow**: Rules that _allow_ a payment to be processed. Payments that fall under allow rules aren’t evaluated against any block or review rules.\n3.  **Block**: Rules that _block_ a payment and reject it. Blocked payments aren’t evaluated against any review rules.\n4.  **Review**: Rules that allow payments to be processed but then place them in _review_.\n\nIf a payment matches the criteria for a rule, Radar takes the appropriate action and the payment isn’t evaluated any further. If a payment matches an allow rule, it’s processed normally–no block or review rules are subsequently evaluated, even if the payment would also meet their criteria. An example set of rules might be as follows:\n\n*   **Allow** payments less than `$10`\n*   **Allow** payments made within the US and with a risk level of `normal`\n*   **Block** payments where the risk level is `high`\n*   **Block** payments `greater than $1,000`\n*   **Review** payments made with a card issued `outside the US`\n\nUsing the rules above, all payments less than 10 USD would be processed, regardless of their risk level or where the card was issued. This is because the first rule allows the payment, so no further rules are evaluated. Similarly, a 1,500 payment USD made within the US with a normal risk level would also be allowed, despite the rule to block payments over 1,000 USD. This is because of the second rule in the list, allowing payments made within the US and a normal risk level. When a particular rule is triggered, no further rules are evaluated.\n\n## Rule structure![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe rule structure has two components—the _action_ it should take and the _condition_ to evaluate:\n\n`{action} if {condition}`\n\nTogether they are referred to as the _predicate_. In practice, a rule to block all payments over 1,000 USD would appear as:\n\n`Block if :amount_in_usd: > 1000.00`\n\n*   The _action_ is `Block`\n*   The _condition_ is `:amount_in_usd: > 1000.00`\n\n### Actions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA rule can perform one of four actions with a payment that meets its criteria, processed in this specific order.\n\n#### Request 3D Secure\n\nWhen used with the Payment Intents API, this rule determines if Stripe requests the issuer to attempt [3D Secure authentication](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\"). Requesting 3DS alone doesn’t block all possible [3D Secure outcomes](https://docs.stripe.com/radar/rules#request-3d-secure). Whether or not there are matches on this rule, we evaluate rules for allow, block, and review afterward.\n\n#### Allow\n\nThis rule determines when to always allow a payment that meets certain criteria, regardless of Stripe’s evaluation or any other matching rules. When a payment matches the criteria in an allow rule, Stripe processes it normally and it’s not subject to further rules evaluation. Even if Stripe proceeds with a payment, the card issuer may still decline it.\n\n#### Block\n\nBlock rules specify that Stripe should always block a payment. If a payment matches the criteria in a block rule, Stripe rejects it and it’s not subject to further rules evaluation.\n\n#### Review\n\nYou might want to allow certain types of payments but also have the option to examine them more closely. With review rules, you can [place payments in review](https://docs.stripe.com/radar/reviews). This is especially useful for payments that don’t fit common patterns, such as larger payments or payments from a country that you don’t often ship to. Stripe still processes these payments and charges the customer, but you have an additional opportunity to review the order and check for signs of fraud.\n\n### Conditions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf a payment matches a rule’s condition, the corresponding action is taken. A basic condition is, itself, made up of three parts:\n\n`[attribute] [operator] [value]`\n\n*   **Attribute**: The attribute of a payment (for example, the _amount_ or _type of card_)\n*   **Operator**: The arithmetic that compares the attribute to the value (for example, _greater than_ or _not equal to_)\n*   **Value**: The criteria you want to use (for example, `100.00` or `debit`)\n\nCombining both the action and condition together, the structure of a rule is:\n\n`{action} if {[attribute] [operator] [value]}`\n\nFour types of conditions exist, depending on the attribute type:\n\n*   `[string_attribute] [operator] [string_value]`\n*   `[country_attribute] [operator] [country_value]`\n*   `[numeric_attribute] [operator] [numeric_value]`\n*   `[boolean_attribute]`\n\nYou can also use certain attributes as a corresponding value within a condition. For instance, you can create a rule to block payments where the issuing country of the card doesn’t match with the country where the payment was made, using the following attribute and value:\n\n`Block if :card_country: != :ip_country:`\n\nFor a list of all possible conditions, refer to the [supported attributes](#supported-attributes).\n\n#### String attributes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThese contain any combination of characters. String attributes and values most commonly represent a piece of text, such as a card’s brand (for example, `visa`, `amex`) or risk level (for example, `elevated`). You can use these in rules to allow payments only from a particular country, or block payments made with prepaid cards.\n\n#### Metadata attributes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThese attributes are derived from the [metadata you’ve attached to your payments](https://docs.stripe.com/payments/charges-api#storing-information-in-metadata). Metadata attributes can operate as either strings or numbers. When used as strings, metadata attributes are _case-sensitive_.\n\nYou can use these attributes when creating Stripe Radar rules, enabling you to write rules against any custom business attributes you have passed to Stripe in the metadata field attached to your payments.\n\nMetadata attributes are written in the following structure:\n\n`::[metadata attribute name]:: [operator] [metadata_value]`\n\nFor example, suppose we have payments with the following key-value data stored in the metadata field:\n\n| **Metadata Name** | **Metadata Value** |\n| --- | --- |\n| **Customer Age** | 22  |\n| **Item ID** | 5A381D |\n| **Category ID** | groceries |\n\nYou can write a rule to place payments that match the following criteria into review.\n\n`Review if ::Customer Age:: < 30`\n\nYou can also write rules using both metadata attributes and other [supported attributes](#supported-attributes) mentioned in this document. For example, you can write a rule that only places a payment in review if the `Item ID` matches `5A381D` and the payment amount exceeds 1,000 USD.\n\n``Review if ::Item ID:: = `'5A381D'` and :amount_in_usd: > 1000``\n\nMetadata attributes also support the `IN` operator to match against multiple values. For example, you can write a rule that places a payment in review if the `Category ID` is one of groceries, electronics, or clothing.\n\n``Review if ::Category ID:: IN (`'groceries'`, `'electronics'`, `'clothing'`)``\n\nYou can use the `INCLUDES` operator with rules for metadata attributes and other string attributes to match substrings. For example, you can write a rule that places a payment in review if the `Item ID` includes the string `A381`. This matches A381, 5A381D, A381D, 5A381, and so on.\n\n`` Review if ::Item ID:: INCLUDES `'A381'` ``\n\n#### Caution\n\nMetadata attributes are case-sensitive when used as strings. Make sure that metadata values you specify in rules are exactly the same as the ones attached to your payments.\n\n**Metadata on Customer and Destination Objects**\n\nYou can also access metadata on customer and destination objects (if those are used for a given payment). These attributes use the following structure:\n\n`::[customer|destination]:[metadata attribute name]:: [operator] [metadata_value]`\n\nFor example, suppose you had a customer with the following metadata:\n\n| **Metadata Name** | **Metadata Value** |\n| --- | --- |\n| **Trusted** | true |\n\nYou could write a rule that always allows payments if the customer’s `Trusted` metadata field is `true`.\n\n`` Allow if ::customer:Trusted:: = `'true'` ``\n\nOr if you had a destination with the following metadata:\n\n| **Metadata Name** | **Metadata Value** |\n| --- | --- |\n| **Category** | new |\n\nYou could write a rule that places a payment in review if the destination’s `Category` metadata field is `new`.\n\n`` Review if ::destination:Category:: = `'new'` ``\n\n#### Country attributes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThese use [two-letter country codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) to represent a country, such as `US` for United States, `GB` for Great Britain, or `AR` for Argentina. Country attributes operate the same as string attributes, the only difference being that the value must be a country code.\n\n#### State attributes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThese use [ISO codes](https://en.wikipedia.org/wiki/ISO_3166-2) to represent the state or principal subdivision of a country, such as `CA` to represent California of the [United States](https://en.wikipedia.org/wiki/ISO_3166-2:US), `ENG` to represent England which is part of [Great Britain](https://en.wikipedia.org/wiki/ISO_3166-2:GB), or `L` to represent La Pampa which is part of [Argentina](https://en.wikipedia.org/wiki/ISO_3166-2:AR). We omit the two-letter country code from the state ISO code, so if you want to block transactions from California, your rule would compare the state attribute to `CA`.\n\n`` Block if :ip_state: = `'CA'` ``\n\nState attributes operate the same as string attributes, the only difference being that the value must be an ISO code.\n\n#### Numeric attributes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs these contain only numbers, they support more operators than string attributes and values. A payment’s _amount_ is one example of a numeric attribute. You can create a rule to perform an action if the amount is higher, lower, equal, or not equal to the amount you specify.\n\nFor numeric attributes that are counts over time windows, the count excludes the payment that you’re currently processing. For example, `total_charges_per_customer_hourly` represents the number of previous charge attempts from a given customer in the preceding hour. So, for the first charge attempt in a given hour for a customer, `total_charges_per_customer_hourly` has a value of `0`. For a second charge attempt within the same hour, it has a value of `1`, and so on.\n\nTime-since-first-seen attributes also don’t take into account the payment you’re currently processing. For example, a payment without an email has a missing value for `seconds_since_email_first_seen`. So do payments with emails never seen before on your account (since we don’t include the payment currently being processed, this is effectively the same behavior as the first example). See below for more details about [missing values](#missing-attributes). The `seconds_since_email_first_seen` field is only non-null after a new payment with a given email is processed.\n\n#### Bounded numeric attributes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBounded numeric attributes are similar to the numeric attributes described above. For example, they exclude the payment that you’re currently processing. The difference is that the available values for bounded numeric attributes are capped (or _bounded_) at a specific value.\n\nAs an example, take `authorized_charges_per_email_hourly` which represents the number of previous charges that were authorized for the email in the past hour on your account. For the sake of the example, let’s say it has a bound of `5`. For the first charge attempt in the past hour with the email `jenny.rosen@example.com` the counter has a value of `0`. Subsequent charge attempts in the same hour see higher counter values. After authorizing the 6th charge within the hour from `jenny.rosen@example.com`, the counter stops incrementing and stays at `5` despite actually having `6` charge attempts in the past hour.\n\nIf an attempt to increment the counter above the cap occurs, we exclude older values from consideration and replace them with newer values. For example, consider a counter with a cap of `3` that’s been filled up with 3 charges. One way to visualize the counter is by maintaining a list of timestamps representing arrival times of charges: `[10, 20, 30]` for instance. When a charge arrives at time `50`, the counter now looks like `[20, 30, 50]`.\n\n#### Boolean attributes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA Boolean attribute represents whether a particular attribute is true. Unlike string and numeric attributes, Boolean attributes have no operators or values. You can use a Boolean attribute to block payments that have been made with a disposable email address, or place payments in review that were made with an anonymous IP address.\n\nA post-authorization attribute (for example, `:cvc_check:`, `:address_zip_check:`, or `:address_line1_check:`) requires Stripe to exchange data with card issuers as part of the authorization process. The card issuer verifies this data against the information they have on file for the cardholder and checks for a match. Rules that use post-authorization attributes execute after rules that don’t use post-authorization attributes. (This won’t affect whether a charge is blocked or not, but may impact which rule blocks the charge.)\n\nIf you use a post-authorization attribute in a rule, your customer’s statement may temporarily show an authorization even if the charge is ultimately blocked—the authorization generally disappears after a few days.\n\nAddress ([AVS](https://docs.stripe.com/disputes/prevention/verification \"Address verification System (AVS)\")) and [CVC](https://docs.stripe.com/disputes/prevention/verification \"Card verification code check (CVC)\") attributes have five possible values:\n\n| **Attribute value** | **Explanation** |\n| --- | --- |\n| `pass` | The data provided is correct. |\n| `fail` | The data provided is incorrect. |\n| `unavailable` | The customer’s card issuer won’t check the data provided. Not all card issuers or countries support address verification. |\n| `unchecked` | The data was provided but hasn’t been checked yet. The customer’s card issuer will eventually check the data provided. |\n| `not_provided` | The data wasn’t provided to Stripe. |\n\nSome example rules:\n\n*   `` Block if :address_line1_check: = `'fail'` ``\n*   `` Block if :cvc_check: != `'pass'` ``\n*   ``Block if :address_zip_check: in (`'fail'`, `'not_provided'`)``\n\nRequiring a strict `pass` on rules can be overly restrictive. For example, [wallets](https://docs.stripe.com/payments/payment-methods \"digital wallet\") usually don’t provide a CVC because they store tokenized card information. Therefore [CVC](https://docs.stripe.com/disputes/prevention/verification \"Card verification code check (CVC)\") checks, like [3D-Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") checks, aren’t available for payment methods such as Apple Pay. Stripe recommends using Radar’s [Built-in rules](https://docs.stripe.com/radar/rules#built-in-rules), which consider these edge cases.\n\n#### Supported attributes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRefer to the list of all [supported attributes](https://docs.stripe.com/radar/rules/supported-attributes) for a complete list of attributes you can apply to your rule definitions.\n\n#### Converted amounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen using `amount_in_xyz`, Stripe automatically determines the converted amount of any payment when checking if the amount matches your chosen criteria. For example, if you create a rule using `amount_in_usd` to block all payments greater than 1,000 USD, Stripe would block a payment of a lower nominal amount in a different currency (for example, 900 GBP) if its equivalent converted value exceeds 1,000 USD.\n\n#### “Takes into account payments from 2020 onwards” in practice![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe descriptions of some rule attributes include the phrase “takes into account payments from 2020 onwards”. This means that the rule would treat a card that last transacted with your business in 2019 the same as a card that’s new to your business. You should carefully consider what this means in the context of your business and rules as it could result in counterintuitive behavior. For example, if you create a rule to block high-value payments from new cards, you might end up blocking a good customer who hasn’t made a purchase since 2019.\n\n#### “This attribute only includes live mode Customer objects that interacted with your account in the past <week, year>. This data updates at most every 72 hours.” in practice![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe descriptions of some rule attributes include the sentences “This attribute only includes live mode Customer objects that interacted with your account in the past <week, year>. This data updates at most every 72 hours.” This means that live mode Customer objects that were created, charged, or updated on your account in the past week or year are included in these counts. However, the count doesn’t update immediately and might take up to 72 hours to propagate through the system, though often times these counters update sooner than 72 hours.\n\n### Operators![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA condition’s operator denotes the comparison between the payment’s attribute and the value you provide. Different operators are available, depending on the type of attribute being used.\n\n| Operator | String | Metadata | Country | State | Numeric | Description | Example |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| **\\=** | ✔︎  | ✔︎  | ✔︎  | ✔︎  | ✔︎  | Equal to | `` :card_country: = `'us'` `` |\n| **!=** | ✔︎  | ✔︎  | ✔︎  | ✔︎  | ✔︎  | Not equal to | `` :card_funding: != `'prepaid'` `` |\n| **<** |     |     |     |     | ✔︎  | Less than | `:amount_in_gbp: < 10.00` |\n| **\\>** |     |     |     |     | ✔︎  | Greater than | `:amount_in_usd: > 500.00` |\n| **<=** |     | ︎   |     |     | ✔︎  | Less than or equal to | `:amount_in_eur: <= 100.00` |\n| **\\>=** |     |     |     |     | ✔︎  | Greater than or equal to | `:amount_in_cad: >= 10.00` |\n| **IN** | ✔   | ✔︎  | ✔   | ✔︎  | ✔︎  | Is in the group | ``:card_country: IN (`'gb'`, `'ie'`)`` |\n| **INCLUDES** | ✔   | ✔︎  | ✔   | ✔   |     | Contains the string | `` :ip_address: INCLUDES `'192.168'` `` |\n| **LIKE** | ✔   | ✔︎  | ✔   | ✔   |     | Matches the given pattern. Use the wildcard character `%` to match zero or any number of letters, digits or symbols. | `` :email: LIKE `'fraud%@stripe.com'` `` |\n\n### Lists ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can reference a group of values in your rules through [lists](https://docs.stripe.com/radar/lists). All list aliases referenced in rules must start with `@`. To construct a rule referencing a list, follow the structure:\n\n`{action} [attribute] in [list]`\n\nFor example, say you have a list of card countries you’d like to block. You could write a rule using several `OR` clauses:\n\n`` Block if :card_country: = `'CA'` OR :card_country: = `'DE'` OR :card_country: = `'AE'` ``\n\nYou could also write a rule using an inline list:\n\n``Block if :card_country: IN (`'CA'`, `'DE'`, `'AE'`)``\n\nYou could also create a list of card countries you want to block, named `card_countries_to_block`. You can then [add](https://docs.stripe.com/radar/lists#custom-lists) the countries of your choice to the list and reference that list in a rule:\n\n`Block if :card_country: in @card_countries_to_block`\n\nReferencing a list in a rule allows you to edit a large number of items in one place instead of maintaining many individual rules.\n\n#### Caution\n\nEU merchants should be aware of the Geo-blocking Regulation and its prohibitions on blocking payments from customers based in EU member states. [Learn more about this regulation](https://support.stripe.com/questions/eu-geo-blocking-regulation-changes).\n\n### Missing attributes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTypical rule conditions refer to attributes set on every payment, such as `:card_country:` (which is set on every card-based charge) or a metadata attribute you always send with your payment requests. In some scenarios an attribute might be missing, for example:\n\n*   You have different checkout flows on your site, and some of them don’t collect customers’ email addresses\n    \n*   You’ve only recently started using Stripe.js, and so `:ip_country:` is available on new payments, but not available on historical payments (which we search when previewing rules)\n    \n*   For some of your payments, a bug in your integration fails to set an expected metadata key\n    \n\n#### How rule conditions evaluate missing attributes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConsider the rule `` Block if :email_domain: = `'definitelyfraud.com'` ``. If you didn’t collect the customer’s email address, the `:email_domain:` attribute would be missing, and—as you might expect—the rule condition would not match the payment.\n\nNow consider the rule `` Review if :email_domain: != `'definitelysafe.com'` ``. If the `:email_domain:` attribute is missing, this rule _also_ doesn’t match the payment. This result might seem a bit surprising, as a missing value is not the same as `` `'definitelysafe.com'` ``. In this case, we interpret `` != `'definitelysafe.com'` `` to mean “the attribute has some value other than `` `'definitelysafe.com'` ``,” which a missing attribute doesn’t satisfy.\n\nMore generally: any comparison (for example, `=`, `!=`, `>`, `<`) of a missing feature against another static value or feature (missing or present) always returns false.\n\n#### Explicit handling with the `is_missing` function![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you want to explicitly check for the existence of an attribute or metadata attribute, use the `is_missing` function. Provide this function with the attribute or metadata key that may be missing.\n\nFor example, you could write a rule to match all payments where you don’t have access to a customer’s email address:\n\n*   `Review if is_missing(:email_domain:)`\n\nOr you might write a rule to match all payments that have a certain metadata attribute set:\n\n*   `Review if !(is_missing(::foo::))`\n\nYou can also use the `is_missing` function in `OR` or `AND` conjunctions:\n\n*   ``Review if is_missing(:email_domain:) OR :email_domain: IN (`'yopmail.net'`, `'yandex.ru'`)``\n\n### Complex conditions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can build complex conditions by joining together basic conditions using the operators **AND**, **OR**, and **NOT**. You can also use their symbolic equivalents: **&&**, **||**, and **!** respectively.\n\nSimilar to programming languages such as C, Python, and SQL, Stripe supports standard operator _precedence_ (order of operations). For instance, the complex condition:\n\n`{condition_X} OR NOT {condition_Y} AND {condition_Z}`\n\nis interpreted as:\n\n`{condition_X} OR ((NOT {condition_Y}) AND {condition_Z})`\n\nSub-conditional grouping within complex conditions is also supported using parentheses. For instance, you can amend the prior example to explicitly change the evaluation order of sub-predicates:\n\n`({condition_X} OR (NOT {condition_Y})) AND {condition_Z}`\n\n`{condition_X} OR NOT ({condition_Y} AND {condition_Z})`\n\nBy using parentheses in different locations, each of these complex conditions lead to different results.\n\n### Valid conditions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following conditions are examples of correct use of attributes and a supported operator:\n\n*   `` :card_brand: = `'amex'` ``\n*   `` :card_country: != `'US'` ``\n*   `:amount_in_usd: >= 1000.00`\n*   `:is_anonymous_ip:`\n\n### Invalid conditions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a rule, Radar provides feedback if you attempt to use an invalid condition. For reference, the following are examples of invalid conditions, where the value for an attribute or the operator used isn’t supported:\n\n*   `` :risk_level: < `'highest'` `` (string values can only make use of = or != operators)\n*   `` :ip_country: = `'Canada'` `` (country values must be expressed in two-letter short code)\n*   `` :amount_in_usd: >= `'one thousand dollars'` `` (numeric values must be expressed in numbers)\n*   `` :is_anonymous_ip: = `'true'` `` (Boolean attributes are not used with operators or values)\n\n### Velocity rules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMany [supported attributes](https://docs.stripe.com/radar/rules/supported-attributes) include invariants for different time scales (for example, the `daily` in `total_charges_per_email_daily`). These are called velocity rules.\n\nAttributes are calculated as a rolling window, based on fixed seconds and not on a calendar. For example, `daily` means that the time between two charges in a rule attribute must be a maximum of 24 hours or 86400 seconds apart to match.\n\nThe attributes are defined as:\n\n*   `hourly` is 3600 seconds\n*   `daily` is 86400 seconds\n*   `weekly` is 604800 seconds\n*   `yearly` is 31536000 seconds\n\nA common use case for these attributes is to reduce [card testing](https://docs.stripe.com/disputes/prevention/card-testing#prevent-card-testing) or enumeration attack scenarios, as explained in the [Radar 101 guide](https://stripe.com/guides/radar-rules-101#rules-that-help-prevent-card-testing-or-card-cashing).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [3DS Rule Examples](https://docs.stripe.com/radar/rules#request-3d-secure)\n*   [Continuous Fraud Management Guide](https://stripe.com/guides/improve-fraud-management-with-radar-for-fraud-teams-and-stripe-data)\n*   [Query Disputes and Fraud Data](https://docs.stripe.com/stripe-data/query-disputes-and-fraud-data)\n*   [Radar 101 Guide](https://stripe.com/guides/radar-rules-101)\n*   [Rules Overview](https://docs.stripe.com/radar/rules)\n*   [Supported Attributes](https://docs.stripe.com/radar/rules/supported-attributes)",
    "title": "Rules reference | Stripe Documentation",
    "description": "Learn more about the structure of rules and the order in which Radar processes them.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/saving-cards/overview",
    "markdown": "# Save cards for online payments\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when saving a customer’s payment details. For example, the European Data Protection Board has issued guidance regarding saving payment details. These requirements generally apply if you want to save your customer’s payment method for future use, such as presenting a customer’s payment method to them in the checkout flow for a future purchase or charging them when they’re not actively using your website or app.\n\nAdd terms to your website or app that state how you plan to save payment method details and allow customers to opt in. If you plan to charge the customer while they’re offline, then at a minimum, make sure that your terms also cover the following:\n\n*   The customer’s agreement to your initiating a payment or a series of payments on their behalf for specified transactions.\n*   The anticipated timing and frequency of payments (for instance, whether charges are for scheduled installment or subscription payments, or for unscheduled top-ups).\n*   How the payment amount is determined.\n*   Your cancellation policy, if you’re setting up the payment method for a subscription service.\n\nMake sure you keep a record of your customer’s written agreement to these terms.\n\nWhen you save a payment method, it can only be used for the specific usage that you included in your terms. If you want to charge customers when they’re offline and also save the customer’s payment method to present to them as a saved payment method for future purchases, you must explicitly collect consent from the customer. One way to do so is with a “Save my payment method for future use” checkbox.",
    "title": "Save cards for online payments | Stripe Documentation",
    "description": "Use your Stripe Terminal integration to collect card details for online reuse.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/references/checklist",
    "markdown": "# Deployment checklist | Stripe DocumentationThe Stripe Docs logo\n\n## Use this checklist to help ensure a smooth deployment of Stripe Terminal.\n\nStripe Terminal requires integrating hardware and software to bring Stripe to the physical world. As you develop your integration, refer to this checklist to make sure you cover all the critical steps.\n\nIt’s fine to go out of order, but understanding the full scope of a Terminal integration helps you connect all the pieces.\n\nAfter following the integration guides for Stripe Terminal, check that your application is set up correctly.\n\n*   Set up the ConnectionToken endpoint correctly\n    \n    To handle the ConnectionToken lifecycle, set up an endpoint on your backend that creates a ConnectionToken for your client application. Authenticate this endpoint to control who can access your readers. Don’t hard-code the ConnectionToken in your application—it prevents you from reconnecting to a reader. To further control access to smart readers like the [Verifone P400](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=smart) and [BBPOS WisePOS E](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=smart), use [Locations](https://docs.stripe.com/terminal/fleet/locations-and-zones).\n    \n*   If you defined the PaymentIntent [`capture_method`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-capture_method) as `manual`, the payment is authorized but not captured when the SDK returns a processed PaymentIntent to your application. To complete collection of funds, you must [capture the PaymentIntent](https://docs.stripe.com/terminal/payments/collect-card-payment#capture-payment).\n    \n    When your application receives a processed PaymentIntent from the SDK, make sure it notifies your backend to capture the PaymentIntent.\n    \n*   Make sure you can provide receipts to customers\n    \n    Provide your customer with the option to receive a paper or email receipt. You can use Stripe’s prebuilt receipts, or use receipt data from the Stripe API to build custom receipts that are on-brand for your business. Test that you receive a receipt when you create a live mode payment using your application.\n    \n    If you provide your customers with [custom receipts](https://docs.stripe.com/terminal/features/receipts#custom), save a copy of each receipt as dispute evidence. If you use Stripe’s prebuilt receipts, a copy of the receipt is saved automatically and available in the Dashboard.\n    \n*   Set up a process to reconcile payments with your internal orders system\n    \n    [Reconcile payments](https://docs.stripe.com/terminal/payments/collect-card-payment#reconciling) with your internal orders system on your server at the end of a day’s activity to avoid unintended authorizations or un-captured funds:\n    \n    *   A user abandoning your application’s checkout flow early can result in an un-captured PaymentIntent, which may appear to the cardholder as an unintended authorization.\n    *   Similarly, the request from your application notifying your backend to capture the PaymentIntent may fail, resulting in incomplete collection of funds.\n*   Support updates for the BBPOS Chipper 2X BT\n    \n    The [BBPOS Chipper 2X BT](https://docs.stripe.com/terminal/readers/bbpos-chipper2xbt) does not auto-update, so it’s important for your application to support updates. Although they’re rare, updates usually contain important features or critical fixes. Make sure your app supports the following:\n    \n    1.  First, check for whether an update is available.\n    2.  If an update is available, display in the UI the estimated time to complete the update, along with options to continue or cancel.\n    3.  While the update is in progress, have the UI tell the user to leave the reader powered on and nearby. Block the user from navigating away from the page.\n    4.  Display a visual indicator of the update progress (for example, the percentage or a progress bar).\n    \n    Refer to our example applications ([iOS](https://github.com/stripe/stripe-terminal-ios), [Android](https://github.com/stripe/stripe-terminal-android)) for a reference UI.\n    \n*   Support registering readers in the field\n    \n    For smart readers like the [Verifone P400](https://docs.stripe.com/terminal/readers/verifone-p400) and [BBPOS WisePOS E](https://docs.stripe.com/terminal/readers/bbpos-wisepos-e), you must [register the reader](https://docs.stripe.com/terminal/fleet/register-readers) to your account before you can connect your application to the reader.\n    \n    How you handle reader registration depends on your use case:\n    \n    *   **Deployment size**: For smaller deployments, [register each reader](https://docs.stripe.com/terminal/fleet/register-readers) in the Stripe Dashboard. For larger deployments that require shipping readers to various locations, make sure site managers can add new readers to your company’s Stripe account. Build a workflow into your application to let others register readers to your Stripe account. The endpoint for [registering a reader](https://docs.stripe.com/api/terminal/readers/create) must be called server side. If you support registering readers from your client application, the app must communicate with your backend to register the reader.\n        \n    *   **Using Connect**: If you use Connect [direct charges](https://docs.stripe.com/connect/direct-charges), use the `Stripe-Account` header to register the reader to the connected account. With [destination charges](https://docs.stripe.com/connect/destination-charges), register new readers [to the platform account](https://docs.stripe.com/terminal/features/connect).\n        \n*   Use Locations to group your readers\n    \n    Create a Terminal [Location](https://docs.stripe.com/api/terminal/locations/create) object for each physical operating site at which your business accepts in-person payments. You must register each reader to a location to ensure that it downloads the proper regional configuration.\n    \n    For smart readers, support specifying a location while [registering the reader](https://docs.stripe.com/terminal/fleet/register-readers#smart-readers). For Bluetooth readers, support specifying a location while [connecting to the reader](https://docs.stripe.com/terminal/fleet/register-readers#bluetooth-readers).\n    \n*   Support discovering multiple readers and provide helpful UI\n    \n    Make sure your application can display an updating list of discovered readers, with the label and/or serial number of each. Refer to our [example applications](https://docs.stripe.com/terminal/example-applications) for a sample UI.\n    \n    If you expect your mobile app to be used with multiple Bluetooth readers, use the [Bluetooth Proximity](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=ios&reader-type=bluetooth#bluetooth-proximity) discovery method. Include in your app instructions to hold the reader close to the app device, and wait for it to begin flashing multiple colors. Make sure your app’s UI allows canceling the reader discovery process.\n    \n    If you use the [Verifone P400](https://docs.stripe.com/terminal/readers/verifone-p400) or [BBPOS WisePOS E](https://docs.stripe.com/terminal/readers/bbpos-wisepos-e), check that the reader and the device running your application are both on the correct LAN. Include in your application instructions for verifying the correct LAN.\n    \n*   Make sure you’re on the latest release of the SDK\n    \n    Stripe periodically releases updates which can include new functionality, bug fixes, and security updates. Update your SDK as soon as a new version is available. The currently available SDKs are:\n    \n    *   [Stripe Terminal Android SDK](https://github.com/stripe/stripe-terminal-android/releases)\n    *   [Stripe Terminal iOS SDK](https://github.com/stripe/stripe-terminal-ios/releases)\n    *   [Stripe Terminal JavaScript SDK](https://docs.stripe.com/terminal/references/api/js-sdk#changelog)\n    *   [Stripe Terminal React Native SDK](https://github.com/stripe/stripe-terminal-react-native)\n\nThe BBPOS and Chipper™ name and logo are trademarks or registered trademarks of BBPOS Limited in the United States and/or other countries. The Verifone® name and logo are either trademarks or registered trademarks of Verifone in the United States and/or other countries. Use of the trademarks does not imply any endorsement by BBPOS or Verifone.",
    "title": "Deployment checklist | Stripe Documentation",
    "description": "Use this checklist to help ensure a smooth deployment of Stripe Terminal.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/references/testing",
    "markdown": "# Test Stripe Terminal | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to effectively test your Terminal integration.\n\n#### Note\n\nMuch of the process for testing Stripe Terminal is similar to that for testing online Stripe payments. Also, you can’t use Stripe Terminal with mobile wallets (for example, Apple Pay or Google Pay) in testmode. For more information, see the [general Stripe testing guide](https://docs.stripe.com/testing).\n\nThe best way to achieve a successful Terminal deployment is to test every part of your integration. We provide testing tools for each stage:\n\n1.  Before ordering a reader, test your integration with the reader simulator.\n2.  Test your complete hardware integration with a physical test card.\n\n## Simulated reader ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Terminal SDKs and server-driven integration come with a built-in simulated card reader, so you can develop and test your app without connecting to physical hardware. Whether your integration is complete or you’re still building it, use the simulated reader to emulate all the Terminal flows in your app.\n\nNote that the simulated reader does not provide a UI. After connecting to it in your app, you can see it working when calls to the Stripe SDK or API succeed.\n\nSimulated readers for SDKs automatically simulate card presentment as needed. For the server-driven integration, update your integration to [simulate card presentment](https://docs.stripe.com/terminal/references/testing#simulated-card-presentment).\n\n## Simulated test cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe simulated reader can be configured to use a simulated test card, enabling you to test different flows within your point of sale application.\n\nBefore collecting a payment method, configure the simulated reader to use one of the following test card numbers or test payment methods to produce specific responses.\n\n### Standard test cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Test Card Number | Test Payment Method | Brand |\n| --- | --- | --- |\n|     | `visa` | Visa |\n|     | `visa_debit` | Visa (debit) |\n|     | `mastercard` | Mastercard |\n|     | `mastercard_debit` | Mastercard (debit) |\n|     | `mastercard_prepaid` | Mastercard (prepaid) |\n|     | `amex` | American Express |\n|     | `amex2` | American Express |\n|     | `discover` | Discover |\n|     | `discover2` | Discover |\n|     | `diners` | Diners Club |\n|     | `diners_14digits` | Diners Club (14 digit card) |\n|     | `jcb` | JCB |\n|     | `unionpay` | UnionPay |\n|     | `interac` | Interac |\n|     | `eftpos_au_debit` | eftpos Australia |\n|     | `eftpos_au_visa_debit` | eftpos Australia/Visa |\n|     | `eftpos_au_mastercard_debit` | eftpos Australia/Mastercard |\n\n### Test cards for specific success cases![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Test Card Number | Test Payment Method | Result |\n| --- | --- | --- |\n|     | `offline_pin_cvm` | Simulates the cardholder being prompted for and entering an offline PIN. The resulting charge has [cardholder\\_verification\\_method](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-receipt-cardholder_verification_method) set to `offline_pin`. |\n|     | `offline_pin_sca_retry` | Simulates an [SCA](https://docs.stripe.com/strong-customer-authentication)\\-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has [cardholder\\_verification\\_method](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-receipt-cardholder_verification_method) set to `offline_pin`. |\n|     | `online_pin_cvm` | Simulates a cardholder being prompted for and entering an online PIN. The resulting charge has [cardholder\\_verification\\_method](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-receipt-cardholder_verification_method) set to `online_pin`. |\n|     | `online_pin_sca_retry` | Simulates an [SCA](https://docs.stripe.com/strong-customer-authentication)\\-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to input their online PIN. The final charge has [cardholder\\_verification\\_method](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-receipt-cardholder_verification_method) set to `online_pin`. |\n\n### Test cards for specific error cases![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Test Card Number | Test Payment Method | Result |\n| --- | --- | --- |\n|     | `charge_declined` | Charge is declined with a `card_declined` code. |\n|     | `charge_declined_insufficient_funds` | Charge is declined with a `card_declined` code. The [decline\\_code](https://docs.stripe.com/declines/codes) attribute is `insufficient_funds`. |\n|     | `charge_declined_lost_card` | Charge is declined with a `card_declined` code. The [decline\\_code](https://docs.stripe.com/declines/codes) attribute is `lost_card`. |\n|     | `charge_declined_stolen_card` | Charge is declined with a `card_declined` code. The [decline\\_code](https://docs.stripe.com/declines/codes) attribute is `stolen_card`. |\n|     | `charge_declined_expired_card` | Charge is declined with an `expired_card` code. |\n|     | `charge_declined_processing_error` | Charge is declined with a `processing_error` code. |\n|     | `refund_fail` | Charge succeeds but [refunding a captured charge fails](https://docs.stripe.com/refunds#failed-refunds) asynchronously with a `failure_reason` of `expired_or_canceled_card`. Note that because refund failures are asynchronous, the refund will appear to be successful at first and will only have the `failed` status on subsequent fetches. We also notify you of refund failures using the `charge.refund.updated` [webhook](https://docs.stripe.com/api/events/types#event_types-charge.refund.updated) event. This simulated error is only supported in the JavaScript SDK. |\n\n#### Note\n\n## Physical test cards ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTest payments with your Stripe Terminal reader using a physical test card. You can purchase readers and physical test cards from the Terminal tab of the [Stripe Dashboard](https://dashboard.stripe.com/terminal/shop).\n\nThis physical test card supports both chip entry and contactless payments. It only works with Stripe’s pre-certified readers, and only against the Stripe API in test mode. If you attempt to use your physical test card in live mode, the Stripe API returns an error. Unless stated otherwise, use the PIN `1234` when prompted.\n\nWhen creating payments using a physical test card, use amounts ending in the following values to produce specific responses:\n\n| Decimal | Result |\n| --- | --- |\n| **00** | Payment is approved. |\n| **01** | Payment is declined with a `call_issuer` code. |\n| **02** | When using readers featuring a cardholder-facing screen, insert the test card (if you’re outside the US you can also tap the card) and follow the on-screen prompts to complete the transaction. If a PIN is required, enter `1234`. The payment might decline with an `offline_pin_required` code if the card requires a PIN and the reader doesn’t have a cardholder-facing screen. |\n| **03** | When using readers featuring a cardholder-facing screen, insert the test card (if you’re outside the US you can also tap the card) and follow the on-screen prompts to complete the transaction. If a PIN is required, enter any 4-digit PIN. The payment might decline with an `online_or_offline_pin_required` code if the card requires a PIN and the reader doesn’t have a cardholder-facing screen. |\n| **05** | Payment is declined with an `generic_decline` code. |\n| **55** | Payment is declined with an `incorrect_pin` code. |\n| **60** | Payment is declined with an `online_or_offline_pin_required` code. |\n| **65** | Payment is declined with an `withdrawal_count_limit_exceeded` code. |\n| **75** | Payment is declined with an `pin_try_exceeded` code. |\n\nFor example, a payment processed using a physical test card for the amount **$25.00** succeeds; a payment processed for the amount **$10.05** is declined.\n\n### Interac test cards Canada only ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo test your Interac integration, you can use the simulated `interac` test card or an _Interac physical test card_. This can be ordered on the [Terminal hardware shop](https://dashboard.stripe.com/terminal/shop) in the Dashboard. The Stripe-branded physical test card can’t be used as an Interac card.\n\nThe Interac test card works for both `interac_present` payments and `interac_present` refunds. You can use the same [test amounts](https://docs.stripe.com/terminal/references/testing#physical-test-cards) you use for testing `card_present` payments. Unless stated otherwise, use the PIN `1234` when prompted. To test a declined refund, create a partial refund with an amount ending with the following decimal values: `01`, `05`, `55`, `65`, or `75`.\n\n#### Note\n\nThe Interac test card doesn’t support contactless payments.\n\n### eftpos test cards Australia only ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo test your eftpos integration, you can use the simulated `eftpos` test card or an _eftpos physical test card_. This can be ordered on the [Terminal hardware shop](https://dashboard.stripe.com/terminal/shop) in the Dashboard. The Stripe-branded physical test card can’t be used as an `eftpos` card.\n\nYou can use the same [test amounts](https://docs.stripe.com/terminal/references/testing#physical-test-cards) you use for testing `card_present` payments. Unless stated otherwise, use the PIN `1234` when prompted.\n\n## Simulated card presentment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen using the server-driven integration, use the [present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method) endpoint to simulate a cardholder tapping or inserting their card on the reader.\n\n`curl -X POST https://api.stripe.com/v1/test_helpers/terminal/readers/tmr_xxx/present_payment_method \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n`{   \"id\": \"tmr_xxx\",   \"object\": \"terminal.reader\",   \"action\": {     \"failure_code\": null,     \"failure_message\": null,     \"process_payment_intent\": {       \"payment_intent\": \"pi_xxx\"     },     \"status\": \"succeeded\",     \"type\": \"process_payment_intent\"   },   … }`\n\nIf you don’t specify parameters, the simulated payment defaults to a valid [test card](https://docs.stripe.com/terminal/references/testing#standard-test-cards) based on the payment method type of the PaymentIntent. Below are the default test cards for Terminal payment method types:\n\n| Payment Method Type | Test Card Number | Test Payment Method |\n| --- | --- | --- |\n| `card_present` |     | `visa` |\n| `card_present` and `interac_present` |     | `visa` |\n| `interac_present` |     | `interac` |\n\nWith the [standard test cards](https://docs.stripe.com/terminal/references/testing#standard-test-cards), you can also use [test amounts](https://docs.stripe.com/terminal/references/testing#physical-test-cards) to simulate failure scenarios\n\n## Simulated reader updates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDuring connection to a simulated Bluetooth reader, you can configure a simulated reader update.\n\nSet the `Terminal.shared.simulatorConfiguration.availableReaderUpdate` to any of the following configurations. Calling `connectBluetoothReader` triggers a simulated reader update.\n\n| Update Configuration | Result |\n| --- | --- |\n| `SimulateReaderUpdateNone` | No update, no need to communicate anything to your user. |\n| `SimulateReaderUpdateRequired` | A required update is available and takes 1 minute. Your `BluetoothReaderDelegate` receives the `didStartInstallingUpdate` callback. |\n| `SimulateReaderUpdateAvailable` | An optional update is available. Communicate to the user that an update is available and highlight the `requiredAt` date. |\n| `SimulateReaderUpdateLowBattery` | A required update starts to install but fails due to the reader running low on battery. Connecting to the reader also fails. This simulates the reader running an older version of software. |\n| `SimulateReaderUpdateLowBatterySucceedConnect` | A required update starts to install but fails due to the reader running low on battery. Connecting to the reader succeeds. This simulates the reader running a recent version of software that is still acceptable. Installing the update is retried when connecting to the reader again. |\n| `SimulateReaderUpdateRandom` | A random selection of the above scenarios. |",
    "title": "Test Stripe Terminal | Stripe Documentation",
    "description": "Learn how to effectively test your Terminal integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/display",
    "markdown": "# Display cart details | Stripe DocumentationThe Stripe Docs logo\n\n## Dynamically update cart details on the reader screen.\n\nThe built-in screen of the [Verifone P400](https://docs.stripe.com/terminal/readers/verifone-p400), [BBPOS WisePOS E](https://docs.stripe.com/terminal/readers/bbpos-wisepos-e) and [Stripe Reader S700](https://docs.stripe.com/terminal/readers/stripe-reader-s700) can display line items. During the checkout process, you can update the reader’s screen to show individual items in the transaction, along with the total price.\n\n![Cart details](https://b.stripecdn.com/docs-statics-srv/assets/set-reader-display-pre-dip.d32fa58c6645790c373a05cf39d9c416.png)\n\nCart details screen\n\n## Set the reader display![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo set the line items and total displayed on the reader during a payment, pass line items and total information into the [setReaderDisplay](https://docs.stripe.com/terminal/references/api/js-sdk#set-reader-display) method. The object you pass in will drive the contents displayed on the reader’s screen.\n\nThe amounts passed to the `setReaderDisplay` method are only used for display purposes. The reader won’t automatically calculate tax or the total—your application must calculate the tax and total before displaying the values. You can use the [Stripe Tax API](https://docs.stripe.com/tax/custom#calculate-tax) to calculate taxes. Similarly, the total passed to `setReaderDisplay` doesn’t control the amount charged to the customer. Make sure the amount displayed on the reader matches the amount you’re charging your customer.\n\n`curl https://api.stripe.com/v1/terminal/readers/tmr_xxx/set_reader_display \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d type=cart \\  -d \"cart[line_items][0][description]\"=\"Caramel latte\" \\  -d \"cart[line_items][0][amount]\"=659 \\  -d \"cart[line_items][0][quantity]\"=1 \\  -d \"cart[line_items][1][description]\"=\"Dozen donuts\" \\  -d \"cart[line_items][1][amount]\"=1239 \\  -d \"cart[line_items][1][quantity]\"=1 \\  -d \"cart[currency]\"=usd \\  -d \"cart[tax]\"=100 \\  -d \"cart[total]\"=1998`\n\nTo clear reader display on the server-driven integration, call the [cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action) endpoint.\n\n## Pre-dip a card![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Note\n\nPre-dipping a card is only supported for payments in the US.\n\nThe [Verifone P400](https://docs.stripe.com/terminal/readers/verifone-p400), [BBPOS WisePOS E](https://docs.stripe.com/terminal/readers/bbpos-wisepos-e), and [Stripe Reader S700](https://docs.stripe.com/terminal/readers/stripe-reader-s700) support the ability to present a card to the reader before the transaction amount is finalized.\n\nThis option—known as _pre-dip_, _pre-tap_, or _pre-swipe_—can help speed up transaction times by allowing a customer to present a payment method before the end of the transaction.\n\nThe `setReaderDisplay` method prepares the reader for pre-dipping. Your customer can present a payment method at any point after this method is called. You can call `setReaderDisplay` multiple times to update the information displayed without impacting the pre-dipping process. Updating the display doesn’t invalidate a pre-dip, if one has already occurred.\n\nPre-dipping only allows your customer to present a card early in the payment process, it doesn’t move the payment process forward. Your integration can’t tell if pre-dipping has occurred, and you must implement the full payment flow for all transactions, regardless of pre-dipping.\n\n## Pre-dip disabled![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf pre-dip isn’t available in your country, the screen shows only the subtotal and line items.\n\n![Pre-dip disabled](https://b.stripecdn.com/docs-statics-srv/assets/set-reader-display-no-pre-dip.63f146b9e0b0ded9f57fe83d2b9e4a7d.png)\n\nPre-dip disabled",
    "title": "Display cart details | Stripe Documentation",
    "description": "Dynamically update cart details on the reader screen.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/refunds",
    "markdown": "# Refund transactions | Stripe DocumentationThe Stripe Docs logo\n\n## Cancel or refund Stripe Terminal payments.\n\nStripe Terminal supports both automatic and manual capture.\n\nWhen the SDK returns a confirmed PaymentIntent to your app, the payment is authorized but not [captured](https://docs.stripe.com/terminal/payments/collect-card-payment#capture-payment). You can [cancel](#canceling-payments) payments that are authorized and not captured. If the PaymentIntent has already been captured, you must [refund](#refunds) the underlying charge created by the PaymentIntent, using the [refunds API](https://docs.stripe.com/api#create_refund) or [Dashboard](https://docs.stripe.com/refunds?dashboard-or-api=dashboard).\n\nWe recommend [reconciling payments](https://docs.stripe.com/terminal/payments/collect-card-payment#reconciling) on your backend after a day’s activity to prevent unintended authorizations and uncollected funds.\n\n## Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Canceling payments** is available on Visa, Mastercard, American Express and Discover. For single-message payment methods like [Interac](https://docs.stripe.com/terminal/payments/regional?integration-country=CA#interac-payments) and [eftpos](https://docs.stripe.com/terminal/payments/regional?integration-country=AU#eftpos-payments), PaymentIntents are automatically captured. In lieu of canceling PaymentIntents, make sure your application can allow initiating a refund at the end of the checkout flow.\n\n**Online refunds** are available on all card networks except for Interac.\n\n[In-person refunds](https://docs.stripe.com/terminal/payments/regional?integration-country=CA#refund-an-interac-payment) are only available on Interac.\n\n## Cancel payments Client-sideServer-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can [cancel](https://docs.stripe.com/api#cancel_payment_intent) a `card_present` PaymentIntent at any time before it has been captured. Canceling a PaymentIntent releases all uncaptured funds, and a canceled PaymentIntent can no longer be used to perform charges.\n\nThis can be useful if, for example, your customer decides to use a different payment method or pay with cash after the payment has been processed. In your application’s UI, consider allowing the user to cancel after [confirming](https://docs.stripe.com/terminal/payments/collect-card-payment#confirm-payment) the payment, before finalizing the payment and notifying your backend to [capture](https://docs.stripe.com/terminal/payments/collect-card-payment#capture-payment).\n\n#### Client-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCancel a `PaymentIntent` from your client using the iOS, Android, or React Native SDK:\n\n#### Note\n\nClient-side `PaymentIntent` cancellation is possible with the iOS, Android, or React Native SDKs. If you’re using server-driven integration, cancel the `PaymentIntent` server-side.\n\n#### Server-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe JavaScript SDK and server-driven integration require you to cancel the `PaymentIntent` on your server. For iOS, Android, or React Native, you can cancel the `PaymentIntent` on your server if the information required to start a payment isn’t readily available in your app.\n\n`curl -X POST https://api.stripe.com/v1/payment_intents/pi_ANipwO3zNfjeWODtRPIg/cancel \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n## Perform refunds Client-sideServer-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you use a PaymentIntent to collect payment from a customer, Stripe creates a [charge](https://docs.stripe.com/api/charges/object) behind the scenes. To refund the customer’s payment after the PaymentIntent has succeeded, [create a refund](https://docs.stripe.com/api#create_refund) by passing in the PaymentIntent ID or the charge ID. You can also optionally refund part of a payment by specifying an amount.\n\nYou can perform refunds [with the API](https://docs.stripe.com/refunds?dashboard-or-api=api) or [through the Dashboard](https://docs.stripe.com/refunds?dashboard-or-api=dashboard). For Interac transactions in Canada, the BBPOS WisePOS E reader and Stripe Reader S700 support [in-person refunds](https://docs.stripe.com/terminal/payments/regional?integration-country=CA#refund-an-interac-payment) instead.\n\nOnline refunds don’t require a cardholder to present their card again at the point of sale. The following example shows how to create a full refund by passing in the PaymentIntent ID.\n\n`curl https://api.stripe.com/v1/refunds \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_intent=pi_Aabcxyz01aDfoo`\n\nTo refund part of a PaymentIntent, provide an `amount` parameter, as an integer in cents (or the charge currency’s smallest currency unit):\n\n`curl https://api.stripe.com/v1/refunds \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_intent=pi_Aabcxyz01aDfoo \\  -d amount=1000`",
    "title": "Refund transactions | Stripe Documentation",
    "description": "Cancel or refund Stripe Terminal payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/receipts",
    "markdown": "# Provide receipts | Stripe DocumentationThe Stripe Docs logo\n\nCard network rules and local regulatory requirements are different for in-person payments. If you accept payments using Stripe Terminal, you must provide customers with the option to receive a physical or email receipt. Stripe provides everything you need to start offering receipts with your first transaction.\n\nReceipts must contain certain fields to comply with card network rules. You can use Stripe’s [prebuilt email receipts](#prebuilt), or use receipt data from the Stripe API and your Terminal integration to generate on-brand [custom receipts](#custom).\n\n## Prebuilt email receipts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPrebuilt email receipts already include all card network-required fields. It’s the simplest way to set up compliant receipts.\n\nIf you have the customer’s email, use the `receipt_email` field when [creating a PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-receipt_email). When you provide a `receipt_email`, Stripe automatically emails a compliant receipt to the customer when [capturing](https://docs.stripe.com/terminal/payments/collect-card-payment#capture-payment) the PaymentIntent.\n\nTo trigger an automatic email receipt _after_ the customer checks out, update the PaymentIntent’s `receipt_email` with the customer’s email.\n\nFor more information about automatic email receipts, see [Email Receipts](https://docs.stripe.com/receipts).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/terminal-pre-built-receipt.64db66739eaf8f8db1f9dd61c463a322.png)\n\n## Custom receipts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can also customize receipts to include any design and content you want—as long as you list required information. When you accept in-person payments with EMV chip cards, card networks require you to include several fields on the receipts you provide to customers.\n\nThe Stripe API allows you to fetch necessary fields for compliance-ready receipts.\n\nThe following fields become available in the PaymentIntent object as soon as the payment is [confirmed](https://docs.stripe.com/terminal/payments/collect-card-payment#confirm-payment).\n\n| Field | Name | Requirement |\n| --- | --- | --- |\n| `account_type` | Account Type | **Required** (Optional in US) |\n| `application_preferred_name` | Application name | **Required** |\n| `dedicated_file_name` | AID | **Required** |\n| `authorization_response_code` | ARC | Optional |\n| `application_cryptogram` | Application Cryptogram | Optional |\n| `terminal_verification_results` | TVR | Optional |\n| `transaction_status_information` | TSI | Optional |\n\nYou can access these fields server-side using the Stripe API, or client-side using the Stripe Terminal SDKs. When using the JavaScript SDK, the PaymentIntent object matches the [API object](https://docs.stripe.com/api/payment_intents/object).\n\nWhether you’re emailing or printing your custom receipts for Terminal payments, be sure to include the **required** fields to meet card network rules. If provided, you can also access the cardholder’s preferred language (based on the presented card’s settings), using the `preferred_locales` field on the [Payment Method](https://docs.stripe.com/api/payment_methods/object#payment_method_object-card_present-preferred_locales) object.",
    "title": "Provide receipts | Stripe Documentation",
    "description": "Use Stripe to provide your customers with receipts that meet card network rules.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/incremental-authorizations",
    "markdown": "# Incremental authorizations | Stripe DocumentationThe Stripe Docs logo\n\n## Increase the authorized amount before capturing a payment.\n\nIncremental authorizations allow you to increase the authorized [amount](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount) on a confirmed [PaymentIntent](https://docs.stripe.com/payments/payment-intents) before you capture it. This is helpful if the total price changes or the customer adds goods or services and you need to update the amount on the payment.\n\nDepending on the issuing bank, cardholders might see the amount of the original pending authorization increase in place, or they might see each increment as an additional pending authorization. After capture, the total captured amount appears as one entry.\n\n## Availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen using incremental authorizations, be aware of the following restrictions:\n\n*   They’re only available with Visa, Mastercard, or Discover.\n*   Certain card brands have merchant category restrictions (see below).\n*   You can only increment a transaction made with the POS and reader fully online.\n*   You have a maximum of 10 attempts per payment.\n\n#### Availability by card network and merchant category![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse incremental authorizations on payments that fulfill the criteria below. You can find your user category in the [Dashboard](https://dashboard.stripe.com/settings/update/company/update).\n\nAttempting to perform an incremental authorization on a payment that doesn’t fulfill the below criteria results in an error.\n\n| Card brand | Merchant category |\n| --- | --- |\n| **Visa** | All user categories |\n| **Mastercard** | All user categories |\n| **Discover** | Car rental, hotels, local/suburban commuter, passenger transportation, including ferries, passenger railways, bus lines-charter, tour, steamship/cruise lines, boat rentals & lease, grocery stores and supermarkets, electric vehicle charging, eating places and restaurants, drinking places (alcoholic beverages), hotels, motels, resorts, trailer parks & campgrounds, equip/tool/furn/appl rental & leasing, automobile rental agency, truck and utility trailer rentals, motor home and rec vehicle rentals, parking lots, parking meters, and garages, amusement parks, circuses, fortune tell, recreation services (not classified) |\n\n[](#request-incremental-authorization-support)\n\nWhen you create a `PaymentIntent`, you can request the ability to capture increments of the payment. Set the [request\\_incremental\\_authorization\\_support](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support) field to `true` and the [capture\\_method](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) to `manual`.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card_present \\  -d capture_method=manual \\  -d \"payment_method_options[card_present][request_incremental_authorization_support]\"=true`\n\n[](#confirm-payment-intent)\n\nCheck the [incremental\\_authorization\\_supported](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) field in the confirm response to determine if the `PaymentIntent` is eligible for incremental authorization.\n\nYou can only perform incremental authorizations on uncaptured payments after confirmation. To adjust the amount of a payment before confirmation, use the [update](https://docs.stripe.com/api/payment_intents/update) method instead.\n\n`async () => {   const result = await terminal.processPayment(paymentIntent);   if (result.error) {     // Placeholder for handling result.error   } else if (result.paymentIntent) {     // Now you're ready to increment the authorization using your backend   } }`\n\n[](#increment-authorization)\n\nTo increase the authorized amount on a payment, use the [increment\\_authorization](https://docs.stripe.com/api/payment_intents/increment_authorization) endpoint and provide the updated total [amount](https://docs.stripe.com/api/payment_intents/increment_authorization#increment_authorization-amount) to increment to, which must be greater than the original authorized amount. This attempts to authorize for the difference between the previous amount and the incremented amount. Each `PaymentIntent` can have a maximum of 10 incremental authorization attempts, including declines.\n\nA single `PaymentIntent` can call this endpoint multiple times to further increase the authorized amount.\n\n`curl https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/increment_authorization \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1500`\n\nAn authorization can either:\n\n*   Succeed – Returns the `PaymentIntent` with the updated amount.\n*   Fail – Returns a [card\\_declined](https://docs.stripe.com/error-codes#card-declined) error, and the `PaymentIntent` remains authorized to capture the original amount. Updates to other `PaymentIntent` fields (for example, [application\\_fee\\_amount](https://docs.stripe.com/api/payment_intents/increment_authorization#increment_authorization-application_fee_amount)) aren’t saved.\n\n[](#capture-payment-intent)\n\nTo capture the authorized amount on a `PaymentIntent` that has prior incremental authorizations, use the [capture](https://docs.stripe.com/api/payment_intents/capture) endpoint. To increase the authorized amount and simultaneously capture that updated amount, provide an updated [amount\\_to\\_capture](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-amount_to_capture).\n\nProviding an `amount_to_capture` that’s higher than the currently authorized amount results in an automatic incremental authorization attempt.\n\n#### Note\n\nIf you’re eligible to [collect on-receipt tips](https://docs.stripe.com/terminal/features/collecting-tips/on-receipt), using an `amount_to_capture` that’s higher than the currently authorized amount won’t result in an automatic incremental authorization attempt. Capture requests always succeed.\n\n`curl https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/capture \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount_to_capture=2000`\n\nThe possible outcomes of an incremental authorization attempt are:\n\n*   Succeed – Returns the `captured` `PaymentIntent` with the updated amount.\n*   Fail – Returns a [card\\_declined](https://docs.stripe.com/error-codes#card-declined) error, and the `PaymentIntent` remains authorized to capture the original amount. Updates to other `PaymentIntent` fields (for example, [application\\_fee\\_amount](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-application_fee_amount)) aren’t saved.\n\nRegardless, when using `amount_to_capture` we recommend that you always check for potential failures.",
    "title": "Incremental authorizations | Stripe Documentation",
    "description": "Increase the authorized amount before capturing a payment.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/operate-offline/overview",
    "markdown": "# Operate offline | Stripe DocumentationThe Stripe Docs logo\n\nWhen you’re operating with intermittent, limited, or no network connectivity, Stripe Terminal allows you to store payments locally on your POS device. When a network connection is restored, the SDK automatically forwards any stored payments to Stripe.\n\nFrom your application’s perspective, the payment collection process is similar to operating online. While offline, the SDK securely stores the payment information and automatically forwards the stored payments when connectivity is restored. The SDK allows you to handle offline-related events using callbacks to your application.\n\n## Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Payment methods**: Visa, Mastercard, Discover, and American Express.\n\nCustomers can present a card or NFC-based mobile wallet belonging to a supported card brand. Swiping cards isn’t allowed. If you’re collecting payments in the [European Economic Area](https://en.wikipedia.org/wiki/European_Economic_Area \"European Economic Area\"), customers are required to insert their card and enter a PIN.\n\nInterac and eftpos aren’t supported. Co-branded eftpos cards are routed through the international scheme instead. For more information, see [eftpos Australia](https://docs.stripe.com/payments/eftpos-australia).\n\n**Readers**: [BBPOS Chipper 2X BT](https://docs.stripe.com/terminal/readers/bbpos-chipper2xbt), [Stripe Reader M2](https://docs.stripe.com/terminal/readers/stripe-m2), [BBPOS WisePad 3](https://docs.stripe.com/terminal/readers/bbpos-wisepad3)\n\n**Connection type**: Bluetooth, USB (Android only)\n\n**Integration types**: iOS SDK, Android SDK, React Native SDK\n\n### Collect a payment while offline![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following diagram describes the payment collection process when the Terminal SDK is offline. When storing payments, the SDK stores the payments to disk. You can safely reboot the POS device even if it has stored offline payments. When you re-initialize the SDK and it has reestablished a connection to the internet, and the SDK resumes forwarding any remaining stored payments.\n\n### Forward stored payments when online![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following diagram describes how stored payments are forwarded after connectivity is restored.",
    "title": "Operate offline | Stripe Documentation",
    "description": "Accept payments with intermittent, limited, or no internet connectivity.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/payments/collect-card-payment/supported-card-brands",
    "markdown": "# Supported card brands | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the card brands supported by Stripe Terminal.\n\nWhen you integrate Stripe Terminal, you can begin accepting a diversity of card brands. Your reader will automatically configure itself to accept the brands relevant for its region.\n\n## In-person brand capabilities![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following table describes some of the different features and restrictions of each card brand **in-person**, including limitations on countries where Stripe users can accept the brand (Stripe Account Country), support for different reader types, and card presentment modes. Terminal is currently available in [23 countries](https://docs.stripe.com/terminal#learn-about-terminal).\n\nWhen processing an in-person transaction, Terminal requires that you use local currency. Terminal supports NFC-based mobile wallets (Apple Pay, Google Pay, and Samsung Pay).\n\n| Card brand | Terminal location and Stripe account country | Reader types | Card presentment mode |\n| --- | --- | --- | --- |\n| Visa | All countries where Terminal is supported | All | All |\n| Mastercard | All countries where Terminal is supported | All | All |\n| eftpos | Australia | WisePad 3, WisePOS E, Stripe Reader S700, and Tap to Pay on iPhone | All |\n| American Express | All countries where Terminal is supported, except Malaysia | All | All |\n| Discover & Diners | United States, Canada, and United Kingdom | **US**: Verifone P400, Stripe M2, Chipper 2X BT, and Tap to Pay on iPhone  <br>**US, CA, GB**: WisePad 3, WisePOS E, and Stripe Reader S700 | All |\n| [Interac](https://docs.stripe.com/terminal/payments/regional?integration-country=CA#interac-payments) | Canada | WisePad 3, WisePOS E, Verifone P400, Stripe Reader S700, and Tap to Pay on iPhone | All |\n| Maestro | All non-US countries where Terminal is supported.  <br>As of July 2023, new Maestro cards aren’t issued. Expired cards will be replaced with Debit Mastercard. | WisePad 3, WisePOS E, Verifone P400, Stripe Reader S700, Tap to Pay on iPhone, and Tap to Pay on Android | All |",
    "title": "Supported card brands | Stripe Documentation",
    "description": "Learn about the card brands supported by Stripe Terminal.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/extended-authorizations",
    "markdown": "# Extended authorizations | Stripe DocumentationThe Stripe Docs logo\n\n## Capture a confirmed Stripe Terminal payment later.\n\nExtended authorizations allow you to capture a [confirmed](https://docs.stripe.com/api/payment_intents/confirm \"confirm\") [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) up to 30 days later, depending on the card brand and whether your business is in an eligible category. This is helpful if you need more than the typical 48 hours (or 5 days for Visa) between authorization and payment capture. For example, a hotel authorizes a payment in full when a guest checks in, but captures the payment when the guest checks out.\n\n## Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nExtended authorization is available on Visa, Mastercard, American Express and Discover. Extended authorizations are not supported on single-message payment methods like [Interac](https://docs.stripe.com/terminal/payments/regional?integration-country=CA#interac-payments) and [eftpos](https://docs.stripe.com/terminal/payments/regional?integration-country=AU#eftpos-payments).\n\nWhen you create a `PaymentIntent`, you can request to extend the capture window of the payment. Set the [request\\_extended\\_authorization](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_extended_authorization) field to `true` and the [capture\\_method](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) to `manual`.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card_present \\  -d capture_method=manual \\  -d \"payment_method_options[card_present][request_extended_authorization]\"=true`\n\nIn the response, the [capture\\_before](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-capture_before) field indicates the time when the authorization expires. Failure to capture the payment by this time cancels the authorization and releases the funds. When this happens, the [PaymentIntent status](https://docs.stripe.com/payments/paymentintents/lifecycle) transitions to `canceled`.\n\n## Authorization validity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery card network and card brand has a different rule for how long an authorization is valid. With Terminal, an authorization for in-person payments is valid for at least two days. Because authorization rules can change without prior notice, use the [capture\\_before](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-capture_before) field to determine the validity window for an authorization.\n\n#### Note\n\nThe `capture_before` field is located on the [Charge](https://docs.stripe.com/api/charges/object), so it is only present after the `PaymentIntent` is confirmed.\n\n| Card brand | Merchant category | Extended authorization validity window |\n| --- | --- | --- |\n| **Visa** | Hotel, lodging, vehicle rental, and cruise line | 30 days\\* |\n| **Visa** | Aircraft rental, bicycle rental (including electric scooters), boat rental, clothing and costume rental, DVD and video rental, equipment and tool rental, furniture rental, motor home rental, motorcycle rental, and trailer parks and campgrounds | 10 days\\*\\* |\n| **Mastercard** (not including Maestro or Cirrus cards) | All merchant categories | 30 days |\n| **American Express** | Lodging and vehicle rental | 30 days\\*\\*\\* |\n| **Discover** | Airline, bus charter/tour, car rental, cruise line, local/suburban commuter, passenger transportation including ferries, hotel, lodging, and passenger railway | 30 days |\n\n\\* The exact extended authorization window is 29 days and 18 hours, to allow time for clearing processes.  \n\\*\\* The exact extended authorization window is 9 days and 18 hours, to allow time for clearing processes.  \n\\*\\*\\* While your validity window is extended to 30 days, you must capture the authorized funds no later than the end of the duration of your customer’s stay or rental.",
    "title": "Extended authorizations | Stripe Documentation",
    "description": "Capture a confirmed Stripe Terminal payment later.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay?platform=ios",
    "markdown": "# Tap to Pay | Stripe DocumentationThe Stripe Docs logo\n\nUse Tap to Pay on iPhone to accept in-person contactless payments with a [compatible iPhone](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay?platform=ios#supported-devices).\n\nTap to Pay on iPhone includes support for Visa, Mastercard, American Express contactless cards, and NFC-based mobile wallets (Apple Pay, Google Pay, and Samsung Pay). PIN entry is supported in eligible markets. Additionally, Discover is supported in the US, Interac is supported in Canada, and eftpos is supported in Australia. Stripe includes Tap to Pay on iPhone in the Terminal iOS SDK and the Terminal React Native SDK, and enables payments directly in your iOS mobile app.\n\n#### Note\n\n### Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAustralia\n\nUnited Kingdom\n\nUnited States\n\n#### Note\n\nTap to Pay on iPhone isn’t available in Puerto Rico.\n\n### Available in Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCanada\n\nFrance\n\nItaly\n\nNetherlands\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTap to Pay on iPhone requires the latest version of the [Terminal iOS SDK](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=ios), and introduces an [`SCPDiscoveryMethodLocalMobile`](https://stripe.dev/stripe-terminal-ios/docs/Enums/SCPDiscoveryMethod.html#/c:@E@SCPDiscoveryMethod@SCPDiscoveryMethodLocalMobile) discovery option and a [`connectLocalMobileReader`](https://stripe.dev/stripe-terminal-ios/docs/Classes/SCPTerminal.html#/c:objc(cs)SCPTerminal(im)connectLocalMobileReader:delegate:connectionConfig:completion:) method. The minimum required SDK version is 2.23.0. To support Interac in Canada, the minimum required SDK version is 3.6.0.\n\nYou must first [set up](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=ios) the Terminal iOS SDK. After you’re familiar with the iOS SDK, you can start supporting Tap to Pay on iPhone within your application.\n\n### Entitlements and build file ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo use Tap to Pay on iPhone to accept payments, your application must request and configure the Tap to Pay on iPhone entitlement from [your Apple Developer account](https://developer.apple.com/). Review the [instructions for requesting this entitlement](https://developer.apple.com/documentation/proximityreader/setting-up-the-entitlement-for-tap-to-pay-on-iphone?language=objc).\n\nAfter you add an entitlements file to your app build target, add the following:\n\n|     |     |\n| --- | --- |\n| Key | `com.apple.developer.proximity-reader.payment.acceptance` |\n| Value type | `boolean` |\n| Value | `true` or `1` |\n\n## Supported devices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTap to Pay on iPhone requires an iPhone XS or later running:\n\n*   iOS 16.7 or later in the United States, Australia, and the United Kingdom.\n\n*   iOS 17.0 or later in France, Italy, and the Netherlands.\n\n*   iOS 17.4 or later in Canada.\n\nWe recommend asking your users to update to the latest iOS version for the best performance.\n\n#### Note\n\nTap to Pay won’t work on beta releases of iOS.\n\n## Cardholder verification limits and fallback ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome contactless card transactions above [certain amounts](https://support.stripe.com/questions/what-are-the-regional-contactless-limits-for-stripe-terminal-transactions) might require additional cardholder verification methods (CVM) such as PIN entry. Tap to Pay on iPhone supports PIN entry for devices running iOS 16.4+. NFC wallet payments (Apple Pay, Google Pay, and Samsung Pay) might not be subject to these same limits.\n\nIn the UK and Canada, there are specific considerations for contactless payments due to regional requirements and card issuer policies. In the UK, some cards might need to be inserted into a device to comply with Strong Customer Authentication requirements, which vary depending on the issuer. In such cases, the payment will be declined before the PIN screen appears, with the reason `offline_pin_required`.\n\nSimilarly, in Canada, the majority of issued cards are offline PIN only, meaning they require contact (for example, insertion into a device) to provide a PIN. Tap to Pay on iPhone doesn’t support offline PIN (only online PIN), which means any transaction over the CVM limit (250 CAD) for cards that only support offline PIN will be declined.\n\nIn these scenarios, we recommend instructing the customer to use a different card or another method to collect payment, such as a Terminal card reader or sending a [Stripe Payment Link](https://docs.stripe.com/payment-links).\n\n## Best practices and promotion guidelines ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFollow the [Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/technologies/tap-to-pay-on-iphone/) for Tap to Pay on iPhone to ensure of an optimal user experience and successful review process with Apple.\n\nConsider the following:\n\n*   Connect to the reader in the background on app startup to reduce wait times when collecting a payment.\n*   Reconnect to the reader when the app comes to the foreground to reduce wait times.\n*   Provide merchant education to guide your users on how to accept contactless payments on a compatible iPhone, including in-product promotion and text or email alerts. See Apple’s [developer marketing guidance](https://developer.apple.com/tap-to-pay/marketing-guidelines/) and [merchant education](https://developer.apple.com/tap-to-pay/how-to-accept-payments/) for more ideas.\n*   Launch and promote your Tap to Pay on iPhone marketing campaigns using our messaging templates and design assets following [Apple’s brand guidelines](https://developer.apple.com/tap-to-pay/marketing-guidelines/#editorial-guidelines). Become a Stripe Partner [here](https://stripe.com/partners/become-a-partner) to access these assets in the [partner portal](https://portal.stripe.partners/s).",
    "title": "Tap to Pay | Stripe Documentation",
    "description": "Accept contactless payments on a compatible iPhone or Android device with the Stripe Terminal SDK.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay?platform=android",
    "markdown": "# Tap to Pay | Stripe DocumentationThe Stripe Docs logo\n\nUse Tap to Pay on Android to accept in-person contactless payments with [compatible NFC-equipped Android devices](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay?platform=android#supported-devices).\n\nTap to Pay on Android includes support for Visa, Mastercard, and American Express contactless cards and NFC-based mobile wallets (Apple Pay, Google Pay, and Samsung Pay). Stripe includes Tap to Pay on Android in the Terminal Android SDK and the Terminal React Native SDK, and enables payments directly in your Android mobile app.\n\n### Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNew Zealand\n\nSingapore\n\nUnited Kingdom\n\nUnited States\n\n### Available in Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAustralia\n\nAustria\n\nBelgium\n\nCanada\n\nCzech Republic\n\nDenmark\n\nFinland\n\nFrance\n\nGermany\n\nIreland\n\nItaly\n\nLuxembourg\n\nMalaysia\n\nNetherlands\n\nNorway\n\nPortugal\n\nSpain\n\nSweden\n\nSwitzerland\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIntegrate the latest version of the [Terminal Android SDK](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=android) to include the latest bug fixes and features. You can view version-specific updates and bug fixes in the [SDK changelog](https://github.com/stripe/stripe-terminal-android/blob/master/CHANGELOG.md). **The minimum required SDK version to support all available countries is 2.21.1**.\n\nDevice and minimum SDK version requirements can change due to updated compliance requirements or security vulnerabilities. To make sure your solution is up to date with Tap to Pay requirements, please subscribe to [terminal-announce@lists.stripe.com](https://groups.google.com/a/lists.stripe.com/g/terminal-announce).\n\nTo enable Tap to Pay in your Android application:\n\n1.  [Set up](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=android) the Terminal Android SDK.\n2.  Replace your existing `stripeterminal` dependencies with the following dependencies:\n    \n    `dependencies {   implementation \"com.stripe:stripeterminal-localmobile:3.7.1\"   implementation \"com.stripe:stripeterminal-core:3.7.1\"   // ... }`\n    \n3.  [Connect](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=android&reader-type=tap-to-pay) to the Tap to Pay reader.\n4.  [Collect](https://docs.stripe.com/terminal/payments/collect-card-payment#collect-payment) the payment data with the Tap to Pay reader.\n5.  [Confirm](https://docs.stripe.com/terminal/payments/collect-card-payment#confirm-payment) the payment.\n\n## Supported devices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAndroid devices must meet all of the following criteria, otherwise reader discovery or the connection will fail:\n\n*   Contains functioning NFC antenna and chipset\n*   Isn’t rooted and device bootloader is locked and unchanged\n*   Runs a current version of Android (Android 11 or above)\n*   Uses Google Mobile Services and has the Google Play Store app installed\n*   Has a hardware backed keystore\n*   Supports generating key pairs using a variety of key algorithms, including RSA and AES from the Android keystore\n*   A stable connection to the internet\n\nAndroid device emulators aren’t supported by Tap to Pay.\n\n#### Note\n\nWhile Tap to Pay supports a variety of Android devices, we recommend using a Samsung Galaxy S22 or Samsung Galaxy A12 for development, if you want to get started quickly.\n\n## User interface![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTap to Pay on Android includes payment collection screens. When your application is ready to collect a payment, the Stripe Terminal SDK takes over the display to handle the collection process. After you call the [collect payment](https://docs.stripe.com/terminal/payments/collect-card-payment#collect-payment) method, your application continues to run while Tap to Pay displays a full-screen prompt that instructs the cardholder to tap their card or NFC-based mobile wallet. If there’s an error reading the card, a prompt for retry displays. A successful tap returns a success indication and then your application regains control to [confirm the payment](https://docs.stripe.com/terminal/payments/collect-card-payment#confirm-payment).\n\n### Device-specific NFC tap zone UI![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Tap to Pay on Android SDK supports device-specific UX that dynamically indicates to the end user where the tap zone is located on the device. View examples of what the UX might look like in practice:\n\nThe devices listed below are confirmed to meet the current hardware and minimum OS requirements. Device and operating system requirements might change in the future due to new security requirements.\n\n*   Google\n    *   Pixel 2, Pixel 2 XL, Pixel 3, Pixel 3 XL, Pixel 4, Pixel 4 XL\n    *   Pixel 5, Pixel 6, Pixel 6 Pro, Pixel 7, Pixel 7 Pro, Pixel 8, Pixel 8 Pro\n    *   Pixel 3a, Pixel 3a XL, Pixel 4a, Pixel 5a, Pixel 6a, Pixel 7a\n*   Samsung\n    *   Galaxy A12, Galaxy A13, Galaxy A14\n    *   Galaxy A21, Galaxy A21s, Galaxy A22, Galaxy A23, Galaxy A24\n    *   Galaxy A32, Galaxy A33, Galaxy A34\n    *   Galaxy A41, Galaxy A42\n    *   Galaxy A51, Galaxy A52, Galaxy A53, Galaxy A54\n    *   Galaxy A70, Galaxy A70s, Galaxy A71, Galaxy A72, Galaxy A73\n    *   Galaxy S10, Galaxy S20, Galaxy S21, Galaxy S22, Galaxy S23, Galaxy S24\n    *   Galaxy Note10, Galaxy Note20\n    *   Galaxy Tab Active3, Tab Active4 Pro\n*   Oppo\n    *   A16s, A54s, A73, A74, A94, A96\n    *   Reno5, Reno6, Reno7\n    *   Find X3, Find X5, Find X6, Find X7\n*   OnePlus\n    *   6, 6T, 7, 7 Pro, 7T, 7T Pro\n    *   8, 8 Pro, 8T, Nord, 9, 9 Pro, 9RT, 9R\n    *   10 Pro, 10R\n    *   Nord CE, Nord 2, Nord CE 2, Nord N10, Nord N20, Nord N200\n*   Xiaomi\n    *   Mi 10T, Mi Note 10\n    *   Redmi 9, Redmi 9T, Redmi 10, Redmi 11T\n    *   Redmi Note 9, Redmi Note 10, Redmi Note 11, Redmi Note 12\n    *   Poco X4, Poco X5, Poco X6\n\n## Cardholder verification limits and fallback ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome contactless card transactions [above certain amounts](https://support.stripe.com/questions/what-are-the-regional-contactless-limits-for-stripe-terminal-transactions) might require additional cardholder verification methods (CVM) such as PIN entry. Tap to Pay on Android doesn’t yet support PIN capture, so you might see elevated decline rates for transactions above the limit. NFC wallet payments (Apple Pay, Google Pay, and Samsung Pay) might not be subject to these same limits.\n\nWe recommend attempting the transaction anyway. When collecting payment with your mobile device, hold the card to the reader long enough to read the information from the chip. You might need to wait a few seconds after the initial vibrate when the card makes contact. In the event of a decline, use another method to collect payment, such as a Terminal card reader. You can only have one active connection to a reader at a time.\n\n## Best practices and promotion guidelines ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEnsure an optimal user experience by considering the following:\n\n*   Connect to the reader in the background on app startup to reduce wait times when collecting a payment.\n*   Reconnect to the reader when the app comes to the foreground to reduce wait times.\n*   Provide merchant education to guide your users on how to accept contactless payments on a compatible Android device, including in-product promotion and text or email alerts.\n*   Launch and promote your Tap to Pay on Android marketing campaigns using our messaging templates and design assets. Become a Stripe Partner [here](https://stripe.com/partners/become-a-partner) to access these assets in the [partner portal](https://portal.stripe.partners/s/login/?language=en_US&ec=302&startURL=%2Fs%2F).",
    "title": "Tap to Pay | Stripe Documentation",
    "description": "Accept contactless payments on a compatible iPhone or Android device with the Stripe Terminal SDK.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/apps-on-devices/overview",
    "markdown": "# Apps on Devices | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about deploying your Android POS apps on Stripe smart readers.\n\nUse Apps on Devices to run your point-of-sale (POS) application along with other apps on your device. You can deploy your POS app to Stripe smart readers to provide an all-in-one solution, or build a customer-facing app for payments, driven by your POS running on another device.\n\nStripe handles all payments and compliance with the Stripe Terminal Android SDK.\n\nApps on Devices enables the key phases of your app lifecycle:\n\n1.  [Build and test your app](https://docs.stripe.com/terminal/features/apps-on-devices/build)\n2.  [Prepare for app review](https://docs.stripe.com/terminal/features/apps-on-devices/app-review)\n3.  [Submit your app](https://docs.stripe.com/terminal/features/apps-on-devices/submit)\n4.  [Deploy your app to selected devices](https://docs.stripe.com/terminal/features/apps-on-devices/deploy)\n5.  [Monitor deployment](https://docs.stripe.com/terminal/features/apps-on-devices/monitor)\n\nView the [sample app](https://github.com/stripe-samples/terminal-apps-on-devices) to learn integration best practices, how to collect and confirm a payment, and more.\n\n## Supported integrations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nApps on Devices supports two types of integrations:\n\n*   [POS Android app on a Stripe smart reader](https://docs.stripe.com/terminal/features/apps-on-devices/overview#pos-stripe-device)\n*   [POS Android app paired with consumer-facing app on a Stripe smart reader](https://docs.stripe.com/terminal/features/apps-on-devices/overview#pos-consumer-app)\n\n#### Point-of-sale app on a Stripe smart reader ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn this integration, both your POS app and the Stripe Reader app run on a Stripe smart reader. When the device starts, it launches your POS app instead of the Stripe Reader app. When initiating a transaction, the Stripe Reader app becomes the primary. At the end of the transaction, the Stripe Reader app finishes and your POS app becomes the primary.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/apps-on-devices-pos-on-spos.d5f000091839ad34c7d963d7b365599b.png)\n\n#### Point-of-sale app paired with consumer-facing app on a Stripe smart reader ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn this integration, your POS app runs on a device that’s separate from the Stripe smart reader. Your consumer-facing Android app runs on the Stripe smart reader and supports the payment transaction.\n\nYou manage the communication between your POS app and consumer-facing app over TCP/IP.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/apps-on-devices-app-on-cfd.9a008cbbeec4bd909ee061db638873b2.png)\n\n## App requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nApp resources are limited by the device specs, and app functionality might be constrained by differences from standard Android development. Make sure your app can run successfully by operating within the requirements below.\n\n#### APK size limit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPK files that you upload to the Stripe API have a 100MB size limit.\n\n#### Device specs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Stripe Reader S700](https://docs.stripe.com/terminal/payments/setup-reader/stripe-reader-s700) has the following hardware specifications:\n\n|     |     |\n| --- | --- |\n| CPU | Qualcomm Snapdragon 665 QCM6125 |\n| RAM | 4GB |\n| Storage | 64GB |\n| OS  | Android 10 |\n| Screen dimensions | 1080x1920 pixels |\n| Screen pixel density | 420dpi (xxhdpi) |\n\n#### Device storage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe manages updates over the air for all apps and software components that run on the device. Make sure your app uses 8GB or less of storage on the device.\n\n## Differences from standard Android![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Stripe SmartPOS OS is built for security and PCI-compliance based on the Android Open Source Project (AOSP). It differs from standard consumer Android in the following ways:\n\n*   Google Play Services aren’t available on Stripe Android devices. You can integrate Google Play Services SDKs in your app, but you must verify that your app functions as expected. For example, parts of Firebase and Google Maps SDKs won’t function on Stripe devices.\n*   Notifications are disabled and the device user can’t access the home screen. Either your app or the Stripe reader app persists as the primary.\n*   Production devices have a disabled USB port. Additionally, [Android Debug Bridge](https://developer.android.com/studio/command-line/adb) (`adb`) and debugging aren’t available.\n\nYou can use a [DevKit device](https://docs.stripe.com/terminal/features/apps-on-devices/build) for development purposes.\n\n## Android permissions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDuring installation, the Stripe SmartPOS OS automatically grants [Android permissions](https://developer.android.com/guide/topics/permissions/overview) in your app’s manifest. The device user isn’t prompted for permission approval at runtime. Your app’s permissions are verified against the allowed permissions list, and apps requesting permissions in excess of the allowlist are rejected.\n\n#### Caution\n\nThe camera, Bluetooth, and location capabilities and APIs are still in the experimental phase and haven’t been fully tested, validated, and approved by Stripe. Their performance, reliability, and stability aren’t guaranteed. Use this functionality at your discretion.\n\nThe NFC functionality in the devices only supports payments—it can’t be used for non-payment related features.\n\n## Apps on Devices and Stripe Connect compatibility![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nApps on Devices supports all [Connect account types](https://docs.stripe.com/connect/accounts). A single platform must control certain types of connected accounts.",
    "title": "Apps on Devices | Stripe Documentation",
    "description": "Learn about deploying your Android POS apps on Stripe smart readers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/fleet/register-readers",
    "markdown": "# Register readers | Stripe DocumentationThe Stripe Docs logo\n\n## Register your readers to a location.\n\nYou must register your reader to a location to accept payments. The process for registering your reader to a location differs based on whether it’s a [smart reader](https://docs.stripe.com/terminal/smart-readers) or a [Bluetooth reader](https://docs.stripe.com/terminal/bluetooth-readers).\n\n## Smart readers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n### Registration code![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor this method, you must generate a pairing code (also known as a registration code) on the reader. If a reader isn’t registered, a pairing code automatically appears on the screen when you unbox it. If it isn’t, or if you need to re-register a reader, you can generate a new pairing code using the [admin settings](https://docs.stripe.com/terminal/payments/setup-reader/stripe-reader-s700#settings). After generating the pairing code, you can enter it in the Dashboard or API to register the reader.\n\n1.  On the **Readers** tab on the [Terminal Readers](https://dashboard.stripe.com/terminal/readers) page, click **Register Reader**.\n2.  Enter the pairing code on the reader and click **Next**.\n3.  Provide a name for the reader.\n4.  Assign to a location or create a new one.\n5.  Confirm the details and click **Register**.\n\n## Bluetooth readers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRegister Bluetooth readers ([Stripe Reader M2](https://docs.stripe.com/terminal/readers/stripe-m2), [BBPOS Chipper 2X BT](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=bluetooth#connect-reader), and [BBPOS WisePad 3](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=bluetooth#connect-reader)) to a location while connecting to the reader by specifying the `locationId` in your `BluetoothConnectionConfiguration`. If you prefer, you can register the reader to the last used location by passing in the `reader.locationId` from a discovered reader.\n\n#### Note\n\nTerminal SDK versions earlier than v2.0.0 don’t support registering BBPOS Chipper 2X BT or WisePad 3 readers to locations.",
    "title": "Register readers | Stripe Documentation",
    "description": "Register your readers to a location.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/fleet/order-and-return-readers",
    "markdown": "# Place hardware orders | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to place orders for reader hardware and accessories.\n\nOrder pre-certified readers compatible with Stripe Terminal from your Dashboard or using the Stripe API (beta). Purchase readers directly from Stripe so they’re loaded with Stripe’s payment applications and secure encryption keys.\n\nTo get started, navigate to the [Readers](https://dashboard.stripe.com/terminal) section in your Dashboard. Click **Shop** to view available products.\n\n## What to buy![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFirst, order a [reader](https://dashboard.stripe.com/terminal/shop) and a [test card](https://dashboard.stripe.com/terminal/shop) to test your full integration with physical hardware. When your integration is ready, order as many readers as you need.\n\nNot sure which reader you need? See [Designing an Integration](https://docs.stripe.com/terminal/designing-integration) to choose one for your integration.\n\nYou can order up to 10000 of each item in a single order. If you’re interested in volume discounts, you can [contact us](https://stripe.com/contact/sales).\n\n### Pricing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe price for each reader varies by country. You can view the most updated pricing in the [Dashboard](https://dashboard.stripe.com/terminal/shop).\n\n|     | [Stripe Reader M2](https://docs.stripe.com/terminal/payments/setup-reader/stripe-m2) | [BBPOS WisePOS E](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepos-e) | [BBPOS WisePad 3](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepad3) | [Stripe Reader S700](https://docs.stripe.com/terminal/payments/setup-reader/stripe-reader-s700) |\n| --- | --- | --- | --- | --- |\n|     | ![Stripe Reader M2](https://b.stripecdn.com/docs-statics-srv/assets/stripem2.bf6a7eabd353369bfa596a81ab51ca9a.png) | ![BBPOS WisePOS E](https://b.stripecdn.com/docs-statics-srv/assets/wisepos-floating-tall.e8478124cda0e088b2e19f503f574f53.png) | ![BBPOS WisePad 3](https://b.stripecdn.com/docs-statics-srv/assets/wisepad-floating-thumb.d6e3015116e0b4295b0106e770b9843e.png) | ![Stripe Reader S700](https://b.stripecdn.com/docs-statics-srv/assets/S700-3D.041eca5dfd580cdc451a41020b4dd45a.png) |\n| Australia | –   | 329 AUD | 89 AUD | 499 AUD |\n| Canada | –   | 299 CAD | 79 CAD | 449 CAD |\n| Austria<br><br>France<br><br>Germany<br><br>Ireland<br><br>Belgium<br><br>Spain<br><br>Netherlands<br><br>Luxembourg<br><br>Finland<br><br>Portugal<br><br>Italy | –   | 199 EUR | 59 EUR | 299 EUR |\n| Czech Republic | –   | 4990 CZK | 1490 CZK | 7250 CZK |\n| Malaysia | –   | 999 MYR | 279 MYR | 1499 MYR |\n| New Zealand | –   | 349 NZ | 99 NZ | 549 NZ |\n| Singapore | –   | 299 SGD | 89 SGD | 449 SGD |\n| United Kingdom | –   | 179 GBP | 49 GBP | 279 GBP |\n| Switzerland | –   | 199 CHF | 59 CHF | 329 CHF |\n| Norway | –   | 1990 NOK | 590 NOK | 3590 NOK |\n| Denmark | –   | 1499 DKK | 449 DKK | 2400 DKK |\n| Sweden | –   | 2195 SEK | 645 SEK | 3490 SEK |\n| United States | 59 USD | 249 USD | –   | 349 USD |\n|     | [Shop now](https://dashboard.stripe.com/terminal/shop) US only | [Shop now](https://dashboard.stripe.com/terminal/shop) | [Shop now](https://dashboard.stripe.com/terminal/shop) Non-US | [Shop now](https://dashboard.stripe.com/terminal/shop) |\n\n## Track and cancel orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter placing an order, check its status in the Dashboard:\n\n| Status | Definition |\n| --- | --- |\n| **Pending** | We’ve received your order and will fulfill it soon. If needed, you can cancel this order in the Dashboard. Orders remain pending for at least 30 minutes. |\n| **Ready to ship** | Your order is being prepared to ship and can no longer be canceled. After the order ships, you must initiate a return to cancel the order. The order becomes **Shipped** after a tracking number is available. |\n| **Shipped** | Order placed with our distributor. Tracking information is available on the Order details page. |\n| **Delivered** | Items have been delivered. |\n| **Canceled** | The order is canceled. |\n\n## Self service returns![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSelf service returns are for orders placed and shipped within specific countries (see countries below). See the information about [returns outside of supported self service countries](https://docs.stripe.com/terminal/fleet/order-and-return-readers#returns-outside-of-supported-self-service-countries) for all other orders.\n\nIf you’ve placed an order in the Stripe Dashboard within a country supporting self service and need to return some or all of the items in your order, [users with sufficient permission](#self-service-return-permissions) can initiate the return within the Stripe Dashboard. We can accept refunds for orders in original packaging (along with all accessories) within 30 days of the date of purchase. For returns past 30 days, please contact [Stripe Support](https://support.stripe.com/contact/login).\n\nGoing through the flow in the Dashboard produces a return shipping label. After you create the return shipping label, you can drop your package off at a local shipping carrier.\n\nStripe refunds the payment when our distribution facility receives the package. For credit cards, the process can take up to 10 days for the funds to be returned to the bank account.\n\n### Countries supporting self service returns![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](#step-1)\n\nTo initiate a Dashboard Return, navigate to your Hardware Orders and select the order you want to return. After you select the order, click **Return items** to start the process. The **Return items** button is available on the Terminal order details page if the hardware order has a status of `Shipped` or `Delivered`.\n\n![Self Service Returns - Step 1](https://b.stripecdn.com/docs-statics-srv/assets/returns-step1.9346efe2a1f1a81856654b99566f5a0b.png)\n\n[](#step-2)\n\nWhen the popup opens, select the number of items you’d like to return for each product in the order (if you have more than one item). We’ll only show the number of items eligible for return. So, if you previously purchased three items and returned one, you’ll only be able to select up to two units to return.\n\n![Self Service Returns - Step 2](https://b.stripecdn.com/docs-statics-srv/assets/returns-step2.18d56b1b58d3126dc3174bc2583d3d7b.png)\n\n[](#step-3)\n\nThe popup displays the amount to be refunded after you select the desired number of items.\n\nShipping fees are refunded on the first initiated return for a Terminal hardware order. For example, if you bought three readers and then returned one unit through a partial refund, then decided to return another unit, the second Dashboard return shows $0 for shipping fees to be refunded because these fees were returned in the first attempt.\n\n[](#step-4)\n\nNext, you need to select a reason for the return from the dropdown menu.\n\n![Self Service Returns - Step 4](https://b.stripecdn.com/docs-statics-srv/assets/returns-step4.d3e033266dc193ff0b4c666ad6fe48cf.png)\n\n*   **Items arrived defective or broken**—Select this option if any of the items received were damaged or defective.\n*   **I ordered too many devices**—Select this option if you ordered too many devices.\n*   **Device setup is too complicated**—Select this option if getting started with Stripe Terminal was too complicated or the product didn’t meet your expectations.\n*   **Other** - Select this option if none of the above options match your use case. A reason is required.\n\n[](#step-5)\n\nAfter you’ve confirmed the information is correct, select **Submit return’**—the option to download the shipping label appears after you select it. You can select **View UPS Locations** to find the nearest drop off location.\n\n![Self Service Returns - Step 5](https://b.stripecdn.com/docs-statics-srv/assets/returns-step5.bd0eff6b670cad01b97216f4a32ad627.png)\n\n[](#step-6)\n\nAfter the return is processed, you’ll be redirected back to the order details page. You can download the shipping label again from the details page if needed. Stripe issues a refund to the payment method you provided when we receive the return.\n\n## Returns outside of supported self service countries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo return a device where self service returns isn’t available, contact support. Navigate to your order in the Dashboard and click **Contact support** to automatically send us your order details. We can accept refunds for orders in original packaging (along with all accessories) within 30 days of the date of purchase.\n\n## Shipping![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe works with a distribution partner to fulfill Terminal orders. You can choose standard, express, or priority shipping, depending on the destination country. Hardware must be shipped to physical addresses (not PO boxes).\n\nIf you’re a [Connect platform using Terminal](https://docs.stripe.com/terminal/features/connect), you can ship readers directly to your connected accounts by specifying the destination address during checkout.\n\n| Destination country | Orders cutoff time | Order amount above which signature is required | Excluded regions and territories for shipping (all P.O. boxes are excluded) |\n| --- | --- | --- | --- |\n| United States | 11:00am Eastern Time | 500 USD | Virgin Islands and military addresses |\n| Canada | 1:00pm Pacific Time | 400 CAD | –   |\n| Austria | 11:00am Central European Time | 400 EUR | –   |\n| Belgium | 11:00am Central European Time | 400 EUR | –   |\n| Czech Republic | 11:00am Central European Time | 9900 CZK | –   |\n| Denmark | 11:00am Central European Time | 2975 DKK | –   |\n| Finland | 11:00am Central European Time | 400 EUR | –   |\n| France | 11:00am Central European Time | 400 EUR | Saint-Pierre and Miquelon, Saint Barthélemy, French Southern Territories, Wallis and Futuna, French Polynesia and New Caledonia |\n| Germany | 11:00am Central European Time | 400 EUR | –   |\n| Ireland | 11:00am Central European Time | 400 EUR | –   |\n| Italy | 11:00am Central European Time | 400 EUR | –   |\n| Luxembourg | 11:00am Central European Time | 400 EUR | –   |\n| Netherlands | 11:00am Central European Time | 400 EUR | Aruba, Curaçao, Sint Maarten, Bonaire, Sint Eustatius, and Saba |\n| Norway | 11:00am Central European Time | 400 EUR | Svalbard and Jan Mayen |\n| Portugal | 11:00am Central European Time | 400 EUR | –   |\n| Spain | 11:00am Central European Time | 400 EUR | –   |\n| Sweden | 11:00am Central European Time | 4315 SEK | –   |\n| Switzerland | 11:00am Central European Time | 400 EUR | –   |\n| United Kingdom | 11:00am Central European Time | 400 GBP | Jersey, Guernsey, Isle of Man, and the British Virgin Islands |\n| Australia | 11:00am Australian Eastern Time | 400 AUD | –   |\n| Malaysia | 11:00am Australian Eastern Time | 1200 MYR | –   |\n| New Zealand | 11:00am Australian Eastern Time | 400 NZD | –   |\n| Singapore | 11:00am Australian Eastern Time | 400 SGD | –   |\n\n## User roles and permissions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following table shows which [user roles](https://docs.stripe.com/get-started/account/teams/roles) can place orders on behalf of their account via the dashboard:\n\n|     | Administrator | Developer | Analyst | Support Specialist | View Only |\n| --- | --- | --- | --- | --- | --- |\n| Place new orders |     |     |     |     |     |\n| View list of orders |     |     |     |     |     |\n| Cancel an order |     |     |     |     |     |\n| Self service return |     |     |     |     |     |\n\n## Use the Hardware Orders API Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the Hardware Orders API if you’d like to: The Terminal Hardware Orders API enables you to programmatically purchase Terminal readers and accessories that can be sent directly to your users. Orders are fulfilled by Stripe’s distribution partners, so you don’t have to manage complex logistics and can instead focus on building your in-person payments business.\n\n*   Build an internal tool for your employees, such as store managers, to place orders for hardware\n*   Build an e-commerce ordering system for your customers to place orders for Terminal readers and accessories\n\nTo create a hardware order using the API, follow these steps:\n\n1.  Retrieve available SKUs\n2.  Retrieve available Shipping Methods\n3.  _(Optional)_ Preview the order\n4.  Create the order\n\n#### Beta\n\nYou must include a header in your API requests with your API version and the current version of the terminal hardware order beta: `Stripe-Version: 2024-06-20;terminal_hardware_orders_beta=v4`\n\n### Retrieve SKUs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo render an appropriate product page for users, your integration must request available items from Stripe. Each item is represented as a SKU and includes details about the product, such as the product token and price.\n\nEach SKU is associated with a country: a reader available in the US has a different SKU from the same reader that’s available in Canada. To retrieve SKUs, you can optionally specify the `country` parameter when making a request to the [Hardware Order SKUs](https://docs.stripe.com/api/terminal/hardware_skus/list) endpoint:\n\n`curl https://api.stripe.com/v1/terminal/hardware_skus?country=US \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -H \"Stripe-Version: 2024-06-20;terminal_hardware_orders_beta=v4\"`\n\nEach SKU is also associated with a [Hardware Product](https://docs.stripe.com/api/terminal/hardware_products/object). Products represent different categories of devices. If you’re building an e-commerce ordering system for your customers, make sure you only show the SKUs for the products that apply for your Terminal integration. For example, if your Terminal integration only uses the [BBPOS WisePOS E](https://docs.stripe.com/terminal/readers/bbpos-wisepos-e), don’t make the [BBPOS Chipper 2X BT](https://docs.stripe.com/terminal/readers/bbpos-chipper2xbt) reader available for purchase. To retrieve all [BBPOS WisePOS E](https://docs.stripe.com/terminal/readers/bbpos-wisepos-e) SKUs regardless of country, you can specify the optional `product` parameter when making a request to the [Hardware Order SKUs](https://docs.stripe.com/api/terminal/hardware_skus/list) endpoint:\n\n`curl https://api.stripe.com/v1/terminal/hardware_skus?product=`\n\n`{{TERMINAL_HARDWARE_PRODUCT_ID}}`\n\n `\\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -H \"Stripe-Version: 2024-06-20;terminal_hardware_orders_beta=v4\"`\n\nYou can combine the `country` and `product` parameters to only get a particular product in a particular country.\n\n#### SKUs availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSKUs and Products might become obsolete as we replace them with newer hardware. To help you manage planned obsolescence, see the [SKU and Product status](https://docs.stripe.com/api/terminal/hardware_skus/object#terminal_hardware_sku_object-status) that indicates which are currently `available` or `unavailable`. You can’t create an Order if the [SKU status](https://docs.stripe.com/api/terminal/hardware_products/object#terminal_hardware_sku_object-status) is `unavailable`.\n\nAdditionally, each SKU and Product has an optional [unavailable\\_after field](https://docs.stripe.com/api/terminal/hardware_skus/object#terminal_hardware_sku_object-unavailable_after) that indicates when it might become `unavailable`. Because the availabilities of these objects change over time, we recommend using an approach to query them dynamically. You can do this either by making a query before displaying the `available` objects to your users, or periodically (every day, for example) and caching the results you present to your users.\n\nWe don’t recommend hardcoding the tokens for these objects because such an integration requires code changes when a shipping method becomes `unavailable`. If you don’t perform these changes in time, you might attempt to place orders with `unavailable` objects, causing errors.\n\n### Retrieve Shipping Methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAnother required object used as an input for creating an order is the [Hardware Shipping Method](https://docs.stripe.com/api/terminal/hardware_shipping_methods/object). This object determines the estimated shipping time for your order as well as a portion of the price. You must use a Shipping Method available in country of the shipping address when creating an order.\n\nLike SKUs, each Shipping Method is associated with a country: the shipping methods available in the US might be different from those available in Canada. Each Shipping Method also has a `name`, which denotes the basic category for this shipping method. To retrieve Shipping Methods, you can optionally specify the `country` and/or `name` parameter when making a request to the [Hardware Shipping Methods](https://docs.stripe.com/api/terminal/hardware_shipping_methods/list) endpoint:\n\n`curl https://api.stripe.com/v1/terminal/hardware_shipping_methods?country=US \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -H \"Stripe-Version: 2024-06-20;terminal_hardware_orders_beta=v4\"`\n\nLike SKUs and Products, Shipping Methods might change over time. To help you manage these changes, each Shipping Method has a [status](https://docs.stripe.com/api/terminal/hardware_skus/object#terminal_hardware_sku_object-status) that indicates whether it’s currently `available` or `unavailable`. This mechanism works the same way as it does for SKUs and Products, as described above. As with SKUs and Products, we recommend fetching Shipping Methods periodically so your integration doesn’t become out of date.\n\n### Preview a hardware order![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo preview a hardware order, make a request to Stripe containing the SKUs, quantities, shipping address, and Shipping Method for the order.\n\n`curl https://api.stripe.com/v1/terminal/hardware_orders/preview \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -H \"Stripe-Version: 2024-06-20;terminal_hardware_orders_beta=v4\" \\   --data-urlencode \"shipping[name]\"=\"Jenny Rosen\" \\   --data-urlencode \"shipping[address][line1]\"=\"1234 Main Street\" \\   --data-urlencode \"shipping[address][city]\"=\"San Francisco\" \\   --data-urlencode \"shipping[address][state]\"=CA \\   --data-urlencode \"shipping[address][country]\"=US \\   --data-urlencode \"shipping[address][postal_code]\"=94111 \\   --data-urlencode \"shipping[company]\"=\"Rocket Rides\" \\   --data-urlencode \"shipping[phone]\"=15555555555 \\   --data-urlencode \"shipping[email]\"=\"test@example.com\" \\   --data-urlencode shipping_method=thsm_MfuTjLaPEgXMa4 \\   --data-urlencode payment_type=monthly_invoice \\   --data-urlencode \"hardware_order_items[][terminal_hardware_sku]\"=thsku_JokaJ6KpLMlDID \\   --data-urlencode \"hardware_order_items[][quantity]\"=2 \\   -G`\n\nPreviewing an order allows you to perform validation on the order and determine the overall cost of the taxes associated with the order without actually placing it, which you can use for designing an e-commerce checkout page for your customers. Calling the preview endpoint doesn’t actually create an order.\n\nTry to minimize the time between making a request to [Preview Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/preview) and [Create Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/create) to reduce the (very unlikely) chance that prices change in the interim. If you’re concerned about this issue you can save the preview and create an order using the same parameters. Then you can compare the saved preview with the order and cancel the order in the event of any changes.\n\n### Create a hardware order![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a [Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/object), you can make a [Create Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/create) request to Stripe that looks very similar to the [Preview Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/preview) request. Include the SKUs, quantities, shipping address, and Shipping Method for the order in your request.\n\n`curl https://api.stripe.com/v1/terminal/hardware_orders \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -H \"Stripe-Version: 2024-06-20;terminal_hardware_orders_beta=v4\" \\   -d \"shipping[name]\"=\"Jenny Rosen\" \\   -d \"shipping[address][line1]\"=\"1234 Main Street\" \\   -d \"shipping[address][city]\"=\"San Francisco\" \\   -d \"shipping[address][state]\"=\"CA\" \\   -d \"shipping[address][country]\"=\"US\" \\   -d \"shipping[address][postal_code]\"=\"94111\" \\   -d \"shipping[company]\"=\"Rocket Rides\" \\   -d \"shipping[phone]\"=\"15555555555\" \\   -d \"shipping[email]\"=\"test@example.com\" \\   -d \"hardware_order_items[][terminal_hardware_sku]\"=\"thsku_JokaJ6KpLMlDID\" \\   -d \"hardware_order_items[][quantity]\"=\"2\" \\   -d shipping_method=\"thsm_MfuTjLaPEgXMa4\" \\   -d payment_type=\"monthly_invoice\"`\n\nThe below example shows a US phone number. If the phone number provided by `shipping.phone` parameter is an international phone number, prefix it with an escaped version of the + sign (for example: `shipping[phone]=\"%2B358131234567\"` instead of `shipping[phone]=\"+358131234567\"`).\n\nThe email address provided by the `shipping.email` parameter receives Stripe-branded update emails when the status of the order changes. Use an email address that you feel comfortable receiving Stripe-branded emails.\n\n### Retrieve and query hardware orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter creating an order, you can [Retrieve a Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/retrieve) using the following request.\n\n`curl https://api.stripe.com/v1/terminal/hardware_orders/`\n\n`{{TERMINAL_HARDWARE_ORDER_ID}}`\n\n `\\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -H \"Stripe-Version: 2024-06-20;terminal_hardware_orders_beta=v4\"`\n\nYou can also [List all Terminal Hardware Orders](https://docs.stripe.com/api/terminal/hardware_orders/list).\n\n`curl https://api.stripe.com/v1/terminal/hardware_orders \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -H \"Stripe-Version: 2024-06-20;terminal_hardware_orders_beta=v4\"`\n\n### Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can [set up webhook events](https://docs.stripe.com/webhooks) to be updated about order state transitions. You must add a header version (for example, `Stripe-Version: 2024-06-20;terminal_hardware_orders_beta=v4`) to your webhook endpoints to receive events properly. We support the following webhook events:\n\n*   `terminal_hardware_order.created`\n*   `terminal_hardware_order.canceled`\n*   `terminal_hardware_order.ready_to_ship`\n*   `terminal_hardware_order.shipped`\n*   `terminal_hardware_order.delivered`\n*   `terminal_hardware_order.undeliverable`\n\n### Update a test mode order status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can update the status of a terminal hardware order in test mode using the following endpoints in the API:\n\n*   `/v1/test_helpers/terminal/hardware_orders/:hardware_order/mark_ready_to_ship`\n*   `/v1/test_helpers/terminal/hardware_orders/:hardware_order/ship`\n*   `/v1/test_helpers/terminal/hardware_orders/:hardware_order/deliver`\n*   `/v1/test_helpers/terminal/hardware_orders/:hardware_order/mark_undeliverable`\n\nYou can only update the status for terminal hardware orders in [test mode](https://docs.stripe.com/keys#test-live-modes).\n\n### Taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUpon order creation, Stripe returns the tax amounts associated with the order. We calculate these amounts based on the tax owed to Stripe for the purchase. If you charge tax to your end users for orders placed using the API, you can calculate the amounts owed to you and convey those amounts to your users. The amounts owed to you might differ from those owed to Stripe.\n\nFor Italian Tax Invoices, please visit the [Italian Tax Portal](https://www.agenziaentrate.gov.it/portale/area-riservata) to view invoices.\n\n### Invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDuring beta, Stripe sends monthly invoices for any orders created with the API. You can change the email that receives invoices in the [Dashboard](https://dashboard.stripe.com/settings/terminal).\n\n### Shipment Tracking![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs mentioned in the [Shipping](#shipping) section, Stripe works with a distribution partner to fulfill Terminal orders. When our distribution partner gets tracking information for the order it transions to the `shipped` state. You can set up a webhook endpoint for the `terminal_hardware_order.shipped` notification to be notified when an order has a tracking number.\n\n### Changelog![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### New carriers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add new values (`canada_post`, `dhl`, `dpd`, and `usps`) to the [Carrier](https://docs.stripe.com/api/terminal/hardware_orders/object#terminal_hardware_order_object-shipment_tracking-carrier) enum field.\n\n#### v4 (2023-01-23)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add a new [Preview Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/preview) endpoint. Remove `draft` and `expired` order statuses. Remove the `/v1/terminal/hardware_orders/confirm` endpoint and the `confirm` parameter in the [Create Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/create) endpoint.\n*   Add a new [TerminalHardwareOrder](https://docs.stripe.com/api/terminal/hardware_orders/object) status called `ready_to_ship`, which represents a state in which the order is no longer cancelable, but hasn’t yet shipped.\n*   Add new API endpoints to update the status of test mode terminal hardware orders to [ready\\_to\\_ship](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_mark_ready_to_ship), [shipped](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_ship), [delivered](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_deliver), and [undeliverable](https://docs.stripe.com/api/terminal/hardware_orders/test_mode_mark_undeliverable).\n*   Add a new [Hardware Shipping Method](https://docs.stripe.com/api/terminal/hardware_shipping_methods/object) object to replace the former object in the `shipping_method` field, as well as API endpoints for querying and retrieving these new objects.\n*   Add a new [Hardware Product](https://docs.stripe.com/api/terminal/hardware_products/object) object to replace the former `product_type` field, as well as API endpoints for querying and retrieving these new objects.\n*   Add a new, dynamic `orderable` field to the [TerminalHardwareSku](https://docs.stripe.com/api/terminal/hardware_skus/object) object, replacing the older `max_per_order` field.\n*   Add `status` and `unavailable_after` fields to [TerminalHardwareSku](https://docs.stripe.com/api/terminal/hardware_skus/object), which allow you to determine if and when a SKU becomes unavailable to order. These fields also exist on the new [Hardware Shipping Method](https://docs.stripe.com/api/terminal/hardware_shipping_methods/object) and [Hardware Product](https://docs.stripe.com/api/terminal/hardware_products/object) objects.\n*   If you have webhooks enabled for v3 and v4 under the same mode (that is, both test mode or both live mode) at the same time, then Stripe sends the `terminal_hardware_order.shipped` webhook twice. We send the `terminal_hardware_order.shipped` webhook when an order transitions to `ready_to_ship` and `shipped` as opposed to only sending it when an order transitions to `shipped`. Having v3 in live mode and v4 in test mode doesn’t cause duplicate webhooks. If you need to have both v3 and v4 active under the same mode at the same time, make sure to update your integration to handle duplicate `terminal_hardware_order.shipped` webhooks first.\n*   Orders that are `ready_to_ship` in v4 appear as `shipped` in v3. You might see an order with status `shipped` in v3 and `ready_to_ship` in v4 as you’re updating your migration. This happens because the `ready_to_ship` concept doesn’t exist in v3; the status of these orders doesn’t actually regress.\n\n#### v3 (2019-04-03) Deprecated![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Update [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus/object) and the [Terminal Hardware Order line item SKU object](https://docs.stripe.com/api/terminal/hardware_orders/object#terminal_hardware_order_object-hardware_order_items-terminal_hardware_sku) by removing text fields such as `name`, `description`, `images`, and `attributes`.\n*   Make the `shipping_country` query parameter in [Hardware Order SKUs](https://docs.stripe.com/api/terminal/hardware_skus/list) optional and rename it to `country`.\n*   Add the ability to query SKUs in the API by `product_type` and `country`.\n\n#### v2 (2019-12-20) Deprecated![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Update [Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/object) by turning `total_tax_amounts.rate.jurisdiction` from a structured object into a string.\n\n#### v1 (2019-11-20) Deprecated![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Initial release",
    "title": "Place hardware orders | Stripe Documentation",
    "description": "Learn how to place orders for reader hardware and accessories.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/radar/radar-session",
    "markdown": "# Provide Radar additional fraud data\n\nYou have some customizable choices on how to complete this step based on your particular use case and payments scenario.\n\n| Integration path | What happens | Use this for… |\n| --- | --- | --- |\n| Attach a Radar Session ID on both a Payment Method (when collecting card details) and when creating or confirming a Payment Intent. | Radar uses both sessions (when a user added a Payment Method and when the user actually made a payment with that Payment Method) to deliver better fraud protection by comparing browser information between the two events. | On-session payments. |\n| Attach a Radar Session ID on a Payment Method. | Radar associates the client data with the Payment Method and all future payments made with it. | Off-session payments. |\n\n### On-session payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRadar Sessions only works with Payment Intents API creation requests that result in a charge attempt. Therefore, when you create a PaymentIntent and are providing a Radar Session you must also specify `confirm=true`.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d payment_method=  {{PAYMENT_METHOD_ID}}   \\  -d confirm=true \\  -d \"radar_options[session]\"={{RADAR_SESSION_ID}}`\n\nIf you have an existing Payment Intent, you can attach a Radar Session to it when it’s confirmed.\n\n`curl https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/confirm \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_method=  {{PAYMENT_METHOD_ID}}   \\  -d \"radar_options[session]\"={{RADAR_SESSION_ID}}`\n\nAlthough not required, if your customers visit your site and make on-session payments, it’s always best to send a Radar Session when you create or confirm a Payment Intent and when you create a Payment Method. Any charges created using a Payment Method with a Radar Session use the client information associated with that Radar Session.\n\n`curl https://api.stripe.com/v1/payment_methods \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d type=card \\  -d \"card[number]\"=4242424242424242 \\  -d \"card[exp_month]\"=11 \\  -d \"card[exp_year]\"=2026 \\  -d \"card[cvc]\"=314 \\  -d \"radar_options[session]\"={{RADAR_SESSION_ID}}`\n\nThis allows Radar to use both sessions (when a user added a Payment Method and when the user actually made a payment with that Payment Method) to deliver better fraud protection by comparing browser information between the two events.\n\n### Off-session payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo send a Radar Session for off-session payments, which means completing the payment without the customer’s direct involvement, you need to attach a Radar Session when creating a Payment Method for your customer.\n\n`curl https://api.stripe.com/v1/payment_methods \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d type=card \\  -d \"card[number]\"=4242424242424242 \\  -d \"card[exp_month]\"=11 \\  -d \"card[exp_year]\"=2026 \\  -d \"card[cvc]\"=314 \\  -d \"radar_options[session]\"={{RADAR_SESSION_ID}}`",
    "title": "Provide Radar additional fraud data | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/radar/risk-evaluation",
    "markdown": "# Risk evaluation | Stripe DocumentationThe Stripe Docs logo\n\n## Access the Stripe Radar risk evaluations in the Dashboard and the API.\n\nAt the core of Stripe Radar is an adaptive machine learning system that evaluates the risk level for each payment in real time. It uses hundreds of signals about each payment, and taps into data across our network of millions of businesses, to predict whether a payment is likely to be fraudulent.\n\nOur [machine learning system](https://stripe.com/radar/guide) is flexible and responsive, continuously learns from new customer purchase patterns and transaction features, and incorporates feedback from you whenever payments are indicated as fraudulent.\n\n#### Note\n\nWhen a business using Stripe sees a card for the first time, there’s a 91% chance that we’ve seen the card elsewhere on the Stripe network in the past.\n\n## When to use Radar![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRadar evaluates risk and runs rules for three different types of Stripe API objects: [Charges](https://docs.stripe.com/api/charges), [PaymentIntents](https://docs.stripe.com/api/payment_intents) and [SetupIntents](https://docs.stripe.com/api/setup_intents). Stripe designed the Radar rules to take four different actions:\n\n*   Request 3DS authentication\n*   Allow the creation of the object\n*   Block the creation of the object\n*   Review the creation of a Charge\n\nThe following table illustrates which rules Radar runs for each type of API object:\n\n| Transaction type | Request 3DS | Allow & Block | Review |\n| --- | --- | --- | --- |\n| Charge |     | ✔   | ✔   |\n| PaymentIntent | ✔   | ✔   | ✔   |\n| SetupIntent | ✔   | ✔   |     |\n\nYou can enable Radar for SetupIntents in your [Radar settings](https://dashboard.stripe.com/test/radar/settings).\n\n## Risk outcomes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Stripe machine learning models evaluate the likelihood that a payment is fraudulent. This judgment can take one of five values:\n\n*   [High risk](#high-risk)\n*   [Elevated risk](#elevated-risk)\n*   [Normal risk](#normal-risk)\n*   [Not evaluated](#not-evaluated)\n*   [Unknown risk](#unknown-risk)\n\nEach payment includes information on the _outcome_ of our risk evaluation.\n\nRadar for fraud teams users will see a [risk insights](https://docs.stripe.com/radar/reviews/risk-insights) section on the payment page that provides more details about why we assigned a payment a particular risk level and score.\n\nIf a card issuer [declines](https://docs.stripe.com/declines) a payment, Stripe also includes any information we receive from them as part of the outcome.\n\nThe outcome for each payment is available when viewing a payment in the [Dashboard](https://dashboard.stripe.com/) or through the API as part of the [Outcome](https://docs.stripe.com/api#charge_object-outcome) attribute of the [Charge](https://docs.stripe.com/api#charge_object) object.\n\n### High risk payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe reports payments as high risk when we believe they’re likely to be fraudulent. Payments of this risk level are [blocked](https://docs.stripe.com/radar/rules#built-in-rules) by default.\n\nOn the `Charge` object of a high risk payment, the `risk_level` is set to `highest`.\n\n`... \"outcome\": {   \"network_status\": \"not_sent_to_network\",   \"reason\": \"highest_risk_level\",   \"risk_level\": \"highest\",   \"risk_score\": 92, // Provided only with Stripe Radar for Fraud Teams   \"seller_message\": \"Stripe blocked this charge as too risky.\",   \"type\": \"blocked\", } ...`\n\nIf Stripe Radar ever blocks a payment that you know is legitimate, you can remove the block using the Dashboard. To do this, view the payment in the Dashboard and click **Add to allow list**. Adding a payment to the allow list doesn’t retry the payment, but it does prevent Stripe Radar from blocking future payment attempts with that card or email address.\n\n#### Note\n\nDon’t see **Add to allow list**? [Contact Stripe](https://support.stripe.com/email) to have this feature added to your Radar account.\n\n### Elevated risk payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nElevated risk payments have an increased chance of being fraudulent. Stripe Radar allows payments of this risk level by default. Stripe Radar for Fraud Teams automatically places elevated risk payments into your [review](https://docs.stripe.com/radar/reviews) queue so you can take a closer look.\n\nOn the `Charge` object of an elevated risk payment, the `risk_level` is set to `elevated`.\n\n`... \"outcome\": {   \"network_status\": \"approved_by_network\",   \"reason\": \"elevated_risk_level\",   \"risk_level\": \"elevated\",   \"risk_score\": 56, // Provided only with Stripe Radar for Fraud Teams   \"seller_message\": \"Stripe evaluated this charge as having elevated risk, and placed it in your manual review queue.\",   \"type\": \"manual_review\" } ...`\n\n### Normal risk payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayments with a normal risk evaluation have fewer characteristics that are strongly indicative of fraud than payments with elevated or high risk levels. However, we recommend that you continue to be vigilant when fulfilling these orders. Payments that have normal risk can still turn out to be fraudulent and there are other possible [types of fraud](https://docs.stripe.com/disputes/prevention/identifying-fraud) that can occur later on in the order process.\n\nOn the `Charge` object of a successful payment with normal risk, the `risk_level` is set to `normal`.\n\n`... \"outcome\": {   \"network_status\": \"approved_by_network\",   \"reason\": null,   \"seller_message\": \"The charge was authorized.\",   \"risk_level\": \"normal\",   \"risk_score\": 23, // Provided only with Stripe Radar for Fraud Teams   \"type\": \"authorized\", } ...`\n\n### Not evaluated ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Risk level is set to `not_assessed` for non-card payments, card-based payments predating the public assignment of risk levels, and for payments where the merchant opts out of Radar fraud risk assessment.\n\nOn the `Charge` object of an unevaluated payment, the `risk_level` is set to `not_assessed`.\n\n`... \"outcome\": {   \"network_status\": \"approved_by_network\",   \"reason\": \"not_assessed_risk_level\",   \"risk_level\": \"not_assessed\",   \"seller_message\": \"Your business has opted out of Radar fraud risk assessments.\",   \"type\": \"authorized\" } ...`\n\n### Unknown risk payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn unusual cases, an error might cause risk evaluation to fail. In this case, Stripe reports the payment as having unknown risk.\n\nOn the `Charge` object of an unknown risk payment, the `risk_level` is set to `unknown`.\n\n`... \"outcome\": {   \"network_status\": \"approved_by_network\",   \"reason\": \"unknown_risk_level\",   \"risk_level\": \"unknown\",   \"seller_message\": \"Something went wrong while evaluating this payment. Our engineers have been notified and we’ll look into this as soon as possible.\",   \"type\": \"authorized\" } ...`\n\n## Searching for a specific risk level in the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can search for payments of a specific risk level using the **risk\\_level** search term and the desired risk level. For example, a search for [risk\\_level:highest](https://dashboard.stripe.com/test/search?query=risk_level%3Ahighest) returns a list of all payments with a high risk level. Likewise, a search for [risk\\_level:elevated](https://dashboard.stripe.com/test/search?query=risk_level%3Aelevated) returns a list of all payments with an elevated risk level.\n\n## Feedback on risk evaluations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhile we use information across our network to evaluate a payment, you might have additional information about a payment as a result of a customer interaction. The Stripe machine learning models respond to feedback you share with us, and you can help improve our fraud detection algorithms by [refunding](https://docs.stripe.com/refunds) and reporting payments that you believe are fraudulent.\n\nRefunding fraudulent payments helps improve our fraud detection algorithms and the accuracy of our risk evaluations for this payment, and similar ones in the future.\n\nTo refund a payment and mark it as fraudulent, view the payment in the Dashboard and then:\n\n1.  Click **Refund**.\n2.  Select **Fraudulent** as the **Reason**.\n3.  Provide a brief explanation.\n\nYou can also indicate that a payment is fraudulent when you [create a refund](https://docs.stripe.com/api#create_refund) using the API by providing `fraudulent` as the value for `reason`. This adds the email address and card fingerprint associated with the payment to the default email address and card fingerprint [block lists](https://docs.stripe.com/radar/lists#default-lists).\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`# If you haven't refunded the charge, you can do so and let Stripe # know it was fraudulent in one step. Stripe::Refund.create({   charge: '{{CHARGE_ID}}',   reason: 'fraudulent', })  # If you already refunded the charge (without specifying the # 'fraudulent' reason), you can still let us know it was fraudulent. Stripe::Charge.update(   '{{CHARGE_ID}}',   {     fraud_details: {       user_report: 'fraudulent',     },   } )`\n\nFor a small subset of charges, Stripe modifies the reported risk score so we can measure the performance of our models and obtain data for subsequent model development. This allows Stripe to ensure key metrics like false positive rate and recall remain within desirable ranges, and that model performance continues to improve.\n\nIf you don’t want the protection of the Stripe Radar machine learning models, you can opt out by [contacting](https://stripe.com/contact) our Support team.",
    "title": "Risk evaluation | Stripe Documentation",
    "description": "Access the Stripe Radar risk evaluations in the Dashboard and the API.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/radar/risk-settings",
    "markdown": "# Risk controls | Stripe DocumentationThe Stripe Docs logo\n\n## Adjust how aggressively you block fraud for your business with Radar for Fraud Teams.\n\nTo adjust the default risk score for blocking payments, use Radar for fraud teams. Go to the [Radar risk controls](https://dashboard.stripe.com/settings/radar/risk-controls) page to make your adjustments.\n\n![Screenshot of the drawer you see when adjusting your Radar risk controls](https://b.stripecdn.com/docs-statics-srv/assets/new-overview.34e6267dd144e7f58ab45f3b07a7e316.png)\n\nThe risk settings dialog shows your block threshold, your dispute rate, and other important statistics\n\n## How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Radar gives each charge a numerical [risk score](https://docs.stripe.com/radar/risk-evaluation#risk-outcomes) between 0 and 99, where 0 is the lowest risk and 99 highest.\n\n### Blocking payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe default _blocking threshold_ is 75, meaning Radar blocks charges with a score of 75 or higher. If you decrease your threshold, you’ll block more payments.\n\nYou need to make sure [the default block rule](https://docs.stripe.com/radar/rules#built-in-rules) or an equivalent custom rule is enabled for Radar to block transactions based on this threshold.\n\n### Manual reviews![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe default _manual review threshold_ is 65, meaning Radar sends charges with a score of 65 or higher to manual review. Changing the blocking threshold automatically changes the manual review threshold accordingly.\n\nFor Radar to send transactions to manual reviews based on this threshold, you need to enable [the default review rule](https://docs.stripe.com/radar/rules#built-in-rules) or equivalent custom rules.\n\n### Adjusting your threshold![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you change your blocking threshold, you see the following statistics:\n\n| Metric | Description |\n| --- | --- |\n| **Estimated fraud volume that is blocked or allowed** | The estimated volume of fraudulent payments that will be blocked or allowed at the new blocking threshold. |\n| **Estimated good volume that is blocked or allowed** | The estimated volume of good payments that will be blocked or allowed at the new blocking threshold. |\n| **Estimated previously blocked volume that is blocked or allowed** | The estimated volume of previously blocked payments that will be blocked or allowed at the new blocking threshold. Because these payments were blocked and never processed, some of these payments might be fraudulent. |\n| **Fraud rate by volume** | The percent of payments by volume that have received a dispute, an Early Fraud Warning (EFW), or were refunded as fraud. |\n| **Block rate by volume** | The percent of payments by volume that were attempted but were blocked by Radar or by Stripe. Payments are blocked by Stripe to protect you from card testing and other risks that affect all users, regardless of your usage of Radar. |\n\n## When to use it![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can customize the default threshold to fit your own business needs. Setting the risk score threshold requires you to consider a tradeoff between how much fraud Radar blocks and how many payments it allows.\n\n### Block more fraud![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your business is experiencing higher rates of fraud, you can decrease the score for blocking payments. To determine what risk score is right for your business, hover over the **Block additional payments by setting your acceptable risk score** chart.\n\n![Screenshot that shows the chart with good and fraudulent payments by risk score](https://b.stripecdn.com/docs-statics-srv/assets/new-blocked-volume-chart.a439ebbb6db56c1245bf744e516120c7.png)\n\nThis chart shows how many fraudulent and good payments you would’ve blocked if you set your threshold at that risk score. Here, you can see:\n\n| Metric | Description |\n| --- | --- |\n| **Volume blocked** | Volume of fraudulent and good payments would be blocked. |\n| **% blocked** | The percent of fraudulent and good payments that are blocked respectively. For example, blocking at 65 would result in 55% of your fraud getting blocked at the expense of only 1% of good payments. |\n| **\\# of payments blocked** | Number of fraudulent and good payments would be blocked. |\n\nUltimately, it is up to your business to decide what tradeoff you’re willing to accept in terms of how much fraud versus good payments you block.\n\n### Allow more payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your business has low fraud rates and costs, you might want to increase the default blocking score so that you can allow more payments overall.\n\n![Screenshot that shows the chart with blocked payments by risk score](https://b.stripecdn.com/docs-statics-srv/assets/new-allowed-volume-chart.520f969604f2c058be9330391eb05aaa.png)\n\nThis chart shows how many payments you would allow if you set your threshold at that risk score. Here, you can see:\n\n| Metric | Description |\n| --- | --- |\n| **Volume allowed** | Volume of payments would be allowed. |\n| **\\# of payments allowed** | Number of payments that would be allowed. |\n\nIf you’re increasing the risk score for blocking charges, we can’t accurately predict the impact of this change on your fraud rate (as some charges that were previously blocked will now be allowed). Be careful when adjusting the risk score in this direction.",
    "title": "Risk controls | Stripe Documentation",
    "description": "Adjust how aggressively you block fraud for your business with Radar for Fraud Teams.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/radar/reviews",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Reviews\n\n## Use reviews to supplement automated systems with human expertise.\n\nWhile Stripe’s automated systems work to prevent fraud on your account, you can use reviews to provide an extra layer of fraud protection by giving payments a manual inspection.\n\nFor example, you might want to review transactions that:\n\n*   Have an [elevated risk](https://docs.stripe.com/radar/risk-evaluation#elevated-risk) of fraud according to Stripe’s fraud protection system\n*   Were made from outside your country\n*   Are greater than a certain amount\n*   Use an email address from an unusual domain\n\nThe review queue of Stripe Radar for Fraud Teams allows you to examine unusual payments, without having to look at each payment individually. You can create a targeted list of payments to review with criteria that you specify, and review them in the Dashboard.\n\n## Reviewing payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Dashboard [review queue](https://dashboard.stripe.com/radar/reviews) is a prioritized list of completed or to-be-captured payments that might need further investigation. You can review payments in two key ways: the [list view](#list-view) allows you to scan a list of reviews without seeing details about a payment, but the [detailed view](#detailed-view) provides much more context about it. You can also customize the detailed view with your own data.\n\n#### Note\n\nPayments placed into review have typically already been successfully processed, unless you use a [process of capturing a payment later](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method). You can approve a payment as-is, refund it, or refund it and mark it as fraudulent.\n\n### List view![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe list view contains information to help you quickly get a sense for each payment’s possible risk of fraud.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/review-queue.dfc3436620db92f3dfc2aca9eee5f07d.png)\n\nThe manual review queue in the Dashboard.\n\nThe list view highlights:\n\n*   The risk level Stripe has assigned after evaluating the payment\n*   [Customer](https://docs.stripe.com/api/customers \"Customers\") name\n*   Payment method information\n*   Customer information\n*   Amount, date, and time of the payment\n*   Device\n*   The device IP address\n\n### Detailed view![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you need to view further information about a payment before making a decision (such as any [metadata](#best-practices)), select the payment within the review queue to view the entire payment detail page. You can navigate between payments to review using the **Previous** and **Next** buttons.\n\nThe Stripe Radar machine learning system evaluates hundreds of signals when scoring a charge. The [risk insights](https://docs.stripe.com/radar/reviews/risk-insights) section on the payment page identifies some of the most relevant signals, along with some key data points that can help assess fraud on a payment. The [related payments](https://docs.stripe.com/radar/reviews/risk-insights#related-payments) section shows other payments made to your business that use the same email address, IP address, or card number as the payment you’re currently reviewing.\n\n## Actions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you review a completed payment, you can remove it from the review queue by taking one of the following actions:\n\n*   **Approve**: Closes the review with no changes made to the payment. You can still refund and, optionally, report fraud on an approved payment.\n*   If you [capture payments later](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method), there is also a **Capture** button. You can capture a payment before or after approval.\n*   **Refund**: Refunds the payment without reporting it to Stripe as fraudulent. A completed refund is permanent, you can’t undo it—you must process a new payment. If you capture payments later, this button changes to **Cancel**. You can read more about [this review process here](https://docs.stripe.com/radar/reviews/auth-and-capture).\n*   **Refund and report fraud**: Refunds the payment and also reports it to Stripe as fraudulent, for instance to [save dispute fees](https://docs.stripe.com/disputes/prevention/best-practices#consider-proactively-refunding-suspicious-payments). This adds the associated card fingerprint and customer email to your [block lists](https://docs.stripe.com/radar/lists#default-lists) and further increases the effectiveness of our fraud prevention.\n\n#### Note\n\nIf a customer [disputes](https://docs.stripe.com/disputes) a payment that’s currently in your review queue, the review is automatically closed.\n\n### Customizing the review queue![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith Stripe Radar for Fraud Teams, you can create [rules](https://docs.stripe.com/radar/rules#review-rules) that automatically place payments in review based on your unique business needs. This gives you the opportunity to identify payments that might require more investigation before you can make an informed decision.\n\n## Review Assignments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAnyone managing the review queue can assign themselves to reviews to avoid duplicating effort.\n\nAs a reviewer, you can see which reviews other people are working on and assign or remove yourself from reviews. You can also filter the review queue to see reviews you own or reviews that are currently unassigned.\n\n#### Note\n\nYou can only change review assignments for yourself, not for other team members.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/review-assignment-list-view.3ab75298a2c6c8cd63332cba6384b0af.png)\n\nIn the list view, use quick actions or the overflow menu to assign yourself to a review.\n\nTo assign yourself to a review in the [list view](https://docs.stripe.com/radar/reviews#list-view), hover over a review and click on the person icon or the **Assign to me** button in the overflow menu. In the [detail view](https://docs.stripe.com/radar/reviews#detailed-view), click the **Assign to me** button at the top right.\n\n#### Note\n\nIf a review is assigned to another team member, you can still take action on it or assign it to yourself. You can find a complete history of assignment changes in the timeline of the review.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/review-assignment-timeline.1a12ea24f415633b9968a63f8dcfb29b.png)\n\nThe timeline in the detail view displays a history of assignment changes.\n\n## Best practices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following best practices to get the most out of reviews and perform them efficiently.\n\n*   **Focus time on payments where human judgment can add valuable insight to the decision**\n    \n    Automated systems can make decisions on the majority of payments but human decision making can significantly improve accuracy when identifying fraud in some cases. Because not every case would benefit from human involvement, make sure that you choose transactions where the benefit is clear.\n    \n*   **Use risk insights and related payments to make an informed decision**\n    \n    Use the data in the [risk insights](https://docs.stripe.com/radar/reviews/risk-insights) section to see how Stripe Radar came up with a score for a charge. Combining the reasons for a score, knowledge about your business, and human judgement can help you make an informed choice about when to trust or ignore the score assigned by Radar.\n    \n*   **Leverage the insights from reviewers to develop hypotheses for fraud prevention strategies**\n    \n    As reviewers sort through your transactions, they develop intuitions for fraud prevention that you can translate into better rules. Collect insights from reviewers to [test custom rules on your account](https://docs.stripe.com/radar/testing#rules).\n    \n*   **Customize the process by presenting data unique to your business at review time**\n    \n    Pass along any additional customer or order information as metadata so that all relevant information is in the Dashboard at the time of review. Some examples of useful metadata include:\n    \n    *   More information about the order and its shipping information\n    *   [Google Maps](https://maps.google.com/) and Street View links to the customer’s shipping address so the reviewer can see if the address might be a drop-shipping or freight-forwarding service\n    \n*   **Don’t slow down your customer**\n    \n    A review implies some amount of time between order placement and delivery. If your business has an inherent delay of this type (for example, you’re shipping physical goods), taking the time to review a transaction doesn’t change the customer experience. If you don’t have a built-in delay between orders and fulfillment with your business, adding a review process could slow down orders and create a bottleneck for good customers. Consider the impact on customers before you implement a review process.",
    "title": "Reviews | Stripe Documentation",
    "description": "Use reviews to supplement automated systems with human expertise.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/radar/analytics",
    "markdown": "# Radar Analytics | Stripe DocumentationThe Stripe Docs logo\n\n## Understand fraud patterns and their impact on your business.\n\nThe [Radar analytics dashboard](https://dashboard.stripe.com/radar) helps you analyze and understand the state of fraud for your business. The dashboard contains several reports with information about how much fraud [Radar](https://docs.stripe.com/radar \"Radar\") is blocking for your business in addition to information about important indicators of changing fraud patterns.\n\nUsing [Sigma](https://stripe.com/sigma) or [Data Pipeline](https://stripe.com/data-pipeline), you can use [Radar rule attributes](https://docs.stripe.com/radar/rules/reference#supported-attributes) alongside your own dataset to [continuously improve your fraud management](https://stripe.com/guides/improve-fraud-management-with-radar-for-fraud-teams-and-stripe-data), identify fraudulent payments, create a deeper understanding of your customers, and analyze data in an environment that works best for you.\n\n[](#overview-chart)\n\nWhen fighting fraud, it’s important to see what Radar is doing during the flow of attempted payments. The **Overview Chart** shows you how Radar helps reduce fraud. From left-to-right, you can see payments flow through a few steps in their lifecycle. First, you can see the **Authenticated** column, showing you how many payment attempts went through a 3DS challenge, and how many completed and failed. The second column, **Screened by Radar**, shows how often Radar’s risk score and your Radar Rules blocked suspicious payments, sent others to your review queue, and allowed the rest to continue the payment attempt. Finally, the **Disputed** column shows the disputes on your account.\n\nBelow the chart, a table shows the numeric values for each column. Hover over a value to see its detailed information, with subcategories, counts, and subtotals.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/overview-chart.11b383fa7a82a7768f56c2772a8e266b.png)\n\n[](#benchmarking)\n\nWithout a comparison, it’s hard to tell what a particular fraud rate means. Is a 0.02% dispute rate good or bad? The answer depends on your business model, your region, and many other factors. Radar provides merchants with a comparison to similar businesses on key fraud metrics to help inform actions you can take to improve the performance of Radar.\n\nRadar has a tool specifically for this—aggregated benchmarks for businesses in your region, and businesses that are similar to your own.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/benchmarks.b3613b00faa97896806006794c96a4b9.png)\n\nYou can view benchmarks for:\n\n*   **Block rate** — The percentage of payments that are blocked by your Radar Rules, high risk scores, or otherwise blocked by Stripe.\n*   **Fraudulent dispute rate** — The percentage of payments that customers dispute as fraud.\n*   **Estimated false positive rate** — The estimated percentage of non-fraudulent payments that your Radar settings block. (A high value means that you may be blocking too many valid payments.)\n\nYou’ll see these benchmarks embedded in the charts and tables throughout [Radar’s analytics page](https://stripe.com/radar)—hover your mouse over these icons to view their details.\n\n### Benchmarks and Privacy![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe’ve taken steps to ensure that other merchants can’t identify your benchmarks:\n\n*   We aggregate regional benchmarks across many businesses in your region, so it’s not possible to discern an individual competitor in such a large pool of businesses.\n*   Benchmarks for similar businesses only display if you have many dozens of businesses in your cohort. (If you don’t see any similar-business benchmarks, this is the reason. You’ll still see regional benchmarks, though, since those are large cohorts.)\n*   For a given benchmark rate, the value for each business gets one “vote,\" so even if a single company dominates your industry, that company is only a small weight in the benchmark.\n*   We only include businesses with a significant number of payments, since some of these fraud events are generally rare.\n\nIf you want to opt-out of benchmarking, [contact us](https://support.stripe.com/). If you opt out, your business won’t be included in benchmark calculations, though you can continue to see benchmarks in Radar’s analytics page.\n\n[](#fraud-prevention)\n\nRadar’s algorithms evaluate payments for suspected fraud risk and take action accordingly. Radar blocks high risk payments by default and provides additional fraud tools (if you have [Radar for Fraud Teams](https://stripe.com/radar/fraud-teams)) so that you can specify your own criteria to block suspicious payments.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/fraud-prevention-topline-metrics.a95d88656deb02a6f229b2d369f16768.png)\n\n**Attempted payments** account for all card payment requests screened by Radar, including retried payment attempts on the same purchase.\n\n**Blocked payments** represents the number of attempted payments that Radar blocked. Payments are broadly blocked by Radar for two reasons:\n\n*   Radar’s machine learning model evaluates the payment as high risk and blocks it by applying the default [high risk block rule](https://docs.stripe.com/radar/rules#built-in-rules). Radar sets the blocking threshold at 75 by default and [Radar for Fraud Teams](https://stripe.com/radar/fraud-teams) users can adjust it in the [risk settings](https://docs.stripe.com/radar/risk-settings).\n*   The payment matches one of your other [block rules](https://dashboard.stripe.com/settings/radar/rules).\n\n**Block rate** is the percentage of attempted payments that were blocked by Radar.\n\n**Volume, blocked payments** is the monetary value of attempted payments that Radar blocked. (The volume shown is in your default currency, using estimated conversion rates for payments from other currencies.)\n\n#### Note\n\nStripe may block a payment for other reasons _not_ included here (e.g., payments initiated by cards on deny-lists that are globally known to be fraudulent or payments made from sanctioned countries).\n\nAdditionally, [SetupIntents](https://docs.stripe.com/payments/setup-intents)—which let you save customer credentials for _future_ payments—aren’t accounted for here even though they’re screened by Radar.\n\nThe following section contains two views that help you understand changes to your block rate over the selected time period, along with the proportion of payments blocked by both Radar’s machine learning model and your block rules.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/block-rate-chart-and-table-with-benchmarks.971e9f5c2fd02f38b205cbfaade93092.png)\n\n**Radar — High risk score** accounts for the number of blocked payments that were blocked _due to high risk_, their total monetary volume, and the corresponding block rate (out of all attempted payments). These are payments that received a Radar risk score greater than your high risk threshold and were consequently blocked by the default [high risk block rule](https://docs.stripe.com/radar/rules#built-in-rules).\n\nThe **estimated false positive rate** is the estimated probability that a non-fraudulent payment was incorrectly blocked by Radar’s machine learning. This is derived using a combination of the Radar risk level of these payments and global experiments across all payments on the Stripe network.\n\n**Radar — Rules** similarly, accounts for the number of blocked payments that were blocked by one of your other [block rules](https://dashboard.stripe.com/settings/radar/rules), their total monetary volume, and the corresponding block rate (out of all attempted payments).\n\nDepending on your business needs, your block rate or false positive rate, you may want to adjust the amount of fraud blocked by Radar’s machine learning. [Radar for Fraud Teams](https://stripe.com/radar/fraud-teams) users can adjust the risk threshold (75 by default) at which payments are blocked in their [risk settings](https://docs.stripe.com/radar/risk-settings). As you increase the risk score at which you block, you’ll allow more overall payments through but you may also allow more fraud. As you decrease the risk score where you block, you’ll probably block more fraud but also block more overall payments.\n\n#### Note\n\nClosely monitor your fraudulent dispute rate and disputes activity to understand the impact of changing risk thresholds. In general, follow Radar’s [best practices](https://docs.stripe.com/radar/integration) to ensure your integration makes the most of Radar’s machine learning models.\n\n[](#fraudulent-disputes)\n\nUse the fraudulent disputes section to analyze fraudulent dispute activity for your business over time. Fraudulent disputes are those that were opened with fraud as the [specified reason](https://docs.stripe.com/disputes/categories).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/fraud-disputes-section-with-benchmarks.10f57665c4aa462a62e87ff41bbe473b.png)\n\nThis chart displays fraudulent dispute rate (in solid line) as a percentage of payments in the selected time period that have been disputed for fraud.\n\nCardholders may take some time to dispute a payment, but almost all disputes arrive within 120 days after the payment. Therefore, for the trailing 120 days, this chart displays:\n\n*   A partial dispute rate (in solid line) for payments that have already been disputed.\n*   An estimated projection of the maximum dispute rate (in dashed line) after all disputes for these more recent payments have arrived.\n\nThe final dispute rate is likely to fall somewhere between the partial dispute rate and the projected maximum dispute rate, which is based on historical dispute statistics across the Stripe network and dispute activity on your account.\n\nThe fraudulent dispute rate chart tracks the rate of fraudulent disputes on payments based on when the payment was created and not when it was disputed. This is a more accurate representation of fraud for your business, because it shows which specific payments were disputed for fraud. For example, you could use the fraud rate chart to see if payments made during a particular holiday sale resulted in more fraudulent disputes than usual.\n\nThe **average time to dispute** metric measures the amount of time, on average, it took for payments in the selected time range to be disputed for fraud. The expected range is 1–120 days.\n\n[](#disputes)\n\nThis section helps you identify trends in payments that were disputed by the cardholder for any [specified reason](https://docs.stripe.com/disputes/categories). Look for unexpected changes to disputes activity to identify changes to fraud patterns in your business and take action to [prevent disputes and fraud](https://docs.stripe.com/disputes/prevention).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/disputes-section.ac0037376f90118327cbe14ab537710c.png)\n\nAggregated totals at the top of this section account for the total number of **disputes received**, the number of currently **open disputes** that you must [decide](https://docs.stripe.com/disputes/responding#decide) to accept or challenge, and the associated **disputed volume** (the total monetary volume of payments disputed, not including any dispute fees). The **win rate** is the percentage of disputes received that you won.\n\n#### Note\n\nThis data only includes [inquiries](https://docs.stripe.com/disputes/how-disputes-work#inquiries) (which can act as early warnings of fraudulent payments) when they escalate into real disputes.\n\nThe **disputes received** chart represents dispute activity, plotting disputes opened by dispute creation date for successful payments in the specified time period. A tabular breakdown of disputes received by [dispute reason](https://docs.stripe.com/disputes/categories) accompanies this chart, along with information about how many disputes you responded to with supporting evidence, and how many you won. The breakdown only displays the top three most frequently observed dispute types; you can [download](https://docs.stripe.com/radar/analytics#downloading-and-inspecting-data-sources) the dispute report for a more granular view into all dispute reasons.\n\n[](#manual-reviews)\n\nRadar for Fraud Teams users can use this section to analyze the current state and outcomes of payments that were [placed in review](https://docs.stripe.com/radar/reviews).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/manual-reviews-section.f6513b47a973efb5d647ffddb45207f7.png)\n\nThe **sent to manual review** chart on the left displays the number of payments sent to your review queue within the specified time period. As you review payments and take action, the tabular breakdown on the right updates to display how many reviews were approved, refunded, disputed or are currently in review.\n\n#### Note\n\nIf a customer [disputes](https://docs.stripe.com/disputes) a payment that’s currently in review, the review automatically closes.\n\nThe **dispute rate of approved reviews** represents the percentage of reviews that were approved after investigation but eventually disputed by the cardholder. While cardholders dispute payments for several reasons, you should carefully review payments before approving them to make sure this percentage stays reasonably low.\n\n[](#using-the-dashboard)\n\n### Handling multiple currencies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo give you a comprehensive view of fraud trends for your entire business, this dashboard aggregates your fraud data across all currencies and uses daily foreign exchange rates to convert all monetary amounts into your default currency.\n\n### Data availability and date range![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe computes all of your data daily, beginning at 12:00am UTC. Data for each day includes all account activity that takes place between 12:00am UTC and 11:59pm UTC. Radar Analytics data is available in this dashboard within 24 hours.\n\nWhen loading the page, the report defaults to displaying the previous six months. You can select previous months in the dropdown menu, or choose the trailing 4-week, 3-month, 6-month, or 1-year periods. All charts and tables adjust to reflect the date selection.\n\n### Downloading and inspecting data sources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/download-report.b7d0c43193abccc87895e141f3e8b613.png)\n\nEach chart has a download link in the top right corner that you can use to download a CSV of the data in the chart. Users with access to [Sigma](https://stripe.com/sigma) can further analyze their data by using the **View in Sigma** link, also on the top right of every chart. By default, Sigma opens the SQL query that generates the data included in the chart and the CSV file. You can modify the query to dig deeper into any trends that you want to better understand.",
    "title": "Radar Analytics | Stripe Documentation",
    "description": "Understand fraud patterns and their impact on your business.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/overview",
    "markdown": "# Build a multi-party integration with Connect\n\n## Learn how Connect works.\n\nMarketplaces and software platforms use _Connect_ and its related tools to route payments between sellers, customers, and recipients who need to get paid.\n\nConnect enables you to streamline management and handle payments and payouts across users on your platform or marketplace.\n\n*   **Onboarding**: Onboard and verify sellers using connected accounts with Stripe-hosted flows, or build your own with our APIs.\n*   **Account management**: Enable sellers to manage their account with Stripe-hosted dashboards, embedded components, or build your own with our APIs.\n*   **Payments**: Integrate payments and route funds to sellers on your platform.\n*   **Payouts**: Pay out sellers with a variety of payout options. Enable cross border payouts for global sellers.\n*   **Platform tools**: Manage your platform or marketplace with a sophisticated suite of platform tooling for monetization, seller support, risk management, and tax reporting.\n\n### Country availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## How Connect works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA Connect integration consists of five main components:\n\n*   Your platform’s web or mobile application\n*   Your platform’s Stripe account\n*   Your users’ connected accounts\n*   Stripe payments\n*   Stripe payouts\n\nWhen onboarding to Connect, you create a Connect application on your platform’s Stripe account. The Connect application allows you to create and access data on your connected accounts. You use your Stripe API keys to make [API requests on behalf of your connected accounts](https://docs.stripe.com/connect/authentication).\n\n![An overview of interactions between a Connect platform, customers, and connected accounts](https://b.stripecdn.com/docs-statics-srv/assets/connect-overview.c6c7d0fac01a655bc51523add1eecd21.png)\n\nConnect offers a number of different options for onboarding accounts for your users and creating payments and payouts on these accounts. Providing your users with access to Stripe-hosted dashboards and embedded components enables you to create a customized way for your users to manage their financial workflows, while minimizing your development time and helping you to launch quickly.\n\nConnect charge types offer different ways to orchestrate payments to your connected accounts, whether that is enabling users to accept payments directly or facilitating payments between multiple sellers. Connect payouts enable you to manage payout timing, destination payout accounts, and payout monetization on your connected accounts.\n\n## Use cases![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnect is highly flexible and designed to support many multi-party use cases:\n\n*   **SaaS platforms**: Enable users to accept payments directly. Platforms such as Squarespace enable businesses to build their own online stores to sell directly to customers.\n*   **Marketplaces**: Collect payments and pay out to multiple sellers. Platforms such as Airbnb connect homeowners to potential guests.\n*   **Top-up and pay out**: Payout users without accepting payments. Add funds to your platform account and then transfer funds to your users without processing payments on Stripe.\n*   **In-person payments**: Add Stripe Terminal to your multi-party integration. Enable your users to accept in-person payments alongside online payments with a single integration.\n\n## Design an integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo determine how to build a Connect integration for your use case:\n\n1.  Complete the [Connect platform onboarding](https://dashboard.stripe.com/connect/set-up/welcome) process or view [example integrations](https://docs.stripe.com/connect).\n2.  After onboarding, review your [integration guide](https://docs.stripe.com/connect/design-an-integration). The guide is customized with selections you’ve made in platform onboarding.\n3.  Follow the [onboarding quickstart](https://docs.stripe.com/connect/onboarding/quickstart) to set up and start using your integration.",
    "title": "Build a multi-party integration with Connect | Stripe Documentation",
    "description": "Learn how Connect works.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/radar/testing",
    "markdown": "# Testing Stripe Radar | Stripe DocumentationThe Stripe Docs logo\n\n## Use the following information to test your fraud prevention strategy.\n\nUse the following test credit card numbers to create payments in [test mode](https://docs.stripe.com/keys#test-live-modes) with a specific risk level. Create test payments in either the [Stripe Dashboard](https://dashboard.stripe.com/test/payments) (in test mode) or by calling [create a charge](https://docs.stripe.com/api#create_charge) with your [test API key](https://docs.stripe.com/keys).\n\n| Number | Description |\n| --- | --- |\n|     | Results in a charge with a risk level of `highest`, but could be blocked depending on the rules you have in place (for example, payments made with this card aren’t blocked if the `Block if :risk_level: = 'highest'` rule is disabled). |\n|     | Results in a charge with a risk level of `highest`, and is always blocked regardless of your rules. |\n|     | Results in a charge with a risk level of `elevated`. |\n\n## Rules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you [add or update a rule](https://docs.stripe.com/radar/rules), we’ll search for historical live mode payments that match the rule criteria. You can inspect that list of payments to verify the criterion’s intended behavior, and we also summarize those search results to help you estimate its future impact.\n\nFor each rule you test, the summary includes the volume and number of payments that fall into the following categories:\n\n*   **Disputed & EFW**: Payments that received a dispute or an [early fraud warning (EFW)](https://docs.stripe.com/disputes/how-disputes-work#early-fraud-warnings).\n*   **Refunded**: Payments that were refunded.\n*   **Failed & Blocked**: Payments that were either blocked by Radar, blocked by Stripe, or declined by issuers.\n*   **Legitimate**: Payments that are successfully processed and haven’t yet been identified as fraudulent nor refunded.\n\nAdditionally, when you test allow rules, you can also see **Overrides**. This refers to payments that Radar blocks due to high risk of fraud or a custom block rule, but now will be allowed by your proposed rule. In the Dashboard, you can see further breakdowns of these summary metrics. For example, you can see refunds that are classified as fraudulent.\n\n![Screenshot that shows the potential impact a custom rule could have](https://b.stripecdn.com/docs-statics-srv/assets/backtesting-review-new-rule.6f8037bd10a5877e60a6237ebdbd414d.png)\n\nReview the sample questions in the following table to help you decide if you can implement your rule.\n\n#### Caution\n\nIt’s uncommon to find a perfect rule that only blocks fraudulent payments or only allows good payments. Thus, your decision to implement a rule is typically based on a trade-off. Consider if this rule will block enough fraudulent payments to be worthwhile compared to any valid payments it might incorrectly block. The trade-off that’s right for you depends on the particulars of your business. For more information, see our [fraud detection primer](https://stripe.com/radar/guide#fraud-prevention-performance).\n\n| Rule type | Implement this rule if… |\n| --- | --- |\n| Block | *   It matches payments that were disputed, received an EFW, or refunded as fraud at the cost of an acceptable amount of legitimate payments for your business.<br>*   It matches refunds and you’re trying to save operational burden and prevent refund abuse.<br>*   It matches payments that failed because issuers declined the payment. Sometimes, issuers might decrease auth rates for you if you send a [high number of transactions that fail](https://docs.stripe.com/disputes/prevention/card-testing#consequences) (For example, if a business experiences a large amount of Card Testing). |\n| Review | *   It matches payments that were disputed, received an EFW, or refunded as fraud. It prompts your team to closely evaluate potential fraudulent transactions or other suspicious payment activities. |\n| Request 3DS | *   It matches payments that were disputed, received an EFW, or refunded as fraud at the cost of an acceptable amount of legitimate payments for your business. Note: 3DS does not always guarantee that your user will receive a challenge. This means while you might get liability shift if a fraudster passes frictionless 3DS and commits fraud, you might still receive an EFW (which ultimately can lead to identification in VFMP). |\n| Allow | *   It matches an acceptable amount of previously blocked payments that you have a high degree of certainty should be safe for your business. Allow rules are somewhat trickier to evaluate because there’s no way of knowing which previously-blocked charges would, if allowed, have turned out to be fraudulent. So, with these rules, it’s particularly important to review the list of matching historical payments to ensure these are payments you’d like to allow.<br>*   It doesn’t match a lot of Overrides. This indicates that you are letting through high risk payments. |",
    "title": "Testing Stripe Radar | Stripe Documentation",
    "description": "Use the following information to test your fraud prevention strategy.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/migrate-to-controller-properties",
    "markdown": "# Migrate your Connect integration to use controller properties instead of account types\n\n## Learn how to work with account controller properties instead of specifying account types.\n\nYou can now configure connected accounts using account controller properties instead of defining accounts as Standard, Express, or Custom. These controller properties let you specify discrete account behaviors like which Stripe-hosted dashboard the account can access or who Stripe collects fees from. This modularity allows for more flexible configuration options.\n\nUsing account controller properties doesn’t require you to update your API version. **Migrating your integration to use controller properties is optional**. If you only use one type of connected account and aren’t interested in using [a new configuration](#creating-accounts-with-other-configurations), you don’t need to update your integration.\n\nWe recommend you update your integration to take advantage of the increased modularity and new configurations available. The new properties are fully backwards compatible, so you can migrate your integration incrementally while continuing to work with account types.\n\nEach account type maps to a set of controller properties. We automatically set those properties on your existing connected accounts and on any accounts that you create with account types going forward. When you update your integration to work with controller properties, you don’t have to update any of your connected accounts.\n\n#### Note\n\nYou can start using features such as [embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components) without making any of the changes in this guide.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Learn how account controller properties work and how they map to your existing connected accounts.\n*   Determine which of the new account configurations make sense for your integration.\n\nUpdating your integration involves:\n\n*   Identifying code in your integration that references the account type, and updating it to reference the corresponding controller properties instead.\n*   Updating your account creation process to specify controller properties instead of `type`. Specifying `type` is no longer required.\n\n## Account controller properties![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can specify values for the controller properties when you create a connected account using the [Accounts API](https://docs.stripe.com/api/accounts/create#create_account-controller). Any property that you don’t specify is set to a default value that has the least complex integration requirements.\n\nIf you’re building a new integration, you can get a configuration recommendation by completing [Connect platform onboarding](https://dashboard.stripe.com/connect/set-up).\n\n| Property | Default value | Description |\n| --- | --- | --- |\n| [controller.losses.payments](https://docs.stripe.com/api/accounts/create#create_account-controller-losses-payments) | `stripe` | Possible values:<br><br>*   `application`: Your platform is [responsible for negative balances](https://docs.stripe.com/connect/risk-management \"negative balance liability\") and manages credit and fraud risk on the connected account, which requires you to review and acknowledge your responsibilities in [the Dashboard](https://dashboard.stripe.com/settings/connect/platform_profile)<br>*   `stripe`: Stripe is liable when this account can’t pay back negative balances resulting from payments. Your platform is still liable for a negative balance on your platform account. |\n| [controller.fees.payer](https://docs.stripe.com/api/accounts/create#create_account-controller-fees-payer) | `account` | Possible values:<br><br>*   `account`: The connected account pays all Stripe fees directly to Stripe, inclusive of payment processing fees<br>*   `application`: The Connect platform pays all Stripe fees, inclusive of payment processing fees<br>*   `application_custom`: The account was created with type=custom<br>*   `application_express`: The account was created with type=express<br><br>When you create an account, you can only specify `application` or `account`.<br><br>`application_express` and `application_custom` are not valid creation parameters.<br><br>For a comprehensive description of Stripe fee payment models, see the [fee behavior documentation](https://docs.stripe.com/connect/direct-charges-fee-payer-behavior). |\n| [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/create#create_account-controller-requirement_collection) | `stripe` | Possible values:<br><br>*   `application`: Your platform is responsible for collecting updated information when [requirements are due or change](https://docs.stripe.com/connect/required-verification-information \"requirement collection\")<br>*   `stripe`: Stripe is responsible for collecting updated information when [requirements are due or change](https://docs.stripe.com/connect/required-verification-information \"requirement collection\") |\n| [controller.stripe\\_dashboard.type](https://docs.stripe.com/api/accounts/create#create_account-controller-stripe_dashboard-type) | `full` | Possible values:<br><br>*   `express`: The connected account can access the Express Dashboard<br>*   `full`: The connected account can access the full Stripe Dashboard<br>*   `none`: The account can’t access the Express or Stripe Dashboard |\n| [type](https://docs.stripe.com/api/accounts/create#create_account-type) | See the description | Possible values:<br><br>*   `custom`: The account was created as a Custom connected account<br>*   `express`: The account was created as an Express connected account<br>*   `standard`: The account was created as a Standard connected account or with controller properties matching Standard accounts<br>*   `none`: The account was created with no type value and its controller properties don’t match any of the three account types<br><br>Specifying `type` is optional. If you create an account using `type`, you can only specify `custom`, `express`, or `standard`. `none` isn’t a valid account creation parameter. |\n\n## Mapping account types to controller parameters![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach of the three account types maps to values in the `controller` hash of `v1/accounts` that match the behavior of that type.\n\n### Standard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you create an account without specifying any controller properties, the default values match the behavior of a Standard account. You can also create the equivalent of a Standard account by specifying the values that map to Standard account behavior.\n\nThese values map to a Standard account’s behavior:\n\n*   `losses.payments`: `stripe`\n*   `fees.payer`: `account`\n*   `requirement_collection`: `stripe`\n*   `stripe_dashboard.type`: `full`\n\nRequest (using default values for all properties):\n\n`curl -X POST https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nResponse:\n\n`{   controller: {     type: \"application\",     is_controller: true,     losses: {       payments: \"stripe\"     },     requirement_collection: \"stripe\",     fees: {       payer: \"account\",     },     stripe_dashboard: {       type: \"full\"     }   },   type: \"standard\" }`\n\n### Express![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThese values map to an Express account’s behavior:\n\n*   `losses.payments`: `application`\n*   `fees.payer`: `application` (see note)\n*   `requirement_collection`: `stripe`\n*   `stripe_dashboard.type`: `express`\n\n#### Note\n\nCreating an Express account using `type`, sets the `controller.fees.payer` property to `application_express` instead of `application`. This difference denotes a variation in Stripe [fee billing behavior](https://docs.stripe.com/connect/direct-charges-fee-payer-behavior) when your platform is using Direct charges.\n\nRequest:\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"controller[stripe_dashboard][type]\"=express \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application`\n\nResponse:\n\n`{   controller: {     type: \"application\",     is_controller: true,     losses: {       payments: \"application\"     },     requirement_collection: \"stripe\",     fees: {       payer: \"application\",     },     stripe_dashboard: {       type: \"express\"     }   },   type: \"none\" }`\n\n### Custom![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThese values map to a Custom account’s behavior:\n\n*   `losses.payments`: `application`\n*   `fees.payer`: `application` (see note)\n*   `requirement_collection`: `application`\n*   `stripe_dashboard.type`: `none`\n\nYou must also specify the account country when creating a Custom account, and request the `card_payments` and `transfers` capabilities.\n\n#### Note\n\nCreating a Custom account using `type`, sets the `controller.fees.payer` property to `application_custom` instead of `application`. This difference denotes a variation in Stripe [fee billing behavior](https://docs.stripe.com/connect/direct-charges-fee-payer-behavior) when your platform is using Direct charges.\n\nRequest:\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[requirement_collection]\"=application \\  -d \"capabilities[transfers][requested]\"=true \\  -d country=US`\n\nResponse:\n\n`{   controller: {     type: \"application\",     is_controller: true,     losses: {       payments: \"application\"     },     requirement_collection: \"application\",     fees: {       payer: \"application\",     },     stripe_dashboard: {       type: \"none\"     }   },   type: \"none\" }`\n\n## Migrate code to use controller properties![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to updating your account creation process to use controller properties, update your integration by reviewing your code and looking for references to account types.\n\nFor each reference to an account type, determine which controller property or properties are relevant and update the code accordingly.\n\nFor example, say that your code includes a conditional statement that applies to Express and Custom accounts because it relates to your platform being responsible for negative balances. Update that logic from `if type == express` or `if type == custom` to `if controller.losses.payments == application`.\n\nIf you create connected accounts that don’t match an account type, consider their controller properties as well when updating your code. The logic for handling those accounts can differ from your existing logic that’s based on account types.\n\nYou can use this table to identify the controller properties associated with each account type:\n\n| Account Type | losses.payments | fees.payer | requirement\\_collection | stripe\\_dashboard.type |\n| --- | --- | --- | --- | --- |\n| Custom | `application` | `application_custom` | `application` | `none` |\n| Express | `application` | `application_express` | `stripe` | `express` |\n| Standard | `stripe` | `account` | `stripe` | `full` |\n\n#### Note\n\nRemember that Express and Custom accounts have a different value for `fees.payer` than equivalent accounts created using controller properties. When updating code related to collecting fees, you must take into account the difference in behavior.\n\n## Unsupported configurations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating accounts with controller properties, the following combinations aren’t supported:\n\n`controller.requirement_collection` = `application` isn’t compatible with any of the following values:\n\n*   `controller.losses.payments` = `stripe`\n*   `controller.fees.payer` = `account`\n*   `controller.stripe_dashboard.type` = `express`\n*   `controller.stripe_dashboard.type` = `full`\n\n`controller.stripe_dashboard.type` = `express` isn’t compatible with any of the following values:\n\n*   `controller.losses.payments` = `stripe`\n*   `controller.fees.payer` = `account`\n*   `controller.requirement_collection` = `application`\n\n`controller.stripe_dashboard.type` = `full` isn’t compatible with any of the following values:\n\n*   `controller.losses.payments` = `application`\n*   `controller.fees.payer` = `application`\n*   `controller.requirement_collection` = `application`\n\n`controller.stripe_dashboard.type` = `none` isn’t supported when both of the following values are set (it’s supported when only one of them is set):\n\n*   `controller.requirement_collection` = `stripe`\n*   `controller.losses.payments` = `application`\n\n## Stripe-hosted onboarding and account links![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe-hosted onboarding doesn’t support connected accounts that have both of these controller property values:\n\n*   `controller.stripe_dashboard.type` = `none`\n*   `controller.requirement_collection` = `stripe`\n\nIf you create such accounts, you can’t onboard them using account links. The following example demonstrates logic for handling that scenario:\n\n`if controller.stripe_dashboard.type == \"none\"   if controller.requirement_collection == \"platform\"     create_account_link(account)   else     // Stripe-hosted onboarding is not supported   end end`",
    "title": "Migrate your Connect integration to use controller properties instead of account types | Stripe Documentation",
    "description": "Learn how to work with account controller properties instead of specifying account types.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/upcoming-requirements-updates",
    "markdown": "# Upcoming requirements updates | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the changes to required verification information and how this impacts your integration with Stripe.\n\nPayments regulations aim to create a safer, more secure financial ecosystem by helping prevent crimes such as money laundering, fraud, and tax evasion. Financial regulators around the world enforce [Know Your Customer (KYC) requirements](https://support.stripe.com/questions/know-your-customer) to make sure that identity information is collected, verified, and maintained from certain types of businesses, and for any individuals who ultimately own, control, or direct the business. These requirements are frequently updated by financial service regulators, card networks, and other financial institutions.\n\nThis guide provides an overview of the upcoming changes, and highlights the most significant changes. For the exhaustive list of requirements, refer to [Required verification information](https://docs.stripe.com/connect/required-verification-information).\n\nTo change how you integrate with Stripe, see [Onboarding solutions for Custom accounts](https://docs.stripe.com/connect/custom/onboarding).\n\n_Last updated: January 4, 2023_\n\n## What’s changing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Required information collected from connected accounts:** We’re updating the information we require from sole proprietorships, non-profits and single-member LLCs and simplifying how we obtain legal guardian consent for accounts opened by minors. In addition, an email for the account representative is now required for all legal entity types, and a change for government entities and public companies.\n*   **How we verify business information and provide new detailed verification responses:** We’re updating our criteria for valid business information and introducing new verification error codes when we unable to accept or verify information provided.\n*   **Threshold at which we verify tax identification numbers (TINs):** For Custom and Express connected accounts, we’re lowering the payments volume threshold at which we verify TINs to align with current federal tax reporting thresholds.\n*   **How we prefill statement descriptors and statement descriptor prefixes:** If a statement descriptor isn’t provided, the prefill logic has changed to use either the business profile name, the business URL, or the legal entity name of the connected account.\n\nThese changes will affect all users with a requested [card\\_payments](https://docs.stripe.com/api/accounts/object#account_object-capabilities-card_payments) capability in the US.\n\n## Required information collected from connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNew information collected and new fields added to the API:\n\n*   Businesses that are [company.structure](https://docs.stripe.com/api/accounts/create#create_account-company-structure) of `sole_proprietorship` and `single_member_llc`, must provide their business address (“company address”). In the event that the business address is the same as the representative’s personal address, your connected accounts can provide the same values for both.\n*   Legal entities that are [company.structure](https://docs.stripe.com/api/accounts/create#create_account-company-structure) of `government_instrumentality`, `tax_exempt_government_instrumentality`, `governmental_unit`, `public_company`, and `public_corporation`, `public_partnership` must provide an email for the account representative. This requirement now applies to all legal entity types.\n*   To simplify how we obtain a legal guardian’s consent for accounts opened by minors, the [Persons API](https://docs.stripe.com/api/persons) has been updated with a new relationship type of `legal_guardian` as well as an `additional_tos_acceptances` field to record the legal guardian’s agreement to the Stripe Terms of Service. If the account representative’s date of birth indicates the individual is a minor, then an account requirement is triggered to add a `legal_guardian` before the account can be activated.\n\n## How we verify business information and provide new detailed verification responses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Updates to the information we already collect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe’ll request the following information from your connected accounts:\n\n| Field | Updated requirements | Additional considerations |\n| --- | --- | --- |\n| SSN or ITIN collected from US-resident Representatives (Reps) | Last 4 digits required at onboarding for all account types (including Custom and Express connected accounts) | This is the current behavior for Standard connected accounts |\n| SSN or ITIN collected from US-resident Representatives (Reps) | If the last 4 digits fail to verify at onboarding, Reps will need to provide the full 9 digits at onboarding |     |\n| SSN or ITIN collected from US-resident Representatives (Reps) or Owners | Full 9 digits required once payments volume exceeds $500K | A Representative (Rep) is defined as a person with significant responsibility to control, manage, or direct the organization; and is authorized by the organization to agree to Stripe’s terms. For a representative, the full 9 digits are required at $500K only if no Owners are listed on the account. |\n\n### New verification error codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen we’re unable to verify information provided by your connected accounts, we’ll surface detailed verification responses as new error codes in the [requirements.errors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors) array. [View docs](https://docs.stripe.com/connect/handling-api-verification#validation-and-verification-errors).\n\n#### Synchronous errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | New error code | Error message |\n| --- | --- | --- |\n| Product Description | `invalid_product_description_length` | Your product description must be at least 10 characters. |\n| Product Description | `invalid_product_description_url_match` | Your product description must be different from your URL. |\n| (Full) Statement Descriptor | `invalid_statement_descriptor_length` | Your statement descriptor must be between 5 and 22 characters. |\n| (Full) Statement Descriptor | `invalid_statement_descriptor_business_mismatch` | Your statement descriptor must be similar to your business name, legal entity name, or URL. |\n| (Full) Statement Descriptor | `invalid_statement_descriptor_denylisted` | Generic or well-known statement descriptors aren’t supported. |\n| (Short) Statement Descriptor | `invalid_statement_descriptor_prefix_mismatch` | The statement descriptor prefix must be similar to your statement descriptor, business name, legal entity name, or URL. |\n| (Short) Statement Descriptor | `invalid_statement_descriptor_prefix_denylisted` | Generic or well-known statement descriptor prefixes aren’t supported. |\n| LE Business Name | `invalid_company_name_denylisted` | Generic or well-known business names aren’t supported. |\n| Business Profile Name (DBA) | `invalid_business_profile_name_denylisted` | Generic or well-known business names aren’t supported. |\n| Business Profile Name (DBA) | `invalid_business_profile_name` | Business profile names must consist of recognizable words. |\n| Persons DOB | `invalid_dob_age_under_minimum` | Person must be at least 13 years old. |\n| Persons DOB | `invalid_dob_age_over_maximum` | Date of birth must be within in the last 120 years. |\n| Persons phone | `invalid_phone_number` | The phone number doesn’t seem to be valid. Make sure it’s formatted correctly. |\n| LE Business Phone | `invalid_phone_number` | The phone number doesn’t seem to be valid. Make sure it’s formatted correctly. |\n| Company TaxID | `invalid_tax_id_format` | Tax IDs must be a unique set of 9 numbers without dashes or other special characters. |\n| URL | `invalid_url_format` | Format as https://example.com |\n| URL | `invalid_url_denylisted` | Generic business URLs aren’t supported. |\n\n#### Asynchronous errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | New error code | Error message |\n| --- | --- | --- |\n| URL | `invalid_url_website_inaccessible` | This URL couldn’t be reached. Make sure it’s available and entered correctly or provide another. |\n| URL | `invalid_url_website_business_information_mismatch` | The business information on your website must match the details you provided to Stripe. |\n| URL | `invalid_url_website_incomplete` | Your website seems to be missing some required information. Learn about website requirements |\n| URL | `invalid_url_website_other` | We weren’t able to verify your business using the URL you provided. Make sure it’s entered correctly or provide another URL. |\n| URL | `invalid_url_web_presence_detected` | Because you use a website, app, social media page, or online profile to sell products or services, you must provide a URL for your business. |\n\n### Update to the threshold at which we verify tax identification numbers (TINs)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo align with the IRS reporting thresholds for Forms 1099-K, 1099-NEC, and 1099-MISC, we’re updating the threshold at which we verify the TIN to when your payments volume reaches $600 or within 30 days of first charge, whichever comes first.\n\n### How we prefill statement descriptors and statement descriptor prefixes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf not provided, the statement descriptor is prefilled using the following supplied fields (in this order): [business\\_profile.name](https://docs.stripe.com/api/accounts/object#account_object-business_profile-name) (“doing business as”), [business\\_profile.url](https://docs.stripe.com/api/accounts/object#account_object-business_profile-url), the legal entity name (either [individual.first\\_name](https://docs.stripe.com/api/accounts/object#account_object-individual-first_name) + [individual.last\\_name](https://docs.stripe.com/api/accounts/object#account_object-individual-last_name) or [company.name](https://docs.stripe.com/api/accounts/object#account_object-company-name))\\`. In addition, if the statement descriptor prefix isn’t provided, it’s prefilled from the first 10 characters of the statement descriptor.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Connect onboarding for Custom accounts](https://docs.stripe.com/connect/custom/hosted-onboarding)\n*   [Onboarding solutions for Custom accounts](https://docs.stripe.com/connect/custom/onboarding)\n*   [Required verification information](https://docs.stripe.com/connect/required-verification-information)\n*   [Updating accounts](https://docs.stripe.com/connect/updating-service-agreements)\n*   [Handling identity verification with the API](https://docs.stripe.com/connect/handling-api-verification)\n*   [Testing Custom account identity verification](https://docs.stripe.com/connect/testing-verification)\n*   [Accepted verification documents](https://docs.stripe.com/acceptable-verification-documents)",
    "title": "Upcoming requirements updates | Stripe Documentation",
    "description": "Learn about the changes to required verification information and how this impacts your integration with Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/tax-reporting",
    "markdown": "# US tax reporting for Connect platforms\n\n## Learn how to report the annual payments for your US-based connected accounts.\n\nStripe [Connect](https://stripe.com/connect) allows platforms to provide a seamless, end-to-end payment service for their connected accounts. This service may come with certain responsibilities, including tax information reporting.\n\n#### Getting your 1099 Forms\n\nIf you work for a platform that pays you via Stripe and want to learn about your 1099 forms and how to get them, see [1099 tax forms](https://support.stripe.com/express/topics/1099-tax-forms) on the Stripe Support site.\n\nStripe issues 1099-K forms for your connected accounts that meet specific [criteria](https://support.stripe.com/questions/1099-k-forms-issued-by-stripe). This includes accounts that have transactions where `controller.fees.payer` = `account`.\n\nFor transactions where `controller.fees.payer` = `application` or `application_unified_accounts_beta`, if the fees for those transactions are paid to Stripe, they could be included in a Stripe-issued 1099.\n\nFor any other account setups that have transactions, Stripe won’t be issuing a 1099-K. Instead, consider issuing a [Form 1099](https://support.stripe.com/questions/1099-tax-reporting-and-filing-for-platforms-and-marketplaces) to report income and payment transactions. There are several types of 1099 forms, and the applicable form depends on the type of payments you make to your connected account.\n\n#### Note\n\nStripe recommends that you consult a tax advisor to determine your tax filing and reporting requirements.\n\n### 1099-NEC![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [1099-NEC](https://support.stripe.com/questions/intro-to-1099-nec-tax-forms-for-platforms-and-marketplaces) form to report non-employee compensation.\n\nThe account must meet all of the following criteria in the previous calendar year:\n\n*   Based in the US or a US taxpayer\n*   $600 or more in payments\n\n### 1099-MISC![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [1099-MISC](https://support.stripe.com/questions/intro-to-1099-misc-tax-forms-for-platforms-and-marketplaces) form to report other forms of payments made in the course of your business.\n\nThe account must meet all of the following criteria in the previous calendar year:\n\n*   Based in the US or a US taxpayer\n*   $600 or more in payments or $10 in royalties\n\n### 1099-K![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [1099-K](https://support.stripe.com/questions/intro-to-1099-k-tax-forms-for-platforms-and-marketplaces) form to report payment transactions.\n\nThe account must meet all of the following criteria in the previous calendar year:\n\n*   Based in the US or a US taxpayer\n*   More than $20,000 in gross volume\n*   More than 200 transactions\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Get started with the Stripe 1099 tax reporting product](https://docs.stripe.com/connect/get-started-tax-reporting)\n*   [Configure your tax form settings](https://docs.stripe.com/connect/tax-form-settings)\n\n#### Note\n\nLooking for help calculating sales tax, VAT, or GST? Check out [Stripe Tax](https://docs.stripe.com/tax).",
    "title": "US tax reporting for Connect platforms | Stripe Documentation",
    "description": "Learn how to report the annual payments for your US-based connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/setting-mcc",
    "markdown": "# Setting merchant category codes | Stripe DocumentationThe Stripe Docs logo\n\nA/C, Refrigeration Repair  \n`ac_refrigeration_repair`7623Accounting/Bookkeeping Services  \n`accounting_bookkeeping_services`8931Advertising Services  \n`advertising_services`7311Agricultural Cooperative  \n`agricultural_cooperative`0763Airlines, Air Carriers Restricted  \n`airlines_air_carriers`4511Airports, Flying Fields  \n`airports_flying_fields`4582Ambulance Services Restricted  \n`ambulance_services`4119Amusement Parks/Carnivals Restricted  \n`amusement_parks_carnivals`7996Antique Reproductions  \n`antique_reproductions`5937Antique Shops  \n`antique_shops`5932Aquariums  \n`aquariums`7998Architectural/Surveying Services  \n`architectural_surveying_services`8911Art Dealers and Galleries  \n`art_dealers_and_galleries`5971Artists Supply and Craft Shops  \n`artists_supply_and_craft_shops`5970Auto Body Repair Shops  \n`auto_body_repair_shops`7531Auto Paint Shops  \n`auto_paint_shops`7535Auto Service Shops  \n`auto_service_shops`7538Auto and Home Supply Stores  \n`auto_and_home_supply_stores`5531Automated Fuel Dispensers  \n`automated_fuel_dispensers`5542Automobile Associations  \n`automobile_associations`8675Automotive Parts and Accessories Stores  \n`automotive_parts_and_accessories_stores`5533Automotive Tire Stores  \n`automotive_tire_stores`5532Bail and Bond Payments (payment to the surety for the bond, not the actual bond paid to the government agency) Restricted  \n`bail_and_bond_payments`9223Bakeries  \n`bakeries`5462Bands, Orchestras  \n`bands_orchestras`7929Barber and Beauty Shops  \n`barber_and_beauty_shops`7230Betting/Casino Gambling Restricted  \n`betting_casino_gambling`7995Bicycle Shops  \n`bicycle_shops`5940Billiard/Pool Establishments  \n`billiard_pool_establishments`7932Boat Dealers  \n`boat_dealers`5551Boat Rentals and Leases  \n`boat_rentals_and_leases`4457Book Stores  \n`book_stores`5942Books, Periodicals, and Newspapers  \n`books_periodicals_and_newspapers`5192Bowling Alleys  \n`bowling_alleys`7933Bus Lines  \n`bus_lines`4131Business/Secretarial Schools  \n`business_secretarial_schools`8244Buying/Shopping Services  \n`buying_shopping_services`7278Cable, Satellite, and Other Pay Television and Radio  \n`cable_satellite_and_other_pay_television_and_radio`4899Camera and Photographic Supply Stores  \n`camera_and_photographic_supply_stores`5946Candy, Nut, and Confectionery Stores  \n`candy_nut_and_confectionery_stores`5441Car Rental Agencies  \n`car_rental_agencies`7512Car Washes  \n`car_washes`7542Car and Truck Dealers (New & Used) Sales, Service, Repairs Parts and Leasing  \n`car_and_truck_dealers_new_used`5511Car and Truck Dealers (Used Only) Sales, Service, Repairs Parts and Leasing  \n`car_and_truck_dealers_used_only`5521Carpentry Services  \n`carpentry_services`1750Carpet/Upholstery Cleaning  \n`carpet_upholstery_cleaning`7217Caterers  \n`caterers`5811Charitable and Social Service Organizations - Fundraising Restricted  \n`charitable_and_social_service_organizations_fundraising`8398Chemicals and Allied Products (Not Elsewhere Classified)  \n`chemicals_and_allied_products`5169Child Care Services  \n`child_care_services`8351Childrens and Infants Wear Stores  \n`childrens_and_infants_wear_stores`5641Chiropodists, Podiatrists Restricted  \n`chiropodists_podiatrists`8049Chiropractors Restricted  \n`chiropractors`8041Cigar Stores and Stands Restricted  \n`cigar_stores_and_stands`5993Civic, Social, Fraternal Associations  \n`civic_social_fraternal_associations`8641Cleaning and Maintenance  \n`cleaning_and_maintenance`7349Clothing Rental  \n`clothing_rental`7296Colleges, Universities  \n`colleges_universities`8220Commercial Equipment (Not Elsewhere Classified)  \n`commercial_equipment`5046Commercial Footwear  \n`commercial_footwear`5139Commercial Photography, Art and Graphics  \n`commercial_photography_art_and_graphics`7333Commuter Transport, Ferries  \n`commuter_transport_and_ferries`4111Computer Network Services  \n`computer_network_services`4816Computer Programming  \n`computer_programming`7372Computer Repair  \n`computer_repair`7379Computer Software Stores  \n`computer_software_stores`5734Computers, Peripherals, and Software  \n`computers_peripherals_and_software`5045Concrete Work Services  \n`concrete_work_services`1771Construction Materials (Not Elsewhere Classified)  \n`construction_materials`5039Consulting, Public Relations  \n`consulting_public_relations`7392Correspondence Schools  \n`correspondence_schools`8241Cosmetic Stores  \n`cosmetic_stores`5977Counseling Services Restricted  \n`counseling_services`7277Country Clubs  \n`country_clubs`7997Courier Services  \n`courier_services`4215Court Costs, Including Alimony and Child Support - Courts of Law Restricted  \n`court_costs`9211Credit Reporting Agencies  \n`credit_reporting_agencies`7321Cruise Lines Restricted  \n`cruise_lines`4411Dairy Products Stores  \n`dairy_products_stores`5451Dance Hall, Studios, Schools  \n`dance_hall_studios_schools`7911Dentists, Orthodontists Restricted  \n`dentists_orthodontists`8021Department Stores  \n`department_stores`5311Detective Agencies  \n`detective_agencies`7393Digital Goods Media – Books, Movies, Music  \n`digital_goods_media`5815Digital Goods – Applications (Excludes Games)  \n`digital_goods_applications`5817Digital Goods – Games  \n`digital_goods_games`5816Digital Goods – Large Digital Goods Merchant  \n`digital_goods_large_volume`5818Direct Marketing - Catalog Merchant  \n`direct_marketing_catalog_merchant`5964Direct Marketing - Combination Catalog and Retail Merchant  \n`direct_marketing_combination_catalog_and_retail_merchant`5965Direct Marketing - Inbound Telemarketing Restricted  \n`direct_marketing_inbound_telemarketing`5967Direct Marketing - Insurance Services  \n`direct_marketing_insurance_services`5960Direct Marketing - Other  \n`direct_marketing_other`5969Direct Marketing - Outbound Telemarketing Restricted  \n`direct_marketing_outbound_telemarketing`5966Direct Marketing - Subscription  \n`direct_marketing_subscription`5968Direct Marketing - Travel Restricted  \n`direct_marketing_travel`5962Discount Stores  \n`discount_stores`5310Doctors Restricted  \n`doctors`8011Door-To-Door Sales Restricted  \n`door_to_door_sales`5963Drapery, Window Covering, and Upholstery Stores  \n`drapery_window_covering_and_upholstery_stores`5714Drinking Places  \n`drinking_places`5813Drug Stores and Pharmacies Restricted  \n`drug_stores_and_pharmacies`5912Drugs, Drug Proprietaries, and Druggist Sundries Restricted  \n`drugs_drug_proprietaries_and_druggist_sundries`5122Dry Cleaners  \n`dry_cleaners`7216Durable Goods (Not Elsewhere Classified)  \n`durable_goods`5099Duty Free Stores  \n`duty_free_stores`5309Eating Places, Restaurants  \n`eating_places_restaurants`5812Educational Services  \n`educational_services`8299Electric Razor Stores  \n`electric_razor_stores`5997Electric Vehicle Charging  \n`electric_vehicle_charging`5552Electrical Parts and Equipment  \n`electrical_parts_and_equipment`5065Electrical Services  \n`electrical_services`1731Electronics Repair Shops  \n`electronics_repair_shops`7622Electronics Stores  \n`electronics_stores`5732Elementary, Secondary Schools  \n`elementary_secondary_schools`8211Emergency Services (GCAS) (Visa use only)  \n`emergency_services_gcas_visa_use_only`9702Employment/Temp Agencies  \n`employment_temp_agencies`7361Equipment Rental  \n`equipment_rental`7394Exterminating Services  \n`exterminating_services`7342Family Clothing Stores  \n`family_clothing_stores`5651Fast Food Restaurants  \n`fast_food_restaurants`5814Financial Institutions Restricted  \n`financial_institutions`6012Fines - Government Administrative Entities Restricted  \n`fines_government_administrative_entities`9222Fireplace, Fireplace Screens, and Accessories Stores  \n`fireplace_fireplace_screens_and_accessories_stores`5718Floor Covering Stores  \n`floor_covering_stores`5713Florists  \n`florists`5992Florists Supplies, Nursery Stock, and Flowers  \n`florists_supplies_nursery_stock_and_flowers`5193Freezer and Locker Meat Provisioners  \n`freezer_and_locker_meat_provisioners`5422Fuel Dealers (Non Automotive)  \n`fuel_dealers_non_automotive`5983Funeral Services, Crematories  \n`funeral_services_crematories`7261Furniture Repair, Refinishing  \n`furniture_repair_refinishing`7641Furniture, Home Furnishings, and Equipment Stores, Except Appliances  \n`furniture_home_furnishings_and_equipment_stores_except_appliances`5712Furriers and Fur Shops  \n`furriers_and_fur_shops`5681General Services  \n`general_services`1520Gift, Card, Novelty, and Souvenir Shops  \n`gift_card_novelty_and_souvenir_shops`5947Glass, Paint, and Wallpaper Stores  \n`glass_paint_and_wallpaper_stores`5231Glassware, Crystal Stores  \n`glassware_crystal_stores`5950Golf Courses - Public  \n`golf_courses_public`7992Government Licensed On-line Casinos (On-Line Gambling)(US Region only) Restricted  \n`government_licensed_online_casions_online_gambling_us_region_only`7801Government Services (Not Elsewhere Classified) Restricted  \n`government_services`9399Government-Licensed Horse/Dog Racing (US Region only) Restricted  \n`government_licensed_horse_dog_racing_us_region_only`7802Government-Owned Lotteries (Non-US region)  \n`government_owned_lotteries_non_us_region`9406Government-Owned Lotteries (US Region only) Restricted  \n`government_owned_lotteries_us_region_only`7800Grocery Stores, Supermarkets  \n`grocery_stores_supermarkets`5411Hardware Stores  \n`hardware_stores`5251Hardware, Equipment, and Supplies  \n`hardware_equipment_and_supplies`5072Health and Beauty Spas  \n`health_and_beauty_spas`7298Hearing Aids Sales and Supplies Restricted  \n`hearing_aids_sales_and_supplies`5975Heating, Plumbing, A/C  \n`heating_plumbing_a_c`1711Hobby, Toy, and Game Shops  \n`hobby_toy_and_game_shops`5945Home Supply Warehouse Stores  \n`home_supply_warehouse_stores`5200Hospitals Restricted  \n`hospitals`8062Hotels, Motels, and Resorts  \n`hotels_motels_and_resorts`7011Household Appliance Stores  \n`household_appliance_stores`5722Industrial Supplies (Not Elsewhere Classified)  \n`industrial_supplies`5085Information Retrieval Services  \n`information_retrieval_services`7375Insurance Underwriting, Premiums Restricted  \n`insurance_underwriting_premiums`6300Intra-Company Purchases  \n`intra_company_purchases`9950Jewelry Stores, Watches, Clocks, and Silverware Stores  \n`jewelry_stores_watches_clocks_and_silverware_stores`5944Landscaping Services  \n`landscaping_services`0780Laundries  \n`laundries`7211Laundry, Cleaning Services  \n`laundry_cleaning_services`7210Legal Services, Attorneys  \n`legal_services_attorneys`8111Luggage and Leather Goods Stores  \n`luggage_and_leather_goods_stores`5948Lumber, Building Materials Stores  \n`lumber_building_materials_stores`5211Marinas, Service and Supplies  \n`marinas_service_and_supplies`4468Marketplaces  \n`marketplaces`5262Masonry, Stonework, and Plaster  \n`masonry_stonework_and_plaster`1740Massage Parlors  \n`massage_parlors`7297Medical Services Restricted  \n`medical_services`8099Medical and Dental Labs Restricted  \n`medical_and_dental_labs`8071Medical, Dental, Ophthalmic, and Hospital Equipment and Supplies Restricted  \n`medical_dental_ophthalmic_and_hospital_equipment_and_supplies`5047Membership Organizations  \n`membership_organizations`8699Mens and Boys Clothing and Accessories Stores  \n`mens_and_boys_clothing_and_accessories_stores`5611Mens, Womens Clothing Stores  \n`mens_womens_clothing_stores`5691Metal Service Centers  \n`metal_service_centers`5051Miscellaneous Apparel and Accessory Shops  \n`miscellaneous_apparel_and_accessory_shops`5699Miscellaneous Auto Dealers  \n`miscellaneous_auto_dealers`5599Miscellaneous Business Services  \n`miscellaneous_business_services`7399Miscellaneous Food Stores - Convenience Stores and Specialty Markets  \n`miscellaneous_food_stores`5499Miscellaneous General Merchandise  \n`miscellaneous_general_merchandise`5399Miscellaneous General Services  \n`miscellaneous_general_services`7299Miscellaneous Home Furnishing Specialty Stores  \n`miscellaneous_home_furnishing_specialty_stores`5719Miscellaneous Publishing and Printing  \n`miscellaneous_publishing_and_printing`2741Miscellaneous Recreation Services  \n`miscellaneous_recreation_services`7999Miscellaneous Repair Shops  \n`miscellaneous_repair_shops`7699Miscellaneous Specialty Retail  \n`miscellaneous_specialty_retail`5999Mobile Home Dealers  \n`mobile_home_dealers`5271Motion Picture Theaters  \n`motion_picture_theaters`7832Motor Freight Carriers and Trucking - Local and Long Distance, Moving and Storage Companies, and Local Delivery Services  \n`motor_freight_carriers_and_trucking`4214Motor Homes Dealers  \n`motor_homes_dealers`5592Motor Vehicle Supplies and New Parts  \n`motor_vehicle_supplies_and_new_parts`5013Motorcycle Shops and Dealers  \n`motorcycle_shops_and_dealers`5571Motorcycle Shops, Dealers  \n`motorcycle_shops_dealers`5561Music Stores-Musical Instruments, Pianos, and Sheet Music  \n`music_stores_musical_instruments_pianos_and_sheet_music`5733News Dealers and Newsstands  \n`news_dealers_and_newsstands`5994Non-FI, Money Orders Restricted  \n`non_fi_money_orders`6051Non-FI, Stored Value Card Purchase/Load Restricted  \n`non_fi_stored_value_card_purchase_load`6540Nondurable Goods (Not Elsewhere Classified)  \n`nondurable_goods`5199Nurseries, Lawn and Garden Supply Stores  \n`nurseries_lawn_and_garden_supply_stores`5261Nursing/Personal Care Restricted  \n`nursing_personal_care`8050Office and Commercial Furniture  \n`office_and_commercial_furniture`5021Opticians, Eyeglasses Restricted  \n`opticians_eyeglasses`8043Optometrists, Ophthalmologist Restricted  \n`optometrists_ophthalmologist`8042Orthopedic Goods - Prosthetic Devices Restricted  \n`orthopedic_goods_prosthetic_devices`5976Osteopaths Restricted  \n`osteopaths`8031Package Stores-Beer, Wine, and Liquor  \n`package_stores_beer_wine_and_liquor`5921Paints, Varnishes, and Supplies  \n`paints_varnishes_and_supplies`5198Parking Lots, Garages  \n`parking_lots_garages`7523Passenger Railways  \n`passenger_railways`4112Pawn Shops  \n`pawn_shops`5933Pet Shops, Pet Food, and Supplies  \n`pet_shops_pet_food_and_supplies`5995Petroleum and Petroleum Products  \n`petroleum_and_petroleum_products`5172Photo Developing  \n`photo_developing`7395Photographic Studios  \n`photographic_studios`7221Photographic, Photocopy, Microfilm Equipment, and Supplies  \n`photographic_photocopy_microfilm_equipment_and_supplies`5044Picture/Video Production  \n`picture_video_production`7829Piece Goods, Notions, and Other Dry Goods  \n`piece_goods_notions_and_other_dry_goods`5131Plumbing, Heating Equipment, and Supplies  \n`plumbing_heating_equipment_and_supplies`5074Political Organizations Restricted  \n`political_organizations`8651Postal Services - Government Only Restricted  \n`postal_services_government_only`9402Precious Stones and Metals, Watches and Jewelry  \n`precious_stones_and_metals_watches_and_jewelry`5094Professional Services  \n`professional_services`8999Public Warehousing and Storage - Farm Products, Refrigerated Goods, Household Goods, and Storage  \n`public_warehousing_and_storage`4225Quick Copy, Repro, and Blueprint  \n`quick_copy_repro_and_blueprint`7338Railroads  \n`railroads`4011Real Estate Agents and Managers - Rentals  \n`real_estate_agents_and_managers_rentals`6513Record Stores  \n`record_stores`5735Recreational Vehicle Rentals  \n`recreational_vehicle_rentals`7519Religious Goods Stores  \n`religious_goods_stores`5973Religious Organizations Restricted  \n`religious_organizations`8661Roofing/Siding, Sheet Metal  \n`roofing_siding_sheet_metal`1761Secretarial Support Services  \n`secretarial_support_services`7339Security Brokers/Dealers Restricted  \n`security_brokers_dealers`6211Service Stations  \n`service_stations`5541Sewing, Needlework, Fabric, and Piece Goods Stores  \n`sewing_needlework_fabric_and_piece_goods_stores`5949Shoe Repair/Hat Cleaning  \n`shoe_repair_hat_cleaning`7251Shoe Stores  \n`shoe_stores`5661Small Appliance Repair  \n`small_appliance_repair`7629Snowmobile Dealers  \n`snowmobile_dealers`5598Special Trade Services  \n`special_trade_services`1799Specialty Cleaning  \n`specialty_cleaning`2842Sporting Goods Stores  \n`sporting_goods_stores`5941Sporting/Recreation Camps  \n`sporting_recreation_camps`7032Sports Clubs/Fields  \n`sports_clubs_fields`7941Sports and Riding Apparel Stores  \n`sports_and_riding_apparel_stores`5655Stamp and Coin Stores  \n`stamp_and_coin_stores`5972Stationary, Office Supplies, Printing and Writing Paper  \n`stationary_office_supplies_printing_and_writing_paper`5111Stationery Stores, Office, and School Supply Stores  \n`stationery_stores_office_and_school_supply_stores`5943Swimming Pools Sales  \n`swimming_pools_sales`5996TUI Travel - Germany  \n`t_ui_travel_germany`4723Tailors, Alterations  \n`tailors_alterations`5697Tax Payments - Government Agencies Restricted  \n`tax_payments_government_agencies`9311Tax Preparation Services  \n`tax_preparation_services`7276Taxicabs/Limousines  \n`taxicabs_limousines`4121Telecommunication Equipment and Telephone Sales  \n`telecommunication_equipment_and_telephone_sales`4812Telecommunication Services Restricted  \n`telecommunication_services`4814Telegraph Services  \n`telegraph_services`4821Tent and Awning Shops  \n`tent_and_awning_shops`5998Testing Laboratories  \n`testing_laboratories`8734Theatrical Ticket Agencies  \n`theatrical_ticket_agencies`7922Timeshares Restricted  \n`timeshares`7012Tire Retreading and Repair  \n`tire_retreading_and_repair`7534Tolls/Bridge Fees  \n`tolls_bridge_fees`4784Tourist Attractions and Exhibits  \n`tourist_attractions_and_exhibits`7991Towing Services  \n`towing_services`7549Trailer Parks, Campgrounds  \n`trailer_parks_campgrounds`7033Transportation Services (Not Elsewhere Classified)  \n`transportation_services`4789Travel Agencies, Tour Operators  \n`travel_agencies_tour_operators`4722Truck Stops  \n`truck_stop_iteration`7511Truck/Utility Trailer Rentals  \n`truck_utility_trailer_rentals`7513Typesetting, Plate Making, and Related Services  \n`typesetting_plate_making_and_related_services`2791Typewriter Stores  \n`typewriter_stores`5978U.S. Federal Government Agencies or Departments Restricted  \n`u_s_federal_government_agencies_or_departments`9405Uniforms, Commercial Clothing  \n`uniforms_commercial_clothing`5137Used Merchandise and Secondhand Stores  \n`used_merchandise_and_secondhand_stores`5931Utilities  \n`utilities`4900Variety Stores  \n`variety_stores`5331Veterinary Services  \n`veterinary_services`0742Video Amusement Game Supplies  \n`video_amusement_game_supplies`7993Video Game Arcades  \n`video_game_arcades`7994Video Tape Rental Stores  \n`video_tape_rental_stores`7841Vocational/Trade Schools  \n`vocational_trade_schools`8249Watch/Jewelry Repair  \n`watch_jewelry_repair`7631Welding Repair  \n`welding_repair`7692Wholesale Clubs  \n`wholesale_clubs`5300Wig and Toupee Stores  \n`wig_and_toupee_stores`5698Wires, Money Orders Restricted  \n`wires_money_orders`4829Womens Accessory and Specialty Shops  \n`womens_accessory_and_specialty_shops`5631Womens Ready-To-Wear Stores  \n`womens_ready_to_wear_stores`5621Wrecking and Salvage Yards  \n`wrecking_and_salvage_yards`5935",
    "title": "Setting merchant category codes | Stripe Documentation",
    "description": "Learn about merchant category codes (MCCs) and how to set them for your connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/currencies",
    "markdown": "# Working with multiple currencies | Stripe DocumentationThe Stripe Docs logo\n\n## Support processing charges in multiple currencies with Connect.\n\nStripe supports processing charges in [135+ currencies](https://docs.stripe.com/currencies). This allows you to present prices in a customer’s native currency and avoid conversion costs for customers.\n\nThe currencies you can use are determined by the country of the Stripe account where the charge is made.\n\n## Currency conversions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA currency conversion occurs if the _presentment_ currency differs from the _settlement_ currency.\n\nThe presentment currency is the currency that’s used for charges. The settlement currency is the currency that you can receive [payouts](https://docs.stripe.com/payouts \"payout\") in, depending on the charge type and applicable currency conversion. See the [supported presentment currencies](https://docs.stripe.com/currencies) and the [supported settlement currencies](https://docs.stripe.com/connect/payouts-connected-accounts#supported-settlement).\n\nDepending on bank account or debit card availability, the following occurs when paying out a [balance](https://docs.stripe.com/connect/account-balances):\n\n| Bank account or debit card availability | Conversion action |\n| --- | --- |\n| Available for the currency | No conversion |\n| Multiple bank accounts or debit cards available for the currency | No conversion–Stripe uses the bank account or debit card set as `default_for_currency` |\n| Not available for the currency | Stripe converts the payout balance based on the Stripe account’s default currency |\n\nIf you regularly charge in multiple currencies, you might be able to establish [multiple bank accounts](https://docs.stripe.com/payouts#multiple-bank-accounts) to have multiple settlement currencies.\n\n[Currency conversions](https://docs.stripe.com/currencies/conversions) use the current exchange rates provided by our service providers, with an additional conversion fee applied by Stripe. There are online resources for [conversion calculation](https://dashboard.stripe.com/currency_conversion) that can help you estimate current market rates. However, these numbers can fluctuate and might not reflect Stripe’s rates at the time a payment is processed.\n\n## Application fees for direct charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAlthough direct charges are in the connected account’s default currency, your platform receives the [application fees](https://docs.stripe.com/api#application_fees) for [direct charges](https://docs.stripe.com/connect/direct-charges) in your platform’s default currency.\n\n| Bank account or debit card availability | Conversion action |\n| --- | --- |\n| Available for the settlement currency | No conversion |\n| Not available for the settlement currency | Stripe converts the application fee based on the platform account’s default currency |\n\nIf your platform doesn’t use application fees and retains a portion of the charges instead, those funds are paid out (and converted or not) the same way as other charges on the platform account.\n\n## Application fees for destination charges and converting balances![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nApplication fees collected using the `application_fee_amount` parameter aren’t converted again for [destination charges](https://docs.stripe.com/connect/destination-charges); platforms always receive application fees in the connected account’s settlement currency. Use the `transfer_data[amount]` parameter to transfer less of the transaction amount and collect fees in the platform’s default settlement currency.\n\nIf you create charges on the platform using the `destination` or `on_behalf_of` parameters, you might accumulate balances in multiple currencies. If you don’t have bank accounts for these other currencies, Stripe provides a way to pay out balances in non-default currencies to your platform’s default bank account.\n\nThese currency conversions are created as manual payouts with `currency` set as the currency of the source balance:\n\n`curl https://api.stripe.com/v1/payouts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=xaf`\n\nAs long as there are sufficient funds in the balance for the specified currency, Stripe automatically converts the funds to the default bank account’s currency.\n\n## Example scenarios![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following examples illustrate how to work with multiple currencies in [Connect](https://docs.stripe.com/connect \"Connect\"):\n\n### Direct charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Direct charges](https://docs.stripe.com/connect/direct-charges) are always converted to the connected account’s default currency from the [presentment currency](https://docs.stripe.com/currencies#presentment-currencies). The [application fee](https://docs.stripe.com/connect/direct-charges#collect-fees) is converted to the platform’s default currency.\n\nFor example, you accept a charge for a connected account in USD. The connected account settles in EUR. The funds sent to the connected account are converted to EUR and the application fee is converted back to your platform in USD from EUR.\n\n### Destination charges without on\\_behalf\\_of ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen processing [destination charges](https://docs.stripe.com/connect/destination-charges) without `on_behalf_of`, Stripe first converts them from the [presentment currency](https://docs.stripe.com/currencies#presentment-currencies) to the platform’s default currency. The funds sent to the connected account are then converted to the connected account’s default currency.\n\n*   If an `application_fee_amount` is used, the [application fee](https://docs.stripe.com/connect/destination-charges?fee-type=application-fee#collect-fees) is collected after the conversion to the connected account’s default currency. The fee remains in that currency when added to the platform.\n*   If `transfer_data[amount]` is used, the fee is collected after the first currency conversion and remains in the platform’s default currency.\n\n#### Note\n\nFor example, you accept a destination charge for a connected account in EUR. The connected account settles in GBP, and your platform settles in USD. The charge is converted from EUR to USD and the funds sent to the connected account are converted to GBP.\n\n*   If `application_fee_amount` is used, the application fee amount is converted from EUR to GBP and taken from the amount that settles on the connected account.\n*   If `transfer_data[amount]` is used, the fee is retained in USD after converting from the initial presentment currency.\n\n### Destination charges with on\\_behalf\\_of ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen processing [destination charges](https://docs.stripe.com/connect/destination-charges) with `on_behalf_of`, Stripe first converts them from the [presentment currency](https://docs.stripe.com/currencies#presentment-currencies) to the connected account’s default currency. The [application fee](https://docs.stripe.com/connect/destination-charges?fee-type=application-fee#collect-fees) remains in the connected account’s currency, regardless of whether `application_fee_amount` or `transfer_data[amount]` is used.\n\nFor example, the connected account accepts a charge in USD but settles in EUR. The charge is converted to EUR and sent to the connected account in EUR. The fee is collected in EUR regardless of whether `application_fee_amount` or `transfer_data[amount]` is used.\n\n### Separate charges and transfers without on\\_behalf\\_of ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Separate charges](https://docs.stripe.com/connect/separate-charges-and-transfers) are converted to the platform’s default currency from the [presentment currency](https://docs.stripe.com/currencies#presentment-currencies) and the platform later transfers the funds to the connected account. The `application_fee_amount` and `transfer_data[amount]` parameters are not used to collect fees, since the platform can choose the appropriate amount to send at transfer time.\n\n#### Note\n\n### Separate charges and transfers with on\\_behalf\\_of ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Separate charges](https://docs.stripe.com/connect/separate-charges-and-transfers) are converted to the connected account’s default currency from the [presentment currency](https://docs.stripe.com/currencies#presentment-currencies) and the platform later transfers the funds to the connected account. The `application_fee_amount` and `transfer_data[amount]` parameters are not used to collect fees, since the platform can choose the appropriate amount to send at transfer time.\n\n#### Note",
    "title": "Working with multiple currencies | Stripe Documentation",
    "description": "Support processing charges in multiple currencies with Connect.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/payment-links",
    "markdown": "# Create payment links with Connect\n\n## With Connect, you can create payment links for connected accounts, optionally taking fees in the process.\n\nYou can create [payment links](https://docs.stripe.com/payment-links) for connected accounts, which support [several approaches](https://docs.stripe.com/connect/charges) for collecting payments. You can use [direct charges](https://docs.stripe.com/connect/direct-charges) to create them directly on the connected account. Alternatively, you can create payment links on the platform with transfers to the connected account by using [destination charges](https://docs.stripe.com/connect/destination-charges). You can also take an application fee on these payment links.\n\n## Create a payment link using direct charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create an payment link that directly charges on a connected account, [create a payment link](https://docs.stripe.com/api#create_payment_link) while [authenticated](https://docs.stripe.com/connect/authentication#stripe-account-header) as the connected account. For this to work, you must also create the [product](https://docs.stripe.com/api#create_product) and the [price](https://docs.stripe.com/api#create_price) on the connected account.\n\n`curl https://api.stripe.com/v1/payment_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1`\n\nWhen you use direct charges, the connected account is responsible for the cost of the Stripe fees, refunds, and chargebacks.\n\n## Create a payment link using destination charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create a payment link that charges on the platform and creates automatic transfers to a connected account, [create a payment link](https://docs.stripe.com/api#create_payment_link) while providing the connected account ID as the `transfer_data[destination]` [value](https://docs.stripe.com/api/payment_links/payment_links/object#payment_link_object-transfer_data).\n\n`curl https://api.stripe.com/v1/payment_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\nFor this to work, you must also create the [product](https://docs.stripe.com/api#create_product) and the [price](https://docs.stripe.com/api#create_price) on the platform account. When using automatic transfers, the platform is the business of record.\n\nWhen performing destination charges, Payment Links uses the brand settings of your platform account for the payment page. See the [Customize branding](https://docs.stripe.com/connect/payment-links#customize-branding) section for more information.\n\n## Create a payment link using destination charges and `on_behalf_of` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can also create a destination charge with the `on_behalf_of` parameter set to the connected account ID (by default, it is the platform). The `on_behalf_of` parameter determines the settlement merchant, which affects:\n\n*   Whose statement descriptor the end user sees\n*   Whose address and phone number the end user sees\n*   The settlement currency of the charge\n*   The payment page branding the customer sees\n\n`curl https://api.stripe.com/v1/payment_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d on_behalf_of=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\n## Fulfill orders placed through payment links![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter an end user pays through a payment link you need to enable your connected accounts to handle any fulfillment necessary.\n\nConfigure a [webhook](https://docs.stripe.com/webhooks \"webhook\") endpoint [in the Dashboard](https://dashboard.stripe.com/account/webhooks).\n\n![Webhooks page in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/account_webhooks.03b71cec87ef2093fe0caa92e5bfce44.png)\n\nThen create an HTTP endpoint on your server to monitor for completed payments. Make sure to replace the endpoint secret key (`whsec_...`) in the example with your key.\n\n`# Using Sinatra. require 'sinatra' require 'stripe'  set :port, 4242  # Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n``# If you are testing your webhook locally with the Stripe CLI you # can find the endpoint's secret by running `stripe listen` # Otherwise, find your endpoint's secret in your webhook settings in # the Developer Dashboard endpoint_secret = 'whsec_...'  post '/webhook' do   payload = request.body.read   sig_header = request.env['HTTP_STRIPE_SIGNATURE']    event = nil    # Verify webhook signature and extract the event.   # See [https://stripe.com/docs/webhooks#verify-events](https://stripe.com/docs/webhooks#verify-events) for more information.   begin     event = Stripe::Webhook.construct_event(       payload, sig_header, endpoint_secret     )   rescue JSON::ParserError => e     # Invalid payload.     status 400     return   rescue Stripe::SignatureVerificationError => e     # Invalid Signature.     status 400     return   end    if event['type'] == 'checkout.session.completed'     session = event['data']['object']     connected_account_id = event['account']     handle_completed_checkout_session(connected_account_id, session)   end    status 200 end  def handle_completed_checkout_session(connected_account_id, session)   # Fulfill the purchase   puts 'Connected account ID: ' + connected_account_id   puts session.to_s end``\n\nLearn more in our [fulfillment guide](https://docs.stripe.com/checkout/fulfillment).",
    "title": "Create payment links with Connect | Stripe Documentation",
    "description": "With Connect, you can create payment links for connected accounts, optionally taking fees in the process.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/radar",
    "markdown": "# Use Radar with Connect | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Radar to identify fraud in Connect account charges.\n\n[Stripe Radar](https://docs.stripe.com/radar \"Radar\") uses machine learning to identify fraudulent payments in real time. When you use Radar with connected accounts, it checks only external charges. It doesn’t check fund transfers between Stripe accounts.\n\n[Charges in a Connect integration](https://docs.stripe.com/connect/charges#types) fall into two categories:\n\n*   **Direct charges**: Paid directly to a connected account; Stripe applies only the collecting account’s Radar configuration and rules\n*   **Transferred charges** (for example, destination charges or separate charges and transfers): Paid to the platform account and transferred to a connected account; Stripe applies only the platform account’s Radar configuration and rules\n\n## Radar fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe charges Radar fees based on the rate for the account that collected the payment. For payments collected by the platform account and transferred to a connected account, you can pass Radar fees to the connected account by reducing the transferred amount.\n\n## Radar configuration for a connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Dashboard you use to configure Radar for a connected account depends on the connected account type. The following table shows which Dashboard to use for each account type.\n\n| Dashboard access of the connected account | Connected account Dashboard | Platform account Dashboard Connect page |\n| --- | --- | --- |\n| Connected accounts with access to the Stripe Dashboard |     |     |\n| Connected accounts with access to the Express Dashboard |     |     |\n| Connected accounts with no dashboard access |     |     |\n\n## Radar behavior![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRadar behavior for connected account payments depends on the charge category and connected account type. The following table describes each scenario.\n\n| Charge type | Radar config rules used | Charges visible in connected account Dashboard | Charges visible in platform account Dashboard Connect page |\n| --- | --- | --- | --- |\n| Direct for connected accounts with access to the Stripe Dashboard | Connected account |     |     |\n| Direct for connected accounts with access to the Express Dashboard | Connected account |     |     |\n| Direct for connected accounts with no dashboard access | Connected account |     |     |\n| Transferred from platform account | Platform account |     |     |\n\n## Radar for Fraud Teams![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you have [Radar for Fraud Teams](https://stripe.com/radar/fraud-teams), you can [customize your rules](https://docs.stripe.com/radar/rules#request-3d-secure) to include [destination charge](https://docs.stripe.com/connect/destination-charges) attributes. You can either use the `destination` attribute in the [supported rule attributes](https://docs.stripe.com/radar/rules/supported-attributes), or use custom [metadata on the destination account](https://docs.stripe.com/radar/rules/reference#metadata-attributes).",
    "title": "Use Radar with Connect | Stripe Documentation",
    "description": "Learn how to use Stripe Radar to identify fraud in Connect account charges.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-methods/connect",
    "markdown": "# Connect platforms using the Payment Methods API\n\n## Considerations for Stripe Connect platforms adding support for new payment methods using the Payment Methods API.\n\n[Connect](https://docs.stripe.com/connect \"Connect\") platform owners can make use of additional payment methods supported with the [Payment Methods API](https://docs.stripe.com/payments/payment-methods). To learn more about creating payments for connected users, and which approach is best for you, refer to our Connect [payments and fees documentation](https://docs.stripe.com/connect/charges).\n\nYou can use the Payment Methods API with Connect in a number of ways if you opt for [direct charges](https://docs.stripe.com/connect/direct-charges).\n\n## Using the Payment Method API with direct charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDirect charges require creating [PaymentMethods](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") on connected accounts. With any of these methods, you must first [enable the payment method](https://docs.stripe.com/connect/dynamic-payment-methods) you intend to use on the connected account.\n\n### Create and attach a PaymentMethod when confirming a PaymentIntent ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe recommended way to use the Payment Method API with Connect is to save the payment method details during Payment Intent confirmation. For more information about this process, see [Save a card during payment](https://docs.stripe.com/payments/save-during-payment).\n\nWith Stripe.js, initialize the Stripe object and set `stripeAccount` to the connected account’s ID and use the `setup_future_usage` option when confirming the PaymentIntent. This automatically saves the payment information to the customer for reuse with future charges with that connected account.\n\nSee [PaymentIntents with Stripe.js](https://docs.stripe.com/js/payment_intents) for more details about confirming each type of payment method.\n\n`var stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`, {   stripeAccount:   '{{CONNECTED_ACCOUNT_ID}}'  , });  (async () => {   const {paymentIntent, error} = await stripe.confirmCardPayment(     '{{PAYMENT_INTENT_CLIENT_SECRET}}',     {       payment_method: {         card: card,         billing_details: {           name: 'Jenny Rosen'         }       },       setup_future_usage: 'off_session',     }   ); })();`\n\nIf you’re confirming PaymentIntents from the server, you can make use of [authentication using the Stripe-Account header](https://docs.stripe.com/connect/authentication#stripe-account-header) with any of our supported libraries. See [Confirm a PaymentIntent](https://docs.stripe.com/api/payment_intents/confirm) for additional details.\n\n### Creating PaymentMethods directly on the connected account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou may also create a PaymentMethod directly on a connected account with `createPaymentMethod`. With Stripe.js, initialize the Stripe object and set `stripeAccount` to the connected account’s ID.\n\n`// Set the connected Stripe Account on which the PaymentMethod should be created const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`, {   stripeAccount:   '{{CONNECTED_ACCOUNT_ID}}'  , });  (async () => {   const {paymentMethod, error} = await stripe.createPaymentMethod({     type: 'card',     card: cardElement,     billing_details: {       name: 'Jenny Rosen',     },   });    // Handle error or paymentMethod })();`\n\nIf you’re creating PaymentMethods from the server, you can make use of [authentication using the Stripe-Account header](https://docs.stripe.com/connect/authentication#stripe-account-header) with any of our supported libraries.\n\n### Cloning PaymentMethods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can also create PaymentMethods on your platform and clone them to a connected account to create direct charges. Cloning is currently supported for PaymentMethods which have `type` set to either `card` or `us_bank_account`.\n\nAfter you create a PaymentMethod and [attach](https://docs.stripe.com/api/payment_methods/attach) it to a [Customer](https://docs.stripe.com/api/customers \"Customers\"), you can clone that PaymentMethod on a connected account using the connected account’s ID as the `Stripe-Account` header. Read more in our guide for [sharing saved payment methods across multiple accounts for direct charges](https://docs.stripe.com/connect/direct-charges-multiple-accounts).\n\n`curl https://api.stripe.com/v1/payment_methods \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d customer={{PLATFORM_CUSTOMER_ID}} \\   -d payment_method={{PAYMENT_METHOD_ID}} \\   -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nIf you want to reuse PaymentMethods on a connected account, attach them to Customers before using them with PaymentIntents to create charges. You must provide the Customer ID in the request when cloning PaymentMethods that are attached to Customers for security purposes.\n\nIt is possible to clone PaymentMethods to connected accounts without previously attaching them to Customers. However, note that the original PaymentMethod will be consumed, since PaymentMethods that aren’t attached to Customers can only be used once.",
    "title": "Connect platforms using the Payment Methods API | Stripe Documentation",
    "description": "Considerations for Stripe Connect platforms adding support for new payment methods using the Payment Methods API.",
    "languageCode": "en-US"
  }
]