[
  {
    "url": "https://vitest.dev/",
    "markdown": "# Vitest | Next Generation testing framework\n\nNext Generation Testing Framework\n\nA Vite-native testing framework. It's fast!\n\n![Vitest](https://vitest.dev/logo-shadow.svg)\n\n## Vite Powered\n\nReuse Vite's config and plugins - consistent across your app and tests. But it's not required to use Vitest!\n\n## Jest Compatible\n\nExpect, snapshot, coverage, and more - migrating from Jest is straightforward.\n\n⚡\n\n## Smart & instant watch mode\n\nOnly rerun the related changes, just like HMR for tests!\n\n## ESM, TypeScript, JSX\n\nOut-of-box ESM, TypeScript and JSX support powered by esbuild.\n\n[![Deploys by Netlify](https://vitest.dev/netlify.svg)](https://www.netlify.com/)",
    "title": "Vitest | Next Generation testing framework",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/",
    "markdown": "# Getting Started | Guide | Vitest\n\n## Overview [​](#overview)\n\nVitest is a next generation testing framework powered by Vite.\n\nYou can learn more about the rationale behind the project in the [Why Vitest](https://vitest.dev/guide/why) section.\n\n## Trying Vitest Online [​](#trying-vitest-online)\n\nYou can try Vitest online on [StackBlitz](https://vitest.new/). It runs Vitest directly in the browser, and it is almost identical to the local setup but doesn't require installing anything on your machine.\n\n## Adding Vitest to Your Project [​](#adding-vitest-to-your-project)\n\n[Learn how to install by Video](https://vueschool.io/lessons/how-to-install-vitest?friend=vueuse)\n\nnpmyarnpnpmbun\n\nbash\n\n```\nnpm install -D vitest\n```\n\nTIP\n\nVitest 1.0 requires Vite >=v5.0.0 and Node >=v18.0.0\n\nIt is recommended that you install a copy of `vitest` in your `package.json`, using one of the methods listed above. However, if you would prefer to run `vitest` directly, you can use `npx vitest` (the `npx` command comes with npm and Node.js).\n\nThe `npx` command will execute the command either from a local `node_modules/.bin` installing any packages needed in order for the command to run. By default, npx will check whether command exists in $PATH, or in the local project binaries, and execute that. If command is not found, it will be installed prior to execution.\n\n## Writing Tests [​](#writing-tests)\n\nAs an example, we will write a simple test that verifies the output of a function that adds two numbers.\n\njs\n\n```\n// sum.js\nexport function sum(a, b) {\n  return a + b\n}\n```\n\njs\n\n```\n// sum.test.js\nimport { expect, test } from 'vitest'\nimport { sum } from './sum'\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3)\n})\n```\n\nTIP\n\nBy default, tests must contain \".test.\" or \".spec.\" in their file name.\n\nNext, in order to execute the test, add the following section to your `package.json`:\n\njson\n\n```\n{\n  \"scripts\": {\n    \"test\": \"vitest\"\n  }\n}\n```\n\nFinally, run `npm run test`, `yarn test`, or `pnpm test`, depending on your package manager, and Vitest will print this message:\n\ntxt\n\n```\n✓ sum.test.js (1)\n  ✓ adds 1 + 2 to equal 3\n\nTest Files  1 passed (1)\n    Tests  1 passed (1)\n  Start at  02:15:44\n  Duration  311ms\n```\n\nLearn more about the usage of Vitest, see the [API](https://vitest.dev/api/) section.\n\n## Configuring Vitest [​](#configuring-vitest)\n\nOne of the main advantages of Vitest is its unified configuration with Vite. If present, `vitest` will read your root `vite.config.ts` to match with the plugins and setup as your Vite app. For example, your Vite [resolve.alias](https://vitejs.dev/config/shared-options.html#resolve-alias) and [plugins](https://vitejs.dev/guide/using-plugins) configuration will work out-of-the-box. If you want a different configuration during testing, you can:\n\n*   Create `vitest.config.ts`, which will have the higher priority\n*   Pass `--config` option to CLI, e.g. `vitest --config ./path/to/vitest.config.ts`\n*   Use `process.env.VITEST` or `mode` property on `defineConfig` (will be set to `test` if not overridden) to conditionally apply different configuration in `vite.config.ts`\n\nVitest supports the same extensions for your configuration file as Vite does: `.js`, `.mjs`, `.cjs`, `.ts`, `.cts`, `.mts`. Vitest does not support `.json` extension.\n\nIf you are not using Vite as your build tool, you can configure Vitest using the `test` property in your config file:\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    // ...\n  },\n})\n```\n\nTIP\n\nEven if you do not use Vite yourself, Vitest relies heavily on it for its transformation pipeline. For that reason, you can also configure any property described in [Vite documentation](https://vitejs.dev/config/).\n\nIf you are already using Vite, add `test` property in your Vite config. You'll also need to add a reference to Vitest types using a [triple slash directive](https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html#-reference-types-) at the top of your config file.\n\nts\n\n```\n/// <reference types=\"vitest\" />\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  test: {\n    // ...\n  },\n})\n```\n\nSee the list of config options in the [Config Reference](https://vitest.dev/config/)\n\nWARNING\n\nIf you decide to have two separate config files for Vite and Vitest, make sure to define the same Vite options in your Vitest config file since it will override your Vite file, not extend it. You can also use `mergeConfig` method from `vite` or `vitest/config` entries to merge Vite config with Vitest config:\n\nvitest.config.mjsvite.config.mjs\n\nts\n\n```\nimport { defineConfig, mergeConfig } from 'vitest/config'\nimport viteConfig from './vite.config.mjs'\n\nexport default mergeConfig(viteConfig, defineConfig({\n  test: {\n    // ...\n  }\n}))\n```\n\nts\n\n```\nimport { defineConfig } from 'vite'\nimport Vue from '@vitejs/plugin-vue'\n\nexport default defineConfig({\n  plugins: [Vue()],\n})\n```\n\nBut we recommend to use the same file for both Vite and Vitest instead of creating two separate files.\n\n## Workspaces Support [​](#workspaces-support)\n\nRun different project configurations inside the same project with [Vitest Workspaces](https://vitest.dev/guide/workspace). You can define a list of files and folders that define your workspace in `vitest.workspace` file. The file supports `js`/`ts`/`json` extensions. This feature works great with monorepo setups.\n\nts\n\n```\nimport { defineWorkspace } from 'vitest/config'\n\nexport default defineWorkspace([\n  // you can use a list of glob patterns to define your workspaces\n  // Vitest expects a list of config files\n  // or directories where there is a config file\n  'packages/*',\n  'tests/*/vitest.config.{e2e,unit}.ts',\n  // you can even run the same tests,\n  // but with different configs in the same \"vitest\" process\n  {\n    test: {\n      name: 'happy-dom',\n      root: './shared_tests',\n      environment: 'happy-dom',\n      setupFiles: ['./setup.happy-dom.ts'],\n    },\n  },\n  {\n    test: {\n      name: 'node',\n      root: './shared_tests',\n      environment: 'node',\n      setupFiles: ['./setup.node.ts'],\n    },\n  },\n])\n```\n\n## Command Line Interface [​](#command-line-interface)\n\nIn a project where Vitest is installed, you can use the `vitest` binary in your npm scripts, or run it directly with `npx vitest`. Here are the default npm scripts in a scaffolded Vitest project:\n\njson\n\n```\n{\n  \"scripts\": {\n    \"test\": \"vitest\",\n    \"coverage\": \"vitest run --coverage\"\n  }\n}\n```\n\nTo run tests once without watching for file changes, use `vitest run`. You can specify additional CLI options like `--port` or `--https`. For a full list of CLI options, run `npx vitest --help` in your project.\n\nLearn more about the [Command Line Interface](https://vitest.dev/guide/cli)\n\n## IDE Integrations [​](#ide-integrations)\n\nWe also provided a official extension for Visual Studio Code to enhance your testing experience with Vitest.\n\n[Install from VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=vitest.explorer)\n\nLearn more about [IDE Integrations](https://vitest.dev/guide/ide)\n\n## Examples [​](#examples)\n\n| Example | Source | Playground |\n| --- | --- | --- |\n| `basic` | [GitHub](https://github.com/vitest-dev/vitest/tree/main/examples/basic) | [Play Online](https://stackblitz.com/fork/github/vitest-dev/vitest/tree/main/examples/basic?initialPath=__vitest__/) |\n| `fastify` | [GitHub](https://github.com/vitest-dev/vitest/tree/main/examples/fastify) | [Play Online](https://stackblitz.com/fork/github/vitest-dev/vitest/tree/main/examples/fastify?initialPath=__vitest__/) |\n| `lit` | [GitHub](https://github.com/vitest-dev/vitest/tree/main/examples/lit) | [Play Online](https://stackblitz.com/fork/github/vitest-dev/vitest/tree/main/examples/lit?initialPath=__vitest__/) |\n| `marko` | [GitHub](https://github.com/marko-js/examples/tree/master/examples/library-ts) | [Play Online](https://stackblitz.com/fork/github/marko-js/examples/tree/master/examples/library-ts/) |\n| `preact` | [GitHub](https://github.com/vitest-dev/vitest/tree/main/examples/preact) | [Play Online](https://stackblitz.com/fork/github/vitest-dev/vitest/tree/main/examples/preact?initialPath=__vitest__/) |\n| `react` | [GitHub](https://github.com/vitest-dev/vitest/tree/main/examples/react) | [Play Online](https://stackblitz.com/fork/github/vitest-dev/vitest/tree/main/examples/react?initialPath=__vitest__/) |\n| `solid` | [GitHub](https://github.com/vitest-dev/vitest/tree/main/examples/solid) | [Play Online](https://stackblitz.com/fork/github/vitest-dev/vitest/tree/main/examples/solid?initialPath=__vitest__/) |\n| `sveltekit` | [GitHub](https://github.com/vitest-dev/vitest/tree/main/examples/sveltekit) | [Play Online](https://stackblitz.com/fork/github/vitest-dev/vitest/tree/main/examples/sveltekit?initialPath=__vitest__/) |\n| `typecheck` | [GitHub](https://github.com/vitest-dev/vitest/tree/main/examples/typecheck) | [Play Online](https://stackblitz.com/fork/github/vitest-dev/vitest/tree/main/examples/typecheck?initialPath=__vitest__/) |\n| `workspace` | [GitHub](https://github.com/vitest-dev/vitest/tree/main/examples/workspace) | [Play Online](https://stackblitz.com/fork/github/vitest-dev/vitest/tree/main/examples/workspace?initialPath=__vitest__/) |\n\n## Projects using Vitest [​](#projects-using-vitest)\n\n*   [unocss](https://github.com/unocss/unocss)\n*   [unplugin-auto-import](https://github.com/antfu/unplugin-auto-import)\n*   [unplugin-vue-components](https://github.com/antfu/unplugin-vue-components)\n*   [vue](https://github.com/vuejs/core)\n*   [vite](https://github.com/vitejs/vite)\n*   [vitesse](https://github.com/antfu/vitesse)\n*   [vitesse-lite](https://github.com/antfu/vitesse-lite)\n*   [fluent-vue](https://github.com/demivan/fluent-vue)\n*   [vueuse](https://github.com/vueuse/vueuse)\n*   [milkdown](https://github.com/Saul-Mirone/milkdown)\n*   [gridjs-svelte](https://github.com/iamyuu/gridjs-svelte)\n*   [spring-easing](https://github.com/okikio/spring-easing)\n*   [bytemd](https://github.com/bytedance/bytemd)\n*   [faker](https://github.com/faker-js/faker)\n*   [million](https://github.com/aidenybai/million)\n*   [Vitamin](https://github.com/wtchnm/Vitamin)\n*   [neodrag](https://github.com/PuruVJ/neodrag)\n*   [svelte-multiselect](https://github.com/janosh/svelte-multiselect)\n*   [iconify](https://github.com/iconify/iconify)\n*   [tdesign-vue-next](https://github.com/Tencent/tdesign-vue-next)\n*   [cz-git](https://github.com/Zhengqbbb/cz-git)\n\n## Using Unreleased Commits [​](#using-unreleased-commits)\n\nIf you can't wait for a new release to test the latest features, you will need to clone the [vitest repo](https://github.com/vitest-dev/vitest) to your local machine and then build and link it yourself ([pnpm](https://pnpm.io/) is required):\n\nbash\n\n```\ngit clone https://github.com/vitest-dev/vitest.git\ncd vitest\npnpm install\ncd packages/vitest\npnpm run build\npnpm link --global # you can use your preferred package manager for this step\n```\n\nThen go to the project where you are using Vitest and run `pnpm link --global vitest` (or the package manager that you used to link `vitest` globally).\n\n## Community [​](#community)\n\nIf you have questions or need help, reach out to the community at [Discord](https://chat.vitest.dev/) and [GitHub Discussions](https://github.com/vitest-dev/vitest/discussions).",
    "title": "Getting Started | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/api/",
    "markdown": "# Test API Reference | Vitest\n\nThe following types are used in the type signatures below\n\nts\n\n```\ntype Awaitable<T> = T | PromiseLike<T>\ntype TestFunction = () => Awaitable<void>\n\ninterface TestOptions {\n  /**\n   * Will fail the test if it takes too long to execute\n   */\n  timeout?: number\n  /**\n   * Will retry the test specific number of times if it fails\n   *\n   * @default 0\n   */\n  retry?: number\n  /**\n   * Will repeat the same test several times even if it fails each time\n   * If you have \"retry\" option and it fails, it will use every retry in each cycle\n   * Useful for debugging random failings\n   *\n   * @default 0\n   */\n  repeats?: number\n}\n```\n\nVitest 1.3.0 deprecates the use of options as the last parameter. You will see a deprecation message until 2.0.0 when this syntax will be removed. If you need to pass down options, use `test` function's second argument:\n\nts\n\n```\nimport { test } from 'vitest'\n\ntest('flaky test', () => {}, { retry: 3 }) \ntest('flaky test', { retry: 3 }, () => {}) \n```\n\nWhen a test function returns a promise, the runner will wait until it is resolved to collect async expectations. If the promise is rejected, the test will fail.\n\nTIP\n\nIn Jest, `TestFunction` can also be of type `(done: DoneCallback) => void`. If this form is used, the test will not be concluded until `done` is called. You can achieve the same using an `async` function, see the [Migration guide Done Callback section](https://vitest.dev/guide/migration#done-callback).\n\nMost options support both dot-syntax and object-syntax allowing you to use whatever style you prefer.\n\ndot-syntaxobject-syntax\n\nts\n\n```\nimport { test } from 'vitest'\n\ntest.skip('skipped test', () => {\n  // some logic that fails right now\n})\n```\n\nts\n\n```\nimport { test } from 'vitest'\n\ntest('skipped test', { skip: true }, () => {\n  // some logic that fails right now\n})\n```\n\n## test [​](#test)\n\n*   **Alias:** `it`\n\n`test` defines a set of related expectations. It receives the test name and a function that holds the expectations to test.\n\nOptionally, you can provide a timeout (in milliseconds) for specifying how long to wait before terminating. The default is 5 seconds, and can be configured globally with [testTimeout](https://vitest.dev/config/#testtimeout)\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\ntest('should work as expected', () => {\n  expect(Math.sqrt(4)).toBe(2)\n})\n```\n\n### test.extend [​](#test-extended)\n\n*   **Alias:** `it.extend`\n\nUse `test.extend` to extend the test context with custom fixtures. This will return a new `test` and it's also extendable, so you can compose more fixtures or override existing ones by extending it as you need. See [Extend Test Context](https://vitest.dev/guide/test-context#test-extend) for more information.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nconst todos = []\nconst archive = []\n\nconst myTest = test.extend({\n  todos: async ({ task }, use) => {\n    todos.push(1, 2, 3)\n    await use(todos)\n    todos.length = 0\n  },\n  archive\n})\n\nmyTest('add item', ({ todos }) => {\n  expect(todos.length).toBe(3)\n\n  todos.push(4)\n  expect(todos.length).toBe(4)\n})\n```\n\n### test.skip [​](#test-skip)\n\n*   **Alias:** `it.skip`\n\nIf you want to skip running certain tests, but you don't want to delete the code due to any reason, you can use `test.skip` to avoid running them.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest.skip('skipped test', () => {\n  // Test skipped, no error\n  assert.equal(Math.sqrt(4), 3)\n})\n```\n\nYou can also skip test by calling `skip` on its [context](https://vitest.dev/guide/test-context) dynamically:\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('skipped test', (context) => {\n  context.skip()\n  // Test skipped, no error\n  assert.equal(Math.sqrt(4), 3)\n})\n```\n\n### test.skipIf [​](#test-skipif)\n\n*   **Alias:** `it.skipIf`\n\nIn some cases you might run tests multiple times with different environments, and some of the tests might be environment-specific. Instead of wrapping the test code with `if`, you can use `test.skipIf` to skip the test whenever the condition is truthy.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst isDev = process.env.NODE_ENV === 'development'\n\ntest.skipIf(isDev)('prod only test', () => {\n  // this test only runs in production\n})\n```\n\nWARNING\n\nYou cannot use this syntax, when using Vitest as [type checker](https://vitest.dev/guide/testing-types).\n\n### test.runIf [​](#test-runif)\n\n*   **Alias:** `it.runIf`\n\nOpposite of [test.skipIf](#test-skipif).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst isDev = process.env.NODE_ENV === 'development'\n\ntest.runIf(isDev)('dev only test', () => {\n  // this test only runs in development\n})\n```\n\nWARNING\n\nYou cannot use this syntax, when using Vitest as [type checker](https://vitest.dev/guide/testing-types).\n\n### test.only [​](#test-only)\n\n*   **Alias:** `it.only`\n\nUse `test.only` to only run certain tests in a given suite. This is useful when debugging.\n\nOptionally, you can provide a timeout (in milliseconds) for specifying how long to wait before terminating. The default is 5 seconds, and can be configured globally with [testTimeout](https://vitest.dev/config/#testtimeout).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest.only('test', () => {\n  // Only this test (and others marked with only) are run\n  assert.equal(Math.sqrt(4), 2)\n})\n```\n\nSometimes it is very useful to run `only` tests in a certain file, ignoring all other tests from the whole test suite, which pollute the output.\n\nIn order to do that run `vitest` with specific file containing the tests in question.\n\n```\n# vitest interesting.test.ts\n```\n\n### test.concurrent [​](#test-concurrent)\n\n*   **Alias:** `it.concurrent`\n\n`test.concurrent` marks consecutive tests to be run in parallel. It receives the test name, an async function with the tests to collect, and an optional timeout (in milliseconds).\n\nts\n\n```\nimport { describe, test } from 'vitest'\n\n// The two tests marked with concurrent will be run in parallel\ndescribe('suite', () => {\n  test('serial test', async () => { /* ... */ })\n  test.concurrent('concurrent test 1', async () => { /* ... */ })\n  test.concurrent('concurrent test 2', async () => { /* ... */ })\n})\n```\n\n`test.skip`, `test.only`, and `test.todo` works with concurrent tests. All the following combinations are valid:\n\nts\n\n```\ntest.concurrent(/* ... */)\ntest.skip.concurrent(/* ... */) // or test.concurrent.skip(/* ... */)\ntest.only.concurrent(/* ... */) // or test.concurrent.only(/* ... */)\ntest.todo.concurrent(/* ... */) // or test.concurrent.todo(/* ... */)\n```\n\nWhen running concurrent tests, Snapshots and Assertions must use `expect` from the local [Test Context](https://vitest.dev/guide/test-context) to ensure the right test is detected.\n\nts\n\n```\ntest.concurrent('test 1', async ({ expect }) => {\n  expect(foo).toMatchSnapshot()\n})\ntest.concurrent('test 2', async ({ expect }) => {\n  expect(foo).toMatchSnapshot()\n})\n```\n\nWARNING\n\nYou cannot use this syntax, when using Vitest as [type checker](https://vitest.dev/guide/testing-types).\n\n### test.sequential [​](#test-sequential)\n\n*   **Alias:** `it.sequential`\n\n`test.sequential` marks a test as sequential. This is useful if you want to run tests in sequence within `describe.concurrent` or with the `--sequence.concurrent` command option.\n\nts\n\n```\n// with config option { sequence: { concurrent: true } }\ntest('concurrent test 1', async () => { /* ... */ })\ntest('concurrent test 2', async () => { /* ... */ })\n\ntest.sequential('sequential test 1', async () => { /* ... */ })\ntest.sequential('sequential test 2', async () => { /* ... */ })\n\n// within concurrent suite\ndescribe.concurrent('suite', () => {\n  test('concurrent test 1', async () => { /* ... */ })\n  test('concurrent test 2', async () => { /* ... */ })\n\n  test.sequential('sequential test 1', async () => { /* ... */ })\n  test.sequential('sequential test 2', async () => { /* ... */ })\n})\n```\n\n### test.todo [​](#test-todo)\n\n*   **Alias:** `it.todo`\n\nUse `test.todo` to stub tests to be implemented later. An entry will be shown in the report for the tests so you know how many tests you still need to implement.\n\nts\n\n```\n// An entry will be shown in the report for this test\ntest.todo('unimplemented test')\n```\n\n### test.fails [​](#test-fails)\n\n*   **Alias:** `it.fails`\n\nUse `test.fails` to indicate that an assertion will fail explicitly.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nfunction myAsyncFunc() {\n  return new Promise(resolve => resolve(1))\n}\ntest.fails('fail test', async () => {\n  await expect(myAsyncFunc()).rejects.toBe(1)\n})\n```\n\nWARNING\n\nYou cannot use this syntax, when using Vitest as [type checker](https://vitest.dev/guide/testing-types).\n\n### test.each [​](#test-each)\n\n*   **Alias:** `it.each`\n\nTIP\n\nWhile `test.each` is provided for Jest compatibility, Vitest also has [`test.for`](#test-for) with an additional feature to integrate [`TestContext`](https://vitest.dev/guide/test-context).\n\nUse `test.each` when you need to run the same test with different variables. You can inject parameters with [printf formatting](https://nodejs.org/api/util.html#util_util_format_format_args) in the test name in the order of the test function parameters.\n\n*   `%s`: string\n*   `%d`: number\n*   `%i`: integer\n*   `%f`: floating point value\n*   `%j`: json\n*   `%o`: object\n*   `%#`: index of the test case\n*   `%%`: single percent sign ('%')\n\nts\n\n```\ntest.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('add(%i, %i) -> %i', (a, b, expected) => {\n  expect(a + b).toBe(expected)\n})\n\n// this will return\n// ✓ add(1, 1) -> 2\n// ✓ add(1, 2) -> 3\n// ✓ add(2, 1) -> 3\n```\n\nYou can also access object properties with `$` prefix, if you are using objects as arguments:\n\nts\n\n```\ntest.each([\n  { a: 1, b: 1, expected: 2 },\n  { a: 1, b: 2, expected: 3 },\n  { a: 2, b: 1, expected: 3 },\n])('add($a, $b) -> $expected', ({ a, b, expected }) => {\n  expect(a + b).toBe(expected)\n})\n\n// this will return\n// ✓ add(1, 1) -> 2\n// ✓ add(1, 2) -> 3\n// ✓ add(2, 1) -> 3\n```\n\nYou can also access Object attributes with `.`, if you are using objects as arguments:\n\nts\n\n```\ntest.each`\na               | b      | expected\n${{ val: 1 }}   | ${'b'} | ${'1b'}\n${{ val: 2 }}   | ${'b'} | ${'2b'}\n${{ val: 3 }}   | ${'b'} | ${'3b'}\n`('add($a.val, $b) -> $expected', ({ a, b, expected }) => {\n  expect(a.val + b).toBe(expected)\n})\n\n// this will return\n// ✓ add(1, b) -> 1b\n// ✓ add(2, b) -> 2b\n// ✓ add(3, b) -> 3b\n```\n\nStarting from Vitest 0.25.3, you can also use template string table.\n\n*   First row should be column names, separated by `|`;\n*   One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n\nts\n\n```\ntest.each`\n  a               | b      | expected\n  ${1}            | ${1}   | ${2}\n  ${'a'}          | ${'b'} | ${'ab'}\n  ${[]}           | ${'b'} | ${'b'}\n  ${{}}           | ${'b'} | ${'[object Object]b'}\n  ${{ asd: 1 }}   | ${'b'} | ${'[object Object]b'}\n`('returns $expected when $a is added $b', ({ a, b, expected }) => {\n  expect(a + b).toBe(expected)\n})\n```\n\nTIP\n\nVitest processes `$values` with Chai `format` method. If the value is too truncated, you can increase [chaiConfig.truncateThreshold](https://vitest.dev/config/#chaiconfig-truncatethreshold) in your config file.\n\nWARNING\n\nYou cannot use this syntax, when using Vitest as [type checker](https://vitest.dev/guide/testing-types).\n\n### test.for [​](#test-for)\n\n*   **Alias:** `it.for`\n\nAlternative of `test.each` to provide [`TestContext`](https://vitest.dev/guide/test-context).\n\nThe difference from `test.each` is how array case is provided in the arguments. Other non array case (including template string usage) works exactly same.\n\nts\n\n```\n// `each` spreads array case\ntest.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('add(%i, %i) -> %i', (a, b, expected) => { \n  expect(a + b).toBe(expected)\n})\n\n// `for` doesn't spread array case\ntest.for([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('add(%i, %i) -> %i', ([a, b, expected]) => { \n  expect(a + b).toBe(expected)\n})\n```\n\n2nd argument is [`TestContext`](https://vitest.dev/guide/test-context) and it can be used for concurrent snapshot, for example,\n\nts\n\n```\ntest.concurrent.for([\n  [1, 1],\n  [1, 2],\n  [2, 1],\n])('add(%i, %i)', ([a, b], { expect }) => {\n  expect(a + b).matchSnapshot()\n})\n```\n\n## bench [​](#bench)\n\n*   **Type:** `(name: string | Function, fn: BenchFunction, options?: BenchOptions) => void`\n\n`bench` defines a benchmark. In Vitest terms benchmark is a function that defines a series of operations. Vitest runs this function multiple times to display different performance results.\n\nVitest uses [`tinybench`](https://github.com/tinylibs/tinybench) library under the hood, inheriting all its options that can be used as a third argument.\n\nts\n\n```\nimport { bench } from 'vitest'\n\nbench('normal sorting', () => {\n  const x = [1, 5, 4, 2, 3]\n  x.sort((a, b) => {\n    return a - b\n  })\n}, { time: 1000 })\n```\n\nts\n\n```\nexport interface Options {\n  /**\n   * time needed for running a benchmark task (milliseconds)\n   * @default 500\n   */\n  time?: number\n\n  /**\n   * number of times that a task should run if even the time option is finished\n   * @default 10\n   */\n  iterations?: number\n\n  /**\n   * function to get the current timestamp in milliseconds\n   */\n  now?: () => number\n\n  /**\n   * An AbortSignal for aborting the benchmark\n   */\n  signal?: AbortSignal\n\n  /**\n   * warmup time (milliseconds)\n   * @default 100ms\n   */\n  warmupTime?: number\n\n  /**\n   * warmup iterations\n   * @default 5\n   */\n  warmupIterations?: number\n\n  /**\n   * setup function to run before each benchmark task (cycle)\n   */\n  setup?: Hook\n\n  /**\n   * teardown function to run after each benchmark task (cycle)\n   */\n  teardown?: Hook\n}\n```\n\n### bench.skip [​](#bench-skip)\n\n*   **Type:** `(name: string | Function, fn: BenchFunction, options?: BenchOptions) => void`\n\nYou can use `bench.skip` syntax to skip running certain benchmarks.\n\nts\n\n```\nimport { bench } from 'vitest'\n\nbench.skip('normal sorting', () => {\n  const x = [1, 5, 4, 2, 3]\n  x.sort((a, b) => {\n    return a - b\n  })\n})\n```\n\n### bench.only [​](#bench-only)\n\n*   **Type:** `(name: string | Function, fn: BenchFunction, options?: BenchOptions) => void`\n\nUse `bench.only` to only run certain benchmarks in a given suite. This is useful when debugging.\n\nts\n\n```\nimport { bench } from 'vitest'\n\nbench.only('normal sorting', () => {\n  const x = [1, 5, 4, 2, 3]\n  x.sort((a, b) => {\n    return a - b\n  })\n})\n```\n\n### bench.todo [​](#bench-todo)\n\n*   **Type:** `(name: string | Function) => void`\n\nUse `bench.todo` to stub benchmarks to be implemented later.\n\nts\n\n```\nimport { bench } from 'vitest'\n\nbench.todo('unimplemented test')\n```\n\n## describe [​](#describe)\n\nWhen you use `test` or `bench` in the top level of file, they are collected as part of the implicit suite for it. Using `describe` you can define a new suite in the current context, as a set of related tests or benchmarks and other nested suites. A suite lets you organize your tests and benchmarks so reports are more clear.\n\nts\n\n```\n// basic.spec.ts\n// organizing tests\n\nimport { describe, expect, test } from 'vitest'\n\nconst person = {\n  isActive: true,\n  age: 32,\n}\n\ndescribe('person', () => {\n  test('person is defined', () => {\n    expect(person).toBeDefined()\n  })\n\n  test('is active', () => {\n    expect(person.isActive).toBeTruthy()\n  })\n\n  test('age limit', () => {\n    expect(person.age).toBeLessThanOrEqual(32)\n  })\n})\n```\n\nts\n\n```\n// basic.bench.ts\n// organizing benchmarks\n\nimport { bench, describe } from 'vitest'\n\ndescribe('sort', () => {\n  bench('normal', () => {\n    const x = [1, 5, 4, 2, 3]\n    x.sort((a, b) => {\n      return a - b\n    })\n  })\n\n  bench('reverse', () => {\n    const x = [1, 5, 4, 2, 3]\n    x.reverse().sort((a, b) => {\n      return a - b\n    })\n  })\n})\n```\n\nYou can also nest describe blocks if you have a hierarchy of tests or benchmarks:\n\nts\n\n```\nimport { describe, expect, test } from 'vitest'\n\nfunction numberToCurrency(value: number | string) {\n  if (typeof value !== 'number') {\n    throw new TypeError('Value must be a number')\n  }\n\n  return value.toFixed(2).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n}\n\ndescribe('numberToCurrency', () => {\n  describe('given an invalid number', () => {\n    test('composed of non-numbers to throw error', () => {\n      expect(() => numberToCurrency('abc')).toThrowError()\n    })\n  })\n\n  describe('given a valid number', () => {\n    test('returns the correct currency format', () => {\n      expect(numberToCurrency(10000)).toBe('10,000.00')\n    })\n  })\n})\n```\n\n### describe.skip [​](#describe-skip)\n\n*   **Alias:** `suite.skip`\n\nUse `describe.skip` in a suite to avoid running a particular describe block.\n\nts\n\n```\nimport { assert, describe, test } from 'vitest'\n\ndescribe.skip('skipped suite', () => {\n  test('sqrt', () => {\n    // Suite skipped, no error\n    assert.equal(Math.sqrt(4), 3)\n  })\n})\n```\n\n### describe.skipIf [​](#describe-skipif)\n\n*   **Alias:** `suite.skipIf`\n\nIn some cases, you might run suites multiple times with different environments, and some of the suites might be environment-specific. Instead of wrapping the suite with `if`, you can use `describe.skipIf` to skip the suite whenever the condition is truthy.\n\nts\n\n```\nimport { describe, test } from 'vitest'\n\nconst isDev = process.env.NODE_ENV === 'development'\n\ndescribe.skipIf(isDev)('prod only test suite', () => {\n  // this test suite only runs in production\n})\n```\n\nWARNING\n\nYou cannot use this syntax when using Vitest as [type checker](https://vitest.dev/guide/testing-types).\n\n### describe.runIf [​](#describe-runif)\n\n*   **Alias:** `suite.runIf`\n\nOpposite of [describe.skipIf](#describe-skipif).\n\nts\n\n```\nimport { assert, describe, test } from 'vitest'\n\nconst isDev = process.env.NODE_ENV === 'development'\n\ndescribe.runIf(isDev)('dev only test suite', () => {\n  // this test suite only runs in development\n})\n```\n\nWARNING\n\nYou cannot use this syntax, when using Vitest as [type checker](https://vitest.dev/guide/testing-types).\n\n### describe.only [​](#describe-only)\n\n*   **Type:** `(name: string | Function, fn: TestFunction, options?: number | TestOptions) => void`\n\nUse `describe.only` to only run certain suites\n\nts\n\n```\n// Only this suite (and others marked with only) are run\ndescribe.only('suite', () => {\n  test('sqrt', () => {\n    assert.equal(Math.sqrt(4), 3)\n  })\n})\n\ndescribe('other suite', () => {\n  // ... will be skipped\n})\n```\n\nSometimes it is very useful to run `only` tests in a certain file, ignoring all other tests from the whole test suite, which pollute the output.\n\nIn order to do that run `vitest` with specific file containing the tests in question.\n\n```\n# vitest interesting.test.ts\n```\n\n### describe.concurrent [​](#describe-concurrent)\n\n*   **Alias:** `suite.concurrent`\n\n`describe.concurrent` runs all inner suites and tests in parallel\n\nts\n\n```\n// All suites and tests within this suite will be run in parallel\ndescribe.concurrent('suite', () => {\n  test('concurrent test 1', async () => { /* ... */ })\n  describe('concurrent suite 2', async () => {\n    test('concurrent test inner 1', async () => { /* ... */ })\n    test('concurrent test inner 2', async () => { /* ... */ })\n  })\n  test.concurrent('concurrent test 3', async () => { /* ... */ })\n})\n```\n\n`.skip`, `.only`, and `.todo` works with concurrent suites. All the following combinations are valid:\n\nts\n\n```\ndescribe.concurrent(/* ... */)\ndescribe.skip.concurrent(/* ... */) // or describe.concurrent.skip(/* ... */)\ndescribe.only.concurrent(/* ... */) // or describe.concurrent.only(/* ... */)\ndescribe.todo.concurrent(/* ... */) // or describe.concurrent.todo(/* ... */)\n```\n\nWhen running concurrent tests, Snapshots and Assertions must use `expect` from the local [Test Context](https://vitest.dev/guide/test-context) to ensure the right test is detected.\n\nts\n\n```\ndescribe.concurrent('suite', () => {\n  test('concurrent test 1', async ({ expect }) => {\n    expect(foo).toMatchSnapshot()\n  })\n  test('concurrent test 2', async ({ expect }) => {\n    expect(foo).toMatchSnapshot()\n  })\n})\n```\n\nWARNING\n\nYou cannot use this syntax, when using Vitest as [type checker](https://vitest.dev/guide/testing-types).\n\n### describe.sequential [​](#describe-sequential)\n\n*   **Alias:** `suite.sequential`\n\n`describe.sequential` in a suite marks every test as sequential. This is useful if you want to run tests in sequence within `describe.concurrent` or with the `--sequence.concurrent` command option.\n\nts\n\n```\ndescribe.concurrent('suite', () => {\n  test('concurrent test 1', async () => { /* ... */ })\n  test('concurrent test 2', async () => { /* ... */ })\n\n  describe.sequential('', () => {\n    test('sequential test 1', async () => { /* ... */ })\n    test('sequential test 2', async () => { /* ... */ })\n  })\n})\n```\n\n### describe.shuffle [​](#describe-shuffle)\n\n*   **Alias:** `suite.shuffle`\n\nVitest provides a way to run all tests in random order via CLI flag [`--sequence.shuffle`](https://vitest.dev/guide/cli) or config option [`sequence.shuffle`](https://vitest.dev/config/#sequence-shuffle), but if you want to have only part of your test suite to run tests in random order, you can mark it with this flag.\n\nts\n\n```\ndescribe.shuffle('suite', () => {\n  test('random test 1', async () => { /* ... */ })\n  test('random test 2', async () => { /* ... */ })\n  test('random test 3', async () => { /* ... */ })\n})\n// order depends on sequence.seed option in config (Date.now() by default)\n```\n\n`.skip`, `.only`, and `.todo` works with random suites.\n\nWARNING\n\nYou cannot use this syntax, when using Vitest as [type checker](https://vitest.dev/guide/testing-types).\n\n### describe.todo [​](#describe-todo)\n\n*   **Alias:** `suite.todo`\n\nUse `describe.todo` to stub suites to be implemented later. An entry will be shown in the report for the tests so you know how many tests you still need to implement.\n\nts\n\n```\n// An entry will be shown in the report for this suite\ndescribe.todo('unimplemented suite')\n```\n\n### describe.each [​](#describe-each)\n\n*   **Alias:** `suite.each`\n\nUse `describe.each` if you have more than one test that depends on the same data.\n\nts\n\n```\ndescribe.each([\n  { a: 1, b: 1, expected: 2 },\n  { a: 1, b: 2, expected: 3 },\n  { a: 2, b: 1, expected: 3 },\n])('describe object add($a, $b)', ({ a, b, expected }) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected)\n  })\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected)\n  })\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected)\n  })\n})\n```\n\nStarting from Vitest 0.25.3, you can also use template string table.\n\n*   First row should be column names, separated by `|`;\n*   One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n\nts\n\n```\ndescribe.each`\n  a               | b      | expected\n  ${1}            | ${1}   | ${2}\n  ${'a'}          | ${'b'} | ${'ab'}\n  ${[]}           | ${'b'} | ${'b'}\n  ${{}}           | ${'b'} | ${'[object Object]b'}\n  ${{ asd: 1 }}   | ${'b'} | ${'[object Object]b'}\n`('describe template string add($a, $b)', ({ a, b, expected }) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected)\n  })\n})\n```\n\nWARNING\n\nYou cannot use this syntax, when using Vitest as [type checker](https://vitest.dev/guide/testing-types).\n\n## Setup and Teardown [​](#setup-and-teardown)\n\nThese functions allow you to hook into the life cycle of tests to avoid repeating setup and teardown code. They apply to the current context: the file if they are used at the top-level or the current suite if they are inside a `describe` block. These hooks are not called, when you are running Vitest as a type checker.\n\n### beforeEach [​](#beforeeach)\n\n*   **Type:** `beforeEach(fn: () => Awaitable<void>, timeout?: number)`\n\nRegister a callback to be called before each of the tests in the current context runs. If the function returns a promise, Vitest waits until the promise resolve before running the test.\n\nOptionally, you can pass a timeout (in milliseconds) defining how long to wait before terminating. The default is 5 seconds.\n\nts\n\n```\nimport { beforeEach } from 'vitest'\n\nbeforeEach(async () => {\n  // Clear mocks and add some testing data after before each test run\n  await stopMocking()\n  await addUser({ name: 'John' })\n})\n```\n\nHere, the `beforeEach` ensures that user is added for each test.\n\n`beforeEach` also accepts an optional cleanup function (equivalent to `afterEach`).\n\nts\n\n```\nimport { beforeEach } from 'vitest'\n\nbeforeEach(async () => {\n  // called once before each test run\n  await prepareSomething()\n\n  // clean up function, called once after each test run\n  return async () => {\n    await resetSomething()\n  }\n})\n```\n\n### afterEach [​](#aftereach)\n\n*   **Type:** `afterEach(fn: () => Awaitable<void>, timeout?: number)`\n\nRegister a callback to be called after each one of the tests in the current context completes. If the function returns a promise, Vitest waits until the promise resolve before continuing.\n\nOptionally, you can provide a timeout (in milliseconds) for specifying how long to wait before terminating. The default is 5 seconds.\n\nts\n\n```\nimport { afterEach } from 'vitest'\n\nafterEach(async () => {\n  await clearTestingData() // clear testing data after each test run\n})\n```\n\nHere, the `afterEach` ensures that testing data is cleared after each test runs.\n\nTIP\n\nVitest 1.3.0 added [`onTestFinished`](#ontestfinished) hook. You can call it during the test execution to cleanup any state after the test has finished running.\n\n### beforeAll [​](#beforeall)\n\n*   **Type:** `beforeAll(fn: () => Awaitable<void>, timeout?: number)`\n\nRegister a callback to be called once before starting to run all tests in the current context. If the function returns a promise, Vitest waits until the promise resolve before running tests.\n\nOptionally, you can provide a timeout (in milliseconds) for specifying how long to wait before terminating. The default is 5 seconds.\n\nts\n\n```\nimport { beforeAll } from 'vitest'\n\nbeforeAll(async () => {\n  await startMocking() // called once before all tests run\n})\n```\n\nHere the `beforeAll` ensures that the mock data is set up before tests run.\n\n`beforeAll` also accepts an optional cleanup function (equivalent to `afterAll`).\n\nts\n\n```\nimport { beforeAll } from 'vitest'\n\nbeforeAll(async () => {\n  // called once before all tests run\n  await startMocking()\n\n  // clean up function, called once after all tests run\n  return async () => {\n    await stopMocking()\n  }\n})\n```\n\n### afterAll [​](#afterall)\n\n*   **Type:** `afterAll(fn: () => Awaitable<void>, timeout?: number)`\n\nRegister a callback to be called once after all tests have run in the current context. If the function returns a promise, Vitest waits until the promise resolve before continuing.\n\nOptionally, you can provide a timeout (in milliseconds) for specifying how long to wait before terminating. The default is 5 seconds.\n\nts\n\n```\nimport { afterAll } from 'vitest'\n\nafterAll(async () => {\n  await stopMocking() // this method is called after all tests run\n})\n```\n\nHere the `afterAll` ensures that `stopMocking` method is called after all tests run.\n\n## Test Hooks [​](#test-hooks)\n\nVitest provides a few hooks that you can call _during_ the test execution to cleanup the state when the test has finished runnning.\n\nWARNING\n\nThese hooks will throw an error if they are called outside of the test body.\n\n### onTestFinished [​](#ontestfinished)\n\nThis hook is always called after the test has finished running. It is called after `afterEach` hooks since they can influence the test result. It receives a `TaskResult` object with the current test result.\n\nts\n\n```\nimport { onTestFinished, test } from 'vitest'\n\ntest('performs a query', () => {\n  const db = connectDb()\n  onTestFinished(() => db.close())\n  db.query('SELECT * FROM users')\n})\n```\n\nWARNING\n\nIf you are running tests concurrently, you should always use `onTestFinished` hook from the test context since Vitest doesn't track concurrent tests in global hooks:\n\nts\n\n```\nimport { test } from 'vitest'\n\ntest.concurrent('performs a query', ({ onTestFinished }) => {\n  const db = connectDb()\n  onTestFinished(() => db.close())\n  db.query('SELECT * FROM users')\n})\n```\n\nThis hook is particularly useful when creating reusable logic:\n\nts\n\n```\n// this can be in a separate file\nfunction getTestDb() {\n  const db = connectMockedDb()\n  onTestFinished(() => db.close())\n  return db\n}\n\ntest('performs a user query', async () => {\n  const db = getTestDb()\n  expect(\n    await db.query('SELECT * from users').perform()\n  ).toEqual([])\n})\n\ntest('performs an organization query', async () => {\n  const db = getTestDb()\n  expect(\n    await db.query('SELECT * from organizations').perform()\n  ).toEqual([])\n})\n```\n\nTIP\n\nThis hook is always called in reverse order and is not affected by [`sequence.hooks`](https://vitest.dev/config/#sequence-hooks) option.\n\n### onTestFailed [​](#ontestfailed)\n\nThis hook is called only after the test has failed. It is called after `afterEach` hooks since they can influence the test result. It receives a `TaskResult` object with the current test result. This hook is useful for debugging.\n\nts\n\n```\nimport { onTestFailed, test } from 'vitest'\n\ntest('performs a query', () => {\n  const db = connectDb()\n  onTestFailed((e) => {\n    console.log(e.result.errors)\n  })\n  db.query('SELECT * FROM users')\n})\n```\n\nWARNING\n\nIf you are running tests concurrently, you should always use `onTestFailed` hook from the test context since Vitest doesn't track concurrent tests in global hooks:\n\nts\n\n```\nimport { test } from 'vitest'\n\ntest.concurrent('performs a query', ({ onTestFailed }) => {\n  const db = connectDb()\n  onTestFailed((result) => {\n    console.log(result.errors)\n  })\n  db.query('SELECT * FROM users')\n})\n```",
    "title": "Test API Reference | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/config/",
    "markdown": "# Configuring Vitest | Vitest\n\nTo create a Vitest configuration file, follow [the guide](https://vitest.dev/config/file). Make sure you understand how Vitest config resolution works before proceeding.\n\nWARNING\n\n_All_ listed options here are located on a `test` property inside the config:\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    exclude: [],\n  },\n})\n```\n\nTIP\n\nIn addition to the following options, you can also use any configuration option from [Vite](https://vitejs.dev/config/). For example, `define` to define global variables, or `resolve.alias` to define aliases.\n\nAll configuration options that are not supported inside a [workspace](https://vitest.dev/guide/workspace) project config have \\* sign next to them.\n\n### include [​](#include)\n\n*   **Type:** `string[]`\n*   **Default:** `['**/*.{test,spec}.?(c|m)[jt]s?(x)']`\n*   **CLI:** `vitest [...include]`, `vitest **/*.test.js`\n\nA list of glob patterns that match your test files.\n\nNOTE\n\nWhen using coverage, Vitest automatically adds test files `include` patterns to coverage's default `exclude` patterns. See [`coverage.exclude`](#coverage-exclude).\n\n### exclude [​](#exclude)\n\n*   **Type:** `string[]`\n*   **Default:** `['**/node_modules/**', '**/dist/**', '**/cypress/**', '**/.{idea,git,cache,output,temp}/**', '**/{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress,tsup,build}.config.*']`\n*   **CLI:** `vitest --exclude \"**/excluded-file\"`\n\nA list of glob patterns that should be excluded from your test files.\n\nWARNING\n\nThis option does not affect coverage. If you need to remove certain files from the coverage report, use [`coverage.exclude`](#coverage-exclude).\n\nThis is the only option that doesn't override your configuration if you provide it with a CLI flag. All glob patterns added via `--exclude` flag will be added to the config's `exclude`.\n\n### includeSource [​](#includesource)\n\n*   **Type:** `string[]`\n*   **Default:** `[]`\n\nInclude globs for in-source test files.\n\nWhen defined, Vitest will run all matched files with `import.meta.vitest` inside.\n\n### server [​](#server)\n\n*   **Type:** `{ sourcemap?, deps?, ... }`\n\nVite-Node server options.\n\n#### server.sourcemap [​](#server-sourcemap)\n\n*   **Type:** `'inline' | boolean`\n*   **Default:** `'inline'`\n\nInject inline source map to modules.\n\n#### server.debug [​](#server-debug)\n\n*   **Type:** `{ dumpModules?, loadDumppedModules? }`\n\nVite-Node debugger options.\n\n#### server.debug.dumpModules [​](#server-debug-dumpmodules)\n\n*   **Type:** `boolean | string`\n\nDump the transformed module to filesystem. Passing a string will dump to the specified path.\n\n#### server.debug.loadDumppedModules [​](#server-debug-loaddumppedmodules)\n\n*   **Type:** `boolean`\n\nRead dumped module from filesystem whenever exists. Useful for debugging by modifying the dump result from the filesystem.\n\n#### server.deps [​](#server-deps)\n\n*   **Type:** `{ external?, inline?, ... }`\n\nHandling for dependencies resolution.\n\n#### server.deps.external [​](#server-deps-external)\n\n*   **Type:** `(string | RegExp)[]`\n*   **Default:** `[/\\/node_modules\\//]`\n\nExternalize means that Vite will bypass the package to the native Node. Externalized dependencies will not be applied to Vite's transformers and resolvers, so they do not support HMR on reload. By default, all packages inside `node_modules` are externalized.\n\nThese options support package names as they are written in `node_modules` or specified inside [`deps.moduleDirectories`](#deps-moduledirectories). For example, package `@company/some-name` located inside `packages/some-name` should be specified as `some-name`, and `packages` should be included in `deps.moduleDirectories`. Basically, Vitest always checks the file path, not the actual package name.\n\nIf regexp is used, Vitest calls it on the _file path_, not the package name.\n\n#### server.deps.inline [​](#server-deps-inline)\n\n*   **Type:** `(string | RegExp)[] | true`\n*   **Default:** `[]`\n\nVite will process inlined modules. This could be helpful to handle packages that ship `.js` in ESM format (that Node can't handle).\n\nIf `true`, every dependency will be inlined. All dependencies, specified in [`ssr.noExternal`](https://vitejs.dev/guide/ssr.html#ssr-externals) will be inlined by default.\n\n#### server.deps.fallbackCJS [​](#server-deps-fallbackcjs)\n\n*   **Type** `boolean`\n*   **Default:** `false`\n\nWhen a dependency is a valid ESM package, try to guess the cjs version based on the path. This might be helpful, if a dependency has the wrong ESM file.\n\nThis might potentially cause some misalignment if a package has different logic in ESM and CJS mode.\n\n#### server.deps.cacheDir [​](#server-deps-cachedir)\n\n*   **Type** `string`\n*   **Default**: `'node_modules/.vite'`\n\nDirectory to save cache files.\n\n### deps [​](#deps)\n\n*   **Type:** `{ optimizer?, ... }`\n\nHandling for dependencies resolution.\n\n#### deps.optimizer [​](#deps-optimizer)\n\n*   **Type:** `{ ssr?, web? }`\n*   **See also:** [Dep Optimization Options](https://vitejs.dev/config/dep-optimization-options.html)\n\nEnable dependency optimization. If you have a lot of tests, this might improve their performance.\n\nWhen Vitest encounters the external library listed in `include`, it will be bundled into a single file using esbuild and imported as a whole module. This is good for several reasons:\n\n*   Importing packages with a lot of imports is expensive. By bundling them into one file we can save a lot of time\n*   Importing UI libraries is expensive because they are not meant to run inside Node.js\n*   Your `alias` configuration is now respected inside bundled packages\n*   Code in your tests is running closer to how it's running in the browser\n\nBe aware that only packages in `deps.optimizer?.[mode].include` option are bundled (some plugins populate this automatically, like Svelte). You can read more about available options in [Vite](https://vitejs.dev/config/dep-optimization-options.html) docs (Vitest doesn't support `disable` and `noDiscovery` options). By default, Vitest uses `optimizer.web` for `jsdom` and `happy-dom` environments, and `optimizer.ssr` for `node` and `edge` environments, but it is configurable by [`transformMode`](#testtransformmode).\n\nThis options also inherits your `optimizeDeps` configuration (for web Vitest will extend `optimizeDeps`, for ssr - `ssr.optimizeDeps`). If you redefine `include`/`exclude` option in `deps.optimizer` it will extend your `optimizeDeps` when running tests. Vitest automatically removes the same options from `include`, if they are listed in `exclude`.\n\nTIP\n\nYou will not be able to edit your `node_modules` code for debugging, since the code is actually located in your `cacheDir` or `test.cache.dir` directory. If you want to debug with `console.log` statements, edit it directly or force rebundling with `deps.optimizer?.[mode].force` option.\n\n#### deps.optimizer.{mode}.enabled [​](#deps-optimizer-mode-enabled)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n\nEnable dependency optimization.\n\n#### deps.web [​](#deps-web)\n\n*   **Type:** `{ transformAssets?, ... }`\n\nOptions that are applied to external files when transform mode is set to `web`. By default, `jsdom` and `happy-dom` use `web` mode, while `node` and `edge` environments use `ssr` transform mode, so these options will have no affect on files inside those environments.\n\nUsually, files inside `node_modules` are externalized, but these options also affect files in [`server.deps.external`](#server-deps-external).\n\n#### deps.web.transformAssets [​](#deps-web-transformassets)\n\n*   **Type:** `boolean`\n*   **Default:** `true`\n\nShould Vitest process assets (.png, .svg, .jpg, etc) files and resolve them like Vite does in the browser.\n\nThis module will have a default export equal to the path to the asset, if no query is specified.\n\nWARNING\n\nAt the moment, this option only works with [`vmThreads`](#vmthreads) and [`vmForks`](#vmforks) pools.\n\n#### deps.web.transformCss [​](#deps-web-transformcss)\n\n*   **Type:** `boolean`\n*   **Default:** `true`\n\nShould Vitest process CSS (.css, .scss, .sass, etc) files and resolve them like Vite does in the browser.\n\nIf CSS files are disabled with [`css`](#css) options, this option will just silence `ERR_UNKNOWN_FILE_EXTENSION` errors.\n\nWARNING\n\nAt the moment, this option only works with [`vmThreads`](#vmthreads) and [`vmForks`](#vmforks) pools.\n\n#### deps.web.transformGlobPattern [​](#deps-web-transformglobpattern)\n\n*   **Type:** `RegExp | RegExp[]`\n*   **Default:** `[]`\n\nRegexp pattern to match external files that should be transformed.\n\nBy default, files inside `node_modules` are externalized and not transformed, unless it's CSS or an asset, and corresponding option is not disabled.\n\nWARNING\n\nAt the moment, this option only works with [`vmThreads`](#vmthreads) and [`vmForks`](#vmforks) pools.\n\n#### deps.interopDefault [​](#deps-interopdefault)\n\n*   **Type:** `boolean`\n*   **Default:** `true`\n\nInterpret CJS module's default as named exports. Some dependencies only bundle CJS modules and don't use named exports that Node.js can statically analyze when a package is imported using `import` syntax instead of `require`. When importing such dependencies in Node environment using named exports, you will see this error:\n\n```\nimport { read } from 'fs-jetpack';\n         ^^^^\nSyntaxError: Named export 'read' not found. The requested module 'fs-jetpack' is a CommonJS module, which may not support all module.exports as named exports.\nCommonJS modules can always be imported via the default export.\n```\n\nVitest doesn't do static analysis, and cannot fail before your running code, so you will most likely see this error when running tests, if this feature is disabled:\n\n```\nTypeError: createAsyncThunk is not a function\nTypeError: default is not a function\n```\n\nBy default, Vitest assumes you are using a bundler to bypass this and will not fail, but you can disable this behaviour manually, if you code is not processed.\n\n#### deps.moduleDirectories [​](#deps-moduledirectories)\n\n*   **Type:** `string[]`\n*   **Default**: `['node_modules']`\n\nA list of directories that should be treated as module directories. This config option affects the behavior of [`vi.mock`](https://vitest.dev/api/vi#vi-mock): when no factory is provided and the path of what you are mocking matches one of the `moduleDirectories` values, Vitest will try to resolve the mock by looking for a `__mocks__` folder in the [root](#root) of the project.\n\nThis option will also affect if a file should be treated as a module when externalizing dependencies. By default, Vitest imports external modules with native Node.js bypassing Vite transformation step.\n\nSetting this option will _override_ the default, if you wish to still search `node_modules` for packages include it along with any other options:\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    deps: {\n      moduleDirectories: ['node_modules', path.resolve('../../packages')],\n    }\n  },\n})\n```\n\n### runner [​](#runner)\n\n*   **Type**: `VitestRunnerConstructor`\n*   **Default**: `node`, when running tests, or `benchmark`, when running benchmarks\n\nPath to a custom test runner. This is an advanced feature and should be used with custom library runners. You can read more about it in [the documentation](https://vitest.dev/advanced/runner).\n\n### benchmark [​](#benchmark)\n\n*   **Type:** `{ include?, exclude?, ... }`\n\nOptions used when running `vitest bench`.\n\n#### benchmark.include [​](#benchmark-include)\n\n*   **Type:** `string[]`\n*   **Default:** `['**/*.{bench,benchmark}.?(c|m)[jt]s?(x)']`\n\nInclude globs for benchmark test files\n\n#### benchmark.exclude [​](#benchmark-exclude)\n\n*   **Type:** `string[]`\n*   **Default:** `['node_modules', 'dist', '.idea', '.git', '.cache']`\n\nExclude globs for benchmark test files\n\n#### benchmark.includeSource [​](#benchmark-includesource)\n\n*   **Type:** `string[]`\n*   **Default:** `[]`\n\nInclude globs for in-source benchmark test files. This option is similar to [`includeSource`](#includesource).\n\nWhen defined, Vitest will run all matched files with `import.meta.vitest` inside.\n\n#### benchmark.reporters [​](#benchmark-reporters)\n\n*   **Type:** `Arrayable<BenchmarkBuiltinReporters | Reporter>`\n*   **Default:** `'default'`\n\nCustom reporter for output. Can contain one or more built-in report names, reporter instances, and/or paths to custom reporters.\n\n#### benchmark.outputFile [​](#benchmark-outputfile)\n\n*   **Type:** `string | Record<string, string>`\n\nWrite benchmark results to a file when the `--reporter=json` option is also specified. By providing an object instead of a string you can define individual outputs when using multiple reporters.\n\nTo provide object via CLI command, use the following syntax: `--outputFile.json=./path --outputFile.junit=./other-path`.\n\n#### benchmark.outputJson [​](#benchmark-outputJson)\n\n*   **Type:** `string | undefined`\n*   **Default:** `undefined`\n\nA file path to store the benchmark result, which can be used for `--compare` option later.\n\nFor example:\n\nsh\n\n```\n# save main branch's result\ngit checkout main\nvitest bench --outputJson main.json\n\n# change a branch and compare against main\ngit checkout feature\nvitest bench --compare main.json\n```\n\n#### benchmark.compare [​](#benchmark-compare)\n\n*   **Type:** `string | undefined`\n*   **Default:** `undefined`\n\nA file path to a previous benchmark result to compare against current runs.\n\n### alias [​](#alias)\n\n*   **Type:** `Record<string, string> | Array<{ find: string | RegExp, replacement: string, customResolver?: ResolverFunction | ResolverObject }>`\n\nDefine custom aliases when running inside tests. They will be merged with aliases from `resolve.alias`.\n\nWARNING\n\nVitest uses Vite SSR primitives to run tests which has [certain pitfalls](https://vitejs.dev/guide/ssr.html#ssr-externals).\n\n1.  Aliases affect only modules imported directly with an `import` keyword by an [inlined](#server-deps-inline) module (all source code is inlined by default).\n2.  Vitest does not support aliasing `require` calls.\n3.  If you are aliasing an external dependency (e.g., `react` -> `preact`), you may want to alias the actual `node_modules` packages instead to make it work for externalized dependencies. Both [Yarn](https://classic.yarnpkg.com/en/docs/cli/add/#toc-yarn-add-alias) and [pnpm](https://pnpm.io/aliases/) support aliasing via the `npm:` prefix.\n\n### globals [​](#globals)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n*   **CLI:** `--globals`, `--globals=false`\n\nBy default, `vitest` does not provide global APIs for explicitness. If you prefer to use the APIs globally like Jest, you can pass the `--globals` option to CLI or add `globals: true` in the config.\n\nts\n\n```\n// vitest.config.ts\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    globals: true,\n  },\n})\n```\n\nTo get TypeScript working with the global APIs, add `vitest/globals` to the `types` field in your `tsconfig.json`\n\njson\n\n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"types\": [\"vitest/globals\"]\n  }\n}\n```\n\nIf you are already using [`unplugin-auto-import`](https://github.com/antfu/unplugin-auto-import) in your project, you can also use it directly for auto importing those APIs.\n\nts\n\n```\n// vitest.config.ts\nimport { defineConfig } from 'vitest/config'\nimport AutoImport from 'unplugin-auto-import/vite'\n\nexport default defineConfig({\n  plugins: [\n    AutoImport({\n      imports: ['vitest'],\n      dts: true, // generate TypeScript declaration\n    }),\n  ],\n})\n```\n\n### environment [​](#environment)\n\n*   **Type:** `'node' | 'jsdom' | 'happy-dom' | 'edge-runtime' | string`\n*   **Default:** `'node'`\n*   **CLI:** `--environment=<env>`\n\nThe environment that will be used for testing. The default environment in Vitest is a Node.js environment. If you are building a web application, you can use browser-like environment through either [`jsdom`](https://github.com/jsdom/jsdom) or [`happy-dom`](https://github.com/capricorn86/happy-dom) instead. If you are building edge functions, you can use [`edge-runtime`](https://edge-runtime.vercel.app/packages/vm) environment\n\nTIP\n\nYou can also use [Browser Mode](https://vitest.dev/guide/browser/) to run integration or unit tests in the browser without mocking the environment.\n\nBy adding a `@vitest-environment` docblock or comment at the top of the file, you can specify another environment to be used for all tests in that file:\n\nDocblock style:\n\njs\n\n```\n/**\n * @vitest-environment jsdom\n */\n\ntest('use jsdom in this test file', () => {\n  const element = document.createElement('div')\n  expect(element).not.toBeNull()\n})\n```\n\nComment style:\n\njs\n\n```\n// @vitest-environment happy-dom\n\ntest('use happy-dom in this test file', () => {\n  const element = document.createElement('div')\n  expect(element).not.toBeNull()\n})\n```\n\nFor compatibility with Jest, there is also a `@jest-environment`:\n\njs\n\n```\n/**\n * @jest-environment jsdom\n */\n\ntest('use jsdom in this test file', () => {\n  const element = document.createElement('div')\n  expect(element).not.toBeNull()\n})\n```\n\nIf you are running Vitest with [`--isolate=false`](#isolate) flag, your tests will be run in this order: `node`, `jsdom`, `happy-dom`, `edge-runtime`, `custom environments`. Meaning, that every test with the same environment is grouped, but is still running sequentially.\n\nStarting from 0.23.0, you can also define custom environment. When non-builtin environment is used, Vitest will try to load package `vitest-environment-${name}`. That package should export an object with the shape of `Environment`:\n\nts\n\n```\nimport type { Environment } from 'vitest'\n\nexport default <Environment>{\n  name: 'custom',\n  transformMode: 'ssr',\n  setup() {\n    // custom setup\n    return {\n      teardown() {\n        // called after all tests with this env have been run\n      }\n    }\n  }\n}\n```\n\nVitest also exposes `builtinEnvironments` through `vitest/environments` entry, in case you just want to extend it. You can read more about extending environments in [our guide](https://vitest.dev/guide/environment).\n\nTIP\n\njsdom environment exposes `jsdom` global variable equal to the current [JSDOM](https://github.com/jsdom/jsdom) instance. If you want TypeScript to recognize it, you can add `vitest/jsdom` to your `tsconfig.json` when you use this environment:\n\njson\n\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\"vitest/jsdom\"]\n  }\n}\n```\n\n### environmentOptions [​](#environmentoptions)\n\n*   **Type:** `Record<'jsdom' | string, unknown>`\n*   **Default:** `{}`\n\nThese options are passed down to `setup` method of current [`environment`](#environment). By default, you can configure only JSDOM options, if you are using it as your test environment.\n\n### environmentMatchGlobs [​](#environmentmatchglobs)\n\n*   **Type:** `[string, EnvironmentName][]`\n*   **Default:** `[]`\n\nAutomatically assign environment based on globs. The first match will be used.\n\nFor example:\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    environmentMatchGlobs: [\n      // all tests in tests/dom will run in jsdom\n      ['tests/dom/**', 'jsdom'],\n      // all tests in tests/ with .edge.test.ts will run in edge-runtime\n      ['**\\/*.edge.test.ts', 'edge-runtime'],\n      // ...\n    ]\n  }\n})\n```\n\n### poolMatchGlobs [​](#poolmatchglobs)\n\n*   **Type:** `[string, 'threads' | 'forks' | 'vmThreads' | 'vmForks' | 'typescript'][]`\n*   **Default:** `[]`\n\nAutomatically assign pool in which tests will run based on globs. The first match will be used.\n\nFor example:\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    poolMatchGlobs: [\n      // all tests in \"worker-specific\" directory will run inside a worker as if you enabled `--pool=threads` for them,\n      ['**/tests/worker-specific/**', 'threads'],\n      // run all tests in \"browser\" directory in an actual browser\n      ['**/tests/browser/**', 'browser'],\n      // all other tests will run based on \"browser.enabled\" and \"threads\" options, if you didn't specify other globs\n      // ...\n    ]\n  }\n})\n```\n\n### update \\* [​](#update)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n*   **CLI:** `-u`, `--update`, `--update=false`\n\nUpdate snapshot files. This will update all changed snapshots and delete obsolete ones.\n\n### watch \\* [​](#watch)\n\n*   **Type:** `boolean`\n*   **Default:** `!process.env.CI`\n*   **CLI:** `-w`, `--watch`, `--watch=false`\n\nEnable watch mode\n\n### root [​](#root)\n\n*   **Type:** `string`\n*   **CLI:** `-r <path>`, `--root=<path>`\n\nProject root\n\n### reporters \\* [​](#reporters)\n\n*   **Type:** `Reporter | Reporter[]`\n*   **Default:** `'default'`\n*   **CLI:** `--reporter=<name>`, `--reporter=<name1> --reporter=<name2>`\n\nCustom [reporters](https://vitest.dev/guide/reporters) for output. Reporters can be [a Reporter instance](https://github.com/vitest-dev/vitest/blob/main/packages/vitest/src/types/reporter.ts), a string to select built-in reporters, or a path to a custom implementation (e.g. `'./path/to/reporter.ts'`, `'@scope/reporter'`).\n\n### outputFile \\* [​](#outputfile)\n\n*   **Type:** `string | Record<string, string>`\n*   **CLI:** `--outputFile=<path>`, `--outputFile.json=./path`\n\nWrite test results to a file when the `--reporter=json`, `--reporter=html` or `--reporter=junit` option is also specified. By providing an object instead of a string you can define individual outputs when using multiple reporters.\n\n### pool \\* [​](#pool)\n\n*   **Type:** `'threads' | 'forks' | 'vmThreads' | 'vmForks'`\n*   **Default:** `'forks'`\n*   **CLI:** `--pool=threads`\n\nPool used to run tests in.\n\n#### threads \\* [​](#threads)\n\nEnable multi-threading using [tinypool](https://github.com/tinylibs/tinypool) (a lightweight fork of [Piscina](https://github.com/piscinajs/piscina)). When using threads you are unable to use process related APIs such as `process.chdir()`. Some libraries written in native languages, such as Prisma, `bcrypt` and `canvas`, have problems when running in multiple threads and run into segfaults. In these cases it is advised to use `forks` pool instead.\n\n#### forks \\* [​](#forks)\n\nSimilar as `threads` pool but uses `child_process` instead of `worker_threads` via [tinypool](https://github.com/tinylibs/tinypool). Communication between tests and main process is not as fast as with `threads` pool. Process related APIs such as `process.chdir()` are available in `forks` pool.\n\n#### vmThreads \\* [​](#vmthreads)\n\nRun tests using [VM context](https://nodejs.org/api/vm.html) (inside a sandboxed environment) in a `threads` pool.\n\nThis makes tests run faster, but the VM module is unstable when running [ESM code](https://github.com/nodejs/node/issues/37648). Your tests will [leak memory](https://github.com/nodejs/node/issues/33439) - to battle that, consider manually editing [`poolOptions.vmThreads.memoryLimit`](#pooloptions-vmthreads-memorylimit) value.\n\nWARNING\n\nRunning code in a sandbox has some advantages (faster tests), but also comes with a number of disadvantages.\n\n*   The globals within native modules, such as (`fs`, `path`, etc), differ from the globals present in your test environment. As a result, any error thrown by these native modules will reference a different Error constructor compared to the one used in your code:\n\nts\n\n```\ntry {\n  fs.writeFileSync('/doesnt exist')\n}\ncatch (err) {\n  console.log(err instanceof Error) // false\n}\n```\n\n*   Importing ES modules caches them indefinitely which introduces memory leaks if you have a lot of contexts (test files). There is no API in Node.js that clears that cache.\n*   Accessing globals [takes longer](https://github.com/nodejs/node/issues/31658) in a sandbox environment.\n\nPlease, be aware of these issues when using this option. Vitest team cannot fix any of the issues on our side.\n\n#### vmForks \\* [​](#vmforks)\n\nSimilar as `vmThreads` pool but uses `child_process` instead of `worker_threads` via [tinypool](https://github.com/tinylibs/tinypool). Communication between tests and the main process is not as fast as with `vmThreads` pool. Process related APIs such as `process.chdir()` are available in `vmForks` pool. Please be aware that this pool has the same pitfalls listed in `vmThreads`.\n\n### poolOptions \\* [​](#pooloptions)\n\n*   **Type:** `Record<'threads' | 'forks' | 'vmThreads' | 'vmForks', {}>`\n*   **Default:** `{}`\n\n#### poolOptions.threads [​](#pooloptions-threads)\n\nOptions for `threads` pool.\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    poolOptions: {\n      threads: {\n        // Threads related options here\n      }\n    }\n  }\n})\n```\n\n##### poolOptions.threads.maxThreads \\* [​](#pooloptions-threads-maxthreads)\n\n*   **Type:** `number | string`\n*   **Default:** _available CPUs_\n\nMaximum number or percentage of threads. You can also use `VITEST_MAX_THREADS` environment variable.\n\n##### poolOptions.threads.minThreads \\* [​](#pooloptions-threads-minthreads)\n\n*   **Type:** `number | string`\n*   **Default:** _available CPUs_\n\nMinimum number or percentage of threads. You can also use `VITEST_MIN_THREADS` environment variable.\n\n##### poolOptions.threads.singleThread [​](#pooloptions-threads-singlethread)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n\nRun all tests with the same environment inside a single worker thread. This will disable built-in module isolation (your source code or [inlined](#server-deps-inline) code will still be reevaluated for each test), but can improve test performance.\n\nWARNING\n\nEven though this option will force tests to run one after another, this option is different from Jest's `--runInBand`. Vitest uses workers not only for running tests in parallel, but also to provide isolation. By disabling this option, your tests will run sequentially, but in the same global context, so you must provide isolation yourself.\n\nThis might cause all sorts of issues, if you are relying on global state (frontend frameworks usually do) or your code relies on environment to be defined separately for each test. But can be a speed boost for your tests (up to 3 times faster), that don't necessarily rely on global state or can easily bypass that.\n\n##### poolOptions.threads.useAtomics \\* [​](#pooloptions-threads-useatomics)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n\nUse Atomics to synchronize threads.\n\nThis can improve performance in some cases, but might cause segfault in older Node versions.\n\n##### poolOptions.threads.isolate [​](#pooloptions-threads-isolate)\n\n*   **Type:** `boolean`\n*   **Default:** `true`\n\nIsolate environment for each test file.\n\n##### poolOptions.threads.execArgv \\* [​](#pooloptions-threads-execargv)\n\n*   **Type:** `string[]`\n*   **Default:** `[]`\n\nPass additional arguments to `node` in the threads. See [Command-line API | Node.js](https://nodejs.org/docs/latest/api/cli.html) for more information.\n\n#### poolOptions.forks [​](#pooloptions-forks)\n\nOptions for `forks` pool.\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    poolOptions: {\n      forks: {\n        // Forks related options here\n      }\n    }\n  }\n})\n```\n\n##### poolOptions.forks.maxForks \\* [​](#pooloptions-forks-maxforks)\n\n*   **Type:** `number | string`\n*   **Default:** _available CPUs_\n\nMaximum number or percentage of forks.\n\n##### poolOptions.forks.minForks \\* [​](#pooloptions-forks-minforks)\n\n*   **Type:** `number | string`\n*   **Default:** _available CPUs_\n\nMinimum number or percentage of forks.\n\n##### poolOptions.forks.isolate [​](#pooloptions-forks-isolate)\n\n*   **Type:** `boolean`\n*   **Default:** `true`\n\nIsolate environment for each test file.\n\n##### poolOptions.forks.singleFork [​](#pooloptions-forks-singlefork)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n\nRun all tests with the same environment inside a single child process. This will disable built-in module isolation (your source code or [inlined](#server-deps-inline) code will still be reevaluated for each test), but can improve test performance.\n\nWARNING\n\nEven though this option will force tests to run one after another, this option is different from Jest's `--runInBand`. Vitest uses child processes not only for running tests in parallel, but also to provide isolation. By disabling this option, your tests will run sequentially, but in the same global context, so you must provide isolation yourself.\n\nThis might cause all sorts of issues, if you are relying on global state (frontend frameworks usually do) or your code relies on environment to be defined separately for each test. But can be a speed boost for your tests (up to 3 times faster), that don't necessarily rely on global state or can easily bypass that.\n\n##### poolOptions.forks.execArgv \\* [​](#pooloptions-forks-execargv)\n\n*   **Type:** `string[]`\n*   **Default:** `[]`\n\nPass additional arguments to `node` process in the child processes. See [Command-line API | Node.js](https://nodejs.org/docs/latest/api/cli.html) for more information.\n\n#### poolOptions.vmThreads [​](#pooloptions-vmthreads)\n\nOptions for `vmThreads` pool.\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    poolOptions: {\n      vmThreads: {\n        // VM threads related options here\n      }\n    }\n  }\n})\n```\n\n##### poolOptions.vmThreads.maxThreads \\* [​](#pooloptions-vmthreads-maxthreads)\n\n*   **Type:** `number | string`\n*   **Default:** _available CPUs_\n\nMaximum number or percentage of threads. You can also use `VITEST_MAX_THREADS` environment variable.\n\n##### poolOptions.vmThreads.minThreads \\* [​](#pooloptions-vmthreads-minthreads)\n\n*   **Type:** `number | string`\n*   **Default:** _available CPUs_\n\nMinimum number or percentage of threads. You can also use `VITEST_MIN_THREADS` environment variable.\n\n##### poolOptions.vmThreads.memoryLimit \\* [​](#pooloptions-vmthreads-memorylimit)\n\n*   **Type:** `string | number`\n*   **Default:** `1 / CPU Cores`\n\nSpecifies the memory limit for workers before they are recycled. This value heavily depends on your environment, so it's better to specify it manually instead of relying on the default.\n\nTIP\n\nThe implementation is based on Jest's [`workerIdleMemoryLimit`](https://jestjs.io/docs/configuration#workeridlememorylimit-numberstring).\n\nThe limit can be specified in a number of different ways and whatever the result is `Math.floor` is used to turn it into an integer value:\n\n*   `<= 1` - The value is assumed to be a percentage of system memory. So 0.5 sets the memory limit of the worker to half of the total system memory\n*   `\\> 1` - Assumed to be a fixed byte value. Because of the previous rule if you wanted a value of 1 byte (I don't know why) you could use 1.1.\n*   With units\n    *   `50%` - As above, a percentage of total system memory\n    *   `100KB`, `65MB`, etc - With units to denote a fixed memory limit.\n        *   `K` / `KB` - Kilobytes (x1000)\n        *   `KiB` - Kibibytes (x1024)\n        *   `M` / `MB` - Megabytes\n        *   `MiB` - Mebibytes\n        *   `G` / `GB` - Gigabytes\n        *   `GiB` - Gibibytes\n\n##### poolOptions.vmThreads.useAtomics \\* [​](#pooloptions-vmthreads-useatomics)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n\nUse Atomics to synchronize threads.\n\nThis can improve performance in some cases, but might cause segfault in older Node versions.\n\n##### poolOptions.vmThreads.execArgv \\* [​](#pooloptions-vmthreads-execargv)\n\n*   **Type:** `string[]`\n*   **Default:** `[]`\n\nPass additional arguments to `node` process in the VM context. See [Command-line API | Node.js](https://nodejs.org/docs/latest/api/cli.html) for more information.\n\n#### poolOptions.vmForks \\* [​](#pooloptions-vmforks)\n\nOptions for `vmForks` pool.\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    poolOptions: {\n      vmForks: {\n        // VM forks related options here\n      }\n    }\n  }\n})\n```\n\n##### poolOptions.vmForks.maxForks \\* [​](#pooloptions-vmforks-maxforks)\n\n*   **Type:** `number | string`\n*   **Default:** _available CPUs_\n\nMaximum number or percentage of threads. You can also use `VITEST_MAX_FORKS` environment variable.\n\n##### poolOptions.vmForks.minForks \\* [​](#pooloptions-vmforks-minforks)\n\n*   **Type:** `number | string`\n*   **Default:** _available CPUs_\n\nMinimum number or percentage of threads. You can also use `VITEST_MIN_FORKS` environment variable.\n\n##### poolOptions.vmForks.memoryLimit \\* [​](#pooloptions-vmforks-memorylimit)\n\n*   **Type:** `string | number`\n*   **Default:** `1 / CPU Cores`\n\nSpecifies the memory limit for workers before they are recycled. This value heavily depends on your environment, so it's better to specify it manually instead of relying on the default. How the value is calculated is described in [`poolOptions.vmThreads.memoryLimit`](#pooloptions-vmthreads-memorylimit)\n\n##### poolOptions.vmForks.execArgv \\* [​](#pooloptions-vmforks-execargv)\n\n*   **Type:** `string[]`\n*   **Default:** `[]`\n\nPass additional arguments to `node` process in the VM context. See [Command-line API | Node.js](https://nodejs.org/docs/latest/api/cli.html) for more information.\n\n### fileParallelism \\* [​](#fileparallelism)\n\n*   **Type:** `boolean`\n*   **Default:** `true`\n*   **CLI:** `--no-file-parallelism`, `--fileParallelism=false`\n\nShould all test files run in parallel. Setting this to `false` will override `maxWorkers` and `minWorkers` options to `1`.\n\nTIP\n\nThis option doesn't affect tests running in the same file. If you want to run those in parallel, use `concurrent` option on [describe](https://vitest.dev/api/#describe-concurrent) or via [a config](#sequence-concurrent).\n\n### maxWorkers \\* [​](#maxworkers)\n\n*   **Type:** `number | string`\n\nMaximum number or percentage of workers to run tests in. `poolOptions.{threads,vmThreads}.maxThreads`/`poolOptions.forks.maxForks` has higher priority.\n\n### minWorkers \\* [​](#minworkers)\n\n*   **Type:** `number | string`\n\nMinimum number or percentage of workers to run tests in. `poolOptions.{threads,vmThreads}.minThreads`/`poolOptions.forks.minForks` has higher priority.\n\n### testTimeout [​](#testtimeout)\n\n*   **Type:** `number`\n*   **Default:** `5_000` in Node.js, `15_000` if `browser.enabled` is `true`\n*   **CLI:** `--test-timeout=5000`, `--testTimeout=5000`\n\nDefault timeout of a test in milliseconds\n\n### hookTimeout [​](#hooktimeout)\n\n*   **Type:** `number`\n*   **Default:** `10_000` in Node.js, `30_000` if `browser.enabled` is `true`\n*   **CLI:** `--hook-timeout=10000`, `--hookTimeout=10000`\n\nDefault timeout of a hook in milliseconds\n\n### teardownTimeout \\* [​](#teardowntimeout)\n\n*   **Type:** `number`\n*   **Default:** `10000`\n*   **CLI:** `--teardown-timeout=5000`, `--teardownTimeout=5000`\n\nDefault timeout to wait for close when Vitest shuts down, in milliseconds\n\n### silent \\* [​](#silent)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n*   **CLI:** `--silent`, `--silent=false`\n\nSilent console output from tests\n\n### setupFiles [​](#setupfiles)\n\n*   **Type:** `string | string[]`\n\nPath to setup files. They will be run before each test file.\n\nINFO\n\nChanging setup files will trigger rerun of all tests.\n\nYou can use `process.env.VITEST_POOL_ID` (integer-like string) inside to distinguish between threads.\n\nTIP\n\nNote, that if you are running [`--isolate=false`](#isolate), this setup file will be run in the same global scope multiple times. Meaning, that you are accessing the same global object before each test, so make sure you are not doing the same thing more than you need.\n\nFor example, you may rely on a global variable:\n\nts\n\n```\nimport { config } from '@some-testing-lib'\n\nif (!globalThis.defined) {\n  config.plugins = [myCoolPlugin]\n  computeHeavyThing()\n  globalThis.defined = true\n}\n\n// hooks are reset before each suite\nafterEach(() => {\n  cleanup()\n})\n\nglobalThis.resetBeforeEachTest = true\n```\n\n### globalSetup [​](#globalsetup)\n\n*   **Type:** `string | string[]`\n\nPath to global setup files, relative to project root.\n\nA global setup file can either export named functions `setup` and `teardown` or a `default` function that returns a teardown function ([example](https://github.com/vitest-dev/vitest/blob/main/test/global-setup/vitest.config.ts)).\n\nINFO\n\nMultiple globalSetup files are possible. setup and teardown are executed sequentially with teardown in reverse order.\n\nWARNING\n\nGlobal setup runs only if there is at least one running test. This means that global setup might start running during watch mode after test file is changed (the test file will wait for global setup to finish before running).\n\nBeware that the global setup is running in a different global scope, so your tests don't have access to variables defined here. However, you can pass down serializable data to tests via `provide` method:\n\nglobalSetup.jsglobalSetup.tsexample.test.js\n\njs\n\n```\nexport default function setup({ provide }) {\n  provide('wsPort', 3000)\n}\n```\n\nts\n\n```\nimport type { GlobalSetupContext } from 'vitest/node'\n\nexport default function setup({ provide }: GlobalSetupContext) {\n  provide('wsPort', 3000)\n}\n\n// You can also extend `ProvidedContext` type\n// to have type safe access to `provide/inject` methods:\ndeclare module 'vitest' {\n  export interface ProvidedContext {\n    wsPort: number\n  }\n}\n```\n\nts\n\n```\nimport { inject } from 'vitest'\n\ninject('wsPort') === 3000\n```\n\n### forceRerunTriggers \\* [​](#forcereruntriggers)\n\n*   **Type**: `string[]`\n*   **Default:** `['**/package.json/**', '**/vitest.config.*/**', '**/vite.config.*/**']`\n\nGlob pattern of file paths that will trigger the whole suite rerun. When paired with the `--changed` argument will run the whole test suite if the trigger is found in the git diff.\n\nUseful if you are testing calling CLI commands, because Vite cannot construct a module graph:\n\nts\n\n```\ntest('execute a script', async () => {\n  // Vitest cannot rerun this test, if content of `dist/index.js` changes\n  await execa('node', ['dist/index.js'])\n})\n```\n\n### coverage \\* [​](#coverage)\n\nYou can use [`v8`](https://v8.dev/blog/javascript-code-coverage), [`istanbul`](https://istanbul.js.org/) or [a custom coverage solution](https://vitest.dev/guide/coverage#custom-coverage-provider) for coverage collection.\n\nYou can provide coverage options to CLI with dot notation:\n\nsh\n\n```\nnpx vitest --coverage.enabled --coverage.provider=istanbul --coverage.all\n```\n\nWARNING\n\nIf you are using coverage options with dot notation, don't forget to specify `--coverage.enabled`. Do not provide a single `--coverage` option in that case.\n\n#### coverage.provider [​](#coverage-provider)\n\n*   **Type:** `'v8' | 'istanbul' | 'custom'`\n*   **Default:** `'v8'`\n*   **CLI:** `--coverage.provider=<provider>`\n\nUse `provider` to select the tool for coverage collection.\n\n#### coverage.enabled [​](#coverage-enabled)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.enabled`, `--coverage.enabled=false`\n\nEnables coverage collection. Can be overridden using `--coverage` CLI option.\n\n#### coverage.include [​](#coverage-include)\n\n*   **Type:** `string[]`\n*   **Default:** `['**']`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.include=<path>`, `--coverage.include=<path1> --coverage.include=<path2>`\n\nList of files included in coverage as glob patterns\n\n#### coverage.extension [​](#coverage-extension)\n\n*   **Type:** `string | string[]`\n*   **Default:** `['.js', '.cjs', '.mjs', '.ts', '.mts', '.cts', '.tsx', '.jsx', '.vue', '.svelte', '.marko']`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.extension=<extension>`, `--coverage.extension=<extension1> --coverage.extension=<extension2>`\n\n#### coverage.exclude [​](#coverage-exclude)\n\n*   **Type:** `string[]`\n*   **Default:**\n\njs\n\n```\n[\n  'coverage/**',\n  'dist/**',\n  '**/node_modules/**',\n  '**/[.]**',\n  'packages/*/test?(s)/**',\n  '**/*.d.ts',\n  '**/virtual:*',\n  '**/__x00__*',\n  '**/\\x00*',\n  'cypress/**',\n  'test?(s)/**',\n  'test?(-*).?(c|m)[jt]s?(x)',\n  '**/*{.,-}{test,spec,bench,benchmark}?(-d).?(c|m)[jt]s?(x)',\n  '**/__tests__/**',\n  '**/{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress,tsup,build,eslint,prettier}.config.*',\n  '**/vitest.{workspace,projects}.[jt]s?(on)',\n  '**/.{eslint,mocha,prettier}rc.{?(c|m)js,yml}',\n]\n```\n\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.exclude=<path>`, `--coverage.exclude=<path1> --coverage.exclude=<path2>`\n\nList of files excluded from coverage as glob patterns.\n\nThis option overrides all default options. Extend the default options when adding new patterns to ignore:\n\nts\n\n```\nimport { coverageConfigDefaults, defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    coverage: {\n      exclude: ['**/custom-pattern/**', ...coverageConfigDefaults.exclude]\n    },\n  },\n})\n```\n\nNOTE\n\nVitest automatically adds test files `include` patterns to the default value of `coverage.exclude`.\n\n#### coverage.all [​](#coverage-all)\n\n*   **Type:** `boolean`\n*   **Default:** `true`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.all`, `--coverage.all=false`\n\nWhether to include all files, including the untested ones into report.\n\n#### coverage.clean [​](#coverage-clean)\n\n*   **Type:** `boolean`\n*   **Default:** `true`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.clean`, `--coverage.clean=false`\n\nClean coverage results before running tests\n\n#### coverage.cleanOnRerun [​](#coverage-cleanonrerun)\n\n*   **Type:** `boolean`\n*   **Default:** `true`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.cleanOnRerun`, `--coverage.cleanOnRerun=false`\n\nClean coverage report on watch rerun\n\n#### coverage.reportsDirectory [​](#coverage-reportsdirectory)\n\n*   **Type:** `string`\n*   **Default:** `'./coverage'`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.reportsDirectory=<path>`\n\nWARNING\n\nVitest will delete this directory before running tests if `coverage.clean` is enabled (default value).\n\nDirectory to write coverage report to.\n\nTo preview the coverage report in the output of [HTML reporter](https://vitest.dev/guide/reporters#html-reporter), this option must be set as a sub-directory of the html report directory (for example `./html/coverage`).\n\n#### coverage.reporter [​](#coverage-reporter)\n\n*   **Type:** `string | string[] | [string, {}][]`\n*   **Default:** `['text', 'html', 'clover', 'json']`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.reporter=<reporter>`, `--coverage.reporter=<reporter1> --coverage.reporter=<reporter2>`\n\nCoverage reporters to use. See [istanbul documentation](https://istanbul.js.org/docs/advanced/alternative-reporters/) for detailed list of all reporters. See [`@types/istanbul-reporter`](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/276d95e4304b3670eaf6e8e5a7ea9e265a14e338/types/istanbul-reports/index.d.ts) for details about reporter specific options.\n\nThe reporter has three different types:\n\n*   A single reporter: `{ reporter: 'html' }`\n*   Multiple reporters without options: `{ reporter: ['html', 'json'] }`\n*   A single or multiple reporters with reporter options:\n    \n    ts\n    \n    ```\n    {\n      reporter: [\n        ['lcov', { 'projectRoot': './src' }],\n        ['json', { 'file': 'coverage.json' }],\n        ['text']\n      ]\n    }\n    ```\n    \n\nYou can also pass custom coverage reporters. See [Guide - Custom Coverage Reporter](https://vitest.dev/guide/coverage#custom-coverage-reporter) for more information.\n\nts\n\n```\n  {\n    reporter: [\n      // Specify reporter using name of the NPM package\n      '@vitest/custom-coverage-reporter',\n      ['@vitest/custom-coverage-reporter', { someOption: true }],\n\n      // Specify reporter using local path\n      '/absolute/path/to/custom-reporter.cjs',\n      ['/absolute/path/to/custom-reporter.cjs', { someOption: true }],\n    ]\n  }\n```\n\nYou can check your coverage report in Vitest UI: check [Vitest UI Coverage](https://vitest.dev/guide/coverage#vitest-ui) for more details.\n\n#### coverage.reportOnFailure [​](#coverage-reportonfailure)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.reportOnFailure`, `--coverage.reportOnFailure=false`\n\nGenerate coverage report even when tests fail.\n\n#### coverage.allowExternal [​](#coverage-allowexternal)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.allowExternal`, `--coverage.allowExternal=false`\n\nCollect coverage of files outside the [project `root`](#root).\n\n#### coverage.skipFull [​](#coverage-skipfull)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.skipFull`, `--coverage.skipFull=false`\n\nDo not show files with 100% statement, branch, and function coverage.\n\n#### coverage.thresholds [​](#coverage-thresholds)\n\nOptions for coverage thresholds\n\n##### coverage.thresholds.lines [​](#coverage-thresholds-lines)\n\n*   **Type:** `number`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.thresholds.lines=<number>`\n\nGlobal threshold for lines. See [istanbul documentation](https://github.com/istanbuljs/nyc#coverage-thresholds) for more information.\n\n##### coverage.thresholds.functions [​](#coverage-thresholds-functions)\n\n*   **Type:** `number`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.thresholds.functions=<number>`\n\nGlobal threshold for functions. See [istanbul documentation](https://github.com/istanbuljs/nyc#coverage-thresholds) for more information.\n\n##### coverage.thresholds.branches [​](#coverage-thresholds-branches)\n\n*   **Type:** `number`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.thresholds.branches=<number>`\n\nGlobal threshold for branches. See [istanbul documentation](https://github.com/istanbuljs/nyc#coverage-thresholds) for more information.\n\n##### coverage.thresholds.statements [​](#coverage-thresholds-statements)\n\n*   **Type:** `number`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.thresholds.statements=<number>`\n\nGlobal threshold for statements. See [istanbul documentation](https://github.com/istanbuljs/nyc#coverage-thresholds) for more information.\n\n##### coverage.thresholds.perFile [​](#coverage-thresholds-perfile)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.thresholds.perFile`, `--coverage.thresholds.perFile=false`\n\nCheck thresholds per file.\n\n##### coverage.thresholds.autoUpdate [​](#coverage-thresholds-autoupdate)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.thresholds.autoUpdate=<boolean>`\n\nUpdate all threshold values `lines`, `functions`, `branches` and `statements` to configuration file when current coverage is above the configured thresholds. This option helps to maintain thresholds when coverage is improved.\n\n##### coverage.thresholds.100 [​](#coverage-thresholds-100)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.thresholds.100`, `--coverage.thresholds.100=false`\n\nSets global thresholds to 100. Shortcut for `--coverage.thresholds.lines 100 --coverage.thresholds.functions 100 --coverage.thresholds.branches 100 --coverage.thresholds.statements 100`.\n\n##### coverage.thresholds\\[glob-pattern\\] [​](#coverage-thresholds-glob-pattern)\n\n*   **Type:** `{ statements?: number functions?: number branches?: number lines?: number }`\n*   **Default:** `undefined`\n*   **Available for providers:** `'v8' | 'istanbul'`\n\nSets thresholds for files matching the glob pattern.\n\nts\n\n```\n{\n  coverage: {\n    thresholds: {\n      // Thresholds for all files\n      functions: 95,\n      branches: 70,\n\n      // Thresholds for matching glob pattern\n      'src/utils/**.ts': {\n        statements: 95,\n        functions: 90,\n        branches: 85,\n        lines: 80,\n      },\n\n      // Files matching this pattern will only have lines thresholds set.\n      // Global thresholds are not inherited.\n      '**/math.ts': {\n        lines: 100,\n      }\n    }\n  }\n}\n```\n\n#### coverage.ignoreEmptyLines [​](#coverage-ignoreemptylines)\n\n*   **Type:** `boolean`\n*   **Default:** `true` (`false` in v1)\n*   **Available for providers:** `'v8'`\n*   **CLI:** `--coverage.ignoreEmptyLines=<boolean>`\n\nIgnore empty lines, comments and other non-runtime code, e.g. Typescript types.\n\nThis option works only if the used compiler removes comments and other non-runtime code from the transpiled code. By default Vite uses ESBuild which removes comments and Typescript types from `.ts`, `.tsx` and `.jsx` files.\n\nIf you want to apply ESBuild to other files as well, define them in [`esbuild` options](https://vitejs.dev/config/shared-options.html#esbuild):\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  esbuild: {\n    // Transpile all files with ESBuild to remove comments from code coverage.\n    // Required for `test.coverage.ignoreEmptyLines` to work:\n    include: ['**/*.js', '**/*.jsx', '**/*.mjs', '**/*.ts', '**/*.tsx'],\n  },\n  test: {\n    coverage: {\n      provider: 'v8',\n      ignoreEmptyLines: true,\n    },\n  },\n})\n```\n\n#### coverage.ignoreClassMethods [​](#coverage-ignoreclassmethods)\n\n*   **Type:** `string[]`\n*   **Default:** `[]`\n*   **Available for providers:** `'istanbul'`\n*   **CLI:** `--coverage.ignoreClassMethods=<method>`\n\nSet to array of class method names to ignore for coverage. See [istanbul documentation](https://github.com/istanbuljs/nyc#ignoring-methods) for more information.\n\n#### coverage.watermarks [​](#coverage-watermarks)\n\n*   **Type:**\n\nts\n\n```\n{\n  statements?: [number, number],\n  functions?: [number, number],\n  branches?: [number, number],\n  lines?: [number, number]\n}\n```\n\n*   **Default:**\n\nts\n\n```\n{\n  statements: [50, 80],\n  functions: [50, 80],\n  branches: [50, 80],\n  lines: [50, 80]\n}\n```\n\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.watermarks.statements=50,80`, `--coverage.watermarks.branches=50,80`\n\nWatermarks for statements, lines, branches and functions. See [istanbul documentation](https://github.com/istanbuljs/nyc#high-and-low-watermarks) for more information.\n\n#### coverage.processingConcurrency [​](#coverage-processingconcurrency)\n\n*   **Type:** `boolean`\n*   **Default:** `Math.min(20, os.availableParallelism?.() ?? os.cpus().length)`\n*   **Available for providers:** `'v8' | 'istanbul'`\n*   **CLI:** `--coverage.processingConcurrency=<number>`\n\nConcurrency limit used when processing the coverage results.\n\n#### coverage.customProviderModule [​](#coverage-customprovidermodule)\n\n*   **Type:** `string`\n*   **Available for providers:** `'custom'`\n*   **CLI:** `--coverage.customProviderModule=<path or module name>`\n\nSpecifies the module name or path for the custom coverage provider module. See [Guide - Custom Coverage Provider](https://vitest.dev/guide/coverage#custom-coverage-provider) for more information.\n\n### testNamePattern \\* [​](#testnamepattern)\n\n*   **Type** `string | RegExp`\n*   **CLI:** `-t <pattern>`, `--testNamePattern=<pattern>`, `--test-name-pattern=<pattern>`\n\nRun tests with full names matching the pattern. If you add `OnlyRunThis` to this property, tests not containing the word `OnlyRunThis` in the test name will be skipped.\n\njs\n\n```\nimport { expect, test } from 'vitest'\n\n// run\ntest('OnlyRunThis', () => {\n  expect(true).toBe(true)\n})\n\n// skipped\ntest('doNotRun', () => {\n  expect(true).toBe(true)\n})\n```\n\n### open \\* [​](#open)\n\n*   **Type:** `boolean`\n*   **Default:** `!process.env.CI`\n*   **CLI:** `--open`, `--open=false`\n\nOpen Vitest UI (WIP)\n\n### api [​](#api)\n\n*   **Type:** `boolean | number`\n*   **Default:** `false`\n*   **CLI:** `--api`, `--api.port`, `--api.host`, `--api.strictPort`\n\nListen to port and serve API. When set to true, the default port is 51204\n\n### browser [​](#browser)\n\n*   **Type:** `{ enabled?, name?, provider?, headless?, api? }`\n*   **Default:** `{ enabled: false, headless: process.env.CI, api: 63315 }`\n*   **CLI:** `--browser`, `--browser=<name>`, `--browser.name=chrome --browser.headless`\n\nRun Vitest tests in a browser. We use [WebdriverIO](https://webdriver.io/) for running tests by default, but it can be configured with [browser.provider](#browser-provider) option.\n\nNOTE\n\nRead more about testing in a real browser in the [guide page](https://vitest.dev/guide/browser/).\n\nWARNING\n\nThis is an experimental feature. Breaking changes might not follow SemVer, please pin Vitest's version when using it.\n\n#### browser.enabled [​](#browser-enabled)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n*   **CLI:** `--browser`, `--browser.enabled=false`\n\nRun all tests inside a browser by default. Can be overridden with [`poolMatchGlobs`](#poolmatchglobs) option.\n\n#### browser.name [​](#browser-46-name)\n\n*   **Type:** `string`\n*   **CLI:** `--browser=safari`\n\nRun all tests in a specific browser. Possible options in different providers:\n\n*   `webdriverio`: `firefox`, `chrome`, `edge`, `safari`\n*   `playwright`: `firefox`, `webkit`, `chromium`\n*   custom: any string that will be passed to the provider\n\n#### browser.headless [​](#browser-headless)\n\n*   **Type:** `boolean`\n*   **Default:** `process.env.CI`\n*   **CLI:** `--browser.headless`, `--browser.headless=false`\n\nRun the browser in a `headless` mode. If you are running Vitest in CI, it will be enabled by default.\n\n#### browser.isolate [​](#browser-isolate)\n\n*   **Type:** `boolean`\n*   **Default:** `true`\n*   **CLI:** `--browser.isolate`, `--browser.isolate=false`\n\nRun every test in a separate iframe.\n\n#### browser.api [​](#browser-api)\n\n*   **Type:** `number | { port?, strictPort?, host? }`\n*   **Default:** `63315`\n*   **CLI:** `--browser.api=63315`, `--browser.api.port=1234, --browser.api.host=example.com`\n\nConfigure options for Vite server that serves code in the browser. Does not affect [`test.api`](#api) option.\n\n#### browser.provider [​](#browser-provider)\n\n*   **Type:** `'webdriverio' | 'playwright' | string`\n*   **Default:** `'webdriverio'`\n*   **CLI:** `--browser.provider=playwright`\n\nPath to a provider that will be used when running browser tests. Vitest provides two providers which are `webdriverio` (default) and `playwright`. Custom providers should be exported using `default` export and have this shape:\n\nts\n\n```\nexport interface BrowserProvider {\n  name: string\n  getSupportedBrowsers: () => readonly string[]\n  initialize: (ctx: Vitest, options: { browser: string; options?: BrowserProviderOptions }) => Awaitable<void>\n  openPage: (url: string) => Awaitable<void>\n  close: () => Awaitable<void>\n}\n```\n\nWARNING\n\nThis is an advanced API for library authors. If you just need to run tests in a browser, use the [browser](#browser) option.\n\n#### browser.providerOptions [​](#browser-provideroptions)\n\n*   **Type:** `BrowserProviderOptions`\n\nOptions that will be passed down to provider when calling `provider.initialize`.\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    browser: {\n      providerOptions: {\n        launch: {\n          devtools: true,\n        }\n      }\n    }\n  }\n})\n```\n\nTIP\n\nTo have a better type safety when using built-in providers, you can add one of these types (for provider that you are using) to your tsconfig's `compilerOptions.types` field:\n\njson\n\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\n      \"@vitest/browser/providers/webdriverio\",\n      \"@vitest/browser/providers/playwright\"\n    ]\n  }\n}\n```\n\n#### browser.ui [​](#browser-ui)\n\n*   **Type:** `boolean`\n*   **Default:** `!isCI`\n*   **CLI:** `--browser.ui=false`\n\nShould Vitest UI be injected into the page. By default, injects UI iframe during development.\n\n#### browser.viewport [​](#browser-viewport)\n\n*   **Type:** `{ width, height }`\n*   **Default:** `414x896`\n\nDefault iframe's viewport.\n\n#### browser.screenshotDirectory [​](#browser-screenshotdirectory)\n\n*   **Type:** `string`\n*   **Default:** `__snapshots__` in the test file directory\n\nPath to the snapshots directory relative to the `root`.\n\n#### browser.screenshotFailures [​](#browser-screenshotfailures)\n\n*   **Type:** `boolean`\n*   **Default:** `!browser.ui`\n\nShould Vitest take screenshots if the test fails.\n\n#### browser.orchestratorScripts [​](#browser-orchestratorscripts)\n\n*   **Type:** `BrowserScript[]`\n*   **Default:** `[]`\n\nCustom scripts that should be injected into the orchestrator HTML before test iframes are initiated. This HTML document only sets up iframes and doesn't actually import your code.\n\nThe script `src` and `content` will be processed by Vite plugins. Script should be provided in the following shape:\n\nts\n\n```\nexport interface BrowserScript {\n  /**\n   * If \"content\" is provided and type is \"module\", this will be its identifier.\n   *\n   * If you are using TypeScript, you can add `.ts` extension here for example.\n   * @default `injected-${index}.js`\n   */\n  id?: string\n  /**\n   * JavaScript content to be injected. This string is processed by Vite plugins if type is \"module\".\n   *\n   * You can use `id` to give Vite a hint about the file extension.\n   */\n  content?: string\n  /**\n   * Path to the script. This value is resolved by Vite so it can be a node module or a file path.\n   */\n  src?: string\n  /**\n   * If the script should be loaded asynchronously.\n   */\n  async?: boolean\n  /**\n   * Script type.\n   * @default 'module'\n   */\n  type?: string\n}\n```\n\n#### browser.testerScripts [​](#browser-testerscripts)\n\n*   **Type:** `BrowserScript[]`\n*   **Default:** `[]`\n\nCustom scripts that should be injected into the tester HTML before the tests environment is initiated. This is useful to inject polyfills required for Vitest browser implementation. It is recommended to use [`setupFiles`](#setupfiles) in almost all cases instead of this.\n\nThe script `src` and `content` will be processed by Vite plugins.\n\n#### browser.commands [​](#browser-commands)\n\n*   **Type:** `Record<string, BrowserCommand>`\n*   **Default:** `{ readFile, writeFile, ... }`\n\nCustom [commands](https://vitest.dev/guide/browser/commands) that can be import during browser tests from `@vitest/browser/commands`.\n\n### clearMocks [​](#clearmocks)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n\nWill call [`.mockClear()`](https://vitest.dev/api/mock#mockclear) on all spies before each test. This will clear mock history, but not reset its implementation to the default one.\n\n### mockReset [​](#mockreset)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n\nWill call [`.mockReset()`](https://vitest.dev/api/mock#mockreset) on all spies before each test. This will clear mock history and reset its implementation to an empty function (will return `undefined`).\n\n### restoreMocks [​](#restoremocks)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n\nWill call [`.mockRestore()`](https://vitest.dev/api/mock#mockrestore) on all spies before each test. This will clear mock history and reset its implementation to the original one.\n\n### unstubEnvs [​](#unstubenvs)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n\nWill call [`vi.unstubAllEnvs`](https://vitest.dev/api/vi#vi-unstuballenvs) before each test.\n\n### unstubGlobals [​](#unstubglobals)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n\nWill call [`vi.unstubAllGlobals`](https://vitest.dev/api/vi#vi-unstuballglobals) before each test.\n\n### testTransformMode [​](#testtransformmode)\n\n*   **Type:** `{ web?, ssr? }`\n\nDetermine the transform method for all modules imported inside a test that matches the glob pattern. By default, relies on the environment. For example, tests with JSDOM environment will process all files with `ssr: false` flag and tests with Node environment process all modules with `ssr: true`.\n\n#### testTransformMode.ssr [​](#testtransformmode-ssr)\n\n*   **Type:** `string[]`\n*   **Default:** `[]`\n\nUse SSR transform pipeline for all modules inside specified tests.  \nVite plugins will receive `ssr: true` flag when processing those files.\n\n#### testTransformMode.web [​](#testtransformmode-46-web)\n\n*   **Type:** `string[]`\n*   **Default:** `[]`\n\nFirst do a normal transform pipeline (targeting browser), then do a SSR rewrite to run the code in Node.  \nVite plugins will receive `ssr: false` flag when processing those files.\n\n### snapshotFormat \\* [​](#snapshotformat)\n\n*   **Type:** `PrettyFormatOptions`\n\nFormat options for snapshot testing. These options are passed down to [`pretty-format`](https://www.npmjs.com/package/pretty-format).\n\nTIP\n\nBeware that `plugins` field on this object will be ignored.\n\nIf you need to extend snapshot serializer via pretty-format plugins, please, use [`expect.addSnapshotSerializer`](https://vitest.dev/api/expect#expect-addsnapshotserializer) API or [snapshotSerializers](#snapshotserializers) option.\n\n### snapshotSerializers \\* [​](#snapshotserializers)\n\n*   **Type:** `string[]`\n*   **Default:** `[]`\n\nA list of paths to snapshot serializer modules for snapshot testing, useful if you want add custom snapshot serializers. See [Custom Serializer](https://vitest.dev/guide/snapshot#custom-serializer) for more information.\n\n### resolveSnapshotPath \\* [​](#resolvesnapshotpath)\n\n*   **Type**: `(testPath: string, snapExtension: string) => string`\n*   **Default**: stores snapshot files in `__snapshots__` directory\n\nOverrides default snapshot path. For example, to store snapshots next to test files:\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    resolveSnapshotPath: (testPath, snapExtension) => testPath + snapExtension,\n  },\n})\n```\n\n### allowOnly [​](#allowonly)\n\n*   **Type**: `boolean`\n*   **Default**: `!process.env.CI`\n*   **CLI:** `--allowOnly`, `--allowOnly=false`\n\nAllow tests and suites that are marked as only.\n\n### dangerouslyIgnoreUnhandledErrors \\* [​](#dangerouslyignoreunhandlederrors)\n\n*   **Type**: `boolean`\n*   **Default**: `false`\n*   **CLI:** `--dangerouslyIgnoreUnhandledErrors` `--dangerouslyIgnoreUnhandledErrors=false`\n\nIgnore any unhandled errors that occur.\n\n### passWithNoTests \\* [​](#passwithnotests)\n\n*   **Type**: `boolean`\n*   **Default**: `false`\n*   **CLI:** `--passWithNoTests`, `--passWithNoTests=false`\n\nVitest will not fail, if no tests will be found.\n\n### logHeapUsage [​](#logheapusage)\n\n*   **Type**: `boolean`\n*   **Default**: `false`\n*   **CLI:** `--logHeapUsage`, `--logHeapUsage=false`\n\nShow heap usage after each test. Useful for debugging memory leaks.\n\n### css [​](#css)\n\n*   **Type**: `boolean | { include?, exclude?, modules? }`\n\nConfigure if CSS should be processed. When excluded, CSS files will be replaced with empty strings to bypass the subsequent processing. CSS Modules will return a proxy to not affect runtime.\n\n#### css.include [​](#css-include)\n\n*   **Type**: `RegExp | RegExp[]`\n*   **Default**: `[]`\n\nRegExp pattern for files that should return actual CSS and will be processed by Vite pipeline.\n\nTIP\n\nTo process all CSS files, use `/.+/`.\n\n#### css.exclude [​](#css-exclude)\n\n*   **Type**: `RegExp | RegExp[]`\n*   **Default**: `[]`\n\nRegExp pattern for files that will return an empty CSS file.\n\n#### css.modules [​](#css-modules)\n\n*   **Type**: `{ classNameStrategy? }`\n*   **Default**: `{}`\n\n#### css.modules.classNameStrategy [​](#css-modules-classnamestrategy)\n\n*   **Type**: `'stable' | 'scoped' | 'non-scoped'`\n*   **Default**: `'stable'`\n\nIf you decide to process CSS files, you can configure if class names inside CSS modules should be scoped. You can choose one of the options:\n\n*   `stable`: class names will be generated as `_${name}_${hashedFilename}`, which means that generated class will stay the same, if CSS content is changed, but will change, if the name of the file is modified, or file is moved to another folder. This setting is useful, if you use snapshot feature.\n*   `scoped`: class names will be generated as usual, respecting `css.modules.generateScopeName` method, if you have one and CSS processing is enabled. By default, filename will be generated as `_${name}_${hash}`, where hash includes filename and content of the file.\n*   `non-scoped`: class names will not be hashed.\n\nWARNING\n\nBy default, Vitest exports a proxy, bypassing CSS Modules processing. If you rely on CSS properties on your classes, you have to enable CSS processing using `include` option.\n\n### maxConcurrency [​](#maxconcurrency)\n\n*   **Type**: `number`\n*   **Default**: `5`\n*   **CLI**: `--max-concurrency=10`, `--maxConcurrency=10`\n\nA number of tests that are allowed to run at the same time marked with `test.concurrent`.\n\nTest above this limit will be queued to run when available slot appears.\n\n### cache \\* [​](#cache)\n\n*   **Type**: `false`\n*   **CLI**: `--no-cache`, `--cache=false`\n\nUse this option if you want to disable the cache feature. At the moment Vitest stores cache for test results to run the longer and failed tests first.\n\nThe cache directory is controlled by the Vite's [`cacheDir`](https://vitejs.dev/config/shared-options.html#cachedir) option:\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  cacheDir: 'custom-folder/.vitest'\n})\n```\n\nYou can limit the directory only for Vitest by using `process.env.VITEST`:\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  cacheDir: process.env.VITEST ? 'custom-folder/.vitest' : undefined\n})\n```\n\n### sequence [​](#sequence)\n\n*   **Type**: `{ sequencer?, shuffle?, seed?, hooks?, setupFiles? }`\n\nOptions for how tests should be sorted.\n\nYou can provide sequence options to CLI with dot notation:\n\nsh\n\n```\nnpx vitest --sequence.shuffle --sequence.seed=1000\n```\n\n#### sequence.sequencer \\* [​](#sequence-sequencer)\n\n*   **Type**: `TestSequencerConstructor`\n*   **Default**: `BaseSequencer`\n\nA custom class that defines methods for sharding and sorting. You can extend `BaseSequencer` from `vitest/node`, if you only need to redefine one of the `sort` and `shard` methods, but both should exist.\n\nSharding is happening before sorting, and only if `--shard` option is provided.\n\n#### sequence.shuffle [​](#sequence-shuffle)\n\n*   **Type**: `boolean | { files?, tests? }`\n*   **Default**: `false`\n*   **CLI**: `--sequence.shuffle`, `--sequence.shuffle=false`\n\nIf you want files and tests to run randomly, you can enable it with this option, or CLI argument [`--sequence.shuffle`](https://vitest.dev/guide/cli).\n\nVitest usually uses cache to sort tests, so long running tests start earlier - this makes tests run faster. If your files and tests will run in random order you will lose this performance improvement, but it may be useful to track tests that accidentally depend on another run previously.\n\n#### sequence.shuffle.files [​](#sequence-shuffle-files)\n\n*   **Type**: `boolean`\n*   **Default**: `false`\n*   **CLI**: `--sequence.shuffle.files`, `--sequence.shuffle.files=false`\n\nWhether to randomize files, be aware that long running tests will not start earlier if you enable this option.\n\n#### sequence.shuffle.tests [​](#sequence-shuffle-tests)\n\n*   **Type**: `boolean`\n*   **Default**: `false`\n*   **CLI**: `--sequence.shuffle.tests`, `--sequence.shuffle.tests=false`\n\nWhether to randomize tests.\n\n#### sequence.concurrent [​](#sequence-concurrent)\n\n*   **Type**: `boolean`\n*   **Default**: `false`\n*   **CLI**: `--sequence.concurrent`, `--sequence.concurrent=false`\n\nIf you want tests to run in parallel, you can enable it with this option, or CLI argument [`--sequence.concurrent`](https://vitest.dev/guide/cli).\n\n#### sequence.seed \\* [​](#sequence-seed)\n\n*   **Type**: `number`\n*   **Default**: `Date.now()`\n*   **CLI**: `--sequence.seed=1000`\n\nSets the randomization seed, if tests are running in random order.\n\n#### sequence.hooks [​](#sequence-hooks)\n\n*   **Type**: `'stack' | 'list' | 'parallel'`\n*   **Default**: `'parallel'`\n*   **CLI**: `--sequence.hooks=<value>`\n\nChanges the order in which hooks are executed.\n\n*   `stack` will order \"after\" hooks in reverse order, \"before\" hooks will run in the order they were defined\n*   `list` will order all hooks in the order they are defined\n*   `parallel` will run hooks in a single group in parallel (hooks in parent suites will still run before the current suite's hooks)\n\nTIP\n\nThis option doesn't affect [`onTestFinished`](https://vitest.dev/api/#ontestfinished). It is always called in reverse order.\n\n#### sequence.setupFiles [​](#sequence-setupfiles)\n\n*   **Type**: `'list' | 'parallel'`\n*   **Default**: `'parallel'`\n*   **CLI**: `--sequence.setupFiles=<value>`\n\nChanges the order in which setup files are executed.\n\n*   `list` will run setup files in the order they are defined\n*   `parallel` will run setup files in parallel\n\n### typecheck [​](#typecheck)\n\nOptions for configuring [typechecking](https://vitest.dev/guide/testing-types) test environment.\n\n#### typecheck.enabled [​](#typecheck-enabled)\n\n*   **Type**: `boolean`\n*   **Default**: `false`\n*   **CLI**: `--typecheck`, `--typecheck.enabled`\n\nEnable typechecking alongside your regular tests.\n\n#### typecheck.only [​](#typecheck-only)\n\n*   **Type**: `boolean`\n*   **Default**: `false`\n*   **CLI**: `--typecheck.only`\n\nRun only typecheck tests, when typechecking is enabled. When using CLI, this option will automatically enable typechecking.\n\n#### typecheck.checker [​](#typecheck-checker)\n\n*   **Type**: `'tsc' | 'vue-tsc' | string`\n*   **Default**: `tsc`\n\nWhat tools to use for type checking. Vitest will spawn a process with certain parameters for easier parsing, depending on the type. Checker should implement the same output format as `tsc`.\n\nYou need to have a package installed to use typechecker:\n\n*   `tsc` requires `typescript` package\n*   `vue-tsc` requires `vue-tsc` package\n\nYou can also pass down a path to custom binary or command name that produces the same output as `tsc --noEmit --pretty false`.\n\n#### typecheck.include [​](#typecheck-include)\n\n*   **Type**: `string[]`\n*   **Default**: `['**/*.{test,spec}-d.?(c|m)[jt]s?(x)']`\n\nGlob pattern for files that should be treated as test files\n\n#### typecheck.exclude [​](#typecheck-exclude)\n\n*   **Type**: `string[]`\n*   **Default**: `['**/node_modules/**', '**/dist/**', '**/cypress/**', '**/.{idea,git,cache,output,temp}/**']`\n\nGlob pattern for files that should not be treated as test files\n\n#### typecheck.allowJs [​](#typecheck-allowjs)\n\n*   **Type**: `boolean`\n*   **Default**: `false`\n\nCheck JS files that have `@ts-check` comment. If you have it enabled in tsconfig, this will not overwrite it.\n\n#### typecheck.ignoreSourceErrors [​](#typecheck-ignoresourceerrors)\n\n*   **Type**: `boolean`\n*   **Default**: `false`\n\nDo not fail, if Vitest found errors outside the test files. This will not show you non-test errors at all.\n\nBy default, if Vitest finds source error, it will fail test suite.\n\n#### typecheck.tsconfig [​](#typecheck-tsconfig)\n\n*   **Type**: `string`\n*   **Default**: _tries to find closest tsconfig.json_\n\nPath to custom tsconfig, relative to the project root.\n\n### slowTestThreshold \\* [​](#slowtestthreshold)\n\n*   **Type**: `number`\n*   **Default**: `300`\n*   **CLI**: `--slow-test-threshold=<number>`, `--slowTestThreshold=<number>`\n\nThe number of milliseconds after which a test is considered slow and reported as such in the results.\n\n### chaiConfig [​](#chaiconfig)\n\n*   **Type:** `{ includeStack?, showDiff?, truncateThreshold? }`\n*   **Default:** `{ includeStack: false, showDiff: true, truncateThreshold: 40 }`\n\nEquivalent to [Chai config](https://github.com/chaijs/chai/blob/4.x.x/lib/chai/config.js).\n\n#### chaiConfig.includeStack [​](#chaiconfig-includestack)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n\nInfluences whether stack trace is included in Assertion error message. Default of false suppresses stack trace in the error message.\n\n#### chaiConfig.showDiff [​](#chaiconfig-showdiff)\n\n*   **Type:** `boolean`\n*   **Default:** `true`\n\nInfluences whether or not the `showDiff` flag should be included in the thrown AssertionErrors. `false` will always be `false`; `true` will be true when the assertion has requested a diff to be shown.\n\n#### chaiConfig.truncateThreshold [​](#chaiconfig-truncatethreshold)\n\n*   **Type:** `number`\n*   **Default:** `40`\n\nSets length threshold for actual and expected values in assertion errors. If this threshold is exceeded, for example for large data structures, the value is replaced with something like `[ Array(3) ]` or `{ Object (prop1, prop2) }`. Set it to `0` if you want to disable truncating altogether.\n\nThis config option affects truncating values in `test.each` titles and inside the assertion error message.\n\n### bail [​](#bail)\n\n*   **Type:** `number`\n*   **Default:** `0`\n*   **CLI**: `--bail=<value>`\n\nStop test execution when given number of tests have failed.\n\nBy default Vitest will run all of your test cases even if some of them fail. This may not be desired for CI builds where you are only interested in 100% successful builds and would like to stop test execution as early as possible when test failures occur. The `bail` option can be used to speed up CI runs by preventing it from running more tests when failures have occurred.\n\n### retry [​](#retry)\n\n*   **Type:** `number`\n*   **Default:** `0`\n*   **CLI:** `--retry=<value>`\n\nRetry the test specific number of times if it fails.\n\n### onConsoleLog \\* [​](#onconsolelog)\n\n*   **Type**: `(log: string, type: 'stdout' | 'stderr') => boolean | void`\n\nCustom handler for `console.log` in tests. If you return `false`, Vitest will not print the log to the console.\n\nCan be useful for filtering out logs from third-party libraries.\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    onConsoleLog(log: string, type: 'stdout' | 'stderr'): boolean | void {\n      return !(log === 'message from third party library' && type === 'stdout')\n    },\n  },\n})\n```\n\n### onStackTrace \\* [​](#onstacktrace)\n\n*   **Type**: `(error: Error, frame: ParsedStack) => boolean | void`\n\nApply a filtering function to each frame of each stack trace when handling errors. The first argument, `error`, is an object with the same properties as a standard `Error`, but it is not an actual instance.\n\nCan be useful for filtering out stack trace frames from third-party libraries.\n\nts\n\n```\nimport type { ParsedStack } from 'vitest'\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    onStackTrace(error: Error, { file }: ParsedStack): boolean | void {\n      // If we've encountered a ReferenceError, show the whole stack.\n      if (error.name === 'ReferenceError') {\n        return\n      }\n\n      // Reject all frames from third party libraries.\n      if (file.includes('node_modules')) {\n        return false\n      }\n    },\n  },\n})\n```\n\n### diff [​](#diff)\n\n*   **Type:** `string`\n*   **CLI:** `--diff=<value>`\n\nPath to a diff config that will be used to generate diff interface. Useful if you want to customize diff display.\n\nvitest.diff.tsvitest.config.js\n\nts\n\n```\nimport type { DiffOptions } from 'vitest'\nimport c from 'picocolors'\n\nexport default {\n  aIndicator: c.bold('--'),\n  bIndicator: c.bold('++'),\n  omitAnnotationLines: true,\n} satisfies DiffOptions\n```\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    diff: './vitest.diff.ts'\n  }\n})\n```\n\n#### diff.truncateThreshold [​](#diff-truncatethreshold)\n\n*   **Type**: `number`\n*   **Default**: `0`\n\nThe maximum length of diff result to be displayed. Diffs above this threshold will be truncated. Truncation won't take effect with default value 0.\n\n#### diff.truncateAnnotation [​](#diff-truncateannotation)\n\n*   **Type**: `string`\n*   **Default**: `'... Diff result is truncated'`\n\nAnnotation that is output at the end of diff result if it's truncated.\n\n#### diff.truncateAnnotationColor [​](#diff-truncateannotationcolor)\n\n*   **Type**: `DiffOptionsColor = (arg: string) => string`\n*   **Default**: `noColor = (string: string): string => string`\n\nColor of truncate annotation, default is output with no color.\n\n### fakeTimers [​](#faketimers)\n\n*   **Type:** `FakeTimerInstallOpts`\n\nOptions that Vitest will pass down to [`@sinon/fake-timers`](https://www.npmjs.com/package/@sinonjs/fake-timers) when using [`vi.useFakeTimers()`](https://vitest.dev/api/vi#vi-usefaketimers).\n\n#### fakeTimers.now [​](#faketimers-now)\n\n*   **Type:** `number | Date`\n*   **Default:** `Date.now()`\n\nInstalls fake timers with the specified Unix epoch.\n\n#### fakeTimers.toFake [​](#faketimers-tofake)\n\n*   **Type:** `('setTimeout' | 'clearTimeout' | 'setImmediate' | 'clearImmediate' | 'setInterval' | 'clearInterval' | 'Date' | 'nextTick' | 'hrtime' | 'requestAnimationFrame' | 'cancelAnimationFrame' | 'requestIdleCallback' | 'cancelIdleCallback' | 'performance' | 'queueMicrotask')[]`\n*   **Default:** `['setTimeout', 'clearTimeout', 'setImmediate', 'clearImmediate', 'setInterval', 'clearInterval', 'Date']`\n\nAn array with names of global methods and APIs to fake.\n\nTo only mock `setTimeout()` and `nextTick()`, specify this property as `['setTimeout', 'nextTick']`.\n\nMocking `nextTick` is not supported when running Vitest inside `node:child_process` by using `--pool=forks`. NodeJS uses `process.nextTick` internally in `node:child_process` and hangs when it is mocked. Mocking `nextTick` is supported when running Vitest with `--pool=threads`.\n\n#### fakeTimers.loopLimit [​](#faketimers-looplimit)\n\n*   **Type:** `number`\n*   **Default:** `10_000`\n\nThe maximum number of timers that will be run when calling [`vi.runAllTimers()`](https://vitest.dev/api/vi#vi-runalltimers).\n\n#### fakeTimers.shouldAdvanceTime [​](#faketimers-shouldadvancetime)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n\nTells @sinonjs/fake-timers to increment mocked time automatically based on the real system time shift (e.g. the mocked time will be incremented by 20ms for every 20ms change in the real system time).\n\n#### fakeTimers.advanceTimeDelta [​](#faketimers-advancetimedelta)\n\n*   **Type:** `number`\n*   **Default:** `20`\n\nRelevant only when using with `shouldAdvanceTime: true`. increment mocked time by advanceTimeDelta ms every advanceTimeDelta ms change in the real system time.\n\n#### fakeTimers.shouldClearNativeTimers [​](#faketimers-shouldclearnativetimers)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n\nTells fake timers to clear \"native\" (i.e. not fake) timers by delegating to their respective handlers. These are not cleared by default, leading to potentially unexpected behavior if timers existed prior to starting fake timers session.\n\n### workspace \\* [​](#workspace)\n\n*   **Type:** `string`\n*   **CLI:** `--workspace=./file.js`\n*   **Default:** `vitest.{workspace,projects}.{js,ts,json}` close to the config file or root\n\nPath to a [workspace](https://vitest.dev/guide/workspace) config file relative to [root](#root).\n\n### isolate [​](#isolate)\n\n*   **Type:** `boolean`\n*   **Default:** `true`\n*   **CLI:** `--no-isolate`, `--isolate=false`\n\nRun tests in an isolated environment. This option has no effect on `vmThreads` and `vmForks` pools.\n\nDisabling this option might [improve performance](https://vitest.dev/guide/improving-performance) if your code doesn't rely on side effects (which is usually true for projects with `node` environment).\n\nTIP\n\nYou can disable isolation for specific pools by using [`poolOptions`](#pooloptions) property.\n\n### includeTaskLocation [​](#includeTaskLocation)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n\nShould `location` property be included when Vitest API receives tasks in [reporters](#reporters). If you have a lot of tests, this might cause a small performance regression.\n\nThe `location` property has `column` and `line` values that correspond to the `test` or `describe` position in the original file.\n\nThis option will be auto-enabled if you don't disable it explicitly, and you are running Vitest with:\n\n*   [Vitest UI](https://vitest.dev/guide/ui)\n*   or using the [Browser Mode](https://vitest.dev/guide/browser/) without [headless](https://vitest.dev/guide/browser/#headless) mode\n*   or using [HTML Reporter](https://vitest.dev/guide/reporters#html-reporter)\n\nTIP\n\nThis option has no effect if you do not use custom code that relies on this.\n\n### snapshotEnvironment [​](#snapshotEnvironment)\n\n*   **Type:** `string`\n\nPath to a custom snapshot environment implementation. This is useful if you are running your tests in an environment that doesn't support Node.js APIs. This option doesn't have any effect on a browser runner.\n\nThis object should have the shape of `SnapshotEnvironment` and is used to resolve and read/write snapshot files:\n\nts\n\n```\nexport interface SnapshotEnvironment {\n  getVersion: () => string\n  getHeader: () => string\n  resolvePath: (filepath: string) => Promise<string>\n  resolveRawPath: (testPath: string, rawPath: string) => Promise<string>\n  saveSnapshotFile: (filepath: string, snapshot: string) => Promise<void>\n  readSnapshotFile: (filepath: string) => Promise<string | null>\n  removeSnapshotFile: (filepath: string) => Promise<void>\n}\n```\n\nYou can extend default `VitestSnapshotEnvironment` from `vitest/snapshot` entry point if you need to overwrite only a part of the API.\n\nWARNING\n\nThis is a low-level option and should be used only for advanced cases where you don't have access to default Node.js APIs.\n\nIf you just need to configure snapshots feature, use [`snapshotFormat`](#snapshotformat) or [`resolveSnapshotPath`](#resolvesnapshotpath) options.\n\n### env [​](#env)\n\n*   **Type:** `Partial<NodeJS.ProcessEnv>`\n\nEnvironment variables available on `process.env` and `import.meta.env` during tests. These variables will not be available in the main process (in `globalSetup`, for example).\n\n### expect [​](#expect)\n\n*   **Type:** `ExpectOptions`\n\n#### expect.requireAssertions [​](#expect-requireassertions)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n\nThe same as calling [`expect.hasAssertions()`](https://vitest.dev/api/expect#expect-hasassertions) at the start of every test. This makes sure that no test will pass accidentally.\n\nTIP\n\nThis only works with Vitest's `expect`. If you use `assert` ot `.should` assertions, they will not count, and your test will fail due to the lack of expect assertions.\n\nYou can change the value of this by calling `vi.setConfig({ expect: { requireAssertions: false } })`. The config will be applied to every subsequent `expect` call until the `vi.resetConfig` is called manually.\n\n#### expect.poll [​](#expect-poll)\n\nGlobal configuration options for [`expect.poll`](https://vitest.dev/api/expect#poll). These are the same options you can pass down to `expect.poll(condition, options)`.\n\n##### expect.poll.interval [​](#expect-poll-interval)\n\n*   **Type:** `number`\n*   **Default:** `50`\n\nPolling interval in milliseconds\n\n##### expect.poll.timeout [​](#expect-poll-timeout)\n\n*   **Type:** `number`\n*   **Default:** `1000`\n\nPolling timeout in milliseconds\n\n### printConsoleTrace [​](#printconsoletrace)\n\n*   **Type:** `boolean`\n*   **Default:** `false`\n\nAlways print console traces when calling any `console` method. This is useful for debugging.",
    "title": "Configuring Vitest | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/advanced/api",
    "markdown": "# Node API | Vitest\n\nWARNING\n\nVitest exposes experimental private API. Breaking changes might not follow SemVer, please pin Vitest's version when using it.\n\n## startVitest [​](#startvitest)\n\nYou can start running Vitest tests using its Node API:\n\njs\n\n```\nimport { startVitest } from 'vitest/node'\n\nconst vitest = await startVitest('test')\n\nawait vitest?.close()\n```\n\n`startVitest` function returns `Vitest` instance if tests can be started. It returns `undefined`, if one of the following occurs:\n\n*   Vitest didn't find the `vite` package (usually installed with Vitest)\n*   If coverage is enabled and run mode is \"test\", but the coverage package is not installed (`@vitest/coverage-v8` or `@vitest/coverage-istanbul`)\n*   If the environment package is not installed (`jsdom`/`happy-dom`/`@edge-runtime/vm`)\n\nIf `undefined` is returned or tests failed during the run, Vitest sets `process.exitCode` to `1`.\n\nIf watch mode is not enabled, Vitest will call `close` method.\n\nIf watch mode is enabled and the terminal supports TTY, Vitest will register console shortcuts.\n\nYou can pass down a list of filters as a second argument. Vitest will run only tests that contain at least one of the passed-down strings in their file path.\n\nAdditionally, you can use the third argument to pass in CLI arguments, which will override any test config options.\n\nAlternatively, you can pass in the complete Vite config as the fourth argument, which will take precedence over any other user-defined options.\n\n## createVitest [​](#createvitest)\n\nYou can create Vitest instance yourself using `createVitest` function. It returns the same `Vitest` instance as `startVitest`, but it doesn't start tests and doesn't validate installed packages.\n\njs\n\n```\nimport { createVitest } from 'vitest/node'\n\nconst vitest = await createVitest('test', {\n  watch: false,\n})\n```\n\n## parseCLI [​](#parsecli)\n\nYou can use this method to parse CLI arguments. It accepts a string (where arguments are split by a single space) or a strings array of CLI arguments in the same format that Vitest CLI uses. It returns a filter and `options` that you can later pass down to `createVitest` or `startVitest` methods.\n\nts\n\n```\nimport { parseCLI } from 'vitest/node'\n\nparseCLI('vitest ./files.ts --coverage --browser=chrome')\n```\n\n## Vitest [​](#vitest)\n\nVitest instance requires the current test mode. It can be either:\n\n*   `test` when running runtime tests\n*   `benchmark` when running benchmarks\n\n### mode [​](#mode)\n\n#### test [​](#test)\n\nTest mode will only call functions inside `test` or `it`, and throws an error when `bench` is encountered. This mode uses `include` and `exclude` options in the config to find test files.\n\n#### benchmark [​](#benchmark)\n\nBenchmark mode calls `bench` functions and throws an error, when it encounters `test` or `it`. This mode uses `benchmark.include` and `benchmark.exclude` options in the config to find benchmark files.\n\n### start [​](#start)\n\nYou can start running tests or benchmarks with `start` method. You can pass an array of strings to filter test files.\n\n### `provide` [​](#provide)\n\nVitest exposes `provide` method which is a shorthand for `vitest.getCoreWorkspaceProject().provide`. With this method you can pass down values from the main thread to tests. All values are checked with `structuredClone` before they are stored, but the values themselves are not cloned.\n\nTo recieve the values in the test, you need to import `inject` method from `vitest` entrypont:\n\nts\n\n```\nimport { inject } from 'vitest'\nconst port = inject('wsPort') // 3000\n```\n\nFor better type safety, we encourage you to augment the type of `ProvidedContext`:\n\nts\n\n```\nimport { createVitest } from 'vitest/node'\n\nconst vitest = await createVitest('test', {\n  watch: false,\n})\nvitest.provide('wsPort', 3000)\n\ndeclare module 'vitest' {\n  export interface ProvidedContext {\n    wsPort: number\n  }\n}\n```\n\nWARNING\n\nTechnically, `provide` is a method of `WorkspaceProject`, so it is limited to the specific project. However, all projects inherit the values from the core project which makes `vitest.provide` universal way of passing down values to tests.\n\nTIP\n\nThis method is also available to [global setup files](https://vitest.dev/config/#globalsetup) for cases where you don't want to use the public API:\n\njs\n\n```\nexport default function setup({ provide }) {\n  provide('wsPort', 3000)\n}\n```",
    "title": "Node API | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/team",
    "markdown": "# Meet the Team | Vitest\n\nThe development of Vitest is guided by an international team, some of whom have chosen to be featured below.\n\n![Vladimir](https://vitest.dev/user-avatars/sheremet-va.png)\n\n## Vladimir\n\nAn open source fullstack developer\n\nCore team member of Vitest & Vite\n\n[Sponsor](https://github.com/sponsors/sheremet-va)\n\n![Anthony Fu](https://vitest.dev/user-avatars/antfu.png)\n\n## Anthony Fu\n\nA fanatical open sourceror, working @ [NuxtLabs](https://nuxtlabs.com/)\n\nCore team member of Vite & Vue\n\n[Sponsor](https://github.com/sponsors/antfu)\n\n![Ari Perkkiö](https://vitest.dev/user-avatars/AriPerkkio.png)\n\n## Ari Perkkiö\n\nOpen source engineer, working @ [StackBlitz](https://stackblitz.com/)\n\nCore team member of Vitest\n\n[Sponsor](https://github.com/sponsors/AriPerkkio)\n\n![Patak](https://vitest.dev/user-avatars/patak-dev.png)\n\n## Patak\n\nA collaborative being, working @ [StackBlitz](https://stackblitz.com/)\n\nCore team member of Vite & Vue\n\n[Sponsor](https://github.com/sponsors/patak-dev)\n\n![Joaquín Sánchez](https://vitest.dev/user-avatars/userquin.png)\n\n## Joaquín Sánchez\n\nA fullstack and android developer\n\nVite's fanatical follower\n\n![Dunqing](https://vitest.dev/user-avatars/Dunqing.png)\n\n## Dunqing\n\nA passionate enthusiast of open source contributions\n\nTeam member of Vitest & UnoCSS\n\n![Hiroshi Ogawa](https://vitest.dev/user-avatars/hi-ogawa.png)\n\n## Hiroshi Ogawa\n\nOpen source enthusiast\n\nTeam member of Vitest\n\n## Team Emeriti\n\nHere we honor some no-longer-active team members who have made valuable contributions in the past.\n\n![Mohammad Bagher](https://vitest.dev/user-avatars/Aslemammad.png)\n\n## Mohammad Bagher\n\nAn open source developer\n\nTeam member of Poimandres & Vike\n\n![Ivan Demchuk](https://vitest.dev/user-avatars/Demivan.png)\n\n## Ivan Demchuk\n\nA tech lead, fullstack developer\n\nAuthor of fluent-vue\n\n![Yoho Po](https://vitest.dev/user-avatars/poyoho.png)\n\n## Yoho Po\n\nIt's no problem in my locall\n\nCore team member of Vite & Team member of Vitest\n\n![Zixuan Chen](https://vitest.dev/user-avatars/zxch3n.png)\n\n## Zixuan Chen\n\nA fullstack developer\n\nWorking on CRDTs & local-first software",
    "title": "Meet the Team | Vitest",
    "description": "The development of Vitest is guided by an international team.",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/features",
    "markdown": "# Features | Guide | Vitest\n\n*   [Vite](https://vitejs.dev/)'s config, transformers, resolvers, and plugins\n    \n*   Use the same setup from your app to run the tests!\n    \n\n*   Component testing for Vue, React, Svelte, Lit, Marko and more\n    \n*   Out-of-the-box TypeScript / JSX support\n    \n*   ESM first, top level await\n    \n*   Workers multi-threading via [Tinypool](https://github.com/tinylibs/tinypool)\n    \n\n*   Filtering, timeouts, concurrent for suite and tests\n    \n\n*   Sharding support\n    \n\n[Learn how to write your first test by Video](https://vueschool.io/lessons/your-first-test?friend=vueuse)\n\nVite's config, transformers, resolvers, and plugins. Use the same setup from your app to run the tests.\n\nLearn more at [Configuring Vitest](https://vitest.dev/guide/#configuring-vitest).\n\n## Watch Mode [​](#watch-mode)\n\nWhen you modify your source code or the test files, Vitest smartly searches the module graph and only reruns the related tests, [just like how HMR works in Vite!](https://twitter.com/antfu7/status/1468233216939245579)\n\n`vitest` starts in `watch mode` **by default in development environment** and `run mode` in CI environment (when `process.env.CI` presents) smartly. You can use `vitest watch` or `vitest run` to explicitly specify the desired mode.\n\nStart Vitest with the `--standalone` flag to keep it running in the background. It won't run any tests until they change. Vitest will not run tests if the source code is changed until the test that imports the source has been run\n\n## Common Web Idioms Out-Of-The-Box [​](#common-web-idioms-out-of-the-box)\n\nOut-of-the-box ES Module / TypeScript / JSX support / PostCSS\n\n## Threads [​](#threads)\n\nBy default Vitest runs test files in multiple threads using [`node:worker_threads`](https://nodejs.org/api/worker_threads.html) via [Tinypool](https://github.com/tinylibs/tinypool) (a lightweight fork of [Piscina](https://github.com/piscinajs/piscina)), allowing tests to run simultaneously. If your tests are running code that is not compatible with multi-threading, you can switch to [`--pool=forks`](https://vitest.dev/config/#pool) which runs tests in multiple processes using [`node:child_process`](https://nodejs.org/api/child_process.html) via Tinypool.\n\nTo run tests in a single thread or process, see [`poolOptions`](https://vitest.dev/config/#pooloptions).\n\nVitest also isolates each file's environment so env mutations in one file don't affect others. Isolation can be disabled by passing `--no-isolate` to the CLI (trading correctness for run performance).\n\n## Test Filtering [​](#test-filtering)\n\nVitest provides many ways to narrow down the tests to run in order to speed up testing so you can focus on development.\n\nLearn more about [Test Filtering](https://vitest.dev/guide/filtering).\n\n## Running Tests Concurrently [​](#running-tests-concurrently)\n\nUse `.concurrent` in consecutive tests to run them in parallel.\n\nts\n\n```\nimport { describe, it } from 'vitest'\n\n// The two tests marked with concurrent will be run in parallel\ndescribe('suite', () => {\n  it('serial test', async () => { /* ... */ })\n  it.concurrent('concurrent test 1', async ({ expect }) => { /* ... */ })\n  it.concurrent('concurrent test 2', async ({ expect }) => { /* ... */ })\n})\n```\n\nIf you use `.concurrent` on a suite, every test in it will be run in parallel.\n\nts\n\n```\nimport { describe, it } from 'vitest'\n\n// All tests within this suite will be run in parallel\ndescribe.concurrent('suite', () => {\n  it('concurrent test 1', async ({ expect }) => { /* ... */ })\n  it('concurrent test 2', async ({ expect }) => { /* ... */ })\n  it.concurrent('concurrent test 3', async ({ expect }) => { /* ... */ })\n})\n```\n\nYou can also use `.skip`, `.only`, and `.todo` with concurrent suites and tests. Read more in the [API Reference](https://vitest.dev/api/#test-concurrent).\n\nWARNING\n\nWhen running concurrent tests, Snapshots and Assertions must use `expect` from the local [Test Context](https://vitest.dev/guide/test-context) to ensure the right test is detected.\n\n## Snapshot [​](#snapshot)\n\n[Jest-compatible](https://jestjs.io/docs/snapshot-testing) snapshot support.\n\nts\n\n```\nimport { expect, it } from 'vitest'\n\nit('renders correctly', () => {\n  const result = render()\n  expect(result).toMatchSnapshot()\n})\n```\n\nLearn more at [Snapshot](https://vitest.dev/guide/snapshot).\n\n## Chai and Jest `expect` Compatibility [​](#chai-and-jest-expect-compatibility)\n\n[Chai](https://www.chaijs.com/) is built-in for assertions plus [Jest `expect`](https://jestjs.io/docs/expect)\\-compatible APIs.\n\nNotice that if you are using third-party libraries that add matchers, setting `test.globals` to `true` will provide better compatibility.\n\n## Mocking [​](#mocking)\n\n[Tinyspy](https://github.com/tinylibs/tinyspy) is built-in for mocking with `jest`\\-compatible APIs on `vi` object.\n\nts\n\n```\nimport { expect, vi } from 'vitest'\n\nconst fn = vi.fn()\n\nfn('hello', 1)\n\nexpect(vi.isMockFunction(fn)).toBe(true)\nexpect(fn.mock.calls[0]).toEqual(['hello', 1])\n\nfn.mockImplementation(arg => arg)\n\nfn('world', 2)\n\nexpect(fn.mock.results[1].value).toBe('world')\n```\n\nVitest supports both [happy-dom](https://github.com/capricorn86/happy-dom) or [jsdom](https://github.com/jsdom/jsdom) for mocking DOM and browser APIs. They don't come with Vitest, you might need to install them:\n\nbash\n\n```\n$ npm i -D happy-dom\n# or\n$ npm i -D jsdom\n```\n\nAfter that, change the `environment` option in your config file:\n\nts\n\n```\n// vitest.config.ts\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    environment: 'happy-dom', // or 'jsdom', 'node'\n  },\n})\n```\n\nLearn more at [Mocking](https://vitest.dev/guide/mocking).\n\n## Coverage [​](#coverage)\n\nVitest supports Native code coverage via [`v8`](https://v8.dev/blog/javascript-code-coverage) and instrumented code coverage via [`istanbul`](https://istanbul.js.org/).\n\njson\n\n```\n{\n  \"scripts\": {\n    \"test\": \"vitest\",\n    \"coverage\": \"vitest run --coverage\"\n  }\n}\n```\n\nLearn more at [Coverage](https://vitest.dev/guide/coverage).\n\n## In-Source Testing [​](#in-source-testing)\n\nVitest also provides a way to run tests within your source code along with the implementation, similar to [Rust's module tests](https://doc.rust-lang.org/book/ch11-03-test-organization.html#the-tests-module-and-cfgtest).\n\nThis makes the tests share the same closure as the implementations and able to test against private states without exporting. Meanwhile, it also brings the feedback loop closer for development.\n\nts\n\n```\n// src/index.ts\n\n// the implementation\nexport function add(...args: number[]) {\n  return args.reduce((a, b) => a + b, 0)\n}\n\n// in-source test suites\nif (import.meta.vitest) {\n  const { it, expect } = import.meta.vitest\n  it('add', () => {\n    expect(add()).toBe(0)\n    expect(add(1)).toBe(1)\n    expect(add(1, 2, 3)).toBe(6)\n  })\n}\n```\n\nLearn more at [In-source testing](https://vitest.dev/guide/in-source).\n\n## Benchmarking Experimental [​](#benchmarking)\n\nYou can run benchmark tests with [`bench`](https://vitest.dev/api/#bench) function via [Tinybench](https://github.com/tinylibs/tinybench) to compare performance results.\n\nts\n\n```\nimport { bench, describe } from 'vitest'\n\ndescribe('sort', () => {\n  bench('normal', () => {\n    const x = [1, 5, 4, 2, 3]\n    x.sort((a, b) => {\n      return a - b\n    })\n  })\n\n  bench('reverse', () => {\n    const x = [1, 5, 4, 2, 3]\n    x.reverse().sort((a, b) => {\n      return a - b\n    })\n  })\n})\n```\n\n![Benchmark report](https://github.com/vitest-dev/vitest/assets/4232207/6f0383ea-38ba-4f14-8a05-ab243afea01d)![Benchmark report](https://github.com/vitest-dev/vitest/assets/4232207/efbcb427-ecf1-4882-88de-210cd73415f6)\n\n## Type Testing Experimental [​](#type-testing)\n\nYou can [write tests](https://vitest.dev/guide/testing-types) to catch type regressions. Vitest comes with [`expect-type`](https://github.com/mmkal/expect-type) package to provide you with a similar and easy to understand API.\n\nts\n\n```\nimport { assertType, expectTypeOf } from 'vitest'\nimport { mount } from './mount.js'\n\ntest('my types work properly', () => {\n  expectTypeOf(mount).toBeFunction()\n  expectTypeOf(mount).parameter(0).toMatchTypeOf<{ name: string }>()\n\n  // @ts-expect-error name is a string\n  assertType(mount({ name: 42 }))\n})\n```\n\n## Sharding [​](#sharding)\n\nRun tests on different machines using [`--shard`](https://vitest.dev/guide/cli#shard) and [`--reporter=blob`](https://vitest.dev/guide/reporters#blob-reporter) flags. All test and coverage results can be merged at the end of your CI pipeline using `--merge-reports` command:\n\nbash\n\n```\nvitest --shard=1/2 --reporter=blob\nvitest --shard=2/2 --reporter=blob\nvitest --merge-reports --reporter=junit --coverage.reporter=text\n```\n\nSee [`Improving Performance | Sharding`](https://vitest.dev/guide/improving-performance#sharding) for more information.",
    "title": "Features | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/why",
    "markdown": "# Why Vitest | Guide | Vitest\n\n## The Need for a Vite Native Test Runner [​](#the-need-for-a-vite-native-test-runner)\n\nVite's out-of-the-box support for common web patterns, features like glob imports and SSR primitives, and its many plugins and integrations are fostering a vibrant ecosystem. Its dev and build story are key to its success. For docs, there are several SSG-based alternatives powered by Vite. Vite's Unit Testing story hasn't been clear though. Existing options like [Jest](https://jestjs.io/) were created in a different context. There is a lot of duplication between Jest and Vite, forcing users to configure two different pipelines.\n\nUsing Vite dev server to transform your files during testing, enables the creation of a simple runner that doesn't need to deal with the complexity of transforming source files and can solely focus on providing the best DX during testing. A test runner that uses the same configuration of your App (through `vite.config.js`), sharing a common transformation pipeline during dev, build, and test time. That is extensible with the same plugin API that lets you and the maintainers of your tools provide first-class integration with Vite. A tool that is built with Vite in mind from the start, taking advantage of its improvements in DX, like its instant Hot Module Reload (HMR). This is Vitest, a next generation testing framework powered by Vite.\n\nGiven Jest's massive adoption, Vitest provides a compatible API that allows you to use it as a drop-in replacement in most projects. It also includes the most common features required when setting up your unit tests (mocking, snapshots, coverage). Vitest cares a lot about performance and uses Worker threads to run as much as possible in parallel. Some ports have seen test running an order of magnitude faster. Watch mode is enabled by default, aligning itself with the way Vite pushes for a dev first experience. Even with all these improvements in DX, Vitest stays lightweight by carefully choosing its dependencies (or directly inlining needed pieces).\n\n**Vitest aims to position itself as the Test Runner of choice for Vite projects, and as a solid alternative even for projects not using Vite.**\n\nContinue reading in the [Getting Started Guide](https://vitest.dev/guide/)\n\n## How is Vitest Different from X? [​](#how-is-vitest-different-from-x)\n\nYou can check out the [Comparisons](https://vitest.dev/guide/comparisons) section for more details on how Vitest differs from other similar tools.",
    "title": "Why Vitest | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/workspace",
    "markdown": "# Workspace | Guide | Vitest\n\nVitest provides built-in support for monorepos through a workspace configuration file. You can create a workspace to define your project's setups.\n\n## Defining a Workspace [​](#defining-a-workspace)\n\nA workspace should have a `vitest.workspace` or `vitest.projects` file in its root (in the same folder as your config file if you have one). Vitest supports `ts`/`js`/`json` extensions for this file.\n\nWorkspace configuration file should have a default export with a list of files or glob patterns referencing your projects. For example, if you have a folder named `packages` that contains your projects, you can define a workspace with this config file:\n\nvitest.workspace.ts\n\nts\n\n```\nexport default [\n  'packages/*'\n]\n```\n\nVitest will consider every folder in `packages` as a separate project even if it doesn't have a config file inside.\n\nWARNING\n\nVitest will not consider the root config as a workspace project (so it will not run tests specified in `include`) unless it is specified in this config.\n\nYou can also reference projects with their config files:\n\nvitest.workspace.ts\n\nts\n\n```\nexport default [\n  'packages/*/vitest.config.{e2e,unit}.ts'\n]\n```\n\nThis pattern will only include projects with `vitest.config` file that includes `e2e` and `unit` before the extension.\n\nWARNING\n\nIf you are referencing filenames with glob pattern, make sure your config file starts with `vite.config` or `vitest.config`. Otherwise Vitest will skip it.\n\nYou can also define projects with inline config. Workspace file supports using both syntaxes at the same time.\n\nvitest.workspace.ts\n\nts\n\n```\nimport { defineWorkspace } from 'vitest/config'\n\n// defineWorkspace provides a nice type hinting DX\nexport default defineWorkspace([\n  'packages/*',\n  {\n    // add \"extends\" to merge two configs together\n    extends: './vite.config.js',\n    test: {\n      include: ['tests/**/*.{browser}.test.{ts,js}'],\n      // it is recommended to define a name when using inline configs\n      name: 'happy-dom',\n      environment: 'happy-dom',\n    }\n  },\n  {\n    test: {\n      include: ['tests/**/*.{node}.test.{ts,js}'],\n      name: 'node',\n      environment: 'node',\n    }\n  }\n])\n```\n\nWARNING\n\nAll projects should have unique names. Otherwise, Vitest will throw an error. If you do not provide a name inside the inline config, Vitest will assign a number. If you don't provide a name inside a project config defined with glob syntax, Vitest will use the directory name by default.\n\nIf you don't rely on inline configs, you can just create a small json file in your root directory:\n\nWorkspace projects don't support all configuration properties. For better type safety, use `defineProject` instead of `defineConfig` method inside project configuration files:\n\npackages/a/vitest.config.ts\n\nts\n\n```\nimport { defineProject } from 'vitest/config'\n\nexport default defineProject({\n  test: {\n    environment: 'jsdom',\n    // \"reporters\" is not supported in a project config,\n    // so it will show an error\n    reporters: ['json']\n  }\n})\n```\n\n## Running tests [​](#running-tests)\n\nTo run tests inside the workspace, define a script in your root `package.json`:\n\njson\n\n```\n{\n  \"scripts\": {\n    \"test\": \"vitest\"\n  }\n}\n```\n\nNow tests can be run using your package manager:\n\nIf you need to run tests only inside a single project, use the `--project` CLI option:\n\nbash\n\n```\nnpm run test --project e2e\n```\n\nTIP\n\nCLI option `--project` can be used multiple times to filter out several projects:\n\nbash\n\n```\nnpm run test --project e2e --project unit\n```\n\n## Configuration [​](#configuration)\n\nNone of the configuration options are inherited from the root-level config file. You can create a shared config file and merge it with the project config yourself:\n\npackages/a/vitest.config.ts\n\nts\n\n```\nimport { defineProject, mergeConfig } from 'vitest/config'\nimport configShared from '../vitest.shared.js'\n\nexport default mergeConfig(\n  configShared,\n  defineProject({\n    test: {\n      environment: 'jsdom',\n    }\n  })\n)\n```\n\nAlso, some of the configuration options are not allowed in a project config. Most notably:\n\n*   `coverage`: coverage is done for the whole workspace\n*   `reporters`: only root-level reporters can be supported\n*   `resolveSnapshotPath`: only root-level resolver is respected\n*   all other options that don't affect test runners\n\nTIP\n\nAll configuration options that are not supported inside a project config have \\* sign next them in [\"Config\"](https://vitest.dev/config/) page.\n\n## Coverage [​](#coverage)\n\nCoverage for workspace projects works out of the box. But if you have [`all`](https://vitest.dev/config/#coverage-all) option enabled and use non-conventional extensions in some of your projects, you will need to have a plugin that handles this extension in your root configuration file.\n\nFor example, if you have a package that uses Vue files and it has its own config file, but some of the files are not imported in your tests, coverage will fail trying to analyze the usage of unused files, because it relies on the root configuration rather than project configuration.",
    "title": "Workspace | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/cli",
    "markdown": "# Command Line Interface | Guide\n\n## Commands [​](#commands)\n\n### `vitest` [​](#vitest)\n\nStart Vitest in the current directory. Will enter the watch mode in development environment and run mode in CI automatically.\n\nYou can pass an additional argument as the filter of the test files to run. For example:\n\nWill run only the test file that contains `foobar` in their paths. This filter only checks inclusion and doesn't support regexp or glob patterns (unless your terminal processes it before Vitest receives the filter).\n\n### `vitest run` [​](#vitest-run)\n\nPerform a single run without watch mode.\n\n### `vitest watch` [​](#vitest-watch)\n\nRun all test suites but watch for changes and rerun tests when they change. Same as calling `vitest` without an argument. Will fallback to `vitest run` in CI.\n\n### `vitest dev` [​](#vitest-dev)\n\nAlias to `vitest watch`.\n\n### `vitest related` [​](#vitest-related)\n\nRun only tests that cover a list of source files. Works with static imports (e.g., `import('./index.js')` or `import index from './index.js`), but not the dynamic ones (e.g., `import(filepath)`). All files should be relative to root folder.\n\nUseful to run with [`lint-staged`](https://github.com/okonet/lint-staged) or with your CI setup.\n\nbash\n\n```\nvitest related /src/index.ts /src/hello-world.js\n```\n\nTIP\n\nDon't forget that Vitest runs with enabled watch mode by default. If you are using tools like `lint-staged`, you should also pass `--run` option, so that command can exit normally.\n\njs\n\n```\n// .lintstagedrc.js\nexport default {\n  '*.{js,ts}': 'vitest related --run',\n}\n```\n\n### `vitest bench` [​](#vitest-bench)\n\nRun only [benchmark](https://vitest.dev/guide/features#benchmarking-experimental) tests, which compare performance results.\n\n### `vitest init` [​](#vitest-init)\n\n`vitest init <name>` can be used to setup project configuration. At the moment, it only supports [`browser`](https://vitest.dev/guide/browser/) value:\n\n### `vitest list` [​](#vitest-list)\n\n`vitest list` command inherits all `vitest` options to print the list of all matching tests. This command ignores `reporters` option. By default, it will print the names of all tests that matched the file filter and name pattern:\n\nshell\n\n```\nvitest list filename.spec.ts -t=\"some-test\"\n```\n\ntxt\n\n```\ndescribe > some-test\ndescribe > some-test > test 1\ndescribe > some-test > test 2\n```\n\nYou can pass down `--json` flag to print tests in JSON format or save it in a separate file:\n\nbash\n\n```\nvitest list filename.spec.ts -t=\"some-test\" --json=./file.json\n```\n\nIf `--json` flag doesn't receive a value, it will output the JSON into stdout.\n\n## Options [​](#options)\n\n| Options |     |\n| --- | --- |\n| `-r, --root <path>` | Root path |\n| `-c, --config <path>` | Path to config file |\n| `-u, --update` | Update snapshot |\n| `-w, --watch` | Enable watch mode |\n| `-t, --testNamePattern <pattern>` | Run tests with full names matching the specified regexp pattern |\n| `--dir <path>` | Base directory to scan for the test files |\n| `--ui` | Enable UI |\n| `--open` | Open UI automatically (default: `!process.env.CI`) |\n| `--api.port [port]` | Specify server port. Note if the port is already being used, Vite will automatically try the next available port so this may not be the actual port the server ends up listening on. If true will be set to `51204` |\n| `--api.host [host]` | Specify which IP addresses the server should listen on. Set this to `0.0.0.0` or `true` to listen on all addresses, including LAN and public addresses |\n| `--api.strictPort` | Set to true to exit if port is already in use, instead of automatically trying the next available port |\n| `--silent` | Silent console output from tests |\n| `--hideSkippedTests` | Hide logs for skipped tests |\n| `--reporter <name>` | Specify reporters |\n| `--outputFile <filename/-s>` | Write test results to a file when supporter reporter is also specified, use cac's dot notation for individual outputs of multiple reporters (example: --outputFile.tap=./tap.txt) |\n| `--coverage.all` | Whether to include all files, including the untested ones into report |\n| `--coverage.provider <name>` | Select the tool for coverage collection, available values are: \"v8\", \"istanbul\" and \"custom\" |\n| `--coverage.enabled` | Enables coverage collection. Can be overridden using the `--coverage` CLI option (default: `false`) |\n| `--coverage.include <pattern>` | Files included in coverage as glob patterns. May be specified more than once when using multiple patterns (default: `**`) |\n| `--coverage.exclude <pattern>` | Files to be excluded in coverage. May be specified more than once when using multiple extensions (default: Visit [`coverage.exclude`](https://vitest.dev/config/#coverage-exclude)) |\n| `--coverage.extension <extension>` | Extension to be included in coverage. May be specified more than once when using multiple extensions (default: `[\".js\", \".cjs\", \".mjs\", \".ts\", \".mts\", \".cts\", \".tsx\", \".jsx\", \".vue\", \".svelte\"]`) |\n| `--coverage.clean` | Clean coverage results before running tests (default: true) |\n| `--coverage.cleanOnRerun` | Clean coverage report on watch rerun (default: true) |\n| `--coverage.reportsDirectory <path>` | Directory to write coverage report to (default: ./coverage) |\n| `--coverage.reporter <name>` | Coverage reporters to use. Visit [`coverage.reporter`](https://vitest.dev/config/#coverage-reporter) for more information (default: `[\"text\", \"html\", \"clover\", \"json\"]`) |\n| `--coverage.reportOnFailure` | Generate coverage report even when tests fail (default: `false`) |\n| `--coverage.allowExternal` | Collect coverage of files outside the project root (default: `false`) |\n| `--coverage.skipFull` | Do not show files with 100% statement, branch, and function coverage (default: `false`) |\n| `--coverage.thresholds.100` | Shortcut to set all coverage thresholds to 100 (default: `false`) |\n| `--coverage.thresholds.perFile` | Check thresholds per file. See `--coverage.thresholds.lines`, `--coverage.thresholds.functions`, `--coverage.thresholds.branches` and `--coverage.thresholds.statements` for the actual thresholds (default: `false`) |\n| `--coverage.thresholds.autoUpdate` | Update threshold values: \"lines\", \"functions\", \"branches\" and \"statements\" to configuration file when current coverage is above the configured thresholds (default: `false`) |\n| `--coverage.thresholds.lines <number>` | Threshold for lines. Visit [istanbuljs](https://github.com/istanbuljs/nyc#coverage-thresholds) for more information. This option is not available for custom providers |\n| `--coverage.thresholds.functions <number>` | Threshold for functions. Visit [istanbuljs](https://github.com/istanbuljs/nyc#coverage-thresholds) for more information. This option is not available for custom providers |\n| `--coverage.thresholds.branches <number>` | Threshold for branches. Visit [istanbuljs](https://github.com/istanbuljs/nyc#coverage-thresholds) for more information. This option is not available for custom providers |\n| `--coverage.thresholds.statements <number>` | Threshold for statements. Visit [istanbuljs](https://github.com/istanbuljs/nyc#coverage-thresholds) for more information. This option is not available for custom providers |\n| `--coverage.ignoreClassMethods <name>` | Array of class method names to ignore for coverage. Visit [istanbuljs](https://github.com/istanbuljs/nyc#ignoring-methods) for more information. This option is only available for the istanbul providers (default: `[]`) |\n| `--coverage.processingConcurrency <number>` | Concurrency limit used when processing the coverage results. (default min between 20 and the number of CPUs) |\n| `--coverage.customProviderModule <path>` | Specifies the module name or path for the custom coverage provider module. Visit [Custom Coverage Provider](https://vitest.dev/guide/coverage#custom-coverage-provider) for more information. This option is only available for custom providers |\n| `--coverage.watermarks.statements <watermarks>` | High and low watermarks for statements in the format of `<high>,<low>` |\n| `--coverage.watermarks.lines <watermarks>` | High and low watermarks for lines in the format of `<high>,<low>` |\n| `--coverage.watermarks.branches <watermarks>` | High and low watermarks for branches in the format of `<high>,<low>` |\n| `--coverage.watermarks.functions <watermarks>` | High and low watermarks for functions in the format of `<high>,<low>` |\n| `--mode <name>` | Override Vite mode (default: `test` or `benchmark`) |\n| `--workspace <path>` | Path to a workspace configuration file |\n| `--isolate` | Run every test file in isolation. To disable isolation, use `--no-isolate` (default: `true`) |\n| `--globals` | Inject apis globally |\n| `--dom` | Mock browser API with happy-dom |\n| `--browser.enabled` | Run tests in the browser. Equivalent to `--browser.enabled` (default: `false`) |\n| `--browser.name <name>` | Run all tests in a specific browser. Some browsers are only available for specific providers (see `--browser.provider`). Visit [`browser.name`](https://vitest.dev/config/#browser-name) for more information |\n| `--browser.headless` | Run the browser in headless mode (i.e. without opening the GUI (Graphical User Interface)). If you are running Vitest in CI, it will be enabled by default (default: `process.env.CI`) |\n| `--browser.api.port [port]` | Specify server port. Note if the port is already being used, Vite will automatically try the next available port so this may not be the actual port the server ends up listening on. If true will be set to `63315` |\n| `--browser.api.host [host]` | Specify which IP addresses the server should listen on. Set this to `0.0.0.0` or `true` to listen on all addresses, including LAN and public addresses |\n| `--browser.api.strictPort` | Set to true to exit if port is already in use, instead of automatically trying the next available port |\n| `--browser.provider <name>` | Provider used to run browser tests. Some browsers are only available for specific providers. Can be \"webdriverio\", \"playwright\", \"preview\", or the path to a custom provider. Visit [`browser.provider`](https://vitest.dev/config/#browser-provider) for more information (default: `\"preview\"`) |\n| `--browser.providerOptions <options>` | Options that are passed down to a browser provider. Visit [`browser.providerOptions`](https://vitest.dev/config/#browser-provideroptions) for more information |\n| `--browser.isolate` | Run every browser test file in isolation. To disable isolation, use `--browser.isolate=false` (default: `true`) |\n| `--browser.ui` | Show Vitest UI when running tests (default: `!process.env.CI`) |\n| `--browser.fileParallelism` | Should browser test files run in parallel. Use `--browser.fileParallelism=false` to disable (default: `true`) |\n| `--pool <pool>` | Specify pool, if not running in the browser (default: `threads`) |\n| `--poolOptions.threads.isolate` | Isolate tests in threads pool (default: `true`) |\n| `--poolOptions.threads.singleThread` | Run tests inside a single thread (default: `false`) |\n| `--poolOptions.threads.maxThreads <workers>` | Maximum number or percentage of threads to run tests in |\n| `--poolOptions.threads.minThreads <workers>` | Minimum number or percentage of threads to run tests in |\n| `--poolOptions.threads.useAtomics` | Use Atomics to synchronize threads. This can improve performance in some cases, but might cause segfault in older Node versions (default: `false`) |\n| `--poolOptions.vmThreads.isolate` | Isolate tests in threads pool (default: `true`) |\n| `--poolOptions.vmThreads.singleThread` | Run tests inside a single thread (default: `false`) |\n| `--poolOptions.vmThreads.maxThreads <workers>` | Maximum number or percentage of threads to run tests in |\n| `--poolOptions.vmThreads.minThreads <workers>` | Minimum number or percentage of threads to run tests in |\n| `--poolOptions.vmThreads.useAtomics` | Use Atomics to synchronize threads. This can improve performance in some cases, but might cause segfault in older Node versions (default: `false`) |\n| `--poolOptions.vmThreads.memoryLimit <limit>` | Memory limit for VM threads pool. If you see memory leaks, try to tinker this value. |\n| `--poolOptions.forks.isolate` | Isolate tests in forks pool (default: `true`) |\n| `--poolOptions.forks.singleFork` | Run tests inside a single child\\_process (default: `false`) |\n| `--poolOptions.forks.maxForks <workers>` | Maximum number or percentage of processes to run tests in |\n| `--poolOptions.forks.minForks <workers>` | Minimum number or percentage of processes to run tests in |\n| `--poolOptions.vmForks.isolate` | Isolate tests in forks pool (default: `true`) |\n| `--poolOptions.vmForks.singleFork` | Run tests inside a single child\\_process (default: `false`) |\n| `--poolOptions.vmForks.maxForks <workers>` | Maximum number or percentage of processes to run tests in |\n| `--poolOptions.vmForks.minForks <workers>` | Minimum number or percentage of processes to run tests in |\n| `--poolOptions.vmForks.memoryLimit <limit>` | Memory limit for VM forks pool. If you see memory leaks, try to tinker this value. |\n| `--fileParallelism` | Should all test files run in parallel. Use `--no-file-parallelism` to disable (default: `true`) |\n| `--maxWorkers <workers>` | Maximum number of workers to run tests in |\n| `--minWorkers <workers>` | Minimum number of workers to run tests in |\n| `--environment <name>` | Specify runner environment, if not running in the browser (default: `node`) |\n| `--passWithNoTests` | Pass when no tests are found |\n| `--logHeapUsage` | Show the size of heap for each test when running in node |\n| `--allowOnly` | Allow tests and suites that are marked as only (default: `!process.env.CI`) |\n| `--dangerouslyIgnoreUnhandledErrors` | Ignore any unhandled errors that occur |\n| `--shard <shards>` | Test suite shard to execute in a format of `<index>/<count>` |\n| `--changed [since]` | Run tests that are affected by the changed files (default: `false`) |\n| `--sequence.shuffle.files` | Run files in a random order. Long running tests will not start earlier if you enable this option. (default: `false`) |\n| `--sequence.shuffle.tests` | Run tests in a random order (default: `false`) |\n| `--sequence.concurrent` | Make tests run in parallel (default: `false`) |\n| `--sequence.seed <seed>` | Set the randomization seed. This option will have no effect if --sequence.shuffle is falsy. Visit [\"Random Seed\" page](https://en.wikipedia.org/wiki/Random_seed) for more information |\n| `--sequence.hooks <order>` | Changes the order in which hooks are executed. Accepted values are: \"stack\", \"list\" and \"parallel\". Visit [`sequence.hooks`](https://vitest.dev/config/#sequence-hooks) for more information (default: `\"parallel\"`) |\n| `--sequence.setupFiles <order>` | Changes the order in which setup files are executed. Accepted values are: \"list\" and \"parallel\". If set to \"list\", will run setup files in the order they are defined. If set to \"parallel\", will run setup files in parallel (default: `\"parallel\"`) |\n| `--inspect [[host:]port]` | Enable Node.js inspector (default: `127.0.0.1:9229`) |\n| `--inspectBrk [[host:]port]` | Enable Node.js inspector and break before the test starts |\n| `--testTimeout <timeout>` | Default timeout of a test in milliseconds (default: `5000`) |\n| `--hookTimeout <timeout>` | Default hook timeout in milliseconds (default: `10000`) |\n| `--bail <number>` | Stop test execution when given number of tests have failed (default: `0`) |\n| `--retry <times>` | Retry the test specific number of times if it fails (default: `0`) |\n| `--diff <path>` | Path to a diff config that will be used to generate diff interface |\n| `--exclude <glob>` | Additional file globs to be excluded from test |\n| `--expandSnapshotDiff` | Show full diff when snapshot fails |\n| `--disableConsoleIntercept` | Disable automatic interception of console logging (default: `false`) |\n| `--typecheck.enabled` | Enable typechecking alongside tests (default: `false`) |\n| `--typecheck.only` | Run only typecheck tests. This automatically enables typecheck (default: `false`) |\n| `--typecheck.checker <name>` | Specify the typechecker to use. Available values are: \"tsc\" and \"vue-tsc\" and a path to an executable (default: `\"tsc\"`) |\n| `--typecheck.allowJs` | Allow JavaScript files to be typechecked. By default takes the value from tsconfig.json |\n| `--typecheck.ignoreSourceErrors` | Ignore type errors from source files |\n| `--typecheck.tsconfig <path>` | Path to a custom tsconfig file |\n| `--project <name>` | The name of the project to run if you are using Vitest workspace feature. This can be repeated for multiple projects: `--project=1 --project=2`. You can also filter projects using wildcards like `--project=packages*` |\n| `--slowTestThreshold <threshold>` | Threshold in milliseconds for a test to be considered slow (default: `300`) |\n| `--teardownTimeout <timeout>` | Default timeout of a teardown function in milliseconds (default: `10000`) |\n| `--maxConcurrency <number>` | Maximum number of concurrent tests in a suite (default: `5`) |\n| `--expect.requireAssertions` | Require that all tests have at least one assertion |\n| `--expect.poll.interval <interval>` | Poll interval in milliseconds for `expect.poll()` assertions (default: `50`) |\n| `--expect.poll.timeout <timeout>` | Poll timeout in milliseconds for `expect.poll()` assertions (default: `1000`) |\n| `--printConsoleTrace` | Always print console stack traces |\n| `--run` | Disable watch mode |\n| `--no-color` | Removes colors from the console output |\n| `--clearScreen` | Clear terminal screen when re-running tests during watch mode (default: `true`) |\n| `--standalone` | Start Vitest without running tests. File filters will be ignored, tests will be running only on change (default: `false`) |\n| `--mergeReports [path]` | Paths to blob reports directory. If this options is used, Vitest won't run any tests, it will only report previously recorded tests |\n\nTIP\n\nVitest supports both camel case and kebab case for CLI arguments. For example, `--passWithNoTests` and `--pass-with-no-tests` will both work (`--no-color` and `--inspect-brk` are the exceptions).\n\nVitest also supports different ways of specifying the value: `--reporter dot` and `--reporter=dot` are both valid.\n\nIf option supports an array of values, you need to pass the option multiple times:\n\n```\nvitest --reporter=dot --reporter=default\n```\n\nBoolean options can be negated with `no-` prefix. Specifying the value as `false` also works:\n\n```\nvitest --no-api\nvitest --api=false\n```\n\n### changed [​](#changed)\n\n*   **Type**: `boolean | string`\n    \n*   **Default**: false\n    \n    Run tests only against changed files. If no value is provided, it will run tests against uncommitted changes (including staged and unstaged).\n    \n    To run tests against changes made in the last commit, you can use `--changed HEAD~1`. You can also pass commit hash (e.g. `--changed 09a9920`) or branch name (e.g. `--changed origin/develop`).\n    \n    When used with code coverage the report will contain only the files that were related to the changes.\n    \n    If paired with the [`forceRerunTriggers`](https://vitest.dev/config/#forcereruntriggers) config option it will run the whole test suite if at least one of the files listed in the `forceRerunTriggers` list changes. By default, changes to the Vitest config file and `package.json` will always rerun the whole suite.\n    \n\n### shard [​](#shard)\n\n*   **Type**: `string`\n    \n*   **Default**: disabled\n    \n    Test suite shard to execute in a format of `<index>`/`<count>`, where\n    \n    *   `count` is a positive integer, count of divided parts\n    *   `index` is a positive integer, index of divided part\n    \n    This command will divide all tests into `count` equal parts, and will run only those that happen to be in an `index` part. For example, to split your tests suite into three parts, use this:\n    \n    sh\n    \n    ```\n    vitest run --shard=1/3\n    vitest run --shard=2/3\n    vitest run --shard=3/3\n    ```\n    \n\nWARNING\n\nYou cannot use this option with `--watch` enabled (enabled in dev by default).\n\nTIP\n\nIf `--reporter=blob` is used without an output file, the default path will include the current shard config to avoid collisions with other Vitest processes.\n\n### merge-reports [​](#merge-reports)\n\n*   **Type:** `boolean | string`\n\nMerges every blob report located in the specified folder (`.vitest-reports` by default). You can use any reporters with this command (except [`blob`](https://vitest.dev/guide/reporters#blob-reporter)):\n\nsh\n\n```\nvitest --merge-reports --reporter=junit\n```",
    "title": "Command Line Interface | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/filtering",
    "markdown": "# Test Filtering | Guide | Vitest\n\nFiltering, timeouts, concurrent for suite and tests\n\n## CLI [​](#cli)\n\nYou can use CLI to filter test files by name:\n\nWill only execute test files that contain `basic`, e.g.\n\n```\nbasic.test.ts\nbasic-foo.test.ts\nbasic/foo.test.ts\n```\n\nYou can also use the `-t, --testNamePattern <pattern>` option to filter tests by full name. This can be helpful when you want to filter by the name defined within a file rather than the filename itself.\n\n## Specifying a Timeout [​](#specifying-a-timeout)\n\nYou can optionally pass a timeout in milliseconds as third argument to tests. The default is 5 seconds.\n\nts\n\n```\nimport { test } from 'vitest'\n\ntest('name', async () => { /* ... */ }, 1000)\n```\n\nHooks also can receive a timeout, with the same 5 seconds default.\n\nts\n\n```\nimport { beforeAll } from 'vitest'\n\nbeforeAll(async () => { /* ... */ }, 1000)\n```\n\n## Skipping Suites and Tests [​](#skipping-suites-and-tests)\n\nUse `.skip` to avoid running certain suites or tests\n\nts\n\n```\nimport { assert, describe, it } from 'vitest'\n\ndescribe.skip('skipped suite', () => {\n  it('test', () => {\n    // Suite skipped, no error\n    assert.equal(Math.sqrt(4), 3)\n  })\n})\n\ndescribe('suite', () => {\n  it.skip('skipped test', () => {\n    // Test skipped, no error\n    assert.equal(Math.sqrt(4), 3)\n  })\n})\n```\n\n## Selecting Suites and Tests to Run [​](#selecting-suites-and-tests-to-run)\n\nUse `.only` to only run certain suites or tests\n\nts\n\n```\nimport { assert, describe, it } from 'vitest'\n\n// Only this suite (and others marked with only) are run\ndescribe.only('suite', () => {\n  it('test', () => {\n    assert.equal(Math.sqrt(4), 3)\n  })\n})\n\ndescribe('another suite', () => {\n  it('skipped test', () => {\n    // Test skipped, as tests are running in Only mode\n    assert.equal(Math.sqrt(4), 3)\n  })\n\n  it.only('test', () => {\n    // Only this test (and others marked with only) are run\n    assert.equal(Math.sqrt(4), 2)\n  })\n})\n```\n\n## Unimplemented Suites and Tests [​](#unimplemented-suites-and-tests)\n\nUse `.todo` to stub suites and tests that should be implemented\n\nts\n\n```\nimport { describe, it } from 'vitest'\n\n// An entry will be shown in the report for this suite\ndescribe.todo('unimplemented suite')\n\n// An entry will be shown in the report for this test\ndescribe('suite', () => {\n  it.todo('unimplemented test')\n})\n```",
    "title": "Test Filtering | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/reporters",
    "markdown": "# Reporters | Guide | Vitest\n\nVitest provides several built-in reporters to display test output in different formats, as well as the ability to use custom reporters. You can select different reporters either by using the `--reporter` command line option, or by including a `reporters` property in your [configuration file](https://vitest.dev/config/#reporters). If no reporter is specified, Vitest will use the `default` reporter as described below.\n\nUsing reporters via command line:\n\nbash\n\n```\nnpx vitest --reporter=verbose\n```\n\nUsing reporters via [`vitest.config.ts`](https://vitest.dev/config/):\n\nts\n\n```\n/// <reference types=\"vitest\" />\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  test: {\n    reporters: ['verbose']\n  },\n})\n```\n\nSome reporters can be customized by passing additional options to them. Reporter specific options are described in sections below.\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    reporters: [\n      'default',\n      ['junit', { suiteName: 'UI tests' }]\n    ],\n  },\n})\n```\n\n## Reporter Output [​](#reporter-output)\n\nBy default, Vitest's reporters will print their output to the terminal. When using the `json`, `html` or `junit` reporters, you can instead write your tests' output to a file by including an `outputFile` [configuration option](https://vitest.dev/config/#outputfile) either in your Vite configuration file or via CLI.\n\nCLIvitest.config.ts\n\nbash\n\n```\nnpx vitest --reporter=json --outputFile=./test-output.json\n```\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    reporters: ['json'],\n    outputFile: './test-output.json'\n  },\n})\n```\n\n## Combining Reporters [​](#combining-reporters)\n\nYou can use multiple reporters simultaneously to print your test results in different formats. For example:\n\nbash\n\n```\nnpx vitest --reporter=json --reporter=default\n```\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    reporters: ['json', 'default'],\n    outputFile: './test-output.json'\n  },\n})\n```\n\nThe above example will both print the test results to the terminal in the default style and write them as JSON to the designated output file.\n\nWhen using multiple reporters, it's also possible to designate multiple output files, as follows:\n\nts\n\n```\nexport default defineConfig({\n  reporters: ['junit', 'json', 'verbose'],\n  outputFile: {\n    junit: './junit-report.xml',\n    json: './json-report.json',\n  },\n})\n```\n\nThis example will write separate JSON and XML reports as well as printing a verbose report to the terminal.\n\n## Built-in Reporters [​](#built-in-reporters)\n\n### Default Reporter [​](#default-reporter)\n\nBy default (i.e. if no reporter is specified), Vitest will display results for each test suite hierarchically as they run, and then collapse after a suite passes. When all tests have finished running, the final terminal output will display a summary of results and details of any failed tests.\n\nExample output for tests in progress:\n\nbash\n\n```\n✓ __tests__/file1.test.ts (2) 725ms\n✓ __tests__/file2.test.ts (5) 746ms\n  ✓ second test file (2) 746ms\n    ✓ 1 + 1 should equal 2\n    ✓ 2 - 1 should equal 1\n```\n\nFinal output after tests have finished:\n\nbash\n\n```\n✓ __tests__/file1.test.ts (2) 725ms\n✓ __tests__/file2.test.ts (2) 746ms\n\n Test Files  2 passed (2)\n      Tests  4 passed (4)\n   Start at  12:34:32\n   Duration  1.26s (transform 35ms, setup 1ms, collect 90ms, tests 1.47s, environment 0ms, prepare 267ms)\n```\n\n### Basic Reporter [​](#basic-reporter)\n\nThe `basic` reporter displays the test files that have run and a summary of results after the entire suite has finished running. Individual tests are not included in the report unless they fail.\n\nCLIvitest.config.ts\n\nbash\n\n```\nnpx vitest --reporter=basic\n```\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    reporters: ['basic']\n  },\n})\n```\n\nExample output using basic reporter:\n\nbash\n\n```\n✓ __tests__/file1.test.ts (2) 725ms\n✓ __tests__/file2.test.ts (2) 746ms\n\n Test Files  2 passed (2)\n      Tests  4 passed (4)\n   Start at  12:34:32\n   Duration  1.26s (transform 35ms, setup 1ms, collect 90ms, tests 1.47s, environment 0ms, prepare 267ms)\n```\n\n### Verbose Reporter [​](#verbose-reporter)\n\nFollows the same hierarchical structure as the `default` reporter, but does not collapse sub-trees for passed test suites. The final terminal output displays all tests that have run, including those that have passed.\n\nCLIvitest.config.ts\n\nbash\n\n```\nnpx vitest --reporter=verbose\n```\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    reporters: ['verbose']\n  },\n})\n```\n\nExample of final terminal output for a passing test suite:\n\nbash\n\n```\n✓ __tests__/file1.test.ts (2) 725ms\n   ✓ first test file (2) 725ms\n     ✓ 2 + 2 should equal 4\n     ✓ 4 - 2 should equal 2\n✓ __tests__/file2.test.ts (2) 746ms\n  ✓ second test file (2) 746ms\n    ✓ 1 + 1 should equal 2\n    ✓ 2 - 1 should equal 1\n\n Test Files  2 passed (2)\n      Tests  4 passed (4)\n   Start at  12:34:32\n   Duration  1.26s (transform 35ms, setup 1ms, collect 90ms, tests 1.47s, environment 0ms, prepare 267ms)\n```\n\n### Dot Reporter [​](#dot-reporter)\n\nPrints a single dot for each completed test to provide minimal output while still showing all tests that have run. Details are only provided for failed tests, along with the `basic` reporter summary for the suite.\n\nCLIvitest.config.ts\n\nbash\n\n```\nnpx vitest --reporter=dot\n```\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    reporters: ['dot']\n  },\n})\n```\n\nExample terminal output for a passing test suite:\n\nbash\n\n```\n....\n\n Test Files  2 passed (2)\n      Tests  4 passed (4)\n   Start at  12:34:32\n   Duration  1.26s (transform 35ms, setup 1ms, collect 90ms, tests 1.47s, environment 0ms, prepare 267ms)\n```\n\n### JUnit Reporter [​](#junit-reporter)\n\nOutputs a report of the test results in JUnit XML format. Can either be printed to the terminal or written to an XML file using the [`outputFile`](https://vitest.dev/config/#outputfile) configuration option.\n\nCLIvitest.config.ts\n\nbash\n\n```\nnpx vitest --reporter=junit\n```\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    reporters: ['junit']\n  },\n})\n```\n\nExample of a JUnit XML report:\n\nxml\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<testsuites name=\"vitest tests\" tests=\"2\" failures=\"1\" errors=\"0\" time=\"0.503\">\n    <testsuite name=\"__tests__/test-file-1.test.ts\" timestamp=\"2023-10-19T17:41:58.580Z\" hostname=\"My-Computer.local\" tests=\"2\" failures=\"1\" errors=\"0\" skipped=\"0\" time=\"0.013\">\n        <testcase classname=\"__tests__/test-file-1.test.ts\" name=\"first test file &gt; 2 + 2 should equal 4\" time=\"0.01\">\n            <failure message=\"expected 5 to be 4 // Object.is equality\" type=\"AssertionError\">\nAssertionError: expected 5 to be 4 // Object.is equality\n ❯ __tests__/test-file-1.test.ts:20:28\n            </failure>\n        </testcase>\n        <testcase classname=\"__tests__/test-file-1.test.ts\" name=\"first test file &gt; 4 - 2 should equal 2\" time=\"0\">\n        </testcase>\n    </testsuite>\n</testsuites>\n```\n\nThe outputted XML contains nested `testsuites` and `testcase` tags. You can use the environment variables `VITEST_JUNIT_SUITE_NAME` and `VITEST_JUNIT_CLASSNAME` to configure their `name` and `classname` attributes, respectively. These can also be customized via reporter options:\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    reporters: [\n      ['junit', { suiteName: 'custom suite name', classname: 'custom-classname' }]\n    ]\n  },\n})\n```\n\n### JSON Reporter [​](#json-reporter)\n\nOutputs a report of the test results in JSON format. Can either be printed to the terminal or written to a file using the [`outputFile`](https://vitest.dev/config/#outputfile) configuration option.\n\nCLIvitest.config.ts\n\nbash\n\n```\nnpx vitest --reporter=json\n```\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    reporters: ['json']\n  },\n})\n```\n\nExample of a JSON report:\n\njson\n\n```\n{\n  \"numTotalTestSuites\": 1,\n  \"numPassedTestSuites\": 0,\n  \"numFailedTestSuites\": 1,\n  \"numPendingTestSuites\": 0,\n  \"numTotalTests\": 1,\n  \"numPassedTests\": 0,\n  \"numFailedTests\": 1,\n  \"numPendingTests\": 0,\n  \"numTodoTests\": 0,\n  \"startTime\": 1697737019307,\n  \"success\": false,\n  \"testResults\": [\n    {\n      \"assertionResults\": [\n        {\n          \"ancestorTitles\": [\n            \"\",\n            \"first test file\"\n          ],\n          \"fullName\": \" first test file 2 + 2 should equal 4\",\n          \"status\": \"failed\",\n          \"title\": \"2 + 2 should equal 4\",\n          \"duration\": 9,\n          \"failureMessages\": [\n            \"expected 5 to be 4 // Object.is equality\"\n          ],\n          \"location\": {\n            \"line\": 20,\n            \"column\": 28\n          }\n        }\n      ],\n      \"startTime\": 1697737019787,\n      \"endTime\": 1697737019797,\n      \"status\": \"failed\",\n      \"message\": \"\",\n      \"name\": \"/root-directory/__tests__/test-file-1.test.ts\"\n    }\n  ]\n}\n```\n\n### HTML Reporter [​](#html-reporter)\n\nGenerates an HTML file to view test results through an interactive [GUI](https://vitest.dev/guide/ui). After the file has been generated, Vitest will keep a local development server running and provide a link to view the report in a browser.\n\nOutput file can be specified using the [`outputFile`](https://vitest.dev/config/#outputfile) configuration option. If no `outputFile` option is provided, a new HTML file will be created.\n\nCLIvitest.config.ts\n\nbash\n\n```\nnpx vitest --reporter=html\n```\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    reporters: ['html']\n  },\n})\n```\n\nTIP\n\nThis reporter requires installed [`@vitest/ui`](https://vitest.dev/guide/ui) package.\n\n### TAP Reporter [​](#tap-reporter)\n\nOutputs a report following [Test Anything Protocol](https://testanything.org/) (TAP).\n\nCLIvitest.config.ts\n\nbash\n\n```\nnpx vitest --reporter=tap\n```\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    reporters: ['tap']\n  },\n})\n```\n\nExample of a TAP report:\n\nbash\n\n```\nTAP version 13\n1..1\nnot ok 1 - __tests__/test-file-1.test.ts # time=14.00ms {\n    1..1\n    not ok 1 - first test file # time=13.00ms {\n        1..2\n        not ok 1 - 2 + 2 should equal 4 # time=11.00ms\n            ---\n            error:\n                name: \"AssertionError\"\n                message: \"expected 5 to be 4 // Object.is equality\"\n            at: \"/root-directory/__tests__/test-file-1.test.ts:20:28\"\n            actual: \"5\"\n            expected: \"4\"\n            ...\n        ok 2 - 4 - 2 should equal 2 # time=1.00ms\n    }\n}\n```\n\n### TAP Flat Reporter [​](#tap-flat-reporter)\n\nOutputs a TAP flat report. Like the `tap` reporter, test results are formatted to follow TAP standards, but test suites are formatted as a flat list rather than a nested hierarchy.\n\nCLIvitest.config.ts\n\nbash\n\n```\nnpx vitest --reporter=tap-flat\n```\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    reporters: ['tap-flat']\n  },\n})\n```\n\nExample of a TAP flat report:\n\nbash\n\n```\nTAP version 13\n1..2\nnot ok 1 - __tests__/test-file-1.test.ts > first test file > 2 + 2 should equal 4 # time=11.00ms\n    ---\n    error:\n        name: \"AssertionError\"\n        message: \"expected 5 to be 4 // Object.is equality\"\n    at: \"/root-directory/__tests__/test-file-1.test.ts:20:28\"\n    actual: \"5\"\n    expected: \"4\"\n    ...\nok 2 - __tests__/test-file-1.test.ts > first test file > 4 - 2 should equal 2 # time=0.00ms\n```\n\n### Hanging Process Reporter [​](#hanging-process-reporter)\n\nDisplays a list of hanging processes, if any are preventing Vitest from exiting safely. The `hanging-process` reporter does not itself display test results, but can be used in conjunction with another reporter to monitor processes while tests run. Using this reporter can be resource-intensive, so should generally be reserved for debugging purposes in situations where Vitest consistently cannot exit the process.\n\nCLIvitest.config.ts\n\nbash\n\n```\nnpx vitest --reporter=hanging-process\n```\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    reporters: ['hanging-process']\n  },\n})\n```\n\n### Github Actions Reporter [​](#github-actions-reporter)\n\nOutput [workflow commands](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-error-message) to provide annotations for test failures. This reporter is automatically enabled with a [`default`](#default-reporter) reporter when `process.env.GITHUB_ACTIONS === 'true'`.\n\nIf you configure non-default reporters, you need to explicitly add `github-actions`.\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    reporters: process.env.GITHUB_ACTIONS ? ['dot', 'github-actions'] : ['dot'],\n  },\n})\n```\n\n![Github Actions](https://github.com/vitest-dev/vitest/assets/4232207/336cddc2-df6b-4b8a-8e72-4d00010e37f5)![Github Actions](https://github.com/vitest-dev/vitest/assets/4232207/ce8447c1-0eab-4fe1-abef-d0d322290dca)\n\n### Blob Reporter [​](#blob-reporter)\n\nStores test results on the machine so they can be later merged using [`--merge-reports`](https://vitest.dev/guide/cli#merge-reports) command. By default, stores all results in `.vitest-reports` folder, but can be overriden with `--outputFile` or `--outputFile.blob` flags.\n\nbash\n\n```\nnpx vitest --reporter=blob --outputFile=reports/blob-1.json\n```\n\nWe recommend using this reporter if you are running Vitest on different machines with the [`--shard`](https://vitest.dev/guide/cli#shard) flag. All blob reports can be merged into any report by using `--merge-reports` command at the end of your CI pipeline:\n\nbash\n\n```\nnpx vitest --merge-reports=reports --reporter=json --reporter=default\n```\n\nTIP\n\nBoth `--reporter=blob` and `--merge-reports` do not work in watch mode.\n\n## Custom Reporters [​](#custom-reporters)\n\nYou can use third-party custom reporters installed from NPM by specifying their package name in the reporters' option:\n\nCLIvitest.config.ts\n\nbash\n\n```\nnpx vitest --reporter=some-published-vitest-reporter\n```\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    reporters: ['some-published-vitest-reporter']\n  },\n})\n```\n\nAdditionally, you can define your own [custom reporters](https://vitest.dev/advanced/reporters) and use them by specifying their file path:\n\nbash\n\n```\nnpx vitest --reporter=./path/to/reporter.ts\n```\n\nCustom reporters should implement the [Reporter interface](https://github.com/vitest-dev/vitest/blob/main/packages/vitest/src/types/reporter.ts).",
    "title": "Reporters | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/coverage",
    "markdown": "# Coverage | Guide | Vitest\n\nVitest supports Native code coverage via [`v8`](https://v8.dev/blog/javascript-code-coverage) and instrumented code coverage via [`istanbul`](https://istanbul.js.org/).\n\n## Coverage Providers [​](#coverage-providers)\n\nBoth `v8` and `istanbul` support are optional. By default, `v8` will be used.\n\nYou can select the coverage tool by setting `test.coverage.provider` to `v8` or `istanbul`:\n\nts\n\n```\n// vitest.config.ts\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    coverage: {\n      provider: 'istanbul' // or 'v8'\n    },\n  },\n})\n```\n\nWhen you start the Vitest process, it will prompt you to install the corresponding support package automatically.\n\nOr if you prefer to install them manually:\n\nbash\n\n```\n# For v8\nnpm i -D @vitest/coverage-v8\n\n# For istanbul\nnpm i -D @vitest/coverage-istanbul\n```\n\n## Coverage Setup [​](#coverage-setup)\n\nTIP\n\nIt's recommended to always define [`coverage.include`](https://vitest.dev/config/#coverage-include) in your configuration file. This helps Vitest to reduce the amount of files picked by [`coverage.all`](https://vitest.dev/config/#coverage-all).\n\nTo test with coverage enabled, you can pass the `--coverage` flag in CLI. By default, reporter `['text', 'html', 'clover', 'json']` will be used.\n\njson\n\n```\n{\n  \"scripts\": {\n    \"test\": \"vitest\",\n    \"coverage\": \"vitest run --coverage\"\n  }\n}\n```\n\nTo configure it, set `test.coverage` options in your config file:\n\nts\n\n```\n// vitest.config.ts\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    coverage: {\n      reporter: ['text', 'json', 'html'],\n    },\n  },\n})\n```\n\n## Custom Coverage Reporter [​](#custom-coverage-reporter)\n\nYou can use custom coverage reporters by passing either the name of the package or absolute path in `test.coverage.reporter`:\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    coverage: {\n      reporter: [\n        // Specify reporter using name of the NPM package\n        ['@vitest/custom-coverage-reporter', { someOption: true }],\n\n        // Specify reporter using local path\n        '/absolute/path/to/custom-reporter.cjs',\n      ],\n    },\n  },\n})\n```\n\nCustom reporters are loaded by Istanbul and must match its reporter interface. See [built-in reporters' implementation](https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-reports/lib) for reference.\n\njs\n\n```\n// custom-reporter.cjs\nconst { ReportBase } = require('istanbul-lib-report')\n\nmodule.exports = class CustomReporter extends ReportBase {\n  constructor(opts) {\n    super()\n\n    // Options passed from configuration are available here\n    this.file = opts.file\n  }\n\n  onStart(root, context) {\n    this.contentWriter = context.writer.writeFile(this.file)\n    this.contentWriter.println('Start of custom coverage report')\n  }\n\n  onEnd() {\n    this.contentWriter.println('End of custom coverage report')\n    this.contentWriter.close()\n  }\n}\n```\n\n## Custom Coverage Provider [​](#custom-coverage-provider)\n\nIt's also possible to provide your custom coverage provider by passing `'custom'` in `test.coverage.provider`:\n\nts\n\n```\n// vitest.config.ts\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    coverage: {\n      provider: 'custom',\n      customProviderModule: 'my-custom-coverage-provider'\n    },\n  },\n})\n```\n\nThe custom providers require a `customProviderModule` option which is a module name or path where to load the `CoverageProviderModule` from. It must export an object that implements `CoverageProviderModule` as default export:\n\nts\n\n```\n// my-custom-coverage-provider.ts\nimport type { CoverageProvider, CoverageProviderModule, ResolvedCoverageOptions, Vitest } from 'vitest'\n\nconst CustomCoverageProviderModule: CoverageProviderModule = {\n  getProvider(): CoverageProvider {\n    return new CustomCoverageProvider()\n  },\n\n  // Implements rest of the CoverageProviderModule ...\n}\n\nclass CustomCoverageProvider implements CoverageProvider {\n  name = 'custom-coverage-provider'\n  options!: ResolvedCoverageOptions\n\n  initialize(ctx: Vitest) {\n    this.options = ctx.config.coverage\n  }\n\n  // Implements rest of the CoverageProvider ...\n}\n\nexport default CustomCoverageProviderModule\n```\n\nPlease refer to the type definition for more details.\n\n## Changing the Default Coverage Folder Location [​](#changing-the-default-coverage-folder-location)\n\nWhen running a coverage report, a `coverage` folder is created in the root directory of your project. If you want to move it to a different directory, use the `test.coverage.reportsDirectory` property in the `vite.config.js` file.\n\njs\n\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  test: {\n    coverage: {\n      reportsDirectory: './tests/unit/coverage'\n    }\n  }\n})\n```\n\n## Ignoring Code [​](#ignoring-code)\n\nBoth coverage providers have their own ways how to ignore code from coverage reports:\n\n*   [`v8`](https://github.com/istanbuljs/v8-to-istanbul#ignoring-uncovered-lines)\n*   [`ìstanbul`](https://github.com/istanbuljs/nyc#parsing-hints-ignoring-lines)\n\nWhen using TypeScript the source codes are transpiled using `esbuild`, which strips all comments from the source codes ([esbuild#516](https://github.com/evanw/esbuild/issues/516)). Comments which are considered as [legal comments](https://esbuild.github.io/api/#legal-comments) are preserved.\n\nFor `istanbul` provider you can include a `@preserve` keyword in the ignore hint. Beware that these ignore hints may now be included in final production build as well.\n\ndiff\n\n```\n-/* istanbul ignore if */\n+/* istanbul ignore if -- @preserve */\nif (condition) {\n```\n\nFor `v8` this does not cause any issues. You can use `v8 ignore` comments with Typescript as usual:\n\nts\n\n```\n/* v8 ignore next 3 */\nif (condition) {\n```\n\n## Other Options [​](#other-options)\n\nTo see all configurable options for coverage, see the [coverage Config Reference](https://vitest.dev/config/#coverage).\n\n## Vitest UI [​](#vitest-ui)\n\nYou can check your coverage report in [Vitest UI](https://vitest.dev/guide/ui).\n\nVitest UI will enable coverage report when it is enabled explicitly and the html coverage reporter is present, otherwise it will not be available:\n\n*   enable `coverage.enabled=true` in your configuration or run Vitest with `--coverage.enabled=true` flag\n*   add `html` to the `coverage.reporter` list: you can also enable `subdir` option to put coverage report in a subdirectory\n\n![html coverage activation in Vitest UI](https://vitest.dev/vitest-ui-show-coverage-light.png)![html coverage activation in Vitest UI](https://vitest.dev/vitest-ui-show-coverage-dark.png)![html coverage in Vitest UI](https://vitest.dev/vitest-ui-coverage-light.png)![html coverage in Vitest UI](https://vitest.dev/vitest-ui-coverage-dark.png)",
    "title": "Coverage | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/improving-performance",
    "markdown": "# Improving Performance | Vitest\n\n## Test isolation [​](#test-isolation)\n\nBy default Vitest runs every test file in an isolated environment based on the [pool](https://vitest.dev/config/#pool):\n\n*   `threads` pool runs every test file in a separate [`Worker`](https://nodejs.org/api/worker_threads.html#class-worker)\n*   `forks` pool runs every test file in a separate [forked child process](https://nodejs.org/api/child_process.html#child_processforkmodulepath-args-options)\n*   `vmThreads` pool runs every test file in a separate [VM context](https://nodejs.org/api/vm.html#vmcreatecontextcontextobject-options), but it uses workers for parallelism\n\nThis greatly increases test times, which might not be desirable for projects that don't rely on side effects and properly cleanup their state (which is usually true for projects with `node` environment). In this case disabling isolation will improve the speed of your tests. To do that, you can provide `--no-isolate` flag to the CLI or set [`test.isolate`](https://vitest.dev/config/#isolate) property in the config to `false`. If you are using several pools at once with `poolMatchGlobs`, you can also disable isolation for a specific pool you are using.\n\nCLIvitest.config.js\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    isolate: false,\n    // you can also disable isolation only for specific pools\n    poolOptions: {\n      forks: {\n        isolate: false,\n      },\n    },\n  },\n})\n```\n\nTIP\n\nIf you are using `vmThreads` pool, you cannot disable isolation. Use `threads` pool instead to improve your tests performance.\n\nFor some projects, it might also be desirable to disable parallelism to improve startup time. To do that, provide `--no-file-parallelism` flag to the CLI or set [`test.fileParallelism`](https://vitest.dev/config/#fileparallelism) property in the config to `false`.\n\nCLIvitest.config.js\n\nbash\n\n```\nvitest --no-file-parallelism\n```\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    fileParallelism: false,\n  },\n})\n```\n\n## Pool [​](#pool)\n\nBy default Vitest runs tests in `pool: 'forks'`. While `'forks'` pool is better for compatibility issues ([hanging process](https://vitest.dev/guide/common-errors#failed-to-terminate-worker) and [segfaults](https://vitest.dev/guide/common-errors#segfaults-and-native-code-errors)), it may be slightly slower than `pool: 'threads'` in larger projects.\n\nYou can try to improve test run time by switching `pool` option in configuration:\n\nCLIvitest.config.js\n\nbash\n\n```\nvitest --pool=threads\n```\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    pool: 'threads',\n  },\n})\n```\n\n## Sharding [​](#sharding)\n\nTest sharding means running a small subset of test cases at a time. It can be useful when you have multiple machines that could be used to run tests simultaneously.\n\nTo split Vitest tests on multiple different runs, use [`--shard`](https://vitest.dev/guide/cli#shard) option with [`--reporter=blob`](https://vitest.dev/guide/reporters#blob-reporter) option:\n\nsh\n\n```\nvitest run --reporter=blob --shard=1/3 # 1st machine\nvitest run --reporter=blob --shard=2/3 # 2nd machine\nvitest run --reporter=blob --shard=3/3 # 3rd machine\n```\n\nCollect the results stored in `.vitest-reports` directory from each machine and merge them with [`--merge-reports`](https://vitest.dev/guide/cli#merge-reports) option:\n\nGithub action example\n\nThis setup is also used at [https://github.com/vitest-tests/test-sharding](https://github.com/vitest-tests/test-sharding).\n\nyaml\n\n```\n# Inspired from https://playwright.dev/docs/test-sharding\nname: Tests\non:\n  push:\n    branches:\n      - main\njobs:\n  tests:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        shardIndex: [1, 2, 3, 4]\n        shardTotal: [4]\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 20\n\n      - name: Install pnpm\n        uses: pnpm/action-setup@v4\n\n      - name: Install dependencies\n        run: pnpm i\n\n      - name: Run tests\n        run: pnpm run test --reporter=blob --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}\n\n      - name: Upload blob report to GitHub Actions Artifacts\n        if: ${{ !cancelled() }}\n        uses: actions/upload-artifact@v4\n        with:\n          name: blob-report-${{ matrix.shardIndex }}\n          path: .vitest-reports/*\n          retention-days: 1\n\n  merge-reports:\n    if: ${{ !cancelled() }}\n    needs: [tests]\n\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 20\n\n      - name: Install pnpm\n        uses: pnpm/action-setup@v4\n\n      - name: Install dependencies\n        run: pnpm i\n\n      - name: Download blob reports from GitHub Actions Artifacts\n        uses: actions/download-artifact@v4\n        with:\n          path: .vitest-reports\n          pattern: blob-report-*\n          merge-multiple: true\n\n      - name: Merge reports\n        run: npx vitest --merge-reports\n```\n\nTIP\n\nTest sharding can also become useful on high CPU-count machines.\n\nVitest will run only a single Vite server in its main thread. Rest of the threads are used to run test files. In a high CPU-count machine the main thread can become a bottleneck as it cannot handle all the requests coming from the threads. For example in 32 CPU machine the main thread is responsible to handle load coming from 31 test threads.\n\nTo reduce the load from main thread's Vite server you can use test sharding. The load can be balanced on multiple Vite server.\n\nsh\n\n```\n# Example for splitting tests on 32 CPU to 4 shards.\n# As each process needs 1 main thread, there's 7 threads for test runners (1+7)*4 = 32\n# Use VITEST_MAX_THREADS or VITEST_MAX_FORKS depending on the pool:\nVITEST_MAX_THREADS=7 vitest run --reporter=blob --shard=1/4 & \\\nVITEST_MAX_THREADS=7 vitest run --reporter=blob --shard=2/4 & \\\nVITEST_MAX_THREADS=7 vitest run --reporter=blob --shard=3/4 & \\\nVITEST_MAX_THREADS=7 vitest run --reporter=blob --shard=4/4 & \\\nwait # https://man7.org/linux/man-pages/man2/waitpid.2.html\n\nvitest --merge-reports\n```",
    "title": "Improving Performance | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/snapshot",
    "markdown": "# Snapshot | Guide | Vitest\n\n[Learn Snapshot by video from Vue School](https://vueschool.io/lessons/snapshots-in-vitest?friend=vueuse)\n\nSnapshot tests are a very useful tool whenever you want to make sure the output of your functions does not change unexpectedly.\n\nWhen using snapshot, Vitest will take a snapshot of the given value, then compare it to a reference snapshot file stored alongside the test. The test will fail if the two snapshots do not match: either the change is unexpected, or the reference snapshot needs to be updated to the new version of the result.\n\n## Use Snapshots [​](#use-snapshots)\n\nTo snapshot a value, you can use the [`toMatchSnapshot()`](https://vitest.dev/api/expect#tomatchsnapshot) from `expect()` API:\n\nts\n\n```\nimport { expect, it } from 'vitest'\n\nit('toUpperCase', () => {\n  const result = toUpperCase('foobar')\n  expect(result).toMatchSnapshot()\n})\n```\n\nThe first time this test is run, Vitest creates a snapshot file that looks like this:\n\njs\n\n```\n// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html\n\nexports['toUpperCase 1'] = '\"FOOBAR\"'\n```\n\nThe snapshot artifact should be committed alongside code changes, and reviewed as part of your code review process. On subsequent test runs, Vitest will compare the rendered output with the previous snapshot. If they match, the test will pass. If they don't match, either the test runner found a bug in your code that should be fixed, or the implementation has changed and the snapshot needs to be updated.\n\nWARNING\n\nWhen using Snapshots with async concurrent tests, `expect` from the local [Test Context](https://vitest.dev/guide/test-context) must be used to ensure the right test is detected.\n\n## Inline Snapshots [​](#inline-snapshots)\n\nSimilarly, you can use the [`toMatchInlineSnapshot()`](https://vitest.dev/api/expect#tomatchinlinesnapshot) to store the snapshot inline within the test file.\n\nts\n\n```\nimport { expect, it } from 'vitest'\n\nit('toUpperCase', () => {\n  const result = toUpperCase('foobar')\n  expect(result).toMatchInlineSnapshot()\n})\n```\n\nInstead of creating a snapshot file, Vitest will modify the test file directly to update the snapshot as a string:\n\nts\n\n```\nimport { expect, it } from 'vitest'\n\nit('toUpperCase', () => {\n  const result = toUpperCase('foobar')\n  expect(result).toMatchInlineSnapshot('\"FOOBAR\"')\n})\n```\n\nThis allows you to see the expected output directly without jumping across different files.\n\nWARNING\n\nWhen using Snapshots with async concurrent tests, `expect` from the local [Test Context](https://vitest.dev/guide/test-context) must be used to ensure the right test is detected.\n\n## Updating Snapshots [​](#updating-snapshots)\n\nWhen the received value doesn't match the snapshot, the test fails and shows you the difference between them. When the snapshot change is expected, you may want to update the snapshot from the current state.\n\nIn watch mode, you can press the `u` key in the terminal to update the failed snapshot directly.\n\nOr you can use the `--update` or `-u` flag in the CLI to make Vitest update snapshots.\n\n## File Snapshots [​](#file-snapshots)\n\nWhen calling `toMatchSnapshot()`, we store all snapshots in a formatted snap file. That means we need to escape some characters (namely the double-quote `\"` and backtick `` ` ``) in the snapshot string. Meanwhile, you might lose the syntax highlighting for the snapshot content (if they are in some language).\n\nTo improve this case, we introduce [`toMatchFileSnapshot()`](https://vitest.dev/api/expect#tomatchfilesnapshot) to explicitly snapshot in a file. This allows you to assign any file extension to the snapshot file, and making them more readable.\n\nts\n\n```\nimport { expect, it } from 'vitest'\n\nit('render basic', async () => {\n  const result = renderHTML(h('div', { class: 'foo' }))\n  await expect(result).toMatchFileSnapshot('./test/basic.output.html')\n})\n```\n\nIt will compare with the content of `./test/basic.output.html`. And can be written back with the `--update` flag.\n\n## Image Snapshots [​](#image-snapshots)\n\nIt's also possible to snapshot images using [`jest-image-snapshot`](https://github.com/americanexpress/jest-image-snapshot).\n\nbash\n\n```\nnpm i -D jest-image-snapshot\n```\n\nts\n\n```\ntest('image snapshot', () => {\n  expect(readFileSync('./test/stubs/input-image.png'))\n    .toMatchImageSnapshot()\n})\n```\n\n## Custom Serializer [​](#custom-serializer)\n\nYou can add your own logic to alter how your snapshots are serialized. Like Jest, Vitest has default serializers for built-in JavaScript types, HTML elements, ImmutableJS and for React elements.\n\nYou can explicitly add custom serializer by using [`expect.addSnapshotSerializer`](https://vitest.dev/api/expect#expect-addsnapshotserializer) API.\n\nts\n\n```\nexpect.addSnapshotSerializer({\n  serialize(val, config, indentation, depth, refs, printer) {\n    // `printer` is a function that serializes a value using existing plugins.\n    return `Pretty foo: ${printer(\n      val.foo,\n      config,\n      indentation,\n      depth,\n      refs,\n    )}`\n  },\n  test(val) {\n    return val && Object.prototype.hasOwnProperty.call(val, 'foo')\n  },\n})\n```\n\nWe also support [snapshotSerializers](https://vitest.dev/config/#snapshotserializers) option to implicitly add custom serializers.\n\nts\n\n```\nimport { SnapshotSerializer } from 'vitest'\n\nexport default {\n  serialize(val, config, indentation, depth, refs, printer) {\n    // `printer` is a function that serializes a value using existing plugins.\n    return `Pretty foo: ${printer(\n      val.foo,\n      config,\n      indentation,\n      depth,\n      refs,\n    )}`\n  },\n  test(val) {\n    return val && Object.prototype.hasOwnProperty.call(val, 'foo')\n  },\n} satisfies SnapshotSerializer\n```\n\nts\n\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  test: {\n    snapshotSerializers: ['path/to/custom-serializer.ts']\n  },\n})\n```\n\nAfter adding a test like this:\n\nts\n\n```\ntest('foo snapshot test', () => {\n  const bar = {\n    foo: {\n      x: 1,\n      y: 2,\n    },\n  }\n\n  expect(bar).toMatchSnapshot()\n})\n```\n\nYou will get the following snapshot:\n\n```\nPretty foo: Object {\n  \"x\": 1,\n  \"y\": 2,\n}\n```\n\nWe are using Jest's `pretty-format` for serializing snapshots. You can read more about it here: [pretty-format](https://github.com/facebook/jest/blob/main/packages/pretty-format/README.md#serialize).\n\n## Difference from Jest [​](#difference-from-jest)\n\nVitest provides an almost compatible Snapshot feature with [Jest's](https://jestjs.io/docs/snapshot-testing) with a few exceptions:\n\n#### 1\\. Comment header in the snapshot file is different [​](#_1-comment-header-in-the-snapshot-file-is-different)\n\ndiff\n\n```\n- // Jest Snapshot v1, https://goo.gl/fbAQLP\n+ // Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html\n```\n\nThis does not really affect the functionality but might affect your commit diff when migrating from Jest.\n\n#### 2\\. `printBasicPrototype` is default to `false` [​](#_2-printbasicprototype-is-default-to-false)\n\nBoth Jest and Vitest's snapshots are powered by [`pretty-format`](https://github.com/facebook/jest/blob/main/packages/pretty-format). In Vitest we set `printBasicPrototype` default to `false` to provide a cleaner snapshot output, while in Jest <29.0.0 it's `true` by default.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\ntest('snapshot', () => {\n  const bar = [\n    {\n      foo: 'bar',\n    },\n  ]\n\n  // in Jest\n  expect(bar).toMatchInlineSnapshot(`\n    Array [\n      Object {\n        \"foo\": \"bar\",\n      },\n    ]\n  `)\n\n  // in Vitest\n  expect(bar).toMatchInlineSnapshot(`\n    [\n      {\n        \"foo\": \"bar\",\n      },\n    ]\n  `)\n})\n```\n\nWe believe this is a more reasonable default for readability and overall DX. If you still prefer Jest's behavior, you can change your config:\n\nts\n\n```\n// vitest.config.js\nexport default defineConfig({\n  test: {\n    snapshotFormat: {\n      printBasicPrototype: true\n    }\n  }\n})\n```\n\n#### 3\\. Chevron `>` is used as a separator instead of colon `:` for custom messages [​](#_3-chevron-is-used-as-a-separator-instead-of-colon-for-custom-messages)\n\nVitest uses chevron `>` as a separator instead of colon `:` for readability, when a custom message is passed during creation of a snapshot file.\n\nFor the following example test code:\n\njs\n\n```\ntest('toThrowErrorMatchingSnapshot', () => {\n  expect(() => {\n    throw new Error('error')\n  }).toThrowErrorMatchingSnapshot('hint')\n})\n```\n\nIn Jest, the snapshot will be:\n\nconsole\n\n```\nexports[`toThrowErrorMatchingSnapshot: hint 1`] = `\"error\"`;\n```\n\nIn Vitest, the equivalent snapshot will be:\n\nconsole\n\n```\nexports[`toThrowErrorMatchingSnapshot > hint 1`] = `[Error: error]`;\n```\n\n#### 4\\. default `Error` snapshot is different for `toThrowErrorMatchingSnapshot` and `toThrowErrorMatchingInlineSnapshot` [​](#_4-default-error-snapshot-is-different-for-tothrowerrormatchingsnapshot-and-tothrowerrormatchinginlinesnapshot)\n\njs\n\n```\ntest('snapshot', () => {\n  //\n  // in Jest\n  //\n\n  expect(new Error('error')).toMatchInlineSnapshot(`[Error: error]`)\n\n  // Jest snapshots `Error.message` for `Error` instance\n  expect(() => {\n    throw new Error('error')\n  }).toThrowErrorMatchingInlineSnapshot(`\"error\"`)\n\n  //\n  // in Vitest\n  //\n\n  expect(new Error('error')).toMatchInlineSnapshot(`[Error: error]`)\n\n  expect(() => {\n    throw new Error('error')\n  }).toThrowErrorMatchingInlineSnapshot(`[Error: error]`)\n})\n```",
    "title": "Snapshot | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/testing-types",
    "markdown": "# Testing Types | Guide | Vitest\n\nVitest allows you to write tests for your types, using `expectTypeOf` or `assertType` syntaxes. By default all tests inside `*.test-d.ts` files are considered type tests, but you can change it with [`typecheck.include`](https://vitest.dev/config/#typecheck-include) config option.\n\nUnder the hood Vitest calls `tsc` or `vue-tsc`, depending on your config, and parses results. Vitest will also print out type errors in your source code, if it finds any. You can disable it with [`typecheck.ignoreSourceErrors`](https://vitest.dev/config/#typecheck-ignoresourceerrors) config option.\n\nKeep in mind that Vitest doesn't run or compile these files, they are only statically analyzed by the compiler, and because of that you cannot use any dynamic statements. Meaning, you cannot use dynamic test names, and `test.each`, `test.runIf`, `test.skipIf`, `test.concurrent` APIs. But you can use other APIs, like `test`, `describe`, `.only`, `.skip` and `.todo`.\n\nUsing CLI flags, like `--allowOnly` and `-t` are also supported for type checking.\n\nts\n\n```\nimport { assertType, expectTypeOf } from 'vitest'\nimport { mount } from './mount.js'\n\ntest('my types work properly', () => {\n  expectTypeOf(mount).toBeFunction()\n  expectTypeOf(mount).parameter(0).toMatchTypeOf<{ name: string }>()\n\n  // @ts-expect-error name is a string\n  assertType(mount({ name: 42 }))\n})\n```\n\nAny type error triggered inside a test file will be treated as a test error, so you can use any type trick you want to test types of your project.\n\nYou can see a list of possible matchers in [API section](https://vitest.dev/api/expect-typeof).\n\n## Reading Errors [​](#reading-errors)\n\nIf you are using `expectTypeOf` API, refer to the [expect-type documentation on its error messages](https://github.com/mmkal/expect-type#error-messages).\n\nWhen types don't match, `.toEqualTypeOf` and `.toMatchTypeOf` use a special helper type to produce error messages that are as actionable as possible. But there's a bit of an nuance to understanding them. Since the assertions are written \"fluently\", the failure should be on the \"expected\" type, not the \"actual\" type (`expect<Actual>().toEqualTypeOf<Expected>()`). This means that type errors can be a little confusing - so this library produces a `MismatchInfo` type to try to make explicit what the expectation is. For example:\n\nts\n\n```\nexpectTypeOf({ a: 1 }).toEqualTypeOf<{ a: string }>()\n```\n\nIs an assertion that will fail, since `{a: 1}` has type `{a: number}` and not `{a: string}`. The error message in this case will read something like this:\n\n```\ntest/test.ts:999:999 - error TS2344: Type '{ a: string; }' does not satisfy the constraint '{ a: \\\\\"Expected: string, Actual: number\\\\\"; }'.\n  Types of property 'a' are incompatible.\n    Type 'string' is not assignable to type '\\\\\"Expected: string, Actual: number\\\\\"'.\n\n999 expectTypeOf({a: 1}).toEqualTypeOf<{a: string}>()\n```\n\nNote that the type constraint reported is a human-readable messaging specifying both the \"expected\" and \"actual\" types. Rather than taking the sentence `Types of property 'a' are incompatible // Type 'string' is not assignable to type \"Expected: string, Actual: number\"` literally - just look at the property name (`'a'`) and the message: `Expected: string, Actual: number`. This will tell you what's wrong, in most cases. Extremely complex types will of course be more effort to debug, and may require some experimentation. Please [raise an issue](https://github.com/mmkal/expect-type) if the error messages are actually misleading.\n\nThe `toBe...` methods (like `toBeString`, `toBeNumber`, `toBeVoid` etc.) fail by resolving to a non-callable type when the `Actual` type under test doesn't match up. For example, the failure for an assertion like `expectTypeOf(1).toBeString()` will look something like this:\n\n```\ntest/test.ts:999:999 - error TS2349: This expression is not callable.\n  Type 'ExpectString<number>' has no call signatures.\n\n999 expectTypeOf(1).toBeString()\n                    ~~~~~~~~~~\n```\n\nThe `This expression is not callable` part isn't all that helpful - the meaningful error is the next line, `Type 'ExpectString<number> has no call signatures`. This essentially means you passed a number but asserted it should be a string.\n\nIf TypeScript added support for [\"throw\" types](https://github.com/microsoft/TypeScript/pull/40468) these error messages could be improved significantly. Until then they will take a certain amount of squinting.\n\n#### Concrete \"expected\" objects vs typeargs [​](#concrete-expected-objects-vs-typeargs)\n\nError messages for an assertion like this:\n\nts\n\n```\nexpectTypeOf({ a: 1 }).toEqualTypeOf({ a: '' })\n```\n\nWill be less helpful than for an assertion like this:\n\nts\n\n```\nexpectTypeOf({ a: 1 }).toEqualTypeOf<{ a: string }>()\n```\n\nThis is because the TypeScript compiler needs to infer the typearg for the `.toEqualTypeOf({a: ''})` style, and this library can only mark it as a failure by comparing it against a generic `Mismatch` type. So, where possible, use a typearg rather than a concrete type for `.toEqualTypeOf` and `toMatchTypeOf`. If it's much more convenient to compare two concrete types, you can use `typeof`:\n\nts\n\n```\nconst one = valueFromFunctionOne({ some: { complex: inputs } })\nconst two = valueFromFunctionTwo({ some: { other: inputs } })\n\nexpectTypeOf(one).toEqualTypeof<typeof two>()\n```\n\nIf you find it hard working with `expectTypeOf` API and figuring out errors, you can always use more simple `assertType` API:\n\nts\n\n```\nconst answer = 42\n\nassertType<number>(answer)\n// @ts-expect-error answer is not a string\nassertType<string>(answer)\n```\n\nTIP\n\nWhen using `@ts-expect-error` syntax, you might want to make sure that you didn't make a typo. You can do that by including your type files in [`test.include`](https://vitest.dev/config/#include) config option, so Vitest will also actually _run_ these tests and fail with `ReferenceError`.\n\nThis will pass, because it expects an error, but the word “answer” has a typo, so it's a false positive error:\n\nts\n\n```\n// @ts-expect-error answer is not a string\nassertType<string>(answr) //\n```\n\n## Run Typechecking [​](#run-typechecking)\n\nTo enable typechecking, just add [`--typecheck`](https://vitest.dev/config/#typecheck) flag to your Vitest command in `package.json`:\n\njson\n\n```\n{\n  \"scripts\": {\n    \"test\": \"vitest --typecheck\"\n  }\n}\n```\n\nNow you can run typecheck:\n\nVitest uses `tsc --noEmit` or `vue-tsc --noEmit`, depending on your configuration, so you can remove these scripts from your pipeline.",
    "title": "Testing Types | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/ui",
    "markdown": "# Vitest UI | Guide | Vitest\n\nPowered by Vite, Vitest also has a dev server under the hood when running the tests. This allows Vitest to provide a beautiful UI to view and interact with your tests. The Vitest UI is optional, so you'll need to install it with:\n\nThen you can start the tests with UI by passing the `--ui` flag:\n\nThen you can visit the Vitest UI at [`http://localhost:51204/__vitest__/`](http://localhost:51204/__vitest__/)\n\n![Vitest UI](https://user-images.githubusercontent.com/11247099/171992267-5cae2fa0-b927-400a-8eb1-da776974cb61.png)![Vitest UI](https://user-images.githubusercontent.com/11247099/171992272-7c6057e2-80c3-4b17-a7b6-0ac28e5a5e0b.png)\n\nUI can also be used as a reporter. Use `'html'` reporter in your Vitest configuration to generate HTML output and preview the results of your tests:\n\nts\n\n```\n// vitest.config.ts\n\nexport default {\n  test: {\n    reporters: ['html']\n  }\n}\n```\n\nYou can check your coverage report in Vitest UI: see [Vitest UI Coverage](https://vitest.dev/guide/coverage#vitest-ui) for more details.\n\nWARNING\n\nIf you still want to see how your tests are running in real time in the terminal, don't forget to add `default` reporter to `reporters` option: `['default', 'html']`.\n\nTIP\n\nTo preview your HTML report, you can use the [vite preview](https://vitejs.dev/guide/cli#vite-preview) command:\n\nsh\n\n```\nnpx vite preview --outDir ./html\n```\n\nYou can configure output with [`outputFile`](https://vitest.dev/config/#outputfile) config option. You need to specify `.html` path there. For example, `./html/index.html` is the default value.",
    "title": "Vitest UI | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/mocking",
    "markdown": "# Mocking | Guide | Vitest\n\nWhen writing tests it's only a matter of time before you need to create a \"fake\" version of an internal — or external — service. This is commonly referred to as **mocking**. Vitest provides utility functions to help you out through its **vi** helper. You can `import { vi } from 'vitest'` or access it **globally** (when [global configuration](https://vitest.dev/config/#globals) is **enabled**).\n\nWARNING\n\nAlways remember to clear or restore mocks before or after each test run to undo mock state changes between runs! See [`mockReset`](https://vitest.dev/api/mock#mockreset) docs for more info.\n\nIf you wanna dive in head first, check out the [API section](https://vitest.dev/api/vi) otherwise keep reading to take a deeper dive into the world of mocking.\n\n## Dates [​](#dates)\n\nSometimes you need to be in control of the date to ensure consistency when testing. Vitest uses [`@sinonjs/fake-timers`](https://github.com/sinonjs/fake-timers) package for manipulating timers, as well as system date. You can find more about the specific API in detail [here](https://vitest.dev/api/vi#vi-setsystemtime).\n\n### Example [​](#example)\n\njs\n\n```\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\n\nconst businessHours = [9, 17]\n\nfunction purchase() {\n  const currentHour = new Date().getHours()\n  const [open, close] = businessHours\n\n  if (currentHour > open && currentHour < close) {\n    return { message: 'Success' }\n  }\n\n  return { message: 'Error' }\n}\n\ndescribe('purchasing flow', () => {\n  beforeEach(() => {\n    // tell vitest we use mocked time\n    vi.useFakeTimers()\n  })\n\n  afterEach(() => {\n    // restoring date after each test run\n    vi.useRealTimers()\n  })\n\n  it('allows purchases within business hours', () => {\n    // set hour within business hours\n    const date = new Date(2000, 1, 1, 13)\n    vi.setSystemTime(date)\n\n    // access Date.now() will result in the date set above\n    expect(purchase()).toEqual({ message: 'Success' })\n  })\n\n  it('disallows purchases outside of business hours', () => {\n    // set hour outside business hours\n    const date = new Date(2000, 1, 1, 19)\n    vi.setSystemTime(date)\n\n    // access Date.now() will result in the date set above\n    expect(purchase()).toEqual({ message: 'Error' })\n  })\n})\n```\n\n## Functions [​](#functions)\n\nMocking functions can be split up into two different categories; _spying & mocking_.\n\nSometimes all you need is to validate whether or not a specific function has been called (and possibly which arguments were passed). In these cases a spy would be all we need which you can use directly with `vi.spyOn()` ([read more here](https://vitest.dev/api/vi#vi-spyon)).\n\nHowever spies can only help you **spy** on functions, they are not able to alter the implementation of those functions. In the case where we do need to create a fake (or mocked) version of a function we can use `vi.fn()` ([read more here](https://vitest.dev/api/vi#vi-fn)).\n\nWe use [Tinyspy](https://github.com/tinylibs/tinyspy) as a base for mocking functions, but we have our own wrapper to make it `jest` compatible. Both `vi.fn()` and `vi.spyOn()` share the same methods, however only the return result of `vi.fn()` is callable.\n\n### Example [​](#example-1)\n\njs\n\n```\nimport { afterEach, describe, expect, it, vi } from 'vitest'\n\nconst messages = {\n  items: [\n    { message: 'Simple test message', from: 'Testman' },\n    // ...\n  ],\n  getLatest, // can also be a `getter or setter if supported`\n}\n\nfunction getLatest(index = messages.items.length - 1) {\n  return messages.items[index]\n}\n\ndescribe('reading messages', () => {\n  afterEach(() => {\n    vi.restoreAllMocks()\n  })\n\n  it('should get the latest message with a spy', () => {\n    const spy = vi.spyOn(messages, 'getLatest')\n    expect(spy.getMockName()).toEqual('getLatest')\n\n    expect(messages.getLatest()).toEqual(\n      messages.items[messages.items.length - 1],\n    )\n\n    expect(spy).toHaveBeenCalledTimes(1)\n\n    spy.mockImplementationOnce(() => 'access-restricted')\n    expect(messages.getLatest()).toEqual('access-restricted')\n\n    expect(spy).toHaveBeenCalledTimes(2)\n  })\n\n  it('should get with a mock', () => {\n    const mock = vi.fn().mockImplementation(getLatest)\n\n    expect(mock()).toEqual(messages.items[messages.items.length - 1])\n    expect(mock).toHaveBeenCalledTimes(1)\n\n    mock.mockImplementationOnce(() => 'access-restricted')\n    expect(mock()).toEqual('access-restricted')\n\n    expect(mock).toHaveBeenCalledTimes(2)\n\n    expect(mock()).toEqual(messages.items[messages.items.length - 1])\n    expect(mock).toHaveBeenCalledTimes(3)\n  })\n})\n```\n\n### More [​](#more)\n\n*   [Jest's Mock Functions](https://jestjs.io/docs/mock-function-api)\n\n## Globals [​](#globals)\n\nYou can mock global variables that are not present with `jsdom` or `node` by using [`vi.stubGlobal`](https://vitest.dev/api/vi#vi-stubglobal) helper. It will put the value of the global variable into a `globalThis` object.\n\nts\n\n```\nimport { vi } from 'vitest'\n\nconst IntersectionObserverMock = vi.fn(() => ({\n  disconnect: vi.fn(),\n  observe: vi.fn(),\n  takeRecords: vi.fn(),\n  unobserve: vi.fn(),\n}))\n\nvi.stubGlobal('IntersectionObserver', IntersectionObserverMock)\n\n// now you can access it as `IntersectionObserver` or `window.IntersectionObserver`\n```\n\n## Modules [​](#modules)\n\nMock modules observe third-party-libraries, that are invoked in some other code, allowing you to test arguments, output or even redeclare its implementation.\n\nSee the [`vi.mock()` API section](https://vitest.dev/api/vi#vi-mock) for a more in-depth detailed API description.\n\n### Automocking Algorithm [​](#automocking-algorithm)\n\nIf your code is importing a mocked module, without any associated `__mocks__` file or `factory` for this module, Vitest will mock the module itself by invoking it and mocking every export.\n\nThe following principles apply\n\n*   All arrays will be emptied\n*   All primitives and collections will stay the same\n*   All objects will be deeply cloned\n*   All instances of classes and their prototypes will be deeply cloned\n\n### Virtual Modules [​](#virtual-modules)\n\nVitest supports mocking Vite [virtual modules](https://vitejs.dev/guide/api-plugin.html#virtual-modules-convention). It works differently from how virtual modules are treated in Jest. Instead of passing down `virtual: true` to a `vi.mock` function, you need to tell Vite that module exists otherwise it will fail during parsing. You can do that in several ways:\n\n1.  Provide an alias\n\nts\n\n```\n// vitest.config.js\nexport default {\n  test: {\n    alias: {\n      '$app/forms': resolve('./mocks/forms.js')\n    }\n  }\n}\n```\n\n2.  Provide a plugin that resolves a virtual module\n\nts\n\n```\n// vitest.config.js\nexport default {\n  plugins: [\n    {\n      name: 'virtual-modules',\n      resolveId(id) {\n        if (id === '$app/forms') {\n          return 'virtual:$app/forms'\n        }\n      }\n    }\n  ]\n}\n```\n\nThe benefit of the second approach is that you can dynamically create different virtual entrypoints. If you redirect several virtual modules into a single file, then all of them will be affected by `vi.mock`, so make sure to use unique identifiers.\n\n### Mocking Pitfalls [​](#mocking-pitfalls)\n\nBeware that it is not possible to mock calls to methods that are called inside other methods of the same file. For example, in this code:\n\nts\n\n```\nexport function foo() {\n  return 'foo'\n}\n\nexport function foobar() {\n  return `${foo()}bar`\n}\n```\n\nIt is not possible to mock the `foo` method from the outside because it is referenced directly. So this code will have no effect on the `foo` call inside `foobar` (but it will affect the `foo` call in other modules):\n\nts\n\n```\nimport { vi } from 'vitest'\nimport * as mod from './foobar.js'\n\n// this will only affect \"foo\" outside of the original module\nvi.spyOn(mod, 'foo')\nvi.mock('./foobar.js', async (importOriginal) => {\n  return {\n    ...await importOriginal<typeof import('./foobar.js')>(),\n    // this will only affect \"foo\" outside of the original module\n    foo: () => 'mocked'\n  }\n})\n```\n\nYou can confirm this behaviour by providing the implementation to the `foobar` method directly:\n\nts\n\n```\n// foobar.test.js\nimport * as mod from './foobar.js'\n\nvi.spyOn(mod, 'foo')\n\n// exported foo references mocked method\nmod.foobar(mod.foo)\n```\n\nts\n\n```\n// foobar.js\nexport function foo() {\n  return 'foo'\n}\n\nexport function foobar(injectedFoo) {\n  return injectedFoo !== foo // false\n}\n```\n\nThis is the intended behaviour. It is usually a sign of bad code when mocking is involved in such a manner. Consider refactoring your code into multiple files or improving your application architecture by using techniques such as [dependency injection](https://en.wikipedia.org/wiki/Dependency_injection).\n\n### Example [​](#example-2)\n\njs\n\n```\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\nimport { Client } from 'pg'\nimport { failure, success } from './handlers.js'\n\n// get todos\nexport async function getTodos(event, context) {\n  const client = new Client({\n    // ...clientOptions\n  })\n\n  await client.connect()\n\n  try {\n    const result = await client.query('SELECT * FROM todos;')\n\n    client.end()\n\n    return success({\n      message: `${result.rowCount} item(s) returned`,\n      data: result.rows,\n      status: true,\n    })\n  }\n  catch (e) {\n    console.error(e.stack)\n\n    client.end()\n\n    return failure({ message: e, status: false })\n  }\n}\n\nvi.mock('pg', () => {\n  const Client = vi.fn()\n  Client.prototype.connect = vi.fn()\n  Client.prototype.query = vi.fn()\n  Client.prototype.end = vi.fn()\n\n  return { Client }\n})\n\nvi.mock('./handlers.js', () => {\n  return {\n    success: vi.fn(),\n    failure: vi.fn(),\n  }\n})\n\ndescribe('get a list of todo items', () => {\n  let client\n\n  beforeEach(() => {\n    client = new Client()\n  })\n\n  afterEach(() => {\n    vi.clearAllMocks()\n  })\n\n  it('should return items successfully', async () => {\n    client.query.mockResolvedValueOnce({ rows: [], rowCount: 0 })\n\n    await getTodos()\n\n    expect(client.connect).toBeCalledTimes(1)\n    expect(client.query).toBeCalledWith('SELECT * FROM todos;')\n    expect(client.end).toBeCalledTimes(1)\n\n    expect(success).toBeCalledWith({\n      message: '0 item(s) returned',\n      data: [],\n      status: true,\n    })\n  })\n\n  it('should throw an error', async () => {\n    const mError = new Error('Unable to retrieve rows')\n    client.query.mockRejectedValueOnce(mError)\n\n    await getTodos()\n\n    expect(client.connect).toBeCalledTimes(1)\n    expect(client.query).toBeCalledWith('SELECT * FROM todos;')\n    expect(client.end).toBeCalledTimes(1)\n    expect(failure).toBeCalledWith({ message: mError, status: false })\n  })\n})\n```\n\n## File System [​](#file-system)\n\nMocking the file system ensures that the tests do not depend on the actual file system, making the tests more reliable and predictable. This isolation helps in avoiding side effects from previous tests. It allows for testing error conditions and edge cases that might be difficult or impossible to replicate with an actual file system, such as permission issues, disk full scenarios, or read/write errors.\n\nVitest doesn't provide any file system mocking API out of the box. You can use `vi.mock` to mock the `fs` module manually, but it's hard to maintain. Instead, we recommend using [`memfs`](https://www.npmjs.com/package/memfs) to do that for you. `memfs` creates an in-memory file system, which simulates file system operations without touching the actual disk. This approach is fast and safe, avoiding any potential side effects on the real file system.\n\n### Example [​](#example-3)\n\nTo automatially redirect every `fs` call to `memfs`, you can create `__mocks__/fs.cjs` and `__mocks__/fs/promises.cjs` files at the root of your project:\n\n\\_\\_mocks\\_\\_/fs.cjs\\_\\_mocks\\_\\_/fs/promises.cjs\n\nts\n\n```\n// we can also use `import`, but then\n// every export should be explicitly defined\n\nconst { fs } = require('memfs')\nmodule.exports = fs\n```\n\nts\n\n```\n// we can also use `import`, but then\n// every export should be explicitly defined\n\nconst { fs } = require('memfs')\nmodule.exports = fs.promises\n```\n\nts\n\n```\n// hello-world.js\nimport { readFileSync } from 'node:fs'\n\nexport function readHelloWorld(path) {\n  return readFileSync('./hello-world.txt')\n}\n```\n\nts\n\n```\n// hello-world.test.js\nimport { beforeEach, expect, it, vi } from 'vitest'\nimport { fs, vol } from 'memfs'\nimport { readHelloWorld } from './hello-world.js'\n\n// tell vitest to use fs mock from __mocks__ folder\n// this can be done in a setup file if fs should always be mocked\nvi.mock('node:fs')\nvi.mock('node:fs/promises')\n\nbeforeEach(() => {\n  // reset the state of in-memory fs\n  vol.reset()\n})\n\nit('should return correct text', () => {\n  const path = './hello-world.txt'\n  fs.writeFileSync(path, 'hello world')\n\n  const text = readHelloWorld(path)\n  expect(text).toBe('hello world')\n})\n\nit('can return a value multiple times', () => {\n  // you can use vol.fromJSON to define several files\n  vol.fromJSON(\n    {\n      './dir1/hw.txt': 'hello dir1',\n      './dir2/hw.txt': 'hello dir2',\n    },\n    // default cwd\n    '/tmp'\n  )\n\n  expect(readHelloWorld('/tmp/dir1/hw.txt')).toBe('hello dir1')\n  expect(readHelloWorld('/tmp/dir2/hw.txt')).toBe('hello dir2')\n})\n```\n\n## Requests [​](#requests)\n\nBecause Vitest runs in Node, mocking network requests is tricky; web APIs are not available, so we need something that will mimic network behavior for us. We recommend [Mock Service Worker](https://mswjs.io/) to accomplish this. It will let you mock both `REST` and `GraphQL` network requests, and is framework agnostic.\n\nMock Service Worker (MSW) works by intercepting the requests your tests make, allowing you to use it without changing any of your application code. In-browser, this uses the [Service Worker API](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API). In Node.js, and for Vitest, it uses the [`@mswjs/interceptors`](https://github.com/mswjs/interceptors) library. To learn more about MSW, read their [introduction](https://mswjs.io/docs/)\n\n### Configuration [​](#configuration)\n\nYou can use it like below in your [setup file](https://vitest.dev/config/#setupfiles)\n\njs\n\n```\nimport { afterAll, afterEach, beforeAll } from 'vitest'\nimport { setupServer } from 'msw/node'\nimport { HttpResponse, graphql, http } from 'msw'\n\nconst posts = [\n  {\n    userId: 1,\n    id: 1,\n    title: 'first post title',\n    body: 'first post body',\n  },\n  // ...\n]\n\nexport const restHandlers = [\n  http.get('https://rest-endpoint.example/path/to/posts', () => {\n    return HttpResponse.json(posts)\n  }),\n]\n\nconst graphqlHandlers = [\n  graphql.query('ListPosts', () => {\n    return HttpResponse.json(\n      {\n        data: { posts },\n      },\n    )\n  }),\n]\n\nconst server = setupServer(...restHandlers, ...graphqlHandlers)\n\n// Start server before all tests\nbeforeAll(() => server.listen({ onUnhandledRequest: 'error' }))\n\n//  Close server after all tests\nafterAll(() => server.close())\n\n// Reset handlers after each test `important for test isolation`\nafterEach(() => server.resetHandlers())\n```\n\n> Configuring the server with `onUnhandleRequest: 'error'` ensures that an error is thrown whenever there is a request that does not have a corresponding request handler.\n\n### More [​](#more-1)\n\nThere is much more to MSW. You can access cookies and query parameters, define mock error responses, and much more! To see all you can do with MSW, read [their documentation](https://mswjs.io/docs).\n\n## Timers [​](#timers)\n\nWhen we test code that involves timeouts or intervals, instead of having our tests wait it out or timeout, we can speed up our tests by using \"fake\" timers that mock calls to `setTimeout` and `setInterval`.\n\nSee the [`vi.useFakeTimers` API section](https://vitest.dev/api/vi#vi-usefaketimers) for a more in depth detailed API description.\n\n### Example [​](#example-4)\n\njs\n\n```\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\n\nfunction executeAfterTwoHours(func) {\n  setTimeout(func, 1000 * 60 * 60 * 2) // 2 hours\n}\n\nfunction executeEveryMinute(func) {\n  setInterval(func, 1000 * 60) // 1 minute\n}\n\nconst mock = vi.fn(() => console.log('executed'))\n\ndescribe('delayed execution', () => {\n  beforeEach(() => {\n    vi.useFakeTimers()\n  })\n  afterEach(() => {\n    vi.restoreAllMocks()\n  })\n  it('should execute the function', () => {\n    executeAfterTwoHours(mock)\n    vi.runAllTimers()\n    expect(mock).toHaveBeenCalledTimes(1)\n  })\n  it('should not execute the function', () => {\n    executeAfterTwoHours(mock)\n    // advancing by 2ms won't trigger the func\n    vi.advanceTimersByTime(2)\n    expect(mock).not.toHaveBeenCalled()\n  })\n  it('should execute every minute', () => {\n    executeEveryMinute(mock)\n    vi.advanceTimersToNextTimer()\n    expect(mock).toHaveBeenCalledTimes(1)\n    vi.advanceTimersToNextTimer()\n    expect(mock).toHaveBeenCalledTimes(2)\n  })\n})\n```\n\n## Cheat Sheet [​](#cheat-sheet)\n\nINFO\n\n`vi` in the examples below is imported directly from `vitest`. You can also use it globally, if you set `globals` to `true` in your [config](https://vitest.dev/config/).\n\nI want to…\n\n### Spy on a `method` [​](#spy-on-a-method)\n\nts\n\n```\nconst instance = new SomeClass()\nvi.spyOn(instance, 'method')\n```\n\n### Mock exported variables [​](#mock-exported-variables)\n\njs\n\n```\n// some-path.js\nexport const getter = 'variable'\n```\n\nts\n\n```\n// some-path.test.ts\nimport * as exports from './some-path.js'\n\nvi.spyOn(exports, 'getter', 'get').mockReturnValue('mocked')\n```\n\n### Mock an exported function [​](#mock-an-exported-function)\n\n1.  Example with `vi.mock`:\n\nWARNING\n\nDon't forget that a `vi.mock` call is hoisted to top of the file. It will always be executed before all imports.\n\nts\n\n```\n// ./some-path.js\nexport function method() {}\n```\n\nts\n\n```\nimport { method } from './some-path.js'\n\nvi.mock('./some-path.js', () => ({\n  method: vi.fn()\n}))\n```\n\n2.  Example with `vi.spyOn`:\n\nts\n\n```\nimport * as exports from './some-path.js'\n\nvi.spyOn(exports, 'method').mockImplementation(() => {})\n```\n\n### Mock an exported class implementation [​](#mock-an-exported-class-implementation)\n\n1.  Example with `vi.mock` and `.prototype`:\n\nts\n\n```\n// some-path.ts\nexport class SomeClass {}\n```\n\nts\n\n```\nimport { SomeClass } from './some-path.js'\n\nvi.mock('./some-path.js', () => {\n  const SomeClass = vi.fn()\n  SomeClass.prototype.someMethod = vi.fn()\n  return { SomeClass }\n})\n// SomeClass.mock.instances will have SomeClass\n```\n\n2.  Example with `vi.mock` and a return value:\n\nts\n\n```\nimport { SomeClass } from './some-path.js'\n\nvi.mock('./some-path.js', () => {\n  const SomeClass = vi.fn(() => ({\n    someMethod: vi.fn()\n  }))\n  return { SomeClass }\n})\n// SomeClass.mock.returns will have returned object\n```\n\n3.  Example with `vi.spyOn`:\n\nts\n\n```\nimport * as exports from './some-path.js'\n\nvi.spyOn(exports, 'SomeClass').mockImplementation(() => {\n  // whatever suites you from first two examples\n})\n```\n\n### Spy on an object returned from a function [​](#spy-on-an-object-returned-from-a-function)\n\n1.  Example using cache:\n\nts\n\n```\n// some-path.ts\nexport function useObject() {\n  return { method: () => true }\n}\n```\n\nts\n\n```\n// useObject.js\nimport { useObject } from './some-path.js'\n\nconst obj = useObject()\nobj.method()\n```\n\nts\n\n```\n// useObject.test.js\nimport { useObject } from './some-path.js'\n\nvi.mock('./some-path.js', () => {\n  let _cache\n  const useObject = () => {\n    if (!_cache) {\n      _cache = {\n        method: vi.fn(),\n      }\n    }\n    // now every time that useObject() is called it will\n    // return the same object reference\n    return _cache\n  }\n  return { useObject }\n})\n\nconst obj = useObject()\n// obj.method was called inside some-path\nexpect(obj.method).toHaveBeenCalled()\n```\n\n### Mock part of a module [​](#mock-part-of-a-module)\n\nts\n\n```\nimport { mocked, original } from './some-path.js'\n\nvi.mock('./some-path.js', async (importOriginal) => {\n  const mod = await importOriginal<typeof import('./some-path.js')>()\n  return {\n    ...mod,\n    mocked: vi.fn()\n  }\n})\noriginal() // has original behaviour\nmocked() // is a spy function\n```\n\n### Mock the current date [​](#mock-the-current-date)\n\nTo mock `Date`'s time, you can use `vi.setSystemTime` helper function. This value will **not** automatically reset between different tests.\n\nBeware that using `vi.useFakeTimers` also changes the `Date`'s time.\n\nts\n\n```\nconst mockDate = new Date(2022, 0, 1)\nvi.setSystemTime(mockDate)\nconst now = new Date()\nexpect(now.valueOf()).toBe(mockDate.valueOf())\n// reset mocked time\nvi.useRealTimers()\n```\n\n### Mock a global variable [​](#mock-a-global-variable)\n\nYou can set global variable by assigning a value to `globalThis` or using [`vi.stubGlobal`](https://vitest.dev/api/vi#vi-stubglobal) helper. When using `vi.stubGlobal`, it will **not** automatically reset between different tests, unless you enable [`unstubGlobals`](https://vitest.dev/config/#unstubglobals) config option or call [`vi.unstubAllGlobals`](https://vitest.dev/api/vi#vi-unstuballglobals).\n\nts\n\n```\nvi.stubGlobal('__VERSION__', '1.0.0')\nexpect(__VERSION__).toBe('1.0.0')\n```\n\n### Mock `import.meta.env` [​](#mock-import-meta-env)\n\n1.  To change environmental variable, you can just assign a new value to it.\n\nWARNING\n\nThe environmental variable value will **_not_** automatically reset between different tests.\n\nts\n\n```\nimport { beforeEach, expect, it } from 'vitest'\n\n// you can reset it in beforeEach hook manually\nconst originalViteEnv = import.meta.env.VITE_ENV\n\nbeforeEach(() => {\n  import.meta.env.VITE_ENV = originalViteEnv\n})\n\nit('changes value', () => {\n  import.meta.env.VITE_ENV = 'staging'\n  expect(import.meta.env.VITE_ENV).toBe('staging')\n})\n```\n\n2.  If you want to automatically reset the value(s), you can use the `vi.stubEnv` helper with the [`unstubEnvs`](https://vitest.dev/config/#unstubenvs) config option enabled (or call [`vi.unstubAllEnvs`](https://vitest.dev/api/vi#vi-unstuballenvs) manually in a `beforeEach` hook):\n\nts\n\n```\nimport { expect, it, vi } from 'vitest'\n\n// before running tests \"VITE_ENV\" is \"test\"\nimport.meta.env.VITE_ENV === 'test'\n\nit('changes value', () => {\n  vi.stubEnv('VITE_ENV', 'staging')\n  expect(import.meta.env.VITE_ENV).toBe('staging')\n})\n\nit('the value is restored before running an other test', () => {\n  expect(import.meta.env.VITE_ENV).toBe('test')\n})\n```\n\nts\n\n```\n// vitest.config.ts\nexport default {\n  test: {\n    unstubAllEnvs: true,\n  }\n}\n```",
    "title": "Mocking | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/browser/assertion-api",
    "markdown": "# Assertion API | Browser Mode\n\nVitest bundles [`@testing-library/jest-dom`](https://github.com/testing-library/jest-dom) library to provide a wide range of DOM assertions out of the box. For detailed documentation, you can read the `jest-dom` readme:\n\n*   [`toBeDisabled`](https://github.com/testing-library/jest-dom#toBeDisabled)\n*   [`toBeEnabled`](https://github.com/testing-library/jest-dom#toBeEnabled)\n*   [`toBeEmptyDOMElement`](https://github.com/testing-library/jest-dom#toBeEmptyDOMElement)\n*   [`toBeInTheDocument`](https://github.com/testing-library/jest-dom#toBeInTheDocument)\n*   [`toBeInvalid`](https://github.com/testing-library/jest-dom#toBeInvalid)\n*   [`toBeRequired`](https://github.com/testing-library/jest-dom#toBeRequired)\n*   [`toBeValid`](https://github.com/testing-library/jest-dom#toBeValid)\n*   [`toBeVisible`](https://github.com/testing-library/jest-dom#toBeVisible)\n*   [`toContainElement`](https://github.com/testing-library/jest-dom#toContainElement)\n*   [`toContainHTML`](https://github.com/testing-library/jest-dom#toContainHTML)\n*   [`toHaveAccessibleDescription`](https://github.com/testing-library/jest-dom#toHaveAccessibleDescription)\n*   [`toHaveAccessibleErrorMessage`](https://github.com/testing-library/jest-dom#toHaveAccessibleErrorMessage)\n*   [`toHaveAccessibleName`](https://github.com/testing-library/jest-dom#toHaveAccessibleName)\n*   [`toHaveAttribute`](https://github.com/testing-library/jest-dom#toHaveAttribute)\n*   [`toHaveClass`](https://github.com/testing-library/jest-dom#toHaveClass)\n*   [`toHaveFocus`](https://github.com/testing-library/jest-dom#toHaveFocus)\n*   [`toHaveFormValues`](https://github.com/testing-library/jest-dom#toHaveFormValues)\n*   [`toHaveStyle`](https://github.com/testing-library/jest-dom#toHaveStyle)\n*   [`toHaveTextContent`](https://github.com/testing-library/jest-dom#toHaveTextContent)\n*   [`toHaveValue`](https://github.com/testing-library/jest-dom#toHaveValue)\n*   [`toHaveDisplayValue`](https://github.com/testing-library/jest-dom#toHaveDisplayValue)\n*   [`toBeChecked`](https://github.com/testing-library/jest-dom#toBeChecked)\n*   [`toBePartiallyChecked`](https://github.com/testing-library/jest-dom#toBePartiallyChecked)\n*   [`toHaveRole`](https://github.com/testing-library/jest-dom#toHaveRole)\n*   [`toHaveErrorMessage`](https://github.com/testing-library/jest-dom#toHaveErrorMessage)\n\nIf you are using TypeScript or want to have correct type hints in `expect`, make sure you have either `@vitest/browser/providers/playwright` or `@vitest/browser/providers/webdriverio` specified in your `tsconfig` depending on the provider you use. If you use the default `preview` provider, you can specify `@vitest/browser/matchers` instead.\n\npreviewplaywrightwebdriverio\n\njson\n\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\n      \"@vitest/browser/matchers\"\n    ]\n  }\n}\n```\n\njson\n\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\n      \"@vitest/browser/providers/playwright\"\n    ]\n  }\n}\n```\n\njson\n\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\n      \"@vitest/browser/providers/webdriverio\"\n    ]\n  }\n}\n```",
    "title": "Assertion API | Browser Mode | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/browser/",
    "markdown": "# Browser Mode | Guide | Vitest\n\n## Browser Mode Experimental [​](#browser-mode)\n\nThis page provides information about the experimental browser mode feature in the Vitest API, which allows you to run your tests in the browser natively, providing access to browser globals like window and document. This feature is currently under development, and APIs may change in the future.\n\n## Installation [​](#installation)\n\nFor easier setup, you can use `vitest init browser` command to install required dependencies and create browser configuration.\n\nnpmyarnpnpmbun\n\nbash\n\n```\nnpx vitest init browser\n```\n\nbash\n\n```\nyarn exec vitest init browser\n```\n\nbash\n\n```\npnpx vitest init browser\n```\n\nbash\n\n```\nbunx vitest init browser\n```\n\n### Manual Installation [​](#manual-installation)\n\nYou can also install packages manually. By default, Browser Mode doesn't require any additional E2E provider to run tests locally because it reuses your existing browser.\n\nnpmyarnpnpmbun\n\nbash\n\n```\nnpm install -D vitest @vitest/browser\n```\n\nbash\n\n```\nyarn add -D vitest @vitest/browser\n```\n\nbash\n\n```\npnpm add -D vitest @vitest/browser\n```\n\nbash\n\n```\nbun add -D vitest @vitest/browser\n```\n\nWARNING\n\nHowever, to run tests in CI you need to install either [`playwright`](https://npmjs.com/package/playwright) or [`webdriverio`](https://www.npmjs.com/package/webdriverio). We also recommend switching to either one of them for testing locally instead of using the default `preview` provider since it relies on simulating events instead of using Chrome DevTools Protocol.\n\n### Using Playwright [​](#using-playwright)\n\nnpmyarnpnpmbun\n\nbash\n\n```\nnpm install -D vitest @vitest/browser playwright\n```\n\nbash\n\n```\nyarn add -D vitest @vitest/browser playwright\n```\n\nbash\n\n```\npnpm add -D vitest @vitest/browser playwright\n```\n\nbash\n\n```\nbun add -D vitest @vitest/browser playwright\n```\n\n### Using Webdriverio [​](#using-webdriverio)\n\nnpmyarnpnpmbun\n\nbash\n\n```\nnpm install -D vitest @vitest/browser webdriverio\n```\n\nbash\n\n```\nyarn add -D vitest @vitest/browser webdriverio\n```\n\nbash\n\n```\npnpm add -D vitest @vitest/browser webdriverio\n```\n\nbash\n\n```\nbun add -D vitest @vitest/browser webdriverio\n```\n\n## Configuration [​](#configuration)\n\nTo activate browser mode in your Vitest configuration, you can use the `--browser` flag or set the `browser.enabled` field to `true` in your Vitest configuration file. Here is an example configuration using the browser field:\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    browser: {\n      provider: 'playwright', // or 'webdriverio'\n      enabled: true,\n      name: 'chrome', // browser name is required\n    },\n  }\n})\n```\n\nIf you have not used Vite before, make sure you have your framework's plugin installed and specified in the config. Some frameworks might require extra configuration to work - check their Vite related documentation to be sure.\n\nvuesveltesolidmarko\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\nimport vue from '@vitejs/plugin-vue'\n\nexport default defineConfig({\n  plugins: [vue()],\n  test: {\n    browser: {\n      enabled: true,\n      provider: 'playwright',\n      name: 'chrome',\n    }\n  }\n})\n```\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\nimport { svelte } from '@sveltejs/vite-plugin-svelte'\n\nexport default defineConfig({\n  plugins: [svelte()],\n  test: {\n    browser: {\n      enabled: true,\n      provider: 'playwright',\n      name: 'chrome',\n    }\n  }\n})\n```\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\nimport solidPlugin from 'vite-plugin-solid'\n\nexport default defineConfig({\n  plugins: [solidPlugin()],\n  test: {\n    browser: {\n      enabled: true,\n      provider: 'playwright',\n      name: 'chrome',\n    }\n  }\n})\n```\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\nimport marko from '@marko/vite'\n\nexport default defineConfig({\n  plugins: [marko()],\n  test: {\n    browser: {\n      enabled: true,\n      provider: 'playwright',\n      name: 'chrome',\n    }\n  }\n})\n```\n\nTIP\n\n`react` doesn't require a plugin to work, but `preact` requires [extra configuration](https://preactjs.com/guide/v10/getting-started/#create-a-vite-powered-preact-app) to make aliases work.\n\nIf you need to run some tests using Node-based runner, you can define a [workspace](https://vitest.dev/guide/workspace) file with separate configurations for different testing strategies:\n\nts\n\n```\n// vitest.workspace.ts\nimport { defineWorkspace } from 'vitest/config'\n\nexport default defineWorkspace([\n  {\n    test: {\n      // an example of file based convention,\n      // you don't have to follow it\n      include: [\n        'tests/unit/**/*.{test,spec}.ts',\n        'tests/**/*.unit.{test,spec}.ts',\n      ],\n      name: 'unit',\n      environment: 'node',\n    },\n  },\n  {\n    test: {\n      // an example of file based convention,\n      // you don't have to follow it\n      include: [\n        'tests/browser/**/*.{test,spec}.ts',\n        'tests/**/*.browser.{test,spec}.ts',\n      ],\n      name: 'browser',\n      browser: {\n        enabled: true,\n        name: 'chrome',\n      },\n    },\n  },\n])\n```\n\n## Browser Option Types [​](#browser-option-types)\n\nThe browser option in Vitest depends on the provider. Vitest will fail, if you pass `--browser` and don't specify its name in the config file. Available options:\n\n*   `webdriverio` supports these browsers:\n    *   `firefox`\n    *   `chrome`\n    *   `edge`\n    *   `safari`\n*   `playwright` supports these browsers:\n    *   `firefox`\n    *   `webkit`\n    *   `chromium`\n\n## Browser Compatibility [​](#browser-compatibility)\n\nVitest uses [Vite dev server](https://vitejs.dev/guide/#browser-support) to run your tests, so we only support features specified in the [`esbuild.target`](https://vitejs.dev/config/shared-options.html#esbuild) option (`esnext` by default).\n\nBy default, Vite targets browsers which support the native [ES Modules](https://caniuse.com/es6-module), native [ESM dynamic import](https://caniuse.com/es6-module-dynamic-import), and [`import.meta`](https://caniuse.com/mdn-javascript_operators_import_meta). On top of that, we utilize [`BroadcastChannel`](https://caniuse.com/?search=BroadcastChannel) to communicate between iframes:\n\n*   Chrome >=87\n*   Firefox >=78\n*   Safari >=15.4\n*   Edge >=88\n\n## Motivation [​](#motivation)\n\nWe developed the Vitest browser mode feature to help improve testing workflows and achieve more accurate and reliable test results. This experimental addition to our testing API allows developers to run tests in a native browser environment. In this section, we'll explore the motivations behind this feature and its benefits for testing.\n\n### Different Ways of Testing [​](#different-ways-of-testing)\n\nThere are different ways to test JavaScript code. Some testing frameworks simulate browser environments in Node.js, while others run tests in real browsers. In this context, [jsdom](https://www.npmjs.com/package/jsdom) is an example of a spec implementation that simulates a browser environment by being used with a test runner like Jest or Vitest, while other testing tools such as [WebdriverIO](https://webdriver.io/) or [Cypress](https://www.cypress.io/) allow developers to test their applications in a real browser or in case of [Playwright](https://playwright.dev/) provide you a browser engine.\n\n### The Simulation Caveat [​](#the-simulation-caveat)\n\nTesting JavaScript programs in simulated environments such as jsdom or happy-dom has simplified the test setup and provided an easy-to-use API, making them suitable for many projects and increasing confidence in test results. However, it is crucial to keep in mind that these tools only simulate a browser environment and not an actual browser, which may result in some discrepancies between the simulated environment and the real environment. Therefore, false positives or negatives in test results may occur.\n\nTo achieve the highest level of confidence in our tests, it's crucial to test in a real browser environment. This is why we developed the browser mode feature in Vitest, allowing developers to run tests natively in a browser and gain more accurate and reliable test results. With browser-level testing, developers can be more confident that their application will work as intended in a real-world scenario.\n\n## Drawbacks [​](#drawbacks)\n\nWhen using Vitest browser, it is important to consider the following drawbacks:\n\n### Early Development [​](#early-development)\n\nThe browser mode feature of Vitest is still in its early stages of development. As such, it may not yet be fully optimized, and there may be some bugs or issues that have not yet been ironed out. It is recommended that users augment their Vitest browser experience with a standalone browser-side test runner like WebdriverIO, Cypress or Playwright.\n\n### Longer Initialization [​](#longer-initialization)\n\nVitest browser requires spinning up the provider and the browser during the initialization process, which can take some time. This can result in longer initialization times compared to other testing patterns.\n\n## Cross-Browser Testing [​](#cross-browser-testing)\n\nWhen you specify a browser name in the browser option, Vitest will try to run the specified browser using [WebdriverIO](https://webdriver.io/) by default, and then run the tests there. This feature makes cross-browser testing easy to use and configure in environments like a CI. If you don't want to use WebdriverIO, you can configure the custom browser provider by using `browser.provider` option.\n\nTo specify a browser using the CLI, use the `--browser` flag followed by the browser name, like this:\n\nsh\n\n```\nnpx vitest --browser=chrome\n```\n\nOr you can provide browser options to CLI with dot notation:\n\nsh\n\n```\nnpx vitest --browser.name=chrome --browser.headless\n```\n\n## Headless [​](#headless)\n\nHeadless mode is another option available in the browser mode. In headless mode, the browser runs in the background without a user interface, which makes it useful for running automated tests. The headless option in Vitest can be set to a boolean value to enable or disable headless mode.\n\nHere's an example configuration enabling headless mode:\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    browser: {\n      provider: 'playwright',\n      enabled: true,\n      headless: true,\n    },\n  }\n})\n```\n\nYou can also set headless mode using the `--browser.headless` flag in the CLI, like this:\n\nsh\n\n```\nnpx vitest --browser.name=chrome --browser.headless\n```\n\nIn this case, Vitest will run in headless mode using the Chrome browser.\n\nWARNING\n\nHeadless mode is not available by default. You need to use either [`playwright`](https://npmjs.com/package/playwright) or [`webdriverio`](https://www.npmjs.com/package/webdriverio) providers to enable this feature.\n\n## Limitations [​](#limitations)\n\n### Thread Blocking Dialogs [​](#thread-blocking-dialogs)\n\nWhen using Vitest Browser, it's important to note that thread blocking dialogs like `alert` or `confirm` cannot be used natively. This is because they block the web page, which means Vitest cannot continue communicating with the page, causing the execution to hang.\n\nIn such situations, Vitest provides default mocks with default returned values for these APIs. This ensures that if the user accidentally uses synchronous popup web APIs, the execution would not hang. However, it's still recommended for the user to mock these web APIs for better experience. Read more in [Mocking](https://vitest.dev/guide/mocking).",
    "title": "Browser Mode | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/browser/retry-ability",
    "markdown": "# Retry-ability | Browser Mode | Vitest\n\nTests in the browser might fail inconsistently due to their asynchronous nature. Because of this, it is important to have a way to guarantee that assertions succeed even if the condition is delayed (by a timeout, network request, or animation, for example). For this purpose, Vitest provides retriable assertions out of the box via the [`expect.poll`](https://vitest.dev/api/expect#poll) and `expect.element` APIs:\n\nts\n\n```\nimport { expect, test } from 'vitest'\nimport { screen } from '@testing-library/dom'\n\ntest('error banner is rendered', async () => {\n  triggerError()\n\n  // @testing-library provides queries with built-in retry-ability\n  // It will try to find the banner until it's rendered\n  const banner = await screen.findByRole('alert', {\n    name: /error/i,\n  })\n\n  // Vitest provides `expect.element` with built-in retry-ability\n  // It will check `element.textContent` until it's equal to \"Error!\"\n  await expect.element(banner).toHaveTextContent('Error!')\n})\n```\n\nTIP\n\n`expect.element` is a shorthand for `expect.poll(() => element)` and works in exactly the same way.\n\n`toHaveTextContent` and all other [`@testing-library/jest-dom`](https://github.com/testing-library/jest-dom) assertions are still available on a regular `expect` without a built-in retry-ability mechanism:\n\nts\n\n```\n// will fail immediately if .textContent is not `'Error!'`\nexpect(banner).toHaveTextContent('Error!')\n```",
    "title": "Retry-ability | Browser Mode | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/browser/context",
    "markdown": "# Context | Browser Mode | Vitest\n\nVitest exposes a context module via `@vitest/browser/context` entry point. As of 2.0, it exposes a small set of utilities that might be useful to you in tests.\n\nts\n\n```\nexport const server: {\n  /**\n   * Platform the Vitest server is running on.\n   * The same as calling `process.platform` on the server.\n   */\n  platform: Platform\n  /**\n   * Runtime version of the Vitest server.\n   * The same as calling `process.version` on the server.\n   */\n  version: string\n  /**\n   * Name of the browser provider.\n   */\n  provider: string\n  /**\n   * Name of the current browser.\n   */\n  browser: string\n  /**\n   * Available commands for the browser.\n   */\n  commands: BrowserCommands\n}\n\n/**\n * Handler for user interactions. The support is implemented by the browser provider (`playwright` or `webdriverio`).\n * If used with `preview` provider, fallbacks to simulated events via `@testing-library/user-event`.\n * @experimental\n */\nexport const userEvent: {\n  setup: () => UserEvent\n  click: (element: Element, options?: UserEventClickOptions) => Promise<void>\n  dblClick: (element: Element, options?: UserEventDoubleClickOptions) => Promise<void>\n  tripleClick: (element: Element, options?: UserEventTripleClickOptions) => Promise<void>\n  selectOptions: (\n    element: Element,\n    values: HTMLElement | HTMLElement[] | string | string[],\n    options?: UserEventSelectOptions,\n  ) => Promise<void>\n  keyboard: (text: string) => Promise<void>\n  type: (element: Element, text: string, options?: UserEventTypeOptions) => Promise<void>\n  clear: (element: Element) => Promise<void>\n  tab: (options?: UserEventTabOptions) => Promise<void>\n  hover: (element: Element, options?: UserEventHoverOptions) => Promise<void>\n  unhover: (element: Element, options?: UserEventHoverOptions) => Promise<void>\n  fill: (element: Element, text: string, options?: UserEventFillOptions) => Promise<void>\n  dragAndDrop: (source: Element, target: Element, options?: UserEventDragAndDropOptions) => Promise<void>\n}\n\n/**\n * Available commands for the browser.\n * A shortcut to `server.commands`.\n */\nexport const commands: BrowserCommands\n\nexport const page: {\n  /**\n   * Serialized test config.\n   */\n  config: ResolvedConfig\n  /**\n   * Change the size of iframe's viewport.\n   */\n  viewport(width: number, height: number): Promise<void>\n  /**\n   * Make a screenshot of the test iframe or a specific element.\n   * @returns Path to the screenshot file or path and base64.\n   */\n  screenshot(options: Omit<ScreenshotOptions, 'base64'> & { base64: true }): Promise<{\n    path: string\n    base64: string\n  }>\n  screenshot(options?: ScreenshotOptions): Promise<string>\n}\n\nexport const cdp: () => CDPSession\n```",
    "title": "Context | Browser Mode | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/browser/interactivity-api",
    "markdown": "# Interactivity API | Browser Mode\n\nVitest implements a subset of [`@testing-library/user-event`](https://testing-library.com/docs/user-event) APIs using [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/) or [webdriver](https://www.w3.org/TR/webdriver/) APIs instead of faking events which makes the browser behaviour more reliable and consistent with how users interact with a page.\n\nAlmost every `userEvent` method inherits its provider options. To see all available options in your IDE, add `webdriver` or `playwright` types to your `tsconfig.json` file:\n\nplaywrightwebdriverio\n\njson\n\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\n      \"@vitest/browser/providers/playwright\"\n    ]\n  }\n}\n```\n\njson\n\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\n      \"@vitest/browser/providers/webdriverio\"\n    ]\n  }\n}\n```\n\n## userEvent.click [​](#userevent-click)\n\n*   **Type:** `(element: Element, options?: UserEventClickOptions) => Promise<void>`\n\nClick on an element. Inherits provider's options. Please refer to your provider's documentation for detailed explanation about how this method works.\n\nts\n\n```\nimport { userEvent } from '@vitest/browser/context'\nimport { screen } from '@testing-library/dom'\n\ntest('clicks on an element', async () => {\n  const logo = screen.getByRole('img', { name: /logo/ })\n\n  await userEvent.click(logo)\n})\n```\n\nReferences:\n\n*   [Playwright `locator.click` API](https://playwright.dev/docs/api/class-locator#locator-click)\n*   [WebdriverIO `element.click` API](https://webdriver.io/docs/api/element/click/)\n*   [testing-library `click` API](https://testing-library.com/docs/user-event/convenience/#click)\n\n## userEvent.dblClick [​](#userevent-dblclick)\n\n*   **Type:** `(element: Element, options?: UserEventDoubleClickOptions) => Promise<void>`\n\nTriggers a double click event on an element.\n\nPlease refer to your provider's documentation for detailed explanation about how this method works.\n\nts\n\n```\nimport { userEvent } from '@vitest/browser/context'\nimport { screen } from '@testing-library/dom'\n\ntest('triggers a double click on an element', async () => {\n  const logo = screen.getByRole('img', { name: /logo/ })\n\n  await userEvent.dblClick(logo)\n})\n```\n\nReferences:\n\n*   [Playwright `locator.dblclick` API](https://playwright.dev/docs/api/class-locator#locator-dblclick)\n*   [WebdriverIO `element.doubleClick` API](https://webdriver.io/docs/api/element/doubleClick/)\n*   [testing-library `dblClick` API](https://testing-library.com/docs/user-event/convenience/#dblClick)\n\n## userEvent.tripleClick [​](#userevent-tripleclick)\n\n*   **Type:** `(element: Element, options?: UserEventTripleClickOptions) => Promise<void>`\n\nTriggers a triple click event on an element. Since there is no `tripleclick` in browser api, this method will fire three click events in a row, and so you must check [click event detail](https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#usage_notes) to filter the event: `evt.detail === 3`.\n\nPlease refer to your provider's documentation for detailed explanation about how this method works.\n\nts\n\n```\nimport { userEvent } from '@vitest/browser/context'\nimport { screen } from '@testing-library/dom'\n\ntest('triggers a triple click on an element', async () => {\n  const logo = screen.getByRole('img', { name: /logo/ })\n  let tripleClickFired = false\n  logo.addEventListener('click', (evt) => {\n    if (evt.detail === 3) {\n      tripleClickFired = true\n    }\n  })\n\n  await userEvent.tripleClick(logo)\n  expect(tripleClickFired).toBe(true)\n})\n```\n\nReferences:\n\n*   [Playwright `locator.click` API](https://playwright.dev/docs/api/class-locator#locator-click): implemented via `click` with `clickCount: 3` .\n*   [WebdriverIO `browser.action` API](https://webdriver.io/docs/api/browser/action/): implemented via actions api with `move` plus three `down + up + pause` events in a row\n*   [testing-library `tripleClick` API](https://testing-library.com/docs/user-event/convenience/#tripleClick)\n\n## userEvent.fill [​](#userevent-fill)\n\n*   **Type:** `(element: Element, text: string) => Promise<void>`\n\nFill an `input/textarea/conteneditable` element with text. This will remove any existing text in the input before typing the new value.\n\nts\n\n```\nimport { userEvent } from '@vitest/browser/context'\nimport { screen } from '@testing-library/dom'\n\ntest('update input', async () => {\n  const input = screen.getByRole('input')\n\n  await userEvent.fill(input, 'foo') // input.value == foo\n  await userEvent.fill(input, '{{a[[') // input.value == {{a[[\n  await userEvent.fill(input, '{Shift}') // input.value == {Shift}\n})\n```\n\nTIP\n\nThis API is faster than using [`userEvent.type`](#userevent-type) or [`userEvent.keyboard`](#userevent-keyboard), but it **doesn't support** [user-event `keyboard` syntax](https://testing-library.com/docs/user-event/keyboard) (e.g., `{Shift}{selectall}`).\n\nWe recommend using this API over [`userEvent.type`](#userevent-type) in situations when you don't need to enter special characters.\n\nReferences:\n\n*   [Playwright `locator.fill` API](https://playwright.dev/docs/api/class-locator#locator-fill)\n*   [WebdriverIO `element.setValue` API](https://webdriver.io/docs/api/element/setValue)\n*   [testing-library `type` API](https://testing-library.com/docs/user-event/utility/#type)\n\n## userEvent.keyboard [​](#userevent-keyboard)\n\n*   **Type:** `(text: string) => Promise<void>`\n\nThe `userEvent.keyboard` allows you to trigger keyboard strokes. If any input has a focus, it will type characters into that input. Otherwise, it will trigger keyboard events on the currently focused element (`document.body` if there are no focused elements).\n\nThis API supports [user-event `keyboard` syntax](https://testing-library.com/docs/user-event/keyboard).\n\nts\n\n```\nimport { userEvent } from '@vitest/browser/context'\nimport { screen } from '@testing-library/dom'\n\ntest('trigger keystrokes', async () => {\n  await userEvent.keyboard('foo') // translates to: f, o, o\n  await userEvent.keyboard('{{a[[') // translates to: {, a, [\n  await userEvent.keyboard('{Shift}{f}{o}{o}') // translates to: Shift, f, o, o\n  await userEvent.keyboard('{a>5}') // press a without releasing it and trigger 5 keydown\n  await userEvent.keyboard('{a>5/}') // press a for 5 keydown and then release it\n})\n```\n\nReferences:\n\n*   [Playwright `locator.press` API](https://playwright.dev/docs/api/class-locator#locator-press)\n*   [WebdriverIO `action('key')` API](https://webdriver.io/docs/api/browser/action#key-input-source)\n*   [testing-library `type` API](https://testing-library.com/docs/user-event/utility/#type)\n\n## userEvent.tab [​](#userevent-tab)\n\n*   **Type:** `(options?: UserEventTabOptions) => Promise<void>`\n\nSends a `Tab` key event. This is a shorthand for `userEvent.keyboard('{tab}')`.\n\nts\n\n```\nimport { userEvent } from '@vitest/browser/context'\nimport { screen } from '@testing-library/dom'\n\ntest('tab works', async () => {\n  const [input1, input2] = screen.getAllByRole('input')\n\n  expect(input1).toHaveFocus()\n\n  await userEvent.tab()\n\n  expect(input2).toHaveFocus()\n\n  await userEvent.tab({ shift: true })\n\n  expect(input1).toHaveFocus()\n})\n```\n\nReferences:\n\n*   [Playwright `locator.press` API](https://playwright.dev/docs/api/class-locator#locator-press)\n*   [WebdriverIO `action('key')` API](https://webdriver.io/docs/api/browser/action#key-input-source)\n*   [testing-library `tab` API](https://testing-library.com/docs/user-event/convenience/#tab)\n\n## userEvent.type [​](#userevent-type)\n\n*   **Type:** `(element: Element, text: string, options?: UserEventTypeOptions) => Promise<void>`\n\nWARNING\n\nIf you don't rely on [special characters](https://testing-library.com/docs/user-event/keyboard) (e.g., `{shift}` or `{selectall}`), it is recommended to use [`userEvent.fill`](#userevent-fill) instead.\n\nThe `type` method implements `@testing-library/user-event`'s [`type`](https://testing-library.com/docs/user-event/utility/#type) utility built on top of [`keyboard`](https://testing-library.com/docs/user-event/keyboard) API.\n\nThis function allows you to type characters into an input/textarea/conteneditable element. It supports [user-event `keyboard` syntax](https://testing-library.com/docs/user-event/keyboard).\n\nIf you just need to press characters without an input, use [`userEvent.keyboard`](#userevent-keyboard) API.\n\nts\n\n```\nimport { userEvent } from '@vitest/browser/context'\nimport { screen } from '@testing-library/dom'\n\ntest('update input', async () => {\n  const input = screen.getByRole('input')\n\n  await userEvent.type(input, 'foo') // input.value == foo\n  await userEvent.type(input, '{{a[[') // input.value == foo{a[\n  await userEvent.type(input, '{Shift}') // input.value == foo{a[\n})\n```\n\nReferences:\n\n*   [Playwright `locator.press` API](https://playwright.dev/docs/api/class-locator#locator-press)\n*   [WebdriverIO `action('key')` API](https://webdriver.io/docs/api/browser/action#key-input-source)\n*   [testing-library `type` API](https://testing-library.com/docs/user-event/utility/#type)\n\n## userEvent.clear [​](#userevent-clear)\n\n*   **Type:** `(element: Element) => Promise<void>`\n\nThis method clears the input element content.\n\nts\n\n```\nimport { userEvent } from '@vitest/browser/context'\nimport { screen } from '@testing-library/dom'\n\ntest('clears input', async () => {\n  const input = screen.getByRole('input')\n\n  await userEvent.fill(input, 'foo')\n  expect(input).toHaveValue('foo')\n\n  await userEvent.clear(input)\n  expect(input).toHaveValue('')\n})\n```\n\nReferences:\n\n*   [Playwright `locator.clear` API](https://playwright.dev/docs/api/class-locator#locator-clear)\n*   [WebdriverIO `element.clearValue` API](https://webdriver.io/docs/api/element/clearValue)\n*   [testing-library `clear` API](https://testing-library.com/docs/user-event/utility/#clear)\n\n## userEvent.selectOptions [​](#userevent-selectoptions)\n\n*   **Type:** `(element: Element, values: HTMLElement | HTMLElement[] | string | string[], options?: UserEventSelectOptions) => Promise<void>`\n\nThe `userEvent.selectOptions` allows selecting a value in a `<select>` element.\n\nWARNING\n\nIf select element doesn't have [`multiple`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-multiple) attribute, Vitest will select only the first element in the array.\n\nUnlike `@testing-library`, Vitest doesn't support [listbox](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/listbox_role) at the moment, but we plan to add support for it in the future.\n\nts\n\n```\nimport { userEvent } from '@vitest/browser/context'\nimport { screen } from '@testing-library/dom'\n\ntest('clears input', async () => {\n  const select = screen.getByRole('select')\n\n  await userEvent.selectOptions(select, 'Option 1')\n  expect(select).toHaveValue('option-1')\n\n  await userEvent.selectOptions(select, 'option-1')\n  expect(select).toHaveValue('option-1')\n\n  await userEvent.selectOptions(select, [\n    screen.getByRole('option', { name: 'Option 1' }),\n    screen.getByRole('option', { name: 'Option 2' }),\n  ])\n  expect(select).toHaveValue(['option-1', 'option-2'])\n})\n```\n\nWARNING\n\n`webdriverio` provider doesn't support selecting multiple elements because it doesn't provide API to do so.\n\nReferences:\n\n*   [Playwright `locator.selectOption` API](https://playwright.dev/docs/api/class-locator#locator-select-option)\n*   [WebdriverIO `element.selectByIndex` API](https://webdriver.io/docs/api/element/selectByIndex)\n*   [testing-library `selectOptions` API](https://testing-library.com/docs/user-event/utility/#-selectoptions-deselectoptions)\n\n## userEvent.hover [​](#userevent-hover)\n\n*   **Type:** `(element: Element, options?: UserEventHoverOptions) => Promise<void>`\n\nThis method moves the cursor position to the selected element. Please refer to your provider's documentation for detailed explanation about how this method works.\n\nWARNING\n\nIf you are using `webdriverio` provider, the cursor will move to the center of the element by default.\n\nIf you are using `playwright` provider, the cursor moves to \"some\" visible point of the element.\n\nts\n\n```\nimport { userEvent } from '@vitest/browser/context'\nimport { screen } from '@testing-library/dom'\n\ntest('hovers logo element', async () => {\n  const logo = screen.getByRole('img', { name: /logo/ })\n\n  await userEvent.hover(logo)\n})\n```\n\nReferences:\n\n*   [Playwright `locator.hover` API](https://playwright.dev/docs/api/class-locator#locator-hover)\n*   [WebdriverIO `element.moveTo` API](https://webdriver.io/docs/api/element/moveTo/)\n*   [testing-library `hover` API](https://testing-library.com/docs/user-event/convenience/#hover)\n\n## userEvent.unhover [​](#userevent-unhover)\n\n*   **Type:** `(element: Element, options?: UserEventHoverOptions) => Promise<void>`\n\nThis works the same as [`userEvent.hover`](#userevent-hover), but moves the cursor to the `document.body` element instead.\n\nWARNING\n\nBy default, the cursor position is in the center (in `webdriverio` provider) or in \"some\" visible place (in `playwright` provider) of the body element, so if the currently hovered element is already in the same position, this method will have no effect.\n\nts\n\n```\nimport { userEvent } from '@vitest/browser/context'\nimport { screen } from '@testing-library/dom'\n\ntest('unhover logo element', async () => {\n  const logo = screen.getByRole('img', { name: /logo/ })\n\n  await userEvent.unhover(logo)\n})\n```\n\nReferences:\n\n*   [Playwright `locator.hover` API](https://playwright.dev/docs/api/class-locator#locator-hover)\n*   [WebdriverIO `element.moveTo` API](https://webdriver.io/docs/api/element/moveTo/)\n*   [testing-library `hover` API](https://testing-library.com/docs/user-event/convenience/#hover)\n\n## userEvent.dragAndDrop [​](#userevent-draganddrop)\n\n*   **Type:** `(source: Element, target: Element, options?: UserEventDragAndDropOptions) => Promise<void>`\n\nDrags the source element on top of the target element. Don't forget that the `source` element has to have the `draggable` attribute set to `true`.\n\nts\n\n```\nimport { userEvent } from '@vitest/browser/context'\nimport { screen } from '@testing-library/dom'\nimport '@testing-library/jest-dom' // adds support for \"toHaveTextContent\"\n\ntest('drag and drop works', async () => {\n  const source = screen.getByRole('img', { name: /logo/ })\n  const target = screen.getByTestId('logo-target')\n\n  await userEvent.dragAndDrop(source, target)\n\n  expect(target).toHaveTextContent('Logo is processed')\n})\n```\n\nWARNING\n\nThis API is not supported by the default `preview` provider.\n\nReferences:\n\n*   [Playwright `frame.dragAndDrop` API](https://playwright.dev/docs/api/class-frame#frame-drag-and-drop)\n*   [WebdriverIO `element.dragAndDrop` API](https://webdriver.io/docs/api/element/dragAndDrop/)",
    "title": "Interactivity API | Browser Mode | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/browser/commands",
    "markdown": "# Commands | Browser Mode | Vitest\n\nCommand is a function that invokes another function on the server and passes down the result back to the browser. Vitest exposes several built-in commands you can use in your browser tests.\n\n## Built-in Commands [​](#built-in-commands)\n\n### Files Handling [​](#files-handling)\n\nYou can use `readFile`, `writeFile` and `removeFile` API to handle files inside your browser tests. All paths are resolved relative to the test file even if they are called in a helper function located in another file.\n\nBy default, Vitest uses `utf-8` encoding but you can override it with options.\n\nTIP\n\nThis API follows [`server.fs`](https://vitejs.dev/config/server-options.html#server-fs-allow) limitations for security reasons.\n\nts\n\n```\nimport { server } from '@vitest/browser/context'\n\nconst { readFile, writeFile, removeFile } = server.commands\n\nit('handles files', async () => {\n  const file = './test.txt'\n\n  await writeFile(file, 'hello world')\n  const content = await readFile(file)\n\n  expect(content).toBe('hello world')\n\n  await removeFile(file)\n})\n```\n\n## CDP Session [​](#cdp-session)\n\nVitest exposes access to raw Chrome Devtools Protocol via the `cdp` method exported from `@vitest/browser/context`. It is mostly useful to library authors to build tools on top of it.\n\nts\n\n```\nimport { cdp } from '@vitest/browser/context'\n\nconst input = document.createElement('input')\ndocument.body.appendChild(input)\ninput.focus()\n\nawait cdp().send('Input.dispatchKeyEvent', {\n  type: 'keyDown',\n  text: 'a',\n})\n\nexpect(input).toHaveValue('a')\n```\n\nWARNING\n\nCDP session works only with `playwright` provider and only when using `chromium` browser. You can read more about it in playwright's [`CDPSession`](https://playwright.dev/docs/api/class-cdpsession) documentation.\n\n## Custom Commands [​](#custom-commands)\n\nYou can also add your own commands via [`browser.commands`](https://vitest.dev/config/#browser-commands) config option. If you develop a library, you can provide them via a `config` hook inside a plugin:\n\nts\n\n```\nimport type { Plugin } from 'vitest/config'\nimport type { BrowserCommand } from 'vitest/node'\n\nconst myCustomCommand: BrowserCommand<[arg1: string, arg2: string]> = ({\n  testPath,\n  provider\n}, arg1, arg2) => {\n  if (provider.name === 'playwright') {\n    console.log(testPath, arg1, arg2)\n    return { someValue: true }\n  }\n\n  throw new Error(`provider ${provider.name} is not supported`)\n}\n\nexport default function BrowserCommands(): Plugin {\n  return {\n    name: 'vitest:custom-commands',\n    config() {\n      return {\n        test: {\n          browser: {\n            commands: {\n              myCustomCommand,\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nThen you can call it inside your test by importing it from `@vitest/browser/context`:\n\nts\n\n```\nimport { commands } from '@vitest/browser/context'\nimport { expect, test } from 'vitest'\n\ntest('custom command works correctly', async () => {\n  const result = await commands.myCustomCommand('test1', 'test2')\n  expect(result).toEqual({ someValue: true })\n})\n\n// if you are using TypeScript, you can augment the module\ndeclare module '@vitest/browser/context' {\n  interface BrowserCommands {\n    myCustomCommand: (arg1: string, arg2: string) => Promise<{\n      someValue: true\n    }>\n  }\n}\n```\n\nWARNING\n\nCustom functions will override built-in ones if they have the same name.\n\n### Custom `playwright` commands [​](#custom-playwright-commands)\n\nVitest exposes several `playwright` specific properties on the command context.\n\n*   `page` references the full page that contains the test iframe. This is the orchestrator HTML and you most likely shouldn't touch it to not break things.\n*   `frame` is an async method that will resolve tester [`Frame`](https://playwright.dev/docs/api/class-frame). It has a simillar API to the `page`, but it doesn't support certain methods. If you need to query an element, you should prefer using `context.iframe` instead because it is more stable and faster.\n*   `iframe` is a [`FrameLocator`](https://playwright.dev/docs/api/class-framelocator) that should be used to query other elements on the page.\n*   `context` refers to the unique [BrowserContext](https://playwright.dev/docs/api/class-browsercontext).\n\nts\n\n```\nimport { defineCommand } from '@vitest/browser'\n\nexport const myCommand = defineCommand(async (ctx, arg1, arg2) => {\n  if (ctx.provider.name === 'playwright') {\n    const element = await ctx.iframe.findByRole('alert')\n    const screenshot = await element.screenshot()\n    // do something with the screenshot\n    return difference\n  }\n})\n```\n\nTIP\n\nIf you are using TypeScript, don't forget to add `@vitest/browser/providers/playwright` to your `tsconfig` \"compilerOptions.types\" field to get autocompletion in the config and on `userEvent` and `page` options:\n\njson\n\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\n      \"@vitest/browser/providers/playwright\"\n    ]\n  }\n}\n```\n\n### Custom `webdriverio` commands [​](#custom-webdriverio-commands)\n\nVitest exposes some `webdriverio` specific properties on the context object.\n\n*   `browser` is the `WebdriverIO.Browser` API.\n\nVitest automatically switches the `webdriver` context to the test iframe by calling `browser.switchToFrame` before the command is called, so `$` and `$$` methods refer to the elements inside the iframe, not in the orchestrator, but non-webdriver APIs will still refer to the parent frame context.\n\nTIP\n\nIf you are using TypeScript, don't forget to add `@vitest/browser/providers/webdriverio` to your `tsconfig` \"compilerOptions.types\" field to get autocompletion:\n\njson\n\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\n      \"@vitest/browser/providers/webdriverio\"\n    ]\n  }\n}\n```",
    "title": "Commands | Browser Mode | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/browser/examples",
    "markdown": "# Examples | Browser Mode | Vitest\n\nBrowser Mode is framework agnostic so it doesn't provide any method to render your components. However, you should be able to use your framework's test utils packages.\n\nWe recommend using `testing-library` packages depending on your framework:\n\n*   [`@testing-library/dom`](https://testing-library.com/docs/dom-testing-library/intro) if you don't use a framework\n*   [`@testing-library/vue`](https://testing-library.com/docs/vue-testing-library/intro) to render [vue](https://vuejs.org/) components\n*   [`@testing-library/svelte`](https://testing-library.com/docs/svelte-testing-library/intro) to render [svelte](https://svelte.dev/) components\n*   [`@testing-library/react`](https://testing-library.com/docs/react-testing-library/intro) to render [react](https://react.dev/) components\n*   [`@testing-library/preact`](https://testing-library.com/docs/preact-testing-library/intro) to render [preact](https://preactjs.com/) components\n*   [`solid-testing-library`](https://testing-library.com/docs/solid-testing-library/intro) to render [solid](https://www.solidjs.com/) components\n*   [`@marko/testing-library`](https://testing-library.com/docs/marko-testing-library/intro) to render [marko](https://markojs.com/) components\n\nWARNING\n\n`testing-library` provides a package `@testing-library/user-event`. We do not recommend using it directly because it simulates events instead of actually triggering them - instead, use [`userEvent`](#interactivity-api) imported from `@vitest/browser/context` that uses Chrome DevTools Protocol or Webdriver (depending on the provider) under the hood.\n\nvuesveltereactpreactsolidmarko\n\nts\n\n```\n// based on @testing-library/vue example\n// https://testing-library.com/docs/vue-testing-library/examples\n\nimport { userEvent } from '@vitest/browser/context'\nimport { render, screen } from '@testing-library/vue'\nimport Component from './Component.vue'\n\ntest('properly handles v-model', async () => {\n  render(Component)\n\n  // Asserts initial state.\n  expect(screen.getByText('Hi, my name is Alice')).toBeInTheDocument()\n\n  // Get the input DOM node by querying the associated label.\n  const usernameInput = await screen.findByLabelText(/username/i)\n\n  // Type the name into the input. This already validates that the input\n  // is filled correctly, no need to check the value manually.\n  await userEvent.fill(usernameInput, 'Bob')\n\n  expect(screen.getByText('Hi, my name is Alice')).toBeInTheDocument()\n})\n```\n\nts\n\n```\n// based on @testing-library/svelte\n// https://testing-library.com/docs/svelte-testing-library/example\n\nimport { render, screen } from '@testing-library/svelte'\nimport { userEvent } from '@vitest/browser/context'\nimport { expect, test } from 'vitest'\n\nimport Greeter from './greeter.svelte'\n\ntest('greeting appears on click', async () => {\n  const user = userEvent.setup()\n  render(Greeter, { name: 'World' })\n\n  const button = screen.getByRole('button')\n  await user.click(button)\n  const greeting = await screen.findByText(/hello world/iu)\n\n  expect(greeting).toBeInTheDocument()\n})\n```\n\ntsx\n\n```\n// based on @testing-library/react example\n// https://testing-library.com/docs/react-testing-library/example-intro\n\nimport { userEvent } from '@vitest/browser/context'\nimport { render, screen } from '@testing-library/react'\nimport Fetch from './fetch'\n\ntest('loads and displays greeting', async () => {\n  // Render a React element into the DOM\n  render(<Fetch url=\"/greeting\" />)\n\n  await userEvent.click(screen.getByText('Load Greeting'))\n  // wait before throwing an error if it cannot find an element\n  const heading = await screen.findByRole('heading')\n\n  // assert that the alert message is correct\n  expect(heading).toHaveTextContent('hello there')\n  expect(screen.getByRole('button')).toBeDisabled()\n})\n```\n\ntsx\n\n```\n// based on @testing-library/preact example\n// https://testing-library.com/docs/preact-testing-library/example\n\nimport { h } from 'preact'\nimport { userEvent } from '@vitest/browser/context'\nimport { render } from '@testing-library/preact'\n\nimport HiddenMessage from '../hidden-message'\n\ntest('shows the children when the checkbox is checked', async () => {\n  const testMessage = 'Test Message'\n\n  const { queryByText, getByLabelText, getByText } = render(\n    <HiddenMessage>{testMessage}</HiddenMessage>,\n  )\n\n  // query* functions will return the element or null if it cannot be found.\n  // get* functions will return the element or throw an error if it cannot be found.\n  expect(queryByText(testMessage)).not.toBeInTheDocument()\n\n  // The queries can accept a regex to make your selectors more\n  // resilient to content tweaks and changes.\n  await userEvent.click(getByLabelText(/show/i))\n\n  expect(getByText(testMessage)).toBeInTheDocument()\n})\n```\n\ntsx\n\n```\n// baed on @testing-library/solid API\n// https://testing-library.com/docs/solid-testing-library/api\n\nimport { render } from '@testing-library/solid'\n\nit('uses params', async () => {\n  const App = () => (\n    <>\n      <Route\n        path=\"/ids/:id\"\n        component={() => (\n          <p>\n            Id:\n            {useParams()?.id}\n          </p>\n        )}\n      />\n      <Route path=\"/\" component={() => <p>Start</p>} />\n    </>\n  )\n  const { findByText } = render(() => <App />, { location: 'ids/1234' })\n  expect(await findByText('Id: 1234')).toBeInTheDocument()\n})\n```\n\nts\n\n```\n// baed on @testing-library/marko API\n// https://testing-library.com/docs/marko-testing-library/api\n\nimport { render, screen } from '@marko/testing-library'\nimport Greeting from './greeting.marko'\n\ntest('renders a message', async () => {\n  const { container } = await render(Greeting, { name: 'Marko' })\n  expect(screen.getByText(/Marko/)).toBeInTheDocument()\n  expect(container.firstChild).toMatchInlineSnapshot(`\n    <h1>Hello, Marko!</h1>\n  `)\n})\n```",
    "title": "Examples | Browser Mode | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/in-source",
    "markdown": "# In-Source Testing | Guide | Vitest\n\nVitest also provides a way to run tests within your source code along side the implementation, similar to [Rust's module tests](https://doc.rust-lang.org/book/ch11-03-test-organization.html#the-tests-module-and-cfgtest).\n\nThis makes the tests share the same closure as the implementations and able to test against private states without exporting. Meanwhile, it also brings a closer feedback loop for development.\n\n## Setup [​](#setup)\n\nTo get started, put a `if (import.meta.vitest)` block at the end of your source file and write some tests inside it. For example:\n\nts\n\n```\n// src/index.ts\n\n// the implementation\nexport function add(...args: number[]) {\n  return args.reduce((a, b) => a + b, 0)\n}\n\n// in-source test suites\nif (import.meta.vitest) {\n  const { it, expect } = import.meta.vitest\n  it('add', () => {\n    expect(add()).toBe(0)\n    expect(add(1)).toBe(1)\n    expect(add(1, 2, 3)).toBe(6)\n  })\n}\n```\n\nUpdate the `includeSource` config for Vitest to grab the files under `src/`:\n\nts\n\n```\n// vite.config.ts\n/// <reference types=\"vitest\" />\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  test: {\n    includeSource: ['src/**/*.{js,ts}'], \n  },\n})\n```\n\nThen you can start to test!\n\n## Production Build [​](#production-build)\n\nFor the production build, you will need to set the `define` options in your config file, letting the bundler do the dead code elimination. For example, in Vite\n\nts\n\n```\n// vite.config.ts\n/// <reference types=\"vitest\" />\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  test: {\n    includeSource: ['src/**/*.{js,ts}'],\n  },\n  define: { \n    'import.meta.vitest': 'undefined', \n  }, \n})\n```\n\n### Other Bundlers [​](#other-bundlers)\n\nunbuild\n\nts\n\n```\n// build.config.ts\nimport { defineBuildConfig } from 'unbuild'\n\nexport default defineBuildConfig({\n  replace: { \n    'import.meta.vitest': 'undefined', \n  }, \n  // other options\n})\n```\n\nLearn more: [unbuild](https://github.com/unjs/unbuild)\n\nRollup\n\nts\n\n```\n// rollup.config.js\nimport replace from '@rollup/plugin-replace'\n\nexport default {\n  plugins: [\n    replace({ \n      'import.meta.vitest': 'undefined', \n    }) \n  ],\n  // other options\n}\n```\n\nLearn more: [Rollup](https://rollupjs.org/)\n\n## TypeScript [​](#typescript)\n\nTo get TypeScript support for `import.meta.vitest`, add `vitest/importMeta` to your `tsconfig.json`:\n\njson\n\n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"types\": [\n      \"vitest/importMeta\"\n    ]\n  }\n}\n```\n\nReference to [`test/import-meta`](https://github.com/vitest-dev/vitest/tree/main/test/import-meta) for the full example.\n\n## Notes [​](#notes)\n\nThis feature could be useful for:\n\n*   Unit testing for small-scoped functions or utilities\n*   Prototyping\n*   Inline Assertion\n\nIt's recommended to **use separate test files instead** for more complex tests like components or E2E testing.",
    "title": "In-Source Testing | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/test-context",
    "markdown": "# Test Context | Guide | Vitest\n\nInspired by [Playwright Fixtures](https://playwright.dev/docs/test-fixtures), Vitest's test context allows you to define utils, states, and fixtures that can be used in your tests.\n\n## Usage [​](#usage)\n\nThe first argument for each test callback is a test context.\n\nts\n\n```\nimport { it } from 'vitest'\n\nit('should work', (ctx) => {\n  // prints name of the test\n  console.log(ctx.task.name)\n})\n```\n\n## Built-in Test Context [​](#built-in-test-context)\n\n#### `context.task` [​](#context-task)\n\nA readonly object containing metadata about the test.\n\n#### `context.expect` [​](#context-expect)\n\nThe `expect` API bound to the current test:\n\nts\n\n```\nimport { it } from 'vitest'\n\nit('math is easy', ({ expect }) => {\n  expect(2 + 2).toBe(4)\n})\n```\n\nThis API is useful for running snapshot tests concurrently because global expect cannot track them:\n\nts\n\n```\nimport { it } from 'vitest'\n\nit.concurrent('math is easy', ({ expect }) => {\n  expect(2 + 2).toMatchInlineSnapshot()\n})\n\nit.concurrent('math is hard', ({ expect }) => {\n  expect(2 * 2).toMatchInlineSnapshot()\n})\n```\n\n#### `context.skip` [​](#context-skip)\n\nSkips subsequent test execution and marks test as skipped:\n\nts\n\n```\nimport { expect, it } from 'vitest'\n\nit('math is hard', ({ skip }) => {\n  skip()\n  expect(2 + 2).toBe(5)\n})\n```\n\n## Extend Test Context [​](#extend-test-context)\n\nVitest provides two different ways to help you extend the test context.\n\n### `test.extend` [​](#test-extend)\n\nLike [Playwright](https://playwright.dev/docs/api/class-test#test-extend), you can use this method to define your own `test` API with custom fixtures and reuse it anywhere.\n\nFor example, we first create `myTest` with two fixtures, `todos` and `archive`.\n\nts\n\n```\n// my-test.ts\nimport { test } from 'vitest'\n\nconst todos = []\nconst archive = []\n\nexport const myTest = test.extend({\n  todos: async ({}, use) => {\n    // setup the fixture before each test function\n    todos.push(1, 2, 3)\n\n    // use the fixture value\n    await use(todos)\n\n    // cleanup the fixture after each test function\n    todos.length = 0\n  },\n  archive\n})\n```\n\nThen we can import and use it.\n\nts\n\n```\nimport { expect } from 'vitest'\nimport { myTest } from './my-test.js'\n\nmyTest('add items to todos', ({ todos }) => {\n  expect(todos.length).toBe(3)\n\n  todos.push(4)\n  expect(todos.length).toBe(4)\n})\n\nmyTest('move items from todos to archive', ({ todos, archive }) => {\n  expect(todos.length).toBe(3)\n  expect(archive.length).toBe(0)\n\n  archive.push(todos.pop())\n  expect(todos.length).toBe(2)\n  expect(archive.length).toBe(1)\n})\n```\n\nWe can also add more fixtures or override existing fixtures by extending `myTest`.\n\nts\n\n```\nexport const myTest2 = myTest.extend({\n  settings: {\n    // ...\n  }\n})\n```\n\n#### Fixture initialization [​](#fixture-initialization)\n\nVitest runner will smartly initialize your fixtures and inject them into the test context based on usage.\n\nts\n\n```\nimport { test } from 'vitest'\n\nasync function todosFn({ task }, use) {\n  await use([1, 2, 3])\n}\n\nconst myTest = test.extend({\n  todos: todosFn,\n  archive: []\n})\n\n// todosFn will not run\nmyTest('', () => {})\nmyTest('', ({ archive }) => {})\n\n// todosFn will run\nmyTest('', ({ todos }) => {})\n```\n\nWARNING\n\nWhen using `test.extend()` with fixtures, you should always use the object destructuring pattern `{ todos }` to access context both in fixture function and test function.\n\n#### Automatic fixture [​](#automatic-fixture)\n\nVitest also supports the tuple syntax for fixtures, allowing you to pass options for each fixture. For example, you can use it to explicitly initialize a fixture, even if it's not being used in tests.\n\nts\n\n```\nimport { test as base } from 'vitest'\n\nconst test = base.extend({\n  fixture: [\n    async ({}, use) => {\n      // this function will run\n      setup()\n      await use()\n      teardown()\n    },\n    { auto: true } // Mark as an automatic fixture\n  ],\n})\n\ntest('', () => {})\n```\n\n#### TypeScript [​](#typescript)\n\nTo provide fixture types for all your custom contexts, you can pass the fixtures type as a generic.\n\nts\n\n```\ninterface MyFixtures {\n  todos: number[]\n  archive: number[]\n}\n\nconst myTest = test.extend<MyFixtures>({\n  todos: [],\n  archive: []\n})\n\nmyTest('', (context) => {\n  expectTypeOf(context.todos).toEqualTypeOf<number[]>()\n  expectTypeOf(context.archive).toEqualTypeOf<number[]>()\n})\n```\n\n### `beforeEach` and `afterEach` [​](#beforeeach-and-aftereach)\n\nThe contexts are different for each test. You can access and extend them within the `beforeEach` and `afterEach` hooks.\n\nts\n\n```\nimport { beforeEach, it } from 'vitest'\n\nbeforeEach(async (context) => {\n  // extend context\n  context.foo = 'bar'\n})\n\nit('should work', ({ foo }) => {\n  console.log(foo) // 'bar'\n})\n```\n\n#### TypeScript [​](#typescript-1)\n\nTo provide property types for all your custom contexts, you can aggregate the `TestContext` type by adding\n\nts\n\n```\ndeclare module 'vitest' {\n  export interface TestContext {\n    foo?: string\n  }\n}\n```\n\nIf you want to provide property types only for specific `beforeEach`, `afterEach`, `it` and `test` hooks, you can pass the type as a generic.\n\nts\n\n```\ninterface LocalTestContext {\n  foo: string\n}\n\nbeforeEach<LocalTestContext>(async (context) => {\n  // typeof context is 'TestContext & LocalTestContext'\n  context.foo = 'bar'\n})\n\nit<LocalTestContext>('should work', ({ foo }) => {\n  // typeof foo is 'string'\n  console.log(foo) // 'bar'\n})\n```",
    "title": "Test Context | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/environment",
    "markdown": "# Test Environment | Guide | Vitest\n\nVitest provides [`environment`](https://vitest.dev/config/#environment) option to run code inside a specific environment. You can modify how environment behaves with [`environmentOptions`](https://vitest.dev/config/#environmentoptions) option.\n\nBy default, you can use these environments:\n\n*   `node` is default environment\n*   `jsdom` emulates browser environment by providing Browser API, uses [`jsdom`](https://github.com/jsdom/jsdom) package\n*   `happy-dom` emulates browser environment by providing Browser API, and considered to be faster than jsdom, but lacks some API, uses [`happy-dom`](https://github.com/capricorn86/happy-dom) package\n*   `edge-runtime` emulates Vercel's [edge-runtime](https://edge-runtime.vercel.app/), uses [`@edge-runtime/vm`](https://www.npmjs.com/package/@edge-runtime/vm) package\n\n## Environments for Specific Files [​](#environments-for-specific-files)\n\nWhen setting `environment` option in your config, it will apply to all the test files in your project. To have more fine-grained control, you can use control comments to specify environment for specific files. Control comments are comments that start with `@vitest-environment` and are followed by the environment name:\n\nts\n\n```\n// @vitest-environment jsdom\n\nimport { expect, test } from 'vitest'\n\ntest('test', () => {\n  expect(typeof window).not.toBe('undefined')\n})\n```\n\nOr you can also set [`environmentMatchGlobs`](https://vitest.dev/config/#environmentmatchglobs) option specifying the environment based on the glob patterns.\n\n## Custom Environment [​](#custom-environment)\n\nYou can create your own package to extend Vitest environment. To do so, create package with the name `vitest-environment-${name}` or specify a path to a valid JS/TS file. That package should export an object with the shape of `Environment`:\n\nts\n\n```\nimport type { Environment } from 'vitest'\n\nexport default <Environment>{\n  name: 'custom',\n  transformMode: 'ssr',\n  // optional - only if you support \"experimental-vm\" pool\n  async setupVM() {\n    const vm = await import('node:vm')\n    const context = vm.createContext()\n    return {\n      getVmContext() {\n        return context\n      },\n      teardown() {\n        // called after all tests with this env have been run\n      }\n    }\n  },\n  setup() {\n    // custom setup\n    return {\n      teardown() {\n        // called after all tests with this env have been run\n      }\n    }\n  }\n}\n```\n\nWARNING\n\nVitest requires `transformMode` option on environment object. It should be equal to `ssr` or `web`. This value determines how plugins will transform source code. If it's set to `ssr`, plugin hooks will receive `ssr: true` when transforming or resolving files. Otherwise, `ssr` is set to `false`.\n\nYou also have access to default Vitest environments through `vitest/environments` entry:\n\nts\n\n```\nimport { builtinEnvironments, populateGlobal } from 'vitest/environments'\n\nconsole.log(builtinEnvironments) // { jsdom, happy-dom, node, edge-runtime }\n```\n\nVitest also provides `populateGlobal` utility function, which can be used to move properties from object into the global namespace:\n\nts\n\n```\ninterface PopulateOptions {\n  // should non-class functions be bind to the global namespace\n  bindFunctions?: boolean\n}\n\ninterface PopulateResult {\n  // a list of all keys that were copied, even if value doesn't exist on original object\n  keys: Set<string>\n  // a map of original object that might have been overridden with keys\n  // you can return these values inside `teardown` function\n  originals: Map<string | symbol, any>\n}\n\nexport function populateGlobal(global: any, original: any, options: PopulateOptions): PopulateResult\n```",
    "title": "Test Environment | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/ide",
    "markdown": "# IDE Integrations | Guide | Vitest\n\n## VS Code Official [​](#vs-code)\n\n![](https://raw.githubusercontent.com/vitest-dev/vscode/main/img/cover.png)\n\n[GitHub](https://github.com/vitest-dev/vscode) | [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=vitest.explorer)\n\n![](https://i.ibb.co/bJCbCf2/202203292020.gif)\n\n## JetBrains IDE [​](#jetbrains-ide)\n\nWebStorm, PhpStorm, IntelliJ IDEA Ultimate, and other JetBrains IDEs come with built-in support for Vitest.\n\n![](https://raw.githubusercontent.com/kricact/WS-info/main/banners/vitest-jb.png)\n\n[WebStorm Help](https://www.jetbrains.com/help/webstorm/vitest.html) | [IntelliJ IDEA Ultimate Help](https://www.jetbrains.com/help/idea/vitest.html) | [PhpStorm Help](https://www.jetbrains.com/help/phpstorm/vitest.html)\n\n![Vitest WebStorm Demo](https://raw.githubusercontent.com/kricact/WS-info/main/gifs/vitest-run-all.gif)\n\n## Wallaby.js Paid (free for OSS) [​](#wallaby-js-paid-free-for-oss)\n\nCreated by [The Wallaby Team](https://wallabyjs.com/)\n\n[Wallaby.js](https://wallabyjs.com/) runs your Vitest tests immediately as you type, highlighting results in your IDE right next to your code.\n\n![](https://wallabyjs.com/assets/img/vitest_cover.png)\n\n[VS Code](https://marketplace.visualstudio.com/items?itemName=WallabyJs.wallaby-vscode) | [JetBrains](https://plugins.jetbrains.com/plugin/15742-wallaby) | [Visual Studio](https://marketplace.visualstudio.com/items?itemName=vs-publisher-999439.WallabyjsforVisualStudio2022) | [Sublime Text](https://packagecontrol.io/packages/Wallaby)\n\n![Wallaby VS Code Demo](https://wallabyjs.com/assets/img/vitest_demo.gif)",
    "title": "IDE Integrations | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/extending-matchers",
    "markdown": "# Extending Matchers | Guide | Vitest\n\nSince Vitest is compatible with both Chai and Jest, you can use either the `chai.use` API or `expect.extend`, whichever you prefer.\n\nThis guide will explore extending matchers with `expect.extend`. If you are interested in Chai's API, check [their guide](https://www.chaijs.com/guide/plugins/).\n\nTo extend default matchers, call `expect.extend` with an object containing your matchers.\n\nts\n\n```\nexpect.extend({\n  toBeFoo(received, expected) {\n    const { isNot } = this\n    return {\n      // do not alter your \"pass\" based on isNot. Vitest does it for you\n      pass: received === 'foo',\n      message: () => `${received} is${isNot ? ' not' : ''} foo`\n    }\n  }\n})\n```\n\nIf you are using TypeScript, you can extend default `Assertion` interface in an ambient declaration file (e.g: `vitest.d.ts`) with the code below:\n\nts\n\n```\nimport type { Assertion, AsymmetricMatchersContaining } from 'vitest'\n\ninterface CustomMatchers<R = unknown> {\n  toBeFoo: () => R\n}\n\ndeclare module 'vitest' {\n  interface Assertion<T = any> extends CustomMatchers<T> {}\n  interface AsymmetricMatchersContaining extends CustomMatchers {}\n}\n```\n\nWARNING\n\nDon't forget to include the ambient declaration file in your `tsconfig.json`.\n\nThe return value of a matcher should be compatible with the following interface:\n\nts\n\n```\ninterface MatcherResult {\n  pass: boolean\n  message: () => string\n  // If you pass these, they will automatically appear inside a diff when\n  // the matcher does not pass, so you don't need to print the diff yourself\n  actual?: unknown\n  expected?: unknown\n}\n```\n\nWARNING\n\nIf you create an asynchronous matcher, don't forget to `await` the result (`await expect('foo').toBeFoo()`) in the test itself.\n\nThe first argument inside a matcher's function is the received value (the one inside `expect(received)`). The rest are arguments passed directly to the matcher.\n\nMatcher function have access to `this` context with the following properties:\n\n*   `isNot`\n    \n    Returns true, if matcher was called on `not` (`expect(received).not.toBeFoo()`).\n    \n*   `promise`\n    \n    If matcher was called on `resolved/rejected`, this value will contain the name of modifier. Otherwise, it will be an empty string.\n    \n*   `equals`\n    \n    This is a utility function that allows you to compare two values. It will return `true` if values are equal, `false` otherwise. This function is used internally for almost every matcher. It supports objects with asymmetric matchers by default.\n    \n*   `utils`\n    \n    This contains a set of utility functions that you can use to display messages.\n    \n\n`this` context also contains information about the current test. You can also get it by calling `expect.getState()`. The most useful properties are:\n\n*   `currentTestName`\n    \n    Full name of the current test (including describe block).\n    \n*   `testPath`\n    \n    Path to the current test.",
    "title": "Extending Matchers | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/comparisons",
    "markdown": "# Comparisons with Other Test Runners | Guide\n\n## Jest [​](#jest)\n\n[Jest](https://jestjs.io/) took over the Testing Framework space by providing out-of-the-box support for most JavaScript projects, a comfortable API (`it` and `expect`), and the full pack of testing features that most setups would require (snapshots, mocks, coverage). We are thankful to the Jest team and community for creating a delightful testing API and pushing forward a lot of the testing patterns that are now a standard in the web ecosystem.\n\nIt is possible to use Jest in Vite setups. [@sodatea](https://twitter.com/haoqunjiang) built [vite-jest](https://github.com/sodatea/vite-jest#readme), which aims to provide first-class Vite integration for [Jest](https://jestjs.io/). The last [blockers in Jest](https://github.com/sodatea/vite-jest/blob/main/packages/vite-jest/README.md#vite-jest) have been solved, so this is a valid option for your unit tests.\n\nHowever, in a world where we have [Vite](https://vitejs.dev/) providing support for the most common web tooling (TypeScript, JSX, most popular UI Frameworks), Jest represents a duplication of complexity. If your app is powered by Vite, having two different pipelines to configure and maintain is not justifiable. With Vitest you get to define the configuration for your dev, build and test environments as a single pipeline, sharing the same plugins and the same vite.config.js.\n\nEven if your library is not using Vite (for example, if it is built with esbuild or Rollup), Vitest is an interesting option as it gives you a faster run for your unit tests and a jump in DX thanks to the default watch mode using Vite instant Hot Module Reload (HMR). Vitest offers compatibility with most of the Jest API and ecosystem libraries, so in most projects, it should be a drop-in replacement for Jest.\n\n## Cypress [​](#cypress)\n\n[Cypress](https://www.cypress.io/) is a browser-based test runner and a complementary tool to Vitest. If you'd like to use Cypress, we suggest using Vitest for all headless logic in your application and Cypress for all browser-based logic.\n\nCypress is known as an end-to-end testing tool, but their [new component test runner](https://on.cypress.io/component) has great support for testing Vite components and is an ideal choice to test anything that renders in a browser.\n\nBrowser-based runners, like Cypress, WebdriverIO and Web Test Runner, will catch issues that Vitest cannot because they use the real browser and real browser APIs.\n\nCypress's test driver is focused on determining if elements are visible, accessible, and interactive. Cypress is purpose-built for UI development and testing and its DX is centered around test driving your visual components. You see your component rendered alongside the test reporter. Once the test is complete, the component remains interactive and you can debug any failures that occur using your browser devtools.\n\nIn contrast, Vitest is focused on delivering the best DX possible for lightning fast, _headless_ testing. Node-based runners like Vitest support various partially-implemented browser environments, like `jsdom`, which implement enough for you to quickly unit test any code that references browser APIs. The tradeoff is that these browser environments have limitations in what they can implement. For example, [jsdom is missing a number of features](https://github.com/jsdom/jsdom/issues?q=is%3Aissue+is%3Aopen+sort%3Acomments-desc) like `window.navigation` or a layout engine (`offsetTop`, etc).\n\nLastly, in contrast to the Web Test Runner, the Cypress test runner is more like an IDE than a test runner because you also see the real rendered component in the browser, along with its test results and logs.\n\nCypress has also been [integrating Vite in their products](https://www.youtube.com/watch?v=7S5cbY8iYLk): re-building their App's UI using [Vitesse](https://github.com/antfu/vitesse) and using Vite to test drive their project's development.\n\nWe believe that Cypress isn't a good option for unit testing headless code, but that using Cypress (for E2E and Component Testing) and Vitest (for unit tests) would cover your app's testing needs.\n\n## WebdriverIO [​](#webdriverio)\n\n[WebdriverIO](https://webdriver.io/) is, similar to Cypress, a browser-based alternative test runner and a complementary tool to Vitest. It can be used as an end-to-end testing tool as well as for testing [web components](https://webdriver.io/docs/component-testing). It even uses components of Vitest under the hood, e.g. for [mocking and stubbing](https://webdriver.io/docs/mocksandspies/) within component tests.\n\nWebdriverIO comes with the same advantages as Cypress allowing you to test your logic in real browser. However, it uses actual [web standards](https://w3c.github.io/webdriver/) for automation, which overcomes some of the tradeoffs and limitation when running tests in Cypress. Furthermore, it allows you to run tests on mobile as well, giving you access to test your application in even more environments.\n\n## Web Test Runner [​](#web-test-runner)\n\n[@web/test-runner](https://modern-web.dev/docs/test-runner/overview/) runs tests inside a headless browser, providing the same execution environment as your web application without the need for mocking out browser APIs or the DOM. This also makes it possible to debug inside a real browser using the devtools, although there is no UI shown for stepping through the test, as there is in Cypress tests.\n\nTo use @web/test-runner with a Vite project, use [@remcovaes/web-test-runner-vite-plugin](https://github.com/remcovaes/web-test-runner-vite-plugin). @web/test-runner does not include assertion or mocking libraries, so it is up to you to add them.\n\n## uvu [​](#uvu)\n\n[uvu](https://github.com/lukeed/uvu) is a test runner for Node.js and the browser. It runs tests in a single thread, so tests are not isolated and can leak across files. Vitest, however, uses worker threads to isolate tests and run them in parallel.\n\nFor transforming your code, uvu relies on require and loader hooks. Vitest uses [Vite](https://vitejs.dev/), so files are transformed with the full power of Vite's plugin system. In a world where we have Vite providing support for the most common web tooling (TypeScript, JSX, most popular UI Frameworks), uvu represents a duplication of complexity. If your app is powered by Vite, having two different pipelines to configure and maintain is not justifiable. With Vitest you get to define the configuration for your dev, build and test environments as a single pipeline, sharing the same plugins and the same configuration.\n\nuvu does not provide an intelligent watch mode to rerun the changed tests, while Vitest gives you amazing DX thanks to the default watch mode using Vite instant Hot Module Reload (HMR).\n\nuvu is a fast option for running simple tests, but Vitest can be faster and more reliable for more complex tests and projects.",
    "title": "Comparisons with Other Test Runners | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/debugging",
    "markdown": "# Debugging | Guide | Vitest\n\nTIP\n\nWhen debugging tests you might want to use `--test-timeout` CLI argument to prevent tests from timing out when stopping at breakpoints.\n\n## VS Code [​](#vs-code)\n\nQuick way to debug tests in VS Code is via `JavaScript Debug Terminal`. Open a new `JavaScript Debug Terminal` and run `npm run test` or `vitest` directly. _this works with any code ran in Node, so will work with most JS testing frameworks_\n\n![image](https://user-images.githubusercontent.com/5594348/212169143-72bf39ce-f763-48f5-822a-0c8b2e6a8484.png)\n\nYou can also add a dedicated launch configuration to debug a test file in VS Code:\n\njson\n\n```\n{\n  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"name\": \"Debug Current Test File\",\n      \"autoAttachChildProcesses\": true,\n      \"skipFiles\": [\"<node_internals>/**\", \"**/node_modules/**\"],\n      \"program\": \"${workspaceRoot}/node_modules/vitest/vitest.mjs\",\n      \"args\": [\"run\", \"${relativeFile}\"],\n      \"smartStep\": true,\n      \"console\": \"integratedTerminal\"\n    }\n  ]\n}\n```\n\nThen in the debug tab, ensure 'Debug Current Test File' is selected. You can then open the test file you want to debug and press F5 to start debugging.\n\n## IntelliJ IDEA [​](#intellij-idea)\n\nCreate a 'Node.js' run configuration. Use the following settings to run all tests in debug mode:\n\n| Setting | Value |\n| --- | --- |\n| Working directory | `/path/to/your-project-root` |\n| JavaScript file | `./node_modules/vitest/vitest.mjs` |\n| Application parameters | `run --pool forks` |\n\nThen run this configuration in debug mode. The IDE will stop at JS/TS breakpoints set in the editor.\n\nVitest also supports debugging tests without IDEs. However this requires that tests are not run parallel. Use one of the following commands to launch Vitest.\n\nsh\n\n```\n# To run in a single worker\nvitest --inspect-brk --pool threads --poolOptions.threads.singleThread\n\n# To run in a single child process\nvitest --inspect-brk --pool forks --poolOptions.forks.singleFork\n```\n\nIf you are using Vitest 1.1 or higher, you can also just provide `--no-file-parallelism` flag:\n\nsh\n\n```\n# If pool is unknown\nvitest --inspect-brk --no-file-parallelism\n```\n\nOnce Vitest starts it will stop execution and wait for you to open developer tools that can connect to [Node.js inspector](https://nodejs.org/en/docs/guides/debugging-getting-started/). You can use Chrome DevTools for this by opening `chrome://inspect` on browser.\n\nIn watch mode you can keep the debugger open during test re-runs by using the `--poolOptions.threads.isolate false` options.",
    "title": "Debugging | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/common-errors",
    "markdown": "# Common Errors | Guide | Vitest\n\n## Cannot find module './relative-path' [​](#cannot-find-module-relative-path)\n\nIf you receive an error that module cannot be found, it might mean several different things:\n\n*   1.  You misspelled the path. Make sure the path is correct.\n*   2.  It's possible that your rely on `baseUrl` in your `tsconfig.json`. Vite doesn't take into account `tsconfig.json` by default, so you might need to install [`vite-tsconfig-paths`](https://www.npmjs.com/package/vite-tsconfig-paths) yourself, if you rely on this behaviour.\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\nimport tsconfigPaths from 'vite-tsconfig-paths'\n\nexport default defineConfig({\n  plugins: [tsconfigPaths()]\n})\n```\n\nOr rewrite your path to not be relative to root:\n\ndiff\n\n```\n- import helpers from 'src/helpers'\n+ import helpers from '../src/helpers'\n```\n\n*   3.  Make sure you don't have relative [aliases](https://vitest.dev/config/#alias). Vite treats them as relative to the file where the import is instead of the root.\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    alias: {\n      '@/': './src/', \n      '@/': new URL('./src/', import.meta.url).pathname, \n    }\n  }\n})\n```\n\n## Cannot mock \"./mocked-file.js\" because it is already loaded [​](#cannot-mock-mocked-file-js-because-it-is-already-loaded)\n\nThis error happens when `vi.mock` method is called on a module that was already loaded. Vitest throws this error because this call has no effect since cached modules are preferred.\n\nRemember that `vi.mock` is always hoisted - it means that the module was loaded before the test file started executing - most likely in a setup file. To fix the error, remove the import or clear the cache at the end of a setup file - beware that setup file and your test file will reference different modules in that case.\n\nts\n\n```\n// setupFile.js\nimport { vi } from 'vitest'\nimport { sideEffect } from './mocked-file.js'\n\nsideEffect()\n\nvi.resetModules()\n```\n\n## Failed to terminate worker [​](#failed-to-terminate-worker)\n\nThis error can happen when NodeJS's `fetch` is used with default [`pool: 'threads'`](https://vitest.dev/config/#threads). This issue is tracked on issue [Timeout abort can leave process(es) running in the background #3077](https://github.com/vitest-dev/vitest/issues/3077).\n\nAs work-around you can switch to [`pool: 'forks'`](https://vitest.dev/config/#forks) or [`pool: 'vmForks'`](https://vitest.dev/config/#vmforks).\n\nvitest.config.jsCLI\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    pool: 'forks',\n  },\n})\n```\n\n## Segfaults and native code errors [​](#segfaults-and-native-code-errors)\n\nRunning [native NodeJS modules](https://nodejs.org/api/addons.html) in `pool: 'threads'` can run into cryptic errors coming from the native code.\n\n*   `Segmentation fault (core dumped)`\n*   `thread '<unnamed>' panicked at 'assertion failed`\n*   `Abort trap: 6`\n*   `internal error: entered unreachable code`\n\nIn these cases the native module is likely not built to be multi-thread safe. As work-around, you can switch to `pool: 'forks'` which runs the test cases in multiple `node:child_process` instead of multiple `node:worker_threads`.\n\nvitest.config.jsCLI\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    pool: 'forks',\n  },\n})\n```",
    "title": "Common Errors | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/guide/migration",
    "markdown": "# Migration Guide | Guide | Vitest\n\n## Migrating to Vitest 2.0 [​](#migrating-to-vitest-2-0)\n\n### Default Pool is `forks` [​](#default-pool-is-forks)\n\nVitest 2.0 changes the default configuration for `pool` to `'forks'` for better stability. You can read the full motivation in [PR](https://github.com/vitest-dev/vitest/pull/5047).\n\nIf you've used `poolOptions` without specifying a `pool`, you might need to update the configuration:\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    poolOptions: {\n      threads: { \n        singleThread: true, \n      }, \n      forks: { \n        singleFork: true, \n      }, \n    }\n  }\n})\n```\n\n### Hooks are Running in a Stack [​](#hooks-are-running-in-a-stack)\n\nBefore Vitest 2.0, all hooks ran in parallel. In 2.0, all hooks run serially. Additionally, `afterAll`/`afterEach` hooks run in reverse order.\n\nTo revert to the parallel execution of hooks, change [`sequence.hooks`](https://vitest.dev/config/#sequence-hooks) to `'parallel'`:\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    sequence: { \n      hooks: 'parallel', \n    }, \n  },\n})\n```\n\n### `suite.concurrent` Runs All Tests Concurrently [​](#suite-concurrent-runs-all-tests-concurrently)\n\nPreviously, specifying `concurrent` on a suite would group concurrent tests by suites, running them sequentially. Now, following Jest's behavior, all tests run concurrently (subject to [`maxConcurrency`](https://vitest.dev/config/#maxconcurrency) limits).\n\n### V8 Coverage's `coverage.ignoreEmptyLines` is Enabled by Default [​](#v8-coverage-s-coverage-ignoreemptylines-is-enabled-by-default)\n\nThe default value of `coverage.ignoreEmptyLines` is now true. This significant change may affect code coverage reports, requiring adjustments to coverage thresholds for some projects. This adjustment only affects the default setting when `coverage.provider` is `'v8'`.\n\n### Removal of the `watchExclude` Option [​](#removal-of-the-watchexclude-option)\n\nVitest uses Vite's watcher. Exclude files or directories by adding them to `server.watch.ignored`:\n\nts\n\n```\nexport default defineConfig({\n  server: { \n    watch: { \n      ignored: ['!node_modules/examplejs'] \n    } \n  } \n})\n```\n\n### `--segfault-retry` Removed [​](#segfault-retry-removed)\n\nWith the changes to default pool, this option is no longer needed. If you experience segfault errors, try switching to `'forks'` pool. If the problem persists, please open a new issue with a reproduction.\n\n### Empty Task In Suite Tasks Removed [​](#empty-task-in-suite-tasks-removed)\n\nThis is the change to the advanced [task API](https://vitest.dev/advanced/runner#your-task-function). Previously, traversing `.suite` would eventually lead to the empty internal suite that was used instead of a file task.\n\nThis makes `.suite` optional; if the task is defined at the top level, it will not have a suite. You can fallback to the `.file` property that is now present on all tasks (including the file task itself, so be careful not to fall into the endless recursion).\n\nThis change also removes the file from `expect.getState().currentTestName` and makes `expect.getState().testPath` required.\n\n### `task.meta` is Added to the JSON Reporter [​](#task-meta-is-added-to-the-json-reporter)\n\nJSON reporter now prints `task.meta` for every assertion result.\n\n### Simplified Generic Types of Mock Functions (e.g. `vi.fn<T>`, `Mock<T>`) [​](#simplified-generic-types-of-mock-functions-e-g-vi-fn-t-mock-t)\n\nPreviously `vi.fn<TArgs, TReturn>` accepted two generic types separately for arguments and return value. This is changed to directly accept a function type `vi.fn<T>` to simplify the usage.\n\nts\n\n```\nimport { type Mock, vi } from 'vitest'\n\nconst add = (x: number, y: number): number => x + y\n\n// using vi.fn<T>\nconst mockAdd = vi.fn<Parameters<typeof add>, ReturnType<typeof add>>() \nconst mockAdd = vi.fn<typeof add>() \n\n// using Mock<T>\nconst mockAdd: Mock<Parameters<typeof add>, ReturnType<typeof add>> = vi.fn() \nconst mockAdd: Mock<typeof add> = vi.fn() \n```\n\n### Accessing Resolved `mock.results` [​](#accessing-resolved-mock-results)\n\nPreviously Vitest resolved `mock.results` values if the function returned a Promise. Now there is a separate [`mock.settledResults`](https://vitest.dev/api/mock#mock-settledresults) property that populates only when the returned Promise is resolved or rejected.\n\nts\n\n```\nconst fn = vi.fn().mockResolvedValueOnce('result')\nawait fn()\n\nconst result = fn.mock.results[0] // 'result'\nconst result = fn.mock.results[0] // 'Promise<result>'\n\nconst settledResult = fn.mock.settledResults[0] // 'result'\n```\n\nWith this change, we also introduce new [`toHaveResolved*`](https://vitest.dev/api/expect#tohaveresolved) matchers similar to `toHaveReturned` to make migration easier if you used `toHaveReturned` before:\n\nts\n\n```\nconst fn = vi.fn().mockResolvedValueOnce('result')\nawait fn()\n\nexpect(fn).toHaveReturned('result') \nexpect(fn).toHaveResolved('result') \n```\n\n### Browser Mode [​](#browser-mode)\n\nVitest Browser Mode had a lot of changes during the beta cycle. You can read about our philosophy on the Browser Mode in the [GitHub discussion page](https://github.com/vitest-dev/vitest/discussions/5828).\n\nMost of the changes were additive, but there were some small breaking changes:\n\n*   `none` provider was renamed to `preview` [#5842](https://github.com/vitest-dev/vitest/pull/5826)\n*   `preview` provider is now a default [#5842](https://github.com/vitest-dev/vitest/pull/5826)\n*   `indexScripts` is renamed to `orchestratorScripts` [#5842](https://github.com/vitest-dev/vitest/pull/5842)\n\n### Deprecated Options Removed [​](#deprecated-options-removed)\n\nSome deprecated options were removed:\n\n*   `vitest typecheck` command - use `vitest --typecheck` instead\n*   `VITEST_JUNIT_CLASSNAME` and `VITEST_JUNIT_SUITE_NAME` env variables (use reporter options instead)\n*   check for `c8` coverage (use coverage-v8 instead)\n*   export of `SnapshotEnvironment` from `vitest` - import it from `vitest/snapshot` instead\n*   `SpyInstance` is removed in favor of `MockInstance`\n\n## Migrating to Vitest 1.0 [​](#migrating-to-vitest-1-0)\n\n### Minimum Requirements [​](#minimum-requirements)\n\nVitest 1.0 requires Vite 5.0 and Node.js 18 or higher.\n\nAll `@vitest/*` sub packages require Vitest version 1.0.\n\n### Snapshots Update [#3961](https://github.com/vitest-dev/vitest/pull/3961) [​](#snapshots-update-3961)\n\nQuotes in snapshots are no longer escaped, and all snapshots use backtick quotes (\\`) even if the string is just a single line.\n\n1.  Quotes are no longer escaped:\n\ndiff\n\n```\nexpect({ foo: 'bar' }).toMatchInlineSnapshot(`\n  Object {\n-    \\\\\"foo\\\\\": \\\\\"bar\\\\\",\n+    \"foo\": \"bar\",\n  }\n`)\n```\n\n2.  One-line snapshots now use \"\\`\" quotes instead of ':\n\ndiff\n\n```\n- expect('some string').toMatchInlineSnapshot('\"some string\"')\n+ expect('some string').toMatchInlineSnapshot(`\"some string\"`)\n```\n\nThere were also [changes](https://github.com/vitest-dev/vitest/pull/4076) to `@vitest/snapshot` package. If you are not using it directly, you don't need to change anything.\n\n*   You no longer need to extend `SnapshotClient` just to override `equalityCheck` method: just pass it down as `isEqual` when initiating an instance\n*   `client.setTest` was renamed to `client.startCurrentRun`\n*   `client.resetCurrent` was renamed to `client.finishCurrentRun`\n\n### Pools are Standardized [#4172](https://github.com/vitest-dev/vitest/pull/4172) [​](#pools-are-standardized-4172)\n\nWe removed a lot of configuration options to make it easier to configure the runner to your needs. Please, have a look at migration examples if you rely on `--threads` or other related flags.\n\n*   `--threads` is now `--pool=threads`\n*   `--no-threads` is now `--pool=forks`\n*   `--single-thread` is now `--poolOptions.threads.singleThread`\n*   `--experimental-vm-threads` is now `--pool=vmThreads`\n*   `--experimental-vm-worker-memory-limit` is now `--poolOptions.vmThreads.memoryLimit`\n*   `--isolate` is now `--poolOptions.<pool-name>.isolate` and `browser.isolate`\n*   `test.maxThreads` is now `test.poolOptions.<pool-name>.maxThreads`\n*   `test.minThreads` is now `test.poolOptions.<pool-name>.minThreads`\n*   `test.useAtomics` is now `test.poolOptions.<pool-name>.useAtomics`\n*   `test.poolMatchGlobs.child_process` is now `test.poolMatchGlobs.forks`\n*   `test.poolMatchGlobs.experimentalVmThreads` is now `test.poolMatchGlobs.vmThreads`\n\ndiff\n\n```\n{\n  scripts: {\n-    \"test\": \"vitest --no-threads\"\n     // For identical behaviour:\n+    \"test\": \"vitest --pool forks --poolOptions.forks.singleFork\"\n     // Or multi parallel forks:\n+    \"test\": \"vitest --pool forks\"\n\n  }\n}\n```\n\ndiff\n\n```\n{\n  scripts: {\n-    \"test\": \"vitest --experimental-vm-threads\"\n+    \"test\": \"vitest --pool vmThreads\"\n  }\n}\n```\n\ndiff\n\n```\n{\n  scripts: {\n-    \"test\": \"vitest --isolate false\"\n+    \"test\": \"vitest --poolOptions.threads.isolate false\"\n  }\n}\n```\n\ndiff\n\n```\n{\n  scripts: {\n-    \"test\": \"vitest --no-threads --isolate false\"\n+    \"test\": \"vitest --pool forks --poolOptions.forks.isolate false\"\n  }\n}\n```\n\n### Changes to Coverage [#4265](https://github.com/vitest-dev/vitest/pull/4265), [#4442](https://github.com/vitest-dev/vitest/pull/4442) [​](#changes-to-coverage-4265-4442)\n\nOption `coverage.all` is now enabled by default. This means that all project files matching `coverage.include` pattern will be processed even if they are not executed.\n\nCoverage thresholds API's shape was changed, and it now supports specifying thresholds for specific files using glob patterns:\n\ndiff\n\n```\nexport default defineConfig({\n  test: {\n    coverage: {\n-      perFile: true,\n-      thresholdAutoUpdate: true,\n-      100: true,\n-      lines: 100,\n-      functions: 100,\n-      branches: 100,\n-      statements: 100,\n+      thresholds: {\n+        perFile: true,\n+        autoUpdate: true,\n+        100: true,\n+        lines: 100,\n+        functions: 100,\n+        branches: 100,\n+        statements: 100,\n+      }\n    }\n  }\n})\n```\n\n### Mock Types [#4400](https://github.com/vitest-dev/vitest/pull/4400) [​](#mock-types-4400)\n\nA few types were removed in favor of Jest-style \"Mock\" naming.\n\ndiff\n\n```\n- import { EnhancedSpy, SpyInstance } from 'vitest'\n+ import { MockInstance } from 'vitest'\n```\n\nWARNING\n\n`SpyInstance` is deprecated in favor of `MockInstance` and will be removed in the next major release.\n\n### Timer mocks [#3925](https://github.com/vitest-dev/vitest/pull/3925) [​](#timer-mocks-3925)\n\n`vi.useFakeTimers()` no longer automatically mocks [`process.nextTick`](https://nodejs.org/api/process.html#processnexttickcallback-args). It is still possible to mock `process.nextTick` by explicitly specifying it by using `vi.useFakeTimers({ toFake: ['nextTick'] })`.\n\nHowever, mocking `process.nextTick` is not possible when using `--pool=forks`. Use a different `--pool` option if you need `process.nextTick` mocking.\n\n## Migrating from Jest [​](#migrating-from-jest)\n\nVitest has been designed with a Jest compatible API, in order to make the migration from Jest as simple as possible. Despite those efforts, you may still run into the following differences:\n\n### Globals as a Default [​](#globals-as-a-default)\n\nJest has their [globals API](https://jestjs.io/docs/api) enabled by default. Vitest does not. You can either enable globals via [the `globals` configuration setting](https://vitest.dev/config/#globals) or update your code to use imports from the `vitest` module instead.\n\nIf you decide to keep globals disabled, be aware that common libraries like [`testing-library`](https://testing-library.com/) will not run auto DOM [cleanup](https://testing-library.com/docs/svelte-testing-library/api/#cleanup).\n\n### Module Mocks [​](#module-mocks)\n\nWhen mocking a module in Jest, the factory argument's return value is the default export. In Vitest, the factory argument has to return an object with each export explicitly defined. For example, the following `jest.mock` would have to be updated as follows:\n\nts\n\n```\njest.mock('./some-path', () => 'hello') \nvi.mock('./some-path', () => ({ \n  default: 'hello', \n})) \n```\n\nFor more details please refer to the [`vi.mock` api section](https://vitest.dev/api/vi#vi-mock).\n\n### Auto-Mocking Behaviour [​](#auto-mocking-behaviour)\n\nUnlike Jest, mocked modules in `<root>/__mocks__` are not loaded unless `vi.mock()` is called. If you need them to be mocked in every test, like in Jest, you can mock them inside [`setupFiles`](https://vitest.dev/config/#setupfiles).\n\n### Importing the Original of a Mocked Package [​](#importing-the-original-of-a-mocked-package)\n\nIf you are only partially mocking a package, you might have previously used Jest's function `requireActual`. In Vitest, you should replace these calls with `vi.importActual`.\n\nts\n\n```\nconst { cloneDeep } = jest.requireActual('lodash/cloneDeep') \nconst { cloneDeep } = await vi.importActual('lodash/cloneDeep') \n```\n\n### Extends mocking to external libraries [​](#extends-mocking-to-external-libraries)\n\nWhere Jest does it by default, when mocking a module and wanting this mocking to be extended to other external libraries that use the same module, you should explicitly tell which 3rd-party library you want to be mocked, so the external library would be part of your source code, by using [server.deps.inline](https://vitest.dev/config/#server-deps-inline).\n\n```\nserver.deps.inline: [\"lib-name\"]\n```\n\n### Envs [​](#envs)\n\nJust like Jest, Vitest sets `NODE_ENV` to `test`, if it wasn't set before. Vitest also has a counterpart for `JEST_WORKER_ID` called `VITEST_POOL_ID` (always less than or equal to `maxThreads`), so if you rely on it, don't forget to rename it. Vitest also exposes `VITEST_WORKER_ID` which is a unique ID of a running worker - this number is not affected by `maxThreads`, and will increase with each created worker.\n\n### Replace property [​](#replace-property)\n\nIf you want to modify the object, you will use [replaceProperty API](https://jestjs.io/docs/jest-object#jestreplacepropertyobject-propertykey-value) in Jest, you can use [`vi.stubEnv`](https://vitest.dev/api/#vi-stubenv) or [`vi.spyOn`](https://vitest.dev/api/vi#vi-spyon) to do the same also in Vitest.\n\n### Done Callback [​](#done-callback)\n\nFrom Vitest v0.10.0, the callback style of declaring tests is deprecated. You can rewrite them to use `async`/`await` functions, or use Promise to mimic the callback style.\n\n```\nit('should work', (done) => {\nit('should work', () => new Promise(done => {\n  // ...\n  done()\n})\n}))\n```\n\n### Hooks [​](#hooks)\n\n`beforeAll`/`beforeEach` hooks may return [teardown function](https://vitest.dev/api/#setup-and-teardown) in Vitest. Because of that you may need to rewrite your hooks declarations, if they return something other than `undefined` or `null`:\n\nts\n\n```\nbeforeEach(() => setActivePinia(createTestingPinia())) \nbeforeEach(() => { setActivePinia(createTestingPinia()) }) \n```\n\nIn Jest hooks are called sequentially (one after another). By default, Vitest runs hooks in parallel. To use Jest's behavior, update [`sequence.hooks`](https://vitest.dev/config/#sequence-hooks) option:\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    sequence: { \n      hooks: 'list', \n    } \n  }\n})\n```\n\n### Types [​](#types)\n\nVitest doesn't have an equivalent to `jest` namespace, so you will need to import types directly from `vitest`:\n\nts\n\n```\nlet fn: jest.Mock<(name: string) => number> \nimport type { Mock } from 'vitest'\nlet fn: Mock<(name: string) => number> \n```\n\n### Timers [​](#timers)\n\nVitest doesn't support Jest's legacy timers.\n\n### Timeout [​](#timeout)\n\nIf you used `jest.setTimeout`, you would need to migrate to `vi.setConfig`:\n\nts\n\n```\njest.setTimeout(5_000) \nvi.setConfig({ testTimeout: 5_000 }) \n```\n\n### Vue Snapshots [​](#vue-snapshots)\n\nThis is not a Jest-specific feature, but if you previously were using Jest with vue-cli preset, you will need to install [`jest-serializer-vue`](https://github.com/eddyerburgh/jest-serializer-vue) package, and use it inside [setupFiles](https://vitest.dev/config/#setupfiles):\n\n`vite.config.js`\n\njs\n\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  test: {\n    setupFiles: ['./tests/unit/setup.js']\n  }\n})\n```\n\n`tests/unit/setup.js`\n\njs\n\n```\nimport vueSnapshotSerializer from 'jest-serializer-vue'\n\nexpect.addSnapshotSerializer(vueSnapshotSerializer)\n```\n\nOtherwise your snapshots will have a lot of escaped `\"` characters.",
    "title": "Migration Guide | Guide | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/api/mock",
    "markdown": "# Mock Functions | Vitest\n\nYou can create a mock function to track its execution with `vi.fn` method. If you want to track a method on an already created object, you can use `vi.spyOn` method:\n\njs\n\n```\nimport { vi } from 'vitest'\n\nconst fn = vi.fn()\nfn('hello world')\nfn.mock.calls[0] === ['hello world']\n\nconst market = {\n  getApples: () => 100\n}\n\nconst getApplesSpy = vi.spyOn(market, 'getApples')\nmarket.getApples()\ngetApplesSpy.mock.calls.length === 1\n```\n\nYou should use mock assertions (e.g., [`toHaveBeenCalled`](https://vitest.dev/api/expect#tohavebeencalled)) on [`expect`](https://vitest.dev/api/expect) to assert mock result. This API reference describes available properties and methods to manipulate mock behavior.\n\n## getMockImplementation [​](#getmockimplementation)\n\n*   **Type:** `(...args: any) => any`\n\nReturns current mock implementation if there is one.\n\nIf mock was created with [`vi.fn`](https://vitest.dev/api/vi#vi-fn), it will consider passed down method as a mock implementation.\n\nIf mock was created with [`vi.spyOn`](https://vitest.dev/api/vi#vi-spyon), it will return `undefined` unless a custom implementation was provided.\n\n## getMockName [​](#getmockname)\n\n*   **Type:** `() => string`\n\nUse it to return the name given to mock with method `.mockName(name)`.\n\n## mockClear [​](#mockclear)\n\n*   **Type:** `() => MockInstance`\n\nClears all information about every call. After calling it, all properties on `.mock` will return empty state. This method does not reset implementations. It is useful if you need to clean up mock between different assertions.\n\nIf you want this method to be called before each test automatically, you can enable [`clearMocks`](https://vitest.dev/config/#clearmocks) setting in config.\n\n## mockName [​](#mockname)\n\n*   **Type:** `(name: string) => MockInstance`\n\nSets internal mock name. Useful to see the name of the mock if assertion fails.\n\n## mockImplementation [​](#mockimplementation)\n\n*   **Type:** `(fn: Function) => MockInstance`\n\nAccepts a function that will be used as an implementation of the mock.\n\nts\n\n```\nconst mockFn = vi.fn().mockImplementation(apples => apples + 1)\n// or: vi.fn(apples => apples + 1);\n\nconst NelliesBucket = mockFn(0)\nconst BobsBucket = mockFn(1)\n\nNelliesBucket === 1 // true\nBobsBucket === 2 // true\n\nmockFn.mock.calls[0][0] === 0 // true\nmockFn.mock.calls[1][0] === 1 // true\n```\n\n## mockImplementationOnce [​](#mockimplementationonce)\n\n*   **Type:** `(fn: Function) => MockInstance`\n\nAccepts a function that will be used as mock's implementation during the next call. Can be chained so that multiple function calls produce different results.\n\nts\n\n```\nconst myMockFn = vi\n  .fn()\n  .mockImplementationOnce(() => true)\n  .mockImplementationOnce(() => false)\n\nmyMockFn() // true\nmyMockFn() // false\n```\n\nWhen the mocked function runs out of implementations, it will invoke the default implementation that was set with `vi.fn(() => defaultValue)` or `.mockImplementation(() => defaultValue)` if they were called:\n\nts\n\n```\nconst myMockFn = vi\n  .fn(() => 'default')\n  .mockImplementationOnce(() => 'first call')\n  .mockImplementationOnce(() => 'second call')\n\n// 'first call', 'second call', 'default', 'default'\nconsole.log(myMockFn(), myMockFn(), myMockFn(), myMockFn())\n```\n\n## withImplementation [​](#withimplementation)\n\n*   **Type:** `(fn: Function, callback: () => void) => MockInstance`\n*   **Type:** `(fn: Function, callback: () => Promise<unknown>) => Promise<MockInstance>`\n\nOverrides the original mock implementation temporarily while the callback is being executed.\n\njs\n\n```\nconst myMockFn = vi.fn(() => 'original')\n\nmyMockFn.withImplementation(() => 'temp', () => {\n  myMockFn() // 'temp'\n})\n\nmyMockFn() // 'original'\n```\n\nCan be used with an asynchronous callback. The method has to be awaited to use the original implementation afterward.\n\nts\n\n```\ntest('async callback', () => {\n  const myMockFn = vi.fn(() => 'original')\n\n  // We await this call since the callback is async\n  await myMockFn.withImplementation(\n    () => 'temp',\n    async () => {\n      myMockFn() // 'temp'\n    },\n  )\n\n  myMockFn() // 'original'\n})\n```\n\nNote that this method takes precedence over the [`mockImplementationOnce`](#mockimplementationonce).\n\n## mockRejectedValue [​](#mockrejectedvalue)\n\n*   **Type:** `(value: any) => MockInstance`\n\nAccepts an error that will be rejected when async function is called.\n\nts\n\n```\nconst asyncMock = vi.fn().mockRejectedValue(new Error('Async error'))\n\nawait asyncMock() // throws \"Async error\"\n```\n\n## mockRejectedValueOnce [​](#mockrejectedvalueonce)\n\n*   **Type:** `(value: any) => MockInstance`\n\nAccepts a value that will be rejected during the next function call. If chained, every consecutive call will reject specified value.\n\nts\n\n```\nconst asyncMock = vi\n  .fn()\n  .mockResolvedValueOnce('first call')\n  .mockRejectedValueOnce(new Error('Async error'))\n\nawait asyncMock() // first call\nawait asyncMock() // throws \"Async error\"\n```\n\n## mockReset [​](#mockreset)\n\n*   **Type:** `() => MockInstance`\n\nDoes what `mockClear` does and makes inner implementation an empty function (returning `undefined` when invoked). This also resets all \"once\" implementations. This is useful when you want to completely reset a mock to the default state.\n\nIf you want this method to be called before each test automatically, you can enable [`mockReset`](https://vitest.dev/config/#mockreset) setting in config.\n\n## mockRestore [​](#mockrestore)\n\n*   **Type:** `() => MockInstance`\n\nDoes what `mockReset` does and restores inner implementation to the original function.\n\nNote that restoring mock from `vi.fn()` will set implementation to an empty function that returns `undefined`. Restoring a `vi.fn(impl)` will restore implementation to `impl`.\n\nIf you want this method to be called before each test automatically, you can enable [`restoreMocks`](https://vitest.dev/config/#restoremocks) setting in config.\n\n## mockResolvedValue [​](#mockresolvedvalue)\n\n*   **Type:** `(value: any) => MockInstance`\n\nAccepts a value that will be resolved when async function is called.\n\nts\n\n```\nconst asyncMock = vi.fn().mockResolvedValue(42)\n\nawait asyncMock() // 42\n```\n\n## mockResolvedValueOnce [​](#mockresolvedvalueonce)\n\n*   **Type:** `(value: any) => MockInstance`\n\nAccepts a value that will be resolved during the next function call. If chained, every consecutive call will resolve specified value.\n\nts\n\n```\nconst asyncMock = vi\n  .fn()\n  .mockResolvedValue('default')\n  .mockResolvedValueOnce('first call')\n  .mockResolvedValueOnce('second call')\n\nawait asyncMock() // first call\nawait asyncMock() // second call\nawait asyncMock() // default\nawait asyncMock() // default\n```\n\n## mockReturnThis [​](#mockreturnthis)\n\n*   **Type:** `() => MockInstance`\n\nUse this if you need to return `this` context from the method without invoking actual implementation. This is a shorthand for:\n\nts\n\n```\nspy.mockImplementation(function () {\n  return this\n})\n```\n\n## mockReturnValue [​](#mockreturnvalue)\n\n*   **Type:** `(value: any) => MockInstance`\n\nAccepts a value that will be returned whenever the mock function is called.\n\nts\n\n```\nconst mock = vi.fn()\nmock.mockReturnValue(42)\nmock() // 42\nmock.mockReturnValue(43)\nmock() // 43\n```\n\n## mockReturnValueOnce [​](#mockreturnvalueonce)\n\n*   **Type:** `(value: any) => MockInstance`\n\nAccepts a value that will be returned during the next function call. If chained, every consecutive call will return the specified value.\n\nWhen there are no more `mockReturnValueOnce` values to use, mock will fallback to previously defined implementation if there is one.\n\nts\n\n```\nconst myMockFn = vi\n  .fn()\n  .mockReturnValue('default')\n  .mockReturnValueOnce('first call')\n  .mockReturnValueOnce('second call')\n\n// 'first call', 'second call', 'default', 'default'\nconsole.log(myMockFn(), myMockFn(), myMockFn(), myMockFn())\n```\n\n## mock.calls [​](#mock-calls)\n\nThis is an array containing all arguments for each call. One item of the array is the arguments of that call.\n\njs\n\n```\nconst fn = vi.fn()\n\nfn('arg1', 'arg2')\nfn('arg3')\n\nfn.mock.calls === [\n  ['arg1', 'arg2'], // first call\n  ['arg3'], // second call\n]\n```\n\n## mock.lastCall [​](#mock-lastcall)\n\nThis contains the arguments of the last call. If mock wasn't called, will return `undefined`.\n\n## mock.results [​](#mock-results)\n\nThis is an array containing all values that were `returned` from the function. One item of the array is an object with properties `type` and `value`. Available types are:\n\n*   `'return'` - function returned without throwing.\n*   `'throw'` - function threw a value.\n\nThe `value` property contains the returned value or thrown error. If the function returned a `Promise`, then `result` will always be `'return'` even if the promise was rejected.\n\njs\n\n```\nconst fn = vi.fn()\n  .mockReturnValueOnce('result')\n  .mockImplementationOnce(() => { throw new Error('thrown error') })\n\nconst result = fn() // returned 'result'\n\ntry {\n  fn() // threw Error\n}\ncatch {}\n\nfn.mock.results === [\n  // first result\n  {\n    type: 'return',\n    value: 'result',\n  },\n  // last result\n  {\n    type: 'throw',\n    value: Error,\n  },\n]\n```\n\n## mock.settledResults [​](#mock-settledresults)\n\nAn array containing all values that were `resolved` or `rejected` from the function.\n\nThis array will be empty if the function was never resolved or rejected.\n\njs\n\n```\nconst fn = vi.fn().mockResolvedValueOnce('result')\n\nconst result = fn()\n\nfn.mock.settledResults === []\n\nawait result\n\nfn.mock.settledResults === [\n  {\n    type: 'fulfilled',\n    value: 'result',\n  },\n]\n```\n\n## mock.invocationCallOrder [​](#mock-invocationcallorder)\n\nThis property returns the order of the mock function's execution. It is an array of numbers that are shared between all defined mocks.\n\njs\n\n```\nconst fn1 = vi.fn()\nconst fn2 = vi.fn()\n\nfn1()\nfn2()\nfn1()\n\nfn1.mock.invocationCallOrder === [1, 3]\nfn2.mock.invocationCallOrder === [2]\n```\n\n## mock.contexts [​](#mock-contexts)\n\nThis property is an array of `this` values used during each call to the mock function.\n\njs\n\n```\nconst fn = vi.fn()\nconst context = {}\n\nfn.apply(context)\nfn.call(context)\n\nfn.mock.contexts[0] === context\nfn.mock.contexts[1] === context\n```\n\n## mock.instances [​](#mock-instances)\n\nThis property is an array containing all instances that were created when the mock was called with the `new` keyword. Note that this is an actual context (`this`) of the function, not a return value.\n\nWARNING\n\nIf mock was instantiated with `new MyClass()`, then `mock.instances` will be an array with one value:\n\njs\n\n```\nconst MyClass = vi.fn()\nconst a = new MyClass()\n\nMyClass.mock.instances[0] === a\n```\n\nIf you return a value from constructor, it will not be in `instances` array, but instead inside `results`:\n\njs\n\n```\nconst Spy = vi.fn(() => ({ method: vi.fn() }))\nconst a = new Spy()\n\nSpy.mock.instances[0] !== a\nSpy.mock.results[0] === a\n```",
    "title": "Mock Functions | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/api/vi",
    "markdown": "# Vi | Vitest\n\nVitest provides utility functions to help you out through its `vi` helper. You can access it globally (when [globals configuration](https://vitest.dev/config/#globals) is enabled), or import it from `vitest` directly:\n\njs\n\n```\nimport { vi } from 'vitest'\n```\n\n## Mock Modules [​](#mock-modules)\n\nThis section describes the API that you can use when [mocking a module](https://vitest.dev/guide/mocking#modules). Beware that Vitest doesn't support mocking modules imported using `require()`.\n\n### vi.mock [​](#vi-mock)\n\n*   **Type**: `(path: string, factory?: (importOriginal: () => unknown) => unknown) => void`\n*   **Type**: `<T>(path: Promise<T>, factory?: (importOriginal: () => T) => unknown) => void`\n\nSubstitutes all imported modules from provided `path` with another module. You can use configured Vite aliases inside a path. The call to `vi.mock` is hoisted, so it doesn't matter where you call it. It will always be executed before all imports. If you need to reference some variables outside of its scope, you can define them inside [`vi.hoisted`](#vi-hoisted) and reference them inside `vi.mock`.\n\nWARNING\n\n`vi.mock` works only for modules that were imported with the `import` keyword. It doesn't work with `require`.\n\nIn order to hoist `vi.mock`, Vitest statically analyzes your files. It indicates that `vi` that was not directly imported from the `vitest` package (for example, from some utility file) cannot be used. Use `vi.mock` with `vi` imported from `vitest`, or enable [`globals`](https://vitest.dev/config/#globals) config option.\n\nVitest will not mock modules that were imported inside a [setup file](https://vitest.dev/config/#setupfiles) because they are cached by the time a test file is running. You can call [`vi.resetModules()`](#vi-resetmodules) inside [`vi.hoisted`](#vi-hoisted) to clear all module caches before running a test file.\n\nIf `factory` is defined, all imports will return its result. Vitest calls factory only once and caches results for all subsequent imports until [`vi.unmock`](#vi-unmock) or [`vi.doUnmock`](#vi-dounmock) is called.\n\nUnlike in `jest`, the factory can be asynchronous. You can use [`vi.importActual`](#vi-importactual) or a helper with the factory passed in as the first argument, and get the original module inside.\n\njs\n\n```\n// when using JavaScript\n\nvi.mock('./path/to/module.js', async (importOriginal) => {\n  const mod = await importOriginal()\n  return {\n    ...mod,\n    // replace some exports\n    namedExport: vi.fn(),\n  }\n})\n```\n\nts\n\n```\n// when using TypeScript\n\nvi.mock('./path/to/module.js', async (importOriginal) => {\n  const mod = await importOriginal<typeof import('./path/to/module.js')>()\n  return {\n    ...mod,\n    // replace some exports\n    namedExport: vi.fn(),\n  }\n})\n```\n\nVitest supports a module promise instead of a string in `vi.mock` method for better IDE support (when file is moved, path will be updated, `importOriginal` also inherits the type automatically).\n\nts\n\n```\nvi.mock(import('./path/to/module.js'), async (importOriginal) => {\n  const mod = await importOriginal() // type is inferred\n  return {\n    ...mod,\n    // replace some exports\n    namedExport: vi.fn(),\n  }\n})\n```\n\nUnder the hood, Vitest still operates on a string and not a module object.\n\nWARNING\n\n`vi.mock` is hoisted (in other words, _moved_) to **top of the file**. It means that whenever you write it (be it inside `beforeEach` or `test`), it will actually be called before that.\n\nThis also means that you cannot use any variables inside the factory that are defined outside the factory.\n\nIf you need to use variables inside the factory, try [`vi.doMock`](#vi-domock). It works the same way but isn't hoisted. Beware that it only mocks subsequent imports.\n\nYou can also reference variables defined by `vi.hoisted` method if it was declared before `vi.mock`:\n\nts\n\n```\nimport { namedExport } from './path/to/module.js'\n\nconst mocks = vi.hoisted(() => {\n  return {\n    namedExport: vi.fn(),\n  }\n})\n\nvi.mock('./path/to/module.js', () => {\n  return {\n    namedExport: mocks.namedExport,\n  }\n})\n\nvi.mocked(namedExport).mockReturnValue(100)\n\nexpect(namedExport()).toBe(100)\nexpect(namedExport).toBe(mocks.namedExport)\n```\n\nWARNING\n\nIf you are mocking a module with default export, you will need to provide a `default` key within the returned factory function object. This is an ES module-specific caveat; therefore, `jest` documentation may differ as `jest` uses CommonJS modules. For example,\n\nts\n\n```\nvi.mock('./path/to/module.js', () => {\n  return {\n    default: { myDefaultKey: vi.fn() },\n    namedExport: vi.fn(),\n    // etc...\n  }\n})\n```\n\nIf there is a `__mocks__` folder alongside a file that you are mocking, and the factory is not provided, Vitest will try to find a file with the same name in the `__mocks__` subfolder and use it as an actual module. If you are mocking a dependency, Vitest will try to find a `__mocks__` folder in the [root](https://vitest.dev/config/#root) of the project (default is `process.cwd()`). You can tell Vitest where the dependencies are located through the [deps.moduleDirectories](https://vitest.dev/config/#deps-moduledirectories) config option.\n\nFor example, you have this file structure:\n\n```\n- __mocks__\n  - axios.js\n- src\n  __mocks__\n    - increment.js\n  - increment.js\n- tests\n  - increment.test.js\n```\n\nIf you call `vi.mock` in a test file without a factory provided, it will find a file in the `__mocks__` folder to use as a module:\n\nts\n\n```\n// increment.test.js\nimport { vi } from 'vitest'\n\n// axios is a default export from `__mocks__/axios.js`\nimport axios from 'axios'\n\n// increment is a named export from `src/__mocks__/increment.js`\nimport { increment } from '../increment.js'\n\nvi.mock('axios')\nvi.mock('../increment.js')\n\naxios.get(`/apples/${increment(1)}`)\n```\n\nWARNING\n\nBeware that if you don't call `vi.mock`, modules **are not** mocked automatically. To replicate Jest's automocking behaviour, you can call `vi.mock` for each required module inside [`setupFiles`](https://vitest.dev/config/#setupfiles).\n\nIf there is no `__mocks__` folder or a factory provided, Vitest will import the original module and auto-mock all its exports. For the rules applied, see [algorithm](https://vitest.dev/guide/mocking#automocking-algorithm).\n\n### vi.doMock [​](#vi-domock)\n\n*   **Type**: `(path: string, factory?: (importOriginal: () => unknown) => unknown) => void`\n\nThe same as [`vi.mock`](#vi-mock), but it's not hoisted to the top of the file, so you can reference variables in the global file scope. The next [dynamic import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import) of the module will be mocked.\n\nWARNING\n\nThis will not mock modules that were imported before this was called. Don't forget that all static imports in ESM are always [hoisted](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#hoisting), so putting this before static import will not force it to be called before the import:\n\nts\n\n```\nvi.doMock('./increment.js') // this will be called _after_ the import statement\n\nimport { increment } from './increment.js'\n```\n\nts\n\n```\n// ./increment.js\nexport function increment(number) {\n  return number + 1\n}\n```\n\nts\n\n```\nimport { beforeEach, test } from 'vitest'\nimport { increment } from './increment.js'\n\n// the module is not mocked, because vi.doMock is not called yet\nincrement(1) === 2\n\nlet mockedIncrement = 100\n\nbeforeEach(() => {\n  // you can access variables inside a factory\n  vi.doMock('./increment.js', () => ({ increment: () => ++mockedIncrement }))\n})\n\ntest('importing the next module imports mocked one', async () => {\n  // original import WAS NOT MOCKED, because vi.doMock is evaluated AFTER imports\n  expect(increment(1)).toBe(2)\n  const { increment: mockedIncrement } = await import('./increment.js')\n  // new dynamic import returns mocked module\n  expect(mockedIncrement(1)).toBe(101)\n  expect(mockedIncrement(1)).toBe(102)\n  expect(mockedIncrement(1)).toBe(103)\n})\n```\n\n### vi.mocked [​](#vi-mocked)\n\n*   **Type**: `<T>(obj: T, deep?: boolean) => MaybeMockedDeep<T>`\n*   **Type**: `<T>(obj: T, options?: { partial?: boolean; deep?: boolean }) => MaybePartiallyMockedDeep<T>`\n\nType helper for TypeScript. Just returns the object that was passed.\n\nWhen `partial` is `true` it will expect a `Partial<T>` as a return value. By default, this will only make TypeScript believe that the first level values are mocked. You can pass down `{ deep: true }` as a second argument to tell TypeScript that the whole object is mocked, if it actually is.\n\nts\n\n```\nimport example from './example.js'\n\nvi.mock('./example.js')\n\ntest('1 + 1 equals 10', async () => {\n  vi.mocked(example.calc).mockReturnValue(10)\n  expect(example.calc(1, '+', 1)).toBe(10)\n})\n```\n\n### vi.importActual [​](#vi-importactual)\n\n*   **Type**: `<T>(path: string) => Promise<T>`\n\nImports module, bypassing all checks if it should be mocked. Can be useful if you want to mock module partially.\n\nts\n\n```\nvi.mock('./example.js', async () => {\n  const axios = await vi.importActual('./example.js')\n\n  return { ...axios, get: vi.fn() }\n})\n```\n\n### vi.importMock [​](#vi-importmock)\n\n*   **Type**: `<T>(path: string) => Promise<MaybeMockedDeep<T>>`\n\nImports a module with all of its properties (including nested properties) mocked. Follows the same rules that [`vi.mock`](#vi-mock) does. For the rules applied, see [algorithm](https://vitest.dev/guide/mocking#automocking-algorithm).\n\n### vi.unmock [​](#vi-unmock)\n\n*   **Type**: `(path: string) => void`\n\nRemoves module from the mocked registry. All calls to import will return the original module even if it was mocked before. This call is hoisted to the top of the file, so it will only unmock modules that were defined in `setupFiles`, for example.\n\n### vi.doUnmock [​](#vi-dounmock)\n\n*   **Type**: `(path: string) => void`\n\nThe same as [`vi.unmock`](#vi-unmock), but is not hoisted to the top of the file. The next import of the module will import the original module instead of the mock. This will not unmock previously imported modules.\n\nts\n\n```\n// ./increment.js\nexport function increment(number) {\n  return number + 1\n}\n```\n\nts\n\n```\nimport { increment } from './increment.js'\n\n// increment is already mocked, because vi.mock is hoisted\nincrement(1) === 100\n\n// this is hoisted, and factory is called before the import on line 1\nvi.mock('./increment.js', () => ({ increment: () => 100 }))\n\n// all calls are mocked, and `increment` always returns 100\nincrement(1) === 100\nincrement(30) === 100\n\n// this is not hoisted, so other import will return unmocked module\nvi.doUnmock('./increment.js')\n\n// this STILL returns 100, because `vi.doUnmock` doesn't reevaluate a module\nincrement(1) === 100\nincrement(30) === 100\n\n// the next import is unmocked, now `increment` is the original function that returns count + 1\nconst { increment: unmockedIncrement } = await import('./increment.js')\n\nunmockedIncrement(1) === 2\nunmockedIncrement(30) === 31\n```\n\n### vi.resetModules [​](#vi-resetmodules)\n\n*   **Type**: `() => Vitest`\n\nResets modules registry by clearing the cache of all modules. This allows modules to be reevaluated when reimported. Top-level imports cannot be re-evaluated. Might be useful to isolate modules where local state conflicts between tests.\n\nts\n\n```\nimport { vi } from 'vitest'\n\nimport { data } from './data.js' // Will not get reevaluated beforeEach test\n\nbeforeEach(() => {\n  vi.resetModules()\n})\n\ntest('change state', async () => {\n  const mod = await import('./some/path.js') // Will get reevaluated\n  mod.changeLocalState('new value')\n  expect(mod.getLocalState()).toBe('new value')\n})\n\ntest('module has old state', async () => {\n  const mod = await import('./some/path.js') // Will get reevaluated\n  expect(mod.getLocalState()).toBe('old value')\n})\n```\n\nWARNING\n\nDoes not reset mocks registry. To clear mocks registry, use [`vi.unmock`](#vi-unmock) or [`vi.doUnmock`](#vi-dounmock).\n\n### vi.dynamicImportSettled [​](#vi-dynamicimportsettled)\n\nWait for all imports to load. Useful, if you have a synchronous call that starts importing a module that you cannot wait otherwise.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\n// cannot track import because Promise is not returned\nfunction renderComponent() {\n  import('./component.js').then(({ render }) => {\n    render()\n  })\n}\n\ntest('operations are resolved', async () => {\n  renderComponent()\n  await vi.dynamicImportSettled()\n  expect(document.querySelector('.component')).not.toBeNull()\n})\n```\n\nTIP\n\nIf during a dynamic import another dynamic import is initiated, this method will wait until all of them are resolved.\n\nThis method will also wait for the next `setTimeout` tick after the import is resolved so all synchronous operations should be completed by the time it's resolved.\n\n## Mocking Functions and Objects [​](#mocking-functions-and-objects)\n\nThis section describes how to work with [method mocks](https://vitest.dev/api/mock) and replace environmental and global variables.\n\n### vi.fn [​](#vi-fn)\n\n*   **Type:** `(fn?: Function) => Mock`\n\nCreates a spy on a function, though can be initiated without one. Every time a function is invoked, it stores its call arguments, returns, and instances. Also, you can manipulate its behavior with [methods](https://vitest.dev/api/mock). If no function is given, mock will return `undefined`, when invoked.\n\nts\n\n```\nconst getApples = vi.fn(() => 0)\n\ngetApples()\n\nexpect(getApples).toHaveBeenCalled()\nexpect(getApples).toHaveReturnedWith(0)\n\ngetApples.mockReturnValueOnce(5)\n\nconst res = getApples()\nexpect(res).toBe(5)\nexpect(getApples).toHaveNthReturnedWith(2, 5)\n```\n\n### vi.isMockFunction [​](#vi-ismockfunction)\n\n*   **Type:** `(fn: Function) => boolean`\n\nChecks that a given parameter is a mock function. If you are using TypeScript, it will also narrow down its type.\n\n### vi.clearAllMocks [​](#vi-clearallmocks)\n\nWill call [`.mockClear()`](https://vitest.dev/api/mock#mockclear) on all spies. This will clear mock history, but not reset its implementation to the default one.\n\n### vi.resetAllMocks [​](#vi-resetallmocks)\n\nWill call [`.mockReset()`](https://vitest.dev/api/mock#mockreset) on all spies. This will clear mock history and reset its implementation to an empty function (will return `undefined`).\n\n### vi.restoreAllMocks [​](#vi-restoreallmocks)\n\nWill call [`.mockRestore()`](https://vitest.dev/api/mock#mockrestore) on all spies. This will clear mock history and reset its implementation to the original one.\n\n### vi.spyOn [​](#vi-spyon)\n\n*   **Type:** `<T, K extends keyof T>(object: T, method: K, accessType?: 'get' | 'set') => MockInstance`\n\nCreates a spy on a method or getter/setter of an object similar to [`vi.fn()`](#vi-fn). It returns a [mock function](https://vitest.dev/api/mock).\n\nts\n\n```\nlet apples = 0\nconst cart = {\n  getApples: () => 42,\n}\n\nconst spy = vi.spyOn(cart, 'getApples').mockImplementation(() => apples)\napples = 1\n\nexpect(cart.getApples()).toBe(1)\n\nexpect(spy).toHaveBeenCalled()\nexpect(spy).toHaveReturnedWith(1)\n```\n\nTIP\n\nYou can call [`vi.restoreAllMocks`](#vi-restoreallmocks) inside [`afterEach`](https://vitest.dev/api/#aftereach) (or enable [`test.restoreMocks`](https://vitest.dev/config/#restoreMocks)) to restore all methods to their original implementations. This will restore the original [object descriptor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty), so you won't be able to change method's implementation:\n\nts\n\n```\nconst cart = {\n  getApples: () => 42,\n}\n\nconst spy = vi.spyOn(cart, 'getApples').mockReturnValue(10)\n\nconsole.log(cart.getApples()) // 10\nvi.restoreAllMocks()\nconsole.log(cart.getApples()) // 42\nspy.mockReturnValue(10)\nconsole.log(cart.getApples()) // still 42!\n```\n\n### vi.stubEnv [​](#vi-stubenv)\n\n*   **Type:** `(name: string, value: string) => Vitest`\n\nChanges the value of environmental variable on `process.env` and `import.meta.env`. You can restore its value by calling `vi.unstubAllEnvs`.\n\nts\n\n```\nimport { vi } from 'vitest'\n\n// `process.env.NODE_ENV` and `import.meta.env.NODE_ENV`\n// are \"development\" before calling \"vi.stubEnv\"\n\nvi.stubEnv('NODE_ENV', 'production')\n\nprocess.env.NODE_ENV === 'production'\nimport.meta.env.NODE_ENV === 'production'\n// doesn't change other envs\nimport.meta.env.MODE === 'development'\n```\n\nTIP\n\nYou can also change the value by simply assigning it, but you won't be able to use `vi.unstubAllEnvs` to restore previous value:\n\nts\n\n```\nimport.meta.env.MODE = 'test'\n```\n\n### vi.unstubAllEnvs [​](#vi-unstuballenvs)\n\n*   **Type:** `() => Vitest`\n\nRestores all `import.meta.env` and `process.env` values that were changed with `vi.stubEnv`. When it's called for the first time, Vitest remembers the original value and will store it, until `unstubAllEnvs` is called again.\n\nts\n\n```\nimport { vi } from 'vitest'\n\n// `process.env.NODE_ENV` and `import.meta.env.NODE_ENV`\n// are \"development\" before calling stubEnv\n\nvi.stubEnv('NODE_ENV', 'production')\n\nprocess.env.NODE_ENV === 'production'\nimport.meta.env.NODE_ENV === 'production'\n\nvi.stubEnv('NODE_ENV', 'staging')\n\nprocess.env.NODE_ENV === 'staging'\nimport.meta.env.NODE_ENV === 'staging'\n\nvi.unstubAllEnvs()\n\n// restores to the value that were stored before the first \"stubEnv\" call\nprocess.env.NODE_ENV === 'development'\nimport.meta.env.NODE_ENV === 'development'\n```\n\n### vi.stubGlobal [​](#vi-stubglobal)\n\n*   **Type:** `(name: string | number | symbol, value: unknown) => Vitest`\n\nChanges the value of global variable. You can restore its original value by calling `vi.unstubAllGlobals`.\n\nts\n\n```\nimport { vi } from 'vitest'\n\n// `innerWidth` is \"0\" before calling stubGlobal\n\nvi.stubGlobal('innerWidth', 100)\n\ninnerWidth === 100\nglobalThis.innerWidth === 100\n// if you are using jsdom or happy-dom\nwindow.innerWidth === 100\n```\n\nTIP\n\nYou can also change the value by simply assigning it to `globalThis` or `window` (if you are using `jsdom` or `happy-dom` environment), but you won't be able to use `vi.unstubAllGlobals` to restore original value:\n\nts\n\n```\nglobalThis.innerWidth = 100\n// if you are using jsdom or happy-dom\nwindow.innerWidth = 100\n```\n\n### vi.unstubAllGlobals [​](#vi-unstuballglobals)\n\n*   **Type:** `() => Vitest`\n\nRestores all global values on `globalThis`/`global` (and `window`/`top`/`self`/`parent`, if you are using `jsdom` or `happy-dom` environment) that were changed with `vi.stubGlobal`. When it's called for the first time, Vitest remembers the original value and will store it, until `unstubAllGlobals` is called again.\n\nts\n\n```\nimport { vi } from 'vitest'\n\nconst Mock = vi.fn()\n\n// IntersectionObserver is \"undefined\" before calling \"stubGlobal\"\n\nvi.stubGlobal('IntersectionObserver', Mock)\n\nIntersectionObserver === Mock\nglobal.IntersectionObserver === Mock\nglobalThis.IntersectionObserver === Mock\n// if you are using jsdom or happy-dom\nwindow.IntersectionObserver === Mock\n\nvi.unstubAllGlobals()\n\nglobalThis.IntersectionObserver === undefined\n'IntersectionObserver' in globalThis === false\n// throws ReferenceError, because it's not defined\nIntersectionObserver === undefined\n```\n\n## Fake Timers [​](#fake-timers)\n\nThis sections descibes how to work with [fake timers](https://vitest.dev/guide/mocking#timers).\n\n### vi.advanceTimersByTime [​](#vi-advancetimersbytime)\n\n*   **Type:** `(ms: number) => Vitest`\n\nThis method will invoke every initiated timer until the specified number of milliseconds is passed or the queue is empty - whatever comes first.\n\nts\n\n```\nlet i = 0\nsetInterval(() => console.log(++i), 50)\n\nvi.advanceTimersByTime(150)\n\n// log: 1\n// log: 2\n// log: 3\n```\n\n### vi.advanceTimersByTimeAsync [​](#vi-advancetimersbytimeasync)\n\n*   **Type:** `(ms: number) => Promise<Vitest>`\n\nThis method will invoke every initiated timer until the specified number of milliseconds is passed or the queue is empty - whatever comes first. This will include asynchronously set timers.\n\nts\n\n```\nlet i = 0\nsetInterval(() => Promise.resolve().then(() => console.log(++i)), 50)\n\nawait vi.advanceTimersByTimeAsync(150)\n\n// log: 1\n// log: 2\n// log: 3\n```\n\n### vi.advanceTimersToNextTimer [​](#vi-advancetimerstonexttimer)\n\n*   **Type:** `() => Vitest`\n\nWill call next available timer. Useful to make assertions between each timer call. You can chain call it to manage timers by yourself.\n\nts\n\n```\nlet i = 0\nsetInterval(() => console.log(++i), 50)\n\nvi.advanceTimersToNextTimer() // log: 1\n  .advanceTimersToNextTimer() // log: 2\n  .advanceTimersToNextTimer() // log: 3\n```\n\n### vi.advanceTimersToNextTimerAsync [​](#vi-advancetimerstonexttimerasync)\n\n*   **Type:** `() => Promise<Vitest>`\n\nWill call next available timer and wait until it's resolved if it was set asynchronously. Useful to make assertions between each timer call.\n\nts\n\n```\nlet i = 0\nsetInterval(() => Promise.resolve().then(() => console.log(++i)), 50)\n\nawait vi.advanceTimersToNextTimerAsync() // log: 1\nexpect(console.log).toHaveBeenCalledWith(1)\n\nawait vi.advanceTimersToNextTimerAsync() // log: 2\nawait vi.advanceTimersToNextTimerAsync() // log: 3\n```\n\n### vi.getTimerCount [​](#vi-gettimercount)\n\n*   **Type:** `() => number`\n\nGet the number of waiting timers.\n\n### vi.clearAllTimers [​](#vi-clearalltimers)\n\nRemoves all timers that are scheduled to run. These timers will never run in the future.\n\n### vi.getMockedSystemTime [​](#vi-getmockedsystemtime)\n\n*   **Type**: `() => Date | null`\n\nReturns mocked current date that was set using `setSystemTime`. If date is not mocked the method will return `null`.\n\n### vi.getRealSystemTime [​](#vi-getrealsystemtime)\n\n*   **Type**: `() => number`\n\nWhen using `vi.useFakeTimers`, `Date.now` calls are mocked. If you need to get real time in milliseconds, you can call this function.\n\n### vi.runAllTicks [​](#vi-runallticks)\n\n*   **Type:** `() => Vitest`\n\nCalls every microtask that was queued by `process.nextTick`. This will also run all microtasks scheduled by themselves.\n\n### vi.runAllTimers [​](#vi-runalltimers)\n\n*   **Type:** `() => Vitest`\n\nThis method will invoke every initiated timer until the timer queue is empty. It means that every timer called during `runAllTimers` will be fired. If you have an infinite interval, it will throw after 10 000 tries (can be configured with [`fakeTimers.loopLimit`](https://vitest.dev/config/#faketimers-looplimit)).\n\nts\n\n```\nlet i = 0\nsetTimeout(() => console.log(++i))\nconst interval = setInterval(() => {\n  console.log(++i)\n  if (i === 3) {\n    clearInterval(interval)\n  }\n}, 50)\n\nvi.runAllTimers()\n\n// log: 1\n// log: 2\n// log: 3\n```\n\n### vi.runAllTimersAsync [​](#vi-runalltimersasync)\n\n*   **Type:** `() => Promise<Vitest>`\n\nThis method will asynchronously invoke every initiated timer until the timer queue is empty. It means that every timer called during `runAllTimersAsync` will be fired even asynchronous timers. If you have an infinite interval, it will throw after 10 000 tries (can be configured with [`fakeTimers.loopLimit`](https://vitest.dev/config/#faketimers-looplimit)).\n\nts\n\n```\nsetTimeout(async () => {\n  console.log(await Promise.resolve('result'))\n}, 100)\n\nawait vi.runAllTimersAsync()\n\n// log: result\n```\n\n### vi.runOnlyPendingTimers [​](#vi-runonlypendingtimers)\n\n*   **Type:** `() => Vitest`\n\nThis method will call every timer that was initiated after [`vi.useFakeTimers`](#vi-usefaketimers) call. It will not fire any timer that was initiated during its call.\n\nts\n\n```\nlet i = 0\nsetInterval(() => console.log(++i), 50)\n\nvi.runOnlyPendingTimers()\n\n// log: 1\n```\n\n### vi.runOnlyPendingTimersAsync [​](#vi-runonlypendingtimersasync)\n\n*   **Type:** `() => Promise<Vitest>`\n\nThis method will asynchronously call every timer that was initiated after [`vi.useFakeTimers`](#vi-usefaketimers) call, even asynchronous ones. It will not fire any timer that was initiated during its call.\n\nts\n\n```\nsetTimeout(() => {\n  console.log(1)\n}, 100)\nsetTimeout(() => {\n  Promise.resolve().then(() => {\n    console.log(2)\n    setInterval(() => {\n      console.log(3)\n    }, 40)\n  })\n}, 10)\n\nawait vi.runOnlyPendingTimersAsync()\n\n// log: 2\n// log: 3\n// log: 3\n// log: 1\n```\n\n### vi.setSystemTime [​](#vi-setsystemtime)\n\n*   **Type**: `(date: string | number | Date) => void`\n\nIf fake timers are enabled, this method simulates a user changing the system clock (will affect date related API like `hrtime`, `performance.now` or `new Date()`) - however, it will not fire any timers. If fake timers are not enabled, this method will only mock `Date.*` calls.\n\nUseful if you need to test anything that depends on the current date - for example [Luxon](https://github.com/moment/luxon/) calls inside your code.\n\nts\n\n```\nconst date = new Date(1998, 11, 19)\n\nvi.useFakeTimers()\nvi.setSystemTime(date)\n\nexpect(Date.now()).toBe(date.valueOf())\n\nvi.useRealTimers()\n```\n\n### vi.useFakeTimers [​](#vi-usefaketimers)\n\n*   **Type:** `(config?: FakeTimerInstallOpts) => Vitest`\n\nTo enable mocking timers, you need to call this method. It will wrap all further calls to timers (such as `setTimeout`, `setInterval`, `clearTimeout`, `clearInterval`, `setImmediate`, `clearImmediate`, and `Date`) until [`vi.useRealTimers()`](#vi-userealtimers) is called.\n\nMocking `nextTick` is not supported when running Vitest inside `node:child_process` by using `--pool=forks`. NodeJS uses `process.nextTick` internally in `node:child_process` and hangs when it is mocked. Mocking `nextTick` is supported when running Vitest with `--pool=threads`.\n\nThe implementation is based internally on [`@sinonjs/fake-timers`](https://github.com/sinonjs/fake-timers).\n\nTIP\n\n`vi.useFakeTimers()` does not automatically mock `process.nextTick`. But you can enable it by specifying the option in `toFake` argument: `vi.useFakeTimers({ toFake: ['nextTick'] })`.\n\n### vi.isFakeTimers [​](#vi-isfaketimers)\n\n*   **Type:** `() => boolean`\n\nReturns `true` if fake timers are enabled.\n\n### vi.useRealTimers [​](#vi-userealtimers)\n\n*   **Type:** `() => Vitest`\n\nWhen timers are run out, you may call this method to return mocked timers to its original implementations. All timers that were scheduled before will be discarded.\n\n## Miscellaneous [​](#miscellaneous)\n\nA set of useful helper functions that Vitest provides.\n\n### vi.waitFor [​](#vi-waitfor)\n\n*   **Type:** `<T>(callback: WaitForCallback<T>, options?: number | WaitForOptions) => Promise<T>`\n\nWait for the callback to execute successfully. If the callback throws an error or returns a rejected promise it will continue to wait until it succeeds or times out.\n\nThis is very useful when you need to wait for some asynchronous action to complete, for example, when you start a server and need to wait for it to start.\n\nts\n\n```\nimport { expect, test, vi } from 'vitest'\nimport { createServer } from './server.js'\n\ntest('Server started successfully', async () => {\n  const server = createServer()\n\n  await vi.waitFor(\n    () => {\n      if (!server.isReady) {\n        throw new Error('Server not started')\n      }\n\n      console.log('Server started')\n    },\n    {\n      timeout: 500, // default is 1000\n      interval: 20, // default is 50\n    }\n  )\n  expect(server.isReady).toBe(true)\n})\n```\n\nIt also works for asynchronous callbacks\n\nts\n\n```\n// @vitest-environment jsdom\n\nimport { expect, test, vi } from 'vitest'\nimport { getDOMElementAsync, populateDOMAsync } from './dom.js'\n\ntest('Element exists in a DOM', async () => {\n  // start populating DOM\n  populateDOMAsync()\n\n  const element = await vi.waitFor(async () => {\n    // try to get the element until it exists\n    const element = await getDOMElementAsync() as HTMLElement | null\n    expect(element).toBeTruthy()\n    expect(element.dataset.initialized).toBeTruthy()\n    return element\n  }, {\n    timeout: 500, // default is 1000\n    interval: 20, // default is 50\n  })\n  expect(element).toBeInstanceOf(HTMLElement)\n})\n```\n\nIf `vi.useFakeTimers` is used, `vi.waitFor` automatically calls `vi.advanceTimersByTime(interval)` in every check callback.\n\n### vi.waitUntil [​](#vi-waituntil)\n\n*   **Type:** `<T>(callback: WaitUntilCallback<T>, options?: number | WaitUntilOptions) => Promise<T>`\n\nThis is similar to `vi.waitFor`, but if the callback throws any errors, execution is immediately interrupted and an error message is received. If the callback returns falsy value, the next check will continue until truthy value is returned. This is useful when you need to wait for something to exist before taking the next step.\n\nLook at the example below. We can use `vi.waitUntil` to wait for the element to appear on the page, and then we can do something with the element.\n\nts\n\n```\nimport { expect, test, vi } from 'vitest'\n\ntest('Element render correctly', async () => {\n  const element = await vi.waitUntil(\n    () => document.querySelector('.element'),\n    {\n      timeout: 500, // default is 1000\n      interval: 20, // default is 50\n    }\n  )\n\n  // do something with the element\n  expect(element.querySelector('.element-child')).toBeTruthy()\n})\n```\n\n### vi.hoisted [​](#vi-hoisted)\n\n*   **Type**: `<T>(factory: () => T) => T`\n\nAll static `import` statements in ES modules are hoisted to the top of the file, so any code that is defined before the imports will actually be executed after imports are evaluated.\n\nHowever, it can be useful to invoke some side effects like mocking dates before importing a module.\n\nTo bypass this limitation, you can rewrite static imports into dynamic ones like this:\n\ndiff\n\n```\ncallFunctionWithSideEffect()\n- import { value } from './some/module.js'\n+ const { value } = await import('./some/module.js')\n```\n\nWhen running `vitest`, you can do this automatically by using `vi.hoisted` method.\n\ndiff\n\n```\n- callFunctionWithSideEffect()\nimport { value } from './some/module.js'\n+ vi.hoisted(() => callFunctionWithSideEffect())\n```\n\nThis method returns the value that was returned from the factory. You can use that value in your `vi.mock` factories if you need easy access to locally defined variables:\n\nts\n\n```\nimport { expect, vi } from 'vitest'\nimport { originalMethod } from './path/to/module.js'\n\nconst { mockedMethod } = vi.hoisted(() => {\n  return { mockedMethod: vi.fn() }\n})\n\nvi.mock('./path/to/module.js', () => {\n  return { originalMethod: mockedMethod }\n})\n\nmockedMethod.mockReturnValue(100)\nexpect(originalMethod()).toBe(100)\n```\n\nNote that this method can also be called asynchronously even if your environment doesn't support top-level await:\n\nts\n\n```\nconst promised = await vi.hoisted(async () => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts')\n  return response.json()\n})\n```\n\n### vi.setConfig [​](#vi-setconfig)\n\n*   **Type**: `RuntimeConfig`\n\nUpdates config for the current test file. This method supports only config options that will affect the current test file:\n\nts\n\n```\nvi.setConfig({\n  allowOnly: true,\n  testTimeout: 10_000,\n  hookTimeout: 10_000,\n  clearMocks: true,\n  restoreMocks: true,\n  fakeTimers: {\n    now: new Date(2021, 11, 19),\n    // supports the whole object\n  },\n  maxConcurrency: 10,\n  sequence: {\n    hooks: 'stack'\n    // supports only \"sequence.hooks\"\n  }\n})\n```\n\n### vi.resetConfig [​](#vi-resetconfig)\n\n*   **Type**: `RuntimeConfig`\n\nIf [`vi.setConfig`](#vi-setconfig) was called before, this will reset config to the original state.",
    "title": "Vi | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/api/expect-typeof",
    "markdown": "# expectTypeOf | Vitest\n\nWARNING\n\nDuring runtime this function doesn't do anything. To [enable typechecking](https://vitest.dev/guide/testing-types#run-typechecking), don't forget to pass down `--typecheck` flag.\n\n*   **Type:** `<T>(a: unknown) => ExpectTypeOf`\n\n## not [​](#not)\n\n*   **Type:** `ExpectTypeOf`\n\nYou can negate all assertions, using `.not` property.\n\n## toEqualTypeOf [​](#toequaltypeof)\n\n*   **Type:** `<T>(expected: T) => void`\n\nThis matcher will check if the types are fully equal to each other. This matcher will not fail if two objects have different values, but the same type. It will fail however if an object is missing a property.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf({ a: 1 }).toEqualTypeOf<{ a: number }>()\nexpectTypeOf({ a: 1 }).toEqualTypeOf({ a: 1 })\nexpectTypeOf({ a: 1 }).toEqualTypeOf({ a: 2 })\nexpectTypeOf({ a: 1, b: 1 }).not.toEqualTypeOf<{ a: number }>()\n```\n\n## toMatchTypeOf [​](#tomatchtypeof)\n\n*   **Type:** `<T>(expected: T) => void`\n\nThis matcher checks if expect type extends provided type. It is different from `toEqual` and is more similar to [expect's](https://vitest.dev/api/expect) `toMatchObject()`. With this matcher, you can check if an object “matches” a type.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf({ a: 1, b: 1 }).toMatchTypeOf({ a: 1 })\nexpectTypeOf<number>().toMatchTypeOf<string | number>()\nexpectTypeOf<string | number>().not.toMatchTypeOf<number>()\n```\n\n## extract [​](#extract)\n\n*   **Type:** `ExpectTypeOf<ExtractedUnion>`\n\nYou can use `.extract` to narrow down types for further testing.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\ntype ResponsiveProp<T> = T | T[] | { xs?: T; sm?: T; md?: T }\n\ninterface CSSProperties { margin?: string; padding?: string }\n\nfunction getResponsiveProp<T>(_props: T): ResponsiveProp<T> {\n  return {}\n}\n\nconst cssProperties: CSSProperties = { margin: '1px', padding: '2px' }\n\nexpectTypeOf(getResponsiveProp(cssProperties))\n  .extract<{ xs?: any }>() // extracts the last type from a union\n  .toEqualTypeOf<{ xs?: CSSProperties; sm?: CSSProperties; md?: CSSProperties }>()\n\nexpectTypeOf(getResponsiveProp(cssProperties))\n  .extract<unknown[]>() // extracts an array from a union\n  .toEqualTypeOf<CSSProperties[]>()\n```\n\nWARNING\n\nIf no type is found in the union, `.extract` will return `never`.\n\n## exclude [​](#exclude)\n\n*   **Type:** `ExpectTypeOf<NonExcludedUnion>`\n\nYou can use `.exclude` to remove types from a union for further testing.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\ntype ResponsiveProp<T> = T | T[] | { xs?: T; sm?: T; md?: T }\n\ninterface CSSProperties { margin?: string; padding?: string }\n\nfunction getResponsiveProp<T>(_props: T): ResponsiveProp<T> {\n  return {}\n}\n\nconst cssProperties: CSSProperties = { margin: '1px', padding: '2px' }\n\nexpectTypeOf(getResponsiveProp(cssProperties))\n  .exclude<unknown[]>()\n  .exclude<{ xs?: unknown }>() // or just .exclude<unknown[] | { xs?: unknown }>()\n  .toEqualTypeOf<CSSProperties>()\n```\n\nWARNING\n\nIf no type is found in the union, `.exclude` will return `never`.\n\n## returns [​](#returns)\n\n*   **Type:** `ExpectTypeOf<ReturnValue>`\n\nYou can use `.returns` to extract return value of a function type.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf(() => {}).returns.toBeVoid()\nexpectTypeOf((a: number) => [a, a]).returns.toEqualTypeOf([1, 2])\n```\n\nWARNING\n\nIf used on a non-function type, it will return `never`, so you won't be able to chain it with other matchers.\n\n## parameters [​](#parameters)\n\n*   **Type:** `ExpectTypeOf<Parameters>`\n\nYou can extract function arguments with `.parameters` to perform assertions on its value. Parameters are returned as an array.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\ntype NoParam = () => void\ntype HasParam = (s: string) => void\n\nexpectTypeOf<NoParam>().parameters.toEqualTypeOf<[]>()\nexpectTypeOf<HasParam>().parameters.toEqualTypeOf<[string]>()\n```\n\nWARNING\n\nIf used on a non-function type, it will return `never`, so you won't be able to chain it with other matchers.\n\nTIP\n\nYou can also use [`.toBeCallableWith`](#tobecallablewith) matcher as a more expressive assertion.\n\n## parameter [​](#parameter)\n\n*   **Type:** `(nth: number) => ExpectTypeOf`\n\nYou can extract a certain function argument with `.parameter(number)` call to perform other assertions on it.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nfunction foo(a: number, b: string) {\n  return [a, b]\n}\n\nexpectTypeOf(foo).parameter(0).toBeNumber()\nexpectTypeOf(foo).parameter(1).toBeString()\n```\n\nWARNING\n\nIf used on a non-function type, it will return `never`, so you won't be able to chain it with other matchers.\n\n## constructorParameters [​](#constructorparameters)\n\n*   **Type:** `ExpectTypeOf<ConstructorParameters>`\n\nYou can extract constructor parameters as an array of values and perform assertions on them with this method.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf(Date).constructorParameters.toEqualTypeOf<[] | [string | number | Date]>()\n```\n\nWARNING\n\nIf used on a non-function type, it will return `never`, so you won't be able to chain it with other matchers.\n\nTIP\n\nYou can also use [`.toBeConstructibleWith`](#tobeconstructiblewith) matcher as a more expressive assertion.\n\n## instance [​](#instance)\n\n*   **Type:** `ExpectTypeOf<ConstructableInstance>`\n\nThis property gives access to matchers that can be performed on an instance of the provided class.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf(Date).instance.toHaveProperty('toISOString')\n```\n\nWARNING\n\nIf used on a non-function type, it will return `never`, so you won't be able to chain it with other matchers.\n\n## items [​](#items)\n\n*   **Type:** `ExpectTypeOf<T>`\n\nYou can get array item type with `.items` to perform further assertions.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf([1, 2, 3]).items.toEqualTypeOf<number>()\nexpectTypeOf([1, 2, 3]).items.not.toEqualTypeOf<string>()\n```\n\n## resolves [​](#resolves)\n\n*   **Type:** `ExpectTypeOf<ResolvedPromise>`\n\nThis matcher extracts resolved value of a `Promise`, so you can perform other assertions on it.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nasync function asyncFunc() {\n  return 123\n}\n\nexpectTypeOf(asyncFunc).returns.resolves.toBeNumber()\nexpectTypeOf(Promise.resolve('string')).resolves.toBeString()\n```\n\nWARNING\n\nIf used on a non-promise type, it will return `never`, so you won't be able to chain it with other matchers.\n\n## guards [​](#guards)\n\n*   **Type:** `ExpectTypeOf<Guard>`\n\nThis matcher extracts guard value (e.g., `v is number`), so you can perform assertions on it.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nfunction isString(v: any): v is string {\n  return typeof v === 'string'\n}\nexpectTypeOf(isString).guards.toBeString()\n```\n\nWARNING\n\nReturns `never`, if the value is not a guard function, so you won't be able to chain it with other matchers.\n\n## asserts [​](#asserts)\n\n*   **Type:** `ExpectTypeOf<Assert>`\n\nThis matcher extracts assert value (e.g., `assert v is number`), so you can perform assertions on it.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nfunction assertNumber(v: any): asserts v is number {\n  if (typeof v !== 'number') {\n    throw new TypeError('Nope !')\n  }\n}\n\nexpectTypeOf(assertNumber).asserts.toBeNumber()\n```\n\nWARNING\n\nReturns `never`, if the value is not an assert function, so you won't be able to chain it with other matchers.\n\n## toBeAny [​](#tobeany)\n\n*   **Type:** `() => void`\n\nWith this matcher you can check, if provided type is `any` type. If the type is too specific, the test will fail.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf<any>().toBeAny()\nexpectTypeOf({} as any).toBeAny()\nexpectTypeOf('string').not.toBeAny()\n```\n\n## toBeUnknown [​](#tobeunknown)\n\n*   **Type:** `() => void`\n\nThis matcher checks, if provided type is `unknown` type.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf().toBeUnknown()\nexpectTypeOf({} as unknown).toBeUnknown()\nexpectTypeOf('string').not.toBeUnknown()\n```\n\n## toBeNever [​](#tobenever)\n\n*   **Type:** `() => void`\n\nThis matcher checks, if provided type is a `never` type.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf<never>().toBeNever()\nexpectTypeOf((): never => {}).returns.toBeNever()\n```\n\n## toBeFunction [​](#tobefunction)\n\n*   **Type:** `() => void`\n\nThis matcher checks, if provided type is a `function`.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf(42).not.toBeFunction()\nexpectTypeOf((): never => {}).toBeFunction()\n```\n\n## toBeObject [​](#tobeobject)\n\n*   **Type:** `() => void`\n\nThis matcher checks, if provided type is an `object`.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf(42).not.toBeObject()\nexpectTypeOf({}).toBeObject()\n```\n\n## toBeArray [​](#tobearray)\n\n*   **Type:** `() => void`\n\nThis matcher checks, if provided type is `Array<T>`.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf(42).not.toBeArray()\nexpectTypeOf([]).toBeArray()\nexpectTypeOf([1, 2]).toBeArray()\nexpectTypeOf([{}, 42]).toBeArray()\n```\n\n## toBeString [​](#tobestring)\n\n*   **Type:** `() => void`\n\nThis matcher checks, if provided type is a `string`.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf(42).not.toBeString()\nexpectTypeOf('').toBeString()\nexpectTypeOf('a').toBeString()\n```\n\n## toBeBoolean [​](#tobeboolean)\n\n*   **Type:** `() => void`\n\nThis matcher checks, if provided type is `boolean`.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf(42).not.toBeBoolean()\nexpectTypeOf(true).toBeBoolean()\nexpectTypeOf<boolean>().toBeBoolean()\n```\n\n## toBeVoid [​](#tobevoid)\n\n*   **Type:** `() => void`\n\nThis matcher checks, if provided type is `void`.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf(() => {}).returns.toBeVoid()\nexpectTypeOf<void>().toBeVoid()\n```\n\n## toBeSymbol [​](#tobesymbol)\n\n*   **Type:** `() => void`\n\nThis matcher checks, if provided type is a `symbol`.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf(Symbol(1)).toBeSymbol()\nexpectTypeOf<symbol>().toBeSymbol()\n```\n\n## toBeNull [​](#tobenull)\n\n*   **Type:** `() => void`\n\nThis matcher checks, if provided type is `null`.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf(null).toBeNull()\nexpectTypeOf<null>().toBeNull()\nexpectTypeOf(undefined).not.toBeNull()\n```\n\n## toBeUndefined [​](#tobeundefined)\n\n*   **Type:** `() => void`\n\nThis matcher checks, if provided type is `undefined`.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf(undefined).toBeUndefined()\nexpectTypeOf<undefined>().toBeUndefined()\nexpectTypeOf(null).not.toBeUndefined()\n```\n\n## toBeNullable [​](#tobenullable)\n\n*   **Type:** `() => void`\n\nThis matcher checks, if you can use `null` or `undefined` with provided type.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf<1 | undefined>().toBeNullable()\nexpectTypeOf<1 | null>().toBeNullable()\nexpectTypeOf<1 | undefined | null>().toBeNullable()\n```\n\n## toBeCallableWith [​](#tobecallablewith)\n\n*   **Type:** `() => void`\n\nThis matcher ensures you can call provided function with a set of parameters.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\ntype NoParam = () => void\ntype HasParam = (s: string) => void\n\nexpectTypeOf<NoParam>().toBeCallableWith()\nexpectTypeOf<HasParam>().toBeCallableWith('some string')\n```\n\nWARNING\n\nIf used on a non-function type, it will return `never`, so you won't be able to chain it with other matchers.\n\n## toBeConstructibleWith [​](#tobeconstructiblewith)\n\n*   **Type:** `() => void`\n\nThis matcher ensures you can create a new instance with a set of constructor parameters.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nexpectTypeOf(Date).toBeConstructibleWith(new Date())\nexpectTypeOf(Date).toBeConstructibleWith('01-01-2000')\n```\n\nWARNING\n\nIf used on a non-function type, it will return `never`, so you won't be able to chain it with other matchers.\n\n## toHaveProperty [​](#tohaveproperty)\n\n*   **Type:** `<K extends keyof T>(property: K) => ExpectTypeOf<T[K>`\n\nThis matcher checks if a property exists on the provided object. If it exists, it also returns the same set of matchers for the type of this property, so you can chain assertions one after another.\n\nts\n\n```\nimport { expectTypeOf } from 'vitest'\n\nconst obj = { a: 1, b: '' }\n\nexpectTypeOf(obj).toHaveProperty('a')\nexpectTypeOf(obj).not.toHaveProperty('c')\n\nexpectTypeOf(obj).toHaveProperty('a').toBeNumber()\nexpectTypeOf(obj).toHaveProperty('b').toBeString()\nexpectTypeOf(obj).toHaveProperty('a').not.toBeString()\n```",
    "title": "expectTypeOf | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/api/assert",
    "markdown": "# assert | Vitest\n\nVitest reexports the `assert` method from [`chai`](https://www.chaijs.com/api/assert/) for verifying invariants.\n\n## assert [​](#assert-1)\n\n*   **Type:** `(expression: any, message?: string) => asserts expression`\n\nAssert that the given `expression` is truthy, otherwise the assertion fails.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert', () => {\n  assert('foo' !== 'bar', 'foo should not be equal to bar')\n})\n```\n\n## fail [​](#fail)\n\n*   **Type:**\n    *   `(message?: string) => never`\n    *   `<T>(actual: T, expected: T, message?: string, operator?: string) => never`\n\nForce an assertion failure.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.fail', () => {\n  assert.fail('error message on failure')\n  assert.fail('foo', 'bar', 'foo is not bar', '===')\n})\n```\n\n## isOk [​](#isok)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n*   **Alias** `ok`\n\nAssert that the given `value` is truthy.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.isOk', () => {\n  assert.isOk('foo', 'every truthy is ok')\n  assert.isOk(false, 'this will fail since false is not truthy')\n})\n```\n\n## isNotOk [​](#isnotok)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n*   **Alias** `notOk`\n\nAssert that the given `value` is falsy.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.isNotOk', () => {\n  assert.isNotOk('foo', 'this will fail, every truthy is not ok')\n  assert.isNotOk(false, 'this will pass since false is falsy')\n})\n```\n\n## equal [​](#equal)\n\n*   **Type:** `<T>(actual: T, expected: T, message?: string) => void`\n\nAsserts non-strict equality (==) of `actual` and `expected`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.equal', () => {\n  assert.equal(Math.sqrt(4), '2')\n})\n```\n\n## notEqual [​](#notequal)\n\n*   **Type:** `<T>(actual: T, expected: T, message?: string) => void`\n\nAsserts non-strict inequality (!=) of `actual` and `expected`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.equal', () => {\n  assert.notEqual(Math.sqrt(4), 3)\n})\n```\n\n## strictEqual [​](#strictequal)\n\n*   **Type:** `<T>(actual: T, expected: T, message?: string) => void`\n\nAsserts strict equality (===) of `actual` and `expected`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.strictEqual', () => {\n  assert.strictEqual(Math.sqrt(4), 2)\n})\n```\n\n## deepEqual [​](#deepequal)\n\n*   **Type:** `<T>(actual: T, expected: T, message?: string) => void`\n\nAsserts that `actual` is deeply equal to `expected`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.deepEqual', () => {\n  assert.deepEqual({ color: 'green' }, { color: 'green' })\n})\n```\n\n## notDeepEqual [​](#notdeepequal)\n\n*   **Type:** `<T>(actual: T, expected: T, message?: string) => void`\n\nAssert that `actual` is not deeply equal to `expected`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.notDeepEqual', () => {\n  assert.notDeepEqual({ color: 'green' }, { color: 'red' })\n})\n```\n\n## isAbove [​](#isabove)\n\n*   **Type:** `(valueToCheck: number, valueToBeAbove: number, message?: string) => void`\n\nAssert that `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.isAbove', () => {\n  assert.isAbove(5, 2, '5 is strictly greater than 2')\n})\n```\n\n## isAtLeast [​](#isatleast)\n\n*   **Type:** `(valueToCheck: number, valueToBeAtLeast: number, message?: string) => void`\n\nAssert that `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.isAtLeast', () => {\n  assert.isAtLeast(5, 2, '5 is greater or equal to 2')\n  assert.isAtLeast(3, 3, '3 is greater or equal to 3')\n})\n```\n\n## isBelow [​](#isbelow)\n\n*   **Type:** `(valueToCheck: number, valueToBeBelow: number, message?: string) => void`\n\nAsserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.isBelow', () => {\n  assert.isBelow(3, 6, '3 is strictly less than 6')\n})\n```\n\n## isAtMost [​](#isatmost)\n\n*   **Type:** `(valueToCheck: number, valueToBeAtMost: number, message?: string) => void`\n\nAsserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.isAtMost', () => {\n  assert.isAtMost(3, 6, '3 is less than or equal to 6')\n  assert.isAtMost(4, 4, '4 is less than or equal to 4')\n})\n```\n\n## isTrue [​](#istrue)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is true.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst testPassed = true\n\ntest('assert.isTrue', () => {\n  assert.isTrue(testPassed)\n})\n```\n\n## isNotTrue [​](#isnottrue)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is not true.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst testPassed = 'ok'\n\ntest('assert.isNotTrue', () => {\n  assert.isNotTrue(testPassed)\n})\n```\n\n## isFalse [​](#isfalse)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is false.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst testPassed = false\n\ntest('assert.isFalse', () => {\n  assert.isFalse(testPassed)\n})\n```\n\n## isNotFalse [​](#isnotfalse)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is not false.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst testPassed = 'no'\n\ntest('assert.isNotFalse', () => {\n  assert.isNotFalse(testPassed)\n})\n```\n\n## isNull [​](#isnull)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is null.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst error = null\n\ntest('assert.isNull', () => {\n  assert.isNull(error, 'error is null')\n})\n```\n\n## isNotNull [​](#isnotnull)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is not null.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst error = { message: 'error was occured' }\n\ntest('assert.isNotNull', () => {\n  assert.isNotNull(error, 'error is not null but object')\n})\n```\n\n## isNaN [​](#isnan)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is NaN.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst calculation = 1 * 'viitest'\n\ntest('assert.isNaN', () => {\n  assert.isNaN(calculation, '1 * \"vitest\" is NaN')\n})\n```\n\n## isNotNaN [​](#isnotnan)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is not NaN.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst calculation = 1 * 2\n\ntest('assert.isNotNaN', () => {\n  assert.isNotNaN(calculation, '1 * 2 is Not NaN but 2')\n})\n```\n\n## exists [​](#exists)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is neither null nor undefined.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst name = 'foo'\n\ntest('assert.exists', () => {\n  assert.exists(name, 'foo is neither null nor undefined')\n})\n```\n\n## notExists [​](#notexists)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is either null nor undefined.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst foo = null\nconst bar = undefined\n\ntest('assert.notExists', () => {\n  assert.notExists(foo, 'foo is null so not exist')\n  assert.notExists(bar, 'bar is undefined so not exist')\n})\n```\n\n## isUndefined [​](#isundefined)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is undefined.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst name = undefined\n\ntest('assert.isUndefined', () => {\n  assert.isUndefined(name, 'name is undefined')\n})\n```\n\n## isDefined [​](#isdefined)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is not undefined.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst name = 'foo'\n\ntest('assert.isDefined', () => {\n  assert.isDefined(name, 'name is not undefined')\n})\n```\n\n## isFunction [​](#isfunction)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n*   **Alias:** `isCallable` Asserts that `value` is a function.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nfunction name() { return 'foo' };\n\ntest('assert.isFunction', () => {\n  assert.isFunction(name, 'name is function')\n})\n```\n\n## isNotFunction [​](#isnotfunction)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n*   **Alias:** `isNotCallable`\n\nAsserts that `value` is not a function.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst name = 'foo'\n\ntest('assert.isNotFunction', () => {\n  assert.isNotFunction(name, 'name is not function but string')\n})\n```\n\n## isObject [​](#isobject)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is an object of type Object (as revealed by Object.prototype.toString). The assertion does not match subclassed objects.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst someThing = { color: 'red', shape: 'circle' }\n\ntest('assert.isObject', () => {\n  assert.isObject(someThing, 'someThing is object')\n})\n```\n\n## isNotObject [​](#isnotobject)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is not an object of type Object (as revealed by Object.prototype.toString). The assertion does not match subclassed objects.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst someThing = 'redCircle'\n\ntest('assert.isNotObject', () => {\n  assert.isNotObject(someThing, 'someThing is not object but string')\n})\n```\n\n## isArray [​](#isarray)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is an array.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst color = ['red', 'green', 'yellow']\n\ntest('assert.isArray', () => {\n  assert.isArray(color, 'color is array')\n})\n```\n\n## isNotArray [​](#isnotarray)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is not an array.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst color = 'red'\n\ntest('assert.isNotArray', () => {\n  assert.isNotArray(color, 'color is not array but string')\n})\n```\n\n## isString [​](#isstring)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is a string.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst color = 'red'\n\ntest('assert.isString', () => {\n  assert.isString(color, 'color is string')\n})\n```\n\n## isNotString [​](#isnotstring)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is not a string.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst color = ['red', 'green', 'yellow']\n\ntest('assert.isNotString', () => {\n  assert.isNotString(color, 'color is not string but array')\n})\n```\n\n## isNumber [​](#isnumber)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is a number.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst colors = 3\n\ntest('assert.isNumber', () => {\n  assert.isNumber(colors, 'colors is number')\n})\n```\n\n## isNotNumber [​](#isnotnumber)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is not a number.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst colors = '3 colors'\n\ntest('assert.isNotNumber', () => {\n  assert.isNotNumber(colors, 'colors is not number but strings')\n})\n```\n\n## isFinite [​](#isfinite)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is a finite number (not NaN, Infinity).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst colors = 3\n\ntest('assert.isFinite', () => {\n  assert.isFinite(colors, 'colors is number not NaN or Infinity')\n})\n```\n\n## isBoolean [​](#isboolean)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is a boolean.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst isReady = true\n\ntest('assert.isBoolean', () => {\n  assert.isBoolean(isReady, 'isReady is a boolean')\n})\n```\n\n## isNotBoolean [​](#isnotboolean)\n\n*   **Type:** `<T>(value: T, message?: string) => void`\n\nAsserts that `value` is not a boolean.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst isReady = 'sure'\n\ntest('assert.isBoolean', () => {\n  assert.isBoolean(isReady, 'isReady is not a boolean but string')\n})\n```\n\n## typeOf [​](#typeof)\n\n*   **Type:** `<T>(value: T, name: string, message?: string) => void`\n\nAsserts that `value`’s type is `name`, as determined by Object.prototype.toString.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.typeOf', () => {\n  assert.typeOf({ color: 'red' }, 'object', 'we have an object')\n  assert.typeOf(['red', 'green'], 'array', 'we have an array')\n  assert.typeOf('red', 'string', 'we have a string')\n  assert.typeOf(/red/, 'regexp', 'we have a regular expression')\n  assert.typeOf(null, 'null', 'we have a null')\n  assert.typeOf(undefined, 'undefined', 'we have an undefined')\n})\n```\n\n## notTypeOf [​](#nottypeof)\n\n*   **Type:** `<T>(value: T, name: string, message?: string) => void`\n\nAsserts that `value`’s type is not `name`, as determined by Object.prototype.toString.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.notTypeOf', () => {\n  assert.notTypeOf('red', 'number', '\"red\" is not a number')\n})\n```\n\n## instanceOf [​](#instanceof)\n\n*   **Type:** `<T>(value: T, constructor: Function, message?: string) => void`\n\nAsserts that `value` is an instance of `constructor`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nfunction Person(name) { this.name = name }\nconst foo = new Person('foo')\n\nclass Tea {\n  constructor(name) {\n    this.name = name\n  }\n}\nconst coffee = new Tea('coffee')\n\ntest('assert.instanceOf', () => {\n  assert.instanceOf(foo, Person, 'foo is an instance of Person')\n  assert.instanceOf(coffee, Tea, 'coffee is an instance of Tea')\n})\n```\n\n## notInstanceOf [​](#notinstanceof)\n\n*   **Type:** `<T>(value: T, constructor: Function, message?: string) => void`\n\nAsserts that `value` is not an instance of `constructor`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nfunction Person(name) { this.name = name }\nconst foo = new Person('foo')\n\nclass Tea {\n  constructor(name) {\n    this.name = name\n  }\n}\nconst coffee = new Tea('coffee')\n\ntest('assert.instanceOf', () => {\n  assert.instanceOf(foo, Tea, 'foo is not an instance of Tea')\n})\n```\n\n## include [​](#include)\n\n*   **Type:**\n    *   `(haystack: string, needle: string, message?: string) => void`\n    *   `<T>(haystack: readonly T[] | ReadonlySet<T> | ReadonlyMap<any, T>, needle: T, message?: string) => void`\n    *   `<T extends object>(haystack: WeakSet<T>, needle: T, message?: string) => void`\n    *   `<T>(haystack: T, needle: Partial<T>, message?: string) => void`\n\nAsserts that `haystack` includes `needle`. Can be used to assert the inclusion of a value in an array, a substring in a string, or a subset of properties in an object.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.include', () => {\n  assert.include([1, 2, 3], 2, 'array contains value')\n  assert.include('foobar', 'foo', 'string contains substring')\n  assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property')\n})\n```\n\n## notInclude [​](#notinclude)\n\n*   **Type:**\n    *   `(haystack: string, needle: string, message?: string) => void`\n    *   `<T>(haystack: readonly T[] | ReadonlySet<T> | ReadonlyMap<any, T>, needle: T, message?: string) => void`\n    *   `<T extends object>(haystack: WeakSet<T>, needle: T, message?: string) => void`\n    *   `<T>(haystack: T, needle: Partial<T>, message?: string) => void`\n\nAsserts that `haystack` does not include `needle`. It can be used to assert the absence of a value in an array, a substring in a string, or a subset of properties in an object.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.notInclude', () => {\n  assert.notInclude([1, 2, 3], 4, 'array doesn\\'t contain 4')\n  assert.notInclude('foobar', 'baz', 'foobar doesn\\'t contain baz')\n  assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn\\'t contain property')\n})\n```\n\n## deepInclude [​](#deepinclude)\n\n*   **Type:**\n*   `(haystack: string, needle: string, message?: string) => void`\n*   `<T>(haystack: readonly T[] | ReadonlySet<T> | ReadonlyMap<any, T>, needle: T, message?: string) => void`\n*   `<T>(haystack: T, needle: T extends WeakSet<any> ? never : Partial<T>, message?: string) => void`\n\nAsserts that `haystack` includes `needle`. Can be used to assert the inclusion of a value in an array or a subset of properties in an object. Deep equality is used.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst obj1 = { a: 1 }\nconst obj2 = { b: 2 }\n\ntest('assert.deepInclude', () => {\n  assert.deepInclude([obj1, obj2], { a: 1 })\n  assert.deepInclude({ foo: obj1, bar: obj2 }, { foo: { a: 1 } })\n})\n```\n\n## notDeepInclude [​](#notdeepinclude)\n\n*   **Type:**\n    *   `(haystack: string, needle: string, message?: string) => void`\n    *   `<T>(haystack: readonly T[] | ReadonlySet<T> | ReadonlyMap<any, T>, needle: T, message?: string) => void`\n    *   `<T>(haystack: T, needle: T extends WeakSet<any> ? never : Partial<T>, message?: string) => void`\n\nAsserts that `haystack` does not include `needle`. It can be used to assert the absence of a value in an array or a subset of properties in an object. Deep equality is used.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst obj1 = { a: 1 }\nconst obj2 = { b: 2 }\n\ntest('assert.notDeepInclude', () => {\n  assert.notDeepInclude([obj1, obj2], { a: 10 })\n  assert.notDeepInclude({ foo: obj1, bar: obj2 }, { foo: { a: 10 } })\n})\n```\n\n## nestedInclude [​](#nestedinclude)\n\n*   **Type:** `(haystack: any, needle: any, message?: string) => void`\n\nAsserts that `haystack` includes `needle`. Can be used to assert the inclusion of a subset of properties in an object. Enables the use of dot- and bracket-notation for referencing nested properties. ‘\\[\\]’ and ‘.’ in property names can be escaped using double backslashes.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.nestedInclude', () => {\n  assert.nestedInclude({ '.a': { b: 'x' } }, { '\\\\.a.[b]': 'x' })\n  assert.nestedInclude({ a: { '[b]': 'x' } }, { 'a.\\\\[b\\\\]': 'x' })\n})\n```\n\n## notNestedInclude [​](#notnestedinclude)\n\n*   **Type:** `(haystack: any, needle: any, message?: string) => void`\n\nAsserts that `haystack` does not include `needle`. Can be used to assert the inclusion of a subset of properties in an object. Enables the use of dot- and bracket-notation for referencing nested properties. ‘\\[\\]’ and ‘.’ in property names can be escaped using double backslashes.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.nestedInclude', () => {\n  assert.notNestedInclude({ '.a': { b: 'x' } }, { '\\\\.a.b': 'y' })\n  assert.notNestedInclude({ a: { '[b]': 'x' } }, { 'a.\\\\[b\\\\]': 'y' })\n})\n```\n\n## deepNestedInclude [​](#deepnestedinclude)\n\n*   **Type:** `(haystack: any, needle: any, message?: string) => void`\n\nAsserts that `haystack` includes `needle`. Can be used to assert the inclusion of a subset of properties in an object while checking for deep equality. Enables the use of dot- and bracket-notation for referencing nested properties. ‘\\[\\]’ and ‘.’ in property names can be escaped using double backslashes.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.deepNestedInclude', () => {\n  assert.deepNestedInclude({ a: { b: [{ x: 1 }] } }, { 'a.b[0]': { x: 1 } })\n  assert.deepNestedInclude({ '.a': { '[b]': { x: 1 } } }, { '\\\\.a.\\\\[b\\\\]': { x: 1 } })\n})\n```\n\n## notDeepNestedInclude [​](#notdeepnestedinclude)\n\n*   **Type:** `(haystack: any, needle: any, message?: string) => void`\n\nAsserts that `haystack` not includes `needle`. Can be used to assert the absence of a subset of properties in an object while checking for deep equality. Enables the use of dot- and bracket-notation for referencing nested properties. ‘\\[\\]’ and ‘.’ in property names can be escaped using double backslashes.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.notDeepNestedInclude', () => {\n  assert.notDeepNestedInclude({ a: { b: [{ x: 1 }] } }, { 'a.b[0]': { y: 1 } })\n  assert.notDeepNestedInclude({ '.a': { '[b]': { x: 1 } } }, { '\\\\.a.\\\\[b\\\\]': { y: 2 } })\n})\n```\n\n## ownInclude [​](#owninclude)\n\n*   **Type:** `(haystack: any, needle: any, message?: string) => void`\n\nAsserts that `haystack` includes `needle`. Can be used to assert the inclusion of a subset of properties in an object while ignoring inherited properties.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.ownInclude', () => {\n  assert.ownInclude({ a: 1 }, { a: 1 })\n})\n```\n\n## notOwnInclude [​](#notowninclude)\n\n*   **Type:** `(haystack: any, needle: any, message?: string) => void`\n\nAsserts that `haystack` includes `needle`. Can be used to assert the absence of a subset of properties in an object while ignoring inherited properties.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\nconst obj1 = {\n  b: 2\n}\n\nconst obj2 = object.create(obj1)\nobj2.a = 1\n\ntest('assert.notOwnInclude', () => {\n  assert.notOwnInclude(obj2, { b: 2 })\n})\n```\n\n## deepOwnInclude [​](#deepowninclude)\n\n*   **Type:** `(haystack: any, needle: any, message?: string) => void`\n\nAsserts that `haystack` includes `needle`. Can be used to assert the inclusion of a subset of properties in an object while ignoring inherited properties and checking for deep equality.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.deepOwnInclude', () => {\n  assert.deepOwnInclude({ a: { b: 2 } }, { a: { b: 2 } })\n})\n```\n\n## notDeepOwnInclude [​](#notdeepowninclude)\n\n*   **Type:** `(haystack: any, needle: any, message?: string) => void`\n\nAsserts that `haystack` not includes `needle`. Can be used to assert the absence of a subset of properties in an object while ignoring inherited properties and checking for deep equality.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.notDeepOwnInclude', () => {\n  assert.notDeepOwnInclude({ a: { b: 2 } }, { a: { c: 3 } })\n})\n```\n\n## match [​](#match)\n\n*   **Type:** `(value: string, regexp: RegExp, message?: string) => void`\n\nAsserts that `value` matches the regular expression `regexp`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.match', () => {\n  assert.match('foobar', /^foo/, 'regexp matches')\n})\n```\n\n## notMatch [​](#notmatch)\n\n*   **Type:** `(value: string, regexp: RegExp, message?: string) => void`\n\nAsserts that `value` does not matches the regular expression `regexp`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.notMatch', () => {\n  assert.notMatch('foobar', /^foo/, 'regexp does not match')\n})\n```\n\n## property [​](#property)\n\n*   **Type:** `<T>(object: T, property: string, message?: string) => void`\n\nAsserts that `object` has a direct or inherited property named by `property`\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.property', () => {\n  assert.property({ tea: { green: 'matcha' } }, 'tea')\n  assert.property({ tea: { green: 'matcha' } }, 'toString')\n})\n```\n\n## notProperty [​](#notproperty)\n\n*   **Type:** `<T>(object: T, property: string, message?: string) => void`\n\nAsserts that `object` does not have a direct or inherited property named by `property`\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.notProperty', () => {\n  assert.notProperty({ tea: { green: 'matcha' } }, 'coffee')\n})\n```\n\n## propertyVal [​](#propertyval)\n\n*   **Type:** `<T, V>(object: T, property: string, value: V, message?: string) => void`\n\nAsserts that `object` has a direct or inherited property named by `property` with a value given by `value`. Uses a strict equality check (===).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.notPropertyVal', () => {\n  assert.propertyVal({ tea: 'is good' }, 'tea', 'is good')\n})\n```\n\n## notPropertyVal [​](#notpropertyval)\n\n*   **Type:** `<T, V>(object: T, property: string, value: V, message?: string) => void`\n\nAsserts that `object` does not have a direct or inherited property named by `property` with a value given by `value`. Uses a strict equality check (===).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.notPropertyVal', () => {\n  assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad')\n  assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good')\n})\n```\n\n## deepPropertyVal [​](#deeppropertyval)\n\n*   **Type:** `<T, V>(object: T, property: string, value: V, message?: string) => void`\n\nAsserts that `object` has a direct or inherited property named by `property` with a value given by `value`. Uses a deep equality check.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.deepPropertyVal', () => {\n  assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' })\n})\n```\n\n## notDeepPropertyVal [​](#notdeeppropertyval)\n\n*   **Type:** `<T, V>(object: T, property: string, value: V, message?: string) => void`\n\nAsserts that `object` does not have a direct or inherited property named by `property` with a value given by `value`. Uses a deep equality check.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.deepPropertyVal', () => {\n  assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' })\n  assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' })\n  assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' })\n})\n```\n\n## nestedProperty [​](#nestedproperty)\n\n*   **Type:** `<T>(object: T, property: string, message?: string) => void`\n\nAsserts that `object` has a direct or inherited property named by `property`, which can be a string using dot- and bracket-notation for nested reference.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.deepPropertyVal', () => {\n  assert.nestedProperty({ tea: { green: 'matcha' } }, 'tea.green')\n})\n```\n\n## notNestedProperty [​](#notnestedproperty)\n\n*   **Type:** `<T>(object: T, property: string, message?: string) => void`\n\nAsserts that `object` does not have a direct or inherited property named by `property`, which can be a string using dot- and bracket-notation for nested reference.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.deepPropertyVal', () => {\n  assert.notNestedProperty({ tea: { green: 'matcha' } }, 'tea.oolong')\n})\n```\n\n## nestedPropertyVal [​](#nestedpropertyval)\n\n*   **Type:** `<T>(object: T, property: string, value: any, message?: string) => void`\n\nAsserts that `object` has a property named by `property` with value given by `value`. `property` can use dot- and bracket-notation for nested reference. Uses a strict equality check (===).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.nestedPropertyVal', () => {\n  assert.nestedPropertyVal({ tea: { green: 'matcha' } }, 'tea.green', 'matcha')\n})\n```\n\n## notNestedPropertyVal [​](#notnestedpropertyval)\n\n*   **Type:** `<T>(object: T, property: string, value: any, message?: string) => void`\n\nAsserts that `object` does not have a property named by `property` with value given by `value`. `property` can use dot- and bracket-notation for nested reference. Uses a strict equality check (===).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.notNestedPropertyVal', () => {\n  assert.notNestedPropertyVal({ tea: { green: 'matcha' } }, 'tea.green', 'konacha')\n  assert.notNestedPropertyVal({ tea: { green: 'matcha' } }, 'coffee.green', 'matcha')\n})\n```\n\n## deepNestedPropertyVal [​](#deepnestedpropertyval)\n\n*   **Type:** `<T>(object: T, property: string, value: any, message?: string) => void`\n\nAsserts that `object` has a property named by `property` with a value given by `value`. `property` can use dot- and bracket-notation for nested reference. Uses a deep equality check (===).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.notNestedPropertyVal', () => {\n  assert.notNestedPropertyVal({ tea: { green: 'matcha' } }, 'tea.green', 'konacha')\n  assert.notNestedPropertyVal({ tea: { green: 'matcha' } }, 'coffee.green', 'matcha')\n})\n```\n\n## notDeepNestedPropertyVal [​](#notdeepnestedpropertyval)\n\n*   **Type:** `<T>(object: T, property: string, value: any, message?: string) => void`\n\nAsserts that `object` does not have a property named by `property` with value given by `value`. `property` can use dot- and bracket-notation for nested reference. Uses a deep equality check.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.notDeepNestedPropertyVal', () => {\n  assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' })\n  assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' })\n  assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' })\n})\n```\n\n## lengthOf [​](#lengthof)\n\n*   **Type:** `<T extends { readonly length?: number | undefined } | { readonly size?: number | undefined }>(object: T, length: number, message?: string) => void`\n\nAsserts that `object` has a `length` or `size` with the expected value.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.lengthOf', () => {\n  assert.lengthOf([1, 2, 3], 3, 'array has length of 3')\n  assert.lengthOf('foobar', 6, 'string has length of 6')\n  assert.lengthOf(new Set([1, 2, 3]), 3, 'set has size of 3')\n  assert.lengthOf(new Map([['a', 1], ['b', 2], ['c', 3]]), 3, 'map has size of 3')\n})\n```\n\n## hasAnyKeys [​](#hasanykeys)\n\n*   **Type:** `<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string) => void`\n\nAsserts that `object` has at least one of the `keys` provided. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.hasAnyKeys', () => {\n  assert.hasAnyKeys({ foo: 1, bar: 2, baz: 3 }, ['foo', 'iDontExist', 'baz'])\n  assert.hasAnyKeys({ foo: 1, bar: 2, baz: 3 }, { foo: 30, iDontExist: 99, baz: 1337 })\n  assert.hasAnyKeys(new Map([[{ foo: 1 }, 'bar'], ['key', 'value']]), [{ foo: 1 }, 'key'])\n  assert.hasAnyKeys(new Set([{ foo: 'bar' }, 'anotherKey']), [{ foo: 'bar' }, 'anotherKey'])\n})\n```\n\n## hasAllKeys [​](#hasallkeys)\n\n*   **Type:** `<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string) => void`\n\nAsserts that `object` has all and only all of the `keys` provided. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.hasAllKeys', () => {\n  assert.hasAllKeys({ foo: 1, bar: 2, baz: 3 }, ['foo', 'bar', 'baz'])\n  assert.hasAllKeys({ foo: 1, bar: 2, baz: 3 }, { foo: 30, bar: 99, baz: 1337 })\n  assert.hasAllKeys(new Map([[{ foo: 1 }, 'bar'], ['key', 'value']]), [{ foo: 1 }, 'key'])\n  assert.hasAllKeys(new Set([{ foo: 'bar' }, 'anotherKey'], [{ foo: 'bar' }, 'anotherKey']))\n})\n```\n\n## containsAllKeys [​](#containsallkeys)\n\n*   **Type:** `<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string) => void`\n\nAsserts that `object` has all of the `keys` provided but may have more keys not listed. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.containsAllKeys', () => {\n  assert.containsAllKeys({ foo: 1, bar: 2, baz: 3 }, ['foo', 'baz'])\n  assert.containsAllKeys({ foo: 1, bar: 2, baz: 3 }, ['foo', 'bar', 'baz'])\n  assert.containsAllKeys({ foo: 1, bar: 2, baz: 3 }, { foo: 30, baz: 1337 })\n  assert.containsAllKeys({ foo: 1, bar: 2, baz: 3 }, { foo: 30, bar: 99, baz: 1337 })\n  assert.containsAllKeys(new Map([[{ foo: 1 }, 'bar'], ['key', 'value']]), [{ foo: 1 }])\n  assert.containsAllKeys(new Map([[{ foo: 1 }, 'bar'], ['key', 'value']]), [{ foo: 1 }, 'key'])\n  assert.containsAllKeys(new Set([{ foo: 'bar' }, 'anotherKey'], [{ foo: 'bar' }]))\n  assert.containsAllKeys(new Set([{ foo: 'bar' }, 'anotherKey'], [{ foo: 'bar' }, 'anotherKey']))\n})\n```\n\n## doesNotHaveAnyKeys [​](#doesnothaveanykeys)\n\n*   **Type:** `<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string) => void`\n\nAsserts that `object` has none of the `keys` provided. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.doesNotHaveAnyKeys', () => {\n  assert.doesNotHaveAnyKeys({ foo: 1, bar: 2, baz: 3 }, ['one', 'two', 'example'])\n  assert.doesNotHaveAnyKeys({ foo: 1, bar: 2, baz: 3 }, { one: 1, two: 2, example: 'foo' })\n  assert.doesNotHaveAnyKeys(new Map([[{ foo: 1 }, 'bar'], ['key', 'value']]), [{ one: 'two' }, 'example'])\n  assert.doesNotHaveAnyKeys(new Set([{ foo: 'bar' }, 'anotherKey'], [{ one: 'two' }, 'example']))\n})\n```\n\n## doesNotHaveAllKeys [​](#doesnothaveallkeys)\n\n*   **Type:** `<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string) => void`\n\nAsserts that `object` does not have at least one of the `keys` provided. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.hasAnyKeys', () => {\n  assert.doesNotHaveAnyKeys({ foo: 1, bar: 2, baz: 3 }, ['one', 'two', 'example'])\n  assert.doesNotHaveAnyKeys({ foo: 1, bar: 2, baz: 3 }, { one: 1, two: 2, example: 'foo' })\n  assert.doesNotHaveAnyKeys(new Map([[{ foo: 1 }, 'bar'], ['key', 'value']]), [{ one: 'two' }, 'example'])\n  assert.doesNotHaveAnyKeys(new Set([{ foo: 'bar' }, 'anotherKey']), [{ one: 'two' }, 'example'])\n})\n```\n\n## hasAnyDeepKeys [​](#hasanydeepkeys)\n\n*   **Type:** `<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string) => void`\n\nAsserts that `object` has at least one of the `keys` provided. Since Sets and Maps can have objects as keys you can use this assertion to perform a deep comparison. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.hasAnyDeepKeys', () => {\n  assert.hasAnyDeepKeys(new Map([[{ one: 'one' }, 'valueOne'], [1, 2]]), { one: 'one' })\n  assert.hasAnyDeepKeys(new Map([[{ one: 'one' }, 'valueOne'], [1, 2]]), [{ one: 'one' }, { two: 'two' }])\n  assert.hasAnyDeepKeys(new Map([[{ one: 'one' }, 'valueOne'], [{ two: 'two' }, 'valueTwo']]), [{ one: 'one' }, { two: 'two' }])\n  assert.hasAnyDeepKeys(new Set([{ one: 'one' }, { two: 'two' }]), { one: 'one' })\n  assert.hasAnyDeepKeys(new Set([{ one: 'one' }, { two: 'two' }]), [{ one: 'one' }, { three: 'three' }])\n  assert.hasAnyDeepKeys(new Set([{ one: 'one' }, { two: 'two' }]), [{ one: 'one' }, { two: 'two' }])\n})\n```\n\n## hasAllDeepKeys [​](#hasalldeepkeys)\n\n*   **Type:** `<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string) => void`\n\nAsserts that `object` has all and only all of the `keys` provided. Since Sets and Maps can have objects as keys you can use this assertion to perform a deep comparison. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.hasAnyDeepKeys', () => {\n  assert.hasAllDeepKeys(new Map([[{ one: 'one' }, 'valueOne']]), { one: 'one' })\n  assert.hasAllDeepKeys(new Map([[{ one: 'one' }, 'valueOne'], [{ two: 'two' }, 'valueTwo']]), [{ one: 'one' }, { two: 'two' }])\n  assert.hasAllDeepKeys(new Set([{ one: 'one' }]), { one: 'one' })\n  assert.hasAllDeepKeys(new Set([{ one: 'one' }, { two: 'two' }]), [{ one: 'one' }, { two: 'two' }])\n})\n```\n\n## containsAllDeepKeys [​](#containsalldeepkeys)\n\n*   **Type:** `<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string) => void`\n\nAsserts that `object` contains all of the `keys` provided. Since Sets and Maps can have objects as keys you can use this assertion to perform a deep comparison. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.containsAllDeepKeys', () => {\n  assert.containsAllDeepKeys(new Map([[{ one: 'one' }, 'valueOne'], [1, 2]]), { one: 'one' })\n  assert.containsAllDeepKeys(new Map([[{ one: 'one' }, 'valueOne'], [{ two: 'two' }, 'valueTwo']]), [{ one: 'one' }, { two: 'two' }])\n  assert.containsAllDeepKeys(new Set([{ one: 'one' }, { two: 'two' }]), { one: 'one' })\n  assert.containsAllDeepKeys(new Set([{ one: 'one' }, { two: 'two' }]), [{ one: 'one' }, { two: 'two' }])\n})\n```\n\n## doesNotHaveAnyDeepKeys [​](#doesnothaveanydeepkeys)\n\n*   **Type:** `<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string) => void`\n\nAsserts that `object` has none of the `keys` provided. Since Sets and Maps can have objects as keys you can use this assertion to perform a deep comparison. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.doesNotHaveAnyDeepKeys', () => {\n  assert.doesNotHaveAnyDeepKeys(new Map([[{ one: 'one' }, 'valueOne'], [1, 2]]), { thisDoesNot: 'exist' })\n  assert.doesNotHaveAnyDeepKeys(new Map([[{ one: 'one' }, 'valueOne'], [{ two: 'two' }, 'valueTwo']]), [{ twenty: 'twenty' }, { fifty: 'fifty' }])\n  assert.doesNotHaveAnyDeepKeys(new Set([{ one: 'one' }, { two: 'two' }]), { twenty: 'twenty' })\n  assert.doesNotHaveAnyDeepKeys(new Set([{ one: 'one' }, { two: 'two' }]), [{ twenty: 'twenty' }, { fifty: 'fifty' }])\n})\n```\n\n## doesNotHaveAllDeepKeys [​](#doesnothavealldeepkeys)\n\n*   **Type:** `<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string) => void`\n\nAsserts that `object` does not have at least one of the `keys` provided. Since Sets and Maps can have objects as keys you can use this assertion to perform a deep comparison. You can also provide a single object instead of a keys array and its keys will be used as the expected set of keys.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.doesNotHaveAllDeepKeys', () => {\n  assert.doesNotHaveAllDeepKeys(new Map([[{ one: 'one' }, 'valueOne'], [1, 2]]), { thisDoesNot: 'exist' })\n  assert.doesNotHaveAllDeepKeys(new Map([[{ one: 'one' }, 'valueOne'], [{ two: 'two' }, 'valueTwo']]), [{ twenty: 'twenty' }, { one: 'one' }])\n  assert.doesNotHaveAllDeepKeys(new Set([{ one: 'one' }, { two: 'two' }]), { twenty: 'twenty' })\n  assert.doesNotHaveAllDeepKeys(new Set([{ one: 'one' }, { two: 'two' }]), [{ one: 'one' }, { fifty: 'fifty' }])\n})\n```\n\n## throws [​](#throws)\n\n*   **Type:**\n    *   `(fn: () => void, errMsgMatcher?: RegExp | string, ignored?: any, message?: string) => void`\n    *   `(fn: () => void, errorLike?: ErrorConstructor | Error | null, errMsgMatcher?: RegExp | string | null, message?: string) => void`\n*   **Alias:**\n    *   `throw`\n    *   `Throw`\n\nIf `errorLike` is an Error constructor, asserts that `fn` will throw an error that is an instance of `errorLike`. If errorLike is an Error instance, asserts that the error thrown is the same instance as `errorLike`. If `errMsgMatcher` is provided, it also asserts that the error thrown will have a message matching `errMsgMatcher`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.throws', () => {\n  assert.throws(fn, 'Error thrown must have this msg')\n  assert.throws(fn, /Error thrown must have a msg that matches this/)\n  assert.throws(fn, ReferenceError)\n  assert.throws(fn, errorInstance)\n  assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg')\n  assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg')\n  assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/)\n  assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/)\n})\n```\n\n## doesNotThrow [​](#doesnotthrow)\n\n*   **Type:** `(fn: () => void, errMsgMatcher?: RegExp | string, ignored?: any, message?: string) => void`\n*   **Type:** `(fn: () => void, errorLike?: ErrorConstructor | Error | null, errMsgMatcher?: RegExp | string | null, message?: string) => void`\n\nIf `errorLike` is an Error constructor, asserts that `fn` will not throw an error that is an instance of `errorLike`. If errorLike is an Error instance, asserts that the error thrown is not the same instance as `errorLike`. If `errMsgMatcher` is provided, it also asserts that the error thrown will not have a message matching `errMsgMatcher`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.doesNotThrow', () => {\n  assert.doesNotThrow(fn, 'Any Error thrown must not have this message')\n  assert.doesNotThrow(fn, /Any Error thrown must not match this/)\n  assert.doesNotThrow(fn, Error)\n  assert.doesNotThrow(fn, errorInstance)\n  assert.doesNotThrow(fn, Error, 'Error must not have this message')\n  assert.doesNotThrow(fn, errorInstance, 'Error must not have this message')\n  assert.doesNotThrow(fn, Error, /Error must not match this/)\n  assert.doesNotThrow(fn, errorInstance, /Error must not match this/)\n})\n```\n\n## operator [​](#operator)\n\n*   **Type:** `(val1: OperatorComparable, operator: Operator, val2: OperatorComparable, message?: string) => void`\n\nCompare `val1` and `val2` using `operator`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.operator', () => {\n  assert.operator(1, '<', 2, 'everything is ok')\n})\n```\n\n## closeTo [​](#closeto)\n\n*   **Type:** `(actual: number, expected: number, delta: number, message?: string) => void`\n*   **Alias:** `approximately`\n\nAsserts that the `actual` is equal `expected`, to within a +/- `delta` range.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.closeTo', () => {\n  assert.closeTo(1.5, 1, 0.5, 'numbers are close')\n})\n```\n\n## sameMembers [​](#samemembers)\n\n*   **Type:** `<T>(set1: T[], set2: T[], message?: string) => void`\n\nAsserts that `set1` and `set2` have the same members in any order. Uses a strict equality check (===).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.sameMembers', () => {\n  assert.sameMembers([1, 2, 3], [2, 1, 3], 'same members')\n})\n```\n\n## notSameMembers [​](#notsamemembers)\n\n*   **Type:** `<T>(set1: T[], set2: T[], message?: string) => void`\n\nAsserts that `set1` and `set2` don't have the same members in any order. Uses a strict equality check (===).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.sameMembers', () => {\n  assert.notSameMembers([1, 2, 3], [5, 1, 3], 'not same members')\n})\n```\n\n## sameDeepMembers [​](#samedeepmembers)\n\n*   **Type:** `<T>(set1: T[], set2: T[], message?: string) => void`\n\nAsserts that `set1` and `set2` have the same members in any order. Uses a deep equality check.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.sameDeepMembers', () => {\n  assert.sameDeepMembers([{ a: 1 }, { b: 2 }, { c: 3 }], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members')\n})\n```\n\n## notSameDeepMembers [​](#notsamedeepmembers)\n\n*   **Type:** `<T>(set1: T[], set2: T[], message?: string) => void`\n\nAsserts that `set1` and `set2` don’t have the same members in any order. Uses a deep equality check.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.sameDeepMembers', () => {\n  assert.sameDeepMembers([{ a: 1 }, { b: 2 }, { c: 3 }], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members')\n})\n```\n\n## sameOrderedMembers [​](#sameorderedmembers)\n\n*   **Type:** `<T>(set1: T[], set2: T[], message?: string) => void`\n\nAsserts that `set1` and `set2` have the same members in the same order. Uses a strict equality check (===).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.sameOrderedMembers', () => {\n  assert.sameOrderedMembers([1, 2, 3], [1, 2, 3], 'same ordered members')\n})\n```\n\n## notSameOrderedMembers [​](#notsameorderedmembers)\n\n*   **Type:** `<T>(set1: T[], set2: T[], message?: string) => void`\n\nAsserts that `set1` and `set2` have the same members in the same order. Uses a strict equality check (===).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.notSameOrderedMembers', () => {\n  assert.notSameOrderedMembers([1, 2, 3], [2, 1, 3], 'not same ordered members')\n})\n```\n\n## sameDeepOrderedMembers [​](#samedeeporderedmembers)\n\n*   **Type:** `<T>(set1: T[], set2: T[], message?: string) => void`\n\nAsserts that `set1` and `set2` have the same members in the same order. Uses a deep equality check.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.sameDeepOrderedMembers', () => {\n  assert.sameDeepOrderedMembers([{ a: 1 }, { b: 2 }, { c: 3 }], [{ a: 1 }, { b: 2 }, { c: 3 }], 'same deep ordered members')\n})\n```\n\n## notSameDeepOrderedMembers [​](#notsamedeeporderedmembers)\n\n*   **Type:** `<T>(set1: T[], set2: T[], message?: string) => void`\n\nAsserts that `set1` and `set2` don’t have the same members in the same order. Uses a deep equality check.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.notSameDeepOrderedMembers', () => {\n  assert.notSameDeepOrderedMembers([{ a: 1 }, { b: 2 }, { c: 3 }], [{ a: 1 }, { b: 2 }, { z: 5 }], 'not same deep ordered members')\n  assert.notSameDeepOrderedMembers([{ a: 1 }, { b: 2 }, { c: 3 }], [{ b: 2 }, { a: 1 }, { c: 3 }], 'not same deep ordered members')\n})\n```\n\n## includeMembers [​](#includemembers)\n\n*   **Type:** `<T>(superset: T[], subset: T[], message?: string) => void`\n\nAsserts that `subset` is included in `superset` in any order. Uses a strict equality check (===). Duplicates are ignored.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.includeMembers', () => {\n  assert.includeMembers([1, 2, 3], [2, 1, 2], 'include members')\n})\n```\n\n## notIncludeMembers [​](#notincludemembers)\n\n*   **Type:** `<T>(superset: T[], subset: T[], message?: string) => void`\n\nAsserts that `subset` isn't included in `superset` in any order. Uses a strict equality check (===). Duplicates are ignored.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.notIncludeMembers', () => {\n  assert.notIncludeMembers([1, 2, 3], [5, 1], 'not include members')\n})\n```\n\n## includeDeepMembers [​](#includedeepmembers)\n\n*   **Type:** `<T>(superset: T[], subset: T[], message?: string) => void`\n\nAsserts that `subset` is included in `superset` in any order. Uses a deep equality check. Duplicates are ignored.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.includeDeepMembers', () => {\n  assert.includeDeepMembers([{ a: 1 }, { b: 2 }, { c: 3 }], [{ b: 2 }, { a: 1 }, { b: 2 }], 'include deep members')\n})\n```\n\n## notIncludeDeepMembers [​](#notincludedeepmembers)\n\n*   **Type:** `<T>(superset: T[], subset: T[], message?: string) => void`\n\nAsserts that `subset` isn’t included in `superset` in any order. Uses a deep equality check. Duplicates are ignored.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.notIncludeDeepMembers', () => {\n  assert.notIncludeDeepMembers([{ a: 1 }, { b: 2 }, { c: 3 }], [{ b: 2 }, { f: 5 }], 'not include deep members')\n})\n```\n\n## includeOrderedMembers [​](#includeorderedmembers)\n\n*   **Type:** `<T>(superset: T[], subset: T[], message?: string) => void`\n\nAsserts that `subset` is included in `superset` in the same order beginning with the first element in `superset`. Uses a strict equality check (===).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.includeOrderedMembers', () => {\n  assert.includeOrderedMembers([1, 2, 3], [1, 2], 'include ordered members')\n})\n```\n\n## notIncludeOrderedMembers [​](#notincludeorderedmembers)\n\n*   **Type:** `<T>(superset: T[], subset: T[], message?: string) => void`\n\nAsserts that `subset` isn't included in `superset` in the same order beginning with the first element in `superset`. Uses a strict equality check (===).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.notIncludeOrderedMembers', () => {\n  assert.notIncludeOrderedMembers([1, 2, 3], [2, 1], 'not include ordered members')\n  assert.notIncludeOrderedMembers([1, 2, 3], [2, 3], 'not include ordered members')\n})\n```\n\n## includeDeepOrderedMembers [​](#includedeeporderedmembers)\n\n*   **Type:** `<T>(superset: T[], subset: T[], message?: string) => void`\n\nAsserts that `subset` is included in `superset` in the same order beginning with the first element in `superset`. Uses a deep equality check.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.includeDeepOrderedMembers', () => {\n  assert.includeDeepOrderedMembers([{ a: 1 }, { b: 2 }, { c: 3 }], [{ a: 1 }, { b: 2 }], 'include deep ordered members')\n})\n```\n\n## notIncludeDeepOrderedMembers [​](#notincludedeeporderedmembers)\n\n*   **Type:** `<T>(superset: T[], subset: T[], message?: string) => void`\n\nAsserts that `subset` isn’t included in `superset` in the same order beginning with the first element in superset. Uses a deep equality check.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.includeDeepOrderedMembers', () => {\n  assert.notIncludeDeepOrderedMembers([{ a: 1 }, { b: 2 }, { c: 3 }], [{ a: 1 }, { f: 5 }], 'not include deep ordered members')\n  assert.notIncludeDeepOrderedMembers([{ a: 1 }, { b: 2 }, { c: 3 }], [{ b: 2 }, { a: 1 }], 'not include deep ordered members')\n  assert.notIncludeDeepOrderedMembers([{ a: 1 }, { b: 2 }, { c: 3 }], [{ b: 2 }, { c: 3 }], 'not include deep ordered members')\n})\n```\n\n## oneOf [​](#oneof)\n\n*   **Type:** `<T>(inList: T, list: T[], message?: string) => void`\n\nAsserts that non-object, non-array value `inList` appears in the flat array `list`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.oneOf', () => {\n  assert.oneOf(1, [2, 1], 'Not found in list')\n})\n```\n\n## changes [​](#changes)\n\n*   **Type:** `<T>(modifier: Function, object: T, property: string, message?: string) => void`\n\nAsserts that a `modifier` changes the `object` of a `property`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.changes', () => {\n  const obj = { val: 10 }\n  function fn() { obj.val = 22 };\n  assert.changes(fn, obj, 'val')\n})\n```\n\n## changesBy [​](#changesby)\n\n*   **Type:** `<T>(modifier: Function, object: T, property: string, change: number, message?: string) => void`\n\nAsserts that a `modifier` changes the `object` of a `property` by a `change`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.changesBy', () => {\n  const obj = { val: 10 }\n  function fn() { obj.val += 2 };\n  assert.changesBy(fn, obj, 'val', 2)\n})\n```\n\n## doesNotChange [​](#doesnotchange)\n\n*   **Type:** `<T>(modifier: Function, object: T, property: string, message?: string) => void`\n\nAsserts that a `modifier` does not changes the `object` of a `property`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.doesNotChange', () => {\n  const obj = { val: 10 }\n  function fn() { obj.val += 2 };\n  assert.doesNotChange(fn, obj, 'val', 2)\n})\n```\n\n## changesButNotBy [​](#changesbutnotby)\n\n*   **Type:** `<T>(modifier: Function, object: T, property: string, change:number, message?: string) => void`\n\nAsserts that a `modifier` does not change the `object` of a `property` or of a `modifier` return value by a `change`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.changesButNotBy', () => {\n  const obj = { val: 10 }\n  function fn() { obj.val += 10 };\n  assert.changesButNotBy(fn, obj, 'val', 5)\n})\n```\n\n## increases [​](#increases)\n\n*   **Type:** `<T>(modifier: Function, object: T, property: string, message?: string) => void`\n\nAsserts that a `modifier` increases a numeric `object`'s `property`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.increases', () => {\n  const obj = { val: 10 }\n  function fn() { obj.val = 13 };\n  assert.increases(fn, obj, 'val')\n})\n```\n\n## increasesBy [​](#increasesby)\n\n*   **Type:** `<T>(modifier: Function, object: T, property: string, change: number, message?: string) => void`\n\nAsserts that a `modifier` increases a numeric `object`'s `property` or a `modifier` return value by an `change`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.increases', () => {\n  const obj = { val: 10 }\n  function fn() { obj.val += 10 };\n  assert.increases(fn, obj, 'val', 10)\n})\n```\n\n## doesNotIncrease [​](#doesnotincrease)\n\n*   **Type:** `<T>(modifier: Function, object: T, property: string, message?: string) => void`\n\nAsserts that a `modifier` does not increases a numeric `object`'s `property`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.doesNotIncrease', () => {\n  const obj = { val: 10 }\n  function fn() { obj.val = 8 }\n  assert.doesNotIncrease(fn, obj, 'val')\n})\n```\n\n## increasesButNotBy [​](#increasesbutnotby)\n\n*   **Type:** `<T>(modifier: Function, object: T, property: string, change: number, message?: string) => void`\n\nAsserts that a `modifier` does not increases a numeric `object`'s `property` or a `modifier` return value by an `change`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.increasesButNotBy', () => {\n  const obj = { val: 10 }\n  function fn() { obj.val += 15 };\n  assert.increasesButNotBy(fn, obj, 'val', 10)\n})\n```\n\n## decreases [​](#decreases)\n\n*   **Type:** `<T>(modifier: Function, object: T, property: string, message?: string) => void`\n\nAsserts that a `modifier` decreases a numeric `object`'s `property`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.decreases', () => {\n  const obj = { val: 10 }\n  function fn() { obj.val = 5 };\n  assert.decreases(fn, obj, 'val')\n})\n```\n\n## decreasesBy [​](#decreasesby)\n\n*   **Type:** `<T>(modifier: Function, object: T, property: string, change: number, message?: string) => void`\n\nAsserts that a `modifier` decreases a numeric `object`'s `property` or a `modifier` return value by a `change`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.decreasesBy', () => {\n  const obj = { val: 10 }\n  function fn() { obj.val -= 5 };\n  assert.decreasesBy(fn, obj, 'val', 5)\n})\n```\n\n## doesNotDecrease [​](#doesnotdecrease)\n\n*   **Type:** `<T>(modifier: Function, object: T, property: string, message?: string) => void`\n\nAsserts that a `modifier` dose not decrease a numeric `object`'s `property`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.doesNotDecrease', () => {\n  const obj = { val: 10 }\n  function fn() { obj.val = 15 }\n  assert.doesNotDecrease(fn, obj, 'val')\n})\n```\n\n## doesNotDecreaseBy [​](#doesnotdecreaseby)\n\n*   **Type:** `<T>(modifier: Function, object: T, property: string, change: number, message?: string) => void`\n\nAsserts that a `modifier` does not decrease a numeric `object`'s `property` or a `modifier` return value by a `change`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.doesNotDecreaseBy', () => {\n  const obj = { val: 10 }\n  function fn() { obj.val = 5 };\n  assert.doesNotDecreaseBy(fn, obj, 'val', 1)\n})\n```\n\n## decreasesButNotBy [​](#decreasesbutnotby)\n\n*   **Type:** `<T>(modifier: Function, object: T, property: string, change: number, message?: string) => void`\n\nAsserts that a `modifier` does not decrease a numeric `object`'s `property` or a `modifier` return value by a `change`.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.decreasesButNotBy', () => {\n  const obj = { val: 10 }\n  function fn() { obj.val = 5 };\n  assert.decreasesButNotBy(fn, obj, 'val', 1)\n})\n```\n\n## ifError [​](#iferror)\n\n*   **Type:** `<T>(object: T, message?: string) => void`\n\nAsserts if `object` is not a false value, and throws if it is a true value. This is added to allow for chai to be a drop-in replacement for Node’s assert class.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.ifError', () => {\n  const err = new Error('I am a custom error')\n  assert.ifError(err) // Rethrows err!\n})\n```\n\n## isExtensible [​](#isextensible)\n\n*   **Type:** `<T>(object: T, message?: string) => void`\n*   **Alias:** `extensible`\n\nAsserts that `object` is extensible (can have new properties added to it).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.isExtensible', () => {\n  assert.isExtensible({})\n})\n```\n\n## isNotExtensible [​](#isnotextensible)\n\n*   **Type:** `<T>(object: T, message?: string) => void`\n*   **Alias:** `notExtensible`\n\nAsserts that `object` is not extensible (can not have new properties added to it).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.isNotExtensible', () => {\n  const nonExtensibleObject = Object.preventExtensions({})\n  const sealedObject = Object.seal({})\n  const frozenObject = Object.freeze({})\n\n  assert.isNotExtensible(nonExtensibleObject)\n  assert.isNotExtensible(sealedObject)\n  assert.isNotExtensible(frozenObject)\n})\n```\n\n## isSealed [​](#issealed)\n\n*   **Type:** `<T>(object: T, message?: string) => void`\n*   **Alias:** `sealed`\n\nAsserts that `object` is sealed (cannot have new properties added to it and its existing properties cannot be removed).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.isSealed', () => {\n  const sealedObject = Object.seal({})\n  const frozenObject = Object.seal({})\n\n  assert.isSealed(sealedObject)\n  assert.isSealed(frozenObject)\n})\n```\n\n## isNotSealed [​](#isnotsealed)\n\n*   **Type:** `<T>(object: T, message?: string) => void`\n*   **Alias:** `notSealed`\n\nAsserts that `object` is not sealed (can have new properties added to it and its existing properties can be removed).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.isNotSealed', () => {\n  assert.isNotSealed({})\n})\n```\n\n## isFrozen [​](#isfrozen)\n\n*   **Type:** `<T>(object: T, message?: string) => void`\n*   **Alias:** `frozen`\n\nAsserts that object is frozen (cannot have new properties added to it and its existing properties cannot be modified).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.isFrozen', () => {\n  const frozenObject = Object.freeze({})\n  assert.frozen(frozenObject)\n})\n```\n\n## isNotFrozen [​](#isnotfrozen)\n\n*   **Type:** `<T>(object: T, message?: string) => void`\n*   **Alias:** `notFrozen`\n\nAsserts that `object` is not frozen (can have new properties added to it and its existing properties can be modified).\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.isNotFrozen', () => {\n  assert.isNotFrozen({})\n})\n```\n\n## isEmpty [​](#isempty)\n\n*   **Type:** `<T>(target: T, message?: string) => void`\n*   **Alias:** `empty`\n\nAsserts that the `target` does not contain any values. For arrays and strings, it checks the length property. For Map and Set instances, it checks the size property. For non-function objects, it gets the count of its own enumerable string keys.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.isEmpty', () => {\n  assert.isEmpty([])\n  assert.isEmpty('')\n  assert.isEmpty(new Map())\n  assert.isEmpty({})\n})\n```\n\n## isNotEmpty [​](#isnotempty)\n\n*   **Type:** `<T>(object: T, message?: string) => void`\n*   **Alias:** `notEmpty`\n\nAsserts that the `target` contains values. For arrays and strings, it checks the length property. For Map and Set instances, it checks the size property. For non-function objects, it gets the count of its own enumerable string keys.\n\nts\n\n```\nimport { assert, test } from 'vitest'\n\ntest('assert.isNotEmpty', () => {\n  assert.isNotEmpty([1, 2])\n  assert.isNotEmpty('34')\n  assert.isNotEmpty(new Set([5, 6]))\n  assert.isNotEmpty({ key: 7 })\n})\n```",
    "title": "assert | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/api/expect",
    "markdown": "expect | Vitest\n\n[Skip to content](#VPContent)\n\n[![](/logo.svg)Vitest](/)\n\nSearchK\n\nEnglish\n\n[简体中文](https://cn.vitest.dev/api/expect)\n\n[](https://elk.zone/m.webtoo.ls/@vitest)[](https://twitter.com/vitest_dev)[](https://chat.vitest.dev)[](https://github.com/vitest-dev/vitest)\n\nEnglish\n\n[简体中文](https://cn.vitest.dev/api/expect)\n\nAppearance\n\n[](https://elk.zone/m.webtoo.ls/@vitest)[](https://twitter.com/vitest_dev)[](https://chat.vitest.dev)[](https://github.com/vitest-dev/vitest)\n\nMenu\n\nReturn to top\n\n# expect [​](#expect)\n\nThe following types are used in the type signatures below\n\nts\n\n```\ntype Awaitable<T> = T | PromiseLike<T>\n```\n\n`expect` is used to create assertions. In this context `assertions` are functions that can be called to assert a statement. Vitest provides `chai` assertions by default and also `Jest` compatible assertions build on top of `chai`.\n\nFor example, this code asserts that an `input` value is equal to `2`. If it's not, the assertion will throw an error, and the test will fail.\n\nts\n\n```\nimport { expect } from 'vitest'\n\nconst input = Math.sqrt(4)\n\nexpect(input).to.equal(2) // chai API\nexpect(input).toBe(2) // jest API\n```\n\nTechnically this example doesn't use [`test`](/api/#test) function, so in the console you will see Node.js error instead of Vitest output. To learn more about `test`, please read [Test API Reference](/api/).\n\nAlso, `expect` can be used statically to access matcher functions, described later, and more.\n\nWARNING\n\n`expect` has no effect on testing types, if the expression doesn't have a type error. If you want to use Vitest as [type checker](/guide/testing-types), use [`expectTypeOf`](/api/expect-typeof) or [`assertType`](/api/assert-type).\n\n## soft [​](#soft)\n\n*   **Type:** `ExpectStatic & (actual: any) => Assertions`\n\n`expect.soft` functions similarly to `expect`, but instead of terminating the test execution upon a failed assertion, it continues running and marks the failure as a test failure. All errors encountered during the test will be displayed until the test is completed.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\ntest('expect.soft test', () => {\n  expect.soft(1 + 1).toBe(3) // mark the test as fail and continue\n  expect.soft(1 + 2).toBe(4) // mark the test as fail and continue\n})\n// At the end of the test, the above errors will be output.\n```\n\nIt can also be used with `expect`. if `expect` assertion fails, the test will be terminated and all errors will be displayed.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\ntest('expect.soft test', () => {\n  expect.soft(1 + 1).toBe(3) // mark the test as fail and continue\n  expect(1 + 2).toBe(4) // failed and terminate the test, all previous errors will be output\n  expect.soft(1 + 3).toBe(5) // do not run\n})\n```\n\nWARNING\n\n`expect.soft` can only be used inside the [`test`](/api/#test) function.\n\n## poll [​](#poll)\n\n*   **Type:** `ExpectStatic & (actual: () => any, options: { interval, timeout, message }) => Assertions`\n\n`expect.poll` reruns the _assertion_ until it is succeeded. You can configure how many times Vitest should rerun the `expect.poll` callback by setting `interval` and `timeout` options.\n\nIf an error is thrown inside the `expect.poll` callback, Vitest will retry again until the timeout runs out.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\ntest('element exists', async () => {\n  asyncInjectElement()\n\n  await expect.poll(() => document.querySelector('.element')).toBeTruthy()\n})\n```\n\nWARNING\n\n`expect.poll` makes every assertion asynchronous, so do not forget to await it otherwise you might get unhandled promise rejections.\n\n`expect.poll` doesn't work with several matchers:\n\n*   Snapshot matchers are not supported because they will always succeed. If your condition is flaky, consider using [`vi.waitFor`](/api/vi#vi-waitfor) instead to resolve it first:\n\nts\n\n```\nimport { expect, vi } from 'vitest'\n\nconst flakyValue = await vi.waitFor(() => getFlakyValue())\nexpect(flakyValue).toMatchSnapshot()\n```\n\n*   `.resolves` and `.rejects` are not supported. `expect.poll` already awaits the condition if it's asynchronous.\n*   `toThrow` and its aliases are not supported because the `expect.poll` condition is always resolved before the matcher gets the value\n\n## not [​](#not)\n\nUsing `not` will negate the assertion. For example, this code asserts that an `input` value is not equal to `2`. If it's equal, the assertion will throw an error, and the test will fail.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nconst input = Math.sqrt(16)\n\nexpect(input).not.to.equal(2) // chai API\nexpect(input).not.toBe(2) // jest API\n```\n\n## toBe [​](#tobe)\n\n*   **Type:** `(value: any) => Awaitable<void>`\n\n`toBe` can be used to assert if primitives are equal or that objects share the same reference. It is equivalent of calling `expect(Object.is(3, 3)).toBe(true)`. If the objects are not the same, but you want to check if their structures are identical, you can use [`toEqual`](#toequal).\n\nFor example, the code below checks if the trader has 13 apples.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nconst stock = {\n  type: 'apples',\n  count: 13,\n}\n\ntest('stock has 13 apples', () => {\n  expect(stock.type).toBe('apples')\n  expect(stock.count).toBe(13)\n})\n\ntest('stocks are the same', () => {\n  const refStock = stock // same reference\n\n  expect(stock).toBe(refStock)\n})\n```\n\nTry not to use `toBe` with floating-point numbers. Since JavaScript rounds them, `0.1 + 0.2` is not strictly `0.3`. To reliably assert floating-point numbers, use [`toBeCloseTo`](#tobecloseto) assertion.\n\n## toBeCloseTo [​](#tobecloseto)\n\n*   **Type:** `(value: number, numDigits?: number) => Awaitable<void>`\n\nUse `toBeCloseTo` to compare floating-point numbers. The optional `numDigits` argument limits the number of digits to check _after_ the decimal point. For example:\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\ntest.fails('decimals are not equal in javascript', () => {\n  expect(0.2 + 0.1).toBe(0.3) // 0.2 + 0.1 is 0.30000000000000004\n})\n\ntest('decimals are rounded to 5 after the point', () => {\n  // 0.2 + 0.1 is 0.30000 | \"000000000004\" removed\n  expect(0.2 + 0.1).toBeCloseTo(0.3, 5)\n  // nothing from 0.30000000000000004 is removed\n  expect(0.2 + 0.1).not.toBeCloseTo(0.3, 50)\n})\n```\n\n## toBeDefined [​](#tobedefined)\n\n*   **Type:** `() => Awaitable<void>`\n\n`toBeDefined` asserts that the value is not equal to `undefined`. Useful use case would be to check if function _returned_ anything.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nfunction getApples() {\n  return 3\n}\n\ntest('function returned something', () => {\n  expect(getApples()).toBeDefined()\n})\n```\n\n## toBeUndefined [​](#tobeundefined)\n\n*   **Type:** `() => Awaitable<void>`\n\nOpposite of `toBeDefined`, `toBeUndefined` asserts that the value _is_ equal to `undefined`. Useful use case would be to check if function hasn't _returned_ anything.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nfunction getApplesFromStock(stock: string) {\n  if (stock === 'Bill') {\n    return 13\n  }\n}\n\ntest('mary doesn\\'t have a stock', () => {\n  expect(getApplesFromStock('Mary')).toBeUndefined()\n})\n```\n\n## toBeTruthy [​](#tobetruthy)\n\n*   **Type:** `() => Awaitable<void>`\n\n`toBeTruthy` asserts that the value is true when converted to boolean. Useful if you don't care for the value, but just want to know it can be converted to `true`.\n\nFor example, having this code you don't care for the return value of `stocks.getInfo` - it maybe a complex object, a string, or anything else. The code will still work.\n\nts\n\n```\nimport { Stocks } from './stocks.js'\n\nconst stocks = new Stocks()\nstocks.sync('Bill')\nif (stocks.getInfo('Bill')) {\n  stocks.sell('apples', 'Bill')\n}\n```\n\nSo if you want to test that `stocks.getInfo` will be truthy, you could write:\n\nts\n\n```\nimport { expect, test } from 'vitest'\nimport { Stocks } from './stocks.js'\n\nconst stocks = new Stocks()\n\ntest('if we know Bill stock, sell apples to him', () => {\n  stocks.sync('Bill')\n  expect(stocks.getInfo('Bill')).toBeTruthy()\n})\n```\n\nEverything in JavaScript is truthy, except `false`, `null`, `undefined`, `NaN`, `0`, `-0`, `0n`, `\"\"` and `document.all`.\n\n## toBeFalsy [​](#tobefalsy)\n\n*   **Type:** `() => Awaitable<void>`\n\n`toBeFalsy` asserts that the value is false when converted to boolean. Useful if you don't care for the value, but just want to know if it can be converted to `false`.\n\nFor example, having this code you don't care for the return value of `stocks.stockFailed` - it may return any falsy value, but the code will still work.\n\nts\n\n```\nimport { Stocks } from './stocks.js'\n\nconst stocks = new Stocks()\nstocks.sync('Bill')\nif (!stocks.stockFailed('Bill')) {\n  stocks.sell('apples', 'Bill')\n}\n```\n\nSo if you want to test that `stocks.stockFailed` will be falsy, you could write:\n\nts\n\n```\nimport { expect, test } from 'vitest'\nimport { Stocks } from './stocks.js'\n\nconst stocks = new Stocks()\n\ntest('if Bill stock hasn\\'t failed, sell apples to him', () => {\n  stocks.syncStocks('Bill')\n  expect(stocks.stockFailed('Bill')).toBeFalsy()\n})\n```\n\nEverything in JavaScript is truthy, except `false`, `null`, `undefined`, `NaN`, `0`, `-0`, `0n`, `\"\"` and `document.all`.\n\n## toBeNull [​](#tobenull)\n\n*   **Type:** `() => Awaitable<void>`\n\n`toBeNull` simply asserts if something is `null`. Alias for `.toBe(null)`.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nfunction apples() {\n  return null\n}\n\ntest('we don\\'t have apples', () => {\n  expect(apples()).toBeNull()\n})\n```\n\n## toBeNaN [​](#tobenan)\n\n*   **Type:** `() => Awaitable<void>`\n\n`toBeNaN` simply asserts if something is `NaN`. Alias for `.toBe(NaN)`.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nlet i = 0\n\nfunction getApplesCount() {\n  i++\n  return i > 1 ? Number.NaN : i\n}\n\ntest('getApplesCount has some unusual side effects...', () => {\n  expect(getApplesCount()).not.toBeNaN()\n  expect(getApplesCount()).toBeNaN()\n})\n```\n\n## toBeTypeOf [​](#tobetypeof)\n\n*   **Type:** `(c: 'bigint' | 'boolean' | 'function' | 'number' | 'object' | 'string' | 'symbol' | 'undefined') => Awaitable<void>`\n\n`toBeTypeOf` asserts if an actual value is of type of received type.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nconst actual = 'stock'\n\ntest('stock is type of string', () => {\n  expect(actual).toBeTypeOf('string')\n})\n```\n\n## toBeInstanceOf [​](#tobeinstanceof)\n\n*   **Type:** `(c: any) => Awaitable<void>`\n\n`toBeInstanceOf` asserts if an actual value is instance of received class.\n\nts\n\n```\nimport { expect, test } from 'vitest'\nimport { Stocks } from './stocks.js'\n\nconst stocks = new Stocks()\n\ntest('stocks are instance of Stocks', () => {\n  expect(stocks).toBeInstanceOf(Stocks)\n})\n```\n\n## toBeGreaterThan [​](#tobegreaterthan)\n\n*   **Type:** `(n: number | bigint) => Awaitable<void>`\n\n`toBeGreaterThan` asserts if actual value is greater than received one. Equal values will fail the test.\n\nts\n\n```\nimport { expect, test } from 'vitest'\nimport { getApples } from './stocks.js'\n\ntest('have more then 10 apples', () => {\n  expect(getApples()).toBeGreaterThan(10)\n})\n```\n\n## toBeGreaterThanOrEqual [​](#tobegreaterthanorequal)\n\n*   **Type:** `(n: number | bigint) => Awaitable<void>`\n\n`toBeGreaterThanOrEqual` asserts if actual value is greater than received one or equal to it.\n\nts\n\n```\nimport { expect, test } from 'vitest'\nimport { getApples } from './stocks.js'\n\ntest('have 11 apples or more', () => {\n  expect(getApples()).toBeGreaterThanOrEqual(11)\n})\n```\n\n## toBeLessThan [​](#tobelessthan)\n\n*   **Type:** `(n: number | bigint) => Awaitable<void>`\n\n`toBeLessThan` asserts if actual value is less than received one. Equal values will fail the test.\n\nts\n\n```\nimport { expect, test } from 'vitest'\nimport { getApples } from './stocks.js'\n\ntest('have less then 20 apples', () => {\n  expect(getApples()).toBeLessThan(20)\n})\n```\n\n## toBeLessThanOrEqual [​](#tobelessthanorequal)\n\n*   **Type:** `(n: number | bigint) => Awaitable<void>`\n\n`toBeLessThanOrEqual` asserts if actual value is less than received one or equal to it.\n\nts\n\n```\nimport { expect, test } from 'vitest'\nimport { getApples } from './stocks.js'\n\ntest('have 11 apples or less', () => {\n  expect(getApples()).toBeLessThanOrEqual(11)\n})\n```\n\n## toEqual [​](#toequal)\n\n*   **Type:** `(received: any) => Awaitable<void>`\n\n`toEqual` asserts if actual value is equal to received one or has the same structure, if it is an object (compares them recursively). You can see the difference between `toEqual` and [`toBe`](#tobe) in this example:\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nconst stockBill = {\n  type: 'apples',\n  count: 13,\n}\n\nconst stockMary = {\n  type: 'apples',\n  count: 13,\n}\n\ntest('stocks have the same properties', () => {\n  expect(stockBill).toEqual(stockMary)\n})\n\ntest('stocks are not the same', () => {\n  expect(stockBill).not.toBe(stockMary)\n})\n```\n\nWARNING\n\nA _deep equality_ will not be performed for `Error` objects. Only the `message` property of an Error is considered for equality. To customize equality to check properties other than `message`, use [`expect.addEqualityTesters`](#expect-addequalitytesters). To test if something was thrown, use [`toThrowError`](#tothrowerror) assertion.\n\n## toStrictEqual [​](#tostrictequal)\n\n*   **Type:** `(received: any) => Awaitable<void>`\n\n`toStrictEqual` asserts if the actual value is equal to the received one or has the same structure if it is an object (compares them recursively), and of the same type.\n\nDifferences from [`.toEqual`](#toequal):\n\n*   Keys with `undefined` properties are checked. e.g. `{a: undefined, b: 2}` does not match `{b: 2}` when using `.toStrictEqual`.\n*   Array sparseness is checked. e.g. `[, 1]` does not match `[undefined, 1]` when using `.toStrictEqual`.\n*   Object types are checked to be equal. e.g. A class instance with fields `a` and `b` will not equal a literal object with fields `a` and `b`.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nclass Stock {\n  constructor(type) {\n    this.type = type\n  }\n}\n\ntest('structurally the same, but semantically different', () => {\n  expect(new Stock('apples')).toEqual({ type: 'apples' })\n  expect(new Stock('apples')).not.toStrictEqual({ type: 'apples' })\n})\n```\n\n## toContain [​](#tocontain)\n\n*   **Type:** `(received: string) => Awaitable<void>`\n\n`toContain` asserts if the actual value is in an array. `toContain` can also check whether a string is a substring of another string. Since Vitest 1.0, if you are running tests in a browser-like environment, this assertion can also check if class is contained in a `classList`, or an element is inside another one.\n\nts\n\n```\nimport { expect, test } from 'vitest'\nimport { getAllFruits } from './stocks.js'\n\ntest('the fruit list contains orange', () => {\n  expect(getAllFruits()).toContain('orange')\n\n  const element = document.querySelector('#el')\n  // element has a class\n  expect(element.classList).toContain('flex')\n  // element is inside another one\n  expect(document.querySelector('#wrapper')).toContain(element)\n})\n```\n\n## toContainEqual [​](#tocontainequal)\n\n*   **Type:** `(received: any) => Awaitable<void>`\n\n`toContainEqual` asserts if an item with a specific structure and values is contained in an array. It works like [`toEqual`](#toequal) inside for each element.\n\nts\n\n```\nimport { expect, test } from 'vitest'\nimport { getFruitStock } from './stocks.js'\n\ntest('apple available', () => {\n  expect(getFruitStock()).toContainEqual({ fruit: 'apple', count: 5 })\n})\n```\n\n## toHaveLength [​](#tohavelength)\n\n*   **Type:** `(received: number) => Awaitable<void>`\n\n`toHaveLength` asserts if an object has a `.length` property and it is set to a certain numeric value.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\ntest('toHaveLength', () => {\n  expect('abc').toHaveLength(3)\n  expect([1, 2, 3]).toHaveLength(3)\n\n  expect('').not.toHaveLength(3) // doesn't have .length of 3\n  expect({ length: 3 }).toHaveLength(3)\n})\n```\n\n## toHaveProperty [​](#tohaveproperty)\n\n*   **Type:** `(key: any, received?: any) => Awaitable<void>`\n\n`toHaveProperty` asserts if a property at provided reference `key` exists for an object.\n\nYou can provide an optional value argument also known as deep equality, like the `toEqual` matcher to compare the received property value.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nconst invoice = {\n  'isActive': true,\n  'P.O': '12345',\n  'customer': {\n    first_name: 'John',\n    last_name: 'Doe',\n    location: 'China',\n  },\n  'total_amount': 5000,\n  'items': [\n    {\n      type: 'apples',\n      quantity: 10,\n    },\n    {\n      type: 'oranges',\n      quantity: 5,\n    },\n  ],\n}\n\ntest('John Doe Invoice', () => {\n  expect(invoice).toHaveProperty('isActive') // assert that the key exists\n  expect(invoice).toHaveProperty('total_amount', 5000) // assert that the key exists and the value is equal\n\n  expect(invoice).not.toHaveProperty('account') // assert that this key does not exist\n\n  // Deep referencing using dot notation\n  expect(invoice).toHaveProperty('customer.first_name')\n  expect(invoice).toHaveProperty('customer.last_name', 'Doe')\n  expect(invoice).not.toHaveProperty('customer.location', 'India')\n\n  // Deep referencing using an array containing the key\n  expect(invoice).toHaveProperty('items[0].type', 'apples')\n  expect(invoice).toHaveProperty('items.0.type', 'apples') // dot notation also works\n\n  // Deep referencing using an array containing the keyPath\n  expect(invoice).toHaveProperty(['items', 0, 'type'], 'apples')\n  expect(invoice).toHaveProperty(['items', '0', 'type'], 'apples') // string notation also works\n\n  // Wrap your key in an array to avoid the key from being parsed as a deep reference\n  expect(invoice).toHaveProperty(['P.O'], '12345')\n})\n```\n\n## toMatch [​](#tomatch)\n\n*   **Type:** `(received: string | regexp) => Awaitable<void>`\n\n`toMatch` asserts if a string matches a regular expression or a string.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\ntest('top fruits', () => {\n  expect('top fruits include apple, orange and grape').toMatch(/apple/)\n  expect('applefruits').toMatch('fruit') // toMatch also accepts a string\n})\n```\n\n## toMatchObject [​](#tomatchobject)\n\n*   **Type:** `(received: object | array) => Awaitable<void>`\n\n`toMatchObject` asserts if an object matches a subset of the properties of an object.\n\nYou can also pass an array of objects. This is useful if you want to check that two arrays match in their number of elements, as opposed to `arrayContaining`, which allows for extra elements in the received array.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nconst johnInvoice = {\n  isActive: true,\n  customer: {\n    first_name: 'John',\n    last_name: 'Doe',\n    location: 'China',\n  },\n  total_amount: 5000,\n  items: [\n    {\n      type: 'apples',\n      quantity: 10,\n    },\n    {\n      type: 'oranges',\n      quantity: 5,\n    },\n  ],\n}\n\nconst johnDetails = {\n  customer: {\n    first_name: 'John',\n    last_name: 'Doe',\n    location: 'China',\n  },\n}\n\ntest('invoice has john personal details', () => {\n  expect(johnInvoice).toMatchObject(johnDetails)\n})\n\ntest('the number of elements must match exactly', () => {\n  // Assert that an array of object matches\n  expect([{ foo: 'bar' }, { baz: 1 }]).toMatchObject([\n    { foo: 'bar' },\n    { baz: 1 },\n  ])\n})\n```\n\n## toThrowError [​](#tothrowerror)\n\n*   **Type:** `(received: any) => Awaitable<void>`\n    \n*   **Alias:** `toThrow`\n    \n\n`toThrowError` asserts if a function throws an error when it is called.\n\nYou can provide an optional argument to test that a specific error is thrown:\n\n*   regular expression: error message matches the pattern\n*   string: error message includes the substring\n\nTIP\n\nYou must wrap the code in a function, otherwise the error will not be caught, and test will fail.\n\nFor example, if we want to test that `getFruitStock('pineapples')` throws, we could write:\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nfunction getFruitStock(type: string) {\n  if (type === 'pineapples') {\n    throw new Error('Pineapples are not in stock')\n  }\n\n  // Do some other stuff\n}\n\ntest('throws on pineapples', () => {\n  // Test that the error message says \"stock\" somewhere: these are equivalent\n  expect(() => getFruitStock('pineapples')).toThrowError(/stock/)\n  expect(() => getFruitStock('pineapples')).toThrowError('stock')\n\n  // Test the exact error message\n  expect(() => getFruitStock('pineapples')).toThrowError(\n    /^Pineapples are not in stock$/,\n  )\n})\n```\n\nTIP\n\nTo test async functions, use in combination with [rejects](#rejects).\n\njs\n\n```\nfunction getAsyncFruitStock() {\n  return Promise.reject(new Error('empty'))\n}\n\ntest('throws on pineapples', async () => {\n  await expect(() => getAsyncFruitStock()).rejects.toThrowError('empty')\n})\n```\n\n## toMatchSnapshot [​](#tomatchsnapshot)\n\n*   **Type:** `<T>(shape?: Partial<T> | string, message?: string) => void`\n\nThis ensures that a value matches the most recent snapshot.\n\nYou can provide an optional `hint` string argument that is appended to the test name. Although Vitest always appends a number at the end of a snapshot name, short descriptive hints might be more useful than numbers to differentiate multiple snapshots in a single it or test block. Vitest sorts snapshots by name in the corresponding `.snap` file.\n\nTIP\n\nWhen snapshot mismatch and causing the test failing, if the mismatch is expected, you can press `u` key to update the snapshot for once. Or you can pass `-u` or `--update` CLI options to make Vitest always update the tests.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\ntest('matches snapshot', () => {\n  const data = { foo: new Set(['bar', 'snapshot']) }\n  expect(data).toMatchSnapshot()\n})\n```\n\nYou can also provide a shape of an object, if you are testing just a shape of an object, and don't need it to be 100% compatible:\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\ntest('matches snapshot', () => {\n  const data = { foo: new Set(['bar', 'snapshot']) }\n  expect(data).toMatchSnapshot({ foo: expect.any(Set) })\n})\n```\n\n## toMatchInlineSnapshot [​](#tomatchinlinesnapshot)\n\n*   **Type:** `<T>(shape?: Partial<T> | string, snapshot?: string, message?: string) => void`\n\nThis ensures that a value matches the most recent snapshot.\n\nVitest adds and updates the inlineSnapshot string argument to the matcher in the test file (instead of an external `.snap` file).\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\ntest('matches inline snapshot', () => {\n  const data = { foo: new Set(['bar', 'snapshot']) }\n  // Vitest will update following content when updating the snapshot\n  expect(data).toMatchInlineSnapshot(`\n    {\n      \"foo\": Set {\n        \"bar\",\n        \"snapshot\",\n      },\n    }\n  `)\n})\n```\n\nYou can also provide a shape of an object, if you are testing just a shape of an object, and don't need it to be 100% compatible:\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\ntest('matches snapshot', () => {\n  const data = { foo: new Set(['bar', 'snapshot']) }\n  expect(data).toMatchInlineSnapshot(\n    { foo: expect.any(Set) },\n    `\n    {\n      \"foo\": Any<Set>,\n    }\n  `\n  )\n})\n```\n\n## toMatchFileSnapshot [​](#tomatchfilesnapshot)\n\n*   **Type:** `<T>(filepath: string, message?: string) => Promise<void>`\n\nCompare or update the snapshot with the content of a file explicitly specified (instead of the `.snap` file).\n\nts\n\n```\nimport { expect, it } from 'vitest'\n\nit('render basic', async () => {\n  const result = renderHTML(h('div', { class: 'foo' }))\n  await expect(result).toMatchFileSnapshot('./test/basic.output.html')\n})\n```\n\nNote that since file system operation is async, you need to use `await` with `toMatchFileSnapshot()`.\n\n## toThrowErrorMatchingSnapshot [​](#tothrowerrormatchingsnapshot)\n\n*   **Type:** `(message?: string) => void`\n\nThe same as [`toMatchSnapshot`](#tomatchsnapshot), but expects the same value as [`toThrowError`](#tothrowerror).\n\n## toThrowErrorMatchingInlineSnapshot [​](#tothrowerrormatchinginlinesnapshot)\n\n*   **Type:** `(snapshot?: string, message?: string) => void`\n\nThe same as [`toMatchInlineSnapshot`](#tomatchinlinesnapshot), but expects the same value as [`toThrowError`](#tothrowerror).\n\n## toHaveBeenCalled [​](#tohavebeencalled)\n\n*   **Type:** `() => Awaitable<void>`\n\nThis assertion is useful for testing that a function has been called. Requires a spy function to be passed to `expect`.\n\nts\n\n```\nimport { expect, test, vi } from 'vitest'\n\nconst market = {\n  buy(subject: string, amount: number) {\n    // ...\n  },\n}\n\ntest('spy function', () => {\n  const buySpy = vi.spyOn(market, 'buy')\n\n  expect(buySpy).not.toHaveBeenCalled()\n\n  market.buy('apples', 10)\n\n  expect(buySpy).toHaveBeenCalled()\n})\n```\n\n## toHaveBeenCalledTimes [​](#tohavebeencalledtimes)\n\n*   **Type**: `(amount: number) => Awaitable<void>`\n\nThis assertion checks if a function was called a certain amount of times. Requires a spy function to be passed to `expect`.\n\nts\n\n```\nimport { expect, test, vi } from 'vitest'\n\nconst market = {\n  buy(subject: string, amount: number) {\n    // ...\n  },\n}\n\ntest('spy function called two times', () => {\n  const buySpy = vi.spyOn(market, 'buy')\n\n  market.buy('apples', 10)\n  market.buy('apples', 20)\n\n  expect(buySpy).toHaveBeenCalledTimes(2)\n})\n```\n\n## toHaveBeenCalledWith [​](#tohavebeencalledwith)\n\n*   **Type**: `(...args: any[]) => Awaitable<void>`\n\nThis assertion checks if a function was called at least once with certain parameters. Requires a spy function to be passed to `expect`.\n\nts\n\n```\nimport { expect, test, vi } from 'vitest'\n\nconst market = {\n  buy(subject: string, amount: number) {\n    // ...\n  },\n}\n\ntest('spy function', () => {\n  const buySpy = vi.spyOn(market, 'buy')\n\n  market.buy('apples', 10)\n  market.buy('apples', 20)\n\n  expect(buySpy).toHaveBeenCalledWith('apples', 10)\n  expect(buySpy).toHaveBeenCalledWith('apples', 20)\n})\n```\n\n## toHaveBeenLastCalledWith [​](#tohavebeenlastcalledwith)\n\n*   **Type**: `(...args: any[]) => Awaitable<void>`\n\nThis assertion checks if a function was called with certain parameters at its last invocation. Requires a spy function to be passed to `expect`.\n\nts\n\n```\nimport { expect, test, vi } from 'vitest'\n\nconst market = {\n  buy(subject: string, amount: number) {\n    // ...\n  },\n}\n\ntest('spy function', () => {\n  const buySpy = vi.spyOn(market, 'buy')\n\n  market.buy('apples', 10)\n  market.buy('apples', 20)\n\n  expect(buySpy).not.toHaveBeenLastCalledWith('apples', 10)\n  expect(buySpy).toHaveBeenLastCalledWith('apples', 20)\n})\n```\n\n## toHaveBeenNthCalledWith [​](#tohavebeennthcalledwith)\n\n*   **Type**: `(time: number, ...args: any[]) => Awaitable<void>`\n\nThis assertion checks if a function was called with certain parameters at the certain time. The count starts at 1. So, to check the second entry, you would write `.toHaveBeenNthCalledWith(2, ...)`.\n\nRequires a spy function to be passed to `expect`.\n\nts\n\n```\nimport { expect, test, vi } from 'vitest'\n\nconst market = {\n  buy(subject: string, amount: number) {\n    // ...\n  },\n}\n\ntest('first call of spy function called with right params', () => {\n  const buySpy = vi.spyOn(market, 'buy')\n\n  market.buy('apples', 10)\n  market.buy('apples', 20)\n\n  expect(buySpy).toHaveBeenNthCalledWith(1, 'apples', 10)\n})\n```\n\n## toHaveReturned [​](#tohavereturned)\n\n*   **Type**: `() => Awaitable<void>`\n\nThis assertion checks if a function has successfully returned a value at least once (i.e., did not throw an error). Requires a spy function to be passed to `expect`.\n\nts\n\n```\nimport { expect, test, vi } from 'vitest'\n\nfunction getApplesPrice(amount: number) {\n  const PRICE = 10\n  return amount * PRICE\n}\n\ntest('spy function returned a value', () => {\n  const getPriceSpy = vi.fn(getApplesPrice)\n\n  const price = getPriceSpy(10)\n\n  expect(price).toBe(100)\n  expect(getPriceSpy).toHaveReturned()\n})\n```\n\n## toHaveReturnedTimes [​](#tohavereturnedtimes)\n\n*   **Type**: `(amount: number) => Awaitable<void>`\n\nThis assertion checks if a function has successfully returned a value an exact amount of times (i.e., did not throw an error). Requires a spy function to be passed to `expect`.\n\nts\n\n```\nimport { expect, test, vi } from 'vitest'\n\ntest('spy function returns a value two times', () => {\n  const sell = vi.fn((product: string) => ({ product }))\n\n  sell('apples')\n  sell('bananas')\n\n  expect(sell).toHaveReturnedTimes(2)\n})\n```\n\n## toHaveReturnedWith [​](#tohavereturnedwith)\n\n*   **Type**: `(returnValue: any) => Awaitable<void>`\n\nYou can call this assertion to check if a function has successfully returned a value with certain parameters at least once. Requires a spy function to be passed to `expect`.\n\nts\n\n```\nimport { expect, test, vi } from 'vitest'\n\ntest('spy function returns a product', () => {\n  const sell = vi.fn((product: string) => ({ product }))\n\n  sell('apples')\n\n  expect(sell).toHaveReturnedWith({ product: 'apples' })\n})\n```\n\n## toHaveLastReturnedWith [​](#tohavelastreturnedwith)\n\n*   **Type**: `(returnValue: any) => Awaitable<void>`\n\nYou can call this assertion to check if a function has successfully returned a certain value when it was last invoked. Requires a spy function to be passed to `expect`.\n\nts\n\n```\nimport { expect, test, vi } from 'vitest'\n\ntest('spy function returns bananas on a last call', () => {\n  const sell = vi.fn((product: string) => ({ product }))\n\n  sell('apples')\n  sell('bananas')\n\n  expect(sell).toHaveLastReturnedWith({ product: 'bananas' })\n})\n```\n\n## toHaveNthReturnedWith [​](#tohaventhreturnedwith)\n\n*   **Type**: `(time: number, returnValue: any) => Awaitable<void>`\n\nYou can call this assertion to check if a function has successfully returned a value with certain parameters on a certain call. Requires a spy function to be passed to `expect`.\n\nts\n\n```\nimport { expect, test, vi } from 'vitest'\n\ntest('spy function returns bananas on second call', () => {\n  const sell = vi.fn((product: string) => ({ product }))\n\n  sell('apples')\n  sell('bananas')\n\n  expect(sell).toHaveNthReturnedWith(2, { product: 'bananas' })\n})\n```\n\n## toHaveResolved [​](#tohaveresolved)\n\n*   **Type**: `() => Awaitable<void>`\n\nThis assertion checks if a function has successfully resolved a value at least once (i.e., did not reject). Requires a spy function to be passed to `expect`.\n\nIf the function returned a promise, but it was not resolved yet, this will fail.\n\nts\n\n```\nimport { expect, test, vi } from 'vitest'\nimport db from './db/apples.js'\n\nasync function getApplesPrice(amount: number) {\n  return amount * await db.get('price')\n}\n\ntest('spy function resolved a value', async () => {\n  const getPriceSpy = vi.fn(getApplesPrice)\n\n  const price = await getPriceSpy(10)\n\n  expect(price).toBe(100)\n  expect(getPriceSpy).toHaveResolved()\n})\n```\n\n## toHaveResolvedTimes [​](#tohaveresolvedtimes)\n\n*   **Type**: `(amount: number) => Awaitable<void>`\n\nThis assertion checks if a function has successfully resolved a value an exact amount of times (i.e., did not reject). Requires a spy function to be passed to `expect`.\n\nThis will only count resolved promises. If the function returned a promise, but it was not resolved yet, it will not be counted.\n\nts\n\n```\nimport { expect, test, vi } from 'vitest'\n\ntest('spy function resolved a value two times', async () => {\n  const sell = vi.fn((product: string) => Promise.resolve({ product }))\n\n  await sell('apples')\n  await sell('bananas')\n\n  expect(sell).toHaveResolvedTimes(2)\n})\n```\n\n## toHaveResolvedWith [​](#tohaveresolvedwith)\n\n*   **Type**: `(returnValue: any) => Awaitable<void>`\n\nYou can call this assertion to check if a function has successfully resolved a certain value at least once. Requires a spy function to be passed to `expect`.\n\nIf the function returned a promise, but it was not resolved yet, this will fail.\n\nts\n\n```\nimport { expect, test, vi } from 'vitest'\n\ntest('spy function resolved a product', async () => {\n  const sell = vi.fn((product: string) => Promise.resolve({ product }))\n\n  await sell('apples')\n\n  expect(sell).toHaveResolvedWith({ product: 'apples' })\n})\n```\n\n## toHaveLastResolvedWith [​](#tohavelastresolvedwith)\n\n*   **Type**: `(returnValue: any) => Awaitable<void>`\n\nYou can call this assertion to check if a function has successfully resolved a certain value when it was last invoked. Requires a spy function to be passed to `expect`.\n\nIf the function returned a promise, but it was not resolved yet, this will fail.\n\nts\n\n```\nimport { expect, test, vi } from 'vitest'\n\ntest('spy function resolves bananas on a last call', async () => {\n  const sell = vi.fn((product: string) => Promise.resolve({ product }))\n\n  await sell('apples')\n  await sell('bananas')\n\n  expect(sell).toHaveLastResolvedWith({ product: 'bananas' })\n})\n```\n\n## toHaveNthResolvedWith [​](#tohaventhresolvedwith)\n\n*   **Type**: `(time: number, returnValue: any) => Awaitable<void>`\n\nYou can call this assertion to check if a function has successfully resolved a certain value on a specific invokation. Requires a spy function to be passed to `expect`.\n\nIf the function returned a promise, but it was not resolved yet, this will fail.\n\nts\n\n```\nimport { expect, test, vi } from 'vitest'\n\ntest('spy function returns bananas on second call', async () => {\n  const sell = vi.fn((product: string) => Promise.resolve({ product }))\n\n  await sell('apples')\n  await sell('bananas')\n\n  expect(sell).toHaveNthResolvedWith(2, { product: 'bananas' })\n})\n```\n\n## toSatisfy [​](#tosatisfy)\n\n*   **Type:** `(predicate: (value: any) => boolean) => Awaitable<void>`\n\nThis assertion checks if a value satisfies a certain predicate.\n\nts\n\n```\nimport { describe, expect, it } from 'vitest'\ndescribe('toSatisfy()', () => {\n  const isOdd = (value: number) => value % 2 !== 0\n\n  it('pass with 0', () => {\n    expect(1).toSatisfy(isOdd)\n  })\n\n  it('pass with negation', () => {\n    expect(2).not.toSatisfy(isOdd)\n  })\n})\n```\n\n## resolves [​](#resolves)\n\n*   **Type:** `Promisify<Assertions>`\n\n`resolves` is intended to remove boilerplate when asserting asynchronous code. Use it to unwrap value from the pending promise and assert its value with usual assertions. If the promise rejects, the assertion will fail.\n\nIt returns the same `Assertions` object, but all matchers now return `Promise`, so you would need to `await` it. Also works with `chai` assertions.\n\nFor example, if you have a function, that makes an API call and returns some data, you may use this code to assert its return value:\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nasync function buyApples() {\n  return fetch('/buy/apples').then(r => r.json())\n}\n\ntest('buyApples returns new stock id', async () => {\n  // toEqual returns a promise now, so you HAVE to await it\n  await expect(buyApples()).resolves.toEqual({ id: 1 }) // jest API\n  await expect(buyApples()).resolves.to.equal({ id: 1 }) // chai API\n})\n```\n\nWARNING\n\nIf the assertion is not awaited, then you will have a false-positive test that will pass every time. To make sure that assertions are actually called, you may use [`expect.assertions(number)`](#expect-assertions).\n\n## rejects [​](#rejects)\n\n*   **Type:** `Promisify<Assertions>`\n\n`rejects` is intended to remove boilerplate when asserting asynchronous code. Use it to unwrap reason why the promise was rejected, and assert its value with usual assertions. If the promise successfully resolves, the assertion will fail.\n\nIt returns the same `Assertions` object, but all matchers now return `Promise`, so you would need to `await` it. Also works with `chai` assertions.\n\nFor example, if you have a function that fails when you call it, you may use this code to assert the reason:\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nasync function buyApples(id) {\n  if (!id) {\n    throw new Error('no id')\n  }\n}\n\ntest('buyApples throws an error when no id provided', async () => {\n  // toThrow returns a promise now, so you HAVE to await it\n  await expect(buyApples()).rejects.toThrow('no id')\n})\n```\n\nWARNING\n\nIf the assertion is not awaited, then you will have a false-positive test that will pass every time. To make sure that assertions were actually called, you can use [`expect.assertions(number)`](#expect-assertions).\n\n## expect.assertions [​](#expect-assertions)\n\n*   **Type:** `(count: number) => void`\n\nAfter the test has passed or failed verify that a certain number of assertions was called during a test. A useful case would be to check if an asynchronous code was called.\n\nFor example, if we have a function that asynchronously calls two matchers, we can assert that they were actually called.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nasync function doAsync(...cbs) {\n  await Promise.all(\n    cbs.map((cb, index) => cb({ index })),\n  )\n}\n\ntest('all assertions are called', async () => {\n  expect.assertions(2)\n  function callback1(data) {\n    expect(data).toBeTruthy()\n  }\n  function callback2(data) {\n    expect(data).toBeTruthy()\n  }\n\n  await doAsync(callback1, callback2)\n})\n```\n\nWARNING\n\nWhen using `assertions` with async concurrent tests, `expect` from the local [Test Context](/guide/test-context) must be used to ensure the right test is detected.\n\n## expect.hasAssertions [​](#expect-hasassertions)\n\n*   **Type:** `() => void`\n\nAfter the test has passed or failed verify that at least one assertion was called during a test. A useful case would be to check if an asynchronous code was called.\n\nFor example, if you have a code that calls a callback, we can make an assertion inside a callback, but the test will always pass if we don't check if an assertion was called.\n\nts\n\n```\nimport { expect, test } from 'vitest'\nimport { db } from './db.js'\n\nconst cbs = []\n\nfunction onSelect(cb) {\n  cbs.push(cb)\n}\n\n// after selecting from db, we call all callbacks\nfunction select(id) {\n  return db.select({ id }).then((data) => {\n    return Promise.all(\n      cbs.map(cb => cb(data)),\n    )\n  })\n}\n\ntest('callback was called', async () => {\n  expect.hasAssertions()\n  onSelect((data) => {\n    // should be called on select\n    expect(data).toBeTruthy()\n  })\n  // if not awaited, test will fail\n  // if you don't have expect.hasAssertions(), test will pass\n  await select(3)\n})\n```\n\n## expect.unreachable [​](#expect-unreachable)\n\n*   **Type:** `(message?: string) => never`\n\nThis method is used to asserting that a line should never be reached.\n\nFor example, if we want to test that `build()` throws due to receiving directories having no `src` folder, and also handle each error separately, we could do this:\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nasync function build(dir) {\n  if (dir.includes('no-src')) {\n    throw new Error(`${dir}/src does not exist`)\n  }\n}\n\nconst errorDirs = [\n  'no-src-folder',\n  // ...\n]\n\ntest.each(errorDirs)('build fails with \"%s\"', async (dir) => {\n  try {\n    await build(dir)\n    expect.unreachable('Should not pass build')\n  }\n  catch (err: any) {\n    expect(err).toBeInstanceOf(Error)\n    expect(err.stack).toContain('build')\n\n    switch (dir) {\n      case 'no-src-folder':\n        expect(err.message).toBe(`${dir}/src does not exist`)\n        break\n      default:\n        // to exhaust all error tests\n        expect.unreachable('All error test must be handled')\n        break\n    }\n  }\n})\n```\n\n## expect.anything [​](#expect-anything)\n\n*   **Type:** `() => any`\n\nThis asymmetric matcher, when used with equality check, will always return `true`. Useful, if you just want to be sure that the property exist.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\ntest('object has \"apples\" key', () => {\n  expect({ apples: 22 }).toEqual({ apples: expect.anything() })\n})\n```\n\n## expect.any [​](#expect-any)\n\n*   **Type:** `(constructor: unknown) => any`\n\nThis asymmetric matcher, when used with an equality check, will return `true` only if the value is an instance of a specified constructor. Useful, if you have a value that is generated each time, and you only want to know that it exists with a proper type.\n\nts\n\n```\nimport { expect, test } from 'vitest'\nimport { generateId } from './generators.js'\n\ntest('\"id\" is a number', () => {\n  expect({ id: generateId() }).toEqual({ id: expect.any(Number) })\n})\n```\n\n## expect.closeTo [​](#expect-closeto)\n\n*   **Type:** `(expected: any, precision?: number) => any`\n\n`expect.closeTo` is useful when comparing floating point numbers in object properties or array item. If you need to compare a number, please use `.toBeCloseTo` instead.\n\nThe optional `numDigits` argument limits the number of digits to check **after** the decimal point. For the default value `2`, the test criterion is `Math.abs(expected - received) < 0.005 (that is, 10 ** -2 / 2)`.\n\nFor example, this test passes with a precision of 5 digits:\n\njs\n\n```\ntest('compare float in object properties', () => {\n  expect({\n    title: '0.1 + 0.2',\n    sum: 0.1 + 0.2,\n  }).toEqual({\n    title: '0.1 + 0.2',\n    sum: expect.closeTo(0.3, 5),\n  })\n})\n```\n\n## expect.arrayContaining [​](#expect-arraycontaining)\n\n*   **Type:** `<T>(expected: T[]) => any`\n\nWhen used with an equality check, this asymmetric matcher will return `true` if the value is an array and contains specified items.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\ntest('basket includes fuji', () => {\n  const basket = {\n    varieties: [\n      'Empire',\n      'Fuji',\n      'Gala',\n    ],\n    count: 3\n  }\n  expect(basket).toEqual({\n    count: 3,\n    varieties: expect.arrayContaining(['Fuji'])\n  })\n})\n```\n\nTIP\n\nYou can use `expect.not` with this matcher to negate the expected value.\n\n## expect.objectContaining [​](#expect-objectcontaining)\n\n*   **Type:** `(expected: any) => any`\n\nWhen used with an equality check, this asymmetric matcher will return `true` if the value has a similar shape.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\ntest('basket has empire apples', () => {\n  const basket = {\n    varieties: [\n      {\n        name: 'Empire',\n        count: 1,\n      }\n    ],\n  }\n  expect(basket).toEqual({\n    varieties: [\n      expect.objectContaining({ name: 'Empire' }),\n    ]\n  })\n})\n```\n\nTIP\n\nYou can use `expect.not` with this matcher to negate the expected value.\n\n## expect.stringContaining [​](#expect-stringcontaining)\n\n*   **Type:** `(expected: any) => any`\n\nWhen used with an equality check, this asymmetric matcher will return `true` if the value is a string and contains a specified substring.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\ntest('variety has \"Emp\" in its name', () => {\n  const variety = {\n    name: 'Empire',\n    count: 1,\n  }\n  expect(variety).toEqual({\n    name: expect.stringContaining('Emp'),\n    count: 1,\n  })\n})\n```\n\nTIP\n\nYou can use `expect.not` with this matcher to negate the expected value.\n\n## expect.stringMatching [​](#expect-stringmatching)\n\n*   **Type:** `(expected: any) => any`\n\nWhen used with an equality check, this asymmetric matcher will return `true` if the value is a string and contains a specified substring or if the string matches a regular expression.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\ntest('variety ends with \"re\"', () => {\n  const variety = {\n    name: 'Empire',\n    count: 1,\n  }\n  expect(variety).toEqual({\n    name: expect.stringMatching(/re$/),\n    count: 1,\n  })\n})\n```\n\nTIP\n\nYou can use `expect.not` with this matcher to negate the expected value.\n\n## expect.addSnapshotSerializer [​](#expect-addsnapshotserializer)\n\n*   **Type:** `(plugin: PrettyFormatPlugin) => void`\n\nThis method adds custom serializers that are called when creating a snapshot. This is an advanced feature - if you want to know more, please read a [guide on custom serializers](/guide/snapshot#custom-serializer).\n\nIf you are adding custom serializers, you should call this method inside [`setupFiles`](/config/#setupfiles). This will affect every snapshot.\n\nTIP\n\nIf you previously used Vue CLI with Jest, you might want to install [jest-serializer-vue](https://www.npmjs.com/package/jest-serializer-vue). Otherwise, your snapshots will be wrapped in a string, which cases `\"` to be escaped.\n\n## expect.extend [​](#expect-extend)\n\n*   **Type:** `(matchers: MatchersObject) => void`\n\nYou can extend default matchers with your own. This function is used to extend the matchers object with custom matchers.\n\nWhen you define matchers that way, you also create asymmetric matchers that can be used like `expect.stringContaining`.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\ntest('custom matchers', () => {\n  expect.extend({\n    toBeFoo: (received, expected) => {\n      if (received !== 'foo') {\n        return {\n          message: () => `expected ${received} to be foo`,\n          pass: false,\n        }\n      }\n    },\n  })\n\n  expect('foo').toBeFoo()\n  expect({ foo: 'foo' }).toEqual({ foo: expect.toBeFoo() })\n})\n```\n\nTIP\n\nIf you want your matchers to appear in every test, you should call this method inside [`setupFiles`](/config/#setupfiles).\n\nThis function is compatible with Jest's `expect.extend`, so any library that uses it to create custom matchers will work with Vitest.\n\nIf you are using TypeScript, since Vitest 0.31.0 you can extend default `Assertion` interface in an ambient declaration file (e.g: `vitest.d.ts`) with the code below:\n\nts\n\n```\ninterface CustomMatchers<R = unknown> {\n  toBeFoo: () => R\n}\n\ndeclare module 'vitest' {\n  interface Assertion<T = any> extends CustomMatchers<T> {}\n  interface AsymmetricMatchersContaining extends CustomMatchers {}\n}\n```\n\nWARNING\n\nDon't forget to include the ambient declaration file in your `tsconfig.json`.\n\nTIP\n\nIf you want to know more, checkout [guide on extending matchers](/guide/extending-matchers).\n\n## expect.addEqualityTesters [​](#expect-addequalitytesters)\n\n*   **Type:** `(tester: Array<Tester>) => void`\n\nYou can use this method to define custom testers, which are methods used by matchers, to test if two objects are equal. It is compatible with Jest's `expect.addEqualityTesters`.\n\nts\n\n```\nimport { expect, test } from 'vitest'\n\nclass AnagramComparator {\n  public word: string\n\n  constructor(word: string) {\n    this.word = word\n  }\n\n  equals(other: AnagramComparator): boolean {\n    const cleanStr1 = this.word.replace(/ /g, '').toLowerCase()\n    const cleanStr2 = other.word.replace(/ /g, '').toLowerCase()\n\n    const sortedStr1 = cleanStr1.split('').sort().join('')\n    const sortedStr2 = cleanStr2.split('').sort().join('')\n\n    return sortedStr1 === sortedStr2\n  }\n}\n\nfunction isAnagramComparator(a: unknown): a is AnagramComparator {\n  return a instanceof AnagramComparator\n}\n\nfunction areAnagramsEqual(a: unknown, b: unknown): boolean | undefined {\n  const isAAnagramComparator = isAnagramComparator(a)\n  const isBAnagramComparator = isAnagramComparator(b)\n\n  if (isAAnagramComparator && isBAnagramComparator) {\n    return a.equals(b)\n  }\n  else if (isAAnagramComparator === isBAnagramComparator) {\n    return undefined\n  }\n  else {\n    return false\n  }\n}\n\nexpect.addEqualityTesters([areAnagramsEqual])\n\ntest('custom equality tester', () => {\n  expect(new AnagramComparator('listen')).toEqual(new AnagramComparator('silent'))\n})\n```",
    "title": "expect | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/api/assert-type",
    "markdown": "# assertType | Vitest\n\nWARNING\n\nDuring runtime this function doesn't do anything. To [enable typechecking](https://vitest.dev/guide/testing-types#run-typechecking), don't forget to pass down `--typecheck` flag.\n\n*   **Type:** `<T>(value: T): void`\n\nYou can use this function as an alternative for [`expectTypeOf`](https://vitest.dev/api/expect-typeof) to easily assert that the argument type is equal to the generic provided.\n\nts\n\n```\nimport { assertType } from 'vitest'\n\nfunction concat(a: string, b: string): string\nfunction concat(a: number, b: number): number\nfunction concat(a: string | number, b: string | number): string | number\n\nassertType<string>(concat('a', 'b'))\nassertType<number>(concat(1, 2))\n// @ts-expect-error wrong types\nassertType(concat('a', 2))\n```",
    "title": "assertType | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/config/file",
    "markdown": "# Managing Vitest config file | Vitest\n\nIf you are using Vite and have a `vite.config` file, Vitest will read it to match with the plugins and setup as your Vite app. If you want to have a different configuration for testing or your main app doesn't rely on Vite specifically, you could either:\n\n*   Create `vitest.config.ts`, which will have the higher priority and will **override** the configuration from `vite.config.ts` (Vitest supports all conventional JS and TS extensions, but doesn't support `json`) - it means all options in your `vite.config` will be **ignored**\n*   Pass `--config` option to CLI, e.g. `vitest --config ./path/to/vitest.config.ts`\n*   Use `process.env.VITEST` or `mode` property on `defineConfig` (will be set to `test`/`benchmark` if not overridden with `--mode`) to conditionally apply different configuration in `vite.config.ts`\n\nTo configure `vitest` itself, add `test` property in your Vite config. You'll also need to add a reference to Vitest types using a [triple slash command](https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html#-reference-types-) at the top of your config file, if you are importing `defineConfig` from `vite` itself.\n\nUsing `defineConfig` from `vite` you should follow this:\n\nts\n\n```\n/// <reference types=\"vitest\" />\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  test: {\n    // ... Specify options here.\n  },\n})\n```\n\nUsing `defineConfig` from `vitest/config` you should follow this:\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    // ... Specify options here.\n  },\n})\n```\n\nYou can retrieve Vitest's default options to expand them if needed:\n\nts\n\n```\nimport { configDefaults, defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    exclude: [...configDefaults.exclude, 'packages/template/*'],\n  },\n})\n```\n\nWhen using a separate `vitest.config.js`, you can also extend Vite's options from another config file if needed:\n\nts\n\n```\nimport { defineConfig, mergeConfig } from 'vitest/config'\nimport viteConfig from './vite.config'\n\nexport default mergeConfig(viteConfig, defineConfig({\n  test: {\n    exclude: ['packages/template/*'],\n  },\n}))\n```\n\nIf your Vite config is defined as a function, you can define the config like this:\n\nts\n\n```\nimport { defineConfig, mergeConfig } from 'vitest/config'\nimport viteConfig from './vite.config'\n\nexport default defineConfig(configEnv => mergeConfig(\n  viteConfig(configEnv),\n  defineConfig({\n    test: {\n      exclude: ['packages/template/*'],\n    },\n  })\n))\n```",
    "title": "Managing Vitest config file | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/advanced/metadata",
    "markdown": "# Task Metadata | Vitest\n\nWARNING\n\nVitest exposes experimental private API. Breaking changes might not follow SemVer, please pin Vitest's version when using it.\n\nIf you are developing a custom reporter or using Vitest Node.js API, you might find it useful to pass data from tests that are being executed in various contexts to your reporter or custom Vitest handler.\n\nTo accomplish this, relying on the [test context](https://vitest.dev/guide/test-context) is not feasible since it cannot be serialized. However, with Vitest, you can utilize the `meta` property available on every task (suite or test) to share data between your tests and the Node.js process. It's important to note that this communication is one-way only, as the `meta` property can only be modified from within the test context. Any changes made within the Node.js context will not be visible in your tests.\n\nYou can populate `meta` property on test context or inside `beforeAll`/`afterAll` hooks for suite tasks.\n\nts\n\n```\nafterAll((suite) => {\n  suite.meta.done = true\n})\n\ntest('custom', ({ task }) => {\n  task.meta.custom = 'some-custom-handler'\n})\n```\n\nOnce a test is completed, Vitest will send a task including the result and `meta` to the Node.js process using RPC. To intercept and process this task, you can utilize the `onTaskUpdate` method available in your reporter implementation:\n\nts\n\n```\n// custom-reporter.js\nexport default {\n  // you can intercept packs if needed\n  onTaskUpdate(packs) {\n    const [id, result, meta] = packs[0]\n  },\n  // meta is located on every task inside \"onFinished\"\n  onFinished(files) {\n    files[0].meta.done === true\n    files[0].tasks[0].meta.custom === 'some-custom-handler'\n  }\n}\n```\n\nWARNING\n\nVitest can send several tasks at the same time if several tests are completed in a short period of time.\n\nBEWARE\n\nVitest uses different methods to communicate with the Node.js process.\n\n*   If Vitest runs tests inside worker threads, it will send data via [message port](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort)\n*   If Vitest uses child process, the data will be send as a serialized Buffer via [`process.send`](https://nodejs.org/api/process.html#processsendmessage-sendhandle-options-callback) API\n*   If Vitest runs tests in the browser, the data will be stringified using [flatted](https://www.npmjs.com/package/flatted) package\n\nThis property is also present on every test in the `json` reporter, so make sure that data can be serialized into JSON.\n\nAlso, make sure you serialize [Error properties](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#error_types) before you set them.\n\nYou can also get this information from Vitest state when tests finished running:\n\nts\n\n```\nconst vitest = await createVitest('test')\nawait vitest.start()\nvitest.state.getFiles()[0].meta.done === true\nvitest.state.getFiles()[0].tasks[0].meta.custom === 'some-custom-handler'\n```\n\nIt's also possible to extend type definitions when using TypeScript:\n\nts\n\n```\ndeclare module 'vitest' {\n  interface TaskMeta {\n    done?: boolean\n    custom?: string\n  }\n}\n```",
    "title": "Task Metadata | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/advanced/reporters",
    "markdown": "# Extending Reporters | Vitest\n\nYou can import reporters from `vitest/reporters` and extend them to create your custom reporters.\n\n## Extending Built-in Reporters [​](#extending-built-in-reporters)\n\nIn general, you don't need to create your reporter from scratch. `vitest` comes with several default reporting programs that you can extend.\n\nts\n\n```\nimport { DefaultReporter } from 'vitest/reporters'\n\nexport default class MyDefaultReporter extends DefaultReporter {\n  // do something\n}\n```\n\nOf course, you can create your reporter from scratch. Just extend the `BaseReporter` class and implement the methods you need.\n\nAnd here is an example of a custom reporter:\n\nts\n\n```\n// ./custom-reporter.js\nimport { BaseReporter } from 'vitest/reporters'\n\nexport default class CustomReporter extends BaseReporter {\n  onCollected() {\n    const files = this.ctx.state.getFiles(this.watchFilters)\n    this.reportTestSummary(files)\n  }\n}\n```\n\nOr implement the `Reporter` interface:\n\nts\n\n```\n// ./custom-reporter.js\nimport { Reporter } from 'vitest/reporters'\n\nexport default class CustomReporter implements Reporter {\n  onCollected() {\n    // print something\n  }\n}\n```\n\nThen you can use your custom reporter in the `vitest.config.ts` file:\n\nts\n\n```\nimport { defineConfig } from 'vitest/config'\nimport CustomReporter from './custom-reporter.js'\n\nexport default defineConfig({\n  test: {\n    reporters: [new CustomReporter()],\n  },\n})\n```\n\n## Exported Reporters [​](#exported-reporters)\n\n`vitest` comes with a few [built-in reporters](https://vitest.dev/guide/reporters) that you can use out of the box.\n\n### Built-in reporters: [​](#built-in-reporters)\n\n1.  `BasicReporter`\n2.  `DefaultReporter`\n3.  `DotReporter`\n4.  `JsonReporter`\n5.  `VerboseReporter`\n6.  `TapReporter`\n7.  `JUnitReporter`\n8.  `TapFlatReporter`\n9.  `HangingProcessReporter`\n\n### Base Abstract reporters: [​](#base-abstract-reporters)\n\n1.  `BaseReporter`\n\n### Interface reporters: [​](#interface-reporters)\n\n1.  `Reporter`",
    "title": "Extending Reporters | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/advanced/pool",
    "markdown": "# Custom Pool | Vitest\n\nWARNING\n\nThis is advanced API. If you are just running tests, you probably don't need this. It is primarily used by library authors.\n\nVitest runs tests in pools. By default, there are several pools:\n\n*   `threads` to run tests using `node:worker_threads` (isolation is provided with a new worker context)\n*   `forks` to run tests using `node:child_process` (isolation is provided with a new `child_process.fork` process)\n*   `vmThreads` to run tests using `node:worker_threads` (but isolation is provided with `vm` module instead of a new worker context)\n*   `browser` to run tests using browser providers\n*   `typescript` to run typechecking on tests\n\nYou can provide your own pool by specifying a file path:\n\nts\n\n```\nexport default defineConfig({\n  test: {\n    // will run every file with a custom pool by default\n    pool: './my-custom-pool.ts',\n    // you can provide options using `poolOptions` object\n    poolOptions: {\n      myCustomPool: {\n        customProperty: true,\n      },\n    },\n    // you can also specify pool for a subset of files\n    poolMatchGlobs: [\n      ['**/*.custom.test.ts', './my-custom-pool.ts'],\n    ],\n  },\n})\n```\n\n## API [​](#api)\n\nThe file specified in `pool` option should export a function (can be async) that accepts `Vitest` interface as its first option. This function needs to return an object matching `ProcessPool` interface:\n\nts\n\n```\nimport { ProcessPool, WorkspaceProject } from 'vitest/node'\n\nexport interface ProcessPool {\n  name: string\n  runTests: (files: [project: WorkspaceProject, testFile: string][], invalidates?: string[]) => Promise<void>\n  collectTests: (files: [project: WorkspaceProject, testFile: string][], invalidates?: string[]) => Promise<void>\n  close?: () => Promise<void>\n}\n```\n\nThe function is called only once (unless the server config was updated), and it's generally a good idea to initialize everything you need for tests inside that function and reuse it when `runTests` is called.\n\nVitest calls `runTest` when new tests are scheduled to run. It will not call it if `files` is empty. The first argument is an array of tuples: the first element is a reference to a workspace project and the second one is an absolute path to a test file. Files are sorted using [`sequencer`](https://vitest.dev/config/#sequence-sequencer) before `runTests` is called. It's possible (but unlikely) to have the same file twice, but it will always have a different project - this is implemented via [`vitest.workspace.ts`](https://vitest.dev/guide/workspace) configuration.\n\nVitest will wait until `runTests` is executed before finishing a run (i.e., it will emit [`onFinished`](https://vitest.dev/guide/reporters) only after `runTests` is resolved).\n\nIf you are using a custom pool, you will have to provide test files and their results yourself - you can reference [`vitest.state`](https://github.com/vitest-dev/vitest/blob/main/packages/vitest/src/node/state.ts) for that (most important are `collectFiles` and `updateTasks`). Vitest uses `startTests` function from `@vitest/runner` package to do that.\n\nVitest will call `collectTests` if `vitest.collect` is called or `vitest list` is invoked via a CLI command. It works the same way as `runTests`, but you don't have to run test callbacks, only report their tasks by calling `vitest.state.collectFiles(files)`.\n\nTo communicate between different processes, you can create methods object using `createMethodsRPC` from `vitest/node`, and use any form of communication that you prefer. For example, to use WebSockets with `birpc` you can write something like this:\n\nts\n\n```\nimport { createBirpc } from 'birpc'\nimport { parse, stringify } from 'flatted'\nimport { WorkspaceProject, createMethodsRPC } from 'vitest/node'\n\nfunction createRpc(project: WorkspaceProject, wss: WebSocketServer) {\n  return createBirpc(\n    createMethodsRPC(project),\n    {\n      post: msg => wss.send(msg),\n      on: fn => wss.on('message', fn),\n      serialize: stringify,\n      deserialize: parse,\n    },\n  )\n}\n```\n\nTo make sure every test is collected, you would call `ctx.state.collectFiles` and report it to Vitest reporters:\n\nts\n\n```\nasync function runTests(project: WorkspaceProject, tests: string[]) {\n  // ... running tests, put into \"files\" and \"tasks\"\n  const methods = createMethodsRPC(project)\n  await methods.onCollected(files)\n  // most reporters rely on results being updated in \"onTaskUpdate\"\n  await methods.onTaskUpdate(tasks)\n}\n```\n\nYou can see a simple example in [pool/custom-pool.ts](https://github.com/vitest-dev/vitest/blob/main/test/run/pool-custom-fixtures/pool/custom-pool.ts).",
    "title": "Custom Pool | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  },
  {
    "url": "https://vitest.dev/advanced/runner",
    "markdown": "# Test Runner | Vitest\n\nWARNING\n\nThis is advanced API. If you are just running tests, you probably don't need this. It is primarily used by library authors.\n\nYou can specify a path to your test runner with the `runner` option in your configuration file. This file should have a default export with a class implementing these methods:\n\nts\n\n```\nexport interface VitestRunner {\n  /**\n   * First thing that's getting called before actually collecting and running tests.\n   */\n  onBeforeCollect?: (paths: string[]) => unknown\n  /**\n   * Called after collecting tests and before \"onBeforeRun\".\n   */\n  onCollected?: (files: File[]) => unknown\n\n  /**\n   * Called when test runner should cancel next test runs.\n   * Runner should listen for this method and mark tests and suites as skipped in\n   * \"onBeforeRunSuite\" and \"onBeforeRunTask\" when called.\n   */\n  onCancel?: (reason: CancelReason) => unknown\n\n  /**\n   * Called before running a single test. Doesn't have \"result\" yet.\n   */\n  onBeforeRunTask?: (test: TaskPopulated) => unknown\n  /**\n   * Called before actually running the test function. Already has \"result\" with \"state\" and \"startTime\".\n   */\n  onBeforeTryTask?: (test: TaskPopulated, options: { retry: number; repeats: number }) => unknown\n  /**\n   * Called after result and state are set.\n   */\n  onAfterRunTask?: (test: TaskPopulated) => unknown\n  /**\n   * Called right after running the test function. Doesn't have new state yet. Will not be called, if the test function throws.\n   */\n  onAfterTryTask?: (test: TaskPopulated, options: { retry: number; repeats: number }) => unknown\n\n  /**\n   * Called before running a single suite. Doesn't have \"result\" yet.\n   */\n  onBeforeRunSuite?: (suite: Suite) => unknown\n  /**\n   * Called after running a single suite. Has state and result.\n   */\n  onAfterRunSuite?: (suite: Suite) => unknown\n\n  /**\n   * If defined, will be called instead of usual Vitest suite partition and handling.\n   * \"before\" and \"after\" hooks will not be ignored.\n   */\n  runSuite?: (suite: Suite) => Promise<void>\n  /**\n   * If defined, will be called instead of usual Vitest handling. Useful, if you have your custom test function.\n   * \"before\" and \"after\" hooks will not be ignored.\n   */\n  runTask?: (test: TaskPopulated) => Promise<void>\n\n  /**\n   * Called, when a task is updated. The same as \"onTaskUpdate\" in a reporter, but this is running in the same thread as tests.\n   */\n  onTaskUpdate?: (task: [string, TaskResult | undefined][]) => Promise<void>\n\n  /**\n   * Called before running all tests in collected paths.\n   */\n  onBeforeRunFiles?: (files: File[]) => unknown\n  /**\n   * Called right after running all tests in collected paths.\n   */\n  onAfterRunFiles?: (files: File[]) => unknown\n  /**\n   * Called when new context for a test is defined. Useful, if you want to add custom properties to the context.\n   * If you only want to define custom context with a runner, consider using \"beforeAll\" in \"setupFiles\" instead.\n   *\n   * This method is called for both \"test\" and \"custom\" handlers.\n   *\n   * @see https://vitest.dev/advanced/runner.html#your-task-function\n   */\n  extendTaskContext?: <T extends Test | Custom>(context: TaskContext<T>) => TaskContext<T>\n  /**\n   * Called, when certain files are imported. Can be called in two situations: when collecting tests and when importing setup files.\n   */\n  importFile: (filepath: string, source: VitestRunnerImportSource) => unknown\n  /**\n   * Publicly available configuration.\n   */\n  config: VitestRunnerConfig\n}\n```\n\nWhen initiating this class, Vitest passes down Vitest config, - you should expose it as a `config` property.\n\nWARNING\n\nVitest also injects an instance of `ViteNodeRunner` as `__vitest_executor` property. You can use it to process files in `importFile` method (this is default behavior of `TestRunner` and `BenchmarkRunner`).\n\n`ViteNodeRunner` exposes `executeId` method, which is used to import test files in a Vite-friendly environment. Meaning, it will resolve imports and transform file content at runtime so that Node can understand it.\n\nTIP\n\nSnapshot support and some other features depend on the runner. If you don't want to lose it, you can extend your runner from `VitestTestRunner` imported from `vitest/runners`. It also exposes `BenchmarkNodeRunner`, if you want to extend benchmark functionality.\n\n## Your Task Function [​](#your-task-function)\n\nYou can extend Vitest task system with your tasks. A task is an object that is part of a suite. It is automatically added to the current suite with a `suite.task` method:\n\njs\n\n```\n// ./utils/custom.js\nimport { createTaskCollector, getCurrentSuite, setFn } from 'vitest/suite'\n\nexport { describe, beforeAll, afterAll } from 'vitest'\n\n// this function will be called during collection phase:\n// don't call function handler here, add it to suite tasks\n// with \"getCurrentSuite().task()\" method\n// note: createTaskCollector provides support for \"todo\"/\"each\"/...\nexport const myCustomTask = createTaskCollector(\n  function (name, fn, timeout) {\n    getCurrentSuite().task(name, {\n      ...this, // so \"todo\"/\"skip\"/... is tracked correctly\n      meta: {\n        customPropertyToDifferentiateTask: true\n      },\n      handler: fn,\n      timeout,\n    })\n  }\n)\n```\n\njs\n\n```\n// ./garden/tasks.test.js\nimport { afterAll, beforeAll, describe, myCustomTask } from '../custom.js'\nimport { gardener } from './gardener.js'\n\ndescribe('take care of the garden', () => {\n  beforeAll(() => {\n    gardener.putWorkingClothes()\n  })\n\n  myCustomTask('weed the grass', () => {\n    gardener.weedTheGrass()\n  })\n  myCustomTask.todo('mow the lawn', () => {\n    gardener.mowerTheLawn()\n  })\n  myCustomTask('water flowers', () => {\n    gardener.waterFlowers()\n  })\n\n  afterAll(() => {\n    gardener.goHome()\n  })\n})\n```\n\nbash\n\n```\nvitest ./garden/tasks.test.js\n```\n\nWARNING\n\nIf you don't have a custom runner or didn't define `runTest` method, Vitest will try to retrieve a task automatically. If you didn't add a function with `setFn`, it will fail.\n\nTIP\n\nCustom task system supports hooks and contexts. If you want to support property chaining (like, `only`, `skip`, and your custom ones), you can import `createChainable` from `vitest/suite` and wrap your function with it. You will need to call `custom` as `custom.call(this)`, if you decide to do this.",
    "title": "Test Runner | Vitest",
    "description": "Next generation testing framework powered by Vite",
    "languageCode": "en-US"
  }
]