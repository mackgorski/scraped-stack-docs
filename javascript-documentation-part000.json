[
  {
    "url": "https://devdocs.io/javascript/",
    "markdown": "DevDocs — JavaScript documentation\n\nBack Apply",
    "title": "DevDocs — JavaScript documentation",
    "description": "JavaScript  API documentation with instant search, offline support, keyboard shortcuts, mobile version, and more.",
    "languageCode": "en"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript",
    "markdown": "# MDNMDN Web DocsMDN logoMozilla logo\n\n## JavaScript\n\n**JavaScript** (**JS**) is a lightweight interpreted (or [just-in-time](https://en.wikipedia.org/wiki/Just-in-time_compilation) compiled) programming language with [first-class functions](https://developer.mozilla.org/en-US/docs/Glossary/First-class_Function). While it is most well-known as the scripting language for Web pages, [many non-browser environments](https://en.wikipedia.org/wiki/JavaScript#Other_usage) also use it, such as [Node.js](https://developer.mozilla.org/en-US/docs/Glossary/Node.js), [Apache CouchDB](https://couchdb.apache.org/) and [Adobe Acrobat](https://opensource.adobe.com/dc-acrobat-sdk-docs/acrobatsdk/). JavaScript is a [prototype-based](https://developer.mozilla.org/en-US/docs/Glossary/Prototype-based_programming), multi-paradigm, [single-threaded](https://developer.mozilla.org/en-US/docs/Glossary/Thread), [dynamic](https://developer.mozilla.org/en-US/docs/Glossary/Dynamic_typing) language, supporting object-oriented, imperative, and declarative (e.g. functional programming) styles.\n\nJavaScript's dynamic capabilities include runtime object construction, variable parameter lists, function variables, dynamic script creation (via [`eval`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval)), object introspection (via [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) and [`Object` utilities](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#static_methods)), and source-code recovery (JavaScript functions store their source text and can be retrieved through [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString)).\n\nThis section is dedicated to the JavaScript language itself, and not the parts that are specific to Web pages or other host environments. For information about [APIs](https://developer.mozilla.org/en-US/docs/Glossary/API) that are specific to Web pages, please see [Web APIs](https://developer.mozilla.org/en-US/docs/Web/API) and [DOM](https://developer.mozilla.org/en-US/docs/Glossary/DOM).\n\nThe standards for JavaScript are the [ECMAScript Language Specification](https://tc39.es/ecma262/) (ECMA-262) and the [ECMAScript Internationalization API specification](https://tc39.es/ecma402/) (ECMA-402). As soon as one browser implements a feature, we try to document it. This means that cases where some [proposals for new ECMAScript features](https://github.com/tc39/proposals) have already been implemented in browsers, documentation and examples in MDN articles may use some of those new features. Most of the time, this happens between the [stages](https://tc39.es/process-document/) 3 and 4, and is usually before the spec is officially published.\n\nDo not confuse JavaScript with the [Java programming language](https://en.wikipedia.org/wiki/Java_(programming_language)) — **JavaScript is _not_ \"Interpreted Java\"**. Both \"Java\" and \"JavaScript\" are trademarks or registered trademarks of Oracle in the U.S. and other countries. However, the two programming languages have very different syntax, semantics, and use.\n\nJavaScript documentation of core language features (pure [ECMAScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/JavaScript_technologies_overview), for the most part) includes the following:\n\n*   The [JavaScript guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide)\n*   The [JavaScript reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference)\n\nFor more information about JavaScript specifications and related technologies, see [JavaScript technologies overview](https://developer.mozilla.org/en-US/docs/Web/JavaScript/JavaScript_technologies_overview).\n\n## [Tutorials](#tutorials)\n\nLearn how to program in JavaScript with guides and tutorials.\n\n### [For complete beginners](#for_complete_beginners)\n\nHead over to our [Learning Area JavaScript topic](https://developer.mozilla.org/en-US/docs/Learn/JavaScript) if you want to learn JavaScript but have no previous experience with JavaScript or programming. The complete modules available there are as follows:\n\n[JavaScript first steps](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps)\n\nAnswers some fundamental questions such as \"what is JavaScript?\", \"what does it look like?\", and \"what can it do?\", along with discussing key JavaScript features such as variables, strings, numbers, and arrays.\n\n[JavaScript building blocks](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks)\n\nContinues our coverage of JavaScript's key fundamental features, turning our attention to commonly-encountered types of code blocks such as conditional statements, loops, functions, and events.\n\n[Introducing JavaScript objects](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects)\n\nThe object-oriented nature of JavaScript is important to understand if you want to go further with your knowledge of the language and write more efficient code, therefore we've provided this module to help you.\n\n[Asynchronous JavaScript](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous)\n\nDiscusses asynchronous JavaScript, why it is important, and how it can be used to effectively handle potential blocking operations such as fetching resources from a server.\n\n[Client-side web APIs](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs)\n\nExplores what APIs are, and how to use some of the most common APIs you'll come across often in your development work.\n\n### [JavaScript guide](#javascript_guide)\n\n[JavaScript Guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide)\n\nA much more detailed guide to the JavaScript language, aimed at those with previous programming experience either in JavaScript or another language.\n\n### [Intermediate](#intermediate)\n\n[Understanding client-side JavaScript frameworks](https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks)\n\nJavaScript frameworks are an essential part of modern front-end web development, providing developers with proven tools for building scalable, interactive web applications. This module gives you some fundamental background knowledge about how client-side frameworks work and how they fit into your toolset, before moving on to a series of tutorials covering some of today's most popular ones.\n\n[JavaScript language overview](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_overview)\n\nAn overview of the basic syntax and semantics of JavaScript for those coming from other programming languages to get up to speed.\n\n[JavaScript data structures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures)\n\nOverview of available data structures in JavaScript.\n\n[Equality comparisons and sameness](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness)\n\nJavaScript provides three different value comparison operations: strict equality using `===`, loose equality using `==`, and the [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) method.\n\n[Enumerability and ownership of properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties)\n\nHow different methods that visit a group of object properties one-by-one handle the enumerability and ownership of properties.\n\n[Closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures)\n\nA closure is the combination of a function and the lexical environment within which that function was declared.\n\n### [Advanced](#advanced)\n\n[Inheritance and the prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n\nExplanation of the widely misunderstood and underestimated prototype-based inheritance.\n\n[Memory Management](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_management)\n\nMemory life cycle and garbage collection in JavaScript.\n\n[The event loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Event_loop)\n\nJavaScript has a runtime model based on an \"event loop\".\n\n## [Reference](#reference)\n\nBrowse the complete [JavaScript reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference) documentation.\n\n[Standard objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\n\nGet to know standard built-in objects [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean), [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date), [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error), [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function), [`JSON`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON), [`Math`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math), [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp), [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set), [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap), [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet), and others.\n\n[Expressions and operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators)\n\nLearn more about the behavior of JavaScript's operators [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof), [`typeof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof), [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new), [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this), the [operator precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence), and more.\n\n[Statements and declarations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements)\n\nLearn how [`do-while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while), [`for-in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in), [`for-of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of), [`try-catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch), [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var), [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const), [`if-else`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else), [`switch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch), and more JavaScript statements and keywords work.\n\n[Functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions)\n\nLearn how to work with JavaScript's functions to develop your applications.\n\n[Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\n\nJavaScript classes are the most appropriate way to do object-oriented programming.",
    "title": "JavaScript | MDN",
    "description": "JavaScript (JS) is a lightweight interpreted (or just-in-time compiled) programming language with first-class functions. While it is most well-known as the scripting language for Web pages, many non-browser environments also use it, such as Node.js, Apache CouchDB and Adobe Acrobat. JavaScript is a prototype-based, multi-paradigm, single-threaded, dynamic language, supporting object-oriented, imperative, and declarative (e.g. functional programming) styles.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition_assignment",
    "markdown": "# Addition assignment (+=) - JavaScript\n\nThe **addition assignment (`+=`)** operator performs [addition](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition) (which is either numeric addition or string concatenation) on the two operands and assigns the result to the left operand.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\n`x += y` is equivalent to `x = x + y`, except that the expression `x` is only evaluated once.\n\n## [Examples](#examples)\n\n### [Addition assignment using numbers](#addition_assignment_using_numbers)\n\n```\nlet bar = 5;\nbar += 2; // 7\n```\n\nOther non-string, non-BigInt values are coerced to numbers:\n\n```\nlet baz = true;\nbaz += 1; // 2\nbaz += false; // 2\n```\n\n### [Addition assignment using BigInts](#addition_assignment_using_bigints)\n\n```\nlet x = 1n;\nx += 2n; // 3n\n\nx += 1; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n```\n\n### [Addition assignment using strings](#addition_assignment_using_strings)\n\n```\nlet foo = \"foo\";\nfoo += false; // \"foofalse\"\nfoo += \"bar\"; // \"foofalsebar\"\n\nlet bar = 5;\nbar += \"foo\"; // \"5foo\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-assignment-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Addition assignment (+=) - JavaScript | MDN",
    "description": "The addition assignment (+=) operator performs addition (which is either numeric addition or string concatenation) on the two operands and assigns the result to the left operand.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Event_loop",
    "markdown": "# The event loop - JavaScript\n\nJavaScript has a runtime model based on an **event loop**, which is responsible for executing the code, collecting and processing events, and executing queued sub-tasks. This model is quite different from models in other languages like C and Java.\n\n## [Runtime concepts](#runtime_concepts)\n\nThe following sections explain a theoretical model. Modern JavaScript engines implement and heavily optimize the described semantics.\n\n### [Visual representation](#visual_representation)\n\n![A diagram showing how stacks are comprised of frames, heaps are comprised of objects, and queues are comprised of messages.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Event_loop/the_javascript_runtime_environment_example.svg)\n\n### [Stack](#stack)\n\nFunction calls form a stack of _frames_.\n\n```\nfunction foo(b) {\n  const a = 10;\n  return a + b + 11;\n}\n\nfunction bar(x) {\n  const y = 3;\n  return foo(x * y);\n}\n\nconst baz = bar(7); // assigns 42 to baz\n```\n\nOrder of operations:\n\n1.  When calling `bar`, a first frame is created containing references to `bar`'s arguments and local variables.\n2.  When `bar` calls `foo`, a second frame is created and pushed on top of the first one, containing references to `foo`'s arguments and local variables.\n3.  When `foo` returns, the top frame element is popped out of the stack (leaving only `bar`'s call frame).\n4.  When `bar` returns, the stack is empty.\n\nNote that the arguments and local variables may continue to exist, as they are stored outside the stack — so they can be accessed by any [nested functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#nested_functions_and_closures) long after their outer function has returned.\n\n### [Heap](#heap)\n\nObjects are allocated in a heap which is just a name to denote a large (mostly unstructured) region of memory.\n\n### [Queue](#queue)\n\nA JavaScript runtime uses a message queue, which is a list of messages to be processed. Each message has an associated function that gets called to handle the message.\n\nAt some point during the [event loop](#event_loop), the runtime starts handling the messages on the queue, starting with the oldest one. To do so, the message is removed from the queue and its corresponding function is called with the message as an input parameter. As always, calling a function creates a new stack frame for that function's use.\n\nThe processing of functions continues until the stack is once again empty. Then, the event loop will process the next message in the queue (if there is one).\n\n## [Event loop](#event_loop)\n\nThe **event loop** got its name because of how it's usually implemented, which usually resembles:\n\n```\nwhile (queue.waitForMessage()) {\n  queue.processNextMessage();\n}\n```\n\n`queue.waitForMessage()` waits synchronously for a message to arrive (if one is not already available and waiting to be handled).\n\n### [\"Run-to-completion\"](#run-to-completion)\n\nEach message is processed completely before any other message is processed.\n\nThis offers some nice properties when reasoning about your program, including the fact that whenever a function runs, it cannot be preempted and will run entirely before any other code runs (and can modify data the function manipulates). This differs from C, for instance, where if a function runs in a thread, it may be stopped at any point by the runtime system to run some other code in another thread.\n\nA downside of this model is that if a message takes too long to complete, the web application is unable to process user interactions like click or scroll. The browser mitigates this with the \"a script is taking too long to run\" dialog. A good practice to follow is to make message processing short and if possible cut down one message into several messages.\n\n### [Adding messages](#adding_messages)\n\nIn web browsers, messages are added anytime an event occurs and there is an event listener attached to it. If there is no listener, the event is lost. So a click on an element with a click event handler will add a message — likewise with any other event.\n\nThe first two arguments to the function [`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout) are a message to add to the queue and a time value (optional; defaults to `0`). The _time value_ represents the (minimum) delay after which the message will be pushed into the queue. If there is no other message in the queue, and the stack is empty, the message is processed right after the delay. However, if there are messages, the `setTimeout` message will have to wait for other messages to be processed. For this reason, the second argument indicates a _minimum_ time — not a _guaranteed_ time.\n\nHere is an example that demonstrates this concept (`setTimeout` does not run immediately after its timer expires):\n\n```\nconst seconds = new Date().getTime() / 1000;\n\nsetTimeout(() => {\n  // prints out \"2\", meaning that the callback is not called immediately after 500 milliseconds.\n  console.log(`Ran after ${new Date().getTime() / 1000 - seconds} seconds`);\n}, 500);\n\nwhile (true) {\n  if (new Date().getTime() / 1000 - seconds >= 2) {\n    console.log(\"Good, looped for 2 seconds\");\n    break;\n  }\n}\n```\n\n### [Zero delays](#zero_delays)\n\nZero delay doesn't mean the call back will fire-off after zero milliseconds. Calling [`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout) with a delay of `0` (zero) milliseconds doesn't execute the callback function after the given interval.\n\nThe execution depends on the number of waiting tasks in the queue. In the example below, the message `\"this is just a message\"` will be written to the console before the message in the callback gets processed, because the delay is the _minimum_ time required for the runtime to process the request (not a _guaranteed_ time).\n\nThe `setTimeout` needs to wait for all the code for queued messages to complete even though you specified a particular time limit for your `setTimeout`.\n\n```\n(() => {\n  console.log(\"this is the start\");\n\n  setTimeout(() => {\n    console.log(\"Callback 1: this is a msg from call back\");\n  }); // has a default time value of 0\n\n  console.log(\"this is just a message\");\n\n  setTimeout(() => {\n    console.log(\"Callback 2: this is a msg from call back\");\n  }, 0);\n\n  console.log(\"this is the end\");\n})();\n\n// \"this is the start\"\n// \"this is just a message\"\n// \"this is the end\"\n// \"Callback 1: this is a msg from call back\"\n// \"Callback 2: this is a msg from call back\"\n```\n\n### [Several runtimes communicating together](#several_runtimes_communicating_together)\n\nA web worker or a cross-origin `iframe` has its own stack, heap, and message queue. Two distinct runtimes can only communicate through sending messages via the [`postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) method. This method adds a message to the other runtime if the latter listens to `message` events.\n\n## [Never blocking](#never_blocking)\n\nA very interesting property of the event loop model is that JavaScript, unlike a lot of other languages, never blocks. Handling I/O is typically performed via events and callbacks, so when the application is waiting for an [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API) query to return or a [`fetch()`](https://developer.mozilla.org/en-US/docs/Web/API/fetch) request to return, it can still process other things like user input.\n\nLegacy exceptions exist like `alert` or synchronous XHR, but it is considered good practice to avoid them. Beware: [exceptions to the exception do exist](https://stackoverflow.com/questions/2734025/is-javascript-guaranteed-to-be-single-threaded/2734311#2734311) (but are usually implementation bugs, rather than anything else).\n\n## [See also](#see_also)\n\n*   [Event loops](https://html.spec.whatwg.org/multipage/webappapis.html#event-loops) in the HTML standard\n*   [What is the Event Loop?](https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#what-is-the-event-loop) in the Node.js docs",
    "title": "The event loop - JavaScript | MDN",
    "description": "JavaScript has a runtime model based on an event loop, which is responsible for executing the code, collecting and processing events, and executing queued sub-tasks. This model is quite different from models in other languages like C and Java.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction",
    "markdown": "# Introduction - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types)\n\nThis chapter introduces JavaScript and discusses some of its fundamental concepts.\n\n## [What you should already know](#what_you_should_already_know)\n\nThis guide assumes you have the following basic background:\n\n*   A general understanding of the Internet and the World Wide Web ([WWW](https://developer.mozilla.org/en-US/docs/Glossary/World_Wide_Web)).\n*   Good working knowledge of HyperText Markup Language ([HTML](https://developer.mozilla.org/en-US/docs/Glossary/HTML)).\n*   Some programming experience. If you are new to programming, try one of the tutorials linked on the main page about [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript).\n\n## [Where to find JavaScript information](#where_to_find_javascript_information)\n\nThe JavaScript documentation on MDN includes the following:\n\n*   [Learn Web Development](https://developer.mozilla.org/en-US/docs/Learn) provides information for beginners and introduces basic concepts of programming and the Internet.\n*   [JavaScript Guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide) (this guide) provides an overview about the JavaScript language and its objects.\n*   [JavaScript Reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference) provides detailed reference material for JavaScript.\n\nIf you are new to JavaScript, start with the articles in the [learning area](https://developer.mozilla.org/en-US/docs/Learn) and the [JavaScript Guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide). Once you have a firm grasp of the fundamentals, you can use the [JavaScript Reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference) to get more details on individual objects and statements.\n\n## [What is JavaScript?](#what_is_javascript)\n\nJavaScript is a cross-platform, object-oriented scripting language used to make webpages interactive (e.g., having complex animations, clickable buttons, popup menus, etc.). There are also more advanced server side versions of JavaScript such as Node.js, which allow you to add more functionality to a website than downloading files (such as realtime collaboration between multiple computers). Inside a host environment (for example, a web browser), JavaScript can be connected to the objects of its environment to provide programmatic control over them.\n\nJavaScript contains a standard library of objects, such as `Array`, `Date`, and `Math`, and a core set of language elements such as operators, control structures, and statements. Core JavaScript can be extended for a variety of purposes by supplementing it with additional objects; for example:\n\n*   _Client-side JavaScript_ extends the core language by supplying objects to control a browser and its _Document Object Model_ (DOM). For example, client-side extensions allow an application to place elements on an HTML form and respond to user events such as mouse clicks, form input, and page navigation.\n*   _Server-side JavaScript_ extends the core language by supplying objects relevant to running JavaScript on a server. For example, server-side extensions allow an application to communicate with a database, provide continuity of information from one invocation to another of the application, or perform file manipulations on a server.\n\nThis means that in the browser, JavaScript can change the way the webpage (DOM) looks. And, likewise, Node.js JavaScript on the server can respond to custom requests sent by code executed in the browser.\n\n## [JavaScript and Java](#javascript_and_java)\n\nJavaScript and Java are similar in some ways but fundamentally different in some others. The JavaScript language resembles Java but does not have Java's static typing and strong type checking. JavaScript follows most Java expression syntax, naming conventions and basic control-flow constructs which was the reason why it was renamed from LiveScript to JavaScript.\n\nIn contrast to Java's compile-time system of classes built by declarations, JavaScript supports a runtime system based on a small number of data types representing numeric, Boolean, and string values. JavaScript has a prototype-based object model instead of the more common class-based object model. The prototype-based model provides dynamic inheritance; that is, what is inherited can vary for individual objects. JavaScript also supports functions without any special declarative requirements. Functions can be properties of objects, executing as loosely typed methods.\n\nJavaScript is a very free-form language compared to Java. You do not have to declare all variables, classes, and methods. You do not have to be concerned with whether methods are public, private, or protected, and you do not have to implement interfaces. Variables, parameters, and function return types are not explicitly typed.\n\nJava is a class-based programming language designed for fast execution and type safety. Type safety means, for instance, that you can't cast a Java integer into an object reference or access private memory by corrupting the Java bytecode. Java's class-based model means that programs consist exclusively of classes and their methods. Java's class inheritance and strong typing generally require tightly coupled object hierarchies. These requirements make Java programming more complex than JavaScript programming.\n\nIn contrast, JavaScript descends in spirit from a line of smaller, dynamically typed languages such as HyperTalk and dBASE. These scripting languages offer programming tools to a much wider audience because of their easier syntax, specialized built-in functionality, and minimal requirements for object creation.\n\n| JavaScript | Java |\n| --- | --- |\n| Object-oriented. No distinction between types of objects. Inheritance is through the prototype mechanism, and properties and methods can be added to any object dynamically. | Class-based. Objects are divided into classes and instances with all inheritance through the class hierarchy. Classes and instances cannot have properties or methods added dynamically. |\n| Variable data types are not declared (dynamic typing, loosely typed). | Variable data types must be declared (static typing, strongly typed). |\n| Cannot automatically write to hard disk. | Can automatically write to hard disk. |\n\n## [JavaScript and the ECMAScript specification](#javascript_and_the_ecmascript_specification)\n\nJavaScript is standardized at [Ecma International](https://www.ecma-international.org/) — the European association for standardizing information and communication systems (ECMA was formerly an acronym for the European Computer Manufacturers Association) to deliver a standardized, international programming language based on JavaScript. This standardized version of JavaScript, called ECMAScript, behaves the same way in all applications that support the standard. Companies can use the open standard language to develop their implementation of JavaScript. The ECMAScript standard is documented in the ECMA-262 specification.\n\nThe ECMA-262 standard is also approved by the [ISO](https://www.iso.org/home.html) (International Organization for Standardization) as ISO-16262. You can also find the specification on [the Ecma International website](https://www.ecma-international.org/publications-and-standards/standards/ecma-262/). The ECMAScript specification does not describe the Document Object Model (DOM), which is standardized by the [World Wide Web Consortium (W3C)](https://www.w3.org/) and/or [WHATWG (Web Hypertext Application Technology Working Group)](https://whatwg.org/). The DOM defines the way in which HTML document objects are exposed to your script. To get a better idea about the different technologies that are used when programming with JavaScript, consult the article [JavaScript technologies overview](https://developer.mozilla.org/en-US/docs/Web/JavaScript/JavaScript_technologies_overview).\n\n### [JavaScript documentation versus the ECMAScript specification](#javascript_documentation_versus_the_ecmascript_specification)\n\nThe ECMAScript specification is a set of requirements for implementing ECMAScript. It is useful if you want to implement standards-compliant language features in your ECMAScript implementation or engine (such as SpiderMonkey in Firefox, or V8 in Chrome).\n\nThe ECMAScript document is _not_ intended to help script programmers. Use the JavaScript documentation for information when writing scripts.\n\nThe ECMAScript specification uses terminology and syntax that may be unfamiliar to a JavaScript programmer. Although the description of the language may differ in ECMAScript, the language itself remains the same. JavaScript supports all functionality outlined in the ECMAScript specification.\n\nThe JavaScript documentation describes aspects of the language that are appropriate for a JavaScript programmer.\n\n## [Getting started with JavaScript](#getting_started_with_javascript)\n\nTo get started with JavaScript, all you need is a modern web browser. Recent versions of [Firefox](https://www.mozilla.org/en-CA/firefox/new/), [Chrome](https://www.google.com/chrome/index.html), [Microsoft Edge](https://www.microsoft.com/en-us/edge), and [Safari](https://www.apple.com/safari/) all support the features discussed in this guide.\n\nA very useful tool for exploring JavaScript is the JavaScript Console (sometimes called the Web Console, or just the console): this is a tool which enables you to enter JavaScript and run it in the current page.\n\nThe screenshots here show the [Firefox Web Console](https://firefox-source-docs.mozilla.org/devtools-user/web_console/), but all modern browsers ship with a console that works in a similar way.\n\n### [Opening the console](#opening_the_console)\n\n### [Entering and running JavaScript](#entering_and_running_javascript)\n\nThe console appears at the bottom of the browser window. Along the bottom of the console is an input line that you can use to enter JavaScript, and the output appears in the panel above:\n\n![A browser window with the web console open at the bottom, containing two lines of input and output. Text can be entered below that.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction/2019-04-04_00-15-29.png)\n\nThe console works the exact same way as `eval`: the last expression entered is returned. For the sake of simplicity, it can be imagined that every time something is entered into the console, it is actually surrounded by `console.log` around `eval`, like so:\n\n```\nconsole.log(eval(\"3 + 5\"));\n```\n\n### [Multi-line input in the console](#multi-line_input_in_the_console)\n\nBy default, if you press Enter (or Return, depending on your keyboard) after entering a line of code, then the string you typed is executed. To enter multi-line input:\n\n*   If the string you typed was incomplete (for example, you typed `function foo() {`) then the console will treat Enter as a line break, and let you type another line.\n*   If you hold down Shift while pressing Enter, then the console will treat this as a line break, and let you type another line.\n*   In Firefox only, you can activate [multi-line input mode](https://firefox-source-docs.mozilla.org/devtools-user/web_console/the_command_line_interpreter/index.html#multi-line-mode), in which you can enter multiple lines in a mini-editor, then run the whole thing when you are ready.\n\nTo get started with writing JavaScript, open the console, copy the following code, and paste it in at the prompt:\n\n```\n(function () {\n  \"use strict\";\n  /* Start of your code */\n  function greetMe(yourName) {\n    alert(`Hello ${yourName}`);\n  }\n\n  greetMe(\"World\");\n  /* End of your code */\n})();\n```\n\nPress Enter to watch it unfold in your browser!\n\n## [What's next](#whats_next)\n\nIn the following pages, this guide introduces you to the JavaScript syntax and language features, so that you will be able to write more complex applications.\n\nBut for now, remember to always include the `(function(){\"use strict\";` before your code, and add `})();` to the end of your code. The [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) and [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE) articles explain what those do, but for now they can be thought of as doing the following:\n\n1.  Prevent semantics in JavaScript that trip up beginners.\n2.  Prevent code snippets executed in the console from interacting with one another (e.g., having something created in one console execution being used for a different console execution).\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types)",
    "title": "Introduction - JavaScript | MDN",
    "description": "This chapter introduces JavaScript and discusses some of its fundamental concepts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment",
    "markdown": "# Assignment (=) - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **assignment (`=`)** operator is used to assign a value to a variable or property. The assignment expression itself has a value, which is the assigned value. This allows multiple assignments to be chained in order to assign a single value to multiple variables.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`x`](#x)\n\nA valid assignment target, including an [identifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers) or a [property accessor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors). It can also be a [destructuring assignment pattern](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment).\n\n[`y`](#y)\n\nAn expression specifying the value to be assigned to `x`.\n\n### [Return value](#return_value)\n\nThe value of `y`.\n\n### [Exceptions](#exceptions)\n\n[`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)\n\nThrown in strict mode if assigning to an identifier that is not declared in the scope.\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown in strict mode if assigning to a [property that is not modifiable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#failing_to_assign_to_object_properties).\n\n## [Description](#description)\n\nThe assignment operator is completely different from the equals (`=`) sign used as syntactic separators in other locations, which include:\n\n*   Initializers of [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var), [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), and [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) declarations\n*   Default values of [destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#default_value)\n*   [Default parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters)\n*   Initializers of [class fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields)\n\nAll these places accept an assignment expression on the right-hand side of the `=`, so if you have multiple equals signs chained together:\n\nThis is equivalent to:\n\nWhich means `y` must be a pre-existing variable, and `x` is a newly declared `const` variable. `y` is assigned the value `5`, and `x` is initialized with the value of the `y = 5` expression, which is also `5`. If `y` is not a pre-existing variable, a global variable `y` is implicitly created in [non-strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), or a [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError) is thrown in strict mode. To declare two variables within the same declaration, use:\n\n## [Examples](#examples)\n\n### [Simple assignment and chaining](#simple_assignment_and_chaining)\n\n```\nlet x = 5;\nlet y = 10;\nlet z = 25;\n\nx = y; // x is 10\nx = y = z; // x, y and z are all 25\n```\n\n### [Value of assignment expressions](#value_of_assignment_expressions)\n\nThe assignment expression itself evaluates to the value of the right-hand side, so you can log the value and assign to a variable at the same time.\n\n```\nlet x;\nconsole.log(x); // undefined\nconsole.log(x = 2); // 2\nconsole.log(x); // 2\n```\n\n### [Unqualified identifier assignment](#unqualified_identifier_assignment)\n\nThe global object sits at the top of the scope chain. When attempting to resolve a name to a value, the scope chain is searched. This means that properties on the global object are conveniently visible from every scope, without having to qualify the names with `globalThis.` or `window.` or `global.`.\n\nBecause the global object has a `String` property (`Object.hasOwn(globalThis, \"String\")`), you can use the following code:\n\n```\nfunction foo() {\n  String(\"s\"); // The function `String` is globally available\n}\n```\n\nSo the global object will ultimately be searched for unqualified identifiers. You don't have to type `globalThis.String`; you can just type the unqualified `String`. To make this feature more conceptually consistent, assignment to unqualified identifiers will assume you want to create a property with that name on the global object (with `globalThis.` omitted), if there is no variable of the same name declared in the scope chain.\n\n```\nfoo = \"f\"; // In non-strict mode, assumes you want to create a property named `foo` on the global object\nObject.hasOwn(globalThis, \"foo\"); // true\n```\n\nIn [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#assigning_to_undeclared_variables), assignment to an unqualified identifier in strict mode will result in a `ReferenceError`, to avoid the accidental creation of properties on the global object.\n\nNote that the implication of the above is that, contrary to popular misinformation, JavaScript does not have implicit or undeclared variables. It just conflates the global object with the global scope and allows omitting the global object qualifier during property creation.\n\n### [Assignment with destructuring](#assignment_with_destructuring)\n\nThe left-hand side of can also be an assignment pattern. This allows assigning to multiple variables at once.\n\n```\nconst result = /(a+)(b+)(c+)/.exec(\"aaabcc\");\nlet a = \"\",\n  b = \"\",\n  c = \"\";\n[, a, b, c] = result;\nconsole.log(a, b, c); // \"aaa\" \"b\" \"cc\"\n```\n\nFor more information, see [Destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment).\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-assignment-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Assignment (=) - JavaScript | MDN",
    "description": "The assignment (=) operator is used to assign a value to a variable or property. The assignment expression itself has a value, which is the assigned value. This allows multiple assignments to be chained in order to assign a single value to multiple variables.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function",
    "markdown": "# async function expression - JavaScript\n\n## Baseline Widely available\n\nThe **`async function`** keywords can be used to define an async function inside an expression.\n\nYou can also define async functions using the [`async function` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) or the [arrow syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\n## [Syntax](#syntax)\n\n```\nasync function (param0) {\n  statements\n}\nasync function (param0, param1) {\n  statements\n}\nasync function (param0, param1, /* …, */ paramN) {\n  statements\n}\n\nasync function name(param0) {\n  statements\n}\nasync function name(param0, param1) {\n  statements\n}\nasync function name(param0, param1, /* …, */ paramN) {\n  statements\n}\n```\n\n**Note:** An [expression statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement) cannot begin with the keywords `async function` to avoid ambiguity with an [`async function` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function). The `async function` keywords only begin an expression when they appear in a context that cannot accept statements.\n\n### [Parameters](#parameters)\n\n[`name`](#name) Optional\n\nThe function name. Can be omitted, in which case the function is _anonymous_. The name is only local to the function body.\n\n[`paramN`](#paramn) Optional\n\nThe name of a formal parameter for the function. For the parameters' syntax, see the [Functions reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_parameters).\n\n[`statements`](#statements) Optional\n\nThe statements which comprise the body of the function.\n\n## [Description](#description)\n\nAn `async function` expression is very similar to, and has almost the same syntax as, an [`async function` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function). The main difference between an `async function` expression and an `async function` declaration is the _function name_, which can be omitted in `async function` expressions to create _anonymous_ functions. An `async function` expression can be used as an [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE) (Immediately Invoked Function Expression) which runs as soon as it is defined, allowing you to mimic [top-level await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#top_level_await). See also the chapter about [functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions) for more information.\n\n## [Examples](#examples)\n\n### [Using async function expression](#using_async_function_expression)\n\n```\nfunction resolveAfter2Seconds(x) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(x);\n    }, 2000);\n  });\n}\n\n// async function expression assigned to a variable\nconst add = async function (x) {\n  const a = await resolveAfter2Seconds(20);\n  const b = await resolveAfter2Seconds(30);\n  return x + a + b;\n};\n\nadd(10).then((v) => {\n  console.log(v); // prints 60 after 4 seconds.\n});\n\n// async function expression used as an IIFE\n(async function (x) {\n  const p1 = resolveAfter2Seconds(20);\n  const p2 = resolveAfter2Seconds(30);\n  return x + (await p1) + (await p2);\n})(10).then((v) => {\n  console.log(v); // prints 60 after 2 seconds.\n});\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-async-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-async-function-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "async function expression - JavaScript | MDN",
    "description": "The async function keywords can be used to define an async function inside an expression.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects",
    "markdown": "# Standard built-in objects - JavaScript\n\nThis chapter documents all of JavaScript's standard, built-in objects, including their methods and properties.\n\nThe term \"global objects\" (or standard built-in objects) here is not to be confused with **the global object**. Here, \"global objects\" refer to **objects in the global scope**.\n\nThe **global object** itself can be accessed using the [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) operator in the global scope. In fact, the global scope **consists of** the properties of the global object, including inherited properties, if any.\n\nOther objects in the global scope are either [created by the user script](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects#creating_new_objects) or provided by the host application. The host objects available in browser contexts are documented in the [API reference](https://developer.mozilla.org/en-US/docs/Web/API).\n\nFor more information about the distinction between the [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model) and core [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript), see [JavaScript technologies overview](https://developer.mozilla.org/en-US/docs/Web/JavaScript/JavaScript_technologies_overview).\n\n## [Standard objects by category](#standard_objects_by_category)\n\n### [Value properties](#value_properties)\n\nThese global properties return a simple value. They have no properties or methods.\n\n*   [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis)\n*   [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity)\n*   [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN)\n*   [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined)\n\n### [Function properties](#function_properties)\n\nThese global functions—functions which are called globally, rather than on an object—directly return their results to the caller.\n\n*   [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval)\n*   [`isFinite()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)\n*   [`isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN)\n*   [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat)\n*   [`parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt)\n*   [`decodeURI()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI)\n*   [`decodeURIComponent()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent)\n*   [`encodeURI()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI)\n*   [`encodeURIComponent()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent)\n*   [`escape()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape) Deprecated\n*   [`unescape()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape) Deprecated\n\n### [Fundamental objects](#fundamental_objects)\n\nThese objects represent fundamental language constructs.\n\n*   [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)\n*   [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function)\n*   [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)\n*   [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n\n### [Error objects](#error_objects)\n\nError objects are a special type of fundamental object. They include the basic [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) type, as well as several specialized error types.\n\n*   [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)\n*   [`AggregateError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError)\n*   [`EvalError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError)\n*   [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n*   [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)\n*   [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError)\n*   [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n*   [`URIError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError)\n*   [`InternalError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError) Non-standard\n\n### [Numbers and dates](#numbers_and_dates)\n\nThese are the base objects representing numbers, dates, and mathematical calculations.\n\n*   [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\n*   [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt)\n*   [`Math`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math)\n*   [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)\n\n### [Text processing](#text_processing)\n\nThese objects represent strings and support manipulating them.\n\n*   [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)\n*   [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n\n### [Indexed collections](#indexed_collections)\n\nThese objects represent collections of data which are ordered by an index value. This includes (typed) arrays and array-like constructs.\n\n*   [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\n*   [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array)\n*   [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n*   [`Uint8ClampedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray)\n*   [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array)\n*   [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array)\n*   [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array)\n*   [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array)\n*   [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array)\n*   [`BigUint64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array)\n*   [`Float16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array)\n*   [`Float32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array)\n*   [`Float64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array)\n\n### [Keyed collections](#keyed_collections)\n\nThese objects represent collections which use keys. The iterable collections ([`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) and [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set)) contain elements which are easily iterated in the order of insertion.\n\n*   [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)\n*   [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set)\n*   [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap)\n*   [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet)\n\n### [Structured data](#structured_data)\n\nThese objects represent and interact with structured data buffers and data coded using JavaScript Object Notation (JSON).\n\n*   [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)\n*   [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer)\n*   [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView)\n*   [`Atomics`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics)\n*   [`JSON`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON)\n\n### [Managing memory](#managing_memory)\n\nThese objects interact with the garbage collection mechanism.\n\n*   [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef)\n*   [`FinalizationRegistry`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry)\n\n### [Control abstraction objects](#control_abstraction_objects)\n\nControl abstractions can help to structure code, especially async code (without using deeply nested callbacks, for example).\n\n*   [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)\n*   [`AsyncIterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator)\n*   [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n*   [`GeneratorFunction`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction)\n*   [`AsyncGeneratorFunction`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction)\n*   [`Generator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator)\n*   [`AsyncGenerator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator)\n*   [`AsyncFunction`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction)\n\n### [Reflection](#reflection)\n\n### [Internationalization](#internationalization)",
    "title": "Standard built-in objects - JavaScript | MDN",
    "description": "This chapter documents all of JavaScript's standard, built-in objects, including their methods and properties.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types",
    "markdown": "# Grammar and types - JavaScript\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling)\n\nThis chapter discusses JavaScript's basic grammar, variable declarations, data types and literals.\n\n## [Basics](#basics)\n\nJavaScript borrows most of its syntax from Java, C, and C++, but it has also been influenced by Awk, Perl, and Python.\n\nJavaScript is **case-sensitive** and uses the **Unicode** character set. For example, the word Früh (which means \"early\" in German) could be used as a variable name.\n\nBut, the variable `früh` is not the same as `Früh` because JavaScript is case sensitive.\n\nIn JavaScript, instructions are called [statements](https://developer.mozilla.org/en-US/docs/Glossary/Statement) and are separated by semicolons (;).\n\nA semicolon is not necessary after a statement if it is written on its own line. But if more than one statement on a line is desired, then they _must_ be separated by semicolons.\n\n**Note:** ECMAScript also has rules for automatic insertion of semicolons ([ASI](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion)) to end statements. (For more information, see the detailed reference about JavaScript's [lexical grammar](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar).)\n\nIt is considered best practice, however, to always write a semicolon after a statement, even when it is not strictly needed. This practice reduces the chances of bugs getting into the code.\n\nThe source text of JavaScript script gets scanned from left to right, and is converted into a sequence of input elements which are _tokens_, _control characters_, _line terminators_, _comments_, or [whitespace](https://developer.mozilla.org/en-US/docs/Glossary/Whitespace). (Spaces, tabs, and newline characters are considered whitespace.)\n\nThe syntax of **comments** is the same as in C++ and in many other languages:\n\n```\n// a one line comment\n\n/* this is a longer,\n * multi-line comment\n */\n```\n\nYou can't nest block comments. This often happens when you accidentally include a `*/` sequence in your comment, which will terminate the comment.\n\n```\n/* You can't, however, /* nest comments */ SyntaxError */\n```\n\nIn this case, you need to break up the `*/` pattern. For example, by inserting a backslash:\n\n```\n/* You can /* nest comments *\\/ by escaping slashes */\n```\n\nComments behave like whitespace, and are discarded during script execution.\n\n**Note:** You might also see a third type of comment syntax at the start of some JavaScript files, which looks something like this: `#!/usr/bin/env node`.\n\nThis is called **hashbang comment** syntax, and is a special comment used to specify the path to a particular JavaScript engine that should execute the script. See [Hashbang comments](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#hashbang_comments) for more details.\n\n## [Declarations](#declarations)\n\nJavaScript has three kinds of variable declarations.\n\n[`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var)\n\nDeclares a variable, optionally initializing it to a value.\n\n[`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let)\n\nDeclares a block-scoped, local variable, optionally initializing it to a value.\n\n[`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const)\n\nDeclares a block-scoped, read-only named constant.\n\n### [Variables](#variables)\n\nYou use variables as symbolic names for values in your application. The names of variables, called [identifiers](https://developer.mozilla.org/en-US/docs/Glossary/Identifier), conform to certain rules.\n\nA JavaScript identifier usually starts with a letter, underscore (`_`), or dollar sign (`$`). Subsequent characters can also be digits (`0` – `9`). Because JavaScript is case sensitive, letters include the characters `A` through `Z` (uppercase) as well as `a` through `z` (lowercase).\n\nYou can use most Unicode letters such as `å` and `ü` in identifiers. (For more details, see the [lexical grammar](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers) reference.) You can also use [Unicode escape sequences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#string_literals) to represent characters in identifiers.\n\nSome examples of legal names are `Number_hits`, `temp99`, `$credit`, and `_name`.\n\n### [Declaring variables](#declaring_variables)\n\nYou can declare a variable in two ways:\n\n*   With the keyword [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var). For example, `var x = 42`. This syntax can be used to declare both **local** and **global** variables, depending on the _execution context_.\n*   With the keyword [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) or [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let). For example, `let y = 13`. This syntax can be used to declare a block-scope local variable. (See [Variable scope](#variable_scope) below.)\n\nYou can declare variables to unpack values using the [destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) syntax. For example, `const { bar } = foo`. This will create a variable named `bar` and assign to it the value corresponding to the key of the same name from our object `foo`.\n\nVariables should always be declared before they are used. JavaScript used to allow assigning to undeclared variables, which creates an **[undeclared global](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#description)** variable. This is an error in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#assigning_to_undeclared_variables) and should be avoided altogether.\n\n### [Declaration and initialization](#declaration_and_initialization)\n\nIn a statement like `let x = 42`, the `let x` part is called a _declaration_, and the `= 42` part is called an _initializer_. The declaration allows the variable to be accessed later in code without throwing a [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError), while the initializer assigns a value to the variable. In `var` and `let` declarations, the initializer is optional. If a variable is declared without an initializer, it is assigned the value [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).\n\n```\nlet x;\nconsole.log(x); // logs \"undefined\"\n```\n\nIn essence, `let x = 42` is equivalent to `let x; x = 42`.\n\n`const` declarations always need an initializer, because they forbid any kind of assignment after declaration, and implicitly initializing it with `undefined` is likely a programmer mistake.\n\n```\nconst x; // SyntaxError: Missing initializer in const declaration\n```\n\n### [Variable scope](#variable_scope)\n\nA variable may belong to one of the following [scopes](https://developer.mozilla.org/en-US/docs/Glossary/Scope):\n\n*   Global scope: The default scope for all code running in script mode.\n*   Module scope: The scope for code running in module mode.\n*   Function scope: The scope created with a [function](https://developer.mozilla.org/en-US/docs/Glossary/Function).\n\nIn addition, variables declared with [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) or [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) can belong to an additional scope:\n\n*   Block scope: The scope created with a pair of curly braces (a [block](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block)).\n\nWhen you declare a variable outside of any function, it is called a _global_ variable, because it is available to any other code in the current document. When you declare a variable within a function, it is called a _local_ variable, because it is available only within that function.\n\n`let` and `const` declarations can also be scoped to the [block statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#block_statement) that they are declared in.\n\n```\nif (Math.random() > 0.5) {\n  const y = 5;\n}\nconsole.log(y); // ReferenceError: y is not defined\n```\n\nHowever, variables created with `var` are not block-scoped, but only local to the _function (or global scope)_ that the block resides within.\n\nFor example, the following code will log `5`, because the scope of `x` is the global context (or the function context if the code is part of a function). The scope of `x` is not limited to the immediate `if` statement block.\n\n```\nif (true) {\n  var x = 5;\n}\nconsole.log(x); // x is 5\n```\n\n### [Variable hoisting](#variable_hoisting)\n\n`var`\\-declared variables are [hoisted](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting), meaning you can refer to the variable anywhere in its scope, even if its declaration isn't reached yet. You can see `var` declarations as being \"lifted\" to the top of its function or global scope. However, if you access a variable before it's declared, the value is always `undefined`, because only its _declaration_ and _default initialization (with `undefined`)_ is hoisted, but not its _value assignment_.\n\n```\nconsole.log(x === undefined); // true\nvar x = 3;\n\n(function () {\n  console.log(x); // undefined\n  var x = \"local value\";\n})();\n```\n\nThe above examples will be interpreted the same as:\n\n```\nvar x;\nconsole.log(x === undefined); // true\nx = 3;\n\n(function () {\n  var x;\n  console.log(x); // undefined\n  x = \"local value\";\n})();\n```\n\nBecause of hoisting, all `var` statements in a function should be placed as near to the top of the function as possible. This best practice increases the clarity of the code.\n\nWhether `let` and `const` are hoisted is a matter of definition debate. Referencing the variable in the block before the variable declaration always results in a [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError), because the variable is in a \"[temporal dead zone](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz)\" from the start of the block until the declaration is processed.\n\n```\nconsole.log(x); // ReferenceError\nconst x = 3;\n\nconsole.log(y); // ReferenceError\nlet y = 3;\n```\n\nUnlike `var` declarations, which only hoist the declaration but not its value, [function declarations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_hoisting) are hoisted entirely — you can safely call the function anywhere in its scope. See the [hoisting](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting) glossary entry for more discussion.\n\n### [Global variables](#global_variables)\n\nGlobal variables are in fact properties of the _global object_.\n\nIn web pages, the global object is [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window), so you can read and set global variables using the `window.variable` syntax. In all environments, the [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) variable (which itself is a global variable) may be used to read and set global variables. This is to provide a consistent interface among various JavaScript runtimes.\n\nConsequently, you can access global variables declared in one window or frame from another window or frame by specifying the `window` or `frame` name. For example, if a variable called `phoneNumber` is declared in a document, you can refer to this variable from an `iframe` as `parent.phoneNumber`.\n\n### [Constants](#constants)\n\nYou can create a read-only, named constant with the [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) keyword. The syntax of a constant identifier is the same as any variable identifier: it must start with a letter, underscore, or dollar sign (`$`), and can contain alphabetic, numeric, or underscore characters.\n\nA constant cannot change value through assignment or be re-declared while the script is running. It must be initialized to a value. The scope rules for constants are the same as those for `let` block-scope variables.\n\nYou cannot declare a constant with the same name as a function or variable in the same scope. For example:\n\n```\n// THIS WILL CAUSE AN ERROR\nfunction f() {}\nconst f = 5;\n\n// THIS WILL CAUSE AN ERROR TOO\nfunction f() {\n  const g = 5;\n  var g;\n}\n```\n\nHowever, `const` only prevents _re-assignments_, but doesn't prevent _mutations_. The properties of objects assigned to constants are not protected, so the following statement is executed without problems.\n\n```\nconst MY_OBJECT = { key: \"value\" };\nMY_OBJECT.key = \"otherValue\";\n```\n\nAlso, the contents of an array are not protected, so the following statement is executed without problems.\n\n```\nconst MY_ARRAY = [\"HTML\", \"CSS\"];\nMY_ARRAY.push(\"JAVASCRIPT\");\nconsole.log(MY_ARRAY); // ['HTML', 'CSS', 'JAVASCRIPT'];\n```\n\n## [Data structures and types](#data_structures_and_types)\n\n### [Data types](#data_types)\n\nThe latest ECMAScript standard defines eight data types:\n\n*   Seven data types that are [primitives](https://developer.mozilla.org/en-US/docs/Glossary/Primitive):\n    1.  [Boolean](https://developer.mozilla.org/en-US/docs/Glossary/Boolean). `true` and `false`.\n    2.  [null](https://developer.mozilla.org/en-US/docs/Glossary/Null). A special keyword denoting a null value. (Because JavaScript is case-sensitive, `null` is not the same as `Null`, `NULL`, or any other variant.)\n    3.  [undefined](https://developer.mozilla.org/en-US/docs/Glossary/Undefined). A top-level property whose value is not defined.\n    4.  [Number](https://developer.mozilla.org/en-US/docs/Glossary/Number). An integer or floating point number. For example: `42` or `3.14159`.\n    5.  [BigInt](https://developer.mozilla.org/en-US/docs/Glossary/BigInt). An integer with arbitrary precision. For example: `9007199254740992n`.\n    6.  [String](https://developer.mozilla.org/en-US/docs/Glossary/String). A sequence of characters that represent a text value. For example: `\"Howdy\"`.\n    7.  [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol). A data type whose instances are unique and immutable.\n*   and [Object](https://developer.mozilla.org/en-US/docs/Glossary/Object)\n\nAlthough these data types are relatively few, they enable you to perform useful operations with your applications. [Functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions) are the other fundamental elements of the language. While functions are technically a kind of object, you can think of objects as named containers for values, and functions as procedures that your script can perform.\n\n### [Data type conversion](#data_type_conversion)\n\nJavaScript is a _dynamically typed_ language. This means you don't have to specify the data type of a variable when you declare it. It also means that data types are automatically converted as-needed during script execution.\n\nSo, for example, you could define a variable as follows:\n\nAnd later, you could assign the same variable a string value, for example:\n\n```\nanswer = \"Thanks for all the fish!\";\n```\n\nBecause JavaScript is dynamically typed, this assignment does not cause an error message.\n\n### [Numbers and the '+' operator](#numbers_and_the_operator)\n\nIn expressions involving numeric and string values with the `+` operator, JavaScript converts numeric values to strings. For example, consider the following statements:\n\n```\nx = \"The answer is \" + 42; // \"The answer is 42\"\ny = 42 + \" is the answer\"; // \"42 is the answer\"\nz = \"37\" + 7; // \"377\"\n```\n\nWith all other operators, JavaScript does _not_ convert numeric values to strings. For example:\n\n```\n\"37\" - 7; // 30\n\"37\" * 7; // 259\n```\n\n### [Converting strings to numbers](#converting_strings_to_numbers)\n\nIn the case that a value representing a number is in memory as a string, there are methods for conversion.\n\n*   [`parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt)\n*   [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat)\n\n`parseInt` only returns whole numbers, so its use is diminished for decimals.\n\n**Note:** Additionally, a best practice for `parseInt` is to always include the _radix_ parameter. The radix parameter is used to specify which numerical system is to be used.\n\nAn alternative method of retrieving a number from a string is with the `+` (unary plus) operator:\n\n```\n\"1.1\" + \"1.1\"; // '1.11.1'\n(+\"1.1\") + (+\"1.1\"); // 2.2\n// Note: the parentheses are added for clarity, not required.\n```\n\n## [Literals](#literals)\n\n_Literals_ represent values in JavaScript. These are fixed values—not variables—that you _literally_ provide in your script. This section describes the following types of literals:\n\n*   [Array literals](#array_literals)\n*   [Boolean literals](#boolean_literals)\n*   [Numeric literals](#numeric_literals)\n*   [Object literals](#object_literals)\n*   [RegExp literals](#regexp_literals)\n*   [String literals](#string_literals)\n\n### [Array literals](#array_literals)\n\nAn array literal is a list of zero or more expressions, each of which represents an array element, enclosed in square brackets (`[]`). When you create an array using an array literal, it is initialized with the specified values as its elements, and its `length` is set to the number of arguments specified.\n\nThe following example creates the `coffees` array with three elements and a `length` of three:\n\n```\nconst coffees = [\"French Roast\", \"Colombian\", \"Kona\"];\n```\n\nAn array literal creates a new array object every time the literal is evaluated. For example, an array defined with a literal in the global scope is created once when the script loads. However, if the array literal is inside a function, a new array is instantiated every time that function is called.\n\n**Note:** Array literals create `Array` objects. See [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) and [Indexed collections](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections) for details on `Array` objects.\n\nIf you put two commas in a row in an array literal, the array leaves an empty slot for the unspecified element. The following example creates the `fish` array:\n\n```\nconst fish = [\"Lion\", , \"Angel\"];\n```\n\nWhen you log this array, you will see:\n\n```\nconsole.log(fish);\n// [ 'Lion', <1 empty item>, 'Angel' ]\n```\n\nNote that the second item is \"empty\", which is not exactly the same as the actual `undefined` value. When using array-traversing methods like [`Array.prototype.map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), empty slots are skipped. However, index-accessing `fish[1]` still returns `undefined`.\n\nIf you include a trailing comma at the end of the list of elements, the comma is ignored.\n\nIn the following example, the `length` of the array is three. There is no `myList[3]`. All other commas in the list indicate a new element.\n\n```\nconst myList = [\"home\", , \"school\"];\n```\n\nIn the following example, the `length` of the array is four, and `myList[0]` and `myList[2]` are missing.\n\n```\nconst myList = [, \"home\", , \"school\"];\n```\n\nIn the following example, the `length` of the array is four, and `myList[1]` and `myList[3]` are missing. **Only the last comma is ignored.**\n\n```\nconst myList = [\"home\", , \"school\", ,];\n```\n\n**Note:** [Trailing commas](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas) help keep git diffs clean when you have a multi-line array, because appending an item to the end only adds one line, but does not modify the previous line.\n\n```\nconst myList = [\n  \"home\",\n  \"school\",\n+ \"hospital\",\n];\n```\n\nUnderstanding the behavior of extra commas is important to understanding JavaScript as a language.\n\nHowever, when writing your own code, you should explicitly declare the missing elements as `undefined`, or at least insert a comment to highlight its absence. Doing this increases your code's clarity and maintainability.\n\n```\nconst myList = [\"home\", /* empty */, \"school\", /* empty */, ];\n```\n\n### [Boolean literals](#boolean_literals)\n\nThe Boolean type has two literal values: `true` and `false`.\n\n**Note:** Do not confuse the primitive Boolean values `true` and `false` with the true and false values of the [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) object.\n\nThe Boolean object is a wrapper around the primitive Boolean data type. See [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) for more information.\n\n### [Numeric literals](#numeric_literals)\n\nJavaScript numeric literals include integer literals in different bases as well as floating-point literals in base-10.\n\nNote that the language specification requires numeric literals to be unsigned. Nevertheless, code fragments like `-123.4` are fine, being interpreted as a unary `-` operator applied to the numeric literal `123.4`.\n\n#### Integer literals\n\nInteger and [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) literals can be written in decimal (base 10), hexadecimal (base 16), octal (base 8) and binary (base 2).\n\n*   A _decimal_ integer literal is a sequence of digits without a leading `0` (zero).\n*   A leading `0` (zero) on an integer literal, or a leading `0o` (or `0O`) indicates it is in _octal_. Octal integer literals can include only the digits `0` – `7`.\n*   A leading `0x` (or `0X`) indicates a _hexadecimal_ integer literal. Hexadecimal integers can include digits (`0` – `9`) and the letters `a` – `f` and `A` – `F`. (The case of a character does not change its value. Therefore: `0xa` = `0xA` = `10` and `0xf` = `0xF` = `15`.)\n*   A leading `0b` (or `0B`) indicates a _binary_ integer literal. Binary integer literals can only include the digits `0` and `1`.\n*   A trailing `n` suffix on an integer literal indicates a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) literal. The [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) literal can use any of the above bases. Note that leading-zero octal syntax like `0123n` is not allowed, but `0o123n` is fine.\n\nSome examples of integer literals are:\n\n0, 117, 123456789123456789n             (decimal, base 10)\n015, 0001, 0o777777777777n              (octal, base 8)\n0x1123, 0x00111, 0x123456789ABCDEFn     (hexadecimal, \"hex\" or base 16)\n0b11, 0b0011, 0b11101001010101010101n   (binary, base 2)\n\nFor more information, see [Numeric literals in the Lexical grammar reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_literals).\n\n#### Floating-point literals\n\nA floating-point literal can have the following parts:\n\n*   An unsigned decimal integer,\n*   A decimal point (`.`),\n*   A fraction (another decimal number),\n*   An exponent.\n\nThe exponent part is an `e` or `E` followed by an integer, which can be signed (preceded by `+` or `-`). A floating-point literal must have at least one digit, and either a decimal point or `e` (or `E`).\n\nMore succinctly, the syntax is:\n\n\\[digits\\].\\[digits\\]\\[(E|e)\\[(+|-)\\]digits\\]\n\nFor example:\n\n```\n3.1415926\n.123456789\n3.1E+12\n.1e-23\n```\n\n### [Object literals](#object_literals)\n\nAn object literal is a list of zero or more pairs of property names and associated values of an object, enclosed in curly braces (`{}`).\n\n**Warning:** Do not use an object literal at the beginning of a statement! This will lead to an error (or not behave as you expect), because the `{` will be interpreted as the beginning of a block.\n\nThe following is an example of an object literal. The first element of the `car` object defines a property, `myCar`, and assigns to it a new string, `\"Saturn\"`; the second element, the `getCar` property, is immediately assigned the result of invoking the function `(carTypes(\"Honda\"))`; the third element, the `special` property, uses an existing variable (`sales`).\n\n```\nconst sales = \"Toyota\";\n\nfunction carTypes(name) {\n  return name === \"Honda\" ? name : `Sorry, we don't sell ${name}.`;\n}\n\nconst car = { myCar: \"Saturn\", getCar: carTypes(\"Honda\"), special: sales };\n\nconsole.log(car.myCar); // Saturn\nconsole.log(car.getCar); // Honda\nconsole.log(car.special); // Toyota\n```\n\nAdditionally, you can use a numeric or string literal for the name of a property or nest an object inside another. The following example uses these options.\n\n```\nconst car = { manyCars: { a: \"Saab\", b: \"Jeep\" }, 7: \"Mazda\" };\n\nconsole.log(car.manyCars.b); // Jeep\nconsole.log(car[7]); // Mazda\n```\n\nObject property names can be any string, including the empty string. If the property name would not be a valid JavaScript [identifier](https://developer.mozilla.org/en-US/docs/Glossary/Identifier) or number, it must be enclosed in quotes.\n\nProperty names that are not valid identifiers cannot be accessed as a dot (`.`) property.\n\n```\nconst unusualPropertyNames = {\n  '': 'An empty string',\n  '!': 'Bang!'\n}\nconsole.log(unusualPropertyNames.'');   // SyntaxError: Unexpected string\nconsole.log(unusualPropertyNames.!);    // SyntaxError: Unexpected token !\n```\n\nInstead, they must be accessed with the bracket notation (`[]`).\n\n```\nconsole.log(unusualPropertyNames[\"\"]); // An empty string\nconsole.log(unusualPropertyNames[\"!\"]); // Bang!\n```\n\n#### Enhanced Object literals\n\nObject literals support a range of shorthand syntaxes that include setting the prototype at construction, shorthand for `foo: foo` assignments, defining methods, making `super` calls, and computing property names with expressions.\n\nTogether, these also bring object literals and class declarations closer together, and allow object-based design to benefit from some of the same conveniences.\n\n```\nconst obj = {\n  // __proto__\n  __proto__: theProtoObj,\n  // Shorthand for 'handler: handler'\n  handler,\n  // Methods\n  toString() {\n    // Super calls\n    return \"d \" + super.toString();\n  },\n  // Computed (dynamic) property names\n  [\"prop_\" + (() => 42)()]: 42,\n};\n```\n\n### [RegExp literals](#regexp_literals)\n\nA regex literal (which is defined in detail [later](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions)) is a pattern enclosed between slashes. The following is an example of a regex literal.\n\n### [String literals](#string_literals)\n\nA string literal is zero or more characters enclosed in double (`\"`) or single (`'`) quotation marks. A string must be delimited by quotation marks of the same type (that is, either both single quotation marks, or both double quotation marks).\n\nThe following are examples of string literals:\n\n```\n'foo'\n\"bar\"\n'1234'\n'one line \\n another line'\n\"Joyo's cat\"\n```\n\nYou should use string literals unless you specifically need to use a `String` object. See [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) for details on `String` objects.\n\nYou can call any of the [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) object's methods on a string literal value. JavaScript automatically converts the string literal to a temporary String object, calls the method, then discards the temporary String object. You can also use the `length` property with a string literal:\n\n```\n// Will print the number of symbols in the string including whitespace.\nconsole.log(\"Joyo's cat\".length); // In this case, 10.\n```\n\n[Template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) are also available. Template literals are enclosed by the back-tick (`` ` ``) ([grave accent](https://en.wikipedia.org/wiki/Grave_accent)) character instead of double or single quotes.\n\nTemplate literals provide syntactic sugar for constructing strings. (This is similar to string interpolation features in Perl, Python, and more.)\n\n```\n// Basic literal string creation\n`In JavaScript '\\n' is a line-feed.`\n\n// Multiline strings\n`In JavaScript, template strings can run\n over multiple lines, but double and single\n quoted strings cannot.`\n\n// String interpolation\nconst name = 'Lev', time = 'today';\n`Hello ${name}, how are you ${time}?`\n```\n\n[Tagged templates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates) are a compact syntax for specifying a template literal along with a call to a \"tag\" function for parsing it. A tagged template is just a more succinct and semantic way to invoke a function that processes a string and a set of relevant values. The name of the template tag function precedes the template literal — as in the following example, where the template tag function is named `print`. The `print` function will interpolate the arguments and serialize any objects or arrays that may come up, avoiding the pesky `[object Object]`.\n\n```\nconst formatArg = (arg) => {\n  if (Array.isArray(arg)) {\n    // Print a bulleted list\n    return arg.map((part) => `- ${part}`).join(\"\\n\");\n  }\n  if (arg.toString === Object.prototype.toString) {\n    // This object will be serialized to \"[object Object]\".\n    // Let's print something nicer.\n    return JSON.stringify(arg);\n  }\n  return arg;\n};\n\nconst print = (segments, ...args) => {\n  // For any well-formed template literal, there will always be N args and\n  // (N+1) string segments.\n  let message = segments[0];\n  segments.slice(1).forEach((segment, index) => {\n    message += formatArg(args[index]) + segment;\n  });\n  console.log(message);\n};\n\nconst todos = [\n  \"Learn JavaScript\",\n  \"Learn Web APIs\",\n  \"Set up my website\",\n  \"Profit!\",\n];\n\nconst progress = { javascript: 20, html: 50, css: 10 };\n\nprint`I need to do:\n${todos}\nMy current progress is: ${progress}\n`;\n\n// I need to do:\n// - Learn JavaScript\n// - Learn Web APIs\n// - Set up my website\n// - Profit!\n// My current progress is: {\"javascript\":20,\"html\":50,\"css\":10}\n```\n\nSince tagged template literals are just sugar of function calls, you can re-write the above as an equivalent function call:\n\n```\nprint([\"I need to do:\\n\", \"\\nMy current progress is: \", \"\\n\"], todos, progress);\n```\n\nThis may be reminiscent of the `console.log`\\-style interpolation:\n\n```\nconsole.log(\"I need to do:\\n%o\\nMy current progress is: %o\\n\", todos, progress);\n```\n\nYou can see how the tagged template reads more naturally than a traditional \"formatter\" function, where the variables and the template itself have to be declared separately.\n\n#### Using special characters in strings\n\nIn addition to ordinary characters, you can also include special characters in strings, as shown in the following example.\n\n```\n\"one line \\n another line\";\n```\n\nThe following table lists the special characters that you can use in JavaScript strings.\n\n| Character | Meaning |\n| --- | --- |\n| `\\0` | Null Byte |\n| `\\b` | Backspace |\n| `\\f` | Form Feed |\n| `\\n` | New Line |\n| `\\r` | Carriage Return |\n| `\\t` | Tab |\n| `\\v` | Vertical tab |\n| `\\'` | Apostrophe or single quote |\n| `\\\"` | Double quote |\n| `\\\\` | Backslash character |\n| `\\XXX` | The character with the Latin-1 encoding specified by up to three octal digits `XXX` between `0` and `377`. For example, `\\251` is the octal sequence for the copyright symbol. |\n| `\\xXX` | The character with the Latin-1 encoding specified by the two hexadecimal digits `XX` between `00` and `FF`. For example, `\\xA9` is the hexadecimal sequence for the copyright symbol. |\n| `\\uXXXX` | The Unicode character specified by the four hexadecimal digits `XXXX`. For example, `\\u00A9` is the Unicode sequence for the copyright symbol. See [Unicode escape sequences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#string_literals). |\n| `\\u{XXXXX}` | Unicode code point escapes. For example, `\\u{2F804}` is the same as the simple Unicode escapes `\\uD87E\\uDC04`. |\n\n#### Escaping characters\n\nFor characters not listed in the table, a preceding backslash is ignored, but this usage is deprecated and should be avoided.\n\nYou can insert a quotation mark inside a string by preceding it with a backslash. This is known as _escaping_ the quotation mark. For example:\n\n```\nconst quote = \"He read \\\"The Cremation of Sam McGee\\\" by R.W. Service.\";\nconsole.log(quote);\n```\n\nThe result of this would be:\n\nHe read \"The Cremation of Sam McGee\" by R.W. Service.\n\nTo include a literal backslash inside a string, you must escape the backslash character. For example, to assign the file path `c:\\temp` to a string, use the following:\n\nYou can also escape line breaks by preceding them with backslash. The backslash and line break are both removed from the value of the string.\n\n```\nconst str =\n  \"this string \\\nis broken \\\nacross multiple \\\nlines.\";\nconsole.log(str); // this string is broken across multiple lines.\n```\n\n## [More information](#more_information)\n\nThis chapter focuses on basic syntax for declarations and types. To learn more about JavaScript's language constructs, see also the following chapters in this guide:\n\n*   [Control flow and error handling](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling) guide\n*   [Loops and iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration)\n*   [Functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions)\n*   [Expressions and operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators) guide\n\nIn the next chapter, we will have a look at control flow constructs and error handling.\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling)",
    "title": "Grammar and types - JavaScript | MDN",
    "description": "This chapter discusses JavaScript's basic grammar, variable declarations, data types and literals.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference",
    "markdown": "# JavaScript reference - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe JavaScript reference serves as a repository of facts about the JavaScript language. The entire language is described here in detail. As you write JavaScript code, you'll refer to these pages often (thus the title \"JavaScript reference\").\n\nThe JavaScript language is intended to be used within some larger environment, be it a browser, server-side scripts, or similar. For the most part, this reference attempts to be environment-agnostic and does not target a web browser environment.\n\nIf you are new to JavaScript, start with the [guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide). Once you have a firm grasp of the fundamentals, you can use the reference to get more details on individual objects and language constructs.\n\n## [Built-ins](#built-ins)\n\n[JavaScript standard built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects), along with their methods and properties.\n\n### [Value properties](#value_properties)\n\n### [Function properties](#function_properties)\n\n### [Fundamental objects](#fundamental_objects)\n\n### [Error objects](#error_objects)\n\n### [Numbers and dates](#numbers_and_dates)\n\n### [Text processing](#text_processing)\n\n### [Indexed collections](#indexed_collections)\n\n### [Keyed collections](#keyed_collections)\n\n### [Structured data](#structured_data)\n\n### [Managing memory](#managing_memory)\n\n### [Control abstraction objects](#control_abstraction_objects)\n\n### [Reflection](#reflection)\n\n### [Internationalization](#internationalization)\n\n## [Statements](#statements)\n\n### [Control flow](#control_flow)\n\n### [Declaring variables](#declaring_variables)\n\n### [Functions and classes](#functions_and_classes)\n\n### [Iterations](#iterations)\n\n### [Others](#others)\n\n## [Expressions and operators](#expressions_and_operators)\n\n### [Primary expressions](#primary_expressions)\n\n### [Left-hand-side expressions](#left-hand-side_expressions)\n\n### [Increment and decrement](#increment_and_decrement)\n\n### [Unary operators](#unary_operators)\n\n### [Arithmetic operators](#arithmetic_operators)\n\n*   [`**`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation)\n*   [`*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication)\n*   [`/`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division)\n*   [`%`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder)\n*   [`+`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition) (Plus)\n*   [`-`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction)\n\n### [Relational operators](#relational_operators)\n\n*   [`<`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than) (Less than)\n*   [`>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than) (Greater than)\n*   [`<=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal)\n*   [`>=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal)\n*   [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof)\n*   [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in)\n\n### [Equality operators](#equality_operators)\n\n### [Bitwise shift operators](#bitwise_shift_operators)\n\n### [Binary bitwise operators](#binary_bitwise_operators)\n\n### [Binary logical operators](#binary_logical_operators)\n\n### [Conditional (ternary) operator](#conditional_ternary_operator)\n\n### [Assignment operators](#assignment_operators)\n\n### [Yield operators](#yield_operators)\n\n### [Spread syntax](#spread_syntax)\n\n### [Comma operator](#comma_operator)\n\n## [Functions](#functions)\n\n## [Classes](#classes)\n\n## [Additional reference pages](#additional_reference_pages)",
    "title": "JavaScript reference - JavaScript | MDN",
    "description": "The JavaScript reference serves as a repository of facts about the JavaScript language. The entire language is described here in detail. As you write JavaScript code, you'll refer to these pages often (thus the title \"JavaScript reference\").",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError",
    "markdown": "# AggregateError - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`AggregateError`** object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by [`Promise.any()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any), when all promises passed to it reject.\n\n`AggregateError` is a subclass of [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n## [Constructor](#constructor)\n\n[`AggregateError()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError/AggregateError)\n\nCreates a new `AggregateError` object.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)_.\n\nThese properties are defined on `AggregateError.prototype` and shared by all `AggregateError` instances.\n\n[`AggregateError.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `AggregateError` instances, the initial value is the [`AggregateError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError/AggregateError) constructor.\n\n[`AggregateError.prototype.name`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name)\n\nRepresents the name for the type of error. For `AggregateError.prototype.name`, the initial value is `\"AggregateError\"`.\n\nThese properties are own properties of each `AggregateError` instance.\n\n[`errors`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError/errors)\n\nAn array representing the errors that were aggregated.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)_.\n\n## [Examples](#examples)\n\n### [Catching an AggregateError](#catching_an_aggregateerror)\n\n```\nPromise.any([Promise.reject(new Error(\"some error\"))]).catch((e) => {\n  console.log(e instanceof AggregateError); // true\n  console.log(e.message); // \"All Promises rejected\"\n  console.log(e.name); // \"AggregateError\"\n  console.log(e.errors); // [ Error: \"some error\" ]\n});\n```\n\n### [Creating an AggregateError](#creating_an_aggregateerror)\n\n```\ntry {\n  throw new AggregateError([new Error(\"some error\")], \"Hello\");\n} catch (e) {\n  console.log(e instanceof AggregateError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"AggregateError\"\n  console.log(e.errors); // [ Error: \"some error\" ]\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-aggregate-error-objects](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-aggregate-error-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "AggregateError - JavaScript | MDN",
    "description": "The AggregateError object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by Promise.any(), when all promises passed to it reject.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling",
    "markdown": "# Control flow and error handling - JavaScript\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration)\n\nJavaScript supports a compact set of statements, specifically control flow statements, that you can use to incorporate a great deal of interactivity in your application. This chapter provides an overview of these statements.\n\nThe [JavaScript reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements) contains exhaustive details about the statements in this chapter. The semicolon (`;`) character is used to separate statements in JavaScript code.\n\nAny JavaScript expression is also a statement. See [Expressions and operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators) for complete information about expressions.\n\n## [Block statement](#block_statement)\n\nThe most basic statement is a _block statement_, which is used to group statements. The block is delimited by a pair of curly braces:\n\n```\n{\n  statement1;\n  statement2;\n  // …\n  statementN;\n}\n```\n\n### [Example](#example)\n\nBlock statements are commonly used with control flow statements (`if`, `for`, `while`).\n\nHere, `{ x++; }` is the block statement.\n\n**Note:** [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var)\\-declared variables are not block-scoped, but are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. For example:\n\n```\nvar x = 1;\n{\n  var x = 2;\n}\nconsole.log(x); // 2\n```\n\nThis outputs `2` because the `var x` statement within the block is in the same scope as the `var x` statement before the block. (In C or Java, the equivalent code would have output `1`.)\n\nThis scoping effect can be mitigated by using [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) or [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const).\n\n## [Conditional statements](#conditional_statements)\n\nA conditional statement is a set of commands that executes if a specified condition is true. JavaScript supports two conditional statements: `if...else` and `switch`.\n\n### [if...else statement](#if...else_statement)\n\nUse the `if` statement to execute a statement if a logical condition is `true`. Use the optional `else` clause to execute a statement if the condition is `false`.\n\nAn `if` statement looks like this:\n\n```\nif (condition) {\n  statement1;\n} else {\n  statement2;\n}\n```\n\nHere, the `condition` can be any expression that evaluates to `true` or `false`. (See [Boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#description) for an explanation of what evaluates to `true` and `false`.)\n\nIf `condition` evaluates to `true`, `statement_1` is executed. Otherwise, `statement_2` is executed. `statement_1` and `statement_2` can be any statement, including further nested `if` statements.\n\nYou can also compound the statements using `else if` to have multiple conditions tested in sequence, as follows:\n\n```\nif (condition1) {\n  statement1;\n} else if (condition2) {\n  statement2;\n} else if (conditionN) {\n  statementN;\n} else {\n  statementLast;\n}\n```\n\nIn the case of multiple conditions, only the first logical condition which evaluates to `true` will be executed. To execute multiple statements, group them within a block statement (`{ /* … */ }`).\n\n#### Best practice\n\nIn general, it's good practice to always use block statements—_especially_ when nesting `if` statements:\n\n```\nif (condition) {\n  // Statements for when condition is true\n  // …\n} else {\n  // Statements for when condition is false\n  // …\n}\n```\n\nIn general it's good practice to not have an `if...else` with an assignment like `x = y` as a condition:\n\n```\nif (x = y) {\n  // statements here\n}\n```\n\nHowever, in the rare case you find yourself wanting to do something like that, the [`while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while) documentation has a [Using an assignment as a condition](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while#using_an_assignment_as_a_condition) section with guidance on a general best-practice syntax you should know about and follow.\n\n#### Falsy values\n\nThe following values evaluate to `false` (also known as [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) values):\n\n*   `false`\n*   `undefined`\n*   `null`\n*   `0`\n*   `NaN`\n*   the empty string (`\"\"`)\n\nAll other values—including all objects—evaluate to `true` when passed to a conditional statement.\n\n**Note:** Do not confuse the primitive boolean values `true` and `false` with the true and false values of the [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) object!\n\nFor example:\n\n```\nconst b = new Boolean(false);\nif (b) {\n  // this condition evaluates to true\n}\nif (b == true) {\n  // this condition evaluates to false\n}\n```\n\n#### Example\n\nIn the following example, the function `checkData` returns `true` if the number of characters in a `Text` object is three. Otherwise, it displays an alert and returns `false`.\n\n```\nfunction checkData() {\n  if (document.form1.threeChar.value.length === 3) {\n    return true;\n  } else {\n    alert(\n      `Enter exactly three characters. ${document.form1.threeChar.value} is not valid.`,\n    );\n    return false;\n  }\n}\n```\n\n### [switch statement](#switch_statement)\n\nA `switch` statement allows a program to evaluate an expression and attempt to match the expression's value to a `case` label. If a match is found, the program executes the associated statement.\n\nA `switch` statement looks like this:\n\n```\nswitch (expression) {\n  case label1:\n    statements1;\n    break;\n  case label2:\n    statements2;\n    break;\n  // …\n  default:\n    statementsDefault;\n}\n```\n\nJavaScript evaluates the above switch statement as follows:\n\n*   The program first looks for a `case` clause with a label matching the value of expression and then transfers control to that clause, executing the associated statements.\n*   If no matching label is found, the program looks for the optional `default` clause:\n    *   If a `default` clause is found, the program transfers control to that clause, executing the associated statements.\n    *   If no `default` clause is found, the program resumes execution at the statement following the end of `switch`.\n    *   (By convention, the `default` clause is written as the last clause, but it does not need to be so.)\n\n#### break statements\n\nThe optional `break` statement associated with each `case` clause ensures that the program breaks out of `switch` once the matched statement is executed, and then continues execution at the statement following `switch`. If `break` is omitted, the program continues execution inside the `switch` statement (and will execute statements under the next `case`, and so on).\n\n##### Example\n\nIn the following example, if `fruitType` evaluates to `'Bananas'`, the program matches the value with case `'Bananas'` and executes the associated statement. When `break` is encountered, the program exits the `switch` and continues execution from the statement following `switch`. If `break` were omitted, the statement for `case 'Cherries'` would also be executed.\n\n```\nswitch (fruitType) {\n  case \"Oranges\":\n    console.log(\"Oranges are $0.59 a pound.\");\n    break;\n  case \"Apples\":\n    console.log(\"Apples are $0.32 a pound.\");\n    break;\n  case \"Bananas\":\n    console.log(\"Bananas are $0.48 a pound.\");\n    break;\n  case \"Cherries\":\n    console.log(\"Cherries are $3.00 a pound.\");\n    break;\n  case \"Mangoes\":\n    console.log(\"Mangoes are $0.56 a pound.\");\n    break;\n  case \"Papayas\":\n    console.log(\"Mangoes and papayas are $2.79 a pound.\");\n    break;\n  default:\n    console.log(`Sorry, we are out of ${fruitType}.`);\n}\nconsole.log(\"Is there anything else you'd like?\");\n```\n\n## [Exception handling statements](#exception_handling_statements)\n\nYou can throw exceptions using the `throw` statement and handle them using the `try...catch` statements.\n\n*   [`throw` statement](#throw_statement)\n*   [`try...catch` statement](#try...catch_statement)\n\n### [Exception types](#exception_types)\n\nJust about any object can be thrown in JavaScript. Nevertheless, not all thrown objects are created equal. While it is common to throw numbers or strings as errors, it is frequently more effective to use one of the exception types specifically created for this purpose:\n\n*   [ECMAScript exceptions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#error_types)\n*   [`DOMException`](https://developer.mozilla.org/en-US/docs/Web/API/DOMException)\n\n### [throw statement](#throw_statement)\n\nUse the `throw` statement to throw an exception. A `throw` statement specifies the value to be thrown:\n\nYou may throw any expression, not just expressions of a specific type. The following code throws several exceptions of varying types:\n\n```\nthrow \"Error2\"; // String type\nthrow 42; // Number type\nthrow true; // Boolean type\nthrow {\n  toString() {\n    return \"I'm an object!\";\n  },\n};\n```\n\n### [`try...catch` statement](#try...catch_statement)\n\nThe `try...catch` statement marks a block of statements to try, and specifies one or more responses should an exception be thrown. If an exception is thrown, the `try...catch` statement catches it.\n\nThe `try...catch` statement consists of a `try` block, which contains one or more statements, and a `catch` block, containing statements that specify what to do if an exception is thrown in the `try` block.\n\nIn other words, you want the `try` block to succeed—but if it does not, you want control to pass to the `catch` block. If any statement within the `try` block (or in a function called from within the `try` block) throws an exception, control _immediately_ shifts to the `catch` block. If no exception is thrown in the `try` block, the `catch` block is skipped. The `finally` block executes after the `try` and `catch` blocks execute but before the statements following the `try...catch` statement.\n\nThe following example uses a `try...catch` statement. The example calls a function that retrieves a month name from an array based on the value passed to the function. If the value does not correspond to a month number (`1` – `12`), an exception is thrown with the value `'InvalidMonthNo'` and the statements in the `catch` block set the `monthName` variable to `'unknown'`.\n\n```\nfunction getMonthName(mo) {\n  mo--; // Adjust month number for array index (so that 0 = Jan, 11 = Dec)\n  const months = [\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n  ];\n  if (months[mo]) {\n    return months[mo];\n  } else {\n    throw new Error(\"InvalidMonthNo\"); // throw keyword is used here\n  }\n}\n\ntry {\n  // statements to try\n  monthName = getMonthName(myMonth); // function could throw exception\n} catch (e) {\n  monthName = \"unknown\";\n  logMyErrors(e); // pass exception object to error handler (i.e. your own function)\n}\n```\n\n#### The catch block\n\nYou can use a `catch` block to handle all exceptions that may be generated in the `try` block.\n\n```\ncatch (exception) {\n  statements\n}\n```\n\nThe `catch` block specifies an identifier (`exception` in the preceding syntax) that holds the value specified by the `throw` statement. You can use this identifier to get information about the exception that was thrown.\n\nJavaScript creates this identifier when the `catch` block is entered. The identifier lasts only for the duration of the `catch` block. Once the `catch` block finishes executing, the identifier no longer exists.\n\nFor example, the following code throws an exception. When the exception occurs, control transfers to the `catch` block.\n\n```\ntry {\n  throw \"myException\"; // generates an exception\n} catch (err) {\n  // statements to handle any exceptions\n  logMyErrors(err); // pass exception object to error handler\n}\n```\n\n**Note:** When logging errors to the console inside a `catch` block, using `console.error()` rather than `console.log()` is advised for debugging. It formats the message as an error, and adds it to the list of error messages generated by the page.\n\n#### The finally block\n\nThe `finally` block contains statements to be executed _after_ the `try` and `catch` blocks execute. Additionally, the `finally` block executes _before_ the code that follows the `try…catch…finally` statement.\n\nIt is also important to note that the `finally` block will execute _whether or not_ an exception is thrown. If an exception is thrown, however, the statements in the `finally` block execute even if no `catch` block handles the exception that was thrown.\n\nYou can use the `finally` block to make your script fail gracefully when an exception occurs. For example, you may need to release a resource that your script has tied up.\n\nThe following example opens a file and then executes statements that use the file. (Server-side JavaScript allows you to access files.) If an exception is thrown while the file is open, the `finally` block closes the file before the script fails. Using `finally` here _ensures_ that the file is never left open, even if an error occurs.\n\n```\nopenMyFile();\ntry {\n  writeMyFile(theData); // This may throw an error\n} catch (e) {\n  handleError(e); // If an error occurred, handle it\n} finally {\n  closeMyFile(); // Always close the resource\n}\n```\n\nIf the `finally` block returns a value, this value becomes the return value of the entire `try…catch…finally` production, regardless of any `return` statements in the `try` and `catch` blocks:\n\n```\nfunction f() {\n  try {\n    console.log(0);\n    throw \"bogus\";\n  } catch (e) {\n    console.log(1);\n    // This return statement is suspended\n    // until finally block has completed\n    return true;\n    console.log(2); // not reachable\n  } finally {\n    console.log(3);\n    return false; // overwrites the previous \"return\"\n    console.log(4); // not reachable\n  }\n  // \"return false\" is executed now\n  console.log(5); // not reachable\n}\nconsole.log(f()); // 0, 1, 3, false\n```\n\nOverwriting of return values by the `finally` block also applies to exceptions thrown or re-thrown inside of the `catch` block:\n\n```\nfunction f() {\n  try {\n    throw \"bogus\";\n  } catch (e) {\n    console.log('caught inner \"bogus\"');\n    // This throw statement is suspended until\n    // finally block has completed\n    throw e;\n  } finally {\n    return false; // overwrites the previous \"throw\"\n  }\n  // \"return false\" is executed now\n}\n\ntry {\n  console.log(f());\n} catch (e) {\n  // this is never reached!\n  // while f() executes, the `finally` block returns false,\n  // which overwrites the `throw` inside the above `catch`\n  console.log('caught outer \"bogus\"');\n}\n\n// Logs:\n// caught inner \"bogus\"\n// false\n```\n\n#### Nesting try...catch statements\n\nYou can nest one or more `try...catch` statements.\n\nIf an inner `try` block does _not_ have a corresponding `catch` block:\n\n1.  it _must_ contain a `finally` block, and\n2.  the enclosing `try...catch` statement's `catch` block is checked for a match.\n\nFor more information, see [nested try-blocks](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#nested_try_blocks) on the [`try...catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) reference page.\n\n### [Utilizing Error objects](#utilizing_error_objects)\n\nDepending on the type of error, you may be able to use the `name` and `message` properties to get a more refined message.\n\nThe `name` property provides the general class of `Error` (such as `DOMException` or `Error`), while `message` generally provides a more succinct message than one would get by converting the error object to a string.\n\nIf you are throwing your own exceptions, in order to take advantage of these properties (such as if your `catch` block doesn't discriminate between your own exceptions and system ones), you can use the `Error` constructor.\n\nFor example:\n\n```\nfunction doSomethingErrorProne() {\n  if (ourCodeMakesAMistake()) {\n    throw new Error(\"The message\");\n  } else {\n    doSomethingToGetAJavaScriptError();\n  }\n}\n\ntry {\n  doSomethingErrorProne();\n} catch (e) {\n  // Now, we actually use `console.error()`\n  console.error(e.name); // 'Error'\n  console.error(e.message); // 'The message', or a JavaScript error message\n}\n```\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration)",
    "title": "Control flow and error handling - JavaScript | MDN",
    "description": "JavaScript supports a compact set of statements, specifically\n  control flow statements, that you can use to incorporate a great deal of interactivity\n  in your application. This chapter provides an overview of these statements.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await",
    "markdown": "# await - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`await`** operator is used to wait for a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) and get its fulfillment value. It can only be used inside an [async function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) or at the top level of a [module](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules).\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`expression`](#expression)\n\nA [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise), a [thenable object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables), or any value to wait for.\n\n### [Return value](#return_value)\n\nThe fulfillment value of the promise or thenable object, or, if the expression is not thenable, the expression's own value.\n\n### [Exceptions](#exceptions)\n\nThrows the rejection reason if the promise or thenable object is rejected.\n\n## [Description](#description)\n\n`await` is usually used to unwrap promises by passing a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) as the `expression`. Using `await` pauses the execution of its surrounding `async` function until the promise is settled (that is, fulfilled or rejected). When execution resumes, the value of the `await` expression becomes that of the fulfilled promise.\n\nIf the promise is rejected, the `await` expression throws the rejected value. The function containing the `await` expression will [appear in the stack trace](#improving_stack_trace) of the error. Otherwise, if the rejected promise is not awaited or is immediately returned, the caller function will not appear in the stack trace.\n\nThe `expression` is resolved in the same way as [`Promise.resolve()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve): it's always converted to a native `Promise` and then awaited. If the `expression` is a:\n\n*   Native `Promise` (which means `expression` belongs to `Promise` or a subclass, and `expression.constructor === Promise`): The promise is directly used and awaited natively, without calling `then()`.\n*   [Thenable object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables) (including non-native promises, polyfill, proxy, child class, etc.): A new promise is constructed with the native [`Promise()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor by calling the object's `then()` method and passing in a handler that calls the `resolve` callback.\n*   Non-thenable value: An already-fulfilled `Promise` is constructed and used.\n\nEven when the used promise is already fulfilled, the async function's execution still pauses until the next tick. In the meantime, the caller of the async function resumes execution. [See example below.](#control_flow_effects_of_await)\n\nBecause `await` is only valid inside async functions and modules, which themselves are asynchronous and return promises, the `await` expression never blocks the main thread and only defers execution of code that actually depends on the result, i.e. anything after the `await` expression.\n\n## [Examples](#examples)\n\n### [Awaiting a promise to be fulfilled](#awaiting_a_promise_to_be_fulfilled)\n\nIf a `Promise` is passed to an `await` expression, it waits for the `Promise` to be fulfilled and returns the fulfilled value.\n\n```\nfunction resolveAfter2Seconds(x) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(x);\n    }, 2000);\n  });\n}\n\nasync function f1() {\n  const x = await resolveAfter2Seconds(10);\n  console.log(x); // 10\n}\n\nf1();\n```\n\n### [Thenable objects](#thenable_objects)\n\n[Thenable objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables) are resolved just the same as actual `Promise` objects.\n\n```\nasync function f() {\n  const thenable = {\n    then(resolve, _reject) {\n      resolve(\"resolved!\");\n    },\n  };\n  console.log(await thenable); // \"resolved!\"\n}\n\nf();\n```\n\nThey can also be rejected:\n\n```\nasync function f() {\n  const thenable = {\n    then(resolve, reject) {\n      reject(new Error(\"rejected!\"));\n    },\n  };\n  await thenable; // Throws Error: rejected!\n}\n\nf();\n```\n\n### [Conversion to promise](#conversion_to_promise)\n\nIf the value is not a `Promise`, `await` converts the value to a resolved `Promise`, and waits for it. The awaited value's identity doesn't change as long as it doesn't have a `then` property that's callable.\n\n```\nasync function f3() {\n  const y = await 20;\n  console.log(y); // 20\n\n  const obj = {};\n  console.log((await obj) === obj); // true\n}\n\nf3();\n```\n\n### [Handling rejected promises](#handling_rejected_promises)\n\nIf the `Promise` is rejected, the rejected value is thrown.\n\n```\nasync function f4() {\n  try {\n    const z = await Promise.reject(30);\n  } catch (e) {\n    console.error(e); // 30\n  }\n}\n\nf4();\n```\n\nYou can handle rejected promises without a `try` block by chaining a [`catch()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch) handler before awaiting the promise.\n\n```\nconst response = await promisedFunction().catch((err) => {\n  console.error(err);\n  return \"default response\";\n});\n// response will be \"default response\" if the promise is rejected\n```\n\nThis is built on the assumption that `promisedFunction()` never synchronously throws an error, but always returns a rejected promise. This is the case for most properly-designed promise-based functions, which usually look like:\n\n```\nfunction promisedFunction() {\n  // Immediately return a promise to minimize chance of an error being thrown\n  return new Promise((resolve, reject) => {\n    // do something async\n  });\n}\n```\n\nHowever, if `promisedFunction()` does throw an error synchronously, the error won't be caught by the `catch()` handler. In this case, the `try...catch` statement is necessary.\n\n### [Top level await](#top_level_await)\n\nYou can use the `await` keyword on its own (outside of an async function) at the top level of a [module](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules). This means that modules with child modules that use `await` will wait for the child modules to execute before they themselves run, all while not blocking other child modules from loading.\n\nHere is an example of a simple module using the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) and specifying await within the [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) statement. Any modules that include this will wait for the fetch to resolve before running any code.\n\n```\n// fetch request\nconst colors = fetch(\"../data/colors.json\").then((response) => response.json());\n\nexport default await colors;\n```\n\n### [Control flow effects of await](#control_flow_effects_of_await)\n\nWhen an `await` is encountered in code (either in an async function or in a module), the awaited expression is executed, while all code that depends on the expression's value is paused and pushed into the [microtask queue](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Event_loop). The main thread is then freed for the next task in the event loop. This happens even if the awaited value is an already-resolved promise or not a promise. For example, consider the following code:\n\n```\nasync function foo(name) {\n  console.log(name, \"start\");\n  console.log(name, \"middle\");\n  console.log(name, \"end\");\n}\n\nfoo(\"First\");\nfoo(\"Second\");\n\n// First start\n// First middle\n// First end\n// Second start\n// Second middle\n// Second end\n```\n\nIn this case, the two async functions are synchronous in effect, because they don't contain any `await` expression. The three statements happen in the same tick. In promise terms, the function corresponds to:\n\n```\nfunction foo(name) {\n  return new Promise((resolve) => {\n    console.log(name, \"start\");\n    console.log(name, \"middle\");\n    console.log(name, \"end\");\n    resolve();\n  });\n}\n```\n\nHowever, as soon as there's one `await`, the function becomes asynchronous, and execution of following statements is deferred to the next tick.\n\n```\nasync function foo(name) {\n  console.log(name, \"start\");\n  await console.log(name, \"middle\");\n  console.log(name, \"end\");\n}\n\nfoo(\"First\");\nfoo(\"Second\");\n\n// First start\n// First middle\n// Second start\n// Second middle\n// First end\n// Second end\n```\n\nThis corresponds to:\n\n```\nfunction foo(name) {\n  return new Promise((resolve) => {\n    console.log(name, \"start\");\n    resolve(console.log(name, \"middle\"));\n  }).then(() => {\n    console.log(name, \"end\");\n  });\n}\n```\n\nWhile the extra `then()` handler is not necessary, and the handler can be merged with the executor passed to the constructor, the `then()` handler's existence means the code will take one extra tick to complete. The same happens for `await`. Therefore, make sure to use `await` only when necessary (to unwrap promises into their values).\n\nOther microtasks can execute before the async function resumes. This example uses [`queueMicrotask()`](https://developer.mozilla.org/en-US/docs/Web/API/queueMicrotask) to demonstrate how the microtask queue is processed when each `await` expression is encountered.\n\n```\nlet i = 0;\n\nqueueMicrotask(function test() {\n  i++;\n  console.log(\"microtask\", i);\n  if (i < 3) {\n    queueMicrotask(test);\n  }\n});\n\n(async () => {\n  console.log(\"async function start\");\n  for (let i = 1; i < 3; i++) {\n    await null;\n    console.log(\"async function resume\", i);\n  }\n  await null;\n  console.log(\"async function end\");\n})();\n\nqueueMicrotask(() => {\n  console.log(\"queueMicrotask() after calling async function\");\n});\n\nconsole.log(\"script sync part end\");\n\n// Logs:\n// async function start\n// script sync part end\n// microtask 1\n// async function resume 1\n// queueMicrotask() after calling async function\n// microtask 2\n// async function resume 2\n// microtask 3\n// async function end\n```\n\nIn this example, the `test()` function is always called before the async function resumes, so the microtasks they each schedule are always executed in an intertwined fashion. On the other hand, because both `await` and `queueMicrotask()` schedule microtasks, the order of execution is always based on the order of scheduling. This is why the \"queueMicrotask() after calling async function\" log happens after the async function resumes for the first time.\n\n### [Improving stack trace](#improving_stack_trace)\n\nSometimes, the `await` is omitted when a promise is directly returned from an async function.\n\n```\nasync function noAwait() {\n  // Some actions...\n\n  return /* await */ lastAsyncTask();\n}\n```\n\nHowever, consider the case where `lastAsyncTask` asynchronously throws an error.\n\n```\nasync function lastAsyncTask() {\n  await null;\n  throw new Error(\"failed\");\n}\n\nasync function noAwait() {\n  return lastAsyncTask();\n}\n\nnoAwait();\n\n// Error: failed\n//    at lastAsyncTask\n```\n\nOnly `lastAsyncTask` appears in the stack trace, because the promise is rejected after it has already been returned from `noAwait` — in some sense, the promise is unrelated to `noAwait`. To improve the stack trace, you can use `await` to unwrap the promise, so that the exception gets thrown into the current function. The exception will then be immediately wrapped into a new rejected promise, but during error creation, the caller will appear in the stack trace.\n\n```\nasync function lastAsyncTask() {\n  await null;\n  throw new Error(\"failed\");\n}\n\nasync function withAwait() {\n  return await lastAsyncTask();\n}\n\nwithAwait();\n\n// Error: failed\n//    at lastAsyncTask\n//    at async withAwait\n```\n\nContrary to some popular belief, `return await promise` is at least as fast as `return promise`, due to how the spec and engines optimize the resolution of native promises. There's a proposal to [make `return promise` faster](https://github.com/tc39/proposal-faster-promise-adoption) and you can also read about [V8's optimization on async functions](https://v8.dev/blog/fast-async). Therefore, except for stylistic reasons, `return await` is almost always preferable.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-async-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-async-function-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "await - JavaScript | MDN",
    "description": "The await operator is used to wait for a Promise and get its fulfillment value. It can only be used inside an async function or at the top level of a module.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function*",
    "markdown": "# async function\\* expression - JavaScript\n\nThe **`async function*`** keywords can be used to define an async generator function inside an expression.\n\nYou can also define async generator functions using the [`async function*` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function*).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nasync function* (param0) {\n  statements\n}\nasync function* (param0, param1) {\n  statements\n}\nasync function* (param0, param1, /* …, */ paramN) {\n  statements\n}\n\nasync function* name(param0) {\n  statements\n}\nasync function* name(param0, param1) {\n  statements\n}\nasync function* name(param0, param1, /* …, */ paramN) {\n  statements\n}\n```\n\n**Note:** An [expression statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement) cannot begin with the keywords `async function` to avoid ambiguity with an [`async function*` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function*). The `async function` keywords only begin an expression when they appear in a context that cannot accept statements.\n\n### [Parameters](#parameters)\n\n[`name`](#name) Optional\n\nThe function name. Can be omitted, in which case the function is _anonymous_. The name is only local to the function body.\n\n[`paramN`](#paramn) Optional\n\nThe name of a formal parameter for the function. For the parameters' syntax, see the [Functions reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_parameters).\n\n[`statements`](#statements) Optional\n\nThe statements which comprise the body of the function.\n\n## [Description](#description)\n\nAn `async function*` expression is very similar to, and has almost the same syntax as, an [`async function*` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function*). The main difference between an `async function*` expression and an `async function*` declaration is the _function name_, which can be omitted in `async function*` expressions to create _anonymous_ functions. An `async function*` expression can be used as an [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE) (Immediately Invoked Function Expression) which runs as soon as it is defined, allowing you to create an ad-hoc [async iterable object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols). See also the chapter about [functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions) for more information.\n\n## [Examples](#examples)\n\n### [Using async function\\* expression](#using_async_function_expression)\n\nThe following example defines an unnamed asynchronous generator function and assigns it to `x`. The function yields the square of its argument:\n\n```\nconst x = async function* (y) {\n  yield Promise.resolve(y * y);\n};\nx(6)\n  .next()\n  .then((res) => console.log(res.value)); // 36\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-async-generator-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-async-generator-function-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "async function* expression - JavaScript | MDN",
    "description": "The async function* keywords can be used to define an async generator function inside an expression.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration",
    "markdown": "# Loops and iteration - JavaScript\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions)\n\nLoops offer a quick and easy way to do something repeatedly. This chapter of the [JavaScript Guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide) introduces the different iteration statements available to JavaScript.\n\nYou can think of a loop as a computerized version of the game where you tell someone to take _X_ steps in one direction, then _Y_ steps in another. For example, the idea \"Go five steps to the east\" could be expressed this way as a loop:\n\n```\nfor (let step = 0; step < 5; step++) {\n  // Runs 5 times, with values of step 0 through 4.\n  console.log(\"Walking east one step\");\n}\n```\n\nThere are many different kinds of loops, but they all essentially do the same thing: they repeat an action some number of times. (Note that it's possible that number could be zero!)\n\nThe various loop mechanisms offer different ways to determine the start and end points of the loop. There are various situations that are more easily served by one type of loop over the others.\n\nThe statements for loops provided in JavaScript are:\n\n*   [for statement](#for_statement)\n*   [do...while statement](#do...while_statement)\n*   [while statement](#while_statement)\n*   [labeled statement](#labeled_statement)\n*   [break statement](#break_statement)\n*   [continue statement](#continue_statement)\n*   [for...in statement](#for...in_statement)\n*   [for...of statement](#for...of_statement)\n\n## [for statement](#for_statement)\n\nA [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop repeats until a specified condition evaluates to false. The JavaScript `for` loop is similar to the Java and C `for` loop.\n\nA `for` statement looks as follows:\n\n```\nfor (initialization; condition; afterthought)\n  statement\n```\n\nWhen a `for` loop executes, the following occurs:\n\n1.  The initializing expression `initialization`, if any, is executed. This expression usually initializes one or more loop counters, but the syntax allows an expression of any degree of complexity. This expression can also declare variables.\n2.  The `condition` expression is evaluated. If the value of `condition` is true, the loop statements execute. Otherwise, the `for` loop terminates. (If the `condition` expression is omitted entirely, the condition is assumed to be true.)\n3.  The `statement` executes. To execute multiple statements, use a [block statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block) (`{ }`) to group those statements.\n4.  If present, the update expression `afterthought` is executed.\n5.  Control returns to Step 2.\n\n### [Example](#example)\n\nIn the example below, the function contains a `for` statement that counts the number of selected options in a scrolling list (a [`<select>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select) element that allows multiple selections).\n\n#### HTML\n\n```\n<form name=\"selectForm\">\n  <label for=\"musicTypes\"\n    >Choose some music types, then click the button below:</label\n  >\n  <select id=\"musicTypes\" name=\"musicTypes\" multiple>\n    <option selected>R&B</option>\n    <option>Jazz</option>\n    <option>Blues</option>\n    <option>New Age</option>\n    <option>Classical</option>\n    <option>Opera</option>\n  </select>\n  <button id=\"btn\" type=\"button\">How many are selected?</button>\n</form>\n```\n\n#### JavaScript\n\nHere, the `for` statement declares the variable `i` and initializes it to `0`. It checks that `i` is less than the number of options in the `<select>` element, performs the succeeding `if` statement, and increments `i` by 1 after each pass through the loop.\n\n```\nfunction countSelected(selectObject) {\n  let numberSelected = 0;\n  for (let i = 0; i < selectObject.options.length; i++) {\n    if (selectObject.options[i].selected) {\n      numberSelected++;\n    }\n  }\n  return numberSelected;\n}\n\nconst btn = document.getElementById(\"btn\");\n\nbtn.addEventListener(\"click\", () => {\n  const musicTypes = document.selectForm.musicTypes;\n  console.log(`You have selected ${countSelected(musicTypes)} option(s).`);\n});\n```\n\n## [do...while statement](#do...while_statement)\n\nThe [`do...while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while) statement repeats until a specified condition evaluates to false.\n\nA `do...while` statement looks as follows:\n\n```\ndo\n  statement\nwhile (condition);\n```\n\n`statement` is always executed once before the condition is checked. (To execute multiple statements, use a block statement (`{ }`) to group those statements.)\n\nIf `condition` is `true`, the statement executes again. At the end of every execution, the condition is checked. When the condition is `false`, execution stops, and control passes to the statement following `do...while`.\n\n### [Example](#example_2)\n\nIn the following example, the `do` loop iterates at least once and reiterates until `i` is no longer less than `5`.\n\n```\nlet i = 0;\ndo {\n  i += 1;\n  console.log(i);\n} while (i < 5);\n```\n\n## [while statement](#while_statement)\n\nA [`while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while) statement executes its statements as long as a specified condition evaluates to `true`. A `while` statement looks as follows:\n\n```\nwhile (condition)\n  statement\n```\n\nIf the `condition` becomes `false`, `statement` within the loop stops executing and control passes to the statement following the loop.\n\nThe condition test occurs _before_ `statement` in the loop is executed. If the condition returns `true`, `statement` is executed and the `condition` is tested again. If the condition returns `false`, execution stops, and control is passed to the statement following `while`.\n\nTo execute multiple statements, use a block statement (`{ }`) to group those statements.\n\n### [Example 1](#example_1)\n\nThe following `while` loop iterates as long as `n` is less than `3`:\n\n```\nlet n = 0;\nlet x = 0;\nwhile (n < 3) {\n  n++;\n  x += n;\n}\n```\n\nWith each iteration, the loop increments `n` and adds that value to `x`. Therefore, `x` and `n` take on the following values:\n\n*   After the first pass: `n` = `1` and `x` = `1`\n*   After the second pass: `n` = `2` and `x` = `3`\n*   After the third pass: `n` = `3` and `x` = `6`\n\nAfter completing the third pass, the condition `n < 3` is no longer `true`, so the loop terminates.\n\n### [Example 2](#example_2_2)\n\nAvoid infinite loops. Make sure the condition in a loop eventually becomes `false`—otherwise, the loop will never terminate! The statements in the following `while` loop execute forever because the condition never becomes `false`:\n\n```\n// Infinite loops are bad!\nwhile (true) {\n  console.log(\"Hello, world!\");\n}\n```\n\n## [labeled statement](#labeled_statement)\n\nA [`label`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label) provides a statement with an identifier that lets you refer to it elsewhere in your program. For example, you can use a label to identify a loop, and then use the `break` or `continue` statements to indicate whether a program should interrupt the loop or continue its execution.\n\nThe syntax of the labeled statement looks like the following:\n\nThe value of `label` may be any JavaScript identifier that is not a reserved word. The `statement` that you identify with a label may be any statement. For examples of using labeled statements, see the examples of `break` and `continue` below.\n\n## [break statement](#break_statement)\n\nUse the [`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break) statement to terminate a loop, `switch`, or in conjunction with a labeled statement.\n\n*   When you use `break` without a label, it terminates the innermost enclosing `while`, `do-while`, `for`, or `switch` immediately and transfers control to the following statement.\n*   When you use `break` with a label, it terminates the specified labeled statement.\n\nThe syntax of the `break` statement looks like this:\n\n1.  The first form of the syntax terminates the innermost enclosing loop or `switch`.\n2.  The second form of the syntax terminates the specified enclosing labeled statement.\n\n### [Example 1](#example_1_2)\n\nThe following example iterates through the elements in an array until it finds the index of an element whose value is `theValue`:\n\n```\nfor (let i = 0; i < a.length; i++) {\n  if (a[i] === theValue) {\n    break;\n  }\n}\n```\n\n### [Example 2: Breaking to a label](#example_2_breaking_to_a_label)\n\n```\nlet x = 0;\nlet z = 0;\nlabelCancelLoops: while (true) {\n  console.log(\"Outer loops:\", x);\n  x += 1;\n  z = 1;\n  while (true) {\n    console.log(\"Inner loops:\", z);\n    z += 1;\n    if (z === 10 && x === 10) {\n      break labelCancelLoops;\n    } else if (z === 10) {\n      break;\n    }\n  }\n}\n```\n\n## [continue statement](#continue_statement)\n\nThe [`continue`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue) statement can be used to restart a `while`, `do-while`, `for`, or `label` statement.\n\n*   When you use `continue` without a label, it terminates the current iteration of the innermost enclosing `while`, `do-while`, or `for` statement and continues execution of the loop with the next iteration. In contrast to the `break` statement, `continue` does not terminate the execution of the loop entirely. In a `while` loop, it jumps back to the condition. In a `for` loop, it jumps to the `increment-expression`.\n*   When you use `continue` with a label, it applies to the looping statement identified with that label.\n\nThe syntax of the `continue` statement looks like the following:\n\n```\ncontinue;\ncontinue label;\n```\n\n### [Example 1](#example_1_3)\n\nThe following example shows a `while` loop with a `continue` statement that executes when the value of `i` is `3`. Thus, `n` takes on the values `1`, `3`, `7`, and `12`.\n\n```\nlet i = 0;\nlet n = 0;\nwhile (i < 5) {\n  i++;\n  if (i === 3) {\n    continue;\n  }\n  n += i;\n  console.log(n);\n}\n// Logs:\n// 1 3 7 12\n```\n\nIf you comment out the `continue;`, the loop would run till the end and you would see `1,3,6,10,15`.\n\n### [Example 2](#example_2_3)\n\nA statement labeled `checkiandj` contains a statement labeled `checkj`. If `continue` is encountered, the program terminates the current iteration of `checkj` and begins the next iteration. Each time `continue` is encountered, `checkj` reiterates until its condition returns `false`. When `false` is returned, the remainder of the `checkiandj` statement is completed, and `checkiandj` reiterates until its condition returns `false`. When `false` is returned, the program continues at the statement following `checkiandj`.\n\nIf `continue` had a label of `checkiandj`, the program would continue at the top of the `checkiandj` statement.\n\n```\nlet i = 0;\nlet j = 10;\ncheckiandj: while (i < 4) {\n  console.log(i);\n  i += 1;\n  checkj: while (j > 4) {\n    console.log(j);\n    j -= 1;\n    if (j % 2 === 0) {\n      continue checkj;\n    }\n    console.log(j, \"is odd.\");\n  }\n  console.log(\"i =\", i);\n  console.log(\"j =\", j);\n}\n```\n\n## [for...in statement](#for...in_statement)\n\nThe [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) statement iterates a specified variable over all the enumerable properties of an object. For each distinct property, JavaScript executes the specified statements. A `for...in` statement looks as follows:\n\n```\nfor (variable in object)\n  statement\n```\n\n### [Example](#example_3)\n\nThe following function takes as its argument an object and the object's name. It then iterates over all the object's properties and returns a string that lists the property names and their values.\n\n```\nfunction dumpProps(obj, objName) {\n  let result = \"\";\n  for (const i in obj) {\n    result += `${objName}.${i} = ${obj[i]}<br>`;\n  }\n  result += \"<hr>\";\n  return result;\n}\n```\n\nFor an object `car` with properties `make` and `model`, `result` would be:\n\ncar.make = Ford\ncar.model = Mustang\n\n### [Arrays](#arrays)\n\nAlthough it may be tempting to use this as a way to iterate over [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) elements, the `for...in` statement will return the name of your user-defined properties in addition to the numeric indexes.\n\nTherefore, it is better to use a traditional [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop with a numeric index when iterating over arrays, because the `for...in` statement iterates over user-defined properties in addition to the array elements, if you modify the Array object (such as adding custom properties or methods).\n\n## [for...of statement](#for...of_statement)\n\nThe [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) statement creates a loop Iterating over [iterable objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) (including [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set), [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object and so on), invoking a custom iteration hook with statements to be executed for the value of each distinct property.\n\n```\nfor (variable of object)\n  statement\n```\n\nThe following example shows the difference between a `for...of` loop and a [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop. While `for...in` iterates over property names, `for...of` iterates over property values:\n\n```\nconst arr = [3, 5, 7];\narr.foo = \"hello\";\n\nfor (const i in arr) {\n  console.log(i);\n}\n// \"0\" \"1\" \"2\" \"foo\"\n\nfor (const i of arr) {\n  console.log(i);\n}\n// Logs: 3 5 7\n```\n\nThe `for...of` and `for...in` statements can also be used with [destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment). For example, you can simultaneously loop over the keys and values of an object using [`Object.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries).\n\n```\nconst obj = { foo: 1, bar: 2 };\n\nfor (const [key, val] of Object.entries(obj)) {\n  console.log(key, val);\n}\n// \"foo\" 1\n// \"bar\" 2\n```\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions)",
    "title": "Loops and iteration - JavaScript | MDN",
    "description": "Loops offer a quick and easy way to do something repeatedly. This\n  chapter of the JavaScript Guide\n  introduces the different iteration statements available to JavaScript.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND",
    "markdown": "# Bitwise AND (&) - JavaScript\n\nThe `&` operator is overloaded for two types of operands: number and [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt). For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first [coerces both operands to numeric values](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) and tests the types of them. It performs BigInt AND if both operands become BigInts; otherwise, it converts both operands to [32-bit integers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#fixed-width_number_conversion) and performs number bitwise AND. A [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown if one operand becomes a BigInt but the other becomes a number.\n\nThe operator operates on the operands' bit representations in [two's complement](https://en.wikipedia.org/wiki/Two's_complement). Each bit in the first operand is paired with the corresponding bit in the second operand: _first bit_ to _first bit_, _second bit_ to _second bit_, and so on. The operator is applied to each pair of bits, and the result is constructed bitwise.\n\nThe truth table for the AND operation is:\n\n| x   | y   | x AND y |\n| --- | --- | --- |\n| 0   | 0   | 0   |\n| 0   | 1   | 0   |\n| 1   | 0   | 0   |\n| 1   | 1   | 1   |\n\n     9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 & 9 (base 10) = 00000000000000000000000000001000 (base 2) = 8 (base 10)\n\nNumbers with more than 32 bits get their most significant bits discarded. For example, the following integer with more than 32 bits will be converted to a 32-bit integer:\n\nBefore: 11100110111110100000000000000110000000000001\nAfter:              10100000000000000110000000000001\n\nFor BigInts, there's no truncation. Conceptually, understand positive BigInts as having an infinite number of leading `0` bits, and negative BigInts having an infinite number of leading `1` bits.\n\nBitwise ANDing any number `x` with `-1` returns `x` converted to a 32-bit integer. Do not use `& -1` to truncate numbers to integers; use [`Math.trunc()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#using_bitwise_no-ops_to_truncate_numbers) instead.",
    "title": "Bitwise AND (&) - JavaScript | MDN",
    "description": "The bitwise AND (&) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of both operands are 1.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "markdown": "# ArrayBuffer - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`ArrayBuffer`** object is used to represent a generic raw binary data buffer.\n\nIt is an array of bytes, often referred to in other languages as a \"byte array\". You cannot directly manipulate the contents of an `ArrayBuffer`; instead, you create one of the [typed array objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) or a [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.\n\nThe [`ArrayBuffer()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/ArrayBuffer) constructor creates a new `ArrayBuffer` of the given length in bytes. You can also get an array buffer from existing data, for example, from a [Base64](https://developer.mozilla.org/en-US/docs/Glossary/Base64) string or [from a local file](https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsArrayBuffer).\n\n`ArrayBuffer` is a [transferable object](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Transferable_objects).\n\n## [Description](#description)\n\n### [Resizing ArrayBuffers](#resizing_arraybuffers)\n\n`ArrayBuffer` objects can be made resizable by including the `maxByteLength` option when calling the [`ArrayBuffer()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/ArrayBuffer) constructor. You can query whether an `ArrayBuffer` is resizable and what its maximum size is by accessing its [`resizable`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/resizable) and [`maxByteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/maxByteLength) properties, respectively. You can assign a new size to a resizable `ArrayBuffer` with a [`resize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/resize) call. New bytes are initialized to 0.\n\nThese features make resizing `ArrayBuffer`s more efficient — otherwise, you have to make a copy of the buffer with a new size. It also gives JavaScript parity with WebAssembly in this regard (Wasm linear memory can be resized with [`WebAssembly.Memory.prototype.grow()`](https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory/grow)).\n\n### [Transferring ArrayBuffers](#transferring_arraybuffers)\n\n`ArrayBuffer` objects can be transferred between different execution contexts, like [Web Workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) or [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API), using the [structured clone algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm). This is done by passing the `ArrayBuffer` as a [transferable object](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Transferable_objects) in a call to [`Worker.postMessage()`](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage) or [`ServiceWorker.postMessage()`](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/postMessage). In pure JavaScript, you can also transfer the ownership of memory from one `ArrayBuffer` to another using its [`transfer()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer) or [`transferToFixedLength()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transferToFixedLength) method.\n\nWhen an `ArrayBuffer` is transferred, its original copy becomes _detached_ — this means it is no longer usable. At any moment, there will only be one copy of the `ArrayBuffer` that actually has access to the underlying memory. Detached buffers have the following behaviors:\n\n*   [`byteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength) becomes 0 (in both the buffer and the associated typed array views).\n*   Methods, such as [`resize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/resize) and [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice), throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) when invoked. The associated typed array views' methods also throw a `TypeError`.\n\nYou can check whether an `ArrayBuffer` is detached by its [`detached`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/detached) property.\n\n## [Constructor](#constructor)\n\n[`ArrayBuffer()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/ArrayBuffer)\n\nCreates a new `ArrayBuffer` object.\n\n## [Static properties](#static_properties)\n\n[`ArrayBuffer[@@species]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/@@species)\n\nThe constructor function that is used to create derived objects.\n\n## [Static methods](#static_methods)\n\n[`ArrayBuffer.isView()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView)\n\nReturns `true` if `arg` is one of the ArrayBuffer views, such as [typed array objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) or a [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView). Returns `false` otherwise.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `ArrayBuffer.prototype` and shared by all `ArrayBuffer` instances.\n\n[`ArrayBuffer.prototype.byteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength)\n\nThe size, in bytes, of the `ArrayBuffer`. This is established when the array is constructed and can only be changed using the [`ArrayBuffer.prototype.resize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/resize) method if the `ArrayBuffer` is resizable.\n\n[`ArrayBuffer.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `ArrayBuffer` instances, the initial value is the [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/ArrayBuffer) constructor.\n\n[`ArrayBuffer.prototype.detached`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/detached)\n\nRead-only. Returns `true` if the `ArrayBuffer` has been detached (transferred), or `false` if not.\n\n[`ArrayBuffer.prototype.maxByteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/maxByteLength)\n\nThe read-only maximum length, in bytes, that the `ArrayBuffer` can be resized to. This is established when the array is constructed and cannot be changed.\n\n[`ArrayBuffer.prototype.resizable`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/resizable)\n\nRead-only. Returns `true` if the `ArrayBuffer` can be resized, or `false` if not.\n\n[`ArrayBuffer.prototype[@@toStringTag]`](#arraybuffer.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"ArrayBuffer\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`ArrayBuffer.prototype.resize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/resize)\n\nResizes the `ArrayBuffer` to the specified size, in bytes.\n\n[`ArrayBuffer.prototype.slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice)\n\nReturns a new `ArrayBuffer` whose contents are a copy of this `ArrayBuffer`'s bytes from `begin` (inclusive) up to `end` (exclusive). If either `begin` or `end` is negative, it refers to an index from the end of the array, as opposed to from the beginning.\n\n[`ArrayBuffer.prototype.transfer()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer)\n\nCreates a new `ArrayBuffer` with the same byte content as this buffer, then detaches this buffer.\n\n[`ArrayBuffer.prototype.transferToFixedLength()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transferToFixedLength)\n\nCreates a new non-resizable `ArrayBuffer` with the same byte content as this buffer, then detaches this buffer.\n\n## [Examples](#examples)\n\n### [Creating an ArrayBuffer](#creating_an_arraybuffer)\n\nIn this example, we create a 8-byte buffer with a [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) view referring to the buffer:\n\n```\nconst buffer = new ArrayBuffer(8);\nconst view = new Int32Array(buffer);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-arraybuffer-objects](https://tc39.es/ecma262/multipage/structured-data.html#sec-arraybuffer-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "ArrayBuffer - JavaScript | MDN",
    "description": "The ArrayBuffer object is used to represent a generic raw binary data buffer.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "markdown": "# Array - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Array`** object, as with arrays in other programming languages, enables [storing a collection of multiple items under a single variable name](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Arrays), and has members for [performing common array operations](#examples).\n\n## [Description](#description)\n\nIn JavaScript, arrays aren't [primitives](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) but are instead `Array` objects with the following core characteristics:\n\n*   **JavaScript arrays are resizable** and **can contain a mix of different [data types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures)**. (When those characteristics are undesirable, use [typed arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays) instead.)\n*   **JavaScript arrays are not associative arrays** and so, array elements cannot be accessed using arbitrary strings as indexes, but must be accessed using nonnegative integers (or their respective string form) as indexes.\n*   **JavaScript arrays are [zero-indexed](https://en.wikipedia.org/wiki/Zero-based_numbering)**: the first element of an array is at index `0`, the second is at index `1`, and so on — and the last element is at the value of the array's [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) property minus `1`.\n*   **JavaScript [array-copy operations](#copy_an_array) create [shallow copies](https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy)**. (All standard built-in copy operations with _any_ JavaScript objects create shallow copies, rather than [deep copies](https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy)).\n\n### [Array indices](#array_indices)\n\n`Array` objects cannot use arbitrary strings as element indexes (as in an [associative array](https://en.wikipedia.org/wiki/Associative_array)) but must use nonnegative integers (or their respective string form). Setting or accessing via non-integers will not set or retrieve an element from the array list itself, but will set or access a variable associated with that array's [object property collection](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#properties). The array's object properties and list of array elements are separate, and the array's [traversal and mutation operations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#array_methods) cannot be applied to these named properties.\n\nArray elements are object properties in the same way that `toString` is a property (to be specific, however, `toString()` is a method). Nevertheless, trying to access an element of an array as follows throws a syntax error because the property name is not valid:\n\nJavaScript syntax requires properties beginning with a digit to be accessed using [bracket notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects#objects_and_properties) instead of [dot notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors). It's also possible to quote the array indices (e.g., `years['2']` instead of `years[2]`), although usually not necessary.\n\nThe `2` in `years[2]` is coerced into a string by the JavaScript engine through an implicit `toString` conversion. As a result, `'2'` and `'02'` would refer to two different slots on the `years` object, and the following example could be `true`:\n\n```\nconsole.log(years[\"2\"] !== years[\"02\"]);\n```\n\nOnly `years['2']` is an actual array index. `years['02']` is an arbitrary string property that will not be visited in array iteration.\n\n### [Relationship between length and numerical properties](#relationship_between_length_and_numerical_properties)\n\nA JavaScript array's [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) property and numerical properties are connected.\n\nSeveral of the built-in array methods (e.g., [`join()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join), [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice), [`indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf), etc.) take into account the value of an array's [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) property when they're called.\n\nOther methods (e.g., [`push()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push), [`splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice), etc.) also result in updates to an array's [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) property.\n\n```\nconst fruits = [];\nfruits.push(\"banana\", \"apple\", \"peach\");\nconsole.log(fruits.length); // 3\n```\n\nWhen setting a property on a JavaScript array when the property is a valid array index and that index is outside the current bounds of the array, the engine will update the array's [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) property accordingly:\n\n```\nfruits[5] = \"mango\";\nconsole.log(fruits[5]); // 'mango'\nconsole.log(Object.keys(fruits)); // ['0', '1', '2', '5']\nconsole.log(fruits.length); // 6\n```\n\nIncreasing the [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) extends the array by adding empty slots without creating any new elements — not even `undefined`.\n\n```\nfruits.length = 10;\nconsole.log(fruits); // ['banana', 'apple', 'peach', empty x 2, 'mango', empty x 4]\nconsole.log(Object.keys(fruits)); // ['0', '1', '2', '5']\nconsole.log(fruits.length); // 10\nconsole.log(fruits[8]); // undefined\n```\n\nDecreasing the [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) property does, however, delete elements.\n\n```\nfruits.length = 2;\nconsole.log(Object.keys(fruits)); // ['0', '1']\nconsole.log(fruits.length); // 2\n```\n\nThis is explained further on the [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) page.\n\n### [Array methods and empty slots](#array_methods_and_empty_slots)\n\nArray methods have different behaviors when encountering empty slots in [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays). In general, older methods (e.g. `forEach`) treat empty slots differently from indices that contain `undefined`.\n\nMethods that have special treatment for empty slots include the following: [`concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat), [`copyWithin()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin), [`every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every), [`filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter), [`flat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat), [`flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap), [`forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach), [`indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf), [`lastIndexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf), [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), [`reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce), [`reduceRight()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight), [`reverse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse), [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice), [`some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some), [`sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort), and [`splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice). Iteration methods such as `forEach` don't visit empty slots at all. Other methods, such as `concat`, `copyWithin`, etc., preserve empty slots when doing the copying, so in the end the array is still sparse.\n\n```\nconst colors = [\"red\", \"yellow\", \"blue\"];\ncolors[5] = \"purple\";\ncolors.forEach((item, index) => {\n  console.log(`${index}: ${item}`);\n});\n// Output:\n// 0: red\n// 1: yellow\n// 2: blue\n// 5: purple\n\ncolors.reverse(); // ['purple', empty × 2, 'blue', 'yellow', 'red']\n```\n\nNewer methods (e.g. `keys`) do not treat empty slots specially and treat them as if they contain `undefined`. Methods that conflate empty slots with `undefined` elements include the following: [`entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries), [`fill()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill), [`find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find), [`findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex), [`findLast()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast), [`findLastIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex), [`includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes), [`join()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join), [`keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys), [`toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString), [`toReversed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed), [`toSorted()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted), [`toSpliced()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSpliced), [`values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values), and [`with()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/with).\n\n```\nconst colors = [\"red\", \"yellow\", \"blue\"];\ncolors[5] = \"purple\";\nconst iterator = colors.keys();\nfor (const key of iterator) {\n  console.log(`${key}: ${colors[key]}`);\n}\n// Output\n// 0: red\n// 1: yellow\n// 2: blue\n// 3: undefined\n// 4: undefined\n// 5: purple\n\nconst newColors = colors.toReversed(); // ['purple', undefined, undefined, 'blue', 'yellow', 'red']\n```\n\n### [Copying methods and mutating methods](#copying_methods_and_mutating_methods)\n\nSome methods do not mutate the existing array that the method was called on, but instead return a new array. They do so by first constructing a new array and then populating it with elements. The copy always happens [_shallowly_](https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy) — the method never copies anything beyond the initially created array. Elements of the original array(s) are copied into the new array as follows:\n\n*   Objects: the object reference is copied into the new array. Both the original and new array refer to the same object. That is, if a referenced object is modified, the changes are visible to both the new and original arrays.\n*   Primitive types such as strings, numbers and booleans (not [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), and [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) objects): their values are copied into the new array.\n\nOther methods mutate the array that the method was called on, in which case their return value differs depending on the method: sometimes a reference to the same array, sometimes the length of the new array.\n\nThe following methods create new arrays by accessing [`this.constructor[Symbol.species]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species) to determine the constructor to use: [`concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat), [`filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter), [`flat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat), [`flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap), [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice), and [`splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) (to construct the array of removed elements that's returned).\n\nThe following methods always create new arrays with the `Array` base constructor: [`toReversed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed), [`toSorted()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted), [`toSpliced()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSpliced), and [`with()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/with).\n\nThe following table lists the methods that mutate the original array, and the corresponding non-mutating alternative:\n\nMutating method\n\nNon-mutating alternative\n\n[`copyWithin()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin)\n\nNo one-method alternative\n\n[`fill()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill)\n\nNo one-method alternative\n\n[`pop()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop)\n\n[`slice(0, -1)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)\n\n[`push(v1, v2)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push)\n\n[`concat([v1, v2])`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat)\n\n[`reverse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)\n\n[`toReversed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed)\n\n[`shift()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift)\n\n[`slice(1)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)\n\n[`sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\n\n[`toSorted()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted)\n\n[`splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)\n\n[`toSpliced()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSpliced)\n\n[`unshift(v1, v2)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift)\n\n[`toSpliced(0, 0, v1, v2)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSpliced)\n\nAn easy way to change a mutating method into a non-mutating alternative is to use the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) or [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) to create a copy first:\n\n```\narr.copyWithin(0, 1, 2); // mutates arr\nconst arr2 = arr.slice().copyWithin(0, 1, 2); // does not mutate arr\nconst arr3 = [...arr].copyWithin(0, 1, 2); // does not mutate arr\n```\n\n### [Iterative methods](#iterative_methods)\n\nMany array methods take a callback function as an argument. The callback function is called sequentially and at most once for each element in the array, and the return value of the callback function is used to determine the return value of the method. They all share the same signature:\n\n```\nmethod(callbackFn, thisArg)\n```\n\nWhere `callbackFn` takes three arguments:\n\n[`element`](#element)\n\nThe current element being processed in the array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the array.\n\n[`array`](#array)\n\nThe array that the method was called upon.\n\nWhat `callbackFn` is expected to return depends on the array method that was called.\n\nThe `thisArg` argument (defaults to `undefined`) will be used as the `this` value when calling `callbackFn`. The `this` value ultimately observable by `callbackFn` is determined according to [the usual rules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this): if `callbackFn` is [non-strict](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#no_this_substitution), primitive `this` values are wrapped into objects, and `undefined`/`null` is substituted with [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis). The `thisArg` argument is irrelevant for any `callbackFn` defined with an [arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), as arrow functions don't have their own `this` [binding](https://developer.mozilla.org/en-US/docs/Glossary/Binding).\n\nThe `array` argument passed to `callbackFn` is most useful if you want to read another index during iteration, because you may not always have an existing variable that refers to the current array. You should generally not mutate the array during iteration (see [mutating initial array in iterative methods](#mutating_initial_array_in_iterative_methods)), but you can also use this argument to do so. The `array` argument is _not_ the array that is being built, in the case of methods like `map()`, `filter()`, and `flatMap()` — there is no way to access the array being built from the callback function.\n\nAll iterative methods are [copying](#copying_methods_and_mutating_methods) and [generic](#generic_array_methods), although they behave differently with [empty slots](#array_methods_and_empty_slots).\n\nThe following methods are iterative:[`every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every), [`filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter), [`find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find), [`findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex), [`findLast()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast), [`findLastIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex), [`flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap), [`forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach), [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), and [`some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).\n\nIn particular, [`every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every), [`find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find), [`findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex), [`findLast()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast), [`findLastIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex), and [`some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) do not always invoke `callbackFn` on every element — they stop iteration as soon as the return value is determined.\n\nThe [`reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) and [`reduceRight()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight) methods also take a callback function and run it at most once for each element in the array, but they have slightly different signatures from typical iterative methods (for example, they don't accept `thisArg`).\n\nThe [`sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) method also takes a callback function, but it is not an iterative method. It mutates the array in-place, doesn't accept `thisArg`, and may invoke the callback multiple times on an index.\n\nIterative methods iterate the array like the following (with a lot of technical details omitted):\n\n```\nfunction method(callbackFn, thisArg) {\n  const length = this.length;\n  for (let i = 0; i < length; i++) {\n    if (i in this) {\n      const result = callbackFn.call(thisArg, this[i], i, this);\n      // Do something with result; maybe return early\n    }\n  }\n}\n```\n\nNote the following:\n\n1.  Not all methods do the `i in this` test. The `find`, `findIndex`, `findLast`, and `findLastIndex` methods do not, but other methods do.\n2.  The `length` is memorized before the loop starts. This affects how insertions and deletions during iteration are handled (see [mutating initial array in iterative methods](#mutating_initial_array_in_iterative_methods)).\n3.  The method doesn't memorize the array contents, so if any index is modified during iteration, the new value might be observed.\n4.  The code above iterates the array in ascending order of index. Some methods iterate in descending order of index (`for (let i = length - 1; i >= 0; i--)`): `reduceRight()`, `findLast()`, and `findLastIndex()`.\n5.  `reduce` and `reduceRight` have slightly different signatures and do not always start at the first/last element.\n\n### [Generic array methods](#generic_array_methods)\n\nArray methods are always generic — they don't access any internal data of the array object. They only access the array elements through the `length` property and the indexed elements. This means that they can be called on array-like objects as well.\n\n```\nconst arrayLike = {\n  0: \"a\",\n  1: \"b\",\n  length: 2,\n};\nconsole.log(Array.prototype.join.call(arrayLike, \"+\")); // 'a+b'\n```\n\n#### Normalization of the length property\n\nThe `length` property is [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion) and then clamped to the range between 0 and 253 - 1. `NaN` becomes `0`, so even when `length` is not present or is `undefined`, it behaves as if it has value `0`.\n\nThe language avoids setting `length` to an [unsafe integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER). All built-in methods will throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if `length` will be set to a number greater than 253 - 1. However, because the [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) property of arrays throws an error if it's set to greater than 232 - 1, the safe integer threshold is usually not reached unless the method is called on a non-array object.\n\n```\nArray.prototype.flat.call({}); // []\n```\n\nSome array methods set the `length` property of the array object. They always set the value after normalization, so `length` always ends as an integer.\n\n```\nconst a = { length: 0.7 };\nArray.prototype.push.call(a);\nconsole.log(a.length); // 0\n```\n\n#### Array-like objects\n\nThe term [_array-like object_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects) refers to any object that doesn't throw during the `length` conversion process described above. In practice, such object is expected to actually have a `length` property and to have indexed elements in the range `0` to `length - 1`. (If it doesn't have all indices, it will be functionally equivalent to a [sparse array](#array_methods_and_empty_slots).) Any integer index less than zero or greater than `length - 1` is ignored when an array method operates on an array-like object.\n\nMany DOM objects are array-like — for example, [`NodeList`](https://developer.mozilla.org/en-US/docs/Web/API/NodeList) and [`HTMLCollection`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection). The [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object is also array-like. You can call array methods on them even if they don't have these methods themselves.\n\n```\nfunction f() {\n  console.log(Array.prototype.join.call(arguments, \"+\"));\n}\n\nf(\"a\", \"b\"); // 'a+b'\n```\n\n## [Constructor](#constructor)\n\n[`Array()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array)\n\nCreates a new `Array` object.\n\n## [Static properties](#static_properties)\n\n[`Array[@@species]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species)\n\nReturns the `Array` constructor.\n\n## [Static methods](#static_methods)\n\n[`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from)\n\nCreates a new `Array` instance from an iterable or array-like object.\n\n[`Array.fromAsync()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fromAsync)\n\nCreates a new `Array` instance from an async iterable, iterable, or array-like object.\n\n[`Array.isArray()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray)\n\nReturns `true` if the argument is an array, or `false` otherwise.\n\n[`Array.of()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)\n\nCreates a new `Array` instance with a variable number of arguments, regardless of number or type of the arguments.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Array.prototype` and shared by all `Array` instances.\n\n[`Array.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Array` instances, the initial value is the [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array) constructor.\n\n[`Array.prototype[@@unscopables]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables)\n\nContains property names that were not included in the ECMAScript standard prior to the ES2015 version and that are ignored for [`with`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with) statement-binding purposes.\n\nThese properties are own properties of each `Array` instance.\n\n[`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length)\n\nReflects the number of elements in an array.\n\n## [Instance methods](#instance_methods)\n\n[`Array.prototype.at()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at)\n\nReturns the array item at the given index. Accepts negative integers, which count back from the last item.\n\n[`Array.prototype.concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat)\n\nReturns a new array that is the calling array joined with other array(s) and/or value(s).\n\n[`Array.prototype.copyWithin()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin)\n\nCopies a sequence of array elements within an array.\n\n[`Array.prototype.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries)\n\nReturns a new [_array iterator_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators) object that contains the key/value pairs for each index in an array.\n\n[`Array.prototype.every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every)\n\nReturns `true` if every element in the calling array satisfies the testing function.\n\n[`Array.prototype.fill()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill)\n\nFills all the elements of an array from a start index to an end index with a static value.\n\n[`Array.prototype.filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n\nReturns a new array containing all elements of the calling array for which the provided filtering function returns `true`.\n\n[`Array.prototype.find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n\nReturns the value of the first element in the array that satisfies the provided testing function, or `undefined` if no appropriate element is found.\n\n[`Array.prototype.findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex)\n\nReturns the index of the first element in the array that satisfies the provided testing function, or `-1` if no appropriate element was found.\n\n[`Array.prototype.findLast()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast)\n\nReturns the value of the last element in the array that satisfies the provided testing function, or `undefined` if no appropriate element is found.\n\n[`Array.prototype.findLastIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex)\n\nReturns the index of the last element in the array that satisfies the provided testing function, or `-1` if no appropriate element was found.\n\n[`Array.prototype.flat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat)\n\nReturns a new array with all sub-array elements concatenated into it recursively up to the specified depth.\n\n[`Array.prototype.flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap)\n\nReturns a new array formed by applying a given callback function to each element of the calling array, and then flattening the result by one level.\n\n[`Array.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n\nCalls a function for each element in the calling array.\n\n[`Array.prototype.includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)\n\nDetermines whether the calling array contains a value, returning `true` or `false` as appropriate.\n\n[`Array.prototype.indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)\n\nReturns the first (least) index at which a given element can be found in the calling array.\n\n[`Array.prototype.join()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join)\n\nJoins all elements of an array into a string.\n\n[`Array.prototype.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys)\n\nReturns a new [_array iterator_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators) that contains the keys for each index in the calling array.\n\n[`Array.prototype.lastIndexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf)\n\nReturns the last (greatest) index at which a given element can be found in the calling array, or `-1` if none is found.\n\n[`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n\nReturns a new array containing the results of invoking a function on every element in the calling array.\n\n[`Array.prototype.pop()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop)\n\nRemoves the last element from an array and returns that element.\n\n[`Array.prototype.push()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push)\n\nAdds one or more elements to the end of an array, and returns the new `length` of the array.\n\n[`Array.prototype.reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n\nExecutes a user-supplied \"reducer\" callback function on each element of the array (from left to right), to reduce it to a single value.\n\n[`Array.prototype.reduceRight()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight)\n\nExecutes a user-supplied \"reducer\" callback function on each element of the array (from right to left), to reduce it to a single value.\n\n[`Array.prototype.reverse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)\n\nReverses the order of the elements of an array _in place_. (First becomes the last, last becomes first.)\n\n[`Array.prototype.shift()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift)\n\nRemoves the first element from an array and returns that element.\n\n[`Array.prototype.slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)\n\nExtracts a section of the calling array and returns a new array.\n\n[`Array.prototype.some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n\nReturns `true` if at least one element in the calling array satisfies the provided testing function.\n\n[`Array.prototype.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\n\nSorts the elements of an array in place and returns the array.\n\n[`Array.prototype.splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)\n\nAdds and/or removes elements from an array.\n\n[`Array.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString)\n\nReturns a localized string representing the calling array and its elements. Overrides the [`Object.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString) method.\n\n[`Array.prototype.toReversed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed)\n\nReturns a new array with the elements in reversed order, without modifying the original array.\n\n[`Array.prototype.toSorted()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted)\n\nReturns a new array with the elements sorted in ascending order, without modifying the original array.\n\n[`Array.prototype.toSpliced()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSpliced)\n\nReturns a new array with some elements removed and/or replaced at a given index, without modifying the original array.\n\n[`Array.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString)\n\nReturns a string representing the calling array and its elements. Overrides the [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) method.\n\n[`Array.prototype.unshift()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift)\n\nAdds one or more elements to the front of an array, and returns the new `length` of the array.\n\n[`Array.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values)\n\nReturns a new [_array iterator_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators) object that contains the values for each index in the array.\n\n[`Array.prototype.with()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/with)\n\nReturns a new array with the element at the given index replaced with the given value, without modifying the original array.\n\n[`Array.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator)\n\nAn alias for the [`values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values) method by default.\n\n## [Examples](#examples)\n\nThis section provides some examples of common array operations in JavaScript.\n\n### [Create an array](#create_an_array)\n\nThis example shows three ways to create new array: first using [array literal notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array#array_literal_notation), then using the [`Array()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array) constructor, and finally using [`String.prototype.split()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) to build the array from a string.\n\n```\n// 'fruits' array created using array literal notation.\nconst fruits = [\"Apple\", \"Banana\"];\nconsole.log(fruits.length);\n// 2\n\n// 'fruits2' array created using the Array() constructor.\nconst fruits2 = new Array(\"Apple\", \"Banana\");\nconsole.log(fruits2.length);\n// 2\n\n// 'fruits3' array created using String.prototype.split().\nconst fruits3 = \"Apple, Banana\".split(\", \");\nconsole.log(fruits3.length);\n// 2\n```\n\n### [Create a string from an array](#create_a_string_from_an_array)\n\nThis example uses the [`join()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join) method to create a string from the `fruits` array.\n\n```\nconst fruits = [\"Apple\", \"Banana\"];\nconst fruitsString = fruits.join(\", \");\nconsole.log(fruitsString);\n// \"Apple, Banana\"\n```\n\n### [Access an array item by its index](#access_an_array_item_by_its_index)\n\nThis example shows how to access items in the `fruits` array by specifying the index number of their position in the array.\n\n```\nconst fruits = [\"Apple\", \"Banana\"];\n\n// The index of an array's first element is always 0.\nfruits[0]; // Apple\n\n// The index of an array's second element is always 1.\nfruits[1]; // Banana\n\n// The index of an array's last element is always one\n// less than the length of the array.\nfruits[fruits.length - 1]; // Banana\n\n// Using an index number larger than the array's length\n// returns 'undefined'.\nfruits[99]; // undefined\n```\n\n### [Find the index of an item in an array](#find_the_index_of_an_item_in_an_array)\n\nThis example uses the [`indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) method to find the position (index) of the string `\"Banana\"` in the `fruits` array.\n\n```\nconst fruits = [\"Apple\", \"Banana\"];\nconsole.log(fruits.indexOf(\"Banana\"));\n// 1\n```\n\n### [Check if an array contains a certain item](#check_if_an_array_contains_a_certain_item)\n\nThis example shows two ways to check if the `fruits` array contains `\"Banana\"` and `\"Cherry\"`: first with the [`includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes) method, and then with the [`indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) method to test for an index value that's not `-1`.\n\n```\nconst fruits = [\"Apple\", \"Banana\"];\n\nfruits.includes(\"Banana\"); // true\nfruits.includes(\"Cherry\"); // false\n\n// If indexOf() doesn't return -1, the array contains the given item.\nfruits.indexOf(\"Banana\") !== -1; // true\nfruits.indexOf(\"Cherry\") !== -1; // false\n```\n\n### [Append an item to an array](#append_an_item_to_an_array)\n\nThis example uses the [`push()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) method to append a new string to the `fruits` array.\n\n```\nconst fruits = [\"Apple\", \"Banana\"];\nconst newLength = fruits.push(\"Orange\");\nconsole.log(fruits);\n// [\"Apple\", \"Banana\", \"Orange\"]\nconsole.log(newLength);\n// 3\n```\n\n### [Remove the last item from an array](#remove_the_last_item_from_an_array)\n\nThis example uses the [`pop()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop) method to remove the last item from the `fruits` array.\n\n```\nconst fruits = [\"Apple\", \"Banana\", \"Orange\"];\nconst removedItem = fruits.pop();\nconsole.log(fruits);\n// [\"Apple\", \"Banana\"]\nconsole.log(removedItem);\n// Orange\n```\n\n**Note:** `pop()` can only be used to remove the last item from an array. To remove multiple items from the end of an array, see the next example.\n\n### [Remove multiple items from the end of an array](#remove_multiple_items_from_the_end_of_an_array)\n\nThis example uses the [`splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) method to remove the last 3 items from the `fruits` array.\n\n```\nconst fruits = [\"Apple\", \"Banana\", \"Strawberry\", \"Mango\", \"Cherry\"];\nconst start = -3;\nconst removedItems = fruits.splice(start);\nconsole.log(fruits);\n// [\"Apple\", \"Banana\"]\nconsole.log(removedItems);\n// [\"Strawberry\", \"Mango\", \"Cherry\"]\n```\n\n### [Truncate an array down to just its first N items](#truncate_an_array_down_to_just_its_first_n_items)\n\nThis example uses the [`splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) method to truncate the `fruits` array down to just its first 2 items.\n\n```\nconst fruits = [\"Apple\", \"Banana\", \"Strawberry\", \"Mango\", \"Cherry\"];\nconst start = 2;\nconst removedItems = fruits.splice(start);\nconsole.log(fruits);\n// [\"Apple\", \"Banana\"]\nconsole.log(removedItems);\n// [\"Strawberry\", \"Mango\", \"Cherry\"]\n```\n\n### [Remove the first item from an array](#remove_the_first_item_from_an_array)\n\nThis example uses the [`shift()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift) method to remove the first item from the `fruits` array.\n\n```\nconst fruits = [\"Apple\", \"Banana\"];\nconst removedItem = fruits.shift();\nconsole.log(fruits);\n// [\"Banana\"]\nconsole.log(removedItem);\n// Apple\n```\n\n**Note:** `shift()` can only be used to remove the first item from an array. To remove multiple items from the beginning of an array, see the next example.\n\n### [Remove multiple items from the beginning of an array](#remove_multiple_items_from_the_beginning_of_an_array)\n\nThis example uses the [`splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) method to remove the first 3 items from the `fruits` array.\n\n```\nconst fruits = [\"Apple\", \"Strawberry\", \"Cherry\", \"Banana\", \"Mango\"];\nconst start = 0;\nconst deleteCount = 3;\nconst removedItems = fruits.splice(start, deleteCount);\nconsole.log(fruits);\n// [\"Banana\", \"Mango\"]\nconsole.log(removedItems);\n// [\"Apple\", \"Strawberry\", \"Cherry\"]\n```\n\n### [Add a new first item to an array](#add_a_new_first_item_to_an_array)\n\nThis example uses the [`unshift()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift) method to add, at index `0`, a new item to the `fruits` array — making it the new first item in the array.\n\n```\nconst fruits = [\"Banana\", \"Mango\"];\nconst newLength = fruits.unshift(\"Strawberry\");\nconsole.log(fruits);\n// [\"Strawberry\", \"Banana\", \"Mango\"]\nconsole.log(newLength);\n// 3\n```\n\n### [Remove a single item by index](#remove_a_single_item_by_index)\n\nThis example uses the [`splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) method to remove the string `\"Banana\"` from the `fruits` array — by specifying the index position of `\"Banana\"`.\n\n```\nconst fruits = [\"Strawberry\", \"Banana\", \"Mango\"];\nconst start = fruits.indexOf(\"Banana\");\nconst deleteCount = 1;\nconst removedItems = fruits.splice(start, deleteCount);\nconsole.log(fruits);\n// [\"Strawberry\", \"Mango\"]\nconsole.log(removedItems);\n// [\"Banana\"]\n```\n\n### [Remove multiple items by index](#remove_multiple_items_by_index)\n\nThis example uses the [`splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) method to remove the strings `\"Banana\"` and `\"Strawberry\"` from the `fruits` array — by specifying the index position of `\"Banana\"`, along with a count of the number of total items to remove.\n\n```\nconst fruits = [\"Apple\", \"Banana\", \"Strawberry\", \"Mango\"];\nconst start = 1;\nconst deleteCount = 2;\nconst removedItems = fruits.splice(start, deleteCount);\nconsole.log(fruits);\n// [\"Apple\", \"Mango\"]\nconsole.log(removedItems);\n// [\"Banana\", \"Strawberry\"]\n```\n\n### [Replace multiple items in an array](#replace_multiple_items_in_an_array)\n\nThis example uses the [`splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) method to replace the last 2 items in the `fruits` array with new items.\n\n```\nconst fruits = [\"Apple\", \"Banana\", \"Strawberry\"];\nconst start = -2;\nconst deleteCount = 2;\nconst removedItems = fruits.splice(start, deleteCount, \"Mango\", \"Cherry\");\nconsole.log(fruits);\n// [\"Apple\", \"Mango\", \"Cherry\"]\nconsole.log(removedItems);\n// [\"Banana\", \"Strawberry\"]\n```\n\n### [Iterate over an array](#iterate_over_an_array)\n\nThis example uses a [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop to iterate over the `fruits` array, logging each item to the console.\n\n```\nconst fruits = [\"Apple\", \"Mango\", \"Cherry\"];\nfor (const fruit of fruits) {\n  console.log(fruit);\n}\n// Apple\n// Mango\n// Cherry\n```\n\nBut `for...of` is just one of many ways to iterate over any array; for more ways, see [Loops and iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration), and see the documentation for the [`every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every), [`filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter), [`flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap), [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), [`reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce), and [`reduceRight()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight) methods — and see the next example, which uses the [`forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) method.\n\n### [Call a function on each element in an array](#call_a_function_on_each_element_in_an_array)\n\nThis example uses the [`forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) method to call a function on each element in the `fruits` array; the function causes each item to be logged to the console, along with the item's index number.\n\n```\nconst fruits = [\"Apple\", \"Mango\", \"Cherry\"];\nfruits.forEach((item, index, array) => {\n  console.log(item, index);\n});\n// Apple 0\n// Mango 1\n// Cherry 2\n```\n\n### [Merge multiple arrays together](#merge_multiple_arrays_together)\n\nThis example uses the [`concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) method to merge the `fruits` array with a `moreFruits` array, to produce a new `combinedFruits` array. Notice that `fruits` and `moreFruits` remain unchanged.\n\n```\nconst fruits = [\"Apple\", \"Banana\", \"Strawberry\"];\nconst moreFruits = [\"Mango\", \"Cherry\"];\nconst combinedFruits = fruits.concat(moreFruits);\nconsole.log(combinedFruits);\n// [\"Apple\", \"Banana\", \"Strawberry\", \"Mango\", \"Cherry\"]\n\n// The 'fruits' array remains unchanged.\nconsole.log(fruits);\n// [\"Apple\", \"Banana\", \"Strawberry\"]\n\n// The 'moreFruits' array also remains unchanged.\nconsole.log(moreFruits);\n// [\"Mango\", \"Cherry\"]\n```\n\n### [Copy an array](#copy_an_array)\n\nThis example shows three ways to create a new array from the existing `fruits` array: first by using [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax), then by using the [`from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from) method, and then by using the [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) method.\n\n```\nconst fruits = [\"Strawberry\", \"Mango\"];\n\n// Create a copy using spread syntax.\nconst fruitsCopy = [...fruits];\n// [\"Strawberry\", \"Mango\"]\n\n// Create a copy using the from() method.\nconst fruitsCopy2 = Array.from(fruits);\n// [\"Strawberry\", \"Mango\"]\n\n// Create a copy using the slice() method.\nconst fruitsCopy3 = fruits.slice();\n// [\"Strawberry\", \"Mango\"]\n```\n\nAll built-in array-copy operations ([spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax), [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from), [`Array.prototype.slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice), and [`Array.prototype.concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat)) create [shallow copies](https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy). If you instead want a [deep copy](https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy) of an array, you can use [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) to convert the array to a JSON string, and then [`JSON.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) to convert the string back into a new array that's completely independent from the original array.\n\n```\nconst fruitsDeepCopy = JSON.parse(JSON.stringify(fruits));\n```\n\nYou can also create deep copies using the [`structuredClone()`](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone) method, which has the advantage of allowing [transferable objects](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Transferable_objects) in the source to be _transferred_ to the new copy, rather than just cloned.\n\nFinally, it's important to understand that assigning an existing array to a new variable doesn't create a copy of either the array or its elements. Instead the new variable is just a reference, or alias, to the original array; that is, the original array's name and the new variable name are just two names for the exact same object (and so will always evaluate as [strictly equivalent](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#strict_equality_using)). Therefore, if you make any changes at all either to the value of the original array or to the value of the new variable, the other will change, too:\n\n```\nconst fruits = [\"Strawberry\", \"Mango\"];\nconst fruitsAlias = fruits;\n// 'fruits' and 'fruitsAlias' are the same object, strictly equivalent.\nfruits === fruitsAlias; // true\n// Any changes to the 'fruits' array change 'fruitsAlias' too.\nfruits.unshift(\"Apple\", \"Banana\");\nconsole.log(fruits);\n// ['Apple', 'Banana', 'Strawberry', 'Mango']\nconsole.log(fruitsAlias);\n// ['Apple', 'Banana', 'Strawberry', 'Mango']\n```\n\n### [Creating a two-dimensional array](#creating_a_two-dimensional_array)\n\nThe following creates a chessboard as a two-dimensional array of strings. The first move is made by copying the `'p'` in `board[6][4]` to `board[4][4]`. The old position at `[6][4]` is made blank.\n\n```\nconst board = [\n  [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],\n  [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"],\n  [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n  [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n  [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n  [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n  [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"],\n  [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"],\n];\n\nconsole.log(`${board.join(\"\\n\")}\\n\\n`);\n\n// Move King's Pawn forward 2\nboard[4][4] = board[6][4];\nboard[6][4] = \" \";\nconsole.log(board.join(\"\\n\"));\n```\n\nHere is the output:\n\nR,N,B,Q,K,B,N,R\nP,P,P,P,P,P,P,P\n , , , , , , ,\n , , , , , , ,\n , , , , , , ,\n , , , , , , ,\np,p,p,p,p,p,p,p\nr,n,b,q,k,b,n,r\n\nR,N,B,Q,K,B,N,R\nP,P,P,P,P,P,P,P\n , , , , , , ,\n , , , , , , ,\n , , , ,p, , ,\n , , , , , , ,\np,p,p,p, ,p,p,p\nr,n,b,q,k,b,n,r\n\n### [Using an array to tabulate a set of values](#using_an_array_to_tabulate_a_set_of_values)\n\n```\nconst values = [];\nfor (let x = 0; x < 10; x++) {\n  values.push([2 ** x, 2 * x ** 2]);\n}\nconsole.table(values);\n```\n\nResults in\n\n// The first column is the index\n0  1    0\n1  2    2\n2  4    8\n3  8    18\n4  16   32\n5  32   50\n6  64   72\n7  128  98\n8  256  128\n9  512  162\n\n### [Creating an array using the result of a match](#creating_an_array_using_the_result_of_a_match)\n\nThe result of a match between a [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) and a string can create a JavaScript array that has properties and elements which provide information about the match. Such an array is returned by [`RegExp.prototype.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) and [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match).\n\nFor example:\n\n```\n// Match one d followed by one or more b's followed by one d\n// Remember matched b's and the following d\n// Ignore case\n\nconst myRe = /d(b+)(d)/i;\nconst execResult = myRe.exec(\"cdbBdbsbz\");\n\nconsole.log(execResult.input); // 'cdbBdbsbz'\nconsole.log(execResult.index); // 1\nconsole.log(execResult); // [ \"dbBd\", \"bB\", \"d\" ]\n```\n\nFor more information about the result of a match, see the [`RegExp.prototype.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) and [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) pages.\n\n### [Mutating initial array in iterative methods](#mutating_initial_array_in_iterative_methods)\n\n[Iterative methods](#iterative_methods) do not mutate the array on which it is called, but the function provided as `callbackFn` can. The key principle to remember is that only indexes between 0 and `arrayLength - 1` are visited, where `arrayLength` is the length of the array at the time the array method was first called, but the element passed to the callback is the value at the time the index is visited. Therefore:\n\n*   `callbackFn` will not visit any elements added beyond the array's initial length when the call to the iterative method began.\n*   Changes to already-visited indexes do not cause `callbackFn` to be invoked on them again.\n*   If an existing, yet-unvisited element of the array is changed by `callbackFn`, its value passed to the `callbackFn` will be the value at the time that element gets visited. Removed elements are not visited.\n\n**Warning:** Concurrent modifications of the kind described above frequently lead to hard-to-understand code and are generally to be avoided (except in special cases).\n\nThe following examples use the `forEach` method as an example, but other methods that visit indexes in ascending order work in the same way. We will first define a helper function:\n\n```\nfunction testSideEffect(effect) {\n  const arr = [\"e1\", \"e2\", \"e3\", \"e4\"];\n  arr.forEach((elem, index, arr) => {\n    console.log(`array: [${arr.join(\", \")}], index: ${index}, elem: ${elem}`);\n    effect(arr, index);\n  });\n  console.log(`Final array: [${arr.join(\", \")}]`);\n}\n```\n\nModification to indexes not visited yet will be visible once the index is reached:\n\n```\ntestSideEffect((arr, index) => {\n  if (index + 1 < arr.length) arr[index + 1] += \"*\";\n});\n// array: [e1, e2, e3, e4], index: 0, elem: e1\n// array: [e1, e2*, e3, e4], index: 1, elem: e2*\n// array: [e1, e2*, e3*, e4], index: 2, elem: e3*\n// array: [e1, e2*, e3*, e4*], index: 3, elem: e4*\n// Final array: [e1, e2*, e3*, e4*]\n```\n\nModification to already visited indexes does not change iteration behavior, although the array will be different afterwards:\n\n```\ntestSideEffect((arr, index) => {\n  if (index > 0) arr[index - 1] += \"*\";\n});\n// array: [e1, e2, e3, e4], index: 0, elem: e1\n// array: [e1, e2, e3, e4], index: 1, elem: e2\n// array: [e1*, e2, e3, e4], index: 2, elem: e3\n// array: [e1*, e2*, e3, e4], index: 3, elem: e4\n// Final array: [e1*, e2*, e3*, e4]\n```\n\nInserting _n_ elements at unvisited indexes that are less than the initial array length will make them be visited. The last _n_ elements in the original array that now have index greater than the initial array length will not be visited:\n\n```\ntestSideEffect((arr, index) => {\n  if (index === 1) arr.splice(2, 0, \"new\");\n});\n// array: [e1, e2, e3, e4], index: 0, elem: e1\n// array: [e1, e2, e3, e4], index: 1, elem: e2\n// array: [e1, e2, new, e3, e4], index: 2, elem: new\n// array: [e1, e2, new, e3, e4], index: 3, elem: e3\n// Final array: [e1, e2, new, e3, e4]\n// e4 is not visited because it now has index 4\n```\n\nInserting _n_ elements with index greater than the initial array length will not make them be visited:\n\n```\ntestSideEffect((arr) => arr.push(\"new\"));\n// array: [e1, e2, e3, e4], index: 0, elem: e1\n// array: [e1, e2, e3, e4, new], index: 1, elem: e2\n// array: [e1, e2, e3, e4, new, new], index: 2, elem: e3\n// array: [e1, e2, e3, e4, new, new, new], index: 3, elem: e4\n// Final array: [e1, e2, e3, e4, new, new, new, new]\n```\n\nInserting _n_ elements at already visited indexes will not make them be visited, but it shifts remaining elements back by _n_, so the current index and the _n - 1_ elements before it are visited again:\n\n```\ntestSideEffect((arr, index) => arr.splice(index, 0, \"new\"));\n// array: [e1, e2, e3, e4], index: 0, elem: e1\n// array: [new, e1, e2, e3, e4], index: 1, elem: e1\n// array: [new, new, e1, e2, e3, e4], index: 2, elem: e1\n// array: [new, new, new, e1, e2, e3, e4], index: 3, elem: e1\n// Final array: [new, new, new, new, e1, e2, e3, e4]\n// e1 keeps getting visited because it keeps getting shifted back\n```\n\nDeleting _n_ elements at unvisited indexes will make them not be visited anymore. Because the array has shrunk, the last _n_ iterations will visit out-of-bounds indexes. If the method ignores non-existent indexes (see [array methods and empty slots](#array_methods_and_empty_slots)), the last _n_ iterations will be skipped; otherwise, they will receive `undefined`:\n\n```\ntestSideEffect((arr, index) => {\n  if (index === 1) arr.splice(2, 1);\n});\n// array: [e1, e2, e3, e4], index: 0, elem: e1\n// array: [e1, e2, e3, e4], index: 1, elem: e2\n// array: [e1, e2, e4], index: 2, elem: e4\n// Final array: [e1, e2, e4]\n// Does not visit index 3 because it's out-of-bounds\n\n// Compare this with find(), which treats nonexistent indexes as undefined:\nconst arr2 = [\"e1\", \"e2\", \"e3\", \"e4\"];\narr2.find((elem, index, arr) => {\n  console.log(`array: [${arr.join(\", \")}], index: ${index}, elem: ${elem}`);\n  if (index === 1) arr.splice(2, 1);\n  return false;\n});\n// array: [e1, e2, e3, e4], index: 0, elem: e1\n// array: [e1, e2, e3, e4], index: 1, elem: e2\n// array: [e1, e2, e4], index: 2, elem: e4\n// array: [e1, e2, e4], index: 3, elem: undefined\n```\n\nDeleting _n_ elements at already visited indexes does not change the fact that they were visited before they get deleted. Because the array has shrunk, the next _n_ elements after the current index are skipped. If the method ignores non-existent indexes, the last _n_ iterations will be skipped; otherwise, they will receive `undefined`:\n\n```\ntestSideEffect((arr, index) => arr.splice(index, 1));\n// array: [e1, e2, e3, e4], index: 0, elem: e1\n// Does not visit e2 because e2 now has index 0, which has already been visited\n// array: [e2, e3, e4], index: 1, elem: e3\n// Does not visit e4 because e4 now has index 1, which has already been visited\n// Final array: [e2, e4]\n// Index 2 is out-of-bounds, so it's not visited\n\n// Compare this with find(), which treats nonexistent indexes as undefined:\nconst arr2 = [\"e1\", \"e2\", \"e3\", \"e4\"];\narr2.find((elem, index, arr) => {\n  console.log(`array: [${arr.join(\", \")}], index: ${index}, elem: ${elem}`);\n  arr.splice(index, 1);\n  return false;\n});\n// array: [e1, e2, e3, e4], index: 0, elem: e1\n// array: [e2, e3, e4], index: 1, elem: e3\n// array: [e2, e4], index: 2, elem: undefined\n// array: [e2, e4], index: 3, elem: undefined\n```\n\nFor methods that iterate in descending order of index, insertion causes elements to be skipped, and deletion causes elements to be visited multiple times. Adjust the code above yourself to see the effects.\n\n## [Specifications](#specifications)\n\nSpecification\n\n[ECMAScript Language Specification  \n\\# sec-array-objects](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array-objects)\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Array - JavaScript | MDN",
    "description": "The Array object, as with arrays in other programming languages, enables storing a collection of multiple items under a single variable name, and has members for performing common array operations.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions",
    "markdown": "# Functions - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators)\n\nFunctions are one of the fundamental building blocks in JavaScript. A function in JavaScript is similar to a procedure—a set of statements that performs a task or calculates a value, but for a procedure to qualify as a function, it should take some input and return an output where there is some obvious relationship between the input and the output. To use a function, you must define it somewhere in the scope from which you wish to call it.\n\nSee also the [exhaustive reference chapter about JavaScript functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions) to get to know the details.\n\n## [Defining functions](#defining_functions)\n\n### [Function declarations](#function_declarations)\n\nA **function definition** (also called a **function declaration**, or **function statement**) consists of the [`function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function) keyword, followed by:\n\n*   The name of the function.\n*   A list of parameters to the function, enclosed in parentheses and separated by commas.\n*   The JavaScript statements that define the function, enclosed in curly braces, `{ /* … */ }`.\n\nFor example, the following code defines a simple function named `square`:\n\n```\nfunction square(number) {\n  return number * number;\n}\n```\n\nThe function `square` takes one parameter, called `number`. The function consists of one statement that says to return the parameter of the function (that is, `number`) multiplied by itself. The [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return) statement specifies the value returned by the function, which is `number * number`.\n\nParameters are essentially passed to functions **by value** — so if the code within the body of a function assigns a completely new value to a parameter that was passed to the function, **the change is not reflected globally or in the code which called that function**.\n\nWhen you pass an object as a parameter, if the function changes the object's properties, that change is visible outside the function, as shown in the following example:\n\n```\nfunction myFunc(theObject) {\n  theObject.make = \"Toyota\";\n}\n\nconst mycar = {\n  make: \"Honda\",\n  model: \"Accord\",\n  year: 1998,\n};\n\nconsole.log(mycar.make); // \"Honda\"\nmyFunc(mycar);\nconsole.log(mycar.make); // \"Toyota\"\n```\n\nWhen you pass an array as a parameter, if the function changes any of the array's values, that change is visible outside the function, as shown in the following example:\n\n```\nfunction myFunc(theArr) {\n  theArr[0] = 30;\n}\n\nconst arr = [45];\n\nconsole.log(arr[0]); // 45\nmyFunc(arr);\nconsole.log(arr[0]); // 30\n```\n\n### [Function expressions](#function_expressions)\n\nWhile the function declaration above is syntactically a statement, functions can also be created by a [function expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function).\n\nSuch a function can be **anonymous**; it does not have to have a name. For example, the function `square` could have been defined as:\n\n```\nconst square = function (number) {\n  return number * number;\n};\n\nconsole.log(square(4)); // 16\n```\n\nHowever, a name _can_ be provided with a function expression. Providing a name allows the function to refer to itself, and also makes it easier to identify the function in a debugger's stack traces:\n\n```\nconst factorial = function fac(n) {\n  return n < 2 ? 1 : n * fac(n - 1);\n};\n\nconsole.log(factorial(3)); // 6\n```\n\nFunction expressions are convenient when passing a function as an argument to another function. The following example shows a `map` function that should receive a function as first argument and an array as second argument:\n\n```\nfunction map(f, a) {\n  const result = new Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    result[i] = f(a[i]);\n  }\n  return result;\n}\n```\n\nIn the following code, the function receives a function defined by a function expression and executes it for every element of the array received as a second argument:\n\n```\nfunction map(f, a) {\n  const result = new Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    result[i] = f(a[i]);\n  }\n  return result;\n}\n\nconst cube = function (x) {\n  return x * x * x;\n};\n\nconst numbers = [0, 1, 2, 5, 10];\nconsole.log(map(cube, numbers)); // [0, 1, 8, 125, 1000]\n```\n\nIn JavaScript, a function can be defined based on a condition. For example, the following function definition defines `myFunc` only if `num` equals `0`:\n\n```\nlet myFunc;\nif (num === 0) {\n  myFunc = function (theObject) {\n    theObject.make = \"Toyota\";\n  };\n}\n```\n\nIn addition to defining functions as described here, you can also use the [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) constructor to create functions from a string at runtime, much like [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval).\n\nA **method** is a function that is a property of an object. Read more about objects and methods in [Working with objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects).\n\n## [Calling functions](#calling_functions)\n\n_Defining_ a function does not _execute_ it. Defining it names the function and specifies what to do when the function is called.\n\n**Calling** the function actually performs the specified actions with the indicated parameters. For example, if you define the function `square`, you could call it as follows:\n\nThe preceding statement calls the function with an argument of `5`. The function executes its statements and returns the value `25`.\n\nFunctions must be _in scope_ when they are called, but the function declaration can be [hoisted](#function_hoisting) (appear below the call in the code). The scope of a function declaration is the function in which it is declared (or the entire program, if it is declared at the top level).\n\nThe arguments of a function are not limited to strings and numbers. You can pass whole objects to a function. The `showProps()` function (defined in [Working with objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects#objects_and_properties)) is an example of a function that takes an object as an argument.\n\nA function can call itself. For example, here is a function that computes factorials recursively:\n\n```\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n```\n\nYou could then compute the factorials of `1` through `5` as follows:\n\n```\nconsole.log(factorial(1)); // 1\nconsole.log(factorial(2)); // 2\nconsole.log(factorial(3)); // 6\nconsole.log(factorial(4)); // 24\nconsole.log(factorial(5)); // 120\n```\n\nThere are other ways to call functions. There are often cases where a function needs to be called dynamically, or the number of arguments to a function vary, or in which the context of the function call needs to be set to a specific object determined at runtime.\n\nIt turns out that _functions are themselves objects_ — and in turn, these objects have methods. (See the [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) object.) The [`call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) and [`apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) methods can be used to achieve this goal.\n\n### [Function hoisting](#function_hoisting)\n\nConsider the example below:\n\n```\nconsole.log(square(5)); // 25\n\nfunction square(n) {\n  return n * n;\n}\n```\n\nThis code runs without any error, despite the `square()` function being called before it's declared. This is because the JavaScript interpreter hoists the entire function declaration to the top of the current scope, so the code above is equivalent to:\n\n```\n// All function declarations are effectively at the top of the scope\nfunction square(n) {\n  return n * n;\n}\n\nconsole.log(square(5)); // 25\n```\n\nFunction hoisting only works with function _declarations_ — not with function _expressions_. The following code will not work:\n\n```\nconsole.log(square(5)); // ReferenceError: Cannot access 'square' before initialization\nconst square = function (n) {\n  return n * n;\n};\n```\n\n## [Function scope](#function_scope)\n\nVariables defined inside a function cannot be accessed from anywhere outside the function, because the variable is defined only in the scope of the function. However, a function can access all variables and functions defined inside the scope in which it is defined.\n\nIn other words, a function defined in the global scope can access all variables defined in the global scope. A function defined inside another function can also access all variables defined in its parent function, and any other variables to which the parent function has access.\n\n```\n// The following variables are defined in the global scope\nconst num1 = 20;\nconst num2 = 3;\nconst name = \"Chamakh\";\n\n// This function is defined in the global scope\nfunction multiply() {\n  return num1 * num2;\n}\n\nconsole.log(multiply()); // 60\n\n// A nested function example\nfunction getScore() {\n  const num1 = 2;\n  const num2 = 3;\n\n  function add() {\n    return `${name} scored ${num1 + num2}`;\n  }\n\n  return add();\n}\n\nconsole.log(getScore()); // \"Chamakh scored 5\"\n```\n\n## [Scope and the function stack](#scope_and_the_function_stack)\n\n### [Recursion](#recursion)\n\nA function can refer to and call itself. There are three ways for a function to refer to itself:\n\n1.  The function's name\n2.  [`arguments.callee`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee)\n3.  An in-scope variable that refers to the function\n\nFor example, consider the following function definition:\n\n```\nconst foo = function bar() {\n  // statements go here\n};\n```\n\nWithin the function body, the following are all equivalent:\n\n1.  `bar()`\n2.  `arguments.callee()`\n3.  `foo()`\n\nA function that calls itself is called a _recursive function_. In some ways, recursion is analogous to a loop. Both execute the same code multiple times, and both require a condition (to avoid an infinite loop, or rather, infinite recursion in this case).\n\nFor example, consider the following loop:\n\n```\nlet x = 0;\n// \"x < 10\" is the loop condition\nwhile (x < 10) {\n  // do stuff\n  x++;\n}\n```\n\nIt can be converted into a recursive function declaration, followed by a call to that function:\n\n```\nfunction loop(x) {\n  // \"x >= 10\" is the exit condition (equivalent to \"!(x < 10)\")\n  if (x >= 10) {\n    return;\n  }\n  // do stuff\n  loop(x + 1); // the recursive call\n}\nloop(0);\n```\n\nHowever, some algorithms cannot be simple iterative loops. For example, getting all the nodes of a tree structure (such as the [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)) is easier via recursion:\n\n```\nfunction walkTree(node) {\n  if (node === null) {\n    return;\n  }\n  // do something with node\n  for (let i = 0; i < node.childNodes.length; i++) {\n    walkTree(node.childNodes[i]);\n  }\n}\n```\n\nCompared to the function `loop`, each recursive call itself makes many recursive calls here.\n\nIt is possible to convert any recursive algorithm to a non-recursive one, but the logic is often much more complex, and doing so requires the use of a stack.\n\nIn fact, recursion itself uses a stack: the function stack. The stack-like behavior can be seen in the following example:\n\n```\nfunction foo(i) {\n  if (i < 0) {\n    return;\n  }\n  console.log(`begin: ${i}`);\n  foo(i - 1);\n  console.log(`end: ${i}`);\n}\nfoo(3);\n\n// Logs:\n// begin: 3\n// begin: 2\n// begin: 1\n// begin: 0\n// end: 0\n// end: 1\n// end: 2\n// end: 3\n```\n\n### [Nested functions and closures](#nested_functions_and_closures)\n\nYou may nest a function within another function. The nested (inner) function is private to its containing (outer) function.\n\nIt also forms a _closure_. A closure is an expression (most commonly, a function) that can have free variables together with an environment that binds those variables (that \"closes\" the expression).\n\nSince a nested function is a closure, this means that a nested function can \"inherit\" the arguments and variables of its containing function. In other words, the inner function contains the scope of the outer function.\n\nTo summarize:\n\n*   The inner function can be accessed only from statements in the outer function.\n*   The inner function forms a closure: the inner function can use the arguments and variables of the outer function, while the outer function cannot use the arguments and variables of the inner function.\n\nThe following example shows nested functions:\n\n```\nfunction addSquares(a, b) {\n  function square(x) {\n    return x * x;\n  }\n  return square(a) + square(b);\n}\n\nconsole.log(addSquares(2, 3)); // 13\nconsole.log(addSquares(3, 4)); // 25\nconsole.log(addSquares(4, 5)); // 41\n```\n\nSince the inner function forms a closure, you can call the outer function and specify arguments for both the outer and inner function:\n\n```\nfunction outside(x) {\n  function inside(y) {\n    return x + y;\n  }\n  return inside;\n}\n\nconst fnInside = outside(3); // Think of it like: give me a function that adds 3 to whatever you give it\nconsole.log(fnInside(5)); // 8\nconsole.log(outside(3)(5)); // 8\n```\n\n### [Preservation of variables](#preservation_of_variables)\n\nNotice how `x` is preserved when `inside` is returned. A closure must preserve the arguments and variables in all scopes it references. Since each call provides potentially different arguments, a new closure is created for each call to `outside`. The memory can be freed only when the returned `inside` is no longer accessible.\n\nThis is not different from storing references in other objects, but is often less obvious because one does not set the references directly and cannot inspect them.\n\n### [Multiply-nested functions](#multiply-nested_functions)\n\nFunctions can be multiply-nested. For example:\n\n*   A function (`A`) contains a function (`B`), which itself contains a function (`C`).\n*   Both functions `B` and `C` form closures here. So, `B` can access `A`, and `C` can access `B`.\n*   In addition, since `C` can access `B` which can access `A`, `C` can also access `A`.\n\nThus, the closures can contain multiple scopes; they recursively contain the scope of the functions containing it. This is called _scope chaining_. (The reason it is called \"chaining\" is explained later.)\n\nConsider the following example:\n\n```\nfunction A(x) {\n  function B(y) {\n    function C(z) {\n      console.log(x + y + z);\n    }\n    C(3);\n  }\n  B(2);\n}\nA(1); // Logs 6 (which is 1 + 2 + 3)\n```\n\nIn this example, `C` accesses `B`'s `y` and `A`'s `x`.\n\nThis can be done because:\n\n1.  `B` forms a closure including `A` (i.e., `B` can access `A`'s arguments and variables).\n2.  `C` forms a closure including `B`.\n3.  Because `C`'s closure includes `B` and `B`'s closure includes `A`, then `C`'s closure also includes `A`. This means `C` can access _both_ `B` _and_ `A`'s arguments and variables. In other words, `C` _chains_ the scopes of `B` and `A`, _in that order_.\n\nThe reverse, however, is not true. `A` cannot access `C`, because `A` cannot access any argument or variable of `B`, which `C` is a variable of. Thus, `C` remains private to only `B`.\n\n### [Name conflicts](#name_conflicts)\n\nWhen two arguments or variables in the scopes of a closure have the same name, there is a _name conflict_. More nested scopes take precedence. So, the innermost scope takes the highest precedence, while the outermost scope takes the lowest. This is the scope chain. The first on the chain is the innermost scope, and the last is the outermost scope. Consider the following:\n\n```\nfunction outside() {\n  const x = 5;\n  function inside(x) {\n    return x * 2;\n  }\n  return inside;\n}\n\nconsole.log(outside()(10)); // 20 (instead of 10)\n```\n\nThe name conflict happens at the statement `return x * 2` and is between `inside`'s parameter `x` and `outside`'s variable `x`. The scope chain here is {`inside`, `outside`, global object}. Therefore, `inside`'s `x` takes precedences over `outside`'s `x`, and `20` (`inside`'s `x`) is returned instead of `10` (`outside`'s `x`).\n\n## [Closures](#closures)\n\nClosures are one of the most powerful features of JavaScript. JavaScript allows for the nesting of functions and grants the inner function full access to all the variables and functions defined inside the outer function (and all other variables and functions that the outer function has access to).\n\nHowever, the outer function does _not_ have access to the variables and functions defined inside the inner function. This provides a sort of encapsulation for the variables of the inner function.\n\nAlso, since the inner function has access to the scope of the outer function, the variables and functions defined in the outer function will live longer than the duration of the outer function execution, if the inner function manages to survive beyond the life of the outer function. A closure is created when the inner function is somehow made available to any scope outside the outer function.\n\n```\n// The outer function defines a variable called \"name\"\nconst pet = function (name) {\n  const getName = function () {\n    // The inner function has access to the \"name\" variable of the outer function\n    return name;\n  };\n  return getName; // Return the inner function, thereby exposing it to outer scopes\n};\nconst myPet = pet(\"Vivie\");\n\nconsole.log(myPet()); // \"Vivie\"\n```\n\nIt can be much more complex than the code above. An object containing methods for manipulating the inner variables of the outer function can be returned.\n\n```\nconst createPet = function (name) {\n  let sex;\n\n  const pet = {\n    // setName(newName) is equivalent to setName: function (newName)\n    // in this context\n    setName(newName) {\n      name = newName;\n    },\n\n    getName() {\n      return name;\n    },\n\n    getSex() {\n      return sex;\n    },\n\n    setSex(newSex) {\n      if (\n        typeof newSex === \"string\" &&\n        (newSex.toLowerCase() === \"male\" || newSex.toLowerCase() === \"female\")\n      ) {\n        sex = newSex;\n      }\n    },\n  };\n\n  return pet;\n};\n\nconst pet = createPet(\"Vivie\");\nconsole.log(pet.getName()); // Vivie\n\npet.setName(\"Oliver\");\npet.setSex(\"male\");\nconsole.log(pet.getSex()); // male\nconsole.log(pet.getName()); // Oliver\n```\n\nIn the code above, the `name` variable of the outer function is accessible to the inner functions, and there is no other way to access the inner variables except through the inner functions. The inner variables of the inner functions act as safe stores for the outer arguments and variables. They hold \"persistent\" and \"encapsulated\" data for the inner functions to work with. The functions do not even have to be assigned to a variable, or have a name.\n\n```\nconst getCode = (function () {\n  const apiCode = \"0]Eal(eh&2\"; // A code we do not want outsiders to be able to modify…\n\n  return function () {\n    return apiCode;\n  };\n})();\n\nconsole.log(getCode()); // \"0]Eal(eh&2\"\n```\n\n**Note:** There are a number of pitfalls to watch out for when using closures!\n\nIf an enclosed function defines a variable with the same name as a variable in the outer scope, then there is no way to refer to the variable in the outer scope again. (The inner scope variable \"overrides\" the outer one, until the program exits the inner scope. It can be thought of as a [name conflict](#name_conflicts).)\n\n```\nconst createPet = function (name) {\n  // The outer function defines a variable called \"name\".\n  return {\n    setName(name) {\n      // The enclosed function also defines a variable called \"name\".\n      name = name; // How do we access the \"name\" defined by the outer function?\n    },\n  };\n};\n```\n\n## [Using the arguments object](#using_the_arguments_object)\n\nThe arguments of a function are maintained in an array-like object. Within a function, you can address the arguments passed to it as follows:\n\nwhere `i` is the ordinal number of the argument, starting at `0`. So, the first argument passed to a function would be `arguments[0]`. The total number of arguments is indicated by `arguments.length`.\n\nUsing the `arguments` object, you can call a function with more arguments than it is formally declared to accept. This is often useful if you don't know in advance how many arguments will be passed to the function. You can use `arguments.length` to determine the number of arguments actually passed to the function, and then access each argument using the `arguments` object.\n\nFor example, consider a function that concatenates several strings. The only formal argument for the function is a string that specifies the characters that separate the items to concatenate. The function is defined as follows:\n\n```\nfunction myConcat(separator) {\n  let result = \"\"; // initialize list\n  // iterate through arguments\n  for (let i = 1; i < arguments.length; i++) {\n    result += arguments[i] + separator;\n  }\n  return result;\n}\n```\n\nYou can pass any number of arguments to this function, and it concatenates each argument into a string \"list\":\n\n```\nconsole.log(myConcat(\", \", \"red\", \"orange\", \"blue\"));\n// \"red, orange, blue, \"\n\nconsole.log(myConcat(\"; \", \"elephant\", \"giraffe\", \"lion\", \"cheetah\"));\n// \"elephant; giraffe; lion; cheetah; \"\n\nconsole.log(myConcat(\". \", \"sage\", \"basil\", \"oregano\", \"pepper\", \"parsley\"));\n// \"sage. basil. oregano. pepper. parsley. \"\n```\n\n**Note:** The `arguments` variable is \"array-like\", but not an array. It is array-like in that it has a numbered index and a `length` property. However, it does _not_ possess all of the array-manipulation methods.\n\nSee the [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) object in the JavaScript reference for more information.\n\n## [Function parameters](#function_parameters)\n\nThere are two special kinds of parameter syntax: _default parameters_ and _rest parameters_.\n\n### [Default parameters](#default_parameters)\n\nIn JavaScript, parameters of functions default to `undefined`. However, in some situations it might be useful to set a different default value. This is exactly what default parameters do.\n\nIn the past, the general strategy for setting defaults was to test parameter values in the body of the function and assign a value if they are `undefined`.\n\nIn the following example, if no value is provided for `b`, its value would be `undefined` when evaluating `a*b`, and a call to `multiply` would normally have returned `NaN`. However, this is prevented by the second line in this example:\n\n```\nfunction multiply(a, b) {\n  b = typeof b !== \"undefined\" ? b : 1;\n  return a * b;\n}\n\nconsole.log(multiply(5)); // 5\n```\n\nWith _default parameters_, a manual check in the function body is no longer necessary. You can put `1` as the default value for `b` in the function head:\n\n```\nfunction multiply(a, b = 1) {\n  return a * b;\n}\n\nconsole.log(multiply(5)); // 5\n```\n\nFor more details, see [default parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters) in the reference.\n\n### [Rest parameters](#rest_parameters)\n\nThe [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) syntax allows us to represent an indefinite number of arguments as an array.\n\nIn the following example, the function `multiply` uses _rest parameters_ to collect arguments from the second one to the end. The function then multiplies these by the first argument.\n\n```\nfunction multiply(multiplier, ...theArgs) {\n  return theArgs.map((x) => multiplier * x);\n}\n\nconst arr = multiply(2, 1, 2, 3);\nconsole.log(arr); // [2, 4, 6]\n```\n\n## [Arrow functions](#arrow_functions)\n\nAn [arrow function expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) (also called a _fat arrow_ to distinguish from a hypothetical `->` syntax in future JavaScript) has a shorter syntax compared to function expressions and does not have its own [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this), [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments), [`super`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super), or [`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target). Arrow functions are always anonymous.\n\nTwo factors influenced the introduction of arrow functions: _shorter functions_ and _non-binding_ of `this`.\n\n### [Shorter functions](#shorter_functions)\n\nIn some functional patterns, shorter functions are welcome. Compare:\n\n```\nconst a = [\"Hydrogen\", \"Helium\", \"Lithium\", \"Beryllium\"];\n\nconst a2 = a.map(function (s) {\n  return s.length;\n});\n\nconsole.log(a2); // [8, 6, 7, 9]\n\nconst a3 = a.map((s) => s.length);\n\nconsole.log(a3); // [8, 6, 7, 9]\n```\n\n### [No separate this](#no_separate_this)\n\nUntil arrow functions, every new function defined its own [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) value (a new object in the case of a constructor, undefined in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) function calls, the base object if the function is called as an \"object method\", etc.). This proved to be less than ideal with an object-oriented style of programming.\n\n```\nfunction Person() {\n  // The Person() constructor defines `this` as itself.\n  this.age = 0;\n\n  setInterval(function growUp() {\n    // In nonstrict mode, the growUp() function defines `this`\n    // as the global object, which is different from the `this`\n    // defined by the Person() constructor.\n    this.age++;\n  }, 1000);\n}\n\nconst p = new Person();\n```\n\nIn ECMAScript 3/5, this issue was fixed by assigning the value in `this` to a variable that could be closed over.\n\n```\nfunction Person() {\n  // Some choose `that` instead of `self`.\n  // Choose one and be consistent.\n  const self = this;\n  self.age = 0;\n\n  setInterval(function growUp() {\n    // The callback refers to the `self` variable of which\n    // the value is the expected object.\n    self.age++;\n  }, 1000);\n}\n```\n\nAlternatively, a [bound function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) could be created so that the proper `this` value would be passed to the `growUp()` function.\n\nAn arrow function does not have its own `this`; the `this` value of the enclosing execution context is used. Thus, in the following code, the `this` within the function that is passed to `setInterval` has the same value as `this` in the enclosing function:\n\n```\nfunction Person() {\n  this.age = 0;\n\n  setInterval(() => {\n    this.age++; // `this` properly refers to the person object\n  }, 1000);\n}\n\nconst p = new Person();\n```\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators)",
    "title": "Functions - JavaScript | MDN",
    "description": "Functions are one of the fundamental building blocks in JavaScript. A function in JavaScript is similar to a procedure—a set of statements that performs a task or calculates a value, but for a procedure to qualify as a function, it should take some input and return an output where there is some obvious relationship between the input and the output. To use a function, you must define it somewhere in the scope from which you wish to call it.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment",
    "markdown": "# Bitwise AND assignment (&=) - JavaScript\n\nThe **bitwise AND assignment (`&=`)** operator performs [bitwise AND](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND) on the two operands and assigns the result to the left operand.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\n`x &= y` is equivalent to `x = x & y`, except that the expression `x` is only evaluated once.\n\n## [Examples](#examples)\n\n### [Using bitwise AND assignment](#using_bitwise_and_assignment)\n\n```\nlet a = 5;\n// 5:     00000000000000000000000000000101\n// 2:     00000000000000000000000000000010\na &= 2; // 0\n\nlet b = 5n;\nb &= 2n; // 0n\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-assignment-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Bitwise AND assignment (&=) - JavaScript | MDN",
    "description": "The bitwise AND assignment (&=) operator performs bitwise AND on the two operands and assigns the result to the left operand.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators",
    "markdown": "# Expressions and operators - JavaScript\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates)\n\nThis chapter describes JavaScript's expressions and operators, including assignment, comparison, arithmetic, bitwise, logical, string, ternary and more.\n\nAt a high level, an _expression_ is a valid unit of code that resolves to a value. There are two types of expressions: those that have side effects (such as assigning values) and those that purely _evaluate_.\n\nThe expression `x = 7` is an example of the first type. This expression uses the `=` _operator_ to assign the value seven to the variable `x`. The expression itself evaluates to `7`.\n\nThe expression `3 + 4` is an example of the second type. This expression uses the `+` operator to add `3` and `4` together and produces a value, `7`. However, if it's not eventually part of a bigger construct (for example, a [variable declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#declarations) like `const z = 3 + 4`), its result will be immediately discarded — this is usually a programmer mistake because the evaluation doesn't produce any effects.\n\nAs the examples above also illustrate, all complex expressions are joined by _operators_, such as `=` and `+`. In this section, we will introduce the following operators:\n\n*   [Assignment operators](#assignment_operators)\n*   [Comparison operators](#comparison_operators)\n*   [Arithmetic operators](#arithmetic_operators)\n*   [Bitwise operators](#bitwise_operators)\n*   [Logical operators](#logical_operators)\n*   [BigInt operators](#bigint_operators)\n*   [String operators](#string_operators)\n*   [Conditional (ternary) operator](#conditional_ternary_operator)\n*   [Comma operator](#comma_operator)\n*   [Unary operators](#unary_operators)\n*   [Relational operators](#relational_operators)\n\nThese operators join operands either formed by higher-precedence operators or one of the [basic expressions](#basic_expressions). A complete and detailed list of operators and expressions is also available in the [reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators).\n\nThe _precedence_ of operators determines the order they are applied when evaluating an expression. For example:\n\n```\nconst x = 1 + 2 * 3;\nconst y = 2 * 3 + 1;\n```\n\nDespite `*` and `+` coming in different orders, both expressions would result in `7` because `*` has precedence over `+`, so the `*`\\-joined expression will always be evaluated first. You can override operator precedence by using parentheses (which creates a [grouped expression](#grouping_operator) — the basic expression). To see a complete table of operator precedence as well as various caveats, see the [Operator Precedence Reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table) page.\n\nJavaScript has both _binary_ and _unary_ operators, and one special ternary operator, the conditional operator. A binary operator requires two operands, one before the operator and one after the operator:\n\noperand1 operator operand2\n\nFor example, `3 + 4` or `x * y`. This form is called an _infix_ binary operator, because the operator is placed between two operands. All binary operators in JavaScript are infix.\n\nA unary operator requires a single operand, either before or after the operator:\n\noperator operand\noperand operator\n\nFor example, `x++` or `++x`. The `operator operand` form is called a _prefix_ unary operator, and the `operand operator` form is called a _postfix_ unary operator. `++` and `--` are the only postfix operators in JavaScript — all other operators, like `!`, `typeof`, etc. are prefix.\n\n## [Assignment operators](#assignment_operators)\n\nAn assignment operator assigns a value to its left operand based on the value of its right operand. The simple assignment operator is equal (`=`), which assigns the value of its right operand to its left operand. That is, `x = f()` is an assignment expression that assigns the value of `f()` to `x`.\n\nThere are also compound assignment operators that are shorthand for the operations listed in the following table:\n\n| Name | Shorthand operator | Meaning |\n| --- | --- | --- |\n| [Assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment) | `x = f()` | `x = f()` |\n| [Addition assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition_assignment) | `x += f()` | `x = x + f()` |\n| [Subtraction assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment) | `x -= f()` | `x = x - f()` |\n| [Multiplication assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment) | `x *= f()` | `x = x * f()` |\n| [Division assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division_assignment) | `x /= f()` | `x = x / f()` |\n| [Remainder assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder_assignment) | `x %= f()` | `x = x % f()` |\n| [Exponentiation assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment) | `x **= f()` | `x = x ** f()` |\n| [Left shift assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment) | `x <<= f()` | `x = x << f()` |\n| [Right shift assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment) | `x >>= f()` | `x = x >> f()` |\n| [Unsigned right shift assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment) | `x >>>= f()` | `x = x >>> f()` |\n| [Bitwise AND assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment) | `x &= f()` | `x = x & f()` |\n| [Bitwise XOR assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment) | `x ^= f()` | `x = x ^ f()` |\n| [Bitwise OR assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment) | `x \\|= f()` | `x = x \\| f()` |\n| [Logical AND assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment) | `x &&= f()` | `x && (x = f())` |\n| [Logical OR assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment) | `x \\|= f()` | `x \\| (x = f())` |\n| [Nullish coalescing assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment) | `x ??= f()` | `x ?? (x = f())` |\n\n### [Assigning to properties](#assigning_to_properties)\n\nIf an expression evaluates to an [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects), then the left-hand side of an assignment expression may make assignments to properties of that expression. For example:\n\n```\nconst obj = {};\n\nobj.x = 3;\nconsole.log(obj.x); // Prints 3.\nconsole.log(obj); // Prints { x: 3 }.\n\nconst key = \"y\";\nobj[key] = 5;\nconsole.log(obj[key]); // Prints 5.\nconsole.log(obj); // Prints { x: 3, y: 5 }.\n```\n\nFor more information about objects, read [Working with Objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects).\n\nIf an expression does not evaluate to an object, then assignments to properties of that expression do not assign:\n\n```\nconst val = 0;\nval.x = 3;\n\nconsole.log(val.x); // Prints undefined.\nconsole.log(val); // Prints 0.\n```\n\nIn [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#converting_mistakes_into_errors), the code above throws, because one cannot assign properties to primitives.\n\nIt is an error to assign values to unmodifiable properties or to properties of an expression without properties (`null` or `undefined`).\n\n### [Destructuring](#destructuring)\n\nFor more complex assignments, the [destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) syntax is a JavaScript expression that makes it possible to extract data from arrays or objects using a syntax that mirrors the construction of array and object literals.\n\nWithout destructuring, it takes multiple statements to extract values from arrays and objects:\n\n```\nconst foo = [\"one\", \"two\", \"three\"];\n\nconst one = foo[0];\nconst two = foo[1];\nconst three = foo[2];\n```\n\nWith destructuring, you can extract multiple values into distinct variables using a single statement:\n\n```\nconst [one, two, three] = foo;\n```\n\n### [Evaluation and nesting](#evaluation_and_nesting)\n\nIn general, assignments are used within a variable declaration (i.e., with [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const), [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), or [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var)) or as standalone statements.\n\n```\n// Declares a variable x and initializes it to the result of f().\n// The result of the x = f() assignment expression is discarded.\nlet x = f();\n\nx = g(); // Reassigns the variable x to the result of g().\n```\n\nHowever, like other expressions, assignment expressions like `x = f()` evaluate into a result value. Although this result value is usually not used, it can then be used by another expression.\n\nChaining assignments or nesting assignments in other expressions can result in surprising behavior. For this reason, some JavaScript style guides [discourage chaining or nesting assignments](https://github.com/airbnb/javascript/blob/master/README.md#variables--no-chain-assignment). Nevertheless, assignment chaining and nesting may occur sometimes, so it is important to be able to understand how they work.\n\nBy chaining or nesting an assignment expression, its result can itself be assigned to another variable. It can be logged, it can be put inside an array literal or function call, and so on.\n\n```\nlet x;\nconst y = (x = f()); // Or equivalently: const y = x = f();\nconsole.log(y); // Logs the return value of the assignment x = f().\n\nconsole.log(x = f()); // Logs the return value directly.\n\n// An assignment expression can be nested in any place\n// where expressions are generally allowed,\n// such as array literals' elements or as function calls' arguments.\nconsole.log([0, x = f(), 0]);\nconsole.log(f(0, x = f(), 0));\n```\n\nThe evaluation result matches the expression to the right of the `=` sign in the \"Meaning\" column of the table above. That means that `x = f()` evaluates into whatever `f()`'s result is, `x += f()` evaluates into the resulting sum `x + f()`, `x **= f()` evaluates into the resulting power `x ** f()`, and so on.\n\nIn the case of logical assignments, `x &&= f()`, `x ||= f()`, and `x ??= f()`, the return value is that of the logical operation without the assignment, so `x && f()`, `x || f()`, and `x ?? f()`, respectively.\n\nWhen chaining these expressions without parentheses or other grouping operators like array literals, the assignment expressions are **grouped right to left** (they are [right-associative](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#precedence_and_associativity)), but they are **evaluated left to right**.\n\nNote that, for all assignment operators other than `=` itself, the resulting values are always based on the operands' values _before_ the operation.\n\nFor example, assume that the following functions `f` and `g` and the variables `x` and `y` have been declared:\n\n```\nfunction f() {\n  console.log(\"F!\");\n  return 2;\n}\nfunction g() {\n  console.log(\"G!\");\n  return 3;\n}\nlet x, y;\n```\n\nConsider these three examples:\n\n```\ny = x = f();\ny = [f(), x = g()];\nx[f()] = g();\n```\n\n#### Evaluation example 1\n\n`y = x = f()` is equivalent to `y = (x = f())`, because the assignment operator `=` is [right-associative](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#precedence_and_associativity). However, it evaluates from left to right:\n\n1.  The assignment expression `y = x = f()` starts to evaluate.\n    1.  The `y` on this assignment's left-hand side evaluates into a reference to the variable named `y`.\n    2.  The assignment expression `x = f()` starts to evaluate.\n        1.  The `x` on this assignment's left-hand side evaluates into a reference to the variable named `x`.\n        2.  The function call `f()` prints \"F!\" to the console and then evaluates to the number `2`.\n        3.  That `2` result from `f()` is assigned to `x`.\n    3.  The assignment expression `x = f()` has now finished evaluating; its result is the new value of `x`, which is `2`.\n    4.  That `2` result in turn is also assigned to `y`.\n2.  The assignment expression `y = x = f()` has now finished evaluating; its result is the new value of `y` – which happens to be `2`. `x` and `y` are assigned to `2`, and the console has printed \"F!\".\n\n#### Evaluation example 2\n\n`y = [ f(), x = g() ]` also evaluates from left to right:\n\n1.  The assignment expression `y = [ f(), x = g() ]` starts to evaluate.\n    1.  The `y` on this assignment's left-hand evaluates into a reference to the variable named `y`.\n    2.  The inner array literal `[ f(), x = g() ]` starts to evaluate.\n        1.  The function call `f()` prints \"F!\" to the console and then evaluates to the number `2`.\n        2.  The assignment expression `x = g()` starts to evaluate.\n            1.  The `x` on this assignment's left-hand side evaluates into a reference to the variable named `x`.\n            2.  The function call `g()` prints \"G!\" to the console and then evaluates to the number `3`.\n            3.  That `3` result from `g()` is assigned to `x`.\n        3.  The assignment expression `x = g()` has now finished evaluating; its result is the new value of `x`, which is `3`. That `3` result becomes the next element in the inner array literal (after the `2` from the `f()`).\n    3.  The inner array literal `[ f(), x = g() ]` has now finished evaluating; its result is an array with two values: `[ 2, 3 ]`.\n    4.  That `[ 2, 3 ]` array is now assigned to `y`.\n2.  The assignment expression `y = [ f(), x = g() ]` has now finished evaluating; its result is the new value of `y` – which happens to be `[ 2, 3 ]`. `x` is now assigned to `3`, `y` is now assigned to `[ 2, 3 ]`, and the console has printed \"F!\" then \"G!\".\n\n#### Evaluation example 3\n\n`x[f()] = g()` also evaluates from left to right. (This example assumes that `x` is already assigned to some object. For more information about objects, read [Working with Objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects).)\n\n1.  The assignment expression `x[f()] = g()` starts to evaluate.\n    1.  The `x[f()]` property access on this assignment's left-hand starts to evaluate.\n        1.  The `x` in this property access evaluates into a reference to the variable named `x`.\n        2.  Then the function call `f()` prints \"F!\" to the console and then evaluates to the number `2`.\n    2.  The `x[f()]` property access on this assignment has now finished evaluating; its result is a variable property reference: `x[2]`.\n    3.  Then the function call `g()` prints \"G!\" to the console and then evaluates to the number `3`.\n    4.  That `3` is now assigned to `x[2]`. (This step will succeed only if `x` is assigned to an [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects).)\n2.  The assignment expression `x[f()] = g()` has now finished evaluating; its result is the new value of `x[2]` – which happens to be `3`. `x[2]` is now assigned to `3`, and the console has printed \"F!\" then \"G!\".\n\n### [Avoid assignment chains](#avoid_assignment_chains)\n\nChaining assignments or nesting assignments in other expressions can result in surprising behavior. For this reason, [chaining assignments in the same statement is discouraged](https://github.com/airbnb/javascript/blob/master/README.md#variables--no-chain-assignment).\n\nIn particular, putting a variable chain in a [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const), [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), or [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var) statement often does _not_ work. Only the outermost/leftmost variable would get declared; other variables within the assignment chain are _not_ declared by the `const`/`let`/`var` statement. For example:\n\nThis statement seemingly declares the variables `x`, `y`, and `z`. However, it only actually declares the variable `z`. `y` and `x` are either invalid references to nonexistent variables (in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)) or, worse, would implicitly create [global variables](https://developer.mozilla.org/en-US/docs/Glossary/Global_variable) for `x` and `y` in [sloppy mode](https://developer.mozilla.org/en-US/docs/Glossary/Sloppy_mode).\n\n## [Comparison operators](#comparison_operators)\n\nA comparison operator compares its operands and returns a logical value based on whether the comparison is true. The operands can be numerical, string, logical, or [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects) values. Strings are compared based on standard lexicographical ordering, using Unicode values. In most cases, if the two operands are not of the same type, JavaScript attempts to convert them to an appropriate type for the comparison. This behavior generally results in comparing the operands numerically. The sole exceptions to type conversion within comparisons involve the `===` and `!==` operators, which perform strict equality and inequality comparisons. These operators do not attempt to convert the operands to compatible types before checking equality. The following table describes the comparison operators in terms of this sample code:\n\n```\nconst var1 = 3;\nconst var2 = 4;\n```\n\n|     |     |     |\n| --- | --- | --- |Comparison operators\n| Operator | Description | Examples returning true |\n| --- | --- | --- |\n| [Equal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality) (`==`) | Returns `true` if the operands are equal. | `3 == var1`<br><br>`\"3\" == var1`<br><br>`3 == '3'` |\n| [Not equal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality) (`!=`) | Returns `true` if the operands are not equal. | `var1 != 4   var2 != \"3\"` |\n| [Strict equal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) (`===`) | Returns `true` if the operands are equal and of the same type. See also [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) and [sameness in JS](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness). | `3 === var1` |\n| [Strict not equal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality) (`!==`) | Returns `true` if the operands are of the same type but not equal, or are of different type. | `var1 !== \"3\"   3 !== '3'` |\n| [Greater than](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than) (`>`) | Returns `true` if the left operand is greater than the right operand. | `var2 > var1   \"12\" > 2` |\n| [Greater than or equal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal) (`>=`) | Returns `true` if the left operand is greater than or equal to the right operand. | `var2 >= var1   var1 >= 3` |\n| [Less than](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than) (`<`) | Returns `true` if the left operand is less than the right operand. | `var1 < var2   \"2\" < 12` |\n| [Less than or equal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal) (`<=`) | Returns `true` if the left operand is less than or equal to the right operand. | `var1 <= var2   var2 <= 5` |\n\n**Note:** `=>` is not a comparison operator but rather is the notation for [Arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\n## [Arithmetic operators](#arithmetic_operators)\n\nAn arithmetic operator takes numerical values (either literals or variables) as their operands and returns a single numerical value. The standard arithmetic operators are addition (`+`), subtraction (`-`), multiplication (`*`), and division (`/`). These operators work as they do in most other programming languages when used with floating point numbers (in particular, note that division by zero produces [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity)). For example:\n\n```\n1 / 2; // 0.5\n1 / 2 === 1.0 / 2.0; // this is true\n```\n\nIn addition to the standard arithmetic operations (`+`, `-`, `*`, `/`), JavaScript provides the arithmetic operators listed in the following table:\n\n|     |     |     |\n| --- | --- | --- |Arithmetic operators\n| Operator | Description | Example |\n| --- | --- | --- |\n| [Remainder](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder) (`%`) | Binary operator. Returns the integer remainder of dividing the two operands. | 12 % 5 returns 2. |\n| [Increment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment) (`++`) | Unary operator. Adds one to its operand. If used as a prefix operator (`++x`), returns the value of its operand after adding one; if used as a postfix operator (`x++`), returns the value of its operand before adding one. | If `x` is 3, then `++x` sets `x` to 4 and returns 4, whereas `x++` returns 3 and, only then, sets `x` to 4. |\n| [Decrement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Decrement) (`--`) | Unary operator. Subtracts one from its operand. The return value is analogous to that for the increment operator. | If `x` is 3, then `--x` sets `x` to 2 and returns 2, whereas `x--` returns 3 and, only then, sets `x` to 2. |\n| [Unary negation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation) (`-`) | Unary operator. Returns the negation of its operand. | If `x` is 3, then `-x` returns -3. |\n| [Unary plus](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus) (`+`) | Unary operator. Attempts to [convert the operand to a number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), if it is not already. | `+\"3\"` returns `3`.<br><br>`+true` returns `1`. |\n| [Exponentiation operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation) (`**`) | Calculates the `base` to the `exponent` power, that is, `base^exponent` | `2 ** 3` returns `8`.  <br>`10 ** -1` returns `0.1`. |\n\n## [Bitwise operators](#bitwise_operators)\n\nA bitwise operator treats their operands as a set of 32 bits (zeros and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.\n\nThe following table summarizes JavaScript's bitwise operators.\n\n| Operator | Usage | Description |\n| --- | --- | --- |\n| [Bitwise AND](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND) | `a & b` | Returns a one in each bit position for which the corresponding bits of both operands are ones. |\n| [Bitwise OR](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR) | `a \\| b` | Returns a zero in each bit position for which the corresponding bits of both operands are zeros. |\n| [Bitwise XOR](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR) | `a ^ b` | Returns a zero in each bit position for which the corresponding bits are the same. \\[Returns a one in each bit position for which the corresponding bits are different.\\] |\n| [Bitwise NOT](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT) | `~ a` | Inverts the bits of its operand. |\n| [Left shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift) | `a << b` | Shifts `a` in binary representation `b` bits to the left, shifting in zeros from the right. |\n| [Sign-propagating right shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift) | `a >> b` | Shifts `a` in binary representation `b` bits to the right, discarding bits shifted off. |\n| [Zero-fill right shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift) | `a >>> b` | Shifts `a` in binary representation `b` bits to the right, discarding bits shifted off, and shifting in zeros from the left. |\n\n### [Bitwise logical operators](#bitwise_logical_operators)\n\nConceptually, the bitwise logical operators work as follows:\n\n*   The operands are converted to thirty-two-bit integers and expressed by a series of bits (zeros and ones). Numbers with more than 32 bits get their most significant bits discarded. For example, the following integer with more than 32 bits will be converted to a 32-bit integer:\n    \n    Before: 1110 0110 1111 1010 0000 0000 0000 0110 0000 0000 0001\n    After:                 1010 0000 0000 0000 0110 0000 0000 0001\n    \n*   Each bit in the first operand is paired with the corresponding bit in the second operand: first bit to first bit, second bit to second bit, and so on.\n*   The operator is applied to each pair of bits, and the result is constructed bitwise.\n\nFor example, the binary representation of nine is 1001, and the binary representation of fifteen is 1111. So, when the bitwise operators are applied to these values, the results are as follows:\n\n| Expression | Result | Binary Description |\n| --- | --- | --- |\n| `15 & 9` | `9` | `1111 & 1001 = 1001` |\n| `15 \\| 9` | `15` | `1111 \\| 1001 = 1111` |\n| `15 ^ 9` | `6` | `1111 ^ 1001 = 0110` |\n| `~15` | `-16` | `~ 0000 0000 … 0000 1111 = 1111 1111 … 1111 0000` |\n| `~9` | `-10` | `~ 0000 0000 … 0000 1001 = 1111 1111 … 1111 0110` |\n\nNote that all 32 bits are inverted using the Bitwise NOT operator, and that values with the most significant (left-most) bit set to 1 represent negative numbers (two's-complement representation). `~x` evaluates to the same value that `-x - 1` evaluates to.\n\n### [Bitwise shift operators](#bitwise_shift_operators)\n\nThe bitwise shift operators take two operands: the first is a quantity to be shifted, and the second specifies the number of bit positions by which the first operand is to be shifted. The direction of the shift operation is controlled by the operator used.\n\nShift operators convert their operands to thirty-two-bit integers and return a result of either type [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) or [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt): specifically, if the type of the left operand is [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt), they return [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt); otherwise, they return [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number).\n\nThe shift operators are listed in the following table.\n\n|     |     |     |\n| --- | --- | --- |Bitwise shift operators\n| Operator | Description | Example |\n| --- | --- | --- |\n| [Left shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift)  <br>(`<<`) | This operator shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right. | `9<<2` yields 36, because 1001 shifted 2 bits to the left becomes 100100, which is 36. |\n| [Sign-propagating right shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift) (`>>`) | This operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left. | `9>>2` yields 2, because 1001 shifted 2 bits to the right becomes 10, which is 2. Likewise, `-9>>2` yields -3, because the sign is preserved. |\n| [Zero-fill right shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift) (`>>>`) | This operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Zero bits are shifted in from the left. | `19>>>2` yields 4, because 10011 shifted 2 bits to the right becomes 100, which is 4. For non-negative numbers, zero-fill right shift and sign-propagating right shift yield the same result. |\n\n## [Logical operators](#logical_operators)\n\nLogical operators are typically used with Boolean (logical) values; when they are, they return a Boolean value. However, the `&&`, `||`, and `??` operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they may return a non-Boolean value. As such, they are more adequately called \"value selection operators\". The logical operators are described in the following table.\n\n|     |     |     |\n| --- | --- | --- |Logical operators\n| Operator | Usage | Description |\n| --- | --- | --- |\n| [Logical AND](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND) (`&&`) | `expr1 && expr2` | Returns `expr1` if it can be converted to `false`; otherwise, returns `expr2`. Thus, when used with Boolean values, `&&` returns `true` if both operands are true; otherwise, returns `false`. |\n| [Logical OR](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR) (`\\|`) | `expr1 \\| expr2` | Returns `expr1` if it can be converted to `true`; otherwise, returns `expr2`. Thus, when used with Boolean values, `\\|` returns `true` if either operand is true; if both are false, returns `false`. |\n| [Nullish coalescing operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing) (`??`) | `expr1 ?? expr2` | Returns `expr1` if it is neither `null` nor `undefined`; otherwise, returns `expr2`. |\n| [Logical NOT](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT) (`!`) | `!expr` | Returns `false` if its single operand that can be converted to `true`; otherwise, returns `true`. |\n\nExamples of expressions that can be converted to `false` are those that evaluate to `null`, `0`, `0n`, `NaN`, the empty string (`\"\"`), or `undefined`.\n\nThe following code shows examples of the `&&` (logical AND) operator.\n\n```\nconst a1 = true && true; // t && t returns true\nconst a2 = true && false; // t && f returns false\nconst a3 = false && true; // f && t returns false\nconst a4 = false && 3 === 4; // f && f returns false\nconst a5 = \"Cat\" && \"Dog\"; // t && t returns Dog\nconst a6 = false && \"Cat\"; // f && t returns false\nconst a7 = \"Cat\" && false; // t && f returns false\n```\n\nThe following code shows examples of the `||` (logical OR) operator.\n\n```\nconst o1 = true || true; // t || t returns true\nconst o2 = false || true; // f || t returns true\nconst o3 = true || false; // t || f returns true\nconst o4 = false || 3 === 4; // f || f returns false\nconst o5 = \"Cat\" || \"Dog\"; // t || t returns Cat\nconst o6 = false || \"Cat\"; // f || t returns Cat\nconst o7 = \"Cat\" || false; // t || f returns Cat\n```\n\nThe following code shows examples of the `??` (nullish coalescing) operator.\n\n```\nconst n1 = null ?? 1; // 1\nconst n2 = undefined ?? 2; // 2\nconst n3 = false ?? 3; // false\nconst n4 = 0 ?? 4; // 0\n```\n\nNote how `??` works like `||`, but it only returns the second expression when the first one is \"[nullish](https://developer.mozilla.org/en-US/docs/Glossary/Nullish)\", i.e. [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined). `??` is a better alternative than `||` for setting defaults for values that might be `null` or `undefined`, in particular when values like `''` or `0` are valid values and the default should not apply.\n\nThe following code shows examples of the `!` (logical NOT) operator.\n\n```\nconst n1 = !true; // !t returns false\nconst n2 = !false; // !f returns true\nconst n3 = !\"Cat\"; // !t returns false\n```\n\n### [Short-circuit evaluation](#short-circuit_evaluation)\n\nAs logical expressions are evaluated left to right, they are tested for possible \"short-circuit\" evaluation using the following rules:\n\n*   `falsy && anything` is short-circuit evaluated to the falsy value.\n*   `truthy || anything` is short-circuit evaluated to the truthy value.\n*   `nonNullish ?? anything` is short-circuit evaluated to the non-nullish value.\n\nThe rules of logic guarantee that these evaluations are always correct. Note that the _anything_ part of the above expressions is not evaluated, so any side effects of doing so do not take effect.\n\n## [BigInt operators](#bigint_operators)\n\nMost operators that can be used between numbers can be used between [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) values as well.\n\n```\n// BigInt addition\nconst a = 1n + 2n; // 3n\n// Division with BigInts round towards zero\nconst b = 1n / 2n; // 0n\n// Bitwise operations with BigInts do not truncate either side\nconst c = 40000000000000000n >> 2n; // 10000000000000000n\n```\n\nOne exception is [unsigned right shift (`>>>`)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift), which is not defined for BigInt values. This is because a BigInt does not have a fixed width, so technically it does not have a \"highest bit\".\n\n```\nconst d = 8n >>> 2n; // TypeError: BigInts have no unsigned right shift, use >> instead\n```\n\nBigInts and numbers are not mutually replaceable — you cannot mix them in calculations.\n\n```\nconst a = 1n + 2; // TypeError: Cannot mix BigInt and other types\n```\n\nThis is because BigInt is neither a subset nor a superset of numbers. BigInts have higher precision than numbers when representing large integers, but cannot represent decimals, so implicit conversion on either side might lose precision. Use explicit conversion to signal whether you wish the operation to be a number operation or a BigInt one.\n\n```\nconst a = Number(1n) + 2; // 3\nconst b = 1n + BigInt(2); // 3n\n```\n\nYou can compare BigInts with numbers.\n\n```\nconst a = 1n > 2; // false\nconst b = 3 > 2n; // true\n```\n\n## [String operators](#string_operators)\n\nIn addition to the comparison operators, which can be used on string values, the concatenation operator (+) concatenates two string values together, returning another string that is the union of the two operand strings.\n\nFor example,\n\n```\nconsole.log(\"my \" + \"string\"); // console logs the string \"my string\".\n```\n\nThe shorthand assignment operator `+=` can also be used to concatenate strings.\n\nFor example,\n\n```\nlet mystring = \"alpha\";\nmystring += \"bet\"; // evaluates to \"alphabet\" and assigns this value to mystring.\n```\n\n## [Conditional (ternary) operator](#conditional_ternary_operator)\n\nThe [conditional operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator) is the only JavaScript operator that takes three operands. The operator can have one of two values based on a condition. The syntax is:\n\nIf `condition` is true, the operator has the value of `val1`. Otherwise it has the value of `val2`. You can use the conditional operator anywhere you would use a standard operator.\n\nFor example,\n\n```\nconst status = age >= 18 ? \"adult\" : \"minor\";\n```\n\nThis statement assigns the value \"adult\" to the variable `status` if `age` is eighteen or more. Otherwise, it assigns the value \"minor\" to `status`.\n\n## [Comma operator](#comma_operator)\n\nThe [comma operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator) (`,`) evaluates both of its operands and returns the value of the last operand. This operator is primarily used inside a `for` loop, to allow multiple variables to be updated each time through the loop. It is regarded bad style to use it elsewhere, when it is not necessary. Often two separate statements can and should be used instead.\n\nFor example, if `a` is a 2-dimensional array with 10 elements on a side, the following code uses the comma operator to update two variables at once. The code prints the values of the diagonal elements in the array:\n\n```\nconst x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst a = [x, x, x, x, x];\n\nfor (let i = 0, j = 9; i <= j; i++, j--) {\n  //                              ^\n  console.log(`a[${i}][${j}]= ${a[i][j]}`);\n}\n```\n\n## [Unary operators](#unary_operators)\n\nA unary operation is an operation with only one operand.\n\n### [delete](#delete)\n\nThe [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator deletes an object's property. The syntax is:\n\n```\ndelete object.property;\ndelete object[propertyKey];\ndelete objectName[index];\n```\n\nwhere `object` is the name of an object, `property` is an existing property, and `propertyKey` is a string or symbol referring to an existing property.\n\nIf the `delete` operator succeeds, it removes the property from the object. Trying to access it afterwards will yield `undefined`. The `delete` operator returns `true` if the operation is possible; it returns `false` if the operation is not possible.\n\n```\ndelete Math.PI; // returns false (cannot delete non-configurable properties)\n\nconst myObj = { h: 4 };\ndelete myObj.h; // returns true (can delete user-defined properties)\n```\n\n#### Deleting array elements\n\nSince arrays are just objects, it's technically possible to `delete` elements from them. This is, however, regarded as a bad practice — try to avoid it. When you delete an array property, the array length is not affected and other elements are not re-indexed. To achieve that behavior, it is much better to just overwrite the element with the value `undefined`. To actually manipulate the array, use the various array methods such as [`splice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice).\n\n### [typeof](#typeof)\n\nThe [`typeof` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof) returns a string indicating the type of the unevaluated operand. `operand` is the string, variable, keyword, or object for which the type is to be returned. The parentheses are optional.\n\nSuppose you define the following variables:\n\n```\nconst myFun = new Function(\"5 + 2\");\nconst shape = \"round\";\nconst size = 1;\nconst foo = [\"Apple\", \"Mango\", \"Orange\"];\nconst today = new Date();\n```\n\nThe `typeof` operator returns the following results for these variables:\n\n```\ntypeof myFun; // returns \"function\"\ntypeof shape; // returns \"string\"\ntypeof size; // returns \"number\"\ntypeof foo; // returns \"object\"\ntypeof today; // returns \"object\"\ntypeof doesntExist; // returns \"undefined\"\n```\n\nFor the keywords `true` and `null`, the `typeof` operator returns the following results:\n\n```\ntypeof true; // returns \"boolean\"\ntypeof null; // returns \"object\"\n```\n\nFor a number or string, the `typeof` operator returns the following results:\n\n```\ntypeof 62; // returns \"number\"\ntypeof \"Hello world\"; // returns \"string\"\n```\n\nFor property values, the `typeof` operator returns the type of value the property contains:\n\n```\ntypeof document.lastModified; // returns \"string\"\ntypeof window.length; // returns \"number\"\ntypeof Math.LN2; // returns \"number\"\n```\n\nFor methods and functions, the `typeof` operator returns results as follows:\n\n```\ntypeof blur; // returns \"function\"\ntypeof eval; // returns \"function\"\ntypeof parseInt; // returns \"function\"\ntypeof shape.split; // returns \"function\"\n```\n\nFor predefined objects, the `typeof` operator returns results as follows:\n\n```\ntypeof Date; // returns \"function\"\ntypeof Function; // returns \"function\"\ntypeof Math; // returns \"object\"\ntypeof Option; // returns \"function\"\ntypeof String; // returns \"function\"\n```\n\n### [void](#void)\n\nThe [`void` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void) specifies an expression to be evaluated without returning a value. `expression` is a JavaScript expression to evaluate. The parentheses surrounding the expression are optional, but it is good style to use them to avoid precedence issues.\n\n## [Relational operators](#relational_operators)\n\nA relational operator compares its operands and returns a Boolean value based on whether the comparison is true.\n\n### [in](#in)\n\nThe [`in` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) returns `true` if the specified property is in the specified object. The syntax is:\n\n```\npropNameOrNumber in objectName\n```\n\nwhere `propNameOrNumber` is a string, numeric, or symbol expression representing a property name or array index, and `objectName` is the name of an object.\n\nThe following examples show some uses of the `in` operator.\n\n```\n// Arrays\nconst trees = [\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"];\n0 in trees; // returns true\n3 in trees; // returns true\n6 in trees; // returns false\n\"bay\" in trees; // returns false\n// (you must specify the index number, not the value at that index)\n\"length\" in trees; // returns true (length is an Array property)\n\n// built-in objects\n\"PI\" in Math; // returns true\nconst myString = new String(\"coral\");\n\"length\" in myString; // returns true\n\n// Custom objects\nconst mycar = { make: \"Honda\", model: \"Accord\", year: 1998 };\n\"make\" in mycar; // returns true\n\"model\" in mycar; // returns true\n```\n\n### [instanceof](#instanceof)\n\nThe [`instanceof` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) returns `true` if the specified object is of the specified object type. The syntax is:\n\n```\nobjectName instanceof objectType\n```\n\nwhere `objectName` is the name of the object to compare to `objectType`, and `objectType` is an object type, such as [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) or [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array).\n\nUse `instanceof` when you need to confirm the type of an object at runtime. For example, when catching exceptions, you can branch to different exception-handling code depending on the type of exception thrown.\n\nFor example, the following code uses `instanceof` to determine whether `theDay` is a `Date` object. Because `theDay` is a `Date` object, the statements in the `if` statement execute.\n\n```\nconst theDay = new Date(1995, 12, 17);\nif (theDay instanceof Date) {\n  // statements to execute\n}\n```\n\n## [Basic expressions](#basic_expressions)\n\nAll operators eventually operate on one or more basic expressions. These basic expressions include [identifiers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#declarations) and [literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#literals), but there are a few other kinds as well. They are briefly introduced below, and their semantics are described in detail in their respective reference sections.\n\n### [this](#this)\n\nUse the [`this` keyword](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) to refer to the current object. In general, `this` refers to the calling object in a method. Use `this` either with the dot or the bracket notation:\n\n```\nthis[\"propertyName\"];\nthis.propertyName;\n```\n\nSuppose a function called `validate` validates an object's `value` property, given the object and the high and low values:\n\n```\nfunction validate(obj, lowval, hival) {\n  if (obj.value < lowval || obj.value > hival) {\n    console.log(\"Invalid Value!\");\n  }\n}\n```\n\nYou could call `validate` in each form element's `onChange` event handler, using `this` to pass it to the form element, as in the following example:\n\n```\n<p>Enter a number between 18 and 99:</p>\n<input type=\"text\" name=\"age\" size=\"3\" onChange=\"validate(this, 18, 99);\" />\n```\n\n### [Grouping operator](#grouping_operator)\n\nThe grouping operator `( )` controls the precedence of evaluation in expressions. For example, you can override multiplication and division first, then addition and subtraction to evaluate addition first.\n\n```\nconst a = 1;\nconst b = 2;\nconst c = 3;\n\n// default precedence\na + b * c     // 7\n// evaluated by default like this\na + (b * c)   // 7\n\n// now overriding precedence\n// addition before multiplication\n(a + b) * c   // 9\n\n// which is equivalent to\na * c + b * c // 9\n```\n\n### [Property accessor](#property_accessor)\n\nThe [property accessor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) syntax gets property values on objects, using either dot notation or bracket notation.\n\n```\nobject.property;\nobject[\"property\"];\n```\n\nThe [working with objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects) guide goes into more details about object properties.\n\n### [Optional chaining](#optional_chaining)\n\nThe [optional chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining) syntax (`?.`) performs the chained operation on an object if it is defined and non-`null`, and otherwise short-circuits the operation and returns `undefined`. This allows you to operate on a value that may be `null` or `undefined` without causing a `TypeError`.\n\n```\nmaybeObject?.property;\nmaybeObject?.[property];\nmaybeFunction?.();\n```\n\n### [new](#new)\n\nYou can use the [`new` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) to create an instance of a user-defined object type or of one of the built-in object types. Use `new` as follows:\n\n```\nconst objectName = new ObjectType(param1, param2, /* …, */ paramN);\n```\n\n### [super](#super)\n\nThe [`super` keyword](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super) is used to call functions on an object's parent. It is useful with [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) to call the parent constructor, for example.\n\n```\nsuper(args); // calls the parent constructor.\nsuper.functionOnParent(args);\n```\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates)",
    "title": "Expressions and operators - JavaScript | MDN",
    "description": "This chapter describes JavaScript's expressions and operators, including assignment, comparison, arithmetic, bitwise, logical, string, ternary and more.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction",
    "markdown": "# AsyncFunction - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`AsyncFunction`** object provides methods for [async functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function). In JavaScript, every async function is actually an `AsyncFunction` object.\n\nNote that `AsyncFunction` is _not_ a global object. It can be obtained with the following code:\n\n```\nconst AsyncFunction = async function () {}.constructor;\n```\n\n`AsyncFunction` is a subclass of [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function).\n\n## [Constructor](#constructor)\n\n[`AsyncFunction()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction/AsyncFunction)\n\nCreates a new `AsyncFunction` object.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function)_.\n\nThese properties are defined on `AsyncFunction.prototype` and shared by all `AsyncFunction` instances.\n\n[`AsyncFunction.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `AsyncFunction` instances, the initial value is the [`AsyncFunction`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction/AsyncFunction) constructor.\n\n[`AsyncFunction.prototype[@@toStringTag]`](#asyncfunction.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"AsyncFunction\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n**Note:** `AsyncFunction` instances do not have the [`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function)_.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-async-function-objects](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-async-function-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "AsyncFunction - JavaScript | MDN",
    "description": "The AsyncFunction object provides methods for async functions. In JavaScript, every async function is actually an AsyncFunction object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator",
    "markdown": "# AsyncGenerator - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`AsyncGenerator`** object is returned by an [async generator function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function*) and it conforms to both the [async iterable protocol and the async iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols).\n\nAsync generator methods always yield [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) objects.\n\n`AsyncGenerator` is a subclass of the hidden [`AsyncIterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator) class.\n\n## [Try it](#try_it)\n\n## [Constructor](#constructor)\n\nThere's no JavaScript entity that corresponds to the `AsyncGenerator` constructor. Instances of `AsyncGenerator` must be returned from [async generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function*):\n\n```\nasync function* createAsyncGenerator() {\n  yield await Promise.resolve(1);\n  yield await Promise.resolve(2);\n  yield await Promise.resolve(3);\n}\nconst asyncGen = createAsyncGenerator();\nasyncGen.next().then((res) => console.log(res.value)); // 1\nasyncGen.next().then((res) => console.log(res.value)); // 2\nasyncGen.next().then((res) => console.log(res.value)); // 3\n```\n\nThere's only a hidden object which is the prototype object shared by all objects created by async generator functions. This object is often stylized as `AsyncGenerator.prototype` to make it look like a class, but it should be more appropriately called [`AsyncGeneratorFunction.prototype.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction/prototype), because `AsyncGeneratorFunction` is an actual JavaScript entity. To understand the prototype chain of `AsyncGenerator` instances, see [`AsyncGeneratorFunction.prototype.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction/prototype).\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `AsyncGenerator.prototype` and shared by all `AsyncGenerator` instances.\n\n[`AsyncGenerator.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `AsyncGenerator` instances, the initial value is [`AsyncGeneratorFunction.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction).\n\n**Note:** `AsyncGenerator` objects do not store a reference to the async generator function that created them.\n\n[`AsyncGenerator.prototype[@@toStringTag]`](#asyncgenerator.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"AsyncGenerator\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n_Also inherits instance methods from its parent [`AsyncIterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator)_.\n\n[`AsyncGenerator.prototype.next()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/next)\n\nReturns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) which will be resolved with the given value yielded by the [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) expression.\n\n[`AsyncGenerator.prototype.return()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/return)\n\nActs as if a `return` statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a [`try...finally`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block) block.\n\n[`AsyncGenerator.prototype.throw()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/throw)\n\nActs as if a `throw` statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.\n\n## [Examples](#examples)\n\n### [Async generator iteration](#async_generator_iteration)\n\nThe following example iterates over an async generator, logging values 1–6 to the console at decreasing time intervals. Notice how each time a Promise is yielded, but it's automatically resolved within the `for await...of` loop.\n\n```\n// An async task. Pretend it's doing something more useful\n// in practice.\nfunction delayedValue(time, value) {\n  return new Promise((resolve /*, reject*/) => {\n    setTimeout(() => resolve(value), time);\n  });\n}\n\nasync function* generate() {\n  yield delayedValue(2000, 1);\n  yield delayedValue(1000, 2);\n  yield delayedValue(500, 3);\n  yield delayedValue(250, 4);\n  yield delayedValue(125, 5);\n  yield delayedValue(50, 6);\n  console.log(\"All done!\");\n}\n\nasync function main() {\n  for await (const value of generate()) {\n    console.log(\"value\", value);\n  }\n}\n\nmain().catch((e) => console.error(e));\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-asyncgenerator-objects](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-asyncgenerator-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "AsyncGenerator - JavaScript | MDN",
    "description": "The AsyncGenerator object is returned by an async generator function and it conforms to both the async iterable protocol and the async iterator protocol.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT",
    "markdown": "# Bitwise NOT (~) - JavaScript\n\nThe `~` operator is overloaded for two types of operands: number and [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt). For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first [coerces the operand to a numeric value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) and tests the type of it. It performs BigInt NOT if the operand becomes a BigInt; otherwise, it converts the operand to a [32-bit integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#fixed-width_number_conversion) and performs number bitwise NOT.\n\nThe operator operates on the operands' bit representations in [two's complement](https://en.wikipedia.org/wiki/Two's_complement). The operator is applied to each bit, and the result is constructed bitwise.\n\nThe truth table for the NOT operation is:\n\n| x   | NOT x |\n| --- | --- |\n| 0   | 1   |\n| 1   | 0   |\n\n 9 (base 10) = 00000000000000000000000000001001 (base 2)\n               --------------------------------\n~9 (base 10) = 11111111111111111111111111110110 (base 2) = -10 (base 10)\n\nNumbers with more than 32 bits get their most significant bits discarded. For example, the following integer with more than 32 bits will be converted to a 32-bit integer:\n\nBefore: 11100110111110100000000000000110000000000001\nAfter:              10100000000000000110000000000001\n\nFor BigInts, there's no truncation. Conceptually, understand positive BigInts as having an infinite number of leading `0` bits, and negative BigInts having an infinite number of leading `1` bits.\n\nBitwise NOTing any 32-bit integer `x` yields `-(x + 1)`. For example, `~-5` yields `4`.\n\nBitwise NOTing any number `x` twice returns `x` converted to a 32-bit integer. Do not use `~~x` to truncate numbers to integers; use [`Math.trunc()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#using_bitwise_no-ops_to_truncate_numbers) instead. Due to using 32-bit representation for numbers, both `~-1` and `~4294967295` (232 - 1) result in `0`.",
    "title": "Bitwise NOT (~) - JavaScript | MDN",
    "description": "The bitwise NOT (~) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bit of the operand is 0, and a 0 otherwise.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates",
    "markdown": "# Numbers and dates - JavaScript\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Text_formatting)\n\nThis chapter introduces the concepts, objects and functions used to work with and perform calculations using numbers and dates in JavaScript. This includes using numbers written in various bases including decimal, binary, and hexadecimal, as well as the use of the global [`Math`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math) object to perform a wide variety of mathematical operations on numbers.\n\n## [Numbers](#numbers)\n\nIn JavaScript, numbers are implemented in [double-precision 64-bit binary format IEEE 754](https://en.wikipedia.org/wiki/Double-precision_floating-point_format) (i.e., a number between ±2^−1022 and ±2^+1023, or about ±10^−308 to ±10^+308, with a numeric precision of 53 bits). Integer values up to ±2^53 − 1 can be represented exactly.\n\nIn addition to being able to represent floating-point numbers, the number type has three symbolic values: `+`[`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity), `-`[`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity), and [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) (not-a-number).\n\nSee also [JavaScript data types and structures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures) for context with other primitive types in JavaScript.\n\nYou can use four types of number literals: decimal, binary, octal, and hexadecimal.\n\n### [Decimal numbers](#decimal_numbers)\n\nDecimal literals can start with a zero (`0`) followed by another decimal digit, but if all digits after the leading `0` are smaller than 8, the number is interpreted as an octal number. This is considered a legacy syntax, and number literals prefixed with `0`, whether interpreted as octal or decimal, cause a syntax error in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#legacy_octal_literals) — so, use the `0o` prefix instead.\n\n```\n0888 // 888 parsed as decimal\n0777 // parsed as octal, 511 in decimal\n```\n\n### [Binary numbers](#binary_numbers)\n\nBinary number syntax uses a leading zero followed by a lowercase or uppercase Latin letter \"B\" (`0b` or `0B`). If the digits after the `0b` are not 0 or 1, the following [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) is thrown: \"Missing binary digits after 0b\".\n\n```\n0b10000000000000000000000000000000 // 2147483648\n0b01111111100000000000000000000000 // 2139095040\n0B00000000011111111111111111111111 // 8388607\n```\n\n### [Octal numbers](#octal_numbers)\n\nThe standard syntax for octal numbers is to prefix them with `0o`. For example:\n\n```\n0O755 // 493\n0o644 // 420\n```\n\nThere's also a legacy syntax for octal numbers — by prefixing the octal number with a zero: `0644 === 420` and `\"\\045\" === \"%\"`. If the digits after the `0` are outside the range 0 through 7, the number will be interpreted as a decimal number.\n\n```\nconst n = 0755; // 493\nconst m = 0644; // 420\n```\n\n[Strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) forbids this octal syntax.\n\n### [Hexadecimal numbers](#hexadecimal_numbers)\n\nHexadecimal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter \"X\" (`0x` or `0X`). If the digits after 0x are outside the range (0123456789ABCDEF), the following [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) is thrown: \"Identifier starts immediately after numeric literal\".\n\n```\n0xFFFFFFFFFFFFFFFFF // 295147905179352830000\n0x123456789ABCDEF   // 81985529216486900\n0XA                 // 10\n```\n\n### [Exponentiation](#exponentiation)\n\n```\n0e-5   // 0\n0e+5   // 0\n5e1    // 50\n175e-2 // 1.75\n1e3    // 1000\n1e-3   // 0.001\n1E3    // 1000\n```\n\n## [Number object](#number_object)\n\nThe built-in [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) object has properties for numerical constants, such as maximum value, not-a-number, and infinity. You cannot change the values of these properties and you use them as follows:\n\n```\nconst biggestNum = Number.MAX_VALUE;\nconst smallestNum = Number.MIN_VALUE;\nconst infiniteNum = Number.POSITIVE_INFINITY;\nconst negInfiniteNum = Number.NEGATIVE_INFINITY;\nconst notANum = Number.NaN;\n```\n\nYou always refer to a property of the predefined `Number` object as shown above, and not as a property of a `Number` object you create yourself.\n\nThe following table summarizes the `Number` object's properties.\n\n| Property | Description |\n| --- | --- |\n| [`Number.MAX_VALUE`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE) | The largest positive representable number (`1.7976931348623157e+308`) |\n| [`Number.MIN_VALUE`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE) | The smallest positive representable number (`5e-324`) |\n| [`Number.NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN) | Special \"not a number\" value |\n| [`Number.NEGATIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY) | Special negative infinite value; returned on overflow |\n| [`Number.POSITIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY) | Special positive infinite value; returned on overflow |\n| [`Number.EPSILON`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON) | Difference between `1` and the smallest value greater than `1` that can be represented as a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) (`2.220446049250313e-16`) |\n| [`Number.MIN_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER) | Minimum safe integer in JavaScript (−2^53 + 1, or `−9007199254740991`) |\n| [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) | Maximum safe integer in JavaScript (+2^53 − 1, or `+9007199254740991`) |\n\n| Method | Description |\n| --- | --- |\n| [`Number.parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat) | Parses a string argument and returns a floating point number. Same as the global [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat) function. |\n| [`Number.parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt) | Parses a string argument and returns an integer of the specified radix or base. Same as the global [`parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt) function. |\n| [`Number.isFinite()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite) | Determines whether the passed value is a finite number. |\n| [`Number.isInteger()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger) | Determines whether the passed value is an integer. |\n| [`Number.isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN) | Determines whether the passed value is [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN). More robust version of the original global [`isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN). |\n| [`Number.isSafeInteger()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger) | Determines whether the provided value is a number that is a _safe integer_. |\n\nThe `Number` prototype provides methods for retrieving information from `Number` objects in various formats. The following table summarizes the methods of `Number.prototype`.\n\n| Method | Description |\n| --- | --- |\n| [`toExponential()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential) | Returns a string representing the number in exponential notation. |\n| [`toFixed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed) | Returns a string representing the number in fixed-point notation. |\n| [`toPrecision()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision) | Returns a string representing the number to a specified precision in fixed-point notation. |\n\n## [Math object](#math_object)\n\nThe built-in [`Math`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math) object has properties and methods for mathematical constants and functions. For example, the `Math` object's `PI` property has the value of pi (3.141…), which you would use in an application as\n\nSimilarly, standard mathematical functions are methods of `Math`. These include trigonometric, logarithmic, exponential, and other functions. For example, if you want to use the trigonometric function sine, you would write\n\nNote that all trigonometric methods of `Math` take arguments in radians.\n\nThe following table summarizes the `Math` object's methods.\n\n|     |     |\n| --- | --- |Methods of `Math`\n| Method | Description |\n| --- | --- |\n| [`abs()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs) | Absolute value |\n| [`sin()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin), [`cos()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos), [`tan()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan) | Standard trigonometric functions; with the argument in radians. |\n| [`asin()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin), [`acos()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos), [`atan()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan), [`atan2()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2) | Inverse trigonometric functions; return values in radians. |\n| [`sinh()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh), [`cosh()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh), [`tanh()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh) | Hyperbolic functions; argument in hyperbolic angle. |\n| [`asinh()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh), [`acosh()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh), [`atanh()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh) | Inverse hyperbolic functions; return values in hyperbolic angle. |\n| [`pow()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow), [`exp()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp), [`expm1()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1), [`log()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log), [`log10()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10), [`log1p()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p), [`log2()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2) | Exponential and logarithmic functions. |\n| [`floor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor), [`ceil()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil) | Returns the largest/smallest integer less/greater than or equal to an argument. |\n| [`min()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min), [`max()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max) | Returns the minimum or maximum (respectively) value of a comma separated list of numbers as arguments. |\n| [`random()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random) | Returns a random number between 0 and 1. |\n| [`round()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round), [`fround()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround), [`trunc()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc), | Rounding and truncation functions. |\n| [`sqrt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt), [`cbrt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt), [`hypot()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot) | Square root, cube root, Square root of the sum of square arguments. |\n| [`sign()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign) | The sign of a number, indicating whether the number is positive, negative or zero. |\n| [`clz32()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32),  <br>[`imul()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul) | Number of leading zero bits in the 32-bit binary representation.  <br>The result of the C-like 32-bit multiplication of the two arguments. |\n\nUnlike many other objects, you never create a `Math` object of your own. You always use the built-in `Math` object.\n\n## [BigInts](#bigints)\n\nOne shortcoming of number values is they only have 64 bits. In practice, due to using IEEE 754 encoding, they cannot represent any integer larger than [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) (which is 253 - 1) accurately. To solve the need of encoding binary data and to interoperate with other languages that offer wide integers like `i64` (64-bit integers) and `i128` (128-bit integers), JavaScript also offers another data type to represent _arbitrarily large integers_: [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt).\n\nA BigInt can be defined as an integer literal suffixed by `n`:\n\n```\nconst b1 = 123n;\n// Can be arbitrarily large.\nconst b2 = -1234567890987654321n;\n```\n\nBigInts can also be constructed from number values or string values using the [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) constructor.\n\n```\nconst b1 = BigInt(123);\n// Using a string prevents loss of precision, since long number\n// literals don't represent what they seem like.\nconst b2 = BigInt(\"-1234567890987654321\");\n```\n\nConceptually, a BigInt is just an arbitrarily long sequence of bits which encodes an integer. You can safely do any arithmetic operations without losing precision or over-/underflowing.\n\n```\nconst integer = 12 ** 34; // 4.9222352429520264e+36; only has limited precision\nconst bigint = 12n ** 34n; // 4922235242952026704037113243122008064n\n```\n\nCompared to numbers, BigInt values yield higher precision when representing large _integers_; however, they cannot represent _floating-point numbers_. For example, division would round to zero:\n\n```\nconst bigintDiv = 5n / 2n; // 2n, because there's no 2.5 in BigInt\n```\n\n`Math` functions cannot be used on BigInt values. There is [an open proposal](https://github.com/tc39/proposal-bigint-math) to overload certain `Math` functions like `Math.max()` to allow BigInt values.\n\nChoosing between BigInt and number depends on your use-case and your input's range. The precision of numbers should be able to accommodate most day-to-day tasks already, and BigInts are most suitable for handling binary data.\n\nRead more about what you can do with BigInt values in the [Expressions and Operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#bigint_operators) section, or the [BigInt reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt).\n\n## [Date object](#date_object)\n\nJavaScript does not have a date data type. However, you can use the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object and its methods to work with dates and times in your applications. The `Date` object has a large number of methods for setting, getting, and manipulating dates. It does not have any properties.\n\nJavaScript handles dates similarly to Java. The two languages have many of the same date methods, and both languages store dates as the number of milliseconds since midnight at the beginning of January 1, 1970, UTC, with a Unix Timestamp being the number of seconds since the same instant. The instant at the midnight at the beginning of January 1, 1970, UTC is called the [epoch](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\nThe `Date` object range is -100,000,000 days to 100,000,000 days relative to the epoch.\n\nTo create a `Date` object:\n\n```\nconst dateObjectName = new Date([parameters]);\n```\n\nwhere `dateObjectName` is the name of the `Date` object being created; it can be a new object or a property of an existing object.\n\nCalling `Date` without the `new` keyword returns a string representing the current date and time.\n\nThe `parameters` in the preceding syntax can be any of the following:\n\n*   Nothing: creates today's date and time. For example, `today = new Date();`.\n*   A string representing a date, in many different forms. The exact forms supported differ among engines, but the following form is always supported: `YYYY-MM-DDTHH:mm:ss.sssZ`. For example, `xmas95 = new Date(\"1995-12-25\")`. If you omit hours, minutes, or seconds, the value will be set to zero.\n*   A set of integer values for year, month, and day. For example, `xmas95 = new Date(1995, 11, 25)`.\n*   A set of integer values for year, month, day, hour, minute, and seconds. For example, `xmas95 = new Date(1995, 11, 25, 9, 30, 0);`.\n\n### [Methods of the Date object](#methods_of_the_date_object)\n\nThe `Date` object methods for handling dates and times fall into these broad categories:\n\n*   \"set\" methods, for setting date and time values in `Date` objects.\n*   \"get\" methods, for getting date and time values from `Date` objects.\n*   \"to\" methods, for returning string values from `Date` objects.\n*   parse and UTC methods, for parsing `Date` strings.\n\nWith the \"get\" and \"set\" methods you can get and set seconds, minutes, hours, day of the month, day of the week, months, and years separately. There is a `getDay` method that returns the day of the week, but no corresponding `setDay` method, because the day of the week is set automatically. These methods use integers to represent these values as follows:\n\n*   Seconds and minutes: 0 to 59\n*   Hours: 0 to 23\n*   Day: 0 (Sunday) to 6 (Saturday)\n*   Date: 1 to 31 (day of the month)\n*   Months: 0 (January) to 11 (December)\n*   Year: years since 1900\n\nFor example, suppose you define the following date:\n\n```\nconst xmas95 = new Date(\"1995-12-25\");\n```\n\nThen `xmas95.getMonth()` returns 11, and `xmas95.getFullYear()` returns 1995.\n\nThe `getTime` and `setTime` methods are useful for comparing dates. The `getTime` method returns the number of milliseconds since the epoch for a `Date` object.\n\nFor example, the following code displays the number of days left in the current year:\n\n```\nconst today = new Date();\nconst endYear = new Date(1995, 11, 31, 23, 59, 59, 999); // Set day and month\nendYear.setFullYear(today.getFullYear()); // Set year to this year\nconst msPerDay = 24 * 60 * 60 * 1000; // Number of milliseconds per day\nlet daysLeft = (endYear.getTime() - today.getTime()) / msPerDay;\ndaysLeft = Math.round(daysLeft); // Returns days left in the year\n```\n\nThis example creates a `Date` object named `today` that contains today's date. It then creates a `Date` object named `endYear` and sets the year to the current year. Then, using the number of milliseconds per day, it computes the number of days between `today` and `endYear`, using `getTime` and rounding to a whole number of days.\n\nThe `parse` method is useful for assigning values from date strings to existing `Date` objects. For example, the following code uses `parse` and `setTime` to assign a date value to the `ipoDate` object:\n\n```\nconst ipoDate = new Date();\nipoDate.setTime(Date.parse(\"Aug 9, 1995\"));\n```\n\n### [Example](#example)\n\nIn the following example, the function `JSClock()` returns the time in the format of a digital clock.\n\n```\nfunction JSClock() {\n  const time = new Date();\n  const hour = time.getHours();\n  const minute = time.getMinutes();\n  const second = time.getSeconds();\n  let temp = String(hour % 12);\n  if (temp === \"0\") {\n    temp = \"12\";\n  }\n  temp += (minute < 10 ? \":0\" : \":\") + minute;\n  temp += (second < 10 ? \":0\" : \":\") + second;\n  temp += hour >= 12 ? \" P.M.\" : \" A.M.\";\n  return temp;\n}\n```\n\nThe `JSClock` function first creates a new `Date` object called `time`; since no arguments are given, time is created with the current date and time. Then calls to the `getHours`, `getMinutes`, and `getSeconds` methods assign the value of the current hour, minute, and second to `hour`, `minute`, and `second`.\n\nThe following statements build a string value based on the time. The first statement creates a variable `temp`. Its value is `hour % 12`, which is `hour` in the 12-hour system. Then, if the hour is `0`, it gets re-assigned to `12`, so that midnights and noons are displayed as `12:00` instead of `0:00`.\n\nThe next statement appends a `minute` value to `temp`. If the value of `minute` is less than 10, the conditional expression adds a string with a preceding zero; otherwise it adds a string with a demarcating colon. Then a statement appends a seconds value to `temp` in the same way.\n\nFinally, a conditional expression appends \"P.M.\" to `temp` if `hour` is 12 or greater; otherwise, it appends \"A.M.\" to `temp`.\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Text_formatting)",
    "title": "Numbers and dates - JavaScript | MDN",
    "description": "This chapter introduces the concepts, objects and functions used to work with and perform calculations using numbers and dates in JavaScript. This includes using numbers written in various bases including decimal, binary, and hexadecimal, as well as the use of the global Math object to perform a wide variety of mathematical operations on numbers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR",
    "markdown": "# Bitwise OR (|) - JavaScript\n\nThe `|` operator is overloaded for two types of operands: number and [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt). For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first [coerces both operands to numeric values](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) and tests the types of them. It performs BigInt OR if both operands become BigInts; otherwise, it converts both operands to [32-bit integers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#fixed-width_number_conversion) and performs number bitwise OR. A [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown if one operand becomes a BigInt but the other becomes a number.\n\nThe operator operates on the operands' bit representations in [two's complement](https://en.wikipedia.org/wiki/Two's_complement). Each bit in the first operand is paired with the corresponding bit in the second operand: _first bit_ to _first bit_, _second bit_ to _second bit_, and so on. The operator is applied to each pair of bits, and the result is constructed bitwise.\n\nThe truth table for the OR operation is:\n\n| x   | y   | x OR y |\n| --- | --- | --- |\n| 0   | 0   | 0   |\n| 0   | 1   | 1   |\n| 1   | 0   | 1   |\n| 1   | 1   | 1   |\n\n     9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 | 9 (base 10) = 00000000000000000000000000001111 (base 2) = 15 (base 10)\n\nNumbers with more than 32 bits get their most significant bits discarded. For example, the following integer with more than 32 bits will be converted to a 32-bit integer:\n\nBefore: 11100110111110100000000000000110000000000001\nAfter:              10100000000000000110000000000001\n\nFor BigInts, there's no truncation. Conceptually, understand positive BigInts as having an infinite number of leading `0` bits, and negative BigInts having an infinite number of leading `1` bits.\n\nBitwise ORing any number `x` with `0` returns `x` converted to a 32-bit integer. Do not use `| 0` to truncate numbers to integers; use [`Math.trunc()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#using_bitwise_no-ops_to_truncate_numbers) instead.",
    "title": "Bitwise OR (|) - JavaScript | MDN",
    "description": "The bitwise OR (|) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of either or both operands are 1.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Text_formatting",
    "markdown": "# Text formatting - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions)\n\nThis chapter introduces how to work with strings and text in JavaScript.\n\n## [Strings](#strings)\n\nJavaScript's [String](https://developer.mozilla.org/en-US/docs/Glossary/String) type is used to represent textual data. It is a set of \"elements\" of 16-bit unsigned integer values (UTF-16 code units). Each element in the String occupies a position in the String. The first element is at index 0, the next at index 1, and so on. The length of a String is the number of elements in it. You can create strings using string literals or string objects.\n\n### [String literals](#string_literals)\n\nYou can create simple strings using either single or double quotes:\n\nMore advanced strings can be created using escape sequences:\n\n#### Hexadecimal escape sequences\n\nThe number after \\\\x is interpreted as a [hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal) number.\n\n#### Unicode escape sequences\n\nThe Unicode escape sequences require at least four hexadecimal digits following `\\u`.\n\n#### Unicode code point escapes\n\nWith Unicode code point escapes, any character can be escaped using hexadecimal numbers so that it is possible to use Unicode code points up to `0x10FFFF`. With simple Unicode escapes it is often necessary to write the surrogate halves separately to achieve the same result.\n\nSee also [`String.fromCodePoint()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint) or [`String.prototype.codePointAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt).\n\n```\n\"\\u{2F804}\"\n\n// the same with simple Unicode escapes\n\"\\uD87E\\uDC04\"\n```\n\n### [String objects](#string_objects)\n\nThe [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) object is a wrapper around the string primitive data type.\n\n```\nconst foo = new String(\"foo\"); // Creates a String object\nconsole.log(foo); // [String: 'foo']\ntypeof foo; // 'object'\n```\n\nYou can call any of the methods of the `String` object on a string literal value—JavaScript automatically converts the string literal to a temporary `String` object, calls the method, then discards the temporary `String` object. You can also use the `length` property with a string literal.\n\nYou should use string literals unless you specifically need to use a `String` object, because `String` objects can have counterintuitive behavior. For example:\n\n```\nconst firstString = \"2 + 2\"; // Creates a string literal value\nconst secondString = new String(\"2 + 2\"); // Creates a String object\neval(firstString); // Returns the number 4\neval(secondString); // Returns a String object containing \"2 + 2\"\n```\n\nA `String` object has one property, `length`, that indicates the number of UTF-16 code units in the string. For example, the following code assigns `helloLength` the value 13, because \"Hello, World!\" has 13 characters, each represented by one UTF-16 code unit. You can access each code unit using an array bracket style. You can't change individual characters because strings are immutable array-like objects:\n\n```\nconst hello = \"Hello, World!\";\nconst helloLength = hello.length;\nhello[0] = \"L\"; // This has no effect, because strings are immutable\nhello[0]; // This returns \"H\"\n```\n\nCharacters whose Unicode scalar values are greater than U+FFFF (such as some rare Chinese/Japanese/Korean/Vietnamese characters and some emoji) are stored in UTF-16 with two surrogate code units each. For example, a string containing the single character U+1F600 \"Emoji grinning face\" will have length 2. Accessing the individual code units in such a string using square brackets may have undesirable consequences such as the formation of strings with unmatched surrogate code units, in violation of the Unicode standard. (Examples should be added to this page after MDN bug 857438 is fixed.) See also [`String.fromCodePoint()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint) or [`String.prototype.codePointAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt).\n\nA `String` object has a variety of methods: for example those that return a variation on the string itself, such as `substring` and `toUpperCase`.\n\nThe following table summarizes the methods of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) objects.\n\n|     |     |\n| --- | --- |\n#### Methods of `String`\n| Method | Description |\n| --- | --- |\n| [`charAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt), [`charCodeAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt), [`codePointAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt) | Return the character or character code at the specified position in string. |\n| [`indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf), [`lastIndexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf) | Return the position of specified substring in the string or last position of specified substring, respectively. |\n| [`startsWith()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith), [`endsWith()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith), [`includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes) | Returns whether or not the string starts, ends or contains a specified string. |\n| [`concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat) | Combines the text of two strings and returns a new string. |\n| [`split()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) | Splits a `String` object into an array of strings by separating the string into substrings. |\n| [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) | Extracts a section of a string and returns a new string. |\n| [`substring()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring), [`substr()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr) | Return the specified subset of the string, either by specifying the start and end indexes or the start index and a length. |\n| [`match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match), [`matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll), [`replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace), [`replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll), [`search()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search) | Work with regular expressions. |\n| [`toLowerCase()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase), [`toUpperCase()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase) | Return the string in all lowercase or all uppercase, respectively. |\n| [`normalize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize) | Returns the Unicode Normalization Form of the calling string value. |\n| [`repeat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat) | Returns a string consisting of the elements of the object repeated the given times. |\n| [`trim()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim) | Trims whitespace from the beginning and end of the string. |\n\n### [Multi-line template literals](#multi-line_template_literals)\n\n[Template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) are string literals allowing embedded expressions. You can use multi-line strings and string interpolation features with them.\n\nTemplate literals are enclosed by backtick ([grave accent](https://en.wikipedia.org/wiki/Grave_accent)) characters (`` ` ``) instead of double or single quotes. Template literals can contain placeholders. These are indicated by the dollar sign and curly braces (`${expression}`).\n\n#### Multi-lines\n\nAny new line characters inserted in the source are part of the template literal. Using normal strings, you would have to use the following syntax in order to get multi-line strings:\n\n```\nconsole.log(\n  \"string text line 1\\n\\\nstring text line 2\",\n);\n// \"string text line 1\n// string text line 2\"\n```\n\nTo get the same effect with multi-line strings, you can now write:\n\n```\nconsole.log(`string text line 1\nstring text line 2`);\n// \"string text line 1\n// string text line 2\"\n```\n\n#### Embedded expressions\n\nIn order to embed expressions within normal strings, you would use the following syntax:\n\n```\nconst five = 5;\nconst ten = 10;\nconsole.log(\n  \"Fifteen is \" + (five + ten) + \" and not \" + (2 * five + ten) + \".\",\n);\n// \"Fifteen is 15 and not 20.\"\n```\n\nNow, with template literals, you are able to make use of the syntactic sugar making substitutions like this more readable:\n\n```\nconst five = 5;\nconst ten = 10;\nconsole.log(`Fifteen is ${five + ten} and not ${2 * five + ten}.`);\n// \"Fifteen is 15 and not 20.\"\n```\n\nFor more information, read about [Template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) in the [JavaScript reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference).\n\n## [Internationalization](#internationalization)\n\nThe [`Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl) object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The constructors for [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator), [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat), and [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) objects are properties of the `Intl` object.\n\n### [Date and time formatting](#date_and_time_formatting)\n\nThe [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) object is useful for formatting date and time. The following formats a date for English as used in the United States. (The result is different in another time zone.)\n\n```\n// July 17, 2014 00:00:00 UTC:\nconst july172014 = new Date(\"2014-07-17\");\n\nconst options = {\n  year: \"2-digit\",\n  month: \"2-digit\",\n  day: \"2-digit\",\n  hour: \"2-digit\",\n  minute: \"2-digit\",\n  timeZoneName: \"short\",\n};\nconst americanDateTime = new Intl.DateTimeFormat(\"en-US\", options).format;\n\n// Local timezone vary depending on your settings\n// In CEST, logs: 07/17/14, 02:00 AM GMT+2\n// In PDT, logs: 07/16/14, 05:00 PM GMT-7\nconsole.log(americanDateTime(july172014));\n```\n\n### [Number formatting](#number_formatting)\n\nThe [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) object is useful for formatting numbers, for example currencies.\n\n```\nconst gasPrice = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 3,\n});\n\nconsole.log(gasPrice.format(5.259)); // $5.259\n\nconst hanDecimalRMBInChina = new Intl.NumberFormat(\"zh-CN-u-nu-hanidec\", {\n  style: \"currency\",\n  currency: \"CNY\",\n});\n\nconsole.log(hanDecimalRMBInChina.format(1314.25)); // ￥ 一,三一四.二五\n```\n\n### [Collation](#collation)\n\nThe [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator) object is useful for comparing and sorting strings.\n\nFor example, there are actually two different sort orders in German, _phonebook_ and _dictionary_. Phonebook sort emphasizes sound, and it's as if \"ä\", \"ö\", and so on were expanded to \"ae\", \"oe\", and so on prior to sorting.\n\n```\nconst names = [\"Hochberg\", \"Hönigswald\", \"Holzman\"];\n\nconst germanPhonebook = new Intl.Collator(\"de-DE-u-co-phonebk\");\n\n// as if sorting [\"Hochberg\", \"Hoenigswald\", \"Holzman\"]:\nconsole.log(names.sort(germanPhonebook.compare).join(\", \"));\n// \"Hochberg, Hönigswald, Holzman\"\n```\n\nSome German words conjugate with extra umlauts, so in dictionaries it's sensible to order ignoring umlauts (except when ordering words differing _only_ by umlauts: _schon_ before _schön_).\n\n```\nconst germanDictionary = new Intl.Collator(\"de-DE-u-co-dict\");\n\n// as if sorting [\"Hochberg\", \"Honigswald\", \"Holzman\"]:\nconsole.log(names.sort(germanDictionary.compare).join(\", \"));\n// \"Hochberg, Holzman, Hönigswald\"\n```\n\nFor more information about the [`Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl) API, see also [Introducing the JavaScript Internationalization API](https://hacks.mozilla.org/2014/12/introducing-the-javascript-internationalization-api/).\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions)",
    "title": "Text formatting - JavaScript | MDN",
    "description": "This chapter introduces how to work with strings and text in JavaScript.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction",
    "markdown": "# AsyncGeneratorFunction - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`AsyncGeneratorFunction`** object provides methods for [async generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function*). In JavaScript, every async generator function is actually an `AsyncGeneratorFunction` object.\n\nNote that `AsyncGeneratorFunction` is _not_ a global object. It can be obtained with the following code:\n\n```\nconst AsyncGeneratorFunction = async function* () {}.constructor;\n```\n\n`AsyncGeneratorFunction` is a subclass of [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function).\n\n## [Try it](#try_it)\n\n## [Constructor](#constructor)\n\n[`AsyncGeneratorFunction()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction/AsyncGeneratorFunction)\n\nCreates a new `AsyncGeneratorFunction` object.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function)_.\n\nThese properties are defined on `AsyncGeneratorFunction.prototype` and shared by all `AsyncGeneratorFunction` instances.\n\n[`AsyncGeneratorFunction.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `AsyncGeneratorFunction` instances, the initial value is the [`AsyncGeneratorFunction`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction/AsyncGeneratorFunction) constructor.\n\n[`AsyncGeneratorFunction.prototype.prototype`](#asyncgeneratorfunction.prototype.prototype)\n\nAll async generator functions share the same [`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property, which is [`AsyncGenerator.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator). Each async generator function created with the `async function*` syntax or the `AsyncGeneratorFunction()` constructor also has its own `prototype` property, whose prototype is `AsyncGeneratorFunction.prototype.prototype`. When the async generator function is called, its `prototype` property becomes the prototype of the returned async generator object.\n\n[`AsyncGeneratorFunction.prototype[@@toStringTag]`](#asyncgeneratorfunction.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"AsyncGeneratorFunction\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\nThese properties are own properties of each `AsyncGeneratorFunction` instance.\n\n[`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction/prototype)\n\nUsed when the function is used as a constructor with the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator. It will become the new object's prototype.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function)_.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-asyncgeneratorfunction-objects](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-asyncgeneratorfunction-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "AsyncGeneratorFunction - JavaScript | MDN",
    "description": "The AsyncGeneratorFunction object provides methods for async generator functions. In JavaScript, every async generator function is actually an AsyncGeneratorFunction object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions",
    "markdown": "# Regular expressions - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Text_formatting)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections)\n\nRegular expressions are patterns used to match character combinations in strings. In JavaScript, regular expressions are also objects. These patterns are used with the [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) and [`test()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) methods of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp), and with the [`match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match), [`matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll), [`replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace), [`replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll), [`search()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search), and [`split()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) methods of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String). This chapter describes JavaScript regular expressions. It provides a brief overview of each syntax element. For a detailed explanation of each one's semantics, read the [regular expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions) reference.\n\n## [Creating a regular expression](#creating_a_regular_expression)\n\nYou construct a regular expression in one of two ways:\n\n*   Using a regular expression literal, which consists of a pattern enclosed between slashes, as follows: Regular expression literals provide compilation of the regular expression when the script is loaded. If the regular expression remains constant, using this can improve performance.\n*   Or calling the constructor function of the [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) object, as follows:\n    \n    ```\n    const re = new RegExp(\"ab+c\");\n    ```\n    \n    Using the constructor function provides runtime compilation of the regular expression. Use the constructor function when you know the regular expression pattern will be changing, or you don't know the pattern and are getting it from another source, such as user input.\n\n## [Writing a regular expression pattern](#writing_a_regular_expression_pattern)\n\nA regular expression pattern is composed of simple characters, such as `/abc/`, or a combination of simple and special characters, such as `/ab*c/` or `/Chapter (\\d+)\\.\\d*/`. The last example includes parentheses, which are used as a memory device. The match made with this part of the pattern is remembered for later use, as described in [Using groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences#using_groups).\n\n### [Using simple patterns](#using_simple_patterns)\n\nSimple patterns are constructed of characters for which you want to find a direct match. For example, the pattern `/abc/` matches character combinations in strings only when the exact sequence `\"abc\"` occurs (all characters together and in that order). Such a match would succeed in the strings `\"Hi, do you know your abc's?\"` and `\"The latest airplane designs evolved from slabcraft.\"`. In both cases the match is with the substring `\"abc\"`. There is no match in the string `\"Grab crab\"` because while it contains the substring `\"ab c\"`, it does not contain the exact substring `\"abc\"`.\n\n### [Using special characters](#using_special_characters)\n\nWhen the search for a match requires something more than a direct match, such as finding one or more b's, or finding white space, you can include special characters in the pattern. For example, to match _a single `\"a\"` followed by zero or more `\"b\"`s followed by `\"c\"`_, you'd use the pattern `/ab*c/`: the `*` after `\"b\"` means \"0 or more occurrences of the preceding item.\" In the string `\"cbbabbbbcdebc\"`, this pattern will match the substring `\"abbbbc\"`.\n\nThe following pages provide lists of the different special characters that fit into each category, along with descriptions and examples.\n\n[Assertions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions) guide\n\nAssertions include boundaries, which indicate the beginnings and endings of lines and words, and other patterns indicating in some way that a match is possible (including look-ahead, look-behind, and conditional expressions).\n\n[Character classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes) guide\n\nDistinguish different types of characters. For example, distinguishing between letters and digits.\n\n[Groups and backreferences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences) guide\n\nGroups group multiple patterns as a whole, and capturing groups provide extra submatch information when using a regular expression pattern to match against a string. Backreferences refer to a previously captured group in the same regular expression.\n\n[Quantifiers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers) guide\n\nIndicate numbers of characters or expressions to match.\n\nIf you want to look at all the special characters that can be used in regular expressions in a single table, see the following:\n\n|     |     |\n| --- | --- |Special characters in regular expressions.\n| Characters / constructs | Corresponding article |\n| --- | --- |\n| `[xyz]`, `[^xyz]`, `.`, `\\d`, `\\D`, `\\w`, `\\W`, `\\s`, `\\S`, `\\t`, `\\r`, `\\n`, `\\v`, `\\f`, `[\\b]`, `\\0`, `\\c_X_`, `\\x_hh_`, `\\u_hhhh_`, `\\u_{hhhh}_`, `_x_\\|_y_` | [Character classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes) |\n| `^`, `$`, `\\b`, `\\B`, `x(?=y)`, `x(?!y)`, `(?<=y)x`, `(?<!y)x` | [Assertions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions) |\n| `(_x_)`, `(?<Name>x)`, `(?:_x_)`, `\\_n_`, `\\k<Name>` | [Groups and backreferences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences) |\n| `_x_*`, `_x_+`, `_x_?`, `_x_{_n_}`, `_x_{_n_,}`, `_x_{_n_,_m_}` | [Quantifiers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers) |\n\n### [Escaping](#escaping)\n\nIf you need to use any of the special characters literally (actually searching for a `\"*\"`, for instance), you must escape it by putting a backslash in front of it. For instance, to search for `\"a\"` followed by `\"*\"` followed by `\"b\"`, you'd use `/a\\*b/` — the backslash \"escapes\" the `\"*\"`, making it literal instead of special.\n\nSimilarly, if you're writing a regular expression literal and need to match a slash (\"/\"), you need to escape that (otherwise, it terminates the pattern). For instance, to search for the string \"/example/\" followed by one or more alphabetic characters, you'd use `/\\/example\\/[a-z]+/i`—the backslashes before each slash make them literal.\n\nTo match a literal backslash, you need to escape the backslash. For instance, to match the string \"C:\\\\\" where \"C\" can be any letter, you'd use `/[A-Z]:\\\\/` — the first backslash escapes the one after it, so the expression searches for a single literal backslash.\n\nIf using the `RegExp` constructor with a string literal, remember that the backslash is an escape in string literals, so to use it in the regular expression, you need to escape it at the string literal level. `/a\\*b/` and `new RegExp(\"a\\\\*b\")` create the same expression, which searches for \"a\" followed by a literal \"\\*\" followed by \"b\".\n\nIf escape strings are not already part of your pattern you can add them using [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace):\n\n```\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n}\n```\n\nThe \"g\" after the regular expression is an option or flag that performs a global search, looking in the whole string and returning all matches. It is explained in detail below in [Advanced Searching With Flags](#advanced_searching_with_flags).\n\n_Why isn't this built into JavaScript?_ There is a [proposal](https://github.com/tc39/proposal-regex-escaping) to add such a function to RegExp.\n\n### [Using parentheses](#using_parentheses)\n\nParentheses around any part of the regular expression pattern causes that part of the matched substring to be remembered. Once remembered, the substring can be recalled for other use. See [Groups and backreferences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences#using_groups) for more details.\n\n## [Using regular expressions in JavaScript](#using_regular_expressions_in_javascript)\n\nRegular expressions are used with the [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) methods [`test()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) and [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) and with the [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) methods [`match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match), [`matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll), [`replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace), [`replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll), [`search()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search), and [`split()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split).\n\n| Method | Description |\n| --- | --- |\n| [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) | Executes a search for a match in a string. It returns an array of information or `null` on a mismatch. |\n| [`test()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) | Tests for a match in a string. It returns `true` or `false`. |\n| [`match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) | Returns an array containing all of the matches, including capturing groups, or `null` if no match is found. |\n| [`matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll) | Returns an iterator containing all of the matches, including capturing groups. |\n| [`search()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search) | Tests for a match in a string. It returns the index of the match, or `-1` if the search fails. |\n| [`replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) | Executes a search for a match in a string, and replaces the matched substring with a replacement substring. |\n| [`replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) | Executes a search for all matches in a string, and replaces the matched substrings with a replacement substring. |\n| [`split()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) | Uses a regular expression or a fixed string to break a string into an array of substrings. |\n\nWhen you want to know whether a pattern is found in a string, use the `test()` or `search()` methods; for more information (but slower execution) use the `exec()` or `match()` methods. If you use `exec()` or `match()` and if the match succeeds, these methods return an array and update properties of the associated regular expression object and also of the predefined regular expression object, `RegExp`. If the match fails, the `exec()` method returns `null` (which coerces to `false`).\n\nIn the following example, the script uses the `exec()` method to find a match in a string.\n\n```\nconst myRe = /d(b+)d/g;\nconst myArray = myRe.exec(\"cdbbdbsbz\");\n```\n\nIf you do not need to access the properties of the regular expression, an alternative way of creating `myArray` is with this script:\n\n```\nconst myArray = /d(b+)d/g.exec(\"cdbbdbsbz\");\n// similar to 'cdbbdbsbz'.match(/d(b+)d/g); however,\n// 'cdbbdbsbz'.match(/d(b+)d/g) outputs [ \"dbbd\" ]\n// while /d(b+)d/g.exec('cdbbdbsbz') outputs [ 'dbbd', 'bb', index: 1, input: 'cdbbdbsbz' ]\n```\n\n(See [Using the global search flag with `exec()`](#using_the_global_search_flag_with_exec) for further info about the different behaviors.)\n\nIf you want to construct the regular expression from a string, yet another alternative is this script:\n\n```\nconst myRe = new RegExp(\"d(b+)d\", \"g\");\nconst myArray = myRe.exec(\"cdbbdbsbz\");\n```\n\nWith these scripts, the match succeeds and returns the array and updates the properties shown in the following table.\n\n|     |     |     |     |\n| --- | --- | --- | --- |Results of regular expression execution.\n| Object | Property or index | Description | In this example |\n| --- | --- | --- | --- |\n| `myArray` |     | The matched string and all remembered substrings. | `['dbbd', 'bb', index: 1, input: 'cdbbdbsbz']` |\n| `index` | The 0-based index of the match in the input string. | `1` |\n| `input` | The original string. | `'cdbbdbsbz'` |\n| `[0]` | The last matched characters. | `'dbbd'` |\n| `myRe` | `lastIndex` | The index at which to start the next match. (This property is set only if the regular expression uses the g option, described in [Advanced Searching With Flags](#advanced_searching_with_flags).) | `5` |\n| `source` | The text of the pattern. Updated at the time that the regular expression is created, not executed. | `'d(b+)d'` |\n\nAs shown in the second form of this example, you can use a regular expression created with an object initializer without assigning it to a variable. If you do, however, every occurrence is a new regular expression. For this reason, if you use this form without assigning it to a variable, you cannot subsequently access the properties of that regular expression. For example, assume you have this script:\n\n```\nconst myRe = /d(b+)d/g;\nconst myArray = myRe.exec(\"cdbbdbsbz\");\nconsole.log(`The value of lastIndex is ${myRe.lastIndex}`);\n\n// \"The value of lastIndex is 5\"\n```\n\nHowever, if you have this script:\n\n```\nconst myArray = /d(b+)d/g.exec(\"cdbbdbsbz\");\nconsole.log(`The value of lastIndex is ${/d(b+)d/g.lastIndex}`);\n\n// \"The value of lastIndex is 0\"\n```\n\nThe occurrences of `/d(b+)d/g` in the two statements are different regular expression objects and hence have different values for their `lastIndex` property. If you need to access the properties of a regular expression created with an object initializer, you should first assign it to a variable.\n\n### [Advanced searching with flags](#advanced_searching_with_flags)\n\nRegular expressions have optional flags that allow for functionality like global searching and case-insensitive searching. These flags can be used separately or together in any order, and are included as part of the regular expression.\n\n| Flag | Description | Corresponding property |\n| --- | --- | --- |\n| `d` | Generate indices for substring matches. | [`hasIndices`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices) |\n| `g` | Global search. | [`global`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global) |\n| `i` | Case-insensitive search. | [`ignoreCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase) |\n| `m` | Allows `^` and `$` to match next to newline characters. | [`multiline`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline) |\n| `s` | Allows `.` to match newline characters. | [`dotAll`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll) |\n| `u` | \"Unicode\"; treat a pattern as a sequence of Unicode code points. | [`unicode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode) |\n| `v` | An upgrade to the `u` mode with more Unicode features. | [`unicodeSets`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets) |\n| `y` | Perform a \"sticky\" search that matches starting at the current position in the target string. | [`sticky`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky) |\n\nTo include a flag with the regular expression, use this syntax:\n\n```\nconst re = /pattern/flags;\n```\n\nor\n\n```\nconst re = new RegExp(\"pattern\", \"flags\");\n```\n\nNote that the flags are an integral part of a regular expression. They cannot be added or removed later.\n\nFor example, `re = /\\w+\\s/g` creates a regular expression that looks for one or more characters followed by a space, and it looks for this combination throughout the string.\n\n```\nconst re = /\\w+\\s/g;\nconst str = \"fee fi fo fum\";\nconst myArray = str.match(re);\nconsole.log(myArray);\n\n// [\"fee \", \"fi \", \"fo \"]\n```\n\nYou could replace the line:\n\nwith:\n\n```\nconst re = new RegExp(\"\\\\w+\\\\s\", \"g\");\n```\n\nand get the same result.\n\nThe `m` flag is used to specify that a multiline input string should be treated as multiple lines. If the `m` flag is used, `^` and `$` match at the start or end of any line within the input string instead of the start or end of the entire string.\n\n#### Using the global search flag with exec()\n\n[`RegExp.prototype.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) method with the `g` flag returns each match and its position iteratively.\n\n```\nconst str = \"fee fi fo fum\";\nconst re = /\\w+\\s/g;\n\nconsole.log(re.exec(str)); // [\"fee \", index: 0, input: \"fee fi fo fum\"]\nconsole.log(re.exec(str)); // [\"fi \", index: 4, input: \"fee fi fo fum\"]\nconsole.log(re.exec(str)); // [\"fo \", index: 7, input: \"fee fi fo fum\"]\nconsole.log(re.exec(str)); // null\n```\n\nIn contrast, [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) method returns all matches at once, but without their position.\n\n```\nconsole.log(str.match(re)); // [\"fee \", \"fi \", \"fo \"]\n```\n\n#### Using unicode regular expressions\n\nThe `u` flag is used to create \"unicode\" regular expressions; that is, regular expressions which support matching against unicode text. An important feature that's enabled in unicode mode is [Unicode property escapes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape). For example, the following regular expression might be used to match against an arbitrary unicode \"word\":\n\nUnicode regular expressions have different execution behavior as well. [`RegExp.prototype.unicode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode) contains more explanation about this.\n\n## [Examples](#examples)\n\n### [Using special characters to verify input](#using_special_characters_to_verify_input)\n\nIn the following example, the user is expected to enter a phone number. When the user presses the \"Check\" button, the script checks the validity of the number. If the number is valid (matches the character sequence specified by the regular expression), the script shows a message thanking the user and confirming the number. If the number is invalid, the script informs the user that the phone number is not valid.\n\nThe regular expression looks for:\n\n1.  the beginning of the line of data: `^`\n2.  followed by three numeric characters `\\d{3}` OR `|` a left parenthesis `\\(`, followed by three digits `\\d{3}`, followed by a close parenthesis `\\)`, in a non-capturing group `(?:)`\n3.  followed by one dash, forward slash, or decimal point in a capturing group `()`\n4.  followed by three digits `\\d{3}`\n5.  followed by the match remembered in the (first) captured group `\\1`\n6.  followed by four digits `\\d{4}`\n7.  followed by the end of the line of data: `$`\n\n#### HTML\n\n```\n<p>\n  Enter your phone number (with area code) and then click \"Check\".\n  <br />\n  The expected format is like ###-###-####.\n</p>\n<form id=\"form\">\n  <input id=\"phone\" />\n  <button type=\"submit\">Check</button>\n</form>\n<p id=\"output\"></p>\n```\n\n#### JavaScript\n\n```\nconst form = document.querySelector(\"#form\");\nconst input = document.querySelector(\"#phone\");\nconst output = document.querySelector(\"#output\");\n\nconst re = /^(?:\\d{3}|\\(\\d{3}\\))([-/.])\\d{3}\\1\\d{4}$/;\n\nfunction testInfo(phoneInput) {\n  const ok = re.exec(phoneInput.value);\n\n  output.textContent = ok\n    ? `Thanks, your phone number is ${ok[0]}`\n    : `${phoneInput.value} isn't a phone number with area code!`;\n}\n\nform.addEventListener(\"submit\", (event) => {\n  event.preventDefault();\n  testInfo(input);\n});\n```\n\n#### Result\n\n[RegExr](https://regexr.com/)\n\nAn online tool to learn, build, & test Regular Expressions.\n\n[Regex tester](https://regex101.com/)\n\nAn online regex builder/debugger\n\n[Regex interactive tutorial](https://regexlearn.com/)\n\nAn online interactive tutorials, Cheat sheet, & Playground.\n\n[Regex visualizer](https://extendsclass.com/regex-tester.html)\n\nAn online visual regex tester.\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Text_formatting)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections)",
    "title": "Regular expressions - JavaScript | MDN",
    "description": "Regular expressions are patterns used to match character combinations in strings.\n  In JavaScript, regular expressions are also objects. These patterns are used with the exec() and test() methods of RegExp, and with the match(), matchAll(), replace(), replaceAll(), search(), and split() methods of String.\n  This chapter describes JavaScript regular expressions. It provides a brief overview of each syntax element. For a detailed explanation of each one's semantics, read the regular expressions reference.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment",
    "markdown": "# Bitwise OR assignment (|=) - JavaScript\n\nThe **bitwise OR assignment (`|=`)** operator performs [bitwise OR](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR) on the two operands and assigns the result to the left operand.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\n`x |= y` is equivalent to `x = x | y`, except that the expression `x` is only evaluated once.\n\n## [Examples](#examples)\n\n### [Using bitwise OR assignment](#using_bitwise_or_assignment)\n\n```\nlet a = 5;\na |= 2; // 7\n// 5: 00000000000000000000000000000101\n// 2: 00000000000000000000000000000010\n// -----------------------------------\n// 7: 00000000000000000000000000000111\n\nlet b = 5n;\nb |= 2n; // 7n\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-assignment-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Bitwise OR assignment (|=) - JavaScript | MDN",
    "description": "The bitwise OR assignment (|=) operator performs bitwise OR on the two operands and assigns the result to the left operand.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator",
    "markdown": "# AsyncIterator - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nAn **`AsyncIterator`** object is an object that conforms to the [async iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols) by providing a `next()` method that returns a promise fulfilling to an iterator result object. The `AsyncIterator.prototype` object is a hidden global object that all built-in async iterators inherit from. It provides an [`@@asyncIterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator/@@asyncIterator) method that returns the async iterator object itself, making the async iterator also [async iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols).\n\nNote that `AsyncIterator` is _not_ a global object, although it will be in the future with the [async iterator helpers proposal](https://github.com/tc39/proposal-async-iterator-helpers). The `AsyncIterator.prototype` object shared by all built-in async iterators can be obtained with the following code:\n\n```\nconst AsyncIteratorPrototype = Object.getPrototypeOf(\n  Object.getPrototypeOf(Object.getPrototypeOf((async function* () {})())),\n);\n```\n\n## [Description](#description)\n\nCurrently, the only built-in JavaScript async iterator is the [`AsyncGenerator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator) object returned by [async generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function*). There are some other built-in async iterators in web API, such as the one of a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream).\n\nEach of these async iterators have a distinct prototype object, which defines the `next()` method used by the particular async iterator. All of these prototype objects inherit from `AsyncIterator.prototype`, which provides an [`@@asyncIterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator) method that returns the async iterator object itself, making the async iterator also [async iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols).\n\n**Note:** `AsyncIterator.prototype` does not implement [`@@iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator), so async iterators are not [sync iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) by default.\n\n## [Instance methods](#instance_methods)\n\n[`AsyncIterator.prototype[@@asyncIterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator/@@asyncIterator)\n\nReturns the async iterator object itself. This allows async iterator objects to also be async iterable.\n\n## [Examples](#examples)\n\n### [Using an async iterator as an async iterable](#using_an_async_iterator_as_an_async_iterable)\n\nAll built-in async iterators are also async iterable, so you can use them in a `for await...of` loop:\n\n```\nconst asyncIterator = (async function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n})();\n(async () => {\n  for await (const value of asyncIterator) {\n    console.log(value);\n  }\n})();\n// Logs: 1, 2, 3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-asynciteratorprototype](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-asynciteratorprototype) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "AsyncIterator - JavaScript | MDN",
    "description": "An AsyncIterator object is an object that conforms to the async iterator protocol by providing a next() method that returns a promise fulfilling to an iterator result object. The AsyncIterator.prototype object is a hidden global object that all built-in async iterators inherit from. It provides an @@asyncIterator method that returns the async iterator object itself, making the async iterator also async iterable.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR",
    "markdown": "# Bitwise XOR (^) - JavaScript\n\nThe `^` operator is overloaded for two types of operands: number and [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt). For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first [coerces both operands to numeric values](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) and tests the types of them. It performs BigInt XOR if both operands become BigInts; otherwise, it converts both operands to [32-bit integers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#fixed-width_number_conversion) and performs number bitwise XOR. A [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown if one operand becomes a BigInt but the other becomes a number.\n\nThe operator operates on the operands' bit representations in [two's complement](https://en.wikipedia.org/wiki/Two's_complement). Each bit in the first operand is paired with the corresponding bit in the second operand: _first bit_ to _first bit_, _second bit_ to _second bit_, and so on. The operator is applied to each pair of bits, and the result is constructed bitwise.\n\nThe truth table for the XOR operation is:\n\n| x   | y   | x XOR y |\n| --- | --- | --- |\n| 0   | 0   | 0   |\n| 0   | 1   | 1   |\n| 1   | 0   | 1   |\n| 1   | 1   | 0   |\n\n     9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 ^ 9 (base 10) = 00000000000000000000000000000111 (base 2) = 7 (base 10)\n\nNumbers with more than 32 bits get their most significant bits discarded. For example, the following integer with more than 32 bits will be converted to a 32-bit integer:\n\nBefore: 11100110111110100000000000000110000000000001\nAfter:              10100000000000000110000000000001\n\nFor BigInts, there's no truncation. Conceptually, understand positive BigInts as having an infinite number of leading `0` bits, and negative BigInts having an infinite number of leading `1` bits.\n\nBitwise XORing any number `x` with `0` returns `x` converted to a 32-bit integer. Do not use `^ 0` to truncate numbers to integers; use [`Math.trunc()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#using_bitwise_no-ops_to_truncate_numbers) instead.",
    "title": "Bitwise XOR (^) - JavaScript | MDN",
    "description": "The bitwise XOR (^) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of either but not both operands are 1.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics",
    "markdown": "# Atomics - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Atomics`** namespace object contains static methods for carrying out atomic operations. They are used with [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) and [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) objects.\n\n## [Description](#description)\n\nUnlike most global objects, `Atomics` is not a constructor. You cannot use it with the [`new` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) or invoke the `Atomics` object as a function. All properties and methods of `Atomics` are static (just like the [`Math`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math) object).\n\n### [Atomic operations](#atomic_operations)\n\nWhen memory is shared, multiple threads can read and write the same data in memory. Atomic operations make sure that predictable values are written and read, that operations are finished before the next operation starts and that operations are not interrupted.\n\n### [Wait and notify](#wait_and_notify)\n\nThe `wait()` and `notify()` methods are modeled on Linux futexes (\"fast user-space mutex\") and provide ways for waiting until a certain condition becomes true and are typically used as blocking constructs.\n\n## [Static properties](#static_properties)\n\n[`Atomics[@@toStringTag]`](#atomicstostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Atomics\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Static methods](#static_methods)\n\n[`Atomics.add()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/add)\n\nAdds the provided value to the existing value at the specified index of the array. Returns the old value at that index.\n\n[`Atomics.and()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/and)\n\nComputes a bitwise AND on the value at the specified index of the array with the provided value. Returns the old value at that index.\n\n[`Atomics.compareExchange()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/compareExchange)\n\nStores a value at the specified index of the array, if it equals a value. Returns the old value.\n\n[`Atomics.exchange()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/exchange)\n\nStores a value at the specified index of the array. Returns the old value.\n\n[`Atomics.isLockFree()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/isLockFree)\n\nAn optimization primitive that can be used to determine whether to use locks or atomic operations. Returns `true` if an atomic operation on arrays of the given element size will be implemented using a hardware atomic operation (as opposed to a lock). Experts only.\n\n[`Atomics.load()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/load)\n\nReturns the value at the specified index of the array.\n\n[`Atomics.notify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/notify)\n\nNotifies agents that are waiting on the specified index of the array. Returns the number of agents that were notified.\n\n[`Atomics.or()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/or)\n\nComputes a bitwise OR on the value at the specified index of the array with the provided value. Returns the old value at that index.\n\n[`Atomics.store()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/store)\n\nStores a value at the specified index of the array. Returns the value.\n\n[`Atomics.sub()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/sub)\n\nSubtracts a value at the specified index of the array. Returns the old value at that index.\n\n[`Atomics.wait()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait)\n\nVerifies that the specified index of the array still contains a value and sleeps awaiting or times out. Returns either `\"ok\"`, `\"not-equal\"`, or `\"timed-out\"`. If waiting is not allowed in the calling agent then it throws an exception. (Most browsers will not allow `wait()` on the browser's main thread.)\n\n[`Atomics.waitAsync()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/waitAsync)\n\nWaits asynchronously (i.e. without blocking, unlike `Atomics.wait`) on a shared memory location and returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n[`Atomics.xor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/xor)\n\nComputes a bitwise XOR on the value at the specified index of the array with the provided value. Returns the old value at that index.\n\n## [Examples](#examples)\n\n### [Using Atomics](#using_atomics)\n\n```\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\n\nta[0]; // 0\nta[0] = 5; // 5\n\nAtomics.add(ta, 0, 12); // 5\nAtomics.load(ta, 0); // 17\n\nAtomics.and(ta, 0, 1); // 17\nAtomics.load(ta, 0); // 1\n\nAtomics.compareExchange(ta, 0, 5, 12); // 1\nAtomics.load(ta, 0); // 1\n\nAtomics.exchange(ta, 0, 12); // 1\nAtomics.load(ta, 0); // 12\n\nAtomics.isLockFree(1); // true\nAtomics.isLockFree(2); // true\nAtomics.isLockFree(3); // false\nAtomics.isLockFree(4); // true\n\nAtomics.or(ta, 0, 1); // 12\nAtomics.load(ta, 0); // 13\n\nAtomics.store(ta, 0, 12); // 12\n\nAtomics.sub(ta, 0, 2); // 12\nAtomics.load(ta, 0); // 10\n\nAtomics.xor(ta, 0, 1); // 10\nAtomics.load(ta, 0); // 11\n```\n\n### [Waiting and notifying](#waiting_and_notifying)\n\nGiven a shared `Int32Array`:\n\n```\nconst sab = new SharedArrayBuffer(1024);\nconst int32 = new Int32Array(sab);\n```\n\nA reading thread is sleeping and waiting on location 0 which is expected to be 0. As long as that is true, it will not go on. However, once the writing thread has stored a new value, it will be notified by the writing thread and return the new value (123).\n\n```\nAtomics.wait(int32, 0, 0);\nconsole.log(int32[0]); // 123\n```\n\nA writing thread stores a new value and notifies the waiting thread once it has written:\n\n```\nconsole.log(int32[0]); // 0;\nAtomics.store(int32, 0, 123);\nAtomics.notify(int32, 0, 1);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-atomics-object](https://tc39.es/ecma262/multipage/structured-data.html#sec-atomics-object) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Atomics - JavaScript | MDN",
    "description": "The Atomics namespace object contains static methods for carrying out atomic operations. They are used with SharedArrayBuffer and ArrayBuffer objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections",
    "markdown": "# Keyed collections - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects)\n\nThis chapter introduces collections of data which are indexed by a key; `Map` and `Set` objects contain elements which are iterable in the order of insertion.\n\n## [Maps](#maps)\n\n### [Map object](#map_object)\n\nA [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) object is a simple key/value map and can iterate its elements in insertion order.\n\nThe following code shows some basic operations with a `Map`. See also the [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) reference page for more examples and the complete API. You can use a [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop to return an array of `[key, value]` for each iteration.\n\n```\nconst sayings = new Map();\nsayings.set(\"dog\", \"woof\");\nsayings.set(\"cat\", \"meow\");\nsayings.set(\"elephant\", \"toot\");\nsayings.size; // 3\nsayings.get(\"dog\"); // woof\nsayings.get(\"fox\"); // undefined\nsayings.has(\"bird\"); // false\nsayings.delete(\"dog\");\nsayings.has(\"dog\"); // false\n\nfor (const [key, value] of sayings) {\n  console.log(`${key} goes ${value}`);\n}\n// \"cat goes meow\"\n// \"elephant goes toot\"\n\nsayings.clear();\nsayings.size; // 0\n```\n\n### [Object and Map compared](#object_and_map_compared)\n\nTraditionally, [objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) have been used to map strings to values. Objects allow you to set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. `Map` objects, however, have a few more advantages that make them better maps.\n\n*   The keys of an `Object` are [strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) or [symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol), whereas they can be of any value for a `Map`.\n*   You can get the `size` of a `Map` easily, while you have to manually keep track of size for an `Object`.\n*   The iteration of maps is in insertion order of the elements.\n*   An `Object` has a prototype, so there are default keys in the map. (This can be bypassed using `map = Object.create(null)`.)\n\nThese three tips can help you to decide whether to use a `Map` or an `Object`:\n\n*   Use maps over objects when keys are unknown until run time, and when all keys are the same type and all values are the same type.\n*   Use maps if there is a need to store primitive values as keys because object treats each key as a string whether it's a number value, boolean value or any other primitive value.\n*   Use objects when there is logic that operates on individual elements.\n\n### [WeakMap object](#weakmap_object)\n\nA [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) is a collection of key/value pairs whose keys must be objects or [non-registered symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry), with values of any arbitrary [JavaScript type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures), and which does not create strong references to its keys. That is, an object's presence as a key in a `WeakMap` does not prevent the object from being garbage collected. Once an object used as a key has been collected, its corresponding values in any `WeakMap` become candidates for garbage collection as well — as long as they aren't strongly referred to elsewhere. The only primitive type that can be used as a `WeakMap` key is symbol — more specifically, [non-registered symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) — because non-registered symbols are guaranteed to be unique and cannot be re-created.\n\nThe `WeakMap` API is essentially the same as the `Map` API. However, a `WeakMap` doesn't allow observing the liveness of its keys, which is why it doesn't allow enumeration. So there is no method to obtain a list of the keys in a `WeakMap`. If there were, the list would depend on the state of garbage collection, introducing non-determinism.\n\nFor more information and example code, see also \"Why WeakMap?\" on the [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) reference page.\n\nOne use case of `WeakMap` objects is to store private data for an object, or to hide implementation details. The following example is from Nick Fitzgerald's blog post [\"Hiding Implementation Details with ECMAScript 6 WeakMaps\"](https://fitzgeraldnick.com/2014/01/13/hiding-implementation-details-with-e6-weakmaps.html). The private data and methods belong inside the object and are stored in the `privates` object, which is a `WeakMap`. Everything exposed on the instance and prototype is public; everything else is inaccessible from the outside world because `privates` is not exported from the module.\n\n```\nconst privates = new WeakMap();\n\nfunction Public() {\n  const me = {\n    // Private data goes here\n  };\n  privates.set(this, me);\n}\n\nPublic.prototype.method = function () {\n  const me = privates.get(this);\n  // Do stuff with private data in `me`\n  // …\n};\n\nmodule.exports = Public;\n```\n\n## [Sets](#sets)\n\n### [Set object](#set_object)\n\n[`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) objects are collections of unique values. You can iterate its elements in insertion order. A value in a `Set` may only occur once; it is unique in the `Set`'s collection.\n\nThe following code shows some basic operations with a `Set`. See also the [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) reference page for more examples and the complete API.\n\n```\nconst mySet = new Set();\nmySet.add(1);\nmySet.add(\"some text\");\nmySet.add(\"foo\");\n\nmySet.has(1); // true\nmySet.delete(\"foo\");\nmySet.size; // 2\n\nfor (const item of mySet) {\n  console.log(item);\n}\n// 1\n// \"some text\"\n```\n\n### [Converting between Array and Set](#converting_between_array_and_set)\n\nYou can create an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) from a Set using [`Array.from`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from) or the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax). Also, the `Set` constructor accepts an `Array` to convert in the other direction.\n\n**Note:** `Set` objects store _unique values_—so any duplicate elements from an Array are deleted when converting!\n\n```\nArray.from(mySet);\n[...mySet2];\n\nmySet2 = new Set([1, 2, 3, 4]);\n```\n\n### [Array and Set compared](#array_and_set_compared)\n\nTraditionally, a set of elements has been stored in arrays in JavaScript in a lot of situations. The `Set` object, however, has some advantages:\n\n*   Deleting Array elements by value (`arr.splice(arr.indexOf(val), 1)`) is very slow.\n*   `Set` objects let you delete elements by their value. With an array, you would have to `splice` based on an element's index.\n*   The value [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) cannot be found with `indexOf` in an array.\n*   `Set` objects store unique values. You don't have to manually keep track of duplicates.\n\n### [WeakSet object](#weakset_object)\n\n[`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) objects are collections of garbage-collectable values, including objects and [non-registered symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry). A value in the `WeakSet` may only occur once. It is unique in the `WeakSet`'s collection.\n\nThe main differences to the [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object are:\n\n*   In contrast to `Sets`, `WeakSets` are **collections of _objects or symbols only_**, and not of arbitrary values of any type.\n*   The `WeakSet` is _weak_: References to objects in the collection are held weakly. If there is no other reference to an object stored in the `WeakSet`, they can be garbage collected. That also means that there is no list of current objects stored in the collection.\n*   `WeakSets` are not enumerable.\n\nThe use cases of `WeakSet` objects are limited. They will not leak memory, so it can be safe to use DOM elements as a key and mark them for tracking purposes, for example.\n\n## [Key and value equality of Map and Set](#key_and_value_equality_of_map_and_set)\n\nBoth the key equality of `Map` objects and the value equality of `Set` objects are based on the [SameValueZero algorithm](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality):\n\n*   Equality works like the identity comparison operator `===`.\n*   `-0` and `+0` are considered equal.\n*   [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) is considered equal to itself (contrary to `===`).\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects)",
    "title": "Keyed collections - JavaScript | MDN",
    "description": "This chapter introduces collections of data which are indexed by a key; Map and Set objects contain elements which are iterable in the order of insertion.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt",
    "markdown": "# BigInt - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\n**`BigInt`** values represent numeric values which are [too large](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) to be represented by the `number` [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive).\n\n## [Description](#description)\n\nA **BigInt value**, also sometimes just called a **BigInt**, is a `bigint` [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive), created by appending `n` to the end of an integer literal, or by calling the [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) function (without the `new` operator) and giving it an integer value or string value.\n\n```\nconst previouslyMaxSafeInteger = 9007199254740991n;\n\nconst alsoHuge = BigInt(9007199254740991);\n// 9007199254740991n\n\nconst hugeString = BigInt(\"9007199254740991\");\n// 9007199254740991n\n\nconst hugeHex = BigInt(\"0x1fffffffffffff\");\n// 9007199254740991n\n\nconst hugeOctal = BigInt(\"0o377777777777777777\");\n// 9007199254740991n\n\nconst hugeBin = BigInt(\n  \"0b11111111111111111111111111111111111111111111111111111\",\n);\n// 9007199254740991n\n```\n\nBigInt values are similar to Number values in some ways, but also differ in a few key matters: A BigInt value cannot be used with methods in the built-in [`Math`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math) object and cannot be mixed with a Number value in operations; they must be coerced to the same type. Be careful coercing values back and forth, however, as the precision of a BigInt value may be lost when it is coerced to a Number value.\n\n### [Type information](#type_information)\n\nWhen tested against `typeof`, a BigInt value (`bigint` primitive) will give `\"bigint\"`:\n\n```\ntypeof 1n === \"bigint\"; // true\ntypeof BigInt(\"1\") === \"bigint\"; // true\n```\n\nA BigInt value can also be wrapped in an `Object`:\n\n```\ntypeof Object(1n) === \"object\"; // true\n```\n\n### [Operators](#operators)\n\nMost operators support BigInts, however most do not permit operands to be of mixed types — both operands must be BigInt or neither:\n\n*   [Arithmetic operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#arithmetic_operators): `+`, `-`, `*`, `/`, `%`, `**`\n*   [Bitwise operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#bitwise_shift_operators): `>>`, `<<`, `&`, `|`, `^`, `~`\n*   [Unary negation (`-`)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation)\n*   [Increment/decrement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#increment_and_decrement): `++`, `--`\n\nThe boolean-returning operators allow mixing numbers and BigInts as operands:\n\n*   [Relational operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#relational_operators) and [equality operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#equality_operators): `>`, `<`, `>=`, `<=`, `==`, `!=`, `===`, `!==`\n*   [Logical operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#binary_logical_operators) only rely on the [truthiness](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) of operands\n\nA couple of operators do not support BigInt at all:\n\n*   [Unary plus (`+`)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus) cannot be supported due to conflicting usage in asm.js, so it has been left out [in order to not break asm.js](https://github.com/tc39/proposal-bigint/blob/master/ADVANCED.md#dont-break-asmjs).\n*   [Unsigned right shift (`>>>`)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift) is the only bitwise operator that's unsupported, as every BigInt value is signed.\n\nSpecial cases:\n\n*   Addition (`+`) involving a string and a BigInt returns a string.\n*   Division (`/`) truncates fractional components towards zero, since BigInt is unable to represent fractional quantities.\n\n```\nconst previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER); // 9007199254740991n\nconst maxPlusOne = previousMaxSafe + 1n; // 9007199254740992n\nconst theFuture = previousMaxSafe + 2n; // 9007199254740993n, this works now!\nconst multi = previousMaxSafe * 2n; // 18014398509481982n\nconst subtr = multi - 10n; // 18014398509481972n\nconst mod = multi % 10n; // 2n\nconst bigN = 2n ** 54n; // 18014398509481984n\nbigN * -1n; // -18014398509481984n\nconst expected = 4n / 2n; // 2n\nconst truncated = 5n / 2n; // 2n, not 2.5n\n```\n\n### [Comparisons](#comparisons)\n\nA BigInt value is not strictly equal to a Number value, but it _is_ loosely so:\n\n```\n0n === 0; // false\n0n == 0; // true\n```\n\nA Number value and a BigInt value may be compared as usual:\n\n```\n1n < 2; // true\n2n > 1; // true\n2 > 2; // false\n2n > 2; // false\n2n >= 2; // true\n```\n\nBigInt values and Number values may be mixed in arrays and sorted:\n\n```\nconst mixed = [4n, 6, -12n, 10, 4, 0, 0n];\n// [4n, 6, -12n, 10, 4, 0, 0n]\n\nmixed.sort(); // default sorting behavior\n// [ -12n, 0, 0n, 10, 4n, 4, 6 ]\n\nmixed.sort((a, b) => a - b);\n// won't work since subtraction will not work with mixed types\n// TypeError: can't convert BigInt value to Number value\n\n// sort with an appropriate numeric comparator\nmixed.sort((a, b) => (a < b ? -1 : a > b ? 1 : 0));\n// [ -12n, 0, 0n, 4n, 4, 6, 10 ]\n```\n\nNote that comparisons with `Object`\\-wrapped BigInt values act as with other objects, only indicating equality when the same object instance is compared:\n\n```\nObject(0n) === 0n; // false\nObject(0n) === Object(0n); // false\n\nconst o = Object(0n);\no === o; // true\n```\n\nBecause coercing between Number values and BigInt values can lead to loss of precision, the following are recommended:\n\n*   Only use a BigInt value when values greater than 253 are reasonably expected.\n*   Don't coerce between BigInt values and Number values.\n\n### [Conditionals](#conditionals)\n\nA BigInt value follows the same conversion rules as Numbers when:\n\n*   it is converted to a [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean): via the [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) function;\n*   when used with [logical operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators) `||`, `&&`, and `!`; or\n*   within a conditional test like an [`if`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) statement.\n\nNamely, only `0n` is [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy); everything else is [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy).\n\n```\nif (0n) {\n  console.log(\"Hello from the if!\");\n} else {\n  console.log(\"Hello from the else!\");\n}\n// \"Hello from the else!\"\n\n0n || 12n; // 12n\n0n && 12n; // 0n\nBoolean(0n); // false\nBoolean(12n); // true\n!12n; // false\n!0n; // true\n```\n\n### [Cryptography](#cryptography)\n\nThe operations supported on BigInt values are not constant-time and are thus open to [timing attacks](https://en.wikipedia.org/wiki/Timing_attack). JavaScript BigInts therefore could be dangerous for use in cryptography without mitigating factors. As a very generic example, an attacker could measure the time difference between `101n ** 65537n` and `17n ** 9999n`, and deduce the magnitude of secrets, such as private keys, based on the time elapsed. If you still have to use BigInts, take a look at the [Timing attack FAQ](https://timing.attacks.cr.yp.to/programming.html) for general advice regarding the issue.\n\n### [Use within JSON](#use_within_json)\n\nUsing [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) with any BigInt value will raise a `TypeError`, as BigInt values aren't serialized in JSON by default. However, `JSON.stringify()` specifically leaves a backdoor for BigInt values: it would try to call the BigInt's `toJSON()` method. (It doesn't do so for any other primitive values.) Therefore, you can implement your own `toJSON()` method (which is one of the few cases where patching built-in objects is not explicitly discouraged):\n\n```\nBigInt.prototype.toJSON = function () {\n  return { $bigint: this.toString() };\n};\n```\n\nInstead of throwing, `JSON.stringify()` now produces a string like this:\n\n```\nconsole.log(JSON.stringify({ a: 1n }));\n// {\"a\":{\"$bigint\":\"1\"}}\n```\n\nIf you do not wish to patch `BigInt.prototype`, you can use the [`replacer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter) parameter of `JSON.stringify` to serialize BigInt values:\n\n```\nconst replacer = (key, value) =>\n  typeof value === \"bigint\" ? { $bigint: value.toString() } : value;\n\nconst data = {\n  number: 1,\n  big: 18014398509481982n,\n};\nconst stringified = JSON.stringify(data, replacer);\n\nconsole.log(stringified);\n// {\"number\":1,\"big\":{\"$bigint\":\"18014398509481982\"}}\n```\n\nYou can then use the [`reviver`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#using_the_reviver_parameter) parameter of `JSON.parse` to handle them:\n\n```\nconst reviver = (key, value) =>\n  value !== null &&\n  typeof value === \"object\" &&\n  \"$bigint\" in value &&\n  typeof value.$bigint === \"string\"\n    ? BigInt(value.$bigint)\n    : value;\n\nconst payload = '{\"number\":1,\"big\":{\"$bigint\":\"18014398509481982\"}}';\nconst parsed = JSON.parse(payload, reviver);\n\nconsole.log(parsed);\n// { number: 1, big: 18014398509481982n }\n```\n\n**Note:** While it's possible to make the replacer of `JSON.stringify()` generic and properly serialize BigInt values for all objects as shown above, the reviver of `JSON.parse()` has to be used with caution, because the serialization is _lossy_: it's not possible to distinguish between an object that happens to have a property called `$bigint` and an actual BigInt.\n\nIn addition, the example above creates an entire object during replacing and reviving, which may have performance or storage implications for larger objects containing many BigInts. If you know the shape of the payload, it may be better to just serialize them as strings and revive them based on the property key's name instead.\n\nIn fact, JSON allows number literals that are arbitrarily long; they just cannot be parsed to full precision in JavaScript. If you are communicating with another program in a language that supports longer integers (such as 64-bit integers), and you want to transmit the BigInt as a JSON number instead of a JSON string, see [Lossless number serialization](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON#using_json_numbers).\n\n### [BigInt coercion](#bigint_coercion)\n\nMany built-in operations that expect BigInts first coerce their arguments to BigInts. [The operation](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tobigint) can be summarized as follows:\n\n*   BigInts are returned as-is.\n*   [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) and [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n*   `true` turns into `1n`; `false` turns into `0n`.\n*   Strings are converted by parsing them as if they contain an integer literal. Any parsing failure results in a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError). The syntax is a subset of [string numeric literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), where decimal points or exponent indicators are not allowed.\n*   [Numbers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) to prevent unintended implicit coercion causing loss of precision.\n*   [Symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n*   Objects are first [converted to a primitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion) by calling their [`[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) (with `\"number\"` as hint), `valueOf()`, and `toString()` methods, in that order. The resulting primitive is then converted to a BigInt.\n\nThe best way to achieve nearly the same effect in JavaScript is through the [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) function: `BigInt(x)` uses the same algorithm to convert `x`, except that [Numbers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) don't throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError), but are converted to BigInts if they are integers.\n\nNote that built-in operations expecting BigInts often truncate the BigInt to a fixed width after coercion. This includes [`BigInt.asIntN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asIntN), [`BigInt.asUintN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN), and methods of [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array) and [`BigUint64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array).\n\n## [Constructor](#constructor)\n\n[`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt)\n\nReturns primitive values of type BigInt. Throws an error when called with `new`.\n\n## [Static methods](#static_methods)\n\n[`BigInt.asIntN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asIntN)\n\nClamps a BigInt value to a signed integer value, and returns that value.\n\n[`BigInt.asUintN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN)\n\nClamps a BigInt value to an unsigned integer value, and returns that value.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `BigInt.prototype` and shared by all `BigInt` instances.\n\n[`BigInt.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `BigInt` instances, the initial value is the [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) constructor.\n\n[`BigInt.prototype[@@toStringTag]`](#bigint.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"BigInt\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString). However, because `BigInt` also has its own [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString) method, this property is not used unless you call [`Object.prototype.toString.call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) with a BigInt as `thisArg`.\n\n## [Instance methods](#instance_methods)\n\n[`BigInt.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toLocaleString)\n\nReturns a string with a language-sensitive representation of this BigInt value. Overrides the [`Object.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString) method.\n\n[`BigInt.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString)\n\nReturns a string representing this BigInt value in the specified radix (base). Overrides the [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) method.\n\n[`BigInt.prototype.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/valueOf)\n\nReturns this BigInt value. Overrides the [`Object.prototype.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf) method.\n\n## [Examples](#examples)\n\n### [Calculating Primes](#calculating_primes)\n\n```\n// Returns true if the passed BigInt value is a prime number\nfunction isPrime(p) {\n  for (let i = 2n; i * i <= p; i++) {\n    if (p % i === 0n) return false;\n  }\n  return true;\n}\n\n// Takes a BigInt value as an argument, returns nth prime number as a BigInt value\nfunction nthPrime(nth) {\n  let maybePrime = 2n;\n  let prime = 0n;\n\n  while (nth >= 0n) {\n    if (isPrime(maybePrime)) {\n      nth--;\n      prime = maybePrime;\n    }\n    maybePrime++;\n  }\n\n  return prime;\n}\n\nnthPrime(20n);\n// 73n\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-bigint-objects](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-bigint-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "BigInt - JavaScript | MDN",
    "description": "BigInt values represent numeric values which are too large to be represented by the number primitive.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment",
    "markdown": "# Bitwise XOR assignment (^=) - JavaScript\n\nThe **bitwise XOR assignment (`^=`)** operator performs [bitwise XOR](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR) on the two operands and assigns the result to the left operand.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\n`x ^= y` is equivalent to `x = x ^ y`, except that the expression `x` is only evaluated once.\n\n## [Examples](#examples)\n\n### [Using bitwise XOR assignment](#using_bitwise_xor_assignment)\n\n```\nlet a = 5; // (00000000000000000000000000000101)\na ^= 3; // (00000000000000000000000000000011)\n\nconsole.log(a); // 6 (00000000000000000000000000000110)\n\nlet b = 5; // (00000000000000000000000000000101)\nb ^= 0; // (00000000000000000000000000000000)\n\nconsole.log(b); // 5 (00000000000000000000000000000101)\n\nlet c = 5n;\nc ^= 3n;\nconsole.log(c); // 6n\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-assignment-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Bitwise XOR assignment (^=) - JavaScript | MDN",
    "description": "The bitwise XOR assignment (^=) operator performs bitwise XOR on the two operands and assigns the result to the left operand.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class",
    "markdown": "# class expression - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`class`** keyword can be used to define a class inside an expression.\n\nYou can also define classes using the [`class` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nclass {\n  // class body\n}\nclass name {\n  // class body\n}\n```\n\n**Note:** An [expression statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement) cannot begin with the keyword `class` to avoid ambiguity with a [`class` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class). The `class` keyword only begins an expression when it appears in a context that cannot accept statements.\n\n## [Description](#description)\n\nA `class` expression is very similar to, and has almost the same syntax as, a [`class` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class). As with `class` declarations, the body of a `class` expression is executed in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode). The main difference between a `class` expression and a `class` declaration is the _class name_, which can be omitted in `class` expressions to create _anonymous_ classes. Class expressions allow you to redefine classes, while redeclaring a class using `class` declarations throws a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError). See also the chapter about [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) for more information.\n\n## [Examples](#examples)\n\n### [A simple class expression](#a_simple_class_expression)\n\nThis is just a simple anonymous class expression which you can refer to using the variable `Foo`.\n\n```\nconst Foo = class {\n  constructor() {}\n  bar() {\n    return \"Hello World!\";\n  }\n};\n\nconst instance = new Foo();\ninstance.bar(); // \"Hello World!\"\nFoo.name; // \"Foo\"\n```\n\n### [Named class expressions](#named_class_expressions)\n\nIf you want to refer to the current class inside the class body, you can create a _named class expression_. The name is only visible within the scope of the class expression itself.\n\n```\nconst Foo = class NamedFoo {\n  constructor() {}\n  whoIsThere() {\n    return NamedFoo.name;\n  }\n};\nconst bar = new Foo();\nbar.whoIsThere(); // \"NamedFoo\"\nNamedFoo.name; // ReferenceError: NamedFoo is not defined\nFoo.name; // \"NamedFoo\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-class-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-class-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "class expression - JavaScript | MDN",
    "description": "The class keyword can be used to define a class inside an expression.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array",
    "markdown": "# BigInt64Array - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`BigInt64Array`** typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instead. The contents are initialized to `0n` unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`BigInt64Array` is a subclass of the hidden [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) class.\n\n## [Try it](#try_it)\n\n## [Constructor](#constructor)\n\n[`BigInt64Array()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array/BigInt64Array)\n\nCreates a new `BigInt64Array` object.\n\n## [Static properties](#static_properties)\n\n_Also inherits static properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n[`BigInt64Array.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `8` in the case of `BigInt64Array`.\n\n## [Static methods](#static_methods)\n\n_Inherits static methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\nThese properties are defined on `BigInt64Array.prototype` and shared by all `BigInt64Array` instances.\n\n[`BigInt64Array.prototype.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `8` in the case of a `BigInt64Array`.\n\n[`BigInt64Array.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `BigInt64Array` instances, the initial value is the [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array/BigInt64Array) constructor.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Examples](#examples)\n\n### [Different ways to create a BigInt64Array](#different_ways_to_create_a_bigint64array)\n\n```\n// From a length\nconst bigint64 = new BigInt64Array(2);\nbigint64[0] = 42n;\nconsole.log(bigint64[0]); // 42n\nconsole.log(bigint64.length); // 2\nconsole.log(bigint64.BYTES_PER_ELEMENT); // 8\n\n// From an array\nconst x = new BigInt64Array([21n, 31n]);\nconsole.log(x[1]); // 31n\n\n// From another TypedArray\nconst y = new BigInt64Array(x);\nconsole.log(y[0]); // 21n\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(64);\nconst z = new BigInt64Array(buffer, 8, 4);\nconsole.log(z.byteOffset); // 8\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1n, 2n, 3n];\n})();\nconst bigint64FromIterable = new BigInt64Array(iterable);\nconsole.log(bigint64FromIterable);\n// BigInt64Array [1n, 2n, 3n]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-objects](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "BigInt64Array - JavaScript | MDN",
    "description": "The BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects",
    "markdown": "# Working with objects - JavaScript\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_classes)\n\nJavaScript is designed on a simple object-based paradigm. An object is a collection of [properties](https://developer.mozilla.org/en-US/docs/Glossary/Property/JavaScript), and a property is an association between a name (or _key_) and a value. A property's value can be a function, in which case the property is known as a [method](https://developer.mozilla.org/en-US/docs/Glossary/Method).\n\nObjects in JavaScript, just as in many other programming languages, can be compared to objects in real life. In JavaScript, an object is a standalone entity, with properties and type. Compare it with a cup, for example. A cup is an object, with properties. A cup has a color, a design, weight, a material it is made of, etc. The same way, JavaScript objects can have properties, which define their characteristics.\n\nIn addition to objects that are predefined in the browser, you can define your own objects. This chapter describes how to use objects, properties, and methods, and how to create your own objects.\n\n## [Creating new objects](#creating_new_objects)\n\nYou can create an object using an [object initializer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer). Alternatively, you can first create a constructor function and then instantiate an object by invoking that function with the `new` operator.\n\n### [Using object initializers](#using_object_initializers)\n\nObject initializers are also called _object literals_. \"Object initializer\" is consistent with the terminology used by C++.\n\nThe syntax for an object using an object initializer is:\n\n```\nconst obj = {\n  property1: value1, // property name may be an identifier\n  2: value2, // or a number\n  \"property n\": value3, // or a string\n};\n```\n\nEach property name before colons is an identifier (either a name, a number, or a string literal), and each `valueN` is an expression whose value is assigned to the property name. The property name can also be an expression; computed keys need to be wrapped in square brackets. The [object initializer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) reference contains a more detailed explanation of the syntax.\n\nIn this example, the newly created object is assigned to a variable `obj` — this is optional. If you do not need to refer to this object elsewhere, you do not need to assign it to a variable. (Note that you may need to wrap the object literal in parentheses if the object appears where a statement is expected, so as not to have the literal be confused with a block statement.)\n\nObject initializers are expressions, and each object initializer results in a new object being created whenever the statement in which it appears is executed. Identical object initializers create distinct objects that do not compare to each other as equal.\n\nThe following statement creates an object and assigns it to the variable `x` if and only if the expression `cond` is true:\n\n```\nlet x;\nif (cond) {\n  x = { greeting: \"hi there\" };\n}\n```\n\nThe following example creates `myHonda` with three properties. Note that the `engine` property is also an object with its own properties.\n\n```\nconst myHonda = {\n  color: \"red\",\n  wheels: 4,\n  engine: { cylinders: 4, size: 2.2 },\n};\n```\n\nObjects created with initializers are called _plain objects_, because they are instances of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), but not any other object type. Some object types have special initializer syntaxes — for example, [array initializers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#array_literals) and [regex literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions#creating_a_regular_expression).\n\n### [Using a constructor function](#using_a_constructor_function)\n\nAlternatively, you can create an object with these two steps:\n\n1.  Define the object type by writing a constructor function. There is a strong convention, with good reason, to use a capital initial letter.\n2.  Create an instance of the object with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new).\n\nTo define an object type, create a function for the object type that specifies its name, properties, and methods. For example, suppose you want to create an object type for cars. You want this type of object to be called `Car`, and you want it to have properties for make, model, and year. To do this, you would write the following function:\n\n```\nfunction Car(make, model, year) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\n```\n\nNotice the use of `this` to assign values to the object's properties based on the values passed to the function.\n\nNow you can create an object called `myCar` as follows:\n\n```\nconst myCar = new Car(\"Eagle\", \"Talon TSi\", 1993);\n```\n\nThis statement creates `myCar` and assigns it the specified values for its properties. Then the value of `myCar.make` is the string `\"Eagle\"`, `myCar.model` is the string `\"Talon TSi\"`, `myCar.year` is the integer `1993`, and so on. The order of arguments and parameters should be the same.\n\nYou can create any number of `Car` objects by calls to `new`. For example,\n\n```\nconst kenscar = new Car(\"Nissan\", \"300ZX\", 1992);\nconst vpgscar = new Car(\"Mazda\", \"Miata\", 1990);\n```\n\nAn object can have a property that is itself another object. For example, suppose you define an object called `Person` as follows:\n\n```\nfunction Person(name, age, sex) {\n  this.name = name;\n  this.age = age;\n  this.sex = sex;\n}\n```\n\nand then instantiate two new `Person` objects as follows:\n\n```\nconst rand = new Person(\"Rand McKinnon\", 33, \"M\");\nconst ken = new Person(\"Ken Jones\", 39, \"M\");\n```\n\nThen, you can rewrite the definition of `Car` to include an `owner` property that takes a `Person` object, as follows:\n\n```\nfunction Car(make, model, year, owner) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n  this.owner = owner;\n}\n```\n\nTo instantiate the new objects, you then use the following:\n\n```\nconst car1 = new Car(\"Eagle\", \"Talon TSi\", 1993, rand);\nconst car2 = new Car(\"Nissan\", \"300ZX\", 1992, ken);\n```\n\nNotice that instead of passing a literal string or integer value when creating the new objects, the above statements pass the objects `rand` and `ken` as the arguments for the owners. Then if you want to find out the name of the owner of `car2`, you can access the following property:\n\nYou can always add a property to a previously defined object. For example, the statement\n\nadds a property `color` to `car1`, and assigns it a value of `\"black\"`. However, this does not affect any other objects. To add the new property to all objects of the same type, you have to add the property to the definition of the `Car` object type.\n\nYou can also use the [`class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) syntax instead of the `function` syntax to define a constructor function. For more information, see the [class guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_classes).\n\n### [Using the Object.create() method](#using_the_object.create_method)\n\nObjects can also be created using the [`Object.create()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create) method. This method can be very useful, because it allows you to choose the [prototype](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) object for the object you want to create, without having to define a constructor function.\n\n```\n// Animal properties and method encapsulation\nconst Animal = {\n  type: \"Invertebrates\", // Default value of properties\n  displayType() {\n    // Method which will display type of Animal\n    console.log(this.type);\n  },\n};\n\n// Create new animal type called animal1\nconst animal1 = Object.create(Animal);\nanimal1.displayType(); // Logs: Invertebrates\n\n// Create new animal type called fish\nconst fish = Object.create(Animal);\nfish.type = \"Fishes\";\nfish.displayType(); // Logs: Fishes\n```\n\n## [Objects and properties](#objects_and_properties)\n\nA JavaScript object has properties associated with it. Object properties are basically the same as variables, except that they are associated with objects, not [scopes](https://developer.mozilla.org/en-US/docs/Glossary/Scope). The properties of an object define the characteristics of the object.\n\nFor example, this example creates an object named `myCar`, with properties named `make`, `model`, and `year`, with their values set to `\"Ford\"`, `\"Mustang\"`, and `1969`:\n\n```\nconst myCar = {\n  make: \"Ford\",\n  model: \"Mustang\",\n  year: 1969,\n};\n```\n\nLike JavaScript variables, property names are case sensitive. Property names can only be strings or Symbols — all keys are [converted to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) unless they are Symbols. [Array indices](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#array_indices) are, in fact, properties with string keys that contain integers.\n\n### [Accessing properties](#accessing_properties)\n\nYou can access a property of an object by its property name. [Property accessors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) come in two syntaxes: _dot notation_ and _bracket notation_. For example, you could access the properties of the `myCar` object as follows:\n\n```\n// Dot notation\nmyCar.make = \"Ford\";\nmyCar.model = \"Mustang\";\nmyCar.year = 1969;\n\n// Bracket notation\nmyCar[\"make\"] = \"Ford\";\nmyCar[\"model\"] = \"Mustang\";\nmyCar[\"year\"] = 1969;\n```\n\nAn object property name can be any JavaScript string or [symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol), including an empty string. However, you cannot use dot notation to access a property whose name is not a valid JavaScript identifier. For example, a property name that has a space or a hyphen, that starts with a number, or that is held inside a variable can only be accessed using the bracket notation. This notation is also very useful when property names are to be dynamically determined, i.e. not determinable until runtime. Examples are as follows:\n\n```\nconst myObj = {};\nconst str = \"myString\";\nconst rand = Math.random();\nconst anotherObj = {};\n\n// Create additional properties on myObj\nmyObj.type = \"Dot syntax for a key named type\";\nmyObj[\"date created\"] = \"This key has a space\";\nmyObj[str] = \"This key is in variable str\";\nmyObj[rand] = \"A random number is the key here\";\nmyObj[anotherObj] = \"This key is object anotherObj\";\nmyObj[\"\"] = \"This key is an empty string\";\n\nconsole.log(myObj);\n// {\n//   type: 'Dot syntax for a key named type',\n//   'date created': 'This key has a space',\n//   myString: 'This key is in variable str',\n//   '0.6398914448618778': 'A random number is the key here',\n//   '[object Object]': 'This key is object anotherObj',\n//   '': 'This key is an empty string'\n// }\nconsole.log(myObj.myString); // 'This key is in variable str'\n```\n\nIn the above code, the key `anotherObj` is an object, which is neither a string nor a symbol. When it is added to the `myObj`, JavaScript calls the [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) method of `anotherObj`, and use the resulting string as the new key.\n\nYou can also access properties with a string value stored in a variable. The variable must be passed in bracket notation. In the example above, the variable `str` held `\"myString\"` and it is `\"myString\"` that is the property name. Therefore, `myObj.str` will return as undefined.\n\n```\nstr = \"myString\";\nmyObj[str] = \"This key is in variable str\";\n\nconsole.log(myObj.str); // undefined\n\nconsole.log(myObj[str]); // 'This key is in variable str'\nconsole.log(myObj.myString); // 'This key is in variable str'\n```\n\nThis allows accessing any property as determined at runtime:\n\n```\nlet propertyName = \"make\";\nmyCar[propertyName] = \"Ford\";\n\n// access different properties by changing the contents of the variable\npropertyName = \"model\";\nmyCar[propertyName] = \"Mustang\";\n\nconsole.log(myCar); // { make: 'Ford', model: 'Mustang' }\n```\n\nHowever, beware of using square brackets to access properties whose names are given by external input. This may make your code susceptible to [object injection attacks](https://github.com/nodesecurity/eslint-plugin-security/blob/main/docs/the-dangers-of-square-bracket-notation.md).\n\nNonexistent properties of an object have value [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) (and not [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null)).\n\n```\nmyCar.nonexistentProperty; // undefined\n```\n\n### [Enumerating properties](#enumerating_properties)\n\nThere are three native ways to list/traverse object properties:\n\n*   [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loops. This method traverses all of the enumerable string properties of an object as well as its prototype chain.\n*   [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys). This method returns an array with only the enumerable own string property names (\"keys\") in the object `myObj`, but not those in the prototype chain.\n*   [`Object.getOwnPropertyNames()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames). This method returns an array containing all the own string property names in the object `myObj`, regardless of if they are enumerable or not.\n\nYou can use the bracket notation with [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) to iterate over all the enumerable properties of an object. To illustrate how this works, the following function displays the properties of the object when you pass the object and the object's name as arguments to the function:\n\n```\nfunction showProps(obj, objName) {\n  let result = \"\";\n  for (const i in obj) {\n    // Object.hasOwn() is used to exclude properties from the object's\n    // prototype chain and only show \"own properties\"\n    if (Object.hasOwn(obj, i)) {\n      result += `${objName}.${i} = ${obj[i]}\\n`;\n    }\n  }\n  console.log(result);\n}\n```\n\nThe term \"own property\" refers to the properties of the object, but excluding those of the prototype chain. So, the function call `showProps(myCar, 'myCar')` would print the following:\n\nmyCar.make = Ford\nmyCar.model = Mustang\nmyCar.year = 1969\n\nThe above is equivalent to:\n\n```\nfunction showProps(obj, objName) {\n  let result = \"\";\n  Object.keys(obj).forEach((i) => {\n    result += `${objName}.${i} = ${obj[i]}\\n`;\n  });\n  console.log(result);\n}\n```\n\nThere is no native way to list inherited non-enumerable properties. However, this can be achieved with the following function:\n\n```\nfunction listAllProperties(myObj) {\n  let objectToInspect = myObj;\n  let result = [];\n\n  while (objectToInspect !== null) {\n    result = result.concat(Object.getOwnPropertyNames(objectToInspect));\n    objectToInspect = Object.getPrototypeOf(objectToInspect);\n  }\n\n  return result;\n}\n```\n\nFor more information, see [Enumerability and ownership of properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties).\n\n### [Deleting properties](#deleting_properties)\n\nYou can remove a non-inherited property using the [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator. The following code shows how to remove a property.\n\n```\n// Creates a new object, myobj, with two properties, a and b.\nconst myobj = new Object();\nmyobj.a = 5;\nmyobj.b = 12;\n\n// Removes the a property, leaving myobj with only the b property.\ndelete myobj.a;\nconsole.log(\"a\" in myobj); // false\n```\n\n## [Inheritance](#inheritance)\n\nAll objects in JavaScript inherit from at least one other object. The object being inherited from is known as the prototype, and the inherited properties can be found in the `prototype` object of the constructor. See [Inheritance and the prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) for more information.\n\n### [Defining properties for all objects of one type](#defining_properties_for_all_objects_of_one_type)\n\nYou can add a property to all objects created through a certain [constructor](#using_a_constructor_function) using the [`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property. This defines a property that is shared by all objects of the specified type, rather than by just one instance of the object. The following code adds a `color` property to all objects of type `Car`, and then reads the property's value from an instance `car1`.\n\n```\nCar.prototype.color = \"red\";\nconsole.log(car1.color); // \"red\"\n```\n\n## [Defining methods](#defining_methods)\n\nA _method_ is a function associated with an object, or, put differently, a method is a property of an object that is a function. Methods are defined the way normal functions are defined, except that they have to be assigned as the property of an object. See also [method definitions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions) for more details. An example is:\n\n```\nobjectName.methodName = functionName;\n\nconst myObj = {\n  myMethod: function (params) {\n    // do something\n  },\n\n  // this works too!\n  myOtherMethod(params) {\n    // do something else\n  },\n};\n```\n\nwhere `objectName` is an existing object, `methodName` is the name you are assigning to the method, and `functionName` is the name of the function.\n\nYou can then call the method in the context of the object as follows:\n\n```\nobjectName.methodName(params);\n```\n\nMethods are typically defined on the `prototype` object of the constructor, so that all objects of the same type share the same method. For example, you can define a function that formats and displays the properties of the previously-defined `Car` objects.\n\n```\nCar.prototype.displayCar = function () {\n  const result = `A Beautiful ${this.year} ${this.make} ${this.model}`;\n  console.log(result);\n};\n```\n\nNotice the use of `this` to refer to the object to which the method belongs. Then you can call the `displayCar` method for each of the objects as follows:\n\n```\ncar1.displayCar();\ncar2.displayCar();\n```\n\n### [Using this for object references](#using_this_for_object_references)\n\nJavaScript has a special keyword, [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this), that you can use within a method to refer to the current object. For example, suppose you have 2 objects, `Manager` and `Intern`. Each object has its own `name`, `age` and `job`. In the function `sayHi()`, notice the use of `this.name`. When added to the 2 objects, the same function will print the message with the name of the respective object it's attached to.\n\n```\nconst Manager = {\n  name: \"Karina\",\n  age: 27,\n  job: \"Software Engineer\",\n};\nconst Intern = {\n  name: \"Tyrone\",\n  age: 21,\n  job: \"Software Engineer Intern\",\n};\n\nfunction sayHi() {\n  console.log(`Hello, my name is ${this.name}`);\n}\n\n// add sayHi function to both objects\nManager.sayHi = sayHi;\nIntern.sayHi = sayHi;\n\nManager.sayHi(); // Hello, my name is Karina\nIntern.sayHi(); // Hello, my name is Tyrone\n```\n\n`this` is a \"hidden parameter\" of a function call that's passed in by specifying the object before the function that was called. For example, in `Manager.sayHi()`, `this` is the `Manager` object, because `Manager` comes before the function `sayHi()`. If you access the same function from another object, `this` will change as well. If you use other methods to call the function, like [`Function.prototype.call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) or [`Reflect.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply), you can explicitly pass the value of `this` as an argument.\n\n## [Defining getters and setters](#defining_getters_and_setters)\n\nA [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) is a function associated with a property that gets the value of a specific property. A [setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) is a function associated with a property that sets the value of a specific property. Together, they can indirectly represent the value of a property.\n\nGetters and setters can be either\n\n*   defined within [object initializers](#using_object_initializers), or\n*   added later to any existing object.\n\nWithin [object initializers](#using_object_initializers), getters and setters are defined like regular [methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions), but prefixed with the keywords `get` or `set`. The getter method must not expect a parameter, while the setter method expects exactly one parameter (the new value to set). For instance:\n\n```\nconst myObj = {\n  a: 7,\n  get b() {\n    return this.a + 1;\n  },\n  set c(x) {\n    this.a = x / 2;\n  },\n};\n\nconsole.log(myObj.a); // 7\nconsole.log(myObj.b); // 8, returned from the get b() method\nmyObj.c = 50; // Calls the set c(x) method\nconsole.log(myObj.a); // 25\n```\n\nThe `myObj` object's properties are:\n\n*   `myObj.a` — a number\n*   `myObj.b` — a getter that returns `myObj.a` plus 1\n*   `myObj.c` — a setter that sets the value of `myObj.a` to half of the value `myObj.c` is being set to\n\nGetters and setters can also be added to an object at any time after creation using the [`Object.defineProperties()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties) method. This method's first parameter is the object on which you want to define the getter or setter. The second parameter is an object whose property names are the getter or setter names, and whose property values are objects for defining the getter or setter functions. Here's an example that defines the same getter and setter used in the previous example:\n\n```\nconst myObj = { a: 0 };\n\nObject.defineProperties(myObj, {\n  b: {\n    get() {\n      return this.a + 1;\n    },\n  },\n  c: {\n    set(x) {\n      this.a = x / 2;\n    },\n  },\n});\n\nmyObj.c = 10; // Runs the setter, which assigns 10 / 2 (5) to the 'a' property\nconsole.log(myObj.b); // Runs the getter, which yields a + 1 or 6\n```\n\nWhich of the two forms to choose depends on your programming style and task at hand. If you can change the definition of the original object, you will probably define getters and setters through the original initializer. This form is more compact and natural. However, if you need to add getters and setters later — maybe because you did not write the particular object — then the second form is the only possible form. The second form better represents the dynamic nature of JavaScript, but it can make the code hard to read and understand.\n\n## [Comparing objects](#comparing_objects)\n\nIn JavaScript, objects are a reference type. Two distinct objects are never equal, even if they have the same properties. Only comparing the same object reference with itself yields true.\n\n```\n// Two variables, two distinct objects with the same properties\nconst fruit = { name: \"apple\" };\nconst fruitbear = { name: \"apple\" };\n\nfruit == fruitbear; // return false\nfruit === fruitbear; // return false\n```\n\n```\n// Two variables, a single object\nconst fruit = { name: \"apple\" };\nconst fruitbear = fruit; // Assign fruit object reference to fruitbear\n\n// Here fruit and fruitbear are pointing to same object\nfruit == fruitbear; // return true\nfruit === fruitbear; // return true\n\nfruit.name = \"grape\";\nconsole.log(fruitbear); // { name: \"grape\" }; not { name: \"apple\" }\n```\n\nFor more information about comparison operators, see [equality operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#equality_operators).\n\n## [See also](#see_also)",
    "title": "Working with objects - JavaScript | MDN",
    "description": "JavaScript is designed on a simple object-based paradigm. An object is a collection of properties, and a property is an association between a name (or key) and a value. A property's value can be a function, in which case the property is known as a method.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array",
    "markdown": "# BigUint64Array - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`BigUint64Array`** typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instead. The contents are initialized to `0n` unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`BigUint64Array` is a subclass of the hidden [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) class.\n\n## [Constructor](#constructor)\n\n[`BigUint64Array()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array/BigUint64Array)\n\nCreates a new `BigUint64Array` object.\n\n## [Static properties](#static_properties)\n\n_Also inherits static properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n[`BigUint64Array.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `8` in the case of `BigUint64Array`.\n\n## [Static methods](#static_methods)\n\n_Inherits static methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\nThese properties are defined on `BigUint64Array.prototype` and shared by all `BigUint64Array` instances.\n\n[`BigUint64Array.prototype.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `8` in the case of a `BigUint64Array`.\n\n[`BigUint64Array.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `BigUint64Array` instances, the initial value is the [`BigUint64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array/BigUint64Array) constructor.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Examples](#examples)\n\n### [Different ways to create a BigUint64Array](#different_ways_to_create_a_biguint64array)\n\n```\n// From a length\nconst biguint64 = new BigUint64Array(2);\nbiguint64[0] = 42n;\nconsole.log(biguint64[0]); // 42n\nconsole.log(biguint64.length); // 2\nconsole.log(biguint64.BYTES_PER_ELEMENT); // 8\n\n// From an array\nconst x = new BigUint64Array([21n, 31n]);\nconsole.log(x[1]); // 31n\n\n// From another TypedArray\nconst y = new BigUint64Array(x);\nconsole.log(y[0]); // 21n\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(64);\nconst z = new BigUint64Array(buffer, 8, 4);\nconsole.log(z.byteOffset); // 8\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1n, 2n, 3n];\n})();\nconst biguint64FromIterable = new BigUint64Array(iterable);\nconsole.log(biguint64FromIterable);\n// BigUint64Array [1n, 2n, 3n]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-objects](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "BigUint64Array - JavaScript | MDN",
    "description": "The BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections",
    "markdown": "# Indexed collections - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections)\n\nThis chapter introduces collections of data which are ordered by an index value. This includes arrays and array-like constructs such as [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) objects and [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) objects.\n\nAn _array_ is an ordered list of values that you refer to with a name and an index.\n\nFor example, consider an array called `emp`, which contains employees' names indexed by their numerical employee number. So `emp[0]` would be employee number zero, `emp[1]` employee number one, and so on.\n\nJavaScript does not have an explicit array data type. However, you can use the predefined `Array` object and its methods to work with arrays in your applications. The `Array` object has methods for manipulating arrays in various ways, such as joining, reversing, and sorting them. It has a property for determining the array length and other properties for use with regular expressions.\n\nWe will be focusing on arrays in this article, but many of the same concepts apply to typed arrays as well, since arrays and typed arrays share many similar methods. For more information on typed arrays, see the [typed array guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays).\n\n## [Creating an array](#creating_an_array)\n\nThe following statements create equivalent arrays:\n\n```\nconst arr1 = new Array(element0, element1, /* …, */ elementN);\nconst arr2 = Array(element0, element1, /* …, */ elementN);\nconst arr3 = [element0, element1, /* …, */ elementN];\n```\n\n`element0, element1, …, elementN` is a list of values for the array's elements. When these values are specified, the array is initialized with them as the array's elements. The array's `length` property is set to the number of arguments.\n\nThe bracket syntax is called an \"array literal\" or \"array initializer.\" It's shorter than other forms of array creation, and so is generally preferred. See [Array literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#array_literals) for details.\n\nTo create an array with non-zero length, but without any items, either of the following can be used:\n\n```\n// This...\nconst arr1 = new Array(arrayLength);\n\n// ...results in the same array as this\nconst arr2 = Array(arrayLength);\n\n// This has exactly the same effect\nconst arr3 = [];\narr3.length = arrayLength;\n```\n\n**Note:** In the above code, `arrayLength` must be a `Number`. Otherwise, an array with a single element (the provided value) will be created. Calling `arr.length` will return `arrayLength`, but the array doesn't contain any elements. A [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop will not find any property on the array.\n\nIn addition to a newly defined variable as shown above, arrays can also be assigned as a property of a new or an existing object:\n\n```\nconst obj = {};\n// …\nobj.prop = [element0, element1, /* …, */ elementN];\n\n// OR\nconst obj = { prop: [element0, element1, /* …, */ elementN] };\n```\n\nIf you wish to initialize an array with a single element, and the element happens to be a `Number`, you must use the bracket syntax. When a single `Number` value is passed to the `Array()` constructor or function, it is interpreted as an `arrayLength`, not as a single element.\n\nThis creates an array with only one element: the number 42.\n\nThis creates an array with no elements and `arr.length` set to 42.\n\nThis is equivalent to:\n\n```\nconst arr = [];\narr.length = 42;\n```\n\nCalling `Array(N)` results in a `RangeError`, if `N` is a non-whole number whose fractional portion is non-zero. The following example illustrates this behavior.\n\n```\nconst arr = Array(9.3); // RangeError: Invalid array length\n```\n\nIf your code needs to create arrays with single elements of an arbitrary data type, it is safer to use array literals. Alternatively, create an empty array first before adding the single element to it.\n\nYou can also use the [`Array.of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of) static method to create arrays with single element.\n\n```\nconst wisenArray = Array.of(9.3); // wisenArray contains only one element 9.3\n```\n\n## [Referring to array elements](#referring_to_array_elements)\n\nBecause elements are also properties, you can access them using [property accessors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors). Suppose you define the following array:\n\n```\nconst myArray = [\"Wind\", \"Rain\", \"Fire\"];\n```\n\nYou can refer to the first element of the array as `myArray[0]`, the second element of the array as `myArray[1]`, etc… The index of the elements begins with zero.\n\n**Note:** You can also use [property accessors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) to access other properties of the array, like with an object.\n\n```\nconst arr = [\"one\", \"two\", \"three\"];\narr[2]; // three\narr[\"length\"]; // 3\n```\n\n## [Populating an array](#populating_an_array)\n\nYou can populate an array by assigning values to its elements. For example:\n\n```\nconst emp = [];\nemp[0] = \"Casey Jones\";\nemp[1] = \"Phil Lesh\";\nemp[2] = \"August West\";\n```\n\n**Note:** If you supply a non-integer value to the array operator in the code above, a property will be created in the object representing the array, instead of an array element.\n\n```\nconst arr = [];\narr[3.4] = \"Oranges\";\nconsole.log(arr.length); // 0\nconsole.log(Object.hasOwn(arr, 3.4)); // true\n```\n\nYou can also populate an array when you create it:\n\n```\nconst myArray = new Array(\"Hello\", myVar, 3.14159);\n// OR\nconst myArray = [\"Mango\", \"Apple\", \"Orange\"];\n```\n\n### [Understanding length](#understanding_length)\n\nAt the implementation level, JavaScript's arrays actually store their elements as standard object properties, using the array index as the property name.\n\nThe `length` property is special. Its value is always a positive integer greater than the index of the last element if one exists. (In the example below, `'Dusty'` is indexed at `30`, so `cats.length` returns `30 + 1`).\n\nRemember, JavaScript Array indexes are 0-based: they start at `0`, not `1`. This means that the `length` property will be one more than the highest index stored in the array:\n\n```\nconst cats = [];\ncats[30] = [\"Dusty\"];\nconsole.log(cats.length); // 31\n```\n\nYou can also assign to the `length` property.\n\nWriting a value that is shorter than the number of stored items truncates the array. Writing `0` empties it entirely:\n\n```\nconst cats = [\"Dusty\", \"Misty\", \"Twiggy\"];\nconsole.log(cats.length); // 3\n\ncats.length = 2;\nconsole.log(cats); // [ 'Dusty', 'Misty' ] - Twiggy has been removed\n\ncats.length = 0;\nconsole.log(cats); // []; the cats array is empty\n\ncats.length = 3;\nconsole.log(cats); // [ <3 empty items> ]\n```\n\n### [Iterating over arrays](#iterating_over_arrays)\n\nA common operation is to iterate over the values of an array, processing each one in some way. The simplest way to do this is as follows:\n\n```\nconst colors = [\"red\", \"green\", \"blue\"];\nfor (let i = 0; i < colors.length; i++) {\n  console.log(colors[i]);\n}\n```\n\nIf you know that none of the elements in your array evaluate to `false` in a boolean context—if your array consists only of [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model) nodes, for example—you can use a more efficient idiom:\n\n```\nconst divs = document.getElementsByTagName(\"div\");\nfor (let i = 0, div; (div = divs[i]); i++) {\n  /* Process div in some way */\n}\n```\n\nThis avoids the overhead of checking the length of the array, and ensures that the `div` variable is reassigned to the current item each time around the loop for added convenience.\n\nThe [`forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) method provides another way of iterating over an array:\n\n```\nconst colors = [\"red\", \"green\", \"blue\"];\ncolors.forEach((color) => console.log(color));\n// red\n// green\n// blue\n```\n\nThe function passed to `forEach` is executed once for every item in the array, with the array item passed as the argument to the function. Unassigned values are not iterated in a `forEach` loop.\n\nNote that the elements of an array that are omitted when the array is defined are not listed when iterating by `forEach`, but _are_ listed when `undefined` has been manually assigned to the element:\n\n```\nconst sparseArray = [\"first\", \"second\", , \"fourth\"];\n\nsparseArray.forEach((element) => {\n  console.log(element);\n});\n// Logs:\n// first\n// second\n// fourth\n\nif (sparseArray[2] === undefined) {\n  console.log(\"sparseArray[2] is undefined\"); // true\n}\n\nconst nonsparseArray = [\"first\", \"second\", undefined, \"fourth\"];\n\nnonsparseArray.forEach((element) => {\n  console.log(element);\n});\n// Logs:\n// first\n// second\n// undefined\n// fourth\n```\n\nSince JavaScript array elements are saved as standard object properties, it is not advisable to iterate through JavaScript arrays using [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loops, because normal elements and all enumerable properties will be listed.\n\n### [Array methods](#array_methods)\n\nThe [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) object has the following methods:\n\nThe [`concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) method joins two or more arrays and returns a new array.\n\n```\nlet myArray = [\"1\", \"2\", \"3\"];\nmyArray = myArray.concat(\"a\", \"b\", \"c\");\n// myArray is now [\"1\", \"2\", \"3\", \"a\", \"b\", \"c\"]\n```\n\nThe [`join()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join) method joins all elements of an array into a string.\n\n```\nconst myArray = [\"Wind\", \"Rain\", \"Fire\"];\nconst list = myArray.join(\" - \"); // list is \"Wind - Rain - Fire\"\n```\n\nThe [`push()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) method adds one or more elements to the end of an array and returns the resulting `length` of the array.\n\n```\nconst myArray = [\"1\", \"2\"];\nmyArray.push(\"3\"); // myArray is now [\"1\", \"2\", \"3\"]\n```\n\nThe [`pop()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop) method removes the last element from an array and returns that element.\n\n```\nconst myArray = [\"1\", \"2\", \"3\"];\nconst last = myArray.pop();\n// myArray is now [\"1\", \"2\"], last = \"3\"\n```\n\nThe [`shift()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift) method removes the first element from an array and returns that element.\n\n```\nconst myArray = [\"1\", \"2\", \"3\"];\nconst first = myArray.shift();\n// myArray is now [\"2\", \"3\"], first is \"1\"\n```\n\nThe [`unshift()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift) method adds one or more elements to the front of an array and returns the new length of the array.\n\n```\nconst myArray = [\"1\", \"2\", \"3\"];\nmyArray.unshift(\"4\", \"5\");\n// myArray becomes [\"4\", \"5\", \"1\", \"2\", \"3\"]\n```\n\nThe [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) method extracts a section of an array and returns a new array.\n\n```\nlet myArray = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nmyArray = myArray.slice(1, 4); // [ \"b\", \"c\", \"d\"]\n// starts at index 1 and extracts all elements\n// until index 3\n```\n\nThe [`at()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at) method returns the element at the specified index in the array, or `undefined` if the index is out of range. It's notably used for negative indices that access elements from the end of the array.\n\n```\nconst myArray = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nmyArray.at(-2); // \"d\", the second-last element of myArray\n```\n\nThe [`splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) method removes elements from an array and (optionally) replaces them. It returns the items which were removed from the array.\n\n```\nconst myArray = [\"1\", \"2\", \"3\", \"4\", \"5\"];\nmyArray.splice(1, 3, \"a\", \"b\", \"c\", \"d\");\n// myArray is now [\"1\", \"a\", \"b\", \"c\", \"d\", \"5\"]\n// This code started at index one (or where the \"2\" was),\n// removed 3 elements there, and then inserted all consecutive\n// elements in its place.\n```\n\nThe [`reverse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse) method transposes the elements of an array, in place: the first array element becomes the last and the last becomes the first. It returns a reference to the array.\n\n```\nconst myArray = [\"1\", \"2\", \"3\"];\nmyArray.reverse();\n// transposes the array so that myArray = [\"3\", \"2\", \"1\"]\n```\n\nThe [`flat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat) method returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.\n\n```\nlet myArray = [1, 2, [3, 4]];\nmyArray = myArray.flat();\n// myArray is now [1, 2, 3, 4], since the [3, 4] subarray is flattened\n```\n\nThe [`sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) method sorts the elements of an array in place, and returns a reference to the array.\n\n```\nconst myArray = [\"Wind\", \"Rain\", \"Fire\"];\nmyArray.sort();\n// sorts the array so that myArray = [\"Fire\", \"Rain\", \"Wind\"]\n```\n\n`sort()` can also take a callback function to determine how array elements are compared. The callback function is called with two arguments, which are two values from the array. The function compares these two values and returns a positive number, negative number, or zero, indicating the order of the two values. For instance, the following will sort the array by the last letter of a string:\n\n```\nconst sortFn = (a, b) => {\n  if (a[a.length - 1] < b[b.length - 1]) {\n    return -1; // Negative number => a < b, a comes before b\n  } else if (a[a.length - 1] > b[b.length - 1]) {\n    return 1; // Positive number => a > b, a comes after b\n  }\n  return 0; // Zero => a = b, a and b keep their original order\n};\nmyArray.sort(sortFn);\n// sorts the array so that myArray = [\"Wind\",\"Fire\",\"Rain\"]\n```\n\n*   if `a` is less than `b` by the sorting system, return `-1` (or any negative number)\n*   if `a` is greater than `b` by the sorting system, return `1` (or any positive number)\n*   if `a` and `b` are considered equivalent, return `0`.\n\nThe [`indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) method searches the array for `searchElement` and returns the index of the first match.\n\n```\nconst a = [\"a\", \"b\", \"a\", \"b\", \"a\"];\nconsole.log(a.indexOf(\"b\")); // 1\n\n// Now try again, starting from after the last match\nconsole.log(a.indexOf(\"b\", 2)); // 3\nconsole.log(a.indexOf(\"z\")); // -1, because 'z' was not found\n```\n\nThe [`lastIndexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf) method works like `indexOf`, but starts at the end and searches backwards.\n\n```\nconst a = [\"a\", \"b\", \"c\", \"d\", \"a\", \"b\"];\nconsole.log(a.lastIndexOf(\"b\")); // 5\n\n// Now try again, starting from before the last match\nconsole.log(a.lastIndexOf(\"b\", 4)); // 1\nconsole.log(a.lastIndexOf(\"z\")); // -1\n```\n\nThe [`forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) method executes `callback` on every array item and returns `undefined`.\n\n```\nconst a = [\"a\", \"b\", \"c\"];\na.forEach((element) => {\n  console.log(element);\n});\n// Logs:\n// a\n// b\n// c\n```\n\nThe `forEach` method (and others below) that take a callback are known as _iterative methods_, because they iterate over the entire array in some fashion. Each one takes an optional second argument called `thisArg`. If provided, `thisArg` becomes the value of the `this` keyword inside the body of the callback function. If not provided, as with other cases where a function is invoked outside of an explicit object context, `this` will refer to the global object ([`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window), [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis), etc.) when the function is [not strict](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), or `undefined` when the function is strict.\n\n**Note:** The `sort()` method introduced above is not an iterative method, because its callback function is only used for comparison and may not be called in any particular order based on element order. `sort()` does not accept the `thisArg` parameter either.\n\nThe [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) method returns a new array of the return value from executing `callback` on every array item.\n\n```\nconst a1 = [\"a\", \"b\", \"c\"];\nconst a2 = a1.map((item) => item.toUpperCase());\nconsole.log(a2); // ['A', 'B', 'C']\n```\n\nThe [`flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap) method runs `map()` followed by a `flat()` of depth 1.\n\n```\nconst a1 = [\"a\", \"b\", \"c\"];\nconst a2 = a1.flatMap((item) => [item.toUpperCase(), item.toLowerCase()]);\nconsole.log(a2); // ['A', 'a', 'B', 'b', 'C', 'c']\n```\n\nThe [`filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) method returns a new array containing the items for which `callback` returned `true`.\n\n```\nconst a1 = [\"a\", 10, \"b\", 20, \"c\", 30];\nconst a2 = a1.filter((item) => typeof item === \"number\");\nconsole.log(a2); // [10, 20, 30]\n```\n\nThe [`find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) method returns the first item for which `callback` returned `true`.\n\n```\nconst a1 = [\"a\", 10, \"b\", 20, \"c\", 30];\nconst i = a1.find((item) => typeof item === \"number\");\nconsole.log(i); // 10\n```\n\nThe [`findLast()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast) method returns the last item for which `callback` returned `true`.\n\n```\nconst a1 = [\"a\", 10, \"b\", 20, \"c\", 30];\nconst i = a1.findLast((item) => typeof item === \"number\");\nconsole.log(i); // 30\n```\n\nThe [`findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex) method returns the index of the first item for which `callback` returned `true`.\n\n```\nconst a1 = [\"a\", 10, \"b\", 20, \"c\", 30];\nconst i = a1.findIndex((item) => typeof item === \"number\");\nconsole.log(i); // 1\n```\n\nThe [`findLastIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex) method returns the index of the last item for which `callback` returned `true`.\n\n```\nconst a1 = [\"a\", 10, \"b\", 20, \"c\", 30];\nconst i = a1.findLastIndex((item) => typeof item === \"number\");\nconsole.log(i); // 5\n```\n\nThe [`every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every) method returns `true` if `callback` returns `true` for every item in the array.\n\n```\nfunction isNumber(value) {\n  return typeof value === \"number\";\n}\nconst a1 = [1, 2, 3];\nconsole.log(a1.every(isNumber)); // true\nconst a2 = [1, \"2\", 3];\nconsole.log(a2.every(isNumber)); // false\n```\n\nThe [`some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) method returns `true` if `callback` returns `true` for at least one item in the array.\n\n```\nfunction isNumber(value) {\n  return typeof value === \"number\";\n}\nconst a1 = [1, 2, 3];\nconsole.log(a1.some(isNumber)); // true\nconst a2 = [1, \"2\", 3];\nconsole.log(a2.some(isNumber)); // true\nconst a3 = [\"1\", \"2\", \"3\"];\nconsole.log(a3.some(isNumber)); // false\n```\n\nThe [`reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) method applies `callback(accumulator, currentValue, currentIndex, array)` for each value in the array for the purpose of reducing the list of items down to a single value. The `reduce` function returns the final value returned by `callback` function.\n\nIf `initialValue` is specified, then `callback` is called with `initialValue` as the first parameter value and the value of the first item in the array as the second parameter value.\n\nIf `initialValue` is _not_ specified, then `callback`'s first two parameter values will be the first and second elements of the array. On _every_ subsequent call, the first parameter's value will be whatever `callback` returned on the previous call, and the second parameter's value will be the next value in the array.\n\nIf `callback` needs access to the index of the item being processed, or access to the entire array, they are available as optional parameters.\n\n```\nconst a = [10, 20, 30];\nconst total = a.reduce(\n  (accumulator, currentValue) => accumulator + currentValue,\n  0,\n);\nconsole.log(total); // 60\n```\n\nThe [`reduceRight()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight) method works like `reduce()`, but starts with the last element.\n\n`reduce` and `reduceRight` are the least obvious of the iterative array methods. They should be used for algorithms that combine two values recursively in order to reduce a sequence down to a single value.\n\n## [Array transformations](#array_transformations)\n\nYou can transform back and forth between arrays and other data structures.\n\n### [Grouping the elements of an array](#grouping_the_elements_of_an_array)\n\nThe [`Object.groupBy()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/groupBy) method can be used to group the elements of an array, using a test function that returns a string indicating the group of the current element.\n\nHere we have a simple inventory array that contains \"food\" objects that have a `name` and a `type`.\n\n```\nconst inventory = [\n  { name: \"asparagus\", type: \"vegetables\" },\n  { name: \"bananas\", type: \"fruit\" },\n  { name: \"goat\", type: \"meat\" },\n  { name: \"cherries\", type: \"fruit\" },\n  { name: \"fish\", type: \"meat\" },\n];\n```\n\nTo use `Object.groupBy()`, you supply a callback function that is called with the current element, and optionally the current index and array, and returns a string indicating the group of the element.\n\nThe code below uses an arrow function to return the `type` of each array element (this uses [object destructuring syntax for function arguments](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#unpacking_properties_from_objects_passed_as_a_function_parameter) to unpack the `type` element from the passed object). The result is an object that has properties named after the unique strings returned by the callback. Each property is assigned an array containing the elements in the group.\n\n```\nconst result = Object.groupBy(inventory, ({ type }) => type);\nconsole.log(result);\n// Logs\n// {\n//   vegetables: [{ name: 'asparagus', type: 'vegetables' }],\n//   fruit: [\n//     { name: 'bananas', type: 'fruit' },\n//     { name: 'cherries', type: 'fruit' }\n//   ],\n//   meat: [\n//     { name: 'goat', type: 'meat' },\n//     { name: 'fish', type: 'meat' }\n//   ]\n// }\n```\n\nNote that the returned object references the _same_ elements as the original array (not [deep copies](https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy)). Changing the internal structure of these elements will be reflected in both the original array and the returned object.\n\nIf you can't use a string as the key, for example, if the information to group is associated with an object that might change, then you can instead use [`Map.groupBy()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/groupBy). This is very similar to `Object.groupBy()` except that it groups the elements of the array into a [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) that can use an arbitrary value ([object](https://developer.mozilla.org/en-US/docs/Glossary/Object) or [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive)) as a key.\n\n## [Sparse arrays](#sparse_arrays)\n\nArrays can contain \"empty slots\", which are not the same as slots filled with the value `undefined`. Empty slots can be created in one of the following ways:\n\n```\n// Array constructor:\nconst a = Array(5); // [ <5 empty items> ]\n\n// Consecutive commas in array literal:\nconst b = [1, 2, , , 5]; // [ 1, 2, <2 empty items>, 5 ]\n\n// Directly setting a slot with index greater than array.length:\nconst c = [1, 2];\nc[4] = 5; // [ 1, 2, <2 empty items>, 5 ]\n\n// Elongating an array by directly setting .length:\nconst d = [1, 2];\nd.length = 5; // [ 1, 2, <3 empty items> ]\n\n// Deleting an element:\nconst e = [1, 2, 3, 4, 5];\ndelete e[2]; // [ 1, 2, <1 empty item>, 4, 5 ]\n```\n\nIn some operations, empty slots behave as if they are filled with `undefined`.\n\n```\nconst arr = [1, 2, , , 5]; // Create a sparse array\n\n// Indexed access\nconsole.log(arr[2]); // undefined\n\n// For...of\nfor (const i of arr) {\n  console.log(i);\n}\n// Logs: 1 2 undefined undefined 5\n\n// Spreading\nconst another = [...arr]; // \"another\" is [ 1, 2, undefined, undefined, 5 ]\n```\n\nBut in others (most notably array iteration methods), empty slots are skipped.\n\n```\nconst mapped = arr.map((i) => i + 1); // [ 2, 3, <2 empty items>, 6 ]\narr.forEach((i) => console.log(i)); // 1 2 5\nconst filtered = arr.filter(() => true); // [ 1, 2, 5 ]\nconst hasFalsy = arr.some((k) => !k); // false\n\n// Property enumeration\nconst keys = Object.keys(arr); // [ '0', '1', '4' ]\nfor (const key in arr) {\n  console.log(key);\n}\n// Logs: '0' '1' '4'\n// Spreading into an object uses property enumeration, not the array's iterator\nconst objectSpread = { ...arr }; // { '0': 1, '1': 2, '4': 5 }\n```\n\nFor a complete list of how array methods behave with sparse arrays, see [the `Array` reference page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#array_methods_and_empty_slots).\n\n## [Multi-dimensional arrays](#multi-dimensional_arrays)\n\nArrays can be nested, meaning that an array can contain another array as an element. Using this characteristic of JavaScript arrays, multi-dimensional arrays can be created.\n\nThe following code creates a two-dimensional array.\n\n```\nconst a = new Array(4);\nfor (let i = 0; i < 4; i++) {\n  a[i] = new Array(4);\n  for (let j = 0; j < 4; j++) {\n    a[i][j] = `[${i}, ${j}]`;\n  }\n}\n```\n\nThis example creates an array with the following rows:\n\nRow 0: \\[0, 0\\] \\[0, 1\\] \\[0, 2\\] \\[0, 3\\]\nRow 1: \\[1, 0\\] \\[1, 1\\] \\[1, 2\\] \\[1, 3\\]\nRow 2: \\[2, 0\\] \\[2, 1\\] \\[2, 2\\] \\[2, 3\\]\nRow 3: \\[3, 0\\] \\[3, 1\\] \\[3, 2\\] \\[3, 3\\]\n\n## [Using arrays to store other properties](#using_arrays_to_store_other_properties)\n\nArrays can also be used like objects, to store related information.\n\n```\nconst arr = [1, 2, 3];\narr.property = \"value\";\nconsole.log(arr.property); // \"value\"\n```\n\nFor example, when an array is the result of a match between a regular expression and a string, the array returns properties and elements that provide information about the match. An array is the return value of [`RegExp.prototype.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec), [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match), and [`String.prototype.split()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split). For information on using arrays with regular expressions, see [Regular Expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions).\n\n## [Working with array-like objects](#working_with_array-like_objects)\n\nSome JavaScript objects, such as the [`NodeList`](https://developer.mozilla.org/en-US/docs/Web/API/NodeList) returned by [`document.getElementsByTagName()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName) or the [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object made available within the body of a function, look and behave like arrays on the surface but do not share all of their methods. The `arguments` object provides a [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length) attribute but does not implement array methods like [`forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).\n\nArray methods cannot be called directly on array-like objects.\n\n```\nfunction printArguments() {\n  arguments.forEach((item) => {\n    console.log(item);\n  }); // TypeError: arguments.forEach is not a function\n}\n```\n\nBut you can call them indirectly using [`Function.prototype.call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call).\n\n```\nfunction printArguments() {\n  Array.prototype.forEach.call(arguments, (item) => {\n    console.log(item);\n  });\n}\n```\n\nArray prototype methods can be used on strings as well, since they provide sequential access to their characters in a similar way to arrays:\n\n```\nArray.prototype.forEach.call(\"a string\", (chr) => {\n  console.log(chr);\n});\n```\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections)",
    "title": "Indexed collections - JavaScript | MDN",
    "description": "This chapter introduces collections of data which are ordered by an index value. This includes arrays and array-like constructs such as Array objects and TypedArray objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "markdown": "# Promise - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Promise`** object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.\n\nTo learn about the way promises work and how you can use them, we advise you to read [Using promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises) first.\n\n## [Description](#description)\n\nA `Promise` is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a _promise_ to supply the value at some point in the future.\n\nA `Promise` is in one of these states:\n\n*   _pending_: initial state, neither fulfilled nor rejected.\n*   _fulfilled_: meaning that the operation was completed successfully.\n*   _rejected_: meaning that the operation failed.\n\nThe _eventual state_ of a pending promise can either be _fulfilled_ with a value or _rejected_ with a reason (error). When either of these options occur, the associated handlers queued up by a promise's `then` method are called. If the promise has already been fulfilled or rejected when a corresponding handler is attached, the handler will be called, so there is no race condition between an asynchronous operation completing and its handlers being attached.\n\nA promise is said to be _settled_ if it is either fulfilled or rejected, but not pending.\n\n![Flowchart showing how the Promise state transitions between pending, fulfilled, and rejected via then/catch handlers. A pending promise can become either fulfilled or rejected. If fulfilled, the \"on fulfillment\" handler, or first parameter of the then() method, is executed and carries out further asynchronous actions. If rejected, the error handler, either passed as the second parameter of the then() method or as the sole parameter of the catch() method, gets executed.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/promises.png)\n\nYou will also hear the term _resolved_ used with promises — this means that the promise is settled or \"locked-in\" to match the eventual state of another promise, and further resolving or rejecting it has no effect. The [States and fates](https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md) document from the original Promise proposal contains more details about promise terminology. Colloquially, \"resolved\" promises are often equivalent to \"fulfilled\" promises, but as illustrated in \"States and fates\", resolved promises can be pending or rejected as well. For example:\n\n```\nnew Promise((resolveOuter) => {\n  resolveOuter(\n    new Promise((resolveInner) => {\n      setTimeout(resolveInner, 1000);\n    }),\n  );\n});\n```\n\nThis promise is already _resolved_ at the time when it's created (because the `resolveOuter` is called synchronously), but it is resolved with another promise, and therefore won't be _fulfilled_ until 1 second later, when the inner promise fulfills. In practice, the \"resolution\" is often done behind the scenes and not observable, and only its fulfillment or rejection are.\n\n**Note:** Several other languages have mechanisms for lazy evaluation and deferring a computation, which they also call \"promises\", e.g. Scheme. Promises in JavaScript represent processes that are already happening, which can be chained with callback functions. If you are looking to lazily evaluate an expression, consider using a function with no arguments e.g. `f = () => expression` to create the lazily-evaluated expression, and `f()` to evaluate the expression immediately.\n\n`Promise` itself has no first-class protocol for cancellation, but you may be able to directly cancel the underlying asynchronous operation, typically using [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController).\n\n### [Chained Promises](#chained_promises)\n\nThe promise methods [`then()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then), [`catch()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch), and [`finally()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally) are used to associate further action with a promise that becomes settled. The `then()` method takes up to two arguments; the first argument is a callback function for the fulfilled case of the promise, and the second argument is a callback function for the rejected case. The `catch()` and `finally()` methods call `then()` internally and make error handling less verbose. For example, a `catch()` is really just a `then()` without passing the fulfillment handler. As these methods return promises, they can be chained. For example:\n\n```\nconst myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"foo\");\n  }, 300);\n});\n\nmyPromise\n  .then(handleFulfilledA, handleRejectedA)\n  .then(handleFulfilledB, handleRejectedB)\n  .then(handleFulfilledC, handleRejectedC);\n```\n\nWe will use the following terminology: _initial promise_ is the promise on which `then` is called; _new promise_ is the promise returned by `then`. The two callbacks passed to `then` are called _fulfillment handler_ and _rejection handler_, respectively.\n\nThe settled state of the initial promise determines which handler to execute.\n\n*   If the initial promise is fulfilled, the fulfillment handler is called with the fulfillment value.\n*   If the initial promise is rejected, the rejection handler is called with the rejection reason.\n\nThe completion of the handler function determines the settled state of the new promise.\n\n*   If the handler function returns a [thenable](#thenables) value, the new promise settles in the same state as the returned promise.\n*   If the handler function returns a non-thenable value, the new promise is fulfilled with the returned value.\n*   If the handler function throws an error, the new promise is rejected with the thrown error.\n*   If the initial promise has no corresponding handler attached, the new promise will settle to the same state as the initial promise — that is, without a rejection handler, a rejected promise stays rejected with the same reason.\n\nFor example, in the code above, if `myPromise` rejects, `handleRejectedA` will be called, and if `handleRejectedA` completes normally (without throwing or returning a rejected promise), the promise returned by the first `then` will be fulfilled instead of staying rejected. Therefore, if an error must be handled immediately, but we want to maintain the error state down the chain, we must throw an error of some type in the rejection handler. On the other hand, in the absence of an immediate need, it is simpler to leave out error handling until the final `catch()` handler.\n\n```\nmyPromise\n  .then(handleFulfilledA)\n  .then(handleFulfilledB)\n  .then(handleFulfilledC)\n  .catch(handleRejectedAny);\n```\n\nUsing [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) for the callback functions, implementation of the promise chain might look something like this:\n\n```\nmyPromise\n  .then((value) => `${value} and bar`)\n  .then((value) => `${value} and bar again`)\n  .then((value) => `${value} and again`)\n  .then((value) => `${value} and again`)\n  .then((value) => {\n    console.log(value);\n  })\n  .catch((err) => {\n    console.error(err);\n  });\n```\n\n**Note:** For faster execution, all synchronous actions should preferably be done within one handler, otherwise it would take several ticks to execute all handlers in sequence.\n\nJavaScript maintains a [job queue](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Event_loop). Each time, JavaScript picks a job from the queue and executes it to completion. The jobs are defined by the executor of the `Promise()` constructor, the handlers passed to `then`, or any platform API that returns a promise. The promises in a chain represent the dependency relationship between these jobs. When a promise settles, the respective handlers associated with it are added to the back of the job queue.\n\nA promise can participate in more than one chain. For the following code, the fulfillment of `promiseA` will cause both `handleFulfilled1` and `handleFulfilled2` to be added to the job queue. Because `handleFulfilled1` is registered first, it will be invoked first.\n\n```\nconst promiseA = new Promise(myExecutorFunc);\nconst promiseB = promiseA.then(handleFulfilled1, handleRejected1);\nconst promiseC = promiseA.then(handleFulfilled2, handleRejected2);\n```\n\nAn action can be assigned to an already settled promise. In this case, the action is added immediately to the back of the job queue and will be performed when all existing jobs are completed. Therefore, an action for an already \"settled\" promise will occur only after the current synchronous code completes and at least one loop-tick has passed. This guarantees that promise actions are asynchronous.\n\n```\nconst promiseA = new Promise((resolve, reject) => {\n  resolve(777);\n});\n// At this point, \"promiseA\" is already settled.\npromiseA.then((val) => console.log(\"asynchronous logging has val:\", val));\nconsole.log(\"immediate logging\");\n\n// produces output in this order:\n// immediate logging\n// asynchronous logging has val: 777\n```\n\n### [Thenables](#thenables)\n\nThe JavaScript ecosystem had made multiple Promise implementations long before it became part of the language. Despite being represented differently internally, at the minimum, all Promise-like objects implement the _Thenable_ interface. A thenable implements the [`.then()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) method, which is called with two callbacks: one for when the promise is fulfilled, one for when it's rejected. Promises are thenables as well.\n\nTo interoperate with the existing Promise implementations, the language allows using thenables in place of promises. For example, [`Promise.resolve`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve) will not only resolve promises, but also trace thenables.\n\n```\nconst aThenable = {\n  then(onFulfilled, onRejected) {\n    onFulfilled({\n      // The thenable is fulfilled with another thenable\n      then(onFulfilled, onRejected) {\n        onFulfilled(42);\n      },\n    });\n  },\n};\n\nPromise.resolve(aThenable); // A promise fulfilled with 42\n```\n\n### [Promise concurrency](#promise_concurrency)\n\nThe `Promise` class offers four static methods to facilitate async task [concurrency](https://en.wikipedia.org/wiki/Concurrent_computing):\n\n[`Promise.all()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all)\n\nFulfills when **all** of the promises fulfill; rejects when **any** of the promises rejects.\n\n[`Promise.allSettled()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled)\n\nFulfills when **all** promises settle.\n\n[`Promise.any()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any)\n\nFulfills when **any** of the promises fulfills; rejects when **all** of the promises reject.\n\n[`Promise.race()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race)\n\nSettles when **any** of the promises settles. In other words, fulfills when any of the promises fulfills; rejects when any of the promises rejects.\n\nAll these methods take an [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) of promises ([thenables](#thenables), to be exact) and return a new promise. They all support subclassing, which means they can be called on subclasses of `Promise`, and the result will be a promise of the subclass type. To do so, the subclass's constructor must implement the same signature as the [`Promise()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor — accepting a single `executor` function that can be called with the `resolve` and `reject` callbacks as parameters. The subclass must also have a `resolve` static method that can be called like [`Promise.resolve()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve) to resolve values to promises.\n\nNote that JavaScript is [single-threaded](https://developer.mozilla.org/en-US/docs/Glossary/Thread) by nature, so at a given instant, only one task will be executing, although control can shift between different promises, making execution of the promises appear concurrent. [Parallel execution](https://en.wikipedia.org/wiki/Parallel_computing) in JavaScript can only be achieved through [worker threads](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API).\n\n## [Constructor](#constructor)\n\n[`Promise()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise)\n\nCreates a new `Promise` object. The constructor is primarily used to wrap functions that do not already support promises.\n\n## [Static properties](#static_properties)\n\n[`Promise[@@species]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/@@species)\n\nReturns the constructor used to construct return values from promise methods.\n\n## [Static methods](#static_methods)\n\n[`Promise.all()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all)\n\nTakes an iterable of promises as input and returns a single `Promise`. This returned promise fulfills when all of the input's promises fulfill (including when an empty iterable is passed), with an array of the fulfillment values. It rejects when any of the input's promises reject, with this first rejection reason.\n\n[`Promise.allSettled()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled)\n\nTakes an iterable of promises as input and returns a single `Promise`. This returned promise fulfills when all of the input's promises settle (including when an empty iterable is passed), with an array of objects that describe the outcome of each promise.\n\n[`Promise.any()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any)\n\nTakes an iterable of promises as input and returns a single `Promise`. This returned promise fulfills when any of the input's promises fulfill, with this first fulfillment value. It rejects when all of the input's promises reject (including when an empty iterable is passed), with an [`AggregateError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError) containing an array of rejection reasons.\n\n[`Promise.race()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race)\n\nTakes an iterable of promises as input and returns a single `Promise`. This returned promise settles with the eventual state of the first promise that settles.\n\n[`Promise.reject()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject)\n\nReturns a new `Promise` object that is rejected with the given reason.\n\n[`Promise.resolve()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve)\n\nReturns a `Promise` object that is resolved with the given value. If the value is a thenable (i.e. has a `then` method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise, the returned promise will be fulfilled with the value.\n\n[`Promise.withResolvers()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/withResolvers)\n\nReturns an object containing a new `Promise` object and two functions to resolve or reject it, corresponding to the two parameters passed to the executor of the [`Promise()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Promise.prototype` and shared by all `Promise` instances.\n\n[`Promise.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Promise` instances, the initial value is the [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor.\n\n[`Promise.prototype[@@toStringTag]`](#promise.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Promise\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`Promise.prototype.catch()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch)\n\nAppends a rejection handler callback to the promise, and returns a new promise resolving to the return value of the callback if it is called, or to its original fulfillment value if the promise is instead fulfilled.\n\n[`Promise.prototype.finally()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally)\n\nAppends a handler to the promise, and returns a new promise that is resolved when the original promise is resolved. The handler is called when the promise is settled, whether fulfilled or rejected.\n\n[`Promise.prototype.then()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then)\n\nAppends fulfillment and rejection handlers to the promise, and returns a new promise resolving to the return value of the called handler, or to its original settled value if the promise was not handled (i.e. if the relevant handler `onFulfilled` or `onRejected` is not a function).\n\n## [Examples](#examples)\n\n### [Basic Example](#basic_example)\n\n```\nconst myFirstPromise = new Promise((resolve, reject) => {\n  // We call resolve(...) when what we were doing asynchronously was successful, and reject(...) when it failed.\n  // In this example, we use setTimeout(...) to simulate async code.\n  // In reality, you will probably be using something like XHR or an HTML API.\n  setTimeout(() => {\n    resolve(\"Success!\"); // Yay! Everything went well!\n  }, 250);\n});\n\nmyFirstPromise.then((successMessage) => {\n  // successMessage is whatever we passed in the resolve(...) function above.\n  // It doesn't have to be a string, but if it is only a succeed message, it probably will be.\n  console.log(`Yay! ${successMessage}`);\n});\n```\n\n### [Example with diverse situations](#example_with_diverse_situations)\n\nThis example shows diverse techniques for using Promise capabilities and diverse situations that can occur. To understand this, start by scrolling to the bottom of the code block, and examine the promise chain. Upon provision of an initial promise, a chain of promises can follow. The chain is composed of `.then()` calls, and typically (but not necessarily) has a single `.catch()` at the end, optionally followed by `.finally()`. In this example, the promise chain is initiated by a custom-written `new Promise()` construct; but in actual practice, promise chains more typically start with an API function (written by someone else) that returns a promise.\n\nThe example function `tetheredGetNumber()` shows that a promise generator will utilize `reject()` while setting up an asynchronous call, or within the call-back, or both. The function `promiseGetWord()` illustrates how an API function might generate and return a promise in a self-contained manner.\n\nNote that the function `troubleWithGetNumber()` ends with a `throw`. That is forced because a promise chain goes through all the `.then()` promises, even after an error, and without the `throw`, the error would seem \"fixed\". This is a hassle, and for this reason, it is common to omit `onRejected` throughout the chain of `.then()` promises, and just have a single `onRejected` in the final `catch()`.\n\nThis code can be run under NodeJS. Comprehension is enhanced by seeing the errors actually occur. To force more errors, change the `threshold` values.\n\n```\n// To experiment with error handling, \"threshold\" values cause errors randomly\nconst THRESHOLD_A = 8; // can use zero 0 to guarantee error\n\nfunction tetheredGetNumber(resolve, reject) {\n  setTimeout(() => {\n    const randomInt = Date.now();\n    const value = randomInt % 10;\n    if (value < THRESHOLD_A) {\n      resolve(value);\n    } else {\n      reject(`Too large: ${value}`);\n    }\n  }, 500);\n}\n\nfunction determineParity(value) {\n  const isOdd = value % 2 === 1;\n  return { value, isOdd };\n}\n\nfunction troubleWithGetNumber(reason) {\n  const err = new Error(\"Trouble getting number\", { cause: reason });\n  console.error(err);\n  throw err;\n}\n\nfunction promiseGetWord(parityInfo) {\n  return new Promise((resolve, reject) => {\n    const { value, isOdd } = parityInfo;\n    if (value >= THRESHOLD_A - 1) {\n      reject(`Still too large: ${value}`);\n    } else {\n      parityInfo.wordEvenOdd = isOdd ? \"odd\" : \"even\";\n      resolve(parityInfo);\n    }\n  });\n}\n\nnew Promise(tetheredGetNumber)\n  .then(determineParity, troubleWithGetNumber)\n  .then(promiseGetWord)\n  .then((info) => {\n    console.log(`Got: ${info.value}, ${info.wordEvenOdd}`);\n    return info;\n  })\n  .catch((reason) => {\n    if (reason.cause) {\n      console.error(\"Had previously handled error\");\n    } else {\n      console.error(`Trouble with promiseGetWord(): ${reason}`);\n    }\n  })\n  .finally((info) => console.log(\"All done\"));\n```\n\n### [Advanced Example](#advanced_example)\n\nThis small example shows the mechanism of a `Promise`. The `testPromise()` method is called each time the [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button) is clicked. It creates a promise that will be fulfilled, using [`setTimeout()`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout), to the promise count (number starting from 1) every 1-3 seconds, at random. The `Promise()` constructor is used to create the promise.\n\nThe fulfillment of the promise is logged, via a fulfill callback set using [`p1.then()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then). A few logs show how the synchronous part of the method is decoupled from the asynchronous completion of the promise.\n\nBy clicking the button several times in a short amount of time, you'll even see the different promises being fulfilled one after another.\n\n#### HTML\n\n```\n<button id=\"make-promise\">Make a promise!</button>\n<div id=\"log\"></div>\n```\n\n#### JavaScript\n\n```\n\"use strict\";\n\nlet promiseCount = 0;\n\nfunction testPromise() {\n  const thisPromiseCount = ++promiseCount;\n  const log = document.getElementById(\"log\");\n  // begin\n  log.insertAdjacentHTML(\"beforeend\", `${thisPromiseCount}) Started<br>`);\n  // We make a new promise: we promise a numeric count of this promise,\n  // starting from 1 (after waiting 3s)\n  const p1 = new Promise((resolve, reject) => {\n    // The executor function is called with the ability\n    // to resolve or reject the promise\n    log.insertAdjacentHTML(\n      \"beforeend\",\n      `${thisPromiseCount}) Promise constructor<br>`,\n    );\n    // This is only an example to create asynchronism\n    setTimeout(\n      () => {\n        // We fulfill the promise\n        resolve(thisPromiseCount);\n      },\n      Math.random() * 2000 + 1000,\n    );\n  });\n\n  // We define what to do when the promise is resolved with the then() call,\n  // and what to do when the promise is rejected with the catch() call\n  p1.then((val) => {\n    // Log the fulfillment value\n    log.insertAdjacentHTML(\"beforeend\", `${val}) Promise fulfilled<br>`);\n  }).catch((reason) => {\n    // Log the rejection reason\n    console.log(`Handle rejected promise (${reason}) here.`);\n  });\n  // end\n  log.insertAdjacentHTML(\"beforeend\", `${thisPromiseCount}) Promise made<br>`);\n}\n\nconst btn = document.getElementById(\"make-promise\");\nbtn.addEventListener(\"click\", testPromise);\n```\n\n#### Result\n\n### [Loading an image with XHR](#loading_an_image_with_xhr)\n\nAnother simple example using `Promise` and [`XMLHttpRequest`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) to load an image is available at the MDN GitHub [js-examples](https://github.com/mdn/js-examples/tree/main/promises-test) repository. You can also [see it in action](https://mdn.github.io/js-examples/promises-test/). Each step is commented on and allows you to follow the Promise and XHR architecture closely.\n\n### [Incumbent settings object tracking](#incumbent_settings_object_tracking)\n\nA settings object is an [environment](https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object) that provides additional information when JavaScript code is running. This includes the realm and module map, as well as HTML specific information such as the origin. The incumbent settings object is tracked in order to ensure that the browser knows which one to use for a given piece of user code.\n\nTo better picture this, we can take a closer look at how the realm might be an issue. A **realm** can be roughly thought of as the global object. What is unique about realms is that they hold all of the necessary information to run JavaScript code. This includes objects like [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) and [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error). Each settings object has its own \"copy\" of these and they are not shared. That can cause some unexpected behavior in relation to promises. In order to get around this, we track something called the **incumbent settings object**. This represents information specific to the context of the user code responsible for a certain function call.\n\nTo illustrate this a bit further we can take a look at how an [`<iframe>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) embedded in a document communicates with its host. Since all web APIs are aware of the incumbent settings object, the following will work in all browsers:\n\n```\n<!doctype html> <iframe></iframe>\n<!-- we have a realm here -->\n<script>\n  // we have a realm here as well\n  const bound = frames[0].postMessage.bind(frames[0], \"some data\", \"*\");\n  // bound is a built-in function — there is no user\n  // code on the stack, so which realm do we use?\n  setTimeout(bound);\n  // this still works, because we use the youngest\n  // realm (the incumbent) on the stack\n</script>\n```\n\nThe same concept applies to promises. If we modify the above example a little bit, we get this:\n\n```\n<!doctype html> <iframe></iframe>\n<!-- we have a realm here -->\n<script>\n  // we have a realm here as well\n  const bound = frames[0].postMessage.bind(frames[0], \"some data\", \"*\");\n  // bound is a built in function — there is no user\n  // code on the stack — which realm do we use?\n  Promise.resolve(undefined).then(bound);\n  // this still works, because we use the youngest\n  // realm (the incumbent) on the stack\n</script>\n```\n\nIf we change this so that the `<iframe>` in the document is listening to post messages, we can observe the effect of the incumbent settings object:\n\n```\n<!-- y.html -->\n<!doctype html>\n<iframe src=\"x.html\"></iframe>\n<script>\n  const bound = frames[0].postMessage.bind(frames[0], \"some data\", \"*\");\n  Promise.resolve(undefined).then(bound);\n</script>\n```\n\n```\n<!-- x.html -->\n<!doctype html>\n<script>\n  window.addEventListener(\n    \"message\",\n    (event) => {\n      document.querySelector(\"#text\").textContent = \"hello\";\n      // this code will only run in browsers that track the incumbent settings object\n      console.log(event);\n    },\n    false,\n  );\n</script>\n```\n\nIn the above example, the inner text of the `<iframe>` will be updated only if the incumbent settings object is tracked. This is because without tracking the incumbent, we may end up using the wrong environment to send the message.\n\n**Note:** Currently, incumbent realm tracking is fully implemented in Firefox, and has partial implementations in Chrome and Safari.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-promise-objects](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Promise - JavaScript | MDN",
    "description": "The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_classes",
    "markdown": "# Using classes - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises)\n\nJavaScript is a prototype-based language — an object's behaviors are specified by its own properties and its prototype's properties. However, with the addition of [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes), the creation of hierarchies of objects and the inheritance of properties and their values are much more in line with other object-oriented languages such as Java. In this section, we will demonstrate how objects can be created from classes.\n\nIn many other languages, _classes_, or constructors, are clearly distinguished from _objects_, or instances. In JavaScript, classes are mainly an abstraction over the existing prototypical inheritance mechanism — all patterns are convertible to prototype-based inheritance. Classes themselves are normal JavaScript values as well, and have their own prototype chains. In fact, most plain JavaScript functions can be used as constructors — you use the `new` operator with a constructor function to create a new object.\n\nWe will be playing with the well-abstracted class model in this tutorial, and discuss what semantics classes offer. If you want to dive deep into the underlying prototype system, you can read the [Inheritance and the prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) guide.\n\nThis chapter assumes that you are already somewhat familiar with JavaScript and that you have used ordinary objects.\n\n## [Overview of classes](#overview_of_classes)\n\nIf you have some hands-on experience with JavaScript, or have followed along with the guide, you probably have already used classes, even if you haven't created one. For example, this [may seem familiar to you](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates):\n\n```\nconst bigDay = new Date(2019, 6, 19);\nconsole.log(bigDay.toLocaleDateString());\nif (bigDay.getTime() < Date.now()) {\n  console.log(\"Once upon a time...\");\n}\n```\n\nOn the first line, we created an instance of the class [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date), and called it `bigDay`. On the second line, we called a [method](https://developer.mozilla.org/en-US/docs/Glossary/Method) [`toLocaleDateString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString) on the `bigDay` instance, which returns a string. Then, we compared two numbers: one returned from the [`getTime()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime) method, the other directly called from the `Date` class _itself_, as [`Date.now()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now).\n\n`Date` is a built-in class of JavaScript. From this example, we can get some basic ideas of what classes do:\n\n*   Classes create objects through the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator.\n*   Each object has some properties (data or method) added by the class.\n*   The class stores some properties (data or method) itself, which are usually used to interact with instances.\n\nThese correspond to the three key features of classes:\n\n*   Constructor;\n*   Instance methods and instance fields;\n*   Static methods and static fields.\n\n## [Declaring a class](#declaring_a_class)\n\nClasses are usually created with _class declarations_.\n\n```\nclass MyClass {\n  // class body...\n}\n```\n\nWithin a class body, there are a range of features available.\n\n```\nclass MyClass {\n  // Constructor\n  constructor() {\n    // Constructor body\n  }\n  // Instance field\n  myField = \"foo\";\n  // Instance method\n  myMethod() {\n    // myMethod body\n  }\n  // Static field\n  static myStaticField = \"bar\";\n  // Static method\n  static myStaticMethod() {\n    // myStaticMethod body\n  }\n  // Static block\n  static {\n    // Static initialization code\n  }\n  // Fields, methods, static fields, and static methods all have\n  // \"private\" forms\n  #myPrivateField = \"bar\";\n}\n```\n\nIf you came from a pre-ES6 world, you may be more familiar with using functions as constructors. The pattern above would roughly translate to the following with function constructors:\n\n```\nfunction MyClass() {\n  this.myField = \"foo\";\n  // Constructor body\n}\nMyClass.myStaticField = \"bar\";\nMyClass.myStaticMethod = function () {\n  // myStaticMethod body\n};\nMyClass.prototype.myMethod = function () {\n  // myMethod body\n};\n\n(function () {\n  // Static initialization code\n})();\n```\n\n**Note:** Private fields and methods are new features in classes with no trivial equivalent in function constructors.\n\n### [Constructing a class](#constructing_a_class)\n\nAfter a class has been declared, you can create instances of it using the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator.\n\n```\nconst myInstance = new MyClass();\nconsole.log(myInstance.myField); // 'foo'\nmyInstance.myMethod();\n```\n\nTypical function constructors can both be constructed with `new` and called without `new`. However, attempting to \"call\" a class without `new` will result in an error.\n\n```\nconst myInstance = MyClass(); // TypeError: Class constructor MyClass cannot be invoked without 'new'\n```\n\n### [Class declaration hoisting](#class_declaration_hoisting)\n\nUnlike function declarations, class declarations are not [hoisted](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting) (or, in some interpretations, hoisted but with the temporal dead zone restriction), which means you cannot use a class before it is declared.\n\n```\nnew MyClass(); // ReferenceError: Cannot access 'MyClass' before initialization\n\nclass MyClass {}\n```\n\nThis behavior is similar to variables declared with [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) and [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const).\n\n### [Class expressions](#class_expressions)\n\nSimilar to functions, class declarations also have their expression counterparts.\n\n```\nconst MyClass = class {\n  // Class body...\n};\n```\n\nClass expressions can have names as well. The expression's name is only visible to the class's body.\n\n```\nconst MyClass = class MyClassLongerName {\n  // Class body. Here MyClass and MyClassLongerName point to the same class.\n};\nnew MyClassLongerName(); // ReferenceError: MyClassLongerName is not defined\n```\n\n## [Constructor](#constructor)\n\nPerhaps the most important job of a class is to act as a \"factory\" for objects. For example, when we use the `Date` constructor, we expect it to give a new object which represents the date data we passed in — which we can then manipulate with other methods the instance exposes. In classes, the instance creation is done by the [constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor).\n\nAs an example, we would create a class called `Color`, which represents a specific color. Users create colors through passing in an [RGB](https://developer.mozilla.org/en-US/docs/Glossary/RGB) triplet.\n\n```\nclass Color {\n  constructor(r, g, b) {\n    // Assign the RGB values as a property of `this`.\n    this.values = [r, g, b];\n  }\n}\n```\n\nOpen your browser's devtools, paste the above code into the console, and then create an instance:\n\n```\nconst red = new Color(255, 0, 0);\nconsole.log(red);\n```\n\nYou should see some output like this:\n\nObject { values: (3) \\[…\\] }\n  values: Array(3) \\[ 255, 0, 0 \\]\n\nYou have successfully created a `Color` instance, and the instance has a `values` property, which is an array of the RGB values you passed in. That is pretty much equivalent to the following:\n\n```\nfunction createColor(r, g, b) {\n  return {\n    values: [r, g, b],\n  };\n}\n```\n\nThe constructor's syntax is exactly the same as a normal function — which means you can use other syntaxes, like [rest parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters):\n\n```\nclass Color {\n  constructor(...values) {\n    this.values = values;\n  }\n}\n\nconst red = new Color(255, 0, 0);\n// Creates an instance with the same shape as above.\n```\n\nEach time you call `new`, a different instance is created.\n\n```\nconst red = new Color(255, 0, 0);\nconst anotherRed = new Color(255, 0, 0);\nconsole.log(red === anotherRed); // false\n```\n\nWithin a class constructor, the value of `this` points to the newly created instance. You can assign properties to it, or read existing properties (especially methods — which we will cover next).\n\nThe `this` value will be automatically returned as the result of `new`. You are advised to not return any value from the constructor — because if you return a non-primitive value, it will become the value of the `new` expression, and the value of `this` is dropped. (You can read more about what `new` does in [its description](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new#description).)\n\n```\nclass MyClass {\n  constructor() {\n    this.myField = \"foo\";\n    return {};\n  }\n}\n\nconsole.log(new MyClass().myField); // undefined\n```\n\n## [Instance methods](#instance_methods)\n\nIf a class only has a constructor, it is not much different from a `createX` factory function which just creates plain objects. However, the power of classes is that they can be used as \"templates\" which automatically assign methods to instances.\n\nFor example, for `Date` instances, you can use a range of methods to get different information from a single date value, such as the [year](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear), [month](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth), [day of the week](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay), etc. You can also set those values through the `setX` counterparts like [`setFullYear`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear).\n\nFor our own `Color` class, we can add a method called `getRed` which returns the red value of the color.\n\n```\nclass Color {\n  constructor(r, g, b) {\n    this.values = [r, g, b];\n  }\n  getRed() {\n    return this.values[0];\n  }\n}\n\nconst red = new Color(255, 0, 0);\nconsole.log(red.getRed()); // 255\n```\n\nWithout methods, you may be tempted to define the function within the constructor:\n\n```\nclass Color {\n  constructor(r, g, b) {\n    this.values = [r, g, b];\n    this.getRed = function () {\n      return this.values[0];\n    };\n  }\n}\n```\n\nThis also works. However, a problem is that this creates a new function every time a `Color` instance is created, even when they all do the same thing!\n\n```\nconsole.log(new Color().getRed === new Color().getRed); // false\n```\n\nIn contrast, if you use a method, it will be shared between all instances. A function can be shared between all instances, but still have its behavior differ when different instances call it, because the value of `this` is different. If you are curious _where_ this method is stored in — it's defined on the prototype of all instances, or `Color.prototype`, which is explained in more detail in [Inheritance and the prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain).\n\nSimilarly, we can create a new method called `setRed`, which sets the red value of the color.\n\n```\nclass Color {\n  constructor(r, g, b) {\n    this.values = [r, g, b];\n  }\n  getRed() {\n    return this.values[0];\n  }\n  setRed(value) {\n    this.values[0] = value;\n  }\n}\n\nconst red = new Color(255, 0, 0);\nred.setRed(0);\nconsole.log(red.getRed()); // 0; of course, it should be called \"black\" at this stage!\n```\n\n## [Private fields](#private_fields)\n\nYou might be wondering: why do we want to go to the trouble of using `getRed` and `setRed` methods, when we can directly access the `values` array on the instance?\n\n```\nclass Color {\n  constructor(r, g, b) {\n    this.values = [r, g, b];\n  }\n}\n\nconst red = new Color(255, 0, 0);\nred.values[0] = 0;\nconsole.log(red.values[0]); // 0\n```\n\nThere is a philosophy in object-oriented programming called \"encapsulation\". This means you should not access the underlying implementation of an object, but instead use well-abstracted methods to interact with it. For example, if we suddenly decided to represent colors as [HSL](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl) instead:\n\n```\nclass Color {\n  constructor(r, g, b) {\n    // values is now an HSL array!\n    this.values = rgbToHSL([r, g, b]);\n  }\n  getRed() {\n    return this.values[0];\n  }\n  setRed(value) {\n    this.values[0] = value;\n  }\n}\n\nconst red = new Color(255, 0, 0);\nconsole.log(red.values[0]); // 0; It's not 255 anymore, because the H value for pure red is 0\n```\n\nThe user assumption that `values` means the RGB value suddenly collapses, and it may cause their logic to break. So, if you are an implementor of a class, you would want to hide the internal data structure of your instance from your user, both to keep the API clean and to prevent the user's code from breaking when you do some \"harmless refactors\". In classes, this is done through [_private fields_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties).\n\nA private field is an identifier prefixed with `#` (the hash symbol). The hash is an integral part of the field's name, which means a private property can never have name clash with a public property. In order to refer to a private field anywhere in the class, you must _declare_ it in the class body (you can't create a private property on the fly). Apart from this, a private field is pretty much equivalent to a normal property.\n\n```\nclass Color {\n  // Declare: every Color instance has a private field called #values.\n  #values;\n  constructor(r, g, b) {\n    this.#values = [r, g, b];\n  }\n  getRed() {\n    return this.#values[0];\n  }\n  setRed(value) {\n    this.#values[0] = value;\n  }\n}\n\nconst red = new Color(255, 0, 0);\nconsole.log(red.getRed()); // 255\n```\n\nAccessing private fields outside the class is an early syntax error. The language can guard against this because `#privateField` is a special syntax, so it can do some static analysis and find all usage of private fields before even evaluating the code.\n\n```\nconsole.log(red.#values); // SyntaxError: Private field '#values' must be declared in an enclosing class\n```\n\n**Note:** Code run in the Chrome console can access private properties outside the class. This is a DevTools-only relaxation of the JavaScript syntax restriction.\n\nPrivate fields in JavaScript are _hard private_: if the class does not implement methods that expose these private fields, there's absolutely no mechanism to retrieve them from outside the class. This means you are safe to do any refactors to your class's private fields, as long as the behavior of exposed methods stay the same.\n\nAfter we've made the `values` field private, we can add some more logic in the `getRed` and `setRed` methods, instead of making them simple pass-through methods. For example, we can add a check in `setRed` to see if it's a valid R value:\n\n```\nclass Color {\n  #values;\n  constructor(r, g, b) {\n    this.#values = [r, g, b];\n  }\n  getRed() {\n    return this.#values[0];\n  }\n  setRed(value) {\n    if (value < 0 || value > 255) {\n      throw new RangeError(\"Invalid R value\");\n    }\n    this.#values[0] = value;\n  }\n}\n\nconst red = new Color(255, 0, 0);\nred.setRed(1000); // RangeError: Invalid R value\n```\n\nIf we leave the `values` property exposed, our users can easily circumvent that check by assigning to `values[0]` directly, and create invalid colors. But with a well-encapsulated API, we can make our code more robust and prevent logic errors downstream.\n\nA class method can read the private fields of other instances, as long as they belong to the same class.\n\n```\nclass Color {\n  #values;\n  constructor(r, g, b) {\n    this.#values = [r, g, b];\n  }\n  redDifference(anotherColor) {\n    // #values doesn't necessarily need to be accessed from this:\n    // you can access private fields of other instances belonging\n    // to the same class.\n    return this.#values[0] - anotherColor.#values[0];\n  }\n}\n\nconst red = new Color(255, 0, 0);\nconst crimson = new Color(220, 20, 60);\nred.redDifference(crimson); // 35\n```\n\nHowever, if `anotherColor` is not a Color instance, `#values` won't exist. (Even if another class has an identically named `#values` private field, it's not referring to the same thing and cannot be accessed here.) Accessing a nonexistent private property throws an error instead of returning `undefined` like normal properties do. If you don't know if a private field exists on an object and you wish to access it without using `try`/`catch` to handle the error, you can use the [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) operator.\n\n```\nclass Color {\n  #values;\n  constructor(r, g, b) {\n    this.#values = [r, g, b];\n  }\n  redDifference(anotherColor) {\n    if (!(#values in anotherColor)) {\n      throw new TypeError(\"Color instance expected\");\n    }\n    return this.#values[0] - anotherColor.#values[0];\n  }\n}\n```\n\n**Note:** Keep in mind that the `#` is a special identifier syntax, and you can't use the field name as if it's a string. `\"#values\" in anotherColor` would look for a property name literally called `\"#values\"`, instead of a private field.\n\nThere are some limitations in using private properties: the same name can't be declared twice in a single class, and they can't be deleted. Both lead to early syntax errors.\n\n```\nclass BadIdeas {\n  #firstName;\n  #firstName; // syntax error occurs here\n  #lastName;\n  constructor() {\n    delete this.#lastName; // also a syntax error\n  }\n}\n```\n\nMethods, [getters, and setters](#accessor_fields) can be private as well. They're useful when you have something complex that the class needs to do internally but no other part of the code should be allowed to call.\n\nFor example, imagine creating [HTML custom elements](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements) that should do something somewhat complicated when clicked/tapped/otherwise activated. Furthermore, the somewhat complicated things that happen when the element is clicked should be restricted to this class, because no other part of the JavaScript will (or should) ever access it.\n\n```\nclass Counter extends HTMLElement {\n  #xValue = 0;\n  constructor() {\n    super();\n    this.onclick = this.#clicked.bind(this);\n  }\n  get #x() {\n    return this.#xValue;\n  }\n  set #x(value) {\n    this.#xValue = value;\n    window.requestAnimationFrame(this.#render.bind(this));\n  }\n  #clicked() {\n    this.#x++;\n  }\n  #render() {\n    this.textContent = this.#x.toString();\n  }\n  connectedCallback() {\n    this.#render();\n  }\n}\n\ncustomElements.define(\"num-counter\", Counter);\n```\n\nIn this case, pretty much every field and method is private to the class. Thus, it presents an interface to the rest of the code that's essentially just like a built-in HTML element. No other part of the program has the power to affect any of the internals of `Counter`.\n\n## [Accessor fields](#accessor_fields)\n\n`color.getRed()` and `color.setRed()` allow us to read and write to the red value of a color. If you come from languages like Java, you will be very familiar with this pattern. However, using methods to simply access a property is still somewhat unergonomic in JavaScript. _Accessor fields_ allow us to manipulate something as if it is an \"actual property\".\n\n```\nclass Color {\n  constructor(r, g, b) {\n    this.values = [r, g, b];\n  }\n  get red() {\n    return this.values[0];\n  }\n  set red(value) {\n    this.values[0] = value;\n  }\n}\n\nconst red = new Color(255, 0, 0);\nred.red = 0;\nconsole.log(red.red); // 0\n```\n\nIt looks as if the object has a property called `red` — but actually, no such property exists on the instance! There are only two methods, but they are prefixed with `get` and `set`, which allows them to be manipulated as if they were properties.\n\nIf a field only has a getter but no setter, it will be effectively read-only.\n\n```\nclass Color {\n  constructor(r, g, b) {\n    this.values = [r, g, b];\n  }\n  get red() {\n    return this.values[0];\n  }\n}\n\nconst red = new Color(255, 0, 0);\nred.red = 0;\nconsole.log(red.red); // 255\n```\n\nIn [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), the `red.red = 0` line will throw a type error: \"Cannot set property red of #<Color> which has only a getter\". In non-strict mode, the assignment is silently ignored.\n\n## [Public fields](#public_fields)\n\nPrivate fields also have their public counterparts, which allow every instance to have a property. Fields are usually designed to be independent of the constructor's parameters.\n\n```\nclass MyClass {\n  luckyNumber = Math.random();\n}\nconsole.log(new MyClass().luckyNumber); // 0.5\nconsole.log(new MyClass().luckyNumber); // 0.3\n```\n\nPublic fields are almost equivalent to assigning a property to `this`. For example, the above example can also be converted to:\n\n```\nclass MyClass {\n  constructor() {\n    this.luckyNumber = Math.random();\n  }\n}\n```\n\n## [Static properties](#static_properties)\n\nWith the `Date` example, we have also encountered the [`Date.now()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now) method, which returns the current date. This method does not belong to any date instance — it belongs to the class itself. However, it's put on the `Date` class instead of being exposed as a global `DateNow()` function, because it's mostly useful when dealing with date instances.\n\n**Note:** Prefixing utility methods with what they deal with is called \"namespacing\" and is considered a good practice. For example, in addition to the older, unprefixed [`parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt) method, JavaScript also later added the prefixed [`Number.parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt) method to indicate that it's for dealing with numbers.\n\n[_Static properties_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static) are a group of class features that are defined on the class itself, rather than on individual instances of the class. These features include:\n\n*   Static methods\n*   Static fields\n*   Static getters and setters\n\nEverything also has private counterparts. For example, for our `Color` class, we can create a static method that checks whether a given triplet is a valid RGB value:\n\n```\nclass Color {\n  static isValid(r, g, b) {\n    return r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255;\n  }\n}\n\nColor.isValid(255, 0, 0); // true\nColor.isValid(1000, 0, 0); // false\n```\n\nStatic properties are very similar to their instance counterparts, except that:\n\n*   They are all prefixed with `static`, and\n*   They are not accessible from instances.\n\n```\nconsole.log(new Color(0, 0, 0).isValid); // undefined\n```\n\nThere is also a special construct called a [_static initialization block_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks), which is a block of code that runs when the class is first loaded.\n\n```\nclass MyClass {\n  static {\n    MyClass.myStaticProperty = \"foo\";\n  }\n}\n\nconsole.log(MyClass.myStaticProperty); // 'foo'\n```\n\nStatic initialization blocks are almost equivalent to immediately executing some code after a class has been declared. The only difference is that they have access to static private properties.\n\n## [Extends and inheritance](#extends_and_inheritance)\n\nA key feature that classes bring about (in addition to ergonomic encapsulation with private fields) is _inheritance_, which means one object can \"borrow\" a large part of another object's behaviors, while overriding or enhancing certain parts with its own logic.\n\nFor example, suppose our `Color` class now needs to support transparency. We may be tempted to add a new field that indicates its transparency:\n\n```\nclass Color {\n  #values;\n  constructor(r, g, b, a = 1) {\n    this.#values = [r, g, b, a];\n  }\n  get alpha() {\n    return this.#values[3];\n  }\n  set alpha(value) {\n    if (value < 0 || value > 1) {\n      throw new RangeError(\"Alpha value must be between 0 and 1\");\n    }\n    this.#values[3] = value;\n  }\n}\n```\n\nHowever, this means every instance — even the vast majority which aren't transparent (those with an alpha value of 1) — will have to have the extra alpha value, which is not very elegant. Plus, if the features keep growing, our `Color` class will become very bloated and hard to maintain.\n\nInstead, in object-oriented programming, we would create a _derived class_. The derived class has access to all public properties of the parent class. In JavaScript, derived classes are declared with an [`extends`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends) clause, which indicates the class it extends from.\n\n```\nclass ColorWithAlpha extends Color {\n  #alpha;\n  constructor(r, g, b, a) {\n    super(r, g, b);\n    this.#alpha = a;\n  }\n  get alpha() {\n    return this.#alpha;\n  }\n  set alpha(value) {\n    if (value < 0 || value > 1) {\n      throw new RangeError(\"Alpha value must be between 0 and 1\");\n    }\n    this.#alpha = value;\n  }\n}\n```\n\nThere are a few things that have immediately come to attention. First is that in the constructor, we are calling `super(r, g, b)`. It is a language requirement to call [`super()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super) before accessing `this`. The `super()` call calls the parent class's constructor to initialize `this` — here it's roughly equivalent to `this = new Color(r, g, b)`. You can have code before `super()`, but you cannot access `this` before `super()` — the language prevents you from accessing the uninitialized `this`.\n\nAfter the parent class is done with modifying `this`, the derived class can do its own logic. Here we added a private field called `#alpha`, and also provided a pair of getter/setters to interact with them.\n\nA derived class inherits all methods from its parent. For example, although `ColorWithAlpha` doesn't declare a `get red()` accessor itself, you can still access `red` because this behavior is specified by the parent class:\n\n```\nconst color = new ColorWithAlpha(255, 0, 0, 0.5);\nconsole.log(color.red); // 255\n```\n\nDerived classes can also override methods from the parent class. For example, all classes implicitly inherit the [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) class, which defines some basic methods like [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString). However, the base `toString()` method is notoriously useless, because it prints `[object Object]` in most cases:\n\n```\nconsole.log(red.toString()); // [object Object]\n```\n\nInstead, our class can override it to print the color's RGB values:\n\n```\nclass Color {\n  #values;\n  // …\n  toString() {\n    return this.#values.join(\", \");\n  }\n}\n\nconsole.log(new Color(255, 0, 0).toString()); // '255, 0, 0'\n```\n\nWithin derived classes, you can access the parent class's methods by using `super`. This allows you to build enhancement methods and avoid code duplication.\n\n```\nclass ColorWithAlpha extends Color {\n  #alpha;\n  // …\n  toString() {\n    // Call the parent class's toString() and build on the return value\n    return `${super.toString()}, ${this.#alpha}`;\n  }\n}\n\nconsole.log(new ColorWithAlpha(255, 0, 0, 0.5).toString()); // '255, 0, 0, 0.5'\n```\n\nWhen you use `extends`, the static methods inherit from each other as well, so you can also override or enhance them.\n\n```\nclass ColorWithAlpha extends Color {\n  // ...\n  static isValid(r, g, b, a) {\n    // Call the parent class's isValid() and build on the return value\n    return super.isValid(r, g, b) && a >= 0 && a <= 1;\n  }\n}\n\nconsole.log(ColorWithAlpha.isValid(255, 0, 0, -1)); // false\n```\n\nDerived classes don't have access to the parent class's private fields — this is another key aspect to JavaScript private fields being \"hard private\". Private fields are scoped to the class body itself and do not grant access to _any_ outside code.\n\n```\nclass ColorWithAlpha extends Color {\n  log() {\n    console.log(this.#values); // SyntaxError: Private field '#values' must be declared in an enclosing class\n  }\n}\n```\n\nA class can only extend from one class. This prevents problems in multiple inheritance like the [diamond problem](https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem). However, due to the dynamic nature of JavaScript, it's still possible to achieve the effect of multiple inheritance through class composition and [mixins](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends#mix-ins).\n\nInstances of derived classes are also [instances of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) the base class.\n\n```\nconst color = new ColorWithAlpha(255, 0, 0, 0.5);\nconsole.log(color instanceof Color); // true\nconsole.log(color instanceof ColorWithAlpha); // true\n```\n\n## [Why classes?](#why_classes)\n\nThe guide has been pragmatic so far: we are focusing on _how_ classes can be used, but there's one question unanswered: _why_ would one use a class? The answer is: it depends.\n\nClasses introduce a _paradigm_, or a way to organize your code. Classes are the foundations of object-oriented programming, which is built on concepts like [inheritance](https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)) and [polymorphism](https://en.wikipedia.org/wiki/Polymorphism_(computer_science)) (especially _subtype polymorphism_). However, many people are philosophically against certain OOP practices and don't use classes as a result.\n\nFor example, one thing that makes `Date` objects infamous is that they're _mutable_.\n\n```\nfunction incrementDay(date) {\n  return date.setDate(date.getDate() + 1);\n}\nconst date = new Date(); // 2019-06-19\nconst newDay = incrementDay(date);\nconsole.log(newDay); // 2019-06-20\n// The old date is modified as well!?\nconsole.log(date); // 2019-06-20\n```\n\nMutability and internal state are important aspects of object-oriented programming, but often make code hard to reason with — because any seemingly innocent operation may have unexpected side effects and change the behavior in other parts of the program.\n\nIn order to reuse code, we usually resort to extending classes, which can create big hierarchies of inheritance patterns.\n\n![A typical OOP inheritance tree, with five classes and three levels](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_classes/figure8.1.png)\n\nHowever, it is often hard to describe inheritance cleanly when one class can only extend one other class. Often, we want the behavior of multiple classes. In Java, this is done through interfaces; in JavaScript, it can be done through mixins. But at the end of the day, it's still not very convenient.\n\nOn the brighter side, classes are a very powerful way to organize our code on a higher level. For example, without the `Color` class, we may need to create a dozen of utility functions:\n\n```\nfunction isRed(color) {\n  return color.red === 255;\n}\nfunction isValidColor(color) {\n  return (\n    color.red >= 0 &&\n    color.red <= 255 &&\n    color.green >= 0 &&\n    color.green <= 255 &&\n    color.blue >= 0 &&\n    color.blue <= 255\n  );\n}\n// ...\n```\n\nBut with classes, we can congregate them all under the `Color` namespace, which improves readability. In addition, the introduction of private fields allows us to hide certain data from downstream users, creating a clean API.\n\nIn general, you should consider using classes when you want to create objects that store their own internal data and expose a lot of behavior. Take built-in JavaScript classes as examples:\n\n*   The [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) and [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) classes store a collection of elements and allow you to access them by key using `get()`, `set()`, `has()`, etc.\n*   The [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) class stores a date as a Unix timestamp (a number) and allows you to format, update, and read individual date components.\n*   The [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class stores information about a particular exception, including the error message, stack trace, cause, etc. It's one of the few classes that come with a rich inheritance structure: there are multiple built-in classes like [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) and [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError) that extend `Error`. In the case of errors, this inheritance allows refining the semantics of errors: each error class represents a specific type of error, which can be easily checked with [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof).\n\nJavaScript offers the mechanism to organize your code in a canonical object-oriented way, but whether and how to use it is entirely up to the programmer's discretion.\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises)",
    "title": "Using classes - JavaScript | MDN",
    "description": "JavaScript is a prototype-based language — an object's behaviors are specified by its own properties and its prototype's properties. However, with the addition of classes, the creation of hierarchies of objects and the inheritance of properties and their values are much more in line with other object-oriented languages such as Java. In this section, we will demonstrate how objects can be created from classes.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator",
    "markdown": "# Comma operator (,) - JavaScript\n\nThe **comma (`,`)** operator evaluates each of its operands (from left to right) and returns the value of the last operand. This is commonly used to provide multiple updaters to a [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop's afterthought.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nexpr1, expr2, expr3/* , … */\n```\n\n### [Parameters](#parameters)\n\n[`expr1`](#expr1), `expr2`, `expr3`, …\n\nOne or more expressions, the last of which is returned as the value of the compound expression.\n\n## [Description](#description)\n\nYou can use the comma operator when you want to include multiple expressions in a location that requires a single expression. The most common usage of this operator is to supply multiple updaters in a `for` loop.\n\nBecause all expressions except the last are evaluated and then discarded, these expressions must have side effects to be useful. Common expressions that have side effects are assignments, function calls, and [`++`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment) and [`--`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Decrement) operators. Others may also have side effects if they invoke [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) or trigger [type coercions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#type_coercion).\n\nThe comma operator has the lowest [precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence) of all operators. If you want to incorporate a comma-joined expression into a bigger expression, you must parenthesize it.\n\nThe comma operator is completely different from commas used as syntactic separators in other locations, which include:\n\n*   Elements in array initializers (`[1, 2, 3]`)\n*   Properties in [object initializers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) (`{ a: 1, b: 2 }`)\n*   Parameters in [function declarations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)/expressions (`function f(a, b) { … }`)\n*   Arguments in function calls (`f(1, 2)`)\n*   [Binding](https://developer.mozilla.org/en-US/docs/Glossary/Binding) lists in [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const), or [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var) declarations (`const a = 1, b = 2;`)\n*   Import lists in [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) declarations (`import { a, b } from \"c\";`)\n*   Export lists in [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) declarations (`export { a, b };`)\n\nIn fact, although some of these places accept almost all expressions, they don't accept comma-joined expressions because that would be ambiguous with the syntactic comma separators. In this case, you must parenthesize the comma-joined expression. For example, the following is a `const` declaration that declares two variables, where the comma is not the comma operator:\n\nIt is different from the following, where `b = 2` is an [assignment expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment), not a declaration. The value of `a` is `2`, the return value of the assignment, while the value of `1` is discarded:\n\nComma operators cannot appear as [trailing commas](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas).\n\n## [Examples](#examples)\n\n### [Using the comma operator in a for loop](#using_the_comma_operator_in_a_for_loop)\n\nIf `a` is a 2-dimensional array with 10 elements on each side, the following code uses the comma operator to increment `i` and decrement `j` at once, thus printing the values of the diagonal elements in the array:\n\n```\nconst a = Array.from({ length: 10 }, () =>\n  Array.from({ length: 10 }, Math.random),\n); // A 10×10 array of random numbers\n\nfor (let i = 0, j = 9; i <= 9; i++, j--) {\n  console.log(`a[${i}][${j}] = ${a[i][j]}`);\n}\n```\n\n### [Using the comma operator to join assignments](#using_the_comma_operator_to_join_assignments)\n\nBecause commas have the lowest [precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence) — even lower than assignment — commas can be used to join multiple assignment expressions. In the following example, `a` is set to the value of `b = 3` (which is 3). Then, the `c = 4` expression evaluates and its result becomes the return value of the entire comma expression.\n\n```\nlet a, b, c;\n\na = b = 3, c = 4; // Returns 4\nconsole.log(a); // 3 (left-most)\n\nlet x, y, z;\n\nx = (y = 5, z = 6); // Returns 6\nconsole.log(x); // 6 (right-most)\n```\n\n### [Processing and then returning](#processing_and_then_returning)\n\nAnother example that one could make with the comma operator is processing before returning. As stated, only the last element will be returned but all others are going to be evaluated as well. So, one could do:\n\n```\nfunction myFunc() {\n  let x = 0;\n\n  return (x += 1, x); // the same as return ++x;\n}\n```\n\nThis is especially useful for one-line [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions). The following example uses a single [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) to get both the sum of an array and the squares of its elements, which would otherwise require two iterations, one with [`reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) and one with `map()`:\n\n```\nlet sum = 0;\nconst squares = [1, 2, 3, 4, 5].map((x) => ((sum += x), x * x));\nconsole.log(squares); // [1, 4, 9, 16, 25]\nconsole.log(sum); // 15\n```\n\n### [Discarding reference binding](#discarding_reference_binding)\n\nThe comma operator always returns the last expression as a _value_ instead of a _reference_. This causes some contextual information such as the [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) binding to be lost. For example, a property access returns a reference to the function, which also remembers the object that it's accessed on, so that calling the property works properly. If the method is returned from a comma expression, then the function is called as if it's a new function value, and `this` is `undefined`.\n\n```\nconst obj = {\n  value: \"obj\",\n  method() {\n    console.log(this.value);\n  },\n};\n\nobj.method(); // \"obj\"\n(obj.method)(); // \"obj\" (the grouping operator still returns the reference)\n(0, obj.method)(); // undefined (the comma operator returns a new value)\n```\n\nYou can enter [indirect eval](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#direct_and_indirect_eval) with this technique, because direct eval requires the function call to happen on the reference to the `eval()` function.\n\n```\nglobalThis.isDirectEval = false;\n\n{\n  const isDirectEval = true;\n  console.log(eval(\"isDirectEval\")); // true\n  console.log((eval)(\"isDirectEval\")); // true (the grouping operator still returns a reference to `eval`)\n  console.log((0, eval)(\"isDirectEval\")); // false (the comma operator returns a new value)\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-comma-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-comma-operator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Comma operator (,) - JavaScript | MDN",
    "description": "The comma (,) operator evaluates each of its operands (from left to right) and returns the value of the last operand. This is commonly used to provide multiple updaters to a for loop's afterthought.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "markdown": "# Proxy - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Proxy`** object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.\n\n## [Description](#description)\n\nThe `Proxy` object allows you to create an object that can be used in place of the original object, but which may redefine fundamental `Object` operations like getting, setting, and defining properties. Proxy objects are commonly used to log property accesses, validate, format, or sanitize inputs, and so on.\n\nYou create a `Proxy` with two parameters:\n\n*   `target`: the original object which you want to proxy\n*   `handler`: an object that defines which operations will be intercepted and how to redefine intercepted operations.\n\nFor example, this code creates a proxy for the `target` object.\n\n```\nconst target = {\n  message1: \"hello\",\n  message2: \"everyone\",\n};\n\nconst handler1 = {};\n\nconst proxy1 = new Proxy(target, handler1);\n```\n\nBecause the handler is empty, this proxy behaves just like the original target:\n\n```\nconsole.log(proxy1.message1); // hello\nconsole.log(proxy1.message2); // everyone\n```\n\nTo customize the proxy, we define functions on the handler object:\n\n```\nconst target = {\n  message1: \"hello\",\n  message2: \"everyone\",\n};\n\nconst handler2 = {\n  get(target, prop, receiver) {\n    return \"world\";\n  },\n};\n\nconst proxy2 = new Proxy(target, handler2);\n```\n\nHere we've provided an implementation of the [`get()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get) handler, which intercepts attempts to access properties in the target.\n\nHandler functions are sometimes called _traps_, presumably because they trap calls to the target object. The very simple trap in `handler2` above redefines all property accessors:\n\n```\nconsole.log(proxy2.message1); // world\nconsole.log(proxy2.message2); // world\n```\n\nProxies are often used with the [`Reflect`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect) object, which provides some methods with the same names as the `Proxy` traps. The `Reflect` methods provide the reflective semantics for invoking the corresponding [object internal methods](#object_internal_methods). For example, we can call `Reflect.get` if we don't wish to redefine the object's behavior:\n\n```\nconst target = {\n  message1: \"hello\",\n  message2: \"everyone\",\n};\n\nconst handler3 = {\n  get(target, prop, receiver) {\n    if (prop === \"message2\") {\n      return \"world\";\n    }\n    return Reflect.get(...arguments);\n  },\n};\n\nconst proxy3 = new Proxy(target, handler3);\n\nconsole.log(proxy3.message1); // hello\nconsole.log(proxy3.message2); // world\n```\n\nThe `Reflect` method still interacts with the object through object internal methods — it doesn't \"de-proxify\" the proxy if it's invoked on a proxy. If you use `Reflect` methods within a proxy trap, and the `Reflect` method call gets intercepted by the trap again, there may be infinite recursion.\n\n### [Terminology](#terminology)\n\nThe following terms are used when talking about the functionality of proxies.\n\n[handler](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy#handler_functions)\n\nThe object passed as the second argument to the `Proxy` constructor. It contains the traps which define the behavior of the proxy.\n\n[trap](#trap)\n\nThe function that define the behavior for the corresponding [object internal method](#object_internal_methods). (This is analogous to the concept of _traps_ in operating systems.)\n\n[target](#target)\n\nObject which the proxy virtualizes. It is often used as storage backend for the proxy. Invariants (semantics that remain unchanged) regarding object non-extensibility or non-configurable properties are verified against the target.\n\n[invariants](#invariants)\n\nSemantics that remain unchanged when implementing custom operations. If your trap implementation violates the invariants of a handler, a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) will be thrown.\n\n### [Object internal methods](#object_internal_methods)\n\n[Objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#objects) are collections of properties. However, the language doesn't provide any machinery to _directly_ manipulate data stored in the object — rather, the object defines some internal methods specifying how it can be interacted with. For example, when you read `obj.x`, you may expect the following to happen:\n\n*   The `x` property is searched up the [prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) until it is found.\n*   If `x` is a data property, the property descriptor's `value` attribute is returned.\n*   If `x` is an accessor property, the getter is invoked, and the return value of the getter is returned.\n\nThere isn't anything special about this process in the language — it's just because ordinary objects, by default, have a `[[Get]]` internal method that is defined with this behavior. The `obj.x` property access syntax simply invokes the `[[Get]]` method on the object, and the object uses its own internal method implementation to determine what to return.\n\nAs another example, [arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) differ from normal objects, because they have a magic [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) property that, when modified, automatically allocates empty slots or removes elements from the array. Similarly, adding array elements automatically changes the `length` property. This is because arrays have a `[[DefineOwnProperty]]` internal method that knows to update `length` when an integer index is written to, or update the array contents when `length` is written to. Such objects whose internal methods have different implementations from ordinary objects are called _exotic objects_. `Proxy` enable developers to define their own exotic objects with full capacity.\n\nAll objects have the following internal methods:\n\n| Internal method | Corresponding trap |\n| --- | --- |\n| `[[GetPrototypeOf]]` | [`getPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getPrototypeOf) |\n| `[[SetPrototypeOf]]` | [`setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/setPrototypeOf) |\n| `[[IsExtensible]]` | [`isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/isExtensible) |\n| `[[PreventExtensions]]` | [`preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/preventExtensions) |\n| `[[GetOwnProperty]]` | [`getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getOwnPropertyDescriptor) |\n| `[[DefineOwnProperty]]` | [`defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty) |\n| `[[HasProperty]]` | [`has()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/has) |\n| `[[Get]]` | [`get()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get) |\n| `[[Set]]` | [`set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set) |\n| `[[Delete]]` | [`deleteProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty) |\n| `[[OwnPropertyKeys]]` | [`ownKeys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys) |\n\nFunction objects also have the following internal methods:\n\n| Internal method | Corresponding trap |\n| --- | --- |\n| `[[Call]]` | [`apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/apply) |\n| `[[Construct]]` | [`construct()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/construct) |\n\nIt's important to realize that all interactions with an object eventually boils down to the invocation of one of these internal methods, and that they are all customizable through proxies. This means almost no behavior (except certain critical invariants) is guaranteed in the language — everything is defined by the object itself. When you run [`delete obj.x`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete), there's no guarantee that [`\"x\" in obj`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) returns `false` afterwards — it depends on the object's implementations of `[[Delete]]` and `[[HasProperty]]`. A `delete obj.x` may log things to the console, modify some global state, or even define a new property instead of deleting the existing one, although these semantics should be avoided in your own code.\n\nAll internal methods are called by the language itself, and are not directly accessible in JavaScript code. The [`Reflect`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect) namespace offers methods that do little more than call the internal methods, besides some input normalization/validation. In each trap's page, we list several typical situations when the trap is invoked, but these internal methods are called in _a lot_ of places. For example, array methods read and write to array through these internal methods, so methods like [`push()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) would also invoke `get()` and `set()` traps.\n\nMost of the internal methods are straightforward in what they do. The only two that may be confusable are `[[Set]]` and `[[DefineOwnProperty]]`. For normal objects, the former invokes setters; the latter doesn't. (And `[[Set]]` calls `[[DefineOwnProperty]]` internally if there's no existing property or the property is a data property.) While you may know that the `obj.x = 1` syntax uses `[[Set]]`, and [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) uses `[[DefineOwnProperty]]`, it's not immediately apparent what semantics other built-in methods and syntaxes use. For example, [class fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields) use the `[[DefineOwnProperty]]` semantic, which is why setters defined in the superclass are not invoked when a field is declared on the derived class.\n\n## [Constructor](#constructor)\n\n[`Proxy()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy)\n\nCreates a new `Proxy` object.\n\n**Note:** There's no `Proxy.prototype` property, so `Proxy` instances do not have any special properties or methods.\n\n## [Static methods](#static_methods)\n\n[`Proxy.revocable()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable)\n\nCreates a revocable `Proxy` object.\n\n## [Examples](#examples)\n\n### [Basic example](#basic_example)\n\nIn this simple example, the number `37` gets returned as the default value when the property name is not in the object. It is using the [`get()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get) handler.\n\n```\nconst handler = {\n  get(obj, prop) {\n    return prop in obj ? obj[prop] : 37;\n  },\n};\n\nconst p = new Proxy({}, handler);\np.a = 1;\np.b = undefined;\n\nconsole.log(p.a, p.b); // 1, undefined\n\nconsole.log(\"c\" in p, p.c); // false, 37\n```\n\n### [No-op forwarding proxy](#no-op_forwarding_proxy)\n\nIn this example, we are using a native JavaScript object to which our proxy will forward all operations that are applied to it.\n\n```\nconst target = {};\nconst p = new Proxy(target, {});\n\np.a = 37; // Operation forwarded to the target\n\nconsole.log(target.a); // 37 (The operation has been properly forwarded!)\n```\n\nNote that while this \"no-op\" works for plain JavaScript objects, it does not work for native objects, such as DOM elements, [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) objects, or anything that has internal slots. See [no private property forwarding](#no_private_property_forwarding) for more information.\n\n### [No private property forwarding](#no_private_property_forwarding)\n\nA proxy is still another object with a different identity — it's a _proxy_ that operates between the wrapped object and the outside. As such, the proxy does not have direct access to the original object's [private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties).\n\n```\nclass Secret {\n  #secret;\n  constructor(secret) {\n    this.#secret = secret;\n  }\n  get secret() {\n    return this.#secret.replace(/\\d+/, \"[REDACTED]\");\n  }\n}\n\nconst aSecret = new Secret(\"123456\");\nconsole.log(aSecret.secret); // [REDACTED]\n// Looks like a no-op forwarding...\nconst proxy = new Proxy(aSecret, {});\nconsole.log(proxy.secret); // TypeError: Cannot read private member #secret from an object whose class did not declare it\n```\n\nThis is because when the proxy's `get` trap is invoked, the `this` value is the `proxy` instead of the original `secret`, so `#secret` is not accessible. To fix this, use the original `secret` as `this`:\n\n```\nconst proxy = new Proxy(aSecret, {\n  get(target, prop, receiver) {\n    // By default, it looks like Reflect.get(target, prop, receiver)\n    // which has a different value of `this`\n    return target[prop];\n  },\n});\nconsole.log(proxy.secret);\n```\n\nFor methods, this means you have to redirect the method's `this` value to the original object as well:\n\n```\nclass Secret {\n  #x = 1;\n  x() {\n    return this.#x;\n  }\n}\n\nconst aSecret = new Secret();\nconst proxy = new Proxy(aSecret, {\n  get(target, prop, receiver) {\n    const value = target[prop];\n    if (value instanceof Function) {\n      return function (...args) {\n        return value.apply(this === receiver ? target : this, args);\n      };\n    }\n    return value;\n  },\n});\nconsole.log(proxy.x());\n```\n\nSome native JavaScript objects have properties called _[internal slots](https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-object-internal-methods-and-internal-slots)_, which are not accessible from JavaScript code. For example, [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) objects have an internal slot called `[[MapData]]`, which stores the key-value pairs of the map. As such, you cannot trivially create a forwarding proxy for a map:\n\n```\nconst proxy = new Proxy(new Map(), {});\nconsole.log(proxy.size); // TypeError: get size method called on incompatible Proxy\n```\n\nYou have to use the \"`this`\\-recovering\" proxy illustrated above to work around this.\n\n### [Validation](#validation)\n\nWith a `Proxy`, you can easily validate the passed value for an object. This example uses the [`set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set) handler.\n\n```\nconst validator = {\n  set(obj, prop, value) {\n    if (prop === \"age\") {\n      if (!Number.isInteger(value)) {\n        throw new TypeError(\"The age is not an integer\");\n      }\n      if (value > 200) {\n        throw new RangeError(\"The age seems invalid\");\n      }\n    }\n\n    // The default behavior to store the value\n    obj[prop] = value;\n\n    // Indicate success\n    return true;\n  },\n};\n\nconst person = new Proxy({}, validator);\n\nperson.age = 100;\nconsole.log(person.age); // 100\nperson.age = \"young\"; // Throws an exception\nperson.age = 300; // Throws an exception\n```\n\n### [Manipulating DOM nodes](#manipulating_dom_nodes)\n\nIn this example we use `Proxy` to toggle an attribute of two different elements: so when we set the attribute on one element, the attribute is unset on the other one.\n\nWe create a `view` object which is a proxy for an object with a `selected` property. The proxy handler defines the [`set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set) handler.\n\nWhen we assign an HTML element to `view.selected`, the element's `'aria-selected'` attribute is set to `true`. If we then assign a different element to `view.selected`, this element's `'aria-selected'` attribute is set to `true` and the previous element's `'aria-selected'` attribute is automatically set to `false`.\n\n```\nconst view = new Proxy(\n  {\n    selected: null,\n  },\n  {\n    set(obj, prop, newval) {\n      const oldval = obj[prop];\n\n      if (prop === \"selected\") {\n        if (oldval) {\n          oldval.setAttribute(\"aria-selected\", \"false\");\n        }\n        if (newval) {\n          newval.setAttribute(\"aria-selected\", \"true\");\n        }\n      }\n\n      // The default behavior to store the value\n      obj[prop] = newval;\n\n      // Indicate success\n      return true;\n    },\n  },\n);\n\nconst item1 = document.getElementById(\"item-1\");\nconst item2 = document.getElementById(\"item-2\");\n\n// select item1:\nview.selected = item1;\n\nconsole.log(`item1: ${item1.getAttribute(\"aria-selected\")}`);\n// item1: true\n\n// selecting item2 de-selects item1:\nview.selected = item2;\n\nconsole.log(`item1: ${item1.getAttribute(\"aria-selected\")}`);\n// item1: false\n\nconsole.log(`item2: ${item2.getAttribute(\"aria-selected\")}`);\n// item2: true\n```\n\n### [Value correction and an extra property](#value_correction_and_an_extra_property)\n\nThe `products` proxy object evaluates the passed value and converts it to an array if needed. The object also supports an extra property called `latestBrowser` both as a getter and a setter.\n\n```\nconst products = new Proxy(\n  {\n    browsers: [\"Firefox\", \"Chrome\"],\n  },\n  {\n    get(obj, prop) {\n      // An extra property\n      if (prop === \"latestBrowser\") {\n        return obj.browsers[obj.browsers.length - 1];\n      }\n\n      // The default behavior to return the value\n      return obj[prop];\n    },\n    set(obj, prop, value) {\n      // An extra property\n      if (prop === \"latestBrowser\") {\n        obj.browsers.push(value);\n        return true;\n      }\n\n      // Convert the value if it is not an array\n      if (typeof value === \"string\") {\n        value = [value];\n      }\n\n      // The default behavior to store the value\n      obj[prop] = value;\n\n      // Indicate success\n      return true;\n    },\n  },\n);\n\nconsole.log(products.browsers);\n//  ['Firefox', 'Chrome']\n\nproducts.browsers = \"Safari\";\n//  pass a string (by mistake)\n\nconsole.log(products.browsers);\n//  ['Safari'] <- no problem, the value is an array\n\nproducts.latestBrowser = \"Edge\";\n\nconsole.log(products.browsers);\n//  ['Safari', 'Edge']\n\nconsole.log(products.latestBrowser);\n//  'Edge'\n```\n\n### [A complete traps list example](#a_complete_traps_list_example)\n\nNow in order to create a complete sample `traps` list, for didactic purposes, we will try to proxify a _non-native_ object that is particularly suited to this type of operation: the `docCookies` global object created by [a simple cookie framework](https://reference.codeproject.com/dom/document/cookie/simple_document.cookie_framework).\n\n```\n/*\n  const docCookies = ... get the \"docCookies\" object here:\n  https://reference.codeproject.com/dom/document/cookie/simple_document.cookie_framework\n*/\n\nconst docCookies = new Proxy(docCookies, {\n  get(target, key) {\n    return target[key] ?? target.getItem(key) ?? undefined;\n  },\n  set(target, key, value) {\n    if (key in target) {\n      return false;\n    }\n    return target.setItem(key, value);\n  },\n  deleteProperty(target, key) {\n    if (!(key in target)) {\n      return false;\n    }\n    return target.removeItem(key);\n  },\n  ownKeys(target) {\n    return target.keys();\n  },\n  has(target, key) {\n    return key in target || target.hasItem(key);\n  },\n  defineProperty(target, key, descriptor) {\n    if (descriptor && \"value\" in descriptor) {\n      target.setItem(key, descriptor.value);\n    }\n    return target;\n  },\n  getOwnPropertyDescriptor(target, key) {\n    const value = target.getItem(key);\n    return value\n      ? {\n          value,\n          writable: true,\n          enumerable: true,\n          configurable: false,\n        }\n      : undefined;\n  },\n});\n\n/* Cookies test */\n\nconsole.log((docCookies.myCookie1 = \"First value\"));\nconsole.log(docCookies.getItem(\"myCookie1\"));\n\ndocCookies.setItem(\"myCookie1\", \"Changed value\");\nconsole.log(docCookies.myCookie1);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-proxy-objects](https://tc39.es/ecma262/multipage/reflection.html#sec-proxy-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)\n\n*   [Proxies are awesome](https://youtu.be/sClk6aB_CPk) presentation by Brendan Eich at JSConf (2014)",
    "title": "Proxy - JavaScript | MDN",
    "description": "The Proxy object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "markdown": "# Boolean - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Boolean`** object represents a truth value: `true` or `false`.\n\n## [Description](#description)\n\n### [Boolean primitives and Boolean objects](#boolean_primitives_and_boolean_objects)\n\nFor converting non-boolean values to boolean, use `Boolean` as a function or use the [double NOT](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT#double_not_!!) operator. Do not use the `Boolean()` constructor with `new`.\n\n```\nconst good = Boolean(expression);\nconst good2 = !!expression;\n```\n\n```\nconst bad = new Boolean(expression); // don't use this!\n```\n\nThis is because _all_ objects, including a `Boolean` object whose wrapped value is `false`, are [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) and evaluate to `true` in places such as conditional statements. (See also the [boolean coercion](#boolean_coercion) section below.)\n\n```\nif (new Boolean(true)) {\n  console.log(\"This log is printed.\");\n}\n\nif (new Boolean(false)) {\n  console.log(\"This log is ALSO printed.\");\n}\n\nconst myFalse = new Boolean(false); // myFalse is a Boolean object (not the primitive value false)\nconst g = Boolean(myFalse); // g is true\nconst myString = new String(\"Hello\"); // myString is a String object\nconst s = Boolean(myString); // s is true\n```\n\n**Warning:** You should rarely find yourself using `Boolean` as a constructor.\n\n### [Boolean coercion](#boolean_coercion)\n\nMany built-in operations that expect booleans first coerce their arguments to booleans. [The operation](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toboolean) can be summarized as follows:\n\n*   Booleans are returned as-is.\n*   [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) turns into `false`.\n*   [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) turns into `false`.\n*   `0`, `-0`, and `NaN` turn into `false`; other numbers turn into `true`.\n*   `0n` turns into `false`; other [BigInts](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) turn into `true`.\n*   The empty string `\"\"` turns into `false`; other strings turn into `true`.\n*   [Symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) turn into `true`.\n*   All objects become `true`.\n\n**Note:** A legacy behavior makes [`document.all`](https://developer.mozilla.org/en-US/docs/Web/API/Document/all) return `false` when used as a boolean, despite it being an object. This property is legacy and non-standard and should not be used.\n\n**Note:** Unlike other type conversions like [string coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) or [number coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), boolean coercion does not attempt to convert objects to primitives.\n\nIn other words, there are only a handful of values that get coerced to `false` — these are called [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) values. All other values are called [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) values. A value's truthiness is important when used with logical operators, conditional statements, or any boolean context.\n\nThere are two ways to achieve the same effect in JavaScript.\n\n*   [Double NOT](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT#double_not_!!): `!!x` negates `x` twice, which converts `x` to a boolean using the same algorithm as above.\n*   The [`Boolean()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean) function: `Boolean(x)` uses the same algorithm as above to convert `x`.\n\nNote that truthiness is not the same as being [loosely equal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality) to `true` or `false`.\n\n```\nif ([]) {\n  console.log(\"[] is truthy\");\n}\nif ([] == false) {\n  console.log(\"[] == false\");\n}\n// [] is truthy\n// [] == false\n```\n\n`[]` is truthy, but it's also loosely equal to `false`. It's truthy, because all objects are truthy. However, when comparing with `false`, which is a primitive, `[]` is also converted to a primitive, which is `\"\"` via [`Array.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString). Comparing strings and booleans results in both being [converted to numbers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), and they both become `0`, so `[] == false` is `true`. In general, falsiness and `== false` differ in the following cases:\n\n*   `NaN`, `undefined`, and `null` are falsy but not loosely equal to `false`.\n*   `\"0\"` (and other string literals that are not `\"\"` but [get coerced to 0](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion)) is truthy but loosely equal to `false`.\n*   Objects are always truthy, but their primitive representation may be loosely equal to `false`.\n\nTruthy values are even more unlikely to be loosely equal to `true`. All values are either truthy or falsy, but most values are loosely equal to neither `true` nor `false`.\n\n## [Constructor](#constructor)\n\n[`Boolean()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean)\n\nCreates `Boolean` objects. When called as a function, it returns primitive values of type Boolean.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Boolean.prototype` and shared by all `Boolean` instances.\n\n[`Boolean.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Boolean` instances, the initial value is the [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean) constructor.\n\n## [Instance methods](#instance_methods)\n\n[`Boolean.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString)\n\nReturns a string of either `true` or `false` depending upon the value of the object. Overrides the [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) method.\n\n[`Boolean.prototype.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/valueOf)\n\nReturns the primitive value of the [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) object. Overrides the [`Object.prototype.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf) method.\n\n## [Examples](#examples)\n\n### [Creating Boolean objects with an initial value of false](#creating_boolean_objects_with_an_initial_value_of_false)\n\n```\nconst bNoParam = new Boolean();\nconst bZero = new Boolean(0);\nconst bNull = new Boolean(null);\nconst bEmptyString = new Boolean(\"\");\nconst bfalse = new Boolean(false);\n```\n\n### [Creating Boolean objects with an initial value of true](#creating_boolean_objects_with_an_initial_value_of_true)\n\n```\nconst btrue = new Boolean(true);\nconst btrueString = new Boolean(\"true\");\nconst bfalseString = new Boolean(\"false\");\nconst bSuLin = new Boolean(\"Su Lin\");\nconst bArrayProto = new Boolean([]);\nconst bObjProto = new Boolean({});\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-boolean-objects](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-boolean-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Boolean - JavaScript | MDN",
    "description": "The Boolean object represents a truth value: true or false.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator",
    "markdown": "# Conditional (ternary) operator - JavaScript\n\nThe **conditional (ternary) operator** is the only JavaScript operator that takes three operands: a condition followed by a question mark (`?`), then an expression to execute if the condition is [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) followed by a colon (`:`), and finally the expression to execute if the condition is [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy). This operator is frequently used as an alternative to an [`if...else`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) statement.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ncondition ? exprIfTrue : exprIfFalse\n```\n\n### [Parameters](#parameters)\n\n[`condition`](#condition)\n\nAn expression whose value is used as a condition.\n\n[`exprIfTrue`](#expriftrue)\n\nAn expression which is executed if the `condition` evaluates to a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value (one which equals or can be converted to `true`).\n\n[`exprIfFalse`](#expriffalse)\n\nAn expression which is executed if the `condition` is [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) (that is, has a value which can be converted to `false`).\n\n## [Description](#description)\n\nBesides `false`, possible falsy expressions are: `null`, `NaN`, `0`, the empty string (`\"\"`), and `undefined`. If `condition` is any of these, the result of the conditional expression will be the result of executing the expression `exprIfFalse`.\n\n## [Examples](#examples)\n\n### [A simple example](#a_simple_example)\n\n```\nconst age = 26;\nconst beverage = age >= 21 ? \"Beer\" : \"Juice\";\nconsole.log(beverage); // \"Beer\"\n```\n\n### [Handling null values](#handling_null_values)\n\nOne common usage is to handle a value that may be `null`:\n\n```\nconst greeting = (person) => {\n  const name = person ? person.name : \"stranger\";\n  return `Howdy, ${name}`;\n};\n\nconsole.log(greeting({ name: \"Alice\" })); // \"Howdy, Alice\"\nconsole.log(greeting(null)); // \"Howdy, stranger\"\n```\n\n### [Conditional chains](#conditional_chains)\n\nThe ternary operator is right-associative, which means it can be \"chained\" in the following way, similar to an `if … else if … else if … else` chain:\n\n```\nfunction example() {\n  return condition1 ? value1\n    : condition2 ? value2\n    : condition3 ? value3\n    : value4;\n}\n```\n\nThis is equivalent to the following [`if...else`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) chain.\n\n```\nfunction example() {\n  if (condition1) {\n    return value1;\n  } else if (condition2) {\n    return value2;\n  } else if (condition3) {\n    return value3;\n  } else {\n    return value4;\n  }\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-conditional-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-conditional-operator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Conditional (ternary) operator - JavaScript | MDN",
    "description": "The conditional (ternary) operator is the only JavaScript operator that takes three operands:\n  a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy.\n  This operator is frequently used as an alternative to an if...else statement.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises",
    "markdown": "# Using promises - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_classes)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays)\n\nA [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) is an object representing the eventual completion or failure of an asynchronous operation. Since most people are consumers of already-created promises, this guide will explain consumption of returned promises before explaining how to create them.\n\nEssentially, a promise is a returned object to which you attach callbacks, instead of passing callbacks into a function. Imagine a function, `createAudioFileAsync()`, which asynchronously generates a sound file given a configuration record and two callback functions: one called if the audio file is successfully created, and the other called if an error occurs.\n\nHere's some code that uses `createAudioFileAsync()`:\n\n```\nfunction successCallback(result) {\n  console.log(`Audio file ready at URL: ${result}`);\n}\n\nfunction failureCallback(error) {\n  console.error(`Error generating audio file: ${error}`);\n}\n\ncreateAudioFileAsync(audioSettings, successCallback, failureCallback);\n```\n\nIf `createAudioFileAsync()` were rewritten to return a promise, you would attach your callbacks to it instead:\n\n```\ncreateAudioFileAsync(audioSettings).then(successCallback, failureCallback);\n```\n\nThis convention has several advantages. We will explore each one.\n\n## [Chaining](#chaining)\n\nA common need is to execute two or more asynchronous operations back to back, where each subsequent operation starts when the previous operation succeeds, with the result from the previous step. In the old days, doing several asynchronous operations in a row would lead to the classic [callback hell](http://callbackhell.com/):\n\n```\ndoSomething(function (result) {\n  doSomethingElse(result, function (newResult) {\n    doThirdThing(newResult, function (finalResult) {\n      console.log(`Got the final result: ${finalResult}`);\n    }, failureCallback);\n  }, failureCallback);\n}, failureCallback);\n```\n\nWith promises, we accomplish this by creating a promise chain. The API design of promises makes this great, because callbacks are attached to the returned promise object, instead of being passed into a function.\n\nHere's the magic: the `then()` function returns a **new promise**, different from the original:\n\n```\nconst promise = doSomething();\nconst promise2 = promise.then(successCallback, failureCallback);\n```\n\nThis second promise (`promise2`) represents the completion not just of `doSomething()`, but also of the `successCallback` or `failureCallback` you passed in — which can be other asynchronous functions returning a promise. When that's the case, any callbacks added to `promise2` get queued behind the promise returned by either `successCallback` or `failureCallback`.\n\n**Note:** If you want a working example to play with, you can use the following template to create any function returning a promise:\n\n```\nfunction doSomething() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      // Other things to do before completion of the promise\n      console.log(\"Did something\");\n      // The fulfillment value of the promise\n      resolve(\"https://example.com/\");\n    }, 200);\n  });\n}\n```\n\nThe implementation is discussed in the [Creating a Promise around an old callback API](#creating_a_promise_around_an_old_callback_api) section below.\n\nWith this pattern, you can create longer chains of processing, where each promise represents the completion of one asynchronous step in the chain. In addition, the arguments to `then` are optional, and `catch(failureCallback)` is short for `then(null, failureCallback)` — so if your error handling code is the same for all steps, you can attach it to the end of the chain:\n\n```\ndoSomething()\n  .then(function (result) {\n    return doSomethingElse(result);\n  })\n  .then(function (newResult) {\n    return doThirdThing(newResult);\n  })\n  .then(function (finalResult) {\n    console.log(`Got the final result: ${finalResult}`);\n  })\n  .catch(failureCallback);\n```\n\nYou might see this expressed with [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) instead:\n\n```\ndoSomething()\n  .then((result) => doSomethingElse(result))\n  .then((newResult) => doThirdThing(newResult))\n  .then((finalResult) => {\n    console.log(`Got the final result: ${finalResult}`);\n  })\n  .catch(failureCallback);\n```\n\n**Note:** Arrow function expressions can have an [implicit return](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#function_body); so, `() => x` is short for `() => { return x; }`.\n\n`doSomethingElse` and `doThirdThing` can return any value — if they return promises, that promise is first waited until it settles, and the next callback receives the fulfillment value, not the promise itself. It is important to always return promises from `then` callbacks, even if the promise always resolves to `undefined`. If the previous handler started a promise but did not return it, there's no way to track its settlement anymore, and the promise is said to be \"floating\".\n\n```\ndoSomething()\n  .then((url) => {\n    // Missing `return` keyword in front of fetch(url).\n    fetch(url);\n  })\n  .then((result) => {\n    // result is undefined, because nothing is returned from the previous\n    // handler. There's no way to know the return value of the fetch()\n    // call anymore, or whether it succeeded at all.\n  });\n```\n\nBy returning the result of the `fetch` call (which is a promise), we can both track its completion and receive its value when it completes.\n\n```\ndoSomething()\n  .then((url) => {\n    // `return` keyword added\n    return fetch(url);\n  })\n  .then((result) => {\n    // result is a Response object\n  });\n```\n\nFloating promises could be worse if you have race conditions — if the promise from the last handler is not returned, the next `then` handler will be called early, and any value it reads may be incomplete.\n\n```\nconst listOfIngredients = [];\n\ndoSomething()\n  .then((url) => {\n    // Missing `return` keyword in front of fetch(url).\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        listOfIngredients.push(data);\n      });\n  })\n  .then(() => {\n    console.log(listOfIngredients);\n    // listOfIngredients will always be [], because the fetch request hasn't completed yet.\n  });\n```\n\nTherefore, as a rule of thumb, whenever your operation encounters a promise, return it and defer its handling to the next `then` handler.\n\n```\nconst listOfIngredients = [];\n\ndoSomething()\n  .then((url) => {\n    // `return` keyword now included in front of fetch call.\n    return fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        listOfIngredients.push(data);\n      });\n  })\n  .then(() => {\n    console.log(listOfIngredients);\n    // listOfIngredients will now contain data from fetch call.\n  });\n```\n\nEven better, you can flatten the nested chain into a single chain, which is simpler and makes error handling easier. The details are discussed in the [Nesting](#nesting) section below.\n\n```\ndoSomething()\n  .then((url) => fetch(url))\n  .then((res) => res.json())\n  .then((data) => {\n    listOfIngredients.push(data);\n  })\n  .then(() => {\n    console.log(listOfIngredients);\n  });\n```\n\nUsing [`async`/`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) can help you write code that's more intuitive and resembles synchronous code. Below is the same example using `async`/`await`:\n\n```\nasync function logIngredients() {\n  const url = await doSomething();\n  const res = await fetch(url);\n  const data = await res.json();\n  listOfIngredients.push(data);\n  console.log(listOfIngredients);\n}\n```\n\nNote how the code looks exactly like synchronous code, except for the `await` keywords in front of promises. One of the only tradeoffs is that it may be easy to forget the [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) keyword, which can only be fixed when there's a type mismatch (e.g. trying to use a promise as a value).\n\n`async`/`await` builds on promises — for example, `doSomething()` is the same function as before, so there's minimal refactoring needed to change from promises to `async`/`await`. You can read more about the `async`/`await` syntax in the [async functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) and [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) references.\n\n**Note:** async/await has the same concurrency semantics as normal promise chains. `await` within one async function does not stop the entire program, only the parts that depend on its value, so other async jobs can still run while the `await` is pending.\n\n## [Error handling](#error_handling)\n\nYou might recall seeing `failureCallback` three times in the pyramid of doom earlier, compared to only once at the end of the promise chain:\n\n```\ndoSomething()\n  .then((result) => doSomethingElse(result))\n  .then((newResult) => doThirdThing(newResult))\n  .then((finalResult) => console.log(`Got the final result: ${finalResult}`))\n  .catch(failureCallback);\n```\n\nIf there's an exception, the browser will look down the chain for `.catch()` handlers or `onRejected`. This is very much modeled after how synchronous code works:\n\n```\ntry {\n  const result = syncDoSomething();\n  const newResult = syncDoSomethingElse(result);\n  const finalResult = syncDoThirdThing(newResult);\n  console.log(`Got the final result: ${finalResult}`);\n} catch (error) {\n  failureCallback(error);\n}\n```\n\nThis symmetry with asynchronous code culminates in the `async`/`await` syntax:\n\n```\nasync function foo() {\n  try {\n    const result = await doSomething();\n    const newResult = await doSomethingElse(result);\n    const finalResult = await doThirdThing(newResult);\n    console.log(`Got the final result: ${finalResult}`);\n  } catch (error) {\n    failureCallback(error);\n  }\n}\n```\n\nPromises solve a fundamental flaw with the callback pyramid of doom, by catching all errors, even thrown exceptions and programming errors. This is essential for functional composition of asynchronous operations. All errors are now handled by the [`catch()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch) method at the end of the chain, and you should almost never need to use `try`/`catch` without using `async`/`await`.\n\n### [Nesting](#nesting)\n\nIn the examples above involving `listOfIngredients`, the first one has one promise chain nested in the return value of another `then()` handler, while the second one uses an entirely flat chain. Simple promise chains are best kept flat without nesting, as nesting can be a result of careless composition.\n\nNesting is a control structure to limit the scope of `catch` statements. Specifically, a nested `catch` only catches failures in its scope and below, not errors higher up in the chain outside the nested scope. When used correctly, this gives greater precision in error recovery:\n\n```\ndoSomethingCritical()\n  .then((result) =>\n    doSomethingOptional(result)\n      .then((optionalResult) => doSomethingExtraNice(optionalResult))\n      .catch((e) => {}),\n  ) // Ignore if optional stuff fails; proceed.\n  .then(() => moreCriticalStuff())\n  .catch((e) => console.error(`Critical failure: ${e.message}`));\n```\n\nNote that the optional steps here are nested — with the nesting caused not by the indentation, but by the placement of the outer `(` and `)` parentheses around the steps.\n\nThe inner error-silencing `catch` handler only catches failures from `doSomethingOptional()` and `doSomethingExtraNice()`, after which the code resumes with `moreCriticalStuff()`. Importantly, if `doSomethingCritical()` fails, its error is caught by the final (outer) `catch` only, and does not get swallowed by the inner `catch` handler.\n\nIn `async`/`await`, this code looks like:\n\n```\nasync function main() {\n  try {\n    const result = await doSomethingCritical();\n    try {\n      const optionalResult = await doSomethingOptional(result);\n      await doSomethingExtraNice(optionalResult);\n    } catch (e) {\n      // Ignore failures in optional steps and proceed.\n    }\n    await moreCriticalStuff();\n  } catch (e) {\n    console.error(`Critical failure: ${e.message}`);\n  }\n}\n```\n\n**Note:** If you don't have sophisticated error handling, you very likely don't need nested `then` handlers. Instead, use a flat chain and put the error handling logic at the end.\n\n### [Chaining after a catch](#chaining_after_a_catch)\n\nIt's possible to chain _after_ a failure, i.e. a `catch`, which is useful to accomplish new actions even after an action failed in the chain. Read the following example:\n\n```\ndoSomething()\n  .then(() => {\n    throw new Error(\"Something failed\");\n\n    console.log(\"Do this\");\n  })\n  .catch(() => {\n    console.error(\"Do that\");\n  })\n  .then(() => {\n    console.log(\"Do this, no matter what happened before\");\n  });\n```\n\nThis will output the following text:\n\nInitial\nDo that\nDo this, no matter what happened before\n\n**Note:** The text \"Do this\" is not displayed because the \"Something failed\" error caused a rejection.\n\nIn `async`/`await`, this code looks like:\n\n```\nasync function main() {\n  try {\n    await doSomething();\n    throw new Error(\"Something failed\");\n    console.log(\"Do this\");\n  } catch (e) {\n    console.error(\"Do that\");\n  }\n  console.log(\"Do this, no matter what happened before\");\n}\n```\n\n### [Promise rejection events](#promise_rejection_events)\n\nIf a promise rejection event is not handled by any handler, it bubbles to the top of the call stack, and the host needs to surface it. On the web, whenever a promise is rejected, one of two events is sent to the global scope (generally, this is either the [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window) or, if being used in a web worker, it's the [`Worker`](https://developer.mozilla.org/en-US/docs/Web/API/Worker) or other worker-based interface). The two events are:\n\n[`unhandledrejection`](https://developer.mozilla.org/en-US/docs/Web/API/Window/unhandledrejection_event)\n\nSent when a promise is rejected but there is no rejection handler available.\n\n[`rejectionhandled`](https://developer.mozilla.org/en-US/docs/Web/API/Window/rejectionhandled_event)\n\nSent when a handler is attached to a rejected promise that has already caused an `unhandledrejection` event.\n\nIn both cases, the event (of type [`PromiseRejectionEvent`](https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent)) has as members a [`promise`](https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent/promise) property indicating the promise that was rejected, and a [`reason`](https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent/reason) property that provides the reason given for the promise to be rejected.\n\nThese make it possible to offer fallback error handling for promises, as well as to help debug issues with your promise management. These handlers are global per context, so all errors will go to the same event handlers, regardless of source.\n\nIn [Node.js](https://developer.mozilla.org/en-US/docs/Glossary/Node.js), handling promise rejection is slightly different. You capture unhandled rejections by adding a handler for the Node.js `unhandledRejection` event (notice the difference in capitalization of the name), like this:\n\n```\nprocess.on(\"unhandledRejection\", (reason, promise) => {\n  // Add code here to examine the \"promise\" and \"reason\" values\n});\n```\n\nFor Node.js, to prevent the error from being logged to the console (the default action that would otherwise occur), adding that `process.on()` listener is all that's necessary; there's no need for an equivalent of the browser runtime's [`preventDefault()`](https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault) method.\n\nHowever, if you add that `process.on` listener but don't also have code within it to handle rejected promises, they will just be dropped on the floor and silently ignored. So ideally, you should add code within that listener to examine each rejected promise and make sure it was not caused by an actual code bug.\n\n## [Composition](#composition)\n\nThere are four [composition tools](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#promise_concurrency) for running asynchronous operations concurrently: [`Promise.all()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all), [`Promise.allSettled()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled), [`Promise.any()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any), and [`Promise.race()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race).\n\nWe can start operations at the same time and wait for them all to finish like this:\n\n```\nPromise.all([func1(), func2(), func3()]).then(([result1, result2, result3]) => {\n  // use result1, result2 and result3\n});\n```\n\nIf one of the promises in the array rejects, `Promise.all()` immediately rejects the returned promise and aborts the other operations. This may cause unexpected state or behavior. [`Promise.allSettled()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled) is another composition tool that ensures all operations are complete before resolving.\n\nThese methods all run promises concurrently — a sequence of promises are started simultaneously and do not wait for each other. Sequential composition is possible using some clever JavaScript:\n\n```\n[func1, func2, func3]\n  .reduce((p, f) => p.then(f), Promise.resolve())\n  .then((result3) => {\n    /* use result3 */\n  });\n```\n\nIn this example, we [reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) an array of asynchronous functions down to a promise chain. The code above is equivalent to:\n\n```\nPromise.resolve()\n  .then(func1)\n  .then(func2)\n  .then(func3)\n  .then((result3) => {\n    /* use result3 */\n  });\n```\n\nThis can be made into a reusable compose function, which is common in functional programming:\n\n```\nconst applyAsync = (acc, val) => acc.then(val);\nconst composeAsync =\n  (...funcs) =>\n  (x) =>\n    funcs.reduce(applyAsync, Promise.resolve(x));\n```\n\nThe `composeAsync()` function accepts any number of functions as arguments and returns a new function that accepts an initial value to be passed through the composition pipeline:\n\n```\nconst transformData = composeAsync(func1, func2, func3);\nconst result3 = transformData(data);\n```\n\nSequential composition can also be done more succinctly with async/await:\n\n```\nlet result;\nfor (const f of [func1, func2, func3]) {\n  result = await f(result);\n}\n/* use last result (i.e. result3) */\n```\n\nHowever, before you compose promises sequentially, consider if it's really necessary — it's always better to run promises concurrently so that they don't unnecessarily block each other unless one promise's execution depends on another's result.\n\n## [Cancellation](#cancellation)\n\n`Promise` itself has no first-class protocol for cancellation, but you may be able to directly cancel the underlying asynchronous operation, typically using [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController).\n\n## [Creating a Promise around an old callback API](#creating_a_promise_around_an_old_callback_api)\n\nA [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) can be created from scratch using its [constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise). This should be needed only to wrap old APIs.\n\nIn an ideal world, all asynchronous functions would already return promises. Unfortunately, some APIs still expect success and/or failure callbacks to be passed in the old way. The most obvious example is the [`setTimeout()`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout) function:\n\n```\nsetTimeout(() => saySomething(\"10 seconds passed\"), 10 * 1000);\n```\n\nMixing old-style callbacks and promises is problematic. If `saySomething()` fails or contains a programming error, nothing catches it. This is intrinsic to the design of `setTimeout`.\n\nLuckily we can wrap `setTimeout` in a promise. The best practice is to wrap the callback-accepting functions at the lowest possible level, and then never call them directly again:\n\n```\nconst wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nwait(10 * 1000)\n  .then(() => saySomething(\"10 seconds\"))\n  .catch(failureCallback);\n```\n\nThe promise constructor takes an executor function that lets us resolve or reject a promise manually. Since `setTimeout()` doesn't really fail, we left out reject in this case. For more information on how the executor function works, see the [`Promise()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) reference.\n\n## [Timing](#timing)\n\nLastly, we will look into the more technical details, about when the registered callbacks get called.\n\n### [Guarantees](#guarantees)\n\nIn the callback-based API, when and how the callback gets called depends on the API implementor. For example, the callback may be called synchronously or asynchronously:\n\n```\nfunction doSomething(callback) {\n  if (Math.random() > 0.5) {\n    callback();\n  } else {\n    setTimeout(() => callback(), 1000);\n  }\n}\n```\n\nThe above design is strongly discouraged because it leads to the so-called \"state of Zalgo\". In the context of designing asynchronous APIs, this means a callback is called synchronously in some cases but asynchronously in other cases, creating ambiguity for the caller. For further background, see the article [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony/), where the term was first formally presented. This API design makes side effects hard to analyze:\n\n```\nlet value = 1;\ndoSomething(() => {\n  value = 2;\n});\nconsole.log(value); // 1 or 2?\n```\n\nOn the other hand, promises are a form of [inversion of control](https://en.wikipedia.org/wiki/Inversion_of_control) — the API implementor does not control when the callback gets called. Instead, the job of maintaining the callback queue and deciding when to call the callbacks is delegated to the promise implementation, and both the API user and API developer automatically gets strong semantic guarantees, including:\n\n*   Callbacks added with [`then()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) will never be invoked before the [completion of the current run](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Event_loop#run-to-completion) of the JavaScript event loop.\n*   These callbacks will be invoked even if they were added _after_ the success or failure of the asynchronous operation that the promise represents.\n*   Multiple callbacks may be added by calling [`then()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) several times. They will be invoked one after another, in the order in which they were inserted.\n\nTo avoid surprises, functions passed to [`then()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) will never be called synchronously, even with an already-resolved promise:\n\n```\nPromise.resolve().then(() => console.log(2));\nconsole.log(1);\n// Logs: 1, 2\n```\n\nInstead of running immediately, the passed-in function is put on a microtask queue, which means it runs later (only after the function which created it exits, and when the JavaScript execution stack is empty), just before control is returned to the event loop; i.e. pretty soon:\n\n```\nconst wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nwait(0).then(() => console.log(4));\nPromise.resolve()\n  .then(() => console.log(2))\n  .then(() => console.log(3));\nconsole.log(1); // 1, 2, 3, 4\n```\n\n### [Task queues vs. microtasks](#task_queues_vs._microtasks)\n\nPromise callbacks are handled as a [microtask](https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide) whereas [`setTimeout()`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout) callbacks are handled as task queues.\n\n```\nconst promise = new Promise((resolve, reject) => {\n  console.log(\"Promise callback\");\n  resolve();\n}).then((result) => {\n  console.log(\"Promise callback (.then)\");\n});\n\nsetTimeout(() => {\n  console.log(\"event-loop cycle: Promise (fulfilled)\", promise);\n}, 0);\n\nconsole.log(\"Promise (pending)\", promise);\n```\n\nThe code above will output:\n\nPromise callback\nPromise (pending) Promise {<pending>}\nPromise callback (.then)\nevent-loop cycle: Promise (fulfilled) Promise {<fulfilled>}\n\nFor more details, refer to [Tasks vs. microtasks](https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth#tasks_vs._microtasks).\n\n### [When promises and tasks collide](#when_promises_and_tasks_collide)\n\nIf you run into situations in which you have promises and tasks (such as events or callbacks) which are firing in unpredictable orders, it's possible you may benefit from using a microtask to check status or balance out your promises when promises are created conditionally.\n\nIf you think microtasks may help solve this problem, see the [microtask guide](https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide) to learn more about how to use [`queueMicrotask()`](https://developer.mozilla.org/en-US/docs/Web/API/queueMicrotask) to enqueue a function as a microtask.\n\n## [See also](#see_also)",
    "title": "Using promises - JavaScript | MDN",
    "description": "A Promise is an object representing the eventual completion or failure of an asynchronous operation. Since most people are consumers of already-created promises, this guide will explain consumption of returned promises before explaining how to create them.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "markdown": "# DataView - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`DataView`** view provides a low-level interface for reading and writing multiple number types in a binary [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer), without having to care about the platform's [endianness](https://developer.mozilla.org/en-US/docs/Glossary/Endianness).\n\n## [Description](#description)\n\n### [Endianness](#endianness)\n\nMulti-byte number formats are represented in memory differently depending on machine architecture — see [Endianness](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) for an explanation. `DataView` accessors provide explicit control of how data is accessed, regardless of the executing computer's endianness. For example, [WebAssembly](https://developer.mozilla.org/en-US/docs/WebAssembly) memory is always little-endian, so you should use `DataView` instead of typed arrays to read and write multi-byte values. See [`WebAssembly.Memory`](https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory) for an example.\n\n```\nconst littleEndian = (() => {\n  const buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n  // Int16Array uses the platform's endianness.\n  return new Int16Array(buffer)[0] === 256;\n})();\nconsole.log(littleEndian); // true or false\n```\n\n**Note:** `DataView` defaults to big-endian read and write, but most platforms use little-endian.\n\n### [64-bit Integer Values](#64-bit_integer_values)\n\nSome browsers don't have support for [`DataView.prototype.setBigInt64()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigInt64) and [`DataView.prototype.setBigUint64()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigUint64). So to enable 64-bit operations in your code that will work across browsers, you could implement your own `getUint64()` function, to obtain values with precision up to [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) — which could suffice for certain cases.\n\n```\nfunction getUint64(dataview, byteOffset, littleEndian) {\n  // split 64-bit number into two 32-bit (4-byte) parts\n  const left = dataview.getUint32(byteOffset, littleEndian);\n  const right = dataview.getUint32(byteOffset + 4, littleEndian);\n\n  // combine the two 32-bit values\n  const combined = littleEndian\n    ? left + 2 ** 32 * right\n    : 2 ** 32 * left + right;\n\n  if (!Number.isSafeInteger(combined))\n    console.warn(combined, \"exceeds MAX_SAFE_INTEGER. Precision may be lost\");\n\n  return combined;\n}\n```\n\nAlternatively, if you need full 64-bit range, you can create a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt). Further, although native BigInts are much faster than user-land library equivalents, BigInts will always be much slower than 32-bit integers in JavaScript due to the nature of their variable size.\n\n```\nconst BigInt = window.BigInt,\n  bigThirtyTwo = BigInt(32),\n  bigZero = BigInt(0);\nfunction getUint64BigInt(dataview, byteOffset, littleEndian) {\n  // split 64-bit number into two 32-bit (4-byte) parts\n  const left = BigInt(dataview.getUint32(byteOffset | 0, !!littleEndian) >>> 0);\n  const right = BigInt(\n    dataview.getUint32(((byteOffset | 0) + 4) | 0, !!littleEndian) >>> 0,\n  );\n\n  // combine the two 32-bit values and return\n  return littleEndian\n    ? (right << bigThirtyTwo) | left\n    : (left << bigThirtyTwo) | right;\n}\n```\n\n## [Constructor](#constructor)\n\n[`DataView()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/DataView)\n\nCreates a new `DataView` object.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `DataView.prototype` and shared by all `DataView` instances.\n\n[`DataView.prototype.buffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/buffer)\n\nThe [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) referenced by this view. Fixed at construction time and thus **read only.**\n\n[`DataView.prototype.byteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteLength)\n\nThe length (in bytes) of this view. Fixed at construction time and thus **read only.**\n\n[`DataView.prototype.byteOffset`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteOffset)\n\nThe offset (in bytes) of this view from the start of its [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer). Fixed at construction time and thus **read only.**\n\n[`DataView.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `DataView` instances, the initial value is the [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/DataView) constructor.\n\n[`DataView.prototype[@@toStringTag]`](#dataview.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"DataView\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`DataView.prototype.getBigInt64()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigInt64)\n\nReads 8 bytes starting at the specified byte offset of this `DataView` and interprets them as a 64-bit signed integer.\n\n[`DataView.prototype.getBigUint64()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigUint64)\n\nReads 8 bytes starting at the specified byte offset of this `DataView` and interprets them as a 64-bit unsigned integer.\n\n[`DataView.prototype.getFloat16()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat16)\n\nReads 2 bytes starting at the specified byte offset of this `DataView` and interprets them as a 16-bit floating point number.\n\n[`DataView.prototype.getFloat32()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat32)\n\nReads 4 bytes starting at the specified byte offset of this `DataView` and interprets them as a 32-bit floating point number.\n\n[`DataView.prototype.getFloat64()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat64)\n\nReads 8 bytes starting at the specified byte offset of this `DataView` and interprets them as a 64-bit floating point number.\n\n[`DataView.prototype.getInt16()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt16)\n\nReads 2 bytes starting at the specified byte offset of this `DataView` and interprets them as a 16-bit signed integer.\n\n[`DataView.prototype.getInt32()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32)\n\nReads 4 bytes starting at the specified byte offset of this `DataView` and interprets them as a 32-bit signed integer.\n\n[`DataView.prototype.getInt8()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8)\n\nReads 1 byte at the specified byte offset of this `DataView` and interprets it as an 8-bit signed integer.\n\n[`DataView.prototype.getUint16()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint16)\n\nReads 2 bytes starting at the specified byte offset of this `DataView` and interprets them as a 16-bit unsigned integer.\n\n[`DataView.prototype.getUint32()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32)\n\nReads 4 bytes starting at the specified byte offset of this `DataView` and interprets them as a 32-bit unsigned integer.\n\n[`DataView.prototype.getUint8()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint8)\n\nReads 1 byte at the specified byte offset of this `DataView` and interprets it as an 8-bit unsigned integer.\n\n[`DataView.prototype.setBigInt64()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigInt64)\n\nTakes a BigInt and stores it as a 64-bit signed integer in the 8 bytes starting at the specified byte offset of this `DataView`.\n\n[`DataView.prototype.setBigUint64()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigUint64)\n\nTakes a BigInt and stores it as a 64-bit unsigned integer in the 8 bytes starting at the specified byte offset of this `DataView`.\n\n[`DataView.prototype.setFloat16()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat16)\n\nTakes a number and stores it as a 16-bit float in the 2 bytes starting at the specified byte offset of this `DataView`.\n\n[`DataView.prototype.setFloat32()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat32)\n\nTakes a number and stores it as a 32-bit float in the 4 bytes starting at the specified byte offset of this `DataView`.\n\n[`DataView.prototype.setFloat64()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat64)\n\nTakes a number and stores it as a 64-bit float in the 8 bytes starting at the specified byte offset of this `DataView`.\n\n[`DataView.prototype.setInt16()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt16)\n\nTakes a number and stores it as a 16-bit signed integer in the 2 bytes at the specified byte offset of this `DataView`.\n\n[`DataView.prototype.setInt32()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt32)\n\nTakes a number and stores it as a 32-bit signed integer in the 4 bytes at the specified byte offset of this `DataView`.\n\n[`DataView.prototype.setInt8()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt8)\n\nTakes a number and stores it as an 8-bit signed integer in the byte at the specified byte offset of this `DataView`.\n\n[`DataView.prototype.setUint16()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint16)\n\nTakes a number and stores it as a 16-bit unsigned integer in the 2 bytes at the specified byte offset of this `DataView`.\n\n[`DataView.prototype.setUint32()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint32)\n\nTakes a number and stores it as a 32-bit unsigned integer in the 4 bytes at the specified byte offset of this `DataView`.\n\n[`DataView.prototype.setUint8()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8)\n\nTakes a number and stores it as an 8-bit unsigned integer in the byte at the specified byte offset of this `DataView`.\n\n## [Examples](#examples)\n\n### [Using DataView](#using_dataview)\n\n```\nconst buffer = new ArrayBuffer(16);\nconst view = new DataView(buffer, 0);\n\nview.setInt16(1, 42);\nview.getInt16(1); // 42\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview-objects](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "DataView - JavaScript | MDN",
    "description": "The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform's endianness.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays",
    "markdown": "# JavaScript typed arrays - JavaScript\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators)\n\nJavaScript typed arrays are array-like objects that provide a mechanism for reading and writing raw binary data in memory buffers.\n\nTyped arrays are not intended to replace arrays for any kind of functionality. Instead, they provide developers with a familiar interface for manipulating binary data. This is useful when interacting with platform features, such as audio and video manipulation, access to raw data using [WebSockets](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API), and so forth. Each entry in a JavaScript typed array is a raw binary value in one of a number of supported formats, from 8-bit integers to 64-bit floating-point numbers.\n\nTyped array objects share many of the same methods as arrays with similar semantics. However, typed arrays are _not_ to be confused with normal arrays, as calling [`Array.isArray()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray) on a typed array returns `false`. Moreover, not all methods available for normal arrays are supported by typed arrays (e.g. push and pop).\n\nTo achieve maximum flexibility and efficiency, JavaScript typed arrays split the implementation into _buffers_ and _views_. A buffer is an object representing a chunk of data; it has no format to speak of, and offers no mechanism for accessing its contents. In order to access the memory contained in a buffer, you need to use a [view](#views). A view provides a _context_ — that is, a data type, starting offset, and number of elements.\n\n![A diagram showing how different typed arrays may be views of the same underlying buffer. Each one has a different element number and width.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays/typed_arrays.png)\n\n## [Buffers](#buffers)\n\nThere are two types of buffers: [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) and [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer). Both are low-level representations of a memory span. They have \"array\" in their names, but they don't have much to do with arrays — you cannot read or write to them directly. Instead, buffers are generic objects that just contain raw data. In order to access the memory represented by a buffer, you need to use a view.\n\nBuffers support the following actions:\n\n*   _Allocate_: As soon as a new buffer is created, a new memory span is allocated and initialized to `0`.\n*   _Copy_: Using the [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice) method, you can efficiently copy a portion of the memory without creating views to manually copy each byte.\n*   _Transfer_: Using the [`transfer()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer) and [`transferToFixedLength()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transferToFixedLength) methods, you can transfer ownership of the memory span to a new buffer object. This is useful when transferring data between different execution contexts without copying. After the transfer, the original buffer is no longer usable. A `SharedArrayBuffer` cannot be transferred (as the buffer is already shared by all execution contexts).\n*   _Resize_: Using the [`resize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/resize) method, you can resize the memory span (either claim more memory space, as long as it doesn't pass the pre-set [`maxByteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/maxByteLength) limit, or release some memory space). `SharedArrayBuffer` can only be [grown](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/grow) but not shrunk.\n\nThe difference between `ArrayBuffer` and `SharedArrayBuffer` is that the former is always owned by a single execution context at a time. If you pass an `ArrayBuffer` to a different execution context, it is _transferred_ and the original `ArrayBuffer` becomes unusable. This ensures that only one execution context can access the memory at a time. A `SharedArrayBuffer` is not transferred when passed to a different execution context, so it can be accessed by multiple execution contexts at the same time. This may introduce race conditions when multiple threads access the same memory span, so operations such as [`Atomics`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics) methods become useful.\n\n## [Views](#views)\n\nThere are currently two main kinds of views: typed array views and [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView). Typed arrays provide [utility methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#instance_methods) that allow you to conveniently transform binary data. `DataView` is more low-level and allows granular control of how data is accessed. The ways to read and write data using the two views are very different.\n\nBoth kinds of views cause [`ArrayBuffer.isView()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView) to return `true`. They both have the following properties:\n\n[`buffer`](#buffer)\n\nThe underlying buffer that the view references.\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, of the view from the start of its buffer.\n\n[`byteLength`](#bytelength)\n\nThe length, in bytes, of the view.\n\nBoth constructors accept the above three as separate arguments, although typed array constructors accept `length` as the number of elements rather than the number of bytes.\n\n### [Typed array views](#typed_array_views)\n\nTyped array views have self-descriptive names and provide views for all the usual numeric types like `Int8`, `Uint32`, `Float64` and so forth. There is one special typed array view, [`Uint8ClampedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray), which clamps the values between `0` and `255`. This is useful for [Canvas data processing](https://developer.mozilla.org/en-US/docs/Web/API/ImageData), for example.\n\n| Type | Value Range | Size in bytes | Web IDL type |\n| --- | --- | --- | --- |\n| [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) | \\-128 to 127 | 1   | `byte` |\n| [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) | 0 to 255 | 1   | `octet` |\n| [`Uint8ClampedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) | 0 to 255 | 1   | `octet` |\n| [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array) | \\-32768 to 32767 | 2   | `short` |\n| [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array) | 0 to 65535 | 2   | `unsigned short` |\n| [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) | \\-2147483648 to 2147483647 | 4   | `long` |\n| [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) | 0 to 4294967295 | 4   | `unsigned long` |\n| [`Float16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array) | `-65504` to `65504` | 2   | N/A |\n| [`Float32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array) | `-3.4e38` to `3.4e38` | 4   | `unrestricted float` |\n| [`Float64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array) | `-1.8e308` to `1.8e308` | 8   | `unrestricted double` |\n| [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array) | \\-263 to 263 - 1 | 8   | `bigint` |\n| [`BigUint64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array) | 0 to 264 - 1 | 8   | `bigint` |\n\nAll typed array views have the same methods and properties, as defined by the [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) class. They only differ in the underlying data type and the size in bytes. This is discussed in more detail in [Value encoding and normalization](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n\nTyped arrays are, in principle, fixed-length, so array methods that may change the length of an array are not available. This includes `pop`, `push`, `shift`, `splice`, and `unshift`. In addition, `flat` is unavailable because there are no nested typed arrays, and related methods including `concat` and `flatMap` do not have great use cases so are unavailable. As `splice` is unavailable, so too is `toSpliced`. All other array methods are shared between `Array` and `TypedArray`.\n\nOn the other hand, `TypedArray` has the extra `set` and `subarray` methods that optimize working with multiple typed arrays that view the same buffer. The `set()` method allows setting multiple typed array indices at once, using data from another array or typed array. If the two typed arrays share the same underlying buffer, the operation may be more efficient as it's a fast memory move. The `subarray()` method creates a new typed array view that references the same buffer as the original typed array, but with a narrower span.\n\nThere's no way to directly change the length of a typed array without changing the underlying buffer. However, when the typed array views a resizable buffer and does not have a fixed `byteLength`, it is _length-tracking_, and will automatically resize to fit the underlying buffer as the resizable buffer is resized. See [Behavior when viewing a resizable buffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#behavior_when_viewing_a_resizable_buffer) for details.\n\nSimilar to regular arrays, you can access typed array elements using [bracket notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#bracket_notation). The corresponding bytes in the underlying buffer are retrieved and interpreted as a number. Any property access using a number (or the string representation of a number, since numbers are always converted to strings when accessing properties) will be proxied by the typed array — they never interact with the object itself. This means, for example:\n\n*   Out-of-bounds index access always returns `undefined`, without actually accessing the property on the object.\n*   Any attempt to write to such an out-of-bounds property has no effect: it does not throw an error but doesn't change the buffer or typed array either.\n*   Typed array indices appear to be configurable and writable, but any attempt to change their attributes will fail.\n\n```\nconst uint8 = new Uint8Array([1, 2, 3]);\nconsole.log(uint8[0]); // 1\n\n// For illustrative purposes only. Not for production code.\nuint8[-1] = 0;\nuint8[2.5] = 0;\nuint8[NaN] = 0;\nconsole.log(Object.keys(uint8)); // [\"0\", \"1\", \"2\"]\nconsole.log(uint8[NaN]); // undefined\n\n// Non-numeric access still works\nuint8[true] = 0;\nconsole.log(uint8[true]); // 0\n\nObject.freeze(uint8); // TypeError: Cannot freeze array buffer views with elements\n```\n\n### [DataView](#dataview)\n\nThe [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) is a low-level interface that provides a getter/setter API to read and write arbitrary data to the buffer. This is useful when dealing with different types of data, for example. Typed array views are in the native byte-order (see [Endianness](https://developer.mozilla.org/en-US/docs/Glossary/Endianness)) of your platform. With a `DataView`, the byte-order can be controlled. By default, it's big-endian—the bytes are ordered from most significant to least significant. This can be reversed, with the bytes ordered from least significant to most significant (little-endian), using getter/setter methods.\n\n`DataView` does not require alignment; multi-byte read and write can be started at any specified offset. The setter methods work the same way.\n\nThe following example uses a `DataView` to get the binary representation of any number:\n\n```\nfunction toBinary(\n  x,\n  { type = \"Float64\", littleEndian = false, separator = \" \", radix = 16 } = {},\n) {\n  const bytesNeeded = globalThis[`${type}Array`].BYTES_PER_ELEMENT;\n  const dv = new DataView(new ArrayBuffer(bytesNeeded));\n  dv[`set${type}`](0, x, littleEndian);\n  const bytes = Array.from({ length: bytesNeeded }, (_, i) =>\n    dv\n      .getUint8(i)\n      .toString(radix)\n      .padStart(8 / Math.log2(radix), \"0\"),\n  );\n  return bytes.join(separator);\n}\n\nconsole.log(toBinary(1.1)); // 3f f1 99 99 99 99 99 9a\nconsole.log(toBinary(1.1, { littleEndian: true })); // 9a 99 99 99 99 99 f1 3f\nconsole.log(toBinary(20, { type: \"Int8\", radix: 2 })); // 00010100\n```\n\n## [Web APIs using typed arrays](#web_apis_using_typed_arrays)\n\nThese are some examples of APIs that make use of typed arrays; there are others, and more are being added all the time.\n\n[`FileReader.prototype.readAsArrayBuffer()`](https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsArrayBuffer)\n\nThe `FileReader.prototype.readAsArrayBuffer()` method starts reading the contents of the specified [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) or [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File).\n\n[`fetch()`](https://developer.mozilla.org/en-US/docs/Web/API/fetch)\n\nThe [`body`](https://developer.mozilla.org/en-US/docs/Web/API/RequestInit#body) option to `fetch()` can be a typed array or [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer), enabling you to send these objects as the payload of a [`POST`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request.\n\n[`ImageData.data`](https://developer.mozilla.org/en-US/docs/Web/API/ImageData)\n\nIs a [`Uint8ClampedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) representing a one-dimensional array containing the data in the RGBA order, with integer values between `0` and `255` inclusive.\n\n## [Examples](#examples)\n\n### [Using views with buffers](#using_views_with_buffers)\n\nFirst of all, we will need to create a buffer, here with a fixed length of 16-bytes:\n\n```\nconst buffer = new ArrayBuffer(16);\n```\n\nAt this point, we have a chunk of memory whose bytes are all pre-initialized to 0. There's not a lot we can do with it, though. For example, we can confirm that the buffer is the right size:\n\n```\nif (buffer.byteLength === 16) {\n  console.log(\"Yes, it's 16 bytes.\");\n} else {\n  console.log(\"Oh no, it's the wrong size!\");\n}\n```\n\nBefore we can really work with this buffer, we need to create a view. Let's create a view that treats the data in the buffer as an array of 32-bit signed integers:\n\n```\nconst int32View = new Int32Array(buffer);\n```\n\nNow we can access the fields in the array just like a normal array:\n\n```\nfor (let i = 0; i < int32View.length; i++) {\n  int32View[i] = i * 2;\n}\n```\n\nThis fills out the 4 entries in the array (4 entries at 4 bytes each makes 16 total bytes) with the values `0`, `2`, `4`, and `6`.\n\n### [Multiple views on the same data](#multiple_views_on_the_same_data)\n\nThings start to get really interesting when you consider that you can create multiple views onto the same data. For example, given the code above, we can continue like this:\n\n```\nconst int16View = new Int16Array(buffer);\n\nfor (let i = 0; i < int16View.length; i++) {\n  console.log(`Entry ${i}: ${int16View[i]}`);\n}\n```\n\nHere we create a 16-bit integer view that shares the same buffer as the existing 32-bit view and we output all the values in the buffer as 16-bit integers. Now we get the output `0`, `0`, `2`, `0`, `4`, `0`, `6`, `0` (assuming little-endian encoding):\n\nInt16Array  |   0  |  0   |   2  |  0   |   4  |  0   |   6  |  0   |\nInt32Array  |      0      |      2      |      4      |      6      |\nArrayBuffer | 00 00 00 00 | 02 00 00 00 | 04 00 00 00 | 06 00 00 00 |\n\nYou can go a step farther, though. Consider this:\n\n```\nint16View[0] = 32;\nconsole.log(`Entry 0 in the 32-bit array is now ${int32View[0]}`);\n```\n\nThe output from this is `\"Entry 0 in the 32-bit array is now 32\"`.\n\nIn other words, the two arrays are indeed viewed on the same data buffer, treating it as different formats.\n\nInt16Array  |  32  |  0   |   2  |  0   |   4  |  0   |   6  |  0   |\nInt32Array  |     32      |      2      |      4      |      6      |\nArrayBuffer | 20 00 00 00 | 02 00 00 00 | 04 00 00 00 | 06 00 00 00 |\n\nYou can do this with any view type, although if you set an integer and then read it as a floating-point number, you will probably get a strange result because the bits are interpreted differently.\n\n```\nconst float32View = new Float32Array(buffer);\nconsole.log(float32View[0]); // 4.484155085839415e-44\n```\n\n### [Reading text from a buffer](#reading_text_from_a_buffer)\n\nBuffers don't always represent numbers. For example, reading a file can give you a text data buffer. You can read this data out of the buffer using a typed array.\n\nThe following reads UTF-8 text using the [`TextDecoder`](https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder) web API:\n\n```\nconst buffer = new ArrayBuffer(8);\nconst uint8 = new Uint8Array(buffer);\n// Data manually written here, but pretend it was already in the buffer\nuint8.set([228, 189, 160, 229, 165, 189]);\nconst text = new TextDecoder().decode(uint8);\nconsole.log(text); // \"你好\"\n```\n\nThe following reads UTF-16 text using the [`String.fromCharCode()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode) method:\n\n```\nconst buffer = new ArrayBuffer(8);\nconst uint16 = new Uint16Array(buffer);\n// Data manually written here, but pretend it was already in the buffer\nuint16.set([0x4f60, 0x597d]);\nconst text = String.fromCharCode(...uint16);\nconsole.log(text); // \"你好\"\n```\n\n### [Working with complex data structures](#working_with_complex_data_structures)\n\nBy combining a single buffer with multiple views of different types, starting at different offsets into the buffer, you can interact with data objects containing multiple data types. This lets you, for example, interact with complex data structures from [WebGL](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API) or data files.\n\nConsider this C structure:\n\n```\nstruct someStruct {\n  unsigned long id;\n  char username[16];\n  float amountDue;\n};\n```\n\nYou can access a buffer containing data in this format like this:\n\n```\nconst buffer = new ArrayBuffer(24);\n\n// ... read the data into the buffer ...\n\nconst idView = new Uint32Array(buffer, 0, 1);\nconst usernameView = new Uint8Array(buffer, 4, 16);\nconst amountDueView = new Float32Array(buffer, 20, 1);\n```\n\nThen you can access, for example, the amount due with `amountDueView[0]`.\n\n**Note:** The [data structure alignment](https://en.wikipedia.org/wiki/Data_structure_alignment) in a C structure is platform-dependent. Take precautions and considerations for these padding differences.\n\n### [Conversion to normal arrays](#conversion_to_normal_arrays)\n\nAfter processing a typed array, it is sometimes useful to convert it back to a normal array in order to benefit from the [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) prototype. This can be done using [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from):\n\n```\nconst typedArray = new Uint8Array([1, 2, 3, 4]);\nconst normalArray = Array.from(typedArray);\n```\n\nas well as the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax):\n\n```\nconst typedArray = new Uint8Array([1, 2, 3, 4]);\nconst normalArray = [...typedArray];\n```\n\n## [See also](#see_also)",
    "title": "JavaScript typed arrays - JavaScript | MDN",
    "description": "JavaScript typed arrays are array-like objects that provide a mechanism for reading and writing raw binary data in memory buffers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "markdown": "# RangeError - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`RangeError`** object indicates an error when a value is not in the set or range of allowed values.\n\n## [Description](#description)\n\nA `RangeError` is thrown when trying to pass a value as an argument to a function that does not allow a range that includes the value.\n\nThis can be encountered when:\n\n*   passing a value that is not one of the allowed string values to [`String.prototype.normalize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize), or\n*   when attempting to create an array of an illegal length with the [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) constructor, or\n*   when passing bad values to the numeric methods [`Number.prototype.toExponential()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential), [`Number.prototype.toFixed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed) or [`Number.prototype.toPrecision()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision).\n\n`RangeError` is a [serializable object](https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object), so it can be cloned with [`structuredClone()`](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone) or copied between [Workers](https://developer.mozilla.org/en-US/docs/Web/API/Worker) using [`postMessage()`](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage \"postMessage()\").\n\n`RangeError` is a subclass of [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n## [Constructor](#constructor)\n\n[`RangeError()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError/RangeError)\n\nCreates a new `RangeError` object.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)_.\n\nThese properties are defined on `RangeError.prototype` and shared by all `RangeError` instances.\n\n[`RangeError.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `RangeError` instances, the initial value is the [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError/RangeError) constructor.\n\n[`RangeError.prototype.name`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name)\n\nRepresents the name for the type of error. For `RangeError.prototype.name`, the initial value is `\"RangeError\"`.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)_.\n\n## [Examples](#examples)\n\n### [Using RangeError (for numeric values)](#using_rangeerror_for_numeric_values)\n\n```\nfunction check(n) {\n  if (!(n >= -500 && n <= 500)) {\n    throw new RangeError(\"The argument must be between -500 and 500.\");\n  }\n}\n\ntry {\n  check(2000);\n} catch (error) {\n  if (error instanceof RangeError) {\n    // Handle the error\n  }\n}\n```\n\n### [Using RangeError (for non-numeric values)](#using_rangeerror_for_non-numeric_values)\n\n```\nfunction check(value) {\n  if (![\"apple\", \"banana\", \"carrot\"].includes(value)) {\n    throw new RangeError(\n      'The argument must be an \"apple\", \"banana\", or \"carrot\".',\n    );\n  }\n}\n\ntry {\n  check(\"cabbage\");\n} catch (error) {\n  if (error instanceof RangeError) {\n    // Handle the error\n  }\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-native-error-types-used-in-this-standard-rangeerror](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-native-error-types-used-in-this-standard-rangeerror) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "RangeError - JavaScript | MDN",
    "description": "The RangeError object indicates an error when a value is not in the set or range of allowed values.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Decrement",
    "markdown": "# Decrement (--) - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **decrement (`--`)** operator decrements (subtracts one from) its operand and returns the value before or after the decrement, depending on where the operator is placed.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe `--` operator is overloaded for two types of operands: number and [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt). It first [coerces the operand to a numeric value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) and tests the type of it. It performs BigInt decrement if the operand becomes a BigInt; otherwise, it performs number decrement.\n\nIf used postfix, with operator after operand (for example, `x--`), the decrement operator decrements and returns the value before decrementing.\n\nIf used prefix, with operator before operand (for example, `--x`), the decrement operator decrements and returns the value after decrementing.\n\nThe decrement operator can only be applied on operands that are references (variables and object properties; i.e. valid [assignment targets](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment)). `--x` itself evaluates to a value, not a reference, so you cannot chain multiple decrement operators together.\n\n```\n--(--x); // SyntaxError: Invalid left-hand side expression in prefix operation\n```\n\n## [Examples](#examples)\n\n### [Postfix decrement](#postfix_decrement)\n\n```\nlet x = 3;\nconst y = x--;\n// x is 2; y is 3\n\nlet x2 = 3n;\nconst y2 = x2--;\n// x2 is 2n; y2 is 3n\n```\n\n### [Prefix decrement](#prefix_decrement)\n\n```\nlet x = 3;\nconst y = --x;\n// x is 2; y = 2\n\nlet x2 = 3n;\nconst y2 = --x2;\n// x2 is 2n; y2 is 2n\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-postfix-decrement-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-postfix-decrement-operator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Decrement (--) - JavaScript | MDN",
    "description": "The decrement (--) operator decrements (subtracts one from) its operand and returns the value before or after the decrement, depending on where the operator is placed.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "markdown": "# Date - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nJavaScript **`Date`** objects represent a single moment in time in a platform-independent format. `Date` objects encapsulate an integral number that represents milliseconds since the midnight at the beginning of January 1, 1970, UTC (the _epoch_).\n\n**Note:** TC39 is working on [Temporal](https://tc39.es/proposal-temporal/docs/index.html), a new Date/Time API. Read more about it on the [Igalia blog](https://blogs.igalia.com/compilers/2020/06/23/dates-and-times-in-javascript/). It is not yet ready for production use!\n\n## [Description](#description)\n\n### [The epoch, timestamps, and invalid date](#the_epoch_timestamps_and_invalid_date)\n\nA JavaScript date is fundamentally specified as the time in milliseconds that has elapsed since the [epoch](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-time-values-and-time-range), which is defined as the midnight at the beginning of January 1, 1970, UTC (equivalent to the [UNIX epoch](https://developer.mozilla.org/en-US/docs/Glossary/Unix_time)). This timestamp is _timezone-agnostic_ and uniquely defines an instant in history.\n\n**Note:** While the time value at the heart of a Date object is UTC, the basic methods to fetch the date and time or its components all work in the local (i.e. host system) time zone and offset.\n\nThe maximum timestamp representable by a `Date` object is slightly smaller than the maximum safe integer ([`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER), which is 9,007,199,254,740,991). A `Date` object can represent a maximum of ±8,640,000,000,000,000 milliseconds, or ±100,000,000 (one hundred million) days, relative to the epoch. This is the range from April 20, 271821 BC to September 13, 275760 AD. Any attempt to represent a time outside this range results in the `Date` object holding a timestamp value of [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN), which is an \"Invalid Date\".\n\n```\nconsole.log(new Date(8.64e15).toString()); // \"Sat Sep 13 275760 00:00:00 GMT+0000 (Coordinated Universal Time)\"\nconsole.log(new Date(8.64e15 + 1).toString()); // \"Invalid Date\"\n```\n\nThere are various methods that allow you to interact with the timestamp stored in the date:\n\n*   You can interact with the timestamp value directly using the [`getTime()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime) and [`setTime()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime) methods.\n*   The [`valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf) and [`[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive) (when passed `\"number\"`) methods — which are automatically called in [number coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) — return the timestamp, causing `Date` objects to behave like their timestamps when used in number contexts.\n*   All static methods ([`Date.now()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now), [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse), and [`Date.UTC()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC)) return timestamps instead of `Date` objects.\n*   The [`Date()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date) constructor can be called with a timestamp as the only argument.\n\n### [Date components and time zones](#date_components_and_time_zones)\n\nA date is represented internally as a single number, the _timestamp_. When interacting with it, the timestamp needs to be interpreted as a structured date-and-time representation. There are always two ways to interpret a timestamp: as a local time or as a Coordinated Universal Time (UTC), the global standard time defined by the World Time Standard. The local timezone is not stored in the date object, but is determined by the host environment (user's device).\n\n**Note:** UTC should not be confused with the [Greenwich Mean Time](https://en.wikipedia.org/wiki/Greenwich_Mean_Time) (GMT), because they are not always equal — this is explained in more detail in the linked Wikipedia page.\n\nFor example, the timestamp 0 represents a unique instant in history, but it can be interpreted in two ways:\n\n*   As a UTC time, it is midnight at the beginning of January 1, 1970, UTC,\n*   As a local time in New York (UTC-5), it is 19:00:00 on December 31, 1969.\n\nThe [`getTimezoneOffset()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset) method returns the difference between UTC and the local time in minutes. Note that the timezone offset does not only depend on the current timezone, but also on the time represented by the `Date` object, because of daylight saving time and historical changes. In essence, the timezone offset is the offset from UTC time, at the time represented by the `Date` object and at the location of the host environment.\n\nThere are two groups of `Date` methods: one group gets and sets various date components by interpreting the timestamp as a local time, while the other uses UTC.\n\n| Component | Local |     | UTC |     |\n| --- | --- | --- | --- | --- |\n| Get | Set | Get | Set |\n| --- | --- | --- | --- | --- |\n| Year | [`getFullYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear) | [`setFullYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear) | [`getUTCFullYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear) | [`setUTCFullYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear) |\n| Month | [`getMonth()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth) | [`setMonth()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth) | [`getUTCMonth()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth) | [`setUTCMonth()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMonth) |\n| Date (of month) | [`getDate()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate) | [`setDate()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate) | [`getUTCDate()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate) | [`setUTCDate()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCDate) |\n| Hours | [`getHours()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours) | [`setHours()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours) | [`getUTCHours()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours) | [`setUTCHours()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours) |\n| Minutes | [`getMinutes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes) | [`setMinutes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes) | [`getUTCMinutes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes) | [`setUTCMinutes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMinutes) |\n| Seconds | [`getSeconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds) | [`setSeconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds) | [`getUTCSeconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds) | [`setUTCSeconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCSeconds) |\n| Milliseconds | [`getMilliseconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds) | [`setMilliseconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds) | [`getUTCMilliseconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds) | [`setUTCMilliseconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds) |\n| Day (of week) | [`getDay()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay) | N/A | [`getUTCDay()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay) | N/A |\n\nThe [`Date()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date) constructor can be called with two or more arguments, in which case they are interpreted as the year, month, day, hour, minute, second, and millisecond, respectively, in local time. [`Date.UTC()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC) works similarly, but it interprets the components as UTC time and also accepts a single argument representing the year.\n\n**Note:** Some methods, including the `Date()` constructor, `Date.UTC()`, and the deprecated [`getYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear)/[`setYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setYear) methods, interpret a two-digit year as a year in the 1900s. For example, `new Date(99, 5, 24)` is interpreted as June 24, 1999, not June 24, 99. See [Interpretation of two-digit years](#interpretation_of_two-digit_years) for more information.\n\nWhen a segment overflows or underflows its expected range, it usually \"carries over to\" or \"borrows from\" the higher segment. For example, if the month is set to 12 (months are zero-based, so December is 11), it become the January of the next year. If the day of month is set to 0, it becomes the last day of the previous month. This also applies to dates specified with the [date time string format](#date_time_string_format).\n\n### [Date time string format](#date_time_string_format)\n\nThere are many ways to format a date as a string. The JavaScript specification only specifies one format to be universally supported: the [_date time string format_](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date-time-string-format), a simplification of the ISO 8601 calendar date extended format. The format is as follows:\n\nYYYY-MM-DDTHH:mm:ss.sssZ\n\n*   `YYYY` is the year, with four digits (`0000` to `9999`), or as an _expanded year_ of `+` or `-` followed by six digits. The sign is required for expanded years. `-000000` is explicitly disallowed as a valid year.\n*   `MM` is the month, with two digits (`01` to `12`). Defaults to `01`.\n*   `DD` is the day of the month, with two digits (`01` to `31`). Defaults to `01`.\n*   `T` is a literal character, which indicates the beginning of the _time_ part of the string. The `T` is required when specifying the time part.\n*   `HH` is the hour, with two digits (`00` to `23`). As a special case, `24:00:00` is allowed, and is interpreted as midnight at the beginning of the next day. Defaults to `00`.\n*   `mm` is the minute, with two digits (`00` to `59`). Defaults to `00`.\n*   `ss` is the second, with two digits (`00` to `59`). Defaults to `00`.\n*   `sss` is the millisecond, with three digits (`000` to `999`). Defaults to `000`.\n*   `Z` is the timezone offset, which can either be the literal character `Z` (indicating UTC), or `+` or `-` followed by `HH:mm`, the offset in hours and minutes from UTC.\n\nVarious components can be omitted, so the following are all valid:\n\n*   Date-only form: `YYYY`, `YYYY-MM`, `YYYY-MM-DD`\n*   Date-time form: one of the above date-only forms, followed by `T`, followed by `HH:mm`, `HH:mm:ss`, or `HH:mm:ss.sss`. Each combination can be followed by a time zone offset.\n\nFor example, `\"2011-10-10\"` (_date-only_ form), `\"2011-10-10T14:48:00\"` (_date-time_ form), or `\"2011-10-10T14:48:00.000+09:00\"` (_date-time_ form with milliseconds and time zone) are all valid date time strings.\n\nWhen the time zone offset is absent, **date-only forms are interpreted as a UTC time and date-time forms are interpreted as local time.** This is due to a historical spec error that was not consistent with ISO 8601 but could not be changed due to web compatibility. See [Broken Parser – A Web Reality Issue](https://maggiepint.com/2017/04/11/fixing-javascript-date-web-compatibility-and-reality/).\n\n[`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse) and the [`Date()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date) constructor both accept strings in the date time string format as input. Furthermore, implementations are allowed to support other date formats when the input fails to match this format.\n\nThe [`toISOString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString) method returns a string representation of the date in the date time string format, with the time zone offset always set to `Z` (UTC).\n\n**Note:** You are encouraged to make sure your input conforms to the date time string format above for maximum compatibility, because support for other formats is not guaranteed. However, there are some formats that are supported in all major implementations — like [RFC 2822](https://datatracker.ietf.org/doc/html/rfc2822) format — in which case their usage can be acceptable. Always conduct [cross-browser tests](https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing) to ensure your code works in all target browsers. A library can help if many different formats are to be accommodated.\n\nNon-standard strings can be parsed in any way as desired by the implementation, including the time zone — most implementations use the local time zone by default. Implementations are not required to return invalid date for out-of-bounds date components, although they usually do. A string may have in-bounds date components (with the bounds defined above), but does not represent a date in reality (for example, \"February 30\"). Implementations behave inconsistently in this case. The [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse#examples) page offers more examples about these non-standard cases.\n\n### [Other ways to format a date](#other_ways_to_format_a_date)\n\n*   [`toISOString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString) returns a string in the format `1970-01-01T00:00:00.000Z` (the date time string format introduced above, which is simplified [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)). [`toJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON) calls `toISOString()` and returns the result.\n*   [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString) returns a string in the format `Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)`, while [`toDateString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString) and [`toTimeString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString) return the date and time parts of the string, respectively. [`[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive) (when passed `\"string\"` or `\"default\"`) calls `toString()` and returns the result.\n*   [`toUTCString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString) returns a string in the format `Thu, 01 Jan 1970 00:00:00 GMT` (generalized [RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231)).\n*   [`toLocaleDateString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString), [`toLocaleTimeString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString), and [`toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString) use locale-specific date and time formats, usually provided by the [`Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl) API.\n\nSee the [Formats of `toString` method return values](#formats_of_tostring_method_return_values) section for examples.\n\n## [Constructor](#constructor)\n\n[`Date()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date)\n\nWhen called as a constructor, returns a new `Date` object. When called as a function, returns a string representation of the current date and time.\n\n## [Static methods](#static_methods)\n\n[`Date.now()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now)\n\nReturns the numeric value corresponding to the current time—the number of milliseconds since January 1, 1970 00:00:00 UTC, with leap seconds ignored.\n\n[`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse)\n\nParses a string representation of a date and returns the number of milliseconds since January 1, 1970 00:00:00 UTC, with leap seconds ignored.\n\n[`Date.UTC()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC)\n\nAccepts the same parameters as the longest form of the constructor (i.e. 2 to 7) and returns the number of milliseconds since January 1, 1970 00:00:00 UTC, with leap seconds ignored.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Date.prototype` and shared by all `Date` instances.\n\n[`Date.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Date` instances, the initial value is the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date) constructor.\n\n## [Instance methods](#instance_methods)\n\n[`Date.prototype.getDate()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate)\n\nReturns the day of the month (`1` – `31`) for the specified date according to local time.\n\n[`Date.prototype.getDay()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay)\n\nReturns the day of the week (`0` – `6`) for the specified date according to local time.\n\n[`Date.prototype.getFullYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear)\n\nReturns the year (4 digits for 4-digit years) of the specified date according to local time.\n\n[`Date.prototype.getHours()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours)\n\nReturns the hour (`0` – `23`) in the specified date according to local time.\n\n[`Date.prototype.getMilliseconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds)\n\nReturns the milliseconds (`0` – `999`) in the specified date according to local time.\n\n[`Date.prototype.getMinutes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes)\n\nReturns the minutes (`0` – `59`) in the specified date according to local time.\n\n[`Date.prototype.getMonth()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth)\n\nReturns the month (`0` – `11`) in the specified date according to local time.\n\n[`Date.prototype.getSeconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds)\n\nReturns the seconds (`0` – `59`) in the specified date according to local time.\n\n[`Date.prototype.getTime()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)\n\nReturns the numeric value of the specified date as the number of milliseconds since January 1, 1970 00:00:00 UTC. (Negative values are returned for prior times.)\n\n[`Date.prototype.getTimezoneOffset()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset)\n\nReturns the time-zone offset in minutes for the current locale.\n\n[`Date.prototype.getUTCDate()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate)\n\nReturns the day (date) of the month (`1` – `31`) in the specified date according to universal time.\n\n[`Date.prototype.getUTCDay()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay)\n\nReturns the day of the week (`0` – `6`) in the specified date according to universal time.\n\n[`Date.prototype.getUTCFullYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear)\n\nReturns the year (4 digits for 4-digit years) in the specified date according to universal time.\n\n[`Date.prototype.getUTCHours()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours)\n\nReturns the hours (`0` – `23`) in the specified date according to universal time.\n\n[`Date.prototype.getUTCMilliseconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds)\n\nReturns the milliseconds (`0` – `999`) in the specified date according to universal time.\n\n[`Date.prototype.getUTCMinutes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes)\n\nReturns the minutes (`0` – `59`) in the specified date according to universal time.\n\n[`Date.prototype.getUTCMonth()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth)\n\nReturns the month (`0` – `11`) in the specified date according to universal time.\n\n[`Date.prototype.getUTCSeconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds)\n\nReturns the seconds (`0` – `59`) in the specified date according to universal time.\n\n[`Date.prototype.getYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear) Deprecated\n\nReturns the year (usually 2–3 digits) in the specified date according to local time. Use [`getFullYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear) instead.\n\n[`Date.prototype.setDate()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate)\n\nSets the day of the month for a specified date according to local time.\n\n[`Date.prototype.setFullYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear)\n\nSets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time.\n\n[`Date.prototype.setHours()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours)\n\nSets the hours for a specified date according to local time.\n\n[`Date.prototype.setMilliseconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds)\n\nSets the milliseconds for a specified date according to local time.\n\n[`Date.prototype.setMinutes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes)\n\nSets the minutes for a specified date according to local time.\n\n[`Date.prototype.setMonth()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth)\n\nSets the month for a specified date according to local time.\n\n[`Date.prototype.setSeconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds)\n\nSets the seconds for a specified date according to local time.\n\n[`Date.prototype.setTime()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime)\n\nSets the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object to the time represented by the number of milliseconds since January 1, 1970 00:00:00 UTC. Use negative numbers for times prior.\n\n[`Date.prototype.setUTCDate()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCDate)\n\nSets the day of the month for a specified date according to universal time.\n\n[`Date.prototype.setUTCFullYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear)\n\nSets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time.\n\n[`Date.prototype.setUTCHours()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours)\n\nSets the hour for a specified date according to universal time.\n\n[`Date.prototype.setUTCMilliseconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds)\n\nSets the milliseconds for a specified date according to universal time.\n\n[`Date.prototype.setUTCMinutes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMinutes)\n\nSets the minutes for a specified date according to universal time.\n\n[`Date.prototype.setUTCMonth()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMonth)\n\nSets the month for a specified date according to universal time.\n\n[`Date.prototype.setUTCSeconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCSeconds)\n\nSets the seconds for a specified date according to universal time.\n\n[`Date.prototype.setYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setYear) Deprecated\n\nSets the year (usually 2–3 digits) for a specified date according to local time. Use [`setFullYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear) instead.\n\n[`Date.prototype.toDateString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString)\n\nReturns the \"date\" portion of the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) as a human-readable string like `'Thu Apr 12 2018'`.\n\n[`Date.prototype.toISOString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n\nConverts a date to a string following the ISO 8601 Extended Format.\n\n[`Date.prototype.toJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON)\n\nReturns a string representing the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) using [`toISOString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString). Intended for use by [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\n\n[`Date.prototype.toLocaleDateString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString)\n\nReturns a string with a locality sensitive representation of the date portion of this date based on system settings.\n\n[`Date.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString)\n\nReturns a string with a locality-sensitive representation of this date. Overrides the [`Object.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString) method.\n\n[`Date.prototype.toLocaleTimeString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString)\n\nReturns a string with a locality-sensitive representation of the time portion of this date, based on system settings.\n\n[`Date.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString)\n\nReturns a string representing the specified [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object. Overrides the [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) method.\n\n[`Date.prototype.toTimeString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString)\n\nReturns the \"time\" portion of the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) as a human-readable string.\n\n[`Date.prototype.toUTCString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString)\n\nConverts a date to a string using the UTC timezone.\n\n[`Date.prototype.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf)\n\nReturns the primitive value of a [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object. Overrides the [`Object.prototype.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf) method.\n\n[`Date.prototype[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive)\n\nConverts this `Date` object to a primitive value.\n\n## [Examples](#examples)\n\n### [Several ways to create a Date object](#several_ways_to_create_a_date_object)\n\nThe following examples show several ways to create JavaScript dates:\n\n**Note:** Creating a date from a string has a lot of behavior inconsistencies. See [date time string format](#date_time_string_format) for caveats on using different formats.\n\n```\nconst today = new Date();\nconst birthday = new Date(\"December 17, 1995 03:24:00\"); // DISCOURAGED: may not work in all runtimes\nconst birthday2 = new Date(\"1995-12-17T03:24:00\"); // This is standardized and will work reliably\nconst birthday3 = new Date(1995, 11, 17); // the month is 0-indexed\nconst birthday4 = new Date(1995, 11, 17, 3, 24, 0);\nconst birthday5 = new Date(628021800000); // passing epoch timestamp\n```\n\n### [Formats of toString method return values](#formats_of_tostring_method_return_values)\n\n```\nconst date = new Date(\"2020-05-12T23:50:21.817Z\");\ndate.toString(); // Tue May 12 2020 18:50:21 GMT-0500 (Central Daylight Time)\ndate.toDateString(); // Tue May 12 2020\ndate.toTimeString(); // 18:50:21 GMT-0500 (Central Daylight Time)\ndate[Symbol.toPrimitive](\"string\"); // Tue May 12 2020 18:50:21 GMT-0500 (Central Daylight Time)\n\ndate.toISOString(); // 2020-05-12T23:50:21.817Z\ndate.toJSON(); // 2020-05-12T23:50:21.817Z\n\ndate.toUTCString(); // Tue, 12 May 2020 23:50:21 GMT\n\ndate.toLocaleString(); // 5/12/2020, 6:50:21 PM\ndate.toLocaleDateString(); // 5/12/2020\ndate.toLocaleTimeString(); // 6:50:21 PM\n```\n\n### [To get Date, Month and Year or Time](#to_get_date_month_and_year_or_time)\n\n```\nconst date = new Date(\"2000-01-17T16:45:30\");\nconst [month, day, year] = [\n  date.getMonth(),\n  date.getDate(),\n  date.getFullYear(),\n];\n// [0, 17, 2000] as month are 0-indexed\nconst [hour, minutes, seconds] = [\n  date.getHours(),\n  date.getMinutes(),\n  date.getSeconds(),\n];\n// [16, 45, 30]\n```\n\n### [Interpretation of two-digit years](#interpretation_of_two-digit_years)\n\n`new Date()` exhibits legacy undesirable, inconsistent behavior with two-digit year values; specifically, when a `new Date()` call is given a two-digit year value, that year value does not get treated as a literal year and used as-is but instead gets interpreted as a relative offset — in some cases as an offset from the year `1900`, but in other cases, as an offset from the year `2000`.\n\n```\nlet date = new Date(98, 1); // Sun Feb 01 1998 00:00:00 GMT+0000 (GMT)\ndate = new Date(22, 1); // Wed Feb 01 1922 00:00:00 GMT+0000 (GMT)\ndate = new Date(\"2/1/22\"); // Tue Feb 01 2022 00:00:00 GMT+0000 (GMT)\n\n// Legacy method; always interprets two-digit year values as relative to 1900\ndate.setYear(98);\ndate.toString(); // Sun Feb 01 1998 00:00:00 GMT+0000 (GMT)\ndate.setYear(22);\ndate.toString(); // Wed Feb 01 1922 00:00:00 GMT+0000 (GMT)\n```\n\nSo, to create and get dates between the years `0` and `99`, instead use the preferred [`setFullYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear) and [`getFullYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear) methods:.\n\n```\n// Preferred method; never interprets any value as being a relative offset,\n// but instead uses the year value as-is\ndate.setFullYear(98);\ndate.getFullYear(); // 98 (not 1998)\ndate.setFullYear(22);\ndate.getFullYear(); // 22 (not 1922, not 2022)\n```\n\n### [Calculating elapsed time](#calculating_elapsed_time)\n\nThe following examples show how to determine the elapsed time between two JavaScript dates in milliseconds.\n\nDue to the differing lengths of days (due to daylight saving changeover), months, and years, expressing elapsed time in units greater than hours, minutes, and seconds requires addressing a number of issues, and should be thoroughly researched before being attempted.\n\n```\n// Using Date objects\nconst start = Date.now();\n\n// The event to time goes here:\ndoSomethingForALongTime();\nconst end = Date.now();\nconst elapsed = end - start; // elapsed time in milliseconds\n```\n\n```\n// Using built-in methods\nconst start = new Date();\n\n// The event to time goes here:\ndoSomethingForALongTime();\nconst end = new Date();\nconst elapsed = end.getTime() - start.getTime(); // elapsed time in milliseconds\n```\n\n```\n// To test a function and get back its return\nfunction printElapsedTime(testFn) {\n  const startTime = Date.now();\n  const result = testFn();\n  const endTime = Date.now();\n\n  console.log(`Elapsed time: ${String(endTime - startTime)} milliseconds`);\n  return result;\n}\n\nconst yourFunctionReturn = printElapsedTime(yourFunction);\n```\n\n**Note:** In browsers that support the [Performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance_API)'s high-resolution time feature, [`Performance.now()`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/now) can provide more reliable and precise measurements of elapsed time than [`Date.now()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now).\n\n### [Get the number of seconds since the ECMAScript Epoch](#get_the_number_of_seconds_since_the_ecmascript_epoch)\n\n```\nconst seconds = Math.floor(Date.now() / 1000);\n```\n\nIn this case, it's important to return only an integer—so a simple division won't do. It's also important to only return actually elapsed seconds. (That's why this code uses [`Math.floor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor), and _not_ [`Math.round()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round).)\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date-objects](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Date - JavaScript | MDN",
    "description": "JavaScript Date objects represent a single moment in time in a platform-independent format. Date objects encapsulate an integral number that represents milliseconds since the midnight at the beginning of January 1, 1970, UTC (the epoch).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators",
    "markdown": "# Iterators and generators - JavaScript\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Meta_programming)\n\nIterators and Generators bring the concept of iteration directly into the core language and provide a mechanism for customizing the behavior of [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loops.\n\nFor details, see also:\n\n*   [Iteration protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n*   [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of)\n*   [`function*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*) and [`Generator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator)\n*   [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) and [`yield*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*)\n\n## [Iterators](#iterators)\n\nIn JavaScript an **iterator** is an object which defines a sequence and potentially a return value upon its termination.\n\nSpecifically, an iterator is any object which implements the [Iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol) by having a `next()` method that returns an object with two properties:\n\n[`value`](#value)\n\nThe next value in the iteration sequence.\n\n[`done`](#done)\n\nThis is `true` if the last value in the sequence has already been consumed. If `value` is present alongside `done`, it is the iterator's return value.\n\nOnce created, an iterator object can be iterated explicitly by repeatedly calling `next()`. Iterating over an iterator is said to consume the iterator, because it is generally only possible to do once. After a terminating value has been yielded additional calls to `next()` should continue to return `{done: true}`.\n\nThe most common iterator in JavaScript is the Array iterator, which returns each value in the associated array in sequence.\n\nWhile it is easy to imagine that all iterators could be expressed as arrays, this is not true. Arrays must be allocated in their entirety, but iterators are consumed only as necessary. Because of this, iterators can express sequences of unlimited size, such as the range of integers between `0` and [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity).\n\nHere is an example which can do just that. It allows creation of a simple range iterator which defines a sequence of integers from `start` (inclusive) to `end` (exclusive) spaced `step` apart. Its final return value is the size of the sequence it created, tracked by the variable `iterationCount`.\n\n```\nfunction makeRangeIterator(start = 0, end = Infinity, step = 1) {\n  let nextIndex = start;\n  let iterationCount = 0;\n\n  const rangeIterator = {\n    next() {\n      let result;\n      if (nextIndex < end) {\n        result = { value: nextIndex, done: false };\n        nextIndex += step;\n        iterationCount++;\n        return result;\n      }\n      return { value: iterationCount, done: true };\n    },\n  };\n  return rangeIterator;\n}\n```\n\nUsing the iterator then looks like this:\n\n```\nconst iter = makeRangeIterator(1, 10, 2);\n\nlet result = iter.next();\nwhile (!result.done) {\n  console.log(result.value); // 1 3 5 7 9\n  result = iter.next();\n}\n\nconsole.log(\"Iterated over sequence of size:\", result.value); // [5 numbers returned, that took interval in between: 0 to 10]\n```\n\n**Note:** It is not possible to know reflectively whether a particular object is an iterator. If you need to do this, use [Iterables](#iterables).\n\n## [Generator functions](#generator_functions)\n\nWhile custom iterators are a useful tool, their creation requires careful programming due to the need to explicitly maintain their internal state. **Generator functions** provide a powerful alternative: they allow you to define an iterative algorithm by writing a single function whose execution is not continuous. Generator functions are written using the [`function*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*) syntax.\n\nWhen called, generator functions do not initially execute their code. Instead, they return a special type of iterator, called a **Generator**. When a value is consumed by calling the generator's `next` method, the Generator function executes until it encounters the `yield` keyword.\n\nThe function can be called as many times as desired, and returns a new Generator each time. Each Generator may only be iterated once.\n\nWe can now adapt the example from above. The behavior of this code is identical, but the implementation is much easier to write and read.\n\n```\nfunction* makeRangeIterator(start = 0, end = Infinity, step = 1) {\n  let iterationCount = 0;\n  for (let i = start; i < end; i += step) {\n    iterationCount++;\n    yield i;\n  }\n  return iterationCount;\n}\n```\n\n## [Iterables](#iterables)\n\nAn object is **iterable** if it defines its iteration behavior, such as what values are looped over in a [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) construct. Some built-in types, such as [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) or [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), have a default iteration behavior, while other types (such as [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)) do not.\n\nIn order to be **iterable**, an object must implement the **@@iterator** method. This means that the object (or one of the objects up its [prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)) must have a property with a [`Symbol.iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator) key.\n\nIt may be possible to iterate over an iterable more than once, or only once. It is up to the programmer to know which is the case.\n\nIterables which can iterate only once (such as Generators) customarily return `this` from their **@@iterator** method, whereas iterables which can be iterated many times must return a new iterator on each invocation of **@@iterator**.\n\n```\nfunction* makeIterator() {\n  yield 1;\n  yield 2;\n}\n\nconst iter = makeIterator();\n\nfor (const itItem of iter) {\n  console.log(itItem);\n}\n\nconsole.log(iter[Symbol.iterator]() === iter); // true\n\n// This example show us generator(iterator) is iterable object,\n// which has the @@iterator method return the `iter` (itself),\n// and consequently, the it object can iterate only _once_.\n\n// If we change the @@iterator method of `iter` to a function/generator\n// which returns a new iterator/generator object, `iter`\n// can iterate many times\n\niter[Symbol.iterator] = function* () {\n  yield 2;\n  yield 1;\n};\n```\n\n### [User-defined iterables](#user-defined_iterables)\n\nYou can make your own iterables like this:\n\n```\nconst myIterable = {\n  *[Symbol.iterator]() {\n    yield 1;\n    yield 2;\n    yield 3;\n  },\n};\n```\n\nUser-defined iterables can be used in `for...of` loops or the spread syntax as usual.\n\n```\nfor (const value of myIterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n\n[...myIterable]; // [1, 2, 3]\n```\n\n### [Built-in iterables](#built-in_iterables)\n\n[`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray), [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) and [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) are all built-in iterables, because their prototype objects all have a [`Symbol.iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator) method.\n\n### [Syntaxes expecting iterables](#syntaxes_expecting_iterables)\n\nSome statements and expressions expect iterables. For example: the [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loops, [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax), [`yield*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*), and [destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) syntax.\n\n```\nfor (const value of [\"a\", \"b\", \"c\"]) {\n  console.log(value);\n}\n// \"a\"\n// \"b\"\n// \"c\"\n\n[...\"abc\"];\n// [\"a\", \"b\", \"c\"]\n\nfunction* gen() {\n  yield* [\"a\", \"b\", \"c\"];\n}\n\ngen().next();\n// { value: \"a\", done: false }\n\n[a, b, c] = new Set([\"a\", \"b\", \"c\"]);\na;\n// \"a\"\n```\n\n## [Advanced generators](#advanced_generators)\n\nGenerators compute their `yield`ed values _on demand_, which allows them to efficiently represent sequences that are expensive to compute (or even infinite sequences, as demonstrated above).\n\nThe [`next()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next) method also accepts a value, which can be used to modify the internal state of the generator. A value passed to `next()` will be received by `yield` .\n\n**Note:** A value passed to the _first_ invocation of `next()` is always ignored.\n\nHere is the fibonacci generator using `next(x)` to restart the sequence:\n\n```\nfunction* fibonacci() {\n  let current = 0;\n  let next = 1;\n  while (true) {\n    const reset = yield current;\n    [current, next] = [next, next + current];\n    if (reset) {\n      current = 0;\n      next = 1;\n    }\n  }\n}\n\nconst sequence = fibonacci();\nconsole.log(sequence.next().value); // 0\nconsole.log(sequence.next().value); // 1\nconsole.log(sequence.next().value); // 1\nconsole.log(sequence.next().value); // 2\nconsole.log(sequence.next().value); // 3\nconsole.log(sequence.next().value); // 5\nconsole.log(sequence.next().value); // 8\nconsole.log(sequence.next(true).value); // 0\nconsole.log(sequence.next().value); // 1\nconsole.log(sequence.next().value); // 1\nconsole.log(sequence.next().value); // 2\n```\n\nYou can force a generator to throw an exception by calling its [`throw()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/throw) method and passing the exception value it should throw. This exception will be thrown from the current suspended context of the generator, as if the `yield` that is currently suspended were instead a `throw value` statement.\n\nIf the exception is not caught from within the generator, it will propagate up through the call to `throw()`, and subsequent calls to `next()` will result in the `done` property being `true`.\n\nGenerators have a [`return()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/return) method that returns the given value and finishes the generator itself.\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Meta_programming)",
    "title": "Iterators and generators - JavaScript | MDN",
    "description": "Iterators and Generators bring the concept of iteration directly into the core language and provide a mechanism for customizing the behavior of for...of loops.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete",
    "markdown": "# delete - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`delete`** operator removes a property from an object. If the property's value is an object and there are no more references to the object, the object held by that property is eventually released automatically.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ndelete object.property\ndelete object[property]\n```\n\n**Note:** The syntax allows a wider range of expressions following the `delete` operator, but only the above forms lead to meaningful behaviors.\n\n### [Parameters](#parameters)\n\n[`object`](#object)\n\nThe name of an object, or an expression evaluating to an object.\n\n[`property`](#property)\n\nThe property to delete.\n\n### [Return value](#return_value)\n\n`true` for all cases except when the property is an [own](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn) [non-configurable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#configurable_attribute) property, in which case `false` is returned in non-strict mode.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) if the property is an own non-configurable property.\n\n[`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)\n\nThrown if `object` is [`super`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super).\n\n## [Description](#description)\n\nThe `delete` operator has the same [precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence) as other unary operators like [`typeof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof). Therefore, it accepts any expression formed by higher-precedence operators. However, the following forms lead to early syntax errors in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode):\n\n```\ndelete identifier;\ndelete object.#privateProperty;\n```\n\nBecause [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) are automatically in strict mode, and [private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) can only be legally referenced in class bodies, this means private properties can never be deleted. While `delete identifier` [may work](#deleting_global_properties) if `identifier` refers to a configurable property of the global object, you should avoid this form and prefix it with [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) instead.\n\nWhile other expressions are accepted, they don't lead to meaningful behaviors:\n\n```\ndelete console.log(1);\n// Logs 1, returns true, but nothing deleted\n```\n\nThe `delete` operator removes a given property from an object. On successful deletion, it will return `true`, else `false` will be returned. Unlike what common belief suggests (perhaps due to other programming languages like [delete in C++](https://docs.microsoft.com/cpp/cpp/delete-operator-cpp?view=msvc-170)), the `delete` operator has **nothing** to do with directly freeing memory. Memory management is done indirectly via breaking references. See the [memory management](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_management) page for more details.\n\nIt is important to consider the following scenarios:\n\n*   If the property which you are trying to delete does not exist, `delete` will not have any effect and will return `true`.\n*   `delete` only has an effect on own properties. If a property with the same name exists on the object's prototype chain, then after deletion, the object will use the property from the prototype chain.\n*   Non-configurable properties cannot be removed. This includes properties of built-in objects like [`Math`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math), [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) and properties that are created as non-configurable with methods like [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty).\n*   Deleting variables, including function parameters, never works. `delete variable` will throw a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) in strict mode, and will have no effect in non-strict mode.\n    *   Any variable declared with [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var) cannot be deleted from the global scope or from a function's scope, because while they may be attached to the [global object](https://developer.mozilla.org/en-US/docs/Glossary/Global_object), they are not configurable.\n    *   Any variable declared with [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) or [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) cannot be deleted from the scope within which they were defined, because they are not attached to an object.\n\n## [Examples](#examples)\n\n### [Using delete](#using_delete)\n\n**Note:** The following example uses non-strict-mode only features, like implicitly creating global variables and deleting identifiers, which are forbidden in strict mode.\n\n```\n// Creates the property empCount on the global scope.\n// Since we are using var, this is marked as non-configurable.\nvar empCount = 43;\n\n// Creates the property EmployeeDetails on the global scope.\n// Since it was defined without \"var\", it is marked configurable.\nEmployeeDetails = {\n  name: \"xyz\",\n  age: 5,\n  designation: \"Developer\",\n};\n\n// delete can be used to remove properties from objects.\ndelete EmployeeDetails.name; // returns true\n\n// Even when the property does not exist, delete returns \"true\".\ndelete EmployeeDetails.salary; // returns true\n\n// EmployeeDetails is a property of the global scope.\ndelete EmployeeDetails; // returns true\n\n// On the contrary, empCount is not configurable\n// since var was used.\ndelete empCount; // returns false\n\n// delete also does not affect built-in static properties\n// that are non-configurable.\ndelete Math.PI; // returns false\n\nfunction f() {\n  var z = 44;\n\n  // delete doesn't affect local variable names\n  delete z; // returns false\n}\n```\n\n### [delete and the prototype chain](#delete_and_the_prototype_chain)\n\nIn the following example, we delete an own property of an object while a property with the same name is available on the prototype chain:\n\n```\nfunction Foo() {\n  this.bar = 10;\n}\n\nFoo.prototype.bar = 42;\n\nconst foo = new Foo();\n\n// foo.bar is associated with the\n// own property.\nconsole.log(foo.bar); // 10\n\n// Delete the own property within the\n// foo object.\ndelete foo.bar; // returns true\n\n// foo.bar is still available in the\n// prototype chain.\nconsole.log(foo.bar); // 42\n\n// Delete the property on the prototype.\ndelete Foo.prototype.bar; // returns true\n\n// The \"bar\" property can no longer be\n// inherited from Foo since it has been\n// deleted.\nconsole.log(foo.bar); // undefined\n```\n\n### [Deleting array elements](#deleting_array_elements)\n\nWhen you delete an array element, the array `length` is not affected. This holds even if you delete the last element of the array.\n\nWhen the `delete` operator removes an array element, that element is no longer in the array. In the following example, `trees[3]` is removed with `delete`.\n\n```\nconst trees = [\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"];\ndelete trees[3];\nconsole.log(3 in trees); // false\n```\n\nThis creates a [sparse array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays) with an empty slot. If you want an array element to exist but have an undefined value, use the `undefined` value instead of the `delete` operator. In the following example, `trees[3]` is assigned the value `undefined`, but the array element still exists:\n\n```\nconst trees = [\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"];\ntrees[3] = undefined;\nconsole.log(3 in trees); // true\n```\n\nIf instead, you want to remove an array element by changing the contents of the array, use the [`splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) method. In the following example, `trees[3]` is removed from the array completely using [`splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice):\n\n```\nconst trees = [\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"];\ntrees.splice(3, 1);\nconsole.log(trees); // [\"redwood\", \"bay\", \"cedar\", \"maple\"]\n```\n\n### [Deleting non-configurable properties](#deleting_non-configurable_properties)\n\nWhen a property is marked as non-configurable, `delete` won't have any effect, and will return `false`. In strict mode, this will raise a `TypeError`.\n\n```\nconst Employee = {};\nObject.defineProperty(Employee, \"name\", { configurable: false });\n\nconsole.log(delete Employee.name); // returns false\n```\n\n[`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var) creates non-configurable properties that cannot be deleted with the `delete` operator:\n\n```\n// Since \"nameOther\" is added using with the\n// var keyword, it is marked as non-configurable\nvar nameOther = \"XYZ\";\n\n// We can access this global property using:\nObject.getOwnPropertyDescriptor(globalThis, \"nameOther\");\n// {\n//   value: \"XYZ\",\n//   writable: true,\n//   enumerable: true,\n//   configurable: false\n// }\n\ndelete globalThis.nameOther; // return false\n```\n\nIn strict mode, this would raise an exception.\n\n### [Deleting global properties](#deleting_global_properties)\n\nIf a global property is configurable (for example, via direct property assignment), it can be deleted, and subsequent references to them as global variables will produce a [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError).\n\n```\nglobalThis.globalVar = 1;\nconsole.log(globalVar); // 1\n// In non-strict mode, you can use `delete globalVar` as well\ndelete globalThis.globalVar;\nconsole.log(globalVar); // ReferenceError: globalVar is not defined\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-delete-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-delete-operator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "delete - JavaScript | MDN",
    "description": "The delete operator removes a property from an object. If the property's value is an object and there are no more references to the object, the object held by that property is eventually released automatically.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry",
    "markdown": "# FinalizationRegistry - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nA **`FinalizationRegistry`** object lets you request a callback when a value is garbage-collected.\n\n## [Description](#description)\n\n`FinalizationRegistry` provides a way to request that a _cleanup callback_ get called at some point when a value registered with the registry has been _reclaimed_ (garbage-collected). (Cleanup callbacks are sometimes called _finalizers_.)\n\n**Note:** Cleanup callbacks should not be used for essential program logic. See [Notes on cleanup callbacks](#notes_on_cleanup_callbacks) for details.\n\nYou create the registry passing in the callback:\n\n```\nconst registry = new FinalizationRegistry((heldValue) => {\n  // …\n});\n```\n\nThen you register any value you want a cleanup callback for by calling the `register` method, passing in the value and a _held value_ for it:\n\n```\nregistry.register(target, \"some value\");\n```\n\nThe registry does not keep a strong reference to the value, as that would defeat the purpose (if the registry held it strongly, the value would never be reclaimed). In JavaScript, objects and [non-registered symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) are garbage collectable, so they can be registered in a `FinalizationRegistry` object as the target or the token.\n\nIf `target` is reclaimed, your cleanup callback may be called at some point with the _held value_ you provided for it (`\"some value\"` in the above). The held value can be any value you like: a primitive or an object, even `undefined`. If the held value is an object, the registry keeps a _strong_ reference to it (so it can pass it to your cleanup callback later).\n\nIf you might want to unregister a registered target value later, you pass a third value, which is the _unregistration token_ you'll use later when calling the registry's `unregister` function to unregister the value. The registry only keeps a weak reference to the unregister token.\n\nIt's common to use the target value itself as the unregister token, which is just fine:\n\n```\nregistry.register(target, \"some value\", target);\n// …\n\n// some time later, if you don't care about `target` anymore, unregister it\nregistry.unregister(target);\n```\n\nIt doesn't have to be the same value, though; it can be a different one:\n\n```\nregistry.register(target, \"some value\", token);\n// …\n\n// some time later\nregistry.unregister(token);\n```\n\n### [Avoid where possible](#avoid_where_possible)\n\nCorrect use of `FinalizationRegistry` takes careful thought, and it's best avoided if possible. It's also important to avoid relying on any specific behaviors not guaranteed by the specification. When, how, and whether garbage collection occurs is down to the implementation of any given JavaScript engine. Any behavior you observe in one engine may be different in another engine, in another version of the same engine, or even in a slightly different situation with the same version of the same engine. Garbage collection is a hard problem that JavaScript engine implementers are constantly refining and improving their solutions to.\n\nHere are some specific points included by the authors in the [proposal](https://github.com/tc39/proposal-weakrefs) that introduced `FinalizationRegistry`:\n\n> [Garbage collectors](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)) are complicated. If an application or library depends on GC cleaning up a WeakRef or calling a finalizer \\[cleanup callback\\] in a timely, predictable manner, it's likely to be disappointed: the cleanup may happen much later than expected, or not at all. Sources of variability include:\n> \n> *   One object might be garbage-collected much sooner than another object, even if they become unreachable at the same time, e.g., due to generational collection.\n> *   Garbage collection work can be split up over time using incremental and concurrent techniques.\n> *   Various runtime heuristics can be used to balance memory usage, responsiveness.\n> *   The JavaScript engine may hold references to things which look like they are unreachable (e.g., in closures, or inline caches).\n> *   Different JavaScript engines may do these things differently, or the same engine may change its algorithms across versions.\n> *   Complex factors may lead to objects being held alive for unexpected amounts of time, such as use with certain APIs.\n\n### [Notes on cleanup callbacks](#notes_on_cleanup_callbacks)\n\n*   Developers shouldn't rely on cleanup callbacks for essential program logic. Cleanup callbacks may be useful for reducing memory usage across the course of a program, but are unlikely to be useful otherwise.\n*   If your code has just registered a value to the registry, that target will not be reclaimed until the end of the current JavaScript [job](https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#job). See [notes on WeakRefs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef#notes_on_weakrefs) for details.\n*   A conforming JavaScript implementation, even one that does garbage collection, is not required to call cleanup callbacks. When and whether it does so is entirely down to the implementation of the JavaScript engine. When a registered object is reclaimed, any cleanup callbacks for it may be called then, or some time later, or not at all.\n*   It's likely that major implementations will call cleanup callbacks at some point during execution, but those calls may be substantially after the related object was reclaimed. Furthermore, if there is an object registered in two registries, there is no guarantee that the two callbacks are called next to each other — one may be called and the other never called, or the other may be called much later.\n*   There are also situations where even implementations that normally call cleanup callbacks are unlikely to call them:\n    *   When the JavaScript program shuts down entirely (for instance, closing a tab in a browser).\n    *   When the `FinalizationRegistry` instance itself is no longer reachable by JavaScript code.\n*   If the target of a `WeakRef` is also in a `FinalizationRegistry`, the `WeakRef`'s target is cleared at the same time or before any cleanup callback associated with the registry is called; if your cleanup callback calls `deref` on a `WeakRef` for the object, it will receive `undefined`.\n\n## [Constructor](#constructor)\n\n[`FinalizationRegistry()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/FinalizationRegistry)\n\nCreates a new `FinalizationRegistry` object.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `FinalizationRegistry.prototype` and shared by all `FinalizationRegistry` instances.\n\n[`FinalizationRegistry.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `FinalizationRegistry` instances, the initial value is the [`FinalizationRegistry`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/FinalizationRegistry) constructor.\n\n[`FinalizationRegistry.prototype[@@toStringTag]`](#finalizationregistry.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"FinalizationRegistry\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`FinalizationRegistry.prototype.register()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/register)\n\nRegisters an object with the registry in order to get a cleanup callback when/if the object is garbage-collected.\n\n[`FinalizationRegistry.prototype.unregister()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/unregister)\n\nUnregisters an object from the registry.\n\n## [Examples](#examples)\n\n### [Creating a new registry](#creating_a_new_registry)\n\nYou create the registry passing in the callback:\n\n```\nconst registry = new FinalizationRegistry((heldValue) => {\n  // …\n});\n```\n\n### [Registering objects for cleanup](#registering_objects_for_cleanup)\n\nThen you register any objects you want a cleanup callback for by calling the `register` method, passing in the object and a _held value_ for it:\n\n```\nregistry.register(theObject, \"some value\");\n```\n\n### [Callbacks never called synchronously](#callbacks_never_called_synchronously)\n\nNo matter how much pressure you put on the garbage collector, the cleanup callback will never be called synchronously. The object may be reclaimed synchronously, but the callback will always be called sometime after the current job finishes:\n\n```\nlet counter = 0;\nconst registry = new FinalizationRegistry(() => {\n  console.log(`Array gets garbage collected at ${counter}`);\n});\n\nregistry.register([\"foo\"]);\n\n(function allocateMemory() {\n  // Allocate 50000 functions — a lot of memory!\n  Array.from({ length: 50000 }, () => () => {});\n  if (counter > 5000) return;\n  counter++;\n  allocateMemory();\n})();\n\nconsole.log(\"Main job ends\");\n// Logs:\n// Main job ends\n// Array gets garbage collected at 5001\n```\n\nHowever, if you allow a little break between each allocation, the callback may be called sooner:\n\n```\nlet arrayCollected = false;\nlet counter = 0;\nconst registry = new FinalizationRegistry(() => {\n  console.log(`Array gets garbage collected at ${counter}`);\n  arrayCollected = true;\n});\n\nregistry.register([\"foo\"]);\n\n(function allocateMemory() {\n  // Allocate 50000 functions — a lot of memory!\n  Array.from({ length: 50000 }, () => () => {});\n  if (counter > 5000 || arrayCollected) return;\n  counter++;\n  // Use setTimeout to make each allocateMemory a different job\n  setTimeout(allocateMemory);\n})();\n\nconsole.log(\"Main job ends\");\n```\n\nThere's no guarantee that the callback will be called sooner or if it will be called at all, but there's a possibility that the logged message has a counter value smaller than 5000.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-finalization-registry-objects](https://tc39.es/ecma262/multipage/managing-memory.html#sec-finalization-registry-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "FinalizationRegistry - JavaScript | MDN",
    "description": "A FinalizationRegistry object lets you request a callback when a value is garbage-collected.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Meta_programming",
    "markdown": "# Meta programming - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules)\n\nThe [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) and [`Reflect`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect) objects allow you to intercept and define custom behavior for fundamental language operations (e.g. property lookup, assignment, enumeration, function invocation, etc.). With the help of these two objects you are able to program at the meta level of JavaScript.\n\n## [Proxies](#proxies)\n\n[`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) objects allow you to intercept certain operations and to implement custom behaviors.\n\nFor example, getting a property on an object:\n\n```\nconst handler = {\n  get(target, name) {\n    return name in target ? target[name] : 42;\n  },\n};\n\nconst p = new Proxy({}, handler);\np.a = 1;\nconsole.log(p.a, p.b); // 1, 42\n```\n\nThe `Proxy` object defines a `target` (an empty object here) and a `handler` object, in which a `get` _trap_ is implemented. Here, an object that is proxied will not return `undefined` when getting undefined properties, but will instead return the number `42`.\n\nAdditional examples are available on the [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) reference page.\n\n### [Terminology](#terminology)\n\nThe following terms are used when talking about the functionality of proxies.\n\n[handler](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy)\n\nPlaceholder object which contains traps.\n\n[traps](#traps)\n\nThe methods that provide property access. (This is analogous to the concept of _traps_ in operating systems.)\n\n[target](#target)\n\nObject which the proxy virtualizes. It is often used as storage backend for the proxy. Invariants (semantics that remain unchanged) regarding object non-extensibility or non-configurable properties are verified against the target.\n\n[invariants](#invariants)\n\nSemantics that remain unchanged when implementing custom operations are called _invariants_. If you violate the invariants of a handler, a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) will be thrown.\n\n## [Handlers and traps](#handlers_and_traps)\n\n## [Revocable `Proxy`](#revocable_proxy)\n\nThe [`Proxy.revocable()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable) method is used to create a revocable `Proxy` object. This means that the proxy can be revoked via the function `revoke` and switches the proxy off.\n\nAfterwards, any operation on the proxy leads to a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n```\nconst revocable = Proxy.revocable(\n  {},\n  {\n    get(target, name) {\n      return `[[${name}]]`;\n    },\n  },\n);\nconst proxy = revocable.proxy;\nconsole.log(proxy.foo); // \"[[foo]]\"\n\nrevocable.revoke();\n\nconsole.log(proxy.foo); // TypeError: Cannot perform 'get' on a proxy that has been revoked\nproxy.foo = 1; // TypeError: Cannot perform 'set' on a proxy that has been revoked\ndelete proxy.foo; // TypeError: Cannot perform 'deleteProperty' on a proxy that has been revoked\nconsole.log(typeof proxy); // \"object\", typeof doesn't trigger any trap\n```\n\n## [Reflection](#reflection)\n\n[`Reflect`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect) is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of the [proxy handler's](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy).\n\n`Reflect` is not a function object.\n\n`Reflect` helps with forwarding default operations from the handler to the `target`.\n\nWith [`Reflect.has()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has) for example, you get the [`in` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) as a function:\n\n```\nReflect.has(Object, \"assign\"); // true\n```\n\n### [A better apply() function](#a_better_apply_function)\n\nBefore `Reflect`, you typically use the [`Function.prototype.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) method to call a function with a given `this` value and `arguments` provided as an array (or an [array-like object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects)).\n\n```\nFunction.prototype.apply.call(Math.floor, undefined, [1.75]);\n```\n\nWith [`Reflect.apply`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply) this becomes less verbose and easier to understand:\n\n```\nReflect.apply(Math.floor, undefined, [1.75]);\n// 1\n\nReflect.apply(String.fromCharCode, undefined, [104, 101, 108, 108, 111]);\n// \"hello\"\n\nReflect.apply(RegExp.prototype.exec, /ab/, [\"confabulation\"]).index;\n// 4\n\nReflect.apply(\"\".charAt, \"ponies\", [3]);\n// \"i\"\n```\n\n### [Checking if property definition has been successful](#checking_if_property_definition_has_been_successful)\n\nWith [`Object.defineProperty`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty), which returns an object if successful, or throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) otherwise, you would use a [`try...catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) block to catch any error that occurred while defining a property. Because [`Reflect.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty) returns a Boolean success status, you can just use an [`if...else`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) block here:\n\n```\nif (Reflect.defineProperty(target, property, attributes)) {\n  // success\n} else {\n  // failure\n}\n```\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators)\n*   [Next »](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules)",
    "title": "Meta programming - JavaScript | MDN",
    "description": "The Proxy and Reflect objects allow you to intercept and define custom behavior for fundamental language operations (e.g. property lookup, assignment, enumeration, function invocation, etc.). With the help of these two objects you are able to program at the meta level of JavaScript.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "markdown": "# Reflect - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Reflect`** namespace object contains static methods for invoking interceptable JavaScript object internal methods. The methods are the same as those of [proxy handlers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy).\n\n## [Description](#description)\n\nUnlike most global objects, `Reflect` is not a constructor. You cannot use it with the [`new` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) or invoke the `Reflect` object as a function. All properties and methods of `Reflect` are static (just like the [`Math`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math) object).\n\nThe `Reflect` object provides a collection of static functions which have the same names as the [proxy handler methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy).\n\nThe major use case of `Reflect` is to provide default forwarding behavior in `Proxy` handler traps. A [trap](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#terminology) is used to intercept an operation on an object — it provides a custom implementation for an [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods). The `Reflect` API is used to invoke the corresponding internal method. For example, the code below creates a proxy `p` with a [`deleteProperty`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty) trap that intercepts the `[[Delete]]` internal method. `Reflect.deleteProperty()` is used to invoke the default `[[Delete]]` behavior on `targetObject` directly. You can replace it with [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete), but using `Reflect` saves you from having to remember the syntax that each internal method corresponds to.\n\n```\nconst p = new Proxy(\n  {},\n  {\n    deleteProperty(targetObject, property) {\n      // Custom functionality: log the deletion\n      console.log(\"Deleting property:\", property);\n\n      // Execute the default introspection behavior\n      return Reflect.deleteProperty(targetObject, property);\n    },\n  },\n);\n```\n\nThe `Reflect` methods also allow finer control of how the internal method is invoked. For example, [`Reflect.construct()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct) is the only way to construct a target function with a specific [`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target) value. If you use the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator to invoke a function, the `new.target` value is always the function itself. This has important effects with [subclassing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_using_reflect.construct). For another example, [`Reflect.get()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get) allows you to run a [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) with a custom `this` value, while [property accessors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) always use the current object as the `this` value.\n\nNearly every `Reflect` method's behavior can be done with some other syntax or method. Some of these methods have corresponding static methods of the same name on [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), although they do have some subtle differences. For the exact differences, see the description for each `Reflect` method.\n\n## [Static properties](#static_properties)\n\n[`Reflect[@@toStringTag]`](#reflecttostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Reflect\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Static methods](#static_methods)\n\n[`Reflect.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply)\n\nCalls a `target` function with arguments as specified by the `argumentsList` parameter. See also [`Function.prototype.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply).\n\n[`Reflect.construct()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct)\n\nThe [`new` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) as a function. Equivalent to calling `new target(...argumentsList)`. Also provides the option to specify a different prototype.\n\n[`Reflect.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty)\n\nSimilar to [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty). Returns a boolean that is `true` if the property was successfully defined.\n\n[`Reflect.deleteProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty)\n\nThe [`delete` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) as a function. Equivalent to calling `delete target[propertyKey]`.\n\n[`Reflect.get()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get)\n\nReturns the value of the property. Works like getting a property from an object (`target[propertyKey]`) as a function.\n\n[`Reflect.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor)\n\nSimilar to [`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor). Returns a property descriptor of the given property if it exists on the object, [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) otherwise.\n\n[`Reflect.getPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf)\n\nSame as [`Object.getPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf).\n\n[`Reflect.has()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has)\n\nReturns a boolean indicating whether the target has the property. Either as own or inherited. Works like the [`in` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) as a function.\n\n[`Reflect.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible)\n\nSame as [`Object.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible). Returns a boolean that is `true` if the target is extensible.\n\n[`Reflect.ownKeys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys)\n\nReturns an array of the target object's own (not inherited) property keys.\n\n[`Reflect.preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions)\n\nSimilar to [`Object.preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions). Returns a boolean that is `true` if the update was successful.\n\n[`Reflect.set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set)\n\nA function that assigns values to properties. Returns a boolean that is `true` if the update was successful.\n\n[`Reflect.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf)\n\nA function that sets the prototype of an object. Returns a boolean that is `true` if the update was successful.\n\n## [Examples](#examples)\n\n### [Detecting whether an object contains certain properties](#detecting_whether_an_object_contains_certain_properties)\n\n```\nconst duck = {\n  name: \"Maurice\",\n  color: \"white\",\n  greeting() {\n    console.log(`Quaaaack! My name is ${this.name}`);\n  },\n};\n\nReflect.has(duck, \"color\");\n// true\nReflect.has(duck, \"haircut\");\n// false\n```\n\n### [Returning the object's own keys](#returning_the_objects_own_keys)\n\n```\nReflect.ownKeys(duck);\n// [ \"name\", \"color\", \"greeting\" ]\n```\n\n### [Adding a new property to the object](#adding_a_new_property_to_the_object)\n\n```\nReflect.set(duck, \"eyes\", \"black\");\n// returns \"true\" if successful\n// \"duck\" now contains the property \"eyes: 'black'\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-reflect-object](https://tc39.es/ecma262/multipage/reflection.html#sec-reflect-object) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Reflect - JavaScript | MDN",
    "description": "The Reflect namespace object contains static methods for invoking interceptable JavaScript object internal methods. The methods are the same as those of proxy handlers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array",
    "markdown": "# Float16Array - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Float16Array`** typed array represents an array of 16-bit floating point numbers in the platform byte order. If control over byte order is needed, use [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instead. The contents are initialized to `0` unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Float16Array` is a subclass of the hidden [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) class.\n\n**Note:** Float16 support is not universal, both in the JavaScript API and the underlying CPU architecture. Using it may result in slower performance on some platforms. It is intended for interacting with highly optimized and performance-sensitive systems such as [float-backed canvases](https://github.com/w3c/ColorWeb-CG/blob/main/canvas_float.md), WebGPU, WebGL, and deep learning models including [stable diffusion](https://github.com/huggingface/blog/blob/main/stable_diffusion.md).\n\n## [Constructor](#constructor)\n\n[`Float16Array()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array/Float16Array)\n\nCreates a new `Float16Array` object.\n\n## [Static properties](#static_properties)\n\n_Also inherits static properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n[`Float16Array.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `2` in the case of `Float16Array`.\n\n## [Static methods](#static_methods)\n\n_Inherits static methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\nThese properties are defined on `Float16Array.prototype` and shared by all `Float16Array` instances.\n\n[`Float16Array.prototype.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `2` in the case of a `Float16Array`.\n\n[`Float16Array.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Float16Array` instances, the initial value is the [`Float16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array/Float16Array) constructor.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Examples](#examples)\n\n### [Different ways to create a Float16Array](#different_ways_to_create_a_float16array)\n\n```\n// From a length\nconst float16 = new Float16Array(2);\nfloat16[0] = 42;\nconsole.log(float16[0]); // 42\nconsole.log(float16.length); // 2\nconsole.log(float16.BYTES_PER_ELEMENT); // 2\n\n// From an array\nconst x = new Float16Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Float16Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(32);\nconst z = new Float16Array(buffer, 4, 4);\nconsole.log(z.byteOffset); // 4\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst float16FromIterable = new Float16Array(iterable);\nconsole.log(float16FromIterable);\n// Float16Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Float16Array  <br>\\# sec-float16array](https://tc39.es/proposal-float16array/#sec-float16array) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Float16Array - JavaScript | MDN",
    "description": "The Float16Array typed array represents an array of 16-bit floating point numbers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI",
    "markdown": "# decodeURI() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`decodeURI()`** function decodes a Uniform Resource Identifier (URI) previously created by [`encodeURI()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI) or a similar routine.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`encodedURI`](#encodeduri)\n\nA complete, encoded Uniform Resource Identifier.\n\n### [Return value](#return_value)\n\nA new string representing the unencoded version of the given encoded Uniform Resource Identifier (URI).\n\n### [Exceptions](#exceptions)\n\n[`URIError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError)\n\nThrown if `encodedURI` contains a `%` not followed by two hexadecimal digits, or if the escape sequence does not encode a valid UTF-8 character.\n\n## [Description](#description)\n\n`decodeURI()` is a function property of the global object.\n\nThe `decodeURI()` function decodes the URI by treating each escape sequence in the form `%XX` as one UTF-8 code unit (one byte). In UTF-8, the number of leading 1 bits in the first byte, which may be 0 (for 1-byte [ASCII](https://developer.mozilla.org/en-US/docs/Glossary/ASCII) characters), 2, 3, or 4, indicates the number of bytes in the character. So by reading the first escape sequence, `decodeURI()` can determine how many more escape sequences to consume. If `decodeURI()` fails to find the expected number of sequences, or if the escape sequences don't encode a valid UTF-8 character, a [`URIError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError) is thrown.\n\n`decodeURI()` decodes all escape sequences, but if the escape sequence encodes one of the following characters, the escape sequence is preserved in the output string (because they are part of the URI syntax):\n\n; / ? : @ & = + $ , #\n\n## [Examples](#examples)\n\n### [Decoding a Cyrillic URL](#decoding_a_cyrillic_url)\n\n```\ndecodeURI(\n  \"https://developer.mozilla.org/ru/docs/JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\",\n);\n// \"https://developer.mozilla.org/ru/docs/JavaScript_шеллы\"\n```\n\n### [decodeURI() vs. decodeURIComponent()](#decodeuri_vs._decodeuricomponent)\n\n`decodeURI()` assumes the input is a full URI, so it does not decode characters that are part of the URI syntax.\n\n```\ndecodeURI(\n  \"https://developer.mozilla.org/docs/JavaScript%3A%20a_scripting_language\",\n);\n// \"https://developer.mozilla.org/docs/JavaScript%3A a_scripting_language\"\n\ndecodeURIComponent(\n  \"https://developer.mozilla.org/docs/JavaScript%3A%20a_scripting_language\",\n);\n// \"https://developer.mozilla.org/docs/JavaScript: a_scripting_language\"\n```\n\n### [Catching errors](#catching_errors)\n\n```\ntry {\n  const a = decodeURI(\"%E0%A4%A\");\n} catch (e) {\n  console.error(e);\n}\n\n// URIError: malformed URI sequence\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-decodeuri-encodeduri](https://tc39.es/ecma262/multipage/global-object.html#sec-decodeuri-encodeduri) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "decodeURI() - JavaScript | MDN",
    "description": "The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or a similar routine.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "markdown": "# ReferenceError - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`ReferenceError`** object represents an error when a variable that doesn't exist (or hasn't yet been initialized) in the current scope is referenced.\n\n`ReferenceError` is a [serializable object](https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object), so it can be cloned with [`structuredClone()`](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone) or copied between [Workers](https://developer.mozilla.org/en-US/docs/Web/API/Worker) using [`postMessage()`](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage \"postMessage()\").\n\n`ReferenceError` is a subclass of [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n## [Constructor](#constructor)\n\n[`ReferenceError()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError/ReferenceError)\n\nCreates a new `ReferenceError` object.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)_.\n\nThese properties are defined on `ReferenceError.prototype` and shared by all `ReferenceError` instances.\n\n[`ReferenceError.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `ReferenceError` instances, the initial value is the [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError/ReferenceError) constructor.\n\n[`ReferenceError.prototype.name`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name)\n\nRepresents the name for the type of error. For `ReferenceError.prototype.name`, the initial value is `\"ReferenceError\"`.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)_.\n\n## [Examples](#examples)\n\n### [Catching a ReferenceError](#catching_a_referenceerror)\n\n```\ntry {\n  let a = undefinedVariable;\n} catch (e) {\n  console.log(e instanceof ReferenceError); // true\n  console.log(e.message); // \"undefinedVariable is not defined\"\n  console.log(e.name); // \"ReferenceError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n### [Creating a ReferenceError](#creating_a_referenceerror)\n\n```\ntry {\n  throw new ReferenceError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof ReferenceError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"ReferenceError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-native-error-types-used-in-this-standard-referenceerror](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-native-error-types-used-in-this-standard-referenceerror) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "ReferenceError - JavaScript | MDN",
    "description": "The ReferenceError object represents an error when a variable that doesn't exist (or hasn't yet been initialized) in the current scope is referenced.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "markdown": "# Float32Array - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Float32Array`** typed array represents an array of 32-bit floating point numbers in the platform byte order. If control over byte order is needed, use [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instead. The contents are initialized to `0` unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Float32Array` is a subclass of the hidden [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) class.\n\n## [Constructor](#constructor)\n\n[`Float32Array()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array/Float32Array)\n\nCreates a new `Float32Array` object.\n\n## [Static properties](#static_properties)\n\n_Also inherits static properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n[`Float32Array.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `4` in the case of `Float32Array`.\n\n## [Static methods](#static_methods)\n\n_Inherits static methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\nThese properties are defined on `Float32Array.prototype` and shared by all `Float32Array` instances.\n\n[`Float32Array.prototype.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `4` in the case of a `Float32Array`.\n\n[`Float32Array.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Float32Array` instances, the initial value is the [`Float32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array/Float32Array) constructor.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Examples](#examples)\n\n### [Different ways to create a Float32Array](#different_ways_to_create_a_float32array)\n\n```\n// From a length\nconst float32 = new Float32Array(2);\nfloat32[0] = 42;\nconsole.log(float32[0]); // 42\nconsole.log(float32.length); // 2\nconsole.log(float32.BYTES_PER_ELEMENT); // 4\n\n// From an array\nconst x = new Float32Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Float32Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(32);\nconst z = new Float32Array(buffer, 4, 4);\nconsole.log(z.byteOffset); // 4\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst float32FromIterable = new Float32Array(iterable);\nconsole.log(float32FromIterable);\n// Float32Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# table-49](https://tc39.es/ecma262/multipage/indexed-collections.html#table-49) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Float32Array - JavaScript | MDN",
    "description": "The Float32Array typed array represents an array of 32-bit floating point numbers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent",
    "markdown": "# decodeURIComponent() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`decodeURIComponent()`** function decodes a Uniform Resource Identifier (URI) component previously created by [`encodeURIComponent()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) or by a similar routine.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ndecodeURIComponent(encodedURI)\n```\n\n### [Parameters](#parameters)\n\n[`encodedURI`](#encodeduri)\n\nAn encoded component of a Uniform Resource Identifier.\n\n### [Return value](#return_value)\n\nA new string representing the decoded version of the given encoded Uniform Resource Identifier (URI) component.\n\n### [Exceptions](#exceptions)\n\n[`URIError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError)\n\nThrown if `encodedURI` contains a `%` not followed by two hexadecimal digits, or if the escape sequence does not encode a valid UTF-8 character.\n\n## [Description](#description)\n\n`decodeURIComponent()` is a function property of the global object.\n\n`decodeURIComponent()` uses the same decoding algorithm as described in [`decodeURI()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI). It decodes _all_ escape sequences, including those that are not created by [`encodeURIComponent`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent), like `-.!~*'()`.\n\n## [Examples](#examples)\n\n### [Decoding a Cyrillic URL component](#decoding_a_cyrillic_url_component)\n\n```\ndecodeURIComponent(\"JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\");\n// \"JavaScript_шеллы\"\n```\n\n### [Catching errors](#catching_errors)\n\n```\ntry {\n  const a = decodeURIComponent(\"%E0%A4%A\");\n} catch (e) {\n  console.error(e);\n}\n\n// URIError: malformed URI sequence\n```\n\n### [Decoding query parameters from a URL](#decoding_query_parameters_from_a_url)\n\n`decodeURIComponent()` cannot be used directly to parse query parameters from a URL. It needs a bit of preparation.\n\n```\nfunction decodeQueryParam(p) {\n  return decodeURIComponent(p.replace(/\\+/g, \" \"));\n}\n\ndecodeQueryParam(\"search+query%20%28correct%29\");\n// 'search query (correct)'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-decodeuricomponent-encodeduricomponent](https://tc39.es/ecma262/multipage/global-object.html#sec-decodeuricomponent-encodeduricomponent) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "decodeURIComponent() - JavaScript | MDN",
    "description": "The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent() or by a similar routine.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",
    "markdown": "# Destructuring assignment - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **destructuring assignment** syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nconst [a, b] = array;\nconst [a, , b] = array;\nconst [a = aDefault, b] = array;\nconst [a, b, ...rest] = array;\nconst [a, , b, ...rest] = array;\nconst [a, b, ...{ pop, push }] = array;\nconst [a, b, ...[c, d]] = array;\n\nconst { a, b } = obj;\nconst { a: a1, b: b1 } = obj;\nconst { a: a1 = aDefault, b = bDefault } = obj;\nconst { a, b, ...rest } = obj;\nconst { a: a1, b: b1, ...rest } = obj;\nconst { [key]: a } = obj;\n\nlet a, b, a1, b1, c, d, rest, pop, push;\n[a, b] = array;\n[a, , b] = array;\n[a = aDefault, b] = array;\n[a, b, ...rest] = array;\n[a, , b, ...rest] = array;\n[a, b, ...{ pop, push }] = array;\n[a, b, ...[c, d]] = array;\n\n({ a, b } = obj); // parentheses are required\n({ a: a1, b: b1 } = obj);\n({ a: a1 = aDefault, b = bDefault } = obj);\n({ a, b, ...rest } = obj);\n({ a: a1, b: b1, ...rest } = obj);\n```\n\n## [Description](#description)\n\nThe object and array literal expressions provide an easy way to create _ad hoc_ packages of data.\n\n```\nconst x = [1, 2, 3, 4, 5];\n```\n\nThe destructuring assignment uses similar syntax but uses it on the left-hand side of the assignment instead. It defines which values to unpack from the sourced variable.\n\n```\nconst x = [1, 2, 3, 4, 5];\nconst [y, z] = x;\nconsole.log(y); // 1\nconsole.log(z); // 2\n```\n\nSimilarly, you can destructure objects on the left-hand side of the assignment.\n\n```\nconst obj = { a: 1, b: 2 };\nconst { a, b } = obj;\n// is equivalent to:\n// const a = obj.a;\n// const b = obj.b;\n```\n\nThis capability is similar to features present in languages such as Perl and Python.\n\nFor features specific to array or object destructuring, refer to the individual [examples](#examples) below.\n\n### [Binding and assignment](#binding_and_assignment)\n\nFor both object and array destructuring, there are two kinds of destructuring patterns: _[binding](https://developer.mozilla.org/en-US/docs/Glossary/Binding) pattern_ and _assignment pattern_, with slightly different syntaxes.\n\nIn binding patterns, the pattern starts with a declaration keyword (`var`, `let`, or `const`). Then, each individual property must either be bound to a variable or further destructured.\n\n```\nconst obj = { a: 1, b: { c: 2 } };\nconst {\n  a,\n  b: { c: d },\n} = obj;\n// Two variables are bound: `a` and `d`\n```\n\nAll variables share the same declaration, so if you want some variables to be re-assignable but others to be read-only, you may have to destructure twice — once with `let`, once with `const`.\n\n```\nconst obj = { a: 1, b: { c: 2 } };\nconst { a } = obj; // a is constant\nlet {\n  b: { c: d },\n} = obj; // d is re-assignable\n```\n\nIn many other syntaxes where the language binds a variable for you, you can use a binding destructuring pattern. These include:\n\n*   The looping variable of [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of), and [`for await...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of) loops;\n*   [Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions) parameters;\n*   The [`catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) binding variable.\n\nIn assignment patterns, the pattern does not start with a keyword. Each destructured property is assigned to a target of assignment — which may either be declared beforehand with `var` or `let`, or is a property of another object — in general, anything that can appear on the left-hand side of an assignment expression.\n\n```\nconst numbers = [];\nconst obj = { a: 1, b: 2 };\n({ a: numbers[0], b: numbers[1] } = obj);\n// The properties `a` and `b` are assigned to properties of `numbers`\n```\n\n**Note:** The parentheses `( ... )` around the assignment statement are required when using object literal destructuring assignment without a declaration.\n\n`{ a, b } = { a: 1, b: 2 }` is not valid stand-alone syntax, as the `{ a, b }` on the left-hand side is considered a block and not an object literal according to the rules of [expression statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement). However, `({ a, b } = { a: 1, b: 2 })` is valid, as is `const { a, b } = { a: 1, b: 2 }`.\n\nIf your coding style does not include trailing semicolons, the `( ... )` expression needs to be preceded by a semicolon, or it may be used to execute a function on the previous line.\n\nNote that the equivalent _binding pattern_ of the code above is not valid syntax:\n\n```\nconst numbers = [];\nconst obj = { a: 1, b: 2 };\nconst { a: numbers[0], b: numbers[1] } = obj;\n\n// This is equivalent to:\n//   const numbers[0] = obj.a;\n//   const numbers[1] = obj.b;\n// Which definitely is not valid.\n```\n\nYou can only use assignment patterns as the left-hand side of the [assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment) operator. You cannot use them with compound assignment operators such as `+=` or `*=`.\n\n### [Default value](#default_value)\n\nEach destructured property can have a _default value_. The default value is used when the property is not present, or has value `undefined`. It is not used if the property has value `null`.\n\n```\nconst [a = 1] = []; // a is 1\nconst { b = 2 } = { b: undefined }; // b is 2\nconst { c = 2 } = { c: null }; // c is null\n```\n\nThe default value can be any expression. It will only be evaluated when necessary.\n\n```\nconst { b = console.log(\"hey\") } = { b: 2 };\n// Does not log anything, because `b` is defined and there's no need\n// to evaluate the default value.\n```\n\n### [Rest property](#rest_property)\n\nYou can end a destructuring pattern with a rest property `...rest`. This pattern will store all remaining properties of the object or array into a new object or array.\n\n```\nconst { a, ...others } = { a: 1, b: 2, c: 3 };\nconsole.log(others); // { b: 2, c: 3 }\n\nconst [first, ...others2] = [1, 2, 3];\nconsole.log(others2); // [2, 3]\n```\n\nThe rest property must be the last in the pattern, and must not have a trailing comma.\n\n```\nconst [a, ...b,] = [1, 2, 3];\n\n// SyntaxError: rest element may not have a trailing comma\n// Always consider using rest operator as the last element\n```\n\n## [Examples](#examples)\n\n### [Array destructuring](#array_destructuring)\n\n#### Basic variable assignment\n\n```\nconst foo = [\"one\", \"two\", \"three\"];\n\nconst [red, yellow, green] = foo;\nconsole.log(red); // \"one\"\nconsole.log(yellow); // \"two\"\nconsole.log(green); // \"three\"\n```\n\n#### Destructuring with more elements than the source\n\nIn an array destructuring from an array of length _N_ specified on the right-hand side of the assignment, if the number of variables specified on the left-hand side of the assignment is greater than _N_, only the first _N_ variables are assigned values. The values of the remaining variables will be undefined.\n\n```\nconst foo = [\"one\", \"two\"];\n\nconst [red, yellow, green, blue] = foo;\nconsole.log(red); // \"one\"\nconsole.log(yellow); // \"two\"\nconsole.log(green); // undefined\nconsole.log(blue); // undefined\n```\n\n#### Swapping variables\n\nTwo variables values can be swapped in one destructuring expression.\n\nWithout destructuring assignment, swapping two values requires a temporary variable (or, in some low-level languages, the [XOR-swap trick](https://en.wikipedia.org/wiki/XOR_swap_algorithm)).\n\n```\nlet a = 1;\nlet b = 3;\n\n[a, b] = [b, a];\nconsole.log(a); // 3\nconsole.log(b); // 1\n\nconst arr = [1, 2, 3];\n[arr[2], arr[1]] = [arr[1], arr[2]];\nconsole.log(arr); // [1, 3, 2]\n```\n\n#### Parsing an array returned from a function\n\nIt's always been possible to return an array from a function. Destructuring can make working with an array return value more concise.\n\nIn this example, `f()` returns the values `[1, 2]` as its output, which can be parsed in a single line with destructuring.\n\n```\nfunction f() {\n  return [1, 2];\n}\n\nconst [a, b] = f();\nconsole.log(a); // 1\nconsole.log(b); // 2\n```\n\n#### Ignoring some returned values\n\nYou can ignore return values that you're not interested in:\n\n```\nfunction f() {\n  return [1, 2, 3];\n}\n\nconst [a, , b] = f();\nconsole.log(a); // 1\nconsole.log(b); // 3\n\nconst [c] = f();\nconsole.log(c); // 1\n```\n\nYou can also ignore all returned values:\n\n#### Using a binding pattern as the rest property\n\nThe rest property of array destructuring assignment can be another array or object binding pattern. The inner destructuring destructures from the array created after collecting the rest elements, so you cannot access any properties present on the original iterable in this way.\n\n```\nconst [a, b, ...{ length }] = [1, 2, 3];\nconsole.log(a, b, length); // 1 2 1\n```\n\n```\nconst [a, b, ...[c, d]] = [1, 2, 3, 4];\nconsole.log(a, b, c, d); // 1 2 3 4\n```\n\nThese binding patterns can even be nested, as long as each rest property is the last in the list.\n\n```\nconst [a, b, ...[c, d, ...[e, f]]] = [1, 2, 3, 4, 5, 6];\nconsole.log(a, b, c, d, e, f); // 1 2 3 4 5 6\n```\n\nOn the other hand, object destructuring can only have an identifier as the rest property.\n\n```\nconst { a, ...{ b } } = { a: 1, b: 2 };\n// SyntaxError: `...` must be followed by an identifier in declaration contexts\n\nlet a, b;\n({ a, ...{ b } } = { a: 1, b: 2 });\n// SyntaxError: `...` must be followed by an assignable reference in assignment contexts\n```\n\n#### Unpacking values from a regular expression match\n\nWhen the regular expression [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) method finds a match, it returns an array containing first the entire matched portion of the string and then the portions of the string that matched each parenthesized group in the regular expression. Destructuring assignment allows you to unpack the parts out of this array easily, ignoring the full match if it is not needed.\n\n```\nfunction parseProtocol(url) {\n  const parsedURL = /^(\\w+):\\/\\/([^/]+)\\/(.*)$/.exec(url);\n  if (!parsedURL) {\n    return false;\n  }\n  console.log(parsedURL);\n  // [\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\",\n  // \"https\", \"developer.mozilla.org\", \"en-US/docs/Web/JavaScript\"]\n\n  const [, protocol, fullhost, fullpath] = parsedURL;\n  return protocol;\n}\n\nconsole.log(\n  parseProtocol(\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\"),\n);\n// \"https\"\n```\n\n#### Using array destructuring on any iterable\n\nArray destructuring calls the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) of the right-hand side. Therefore, any iterable, not necessarily arrays, can be destructured.\n\n```\nconst [a, b] = new Map([\n  [1, 2],\n  [3, 4],\n]);\nconsole.log(a, b); // [1, 2] [3, 4]\n```\n\nNon-iterables cannot be destructured as arrays.\n\n```\nconst obj = { 0: \"a\", 1: \"b\", length: 2 };\nconst [a, b] = obj;\n// TypeError: obj is not iterable\n```\n\nIterables are only iterated until all bindings are assigned.\n\n```\nconst obj = {\n  *[Symbol.iterator]() {\n    for (const v of [0, 1, 2, 3]) {\n      console.log(v);\n      yield v;\n    }\n  },\n};\nconst [a, b] = obj; // Only logs 0 and 1\n```\n\nThe rest binding is eagerly evaluated and creates a new array, instead of using the old iterable.\n\n```\nconst obj = {\n  *[Symbol.iterator]() {\n    for (const v of [0, 1, 2, 3]) {\n      console.log(v);\n      yield v;\n    }\n  },\n};\nconst [a, b, ...rest] = obj; // Logs 0 1 2 3\nconsole.log(rest); // [2, 3] (an array)\n```\n\n### [Object destructuring](#object_destructuring)\n\n#### Basic assignment\n\n```\nconst user = {\n  id: 42,\n  isVerified: true,\n};\n\nconst { id, isVerified } = user;\n\nconsole.log(id); // 42\nconsole.log(isVerified); // true\n```\n\n#### Assigning to new variable names\n\nA property can be unpacked from an object and assigned to a variable with a different name than the object property.\n\n```\nconst o = { p: 42, q: true };\nconst { p: foo, q: bar } = o;\n\nconsole.log(foo); // 42\nconsole.log(bar); // true\n```\n\nHere, for example, `const { p: foo } = o` takes from the object `o` the property named `p` and assigns it to a local variable named `foo`.\n\n#### Assigning to new variable names and providing default values\n\nA property can be both\n\n*   Unpacked from an object and assigned to a variable with a different name.\n*   Assigned a default value in case the unpacked value is `undefined`.\n\n```\nconst { a: aa = 10, b: bb = 5 } = { a: 3 };\n\nconsole.log(aa); // 3\nconsole.log(bb); // 5\n```\n\n#### Unpacking properties from objects passed as a function parameter\n\nObjects passed into function parameters can also be unpacked into variables, which may then be accessed within the function body. As for object assignment, the destructuring syntax allows for the new variable to have the same name or a different name than the original property, and to assign default values for the case when the original object does not define the property.\n\nConsider this object, which contains information about a user.\n\n```\nconst user = {\n  id: 42,\n  displayName: \"jdoe\",\n  fullName: {\n    firstName: \"Jane\",\n    lastName: \"Doe\",\n  },\n};\n```\n\nHere we show how to unpack a property of the passed object into a variable with the same name. The parameter value `{ id }` indicates that the `id` property of the object passed to the function should be unpacked into a variable with the same name, which can then be used within the function.\n\n```\nfunction userId({ id }) {\n  return id;\n}\n\nconsole.log(userId(user)); // 42\n```\n\nYou can define the name of the unpacked variable. Here we unpack the property named `displayName`, and rename it to `dname` for use within the function body.\n\n```\nfunction userDisplayName({ displayName: dname }) {\n  return dname;\n}\n\nconsole.log(userDisplayName(user)); // \"jdoe\"\n```\n\nNested objects can also be unpacked. The example below shows the property `fullname.firstName` being unpacked into a variable called `name`.\n\n```\nfunction whois({ displayName, fullName: { firstName: name } }) {\n  return `${displayName} is ${name}`;\n}\n\nconsole.log(whois(user)); // \"jdoe is Jane\"\n```\n\n#### Setting a function parameter's default value\n\nDefault values can be specified using `=`, and will be used as variable values if a specified property does not exist in the passed object.\n\nBelow we show a function where the default size is `'big'`, default co-ordinates are `x: 0, y: 0` and default radius is 25.\n\n```\nfunction drawChart({\n  size = \"big\",\n  coords = { x: 0, y: 0 },\n  radius = 25,\n} = {}) {\n  console.log(size, coords, radius);\n  // do some chart drawing\n}\n\ndrawChart({\n  coords: { x: 18, y: 30 },\n  radius: 30,\n});\n```\n\nIn the function signature for `drawChart` above, the destructured left-hand side has a default value of an empty object `= {}`.\n\nYou could have also written the function without that default. However, if you leave out that default value, the function will look for at least one argument to be supplied when invoked, whereas in its current form, you can call `drawChart()` without supplying any parameters. Otherwise, you need to at least supply an empty object literal.\n\nFor more information, see [Default parameters > Destructured parameter with default value assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters#destructured_parameter_with_default_value_assignment).\n\n#### Nested object and array destructuring\n\n```\nconst metadata = {\n  title: \"Scratchpad\",\n  translations: [\n    {\n      locale: \"de\",\n      localizationTags: [],\n      lastEdit: \"2014-04-14T08:43:37\",\n      url: \"/de/docs/Tools/Scratchpad\",\n      title: \"JavaScript-Umgebung\",\n    },\n  ],\n  url: \"/en-US/docs/Tools/Scratchpad\",\n};\n\nconst {\n  title: englishTitle, // rename\n  translations: [\n    {\n      title: localeTitle, // rename\n    },\n  ],\n} = metadata;\n\nconsole.log(englishTitle); // \"Scratchpad\"\nconsole.log(localeTitle); // \"JavaScript-Umgebung\"\n```\n\n#### For of iteration and destructuring\n\n```\nconst people = [\n  {\n    name: \"Mike Smith\",\n    family: {\n      mother: \"Jane Smith\",\n      father: \"Harry Smith\",\n      sister: \"Samantha Smith\",\n    },\n    age: 35,\n  },\n  {\n    name: \"Tom Jones\",\n    family: {\n      mother: \"Norah Jones\",\n      father: \"Richard Jones\",\n      brother: \"Howard Jones\",\n    },\n    age: 25,\n  },\n];\n\nfor (const {\n  name: n,\n  family: { father: f },\n} of people) {\n  console.log(`Name: ${n}, Father: ${f}`);\n}\n\n// \"Name: Mike Smith, Father: Harry Smith\"\n// \"Name: Tom Jones, Father: Richard Jones\"\n```\n\n#### Computed object property names and destructuring\n\nComputed property names, like on [object literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#computed_property_names), can be used with destructuring.\n\n```\nconst key = \"z\";\nconst { [key]: foo } = { z: \"bar\" };\n\nconsole.log(foo); // \"bar\"\n```\n\n#### Invalid JavaScript identifier as a property name\n\nDestructuring can be used with property names that are not valid JavaScript [identifiers](https://developer.mozilla.org/en-US/docs/Glossary/Identifier) by providing an alternative identifier that is valid.\n\n```\nconst foo = { \"fizz-buzz\": true };\nconst { \"fizz-buzz\": fizzBuzz } = foo;\n\nconsole.log(fizzBuzz); // true\n```\n\n### [Destructuring primitive values](#destructuring_primitive_values)\n\nObject destructuring is almost equivalent to [property accessing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors). This means if you try to destruct a primitive value, the value will get wrapped into the corresponding wrapper object and the property is accessed on the wrapper object.\n\n```\nconst { a, toFixed } = 1;\nconsole.log(a, toFixed); // undefined ƒ toFixed() { [native code] }\n```\n\nSame as accessing properties, destructuring `null` or `undefined` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n```\nconst { a } = undefined; // TypeError: Cannot destructure property 'a' of 'undefined' as it is undefined.\nconst { b } = null; // TypeError: Cannot destructure property 'b' of 'null' as it is null.\n```\n\nThis happens even when the pattern is empty.\n\n```\nconst {} = null; // TypeError: Cannot destructure 'null' as it is null.\n```\n\n#### Combined array and object destructuring\n\nArray and object destructuring can be combined. Say you want the third element in the array `props` below, and then you want the `name` property in the object, you can do the following:\n\n```\nconst props = [\n  { id: 1, name: \"Fizz\" },\n  { id: 2, name: \"Buzz\" },\n  { id: 3, name: \"FizzBuzz\" },\n];\n\nconst [, , { name }] = props;\n\nconsole.log(name); // \"FizzBuzz\"\n```\n\n#### The prototype chain is looked up when the object is deconstructed\n\nWhen deconstructing an object, if a property is not accessed in itself, it will continue to look up along the prototype chain.\n\n```\nconst obj = {\n  self: \"123\",\n  __proto__: {\n    prot: \"456\",\n  },\n};\nconst { self, prot } = obj;\n\nconsole.log(self); // \"123\"\nconsole.log(prot); // \"456\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-destructuring-assignment](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-destructuring-assignment) |\n| [ECMAScript Language Specification  <br>\\# sec-destructuring-binding-patterns](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-destructuring-binding-patterns) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Destructuring assignment - JavaScript | MDN",
    "description": "The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division",
    "markdown": "# Division (/) - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **division (`/`)** operator produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe `/` operator is overloaded for two types of operands: number and [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt). It first [coerces both operands to numeric values](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) and tests the types of them. It performs BigInt division if both operands become BigInts; otherwise, it performs number division. A [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown if one operand becomes a BigInt but the other becomes a number.\n\nFor BigInt division, the result is the quotient of the two operands truncated towards zero, and the remainder is discarded. A [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError) is thrown if the divisor `y` is `0n`. This is because number division by zero returns `Infinity` or `-Infinity`, but BigInt has no concept of infinity.\n\n## [Examples](#examples)\n\n### [Division using numbers](#division_using_numbers)\n\n```\n1 / 2; // 0.5\nMath.floor(3 / 2); // 1\n1.0 / 2.0; // 0.5\n\n2 / 0; // Infinity\n2.0 / 0.0; // Infinity, because 0.0 === 0\n2.0 / -0.0; // -Infinity\n```\n\nOther non-BigInt values are coerced to numbers:\n\n```\n5 / \"2\"; // 2.5\n5 / \"foo\"; // NaN\n```\n\n### [Division using BigInts](#division_using_bigints)\n\n```\n1n / 2n; // 0n\n5n / 3n; // 1n\n-1n / 3n; // 0n\n1n / -3n; // 0n\n\n2n / 0n; // RangeError: BigInt division by zero\n```\n\nYou cannot mix BigInt and number operands in division.\n\n```\n2n / 2; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n2 / 2n; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n```\n\nTo do division with a BigInt and a non-BigInt, convert either operand:\n\n```\n2n / BigInt(2); // 1n\nNumber(2n) / 2; // 1\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-multiplicative-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-multiplicative-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Division (/) - JavaScript | MDN",
    "description": "The division (/) operator produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "markdown": "# RegExp - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`RegExp`** object is used for matching text with a pattern.\n\nFor an introduction to regular expressions, read the [Regular expressions chapter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions) in the JavaScript guide. For detailed information of regular expression syntax, read the [regular expression reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions).\n\n## [Description](#description)\n\n### [Literal notation and constructor](#literal_notation_and_constructor)\n\nThere are two ways to create a `RegExp` object: a _literal notation_ and a _constructor_.\n\n*   The _literal notation_ takes a pattern between two slashes, followed by optional [flags](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags), after the second slash.\n*   The _constructor function_ takes either a string or a `RegExp` object as its first parameter and a string of optional [flags](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags) as its second parameter.\n\nThe following three expressions create the same regular expression object:\n\n```\nconst re = /ab+c/i; // literal notation\n// OR\nconst re = new RegExp(\"ab+c\", \"i\"); // constructor with string pattern as first argument\n// OR\nconst re = new RegExp(/ab+c/, \"i\"); // constructor with regular expression literal as first argument\n```\n\nBefore regular expressions can be used, they have to be compiled. This process allows them to perform matches more efficiently. More about the process can be found in [dotnet docs](https://docs.microsoft.com/dotnet/standard/base-types/compilation-and-reuse-in-regular-expressions).\n\nThe literal notation results in compilation of the regular expression when the expression is evaluated. On the other hand, the constructor of the `RegExp` object, `new RegExp('ab+c')`, results in runtime compilation of the regular expression.\n\nUse a string as the first argument to the `RegExp()` constructor when you want to [build the regular expression from dynamic input](#building_a_regular_expression_from_dynamic_inputs).\n\n### [Flags in constructor](#flags_in_constructor)\n\nThe expression `new RegExp(/ab+c/, flags)` will create a new `RegExp` using the source of the first parameter and the [flags](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags) provided by the second.\n\nWhen using the constructor function, the normal string escape rules (preceding special characters with `\\` when included in a string) are necessary.\n\nFor example, the following are equivalent:\n\n```\nconst re = /\\w+/;\n// OR\nconst re = new RegExp(\"\\\\w+\");\n```\n\n### [Special handling for regexes](#special_handling_for_regexes)\n\n**Note:** Whether something is a \"regex\" can be [duck-typed](https://en.wikipedia.org/wiki/Duck_typing). It doesn't have to be a `RegExp`!\n\nSome built-in methods would treat regexes specially. They decide whether `x` is a regex through [multiple steps](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-isregexp):\n\n1.  `x` must be an object (not a primitive).\n2.  If [`x[Symbol.match]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match) is not `undefined`, check if it's [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy).\n3.  Otherwise, if `x[Symbol.match]` is `undefined`, check if `x` had been created with the `RegExp` constructor. (This step should rarely happen, since if `x` is a `RegExp` object that have not been tampered with, it should have a `Symbol.match` property.)\n\nNote that in most cases, it would go through the `Symbol.match` check, which means:\n\n*   An actual `RegExp` object whose `Symbol.match` property's value is [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) but not `undefined` (even with everything else intact, like [`exec`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) and [`@@replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace)) can be used as if it's not a regex.\n*   A non-`RegExp` object with a `Symbol.match` property will be treated as if it's a regex.\n\nThis choice was made because `@@match` is the most indicative property that something is intended to be used for matching. (`exec` could also be used, but because it's not a symbol property, there would be too many false positives.) The places that treat regexes specially include:\n\n*   [`String.prototype.endsWith()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith), [`startsWith()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith), and [`includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes) throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the first argument is a regex.\n*   [`String.prototype.matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll) and [`replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) check whether the [global](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global) flag is set if the first argument is a regex before invoking its [`@@matchAll`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll) or [`@@replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace) method.\n*   The [`RegExp()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp) constructor directly returns the `pattern` argument only if `pattern` is a regex (among a few other conditions). If `pattern` is a regex, it would also interrogate `pattern`'s `source` and `flags` properties instead of coercing `pattern` to a string.\n\nFor example, [`String.prototype.endsWith()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith) would coerce all inputs to strings, but it would throw if the argument is a regex, because it's only designed to match strings, and using a regex is likely a developer mistake.\n\n```\n\"foobar\".endsWith({ toString: () => \"bar\" }); // true\n\"foobar\".endsWith(/bar/); // TypeError: First argument to String.prototype.endsWith must not be a regular expression\n```\n\nYou can get around the check by setting `@@match` to a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value that's not `undefined`. This would mean that the regex cannot be used for `String.prototype.match()` (since without `@@match`, `match()` would construct a new `RegExp` object with the two enclosing slashes added by [`re.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString)), but it can be used for virtually everything else.\n\n```\nconst re = /bar/g;\nre[Symbol.match] = false;\n\"/bar/g\".endsWith(re); // true\nre.exec(\"bar\"); // [ 'bar', index: 0, input: 'bar', groups: undefined ]\n\"bar & bar\".replace(re, \"foo\"); // 'foo & foo'\n```\n\n### [Perl-like RegExp properties](#perl-like_regexp_properties)\n\nNote that several of the [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) properties have both long and short (Perl-like) names. Both names always refer to the same value. (Perl is the programming language from which JavaScript modeled its regular expressions.) See also [deprecated `RegExp` properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp).\n\n## [Constructor](#constructor)\n\n[`RegExp()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp)\n\nCreates a new `RegExp` object.\n\n## [Static properties](#static_properties)\n\n[`RegExp.$1, …, RegExp.$9`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/n) Deprecated\n\nStatic read-only properties that contain parenthesized substring matches.\n\n[`RegExp.input ($_)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/input) Deprecated\n\nA static property that contains the last string against which a regular expression was successfully matched.\n\n[`RegExp.lastMatch ($&)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch) Deprecated\n\nA static read-only property that contains the last matched substring.\n\n[`RegExp.lastParen ($+)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastParen) Deprecated\n\nA static read-only property that contains the last parenthesized substring match.\n\n[``RegExp.leftContext ($`)``](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/leftContext) Deprecated\n\nA static read-only property that contains the substring preceding the most recent match.\n\n[`RegExp.rightContext ($')`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/rightContext) Deprecated\n\nA static read-only property that contains the substring following the most recent match.\n\n[`RegExp[@@species]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species)\n\nThe constructor function that is used to create derived objects.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `RegExp.prototype` and shared by all `RegExp` instances.\n\n[`RegExp.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `RegExp` instances, the initial value is the [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp) constructor.\n\n[`RegExp.prototype.dotAll`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll)\n\nWhether `.` matches newlines or not.\n\n[`RegExp.prototype.flags`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags)\n\nA string that contains the flags of the `RegExp` object.\n\n[`RegExp.prototype.global`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global)\n\nWhether to test the regular expression against all possible matches in a string, or only against the first.\n\n[`RegExp.prototype.hasIndices`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices)\n\nWhether the regular expression result exposes the start and end indices of captured substrings.\n\n[`RegExp.prototype.ignoreCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase)\n\nWhether to ignore case while attempting a match in a string.\n\n[`RegExp.prototype.multiline`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline)\n\nWhether or not to search in strings across multiple lines.\n\n[`RegExp.prototype.source`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source)\n\nThe text of the pattern.\n\n[`RegExp.prototype.sticky`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky)\n\nWhether or not the search is sticky.\n\n[`RegExp.prototype.unicode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode)\n\nWhether or not Unicode features are enabled.\n\n[`RegExp.prototype.unicodeSets`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets)\n\nWhether or not the `v` flag, an upgrade to the `u` mode, is enabled.\n\nThese properties are own properties of each `RegExp` instance.\n\n[`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex)\n\nThe index at which to start the next match.\n\n## [Instance methods](#instance_methods)\n\n[`RegExp.prototype.compile()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/compile) Deprecated\n\n(Re-)compiles a regular expression during execution of a script.\n\n[`RegExp.prototype.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec)\n\nExecutes a search for a match in its string parameter.\n\n[`RegExp.prototype.test()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test)\n\nTests for a match in its string parameter.\n\n[`RegExp.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString)\n\nReturns a string representing the specified object. Overrides the [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) method.\n\n[`RegExp.prototype[@@match]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match)\n\nPerforms match to given string and returns match result.\n\n[`RegExp.prototype[@@matchAll]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll)\n\nReturns all matches of the regular expression against a string.\n\n[`RegExp.prototype[@@replace]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace)\n\nReplaces matches in given string with new substring.\n\n[`RegExp.prototype[@@search]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search)\n\nSearches the match in given string and returns the index the pattern found in the string.\n\n[`RegExp.prototype[@@split]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split)\n\nSplits given string into an array by separating the string into substrings.\n\n## [Examples](#examples)\n\n### [Using a regular expression to change data format](#using_a_regular_expression_to_change_data_format)\n\nThe following script uses the [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) method to match a name in the format _first last_ and output it in the format _last, first_.\n\nIn the replacement text, the script uses `$1` and `$2` to indicate the results of the corresponding matching parentheses in the regular expression pattern.\n\n```\nconst re = /(\\w+)\\s(\\w+)/;\nconst str = \"Maria Cruz\";\nconst newstr = str.replace(re, \"$2, $1\");\nconsole.log(newstr);\n```\n\nThis displays `\"Cruz, Maria\"`.\n\n### [Using regular expression to split lines with different line endings/ends of line/line breaks](#using_regular_expression_to_split_lines_with_different_line_endingsends_of_lineline_breaks)\n\nThe default line ending varies depending on the platform (Unix, Windows, etc.). The line splitting provided in this example works on all platforms.\n\n```\nconst text = \"Some text\\nAnd some more\\r\\nAnd yet\\rThis is the end\";\nconst lines = text.split(/\\r\\n|\\r|\\n/);\nconsole.log(lines); // [ 'Some text', 'And some more', 'And yet', 'This is the end' ]\n```\n\nNote that the order of the patterns in the regular expression matters.\n\n### [Using regular expression on multiple lines](#using_regular_expression_on_multiple_lines)\n\n```\nconst s = \"Please yes\\nmake my day!\";\n\ns.match(/yes.*day/);\n// Returns null\n\ns.match(/yes[^]*day/);\n// Returns [\"yes\\nmake my day\"]\n```\n\n### [Using a regular expression with the sticky flag](#using_a_regular_expression_with_the_sticky_flag)\n\nThe [`sticky`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky) flag indicates that the regular expression performs sticky matching in the target string by attempting to match starting at [`RegExp.prototype.lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex).\n\n```\nconst str = \"#foo#\";\nconst regex = /foo/y;\n\nregex.lastIndex = 1;\nregex.test(str); // true\nregex.lastIndex = 5;\nregex.test(str); // false (lastIndex is taken into account with sticky flag)\nregex.lastIndex; // 0 (reset after match failure)\n```\n\n### [The difference between the sticky flag and the global flag](#the_difference_between_the_sticky_flag_and_the_global_flag)\n\nWith the sticky flag `y`, the next match has to happen at the `lastIndex` position, while with the global flag `g`, the match can happen at the `lastIndex` position or later:\n\n```\nconst re = /\\d/y;\nlet r;\nwhile ((r = re.exec(\"123 456\"))) {\n  console.log(r, \"AND re.lastIndex\", re.lastIndex);\n}\n\n// [ '1', index: 0, input: '123 456', groups: undefined ] AND re.lastIndex 1\n// [ '2', index: 1, input: '123 456', groups: undefined ] AND re.lastIndex 2\n// [ '3', index: 2, input: '123 456', groups: undefined ] AND re.lastIndex 3\n//  … and no more match.\n```\n\nWith the global flag `g`, all 6 digits would be matched, not just 3.\n\n### [Regular expression and Unicode characters](#regular_expression_and_unicode_characters)\n\n`\\w` and `\\W` only matches ASCII based characters; for example, `a` to `z`, `A` to `Z`, `0` to `9`, and `_`.\n\nTo match characters from other languages such as Cyrillic or Hebrew, use `\\uhhhh`, where `hhhh` is the character's Unicode value in hexadecimal.\n\nThis example demonstrates how one can separate out Unicode characters from a word.\n\n```\nconst text = \"Образец text на русском языке\";\nconst regex = /[\\u0400-\\u04FF]+/g;\n\nconst match = regex.exec(text);\nconsole.log(match[0]); // 'Образец'\nconsole.log(regex.lastIndex); // 7\n\nconst match2 = regex.exec(text);\nconsole.log(match2[0]); // 'на' (did not log 'text')\nconsole.log(regex.lastIndex); // 15\n\n// and so on\n```\n\nThe [Unicode property escapes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape) feature provides a simpler way to target particular Unicode ranges, by allowing for statements like `\\p{scx=Cyrl}` (to match any Cyrillic letter), or `\\p{L}/u` (to match a letter from any language).\n\n### [Extracting subdomain name from URL](#extracting_subdomain_name_from_url)\n\n```\nconst url = \"http://xxx.domain.com\";\nconsole.log(/^https?:\\/\\/(.+?)\\./.exec(url)[1]); // 'xxx'\n```\n\n**Note:** Instead of using regular expressions for parsing URLs, it is usually better to use the browsers built-in URL parser by using the [URL API](https://developer.mozilla.org/en-US/docs/Web/API/URL_API).\n\n### [Building a regular expression from dynamic inputs](#building_a_regular_expression_from_dynamic_inputs)\n\n```\nconst breakfasts = [\"bacon\", \"eggs\", \"oatmeal\", \"toast\", \"cereal\"];\nconst order = \"Let me get some bacon and eggs, please\";\n\norder.match(new RegExp(`\\\\b(${breakfasts.join(\"|\")})\\\\b`, \"g\"));\n// Returns ['bacon', 'eggs']\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-regexp-regular-expression-objects](https://tc39.es/ecma262/multipage/text-processing.html#sec-regexp-regular-expression-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n### [Firefox-specific notes](#firefox-specific_notes)\n\nStarting with Firefox 34, in the case of a capturing group with quantifiers preventing its exercise, the matched text for a capturing group is now `undefined` instead of an empty string:\n\n```\n// Firefox 33 or older\n\"x\".replace(/x(.)?/g, (m, group) => {\n  console.log(`group: ${JSON.stringify(group)}`);\n});\n// group: \"\"\n\n// Firefox 34 or newer\n\"x\".replace(/x(.)?/g, (m, group) => {\n  console.log(`group: ${group}`);\n});\n// group: undefined\n```\n\nNote that due to web compatibility, `RegExp.$N` will still return an empty string instead of `undefined` ([bug 1053944](https://bugzil.la/1053944)).\n\n## [See also](#see_also)",
    "title": "RegExp - JavaScript | MDN",
    "description": "The RegExp object is used for matching text with a pattern.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules",
    "markdown": "# JavaScript modules - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\n*   [« Previous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Meta_programming)\n\nThis guide gives you all you need to get started with JavaScript module syntax.\n\n## [A background on modules](#a_background_on_modules)\n\nJavaScript programs started off pretty small — most of its usage in the early days was to do isolated scripting tasks, providing a bit of interactivity to your web pages where needed, so large scripts were generally not needed. Fast forward a few years and we now have complete applications being run in browsers with a lot of JavaScript, as well as JavaScript being used in other contexts ([Node.js](https://developer.mozilla.org/en-US/docs/Glossary/Node.js), for example).\n\nIt has therefore made sense in recent years to start thinking about providing mechanisms for splitting JavaScript programs up into separate modules that can be imported when needed. Node.js has had this ability for a long time, and there are a number of JavaScript libraries and frameworks that enable module usage (for example, other [CommonJS](https://en.wikipedia.org/wiki/CommonJS) and [AMD](https://github.com/amdjs/amdjs-api/blob/master/AMD.md)\\-based module systems like [RequireJS](https://requirejs.org/), and more recently [Webpack](https://webpack.js.org/) and [Babel](https://babeljs.io/)).\n\nThe good news is that modern browsers have started to support module functionality natively, and this is what this article is all about. This can only be a good thing — browsers can optimize loading of modules, making it more efficient than having to use a library and do all of that extra client-side processing and extra round trips.\n\nUse of native JavaScript modules is dependent on the [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) and [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) statements; these are supported in browsers as shown in the compatibility table below.\n\n## [Browser compatibility](#browser_compatibility)\n\n### [javascript.statements.import](#javascript.statements.import)\n\nBCD tables only load in the browser\n\n### [javascript.statements.export](#javascript.statements.export)\n\nBCD tables only load in the browser\n\n## [Introducing an example](#introducing_an_example)\n\nTo demonstrate usage of modules, we've created a [simple set of examples](https://github.com/mdn/js-examples/tree/main/module-examples) that you can find on GitHub. These examples demonstrate a simple set of modules that create a [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas) element on a webpage, and then draw (and report information about) different shapes on the canvas.\n\nThese are fairly trivial, but have been kept deliberately simple to demonstrate modules clearly.\n\n**Note:** If you want to download the examples and run them locally, you'll need to run them through a local web server.\n\n## [Basic example structure](#basic_example_structure)\n\nIn our first example (see [basic-modules](https://github.com/mdn/js-examples/tree/main/module-examples/basic-modules)) we have a file structure as follows:\n\nindex.html\nmain.js\nmodules/\n    canvas.js\n    square.js\n\n**Note:** All of the examples in this guide have basically the same structure; the above should start getting pretty familiar.\n\nThe modules directory's two modules are described below:\n\n*   `canvas.js` — contains functions related to setting up the canvas:\n    *   `create()` — creates a canvas with a specified `width` and `height` inside a wrapper [`<div>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div) with a specified ID, which is itself appended inside a specified parent element. Returns an object containing the canvas's 2D context and the wrapper's ID.\n    *   `createReportList()` — creates an unordered list appended inside a specified wrapper element, which can be used to output report data into. Returns the list's ID.\n*   `square.js` — contains:\n    *   `name` — a constant containing the string 'square'.\n    *   `draw()` — draws a square on a specified canvas, with a specified size, position, and color. Returns an object containing the square's size, position, and color.\n    *   `reportArea()` — writes a square's area to a specific report list, given its length.\n    *   `reportPerimeter()` — writes a square's perimeter to a specific report list, given its length.\n\n### [Aside — .mjs versus .js](#aside_—_.mjs_versus_.js)\n\nThroughout this article, we've used `.js` extensions for our module files, but in other resources you may see the `.mjs` extension used instead. [V8's documentation recommends this](https://v8.dev/features/modules#mjs), for example. The reasons given are:\n\n*   It is good for clarity, i.e. it makes it clear which files are modules, and which are regular JavaScript.\n*   It ensures that your module files are parsed as a module by runtimes such as [Node.js](https://nodejs.org/api/esm.html#esm_enabling), and build tools such as [Babel](https://babeljs.io/docs/en/options#sourcetype).\n\nHowever, we decided to keep using `.js`, at least for the moment. To get modules to work correctly in a browser, you need to make sure that your server is serving them with a `Content-Type` header that contains a JavaScript MIME type such as `text/javascript`. If you don't, you'll get a strict MIME type checking error along the lines of \"The server responded with a non-JavaScript MIME type\" and the browser won't run your JavaScript. Most servers already set the correct type for `.js` files, but not yet for `.mjs` files. Servers that already serve `.mjs` files correctly include [GitHub Pages](https://pages.github.com/) and [`http-server`](https://github.com/http-party/http-server#readme) for Node.js.\n\nThis is OK if you are using such an environment already, or if you aren't but you know what you are doing and have access (i.e. you can configure your server to set the correct [`Content-Type`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type) for `.mjs` files). It could however cause confusion if you don't control the server you are serving files from, or are publishing files for public use, as we are here.\n\nFor learning and portability purposes, we decided to keep to `.js`.\n\nIf you really value the clarity of using `.mjs` for modules versus using `.js` for \"normal\" JavaScript files, but don't want to run into the problem described above, you could always use `.mjs` during development and convert them to `.js` during your build step.\n\nIt is also worth noting that:\n\n*   Some tools may never support `.mjs`.\n*   The `<script type=\"module\">` attribute is used to denote when a module is being pointed to, as you'll see below.\n\n## [Exporting module features](#exporting_module_features)\n\nThe first thing you do to get access to module features is export them. This is done using the [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) statement.\n\nThe easiest way to use it is to place it in front of any items you want exported out of the module, for example:\n\n```\nexport const name = \"square\";\n\nexport function draw(ctx, length, x, y, color) {\n  ctx.fillStyle = color;\n  ctx.fillRect(x, y, length, length);\n\n  return { length, x, y, color };\n}\n```\n\nYou can export functions, `var`, `let`, `const`, and — as we'll see later — classes. They need to be top-level items: for example, you can't use `export` inside a function.\n\nA more convenient way of exporting all the items you want to export is to use a single export statement at the end of your module file, followed by a comma-separated list of the features you want to export wrapped in curly braces. For example:\n\n```\nexport { name, draw, reportArea, reportPerimeter };\n```\n\n## [Importing features into your script](#importing_features_into_your_script)\n\nOnce you've exported some features out of your module, you need to import them into your script to be able to use them. The simplest way to do this is as follows:\n\n```\nimport { name, draw, reportArea, reportPerimeter } from \"./modules/square.js\";\n```\n\nYou use the [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) statement, followed by a comma-separated list of the features you want to import wrapped in curly braces, followed by the keyword `from`, followed by the _module specifier_.\n\nThe _module specifier_ provides a string that the JavaScript environment can resolve to a path to the module file. In a browser, this could be a path relative to the site root, which for our `basic-modules` example would be `/js-examples/module-examples/basic-modules`. However, here we are instead using the dot (`.`) syntax to mean \"the current location\", followed by the relative path to the file we are trying to find. This is much better than writing out the entire absolute path each time, as relative paths are shorter and make the URL portable — the example will still work if you move it to a different location in the site hierarchy.\n\nSo for example:\n\n```\n/js-examples/module-examples/basic-modules/modules/square.js\n```\n\nbecomes\n\nYou can see such lines in action in [`main.js`](https://github.com/mdn/js-examples/blob/main/module-examples/basic-modules/main.js).\n\n**Note:** In some module systems, you can use a module specifier like `modules/square` that isn't a relative or absolute path, and that doesn't have a file extension. This kind of specifier can be used in a browser environment if you first define an [import map](#importing_modules_using_import_maps).\n\nOnce you've imported the features into your script, you can use them just like they were defined inside the same file. The following is found in `main.js`, below the import lines:\n\n```\nconst myCanvas = create(\"myCanvas\", document.body, 480, 320);\nconst reportList = createReportList(myCanvas.id);\n\nconst square1 = draw(myCanvas.ctx, 50, 50, 100, \"blue\");\nreportArea(square1.length, reportList);\nreportPerimeter(square1.length, reportList);\n```\n\n**Note:** The imported values are read-only views of the features that were exported. Similar to `const` variables, you cannot re-assign the variable that was imported, but you can still modify properties of object values. The value can only be re-assigned by the module exporting it. See the [`import` reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#imported_values_can_only_be_modified_by_the_exporter) for an example.\n\n## [Importing modules using import maps](#importing_modules_using_import_maps)\n\nAbove we saw how a browser can import a module using a module specifier that is either an absolute URL, or a relative URL that is resolved using the base URL of the document:\n\n```\nimport { name as squareName, draw } from \"./shapes/square.js\";\nimport { name as circleName } from \"https://example.com/shapes/circle.js\";\n```\n\n[Import maps](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap) allow developers to instead specify almost any text they want in the module specifier when importing a module; the map provides a corresponding value that will replace the text when the module URL is resolved.\n\nFor example, the `imports` key in the import map below defines a \"module specifier map\" JSON object where the property names can be used as module specifiers, and the corresponding values will be substituted when the browser resolves the module URL. The values must be absolute or relative URLs. Relative URLs are resolved to absolute URL addresses using the [base URL](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base) of the document containing the import map.\n\n```\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"shapes\": \"./shapes/square.js\",\n      \"shapes/square\": \"./modules/shapes/square.js\",\n      \"https://example.com/shapes/square.js\": \"./shapes/square.js\",\n      \"https://example.com/shapes/\": \"/shapes/square/\",\n      \"../shapes/square\": \"./shapes/square.js\"\n    }\n  }\n</script>\n```\n\nThe import map is defined using a [JSON object](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap#import_map_json_representation) inside a `<script>` element with the `type` attribute set to [`importmap`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap). There can only be one import map in the document, and because it is used to resolve which modules are loaded in both static and dynamic imports, it must be declared before any `<script>` elements that import modules. Note that the import map only applies to the document — the specification does not cover how to apply an import map in a worker or worklet context.\n\nWith this map you can now use the property names above as module specifiers. If there is no trailing forward slash on the module specifier key then the whole module specifier key is matched and substituted. For example, below we match bare module names, and remap a URL to another path.\n\n```\n// Bare module names as module specifiers\nimport { name as squareNameOne } from \"shapes\";\nimport { name as squareNameTwo } from \"shapes/square\";\n\n// Remap a URL to another URL\nimport { name as squareNameThree } from \"https://example.com/shapes/square.js\";\n```\n\nIf the module specifier has a trailing forward slash then the value must have one as well, and the key is matched as a \"path prefix\". This allows remapping of whole classes of URLs.\n\n```\n// Remap a URL as a prefix ( https://example.com/shapes/)\nimport { name as squareNameFour } from \"https://example.com/shapes/moduleshapes/square.js\";\n```\n\nIt is possible for multiple keys in an import map to be valid matches for a module specifier. For example, a module specifier of `shapes/circle/` could match the module specifier keys `shapes/` and `shapes/circle/`. In this case the browser will select the most specific (longest) matching module specifier key.\n\nImport maps allow modules to be imported using bare module names (as in Node.js), and can also simulate importing modules from packages, both with and without file extensions. While not shown above, they also allow particular versions of a library to be imported, based on the path of the script that is importing the module. Generally they let developers write more ergonomic import code, and make it easier to manage the different versions and dependencies of modules used by a site. This can reduce the effort required to use the same JavaScript libraries in both browser and server.\n\nThe following sections expand on the various features outlined above.\n\n### [Feature detection](#feature_detection)\n\nYou can check support for import maps using the [`HTMLScriptElement.supports()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/supports_static) static method (which is itself broadly supported):\n\n```\nif (HTMLScriptElement.supports?.(\"importmap\")) {\n  console.log(\"Browser supports import maps.\");\n}\n```\n\n### [Importing modules as bare names](#importing_modules_as_bare_names)\n\nIn some JavaScript environments, such as Node.js, you can use bare names for the module specifier. This works because the environment can resolve module names to a standard location in the file system. For example, you might use the following syntax to import the \"square\" module.\n\n```\nimport { name, draw, reportArea, reportPerimeter } from \"square\";\n```\n\nTo use bare names on a browser you need an import map, which provides the information needed by the browser to resolve module specifiers to URLs (JavaScript will throw a `TypeError` if it attempts to import a module specifier that can't be resolved to a module location).\n\nBelow you can see a map that defines a `square` module specifier key, which in this case maps to a relative address value.\n\n```\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"square\": \"./shapes/square.js\"\n    }\n  }\n</script>\n```\n\nWith this map we can now use a bare name when we import the module:\n\n```\nimport { name as squareName, draw } from \"square\";\n```\n\n### [Remapping module paths](#remapping_module_paths)\n\nModule specifier map entries, where both the specifier key and its associated value have a trailing forward slash (`/`), can be used as a path-prefix. This allows the remapping of a whole set of import URLs from one location to another. It can also be used to emulate working with \"packages and modules\", such as you might see in the Node ecosystem.\n\n**Note:** The trailing `/` indicates that the module specifier key can be substituted as _part_ of a module specifier. If this is not present, the browser will only match (and substitute) the whole module specifier key.\n\n#### Packages of modules\n\nThe following JSON import map definition maps `lodash` as a bare name, and the module specifier prefix `lodash/` to the path `/node_modules/lodash-es/` (resolved to the document base URL):\n\n```\n{\n  \"imports\": {\n    \"lodash\": \"/node_modules/lodash-es/lodash.js\",\n    \"lodash/\": \"/node_modules/lodash-es/\"\n  }\n}\n```\n\nWith this mapping you can import both the whole \"package\", using the bare name, and modules within it (using the path mapping):\n\n```\nimport _ from \"lodash\";\nimport fp from \"lodash/fp.js\";\n```\n\nIt is possible to import `fp` above without the `.js` file extension, but you would need to create a bare module specifier key for that file, such as `lodash/fp`, rather than using the path. This may be reasonable for just one module, but scales poorly if you wish to import many modules.\n\n#### General URL remapping\n\nA module specifier key doesn't have to be path — it can also be an absolute URL (or a URL-like relative path like `./`, `../`, `/`). This may be useful if you want to remap a module that has absolute paths to a resource with your own local resources.\n\n```\n{\n  \"imports\": {\n    \"https://www.unpkg.com/moment/\": \"/node_modules/moment/\"\n  }\n}\n```\n\n### [Scoped modules for version management](#scoped_modules_for_version_management)\n\nEcosystems like Node use package managers such as npm to manage modules and their dependencies. The package manager ensures that each module is separated from other modules and their dependencies. As a result, while a complex application might include the same module multiple times with several different versions in different parts of the module graph, users do not need to think about this complexity.\n\n**Note:** You can also achieve version management using relative paths, but this is subpar because, among other things, this forces a particular structure on your project, and prevents you from using bare module names.\n\nImport maps similarly allow you to have multiple versions of dependencies in your application and refer to them using the same module specifier. You implement this with the `scopes` key, which allows you to provide module specifier maps that will be used depending on the path of the script performing the import. The example below demonstrates this.\n\n```\n{\n  \"imports\": {\n    \"coolmodule\": \"/node_modules/coolmodule/index.js\"\n  },\n  \"scopes\": {\n    \"/node_modules/dependency/\": {\n      \"coolmodule\": \"/node_modules/some/other/location/coolmodule/index.js\"\n    }\n  }\n}\n```\n\nWith this mapping, if a script with an URL that contains `/node_modules/dependency/` imports `coolmodule`, the version in `/node_modules/some/other/location/coolmodule/index.js` will be used. The map in `imports` is used as a fallback if there is no matching scope in the scoped map, or the matching scopes don't contain a matching specifier. For example, if `coolmodule` is imported from a script with a non-matching scope path, then the module specifier map in `imports` will be used instead, mapping to the version in `/node_modules/coolmodule/index.js`.\n\nNote that the path used to select a scope does not affect how the address is resolved. The value in the mapped path does not have to match the scopes path, and relative paths are still resolved to the base URL of the script that contains the import map.\n\nJust as for module specifier maps, you can have many scope keys, and these may contain overlapping paths. If multiple scopes match the referrer URL, then the most specific scope path is checked first (the longest scope key) for a matching specifier. The browsers will fall back to the next most specific matching scoped path if there is no matching specifier, and so on. If there is no matching specifier in any of the matching scopes, the browser checks for a match in the module specifier map in the `imports` key.\n\n### [Improve caching by mapping away hashed filenames](#improve_caching_by_mapping_away_hashed_filenames)\n\nScript files used by websites often have hashed filenames to simplify caching. The downside of this approach is that if a module changes, any modules that import it using its hashed filename will also need to be updated/regenerated. This potentially results in a cascade of updates, which is wasteful of network resources.\n\nImport maps provide a convenient solution to this problem. Rather than depending on specific hashed filenames, applications and scripts instead depend on an un-hashed version of the module name (address). An import map like the one below then provides a mapping to the actual script file.\n\n```\n{\n  \"imports\": {\n    \"main_script\": \"/node/srcs/application-fg7744e1b.js\",\n    \"dependency_script\": \"/node/srcs/dependency-3qn7e4b1q.js\"\n  }\n}\n```\n\nIf `dependency_script` changes, then its hash contained in the file name changes as well. In this case, we only need to update the import map to reflect the changed name of the module. We don't have to update the source of any JavaScript code that depends on it, because the specifier in the import statement does not change.\n\n## [Applying the module to your HTML](#applying_the_module_to_your_html)\n\nNow we just need to apply the `main.js` module to our HTML page. This is very similar to how we apply a regular script to a page, with a few notable differences.\n\nFirst of all, you need to include `type=\"module\"` in the [`<script>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) element, to declare this script as a module. To import the `main.js` script, we use this:\n\n```\n<script type=\"module\" src=\"main.js\"></script>\n```\n\nYou can also embed the module's script directly into the HTML file by placing the JavaScript code within the body of the `<script>` element:\n\n```\n<script type=\"module\">\n  /* JavaScript module code here */\n</script>\n```\n\nYou can only use `import` and `export` statements inside modules, not regular scripts. An error will be thrown if your `<script>` element doesn't have the `type=\"module\"` attribute and attempts to import other modules. For example:\n\n```\n<script>\n  import _ from \"lodash\"; // SyntaxError: import declarations may only appear at top level of a module\n  // ...\n</script>\n<script src=\"a-module-using-import-statements.js\"></script>\n<!-- SyntaxError: import declarations may only appear at top level of a module -->\n```\n\nYou should generally define all your modules in separate files. Modules declared inline in HTML can only import other modules, but anything they export will not be accessible by other modules (because they don't have a URL).\n\n**Note:** Modules and their dependencies can be preloaded by specifying them in [`<link>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link) elements with [`rel=\"modulepreloaded\"`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/modulepreload). This can significantly reduce load time when the modules are used.\n\n## [Other differences between modules and standard scripts](#other_differences_between_modules_and_standard_scripts)\n\n*   You need to pay attention to local testing — if you try to load the HTML file locally (i.e. with a `file://` URL), you'll run into CORS errors due to JavaScript module security requirements. You need to do your testing through a server.\n*   Also, note that you might get different behavior from sections of script defined inside modules as opposed to in standard scripts. This is because modules use [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) automatically.\n*   There is no need to use the `defer` attribute (see [`<script>` attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attributes)) when loading a module script; modules are deferred automatically.\n*   Modules are only executed once, even if they have been referenced in multiple `<script>` tags.\n*   Last but not least, let's make this clear — module features are imported into the scope of a single script — they aren't available in the global scope. Therefore, you will only be able to access imported features in the script they are imported into, and you won't be able to access them from the JavaScript console, for example. You'll still get syntax errors shown in the DevTools, but you'll not be able to use some of the debugging techniques you might have expected to use.\n\nModule-defined variables are scoped to the module unless explicitly attached to the global object. On the other hand, globally-defined variables are available within the module. For example, given the following code:\n\n```\n<!doctype html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title></title>\n    <link rel=\"stylesheet\" href=\"\" />\n  </head>\n  <body>\n    <div id=\"main\"></div>\n    <script>\n      // A var statement creates a global variable.\n      var text = \"Hello\";\n    </script>\n    <script type=\"module\" src=\"./render.js\"></script>\n  </body>\n</html>\n```\n\n```\n/* render.js */\ndocument.getElementById(\"main\").innerText = text;\n```\n\nThe page would still render `Hello`, because the global variables `text` and `document` are available in the module. (Also note from this example that a module doesn't necessarily need an import/export statement — the only thing needed is for the entry point to have `type=\"module\"`.)\n\n## [Default exports versus named exports](#default_exports_versus_named_exports)\n\nThe functionality we've exported so far has been comprised of **named exports** — each item (be it a function, `const`, etc.) has been referred to by its name upon export, and that name has been used to refer to it on import as well.\n\nThere is also a type of export called the **default export** — this is designed to make it easy to have a default function provided by a module, and also helps JavaScript modules to interoperate with existing CommonJS and AMD module systems (as explained nicely in [ES6 In Depth: Modules](https://hacks.mozilla.org/2015/08/es6-in-depth-modules/) by Jason Orendorff; search for \"Default exports\").\n\nLet's look at an example as we explain how it works. In our basic-modules `square.js` you can find a function called `randomSquare()` that creates a square with a random color, size, and position. We want to export this as our default, so at the bottom of the file we write this:\n\n```\nexport default randomSquare;\n```\n\nNote the lack of curly braces.\n\nWe could instead prepend `export default` onto the function and define it as an anonymous function, like this:\n\n```\nexport default function (ctx) {\n  // …\n}\n```\n\nOver in our `main.js` file, we import the default function using this line:\n\n```\nimport randomSquare from \"./modules/square.js\";\n```\n\nAgain, note the lack of curly braces. This is because there is only one default export allowed per module, and we know that `randomSquare` is it. The above line is basically shorthand for:\n\n```\nimport { default as randomSquare } from \"./modules/square.js\";\n```\n\n**Note:** The as syntax for renaming exported items is explained below in the [Renaming imports and exports](#renaming_imports_and_exports) section.\n\n## [Avoiding naming conflicts](#avoiding_naming_conflicts)\n\nSo far, our canvas shape drawing modules seem to be working OK. But what happens if we try to add a module that deals with drawing another shape, like a circle or triangle? These shapes would probably have associated functions like `draw()`, `reportArea()`, etc. too; if we tried to import different functions of the same name into the same top-level module file, we'd end up with conflicts and errors.\n\nFortunately there are a number of ways to get around this. We'll look at these in the following sections.\n\n## [Renaming imports and exports](#renaming_imports_and_exports)\n\nInside your `import` and `export` statement's curly braces, you can use the keyword `as` along with a new feature name, to change the identifying name you will use for a feature inside the top-level module.\n\nSo for example, both of the following would do the same job, albeit in a slightly different way:\n\n```\n// inside module.js\nexport { function1 as newFunctionName, function2 as anotherNewFunctionName };\n\n// inside main.js\nimport { newFunctionName, anotherNewFunctionName } from \"./modules/module.js\";\n```\n\n```\n// inside module.js\nexport { function1, function2 };\n\n// inside main.js\nimport {\n  function1 as newFunctionName,\n  function2 as anotherNewFunctionName,\n} from \"./modules/module.js\";\n```\n\nLet's look at a real example. In our [renaming](https://github.com/mdn/js-examples/tree/main/module-examples/renaming) directory you'll see the same module system as in the previous example, except that we've added `circle.js` and `triangle.js` modules to draw and report on circles and triangles.\n\nInside each of these modules, we've got features with the same names being exported, and therefore each has the same `export` statement at the bottom:\n\n```\nexport { name, draw, reportArea, reportPerimeter };\n```\n\nWhen importing these into `main.js`, if we tried to use\n\n```\nimport { name, draw, reportArea, reportPerimeter } from \"./modules/square.js\";\nimport { name, draw, reportArea, reportPerimeter } from \"./modules/circle.js\";\nimport { name, draw, reportArea, reportPerimeter } from \"./modules/triangle.js\";\n```\n\nThe browser would throw an error such as \"SyntaxError: redeclaration of import name\" (Firefox).\n\nInstead we need to rename the imports so that they are unique:\n\n```\nimport {\n  name as squareName,\n  draw as drawSquare,\n  reportArea as reportSquareArea,\n  reportPerimeter as reportSquarePerimeter,\n} from \"./modules/square.js\";\n\nimport {\n  name as circleName,\n  draw as drawCircle,\n  reportArea as reportCircleArea,\n  reportPerimeter as reportCirclePerimeter,\n} from \"./modules/circle.js\";\n\nimport {\n  name as triangleName,\n  draw as drawTriangle,\n  reportArea as reportTriangleArea,\n  reportPerimeter as reportTrianglePerimeter,\n} from \"./modules/triangle.js\";\n```\n\nNote that you could solve the problem in the module files instead, e.g.\n\n```\n// in square.js\nexport {\n  name as squareName,\n  draw as drawSquare,\n  reportArea as reportSquareArea,\n  reportPerimeter as reportSquarePerimeter,\n};\n```\n\n```\n// in main.js\nimport {\n  squareName,\n  drawSquare,\n  reportSquareArea,\n  reportSquarePerimeter,\n} from \"./modules/square.js\";\n```\n\nAnd it would work just the same. What style you use is up to you, however it arguably makes more sense to leave your module code alone, and make the changes in the imports. This especially makes sense when you are importing from third party modules that you don't have any control over.\n\n## [Creating a module object](#creating_a_module_object)\n\nThe above method works OK, but it's a little messy and long-winded. An even better solution is to import each module's features inside a module object. The following syntax form does that:\n\n```\nimport * as Module from \"./modules/module.js\";\n```\n\nThis grabs all the exports available inside `module.js`, and makes them available as members of an object `Module`, effectively giving it its own namespace. So for example:\n\n```\nModule.function1();\nModule.function2();\n```\n\nAgain, let's look at a real example. If you go to our [module-objects](https://github.com/mdn/js-examples/tree/main/module-examples/module-objects) directory, you'll see the same example again, but rewritten to take advantage of this new syntax. In the modules, the exports are all in the following simple form:\n\n```\nexport { name, draw, reportArea, reportPerimeter };\n```\n\nThe imports on the other hand look like this:\n\n```\nimport * as Canvas from \"./modules/canvas.js\";\n\nimport * as Square from \"./modules/square.js\";\nimport * as Circle from \"./modules/circle.js\";\nimport * as Triangle from \"./modules/triangle.js\";\n```\n\nIn each case, you can now access the module's imports underneath the specified object name, for example:\n\n```\nconst square1 = Square.draw(myCanvas.ctx, 50, 50, 100, \"blue\");\nSquare.reportArea(square1.length, reportList);\nSquare.reportPerimeter(square1.length, reportList);\n```\n\nSo you can now write the code just the same as before (as long as you include the object names where needed), and the imports are much neater.\n\n## [Modules and classes](#modules_and_classes)\n\nAs we hinted at earlier, you can also export and import classes; this is another option for avoiding conflicts in your code, and is especially useful if you've already got your module code written in an object-oriented style.\n\nYou can see an example of our shape drawing module rewritten with ES classes in our [classes](https://github.com/mdn/js-examples/tree/main/module-examples/classes) directory. As an example, the [`square.js`](https://github.com/mdn/js-examples/blob/main/module-examples/classes/modules/square.js) file now contains all its functionality in a single class:\n\n```\nclass Square {\n  constructor(ctx, listId, length, x, y, color) {\n    // …\n  }\n\n  draw() {\n    // …\n  }\n\n  // …\n}\n```\n\nwhich we then export:\n\nOver in [`main.js`](https://github.com/mdn/js-examples/blob/main/module-examples/classes/main.js), we import it like this:\n\n```\nimport { Square } from \"./modules/square.js\";\n```\n\nAnd then use the class to draw our square:\n\n```\nconst square1 = new Square(myCanvas.ctx, myCanvas.listId, 50, 50, 100, \"blue\");\nsquare1.draw();\nsquare1.reportArea();\nsquare1.reportPerimeter();\n```\n\n## [Aggregating modules](#aggregating_modules)\n\nThere will be times where you'll want to aggregate modules together. You might have multiple levels of dependencies, where you want to simplify things, combining several submodules into one parent module. This is possible using export syntax of the following forms in the parent module:\n\n```\nexport * from \"x.js\";\nexport { name } from \"x.js\";\n```\n\nFor an example, see our [module-aggregation](https://github.com/mdn/js-examples/tree/main/module-examples/module-aggregation) directory. In this example (based on our earlier classes example) we've got an extra module called `shapes.js`, which aggregates all the functionality from `circle.js`, `square.js`, and `triangle.js` together. We've also moved our submodules inside a subdirectory inside the `modules` directory called `shapes`. So the module structure in this example is:\n\nmodules/\n  canvas.js\n  shapes.js\n  shapes/\n    circle.js\n    square.js\n    triangle.js\n\nIn each of the submodules, the export is of the same form, e.g.\n\nNext up comes the aggregation part. Inside [`shapes.js`](https://github.com/mdn/js-examples/blob/main/module-examples/module-aggregation/modules/shapes.js), we include the following lines:\n\n```\nexport { Square } from \"./shapes/square.js\";\nexport { Triangle } from \"./shapes/triangle.js\";\nexport { Circle } from \"./shapes/circle.js\";\n```\n\nThese grab the exports from the individual submodules and effectively make them available from the `shapes.js` module.\n\n**Note:** The exports referenced in `shapes.js` basically get redirected through the file and don't really exist there, so you won't be able to write any useful related code inside the same file.\n\nSo now in the `main.js` file, we can get access to all three module classes by replacing\n\n```\nimport { Square } from \"./modules/square.js\";\nimport { Circle } from \"./modules/circle.js\";\nimport { Triangle } from \"./modules/triangle.js\";\n```\n\nwith the following single line:\n\n```\nimport { Square, Circle, Triangle } from \"./modules/shapes.js\";\n```\n\n## [Dynamic module loading](#dynamic_module_loading)\n\nA recent addition to JavaScript modules functionality is dynamic module loading. This allows you to dynamically load modules only when they are needed, rather than having to load everything up front. This has some obvious performance advantages; let's read on and see how it works.\n\nThis new functionality allows you to call [`import()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import) as a function, passing it the path to the module as a parameter. It returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise), which fulfills with a module object (see [Creating a module object](#creating_a_module_object)) giving you access to that object's exports. For example:\n\n```\nimport(\"./modules/myModule.js\").then((module) => {\n  // Do something with the module.\n});\n```\n\n**Note:** Dynamic import is permitted in the browser main thread, and in shared and dedicated workers. However `import()` will throw if called in a service worker or worklet.\n\nLet's look at an example. In the [dynamic-module-imports](https://github.com/mdn/js-examples/tree/main/module-examples/dynamic-module-imports) directory we've got another example based on our classes example. This time however we are not drawing anything on the canvas when the example loads. Instead, we include three buttons — \"Circle\", \"Square\", and \"Triangle\" — that, when pressed, dynamically load the required module and then use it to draw the associated shape.\n\nIn this example we've only made changes to our [`index.html`](https://github.com/mdn/js-examples/blob/main/module-examples/dynamic-module-imports/index.html) and [`main.js`](https://github.com/mdn/js-examples/blob/main/module-examples/dynamic-module-imports/main.js) files — the module exports remain the same as before.\n\nOver in `main.js` we've grabbed a reference to each button using a [`document.querySelector()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector) call, for example:\n\n```\nconst squareBtn = document.querySelector(\".square\");\n```\n\nWe then attach an event listener to each button so that when pressed, the relevant module is dynamically loaded and used to draw the shape:\n\n```\nsquareBtn.addEventListener(\"click\", () => {\n  import(\"./modules/square.js\").then((Module) => {\n    const square1 = new Module.Square(\n      myCanvas.ctx,\n      myCanvas.listId,\n      50,\n      50,\n      100,\n      \"blue\",\n    );\n    square1.draw();\n    square1.reportArea();\n    square1.reportPerimeter();\n  });\n});\n```\n\nNote that, because the promise fulfillment returns a module object, the class is then made a subfeature of the object, hence we now need to access the constructor with `Module.` prepended to it, e.g. `Module.Square( /* … */ )`.\n\nAnother advantage of dynamic imports is that they are always available, even in script environments. Therefore, if you have an existing `<script>` tag in your HTML that doesn't have `type=\"module\"`, you can still reuse code distributed as modules by dynamically importing it.\n\n```\n<script>\n  import(\"./modules/square.js\").then((module) => {\n    // Do something with the module.\n  });\n  // Other code that operates on the global scope and is not\n  // ready to be refactored into modules yet.\n  var btn = document.querySelector(\".square\");\n</script>\n```\n\n## [Top level await](#top_level_await)\n\nTop level await is a feature available within modules. This means the `await` keyword can be used. It allows modules to act as big [asynchronous functions](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing) meaning code can be evaluated before use in parent modules, but without blocking sibling modules from loading.\n\nLet's take a look at an example. You can find all the files and code described in this section within the [`top-level-await`](https://github.com/mdn/js-examples/tree/main/module-examples/top-level-await) directory, which extends from the previous examples.\n\nFirstly we'll declare our color palette in a separate [`colors.json`](https://github.com/mdn/js-examples/blob/main/module-examples/top-level-await/data/colors.json) file:\n\n```\n{\n  \"yellow\": \"#F4D03F\",\n  \"green\": \"#52BE80\",\n  \"blue\": \"#5499C7\",\n  \"red\": \"#CD6155\",\n  \"orange\": \"#F39C12\"\n}\n```\n\nThen we'll create a module called [`getColors.js`](https://github.com/mdn/js-examples/blob/main/module-examples/top-level-await/modules/getColors.js) which uses a fetch request to load the [`colors.json`](https://github.com/mdn/js-examples/blob/main/module-examples/top-level-await/data/colors.json) file and return the data as an object.\n\n```\n// fetch request\nconst colors = fetch(\"../data/colors.json\").then((response) => response.json());\n\nexport default await colors;\n```\n\nNotice the last export line here.\n\nWe're using the keyword `await` before specifying the constant `colors` to export. This means any other modules which include this one will wait until `colors` has been downloaded and parsed before using it.\n\nLet's include this module in our [`main.js`](https://github.com/mdn/js-examples/blob/main/module-examples/top-level-await/main.js) file:\n\n```\nimport colors from \"./modules/getColors.js\";\nimport { Canvas } from \"./modules/canvas.js\";\n\nconst circleBtn = document.querySelector(\".circle\");\n\n// …\n```\n\nWe'll use `colors` instead of the previously used strings when calling our shape functions:\n\n```\nconst square1 = new Module.Square(\n  myCanvas.ctx,\n  myCanvas.listId,\n  50,\n  50,\n  100,\n  colors.blue,\n);\n\nconst circle1 = new Module.Circle(\n  myCanvas.ctx,\n  myCanvas.listId,\n  75,\n  200,\n  100,\n  colors.green,\n);\n\nconst triangle1 = new Module.Triangle(\n  myCanvas.ctx,\n  myCanvas.listId,\n  100,\n  75,\n  190,\n  colors.yellow,\n);\n```\n\nThis is useful because the code within [`main.js`](https://github.com/mdn/js-examples/blob/main/module-examples/top-level-await/main.js) won't execute until the code in [`getColors.js`](https://github.com/mdn/js-examples/blob/main/module-examples/top-level-await/modules/getColors.js) has run. However it won't block other modules being loaded. For instance our [`canvas.js`](https://github.com/mdn/js-examples/blob/main/module-examples/top-level-await/modules/canvas.js) module will continue to load while `colors` is being fetched.\n\n## [Import declarations are hoisted](#import_declarations_are_hoisted)\n\nImport declarations are [hoisted](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting). In this case, it means that the imported values are available in the module's code even before the place that declares them, and that the imported module's side effects are produced before the rest of the module's code starts running.\n\nSo for example, in `main.js`, importing `Canvas` in the middle of the code would still work:\n\n```\n// …\nconst myCanvas = new Canvas(\"myCanvas\", document.body, 480, 320);\nmyCanvas.create();\nimport { Canvas } from \"./modules/canvas.js\";\nmyCanvas.createReportList();\n// …\n```\n\nStill, it is considered good practice to put all your imports at the top of the code, which makes it easier to analyze dependencies.\n\n## [Cyclic imports](#cyclic_imports)\n\nModules can import other modules, and those modules can import other modules, and so on. This forms a [directed graph](https://en.wikipedia.org/wiki/Directed_graph) called the \"dependency graph\". In an ideal world, this graph is [acyclic](https://en.wikipedia.org/wiki/Directed_acyclic_graph). In this case, the graph can be evaluated using a depth-first traversal.\n\nHowever, cycles are often inevitable. Cyclic import arises if module `a` imports module `b`, but `b` directly or indirectly depends on `a`. For example:\n\n```\n// -- a.js --\nimport { b } from \"./b.js\";\n\n// -- b.js --\nimport { a } from \"./a.js\";\n\n// Cycle:\n// a.js ───> b.js\n//  ^         │\n//  └─────────┘\n```\n\nCyclic imports don't always fail. The imported variable's value is only retrieved when the variable is actually used (hence allowing [live bindings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#imported_values_can_only_be_modified_by_the_exporter)), and only if the variable remains uninitialized at that time will a [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init) be thrown.\n\n```\n// -- a.js --\nimport { b } from \"./b.js\";\n\nsetTimeout(() => {\n  console.log(b); // 1\n}, 10);\n\nexport const a = 2;\n\n// -- b.js --\nimport { a } from \"./a.js\";\n\nsetTimeout(() => {\n  console.log(a); // 2\n}, 10);\n\nexport const b = 1;\n```\n\nIn this example, both `a` and `b` are used asynchronously. Therefore, at the time the module is evaluated, neither `b` nor `a` is actually read, so the rest of the code is executed as normal, and the two `export` declarations produce the values of `a` and `b`. Then, after the timeout, both `a` and `b` are available, so the two `console.log` statements also execute as normal.\n\nIf you change the code to use `a` synchronously, the module evaluation fails:\n\n```\n// -- a.js (entry module) --\nimport { b } from \"./b.js\";\n\nexport const a = 2;\n\n// -- b.js --\nimport { a } from \"./a.js\";\n\nconsole.log(a); // ReferenceError: Cannot access 'a' before initialization\nexport const b = 1;\n```\n\nThis is because when JavaScript evaluates `a.js`, it needs to first evaluate `b.js`, the dependency of `a.js`. However, `b.js` uses `a`, which is not yet available.\n\nOn the other hand, if you change the code to use `b` synchronously but `a` asynchronously, the module evaluation succeeds:\n\n```\n// -- a.js (entry module) --\nimport { b } from \"./b.js\";\n\nconsole.log(b); // 1\nexport const a = 2;\n\n// -- b.js --\nimport { a } from \"./a.js\";\n\nsetTimeout(() => {\n  console.log(a); // 2\n}, 10);\nexport const b = 1;\n```\n\nThis is because the evaluation of `b.js` completes normally, so the value of `b` is available when `a.js` is evaluated.\n\nYou should usually avoid cyclic imports in your project, because they make your code more error-prone. Some common cycle-elimination techniques are:\n\n*   Merge the two modules into one.\n*   Move the shared code into a third module.\n*   Move some code from one module to the other.\n\nHowever, cyclic imports can also occur if the libraries depend on each other, which is harder to fix.\n\nThe introduction of modules encourages the JavaScript ecosystem to distribute and reuse code in a modular fashion. However, that doesn't necessarily mean a piece of JavaScript code can run in every environment. Suppose you discovered a module that generates SHA hashes of your user's password. Can you use it in the browser front end? Can you use it on your Node.js server? The answer is: it depends.\n\nModules still have access to global variables, as demonstrated previously. If the module references globals like `window`, it can run in the browser, but will throw an error in your Node.js server, because `window` is not available there. Similarly, if the code requires access to `process` to be functional, it can only be used in Node.js.\n\nIn order to maximize the reusability of a module, it is often advised to make the code \"isomorphic\" — that is, exhibits the same behavior in every runtime. This is commonly achieved in three ways:\n\n*   Separate your modules into \"core\" and \"binding\". For the \"core\", focus on pure JavaScript logic like computing the hash, without any DOM, network, filesystem access, and expose utility functions. For the \"binding\" part, you can read from and write to the global context. For example, the \"browser binding\" may choose to read the value from an input box, while the \"Node binding\" may read it from `process.env`, but values read from either place will be piped to the same core function and handled in the same way. The core can be imported in every environment and used in the same way, while only the binding, which is usually lightweight, needs to be platform-specific.\n*   Detect whether a particular global exists before using it. For example, if you test that `typeof window === \"undefined\"`, you know that you are probably in a Node.js environment, and should not read DOM.\n    \n    ```\n    // myModule.js\n    let password;\n    if (typeof process !== \"undefined\") {\n      // We are running in Node.js; read it from `process.env`\n      password = process.env.PASSWORD;\n    } else if (typeof window !== \"undefined\") {\n      // We are running in the browser; read it from the input box\n      password = document.getElementById(\"password\").value;\n    }\n    ```\n    \n    This is preferable if the two branches actually end up with the same behavior (\"isomorphic\"). If it's impossible to provide the same functionality, or if doing so involves loading significant amounts of code while a large part remains unused, better use different \"bindings\" instead.\n*   Use a polyfill to provide a fallback for missing features. For example, if you want to use the [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) function, which is only supported in Node.js since v18, you can use a similar API, like the one provided by [`node-fetch`](https://www.npmjs.com/package/node-fetch). You can do so conditionally through dynamic imports:\n    \n    ```\n    // myModule.js\n    if (typeof fetch === \"undefined\") {\n      // We are running in Node.js; use node-fetch\n      globalThis.fetch = (await import(\"node-fetch\")).default;\n    }\n    // …\n    ```\n    \n    The [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) variable is a global object that is available in every environment and is useful if you want to read or create global variables within modules.\n\nThese practices are not unique to modules. Still, with the trend of code reusability and modularization, you are encouraged to make your code cross-platform so that it can be enjoyed by as many people as possible. Runtimes like Node.js are also actively implementing web APIs where possible to improve interoperability with the web.\n\n## [Troubleshooting](#troubleshooting)\n\nHere are a few tips that may help you if you are having trouble getting your modules to work. Feel free to add to the list if you discover more!\n\n*   We mentioned this before, but to reiterate: `.mjs` files need to be loaded with a MIME-type of `text/javascript` (or another JavaScript-compatible MIME-type, but `text/javascript` is recommended), otherwise you'll get a strict MIME type checking error like \"The server responded with a non-JavaScript MIME type\".\n*   If you try to load the HTML file locally (i.e. with a `file://` URL), you'll run into CORS errors due to JavaScript module security requirements. You need to do your testing through a server. GitHub pages is ideal as it also serves `.mjs` files with the correct MIME type.\n*   Because `.mjs` is a non-standard file extension, some operating systems might not recognize it, or try to replace it with something else. For example, we found that macOS was silently adding on `.js` to the end of `.mjs` files and then automatically hiding the file extension. So all of our files were actually coming out as `x.mjs.js`. Once we turned off automatically hiding file extensions, and trained it to accept `.mjs`, it was OK.\n\n## [See also](#see_also)",
    "title": "JavaScript modules - JavaScript | MDN",
    "description": "This guide gives you all you need to get started with JavaScript module syntax.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_overview",
    "markdown": "# JavaScript language overview - JavaScript\n\nJavaScript is a multi-paradigm, dynamic language with types and operators, standard built-in objects, and methods. Its syntax is based on the Java and C languages — many structures from those languages apply to JavaScript as well. JavaScript supports object-oriented programming with [object prototypes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) and classes. It also supports functional programming since functions are [first-class](https://developer.mozilla.org/en-US/docs/Glossary/First-class_Function) objects that can be easily created via expressions and passed around like any other object.\n\nThis page serves as a quick overview of various JavaScript language features, written for readers with background in other languages, such as C or Java.\n\n## [Data types](#data_types)\n\nLet's start off by looking at the building blocks of any language: the types. JavaScript programs manipulate values, and those values all belong to a type. JavaScript offers seven _primitive types_:\n\n*   [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#number_type): used for all number values (integer and floating point) except for _very_ big integers.\n*   [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#bigint_type): used for arbitrarily large integers.\n*   [String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#string_type): used to store text.\n*   [Boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#boolean_type): `true` and `false` — usually used for conditional logic.\n*   [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#symbol_type): used for creating unique identifiers that won't collide.\n*   [Undefined](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#undefined_type): indicating that a variable has not been assigned a value.\n*   [Null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#null_type): indicating a deliberate non-value.\n\nEverything else is known as an [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#objects). Common object types include:\n\n*   [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function)\n*   [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\n*   [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)\n*   [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n*   [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)\n\nFunctions aren't special data structures in JavaScript — they are just a special type of object that can be called.\n\n### [Numbers](#numbers)\n\nJavaScript has two built-in numeric types: Number and BigInt.\n\nThe Number type is a [IEEE 754 64-bit double-precision floating point value](https://en.wikipedia.org/wiki/Double_precision_floating-point_format), which means integers can be safely represented between [\\-(253 − 1)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER) and [253 − 1](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) without loss of precision, and floating point numbers can be stored all the way up to [1.79 × 10308](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE). Within numbers, JavaScript does not distinguish between floating point numbers and integers.\n\n```\nconsole.log(3 / 2); // 1.5, not 1\n```\n\nSo an _apparent integer_ is in fact _implicitly a float_. Because of IEEE 754 encoding, sometimes floating point arithmetic can be imprecise.\n\n```\nconsole.log(0.1 + 0.2); // 0.30000000000000004\n```\n\nFor operations that expect integers, such as bitwise operations, the number will be converted to a 32-bit integer.\n\n[Number literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_literals) can also have prefixes to indicate the base (binary, octal, decimal, or hexadecimal), or an exponent suffix.\n\n```\nconsole.log(0b111110111); // 503\nconsole.log(0o767); // 503\nconsole.log(0x1f7); // 503\nconsole.log(5.03e2); // 503\n```\n\nThe [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) type is an arbitrary length integer. Its behavior is similar to C's integer types (e.g. division truncates to zero), except it can grow indefinitely. BigInts are specified with a number literal and an `n` suffix.\n\n```\nconsole.log(-3n / 2n); // -1n\n```\n\nThe standard [arithmetic operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#arithmetic_operators) are supported, including addition, subtraction, remainder arithmetic, etc. BigInts and numbers cannot be mixed in arithmetic operations.\n\nThe [`Math`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math) object provides standard mathematical functions and constants.\n\n```\nMath.sin(3.5);\nconst circumference = 2 * Math.PI * r;\n```\n\nThere are three ways to convert a string to a number:\n\n*   [`parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt), which parses the string for an integer.\n*   [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat), which parses the string for a floating-point number.\n*   The [`Number()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number) function, which parses a string as if it's a number literal and supports many different number representations.\n\nYou can also use the [unary plus `+`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus) as a shorthand for `Number()`.\n\nNumber values also include [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) (short for \"Not a Number\") and [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity). Many \"invalid math\" operations will return `NaN` — for example, if attempting to parse a non-numeric string, or using [`Math.log()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log) on a negative value. Division by zero produces `Infinity` (positive or negative).\n\n`NaN` is contagious: if you provide it as an operand to any mathematical operation, the result will also be `NaN`. `NaN` is the only value in JavaScript that's not equal to itself (per IEEE 754 specification).\n\n### [Strings](#strings)\n\nStrings in JavaScript are sequences of Unicode characters. This should be welcome news to anyone who has had to deal with internationalization. More accurately, they are [UTF-16 encoded](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\n```\nconsole.log(\"Hello, world\");\nconsole.log(\"你好，世界！\"); // Nearly all Unicode characters can be written literally in string literals\n```\n\nStrings can be written with either single or double quotes — JavaScript does not have the distinction between characters and strings. If you want to represent a single character, you just use a string consisting of that single character.\n\n```\nconsole.log(\"Hello\"[1] === \"e\"); // true\n```\n\nTo find the length of a string (in [code units](https://developer.mozilla.org/en-US/docs/Glossary/Code_unit)), access its [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length) property.\n\nStrings have [utility methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#instance_methods) to manipulate the string and access information about the string. Because all primitives are immutable by design, these methods return new strings.\n\nThe `+` operator is overloaded for strings: when one of the operands is a string, it performs string concatenation instead of number addition. A special [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) syntax allows you to write strings with embedded expressions more succinctly. Unlike Python's f-strings or C#'s interpolated strings, template literals use backticks (not single or double quotes).\n\n```\nconst age = 25;\nconsole.log(\"I am \" + age + \" years old.\"); // String concatenation\nconsole.log(`I am ${age} years old.`); // Template literal\n```\n\n### [Other types](#other_types)\n\nJavaScript distinguishes between [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null), which indicates a deliberate non-value (and is only accessible through the `null` keyword), and [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), which indicates absence of value. There are many ways to obtain `undefined`:\n\n*   A [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return) statement with no value (`return;`) implicitly returns `undefined`.\n*   Accessing a nonexistent [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) property (`obj.iDontExist`) returns `undefined`.\n*   A variable declaration without initialization (`let x;`) will implicitly initialize the variable to `undefined`.\n\nJavaScript has a Boolean type, with possible values `true` and `false` — both of which are keywords. Any value can be converted to a boolean according to the following rules:\n\n1.  `false`, `0`, empty strings (`\"\"`), `NaN`, `null`, and `undefined` all become `false`.\n2.  All other values become `true`.\n\nYou can perform this conversion explicitly using the [`Boolean()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean) function:\n\n```\nBoolean(\"\"); // false\nBoolean(234); // true\n```\n\nHowever, this is rarely necessary, as JavaScript will silently perform this conversion when it expects a boolean, such as in an `if` statement (see [Control structures](#control_structures)). For this reason, we sometimes speak of \"[truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy)\" and \"[falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy)\", meaning values that become `true` and `false`, respectively, when used in boolean contexts.\n\nBoolean operations such as `&&` (logical _and_), `||` (logical _or_), and `!` (logical _not_) are supported; see [Operators](#operators).\n\nThe Symbol type is often used to create unique identifiers. Every symbol created with the [`Symbol()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) function is guaranteed to be unique. In addition, there are registered symbols, which are shared constants, and well-known symbols, which are utilized by the language as \"protocols\" for certain operations. You can read more about them in the [symbol reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol).\n\n## [Variables](#variables)\n\nVariables in JavaScript are declared using one of three keywords: [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const), or [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var).\n\n`let` allows you to declare block-level variables. The declared variable is available from the _block_ it is enclosed in.\n\n```\nlet a;\nlet name = \"Simon\";\n\n// myLetVariable is *not* visible out here\n\nfor (let myLetVariable = 0; myLetVariable < 5; myLetVariable++) {\n  // myLetVariable is only visible in here\n}\n\n// myLetVariable is *not* visible out here\n```\n\n`const` allows you to declare variables whose values are never intended to change. The variable is available from the _block_ it is declared in.\n\n```\nconst Pi = 3.14; // Declare variable Pi\nconsole.log(Pi); // 3.14\n```\n\nA variable declared with `const` cannot be reassigned.\n\n```\nconst Pi = 3.14;\nPi = 1; // will throw an error because you cannot change a constant variable.\n```\n\n`const` declarations only prevent _reassignments_ — they don't prevent _mutations_ of the variable's value, if it's an object.\n\n```\nconst obj = {};\nobj.a = 1; // no error\nconsole.log(obj); // { a: 1 }\n```\n\n`var` declarations can have surprising behaviors (for example, they are not block-scoped), and they are discouraged in modern JavaScript code.\n\nIf you declare a variable without assigning any value to it, its value is `undefined`. You can't declare a `const` variable without an initializer, because you can't change it later anyway.\n\n`let` and `const` declared variables still occupy the entire scope they are defined in, and are in a region known as the [temporal dead zone](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz) before the actual line of declaration. This has some interesting interactions with variable shadowing, which don't occur in other languages.\n\n```\nfunction foo(x, condition) {\n  if (condition) {\n    console.log(x);\n    const x = 2;\n    console.log(x);\n  }\n}\n\nfoo(1, true);\n```\n\nIn most other languages, this would log \"1\" and \"2\", because before the `const x = 2` line, `x` should still refer to the parameter `x` in the upper scope. In JavaScript, because each declaration occupies the entire scope, this would throw an error on the first `console.log`: \"Cannot access 'x' before initialization\". For more information, see the reference page of [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let).\n\nJavaScript is _dynamically typed_. Types (as described in [the previous section](#data_types)) are only associated with values, but not with variables. For `let`\\-declared variables, you can always change its type through reassignment.\n\n## [Operators](#operators)\n\nJavaScript's numeric operators include `+`, `-`, `*`, `/`, `%` (remainder), and `**` (exponentiation). Values are assigned using `=`. Each binary operator also has a compound assignment counterpart such as `+=` and `-=`, which extend out to `x = x operator y`.\n\nYou can use `++` and `--` to increment and decrement respectively. These can be used as a prefix or postfix operators.\n\nThe [`+` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition) also does string concatenation:\n\n```\n\"hello\" + \" world\"; // \"hello world\"\n```\n\nIf you add a string to a number (or other value) everything is converted into a string first. This might trip you up:\n\n```\n\"3\" + 4 + 5; // \"345\"\n3 + 4 + \"5\"; // \"75\"\n```\n\nAdding an empty string to something is a useful way of converting it to a string itself.\n\n[Comparisons](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#relational_operators) in JavaScript can be made using `<`, `>`, `<=` and `>=`, which work for both strings and numbers. For equality, the [double-equals operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality) performs type coercion if you give it different types, with sometimes interesting results. On the other hand, the [triple-equals operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) does not attempt type coercion, and is usually preferred.\n\n```\n123 == \"123\"; // true\n1 == true; // true\n\n123 === \"123\"; // false\n1 === true; // false\n```\n\nThe double-equals and triple-equals also have their inequality counterparts: `!=` and `!==`.\n\nJavaScript also has [bitwise operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#bitwise_shift_operators) and [logical operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#binary_logical_operators). Notably, logical operators don't work with boolean values only — they work by the \"truthiness\" of the value.\n\n```\nconst a = 0 && \"Hello\"; // 0 because 0 is \"falsy\"\nconst b = \"Hello\" || \"world\"; // \"Hello\" because both \"Hello\" and \"world\" are \"truthy\"\n```\n\nThe `&&` and `||` operators use short-circuit logic, which means whether they will execute their second operand is dependent on the first. This is useful for checking for null objects before accessing their attributes:\n\n```\nconst name = o && o.getName();\n```\n\nOr for caching values (when falsy values are invalid):\n\n```\nconst name = cachedName || (cachedName = getName());\n```\n\nFor a comprehensive list of operators, see the [guide page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators) or [reference section](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators). You may be especially interested in the [operator precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence).\n\n## [Grammar](#grammar)\n\nJavaScript grammar is very similar to the C family. There are a few points worth mentioning:\n\n*   [Identifiers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers) can have Unicode characters, but they cannot be one of the [reserved words](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords).\n*   [Comments](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#comments) are commonly `//` or `/* */`, while many other scripting languages like Perl, Python, and Bash use `#`.\n*   Semicolons are optional in JavaScript — the language [automatically inserts them](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion) when needed. However, there are certain caveats to watch out for, since unlike Python, semicolons are still part of the syntax.\n\nFor an in-depth look at the JavaScript grammar, see the [reference page for lexical grammar](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar).\n\n## [Control structures](#control_structures)\n\nJavaScript has a similar set of control structures to other languages in the C family. Conditional statements are supported by [`if` and `else`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else); you can chain them together:\n\n```\nlet name = \"kittens\";\nif (name === \"puppies\") {\n  name += \" woof\";\n} else if (name === \"kittens\") {\n  name += \" meow\";\n} else {\n  name += \"!\";\n}\nname === \"kittens meow\";\n```\n\nJavaScript doesn't have `elif`, and `else if` is really just an `else` branch comprised of a single `if` statement.\n\nJavaScript has [`while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while) loops and [`do...while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while) loops. The first is good for basic looping; the second is for loops where you wish to ensure that the body of the loop is executed at least once:\n\n```\nwhile (true) {\n  // an infinite loop!\n}\n\nlet input;\ndo {\n  input = get_input();\n} while (inputIsNotValid(input));\n```\n\nJavaScript's [`for` loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) is the same as that in C and Java: it lets you provide the control information for your loop on a single line.\n\n```\nfor (let i = 0; i < 5; i++) {\n  // Will execute 5 times\n}\n```\n\nJavaScript also contains two other prominent for loops: [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of), which iterates over [iterables](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols), most notably arrays, and [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in), which visits all [enumerable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties) properties of an object.\n\n```\nfor (const value of array) {\n  // do something with value\n}\n\nfor (const property in object) {\n  // do something with object property\n}\n```\n\nThe `switch` statement can be used for multiple branches based on equality checking.\n\n```\nswitch (action) {\n  case \"draw\":\n    drawIt();\n    break;\n  case \"eat\":\n    eatIt();\n    break;\n  default:\n    doNothing();\n}\n```\n\nSimilar to C, case clauses are conceptually the same as [labels](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label), so if you don't add a `break` statement, execution will \"fall through\" to the next level. However, they are not actually jump tables — any expression can be part of the `case` clause, not just string or number literals, and they would be evaluated one-by-one until one equals the value being matched. Comparison takes place between the two using the `===` operator.\n\nUnlike some languages like Rust, control-flow structures are statements in JavaScript, meaning you can't assign them to a variable, like `const a = if (x) { 1 } else { 2 }`.\n\nJavaScript errors are handled using the [`try...catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) statement.\n\n```\ntry {\n  buildMySite(\"./website\");\n} catch (e) {\n  console.error(\"Building site failed:\", e);\n}\n```\n\nErrors can be thrown using the [`throw`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw) statement. Many built-in operations may throw as well.\n\n```\nfunction buildMySite(siteDirectory) {\n  if (!pathExists(siteDirectory)) {\n    throw new Error(\"Site directory does not exist\");\n  }\n}\n```\n\nIn general, you can't tell the type of the error you just caught, because anything can be thrown from a `throw` statement. However, you can usually assume it's an [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) instance, as is the example above. There are some subclasses of `Error` built-in, like [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) and [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError), that you can use to provide extra semantics about the error. There's no conditional catch in JavaScript — if you only want to handle one type of error, you need to catch everything, identify the type of error using [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof), and then rethrow the other cases.\n\n```\ntry {\n  buildMySite(\"./website\");\n} catch (e) {\n  if (e instanceof RangeError) {\n    console.error(\"Seems like a parameter is out of range:\", e);\n    console.log(\"Retrying...\");\n    buildMySite(\"./website\");\n  } else {\n    // Don't know how to handle other error types; throw them so\n    // something else up in the call stack may catch and handle it\n    throw e;\n  }\n}\n```\n\nIf an error is uncaught by any `try...catch` in the call stack, the program will exit.\n\nFor a comprehensive list of control flow statements, see the [reference section](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements).\n\n## [Objects](#objects)\n\nJavaScript objects can be thought of as collections of key-value pairs. As such, they are similar to:\n\n*   Dictionaries in Python.\n*   Hashes in Perl and Ruby.\n*   Hash tables in C and C++.\n*   HashMaps in Java.\n*   Associative arrays in PHP.\n\nJavaScript objects are hashes. Unlike objects in statically typed languages, objects in JavaScript do not have fixed shapes — properties can be added, deleted, re-ordered, mutated, or dynamically queried at any time. Object keys are always [strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) or [symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) — even array indices, which are canonically integers, are actually strings under the hood.\n\nObjects are usually created using the literal syntax:\n\n```\nconst obj = {\n  name: \"Carrot\",\n  for: \"Max\",\n  details: {\n    color: \"orange\",\n    size: 12,\n  },\n};\n```\n\nObject properties can be [accessed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) using dot (`.`) or square brackets (`[]`). When using the dot notation, the key must be a valid [identifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers). Square brackets, on the other hand, allow indexing the object with a dynamic key value.\n\n```\n// Dot notation\nobj.name = \"Simon\";\nconst name = obj.name;\n\n// Bracket notation\nobj[\"name\"] = \"Simon\";\nconst name = obj[\"name\"];\n\n// Can use a variable to define a key\nconst userName = prompt(\"what is your key?\");\nobj[userName] = prompt(\"what is its value?\");\n```\n\nProperty access can be chained together:\n\n```\nobj.details.color; // orange\nobj[\"details\"][\"size\"]; // 12\n```\n\nObjects are always references, so unless something is explicitly copying the object, mutations to an object would be visible to the outside.\n\n```\nconst obj = {};\nfunction doSomething(o) {\n  o.x = 1;\n}\ndoSomething(obj);\nconsole.log(obj.x); // 1\n```\n\nThis also means two separately created objects will never be equal (`!==`), because they are different references. If you hold two references of the same object, mutating one would be observable through the other.\n\n```\nconst me = {};\nconst stillMe = me;\nme.x = 1;\nconsole.log(stillMe.x); // 1\n```\n\nFor more on objects and prototypes, see the [`Object` reference page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object). For more information on the object initializer syntax, see its [reference page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer).\n\nThis page has omitted all details about object prototypes and inheritance because you can usually achieve inheritance with [classes](#classes) without touching the underlying mechanism (which you may have heard to be abstruse). To learn about them, see [Inheritance and the prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain).\n\n## [Arrays](#arrays)\n\nArrays in JavaScript are actually a special type of object. They work very much like regular objects (numerical properties can naturally be accessed only using `[]` syntax) but they have one magic property called `length`. This is always one more than the highest index in the array.\n\nArrays are usually created with array literals:\n\n```\nconst a = [\"dog\", \"cat\", \"hen\"];\na.length; // 3\n```\n\nJavaScript arrays are still objects — you can assign any properties to them, including arbitrary number indices. The only \"magic\" is that `length` will be automatically updated when you set a particular index.\n\n```\nconst a = [\"dog\", \"cat\", \"hen\"];\na[100] = \"fox\";\nconsole.log(a.length); // 101\nconsole.log(a); // ['dog', 'cat', 'hen', empty × 97, 'fox']\n```\n\nThe array we got above is called a [_sparse array_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays) because there are uninhabited slots in the middle, and will cause the engine to deoptimize it from an array to a hash table. Make sure your array is densely populated!\n\nOut-of-bounds indexing doesn't throw. If you query a non-existent array index, you'll get a value of `undefined` in return:\n\n```\nconst a = [\"dog\", \"cat\", \"hen\"];\nconsole.log(typeof a[90]); // undefined\n```\n\nArrays can have any elements and can grow or shrink arbitrarily.\n\n```\nconst arr = [1, \"foo\", true];\narr.push({});\n// arr = [1, \"foo\", true, {}]\n```\n\nArrays can be iterated with the `for` loop, as you can in other C-like languages:\n\n```\nfor (let i = 0; i < a.length; i++) {\n  // Do something with a[i]\n}\n```\n\nOr, since arrays are iterable, you can use the [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop, which is synonymous to C++/Java's `for (int x : arr)` syntax:\n\n```\nfor (const currentValue of a) {\n  // Do something with currentValue\n}\n```\n\nArrays come with a plethora of [array methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array). Many of them would iterate the array — for example, [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) would apply a callback to every array element, and return a new array:\n\n```\nconst babies = [\"dog\", \"cat\", \"hen\"].map((name) => `baby ${name}`);\n// babies = ['baby dog', 'baby cat', 'baby hen']\n```\n\n## [Functions](#functions)\n\nAlong with objects, functions are the core component in understanding JavaScript. The most basic function declaration looks like this:\n\n```\nfunction add(x, y) {\n  const total = x + y;\n  return total;\n}\n```\n\nA JavaScript function can take 0 or more parameters. The function body can contain as many statements as you like and can declare its own variables which are local to that function. The [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return) statement can be used to return a value at any time, terminating the function. If no return statement is used (or an empty return with no value), JavaScript returns `undefined`.\n\nFunctions can be called with more or fewer parameters than it specifies. If you call a function without passing the parameters it expects, they will be set to `undefined`. If you pass more parameters than it expects, the function will ignore the extra parameters.\n\n```\nadd(); // NaN\n// Equivalent to add(undefined, undefined)\n\nadd(2, 3, 4); // 5\n// added the first two; 4 was ignored\n```\n\nThere are a number of other parameter syntaxes available. For example, the [rest parameter syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) allows collecting all the extra parameters passed by the caller into an array, similar to Python's `*args`. (Since JS doesn't have named parameters on the language level, there's no `**kwargs`.)\n\n```\nfunction avg(...args) {\n  let sum = 0;\n  for (const item of args) {\n    sum += item;\n  }\n  return sum / args.length;\n}\n\navg(2, 3, 4, 5); // 3.5\n```\n\nIn the above code, the variable `args` holds all the values that were passed into the function.\n\nThe rest parameter will store all arguments _after_ where it's declared, but not before. In other words, `function avg(firstValue, ...args)` will store the first value passed into the function in the `firstValue` variable and the remaining arguments in `args`.\n\nIf a function accepts a list of arguments and you already hold them in an array, you can use the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) in the function call to _spread_ the array as a list of elements. For instance: `avg(...numbers)`.\n\nWe mentioned that JavaScript doesn't have named parameters. It's possible, though, to implement them using [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment), which allows objects to be conveniently packed and unpacked.\n\n```\n// Note the { } braces: this is destructuring an object\nfunction area({ width, height }) {\n  return width * height;\n}\n\n// The { } braces here create a new object\nconsole.log(area({ width: 2, height: 3 }));\n```\n\nThere's also the [_default parameter_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters) syntax, which allows omitted parameters (or those passed as `undefined`) to have a default value.\n\n```\nfunction avg(firstValue, secondValue, thirdValue = 0) {\n  return (firstValue + secondValue + thirdValue) / 3;\n}\n\navg(1, 2); // 1, instead of NaN\n```\n\n### [Anonymous functions](#anonymous_functions)\n\nJavaScript lets you create anonymous functions — that is, functions without names. In practice, anonymous functions are typically used as arguments to other functions, immediately assigned to a variable that can be used to invoke the function, or returned from another function.\n\n```\n// Note that there's no function name before the parentheses\nconst avg = function (...args) {\n  let sum = 0;\n  for (const item of args) {\n    sum += item;\n  }\n  return sum / args.length;\n};\n```\n\nThat makes the anonymous function invocable by calling `avg()` with some arguments — that is, it's semantically equivalent to declaring the function using the `function avg() {}` declaration syntax.\n\nThere's another way to define anonymous functions — using an [arrow function expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\n```\n// Note that there's no function name before the parentheses\nconst avg = (...args) => {\n  let sum = 0;\n  for (const item of args) {\n    sum += item;\n  }\n  return sum / args.length;\n};\n\n// You can omit the `return` when simply returning an expression\nconst sum = (a, b, c) => a + b + c;\n```\n\nArrow functions are not semantically equivalent to function expressions — for more information, see its [reference page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\nThere's another way that anonymous functions can be useful: it can be simultaneously declared and invoked in a single expression, called an [Immediately invoked function expression (IIFE)](https://developer.mozilla.org/en-US/docs/Glossary/IIFE):\n\n```\n(function () {\n  // …\n})();\n```\n\nFor use-cases of IIFEs, you can read [emulating private methods with closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#emulating_private_methods_with_closures).\n\n### [Recursive functions](#recursive_functions)\n\nJavaScript allows you to call functions recursively. This is particularly useful for dealing with tree structures, such as those found in the browser DOM.\n\n```\nfunction countChars(elm) {\n  if (elm.nodeType === 3) {\n    // TEXT_NODE\n    return elm.nodeValue.length;\n  }\n  let count = 0;\n  for (let i = 0, child; (child = elm.childNodes[i]); i++) {\n    count += countChars(child);\n  }\n  return count;\n}\n```\n\nFunction expressions can be named as well, which allows them to be recursive.\n\n```\nconst charsInBody = (function counter(elm) {\n  if (elm.nodeType === 3) {\n    // TEXT_NODE\n    return elm.nodeValue.length;\n  }\n  let count = 0;\n  for (let i = 0, child; (child = elm.childNodes[i]); i++) {\n    count += counter(child);\n  }\n  return count;\n})(document.body);\n```\n\nThe name provided to a function expression as above is only available to the function's own scope. This allows more optimizations to be done by the engine and results in more readable code. The name also shows up in the debugger and some stack traces, which can save you time when debugging.\n\nIf you are used to functional programming, beware of the performance implications of recursion in JavaScript. Although the language specification specifies [tail-call optimization](https://en.wikipedia.org/wiki/Tail_call), only JavaScriptCore (used by Safari) has implemented it, due to the difficulty of recovering stack traces and debuggability. For deep recursion, consider using iteration instead to avoid stack overflow.\n\n### [Functions are first-class objects](#functions_are_first-class_objects)\n\nJavaScript functions are first-class objects. This means that they can be assigned to variables, passed as arguments to other functions, and returned from other functions. In addition, JavaScript supports [closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) out-of-the-box without explicit capturing, allowing you to conveniently apply functional programming styles.\n\n```\n// Function returning function\nconst add = (x) => (y) => x + y;\n// Function accepting function\nconst babies = [\"dog\", \"cat\", \"hen\"].map((name) => `baby ${name}`);\n```\n\nNote that JavaScript functions are themselves objects — like everything else in JavaScript — and you can add or change properties on them just like we've seen earlier in the Objects section.\n\n### [Inner functions](#inner_functions)\n\nJavaScript function declarations are allowed inside other functions. An important detail of nested functions in JavaScript is that they can access variables in their parent function's scope:\n\n```\nfunction parentFunc() {\n  const a = 1;\n\n  function nestedFunc() {\n    const b = 4; // parentFunc can't use this\n    return a + b;\n  }\n  return nestedFunc(); // 5\n}\n```\n\nThis provides a great deal of utility in writing more maintainable code. If a called function relies on one or two other functions that are not useful to any other part of your code, you can nest those utility functions inside it. This keeps the number of functions that are in the global scope down.\n\nThis is also a great counter to the lure of global variables. When writing complex code, it is often tempting to use global variables to share values between multiple functions, which leads to code that is hard to maintain. Nested functions can share variables in their parent, so you can use that mechanism to couple functions together without polluting your global namespace.\n\n## [Classes](#classes)\n\nJavaScript offers the [class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) syntax that's very similar to languages like Java.\n\n```\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n  sayHello() {\n    return `Hello, I'm ${this.name}!`;\n  }\n}\n\nconst p = new Person(\"Maria\");\nconsole.log(p.sayHello());\n```\n\nJavaScript classes are just functions that must be instantiated with the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator. Every time a class is instantiated, it returns an object containing the methods and properties that the class specified. Classes don't enforce any code organization — for example, you can have functions returning classes, or you can have multiple classes per file. Here's an example of how ad hoc the creation of a class can be: it's just an expression returned from an arrow function. This pattern is called a [mixin](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends#mix-ins).\n\n```\nconst withAuthentication = (cls) =>\n  class extends cls {\n    authenticate() {\n      // …\n    }\n  };\n\nclass Admin extends withAuthentication(Person) {\n  // …\n}\n```\n\nStatic properties are created by prepending `static`. Private properties are created by prepending a hash `#` (not `private`). The hash is an integral part of the property name. (Think about `#` as `_` in Python.) Unlike most other languages, there's absolutely no way to read a private property outside the class body — not even in derived classes.\n\nFor a detailed guide on various class features, you can read the [guide page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_classes).\n\n## [Asynchronous programming](#asynchronous_programming)\n\nJavaScript is single-threaded by nature. There's no [paralleling](https://en.wikipedia.org/wiki/Parallel_computing); only [concurrency](https://en.wikipedia.org/wiki/Concurrent_computing). Asynchronous programming is powered by an [event loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Event_loop), which allows a set of tasks to be queued and polled for completion.\n\nThere are three idiomatic ways to write asynchronous code in JavaScript:\n\n*   Callback-based (such as [`setTimeout()`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout))\n*   [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\-based\n*   [`async`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)/[`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await), which is a syntactic sugar for Promises\n\nFor example, here's what a file-read operation might look like in JavaScript:\n\n```\n// Callback-based\nfs.readFile(filename, (err, content) => {\n  // This callback is invoked when the file is read, which could be after a while\n  if (err) {\n    throw err;\n  }\n  console.log(content);\n});\n// Code here will be executed while the file is waiting to be read\n\n// Promise-based\nfs.readFile(filename)\n  .then((content) => {\n    // What to do when the file is read\n    console.log(content);\n  })\n  .catch((err) => {\n    throw err;\n  });\n// Code here will be executed while the file is waiting to be read\n\n// Async/await\nasync function readFile(filename) {\n  const content = await fs.readFile(filename);\n  console.log(content);\n}\n```\n\nThe core language doesn't specify any asynchronous programming features, but it's crucial when interacting with the external environment — from [asking user permissions](https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API), to [fetching data](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch), to [reading files](https://nodejs.org/api/fs.html). Keeping the potentially long-running operations async ensures that other processes can still run while this one waits — for example, the browser will not freeze while waiting for the user to click a button to grant permission.\n\nIf you have an async value, it's not possible to get its value synchronously. For example, if you have a promise, you can only access the eventual result via the [`then()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) method. Similarly, [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) can only be used in an async context, which is usually an async function or a module. Promises are _never blocking_ — only the logic depending on the promise's result will be deferred; everything else continues to execute in the meantime. If you are a functional programmer, you may recognize promises as [monads](https://en.wikipedia.org/wiki/Monad_(functional_programming)) which can be mapped with `then()` (however, they are not _proper_ monads because they auto-flatten; i.e. you can't have a `Promise<Promise<T>>`).\n\nIn fact, the single-threaded model has made Node.js a popular choice for server-side programming due to its non-blocking IO, making handling a large number of database or file-system requests very performant. However, CPU-bound (computationally intensive) tasks that are pure JavaScript will still block the main thread. To achieve real paralleling, you may need to use [workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers).\n\nTo learn more about asynchronous programming, you can read about [using promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises) or follow the [asynchronous JavaScript](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous) tutorial.\n\n## [Modules](#modules)\n\nJavaScript also specifies a module system supported by most runtimes. A module is usually a file, identified by its file path or URL. You can use the [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) and [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) statements to exchange data between modules:\n\n```\nimport { foo } from \"./foo.js\";\n\n// Unexported variables are local to the module\nconst b = 2;\n\nexport const a = 1;\n```\n\nUnlike Haskell, Python, Java, etc., JavaScript module resolution is entirely host-defined — it's usually based on URLs or file paths, so relative file paths \"just work\" and are relative to the current module's path instead of some project root path.\n\nHowever, the JavaScript language doesn't offer standard library modules — all core functionalities are powered by global variables like [`Math`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math) and [`Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl) instead. This is due to the long history of JavaScript lacking a module system, and the fact that opting into the module system involves some changes to the runtime setup.\n\nDifferent runtimes may use different module systems. For example, [Node.js](https://nodejs.org/en/) uses the package manager [npm](https://www.npmjs.com/) and is mostly file-system based, while [Deno](https://deno.land/) and browsers are fully URL-based and modules can be resolved from HTTP URLs.\n\nFor more information, see the [modules guide page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules).\n\n## [Language and runtime](#language_and_runtime)\n\nThroughout this page, we've constantly mentioned that certain features are _language-level_ while others are _runtime-level_.\n\nJavaScript is a general-purpose scripting language. The [core language specification](https://developer.mozilla.org/en-US/docs/Web/JavaScript/JavaScript_technologies_overview#javascript_the_core_language_ecmascript) focuses on pure computational logic. It doesn't deal with any input/output — in fact, without extra runtime-level APIs (most notably [`console.log()`](https://developer.mozilla.org/en-US/docs/Web/API/console/log_static)), a JavaScript program's behavior is entirely unobservable.\n\nA runtime, or a host, is something that feeds data to the JavaScript engine (the interpreter), provides extra global properties, and provides hooks for the engine to interact with the outside world. Module resolution, reading data, printing messages, sending network requests, etc. are all runtime-level operations. Since its inception, JavaScript has been adopted in various environments, such as browsers (which provide APIs like [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)), Node.js (which provides APIs like [file system access](https://nodejs.org/api/fs.html)), etc. JavaScript has been successfully integrated in web (which was its primary purpose), mobile apps, desktop apps, server-side apps, serverless, embedded systems, and more. While you learn about JavaScript core features, it's also important to understand host-provided features in order to put the knowledge to use. For example, you can read about all [web platform APIs](https://developer.mozilla.org/en-US/docs/Web/API), which are implemented by browsers, and sometimes non-browsers.\n\n## [Further exploration](#further_exploration)\n\nThis page offers a very basic insight into how various JavaScript features compare with other languages. If you want to learn more about the language itself and the nuances of each feature, you can read the [JavaScript guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide) and the [JavaScript reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference).\n\nThere are some essential parts of the language that we have omitted due to space and complexity, but you can explore on your own:\n\n*   [Inheritance and the prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n*   [Closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures)\n*   [Regular expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions)\n*   [Iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators)",
    "title": "JavaScript language overview - JavaScript | MDN",
    "description": "JavaScript is a multi-paradigm, dynamic language with types and operators, standard built-in objects, and methods. Its syntax is based on the Java and C languages — many structures from those languages apply to JavaScript as well. JavaScript supports object-oriented programming with object prototypes and classes. It also supports functional programming since functions are first-class objects that can be easily created via expressions and passed around like any other object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "markdown": "# Set - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Set`** object lets you store unique values of any type, whether [primitive values](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) or object references.\n\n## [Description](#description)\n\n`Set` objects are collections of values. A value in the set **may only occur once**; it is unique in the set's collection. You can iterate through the elements of a set in insertion order. The _insertion order_ corresponds to the order in which each element was inserted into the set by the [`add()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add) method successfully (that is, there wasn't an identical element already in the set when `add()` was called).\n\nThe specification requires sets to be implemented \"that, on average, provide access times that are sublinear on the number of elements in the collection\". Therefore, it could be represented internally as a hash table (with O(1) lookup), a search tree (with O(log(N)) lookup), or any other data structure, as long as the complexity is better than O(N).\n\n### [Value equality](#value_equality)\n\nValue equality is based on the [SameValueZero](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality) algorithm. (It used to use [SameValue](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is), which treated `0` and `-0` as different. Check [browser compatibility](#browser_compatibility).) This means [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) is considered the same as `NaN` (even though `NaN !== NaN`) and all other values are considered equal according to the semantics of the `===` operator.\n\n### [Performance](#performance)\n\nThe [`has`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has) method checks if a value is in the set, using an approach that is, on average, quicker than testing most of the elements that have previously been added to the set. In particular, it is, on average, faster than the [`Array.prototype.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes) method when an array has a `length` equal to a set's `size`.\n\n### [Set composition](#set_composition)\n\n### [Set-like objects](#set-like_objects)\n\nAll [set composition methods](#set_composition) require [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) to be an actual `Set` instance, but their arguments just need to be set-like. A _set-like object_ is an object that provides the following:\n\n*   A [`size`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size) property that contains a number.\n*   A [`has()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has) method that takes an element and returns a boolean.\n*   A [`keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys) method that returns an [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) of the elements in the set.\n\nFor example, [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) objects are set-like because they also have [`size`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size), [`has()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has), and [`keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys), so they behave just like sets of keys when used in set methods:\n\n```\nconst a = new Set([1, 2, 3]);\nconst b = new Map([\n  [1, \"one\"],\n  [2, \"two\"],\n  [4, \"four\"],\n]);\nconsole.log(a.union(b)); // Set(4) {1, 2, 3, 4}\n```\n\n**Note:** The set-like protocol invokes the `keys()` method instead of [`[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator) to produce elements. This is to make maps valid set-like objects, because for maps, the iterator produces _entries_ but the `has()` method takes _keys_.\n\n[Arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) are not set-like because they don't have a `has()` method or the `size` property, and their `keys()` method produces indices instead of elements. [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) objects are also not set-like because they don't have a `keys()` method.\n\n### [Set-like browser APIs](#set-like_browser_apis)\n\nBrowser **`Set`\\-like objects** (or \"setlike objects\") are [Web API](https://developer.mozilla.org/en-US/docs/Web/API) interfaces that behave in many ways like a `Set`.\n\nJust like `Set`, elements can be iterated in the same order that they were added to the object. `Set`\\-like objects and `Set` also have properties and methods that share the same name and behavior. However unlike `Set` they only allow a specific predefined type for each entry.\n\nThe allowed types are set in the specification IDL definition. For example, [`GPUSupportedFeatures`](https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedFeatures) is a `Set`\\-like object that must use strings as the key/value. This is defined in the specification IDL below:\n\n```\ninterface GPUSupportedFeatures {\n  readonly setlike<DOMString>;\n};\n```\n\n`Set`\\-like objects are either read-only or read-writable (see the `readonly` keyword in the IDL above).\n\n*   Read-only `Set`\\-like objects have the property [`size`](#set.prototype.size), and the methods: [`entries()`](#set.prototype.entries), [`forEach()`](#set.prototype.foreach), [`has()`](#set.prototype.has), [`keys()`](#set.prototype.keys), [`values()`](#set.prototype.values), and [`@@iterator`](#set.prototypeiterator).\n*   Writeable `Set`\\-like objects additionally have the methods: [`clear()`](#set.prototype.clear), [`delete()`](#set.prototype.delete), and [`add()`](#set.prototype.add).\n\nThe methods and properties have the same behavior as the equivalent entities in `Set`, except for the restriction on the types of the entry.\n\nThe following are examples of read-only `Set`\\-like browser objects:\n\n*   [`GPUSupportedFeatures`](https://developer.mozilla.org/en-US/docs/Web/API/GPUSupportedFeatures)\n*   [`XRAnchorSet`](https://developer.mozilla.org/en-US/docs/Web/API/XRAnchorSet)\n\nThe following are examples of writable `Set`\\-like browser objects:\n\n*   [`CustomStateSet`](https://developer.mozilla.org/en-US/docs/Web/API/CustomStateSet)\n*   [`FontFaceSet`](https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet)\n*   [`Highlight`](https://developer.mozilla.org/en-US/docs/Web/API/Highlight)\n\n## [Constructor](#constructor)\n\n[`Set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Set)\n\nCreates a new `Set` object.\n\n## [Static properties](#static_properties)\n\n[`Set[@@species]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@species)\n\nThe constructor function that is used to create derived objects.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Set.prototype` and shared by all `Set` instances.\n\n[`Set.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Set` instances, the initial value is the [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Set) constructor.\n\n[`Set.prototype.size`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size)\n\nReturns the number of values in the `Set` object.\n\n[`Set.prototype[@@toStringTag]`](#set.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Set\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`Set.prototype.add()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add)\n\nInserts a new element with a specified value in to a `Set` object, if there isn't an element with the same value already in the `Set`.\n\n[`Set.prototype.clear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear)\n\nRemoves all elements from the `Set` object.\n\n[`Set.prototype.delete()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete)\n\nRemoves the element associated to the `value` and returns a boolean asserting whether an element was successfully removed or not. `Set.prototype.has(value)` will return `false` afterwards.\n\n[`Set.prototype.difference()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/difference)\n\nTakes a set and returns a new set containing elements in this set but not in the given set.\n\n[`Set.prototype.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries)\n\nReturns a new iterator object that contains **an array of `[value, value]`** for each element in the `Set` object, in insertion order. This is similar to the [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) object, so that each entry's _key_ is the same as its _value_ for a `Set`.\n\n[`Set.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach)\n\nCalls `callbackFn` once for each value present in the `Set` object, in insertion order. If a `thisArg` parameter is provided, it will be used as the `this` value for each invocation of `callbackFn`.\n\n[`Set.prototype.has()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has)\n\nReturns a boolean asserting whether an element is present with the given value in the `Set` object or not.\n\n[`Set.prototype.intersection()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/intersection)\n\nTakes a set and returns a new set containing elements in both this set and the given set.\n\n[`Set.prototype.isDisjointFrom()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/isDisjointFrom)\n\nTakes a set and returns a boolean indicating if this set has no elements in common with the given set.\n\n[`Set.prototype.isSubsetOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/isSubsetOf)\n\nTakes a set and returns a boolean indicating if all elements of this set are in the given set.\n\n[`Set.prototype.isSupersetOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/isSupersetOf)\n\nTakes a set and returns a boolean indicating if all elements of the given set are in this set.\n\n[`Set.prototype.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys)\n\nAn alias for [`Set.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values).\n\n[`Set.prototype.symmetricDifference()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/symmetricDifference)\n\nTakes a set and returns a new set containing elements which are in either this set or the given set, but not in both.\n\n[`Set.prototype.union()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/union)\n\nTakes a set and returns a new set containing elements which are in either or both of this set and the given set.\n\n[`Set.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values)\n\nReturns a new iterator object that yields the **values** for each element in the `Set` object in insertion order.\n\n[`Set.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator)\n\nReturns a new iterator object that yields the **values** for each element in the `Set` object in insertion order.\n\n## [Examples](#examples)\n\n### [Using the Set object](#using_the_set_object)\n\n```\nconst mySet1 = new Set();\n\nmySet1.add(1); // Set(1) { 1 }\nmySet1.add(5); // Set(2) { 1, 5 }\nmySet1.add(5); // Set(2) { 1, 5 }\nmySet1.add(\"some text\"); // Set(3) { 1, 5, 'some text' }\nconst o = { a: 1, b: 2 };\nmySet1.add(o);\n\nmySet1.add({ a: 1, b: 2 }); // o is referencing a different object, so this is okay\n\nmySet1.has(1); // true\nmySet1.has(3); // false, since 3 has not been added to the set\nmySet1.has(5); // true\nmySet1.has(Math.sqrt(25)); // true\nmySet1.has(\"Some Text\".toLowerCase()); // true\nmySet1.has(o); // true\n\nmySet1.size; // 5\n\nmySet1.delete(5); // removes 5 from the set\nmySet1.has(5); // false, 5 has been removed\n\nmySet1.size; // 4, since we just removed one value\n\nmySet1.add(5); // Set(5) { 1, 'some text', {...}, {...}, 5 } - a previously deleted item will be added as a new item, it will not retain its original position before deletion\n\nconsole.log(mySet1); // Set(5) { 1, \"some text\", {…}, {…}, 5 }\n```\n\n### [Iterating sets](#iterating_sets)\n\nThe iteration over a set visits elements in insertion order.\n\n```\nfor (const item of mySet1) {\n  console.log(item);\n}\n// 1, \"some text\", { \"a\": 1, \"b\": 2 }, { \"a\": 1, \"b\": 2 }, 5\n\nfor (const item of mySet1.keys()) {\n  console.log(item);\n}\n// 1, \"some text\", { \"a\": 1, \"b\": 2 }, { \"a\": 1, \"b\": 2 }, 5\n\nfor (const item of mySet1.values()) {\n  console.log(item);\n}\n// 1, \"some text\", { \"a\": 1, \"b\": 2 }, { \"a\": 1, \"b\": 2 }, 5\n\n// key and value are the same here\nfor (const [key, value] of mySet1.entries()) {\n  console.log(key);\n}\n// 1, \"some text\", { \"a\": 1, \"b\": 2 }, { \"a\": 1, \"b\": 2 }, 5\n\n// Convert Set object to an Array object, with Array.from\nconst myArr = Array.from(mySet1); // [1, \"some text\", {\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2}, 5]\n\n// the following will also work if run in an HTML document\nmySet1.add(document.body);\nmySet1.has(document.querySelector(\"body\")); // true\n\n// converting between Set and Array\nconst mySet2 = new Set([1, 2, 3, 4]);\nconsole.log(mySet2.size); // 4\nconsole.log([...mySet2]); // [1, 2, 3, 4]\n\n// intersect can be simulated via\nconst intersection = new Set([...mySet1].filter((x) => mySet2.has(x)));\n\n// difference can be simulated via\nconst difference = new Set([...mySet1].filter((x) => !mySet2.has(x)));\n\n// Iterate set entries with forEach()\nmySet2.forEach((value) => {\n  console.log(value);\n});\n// 1\n// 2\n// 3\n// 4\n```\n\n### [Implementing basic set operations](#implementing_basic_set_operations)\n\n```\nfunction isSuperset(set, subset) {\n  for (const elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction union(setA, setB) {\n  const _union = new Set(setA);\n  for (const elem of setB) {\n    _union.add(elem);\n  }\n  return _union;\n}\n\nfunction intersection(setA, setB) {\n  const _intersection = new Set();\n  for (const elem of setB) {\n    if (setA.has(elem)) {\n      _intersection.add(elem);\n    }\n  }\n  return _intersection;\n}\n\nfunction symmetricDifference(setA, setB) {\n  const _difference = new Set(setA);\n  for (const elem of setB) {\n    if (_difference.has(elem)) {\n      _difference.delete(elem);\n    } else {\n      _difference.add(elem);\n    }\n  }\n  return _difference;\n}\n\nfunction difference(setA, setB) {\n  const _difference = new Set(setA);\n  for (const elem of setB) {\n    _difference.delete(elem);\n  }\n  return _difference;\n}\n\n// Examples\nconst setA = new Set([1, 2, 3, 4]);\nconst setB = new Set([2, 3]);\nconst setC = new Set([3, 4, 5, 6]);\n\nisSuperset(setA, setB); // returns true\nunion(setA, setC); // returns Set {1, 2, 3, 4, 5, 6}\nintersection(setA, setC); // returns Set {3, 4}\nsymmetricDifference(setA, setC); // returns Set {1, 2, 5, 6}\ndifference(setA, setC); // returns Set {1, 2}\n```\n\n### [Relation to arrays](#relation_to_arrays)\n\n```\nconst myArray = [\"value1\", \"value2\", \"value3\"];\n\n// Use the regular Set constructor to transform an Array into a Set\nconst mySet = new Set(myArray);\n\nmySet.has(\"value1\"); // returns true\n\n// Use the spread syntax to transform a set into an Array.\nconsole.log([...mySet]); // Will show you exactly the same Array as myArray\n```\n\n### [Remove duplicate elements from an array](#remove_duplicate_elements_from_an_array)\n\n```\n// Use to remove duplicate elements from an array\nconst numbers = [2, 13, 4, 4, 2, 13, 13, 4, 4, 5, 5, 6, 6, 7, 5, 32, 13, 4, 5];\n\nconsole.log([...new Set(numbers)]); // [2, 13, 4, 5, 6, 7, 32]\n```\n\n### [Relation to strings](#relation_to_strings)\n\n```\n// Case sensitive (set will contain \"F\" and \"f\")\nnew Set(\"Firefox\"); // Set(7) [ \"F\", \"i\", \"r\", \"e\", \"f\", \"o\", \"x\" ]\n\n// Duplicate omission (\"f\" occurs twice in the string but set will contain only one)\nnew Set(\"firefox\"); // Set(6) [ \"f\", \"i\", \"r\", \"e\", \"o\", \"x\" ]\n```\n\n### [Use a set to ensure the uniqueness of a list of values](#use_a_set_to_ensure_the_uniqueness_of_a_list_of_values)\n\n```\nconst array = Array.from(document.querySelectorAll(\"[id]\")).map((e) => e.id);\n\nconst set = new Set(array);\nconsole.assert(set.size === array.length);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-set-objects](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-set-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Set - JavaScript | MDN",
    "description": "The Set object lets you store unique values of any type, whether primitive values or object references.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI",
    "markdown": "# encodeURI() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`encodeURI()`** function encodes a [URI](https://developer.mozilla.org/en-US/docs/Glossary/URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the [UTF-8](https://developer.mozilla.org/en-US/docs/Glossary/UTF-8) encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to [`encodeURIComponent()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent), this function encodes fewer characters, preserving those that are part of the URI syntax.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`uri`](#uri)\n\nA string to be encoded as a URI.\n\n### [Return value](#return_value)\n\nA new string representing the provided string encoded as a URI.\n\n### [Exceptions](#exceptions)\n\n[`URIError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError)\n\nThrown if `uri` contains a [lone surrogate](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\n## [Description](#description)\n\n`encodeURI()` is a function property of the global object.\n\nThe `encodeURI()` function escapes characters by UTF-8 code units, with each octet encoded in the format `%XX`, left-padded with 0 if necessary. Because lone surrogates in UTF-16 do not encode any valid Unicode character, they cause `encodeURI()` to throw a [`URIError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError).\n\n`encodeURI()` escapes all characters **except**:\n\nA–Z a–z 0–9 - \\_ . ! ~ \\* ' ( )\n\n; / ? : @ & = + $ , #\n\nThe characters on the second line are characters that may be part of the URI syntax, and are only escaped by `encodeURIComponent()`. Both `encodeURI()` and `encodeURIComponent()` do not encode the characters `-.!~*'()`, known as \"unreserved marks\", which do not have a reserved purpose but are allowed in a URI \"as is\". (See [RFC2396](https://datatracker.ietf.org/doc/html/rfc2396))\n\nThe `encodeURI()` function does not encode characters that have special meaning (reserved characters) for a URI. The following example shows all the parts that a URI can possibly contain. Note how certain characters are used to signify special meaning:\n\n```\nhttp:/path/to/file.php?foo=316&bar=this+has+spaces#anchor\n```\n\n`encodeURI`, as the name implies, is used to encode a URL as a whole, assuming it is already well-formed. If you want to dynamically assemble string values into a URL, you probably want to use [`encodeURIComponent()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) on each dynamic segment instead, to avoid URL syntax characters in unwanted places.\n\n```\nconst name = \"Ben & Jerry's\";\n\n// This is bad:\nconst link = encodeURI(`https://example.com/?choice=${name}`); // \"https://example.com/?choice=Ben%20&%20Jerry's\"\nconsole.log([...new URL(link).searchParams]); // [['choice', 'Ben '], [\" Jerry's\", '']\n\n// Instead:\nconst link = encodeURI(\n  `https://example.com/?choice=${encodeURIComponent(name)}`,\n);\n// \"https://example.com/?choice=Ben%2520%2526%2520Jerry's\"\nconsole.log([...new URL(link).searchParams]); // [['choice', \"Ben%20%26%20Jerry's\"]]\n```\n\n## [Examples](#examples)\n\n### [encodeURI() vs. encodeURIComponent()](#encodeuri_vs._encodeuricomponent)\n\n`encodeURI()` differs from [`encodeURIComponent()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) as follows:\n\n```\nconst set1 = \";/?:@&=+$,#\"; // Reserved Characters\nconst set2 = \"-.!~*'()\"; // Unreserved Marks\nconst set3 = \"ABC abc 123\"; // Alphanumeric Characters + Space\n\nconsole.log(encodeURI(set1)); // ;/?:@&=+$,#\nconsole.log(encodeURI(set2)); // -.!~*'()\nconsole.log(encodeURI(set3)); // ABC%20abc%20123 (the space gets encoded as %20)\n\nconsole.log(encodeURIComponent(set1)); // %3B%2C%2F%3F%3A%40%26%3D%2B%24%23\nconsole.log(encodeURIComponent(set2)); // -.!~*'()\nconsole.log(encodeURIComponent(set3)); // ABC%20abc%20123 (the space gets encoded as %20)\n```\n\n### [Encoding a lone surrogate throws](#encoding_a_lone_surrogate_throws)\n\nA [`URIError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError) will be thrown if one attempts to encode a surrogate which is not part of a high-low pair. For example:\n\n```\n// High-low pair OK\nencodeURI(\"\\uD800\\uDFFF\"); // \"%F0%90%8F%BF\"\n\n// Lone high-surrogate code unit throws \"URIError: malformed URI sequence\"\nencodeURI(\"\\uD800\");\n\n// Lone low-surrogate code unit throws \"URIError: malformed URI sequence\"\nencodeURI(\"\\uDFFF\");\n```\n\nYou can use [`String.prototype.toWellFormed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toWellFormed), which replaces lone surrogates with the Unicode replacement character (U+FFFD), to avoid this error. You can also use [`String.prototype.isWellFormed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/isWellFormed) to check if a string contains lone surrogates before passing it to `encodeURI()`.\n\n### [Encoding for RFC3986](#encoding_for_rfc3986)\n\nThe more recent [RFC3986](https://datatracker.ietf.org/doc/html/rfc3986) makes square brackets reserved (for [IPv6](https://developer.mozilla.org/en-US/docs/Glossary/IPv6)) and thus not encoded when forming something which could be part of a URL (such as a host). It also reserves !, ', (, ), and \\*, even though these characters have no formalized URI delimiting uses. The following function encodes a string for RFC3986-compliant URL format.\n\n```\nfunction encodeRFC3986URI(str) {\n  return encodeURI(str)\n    .replace(/%5B/g, \"[\")\n    .replace(/%5D/g, \"]\")\n    .replace(\n      /[!'()*]/g,\n      (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`,\n    );\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-encodeuri-uri](https://tc39.es/ecma262/multipage/global-object.html#sec-encodeuri-uri) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "encodeURI() - JavaScript | MDN",
    "description": "The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to encodeURIComponent(), this function encodes fewer characters, preserving those that are part of the URI syntax.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent",
    "markdown": "# encodeURIComponent() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`encodeURIComponent()`** function encodes a [URI](https://developer.mozilla.org/en-US/docs/Glossary/URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the [UTF-8](https://developer.mozilla.org/en-US/docs/Glossary/UTF-8) encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to [`encodeURI()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI), this function encodes more characters, including those that are part of the URI syntax.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nencodeURIComponent(uriComponent)\n```\n\n### [Parameters](#parameters)\n\n[`uriComponent`](#uricomponent)\n\nA string to be encoded as a URI component (a path, query string, fragment, etc.). Other values are [converted to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion).\n\n### [Return value](#return_value)\n\nA new string representing the provided `uriComponent` encoded as a URI component.\n\n### [Exceptions](#exceptions)\n\n[`URIError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError)\n\nThrown if `uriComponent` contains a [lone surrogate](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\n## [Description](#description)\n\n`encodeURIComponent()` is a function property of the global object.\n\n`encodeURIComponent()` uses the same encoding algorithm as described in [`encodeURI()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI). It escapes all characters **except**:\n\nA–Z a–z 0–9 - \\_ . ! ~ \\* ' ( )\n\nCompared to [`encodeURI()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI), `encodeURIComponent()` escapes a larger set of characters. Use `encodeURIComponent()` on user-entered fields from forms [`POST`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST)'d to the server — this will encode `&` symbols that may inadvertently be generated during data entry for [character references](https://developer.mozilla.org/en-US/docs/Glossary/Character_reference) or other characters that require encoding/decoding. For example, if a user writes `Jack & Jill`, without `encodeURIComponent()`, the ampersand could be interpreted on the server as the start of a new field and jeopardize the integrity of the data.\n\nFor [`application/x-www-form-urlencoded`](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#application/x-www-form-urlencoded-encoding-algorithm), spaces are to be replaced by `+`, so one may wish to follow a `encodeURIComponent()` replacement with an additional replacement of `%20` with `+`.\n\n## [Examples](#examples)\n\n### [Encoding for Content-Disposition and Link headers](#encoding_for_content-disposition_and_link_headers)\n\nThe following example provides the special encoding required within UTF-8 [`Content-Disposition`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition) and [`Link`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link) server response header parameters (e.g., UTF-8 filenames):\n\n```\nconst fileName = \"my file(2).txt\";\nconst header = `Content-Disposition: attachment; filename*=UTF-8''${encodeRFC5987ValueChars(\n  fileName,\n)}`;\n\nconsole.log(header);\n// \"Content-Disposition: attachment; filename*=UTF-8''my%20file%282%29.txt\"\n\nfunction encodeRFC5987ValueChars(str) {\n  return (\n    encodeURIComponent(str)\n      // The following creates the sequences %27 %28 %29 %2A (Note that\n      // the valid encoding of \"*\" is %2A, which necessitates calling\n      // toUpperCase() to properly encode). Although RFC3986 reserves \"!\",\n      // RFC5987 does not, so we do not need to escape it.\n      .replace(\n        /['()*]/g,\n        (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`,\n      )\n      // The following are not required for percent-encoding per RFC5987,\n      // so we can allow for a little better readability over the wire: |`^\n      .replace(/%(7C|60|5E)/g, (str, hex) =>\n        String.fromCharCode(parseInt(hex, 16)),\n      )\n  );\n}\n```\n\n### [Encoding for RFC3986](#encoding_for_rfc3986)\n\nThe more recent [RFC3986](https://datatracker.ietf.org/doc/html/rfc3986) reserves `!`, `'`, `(`, `)`, and `*`, even though these characters have no formalized URI delimiting uses. The following function encodes a string for RFC3986-compliant URL component format. It also encodes `[` and `]`, which are part of the [IPv6](https://developer.mozilla.org/en-US/docs/Glossary/IPv6) URI syntax. An RFC3986-compliant `encodeURI` implementation should not escape them, which is demonstrated in the [`encodeURI()` example](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI#encoding_for_rfc3986).\n\n```\nfunction encodeRFC3986URIComponent(str) {\n  return encodeURIComponent(str).replace(\n    /[!'()*]/g,\n    (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`,\n  );\n}\n```\n\n### [Encoding a lone surrogate throws](#encoding_a_lone_surrogate_throws)\n\nA [`URIError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError) will be thrown if one attempts to encode a surrogate which is not part of a high-low pair. For example:\n\n```\n// High-low pair OK\nencodeURIComponent(\"\\uD800\\uDFFF\"); // \"%F0%90%8F%BF\"\n\n// Lone high-surrogate code unit throws \"URIError: malformed URI sequence\"\nencodeURIComponent(\"\\uD800\");\n\n// Lone high-surrogate code unit throws \"URIError: malformed URI sequence\"\nencodeURIComponent(\"\\uDFFF\");\n```\n\nYou can use [`String.prototype.toWellFormed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toWellFormed), which replaces lone surrogates with the Unicode replacement character (U+FFFD), to avoid this error. You can also use [`String.prototype.isWellFormed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/isWellFormed) to check if a string contains lone surrogates before passing it to `encodeURIComponent()`.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-encodeuricomponent-uricomponent](https://tc39.es/ecma262/multipage/global-object.html#sec-encodeuricomponent-uricomponent) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "encodeURIComponent() - JavaScript | MDN",
    "description": "The encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to encodeURI(), this function encodes more characters, including those that are part of the URI syntax.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division_assignment",
    "markdown": "# Division assignment (/=) - JavaScript\n\nThe **division assignment (`/=`)** operator performs [division](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division) on the two operands and assigns the result to the left operand.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\n`x /= y` is equivalent to `x = x / y`, except that the expression `x` is only evaluated once.\n\n## [Examples](#examples)\n\n### [Division assignment using numbers](#division_assignment_using_numbers)\n\n```\nlet bar = 5;\n\nbar /= 2; // 2.5\nbar /= 2; // 1.25\nbar /= 0; // Infinity\n```\n\nOther non-BigInt values are coerced to numbers:\n\n```\nlet bar = 5;\nbar /= \"2\"; // 2.5\nbar /= \"foo\"; // NaN\n```\n\n### [Division assignment using BigInts](#division_assignment_using_bigints)\n\n```\nlet foo = 3n;\nfoo /= 2n; // 1n\nfoo /= 2n; // 0n\n\nfoo /= 0n; // RangeError: BigInt division by zero\nfoo /= 1; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-assignment-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Division assignment (/=) - JavaScript | MDN",
    "description": "The division assignment (/=) operator performs division on the two operands and assigns the result to the left operand.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "markdown": "# Float64Array - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Float64Array`** typed array represents an array of 64-bit floating point numbers in the platform byte order. If control over byte order is needed, use [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instead. The contents are initialized to `0` unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Float64Array` is a subclass of the hidden [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) class.\n\n## [Constructor](#constructor)\n\n[`Float64Array()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array/Float64Array)\n\nCreates a new `Float64Array` object.\n\n## [Static properties](#static_properties)\n\n_Also inherits static properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n[`Float64Array.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `8` in the case of `Float64Array`.\n\n## [Static methods](#static_methods)\n\n_Inherits static methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\nThese properties are defined on `Float64Array.prototype` and shared by all `Float64Array` instances.\n\n[`Float64Array.prototype.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `8` in the case of a `Float64Array`.\n\n[`Float64Array.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Float64Array` instances, the initial value is the [`Float64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array/Float64Array) constructor.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Examples](#examples)\n\n### [Different ways to create a Float64Array](#different_ways_to_create_a_float64array)\n\n```\n// From a length\nconst float64 = new Float64Array(2);\nfloat64[0] = 42;\nconsole.log(float64[0]); // 42\nconsole.log(float64.length); // 2\nconsole.log(float64.BYTES_PER_ELEMENT); // 8\n\n// From an array\nconst x = new Float64Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Float64Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(64);\nconst z = new Float64Array(buffer, 8, 4);\nconsole.log(z.byteOffset); // 8\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst float64FromIterable = new Float64Array(iterable);\nconsole.log(float64FromIterable);\n// Float64Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# table-49](https://tc39.es/ecma262/multipage/indexed-collections.html#table-49) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Float64Array - JavaScript | MDN",
    "description": "The Float64Array typed array represents an array of 64-bit floating point numbers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer",
    "markdown": "# SharedArrayBuffer - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`SharedArrayBuffer`** object is used to represent a generic raw binary data buffer, similar to the [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) object, but in a way that they can be used to create views on shared memory. A `SharedArrayBuffer` is not a [Transferable Object](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Transferable_objects), unlike an `ArrayBuffer` which is transferable.\n\n## [Description](#description)\n\nTo share memory using `SharedArrayBuffer` objects from one agent in the cluster to another (an agent is either the web page's main program or one of its web workers), [`postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage) and [structured cloning](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm) is used.\n\nThe structured clone algorithm accepts `SharedArrayBuffer` objects and typed arrays mapped onto `SharedArrayBuffer` objects. In both cases, the `SharedArrayBuffer` object is transmitted to the receiver resulting in a new, private `SharedArrayBuffer` object in the receiving agent (just as for [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)). However, the shared data block referenced by the two `SharedArrayBuffer` objects is the same data block, and a side effect to the block in one agent will eventually become visible in the other agent.\n\n```\nconst sab = new SharedArrayBuffer(1024);\nworker.postMessage(sab);\n```\n\nShared memory can be created and updated simultaneously in workers or the main thread. Depending on the system (the CPU, the OS, the Browser) it can take a while until the change is propagated to all contexts. To synchronize, [atomic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics) operations are needed.\n\n`SharedArrayBuffer` objects are used by some web APIs, such as:\n\n*   [`WebGLRenderingContext.bufferData()`](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n*   [`WebGLRenderingContext.bufferSubData()`](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferSubData)\n*   [`WebGL2RenderingContext.getBufferSubData()`](https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getBufferSubData)\n\n### [Security requirements](#security_requirements)\n\nShared memory and high-resolution timers were effectively [disabled at the start of 2018](https://blog.mozilla.org/security/2018/01/03/mitigations-landing-new-class-timing-attack/) in light of [Spectre](https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)). In 2020, a new, secure approach has been standardized to re-enable shared memory.\n\nAs a baseline requirement, your document needs to be in a [secure context](https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts).\n\nFor top-level documents, two headers need to be set to cross-origin isolate your site:\n\n*   [`Cross-Origin-Opener-Policy`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy) with `same-origin` as value (protects your origin from attackers)\n*   [`Cross-Origin-Embedder-Policy`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy) with `require-corp` or `credentialless` as value (protects victims from your origin)\n\n```\nCross-Origin-Opener-Policy: same-origin\nCross-Origin-Embedder-Policy: require-corp\n```\n\nTo check if cross origin isolation has been successful, you can test against the [`Window.crossOriginIsolated`](https://developer.mozilla.org/en-US/docs/Web/API/Window/crossOriginIsolated) property or the [`WorkerGlobalScope.crossOriginIsolated`](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/crossOriginIsolated) property available to window and worker contexts:\n\n```\nconst myWorker = new Worker(\"worker.js\");\n\nif (crossOriginIsolated) {\n  const buffer = new SharedArrayBuffer(16);\n  myWorker.postMessage(buffer);\n} else {\n  const buffer = new ArrayBuffer(16);\n  myWorker.postMessage(buffer);\n}\n```\n\nWith these two headers set, `postMessage()` no longer throws for `SharedArrayBuffer` objects and shared memory across threads is therefore available.\n\nNested documents and dedicated workers need to set the [`Cross-Origin-Embedder-Policy`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy) header as well, with the same value. No further changes are needed for same-origin nested documents and subresources. Same-site (but cross-origin) nested documents and subresources need to set the [`Cross-Origin-Resource-Policy`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy) header with `same-site` as value. And their cross-origin (and cross-site) counterparts need to set the same header with `cross-origin` as value. Note that setting the [`Cross-Origin-Resource-Policy`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy) header to any other value than `same-origin` opens up the resource to potential attacks, such as [Spectre](https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)).\n\nNote that the [`Cross-Origin-Opener-Policy`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy) header limits your ability to retain a reference to popups. Direct access between two top-level window contexts essentially only work if they are same-origin and carry the same two headers with the same two values.\n\n### [API availability](#api_availability)\n\nDepending on whether the above security measures are taken, the various memory-sharing APIs have different availabilities:\n\n*   The `Atomics` object is always available.\n*   `SharedArrayBuffer` objects are in principle always available, but unfortunately the constructor on the global object is hidden, unless the two headers mentioned above are set, for compatibility with web content. There is hope that this restriction can be removed in the future. [`WebAssembly.Memory`](https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory) can still be used to get an instance.\n*   Unless the two headers mentioned above are set, the various `postMessage()` APIs will throw for `SharedArrayBuffer` objects. If they are set, `postMessage()` on `Window` objects and dedicated workers will function and allow for memory sharing.\n\n### [WebAssembly shared memory](#webassembly_shared_memory)\n\n[`WebAssembly.Memory`](https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory) objects can be created with the [`shared`](https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory/Memory#shared) constructor flag. When this flag is set to `true`, the constructed `Memory` object can be shared between workers via `postMessage()`, just like `SharedArrayBuffer`, and the backing [`buffer`](https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory/buffer) of the `Memory` object is a `SharedArrayBuffer`. Therefore, the requirements listed above for sharing a `SharedArrayBuffer` between workers also apply to sharing a `WebAssembly.Memory`.\n\nThe WebAssembly Threads proposal also defines a new set of [atomic](https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#atomic-memory-accesses) instructions. Just as `SharedArrayBuffer` and its methods are unconditionally enabled (and only sharing between threads is gated on the new headers), the WebAssembly atomic instructions are also unconditionally allowed.\n\n### [Growing SharedArrayBuffers](#growing_sharedarraybuffers)\n\n`SharedArrayBuffer` objects can be made growable by including the `maxByteLength` option when calling the [`SharedArrayBuffer()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/SharedArrayBuffer) constructor. You can query whether a `SharedArrayBuffer` is growable and what its maximum size is by accessing its [`growable`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/growable) and [`maxByteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/maxByteLength) properties, respectively. You can assign a new size to a growable `SharedArrayBuffer` with a [`grow()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/grow) call. New bytes are initialized to 0.\n\nThese features make growing `SharedArrayBuffer`s more efficient — otherwise, you have to make a copy of the buffer with a new size. It also gives JavaScript parity with WebAssembly in this regard (Wasm linear memory can be resized with [`WebAssembly.Memory.prototype.grow()`](https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory/grow)).\n\nFor security reasons, `SharedArrayBuffer`s cannot be reduced in size, only grown.\n\n## [Constructor](#constructor)\n\n[`SharedArrayBuffer()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/SharedArrayBuffer)\n\nCreates a new `SharedArrayBuffer` object.\n\n## [Static properties](#static_properties)\n\n[`SharedArrayBuffer[@@species]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/@@species)\n\nReturns the constructor used to construct return values from `SharedArrayBuffer` methods.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `SharedArrayBuffer.prototype` and shared by all `SharedArrayBuffer` instances.\n\n[`SharedArrayBuffer.prototype.byteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/byteLength)\n\nThe size, in bytes, of the array. This is established when the array is constructed and can only be changed using the [`SharedArrayBuffer.prototype.grow()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/grow) method if the `SharedArrayBuffer` is growable.\n\n[`SharedArrayBuffer.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `SharedArrayBuffer` instances, the initial value is the [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/SharedArrayBuffer) constructor.\n\n[`SharedArrayBuffer.prototype.growable`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/growable)\n\nRead-only. Returns `true` if the `SharedArrayBuffer` can be grown, or `false` if not.\n\n[`SharedArrayBuffer.prototype.maxByteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/maxByteLength)\n\nThe read-only maximum length, in bytes, that the `SharedArrayBuffer` can be grown to. This is established when the array is constructed and cannot be changed.\n\n[`SharedArrayBuffer.prototype[@@toStringTag]`](#sharedarraybuffer.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"SharedArrayBuffer\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`SharedArrayBuffer.prototype.grow()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/grow)\n\nGrows the `SharedArrayBuffer` to the specified size, in bytes.\n\n[`SharedArrayBuffer.prototype.slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/slice)\n\nReturns a new `SharedArrayBuffer` whose contents are a copy of this `SharedArrayBuffer`'s bytes from `begin`, inclusive, up to `end`, exclusive. If either `begin` or `end` is negative, it refers to an index from the end of the array, as opposed to from the beginning.\n\n## [Examples](#examples)\n\n### [Creating a new SharedArrayBuffer](#creating_a_new_sharedarraybuffer)\n\n```\nconst sab = new SharedArrayBuffer(1024);\n```\n\n### [Slicing the SharedArrayBuffer](#slicing_the_sharedarraybuffer)\n\n```\nsab.slice(); // SharedArrayBuffer { byteLength: 1024 }\nsab.slice(2); // SharedArrayBuffer { byteLength: 1022 }\nsab.slice(-2); // SharedArrayBuffer { byteLength: 2 }\nsab.slice(0, 1); // SharedArrayBuffer { byteLength: 1 }\n```\n\n### [Using it in a WebGL buffer](#using_it_in_a_webgl_buffer)\n\n```\nconst canvas = document.querySelector(\"canvas\");\nconst gl = canvas.getContext(\"webgl\");\nconst buffer = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, buffer);\ngl.bufferData(gl.ARRAY_BUFFER, sab, gl.STATIC_DRAW);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-sharedarraybuffer-objects](https://tc39.es/ecma262/multipage/structured-data.html#sec-sharedarraybuffer-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "SharedArrayBuffer - JavaScript | MDN",
    "description": "The SharedArrayBuffer object is used to represent a generic raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. A SharedArrayBuffer is not a Transferable Object, unlike an ArrayBuffer which is transferable.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures",
    "markdown": "# JavaScript data types and data structures - JavaScript\n\nProgramming languages all have built-in data structures, but these often differ from one language to another. This article attempts to list the built-in data structures available in JavaScript and what properties they have. These can be used to build other data structures.\n\nThe [language overview](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_overview) offers a similar summary of the common data types, but with more comparisons to other languages.\n\n## [Dynamic and weak typing](#dynamic_and_weak_typing)\n\nJavaScript is a [dynamic](https://en.wikipedia.org/wiki/Dynamic_programming_language) language with [dynamic types](https://en.wikipedia.org/wiki/Type_system#DYNAMIC). Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types:\n\n```\nlet foo = 42; // foo is now a number\nfoo = \"bar\"; // foo is now a string\nfoo = true; // foo is now a boolean\n```\n\nJavaScript is also a [weakly typed](https://en.wikipedia.org/wiki/Strong_and_weak_typing) language, which means it allows implicit type conversion when an operation involves mismatched types, instead of throwing type errors.\n\n```\nconst foo = 42; // foo is a number\nconst result = foo + \"1\"; // JavaScript coerces foo to a string, so it can be concatenated with the other operand\nconsole.log(result); // 421\n```\n\nImplicit coercions are very convenient, but can create subtle bugs when conversions happen where they are not expected, or where they are expected to happen in the other direction (for example, string to number instead of number to string). For [symbols](#symbol_type) and [BigInts](#bigint_type), JavaScript has intentionally disallowed certain implicit type conversions.\n\n## [Primitive values](#primitive_values)\n\nAll types except [Object](#objects) define [immutable](https://developer.mozilla.org/en-US/docs/Glossary/Immutable) values represented directly at the lowest level of the language. We refer to values of these types as _primitive values_.\n\nAll primitive types, except [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null), can be tested by the [`typeof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof) operator. `typeof null` returns `\"object\"`, so one has to use `=== null` to test for `null`.\n\nAll primitive types, except [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) and [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), have their corresponding object wrapper types, which provide useful methods for working with the primitive values. For example, the [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) object provides methods like [`toExponential()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential). When a property is accessed on a primitive value, JavaScript automatically wraps the value into the corresponding wrapper object and accesses the property on the object instead. However, accessing a property on `null` or `undefined` throws a `TypeError` exception, which necessitates the introduction of the [optional chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining) operator.\n\n| Type | `typeof` return value | Object wrapper |\n| --- | --- | --- |\n| [Null](#null_type) | `\"object\"` | N/A |\n| [Undefined](#undefined_type) | `\"undefined\"` | N/A |\n| [Boolean](#boolean_type) | `\"boolean\"` | [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) |\n| [Number](#number_type) | `\"number\"` | [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) |\n| [BigInt](#bigint_type) | `\"bigint\"` | [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) |\n| [String](#string_type) | `\"string\"` | [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) |\n| [Symbol](#symbol_type) | `\"symbol\"` | [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) |\n\nThe object wrapper classes' reference pages contain more information about the methods and properties available for each type, as well as detailed descriptions for the semantics of the primitive types themselves.\n\n### [Null type](#null_type)\n\nThe Null type is inhabited by exactly one value: [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null).\n\n### [Undefined type](#undefined_type)\n\nThe Undefined type is inhabited by exactly one value: [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).\n\nConceptually, `undefined` indicates the absence of a _value_, while `null` indicates the absence of an _object_ (which could also make up an excuse for [`typeof null === \"object\"`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null)). The language usually defaults to `undefined` when something is devoid of a value:\n\n*   A [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return) statement with no value (`return;`) implicitly returns `undefined`.\n*   Accessing a nonexistent [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) property (`obj.iDontExist`) returns `undefined`.\n*   A variable declaration without initialization (`let x;`) implicitly initializes the variable to `undefined`.\n*   Many methods, such as [`Array.prototype.find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) and [`Map.prototype.get()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get), return `undefined` when no element is found.\n\n`null` is used much less often in the core language. The most important place is the end of the [prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) — subsequently, methods that interact with prototypes, such as [`Object.getPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf), [`Object.create()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create), etc., accept or return `null` instead of `undefined`.\n\n`null` is a [keyword](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords), but `undefined` is a normal [identifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers) that happens to be a global property. In practice, the difference is minor, since `undefined` should not be redefined or shadowed.\n\n### [Boolean type](#boolean_type)\n\nThe [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) type represents a logical entity and is inhabited by two values: `true` and `false`.\n\nBoolean values are usually used for conditional operations, including [ternary operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator), [`if...else`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else), [`while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while), etc.\n\n### [Number type](#number_type)\n\nThe [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) type is a [double-precision 64-bit binary format IEEE 754 value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_encoding). It is capable of storing positive floating-point numbers between 2\\-1074 ([`Number.MIN_VALUE`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE)) and 21023 × (2 - 2\\-52) ([`Number.MAX_VALUE`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE)) as well as negative floating-point numbers of the same magnitude, but it can only safely store integers in the range -(253 − 1) ([`Number.MIN_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER)) to 253 − 1 ([`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)). Outside this range, JavaScript can no longer safely represent integers; they will instead be represented by a double-precision floating point approximation. You can check if a number is within the range of safe integers using [`Number.isSafeInteger()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger).\n\nValues outside the representable range are automatically converted:\n\n*   Positive values greater than [`Number.MAX_VALUE`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE) are converted to `+Infinity`.\n*   Positive values smaller than [`Number.MIN_VALUE`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE) are converted to `+0`.\n*   Negative values smaller than -[`Number.MAX_VALUE`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE) are converted to `-Infinity`.\n*   Negative values greater than -[`Number.MIN_VALUE`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE) are converted to `-0`.\n\n`+Infinity` and `-Infinity` behave similarly to mathematical infinity, but with some slight differences; see [`Number.POSITIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY) and [`Number.NEGATIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY) for details.\n\nThe Number type has only one value with multiple representations: `0` is represented as both `-0` and `+0` (where `0` is an alias for `+0`). In practice, there is almost no difference between the different representations; for example, `+0 === -0` is `true`. However, you are able to notice this when you divide by zero:\n\n```\nconsole.log(42 / +0); // Infinity\nconsole.log(42 / -0); // -Infinity\n```\n\n[`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) (\"**N**ot **a** **N**umber\") is a special kind of number value that's typically encountered when the result of an arithmetic operation cannot be expressed as a number. It is also the only value in JavaScript that is not equal to itself.\n\nAlthough a number is conceptually a \"mathematical value\" and is always implicitly floating-point-encoded, JavaScript provides [bitwise operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#bitwise_operators). When applying bitwise operators, the number is first converted to a 32-bit integer.\n\n**Note:** Although bitwise operators _can_ be used to represent several Boolean values within a single number using [bit masking](https://en.wikipedia.org/wiki/Mask_%28computing%29), this is usually considered a bad practice. JavaScript offers other means to represent a set of Booleans (like an array of Booleans, or an object with Boolean values assigned to named properties). Bit masking also tends to make the code more difficult to read, understand, and maintain.\n\nIt may be necessary to use such techniques in very constrained environments, like when trying to cope with the limitations of local storage, or in extreme cases (such as when each bit over the network counts). This technique should only be considered when it is the last measure that can be taken to optimize size.\n\n### [BigInt type](#bigint_type)\n\nThe [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) type is a numeric primitive in JavaScript that can represent integers with arbitrary magnitude. With BigInts, you can safely store and operate on large integers even beyond the safe integer limit ([`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)) for Numbers.\n\nA BigInt is created by appending `n` to the end of an integer or by calling the [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) function.\n\nThis example demonstrates where incrementing the [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) returns the expected result:\n\n```\n// BigInt\nconst x = BigInt(Number.MAX_SAFE_INTEGER); // 9007199254740991n\nx + 1n === x + 2n; // false because 9007199254740992n and 9007199254740993n are unequal\n\n// Number\nNumber.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2; // true because both are 9007199254740992\n```\n\nYou can use most operators to work with BigInts, including `+`, `*`, `-`, `**`, and `%` — the only forbidden one is [`>>>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift). A BigInt is not [strictly equal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) to a Number with the same mathematical value, but it is [loosely](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality) so.\n\nBigInt values are neither always more precise nor always less precise than numbers, since BigInts cannot represent fractional numbers, but can represent big integers more accurately. Neither type entails the other, and they are not mutually substitutable. A [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown if BigInt values are mixed with regular numbers in arithmetic expressions, or if they are [implicitly converted](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to each other.\n\n### [String type](#string_type)\n\nThe [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) type represents textual data and is encoded as a sequence of 16-bit unsigned integer values representing [UTF-16 code units](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters). Each element in the string occupies a position in the string. The first element is at index `0`, the next at index `1`, and so on. The [length](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length) of a string is the number of UTF-16 code units in it, which may not correspond to the actual number of Unicode characters; see the [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters) reference page for more details.\n\nJavaScript strings are immutable. This means that once a string is created, it is not possible to modify it. String methods create new strings based on the content of the current string — for example:\n\n*   A substring of the original using [`substring()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring).\n*   A concatenation of two strings using the concatenation operator (`+`) or [`concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat).\n\n#### Beware of \"stringly-typing\" your code!\n\nIt can be tempting to use strings to represent complex data. Doing this comes with short-term benefits:\n\n*   It is easy to build complex strings with concatenation.\n*   Strings are easy to debug (what you see printed is always what is in the string).\n*   Strings are the common denominator of a lot of APIs ([input fields](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement), [local storage](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API) values, [`fetch()`](https://developer.mozilla.org/en-US/docs/Web/API/fetch) responses when using [`Response.text()`](https://developer.mozilla.org/en-US/docs/Web/API/Response/text), etc.) and it can be tempting to only work with strings.\n\nWith conventions, it is possible to represent any data structure in a string. This does not make it a good idea. For instance, with a separator, one could emulate a list (while a JavaScript array would be more suitable). Unfortunately, when the separator is used in one of the \"list\" elements, then, the list is broken. An escape character can be chosen, etc. All of this requires conventions and creates an unnecessary maintenance burden.\n\nUse strings for textual data. When representing complex data, _parse_ strings, and use the appropriate abstraction.\n\n### [Symbol type](#symbol_type)\n\nA [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) is a **unique** and **immutable** primitive value and may be used as the key of an Object property (see below). In some programming languages, Symbols are called \"atoms\". The purpose of symbols is to create unique property keys that are guaranteed not to clash with keys from other code.\n\n## [Objects](#objects)\n\nIn computer science, an object is a value in memory which is possibly referenced by an [identifier](https://developer.mozilla.org/en-US/docs/Glossary/Identifier). In JavaScript, objects are the only [mutable](https://developer.mozilla.org/en-US/docs/Glossary/Mutable) values. [Functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions) are, in fact, also objects with the additional capability of being _callable_.\n\n### [Properties](#properties)\n\nIn JavaScript, objects can be seen as a collection of properties. With the [object literal syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#object_literals), a limited set of properties are initialized; then properties can be added and removed. Object properties are equivalent to key-value pairs. Property keys are either [strings](#string_type) or [symbols](#symbol_type). When other types (such as numbers) are used to index objects, the values are implicitly converted to strings. Property values can be values of any type, including other objects, which enables building complex data structures.\n\nThere are two types of object properties: The [_data_ property](#data_property) and the [_accessor_ property](#accessor_property). Each property has corresponding _attributes_. Each attribute is accessed internally by the JavaScript engine, but you can set them through [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty), or read them through [`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor). You can read more about the various nuances on the [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) page.\n\n#### Data property\n\nData properties associate a key with a value. It can be described by the following attributes:\n\n[`value`](#value)\n\nThe value retrieved by a get access of the property. Can be any JavaScript value.\n\n[`writable`](#writable)\n\nA boolean value indicating if the property can be changed with an assignment.\n\n[`enumerable`](#enumerable)\n\nA boolean value indicating if the property can be enumerated by a [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop. See also [Enumerability and ownership of properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties) for how enumerability interacts with other functions and syntaxes.\n\n[`configurable`](#configurable)\n\nA boolean value indicating if the property can be deleted, can be changed to an accessor property, and can have its attributes changed.\n\n#### Accessor property\n\nAssociates a key with one of two accessor functions (`get` and `set`) to retrieve or store a value.\n\n**Note:** It's important to recognize it's accessor _property_ — not accessor _method_. We can give a JavaScript object class-like accessors by using a function as a value — but that doesn't make the object a class.\n\nAn accessor property has the following attributes:\n\n[`get`](#get)\n\nA function called with an empty argument list to retrieve the property value whenever a get access to the value is performed. See also [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get). May be `undefined`.\n\n[`set`](#set)\n\nA function called with an argument that contains the assigned value. Executed whenever a specified property is attempted to be changed. See also [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set). May be `undefined`.\n\n[`enumerable`](#enumerable_2)\n\nA boolean value indicating if the property can be enumerated by a [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop. See also [Enumerability and ownership of properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties) for how enumerability interacts with other functions and syntaxes.\n\n[`configurable`](#configurable_2)\n\nA boolean value indicating if the property can be deleted, can be changed to a data property, and can have its attributes changed.\n\nThe [prototype](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) of an object points to another object or to `null` — it's conceptually a hidden property of the object, commonly represented as `[[Prototype]]`. Properties of the object's `[[Prototype]]` can also be accessed on the object itself.\n\nObjects are ad-hoc key-value pairs, so they are often used as maps. However, there can be ergonomics, security, and performance issues. Use a [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) for storing arbitrary data instead. The [`Map` reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#objects_vs._maps) contains a more detailed discussion of the pros & cons between plain objects and maps for storing key-value associations.\n\n### [Dates](#dates)\n\nWhen representing dates, the best choice is to use the built-in [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) utility in JavaScript.\n\n### [Indexed collections: Arrays and typed Arrays](#indexed_collections_arrays_and_typed_arrays)\n\n[Arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) are regular objects for which there is a particular relationship between integer-keyed properties and the `length` property.\n\nAdditionally, arrays inherit from `Array.prototype`, which provides a handful of convenient methods to manipulate arrays. For example, [`indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) searches a value in the array and [`push()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) appends an element to the array. This makes Arrays a perfect candidate to represent ordered lists.\n\n[Typed Arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays) present an array-like view of an underlying binary data buffer, and offer many methods that have similar semantics to the array counterparts. \"Typed array\" is an umbrella term for a range of data structures, including `Int8Array`, `Float32Array`, etc. Check the [typed array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays) page for more information. Typed arrays are often used in conjunction with [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) and [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView).\n\n### [Keyed collections: Maps, Sets, WeakMaps, WeakSets](#keyed_collections_maps_sets_weakmaps_weaksets)\n\nThese data structures take object references as keys. [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) and [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) represent a collection of unique values, while [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) and [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) represent a collection of key-value associations.\n\nYou could implement `Map`s and `Set`s yourself. However, since objects cannot be compared (in the sense of `<` \"less than\", for instance), neither does the engine expose its hash function for objects, look-up performance would necessarily be linear. Native implementations of them (including `WeakMap`s) can have look-up performance that is approximately logarithmic to constant time.\n\nUsually, to bind data to a DOM node, one could set properties directly on the object, or use `data-*` attributes. This has the downside that the data is available to any script running in the same context. `Map`s and `WeakMap`s make it easy to _privately_ bind data to an object.\n\n`WeakMap` and `WeakSet` only allow garbage-collectable values as keys, which are either objects or [non-registered symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry), and the keys may be collected even when they remain in the collection. They are specifically used for [memory usage optimization](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_management#data_structures_aiding_memory_management).\n\n### [Structured data: JSON](#structured_data_json)\n\nJSON (**J**ava**S**cript **O**bject **N**otation) is a lightweight data-interchange format, derived from JavaScript, but used by many programming languages. JSON builds universal data structures that can be transferred between different environments and even across languages. See [`JSON`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON) for more details.\n\n### [More objects in the standard library](#more_objects_in_the_standard_library)\n\nJavaScript has a standard library of built-in objects. Read the [reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects) to find out more about the built-in objects.\n\n## [Type coercion](#type_coercion)\n\nAs mentioned above, JavaScript is a [weakly typed](#dynamic_and_weak_typing) language. This means that you can often use a value of one type where another type is expected, and the language will convert it to the right type for you. To do so, JavaScript defines a handful of coercion rules.\n\n### [Primitive coercion](#primitive_coercion)\n\nThe [primitive coercion](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toprimitive) process is used where a primitive value is expected, but there's no strong preference for what the actual type should be. This is usually when a [string](#string_type), a [number](#number_type), or a [BigInt](#bigint_type) are equally acceptable. For example:\n\n*   The [`Date()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date) constructor, when it receives one argument that's not a `Date` instance — strings represent date strings, while numbers represent timestamps.\n*   The [`+`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition) operator — if one operand is a string, string concatenation is performed; otherwise, numeric addition is performed.\n*   The [`==`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality) operator — if one operand is a primitive while the other is an object, the object is converted to a primitive value with no preferred type.\n\nThis operation does not do any conversion if the value is already a primitive. Objects are converted to primitives by calling its [`[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) (with `\"default\"` as hint), `valueOf()`, and `toString()` methods, in that order. Note that primitive conversion calls `valueOf()` before `toString()`, which is similar to the behavior of [number coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) but different from [string coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion).\n\nThe `[@@toPrimitive]()` method, if present, must return a primitive — returning an object results in a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). For `valueOf()` and `toString()`, if one returns an object, the return value is ignored and the other's return value is used instead; if neither is present, or neither returns a primitive, a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown. For example, in the following code:\n\n```\nconsole.log({} + []); // \"[object Object]\"\n```\n\nNeither `{}` nor `[]` have a `[@@toPrimitive]()` method. Both `{}` and `[]` inherit `valueOf()` from [`Object.prototype.valueOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf), which returns the object itself. Since the return value is an object, it is ignored. Therefore, `toString()` is called instead. [`{}.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) returns `\"[object Object]\"`, while [`[].toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString) returns `\"\"`, so the result is their concatenation: `\"[object Object]\"`.\n\nThe `[@@toPrimitive]()` method always takes precedence when doing conversion to any primitive type. Primitive conversion generally behaves like number conversion, because `valueOf()` is called in priority; however, objects with custom `[@@toPrimitive]()` methods can choose to return any primitive. [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) and [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) objects are the only built-in objects that override the `[@@toPrimitive]()` method. [`Date.prototype[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive) treats the `\"default\"` hint as if it's `\"string\"`, while [`Symbol.prototype[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive) ignores the hint and always returns a symbol.\n\n### [Numeric coercion](#numeric_coercion)\n\nThere are two numeric types: [Number](#number_type) and [BigInt](#bigint_type). Sometimes the language specifically expects a number or a BigInt (such as [`Array.prototype.slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice), where the index must be a number); other times, it may tolerate either and perform different operations depending on the operand's type. For strict coercion processes that do not allow implicit conversion from the other type, see [number coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) and [BigInt coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#bigint_coercion).\n\nNumeric coercion is nearly the same as [number coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), except that BigInts are returned as-is instead of causing a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). Numeric coercion is used by all arithmetic operators, since they are overloaded for both numbers and BigInts. The only exception is [unary plus](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus), which always does number coercion.\n\n### [Other coercions](#other_coercions)\n\nAll data types, except Null, Undefined, and Symbol, have their respective coercion process. See [string coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), [boolean coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion), and [object coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#object_coercion) for more details.\n\nAs you may have noticed, there are three distinct paths through which objects may be converted to primitives:\n\n*   [Primitive coercion](#primitive_coercion): `[@@toPrimitive](\"default\")` → `valueOf()` → `toString()`\n*   [Numeric coercion](#numeric_coercion), [number coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), [BigInt coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#bigint_coercion): `[@@toPrimitive](\"number\")` → `valueOf()` → `toString()`\n*   [String coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion): `[@@toPrimitive](\"string\")` → `toString()` → `valueOf()`\n\nIn all cases, `[@@toPrimitive]()`, if present, must be callable and return a primitive, while `valueOf` or `toString` will be ignored if they are not callable or return an object. At the end of the process, if successful, the result is guaranteed to be a primitive. The resulting primitive is then subject to further coercions depending on the context.\n\n## [See also](#see_also)",
    "title": "JavaScript data types and data structures - JavaScript | MDN",
    "description": "Programming languages all have built-in data structures, but these often differ from one language to another. This article attempts to list the built-in data structures available in JavaScript and what properties they have. These can be used to build other data structures.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "markdown": "# Function - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Function`** object provides methods for [functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions). In JavaScript, every function is actually a `Function` object.\n\n## [Constructor](#constructor)\n\n[`Function()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function)\n\nCreates a new `Function` object. Calling the constructor directly can create functions dynamically but suffers from security and similar (but far less significant) performance issues to [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval). However, unlike `eval()`, the `Function` constructor creates functions that execute in the global scope only.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Function.prototype` and shared by all `Function` instances.\n\n[`Function.prototype.arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments) Deprecated Non-standard\n\nRepresents the arguments passed to this function. For [strict](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), arrow, async, and generator functions, accessing the `arguments` property throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). Use the [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object inside function closures instead.\n\n[`Function.prototype.caller`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller) Deprecated Non-standard\n\nRepresents the function that invoked this function. For [strict](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), arrow, async, and generator functions, accessing the `caller` property throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n[`Function.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Function` instances, the initial value is the [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function) constructor.\n\nThese properties are own properties of each `Function` instance.\n\n[`displayName`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName) Non-standard Optional\n\nThe display name of the function.\n\n[`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length)\n\nSpecifies the number of arguments expected by the function.\n\n[`name`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name)\n\nThe name of the function.\n\n[`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype)\n\nUsed when the function is used as a constructor with the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator. It will become the new object's prototype.\n\n## [Instance methods](#instance_methods)\n\n[`Function.prototype.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)\n\nCalls a function with a given `this` value and optional arguments provided as an array (or an [array-like object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects)).\n\n[`Function.prototype.bind()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)\n\nCreates a new function that, when called, has its `this` keyword set to a provided value, optionally with a given sequence of arguments preceding any provided when the new function is called.\n\n[`Function.prototype.call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call)\n\nCalls a function with a given `this` value and optional arguments.\n\n[`Function.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString)\n\nReturns a string representing the source code of the function. Overrides the [`Object.prototype.toString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) method.\n\n[`Function.prototype[@@hasInstance]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/@@hasInstance)\n\nSpecifies the default procedure for determining if a constructor function recognizes an object as one of the constructor's instances. Called by the [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) operator.\n\n## [Examples](#examples)\n\n### [Difference between Function constructor and function declaration](#difference_between_function_constructor_and_function_declaration)\n\nFunctions created with the `Function` constructor do not create closures to their creation contexts; they always are created in the global scope. When running them, they will only be able to access their own local variables and global ones, not the ones from the scope in which the `Function` constructor was created. This is different from using [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) with code for a function expression.\n\n```\n// Create a global property with `var`\nvar x = 10;\n\nfunction createFunction1() {\n  const x = 20;\n  return new Function(\"return x;\"); // this `x` refers to global `x`\n}\n\nfunction createFunction2() {\n  const x = 20;\n  function f() {\n    return x; // this `x` refers to the local `x` above\n  }\n  return f;\n}\n\nconst f1 = createFunction1();\nconsole.log(f1()); // 10\nconst f2 = createFunction2();\nconsole.log(f2()); // 20\n```\n\nWhile this code works in web browsers, `f1()` will produce a `ReferenceError` in Node.js, as `x` will not be found. This is because the top-level scope in Node is not the global scope, and `x` will be local to the module.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-function-objects](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Function - JavaScript | MDN",
    "description": "The Function object provides methods for functions. In JavaScript, every function is actually a Function object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality",
    "markdown": "# Equality (==) - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **equality (`==`)** operator checks whether its two operands are equal, returning a Boolean result. Unlike the [strict equality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) operator, it attempts to convert and compare operands that are of different types.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe equality operators (`==` and `!=`) provide the [IsLooselyEqual](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#loose_equality_using) semantic. This can be roughly summarized as follows:\n\n1.  If the operands have the same type, they are compared as follows:\n    *   Object: return `true` only if both operands reference the same object.\n    *   String: return `true` only if both operands have the same characters in the same order.\n    *   Number: return `true` only if both operands have the same value. `+0` and `-0` are treated as the same value. If either operand is `NaN`, return `false`; so, `NaN` is never equal to `NaN`.\n    *   Boolean: return `true` only if operands are both `true` or both `false`.\n    *   BigInt: return `true` only if both operands have the same value.\n    *   Symbol: return `true` only if both operands reference the same symbol.\n2.  If one of the operands is `null` or `undefined`, the other must also be `null` or `undefined` to return `true`. Otherwise return `false`.\n3.  If one of the operands is an object and the other is a primitive, [convert the object to a primitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion).\n4.  At this step, both operands are converted to primitives (one of String, Number, Boolean, Symbol, and BigInt). The rest of the conversion is done case-by-case.\n    *   If they are of the same type, compare them using step 1.\n    *   If one of the operands is a Symbol but the other is not, return `false`.\n    *   If one of the operands is a Boolean but the other is not, [convert the boolean to a number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion): `true` is converted to 1, and `false` is converted to 0. Then compare the two operands loosely again.\n    *   Number to String: [convert the string to a number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion). Conversion failure results in `NaN`, which will guarantee the equality to be `false`.\n    *   Number to BigInt: compare by their numeric value. If the number is ±Infinity or `NaN`, return `false`.\n    *   String to BigInt: convert the string to a BigInt using the same algorithm as the [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) constructor. If conversion fails, return `false`.\n\nLoose equality is _symmetric_: `A == B` always has identical semantics to `B == A` for any values of `A` and `B` (except for the order of applied conversions).\n\nThe most notable difference between this operator and the [strict equality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) (`===`) operator is that the strict equality operator does not attempt type conversion. Instead, the strict equality operator always considers operands of different types to be different. The strict equality operator essentially carries out only step 1, and then returns `false` for all other cases.\n\nThere's a \"willful violation\" of the above algorithm: if one of the operands is [`document.all`](https://developer.mozilla.org/en-US/docs/Web/API/Document/all), it is treated as if it's `undefined`. This means that `document.all == null` is `true`, but `document.all === undefined && document.all === null` is `false`.\n\n## [Examples](#examples)\n\n### [Comparison with no type conversion](#comparison_with_no_type_conversion)\n\n```\n1 == 1; // true\n\"hello\" == \"hello\"; // true\n```\n\n### [Comparison with type conversion](#comparison_with_type_conversion)\n\n```\n\"1\" == 1; // true\n1 == \"1\"; // true\n0 == false; // true\n0 == null; // false\n0 == undefined; // false\n0 == !!null; // true, look at Logical NOT operator\n0 == !!undefined; // true, look at Logical NOT operator\nnull == undefined; // true\n\nconst number1 = new Number(3);\nconst number2 = new Number(3);\nnumber1 == 3; // true\nnumber1 == number2; // false\n```\n\n### [Comparison of objects](#comparison_of_objects)\n\n```\nconst object1 = {\n  key: \"value\",\n};\n\nconst object2 = {\n  key: \"value\",\n};\n\nconsole.log(object1 == object2); // false\nconsole.log(object1 == object1); // true\n```\n\n### [Comparing strings and String objects](#comparing_strings_and_string_objects)\n\nNote that strings constructed using `new String()` are objects. If you compare one of these with a string literal, the `String` object will be converted to a string literal and the contents will be compared. However, if both operands are `String` objects, then they are compared as objects and must reference the same object for comparison to succeed:\n\n```\nconst string1 = \"hello\";\nconst string2 = String(\"hello\");\nconst string3 = new String(\"hello\");\nconst string4 = new String(\"hello\");\n\nconsole.log(string1 == string2); // true\nconsole.log(string1 == string3); // true\nconsole.log(string2 == string3); // true\nconsole.log(string3 == string4); // false\nconsole.log(string4 == string4); // true\n```\n\n### [Comparing Dates and strings](#comparing_dates_and_strings)\n\n```\nconst d = new Date(\"1995-12-17T03:24:00\");\nconst s = d.toString(); // for example: \"Sun Dec 17 1995 03:24:00 GMT-0800 (Pacific Standard Time)\"\nconsole.log(d == s); //true\n```\n\n### [Comparing arrays and strings](#comparing_arrays_and_strings)\n\n```\nconst a = [1, 2, 3];\nconst b = \"1,2,3\";\na == b; // true, `a` converts to string\n\nconst c = [true, 0.5, \"hey\"];\nconst d = c.toString(); // \"true,0.5,hey\"\nc == d; // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-equality-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-equality-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Equality (==) - JavaScript | MDN",
    "description": "The equality (==) operator checks whether its two operands are equal,\n  returning a Boolean result.\n  Unlike the strict equality operator,\n  it attempts to convert and compare operands that are of different types.",
    "languageCode": "en-US"
  }
]