[{
  "url": "https://www.rudderstack.com/docs/",
  "markdown": "# RudderStack Documentation | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "RudderStack Documentation | RudderStack Docs",
  "description": "Deliver trustworthy, real-time data.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-rust-sdk/",
  "markdown": "# Rust SDK | RudderStack Docs\n\nUse RudderStack’s Rust SDK to send events to various destinations.\n\n* * *\n\n*     9 minute read  \n    \n\nThe **RudderStack Rust SDK** lets you track your customer event data from your Rust applications and send it to your specified destinations via RudderStack.\n\nCheck out the [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-rust) to get a more hands-on understanding of the SDK.\n\n[![Github Badge](https://img.shields.io/crates/v/rudderanalytics?style=flat)](https://crates.io/crates/rudderanalytics/)\n\n## SDK setup requirements\n\nTo set up the RudderStack Rust SDK, the following prerequisites must be met:\n\n*   You need to set up a [RudderStack account](https://app.rudderstack.com/signup).\n*   Once signed up, [set up a Rust source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the dashboard. You should be able to see a **Write Key** for this source, as shown below:\n\n[![Rust source write key](https://www.rudderstack.com/docs/images/event-stream-sources/rust-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/rust-write-key-new.webp)\n\n*   You will also need a data plane URL. Refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has an SDK installation snippet containing both the write key and the data plane URL. You can use it to integrate the Rust SDK into your application.\n\n## Installing the Rust SDK\n\nTo install the Rust SDK, simply add its crate as a project dependency.\n\nAdd the following line to your `Cargo.toml` file:\n\n```\nrudderanalytics = \"1.0.0\"\n```\n\n## Initializing the RudderStack client\n\nTo initialize the RudderStack client, run the following code snippet:\n\n```\nuse rudderanalytics::client::RudderAnalytics;\n\nlet rudder_analytics = RudderAnalytics::load(\n\t\"<SOURCE_WRITE_KEY>\".to_string(),\n\t\"<DATA_PLANE_URL>\".to_string()\n);\n```\n\nOnce the RudderStack client is initialized, you can use it to send your customer events.\n\n## Sending events\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not store or persist the user state in any of the server-side SDKs**.\n> \n> Unlike the client-side SDKs that deal with only a single user at a given time, the server-side SDKs deal with multiple users simultaneously. Therefore, you must specify either `user_id` or `anonymous_id` every time while making any API calls supported by the Rust SDK.\n\n## Identify\n\nThe `identify` call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` call is as shown:\n\n```\nuse rudderanalytics::message::{ Identify, Message };\n\nrudder_analytics\n        .send(Message::Identify(Identify {\n            user_id: Some(\"sample_user_id\".to_string()),\n            traits: Some(json!({\n                \"name\": \"Test User\",\n                \"email\": \"test@user.com\",\n            })),\n            ..Default::default()\n        }))\n        .expect(\"Identify call failed to send data to RudderStack\");\n```\n\nThe `identify` method parameters are as described below:\n\n| **Field** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `user_id` | String | Optional, if `anonymous_id` is already set. | Unique user identifier in your database. |\n| `anonymous_id` | String | Optional | Sets an identifier for cases when there is no unique user identifier. Either `user_id` or `anonymous_id` is required. |\n| `traits` | Object | Optional | Dictionary of the traits associated with the user, such as name, email, etc. |\n| `original_timestamp` | DateTime | Optional | The timestamp of the event’s occurrence as specified by the user, in ISO 8601 format. If not explicitly specified, the SDK appends the timestamp of the event’s receipt. |\n| `context` | Object | Optional | Dictionary of information providing context about a message. It is not directly related to the API call. |\n| `integrations` | Object | Optional | Dictionary containing the destinations to be enabled or disabled. |\n\n## Track\n\nThe `track` call lets you record the user actions along with their associated properties. Each user action is called an **event**.\n\nA sample `track` call is as shown:\n\n```\nuse rudderanalytics::message::{ Track, Message };\n\nrudder_analytics\n        .send(Message::Track(Track {\n            user_id: Some(\"sample_user_id\".to_string()),\n            event: \"Test Event\".to_owned(),\n            properties: Some(json!({\n                \"some property\": \"some value\",\n                \"some other property\": \"some other value\",\n            })),\n            ..Default::default()\n        }))\n        .expect(\"Track call failed to send data to RudderStack\");\n```\n\nThe `track` method parameters are as described below:\n\nThe following table describes the different `track` parameters in detail:\n\n| **Field** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `user_id` | String | Optional, if `anonymous_id` is already set. | Unique user identifier in your database. |\n| `anonymous_id` | String | Optional | Sets an identifier for cases when there is no unique user identifier. Either `user_id` or `anonymous_id` is required. |\n| `event` | String | Required | Name of the event, i.e. the action performed by the user. |\n| `properties` | Object | Optional | Dictionary of the properties associated with the event. |\n| `original_timestamp` | DateTime | Optional | The timestamp of the event’s occurrence as specified by the user, in ISO 8601 format. If not explicitly specified, the SDK appends the timestamp of the event’s receipt. |\n| `context` | Object | Optional | Dictionary of information providing context about a message. It is not directly related to the API call. |\n| `integrations` | Object | Optional | Dictionary containing the destinations to be enabled or disabled. |\n\n## Page\n\nThe `page` call allows you to record the page views on your website along with the other relevant information about the viewed page.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack recommends calling `page` at least once every page load.\n\nA sample `page` call is as shown:\n\n```\nuse rudderanalytics::message::{ Page, Message };\n\nrudder_analytics\n        .send(Message::Page(Page {\n            user_id: Some(\"sample_user_id\".to_string()),\n            name: \"Cart viewed\".to_owned(),\n            properties: Some(json!({\n                \"some property\": \"some value\",\n                \"some other property\": \"some other value\",\n            })),\n            ..Default::default()\n        }))\n        .expect(\"Page call failed to send data to RudderStack\");\n```\n\nThe `page` method parameters are as described below:\n\n| **Field** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `user_id` | String | Optional, if `anonymous_id` is already set. | Unique user identifier in your database. |\n| `anonymous_id` | String | Optional | Sets an identifier for cases when there is no unique user identifier. Either `user_id` or `anonymous_id` is required. |\n| `name` | String | Required | Name of the viewed page. |\n| `properties` | Object | Optional | Dictionary of the properties associated with the page view event. |\n| `original_timestamp` | DateTime | Optional | The timestamp of the event’s occurrence as specified by the user, in ISO 8601 format. If not explicitly specified, the SDK appends the timestamp of the event’s receipt. |\n| `context` | Object | Optional | Dictionary of information providing context about a message. It is not directly related to the API call. |\n| `integrations` | Object | Optional | Dictionary containing the destinations to be enabled or disabled. |\n\n## Screen\n\nThe `screen` method lets you record whenever the user views their mobile screen, along with any additional relevant information about the screen.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `screen` call is the mobile equivalent of the `page` call.\n\nA sample `screen` call is shown below:\n\n```\nuse rudderanalytics::message::{ Screen, Message };\n\nrudder_analytics\n        .send(Message::Screen(Screen {\n            user_id: Some(\"sample_user_id\".to_string()),\n            name: \"sample_screen\".to_owned(),\n            properties: Some(json!({\n                \"some property\": \"some value\",\n                \"some other property\": \"some other value\",\n            })),\n            ..Default::default()\n        }))\n        .expect(\"Screen call failed to send data to RudderStack\");\n```\n\nThe `screen` method parameters are as described below:\n\n| **Field** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `user_id` | String | Optional, if `anonymous_id` is already set. | Unique user identifier in your database. |\n| `anonymous_id` | String | Optional | Sets an identifier for cases when there is no unique user identifier. Either `user_id` or `anonymous_id` is required. |\n| `name` | String | Required | Name of the viewed screen. |\n| `properties` | Object | Optional | Dictionary of the properties associated with the screen view event. |\n| `original_timestamp` | DateTime | Optional | The timestamp of the event’s occurrence as specified by the user, in ISO 8601 format. If not explicitly specified, the SDK appends the timestamp of the event’s receipt. |\n| `context` | Object | Optional | Dictionary of information providing context about a message. It is not directly related to the API call. |\n| `integrations` | Object | Optional | Dictionary containing the destinations to be enabled or disabled. |\n\n## Group\n\nThe `group` call lets you associate an identified user to a group - either a company, project or a team and record any custom traits or properties associated with that group.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> An identified user can be in more than one group.\n\nA sample `group` call is as shown:\n\n```\nuse rudderanalytics::message::{ Group, Message };\n\nrudder_analytics\n        .send(Message::Group(Group {\n            user_id: Some(\"sample_user_id\".to_string()),\n            group_id: \"sample_group_id\".to_owned(),\n            traits: Some(json!({\n                \"some property\": \"some value\",\n                \"some other property\": \"some other value\",\n            })),\n            ..Default::default()\n        }))\n        .expect(\"Group call failed to send data to RudderStack\");\n```\n\nThe `group` method parameters are as described below:\n\n| **Field** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `user_id` | String | Optional, if `anonymous_id` is already set. | Unique user identifier in your database. |\n| `anonymous_id` | String | Optional | Sets an identifier for cases when there is no unique user identifier. Either `user_id` or `anonymous_id` is required. |\n| `group_id` | String | Required | Unique identifier of the group in your database. |\n| `traits` | Object | Optional | Dictionary of the traits associated with the group. |\n| `original_timestamp` | DateTime | Optional | The timestamp of the event’s occurrence as specified by the user, in ISO 8601 format. If not explicitly specified, the SDK appends the timestamp of the event’s receipt. |\n| `context` | Object | Optional | Dictionary of information providing context about a message. It is not directly related to the API call. |\n| `integrations` | Object | Optional | Dictionary containing the destinations to be enabled or disabled. |\n\n## Alias\n\nThe `alias` call lets you merge different identities of a known user.\n\nA sample `alias` call is shown below:\n\n```\nuse rudderanalytics::message::{ Alias, Message };\n\nrudder_analytics\n        .send(Message::Alias(Alias {\n            user_id: Some(\"sample_user_id\".to_string()),\n            previous_id: \"sample_previous_user_id\".to_owned(),\n            traits: Some(json!({\n                \"some property\": \"some value\",\n                \"some other property\": \"some other value\",\n            })),\n            ..Default::default()\n        }))\n        .expect(\"Alias call failed to send data to RudderStack\");\n```\n\nThe `alias` method parameters are as described below:\n\n| **Field** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `user_id` | String | Required | Unique user identifier in your database. |\n| `previous_id` | String | Required | The user’s previous identifier. |\n| `traits` | Object | Optional | Dictionary of the traits associated with the user, such as name, email, etc. |\n| `original_timestamp` | DateTime | Optional | The timestamp of the event’s occurrence as specified by the user, in ISO 8601 format. If not explicitly specified, the SDK appends the timestamp of the event’s receipt. |\n| `context` | Object | Optional | Dictionary of information providing context about a message. It is not directly related to the API call. |\n| `integrations` | Object | Optional | Dictionary containing the destinations to be enabled or disabled. |\n\n## Batch\n\nThe `batch` call lets you send multiple user events(of type `identify`, `track`, `page`, `screen`, `group`, and `alias`) in one call.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `batch` call accepts a maximum call size of 4 MB.\n\nA sample `batch` call is as shown:\n\n```\nuse rudderanalytics::message::{ Batch, Message, BatchMessage };\n\nrudder_analytics\n        .send(Message::Batch(Batch {\n            batch: vec![\n                BatchMessage::Identify(Identify {\n                    user_id: Some(\"foo\".to_string()),\n                    traits: Some(json!({})),\n                    ..Default::default()\n                }),\n                BatchMessage::Track(Track {\n                    user_id: Some(\"bar\".to_string()),\n                    event: \"Bar\".to_owned(),\n                    properties: Some(json!({})),\n                    ..Default::default()\n                }),\n                BatchMessage::Track(Track {\n                    user_id: Some(\"baz\".to_string()),\n                    event: \"Baz\".to_owned(),\n                    properties: Some(json!({})),\n                    ..Default::default()\n                }),\n            ],\n            context: Some(json!({\n                \"foo\": \"bar\",\n            })),\n            ..Default::default()\n        }))\n        .expect(\"Batch call failed to send data to RudderStack\");\n```\n\nThe `batch` method parameters are as described below:\n\n| **Field** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `batch` | Vector | Required | Contains one or more event calls of type `identify`/ `track`/ `page`/ `screen`/ `group`/ `alias`. |\n| `context` | Object | Optional | Dictionary of information providing context about a message. It is not directly related to the API call. |\n| `integrations` | Object | Optional | Dictionary containing the destinations to be enabled or disabled. |\n| `original_timestamp` | DateTime | Optional | The timestamp of the event’s occurrence as specified by the user, in ISO 8601 format. If not explicitly specified, the SDK appends the timestamp of the event’s receipt. |\n\n## Integrations options\n\nThe structure of the `integrations` option is as follows:\n\n```\nintegrations: {\n All: boolean, // Defaults to true\n <Destination1>: boolean,\n <Destination2>: boolean,\n ...\n}\n```\n\nThe following table describes all `integrations` parameters in detail:\n\n| **Field** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `All` | Boolean | Optional | Corresponds to all destinations to which the event is to be sent. Defaults to true. `All: false` instructs RudderStack to not send the event data to any destinations by default. |\n| `<Destination>` | Boolean | Optional | Name of the specific destination to which the event should be sent/not sent, depending on the Boolean value assigned to it. |\n\n## FAQ\n\n#### Does the Rust SDK support event ordering?\n\nThe Rust SDK does not support event ordering by default.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Rust SDK | RudderStack Docs",
  "description": "Use RudderStack’s Rust SDK to send events to various destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/",
  "markdown": "# Client-side Events Filtering | RudderStack Docs\n\nFilter events for your allowlist or denylist.\n\n* * *\n\n*     2 minute read  \n    \n\nRudderStack’s client-side event filtering feature lets you specify which events should be discarded or allowed to flow through by allowlisting or denylisting them.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   Client-side event filtering is applicable only for `track` calls. In case of mobile SDKs, it also applies to the following application lifecycle events:\n>     *   Application Installed\n>     *   Application Opened\n>     *   Application Backgrounded\n>     *   Application Updated\n> *   You can use this feature for all RudderStack destinations that support sending events via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode).\n> *   To use this feature with the latest [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/), note that:\n>     *   Empty and non-string event names are not allowlisted anymore.\n>     *   Event name comparison is case-sensitive.\n\n## Supported SDKs\n\nThe following source SDKs support this feature:\n\n*   [JavaScript](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/)\n*   [Android](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/)\n*   [iOS](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/)\n*   [React Native](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-react-native-sdk/)\n*   [Flutter](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/)\n*   [Cordova](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-cordova-sdk/)\n\n## Event filtering options\n\nRudderStack gives you the ability to configure your event filtering options while setting up your device mode destination in the dashboard:\n\n[![Event filtering options](https://www.rudderstack.com/docs/images/event-stream-sources/rudderstack-event-filtering.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/rudderstack-event-filtering.webp)\n\nYou will see the following dropdown options under **Event Filtering**, in the **Connection Settings** page:\n\n### Disable\n\nEvent filtering will be disabled if you select this option from the dropdown. In this case, RudderStack will not filter any events and allow all events to flow through.\n\n### Allowlist\n\nUpon selecting the **Allowlist** option from the dropdown, you can specify the names of the events that you want RudderStack to **allow** or flow through to the destination.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you choose the **Allowlist** option for event filtering, any events specified in the **Denylist** field will be ignored.\n\nYou can add as many events as you want to the allowlist by clicking the **Add More** option.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack will discard any event that is not specified in the allowlist. If you do not specify any events in the allowlist, **all** the calls will be discarded.\n\n### Denylist\n\nUpon selecting the **Denylist** option from the dropdown, you can specify the names of the events that you want RudderStack to **discard**. These events will not be sent to the destination.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you choose the **Denylist** option for event filtering, any events specified in the **Allowlist** field will be ignored.\n\nYou can add as many events as you want to the denylist by clicking on the **Add More** option.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack will only discard events explicitly specified in the denylist. If you do not specify any events in the denylist, then **all** calls will be allowed through.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Client-side Events Filtering | RudderStack Docs",
  "description": "Filter events for your allowlist or denylist.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/",
  "markdown": "# Session Tracking | RudderStack Docs\n\nTrack user sessions from RudderStack web and mobile sources.\n\n* * *\n\n*     9 minute read  \n    \n\nA session is a group of user interactions with your website or mobile app within a given time frame. It is usually triggered when a user opens a mobile app or a website in their browser and ends after a particular period of inactivity.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> A single session can contain multiple page views or screen views, events, social interactions, and ecommerce transactions.\n\nWith the help of RudderStack’s **session tracking** feature, you can gather the event tracking metrics and combine it with the session metadata to better understand the user’s product journey and analyze their behavior. You can also use the resulting insights to identify problems and optimization opportunities in your product workflow.\n\n## Session tracking in RudderStack SDKs\n\nThe following RudderStack SDKs support the session tracking feature:\n\n| RudderStack SDK | Minimum supported version |\n| --- | --- |\n| [JavaScript](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) | *   v1: **1.16.0** (CDN)<br>*   v1.1: **2.15.0** (CDN & NPM) |\n| [Android](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/) | **v1.7.0** |\n| [iOS](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/) | *   [v1](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/): **v1.7.0**<br>*   [v2](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/ios-v2/): **v2.3.0** |\n| [React Native](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-react-native-sdk/) | **v1.8.0** |\n| [Flutter](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/) | **v2.7.0** |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can expect the following properties in your event’s [context object](https://www.rudderstack.com/docs/event-spec/standard-events/common-fields/#contextual-fields) object when session tracking is enabled:\n> \n> *   `sessionId` (Number): The session ID. For more information on how RudderStack calculates `sessionId`, see [FAQ](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/faq/#how-does-rudderstack-determine-the-sessionid).\n> *   `sessionStart` (Boolean): Present in the first event, indicating the start of the session.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> It is strongly recommended to send any other session-related information in the event’s traits or properties as RudderStack’s [automatic session tracking](#automatic-session-tracking) overrides any `sessionId` set in the event’s `context` object.\n\n## Automatic session tracking\n\n**By default, the RudderStack SDKs (JavaScript, Android, iOS, React Native, and Flutter) automatically track the user sessions**. This means that RudderStack automatically determines the start and end of a session depending on the inactivity time configured in the SDK.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The server-side SDKs do not support automatic session tracking.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack also lets you start and end user sessions manually. Refer to the [Manual session tracking](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/manual-session-tracking/) guide for more information. **Note that manual session tracking overrides the automatic session tracking**.\n\n### JavaScript SDK\n\nFor the JavaScript SDK, RudderStack considers the [SDK initialization](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/) as the start of a user session.\n\nTo disable automatic session tracking, you can set the `autoTrack` load option to `false`:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  sessions: {\n    autoTrack: false,  // Set to true to enable automatic session tracking\n  },\n  ...<otherLoadOptions>\n});\n```\n\n#### **When does a session become inactive?**\n\nBy default, a session is active until **30 minutes of inactivity** have elapsed since the last received event. Whenever RudderStack receives a new event, it checks if the inactivity period has elapsed. If yes, it starts a new session with a new `sessionId`. Otherwise, it continues the previous session.\n\nEvery time a new event is generated (`track`, `page`, `identify`, etc.), the SDK resets the session expiration time by adding the configured `timeout` (default **30 minutes**) to the last received event’s [`timestamp`](https://www.rudderstack.com/docs/event-spec/standard-events/common-fields/#clock-skew-considerations).\n\nYou can also adjust the inactivity period using the `timeout` load option. The following snippet highlights the use of the `timeout` option to set a custom session timeout of 10 minutes:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  sessions: {\n    autoTrack: true,\n    timeout: 10 * 60 * 1000,  // 10 min in milliseconds\n  },\n  ...<otherLoadOptions>\n});\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on how session tracking works in the JavaScript SDK, refer to the [Session tracking flow](#session-tracking-flow) section below.\n\n#### **When does a session reset?**\n\nThe JavaScript SDK resets and starts a new session in the following cases:\n\n*   When RudderStack receives a new event after the session inactivity period has elapsed, as explained above.\n*   When you call the [`reset()`API](https://www.rudderstack.com/docs/event-spec/standard-events/).\n*   If you identify a user with a new `userId` in an existing session. RudderStack triggers a `reset()` call that ends the existing session and generates a new one with a different `sessionId`.\n\n#### **Get session ID for JavaScript SDK**\n\nThe JavaScript SDK provides a `getSessionId` method to fetch the current session’s `sessionId`. In case the session ID is unavailable, this method returns a `null` value.\n\nA sample snippet to fetch the current session ID is as shown:\n\n```\nrudderanalytics.getSessionId();\n```\n\n### Mobile SDKs\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   To automatically track sessions in the Android and iOS SDK, `withTrackLifecycleEvents` should also be set to true.\n> *   For the React Native SDK, `trackAppLifecycleEvents` should be set to true.\n> \n> This is because RudderStack considers the [Application Opened](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-opened), [Application Installed](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-installed), or [Application Updated](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-updated) events as the start of a new session.\n\n#### **Android**\n\nBy default, automatic session tracking is enabled in the [Android](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/) SDK:\n\n```\nval rudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            // Set to false to disable automatic session tracking\n            .withAutoSessionTracking(true)\n            .withSessionTimeoutMillis(5 * 60 * 1000)\n            .build()\n    )\n```\n\n```\nRudderClient rudderClient = RudderClient.getInstance(\n    this,\n    WRITE_KEY,\n    new RudderConfig.Builder()\n        .withDataPlaneUrl(DATA_PLANE_URL)\n        .withAutoSessionTracking(true) // Set to false to disable automatic session tracking\n        .withSessionTimeoutMillis(5*60*1000)\n        .build()\n);\n```\n\nTo disable automatic session tracking, set `withAutoSessionTracking` to `false`.\n\n##### **Get session ID for Android SDK**\n\nThe Android SDK provides a `getSessionId` method to fetch the current session’s `sessionId`. In case the session ID is unavailable, this method returns a `null` value.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `getsessionId()` method is available in the Android SDK from v1.19.0 onwards.\n\n```\nRudderClient.getInstance()?.sessionId\n```\n\n#### **iOS**\n\nBy default, automatic session tracking is enabled in the [iOS SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/):\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withAutoSessionTracking:YES];  // Set to No to disable automatic session tracking\n[builder withSessionTimeoutMillis:(5*60*1000)];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withAutoSessionTracking(true)  // Set to false to disable automatic session tracking\n            .withSessionTimeoutMillis(5*60*1000)\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\nTo disable automatic session tracking, set `withAutoSessionTracking` to `false`.\n\n##### **Get session ID for iOS SDK v1**\n\nThe iOS SDK v1 provides an instance variable `sessionId` to fetch the current session ID. In case the session ID is unavailable, it returns a `null` value.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `sessionId` instance variable is available in the iOS SDK v1 from v1.20.0 onwards.\n\n```\n[RSClient sharedInstance].sessionId\n\n// OR\n\n[[RSClient sharedInstance] sessionId]\n```\n\n```\nRSClient.sharedInstance()?.sessionId\n```\n\n#### **iOS SDK v2**\n\nBy default, automatic session tracking is enabled in the [iOS SDK v2](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/ios-v2/):\n\n```\nRSConfig *config = [[RSConfig alloc] initWithWriteKey:WRITE_KEY];\n[config dataPlaneURL:DATA_PLANE_URL];\n[config autoSessionTracking:YES];\n[config sessionTimeout:5*60*1000L];\nRSClient *client = [RSClient sharedInstance];\n[client configureWith:config];\n```\n\n```\nlet config: RSConfig = RSConfig(writeKey: WRITE_KEY)\n            .dataPlaneURL(DATA_PLANE_URL)\n            .autoSessionTracking(true)\n            .sessionTimeout(5*60*1000)\nRSClient.sharedInstance().configure(with: config)\n```\n\nTo disable automatic session tracking, set `autoSessionTracking` to `false`.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Unlike [iOS SDK v1](#get-session-id-for-ios-sdk-v1), the SDK v2 does not support fetching the current session ID as of now. This feature is coming soon.\n\n#### **Flutter SDK**\n\nBy default, automatic session tracking is enabled in the [Flutter SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/):\n\n```\nfinal RudderController rudderClient = RudderController.instance;\nWebConfig wc = WebConfig(autoSessionTracking: true, sessionTimeoutInMillis: 10 * 60 * 1000); // setting the session timeout to 10 mins\nRudderConfigBuilder builder = RudderConfigBuilder();\nbuilder\n   ..withDataPlaneUrl(\"DATA_PLANE_URL\")\n   ..withWebConfig(wc);\nrudderClient.initialize(\"WRITE_KEY\", config: builder.build());\n```\n\n```\nfinal RudderController rudderClient = RudderController.instance;\nMobileConfig mc = MobileConfig(autoSessionTracking: true, sessionTimeoutInMillis: 3 * 60 * 1000); // setting the session time out to 3 mins\nRudderConfigBuilder builder = RudderConfigBuilder();\nbuilder\n   ..withDataPlaneUrl(\"DATA_PLANE_URL\")\n   ..withMobileConfig(mc)\nrudderClient.initialize(\"WRITE_KEY\", config: builder.build());\n```\n\nTo disable automatic session tracking, set `autoSessionTracking` to `false`.\n\n##### **Get session ID for Flutter SDK**\n\nThe Flutter SDK provides a `getSessionId` method to fetch the current session’s `sessionId`. In case the session ID is unavailable, this method returns a `null` value.\n\n```\nint? sessionId = await rudderClient.getSessionId();\n```\n\n#### **React Native**\n\nBy default, automatic session tracking is enabled in the [React Native SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-react-native-sdk/):\n\n```\nconst rudderInitialise = async () => {\n  await rudderClient.setup(WRITE_KEY, {\n    dataPlaneUrl: DATA_PLANE_URL,\n    trackAppLifecycleEvents: true,\n    autoSessionTracking: true, // Set to false to disable automatic session tracking\n    sessionTimeout: 5 * 60 * 1000,\n  });\n};\nrudderInitialise().catch(console.error);\n```\n\nTo disable automatic session tracking, set `autoSessionTracking` to `false`.\n\n##### **Get session ID for React Native SDK**\n\nThe React Native SDK provides a `getSessionId` method to fetch the current session’s ID. If the session ID is unavailable, this method returns a `null` value.\n\nA sample snippet to fetch the session ID using the React Native SDK:\n\n```\nconst sessionId = await rudderClient.getSessionId();\n```\n\n#### **Session expiration in mobile SDKs**\n\nBy default, a session is active until **5 minutes of inactivity** have elapsed. For Flutter SDK, this limit is 5 minutes for mobile platforms and 30 minutes for web platforms.\n\nHowever, you can adjust this limit using the following load option in the respective SDKs:\n\n| Load option | RudderStack SDK | Default value |\n| --- | --- | --- |\n| `sessionTimeoutMillis` | Android and iOS | 5 minutes |\n| `sessionTimeout` | iOS v2 and React Native | 5 minutes |\n| `sessionTimeoutInMillis` | Flutter | *   5 minutes (mobile platforms)<br>*   30 minutes (web platforms) |\n\nIf the duration between the last received event and the next `Application Opened` event is more than the session timeout, RudderStack **automatically** starts a new session. Otherwise, it continues the previous session.\n\nCalling the [`reset`](https://www.rudderstack.com/docs/event-spec/standard-events/) method clears the current `sessionId` and generates a new one.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on how session tracking works in the mobile SDKs, refer to the [Session tracking flow](#session-tracking-flow) section below.\n\n## Session tracking flow\n\nThe following sections describe how the session tracking works in the RudderStack SDKs.\n\n### JavaScript SDK\n\nIf session tracking is enabled in the JavaScript SDK, the flow is as explained below:\n\n1.  During the initialization, the SDK checks for an existing user session. If no valid session exists, it creates a new session. Otherwise, the SDK proceeds with the existing session.\n2.  Upon receiving an event, the SDK fetches the `sessionId`. If no valid `sessionId` is found, it creates a new session and returns the `sessionId`.\n    *   If this is the first event of the session, the SDK also sends another parameter in the context called `sessionStart: true`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on how RudderStack calculates `sessionId`, refer to the [FAQ](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/faq/#how-does-rudderstack-determine-the-sessionid) guide.\n\n3.  The SDK records the user events and the session is active until the `timeout` (default **30 minutes** of inactivity) period has elapsed since the last received event. If yes, it starts a new session with a new `sessionId`.\n4.  Otherwise, the SDK updates the session expiration time by adding the last event’s [`timestamp`](https://www.rudderstack.com/docs/event-spec/standard-events/common-fields/#clock-skew-considerations) to the `timeout` period (default **30 minutes**).\n\nThe following diagram summarizes the workflow:\n\n[![Session tracking in JavaScript SDK](https://www.rudderstack.com/docs/images/event-stream-sources/session-tracking-web-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/session-tracking-web-new.webp)\n\n### Mobile SDKs\n\nIf session tracking is enabled in the mobile SDKs, the flow is as explained below:\n\n1.  RudderStack starts the session once it receives the [`Application Opened`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-opened), [`Application Installed`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-installed), or [`Application Updated`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-updated) event.\n    \n2.  The SDK then generates a `sessionId`. For more information on how RudderStack calculates `sessionId`, refer to the [FAQ](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/faq/#how-does-rudderstack-determine-the-sessionid) guide.\n    \n3.  The SDK records the user events and the session is active until more than `sessionTimeoutMillis` (default **5 minutes**) period of inactivity has elapsed since the last received event. For more information, refer to the [Session expiration in the mobile SDKs](#session-expiration-in-mobile-sdks) section above.\n    \n\nThe following diagram summarizes the workflow:\n\n[![Session tracking in mobile SDKs](https://www.rudderstack.com/docs/images/event-stream-sources/session-tracking-mobile.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/session-tracking-mobile.webp)\n\nThe RudderStack SDKs support sending the `sessionId` and `sessionStart` fields to all [cloud](https://www.rudderstack.com/docs/destinations/streaming-destinations/) and [warehouse](https://www.rudderstack.com/docs/destinations/warehouse-destinations/) destinations, **within the event’s `context`**.\n\nIt is important to note the following:\n\n*   RudderStack passes the `sessionId` to the subsequent events in the `context.sessionId` field.\n*   RudderStack sets the `context.sessionStart` field to `true` in the first event to indicate the start of the session.\n\nRudderStack maps `sessionId` to specific fields **only** in case of the following two destinations:\n\n| Destination | Notes |\n| --- | --- |\n| [Amplitude](https://www.rudderstack.com/docs/destinations/streaming-destinations/amplitude/) | RudderStack maps `sessionId` to Amplitue’s `session_id` field. For more information, see the [Amplitude documentation](https://www.docs.developers.amplitude.com/analytics/apis/http-v2-api/#keys-for-the-event-argument:~:text=to%20occur%20simultaneously.-,session_id,-Optional.%20Long.%20The%22). |\n| [Mixpanel](https://www.rudderstack.com/docs/destinations/streaming-destinations/mixpanel/) | *   RudderStack passes the `$session_id` under the event properties.<br>  <br>*   Mixpanel doesn’t have a specific field for `$session_id` but you can use this field in the reports. |\n\n## FAQ\n\nRefer to the [Session Tracking FAQ](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/faq/) guide for a comprehensive list of questions on session tracking.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Session Tracking | RudderStack Docs",
  "description": "Track user sessions from RudderStack web and mobile sources.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/manual-session-tracking/",
  "markdown": "# Manual Session Tracking | RudderStack Docs\n\nManually tracking user sessions using the RudderStack SDKs.\n\n* * *\n\n*     3 minute read  \n    \n\nRudderStack supports manual session tracking that lets you define the start and end of a user session.\n\nThe RudderStack SDKs ([JavaScript](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/), [Android](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/), [iOS](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/)), [React Native](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-react-native-sdk/), and [Flutter](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/) SDKs support the following manual session tracking methods:\n\n| Method | Parameters | Description |\n| --- | --- | --- |\n| `startSession()` | \\-  | If you don't pass any parameter, RudderStack creates a new session and passes the current `timestamp` as the `sessionId`. |\n| `sessionId`  <br>Long integer with minimum length of 10 characters. | If you pass a custom `sessionId` parameter, RudderStack triggers a new user session.<br><br>It is **not recommended** to use a decimal number as the `sessionId`. |\n| `endSession()` | \\-  | RudderStack clears the `sessionId` and ends the session. |\n\n## Persistence scope\n\nThe following sections list the persistence scope of manual session tracking in the JavaScript and mobile SDKs.\n\n### JavaScript\n\nThe persistence scope of manual session tracking in the JavaScript SDK **does not depend** on whether [automatic session tracking](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/#automatic-session-tracking) is enabled or disabled.\n\nIf you call `startSession()`, the manual session continues even if you refresh or reopen the web page. To end the session, you must call `endSession()`.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you identify a user with a new `userId` in an existing session, RudderStack triggers a `reset()` call. This ends the existing session and generates a new one, irrespective of whether `endSession()` is called or not.\n\n### Android/iOS/React Native/Flutter\n\nThe persistence scope of manual session tracking in the mobile SDKs **depends** on the status of [automatic session tracking](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/#automatic-session-tracking):\n\n*   If automatic session tracking is enabled and you call `startSession()`, then RudderStack disables automatic session tracking **until the app is closed completely**. Once you restart the app, the SDKs resume automatic session tracking.\n*   If automatic session tracking is disabled and you call `startSession()`, the manual session is active until you end it by calling `endSession()`.\n\n## Sample snippets\n\nThe following snippets highlight the use of the manual session tracking methods:\n\n### JavaScript\n\n```\nrudderanalytics.startSession() // Starts a new user session and automatically assigns a session ID.\n\nrudderanalytics.startSession(sessionId) // Passes a custom session ID while creating a new session.\n\nrudderanalytics.endSession() // Ends the user session and clears the session ID.\n```\n\n### Android\n\n```\n// Starts a new user session and automatically assigns a session ID.\nrudderClient.startSession()\n\n// Passes a custom session ID while creating a new session.\nrudderClient.startSession(sessionId)\n\n// Ends the user session and clears the session ID.\nrudderClient.endSession()\n```\n\n```\nrudderClient.startSession(); // Starts a new user session and automatically assigns a session ID.\n\nrudderClient.startSession(sessionId); // Passes a custom session ID while creating a new session.\n\nrudderClient.endSession(); // Ends the user session and clears the session ID.\n```\n\n### iOS\n\n```\nRSClient.sharedInstance()?.startSession() // Starts a new user session and automatically assigns a session ID.\n\nRSClient.sharedInstance()?.startSession(sessionId) // Passes a custom session ID while creating a new session.\n\nRSClient.sharedInstance()?.endSession() // Ends the user session and clears the session ID.\n```\n\n```\n[[RSClient sharedInstance] startSession]; // Starts a new user session and automatically assigns a session ID.\n\n[[RSClient sharedInstance] startSession:sessionId]; // Passes a custom session ID while creating a new session.\n\n[[RSClient sharedInstance] endSession]; // Ends the user session and clears the session ID.\n```\n\n### React Native\n\n```\n// Starts a new user session and automatically assigns a session ID.\nrudderClient.startSession();\n\n// Passes a custom session ID while creating a new session.\nrudderClient.startSession(sessionId);\n\n// Ends the user session and clears the session ID.\nrudderClient.endSession();\n```\n\n### Flutter\n\n```\n// Starts a new user session and automatically assigns a session ID.\nrudderClient.startSession();\n\n// Passes a custom session ID while creating a new session.\nrudderClient.startSession(sessionId);\n\n// Ends the user session and clears the session ID.\nrudderClient.endSession();\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Manual Session Tracking | RudderStack Docs",
  "description": "Manually tracking user sessions using the RudderStack SDKs.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/faq/",
  "markdown": "# JavaScript SDK FAQ | RudderStack Docs\n\nSolutions to some commonly faced issues while using the RudderStack JavaScript SDK.\n\n* * *\n\n*     2 minute read  \n    \n\nThis guide contains the answers to some commonly-asked questions about setting up, using and troubleshooting the JavaScript SDK.\n\n#### **Should I disable adblockers on my browser?**\n\nYes, it is important to ensure that no ad blockers are running on your browser, as they restrict the JavaScript SDK script from executing and storing user information in the browser.\n\n#### **Can I load multiple instances of RudderStack JavaScript SDK?**\n\nNo, it is not possible to load multiple instances of the JavaScript SDK, as it is bound to exceed the maximum stack call size and give you an error.\n\n#### **How can I verify if the SDK is sending data to the specified destinations?**\n\nTo verify if the SDK is transmitting events to the specified destinations successfully, check the **Network** tab of the developer tools in your web browser. The following demonstration is for Google Chrome:\n\n[![Sample page call](https://www.rudderstack.com/docs/images/sample-page-call.webp)](https://www.rudderstack.com/docs/images/sample-page-call.webp)\n\n[![Sample track call](https://www.rudderstack.com/docs/images/sample-track-call.webp)](https://www.rudderstack.com/docs/images/sample-track-call.webp)\n\nIf you cannot see any outbound requests like `track`, `page` etc. to the data plane URL, verify if you have [installed the JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/installation/) correctly. Also, check if any adblockers are enabled on your browser.\n\n#### **What is the size limit on the event requests?**\n\nThe [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) exhibits the following behavior:\n\n*   If the event size exceeds 32KB, the SDK logs a warning but forwards it to the RudderStack data plane (backend).\n*   If you’ve configured the SDK to use the [Beacon transport](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#send-events-using-beacon), the SDK batches the events with a size limit of 64KB on the **entire** batch payload.\n\n#### **Can I send the event data to specific destinations only?**\n\nYes, you can send your [event data only to the specific destinations](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/filtering/) by stopping the SDK from loading the other [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode) integrations.\n\n#### **What is the “Reserved Keyword” warning?**\n\nWhen using the JavaScript SDK, you may run into the following warning:\n\n```\nEventManager:: The \"event\" property defined under \"traits\" is a reserved keyword. Please choose a different property name to avoid conflicts with reserved keywords (id,anonymous_id,user_id,sent_at,timestamp,received_at,original_timestamp,event,event_text,channel,context_ip,context_request_ip,context_passed_ip,group_id,previous_id).\n```\n\nThis is because one or more keys in your `traits`, `properties`, or `context.traits` object have the same value as a reserved keyword.\n\nRudderStack reserves the following keywords as keys for a standard event payload, and you should avoid using these while naming your event traits and properties:\n\n```\n'id',\n'anonymous_id',\n'user_id',\n'sent_at',\n'timestamp',\n'received_at',\n'original_timestamp',\n'event',\n'event_text',\n'channel',\n'context_ip',\n'context_request_ip',\n'context_passed_ip',\n'group_id',\n'previous_id'\n```\n\n#### **How can I differentiate between events sent from a mobile device or a website?**\n\nThe events tracked via JavaScript SDK contain `context.userAgent` that contain information on the user agent of the device. See [Load JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#uachtracklevel) for more information.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "JavaScript SDK FAQ | RudderStack Docs",
  "description": "Solutions to some commonly faced issues while using the RudderStack JavaScript SDK.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/faq/",
  "markdown": "# Session Tracking FAQ | RudderStack Docs\n\nAnswers to the generally asked questions related to RudderStack’s session tracking feature.\n\n* * *\n\n*     4 minute read  \n    \n\n## General\n\n#### Do the RudderStack server-side SDKs support the automatic session tracking feature?\n\nNo, the server-side SDKs do not support automatic session tracking. However, you can create your own session start and end events as backend events using the SDKs.\n\n#### How does RudderStack determine the `sessionId`?\n\nRudderStack passes the event’s `timestamp` (in milliseconds) as the `sessionId`.\n\n#### Does RudderStack attach any user information to the `sessionId`?\n\nRudderStack **does not** attach any user information to the `sessionId`. This is so that a user cannot be traced back or identified only with the `sessionId`.\n\n#### Are session IDs unique across users?\n\n`sessionId` is not guaranteed to be unique across users. RudderStack calculates the current `timestamp` (in milliseconds) and sets it as the `sessionId`. It is helpful to measure session-related properties like number of sessions for a given user, session length, etc.\n\n#### How do I correctly count the number of sessions for a given user?\n\nTo correctly count the number of sessions, you can pair `sessionId` with the user’s `anonymousId`.\n\n#### What happens if automatic session tracking is enabled but I call the `startSession()` API?\n\nIf you call the `startSession()` API while automatic session tracking is enabled, RudderStack ends the existing session and starts a new session. Also, it disables automatic session tracking.\n\n#### What happens to the existing session if I call the `reset()` API?\n\nIf you call the [`reset()`API](https://www.rudderstack.com/docs/event-spec/standard-events/), RudderStack ends the existing session and generates a new one.\n\n#### Which events and APIs does RudderStack support for session tracking?\n\nRudderStack currently supports session tracking only for the following events:\n\n*   [Identify](https://www.rudderstack.com/docs/event-spec/standard-events/identify/)\n*   [Track](https://www.rudderstack.com/docs/event-spec/standard-events/track/)\n*   [Page](https://www.rudderstack.com/docs/event-spec/standard-events/page/)\n*   [Group](https://www.rudderstack.com/docs/event-spec/standard-events/group/)\n*   [Screen](https://www.rudderstack.com/docs/event-spec/standard-events/screen/)\n*   [Alias](https://www.rudderstack.com/docs/event-spec/standard-events/alias/)\n\n#### Is automatic session tracking permanently disabled if I trigger manual session tracking?\n\nIf you manually trigger a session using the `startSession()` API, RudderStack will disable automatic session tracking only till the app is closed.\n\n#### What happens if I manually trigger a new session during an active session?\n\nRudderStack will end the active session and generate a new session.\n\n## JavaScript SDK\n\n#### What happens if I set `timeout` to 0 or less than 10 ms?\n\nIf you set the session’s `timeout` to 0, RudderStack disables automatic session tracking. This is because upon setting the `timeout` to 0, RudderStack creates a new session for each event. As such, enabling automatic session tracking serves no purpose.\n\nIf your session `timeout` is less than 10 ms, RudderStack gives a caution but proceeds with the session tracking.\n\nRudderStack persists the following session tracking-related information in local storage/cookie in a new field called `rl_session`.\n\n| Parameter | Data type | Description |\n| --- | --- | --- |\n| `sessionId` | String | Uniquely identifies a session. |\n| Session expiration time | Number | Time when the session expires. RudderStack calculates it as the last event’s `timestamp` + `timeout`. |\n| Manual session tracking status | Boolean | \\-  |\n| Automatic session tracking status | Boolean | \\-  |\n| Session started | Boolean | A flag that identifies the first event of the session. |\n\n#### What happens I close a website tab and reopen it after some time?\n\nIf the time between closing the tab and reopening it is less than the session timeout (default is 30 minutes), then RudderStack continues the same session. Otherwise, it starts a new session.\n\n#### Does the existing session end if an `identify` call is made with a different `userId`?\n\nIf you identify a user with a new `userId` in an existing session, RudderStack triggers a `reset()` call. This ends the existing session and generates a new one.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This is applicable for both automatic and manual session tracking.\n\n## Mobile SDKs\n\n#### What is the scope of persistence in case of automatic session tracking?\n\nWhen an application is closed completely and launched from scratch, RudderStack checks if the inactivity timeout of the previous automatically tracked session has elapsed. If yes, RudderStack creates a new session, otherwise it continues the previous session.\n\n#### What is the scope of persistence in case of manual session tracking?\n\nThe scope of manual session tracking depends on whether the automatic session tracking feature is enabled.\n\n*   If automatic session tracking is **enabled**: On the next app launch (from scratch), RudderStack clears the manual session even if [`endSession()`](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/manual-session-tracking/) is not called and generates a new **automatic** session.\n*   If automatic session tracking is **disabled**: On the next app launch, the manual session will still be active and cleared only when the user ends the session using `endSession()`.\n\n#### Where does RudderStack store the `sessionId`, last event time, and automatic session tracking status?\n\nRudderStack stores the `sessionId`, the last event timestamp (used to determine [session expiration](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/#session-expiration-in-mobile-sdks)), and the status of automatic session tracking in the following locations:\n\n| Platform | Class |\n| --- | --- |\n| Android | [`SharedPreferences`](https://developer.android.com/reference/android/content/SharedPreferences) |\n| iOS | [`UserDefaults`](https://developer.apple.com/documentation/foundation/userdefaults) |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Session Tracking FAQ | RudderStack Docs",
  "description": "Answers to the generally asked questions related to RudderStack's session tracking feature.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/reverse-etl/",
  "markdown": "# Reverse ETL Sources | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Reverse ETL Sources | RudderStack Docs",
  "description": "Enrich your data stack with data from your Reverse ETL sources.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/",
  "markdown": "# Android SDK | RudderStack Docs\n\nUse RudderStack’s Android SDK using Android Studio to send events from your Android device to various destinations.\n\n* * *\n\n*     27 minute read  \n    \n\nWith RudderStack’s Android SDK, you can track events from your Android applications and send them to your specified destinations.\n\nSee the [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-android) for more information on the SDK and its architecture.\n\n[![Github Badge](https://img.shields.io/maven-central/v/com.rudderstack.android.sdk/core?style=flat)](https://search.maven.org/search?q=g:%22com.rudderstack.android.sdk%22%20AND%20a:%22core%22)\n\n## SDK setup requirements\n\nTo set up the RudderStack Android SDK, the following prerequisites must be met:\n\n*   You will need to install [Android Studio](https://developer.android.com/studio) on your system.\n*   Also, you will need to set up a [RudderStack account](https://app.rudderstack.com/signup).\n*   Once signed up, [set up an Android source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the dashboard. You should be able to see a **Write Key** for this source, as shown below:\n\n[![Android source write key](https://www.rudderstack.com/docs/images/event-stream-sources/android-write-key.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/android-write-key.webp)\n\n*   You will also need a data plane URL. Refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has an SDK installation snippet containing both the write key and the data plane URL. You can use it to integrate the Android SDK into your project.\n\n## Installing the SDK\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> As Bintray has sunset from 1st May, we’re moving the Android SDK to Maven Central. All the versions from 1.0.10 are available in Maven Central only.\n\nWe distribute the Android SDK through [Maven Central](https://search.maven.org/). The recommended and easiest way to add the SDK to your project is through the Android Gradle build system.\n\nFollow these steps:\n\n*   Open your project level `build.gradle` file, and add the following lines of code:\n\n```\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n}\nallprojects {\n    repositories {\n        mavenCentral()\n    }\n}\n```\n\n*   Then open your `app/build.gradle` and add the dependency under `dependencies` as shown below:\n\n```\nimplementation 'com.rudderstack.android.sdk:core:1.7+'\n// add the following line if you don't have Gson included already\nimplementation 'com.google.code.gson:gson:2+'\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> It is recommended to use the Core Android SDK without any `device-mode` destination SDKs as you will have a better view on the captured data from the SDK.\n\n## Setting Android permissions\n\nAdd this line to your `AndroidManifest.xml` file of your application for `internet` permission:\n\n```\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n```\n\nWe also declare `android.permission.BLUETOOTH` and `android.permission.ACCESS_WIFI_STATE` as optional by mentioning `required=\"false\"` . If we get these permissions, we’ll capture the Bluetooth status and the WiFi status of the device and pass it under `context.network`.\n\n### Android ProGuard rules\n\nAdd the following lines to your Android ProGuard rules if you are using Proguard full mode to optimize your app:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Add the below rules if you are using the Android SDK older than v1.20.0.\n> \n> Note that the rules are bundled in the SDK itself from v1.20.0 onwards.\n\n```\n// Reporter Module\n\n-keep class com.rudderstack.android.ruddermetricsreporterandroid.models.LabelEntity { *; }\n-keep class com.rudderstack.android.ruddermetricsreporterandroid.models.MetricEntity { *; }\n-keep class com.rudderstack.android.ruddermetricsreporterandroid.models.ErrorEntity { *; }\n\n// Required for the usage off TypeToken class in Utils.converToMap, Utils.convertToList\n\n-keep class com.google.gson.reflect.TypeToken { *; }\n-keep class * extends com.google.gson.reflect.TypeToken\n\n// Required for the serialization of SourceConfig once it is downloaded.\n\n-keep class com.google.gson.internal.LinkedTreeMap { *; }\n-keep class * implements java.io.Serializable { *; }\n-keep class com.rudderstack.rudderjsonadapter.RudderTypeAdapter { *; }\n-keep class * extends com.rudderstack.rudderjsonadapter.RudderTypeAdapter\n\n// Required to ensure the DefaultPersistenceProviderFactory is not removed by Proguard\n// and works as expected even when the customer is not using encryption feature.\n\n-dontwarn net.sqlcipher.Cursor\n-dontwarn net.sqlcipher.database.SQLiteDatabase$CursorFactory\n-dontwarn net.sqlcipher.database.SQLiteDatabase\n-dontwarn net.sqlcipher.database.SQLiteOpenHelper\n-keep class com.rudderstack.android.sdk.core.persistence.DefaultPersistenceProviderFactory { *; }\n\n// Required for the usage of annotations across reporter and web modules\n\n-dontwarn com.fasterxml.jackson.annotation.JsonIgnore\n-dontwarn com.squareup.moshi.Json\n-dontwarn com.fasterxml.jackson.annotation.JsonProperty\n\n// Required for Device Mode Transformations\n\n-keep class com.rudderstack.android.sdk.core.TransformationResponse { *; }\n-keep class com.rudderstack.android.sdk.core.TransformationResponseDeserializer { *; }\n-keep class com.rudderstack.android.sdk.core.TransformationRequest { *; }\n```\n\n## Initializing the RudderStack client\n\nImport the library on the classes you desire to use `RudderClient` library\n\n```\nimport com.rudderstack.android.sdk.core.*;\n```\n\nAdd the following code to the `onCreate` method in your `Application` class:\n\n```\nval rudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withTrackLifecycleEvents(true)\n            .withRecordScreenViews(true)\n            .build()\n    )\n```\n\n```\nRudderClient rudderClient = RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        new RudderConfig.Builder()\n                .withDataPlaneUrl(DATA_PLANE_URL)\n                .withTrackLifecycleEvents(true)\n                .withRecordScreenViews(true)\n                .build()\n);\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> *   See [Configuring your RudderStack client](#configuring-your-rudderstack-client) for more information on the methods supported by the `RudderConfig` object.\n> *   See [Adding an application class to your Android application](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/adding-an-application-class/) for more information.\n\n#### OneTrust consent\n\nThe Android SDK integrates with the OneTrust consent manager and lets you specify the user’s consent during initialization. For more information, refer to the [OneTrust Consent Management for Android](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/android/) guide.\n\n## Configuring your RudderStack client\n\nYou can configure your client based on the following methods using `RudderConfig.Builder`:\n\nMethod\n\nType\n\nDescription\n\n`withLogLevel`\n\nInteger\n\nControls the log details you want to capture using the SDK.\n\n**Default value**: `RudderLogger.RudderLogLevel.NONE`\n\n`withDataPlaneUrl`\n\nString\n\nYour data plane URL.\n\n**Default value**: `https://hosted.rudderlabs.com`\n\n`withDbThresholdCount`\n\nInteger\n\nNumber of events to be saved in the `SQLite` database. Once the limit is reached, older events are deleted from the database.\n\n**Default value**: `10000`\n\n`withSleepcount`\n\nInteger\n\nMinimum waiting time to flush the events to the RudderStack server. The minimum value can be set to `1 second`.\n\n**Default value**: `10 seconds`\n\n`withConfigRefreshInterval`\n\nInteger\n\nTime after which the SDK fetches the config from the dashboard.\n\n**Default value**: `2 hours`\n\n`withTrackLifecycleEvents`\n\nBoolean\n\nDetermines if the SDK should automatically capture application lifecycle events using the activity lifecycle callbacks.\n\n**Default value**: `true`\n\n`withNewLifecycleEvents`\n\nBoolean\n\nDetermines if the SDK should automatically capture application lifecycle events using AndroidX’s `LifecycleObserver` class. See [Tracking events with AndroidX `LifecycleObserver`](#tracking-events-with-androidx-lifecycleobserver) for more information.\n\n**Default value**: `false`\n\n`withTrackDeepLinks`\n\nBoolean\n\nDetermines if the SDK should send the deep link-specific details as a `Deep Link Opened` event. See [Tracking deep links](#tracking-deep-links) for more information.\n\n**Default value**: `true`\n\n`withAutoSessionTracking`\n\nBoolean\n\nDetermines if the SDK should automatically [track the user sessions](#tracking-user-sessions).\n\n**Default value**: `true`\n\n`withSessionTimeoutMillis`\n\nInteger\n\nMaximum inactivity period before the session expires.\n\n**Default value**: `300000 ms` (5 minutes)\n\n`withRecordScreenViews`\n\nBoolean\n\nDetermines if the SDK should automatically capture the screen view events.\n\n**Default value**: `false`\n\n`withGzip`\n\nBoolean\n\nGzips the event requests.\n\n**Default value**: `true`\n\n`withCollectDeviceId`\n\nBoolean\n\nDetermines if the SDK should automatically collect the device ID. If set to `false`, it does not send `context.device.id` as a part of the event payload. See [Disabling device ID collection](#withcollectdeviceid) for more information.\n\n**Default value**: `true`\n\n`withAutoCollectAdvertId`\n\nBoolean\n\nDetermines if the SDK should automatically collect the advertisement ID.\n\n**Default value**: `false`\n\n`withDbEncryption`\n\n[`DbEncryption`](#dbencryption)\n\nSpecify whether to encrypt/decrypt the database using your desired key.\n\n`withFlushPeriodically`\n\nInteger\n\n[Periodically flushes events](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/flushing-events-periodically/) from the Android SDK to RudderStack irrespective of whether your app is open.\n\n**Default value**: `15 minutes`\n\n`withCustomFactories`\n\n`List<RudderIntegration.Factory>`\n\nUsed for the customized extension of `RudderIntegration.Factory` while [adding your device mode destinations](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/#developing-a-device-mode-destination).\n\n`withFactory`\n\n`<RudderIntegration.Factory>`\n\nAdds the available device mode destination. Refer to the destination-specific documentation for the usage details. For example, [Firebase](https://www.rudderstack.com/docs/destinations/streaming-destinations/firebase/#adding-device-mode-integration).\n\n`withFactories`\n\n`List<RudderIntegration.Factory>`\n\nAdds a list of factories for the available device mode destinations.\n\n`withFlushQueueSize`\n\nInteger\n\nNumber of events in a batch request to the RudderStack server.\n\n**Default value**: `30`\n\n`withControlPlaneUrl`\n\nString\n\nAdds `/sourceConfig` along with this URL to fetch the source configuration. Change this parameter **only if** you are [self-hosting the control plane](#self-hosted-control-plane).\n\n**Default value**: `https://api.rudderlabs.com`\n\nA sample code snippet to configure your client using `RudderConfig.Builder` is shown below:\n\n```\nrudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withSleepCount(1)\n            .withLogLevel(RudderLogger.RudderLogLevel.VERBOSE)\n            .build()\n    )\n```\n\n#### DbEncryption\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is available in the Android SDK v1.18.0. and later.\n\nThe Android SDK uses a SQLite database to store events before sending them to the RudderStack data plane.\n\nYou can use the `DbEncryption` object to encrypt/decrypt a new or existing database with your specified key.\n\n##### Add dependencies\n\nSince the Android SDK depends on the SQLite Cipher library, you need to add [`sqlcipher-android`](https://github.com/sqlcipher/sqlcipher-android) as a dependency:\n\n1.  Add the RudderStack Android SDK as a dependency.\n2.  Go to the module level `build.gradle` file an add the following under the `dependencies` section:\n\n```\ndependencies {\n   ...\n    //sql-cipher\n    implementation \"net.zetetic:sqlcipher-android:4.5.6@aar\"\n    implementation \"androidx.sqlite:sqlite:2.3.1\"\n    ...\n}\n```\n\n##### Set the encryption object\n\nTo encrypt/decrypt databases, create and set the `DbEncrpytion` object while initializing the Android SDK as follows:\n\n```\nrudderClient = RudderClient.getInstance(\n    this,\n    WRITE_KEY,RudderConfig.Builder()\n    .withDataPlaneUrl(DATA_PLANE_URL)\n    .withControlPlaneUrl(BuildConfig.CONTROL_PLANE_URL)\n    .withLogLevel(RudderLogger.RudderLogLevel.ERROR)\n    .withFactory(AmplitudeIntegrationFactory.FACTORY)\n\t  ...\n    .withDbEncryption(RudderConfig.DBEncryption(true, \"<your-encryption-key>\")) // Configure encryption key\n    .build()\n)\n```\n\nThe `withDbEncryption` method accepts a `DbEncryption` object with the following parameters:\n\nParameter\n\nData type\n\nDescription\n\n`true`/`false`\n\nBoolean\n\nSpecifies whether to encrypt an unencrypted database or decrypt an encrypted database.\n\n`key`\n\nString\n\nKey used to encrypt/decrypt the database.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> After you encrypt the database:\n> \n> *   If **no key** is provided, then the SDK deletes the current database with unsent events and creates a new unencrypted database instead.\n> *   If a **wrong key** is provided, then the SDK deletes the current database with unsent events and creates a new encrypted database with the given key.\n> \n> The SDK does not store the key, so it cannot determine whether the entered key is right or wrong. Hence, if the key cannot decrypt the database, the SDK assumes it to be incorrect and deletes the old events and database.\n\n#### Self-hosted control plane\n\nIf you are using a device mode destination like Adjust, Firebase, etc., the Android SDK needs to fetch the required configuration from the Control Plane. If you are using the [Control plane lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) utility to host your own Control Plane, then follow the steps in [this section](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/#using-sdk-sources-set-up-in-self-hosted-control-plane) and specify `controlPlaneUrl` in your`RudderConfig.Builder` that points to your hosted source configuration file.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You shouldn’t pass the `controlPlaneUrl` parameter during SDK initialization if you are using the dashboard from [RudderStack Cloud Dashboard](https://app.rudderstack.com/). This parameter is supported only if you are using our open-source [Control plane lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) to self-host your Control Plane.\n\n## Gzipping requests\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The Gzip feature is enabled by default in the Android SDK.\n\nThe Android SDK automatically gzip-compresses event requests. To disable this feature, set the `Gzip` parameter to `false` while initializing the SDK:\n\n```\nRudderClient.getInstance(\n    this,\n    WRITE_KEY,\n    RudderConfig.Builder()\n        .withDataPlaneUrl(DATA_PLANE_URL)\n        .withGzip(false)\n        .build()\n)\n```\n\n```\nRudderClient rudderClient = RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        new RudderConfig.Builder()\n                .withDataPlaneUrl(DATA_PLANE_URL)\n                .withTrackLifecycleEvents(true)\n                .withGzip(false)\n                .withRecordScreenViews(true)\n                .build()\n);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Gzip requires [rudder-server](https://github.com/rudderlabs/rudder-server) **v1.4 or higher**. Otherwise, your events might fail.\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc. Once you identify the user, the SDK persists all the user information and passes it on to the subsequent `track` or `screen` calls. To reset the user identification, you can use the [`reset`](#reset) method.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   For older SDK versions (< v1.18.0), the Android SDK captures the device ID and uses that as `anonymousId` for identifying the user. This helps the SDK to track the users across the application installation.\n> *   On Android devices, the `deviceId` is assigned during the first boot. It remains consistent across the applications and installs and changes only after factory reset.\n> *   Starting from v1.18.0, the SDK uses a UUID as `anonymousId` instead of the device ID. If you are upgrading from a previous SDK version, see [How RudderStack sets anonymous ID](#how-sdk-sets-anonymous-id) for more information on how the SDK collects and sets `anonymousId`.\n\nAn sample `identify` event is as shown:\n\n```\nval traits = RudderTraits()\ntraits.putBirthday(Date())\ntraits.putEmail(\"abc@123.com\")\ntraits.putFirstName(\"First\")\ntraits.putLastName(\"Last\")\ntraits.putGender(\"m\")\ntraits.putPhone(\"5555555555\")\nval address = RudderTraits.Address()\naddress.putCity(\"City\")\naddress.putCountry(\"USA\")\ntraits.putAddress(address)\ntraits.put(\"boolean\", Boolean.TRUE)\ntraits.put(\"integer\", 50)\ntraits.put(\"float\", 120.4f)\ntraits.put(\"long\", 1234L)\ntraits.put(\"string\", \"hello\")\ntraits.put(\"date\", Date(System.currentTimeMillis()))\nrudderClient.identify(\"test_user_id\", traits, null)\n```\n\n```\nRudderTraits traits = new RudderTraits();\ntraits.putBirthday(new Date());\ntraits.putEmail(\"abc@123.com\");\ntraits.putFirstName(\"First\");\ntraits.putLastName(\"Last\");\ntraits.putGender(\"m\");\ntraits.putPhone(\"5555555555\");\nRudderTraits.Address address = new RudderTraits.Address();\naddress.putCity(\"City\");\naddress.putCountry(\"USA\");\ntraits.putAddress(address);\ntraits.put(\"boolean\", Boolean.TRUE);\ntraits.put(\"integer\", 50);\ntraits.put(\"float\", 120.4f);\ntraits.put(\"long\", 1234L);\ntraits.put(\"string\", \"hello\");\ntraits.put(\"date\", new Date(System.currentTimeMillis()));\nrudderClient.identify(\"test_user_id\", traits, null);\n```\n\nFollow the method signatures below:\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`traits`\n\n`RudderTraits`\n\nYes\n\nTraits information for the user\n\n`options`\n\n`RudderOption`\n\nNo\n\nExtra options for the `identify` event\n\n**OR**\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`userId`\n\n`String`\n\nYes\n\nDeveloper identity for the user\n\n`traits`\n\n`RudderTraits`\n\nNo\n\nTraits information for user\n\n`option`\n\n`RudderOption`\n\nNo\n\nExtra options for the `identify` event\n\n### Overriding anonymous ID\n\nYou can use the following method to use your own `anonymousId` with the SDK.\n\nAn example of setting the `anonymousId` is shown below:\n\n```\nRudderClient.putAnonymousId(<anonymousId>);\n```\n\nTo retrieve the `anonymousId`, you can use the `anonymousId` instance property:\n\n```\nRudderClient.getInstance()?.anonymousId\n```\n\n### Disabling device ID collection\n\nStarting from v1.18.0, you can disable the collection of device ID by setting the [`withCollectDeviceId`](#configuring-your-rudderstack-client) API of the `RudderConfigBuilder` class to `false`.\n\nYou will observe the following changes when this API is set to false:\n\n*   The SDK does not send `context.device.id` as a part of the event payload.\n*   The SDK replaces the existing `anonymousId` (if it is equal to the device ID) with a UUID.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> These changes are introduced to make the SDK more compliant with all policies around the device ID collection.\n\n```\nRudderClient rudderClient = RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        new RudderConfig.Builder()\n                .withDataPlaneUrl(DATA_PLANE_URL)\n                .withCollectDeviceId(false)\n                .build()\n);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you are upgrading to the latest SDK from a previous version (< v1.18.0) **and** disabling device ID collection using `withCollectDeviceId(false)`:\n> \n> *   Make sure your user transformations are not dependent on `context.device.id` as the SDK will not send this value in the event payload.\n> *   The `context.device.id` column in your warehouse destination will not be populated henceforth (it will still contain data populated by the previous SDK version).\n\n### How SDK sets anonymous ID\n\n#### **For direct/fresh SDK installation**\n\nFor a fresh installation of the Android SDK v1.18.0 and later, RudderStack uses UUID as `anonymousId` regardless of whether [`withCollectDeviceId`](#withcollectdeviceid) is set to `true` or `false`.\n\n#### **For updating SDK from older version**\n\nIf you are updating your Android SDK from an older version (< v1.18.0), then:\n\n*   RudderStack will continue to use the device ID as `anonymousId` - it will not break the existing SDK behavior **until** you set `withCollectDeviceId` to `false`.\n*   If you set `withCollectDeviceId` to `false`, the SDK checks if the existing `anonymousId` is a device ID. If yes, it sets a new UUID as the `anonymousId`.\n*   If you have used the [`putAnonymousId`](#overriding-anonymous-id) method to set your own `anonymousId`, then the SDK will **not** modify it even if you set `withCollectDeviceId` to `false`.\n\n### Setting a custom ID\n\nYou can pass a custom ID along with the standard `userId` in your `identify` calls. RudderStack adds this value under `context.externalId`.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack supports passing `externalId` only in the `identify` events. You must not pass this ID in other API calls like `track`, `page`, etc.\n\nThe following snippet shows how to add an `externalId` to your `identify` event:\n\n```\nrudderClient.identify(\n    \"1hKOmRA4GRlm\",\n    RudderTraits().putFirstName(\"Alex\"),\n    RudderOption()\n        .putExternalId(\"brazeExternalId\", \"some_external_id\")\n)\n```\n\n## Track\n\nYou can record the users’ activity through the `track` method. Every user action is called an **event**.\n\nA sample `track` event is as shown below:\n\n```\nrudderClient.track(\n    \"Product Added\",\n    RudderProperty().putValue(\"product_id\", \"product_001\")\n)\n```\n\n```\nrudderClient.track(\n        \"Product Added\",\n        new RudderProperty()\n                .putValue(\"product_id\", \"product_001\")\n);\n```\n\nFollow the method signatures below:\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`name`\n\n`String`\n\nYes\n\nName of the event you want to track\n\n`property`\n\n`RudderProperty` or `Map<String, Object>`\n\nNo\n\nExtra data properties you want to send along with the event\n\n`options`\n\n`RudderOption`\n\nNo\n\nExtra event options\n\n## Screen\n\nYou can use the `screen` call to record whenever the user sees a screen on the mobile device. You can also send some extra properties along with this event.\n\nAn example of the `screen` event is as shown:\n\n```\nrudderClient.screen(\n    \"MainActivity\",\n    \"HomeScreen\",\n    RudderProperty().putValue(\"foo\", \"bar\"),\n    null\n)\n```\n\n```\nrudderClient.screen(\n    \"MainActivity\",\n    \"HomeScreen\",\n    new RudderProperty().putValue(\"foo\", \"bar\"),\n    null\n);\n```\n\nFollow the method signatures below:\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`screenName`\n\n`String`\n\nYes\n\nName of the screen viewed.\n\n`category`\n\n`String`\n\nNo\n\nCategory of the screen visited, such as `HomeScreen`, `LoginScreen`. Useful for tracking multiple `Fragment` views under a single `Activity`.\n\n`property`\n\n`RudderProperty`\n\nNo\n\nExtra property object that you want to pass along with the `screen` call.\n\n`option`\n\n`RudderOption`\n\nNo\n\nExtra options to be passed along with `screen` event.\n\n## Group\n\nThe `group` call associates a user to a specific organization. A sample `group` call for the API is below:\n\n```\nrudderClient.group(\n    \"sample_group_id\",\n    RudderTraits().putAge(\"24\")\n        .putName(\"Test Group Name\")\n        .putPhone(\"1234567891\")\n)\n```\n\n```\n    rudderClient.group(\n        \"sample_group_id\",\n        new RudderTraits().putAge(\"24\")\n            .putName(\"Test Group Name\")\n            .putPhone(\"1234567891\")\n    );\n```\n\nFollow the method signatures below:\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`groupId`\n\n`String`\n\nYes\n\nAn ID of the organization with which you want to associate your user\n\n`traits`\n\n`RudderTraits`\n\nNo\n\nAny other property of the organization you want to pass along with the call\n\n`options`\n\n`RudderOption`\n\nNo\n\nEvent level options\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack doesn’t persist the traits for the group across the sessions.\n\n## Alias\n\nThe `alias` call associates the user with a new identification. A sample `alias` call for the API is below:\n\n```\nrudderClient.alias(\"test_new_id\")\n```\n\n```\nrudderClient.alias(\"test_new_id\");\n```\n\nAlternatively, you can use the following method signature\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`newId`\n\n`String`\n\nYes\n\nThe new `userId` you want to assign to the user\n\n`options`\n\n`RudderOption`\n\nNo\n\nEvent level option\n\nRudderStack replaces the old `userId` with the `newUserId` and we persist that identification across the sessions.\n\n## Reset\n\nYou can use the `reset` method to clear the persisted user traits. It also resets the `anonymousId` with a new UUID if you call it with `true` (for SDK v1.18.0 and later). To clear only user traits, call `reset` with `false`.\n\nIn [session tracking](https://rudderstack.com/docs/sources/event-streams/sdks/session-tracking/#:~:text=tracking%20is%20enabled%3A-,sessionId,-%28Number%29%3A%20The%20session), calling the `reset` method clears the current `sessionId` and generates a new one.\n\nA sample `reset` call is shown:\n\n```\nrudderClient.reset(false)\n```\n\n```\nrudderClient.reset(false);\n```\n\n## Consent-driven user tracking (GDPR support)\n\nRudderStack gives the users the ability to opt out of tracking any user activity until the user gives their consent. You can do this using the SDK’s `optOut` API.\n\nThe `optOut` API takes `true` or `false` as a Boolean value to enable or disable tracking user activities. This flag persists across device reboots.\n\nThe following snippet highlights the use of the `optOut` API to disable user tracking:\n\n```\nrudderClient.optOut(true)\n```\n\n```\nrudderClient.optOut(true);\n```\n\nthe user grants their consent, you can enable user tracking once again by using the `optOut` API with `false` as a parameter sent to it:\n\n```\nrudderClient.optOut(false)\n```\n\n```\nrudderClient.optOut(false);\n```\n\nThe `optOut` API is available in the Android SDK from v1.0.21 onwards.\n\n## Setting the Android device token\n\nYou can set your `device-token` for push notification to be sent to the destinations that support Push Notification. We set the `token` under `context.device.token`.\n\nFollow the code snippets below:\n\n```\nRudderClient.putDeviceToken(\"your_device_token\")\n```\n\n```\nRudderClient.putDeviceToken(\"your_device_token\");\n```\n\n## Setting custom context\n\nYou can set custom contextual information in Android SDK by using either of the following ways:\n\n### During SDK initialization\n\nSet custom context during SDK initialization as follows:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is available in the Android SDK v1.22.0 and later.\n\n```\nval rudderOption = RudderOption().putCustomContext(\n        \"tier\", mutableMapOf(\n            \"category\" to \"premium\",\n            \"type\" to \"gold\"\n        ) as Map<String, Any>\n)\n\nval rudderClient =\n    RudderClient.getInstance(\n                this,\n                WRITE_KEY,\n                RudderConfig.Builder()\n                    .withDataPlaneUrl(DATA_PLANE_URL)\n                    .build(),\n                rudderOption\n            )\n```\n\n```\nMap customContext = new HashMap<String, Object>();\ncustomContext.put(\"category\", \"premium\");\ncustomContext.put(\"type\", \"gold\");\nRudderOption rudderOption = new RudderOption();\nrudderOption.putCustomContext(\"tier\", customContext);\n\nRudderClient rudderClient = RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        new RudderConfig.Builder()\n                .withDataPlaneUrl(DATA_PLANE_URL)\n                .build(),\n        rudderOption\n);\n```\n\nNote that:\n\n*   The Android SDK persists the contextual information set during SDK initialization for subsequent events but **not** across sessions.\n*   Calling the `reset` method clears all the contextual information set during SDK initialization.\n*   The contextual information passed at the event level gets precedence over the context set during SDK initialization.\n\n### Using `putCustomContext` method\n\nUse the `putCustomContext` method on an instance of `RudderOption` to set custom contextual information as a nested object within `context` while sending the events.\n\nAn example of setting custom context using an instance of `RudderOption` and passing it in a `track` call:\n\n```\nRudderProperty properties = new RudderProperty();\nproperties.put(\"paymentMethod\", \"credit card\");\nMap customContext = new HashMap<String, Object>();\ncustomContext.put(\"category\", \"premium\");\ncustomContext.put(\"type\", \"gold\");\nRudderOption rudderOption = new RudderOption();\nrudderOption.putCustomContext(\"tier\", customContext);\nRudderClient.with(this).track(\n        \"Subscription Purchased\",\n        properties,\n        rudderOption\n);\n```\n\n```\nval properties = RudderProperty()\nproperties.put(\"paymentMethod\", \"credit card\")\nval rudderOption = RudderOption().putCustomContext(\n        \"tier\", mutableMapOf(\n            \"category\" to \"premium\",\n            \"type\" to \"gold\"\n        ) as Map<String, Any>\n)\nrudderClient.track(\n        \"Subscription Purchased\",\n        properties,\n        rudderOption\n)\n```\n\nThe `context` object in the created event payload looks like below:\n\n```\n{\n  \"context\": {\n    \"tier\": {\n      \"category\": \"premium\",\n      \"type\": \"gold\",\n    }\n  }\n}\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The SDK does not persist the contextual information set using `putCustomContext` for subsequent events. Hence, you must use this method every time you want to set custom context for an event.\n\n## Setting the advertisement ID\n\nBy default, RudderStack collects the advertisement ID **only** if the following three conditions are met:\n\n*   `withAutoCollectAdvertId` is set to `true` during the [SDK initialization](#initializing-the-rudderstack-client):\n\n```\nval rudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withTrackLifecycleEvents(true)\n            .withRecordScreenViews(true)\n            .withAutoCollectAdvertId(true)\n            .build()\n    )\n```\n\n*   `com.google.android.gms.ads.identifier.AdvertisingIdClient` is present in your application’s class path.\n*   `limitAdTracking`is not enabled for your device.\n\nUse the `putAdvertisingId` method to set the advertisement ID:\n\n```\nRudderClient.putAdvertisingId(\"sampleAdvertId\")\n```\n\n```\nRudderClient.putAdvertisingId(\"advertId\");\n```\n\nThe `putAdvertisingId` method is static and can be called before or after the SDK initialization.\n\nIf `withAutoCollectAdvertId` is set to `true` and you set the advertisement ID value using `putAdvertisingId` method, RudderStack uses the value provided by the user instead of collecting it automatically.\n\nOnce you reset the advertisement ID using the `clearAdvertisingId` method, RudderStack starts auto-collecting the advertisement ID again.\n\nTo clear the advertisement ID, use the `clearAdvertisingId` method:\n\n```\nrudderClient.clearAdvertisingId()\n``\n```\n\n```\nRudderClient.with(this).clearAdvertisingId();\n```\n\nThe `clearAdvertisingId` method is not static and hence can be called only after the SDK initialization.\n\nRudderStack sets `gaid` under `context.device.advertisementId`.\n\n## Filtering events\n\nWhen sending events to a destination via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode), you can explicitly specify which events should be discarded or allowed to flow through - by allowlisting or denylisting them.\n\n## Enable/disable events for specific destinations\n\nThe RudderStack Android SDK allows you to enable or disable event flow to a specific destination or all destinations to which the source is connected. You can specify these destinations by creating a `RudderOption` object as shown:\n\n```\nval option = RudderOption()\n//default value for `All` is true\noption.putIntegration(\"All\", false)\n// specifying destination by its display name\noption.putIntegration(\"Google Analytics\", true)\noption.putIntegration(<DESTINATION DISPLAY NAME>, <boolean>)\n// specifying destination by its Factory object\noption.putIntegration(AppcenterIntegrationFactory.FACTORY,true);\noption.putIntegration(<RudderIntegration.FACTORY>,<boolean>);\n```\n\n```\nRudderOption option = new RudderOption();\n// default value for `All` is true\noption.putIntegration(\"All\", false);\n// specifying destination by its display name\noption.putIntegration(\"Google Analytics\", true);\noption.putIntegration(<DESTINATION DISPLAY NAME>, <boolean>);\n// specifying destination by its Factory object\noption.putIntegration(AppcenterIntegrationFactory.FACTORY,true);\noption.putIntegration(<RudderIntegration.FACTORY>,<boolean>);\n```\n\nThe keyword `All` in the above snippet represents all destinations the source is connected to. Its value is set to `true` by default.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Make sure the `destination display name` that you pass while specifying the destinations should exactly match the destination name as shown [here](https://app.rudderstack.com/directory).\n\nYou can pass the destinations specified in the above snippet to the SDK in two ways:\n\n#### 1\\. While initializing the SDK\n\nThis is helpful when you want to enable/disable sending the events across all event calls made using the SDK to the specified destination(s).\n\n```\nvar rudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .build(),\n        // passing the rudderoption object containing\n        // the list of destination(s) you specified\n        option\n    )\n```\n\n```\nRudderClient client = RudderClient.getInstance(\n                this,\n                <write_key>,\n                new RudderConfig.Builder()\n                        .withEndPointUri(<end_point_url>)\n                        .build(),\n                option // passing the rudderoption object containing the list of destination(s) you specified\n        );\n```\n\n#### 2\\. While sending events\n\nThis approach is helpful when you want to enable/disable sending only a particular event to the specified destination(s) or if you want to override the specified destinations passed with the SDK initialization for a particular event.\n\n```\nrudderClient.track(\n    \"Product Added\",\n    RudderProperty().putValue(\"product_id\", \"product_001\"),\n    // passing the rudderoption object\n    // containing the list of destination you specified\n    option\n)\n```\n\n```\nrudderClient.track(\n                \"Product Added\",\n                new RudderProperty()\n                        .putValue(\"product_id\", \"product_001\"),\n                option // passing the rudderoption object containing the list of destination(s) you specified\n        );\n```\n\nIf you specify the destinations both while initializing the SDK as well as while making an event call, then the destinations specified at the event level only will be considered.\n\n## Tracking user sessions\n\nBy default, the Android SDK automatically tracks the user sessions. This means that RudderStack automatically determines the start and end of a user session depending on the inactivity time configured in the SDK (default time is 5 minutes).\n\n```\nval rudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            // Set to false to disable automatic session tracking\n            .withAutoSessionTracking(true)\n            .withSessionTimeoutMillis(5 * 60 * 1000)\n            .build()\n    )\n```\n\n```\nRudderClient rudderClient = RudderClient.getInstance(\n    this,\n    WRITE_KEY,\n    new RudderConfig.Builder()\n        .withDataPlaneUrl(DATA_PLANE_URL)\n        .withAutoSessionTracking(true) // Set to false to disable automatic session tracking\n        .withSessionTimeoutMillis(5*60*1000)\n        .build()\n);\n```\n\nTo disable automatic session tracking, set `withAutoSessionTracking` to `false`.\n\nFor more information on the user sessions and how to track them using the Android SDK, see [Session Tracking](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/).\n\n### Getting the session ID\n\nTo retrieve a session’s `sessionId`, use the `getSessionId()` method.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> `getsessionId()` is available in the Android SDK from v1.19.0 onwards.\n\n```\nRudderClient.getInstance()?.sessionId\n```\n\n## Tracking lifecycle events\n\nBy default, RudderStack tracks the following **optional** [application lifecycle events](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/):\n\n*   [Application Installed](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-installed)\n*   [Application Updated](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-updated)\n*   [Application Opened](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-opened)\n*   [Application Backgrounded](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-backgrounded)\n\nTo disable tracking these events, set the [`withTrackLifecycleEvents`](#configuring-your-rudderstack-client) method to `false` while initializing the SDK. However, it is highly recommended to keep them enabled.\n\n#### Tracking events with AndroidX `LifecycleObserver`\n\nStarting from version 1.14.0, the Android SDK supports a newer and more efficient way of tracking your application lifecycle events using the AndroidX [`LifecycleObserver`](https://developer.android.com/reference/android/arch/lifecycle/LifecycleObserver) class, as opposed to the standard method of tracking lifecycle events (using the [`ActivityLifecycleCallbacks`](https://developer.android.com/reference/android/app/Application.ActivityLifecycleCallbacks)).\n\nTo track lifecycle events with this method, add the following dependencies to your app:\n\n```\nimplementation 'androidx.lifecycle:lifecycle-process:2.6.1'\nimplementation 'androidx.lifecycle:lifecycle-common:2.6.1'\n```\n\nNote that this method is **disabled** by default. Set `withNewLifecycleEvents` to `true` while initializing the Android SDK to use this method:\n\n```\nval rudderClient = RudderClient.getInstance(\n    this,\n    WRITE_KEY,\n    RudderConfig.Builder()\n        .withDataPlaneUrl(DATA_PLANE_URL)\n        .withNewLifecycleEvents(true)\n        .build()\n)\n```\n\n```\nRudderClient rudderClient = RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        new RudderConfig.Builder()\n                .withDataPlaneUrl(DATA_PLANE_URL)\n                .withNewLifecycleEvents(true)\n                .build()\n);\n```\n\nIf `withNewLifecycleEvents` is set to true but the required dependencies are missing in your app, the Android SDK will fall back to tracking lifecycle events using the default method `withTrackLifeCycleEvents` (if set to `true` while initializing the SDK).\n\nThe following table details the lifecycle event tracking matrix:\n\nNew way of tracking lifecycle events  \n(`withNewLifecycleEvents`)\n\nStandard way of tracking lifecycle events  \n(`withTrackLifecycleEvents`)\n\nPresence of AndroidX `LifecycleObserver` dependencies in app\n\nResultant way\n\nEnabled\n\nEnabled\n\nYes\n\nNew\n\nEnabled\n\nEnabled\n\nNo\n\nStandard\n\nEnabled\n\nDisabled\n\nNo\n\nLifecycle events are not tracked.\n\nEnabled\n\nDisabled\n\nYes\n\nNew\n\nDisabled\n\nEnabled\n\nNA\n\nStandard\n\nDisabled\n\nDisabled\n\nNA\n\nLifecycle events are not tracked.\n\n## Tracking deep links\n\nStarting from version 1.14.0, the Android SDK sends a `Deep Link Opened` event when you open any app from a [deep link](https://developer.android.com/training/app-links/deep-linking). It also sends all the deep link-related details as the event properties. In the previous versions, the SDK included these details as a part of the `Application Opened` event properties.\n\nThis feature is **turned on** by default. To turn it off, set `withTrackDeepLinks` to `false` while initializing the SDK - this causes the SDK to stop sending any additional `Deep Link Opened` events.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> After you set up the deep link in your Android app, you can trigger the deep linking as follows:\n> \n> ```\n> val url = \"https://example.com/_app\"\n> val intent = Intent(Intent.ACTION_VIEW)\n> intent.putExtra(Intent.EXTRA_REFERRER, Uri.parse(\"https://test.com/_app\"))\n> intent.data = Uri.parse(url)\n> startActivity(intent)\n> ```\n\nThe `Deep Link Opened` event schema is shown below:\n\nProperty name\n\nData type\n\nDescription\n\n`url`\n\nString\n\nRepresents a Uniform Resource Locator used to identify a location on the network and a mechanism for retrieving it. URLs are used to open web pages, access APIs, and deep link into specific parts of the app.\n\nFor example, `https://example.com/_app`.\n\n`referring_application`\n\nString\n\nUsed to indicate the originating page or app when opening a URL.\n\nFor example, `https://test.com/_app`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The Android SDK also adds the query parameters as the deep link event properties.\n\n## Debugging\n\nIf you run into any issues regarding the RudderStack Android SDK, you can turn on the `VERBOSE` or `DEBUG` logging to find out what the issue is. To turn on the logging, change your `RudderClient` initialization to the following:\n\n```\n// initialize Rudder SDK\nval rudderClient: RudderClient =\n    RudderClient.getInstance(\n        this,\n        YOUR_WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withLogLevel(RudderLogger.RudderLogLevel.DEBUG)\n            .build()\n    )\n```\n\n```\nRudderClient rudderClient = RudderClient.getInstance(\n    this,\n    YOUR_WRITE_KEY,\n    new RudderConfig.Builder()\n        .withDataPlaneUrl(DATA_PLANE_URL)\n        .withLogLevel(RudderLogger.RudderLogLevel.DEBUG)\n        .build()\n);\n```\n\n## Chromecast\n\n[Google Chromecast](https://store.google.com/in/product/chromecast?hl=en-GB) is a device that plugs into your TV or monitor with an HDMI port, and can be used to stream content from your phone or computer.\n\nRudderStack supports integrating the Android SDK with your Cast app. Follow [these instructions](https://developers.google.com/cast/docs/android_sender) to build your Android sender app. Then, add the Android SDK to it. Follow the [Google Cast developer guide](https://developers.google.com/cast/docs/developers) for more details.\n\n## Developing a device mode destination\n\nYou can easily develop a device mode destination in case RudderStack doesn’t support it already, by following the steps listed in this section.\n\n*   Create a `CustomFactory` class by extending [`RudderIntegration.java`](https://github.com/rudderlabs/rudder-sdk-android/blob/master/core/src/main/java/com/rudderstack/android/sdk/core/RudderIntegration.java) :\n\n```\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\n\nimport com.rudderstack.android.sdk.core.RudderClient;\nimport com.rudderstack.android.sdk.core.RudderConfig;\nimport com.rudderstack.android.sdk.core.RudderIntegration;\nimport com.rudderstack.android.sdk.core.RudderLogger;\nimport com.rudderstack.android.sdk.core.RudderMessage;\n\npublic class CustomFactory extends RudderIntegration<CustomFactory> {\n    private static final String FACTORY_KEY = \"Custom Factory\";\n\n    public static Factory FACTORY = new Factory() {\n        @Override\n        public RudderIntegration<?> create(Object settings, RudderClient client, RudderConfig rudderConfig) {\n            return new CustomFactory(client,rudderConfig);\n        }\n\n        @Override\n        public String key() {\n            return FACTORY_KEY;\n        }\n    };\n\n    private CustomFactory(@NonNull RudderClient client, RudderConfig config) {\n\n    }\n\n    private void processRudderEvent(RudderMessage element) {\n        System.out.println(\"Processing RudderEvent of type \"+element.getType());\n\n    }\n\n    @Override\n    public void reset() {\n        System.out.println(\"Reset is called\");\n    }\n\n    @Override\n    public void flush() {\n        System.out.println(\"Flush is called\");\n    }\n\n    @Override\n    public void dump(@Nullable RudderMessage element) {\n        try {\n            if (element != null) {\n                processRudderEvent(element);\n            }\n        } catch (Exception e) {\n            RudderLogger.logError(e);\n        }\n    }\n\n    @Override\n    public CustomFactory getUnderlyingInstance() {\n        return this;\n    }\n}\n```\n\nSome pointers to keep in mind:\n\n*   You can use the constructor of the `CustomFactory` class to initialize the native SDK of the device mode destination you are working on.\n*   RudderStack’s Android SDK dumps every event it receives to the `dump()` method of the `CustomFactory` class. From here, you can process the event and hand it over to the native SDK of the device mode destination.\n*   The SDK also triggers the `reset()` method of the `CustomFactory` class on every `reset()` call made via the SDK. You can use this to handle the destination-specific reset.\n*   RudderStack’s Android SDK also triggers the `flush()` method of the `CustomFactory` class on every `flush()` call made via the SDK which you can use to handle the destination-specific reset logic. You can make a `flush` call using the SDK as shown below:\n\nMake sure you return a valid value from `getUnderlyingInstance()` as it is used by the Android SDK to validate `CustomFactory`.\n\n*   Make sure you do not duplicate the value of `FACTORY_KEY` across multiple `CustomFactory` that you develop.\n*   Register `CustomFactory` with the RudderStack Android SDK during its initialization:\n\n```\nvar rudderClient = RudderClient.getInstance(\n            this,\n            WRITE_KEY,\n            RudderConfig.Builder()\n                .withDataPlaneUrl(DATA_PLANE_URL)\n                .withTrackLifecycleEvents(false)\n                .withRecordScreenViews(false)\n                .withCustomFactory(CustomFactory.FACTORY)\n                .build()\n)\n```\n\nThat’s it! Your Device Mode destination is good to go.\n\n## FAQ\n\n#### What is the Android version required to set up the RudderStack Android SDK?\n\nWe currently support `API 14: Android 4.0 (IceCreamSandwich)` or higher.\n\n#### I don’t have an `Application` class to initialize my RudderStack client. What do I do?\n\nFollow our guide on [How to Add an Application Class to Your Android App](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/adding-an-application-class/) to add an `Application` class.\n\n#### How do I set the Android permissions?\n\nSee [Setting the Android Permissions](#setting-android-permissions) section above to do this.\n\n#### How do I use the Android SDK on applications with `minSDKVersion` less than 20?\n\nBy default, the Android SDK does not support applications with `minSDKVersion` less than `20`. You can add this support by following the steps below:\n\n1.  Add the following dependency to the `build.gradle` file of your application:\n\n```\nimplementation 'com.google.android.gms:play-services-base:17.6.0'\n```\n\n2.  Add the function `tlsBackport()` in your `MainActivity` as shown:\n\n```\nprivate fun tlsBackport() {\n    try {\n        ProviderInstaller.installIfNeeded(this)\n        Log.e(\"Rudder\", \"Play present\")\n        val sslContext: SSLContext = SSLContext.getInstance(\"TLSv1.2\")\n        sslContext.init(null, null, null)\n        sslContext.createSSLEngine()\n    } catch (e: GooglePlayServicesRepairableException) {\n        // Prompt the user to install/update/enable Google Play services.\n        GoogleApiAvailability.getInstance()\n            .showErrorNotification(this, e.connectionStatusCode)\n        Log.e(\"Rudder\", \"Play install\")\n    } catch (e: GooglePlayServicesNotAvailableException) {\n        // Indicates a non-recoverable error: let the user know.\n        Log.e(\"SecurityException\", \"Google Play Services not available.\")\n        e.printStackTrace()\n    }\n}\n```\n\n3.  Finally, call the `tlsBackport()` function at the very beginning of your `onCreate()` method in `MainActivity`.\n\n```\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT) {\n        tlsBackport()\n    }\n}\n```\n\nFor more details, see [Android documentation](https://developer.android.com/reference/javax/net/ssl/SSLSocket.html#protocols).\n\n#### Can I use the library with Maven?\n\nYes, you can use the library with `maven`.\n\n```\n<dependency>\n  <groupId>com.rudderstack.android.sdk</groupId>\n  <artifactId>core</artifactId>\n  <version>latest_version</version>\n  <type>pom</type>\n</dependency>\n```\n\n#### How do I check whether a specific event is getting fired or not?\n\nUsing the following command in the Logcat tool once you set the `logLevel` to `VERBOSE`.\n\n```\nadb logcat -s RudderSDK:V \\\n    -v tag -e \"EventRepository: dump: message:\"\n```\n\n#### How do I get the user `traits` after making the `identify` call?\n\nYou can get the user traits after making an `identify` call as shown in the following snippet:\n\n```\nval traits = rudderClient!!.getRudderContext().getTraits()\n```\n\n```\n    Map<string object=\"\"> traitsObj = rudderClient.getRudderContext().getTraits();\n```\n\n#### Can I disable event tracking until the user gives their consent?\n\nYes, you can. RudderStack gives you the ability to disable tracking any user activity until the user gives their consent, by leveraging the `optOut` API. This is required in cases where your app is audience-dependent (e.g. minors) or where you’re using the app to track the user events (e.g. EU users) to meet the data protection and privacy regulations. The `optOut` API takes `true` or `false` as a Boolean value to enable or disable tracking user activities. So, to disable user tracking, you can use the `optOut` API as shown:\n\n```\nrudderClient.optOut(true)\n```\n\nOnce the user gives their consent, you can enable user tracking again:\n\n```\nrudderClient.optOut(false)\n```\n\nFor more information on the `optOut` API, refer to the [Enabling/Disabling User Tracking via optOut API](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/#enabling-tracking-via-optout) section above.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> You only need to call the `optOut` API with the required parameter once, as the information persists within the device even if you reboot it.\n\n#### How does the SDK handle different client/server errors?\n\nIn case of client-side errors, e.g. if the source write key passed to the SDK is incorrect, RudderStack gives you a **400 Bad Request** response and aborts the operation immediately.\n\nFor other types of network errors (e.g. Invalid Data Plane URL), the SDK tries to flush the events to RudderStack in an incremental manner (every 1 second, 2 seconds, 3 seconds, and so on).\n\n#### Can I apply encryption only on new databases?\n\nDatabase encryption works on new and existing databases. Pass the `DbEncryption` object in `RudderConfig.Builder()` while initializing the Android SDK.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can use this object to convert an unencrypted database into an encrypted database and vice versa.\n\nSee [Configuring your RudderStack client](#configuring-your-rudderstack-client) for more information on the configuration options.\n\n#### Can I remove encryption from an encrypted database?\n\nYes, you can.\n\nIf the database is already encrypted, you can decrypt the database in the following way:\n\n```\nRudderConfig.Builder()\n\t  ...\n    .withDbEncryption(RudderConfig.DBEncryption(false, \"<your-encryption-key>\")) // decrypt database\n    .build()\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Make sure to set the `android-database-sqlcipher` dependency in your module level `build.gradle` file.\n> \n> See [DbEncryption](#dbencryption) for more information.\n\n#### What happens if the supplied encryption key is different to the one the database is encrypted with?\n\nAfter you encrypt the database:\n\n*   If **no key** is provided, then the SDK deletes the current database with unsent events and creates a new unencrypted database instead.\n*   If a **wrong key** is provided, then the SDK deletes the current database with unsent events and creates a new encrypted database with the given key.\n\n#### How does the Android SDK handle events larger than 32KB?\n\nThe Android SDK drops any events greater than 32KB.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Android SDK | RudderStack Docs",
  "description": "Use RudderStack’s Android SDK using Android Studio to send events from your Android device to various destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/adding-an-application-class/",
  "markdown": "# Add an application class | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Add an application class | RudderStack Docs",
  "description": "Add an Application class to initialize the RudderStack SDK.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/reverse-etl/amazon-redshift/",
  "markdown": "# Amazon Redshift Reverse ETL Source\n\nSend data from Amazon Redshift to your entire stack.\n\n* * *\n\n*     9 minute read  \n    \n\n[Amazon Redshift](https://aws.amazon.com/redshift/) is one of the fastest cloud data warehouse services. It lets you handle large analytical workloads with best-in-class performance, speed, and efficiency.\n\nRudderStack supports Amazon Redshift as a data source from which you can ingest data and route it to your desired downstream destinations.\n\n## Grant permissions\n\nBefore you set up Redshift as a source, you must grant certain permissions on your Redshift warehouse for RudderStack to access data from it.\n\nRun the queries listed in the following sections in the **exact order** to grant the required permissions:\n\n### Step 1: Create new user in Redshift\n\n1.  Create a new user `rudder` with a password `<strong_unique_password>`.\n\n```\nCREATE USER rudder WITH PASSWORD '<strong_unique_password>'\n```\n\nThe password set in the above command must meet the following conditions:\n\n*   It should be **8-64** characters in length.\n*   It must contain at least one upper case, one lower case, and one number.\n*   It can contain any ASCII characters with the ASCII codes 33-126, with the exception of `'` (single quotation mark), `\"` (double quotation mark), `\\`, `/`, and `@`.\n\nSee the [Amazon Redshift documentation](https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html#r_CREATE_USER-parameters) for more information on the password rules.\n\n### Step 2: Create RudderStack schema and grant permissions\n\n1.  Create a dedicated schema `_rudderstack`.\n\n```\nCREATE SCHEMA \"_rudderstack\";\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The `_rudderstack` schema is used by RudderStack for storing the state of each data sync. **Do not change this name**.\n\n2.  Grant full access to schema `_rudderstack` for the user `rudder`.\n\n```\nGRANT ALL ON SCHEMA \"_rudderstack\" TO rudder;\n```\n\n3.  Grant full access to the user `rudder` over all `_rudderstack` schema objects.\n\n```\nGRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA \"_rudderstack\" TO rudder;\n```\n\n### Step 3: Grant permissions on schema and table\n\n1.  Grant access to the user `rudder` to look up the objects within your schema:\n\n```\nGRANT USAGE ON SCHEMA \"<YOUR_SCHEMA>\" TO rudder;\n```\n\n2.  Grant access to the user `rudder` to read data from the required table/view:\n\n```\nGRANT SELECT ON TABLE \"<YOUR_SCHEMA>\".\"<YOUR_TABLE>\" TO rudder;\n```\n\nReplace `<YOUR_SCHEMA>` and `<YOUR_TABLE>` with the exact names of your Redshift schema and table respectively.\n\n#### **Optional commands**\n\n*   The following command grants access to the user `rudder` to view and read data from **all** the tables present in the schema `<YOUR_SCHEMA>`:\n\n```\nGRANT SELECT ON ALL TABLES IN SCHEMA \"<YOUR_SCHEMA>\" TO rudder;\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Run this command only if you’re okay with RudderStack being able to access the data in all tables residing within your specified schema.\n\n*   The following command grants access to the user `rudder` to read data from all future tables created by the user `creator` in your schema:\n\n```\nALTER DEFAULT PRIVILEGES for user creator IN SCHEMA \"<YOUR_SCHEMA>\" GRANT SELECT ON TABLES TO rudder;\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Run this command only if you’re okay with RudderStack being able to access the data in all future tables residing within your specified schema.\n\nReplace `<YOUR_SCHEMA>` with the exact name of your Redshift schema.\n\n## Set up Redshift source in RudderStack\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  On the **Connections** page, click **Add source**.\n3.  Under **Sources**, click **Reverse ETL** and select **Redshift**.\n\n### Configure warehouse credentials\n\nYou can choose to proceed with your existing warehouse credentials if you have configured them in the RudderStack dashboard previously. Otherwise, click **Add new credentials** to add new credentials for your warehouse.\n\n*   **Host**: Enter the host name of your Redshift service.\n*   **Port**: Enter the port number associated with the Redshift database instance.\n*   **Database**: Enter the database name of your Redshift instance from where RudderStack ingests the data.\n*   **User**: Enter the user name of your Redshift cluster created in **Step 5** of this [section](https://www.rudderstack.com/docs/destinations/warehouse-destinations/redshift/#creating-a-new-redshift-cluster).\n*   **Password**: Enter the password for the above user.\n*   **SSL Mode**: Select the SSL mode as **disable** or **require** depending on how RudderStack should connect to your Redshift instance.\n\nClick the **Verify** button on the top right. RudderStack will then [verify and validate your credentials](#faq). Once verified, click **Continue** to proceed.\n\n### Specify name and source type\n\nSpecify the source name and type in this step.\n\n*   **Source name**: Assign a name to uniquely identify the source in the RudderStack dashboard.\n*   **Select your source type**: RudderStack lets you set up a Reverse ETL source from a warehouse **Table**, **Model**, or **Audience**.\n\n| Source type | Description |\n| --- | --- |\n| Table | Use an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | Use custom SQL queries to fetch specific warehouse data and send them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | Filter data in your warehouse tables to create target customer lists and send them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\n#### **Use warehouse table as source**\n\nUnder **Select your source type**, choose **Table** and specify the below fields:\n\n*   **Schema**: Select the warehouse schema from the dropdown.\n*   **Table**: Choose the required table from which RudderStack syncs the data.\n*   **Primary key**: Select the column from the above table that uniquely identifies your records in the warehouse.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n[![Use table as source](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use model as source**\n\nUnder **Select your source type**, choose **Model** and click **Continue**.\n\nTo configure a model as source:\n\n1.  Enter an optional description and specify the custom SQL query in **Query** section.\n2.  Click **Run Query** to fetch the data preview.\n3.  Select the **Primary key** to use a column that uniquely identifies your warehouse records.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can set a primary key only after you run the SQL query successfully using the **Run Query** option.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` in SQL query of the model.\n\n[![Model configuration](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use audience as source**\n\nUnder **Select your source type**, choose **Audience** and follow these steps:\n\n1.  Configure your audience source by specifying the below fields:\n    \n    *   **Schema**: Select the warehouse schema from the dropdown.\n    *   **Table**: Choose the required table from which RudderStack syncs the data.\n    *   **Primary key**: Select the column from the above table that uniquely identify your records in the warehouse.\n\n[![Use audience as source](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n2.  Set your [audience conditions](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/#set-your-conditions).\n3.  Click **Preview** to see the resulting data. Then, click **Continue** to proceed.\n\n[![Audience configuration](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n### Review and complete setup\n\nTo make any changes to the warehouse credentials or source configuration, click the edit icon present next to those sections.\n\n[![Edit source configuration](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)\n\nReview your configuration and click **Create source** to complete the setup.\n\n## Connect destination\n\nYou can connect this source to an existing or new [destination](https://www.rudderstack.com/docs/destinations/overview/) to start using it. To connect to a destination later, click **Done** on the top right.\n\n[![Next steps](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)\n\nYou will then be redirected to the **Overview** page of the source where you get the option of connecting it to an existing or new destination.\n\n[![Add destination](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)\n\nSee [Set up Reverse ETL Connection](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/) section for more information.\n\n## Update source configuration and settings\n\nGo to the **Configuration** tab of your Reverse ETL source to update the configuration depending on your source type:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot change the source type on this page.\n\n[![Update source configuration](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)\n\nThe below table lists the options you can update:\n\n| Source type | Configurable options |\n| --- | --- |\n| Table | [Schema, Table, Primary key](#use-warehouse-table-as-source) |\n| Model | *   [Model settings](#use-model-as-source)<br>*   [Primary key](#use-model-as-source)<br><br>**Note**: You can set the primary key only after the SQL query runs successfully. |\n| Audience | *   [Schema, Table, Primary key](#use-audience-as-source)<br>*   [Audience conditions](#use-audience-as-source) |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> After updating the configuration, the next sync will be a full sync.\n\nGo to the **Settings** tab to:\n\n*   Get your source ID.\n*   Change your warehouse credentials.\n*   [Set up custom alerts](https://www.rudderstack.com/docs/data-governance/alerts/) for your Reverse ETL source.\n*   Delete the source permanently.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot delete a source that is connected to any destination.\n\n[![Edit source settings](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)\n\n## FAQ\n\n#### **What are the SSL mode options when setting up the Redshift source in RudderStack?**\n\nWhen setting up a Redshift source, RudderStack provides the following two SSL options:\n\n*   **disable**: SSL mode is disabled when you select this option. Use it in cases where security is not an issue and you don’t want any encryption overhead.\n*   **require**: When you select this option, your data is encrypted and sent to RudderStack. Use it in cases where security is important and you can deal with the resulting encryption overhead.\n\n#### **What do the three validations under Verifying Credentials imply?**\n\nWhen setting up a Reverse ETL source, you will see the following three validations under the **Verifying Credentials** option once you proceed after entering the warehouse credentials:\n\n[![Validating credentials](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)\n\nThese options are explained below:\n\n*   **Verifying Connection**: This option indicates that RudderStack is trying to connect to the warehouse with the provided warehouse credentials.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, it means that one or more fields specified in the warehouse credentials are incorrect. Verify your credentials in this case.\n\n*   **Able to List Schema**: This option checks if RudderStack is able to fetch all schema details by using the provided credentials.\n*   **Able to Access RudderStack Schema**: This option implies that RudderStack is able to access the `_rudderstack` schema you have created by running all commands in the [User Permissions](#creating-the-rudderstack-schema-and-granting-permissions) section.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, verify if you have successfully created the `_rudderstack` schema and given RudderStack the required permissions to access it.\n\n#### **What is the difference between the Table, Model, and Audience options when creating a Reverse ETL source?**\n\nWhen creating a new Reverse ETL source, you are presented with the following options from which RudderStack syncs the data:\n\n| Source type | Description |\n| --- | --- |\n| Table | RudderStack uses an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | RudderStack uses custom SQL queries to fetch specific warehouse data and sends them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | RudderStack filters data in your warehouse tables to create target customer lists and sends them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Amazon Redshift Reverse ETL Source | RudderStack Docs",
  "description": "Send data from Amazon Redshift to your entire stack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-cordova-sdk/",
  "markdown": "# Cordova SDK | RudderStack Docs\n\nUse the RudderStack Cordova SDK to send events from your Cordova apps to various destinations.\n\n* * *\n\n*     9 minute read  \n    \n\nThe **RudderStack Cordova SDK** lets you track event data from your [Apache Cordova](https://cordova.apache.org/) applications and send it to your specified destinations via RudderStack.\n\nRefer to the [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-cordova) and the [sample implementation](https://github.com/rudderlabs/rudder-sdk-cordova/blob/master/sample-cordova/www/js/index.js) to get a more hands-on understanding of the SDK.\n\n[![Github Badge](https://img.shields.io/npm/v/rudder-sdk-cordova?style=flat)](https://www.npmjs.com/package/rudder-sdk-cordova/)\n\n## SDK setup requirements\n\nTo set up the RudderStack Cordova SDK, the following prerequisites must be met:\n\n*   You need to set up a [RudderStack account](https://app.rudderstack.com/signup).\n*   Once signed up, [set up an Cordova source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the dashboard. You should be able to see a **Write Key** for this source, as shown below:\n\n[![Cordova source write key](https://www.rudderstack.com/docs/images/event-stream-sources/cordova-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/cordova-write-key-new.webp)\n\n*   You will also need a data plane URL. Refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has an SDK installation snippet containing both the write key and the data plane URL. You can use it to integrate the Cordova SDK into your project.\n\n## Installing the Cordova SDK\n\nTo add the Cordova SDK as a dependency, navigate to the root folder of your application and run the following command:\n\n```\ncordova plugin add rudder-sdk-cordova\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The Cordova SDK supports device mode starting from version `1.3.0`.\n\n## Initializing the RudderStack client\n\nAfter adding the SDK as a dependency, you need to set up the SDK.\n\nAdd the following code in the `onDeviceReady()` function of your home page to initialize the SDK.\n\nA sample Cordova SDK initialization is as shown:\n\n```\nRudderClient.initialize(WRITE_KEY , {\n  dataPlaneUrl: DATA_PLANE_URL,\n  loglevel: RudderClient.LogLevel.VERBOSE,\n})\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Make sure you use the `await` keyword with the `initialize` call.\n\nThe `setup` method has the following signature:\n\n| Name | Data Type | Presence | Description |\n| --- | --- | --- | --- |\n| `writeKey` | `string` | Required | Your Cordova source `writeKey` from the dashboard. |\n| `configuration` | `JSON Object` | Optional | Contains the RudderStack client configuration. |\n| `options` | `JSON Object` | Optional | Extra options to be pass along with the event. |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> *   Check the [Configuring the RudderStack Client](#configuring-the-rudderstack-client) section below for detailed information on the parameters you can send in the `configuration` object.\n> *   Check the [Configuring the options object](#configuring-the-options-object) section below for detailed information on the parameters you can send in the `options` object.\n\n## Configuring the RudderStack client\n\nYou can configure your RudderStack client by passing the following parameters in the `configuration` object of your `RudderClient.initialize()` call:\n\n| Parameter | Type | Description | Default Value |\n| --- | --- | --- | --- |\n| `logLevel` | `RudderClient.LogLevel` | Controls how much of the log you want to see from the Cordova SDK. | `RudderClient.LogLevel.None` |\n| `dataPlaneUrl` | String | Your RudderStack Data Plane URL. | [https://hosted.rudderlabs.com](https://hosted.rudderlabs.com/) |\n| `flushQueueSize` | Integer | The number of events included in a batch request to the server. | `30` |\n| `dbCountThreshold` | Integer | The number of events to be saved in the `SQLite` database. Once the limit is reached, older events are deleted from the database. | `10000` |\n| `sleepTimeout` | Integer | Minimum waiting time to flush the events to the server. | `10 seconds` |\n| `configRefreshInterval` | Integer | RudderStack fetches the config after this time interval. | `2` |\n| `autoCollectAdvertId` | Boolean | Determines if the SDK should automatically collect the advertisement ID on Android platforms. | `false` |\n| `trackLifecycleEvents` | Boolean | Determines if the SDK should capture the application lifecycle events automatically. | `true` |\n\n## Identify\n\nThe `identify` call lets you identify a visiting user and associate them with their actions. It also lets you record the traits about them like their name, email address, etc.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> As a best practice, we recommend calling `identify` at the start of every session or page load for logged-in users. This will ensure allir latest traits are captured in all subsequent events.\n\nA sample `identify` call is as shown below:\n\n```\nRudderClient.identify(\"userId\", {\n  address: {\n    city: \"LA\",\n    country: \"USA\",\n    state: \"CA\",\n  },\n  birthday: \"1984/07/17\",\n  company: {\n    name: \"RudderStack\",\n    id: \"RS\",\n    industry: \"IT\",\n  },\n  email: \"john@rudderstack.com\",\n  firstName: \"john\",\n});\n```\n\nThe `identify` method has the following signatures:\n\n| Name | Data Type | Presence | Description |\n| --- | --- | --- | --- |\n| `userId` | `string` | Required | User identifier in your database. |\n| `traits` | `JSON Object` | Optional | Information related to the user traits. |\n| `options` | `JSON Object` | Optional | Extra options for the `identify` event. |\n\n## Track\n\nThe `track` call lets you record the user actions along with their associated properties. Each user action is called an **event**.\n\nA sample `track` event called `Order Completed` using the Cordova SDK is shown below:\n\n```\nRudderClient.track('Order Completed', {\n  checkout_id: '18310159091413-2',\n  order_id: '1153390412189-01',\n  affiliation: 'Google Play Store',\n  total: 68.00,\n  subtotal: 60.00,\n  revenue: 70.00,\n  shipping: 5,\n  tax: 3,\n  discount: 10,\n  coupon: 'NEWUSER',\n  currency: 'USD',\n  products: [{\n      product_id: '853913-410121910',\n      sku: 'FF-21',\n      name: 'Varsity Graphic T-Shirt',\n      price: 25,\n      quantity: 1,\n      category: 'Clothing',\n      url: 'https://www.myntra.com/tshirts/huetrap/huetrap-men-beige/111/buy',\n    },\n    {\n      product_id: '113413-190158920',\n      sku: 'GF-67',\n      name: 'Printed Round Neck T-Shirt',\n      price: 15,\n      quantity: 3,\n      category: 'Clothing'\n    }\n  ]\n})\n```\n\nThe `track` method has the following signature:\n\n| Name | Data Type | Presence | Description |\n| --- | --- | --- | --- |\n| `name` | `String` | Required | Contains the name of the event that you want to track. |\n| `properties` | `JSON Object` | Optional | Contains the extra properties to be sent along with the event. |\n| `options` | `JSON Object` | Optional | Contains the extra event options. |\n\n## Group\n\nThe `group` call lets you associate an identified user to a group - either a company, project, or a team, and record any custom traits or properties associated with that group.\n\nA sample `group` call is as shown:\n\n```\nRudderClient.group(\"group1\", {\n  groupname: \"RS\",\n  groupwork: \"Mobile dev\"\n})\n```\n\nThe `group` method has the following signatures:\n\n| Name | Data Type | Presence | Description |\n| --- | --- | --- | --- |\n| `groupId` | `string` | Required | The organization ID with which you want to associate the user. |\n| `groupTraits` | `JSON Object` | Optional | Any other property of the organization that you want to pass along with the call. |\n| `options` | `JSON Object` | Optional | Extra options for the `group` event. |\n\n## Screen\n\nThe `screen` call lets you record whenever your user views their mobile screen with any additional relevant information about the viewed screen.\n\nA sample `screen` call is shown below:\n\n```\nRudderClient.screen(\"Home Screen\", {\n  mobile: \"pixel\"\n})\n```\n\nThe `screen` method has the following signature:\n\n| Name | Data Type | Presence | Description |\n| --- | --- | --- | --- |\n| `screenName` | `string` | Required | Name of the viewed screen. |\n| `property` | `JSON Object` | Optional | Extra properties that you want to pass along with the `screen` call. |\n| `options` | `JSON Object` | Optional | Extra options to be passed along with `screen` event. |\n\n## Alias\n\nThe `alias` call lets you merge different identities of a known user.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> `alias` is an advanced method that lets you change the tracked user’s ID explicitly. This method is useful when managing identities for some of the downstream destinations.\n\nA sample `alias` call is shown below:\n\n```\nRudderClient.alias(\"userId\")\n```\n\nThe `alias` method has the following signature:\n\n| Name | Data Type | Presence | Description |\n| --- | --- | --- | --- |\n| `newId` | `String` | Required | The new `userId` that you want to assign to the user. |\n| `options` | `JSON Object` | Optional | Event level options. |\n\nFor a detailed explanation of the `alias` call, refer to the [RudderStack API Specification](https://www.rudderstack.com/docs/event-spec/standard-events/alias/).\n\n## Reset\n\nYou can use the `reset` method to clear the persisted `traits` from the `identify` call. We recommend calling it during the `Logout` operation.\n\nA sample `reset` call is as shown:\n\n## Configuring the `options` object\n\nThe `options` object can be sent along with all above-mentioned API calls. It has the following signature:\n\n| Name | Data Type | Presence | Description |\n| --- | --- | --- | --- |\n| `externalIds` | `JSON Object` | Optional | Each key within `externalIds` object should define the type of external ID, and its value should be a `String` or `Integer`. |\n| `integrations` | `JSON Object` | Optional | Each key within the `integrations` object should hold the display name of your desired destination. Its value should be a `boolean` indicating whether you want to send that event or not. For more details check the [Enabling/disabling events for specific destinations](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-cordova-sdk/#enablingdisabling-events-for-specific-destinations) section below. |\n\nA sample `options` object for an `identify` event is as shown:\n\n```\nRudderClient.identify(\"1hKOmRA4el9Ztm\", {\n  \"address\": {\n    \"city\": \"New Orleans\",\n    \"country\": \"USA\",\n    \"state\": \"Louisiana\",\n  },\n  \"birthday\": \"01/24/1984\",\n  \"company\": {\n    \"name\": \"Apple Inc.\",\n    \"id\": \"1hKOmRA4el9Ztm\",\n    \"industry\": \"IT\"\n  },\n  \"email\": \"alex@example.com\",\n  \"firstName\": \"Alex\",\n}, {\n  \"externalIds\": {\n    \"brazeExternalId\": \"externalId1\"\n  },\n  \"integrations\": {\n    \"MixPanel\": false,\n    \"Amplitude\": true\n  }\n})\n```\n\nIn the above snippet, the `options` object is as follows:\n\n```\n{\n  \"externalIds\": {\n    \"brazeExternalId\": \"externalId1\"\n  },\n  \"integrations\": {\n    \"MixPanel\": false,\n    \"Amplitude\": true\n  }\n}\n```\n\nRudderStack gives the users (e.g., an EU user) the ability to opt out of tracking any user activity until the user gives their consent. You can do this by leveraging RudderStack’s `optOut` API.\n\nThe `optOut` API takes `true` or `false` as a Boolean value to enable or disable tracking user activities. This flag persists across the device reboots.\n\nThe following snippet highlights the use of the `optOut` API to disable user tracking:\n\n```\nRudderClient.optOut(true);\n```\n\nOnce the user grants their consent, you can enable user tracking once again by using the `optOut` API with `false` as a parameter sent to it:\n\n```\nRudderClient.optOut(false);\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `optOut` API is available in the Cordova SDK starting from version `1.0.1`.\n\n## Filtering events\n\nWhen sending events to a destination via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode), you can explicitly specify which events should be discarded or allowed to flow through - by allowlisting or denylisting them.\n\nRefer to the [Client-side Event Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) guide for more information on this feature.\n\n## Enabling/disabling events for specific destinations\n\nRudderStack lets you send your event data only to the explicitly specified destinations and filtering out the rest. You can do this in one of the following two ways:\n\n*   While initializing the Cordova SDK\n*   While making the event calls\n\n### Passing destinations during SDK initialization\n\nThis approach is useful when you want to send the events to specific destinations across all event calls made using the SDK.\n\nA sample SDK initialization is shown below:\n\n```\nRudderClient.initialize(\"1n0JdVPZTRUIkLXYccrWzZwdGSx\", {\n  dataPlaneUrl: \"https://0ff6-175-101-36-4.ngrok.io\",\n  flushQueueSize: 30,\n  dbCountThreshold: 10000,\n  configRefreshInterval: 2,\n  logLevel: 0,\n  sleepTimeOut: 10,\n  trackLifecycleEvents: true,\n  recordScreenViews: true,\n}, {\n  integrations: {\n    MixPanel: true,\n    Amplitude: true\n  }\n})\n```\n\n### Passing destinations during event calls\n\nThis approach is useful when you want to send particular events to specific destinations, or if you want to override the destinations specified during the SDK initialization for a particular event.\n\nAn example is shown below:\n\n```\nRudderClient.screen(\"Home Screen\", {\n  mobile: \"pixel\"\n}, {\n  integrations: {\n    All: false,\n    Salesforce: true\n  }\n})\n```\n\nIn the above example, the values of the `screen` call are passed only to the Salesforce destination.\n\n## Anonymous ID\n\nRudderStack uses the `deviceId` as anonymousId by default. You can use the `putAnonymousId` method to override the default `anonymousId`:\n\n```\nRudderClient.putAnonymousId(\"CustomAnonymousId\");\n```\n\n## Setting the advertisement ID\n\nRudderStack collects the advertisement ID **only** if `autoCollectAdvertId` is set to `true` during the [SDK initialization](#initializing-the-rudderstack-client):\n\n```\nRudderClient.initialize(WRITE_KEY , {\n  dataPlaneUrl: DATA_PLANE_URL,\n  loglevel: RudderClient.LogLevel.VERBOSE,\n  autoCollectAdvertId: true,\n})\n```\n\nTo set the advertisement ID yourself, you can use the `putAdvertisingId` method as shown:\n\n```\nRudderClient.putAdvertisingId(\"SampleAdvertisingId\")\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> In iOS, you need to call the `putAdvertisingId` method before calling `initialize`.\n\n## Setting the device token\n\nYou can pass your `device-token` for push notifications to be passed to the destinations which support the **Push Notifications** feature. RudderStack sets the `token` under `context.device.token`.\n\nAn example of setting the `device-token` is as shown:\n\n```\nRudderClient.putDeviceToken(\"sampleDeviceToken\");\n```\n\n## Debugging\n\nIf you face any unexpected behavior while using the SDK, you can turn on the `VERBOSE` or `DEBUG` logging feature to determine out the issue.\n\nYou configure logging behavior of your SDK by sending the value of the `logLevel` property of the `configuration` object and pass it over to the `initialize` call as shown below:\n\n```\nRudderClient.initialize( WRITE_KEY , {\n  dataPlaneUrl: DATA_PLANE_URL ,\n  logLevel: RudderClient.LogLevel.VERBOSE,\n  trackLifecycleEvents: true\n})\n```\n\n## FAQ\n\n#### Where can I find the source write key?\n\nOnce you set up a Cordova source in the [RudderStack dashboard](http://app.rudderstack.com/), you will be able to view the source **Write Key**, under the **Setup** tab:\n\n[![Cordova source write key](https://www.rudderstack.com/docs/images/event-stream-sources/cordova-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/cordova-write-key-new.webp)\n\n#### Where can I find the data plane URL?\n\nRefer to this [section](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) for more information on the data plane and how to get it.\n\n#### Do I need to add anything to my Android ProGuard rules?\n\nIf you are facing any event delivery issues in your production environment, verify if you have added the following line in your ProGuard rules:\n\n```\n-keep class com.rudderstack.android.** { *; }\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Cordova SDK | RudderStack Docs",
  "description": "Use the RudderStack Cordova SDK to send events from your Cordova apps to various destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/flushing-events-periodically/",
  "markdown": "# Flushing events in Android SDK\n\nFlush events from the Android SDK’s internal database to the RudderStack server.\n\n* * *\n\n*     2 minute read  \n    \n\nThe Android SDK supports the `flush()` API. It retrieves all messages present in the database, divides them into individual batches based on the specified queue size, and flushes them to the RudderStack server/backend.\n\nFor example, if the `flushQueueSize` is 30 and there are 180 events in the database when the `flush()` API is called, the SDK will retrieve all those events and divide them into batches of 30 messages each, that is, into 6 batches.\n\nIf a batch fails for some reason, RudderStack drops the remaining batches to maintain the sequence of the messages. A batch is considered as failed if it isn’t sent to the RudderStack server after 3 retries.\n\nIn device mode, the `flush()` API also calls the destination SDK’s `flush()` API (if applicable).\n\n## Flush events periodically\n\nRudderStack supports periodic flushing of events from the Android SDK to RudderStack, irrespective of whether your app is opened or not. This ensures that the events that are triggered just before closing the app are sent from the device - even if the app is not opened by the user for a long time.\n\nTo use this feature, follow these steps:\n\n1.  Open your `app/build.gradle` and add the [WorkManager](https://developer.android.com/jetpack/androidx/releases/work) dependency under `dependencies` as shown below:\n\n```\nimplementation 'androidx.work:work-runtime:2.7.1'\n```\n\n2.  Use the `withFlushPeriodically()` function while passing the `RudderConfig` object to the `getInstance()` API, as shown below:\n\n```\nrudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            // enabling periodical flush of events in the DB with a repeat interval of 15 minutes\n            .withFlushPeriodically(15, TimeUnit.MINUTES)\n            .build()\n    )\n```\n\n### `withFlushPeriodically` parameters\n\nThe `withFlushPeriodically` function takes two parameters:\n\n*   The first parameter is the number representing the time interval for the flushing to be repeated.\n*   The second parameter is the time unit of the repeat interval. It can be **Minutes**, **Hours**, or **Days**. The minimum value of the repeat interval is **15 minutes**.\n\n## Initializing WorkManager on demand\n\nBy default, the WorkManager is initialized on the startup of the application. However, you can initialize it only on demand by following these steps:\n\n1.  Add a `provider` to the application tag of your application’s `AndroidManifest.xml`.\n\n```\n<provider\n    android:name=\"androidx.startup.InitializationProvider\"\n    android:authorities=\"${applicationId}.androidx-startup\"\n    android:exported=\"false\"\n    tools:node=\"merge\">\n    <!-- If you are using androidx.startup to initialize other components -->\n    <meta-data\n        android:name=\"androidx.work.WorkManagerInitializer\"\n        android:value=\"androidx.startup\"\n        tools:node=\"remove\" />\n </provider>\n```\n\n2.  Implement `Configuration.Provider` and define the function `getWorkManagerConfiguration()` in your application class as shown below:\n\n```\nclass MyApplication() : Application(), Configuration.Provider {\n    override fun getWorkManagerConfiguration() =\n        Configuration.Builder()\n            .setMinimumLoggingLevel(android.util.Log.INFO)\n            .build()\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Flushing events in Android SDK | RudderStack Docs",
  "description": "Flush events from the Android SDK’s internal database to the RudderStack server.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/reverse-etl/amazon-s3/",
  "markdown": "# Amazon S3 Reverse ETL Source\n\nSend data from Amazon S3 to your entire stack.\n\n* * *\n\n*     5 minute read  \n    \n\n[Amazon S3](https://aws.amazon.com/s3/) is a cloud-based object storage service that lets businesses securely store their data at scale.\n\nRudderStack supports S3 as a data source from which you can ingest data and route it to your desired downstream destinations.\n\n## Set up S3 source in RudderStack\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  On the **Connections** page, click **Add source**.\n3.  Under **Sources**, click **Reverse ETL** and select **Snowflake**.\n\n### Connection credentials\n\nConfigure the following settings to authenticate RudderStack to access your S3 account:\n\n*   **Connection Mode**: RudderStack provides the following options to connect to S3:\n    *   **Cross-Account Role (recommended)**: This option lets you connect to S3 through an [IAM access role](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html). To do so, you need to first create an IAM role for RudderStack with the required permissions to access your S3 account. See [Creating the RudderStack IAM Role for S3](#creating-the-rudderstack-iam-role) for the detailed steps.\n    *   **Access Key**: This option lets you connect to S3 using your AWS access key ID and secret access key.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note the following:\n> \n> *   It is highly recommended to use the **Cross-Account Role** method for connecting to S3 as the **Access Key** method will be deprecated soon.\n> *   See [S3 permissions](#s3-permissions) for the **minimum** permissions that need to be attached to IAM role or the access keys (depending on your connection method).\n\n*   **Account Name**: Specify a name that will be used to identify the connection account.\n*   **Role ARN**: If you select the **Cross-Account Role (recommended)** connection mode, specify the ARN after [creating the RudderStack IAM role](#creating-the-rudderstack-iam-role).\n*   **AWS Access Key ID**: If you select the **Access Key** connection mode for authenticating RudderStack, specify your AWS access key ID. For more information on obtaining your access key ID and secret access key, refer to the [FAQ](#faq) section below.\n*   **AWS Secret Access Key**: Enter the corresponding secret access key.\n\n### Specify name, bucket, and prefix\n\n*   **Source name**: Assign a name to uniquely identify the source in the RudderStack dashboard.\n*   **S3 Bucket Name**: Enter the S3 bucket name.\n*   **Prefix**: Prefix refers to the path within your S3 bucket from where RudderStack imports the data. For example, if **Prefix** is set to `RUDDER`, then RudderStack imports the data stored in the location `<your_s3_bucket>/RUDDER`.\n\n[![Bucket configuration settings](https://www.rudderstack.com/docs/images/warehouse-actions-sources/s3-bucket-settings.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/s3-bucket-settings.webp)\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Your S3 bucket (with the prefix, if specified above) should only consist of Apache Parquet files as RudderStack can extract only the Parquet files. Also, the first row of the Parquet file should not have a `null` value (empty strings are allowed) for any column. It helps RudderStack to determine the correct schema of the file.\n\n### Review and complete setup\n\nTo make any changes to the warehouse credentials or source configuration, click the edit icon present next to those sections.\n\n[![Edit source configuration](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)\n\nReview your configuration and click **Create source** to complete the setup.\n\n## S3 permissions\n\nThe **minimum** S3 permissions that need to be attached to IAM role or the access keys (depending on your [connection method](#connection-credentials)) are listed below:\n\n```\n\"Action\": [\n  \"s3:GetObject\",\n  \"s3:ListBucket\"\n],\n```\n\n## Create RudderStack IAM role\n\nFollow the steps in this section to create a RudderStack IAM role and obtain the role ARN.\n\n### Create policy\n\nTo create a managed policy defining the permissions for the RudderStack IAM role, follow these steps:\n\n1.  Sign in to your AWS Management Console and open the [IAM console](https://console.aws.amazon.com/iam/).\n2.  In the left navigation pane, click **Policies** followed by **Create policy**.\n3.  In the **JSON** tab, paste the following policy:\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:ListAllMyBuckets\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:ListBucket\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\n4.  Click **Review policy**. On the **Review** page, enter `read-write-app-bucket`.\n\n### Create IAM role\n\n1.  In the left navigation pane, click **Roles** and go to **Create role**.\n2.  Under **Trusted entity type**, select **AWS account**:\n\n[![Setting up AWS IAM Role for RudderStack](https://www.rudderstack.com/docs/images/destinations/aws-role-1.webp)](https://www.rudderstack.com/docs/images/destinations/aws-role-1.webp)\n\n3.  Select **Another AWS account** and under **Account ID**, enter `422074288268`, the account ID associated with RudderStack.\n4.  Under **Options** check **Require external ID** and enter your [workspace ID](https://www.rudderstack.com/docs/resources/glossary/#workspace-id) as the **External ID**.\n\n[![Setting up AWS IAM Role for RudderStack](https://www.rudderstack.com/docs/images/destinations/aws-role-2.webp)](https://www.rudderstack.com/docs/images/destinations/aws-role-2.webp)\n\n5.  Review all settings carefully and click **Next** to proceed.\n6.  In the **Permissions** window, select the check box next to the policy you created in the [Creating the policy](#creating-the-policy) section above.\n7.  Review all settings carefully and click **Next** to proceed.\n8.  Enter a unique name for your role. Note that this name is **case-insensitive**. For example, you cannot create a role named `RUDDERSTACK` if `rudderstack` already exists.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot edit the name of the role after it has been created.\n\n9.  **Optional**: Enter the description for this role.\n10.  Click **Create role** to complete the setup.\n11.  Finally, copy the **ARN** of this newly created role and paste it in the **Role ARN** field in the dashboard settings.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> See [AWS IAM tutorial](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) for more information on delegating access across AWS account using IAM roles.\n\n## Update source configuration and settings\n\nGo to the **Configuration** tab of your S3 source to update the configuration settings. Here, you can update the S3 bucket name and prefix.\n\nGo to the **Settings** tab to:\n\n*   Get your source ID.\n*   Change your warehouse credentials.\n*   [Set up custom alerts](https://www.rudderstack.com/docs/data-governance/alerts/#reverse-etl) for your Reverse ETL source.\n*   Delete the source permanently.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot delete a source that is connected to any destination.\n\n[![Edit source settings](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)\n\n## Troubleshooting\n\n#### Failing syncs with large row groups\n\nNote that the Reverse ETL syncs will fail if your files contain large row groups with sizes more than 512 MB. This is because S3 cannot process Parquet files with row groups larger than 512 MB.\n\nMake sure that:\n\n*   The maximum record length in the input or result is 1 MB.\n*   The maximum uncompressed row group size is 512 MB.\n\nSee [S3 documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/selecting-content-from-objects.html) for more information on these limits.\n\n## FAQ\n\n#### **Where can I obtain the AWS Access Key ID and the AWS Secret Access Key?**\n\n1.  Sign in to your [AWS Management Console](http://console.aws.amazon.com/) as the [root user](https://docs.aws.amazon.com/IAM/latest/UserGuide/console.html#root-user-sign-in-page).\n2.  From the upper right corner, click your account and go to **Security Credentials**. You can find your access key ID listed here. You can also create a new access key by clicking the **Create access key** button:\n\n[![AWS security](https://www.rudderstack.com/docs/images/warehouse-actions-sources/aws-security-credentials-new.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/aws-security-credentials-new.webp)\n\nSee the [AWS documentation](https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html) for more information on these credentials.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> See [S3 permissions](#s3-permissions) for more information on the actions must be attached to your access keys required for setting up the S3 source.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Amazon S3 Reverse ETL Source | RudderStack Docs",
  "description": "Send data from Amazon S3 to your entire stack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/releases/",
  "markdown": "# Release Notes | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Release Notes | RudderStack Docs",
  "description": "RudderStack release notes",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/reverse-etl/google-bigquery/",
  "markdown": "# Google BigQuery Reverse ETL Source\n\nSend data from Google BigQuery to your entire stack.\n\n* * *\n\n*     8 minute read  \n    \n\n[Google BigQuery](https://cloud.google.com/bigquery) is an industry-leading, fully-managed cloud data warehouse that lets you store and analyze petabytes of data in no time.\n\nRudderStack supports Google BigQuery as a source from which you can ingest data and route it to your desired downstream destinations.\n\n## Grant permissions\n\nBefore you set up BigQuery as a source, you must grant certain permissions on your BigQuery warehouse for RudderStack to access data from it.\n\nFollow the steps below in the **exact order** to grant these permissions:\n\n### Step 1: Create role and grant permissions\n\n1.  Go to the [Roles](https://console.cloud.google.com/iam-admin/roles) section of Google Cloud Platform dashboard and click **CREATE ROLE**.\n\n[![Google Cloud Platform dashboard create role](https://www.rudderstack.com/docs/images/warehouse-actions-sources/GCP-create-role.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/GCP-create-role.webp)\n\n2.  Fill in the details as shown:\n\n[![GCP role details](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-role-details.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-role-details.webp)\n\n3.  Click **ADD PERMISSIONS** and add the following permissions individually:\n\n**Read-only:**\n\n```\nbigquery.datasets.get\nbigquery.jobs.list\nbigquery.tables.get\nbigquery.tables.getData\nbigquery.tables.list\nbigquery.routines.get\nbigquery.routines.list\nbigquery.tables.delete\n```\n\n**Read-write:**\n\n```\nbigquery.jobs.create\nbigquery.tables.create\nbigquery.tables.update\nbigquery.tables.updateData\nbigquery.tables.delete\n```\n\n4.  Click **CREATE** after adding the permissions.\n\n[![BigQuery role permissions](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-role-permisssions.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-role-permisssions.webp)\n\n### Step 2: Create service account and attach role\n\n1.  Go to [Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) and select the project which has the dataset or the table that you want to use.\n2.  Click **CREATE SERVICE ACCOUNT**.\n\n[![Create service account in GCP](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-create-service-account.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-create-service-account.webp)\n\n3.  Fill in the **Service Account details** as shown below, and click **CREATE AND CONTINUE**:\n\n[![Service account role details](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-service-account-details.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-service-account-details.webp)\n\n4.  Under **Grant this service account access to project**, select the role you created in [Step 1: Creating a role and granting permissions](#step-1-creating-a-role-and-granting-permissions) section above.\n\n[![Service account role connection](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-service-account-connect-role.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-service-account-connect-role.webp)\n\n5.  Click **DONE** to move to the list of service accounts.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note down the service account ID. You will need this ID while creating the RudderStack schema and granting the required permissions to it.\n> \n> ![Service account ID](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-service-account-id.webp)\n\n### Step 3: Create and download JSON key\n\n1.  Click the three dots icon under **Actions** in the service account that you just created and select **Manage keys**:\n\n[![Managing keys in GCP](https://www.rudderstack.com/docs/images/warehouse-actions-sources/manage-keys.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/manage-keys.webp)\n\n2.  Click **ADD KEY**, followed by **Create new key**:\n\n[![GCP Adding a new key](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-add-key.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/gcp-add-key.webp)\n\n3.  Select **JSON** and click **CREATE**.\n\n[![Select Reverse ETL source in RudderStack](https://www.rudderstack.com/docs/images/warehouse-actions-sources/create-new-key.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/create-new-key.webp)\n\nA JSON file will be downloaded on your system. This file is required while [setting up the BigQuery source](#setting-up-the-bigquery-source-in-rudderstack) in RudderStack.\n\n### Step 4: Create RudderStack schema and granting permissions\n\n1.  From your [BigQuery SQL workspace](https://console.cloud.google.com/bigquery), run the following command to create a dedicated schema `rudderstack_`.\n\n> ![danger](https://www.rudderstack.com/docs/images/danger.svg)\n> \n> The `rudderstack_` schema is used by RudderStack for storing the state of each data sync. **Do not change this name**.\n\n```\ncreate schema rudderstack_;\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The `rudderstack_` schema is created in the default region of your BigQuery instance.\n> \n> If the GCP cloud storage bucket used as a staging bucket by RudderStack is in a different region, you will need to adjust the above SQL statement to match that region. For example, to create the schema in the [`europe-west-3`](https://cloud.google.com/bigquery/docs/locations) region, run the following statement:  \n> \n> ```\n> create schema rudderstack_ OPTIONS (location = \"europe-west3\");\n> ```\n\n2.  Grant full access to the `rudderstack_` schema for the RudderStack service account you created above. Replace `<SERVICE_ACCOUNT_ID>` with the service account ID you specified in [Step 2: Creating a service account and attaching role to it](#step-2-creating-a-service-account-and-attaching-the-role-to-it).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `<SERVICE_ACCOUNT_ID>` takes the form of `name@your-gcp-project.iam.gserviceaccount.com`. You can also find it in the `client_email` key of the service account credentials JSON file downloaded in [Step 3: Creating and downloading the JSON key](#step-3-creating-and-downloading-the-json-key).\n\n```\nGRANT `roles/bigquery.dataOwner`\n     ON SCHEMA rudderstack_\n     TO \"serviceAccount:<SERVICE_ACCOUNT_ID>\";\n```\n\n## Set up BigQuery source in RudderStack\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  On the **Connections** page, click **Add source**.\n3.  Under **Sources**, click **Reverse ETL** and select **BigQuery**.\n\n### Configure warehouse credentials\n\nYou can choose to proceed with your existing warehouse credentials if you have configured them in the RudderStack dashboard previously. Otherwise, click **Add new credentials** to add new credentials for your warehouse.\n\n*   **Credentials**: Add the contents of the GCP service account credentials JSON downloaded [above](#step-3-creating-and-downloading-the-json-key).\n*   **Project ID**: Specify your GCP project ID where your BigQuery database is located.\n*   **Service account**: Specify your GCP service account in this field.\n\nClick the **Verify** button on the top right. RudderStack will then [verify and validate your credentials](#faq). Once verified, click **Continue** to proceed.\n\n### Specify name and source type\n\nSpecify the source name and type in this step.\n\n*   **Source name**: Assign a name to uniquely identify the source in the RudderStack dashboard.\n*   **Select your source type**: RudderStack lets you set up a Reverse ETL source from a warehouse **Table**, **Model**, or **Audience**.\n\n| Source type | Description |\n| --- | --- |\n| Table | Use an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | Use custom SQL queries to fetch specific warehouse data and send them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | Filter data in your warehouse tables to create target customer lists and send them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\n#### **Use warehouse table as source**\n\nUnder **Select your source type**, choose **Table** and specify the below fields:\n\n*   **Schema**: Select the warehouse schema from the dropdown.\n*   **Table**: Choose the required table from which RudderStack syncs the data.\n*   **Primary key**: Select the column from the above table that uniquely identifies your records in the warehouse.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n[![Use table as source](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use model as source**\n\nUnder **Select your source type**, choose **Model** and click **Continue**.\n\nTo configure a model as source:\n\n1.  Enter an optional description and specify the custom SQL query in **Query** section.\n2.  Click **Run Query** to fetch the data preview.\n3.  Select the **Primary key** to use a column that uniquely identifies your warehouse records.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can set a primary key only after you run the SQL query successfully using the **Run Query** option.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` in SQL query of the model.\n\n[![Model configuration](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use audience as source**\n\nUnder **Select your source type**, choose **Audience** and follow these steps:\n\n1.  Configure your audience source by specifying the below fields:\n    \n    *   **Schema**: Select the warehouse schema from the dropdown.\n    *   **Table**: Choose the required table from which RudderStack syncs the data.\n    *   **Primary key**: Select the column from the above table that uniquely identify your records in the warehouse.\n\n[![Use audience as source](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n2.  Set your [audience conditions](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/#set-your-conditions).\n3.  Click **Preview** to see the resulting data. Then, click **Continue** to proceed.\n\n[![Audience configuration](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n### Review and complete setup\n\nTo make any changes to the warehouse credentials or source configuration, click the edit icon present next to those sections.\n\n[![Edit source configuration](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)\n\nReview your configuration and click **Create source** to complete the setup.\n\n## Connect destination\n\nYou can connect this source to an existing or new [destination](https://www.rudderstack.com/docs/destinations/overview/) to start using it. To connect to a destination later, click **Done** on the top right.\n\n[![Next steps](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)\n\nYou will then be redirected to the **Overview** page of the source where you get the option of connecting it to an existing or new destination.\n\n[![Add destination](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)\n\nSee [Set up Reverse ETL Connection](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/) section for more information.\n\n## Update source configuration and settings\n\nGo to the **Configuration** tab of your Reverse ETL source to update the configuration depending on your source type:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot change the source type on this page.\n\n[![Update source configuration](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)\n\nThe below table lists the options you can update:\n\n| Source type | Configurable options |\n| --- | --- |\n| Table | [Schema, Table, Primary key](#use-warehouse-table-as-source) |\n| Model | *   [Model settings](#use-model-as-source)<br>*   [Primary key](#use-model-as-source)<br><br>**Note**: You can set the primary key only after the SQL query runs successfully. |\n| Audience | *   [Schema, Table, Primary key](#use-audience-as-source)<br>*   [Audience conditions](#use-audience-as-source) |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> After updating the configuration, the next sync will be a full sync.\n\nGo to the **Settings** tab to:\n\n*   Get your source ID.\n*   Change your warehouse credentials.\n*   [Set up custom alerts](https://www.rudderstack.com/docs/data-governance/alerts/) for your Reverse ETL source.\n*   Delete the source permanently.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot delete a source that is connected to any destination.\n\n[![Edit source settings](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)\n\n## FAQ\n\n#### **What do the three validations under Verifying Credentials imply?**\n\nWhen setting up a Reverse ETL source, you will see the following three validations under the **Verifying Credentials** option once you proceed after entering the warehouse credentials:\n\n[![Validating credentials](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)\n\nThese options are explained below:\n\n*   **Verifying Connection**: This option indicates that RudderStack is trying to connect to the warehouse with the provided warehouse credentials.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, it means that one or more fields specified in the warehouse credentials are incorrect. Verify your credentials in this case.\n\n*   **Able to List Schema**: This option checks if RudderStack is able to fetch all schema details by using the provided credentials.\n*   **Able to Access RudderStack Schema**: This option implies that RudderStack is able to access the `_rudderstack` schema you have created by running all commands in the [User Permissions](#creating-the-rudderstack-schema-and-granting-permissions) section.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, verify if you have successfully created the `_rudderstack` schema and given RudderStack the required permissions to access it.\n\n#### **What is the difference between the Table, Model, and Audience options when creating a Reverse ETL source?**\n\nWhen creating a new Reverse ETL source, you are presented with the following options from which RudderStack syncs the data:\n\n| Source type | Description |\n| --- | --- |\n| Table | RudderStack uses an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | RudderStack uses custom SQL queries to fetch specific warehouse data and sends them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | RudderStack filters data in your warehouse tables to create target customer lists and sends them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Google BigQuery Reverse ETL Source | RudderStack Docs",
  "description": "Send data from Google BigQuery to your entire stack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/get-started/what-is-rudderstack/",
  "markdown": "# Introduction to RudderStack | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Introduction to RudderStack | RudderStack Docs",
  "description": "Customer data platform for developers to build smarter customer data pipelines.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/",
  "markdown": "# Flutter | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Flutter | RudderStack Docs",
  "description": "Use the RudderStack Flutter SDK to send events from your Flutter applications to various destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/overview/",
  "markdown": "# Sources Overview | RudderStack Docs\n\nLearn about different event source types offered by RudderStack, namely Event Streams, Cloud Extract, and Reverse ETL.\n\n* * *\n\n*     2 minute read  \n    \n\nThe event data originates via a **source** in RudderStack. The most common event sources are your apps and web properties, but can include third-party cloud apps, server integrations, and even your own data warehouse.\n\nThe following sections provide more detail on the available source types, with links to the setup guides for each source.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> If you’re new to RudderStack, going through the [Quickstart](https://www.rudderstack.com/docs/get-started/quickstart/) guide to create your first source is recommended.\n\n## Event Streams\n\nRudderStack’s [Event Streams](https://www.rudderstack.com/docs/sources/event-streams/) feature lets you collect event data from all your sites and applications and route it to a wide array of customer tools and data warehouses.\n\n### SDKs\n\nRudderStack provides open source [SDKs](https://www.rudderstack.com/docs/sources/event-streams/sdks/) for web, mobile, and server applications:\n\n#### Web\n\nTrack customer event data from your website and web apps and send it to the specified destinations:\n\n*   [AMP](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-amp-analytics/)\n*   [JavaScript](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/)\n\n#### Mobile\n\nUse native mobile SDKs for the mobile operating systems and development frameworks:\n\n*   [Android](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/)\n*   [Cordova](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-cordova-sdk/)\n*   [Flutter](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/)\n*   [iOS](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/)\n*   [React Native](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-react-native-sdk/)\n*   [Unity](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-unity-sdk/)\n\n#### Server\n\nUse server-side SDKs to track event data from your backend applications and send it to the specified destinations:\n\n*   [.NET](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-dotnet-sdk/)\n*   [Go](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-go-sdk/)\n*   [Java](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-java-sdk/)\n*   [Node.js](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/)\n*   [PHP](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-php-sdk/)\n*   [Python](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-python-sdk/)\n*   [Ruby](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ruby-sdk/)\n*   [Rust](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-rust-sdk/)\n\n### Cloud Apps\n\nRudderStack lets you ingest event data from your [cloud apps](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/) and route it to the desired destinations.\n\n*   [Adjust](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/adjust/)\n*   [AppsFlyer](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/appsflyer/)\n*   [App Center](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/appcenter/)\n*   [Auth0](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/auth0/)\n*   [Braze](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/braze-currents/)\n*   [Canny](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/canny/)\n*   [ClickUp](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/clickup/)\n*   [Customer.io](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/customerio/)\n*   [Extole](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/extole/)\n*   [Formsort](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/formsort/)\n*   [Gainsight PX](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/gainsight-px/)\n*   [Iterable](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/iterable/)\n*   [Looker](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/looker/)\n*   [Mailjet](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/mailjet/)\n*   [Mailmodo](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/mailmodo/)\n*   [Monday](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/monday/)\n*   [MoEngage](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/moengage/)\n*   [Olark](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/olark/)\n*   [Ortto](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/ortto/)\n*   [PagerDuty](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/pagerduty/)\n*   [Pipedream](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/pipedream/)\n*   [PostHog](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/posthog/)\n*   [Refiner](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/refiner/)\n*   [RevenueCat](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/revenuecat/)\n*   [SatisMeter](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/satismeter/)\n*   [Segment](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/segment/)\n*   [Shopify](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/shopify/)\n*   [Signl4](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/signl4/)\n*   [Slack](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/slack/)\n\nWith RudderStack [Cloud Extract](https://www.rudderstack.com/docs/sources/extract/), you can collect the raw events and data from different cloud tools such as Facebook Ads, Google Analytics, Marketo, HubSpot, Stripe, and more. You can then build efficient ELT pipelines from these cloud apps to your data warehouse.\n\n*   [ActiveCampaign](https://www.rudderstack.com/docs/sources/extract/activecampaign/)\n*   [Amplitude](https://www.rudderstack.com/docs/sources/extract/amplitude/)\n*   [Bing Ads](https://www.rudderstack.com/docs/sources/extract/bing-ads/)\n*   [Chargebee](https://www.rudderstack.com/docs/sources/extract/chargebee/)\n*   [Customer.io](https://www.rudderstack.com/docs/sources/extract/customerio/)\n*   [Facebook Ads](https://www.rudderstack.com/docs/sources/extract/facebook-ads/)\n*   [Freshdesk](https://www.rudderstack.com/docs/sources/extract/freshdesk/)\n*   [Google Ads](https://www.rudderstack.com/docs/sources/extract/google-adwords/)\n*   [Google Analytics](https://www.rudderstack.com/docs/sources/extract/google-analytics/)\n*   [Google Analytics 4](https://www.rudderstack.com/docs/sources/extract/google-analytics/)\n*   [Google Search Console](https://www.rudderstack.com/docs/sources/extract/google-search-console/)\n*   [Google Sheets](https://www.rudderstack.com/docs/sources/extract/google-sheets/)\n*   [HubSpot](https://www.rudderstack.com/docs/sources/extract/hubspot/)\n*   [Intercom](https://www.rudderstack.com/docs/sources/extract/intercom/)\n*   [Iterable](https://www.rudderstack.com/docs/sources/extract/iterable/)\n*   [Klaviyo](https://www.rudderstack.com/docs/sources/extract/klaviyo/)\n*   [Mailchimp](https://www.rudderstack.com/docs/sources/extract/mailchimp/)\n*   [Marketo](https://www.rudderstack.com/docs/sources/extract/marketo/)\n*   [Marketo v2](https://www.rudderstack.com/docs/sources/extract/marketo-v2/)\n*   [Mixpanel](https://www.rudderstack.com/docs/sources/extract/mixpanel/)\n*   [Pipedrive](https://www.rudderstack.com/docs/sources/extract/pipedrive/)\n*   [Recurly](https://www.rudderstack.com/docs/sources/extract/recurly/)\n*   [Salesforce](https://www.rudderstack.com/docs/sources/extract/salesforce/)\n*   [SendGrid](https://www.rudderstack.com/docs/sources/extract/sendgrid/)\n*   [Stripe](https://www.rudderstack.com/docs/sources/extract/stripe/)\n*   [Zendesk Chat](https://www.rudderstack.com/docs/sources/extract/zendesk-chat/)\n*   [Zendesk Support](https://www.rudderstack.com/docs/sources/extract/zendesk-support/)\n\n## Reverse ETL\n\nWith RudderStack’s [Reverse ETL](https://www.rudderstack.com/docs/sources/reverse-etl/) capabilities, you can use your data warehouse as a data source. You can tap into your warehouse data and enrich data pipelines elsewhere in your stack, for enhanced customization, personalization, and targeting.\n\n*   [Amazon Redshift](https://www.rudderstack.com/docs/sources/reverse-etl/amazon-redshift/)\n*   [Amazon S3](https://www.rudderstack.com/docs/sources/reverse-etl/amazon-s3/)\n*   [Databricks](https://www.rudderstack.com/docs/sources/reverse-etl/databricks/)\n*   [Google BigQuery](https://www.rudderstack.com/docs/sources/reverse-etl/google-bigquery/)\n*   [MySQL](https://www.rudderstack.com/docs/sources/reverse-etl/mysql/)\n*   [PostgreSQL](https://www.rudderstack.com/docs/sources/reverse-etl/postgresql/)\n*   [Snowflake](https://www.rudderstack.com/docs/sources/reverse-etl/snowflake/)\n*   [Trino](https://www.rudderstack.com/docs/sources/reverse-etl/trino/)\n\n## API\n\nIt is recommended to use a native SDK for tracking and routing user events from your sources. RudderStack’s SDKs offer automatic tagging of user context, event batching, and retry functionality during delivery failure.\n\nIf you don’t see a supported SDK or library for your environment, you can send your data directly to the RudderStack [HTTP API](https://www.rudderstack.com/docs/api/http-api/).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Sources Overview | RudderStack Docs",
  "description": "Learn about different event source types offered by RudderStack, namely Event Streams, Cloud Extract, and Reverse ETL.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/installation-and-setup/",
  "markdown": "# Flutter SDK Installation and Setup\n\nInstall and set up the Flutter SDK.\n\n* * *\n\n*     6 minute read  \n    \n\nThis guide walks you through the SDK installation and initialization steps in detail.\n\n## Prerequisites\n\n*   Set up the [Flutter development environment](https://flutter.dev/docs/get-started/install) in your system.\n*   Sign up for [RudderStack Cloud](https://app.rudderstack.com/signup).\n*   [Set up a Flutter source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in your [RudderStack Cloud dashboard](https://app.rudderstack.com/). Note the **Write Key** for this source:\n\n[![Flutter source write key](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-write-key-new.webp)\n\n*   Note the [data plane URL](https://www.rudderstack.com/docs/dashboard-guides/overview/#data-plane-url) present in your RudderStack dashboard.\n\n## Installing the SDK\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Starting from v1.0.2, the RudderStack Flutter SDK is migrated to [Null Safety](https://dart.dev/null-safety).\n\nFollow these steps to add the Flutter SDK through [`pub`](https://pub.dev/packages/rudder_sdk_flutter):\n\n1.  Open `pubspec.yaml` and add `rudder_sdk_flutter` under `dependencies` section:\n\n```\ndependencies:\n  rudder_sdk_flutter: ^2.0.1\n```\n\n2.  Navigate to your application’s root folder and install all the required dependencies with the following command:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you are using Proguard full mode to optimize your app, add the lines specified in the [FAQ](#do-i-need-to-add-anything-to-my-android-proguard-rules) to your Android ProGuard rules.\n\n### Installing the SDK for the web\n\nTo install and use the Flutter SDK in your web app, follow the above steps to add the Flutter SDK. Additionally, copy the following snippet in the `<head>` section of your web page:\n\n```\n<script>\nrudderanalytics = window.rudderanalytics = [];\nfor (var methods = [\"load\", \"page\", \"track\", \"identify\", \"alias\", \"group\", \"ready\", \"reset\", \"getAnonymousId\", \"setAnonymousId\"], i = 0; i < methods.length; i++) {\n  var method = methods[i];\n  rudderanalytics[method] = function(a) {\n    return function() {\n      rudderanalytics.push([a].concat(Array.prototype.slice.call(arguments)))\n    }\n  }(method)\n}\n</script>\n\n<script src=\"https://cdn.rudderlabs.com/v1/rudder-analytics.min.js\"></script>\n```\n\n## Initializing the SDK\n\n1.  Import the SDK using the following snippet:\n\n```\nimport 'package:rudder_sdk_flutter_platform_interface/platform.dart';\nimport 'package:rudder_sdk_flutter/RudderController.dart';\n```\n\n2.  Add the following code in your application:\n\n```\nfinal RudderController rudderClient = RudderController.instance;\nRudderLogger.init(RudderLogger.VERBOSE);\nRudderConfigBuilder builder = RudderConfigBuilder();\nbuilder.withDataPlaneUrl(<DATA_PLANE_URL>);\nbuilder.withTrackLifecycleEvents(true);\nrudderClient.initialize(<WRITE_KEY>,config: builder.build());\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n\nThe `initialize` method has the following signature:\n\n| Name | Type | Description |\n| --- | --- | --- |\n| `writeKey`  <br>Required | String | Flutter source’s write key. |\n| `config` | `RudderConfig` | RudderStack client configuration. |\n\n## SDK initialization options\n\nYou can configure the SDK behavior using the `RudderConfig` object passed to the `rudderClient.initialize()` call during initialization.\n\nYou can create the object of `RudderConfig` class by either:\n\n*   Directly calling its constructor using the parameters documented below, or\n*   Using the `RudderConfigBuilder` class APIs as per your requirement\n\n| `RudderConfig` constructor parameter | `RudderConfigBuilder` class API | Type | Description | Default value |\n| --- | --- | --- | --- | --- |\n| `dataPlaneUrl` | `withDataPlaneUrl()` | String | The data plane URL. | `https://hosted.rudderlabs.com` |\n| `flushQueueSize` | `withFlushQueueSize()` | int | Number of events in a batch request to the server. | `30` |\n| `isDebug` | `withDebug()` | bool | When enabled, sets the log level as `debug`. For more information, refer to the [Debugging](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/features-and-usage/#debugging) section. | `false` |\n| `logLevel` | `withLogLevel()` | int | Controls the logs you want to see from the Flutter SDK. | `RudderLogger.RudderLogLevel.NONE` |\n| `mobileConfig` | `withMobileConfig()` | MobileConfig | Refer to the [`mobileConfig` parameters](#mobileconfig-parameters) section below. | \\-  |\n| `webConfig` | `withWebConfig()` | WebConfig | Refer to the [`webConfig` parameters](#webconfig-parameters) section below. | \\-  |\n| `controlPlaneUrl` | `withControlPlaneUrl()` | String | This parameter should be changed **only if** you are self-hosting the control plane. Refer to the [Self-hosted control plane](#self-hosted-control-plane) section for more information. The SDK will add `/sourceConfig` along with this URL to fetch the configuration. | `https://api.rudderlabs.com` |\n\n### mobileConfig parameters\n\nThe `mobileConfig` object contains the mobile-specific configuration parameters for the Flutter SDK.\n\n| Parameter | Type | Description | Default value |\n| --- | --- | --- | --- |\n| `dbCountThreshold` | int | Number of events to be saved in the SQLite database. Once this limit is reached, the older events are deleted from the database. | `10000` |\n| `sleepTimeOut` | int | Minimum waiting time to flush the events to the server. | `10 seconds` |\n| `configRefreshInterval` | int | Fetches the config from the dashboard after this specified time. | `2` |\n| `trackLifecycleEvents` | bool | Determines if the SDK will capture application life cycle events automatically. | `true` |\n| `autoCollectAdvertId` | bool | Determines if the SDK will collect the advertisement ID. | `false` |\n| `recordScreenViews` | bool | When enabled, the SDK automatically records the screens viewed by the user. | `false` |\n| `dbEncryption` | `RudderDBEncryption` | Specify whether to encrypt/decrypt the database using the specified key. See [Encrypting RudderStack databases](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/features-and-usage/#encrypting-rudderstack-databases) for more information. | \\-  |\n\n### webConfig parameters\n\nThe `webConfig` object contains the configuration parameters for using the SDK in the Flutter web applications.\n\n| Parameter | Type | Description | Default value |\n| --- | --- | --- | --- |\n| `destSDKBaseURL` | String | The SDK loads the integration from this path. |     |\n| `useBeacon` | bool | If enabled, the SDK sends the event payloads via the `navigator.sendBeacon()` utility | `False` |\n| `secureCookie` | bool | If enabled, the SDK sends the cookie to the storage backend via HTTPS. | `False` |\n| `loadIntegration` | bool | If disabled, the destination SDKs are not fetched by the SDK. | `True` |\n| `cookieConsentManagers` | Object | Refer to the [cookieConsentManager](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#cookieconsentmanager) section for more information. | \\-  |\n| `beaconFlushQueueInterval` | int | The SDK flushes the queue after this time interval (in milliseconds). | 600000 |\n| `maxBeaconItems` | int | The SDK flushes the queue when this number of events is reached. | 10  |\n| `maxItems` | int | Maximum number of events kept in the storage. | 100 |\n| `maxAttempts` | int | Maximum number of attempts the SDK makes to send the event to the destination. | 10  |\n| `backoffFactor` | int | Refers to the exponential base. | 2   |\n| `minRetryDelay` | int | The minimum delay expected before the SDK retries sending an event (in ms) | 1000 |\n| `maxRetryDelay` | int | The upper limit on the maximum delay for retrying an event (in ms) | 360000 |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n\n## Self-hosted control plane\n\nIf you are self-hosting RudderStack and using the [Control plane lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) utility to host your own control plane, then follow the steps in [this section](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/#using-sdk-sources-set-up-in-self-hosted-control-plane) and specify the `controlPlaneUrl` parameter in your [`RudderConfigBuilder`](#sdk-initialization-options) that points to the hosted configuration file.\n\n> ![danger](https://www.rudderstack.com/docs/images/danger.svg)\n> \n> You should not pass the `controlPlaneUrl` parameter during SDK initialization if you are using [RudderStack Cloud](https://app.rudderstack.com/). This parameter is supported **only** if you are using the open source [Control plane lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) utility to set up your own control plane.\n\n## FAQ\n\n#### Do I need to add anything to my Android ProGuard rules?\n\nAdd the following lines to your Android ProGuard rules if you are using Proguard full mode to optimize your app:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Add the below rules if you are using the Android SDK older than v1.20.0.\n> \n> Note that the rules are bundled in the SDK itself from v1.20.0 onwards.\n\n```\n// Reporter Module\n\n-keep class com.rudderstack.android.ruddermetricsreporterandroid.models.LabelEntity { *; }\n-keep class com.rudderstack.android.ruddermetricsreporterandroid.models.MetricEntity { *; }\n-keep class com.rudderstack.android.ruddermetricsreporterandroid.models.ErrorEntity { *; }\n\n// Required for the usage off TypeToken class in Utils.converToMap, Utils.convertToList\n\n-keep class com.google.gson.reflect.TypeToken { *; }\n-keep class * extends com.google.gson.reflect.TypeToken\n\n// Required for the serialization of SourceConfig once it is downloaded.\n\n-keep class com.google.gson.internal.LinkedTreeMap { *; }\n-keep class * implements java.io.Serializable { *; }\n-keep class com.rudderstack.rudderjsonadapter.RudderTypeAdapter { *; }\n-keep class * extends com.rudderstack.rudderjsonadapter.RudderTypeAdapter\n\n// Required to ensure the DefaultPersistenceProviderFactory is not removed by Proguard\n// and works as expected even when the customer is not using encryption feature.\n\n-dontwarn net.sqlcipher.Cursor\n-dontwarn net.sqlcipher.database.SQLiteDatabase$CursorFactory\n-dontwarn net.sqlcipher.database.SQLiteDatabase\n-dontwarn net.sqlcipher.database.SQLiteOpenHelper\n-keep class com.rudderstack.android.sdk.core.persistence.DefaultPersistenceProviderFactory { *; }\n\n// Required for the usage of annotations across reporter and web modules\n\n-dontwarn com.fasterxml.jackson.annotation.JsonIgnore\n-dontwarn com.squareup.moshi.Json\n-dontwarn com.fasterxml.jackson.annotation.JsonProperty\n\n// Required for Device Mode Transformations\n\n-keep class com.rudderstack.android.sdk.core.TransformationResponse { *; }\n-keep class com.rudderstack.android.sdk.core.TransformationResponseDeserializer { *; }\n-keep class com.rudderstack.android.sdk.core.TransformationRequest { *; }\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Flutter SDK Installation and Setup | RudderStack Docs",
  "description": "Install and set up the Flutter SDK.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/",
  "markdown": "# Event Stream Sources | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Event Stream Sources | RudderStack Docs",
  "description": "Ingest your event data into RudderStack using cloud apps and SDKs.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/reverse-etl/mysql/",
  "markdown": "# MySQL Reverse ETL Source | RudderStack Docs\n\nSend data from MySQL to your entire stack.\n\n* * *\n\n*     6 minute read  \n    \n\n[MySQL](https://www.mysql.com/) is a popular open source relational DBMS.\n\nRudderStack supports MySQL as a data source from which you can ingest data and route it to your desired downstream destinations.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This source is compatible with MySQL v8.0.0 and above.\n\n## Grant permissions\n\nBefore you set up MySQL as a source, you must grant certain permissions on your MySQL database for RudderStack to access data from it.\n\nRun the SQL queries listed in the following sections in the **exact order** to grant these permissions:\n\n### Step 1: Create user\n\nCreate a new user `RUDDER` with a password `<password>` in MySQL:\n\n```\nCREATE USER RUDDER IDENTIFIED BY '<password>';\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Set a strong and unique password for creating the user in MySQL.\n\n### Step 2: Create RudderStack schema and grant permissions\n\n1.  Create a dedicated schema `_rudderstack`.\n\n```\nCREATE SCHEMA _rudderstack;\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The `_rudderstack` schema is used by RudderStack for storing the state of each data sync. **Do not change this name**.\n\n2.  Grant full access to the schema `_rudderstack` for the user `RUDDER`.\n\n```\nGRANT ALL PRIVILEGES ON _rudderstack.* TO RUDDER;\n```\n\n### Step 3: Grant permissions on schema and table\n\n1.  Grant access to the user `RUDDER` to read data from tables in `<YOUR_SCHEMA>`:\n\n```\nGRANT SELECT ON  <YOUR_SCHEMA>.* TO RUDDER;\n```\n\n## Set up MySQL source in RudderStack\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  On the **Connections** page, click **Add source**.\n3.  Under **Sources**, click **Reverse ETL** and select **MySQL**.\n\n### Configure warehouse credentials\n\nYou can choose to proceed with your existing warehouse credentials if you have configured them in the RudderStack dashboard previously. Otherwise, click **Add new credentials** to add new credentials for your warehouse.\n\n*   **Host**: Enter the host name of your MySQL instance.\n*   **Port**: Enter the port number associated with the MySQL database instance.\n*   **Database**: Enter the database name in your MySQL instance from where RudderStack ingests the data.\n*   **User**: Enter the user name of your MySQL instance.\n*   **Password**: Enter the password for the above user.\n*   **SSL Mode**: Select the SSL mode from **false** or **skip-verify** depending on how RudderStack should connect to your MySQL instance.\n\nClick the **Verify** button on the top right. RudderStack will then [verify and validate your credentials](#faq). Once verified, click **Continue** to proceed.\n\n### Specify name and source type\n\n*   **Source name**: Assign a name to uniquely identify the source in the RudderStack dashboard.\n*   **Select your source type**: RudderStack lets you set up a Reverse ETL source from a warehouse **Table** or **Model**.\n\n| Source type | Description |\n| --- | --- |\n| Table | Use an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | Use custom SQL queries to fetch specific warehouse data and send them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n\n#### **Use warehouse table as source**\n\nUnder **Select your source type**, choose **Table** and specify the below fields:\n\n*   **Schema**: Select the warehouse schema from the dropdown.\n*   **Table**: Choose the required table from which RudderStack syncs the data.\n*   **Primary key**: Select the column from the above table that uniquely identifies your records in the warehouse.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n[![Use table as source](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use model as source**\n\nUnder **Select your source type**, choose **Model** and click **Continue**.\n\nTo configure a model as source:\n\n1.  Enter an optional description and specify the custom SQL query in **Query** section.\n2.  Click **Run Query** to fetch the data preview.\n3.  Select the **Primary key** to use a column that uniquely identifies your warehouse records.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can set a primary key only after you run the SQL query successfully using the **Run Query** option.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` in SQL query of the model.\n\n[![Model configuration](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n### Review and complete setup\n\nTo make any changes to the warehouse credentials or source configuration, click the edit icon present next to those sections.\n\n[![Edit source configuration](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)\n\nReview your configuration and click **Create source** to complete the setup.\n\n## Connect destination\n\nYou can connect this source to an existing or new [destination](https://www.rudderstack.com/docs/destinations/overview/) to start using it. To connect to a destination later, click **Done** on the top right.\n\n[![Next steps](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)\n\nYou will then be redirected to the **Overview** page of the source where you get the option of connecting it to an existing or new destination.\n\n[![Add destination](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)\n\nSee [Set up Reverse ETL Connection](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/) section for more information.\n\n## Update source configuration and settings\n\nGo to the **Configuration** tab of your Reverse ETL source to update the configuration depending on your source type:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot change the source type on this page.\n\n[![Update source configuration](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)\n\nThe below table lists the options you can update:\n\n| Source type | Configurable options |\n| --- | --- |\n| Table | [Schema, Table, Primary key](#use-warehouse-table-as-source) |\n| Model | *   [Model settings](#use-model-as-source)<br>*   [Primary key](#use-model-as-source)<br><br>**Note**: You can set the primary key only after the SQL query runs successfully. |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> After updating the configuration, the next sync will be a full sync.\n\nGo to the **Settings** tab to:\n\n*   Get your source ID.\n*   Change your warehouse credentials.\n*   [Set up custom alerts](https://www.rudderstack.com/docs/data-governance/alerts/) for your Reverse ETL source.\n*   Delete the source permanently.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot delete a source that is connected to any destination.\n\n[![Edit source settings](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)\n\n## FAQ\n\n#### **What do the three validations under Verifying Credentials imply?**\n\nWhen setting up a Reverse ETL source, you will see the following three validations under the **Verifying Credentials** option once you proceed after entering the warehouse credentials:\n\n[![Validating credentials](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)\n\nThese options are explained below:\n\n*   **Verifying Connection**: This option indicates that RudderStack is trying to connect to the warehouse with the provided warehouse credentials.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, it means that one or more fields specified in the warehouse credentials are incorrect. Verify your credentials in this case.\n\n*   **Able to List Schema**: This option checks if RudderStack is able to fetch all schema details by using the provided credentials.\n*   **Able to Access RudderStack Schema**: This option implies that RudderStack is able to access the `_rudderstack` schema you have created by running all commands in the [User Permissions](#creating-the-rudderstack-schema-and-granting-permissions) section.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, verify if you have successfully created the `_rudderstack` schema and given RudderStack the required permissions to access it.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "MySQL Reverse ETL Source | RudderStack Docs",
  "description": "Send data from MySQL to your entire stack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/get-started/quickstart/",
  "markdown": "# Quickstart Guides | RudderStack Docs\n\nTest RudderStack’s pipelines in less than 10 minutes.\n\n* * *\n\n*     2 minute read  \n    \n\nThe easiest way to get started with RudderStack is set up a [data pipeline](https://www.rudderstack.com/docs/data-pipelines/overview/) to collect data from a variety of cloud and warehouse sources, then automatically route them to other tools in your stack.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> RudderStack’s pipelines simplify customer data collection and integration across your entire stack, eliminating expensive data wrangling and custom solutions.\n\nRudderStack offers three types of data pipelines:\n\n*   [Event Stream](https://www.rudderstack.com/docs/data-pipelines/event-stream/)\n*   [Reverse ETL](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/)\n*   [Cloud Extract (ETL)](https://www.rudderstack.com/docs/data-pipelines/cloud-extract/)\n\n## Event Stream\n\nRudderStack’s [Event Stream](https://www.rudderstack.com/docs/data-pipelines/event-stream/) feature helps you collect behavioral data from your websites, track user engagements from your mobile apps, and complement client-side tracking with events from your backend.\n\nWith over 200 pre-built integrations, including 16 SDKs, you can stream data directly to your warehouse and route events in real-time to all the downstream tools in no time.\n\nSee the [Event Stream Quickstart](https://www.rudderstack.com/docs/data-pipelines/event-stream/quickstart/) guide to set up a Event Stream pipeline in less than 15 minutes.\n\n## Reverse ETL\n\nA data warehouse is where you collect all of your data and discover your most valuable insights. However, activating those insights in other tools within your stack can be a big challenge.\n\nWith RudderStack’s [Reverse ETL](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/) feature, your teams can send the enriched warehouse data to any downstream tool for activation use cases like personalization, engagement, and more.\n\nSee the [Reverse ETL Quickstart](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/quickstart/) guide to set up and activate your Reverse ETL pipeline.\n\nRudderStack’s [Cloud Extract ETL](https://www.rudderstack.com/docs/data-pipelines/cloud-extract/) feature, you can simplify data extraction (ETL) from your cloud applications into a centralized data warehouse repository, saving time and resources.\n\nYou can automate this process to run on a scheduled basis, reducing the need for manual intervention and streamlining data workflows. This also ensures that data is consistently updated and available for analysis in a timely manner.\n\n## Support\n\nFor any questions on using RudderStack, you can:\n\n*   Start a conversation in our [Community Slack](https://rudderstack.com/join-rudderstack-slack-community).\n*   Drop an email to [RudderStack support](mailto:support@rudderstack.com).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Quickstart Guides | RudderStack Docs",
  "description": "Test RudderStack's pipelines in less than 10 minutes.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/reverse-etl/databricks/",
  "markdown": "# Databricks Reverse ETL Source | RudderStack Docs\n\nSend data from Databricks to your entire stack.\n\n* * *\n\n*     8 minute read  \n    \n\n[Databricks](https://databricks.com/) is a data analytics platform that lets you easily integrate with open source libraries. It offers a simple collaborative environment to run interactive and scheduled data analysis workloads.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> You can now ingest data into RudderStack by running queries on your Databricks cluster or [SQL warehouse](https://docs.databricks.com/en/sql/admin/create-sql-warehouse.html).\n\n## Grant permissions\n\nBefore you set up Databricks as a source, you must grant certain permissions in your Databricks instance for RudderStack to access data from it.\n\nRun the queries listed in the following sections in the **exact order** to grant the required permissions:\n\n### Step 1: Add user\n\nAdd a new user (for example, [user@example.com](mailto:user@example.com)) by following the steps in the [Databricks documentation](https://docs.databricks.com/administration-guide/users-groups/users.html#add-a-user).\n\n### Step 2: Create RudderStack schema and grant permissions to the role\n\n1.  Create a dedicated schema `_rudderstack`.\n\n```\nCREATE SCHEMA `_rudderstack`;\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The `_rudderstack` schema is used by RudderStack for storing the state of each data sync. **Do not change this name**.\n\n2.  Grant full access to the schema `_rudderstack` for the user created in step 1.\n\n```\nGRANT ALL PRIVILEGES ON SCHEMA `_rudderstack` TO `user@example.com`\n```\n\nReplace `user@example.com` with the user created in step 1.\n\n## Set up Databricks source in RudderStack\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  On the **Connections** page, click **Add source**.\n3.  Under **Sources**, click **Reverse ETL** and select **Databricks**.\n\n### Configure warehouse credentials\n\nYou can choose to proceed with your existing warehouse credentials if you have configured them in the RudderStack dashboard previously. Otherwise, click **Add new credentials** to add the connection details of your Databricks cluster or SQL warehouse:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For most use cases, RudderStack recommends using a SQL warehouse over a cluster as they generally cost less and are faster to spin up. In contrast, clusters are used for much larger operations that require more resources.\n\n*   **Host**: Enter the server hostname.\n*   **Port**: Enter the port number.\n*   **Path**: Enter the HTTP path.\n*   **Token**: Enter the personal access token.\n*   **Catalog**: Enter the name of your Unity catalog. See [Databricks documentation](https://docs.databricks.com/en/data-governance/unity-catalog/create-catalogs.html#view-catalog-details) for more information on getting the catalog details.\n\nSee the following FAQs for more information on obtaining the host, port, path, and token for your Databricks instance depending on type:\n\n*   [Databricks cluster](#databricks-cluster-connection-credentials)\n*   [SQL warehouse](#databricks-sql-warehouse-connection-credentials)\n\nClick the **Verify** button on the top right. RudderStack will then [verify and validate your credentials](#faq). Once verified, click **Continue** to proceed.\n\n### Specify name and source type\n\nSpecify the source name and type in this step.\n\n*   **Source name**: Assign a name to uniquely identify the source in the RudderStack dashboard.\n*   **Select your source type**: RudderStack lets you set up a Reverse ETL source from a warehouse **Table**, **Model**, or **Audience**.\n\n| Source type | Description |\n| --- | --- |\n| Table | Use an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | Use custom SQL queries to fetch specific warehouse data and send them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | Filter data in your warehouse tables to create target customer lists and send them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\n#### **Use warehouse table as source**\n\nUnder **Select your source type**, choose **Table** and specify the below fields:\n\n*   **Schema**: Select the warehouse schema from the dropdown.\n*   **Table**: Choose the required table from which RudderStack syncs the data.\n*   **Primary key**: Select the column from the above table that uniquely identifies your records in the warehouse.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n[![Use table as source](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use model as source**\n\nUnder **Select your source type**, choose **Model** and click **Continue**.\n\nTo configure a model as source:\n\n1.  Enter an optional description and specify the custom SQL query in **Query** section.\n2.  Click **Run Query** to fetch the data preview.\n3.  Select the **Primary key** to use a column that uniquely identifies your warehouse records.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can set a primary key only after you run the SQL query successfully using the **Run Query** option.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` in SQL query of the model.\n\n[![Model configuration](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use audience as source**\n\nUnder **Select your source type**, choose **Audience** and follow these steps:\n\n1.  Configure your audience source by specifying the below fields:\n    \n    *   **Schema**: Select the warehouse schema from the dropdown.\n    *   **Table**: Choose the required table from which RudderStack syncs the data.\n    *   **Primary key**: Select the column from the above table that uniquely identify your records in the warehouse.\n\n[![Use audience as source](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n2.  Set your [audience conditions](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/#set-your-conditions).\n3.  Click **Preview** to see the resulting data. Then, click **Continue** to proceed.\n\n[![Audience configuration](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n### Review and complete setup\n\nTo make any changes to the warehouse credentials or source configuration, click the edit icon present next to those sections.\n\n[![Edit source configuration](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)\n\nReview your configuration and click **Create source** to complete the setup.\n\n## Connect destination\n\nYou can connect this source to an existing or new [destination](https://www.rudderstack.com/docs/destinations/overview/) to start using it. To connect to a destination later, click **Done** on the top right.\n\n[![Next steps](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)\n\nYou will then be redirected to the **Overview** page of the source where you get the option of connecting it to an existing or new destination.\n\n[![Add destination](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)\n\nSee [Set up Reverse ETL Connection](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/) section for more information.\n\n## Update source configuration and settings\n\nGo to the **Configuration** tab of your Reverse ETL source to update the configuration depending on your source type:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot change the source type on this page.\n\n[![Update source configuration](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)\n\nThe below table lists the options you can update:\n\n| Source type | Configurable options |\n| --- | --- |\n| Table | [Schema, Table, Primary key](#use-warehouse-table-as-source) |\n| Model | *   [Model settings](#use-model-as-source)<br>*   [Primary key](#use-model-as-source)<br><br>**Note**: You can set the primary key only after the SQL query runs successfully. |\n| Audience | *   [Schema, Table, Primary key](#use-audience-as-source)<br>*   [Audience conditions](#use-audience-as-source) |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> After updating the configuration, the next sync will be a full sync.\n\nGo to the **Settings** tab to:\n\n*   Get your source ID.\n*   Change your warehouse credentials.\n*   [Set up custom alerts](https://www.rudderstack.com/docs/data-governance/alerts/) for your Reverse ETL source.\n*   Delete the source permanently.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot delete a source that is connected to any destination.\n\n[![Edit source settings](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)\n\n## FAQ\n\n#### **Where can I obtain the connection credentials for the Databricks cluster?**\n\nTo obtain the **Host**, **Path**, and **Port** number, go to your Databricks account and follow these steps:\n\n1.  Go to the **Compute** tab and select your Databricks cluster.\n2.  Click **Advanced options** > **JDBC/ODBC** tab to find the required settings:\n\n[![Select Databricks source in RudderStack](https://www.rudderstack.com/docs/images/warehouse-actions-sources/connection-settings-databricks.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/connection-settings-databricks.webp)\n\nTo obtain the **Token**, go to the **Settings** > **User Settings** in your Databricks account and generate a new personal access token:\n\n[![Select Databricks source in RudderStack](https://www.rudderstack.com/docs/images/warehouse-actions-sources/connection-settings-databricks-2.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/connection-settings-databricks-2.webp)\n\n#### **Where can I obtain the connection credentials for the SQL warehouse?**\n\nTo obtain the **Host**, **Path**, and **Port** number for your SQL warehouse, go to your Databricks account and follow these steps:\n\n1.  Go to the **SQL warehouses** tab and select your warehouse.\n2.  Click the **Connection details** tab to find the **Host**, **Path**, and **Port** number.\n\n[![SQL warehouse connection details](https://www.rudderstack.com/docs/images/warehouse-actions-sources/connection-settings-sql-warehouse.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/connection-settings-sql-warehouse.webp)\n\nTo obtain the **Token**, go to the **Settings** > **User Settings** in your Databricks account and generate a new personal access token:\n\n[![Databricks access token](https://www.rudderstack.com/docs/images/warehouse-actions-sources/connection-settings-databricks-azure-token.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/connection-settings-databricks-azure-token.webp)\n\n#### **What do the three validations under Verifying Credentials imply?**\n\nWhen setting up a Reverse ETL source, you will see the following three validations under the **Verifying Credentials** option once you proceed after entering the warehouse credentials:\n\n[![Validating credentials](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)\n\nThese options are explained below:\n\n*   **Verifying Connection**: This option indicates that RudderStack is trying to connect to the warehouse with the provided warehouse credentials.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, it means that one or more fields specified in the warehouse credentials are incorrect. Verify your credentials in this case.\n\n*   **Able to List Schema**: This option checks if RudderStack is able to fetch all schema details by using the provided credentials.\n*   **Able to Access RudderStack Schema**: This option implies that RudderStack is able to access the `_rudderstack` schema you have created by running all commands in the [User Permissions](#creating-the-rudderstack-schema-and-granting-permissions) section.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, verify if you have successfully created the `_rudderstack` schema and given RudderStack the required permissions to access it.\n\n#### **What is the difference between the Table, Model, and Audience options when creating a Reverse ETL source?**\n\nWhen creating a new Reverse ETL source, you are presented with the following options from which RudderStack syncs the data:\n\n| Source type | Description |\n| --- | --- |\n| Table | RudderStack uses an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | RudderStack uses custom SQL queries to fetch specific warehouse data and sends them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | RudderStack filters data in your warehouse tables to create target customer lists and sends them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\n#### **Does my SQL warehouse/cluster need to be active when running the validations?**\n\nYes - otherwise, the validations might fail.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Databricks Reverse ETL Source | RudderStack Docs",
  "description": "Send data from Databricks to your entire stack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/",
  "markdown": "# Cloud Apps Sources | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Cloud Apps Sources | RudderStack Docs",
  "description": "Ingest your event data from your cloud apps into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/get-started/rudderstack-cloud/",
  "markdown": "# RudderStack Cloud | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "RudderStack Cloud | RudderStack Docs",
  "description": "Learn the RudderStack Cloud dashboard workflow.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/supported-api/",
  "markdown": "# Flutter SDK API | RudderStack Docs\n\nTrack and send events using the various Flutter SDK API.\n\n* * *\n\n*     7 minute read  \n    \n\nThe Flutter SDK provides a comprehensive API that lets you track and send your event data to any destination.\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` event is shown below:\n\n```\nRudderTraits traits = RudderTraits();\ntraits.putBirthdayDate(new DateTime.now());\ntraits.putEmail(\"alex@example.com\");\ntraits.putFirstName(\"Alex\");\ntraits.putLastName(\"Keener\");\ntraits.putGender(\"Male\");\ntraits.putPhone(\"5555555555\");\n\nAddress address = Address();\naddress.putCity(\"City\");\naddress.putCountry(\"USA\");\ntraits.putAddress(address);\n\ntraits.put(\"boolean\", true);\ntraits.put(\"integer\", 50);\ntraits.put(\"float\", 120.4);\ntraits.put(\"long\", 1234);\ntraits.put(\"string\", \"hello\");\ntraits.put(\"date\", new DateTime.now().millisecondsSinceEpoch);\n\nrudderClient.identify(\"1hKOmRA4GRlm\", traits: traits, options: null);\n```\n\nThe `identify` method has the following signature:\n\n| Name | Data Type | Description |\n| --- | --- | --- |\n| `userId`  <br>Required | String | Unique identifier for a user in your database. |\n| `traits` | `RudderTraits` | An optional dictionary of the user’s traits like `name` or `email`. |\n| `options` | `RudderOption` | Extra options for the `identify` event. |\n\nOnce a user is identified, the SDK persists all user information and passes it to the successive `track` or `screen` calls. To reset the user identification, you can use the [`reset`](#reset) method.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   For older SDK versions (< v2.5.0), the Flutter SDK captures the device ID and uses that as `anonymousId` for identifying the user. This helps the SDK to track the users across the application installation.\n> *   Starting from v2.5.0 the SDK uses a UUID as `anonymousId` instead of the device ID. If you are upgrading from a previous SDK version, see [How RudderStack sets anonymous ID](#how-sdk-sets-anonymous-id) for more information on how the SDK collects and sets `anonymousId`.\n\n## Setting a custom anonymous ID\n\nYou can use the following method to override and set your own `anonymousId`:\n\n```\nrudderClient.putAnonymousId(<ANONYMOUS_ID>);\n```\n\n### How device ID is set for Android and iOS\n\n*   On Android devices, the `deviceId` is assigned during the first boot. It remains consistent across the applications and installs and changes only after factory reset.\n*   According to [Apple documentation](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor), multiple apps from the same vendor are assigned the same `deviceId`. If all applications from the vendor are uninstalled and then reinstalled, then they are assigned a new `deviceId`.\n\n### Disabling device ID collection\n\nStarting from v2.5.0, you can disable the collection of device ID by setting `collectDeviceId` in the `MobileConfig` object to `false`.\n\nYou will observe the following changes when this property is set to false:\n\n*   The SDK does not send `context.device.id` as a part of the event payload.\n*   The SDK replaces the existing `anonymousId` (if it is equal to the device ID) with a UUID.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> These changes are introduced to make the SDK more compliant with all policies around the device ID collection.\n\n```\nMobileConfig mc = MobileConfig(collectDeviceId: false);\n    RudderConfigBuilder builder = RudderConfigBuilder();\n    builder\n      ..withMobileConfig(mc)\n      ..withDataPlaneUrl('DATA_PLANE_URL')\n      ..withDataResidencyServer(DataResidencyServer.US);\n    rudderClient.initialize('WRITE_KEY', config: builder.build(), options: null);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you are upgrading to the latest SDK from a previous version (< v2.5.0) **and** disabling device ID collection using `collectDeviceId:false`:\n> \n> *   Make sure your user transformations are not dependent on `context.device.id` as the SDK will not send this value in the event payload.\n> *   The `context.device.id` column in your warehouse destination will not be populated henceforth (it will still contain data populated by the previous SDK version).\n\n### How SDK sets anonymous ID\n\n#### **For direct/fresh SDK installation**\n\nRudderStack uses UUID as `anonymousId` regardless of whether [`collectDeviceId`](#collectdeviceid) is set to `true` or `false`.\n\n#### **For updating SDK from older version**\n\nIf you are updating your Flutter SDK from an older version (< v2.5.0), then:\n\n*   RudderStack will continue to use the device ID as `anonymousId` - it will not break the existing SDK behavior **until** you set `collectDeviceId` to `false`.\n*   If you set `collectDeviceId` to `false`, the SDK checks if the existing `anonymousId` is a device ID. If yes, it sets a new UUID as the `anonymousId`.\n*   If you have used the [`putAnonymousId`](#setting-a-custom-anonymous-id) method to set your own `anonymousId`, then the SDK will **not** modify it even if you set `collectDeviceId` to `false`.\n\n### Obtaining user traits\n\nThe following snippet shows how you can obtain the user traits after making an `identify` call:\n\n```\nMap context = await rudderClient.getRudderContext();\nprint(context[\"traits\"]);\n```\n\nFor the web apps, the `getRudderContext` API returns the user’s `traits` and `anonymousId`.\n\n### Setting a custom ID\n\nYou can pass a custom ID along with the standard `userId` in your `identify` calls. RudderStack adds this value under `context.externalId`.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack supports passing `externalId` only in the `identify` events. You must not pass this ID in other API calls like `track`, `page`, etc.\n\nThe following code snippet shows how to add `externalId` to your `identify` event:\n\n```\nRudderOption option = RudderOption();\noption.putExternalId(\"externalId\", \"some_external_id_1\");\nrudderClient.identify(\"1hKOmRA4GRlm\", options: option);\n```\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you track the user actions along with any properties associated with them.\n\nA sample `track` event is shown below:\n\n```\nRudderProperty property = RudderProperty();\nproperty.put(\"test_key_1\", \"test_key_1\");\nRudderProperty childProperty = RudderProperty();\nchildProperty.put(\"test_child_key_1\", \"test_child_value_1\");\nproperty.put(\"test_key_2\",childProperty);\nrudderClient.track(\"Test Event\", properties: property);\n```\n\nThe `track` method has the following signature:\n\n| Name | Type | Description |\n| --- | --- | --- |\n| `name`  <br>Required | String | Name of the tracked event. |\n| `properties` | `RudderProperty` | An optional dictionary of the properties associated with the event. |\n| `options` | `RudderOption` | Extra options for the `track` event. |\n\n### Lifecycle events\n\nThe Flutter SDK automatically tracks the following **optional** [application lifecycle events](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/):\n\n*   [`Application Installed`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-installed)\n*   [`Application Updated`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-updated)\n*   [`Application Opened`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-opened)\n*   [`Application Backgrounded`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-backgrounded)\n\nYou can disable these events by calling `withTrackLifeCycleEvents(false)` in the `RudderConfigBuilder` object while initializing the SDK. However, it is **highly recommended** to keep them enabled.\n\n## Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It lets you record the screen views on your mobile app along with other relevant information about the screen.\n\nFor the web apps, the SDK internally calls the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) API with the provided parameters.\n\nA sample `screen` event is shown below:\n\n```\nRudderProperty screenProperty = RudderProperty();\n  screenProperty.put(\"browser\", \"Chrome\");\n  screenProperty.put(\"device\", \"Macbook Pro\");\n  rudderClient.screen(\"Walmart Cart\",\n      category: \"home\",\n      properties: screenProperty,\n      options: null);\n```\n\nThe `screen` method has the following signature:\n\n| Name | Type | Description |\n| --- | --- | --- |\n| `screenName`  <br>Required | String | Name of the viewed screen. |\n| `category` | String | Category of the viewed page (web) or screen (mobile). |\n| `properties` | `RudderProperty` | An optional dictionary of the properties associated with the event. |\n| `options` | `RudderOption` | Extra options for the `screen` event. |\n\n### Automatic screen recording\n\nTo track the screen views of your Flutter app screens, follow these steps:\n\n1.  Define the `routes` with their names to the `Material App` constructor of the entry widget.\n2.  Register an instance of the custom navigation observer to the `Material App` constructor of the entry widget.\n\nThe following snippet includes the code for the above two steps:\n\n```\nimport 'package:flutter/material.dart';\nimport 'home_screen.dart';\nimport 'screen2.dart';\nimport 'screen3.dart';\nimport 'my_route_observer.dart';\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n// Step 2. Registering an instance of our custom navigation observer.\n      navigatorObservers: [\n        MyRouteObserver(),\n      ],\n      home: const HomeScreen(),\n// Step 1. Defining the named routes\n      routes: {\n        'screen2': (context) => const Screen2(),\n        'screen3': (context) => const Screen3(),\n      },\n    );\n  }\n}\n\nFuture<void> main() async {\n  runApp(const MyApp());\n}\n```\n\n3.  Finally, add the below code for the custom navigation observer used above:\n\n```\nimport 'package:flutter/material.dart';\nimport 'package:rudder_sdk_flutter/RudderController.dart';\n\nclass MyRouteObserver extends RouteObserver<PageRoute<dynamic>> {\n  @override\n  void didPush(Route<dynamic> route, Route<dynamic>? previousRoute) {\n    super.didPush(route, previousRoute);\n    if (route is PageRoute && route.settings.name != null) {\n      RudderController.instance.screen(route.settings.name!);\n    }\n  }\n\n  @override\n  void didPop(Route<dynamic> route, Route<dynamic>? previousRoute) {\n    super.didPop(route, previousRoute);\n    if (previousRoute is PageRoute && route is PageRoute) {\n      RudderController.instance.screen(previousRoute.settings.name!);\n    }\n  }\n}\n```\n\n## Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack does not persist the group traits across the sessions.\n\nA sample `group` event is shown below:\n\n```\nRudderTraits groupTraits = RudderTraits();\ngroupTraits.put(\"foo\", \"bar\");\ngroupTraits.put(\"foo1\", \"bar1\");\nrudderClient.group(\"sample_group_id\",\n    groupTraits: groupTraits, options: null);\n```\n\nThe `group` method has the following signature:\n\n| Name | Type | Description |\n| --- | --- | --- |\n| `groupId`  <br>Required | String | Unique identifier of the group in your database. |\n| `groupTraits` | `RudderTraits` | An optional dictionary of the group’s traits like `name` or `email`. |\n| `options` | `RudderOption` | Extra options for the `group` event. |\n\n## Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly. You can use `alias` for managing the user’s identity in some of the downstream destinations.\n\nWhen you make an `alias` call, RudderStack replaces the old user ID with the new user ID and persists this identification across the sessions.\n\nA sample `alias` call is shown below:\n\n```\nrudderClient.alias(\"new_user_id\", options: null);\n```\n\nThe `alias` method has the following signature:\n\n| Name | Type | Description |\n| --- | --- | --- |\n| `newId`  <br>Required | String | The new user identifier. |\n| `options` | `RudderOption` | Extra options for the `alias` event. |\n\n## Reset\n\nYou can use the `reset` method to clear the persisted user traits. It also resets the `anonymousId` with a new UUID if you call it with `clearAnonymousId: true` (for SDK v2.5.0 and later).\n\n```\nrudderClient.reset(clearAnonymousId: true);\n```\n\nTo clear only user traits, call `reset` with `clearAnonymousId: false`.\n\n## FAQ\n\n#### How does the Flutter SDK handle events larger than 32KB?\n\nThe Flutter SDK drops any events greater than 32KB.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Flutter SDK API | RudderStack Docs",
  "description": "Track and send events using the various Flutter SDK API.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/features-and-usage/",
  "markdown": "# Flutter SDK Features and Usage\n\nFeatures and use cases that you can implement using the Flutter SDK.\n\n* * *\n\n*     8 minute read  \n    \n\nThis guide walks you through the different Flutter SDK features and how to use them.\n\n## Encrypting RudderStack databases\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is available in the Flutter SDK from v2.6.0 onwards.\n\nTo use the database encryption feature in the Flutter SDK, follow these steps:\n\n1.  Add the new `rudder_plugin_db_encryption` package to your app by adding the below line to your `pubspec.yml`:\n\n```\nrudder_plugin_db_encryption: ^1.0.1\n```\n\n2.  Run the following command:\n\n3.  Once the package is installed, import it by running the following command:\n\n```\nimport 'package:rudder_plugin_db_encryption/rudder_plugin_db_encryption.dart';\n```\n\n4.  Create a `RudderDBEncryption` object and pass it while initializing the SDK, as shown:\n\n```\nRudderDBEncryption dbEncryption = RudderDBEncryption(true, \"<encryption_key>\");\n    MobileConfig mc = MobileConfig(dbEncryption: dbEncryption);\n    RudderConfigBuilder builder = RudderConfigBuilder();\n    builder\n      ..withDataPlaneUrl(\"DATA_PLANE_URL\")\n      ..withMobileConfig(mc);\n    rudderClient.initialize(\"WRITE_KEY\", config: builder.build());\n```\n\nThe `RudderDBEncryption` class accepts the following parameters:\n\n| Parameter | Type | Description | Default value |\n| --- | --- | --- | --- |\n| `enable` | bool | Specifies whether to encrypt/decrypt the database. | `False` |\n| `encryption_key` | String | Key used to encrypt/decrypt the database. | \\-  |\n\nTo remove encryption from a database, configure the `RudderDBEncryption` object with your encryption key and set `enable` to `false`.\n\n**Instructions for iOS**\n\nThe `rudder_plugin_db_encryption` uses the [SQLCipher](https://github.com/sqlcipher/sqlcipher) Cocoapod under the hood to perform encryption. This Cocoapod requires the removal of any references to the standard SQLite system library for it to function as expected.\n\nIf you set up a project to inadvertently include a linking reference against the standard SQLite library before SQLCipher, it is possible that the application builds and runs correctly but does not use SQLCipher for encryption. This is not a problem for most projects but there are certain cases where unintentional SQLite linking can occur.\n\nOne such example is when using CocoaPods or some other sub-project that declares a dependency on the SQLite3 library. In this case, adding a pod to a project can **silently** modify the project settings in such a way that SQLCipher is not properly linked.\n\nYou can identify and fix the above linking issue during the development stage by looking for the below error log from the SDK:\n\n```\nRSDBPersistentManager: createDB: Cannot encrypt the Database as SQLCipher wasn't linked correctly.\n```\n\nTo fix the linking issue, add a linker flag to your project settings to ensure that the Xcode links SQLCipher before SQLite. Follow these steps:\n\n1.  Open the project-level build settings. These are the global project settings, not for the individual application target.\n2.  Locate the **Other Linker Flags** setting and add one of the following commands depending on how you are integrating SQLCipher into the app.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you are not adding `SQLCipher` into the app on your own and only using `rudder_plugin_db_encryption`, then see only the points 3 and 4 in the below table - depending on whether you are using `use_frameworks!` in your app’s `ios/Podfile`.\n\n| Scenario | Command | Notes |\n| --- | --- | --- |\n| When using SQLCipher commercial edition static libraries | `$(PROJECT_DIR)/sqlcipher-static-ios/ios-libs/libsqlcipher-ios.a` | Adjust according to the path to the `libsqlcipher-ios.a` you received as a part of the package. |\n| When using the `sqlcipher.xcodeproj` included in the SQLCipher Git repository | `$(BUILT_PRODUCTS_DIR)/libsqlcipher.a` | \\-  |\n| When using the SQLCipher CocoaPod with the `use_frameworks` Podfile setting enabled | `-framework SQLCipher` | \\-  |\n| When using the SQLCipher CocoaPod without the `use_frameworks` Podfile setting enabled | `-lSQLCipher` | \\-  |\n\nOnce the linker flag is added to the project-level build settings, you should see something like the below image:\n\n[![Project-level build settings](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-project-build-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-project-build-settings.webp)\n\nAfter adding the linker flag to your project-level build settings, check the target-level build settings to ensure SQLCipher is shown first, as seen below:\n\n[![Target-level build settings](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-target-build-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-target-build-settings.webp)\n\n## Gzipping requests\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is supported only for the mobile platforms.\n\nThe Flutter SDK automatically gzips event requests before sending it to the RudderStack backend (data plane) for processing. However, you can disable this by setting the `gzip` parameter to false while initializing the SDK:\n\n```\nMobileConfig mc = MobileConfig(gzip: false);\nRudderConfigBuilder builder = RudderConfigBuilder();\nbuilder\n    ..withDataPlaneUrl(\"DATA_PLANE_URL\")\n    ..withMobileConfig(mc);\nrudderClient.initialize(\"WRITE_KEY\", config: builder.build(), options: null);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This functionality is not available for the [web](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/installation-and-setup/#installing-the-sdk-for-the-web).\n\nRudderStack lets you opt out of tracking any user activity until the user gives their consent. You can do this using the SDK’s `optOut` API.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `optOut` API is available in the Flutter SDK starting from version `1.0.6`.\n\nThe `optOut` API takes a Boolean value to enable or disable tracking user activities. **This flag persists across device reboots**.\n\nThe following snippet highlights the use of the `optOut` API to disable user tracking:\n\n```\nrudderClient.optOut(true);\n```\n\nOnce the user grants their consent, you can enable user tracking by passing `false` to the `optOut` API:\n\n```\nrudderClient.optOut(false);\n```\n\n## Filtering events\n\nWhen sending events to a destination via the [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode), you can explicitly specify the events to be sent or discarded by allowlisting or denylisting them.\n\nRefer to the [Client-side Event Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) guide for more information on this feature.\n\n## Enabling/disabling events for specific destinations\n\nThe Flutter SDK lets you enable or disable sending events to a specific destination or all destinations connected to a source. You can specify these destinations by creating an object shown in the following snippet:\n\n```\nRudderOption options = new RudderOption();\n// represents all destinations connected to the source, the default value is true.\noptions.putIntegration(\"All\", false);\n// specifying destination by its display name\noptions.putIntegration(\"Mixpanel\", false);\n// specifying destination by its Factory object\noptions.putIntegrationWithFactory(Appcenter(), true);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure the destination names that you pass while specifying the destinations **match exactly** with the names listed in the [RudderStack dashboard](https://app.rudderstack.com/directory).\n\nYou can pass the destinations to the SDK in the following two ways:\n\n#### Method 1. Passing destinations while initializing the SDK\n\nThis is helpful when you want to enable or disable sending the events to the destinations across all the API calls made using the SDK.\n\n```\nrudderClient.initialize(WRITE_KEY,\n                    config: builder.build(),options: options);\n```\n\n#### Method 2. Passing destinations while making event calls\n\nThis approach is helpful when you want to:\n\n*   Enable or disable sending a particular event to the destination, or\n*   If you want to override the destinations passed while initializing the SDK, for a particular event.\n\n```\nRudderProperty property = RudderProperty();\nproperty.put(\"test_key_1\", \"test_key_1\");\nrudderClient.track(\"test_track_event\", properties: property, options: options);\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you specify the destinations while initializing the SDK and in the event, then the SDK considers only the destinations specified at the event level.\n\n### Setting custom objects for destinations\n\nStarting from v2.4.0, you can also use the `putIntegration` method on the `RudderOption` object to set custom objects used by the device mode destinations.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   This feature is applicable **only** for the web platform.\n> *   For mobile platforms, the `putIntegration` method accepts the custom objects but **does not** set them for the destination. Instead, it only enables sending events to that destination (equivalent to `options.putIntegration(\"<destination>\", true);`).\n\nAn example of setting a custom object to Google Analytics 4 via a `track` call:\n\n```\nRudderProperty property = RudderProperty();\nproperty.put(\"manufacturer\", \"Ford\");\nproperty.put(\"model\", \"Explorer\");\nRudderOption options = RudderOption();\noptions.putIntegration(\"Mixpanel\", false);\noptions.putIntegration(\"Google Analytics 4\", {\n   \"sendUserID\": false\n });\nrudderClient.track(\"Purchased Car\", properties: property, options: options);\n```\n\n## Setting custom context\n\nStarting from v2.4.0, you can use the `putCustomContext` method on the `RudderOption` object to pass custom contextual information in all the [events](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/supported-api/).\n\nAn example of setting custom context and passing it in a `track` call:\n\n```\nRudderProperty property = RudderProperty();\nproperty.put(\"manufacturer\", \"Ford\");\nproperty.put(\"model\", \"Explorer\");\nRudderOption options = RudderOption();\noptions.putCustomContext(\"address\", {\n      \"city\": \"New Orleans\",\n      \"pin\": \"70032\",\n      \"state\": {\"name\": \"Louisiana\", \"code\": \"LO\"},\n      \"country\": {\"name\": \"USA\", \"code\": \"US\"},\n      \"zone\": 12,\n      \"lat\": 22.5726,\n});\nrudderClient.track(\"Purchased Car\", properties: property, options: options);\n```\n\n## Setting the advertisement ID\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This functionality is not available for the [web](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/installation-and-setup/#installing-the-sdk-for-the-web).\n\nRudderStack automatically collects the advertisement ID **only** if `autoCollectAdvertId` is set to `true` during the [SDK initialization](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/installation-and-setup/#initializing-the-sdk):\n\n```\nfinal RudderController rudderClient = RudderController.instance;\nMobileConfig mobileConfig = MobileConfig(autoCollectAdvertId: true);\nRudderLogger.init(RudderLogger.VERBOSE);\nRudderConfigBuilder builder = RudderConfigBuilder();\nbuilder.withDataPlaneUrl(DATA_PLANE_URL);\nbuilder.withTrackLifecycleEvents(true);\nrudderClient.initialize(WRITE_KEY,config: builder.build());\n```\n\nTo explicitly pass your Android AAID or iOS IDFA, you can use the SDK’s `putAdvertisingId` method.\n\nThe `putAdvertisingId` method accepts a string argument `<ADVERTISING_ID>` which corresponds to your Android `advertisingId`(AAID) or iOS `advertisingId` (IDFA).\n\nAn example of how to use `putAdvertisingId` is shown below:\n\n```\nrudderClient.putAdvertisingId(<ADVERTISING_ID>);\n```\n\n## Setting the device token\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This functionality is not available for the [web](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/installation-and-setup/#installing-the-sdk-for-the-web).\n\nYou can use your device token to pass push notifications to the destinations that support them. RudderStack sets this token under `context.device.token`. To set a custom device token, the SDK supports the `putDeviceToken` method.\n\nAn example of setting a custom device token is shown below:\n\n```\nrudderClient.putDeviceToken(<DEVICE_TOKEN>);\n```\n\n## Sending events to web device mode destinations\n\nRudderStack does not support sending events from the Flutter SDK to the [web device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode) destinations due to some limitations.\n\nAs a workaround, you can create a [JavaScript source](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) in the RudderStack dashboard and use its [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) for the web build of your Flutter apps.\n\n## Debugging\n\nIf you run into any issues when using the Flutter SDK, you can enable the SDK’s logging feature to determine the issue. To do so, follow these steps:\n\n1.  Import `RudderLogger` by running the following command:\n\n```\nimport 'package:rudder_sdk_flutter/RudderLogger.dart';\n```\n\n2.  Enable the logging by changing your SDK initialization:\n\n```\nRudderConfigBuilder builder = RudderConfigBuilder();\nbuilder.withDataPlaneUrl(DATA_PLANE_URL);\nbuilder.withLogLevel(RudderLogger.VERBOSE);\nrudderClient.initialize(WRITE_KEY,\n                          config: builder.build());\n```\n\n3.  Set the log level to one of the following values:\n\n*   `NONE`\n*   `ERROR`\n*   `WARN`\n*   `INFO`\n*   `DEBUG`\n*   `VERBOSE`\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For detailed logs, set the log level to `DEBUG` or `VERBOSE`.\n\n## FAQ\n\n#### Can I apply encryption only on new databases?\n\nDatabase encryption works on new and existing databases. Pass the [`RudderDBEncryption`](#encrypting-rudderstack-databases) object while initializing the Flutter SDK.\n\n#### Can I remove encryption from an encrypted database?\n\nYes, you can. If the database is already encrypted, you can decrypt the database by configuring the [`RudderDBEncryption`](#encrypting-rudderstack-databases) object with your encryption key and setting `enable` to `false`.\n\n#### What happens if the supplied encryption key is different to the one the database is encrypted with?\n\nAfter you encrypt the database:\n\n*   If **no key** is provided, then the SDK deletes the current database with unsent events and creates a new unencrypted database instead.\n*   If a **wrong key** is provided, then the SDK deletes the current database with unsent events and creates a new encrypted database with the given key.\n\n#### Does the Flutter SDK support impression events?\n\nNo, the SDK does not support [Flutter Impression](https://pub.dev/packages/impression) currently.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Flutter SDK Features and Usage | RudderStack Docs",
  "description": "Features and use cases that you can implement using the Flutter SDK.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/get-started/cloud-vs-open-source/",
  "markdown": "# RudderStack Cloud vs. Open Source\n\nCompare features and setup options in RudderStack’s two product offerings—Cloud and Open Source.\n\n* * *\n\n*     4 minute read  \n    \n\nIf you are evaluating RudderStack in a [build vs. buy](https://www.rudderstack.com/blog/when-to-build-vs-buy-data-pipelines) context, it’s important to understand the components and features that make up the RudderStack service as they relate to your current and future needs.\n\nThis guide will help you decide the right setup based on your environment and data needs: [RudderStack Cloud](https://app.rudderstack.com/signup?type=freetrial) or [RudderStack Open Source](https://app.rudderstack.com/signup?type=opensource).\n\n## Comparison overview\n\nAdvanced RudderStack features are not supported in the open source version of the product.\n\n| Feature | Description | RudderStack Cloud | RudderStack Open Source |\n| --- | --- | --- | --- |\n| [Events](#events-related-features) | Features related to tracking, collecting, and routing your events. |     |     |\n| [Cloud Extract (ETL)](#etl-and-reverse-etl) | Collect third-party app data and send it to your data warehouse. |     |     |\n| [Reverse ETL](#etl-and-reverse-etl) | Send data from your warehouse to third-party platforms. |     |     |\n| [Data governance](#data-governance) | Investigate and troubleshoot inconsistencies in your event data. |     |     |\n| [Deployment and security](#deployment-and-security) | Scale and secure your RudderStack deployment. |     |     |\n| [Monitoring and observability](#monitoring-and-observability) | Monitor your data pipelines using different tools and alerting mechanisms. |     |     |\n| [Audits and user management](#auditing-and-user-management) | Manage users and set access controls for various RudderStack features. |     |     |\n\n## Cloud and open source setup\n\nTo understand the effort involved in setting up RudderStack, it’s useful to take a look at RudderStack’s architecture which comprises the [control plane](https://www.rudderstack.com/docs/resources/rudderstack-architecture/#control-plane) and the [data plane](https://www.rudderstack.com/docs/resources/rudderstack-architecture/#data-plane). These two services work together to govern the data flow between your event sources and destinations.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> *   The **control plane** refers to the front-end RudderStack dashboard where you can manage the configuration of your sources and destinations.\n> *   The **data plane** is RudderStack’s core engine responsible for receiving event data and transforming it into the required destination format before relaying events to the destination.\n\n### RudderStack Cloud\n\nIn [RudderStack Cloud](https://www.rudderstack.com/docs/get-started/rudderstack-cloud/), you get a RudderStack-hosted data plane and control plane so you need not worry about the setup. [Sign up](https://app.rudderstack.com/signup/) for free, set up a source and destination, and start seeing the events flow within minutes.\n\nRudderStack’s free cloud tier offers multiple sources, destinations and delivery of 1 million events per month. It provides key features like [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) and [Transformations](https://www.rudderstack.com/docs/transformations/overview/). If you start on the cloud free tier, it’s much easier to convert to a [paid plan](https://www.rudderstack.com/pricing) as your needs evolve over time.\n\n### RudderStack open source\n\nFor [RudderStack Open Source](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/), you have the following data plane and control plane setup options:\n\n1.  [Set up the data plane](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/data-plane-setup/) on Docker, Kubernetes, or in your own development environment. **RudderStack will not host the data plane for you**.\n    \n2.  Set up the control plane using one of the following options:\n    \n\n*   Use the [RudderStack-hosted control plane](https://app.rudderstack.com/signup?type=opensource) (**recommended**).\n*   Self-host your source-destination configurations by setting up your own control plane using [Control Plane Lite](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Cloud-based features like [Transformations](https://www.rudderstack.com/docs/transformations/overview/) and [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) are not available if you use the _Control Plane Lite_ utility. If you are unsure, it is highly recommended you use [RudderStack Cloud](#rudderstack-cloud) to get started.\n\n## Detailed feature comparison\n\n| Feature | RudderStack Cloud | RudderStack Open Source | Notes |\n| --- | --- | --- | --- |\n| Event metrics |     | ❗   | *   Get information on the number of events ingested during a specified timeframe.<br>*   Applicable only for [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode) destinations.<br>*   For Open Source users, this feature is available only in the [RudderStack-hosted control plane](https://app.rudderstack.com/signup?type=opensource). |\n| [Event backup in your own bucket](https://www.rudderstack.com/docs/user-guides/administrators-guide/bucket-configuration-settings/) |     |     | RudderStack can manage it for you as a part of the [Enterprise plan](https://www.rudderstack.com/enterprise-quote/). |\n| [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) |     | ❗   | *   For Open Source users, this feature is available only in the [RudderStack-hosted control plane](https://app.rudderstack.com/signup?type=opensource).<br>*   Applicable only for [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode) destinations. |\n| RudderStack-managed object storage |     |     | Use the RudderStack-hosted object storage to **temporarily** store your events before forwarding them to your warehouse destination. **RudderStack does not persist any of this data**. |\n| [Event Replay](https://www.rudderstack.com/docs/user-guides/administrators-guide/event-replay/) |     |     | This is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature. |\n| Maintaining event ordering |     |     | *   For Cloud, this is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature.<br>*   Crucial for a multi-node RudderStack setup |\n| [Transformations](https://www.rudderstack.com/docs/transformations/overview/) |     |     | *   For Open Source users, transformations are available only in the [RudderStack-hosted control plane](https://app.rudderstack.com/signup?type=opensource) and users can set up to **5 transformations**.<br>*   RudderStack Cloud Free and Starter plan users can set up to **5 transformations** in the **cloud mode**. Growth and Enterprise plan users can create unlimited transformations.<br>*   Only [Enterprise](https://www.rudderstack.com/enterprise-quote) users can create transformations in the **device mode**. |\n\n### ETL and Reverse ETL\n\n| Feature | RudderStack Cloud | RudderStack Open Source | Notes |\n| --- | --- | --- | --- |\n| [Cloud Extract (ETL)](https://www.rudderstack.com/docs/sources/extract/) |     |     | Available for RudderStack Growth and Enterprise users. |\n| [Reverse ETL](https://www.rudderstack.com/docs/sources/reverse-etl/) |     |     | RudderStack Cloud Free and Starter plan users can set up 1 Reverse ETL source. Growth and Enterprise users can set up unlimited sources. |\n| Data syncs scheduling |     |     | \\-  |\n| [Models](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/models/) |     |     | \\-  |\n\n### Data governance\n\n| Feature | RudderStack Cloud | RudderStack Open Source | Notes |\n| --- | --- | --- | --- |\n| [Data governance](https://www.rudderstack.com/docs/data-governance/) |     |     | This is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature. |\n| [Tracking plans](https://www.rudderstack.com/docs/data-governance/tracking-plans/) |     |     | This is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature. |\n| [Data regulation and suppression](https://www.rudderstack.com/docs/api/user-suppression-api/) |     |     | This is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature. |\n\n### Deployment and security\n\n| Feature | RudderStack Cloud | RudderStack Open Source | Notes |\n| --- | --- | --- | --- |\n| Multi-node scaling |     |     | This is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature. |\n| Single sign-on (SSO) |     |     | This is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature. |\n| VPC deployment |     |     | This is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature. |\n\n### Monitoring and observability\n\n| Feature | RudderStack Cloud | RudderStack Open Source | Notes |\n| --- | --- | --- | --- |\n| Grafana dashboards for monitoring |     |     | Available for RudderStack Starter, Growth, and Enterprise users. |\n| Alerting and error notifications |     |     | This is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature. |\n\n### Auditing and user management\n\n| Feature | RudderStack Cloud | RudderStack Open Source | Notes |\n| --- | --- | --- | --- |\n| Ability to add other team members in the workspace |     |     | You can invite up to 10 members to your workspace in RudderStack Cloud Free and Starter plan, and unlimited members in the Growth and Enterprise plan. |\n| Audit logs |     |     | This is a [RudderStack Enterprise](https://www.rudderstack.com/enterprise-quote/) feature. |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "RudderStack Cloud vs. Open Source | RudderStack Docs",
  "description": "Compare features and setup options in RudderStack's two product offerings—Cloud and Open Source.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/adjust/",
  "markdown": "# Adjust Source | RudderStack Docs\n\nIngest your event data from Adjust into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[Adjust](https://adjust.com/) is an industry-leading mobile attribution provider. It allows you to bring all your business data together and get powerful insights from it.\n\nThis guide will help you set up Adjust as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Adjust source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Adjust**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Adjust source is now configured. Note the **Webhook URL** by going to the **Settings** tab.\n\n[![Ortto webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/adjust-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/adjust-webhook-url.webp)\n\n4.  Log in to your [Adjust dashboard](https://suite.adjust.com/login) and go to your app setup. Then, go to the **Data management** tab.\n5.  Under **Server callbacks**, go to **Add callback** > **Guided setup**.\n6.  Select the activity or event to trigger the callback in the **Callback trigger** list.\n7.  Enter the webhook URL obtained in Step 3 in the **Server endpoint** field, where you can receive the data.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can also add a condition in combination with the placeholders and values to trigger a callback only when the condition is satisfied.\n\n8.  Click **Add a placeholder** to dynamically include user/engagement data in your callback. Note that you can select [multiple supported placeholders](https://help.adjust.com/en/article/recommended-placeholders-callbacks) as per your requirement.\n9.  Click **Create callback URL** to generate the final encoded callback URL.\n\nGo to the **Server callbacks overview** page to view and manage the callback URL at any later point.\n\n## Event transformation\n\nRudderStack ingests the Adjust callbacks as [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) calls.\n\nAdjust fires [global callbacks](https://help.adjust.com/en/article/global-callbacks) in addition to any other callback specified at the individual event level. For example, if you have set a global callback along with a callback at the in-app event level, Adjust fires two callbacks - one containing the data requested in the global callback and the other containing the data for the in-app event.\n\n### Supported mappings\n\nRudderStack maps the following Adjust properties associated with the global callbacks to the `track` event properties:\n\n| Adjust property | RudderStack property |\n| --- | --- |\n| `activity_kind` | `properties.activity_kind` |\n| `app_name` | `context.app.name` |\n| `created_at` | `originalTimestamp` |\n| `event` | `properties.event_token` |\n| `event_name` | `message.event` |\n| `gps_adid` | `properties.gps_adid` |\n| `idfa` | `context.device.advertisingId`  <br>For iOS |\n| `idfv` | `context.device.id`  <br>For iOS |\n| `adid` | `context.device.id` |\n| `tracker` | `properties.tracker` |\n| `tracker_name` | `properties.tracker_name` |\n\nIt also maps the following properties associated with the [Erased User](https://help.adjust.com/en/article/erased-user-gdpr-callbacks) callbacks to the `track` properties:\n\n| Adjust property | RudderStack property |\n| --- | --- |\n| `ip_address` | `context.ip`  <br>`request_ip` |\n| `tracking_enabled` | `properties.tracking_enabled` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack ingests the fields coming via all the other [callbacks](https://help.adjust.com/en/article/recommended-placeholders-callbacks) **as is** in the `message.properties` object with the above global callback mappings.\n\n### Sample payload and transformation\n\nThis section details how RudderStack receives the data from Adjust and creates the resulting payload.\n\nA sample payload sent by Adjust is shown:\n\n```\nhttps://<webhook-domain>/v1/webhook?writeKey=<source_write_key>\n&gps_adid=38400000-8cf0-11bd-b23e-10b96e40000d&adid=XXX\n&tracker_token=abc123&app_name=MyApp&activity_kind=event\n&created_at=1404214665&event_token=bkrfgq\n&event_name=purchase_100_coins/mobile_attribution\n&tracker_name=dummy&idfv=XXX\n```\n\nRudderStack transforms the above payload into the following `track` payload:\n\n```\n{\n  context: {\n    library: {\n      name: 'unknown',\n      version: 'unknown',\n    },\n    app: {\n      name: 'MyApp'\n    },\n    integration: {\n      name: 'Adjust',\n    },\n    device: {\n      'id ': 'XXX',\n    },\n  },\n  integrations: {\n    Adjust: false,\n  },\n  type: 'track',\n  event: 'purchase_100_coins/mobile_attribution',\n  originalTimestamp: '2014-07-01T11:37:45.000Z',\n  timestamp: '2014-07-01T11:37:45.000Z',\n  properties: {\n    gps_adid: '38400000-8cf0-11bd-b23e-10b96e40000d',\n    tracker_token: 'abc123',\n    activity_kind: 'event',\n    tracker_name: 'dummy',\n  },\n  anonymousId: '97fcd7b2-cc24-47d7-b776-057b7b199513',\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Adjust Source | RudderStack Docs",
  "description": "Ingest your event data from Adjust into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/reverse-etl/postgresql/",
  "markdown": "# PostgreSQL Reverse ETL Source | RudderStack Docs\n\nSend data from PostgreSQL to your entire stack.\n\n* * *\n\n*     7 minute read  \n    \n\nPostgreSQL is an enterprise-grade, open source database management system. Many companies use PostgreSQL as a low-cost data warehousing solution to deliver efficient analytics and user insights.\n\nRudderStack supports PostgreSQL as a data source from which you can ingest data and route it to your desired downstream destinations.\n\n## Grant permissions\n\nBefore you set up PostgreSQL as a source, you must grant certain permissions on your PostgreSQL warehouse for RudderStack to access data from it.\n\nRun the queries listed in the following sections in the **exact order** to grant the required permissions:\n\n### Step 1: Create user\n\nCreate a new user `RUDDER` with a password `<strong_unique_password>` in PostgreSQL:\n\n```\nCREATE USER RUDDER WITH PASSWORD '<strong_unique_password>';\n```\n\n### Step 2: Create RudderStack schema and grant permissions\n\n1.  Create a dedicated schema `_rudderstack`.\n\n```\nCREATE SCHEMA \"_rudderstack\";\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The `_rudderstack` schema is used by RudderStack for storing the state of each data sync. **Do not change this name**.\n\n2.  Grant full access to the schema `_rudderstack` for the user `RUDDER`.\n\n```\nGRANT ALL ON SCHEMA \"_rudderstack\" TO RUDDER;\n```\n\n3.  Grant full access to all objects in the schema `_rudderstack` for the user `RUDDER`.\n\n```\nGRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA \"_rudderstack\" TO RUDDER;\n```\n\n### Step 3: Grant permissions on schema and table\n\n1.  To let the user `RUDDER` look up objects within the schema `<YOUR_SCHEMA>`, run the command below.\n\n```\nGRANT USAGE ON SCHEMA \"<YOUR_SCHEMA>\" TO RUDDER;\n```\n\n2.  Grant access to the user `RUDDER` to read data from the required table/view:\n\n```\nGRANT SELECT ON TABLE \"<YOUR_SCHEMA>\".\"<YOUR_TABLE>\" TO RUDDER;\n```\n\nReplace `<YOUR_SCHEMA>` and `<YOUR_TABLE>` with the exact names of your PostgreSQL schema and table, respectively.\n\n#### **Optional commands**\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Run the following commands only if you’re okay with RudderStack being able to access the data in all current or future tables residing within your specified schema.\n\n*   To allow the user `RUDDER` read the data from **all** the tables in the schema `<YOUR_SCHEMA>`:\n\n```\nGRANT SELECT ON ALL TABLES IN SCHEMA \"<YOUR_SCHEMA>\" TO RUDDER;\n```\n\n*   To allow the user `RUDDER` to read data from all future tables created by the user `creator` in your schema:\n\n```\nALTER DEFAULT PRIVILEGES for user creator IN SCHEMA \"<YOUR_SCHEMA>\" GRANT SELECT ON TABLES TO RUDDER;\n```\n\nReplace `<YOUR_SCHEMA>` with the exact name of your PostgreSQL schema.\n\n## Set up PostgreSQL source in RudderStack\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  On the **Connections** page, click **Add source**.\n3.  Under **Sources**, click **Reverse ETL** and select **PostgreSQL**.\n\n### Configure warehouse credentials\n\nYou can choose to proceed with your existing warehouse credentials if you have configured them in the RudderStack dashboard previously. Otherwise, click **Add new credentials** to add new credentials for your warehouse.\n\n*   **Host**: Enter the host name of your PostgreSQL instance.\n*   **Database**: Enter the database name of your PostgreSQL instance from where RudderStack ingests the data.\n*   **User**: Enter the user name of your PostgreSQL instance.\n*   **Password**: Enter the password for the above user.\n*   **SSL Mode**: Select the SSL mode as **disable** or **require** depending on how RudderStack should connect to your PostgreSQL instance.\n\nClick the **Verify** button on the top right. RudderStack will then [verify and validate your credentials](#faq). Once verified, click **Continue** to proceed.\n\n### Specify name and source type\n\n*   **Source name**: Assign a name to uniquely identify the source in the RudderStack dashboard.\n*   **Select your source type**: RudderStack lets you set up a Reverse ETL source from a warehouse **Table** or **Model**.\n\n| Source type | Description |\n| --- | --- |\n| Table | Use an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | Use custom SQL queries to fetch specific warehouse data and send them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n\n#### **Use warehouse table as source**\n\nUnder **Select your source type**, choose **Table** and specify the below fields:\n\n*   **Schema**: Select the warehouse schema from the dropdown.\n*   **Table**: Choose the required table from which RudderStack syncs the data.\n*   **Primary key**: Select the column from the above table that uniquely identifies your records in the warehouse.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n[![Use table as source](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use model as source**\n\nUnder **Select your source type**, choose **Model** and click **Continue**.\n\nTo configure a model as source:\n\n1.  Enter an optional description and specify the custom SQL query in **Query** section.\n2.  Click **Run Query** to fetch the data preview.\n3.  Select the **Primary key** to use a column that uniquely identifies your warehouse records.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can set a primary key only after you run the SQL query successfully using the **Run Query** option.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` in SQL query of the model.\n\n[![Model configuration](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n### Review and complete setup\n\nTo make any changes to the warehouse credentials or source configuration, click the edit icon present next to those sections.\n\n[![Edit source configuration](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)\n\nReview your configuration and click **Create source** to complete the setup.\n\n## Connect destination\n\nYou can connect this source to an existing or new [destination](https://www.rudderstack.com/docs/destinations/overview/) to start using it. To connect to a destination later, click **Done** on the top right.\n\n[![Next steps](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)\n\nYou will then be redirected to the **Overview** page of the source where you get the option of connecting it to an existing or new destination.\n\n[![Add destination](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)\n\nSee [Set up Reverse ETL Connection](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/) section for more information.\n\n## Update source configuration and settings\n\nGo to the **Configuration** tab of your Reverse ETL source to update the configuration depending on your source type:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot change the source type on this page.\n\n[![Update source configuration](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)\n\nThe below table lists the options you can update:\n\n| Source type | Configurable options |\n| --- | --- |\n| Table | [Schema, Table, Primary key](#use-warehouse-table-as-source) |\n| Model | *   [Model settings](#use-model-as-source)<br>*   [Primary key](#use-model-as-source)<br><br>**Note**: You can set the primary key only after the SQL query runs successfully. |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> After updating the configuration, the next sync will be a full sync.\n\nGo to the **Settings** tab to:\n\n*   Get your source ID.\n*   Change your warehouse credentials.\n*   [Set up custom alerts](https://www.rudderstack.com/docs/data-governance/alerts/) for your Reverse ETL source.\n*   Delete the source permanently.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot delete a source that is connected to any destination.\n\n[![Edit source settings](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)\n\n## IPs to be allowlisted\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This section is applicable if you’re setting up your PostgreSQL source on a VPN or VPC and you want to enable network access to RudderStack.\n\nTo enable network access to RudderStack, allowlist the following RudderStack IPs depending on your region and [RudderStack Cloud plan](https://www.rudderstack.com/pricing):\n\n| Plan | Region |     |\n| --- | --- | --- |\n|     | **<br><br>US<br><br>** | **<br><br>EU<br><br>** |\n| Free, Starter, and Growth | *   3.216.35.97<br>*   18.214.35.254<br>*   23.20.96.9<br>*   34.198.90.241<br>*   34.211.241.254<br>*   52.38.160.231<br>*   54.147.40.62 | *   3.123.104.182<br>*   3.125.132.33<br>*   18.198.90.215<br>*   18.196.167.201 |\n| Enterprise | *   3.216.35.97<br>*   34.198.90.241<br>*   44.236.60.231<br>*   54.147.40.62<br>*   100.20.239.77 | *   3.66.99.198<br>*   3.64.201.167<br>*   3.123.104.182<br>*   3.125.132.33 |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> All the outbound traffic is routed through these RudderStack IPs.\n\n## FAQ\n\n#### **What are the SSL mode options when setting up the PostgreSQL source in RudderStack?**\n\nWhen setting up a PostgreSQL source, RudderStack provides the following two SSL options:\n\n*   **disable**: SSL mode is disabled when you select this option. Use it in cases where security is not an issue and you don’t want any encryption overhead.\n*   **require**: When you select this option, your data is encrypted and sent to RudderStack. Use it in cases where security is important and you can deal with the resulting encryption overhead.\n\n#### **Is SSH tunneling supported for PostgreSQL when using it as a Reverse ETL source?**\n\nRudderStack does not support SSH tunneling for PostgreSQL as a Reverse ETL source.\n\n#### **What do the three validations under Verifying Credentials imply?**\n\nWhen setting up a Reverse ETL source, you will see the following three validations under the **Verifying Credentials** option once you proceed after entering the warehouse credentials:\n\n[![Validating credentials](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)\n\nThese options are explained below:\n\n*   **Verifying Connection**: This option indicates that RudderStack is trying to connect to the warehouse with the provided warehouse credentials.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, it means that one or more fields specified in the warehouse credentials are incorrect. Verify your credentials in this case.\n\n*   **Able to List Schema**: This option checks if RudderStack is able to fetch all schema details by using the provided credentials.\n*   **Able to Access RudderStack Schema**: This option implies that RudderStack is able to access the `_rudderstack` schema you have created by running all commands in the [User Permissions](#creating-the-rudderstack-schema-and-granting-permissions) section.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, verify if you have successfully created the `_rudderstack` schema and given RudderStack the required permissions to access it.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "PostgreSQL Reverse ETL Source | RudderStack Docs",
  "description": "Send data from PostgreSQL to your entire stack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/appcenter/",
  "markdown": "# App Center Source | RudderStack Docs\n\nIngest your event data from App Center into RudderStack.\n\n* * *\n\n*     2 minute read  \n    \n\n[App Center](https://appcenter.ms/) is Microsoft’s cross-platform build automation and management platform. It lets you automate your builds, test your apps in the cloud, and monitor their real-time usage with the help of crash data and analytics.\n\nYou can send your App Center events by adding a webhook that points to RudderStack. These events include activities related to build success or failure, new app version releases, or app crashes. You can also configure what events to send per your requirement on their dashboard.\n\nThis guide will help you set up App Center as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your App Center source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **App Center**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your App Center source is now configured. Note the source **Write key** required to configure the webhook URL.\n\n[![App Center source write key](https://www.rudderstack.com/docs/images/event-stream-sources/appcenter-source-write-key.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/appcenter-source-write-key.webp)\n\n4.  Then, head over to your App Center account and select the application you want to configure. Here, navigate to the **Webhooks** section under **Settings** from the sidebar, and then create a new webhook:\n\n[![App Center source configuration](https://www.rudderstack.com/docs/images/event-stream-sources/appcenter-2.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/appcenter-2.webp)\n\n5.  In the **URL** text box, add the URL pointing to RudderStack in the following format:\n\n```\n<DATA_PLANE_URL>/v1/webhook?writeKey=<WRITE_KEY>\n```\n\nFor more information on the data plane URL, refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure you add the source write key obtained in **Step 3** as a query parameter to the URL. This is required to prevent the webhook from failing for the lack of a valid write key.\n\nA sample URL is as shown:\n\n```\nhttps://hosted.rudderlabs.com/v1/webhook?writeKey=1bCenS7ynqHh8ETX8s5Crjh22J\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> It is highly recommended to validate the endpoint using the **Send Test** button.\n\n[![Endpoint configuration](https://www.rudderstack.com/docs/images/event-stream-sources/appcenter-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/appcenter-3.webp)\n\n6.  Finally, save the endpoint.\n\n## Event transformation\n\nThe App Center events are ingested into a RudderStack `track` call with the designated name and properties as the entire event received from App Center. For example, the `app_name` set by App Center is set as `context.app.name`.\n\nThe following table highlights the mapping of various App Center events from App to RudderStack’s `track` calls:\n\n| App Center Event | RudderStack Track Event Name |\n| --- | --- |\n| `On Success of a Build` | `Build Succeeded` |\n| `On Failure of a Build` | `Build Failed` |\n| `On Release of a new version` | `Released Version <X.YY>` |\n| `On an App Crash` | `App Crashed` |\n\nAlso, RudderStack populates the following properties from the App Center event payload to the RudderStack event:\n\n| App Center Property | RudderStack Property |\n| --- | --- |\n| `app_name`, `app_display_name` | `context.app.name` |\n| `build_id` | `context.app.build` |\n| `os`, `platform` | `context.device.type`, `context.os.name` |\n| `start_time` | `originalTimeStamp` |\n| `sent_at` | `sentAt` |\n| `short_version`, `app_version` | `context.app.version` |\n| `bundle_identifier` | `context.app.namespace` |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "App Center Source | RudderStack Docs",
  "description": "Ingest your event data from App Center into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/get-started/rudderstack-open-source/",
  "markdown": "# RudderStack Open Source | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "RudderStack Open Source | RudderStack Docs",
  "description": "Use RudderStack Open Source to instrument your data pipelines.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/",
  "markdown": "# iOS SDK | RudderStack Docs\n\nUse the RudderStack iOS SDK to send events from your iOS apps to various destinations.\n\n* * *\n\n*     36 minute read  \n    \n\nThe **RudderStack iOS SDK** lets you track your customer event data from your iOS applications and send it to your specified destinations via RudderStack.\n\nRefer to the [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-ios) to get a more hands-on understanding of the SDK.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This documentation is written for the iOS SDK v1.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can integrate the iOS SDK with your tvOS and watchOS apps and seamlessly track user events without any additional configuration.\n> \n> The SDK supports tvOS tracking in version **1.1.0 and above**. watchOS tracking is supported in version **1.3.1 and above**.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> A new version of [RudderStack iOS SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/ios-v2/) is now available. Some key features of this release include:\n> \n> *   Support for tracking events from your macOS apps\n> *   Support for tracking push notifications\n\n[![](https://img.shields.io/badge/dynamic/json?color=blue&label=pod&query=%24.version&url=https%3A%2F%2Fraw.githubusercontent.com%2Frudderlabs%2Frudder-sdk-ios%2Fdevelop%2Fpackage.json)](https://github.com/rudderlabs/rudder-sdk-ios/tree/master)\n\n## SDK setup requirements\n\nTo set up the RudderStack iOS SDK, the following prerequisites must be met:\n\n*   You need to set up a [RudderStack account](https://app.rudderstack.com/signup).\n    \n*   Once signed up, [set up an iOS source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the dashboard. You should be able to see a **Write Key** for this source, as shown below:\n    \n    [![iOS source write key](https://www.rudderstack.com/docs/images/event-stream-sources/ios-write-key.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/ios-write-key.webp)\n    \n*   You also need a data plane URL. Refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) for more information on the data plane URL and where to find it.\n    \n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has an SDK installation snippet containing both the write key and the data plane URL. You can use it to integrate the iOS SDK into your project.\n\n*   Finally, you need a Mac with the latest version of [Xcode](https://developer.apple.com/xcode/).\n\n## Installing the RudderStack iOS SDK\n\nYou can install the iOS SDK through [Cocoapods](https://cocoapods.org/pods/Rudder) and [Carthage](https://github.com/Carthage/Carthage). The recommended and easiest way to add the SDK to your project is through `Podfile`. To do so, follow these steps:\n\n1.  Add the RudderStack SDK to your `Podfile`:\n\n2.  Then, run the following command:\n\n1.  Add the RudderStack SDK to your `Cartfile`:\n\n```\ngithub \"rudderlabs/rudder-sdk-ios\"\n```\n\n2.  Run the following command:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Remember to include the following code in all `.m` and `.h` files or your `.swift` files where you want to refer to or use RudderStack SDK classes.\n\n```\n#import <Rudder/Rudder.h>\n```\n\n> ![danger](https://www.rudderstack.com/docs/images/danger.svg)\n> \n> RudderStack uses [SQLite](https://sqlite.org/index.html) to store events locally before sending them to the RudderStack data plane. Making calls like `SQLite.shutdown()` which is not thread-safe might lead to unexpected crash.\n\n### Swift Package Manager\n\nYou can also install the iOS SDK through Swift Package Manager (SPM) via one of the following methods:\n\nTo add the RudderStack package in Xcode:\n\n1.  Go to **File** > **Add Package**.\n2.  In the search bar, enter the package repository: `https://github.com/rudderlabs/rudder-sdk-ios.git`.\n3.  In **Dependency Rule**, select **Up to Next Major Version** and enter the value as **1.8.0** as shown:\n\n![SPM dependency rule](https://www.rudderstack.com/docs/images/event-stream-sources/spm-dependency-rule.webp)\n\n4.  Select the project to which you want to add the package and click **Add Package**.\n\nTo leverage the RudderStack Swift package, include the following snippet in your project:\n\n```\n// swift-tools-version:5.5\n// The swift-tools-version declares the minimum version of Swift required to build this package.\n\nimport PackageDescription\n\nlet package = Package(\n    name: \"RudderStack\",\n    products: [\n        // Products define the executables and libraries a package produces, and make them visible to other packages.\n        .library(\n            name: \"RudderStack\",\n            targets: [\"RudderStack\"]),\n    ],\n    dependencies: [\n        // Dependencies declare other packages that this package depends on.\n        .package(url: \"git@github.com:rudderlabs/rudder-sdk-ios.git\", from: \"1.8.0\")\n    ],\n    targets: [\n        // Targets are the basic building blocks of a package. A target can define a module or a test suite.\n        // Targets can depend on other targets in this package, and on products in packages this package depends on.\n        .target(\n            name: \"RudderStack\",\n            dependencies: [\n                .product(name: \"Rudder\", package: \"rudder-sdk-ios\")\n            ]),\n        .testTarget(\n            name: \"RudderStackTests\",\n            dependencies: [\"RudderStack\"]),\n    ]\n)\n```\n\n## Initializing the SDK\n\nPut this code in your `AppDelegate.m` file under the method `didFinishLaunchingWithOptions`:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\nA shared instance of `RSClient` is accessible after the initialization by `[RSClient sharedInstance]`.\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n    .withDataPlaneUrl(DATA_PLANE_URL)\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\nA shared instance of `RSClient` is accesible after the initialization by `RSClient.sharedInstance()`.\n\nRudderStack automatically tracks the following [application lifecycle events](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/):\n\n*   [`Application Installed`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-installed)\n*   [`Application Updated`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-updated)\n*   [`Application Opened`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-opened)\n*   [`Application Backgrounded`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-backgrounded)\n\nYou can disable these events using the `withTrackLifecycleEvents` method of `RSConfigBuilder` and passing `false`. However, it is highly recommended to keep them enabled.\n\nRudderStack supports all major API calls across all iOS devices via the SDK. These include the `track`, `identify`, and `screen` calls.\n\n#### **OneTrust consent**\n\nThe iOS SDK integrates with the OneTrust consent manager and lets you specify the user’s consent during initialization. For more information, refer to the [OneTrust Consent Management for iOS](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/ios/) guide.\n\n## Configuring the RudderStack client\n\nYou can configure your client based on the following parameters using `RSConfigBuilder`:\n\nParameter\n\nType\n\nDescription\n\nDefault Value\n\n`logLevel`\n\n`int`\n\nControls how much of the log you want to see from the SDK.\n\n`RSLogLevelNone`\n\n`dataPlaneUrl`\n\n`string`\n\nYour Data Plane URL.\n\n`https://hosted.rudderlabs.com`\n\n`flushQueueSize`\n\n`int`\n\nNumber of events in a batch request sent to the server.\n\n`30`\n\n`dbThresholdCount`\n\n`int`\n\nNumber of events to be saved in the `SQLite` database. Once the limit is reached, older events are deleted from the database.\n\n`10000`\n\n`sleepTimeout`\n\n`int`\n\nMinimum waiting time to flush the events to the server.\n\n`10 seconds`\n\n`configRefreshInterval`\n\n`int`\n\nFetches the config from dashboard after the specified time.\n\n`2 hours`\n\n`trackLifecycleEvents`\n\n`boolean`\n\nSpecify whether the SDK will capture application life cycle events automatically.\n\n`true`\n\n`collectDeviceId`\n\n`boolean`\n\nDetermines if the SDK should automatically collect the device ID. If set to `NO`, it does not send `context.device.id` as a part of the event payload. See [Disabling device ID collection](#withcollectdeviceid) for more information.\n\n`true`\n\n`autoSessionTracking`\n\n`boolean`\n\nDetermines if the SDK automatically tracks the user sessions. Refer to [Tracking user sessions](#tracking-user-sessions) for more information.\n\n`true`\n\n`sessionTimeout`\n\n`int`\n\nMaximum inactivity period before the session expires.\n\n`300000 ms` (5 minutes)\n\n`recordScreenViews`\n\n`boolean`\n\nSpecify whether the SDK will capture screen view events automatically. Refer to [Automatically capturing screen views](#automatically-capturing-screen-views) for more details.\n\n`false`\n\n`enableBackgroundMode`\n\n`boolean`\n\nSpecify whether the SDK should send the events for some time when the app is moved to the background. Currently it is available only for `iOS` & `tvOS`.\n\n`false`\n\n`gzip`\n\n`boolean`\n\nGzips the event requests.\n\n`true`\n\n`dbEncryption`\n\n`object`\n\nSpecify whether to encrypt/decrypt the database using your desired key. See [Encrypting RudderStack databases](#encrypting-rudderstack-databases) for more information.\n\n\\-\n\n`controlPlaneUrl`\n\n`string`\n\nThis parameter should be changed **only if** you are self-hosting the control plane. See our [control plane lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) documentation on GitHub for details. The iOS SDK will add `/sourceConfig` along with this URL to fetch the required configuration.\n\n`https://api.rudderlabs.com`\n\n### Self-hosted control plane\n\nIf you are using a device mode destination like Adjust, Firebase, etc., the iOS SDK needs to fetch the required configuration from the control plane. If you are using the [Control plane lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) utility to host your own control plane, then follow the steps in [this section](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/#using-sdk-sources-set-up-in-self-hosted-control-plane) and specify `controlPlaneUrl` in `RSConfigBuilder` that points to your hosted source configuration file.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Do not pass the `controlPlaneUrl` parameter during SDK initialization if you are using [RudderStack Cloud](https://app.rudderstack.com/). This parameter is supported only if you are using our open-source [Control plane lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) utility to self-host your control plane.\n\n## Gzipping requests\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The Gzip feature is enabled by default in the iOS SDK.\n\nThe iOS SDK automatically gzips event requests. To disable this feature, set the `Gzip` parameter to `NO` while initializing the SDK:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withGzip:NO];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n    .withDataPlaneUrl(DATA_PLANE_URL)\n    .withGzip(false)\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Gzip requires [rudder-server](https://github.com/rudderlabs/rudder-server) **v1.4 or higher**. Otherwise, your events might fail.\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc. Once you identify the user, the SDK persists all the user information and passes it on to the subsequent `track` or `screen` calls. To reset the user identification, you can use the [`reset`](#reset) method.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   For older SDK versions (< v1.19.0), the iOS SDK captures the device ID and uses that as `anonymousId` for identifying the user. This helps the SDK to track the users across the application installation.\n> *   According to the Apple [documentation](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor), if the device has multiple apps from the same vendors, all those apps will be assigned the same device ID. If all applications from a vendor are uninstalled, then on next install the app will be assigned a new device ID.\n> *   Starting from v1.19.0, the SDK uses a UUID as `anonymousId` instead of the device ID. If you are upgrading from a previous SDK version, see [How RudderStack sets anonymous ID](#how-sdk-sets-anonymous-id) for more information on how the SDK collects and sets `anonymousId`.\n\nAn example `identify` event is as shown:\n\n```\n[[RSClient sharedInstance] identify:@\"test_user_id\"\ntraits:@{@\"foo\": @\"bar\",\n        @\"foo1\": @\"bar1\",\n        @\"email\": @\"test@gmail.com\",\n        @\"key_1\" : @\"value_1\",\n        @\"key_2\" : @\"value_2\"\n}\n];\n```\n\n```\nRSClient.sharedInstance()?.identify(\"test_user_id\", traits: [\n    \"key_1\": \"value_1\",\n    \"key_2\": \"value_2\",\n    \"email\": \"test@gmail.com\"\n])\n```\n\nThe `identify` method accepts the following parameters:\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`userId`\n\n`NSString`\n\nYes\n\nDeveloper identity for the user.\n\n`traits`\n\n`NSDictionary`\n\nNo\n\nTraits information for user. Use `dict` method of `RudderTraits` to convert to `NSDictionary` easily\n\n`options`\n\n`RudderOption`\n\nNo\n\nExtra options for the `identify` event.\n\n### Setting custom anonymous ID\n\nRudderStack use the `deviceId` as `anonymousId` by default. You can use the following method to override and use your own `anonymousId` with the SDK.\n\nAn example of setting the `anonymousId` is shown below:\n\n```\n[RSClient putAnonymousId:<ANONYMOUS_ID>];\n```\n\n```\nRSClient.putAnonymousId(\"<ANONYMOUS_ID>\")\n```\n\nTo retrieve `anonymousId`, use the `anonymousId` instance property:\n\n```\n[RSClient getInstance].anonymousId;\n```\n\n### Disabling device ID collection\n\nStarting from v1.19.0, you can disable the collection of device ID by setting the [`withCollectDeviceId`](#configuring-the-rudderstack-client) API of the `RSConfigBuilder` class to `NO`.\n\nYou will observe the following changes when this API is set to false:\n\n*   The SDK does not send `context.device.id` as a part of the event payload.\n*   The SDK replaces the existing `anonymousId` (if it is equal to the device ID) with a UUID.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> These changes are introduced to make the SDK more compliant with all policies around the device ID collection.\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withCollectDeviceId:NO];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n    .withCollectDeviceId(false)\n    .withDataPlaneUrl(DATA_PLANE_URL)\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you are upgrading to the latest SDK from a previous version (< v1.19.0) **and** disabling device ID collection using `withCollectDeviceId:NO`:\n> \n> *   Make sure your user transformations are not dependent on `context.device.id` as the SDK will not send this value in the event payload.\n> *   The `context.device.id` column in your warehouse destination will not be populated henceforth (it will still contain data populated by the previous SDK version).\n\n### How SDK sets anonymous ID\n\n#### **For direct/fresh SDK installation**\n\nFor a fresh installation of the iOS SDK v1.19.0 and later, RudderStack uses UUID as `anonymousId` regardless of whether [`withCollectDeviceId`](#withcollectdeviceid) is set to `YES` or `NO`.\n\n#### **For updating SDK from older version**\n\nIf you are updating your iOS SDK from an older version (< v1.19.0), then:\n\n*   RudderStack will continue to use the device ID as `anonymousId` - it will not break the existing SDK behavior **until** you set `withCollectDeviceId` to `NO`.\n*   If you set `withCollectDeviceId` to `NO`, the SDK checks if the existing `anonymousId` is a device ID. If yes, it sets a new UUID as the `anonymousId`.\n*   If you have used the [`putAnonymousId`](#overriding-anonymous-id) method to set your own `anonymousId`, then the SDK will **not** modify it even if you set `withCollectDeviceId` to `NO`.\n\n### Setting a custom ID\n\nYou can pass a custom ID along with the standard `userId` in your `identify` calls. RudderStack adds this value under `context.externalId`.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack supports passing `externalId` only in the `identify` events. You must not pass this ID in other API calls like `track`, `page`, etc.\n\nThe following snippet shows how to add an `externalId` to your `identify` event:\n\n```\nRSOption *identifyOptions = [[RSOption alloc] init];\n[identifyOptions putExternalId:@\"brazeExternalId\" withId:@\"some_external_id_1\"];\n[[RSClient sharedInstance] identify:@\"1hKOmRA4GRlm\"\n                             traits:@{@\"firstname\": @\"Alex\"}\n                            options:identifyOptions];\n```\n\n```\nlet identifyOptions = RSOption()\nidentifyOptions.putExternalId(\"brazeExternalId\", withId: \"some_external_id_1\")\nRSClient.sharedInstance()?.identify(\"1hKOmRA4GRlm\", traits: [\"firstname\": \"Alex\"], options: identifyOptions)\n```\n\n## Track\n\nYou can record the users’ activity through the `track` method. Every user action is called as an **event**.\n\nA sample `track` event is as shown:\n\n```\n[[RSClient sharedInstance] track:@\"simple_track_with_props\" properties:@{\n    @\"key_1\" : @\"value_1\",\n    @\"key_2\" : @\"value_2\"\n}];\n```\n\n```\nRSClient.sharedInstance()?.track(\"test_user_id\", properties: [\n    \"key_1\": \"value_1\",\n    \"key_2\": \"value_2\"\n])\n```\n\nThe `track` method accepts the following parameters:\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`eventName`\n\n`NSString`\n\nYes\n\nName of the event you want to track\n\n`properties`\n\n`NSDictionary`\n\nNo\n\nExtra data properties you want to send along with the event\n\n`options`\n\n`RudderOption`\n\nNo\n\nExtra event options\n\n## Screen\n\nYou can use the `screen` call to record whenever the user sees a screen on the mobile device. You can also send some extra properties along with this event.\n\nAn example of the `screen` event is as shown:\n\n```\n[[RSClient sharedInstance] screen:@\"ViewController\"];\n```\n\n```\nRSClient.sharedInstance()?.screen(\"ViewController\")\n```\n\nThe `screen` method accepts the following parameters:\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`screenName`\n\n`NSString`\n\nYes\n\nName of the screen viewed by the user.\n\n`properties`\n\n`NSDictionary`\n\nNo\n\nExtra property object that you want to pass along with the `screen` call.\n\n`options`\n\n`RudderOption`\n\nNo\n\nExtra options to be passed along with the `screen` event.\n\n#### **Automatically capturing screen views**\n\nTo automatically capture the screen views, you can enable the `recordScreenViews` parameter while initializing the SDK:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withRecordScreenViews:YES];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withRecordScreenViews(true)\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\nNote that if automatic screen recording is enabled, RudderStack removes every instance of `ViewController` in the `screen` event.\n\nFor example, if automatic screen recording is enabled and you set the `ViewController` class name to `HomeViewController`, then the SDK sets the screen event name to `Home`.\n\nFor more details related to this implementation, refer to the [iOS SDK repository](https://github.com/rudderlabs/rudder-sdk-ios/blob/791f71c94b323d20d59dacc8aa8bb8626ad62245/Sources/Classes/UIViewController%2BRSScreen.m#L53).\n\n## Group\n\nThe `group` call associates a user to a specific organization. A sample `group` call for the API is below:\n\n```\n[[RSClient sharedInstance] group:@\"sample_group_id\"\n  traits:@{@\"foo\": @\"bar\",\n            @\"foo1\": @\"bar1\",\n            @\"email\": @\"ruchira@gmail.com\"}\n];\n```\n\n```\nRSClient.sharedInstance()?.group(\"test_group_id\", traits: [\n    \"key_1\": \"value_1\",\n    \"key_2\": \"value_2\"\n])\n```\n\nAlternatively, you can use the following method signature\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`groupId`\n\n`String`\n\nYes\n\nAn ID of the organization with which you want to associate your user\n\n`traits`\n\n`NSDictionary`\n\nNo\n\nAny other property of the organization you want to pass along with the call\n\n`options`\n\n`RudderOption`\n\nNo\n\nEvent level options\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack does not persist the traits for the group across the sessions.\n\n## Alias\n\nThe `alias` call associates the user with a new identification. A sample `alias` call for the API is below:\n\n```\n[[RSClient sharedInstance] alias:@\"new_user_id\"];\n```\n\n```\nRSClient.sharedInstance()?.alias(\"new_user_id\")\n```\n\nnatively, you can use the following method signature\n\nName\n\nData Type\n\nRequired\n\nDescription\n\n`newId`\n\n`String`\n\nYes\n\nThe new `userId` you want to assign to the user\n\n`options`\n\n`RudderOption`\n\nNo\n\nEvent level option\n\nRudderStack replaces the old `userId` with the `newUserId` and we persist that identification across the sessions.\n\n## Reset\n\nYou can use the `reset` method to clear the persisted user traits. It also resets the `anonymousId` with a new UUID if you call it with `YES` (for SDK v1.19.0 and later). To clear only user traits, call `reset` with `NO`.\n\nIn [session tracking](https://rudderstack.com/docs/sources/event-streams/sdks/session-tracking/#:~:text=tracking%20is%20enabled%3A-,sessionId,-%28Number%29%3A%20The%20session), calling the `reset` method clears the current `sessionId` and generates a new one.\n\nA sample `reset` call is shown:\n\n```\n[[RSClient sharedInstance] reset:NO];\n```\n\n```\nRSClient.sharedInstance()?.reset(false)\n```\n\n## Encrypting RudderStack databases\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is available in the iOS SDK v1.20.0 and later.\n\nThe iOS SDK uses a [SQLite](https://sqlite.org/index.html) database to store events before sending them to the RudderStack backend (data plane).\n\nBy default, SQLite databases created by RudderStack are not encrypted but they are still protected by iOS - similar to data in any iOS application. To add an extra level of security, you can use the [SQLCipher](https://www.zetetic.net/sqlcipher/) extension to encrypt the database content and SQLite metadata.\n\n#### **Using CocoaPods**\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is supported for SQLCipher v4.0 and later.\n\n**Step 1: Integrate SDK with SQLCipher**\n\n1.  `RudderDatabaseEncryption` is available through [CocoaPods](https://cocoapods.org/). To install it, add the following line to your `Podfile`:\n\n```\npod 'RudderDatabaseEncryption', '~> 1.0.0'\n```\n\n2.  Run the `pod install` command.\n\n**Step 2: Import the iOS SDK**\n\n```\n@import RudderDatabaseEncryption;\n```\n\n```\nimport RudderDatabaseEncryption\n```\n\n**Step 3: Initialize the SDK**\n\nPlace the following snippet in your app’s `AppDelegate` under `didFinishLaunchingWithOptions` method:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withDBEncryption:[[RSDBEncryption alloc] initWithKey:@\"<password>\" enable:YES databaseProvider:[RSEncryptedDatabaseProvider new]]];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withDBEncryption(RSDBEncryption(key: \"<password>\", enable: true, databaseProvider: RSEncryptedDatabaseProvider()))\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\n#### **Using Swift Package Manager (SPM)**\n\n**Registering an RSDatabaseProvider implementation**\n\nThe standard SQLite library does not support encryption out of the box. Hence, you need to integrate a third-party option into your codebase. `RSDatabaseProvider` acts as a bridge between this third-party code and RudderStack, and uses SQLCipher for the implementation.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To integrate SQLCipher with your application, see the instructions for the [community](https://www.zetetic.net/sqlcipher/ios-tutorial/) or [commercial](https://www.zetetic.net/sqlcipher/sqlcipher-ios/) editions.\n\nOnce SQLCipher is correctly set up, add the below implementation of the `RSDatabaseProvider` protocol in your project.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Copy-paste the code exactly as given below and change the class names as per your requirement.\n\n```\n@interface RSEncryptedDatabase : NSObject <RSDatabase>\n\n@end\n\n@implementation RSEncryptedDatabase {\n    sqlite3 *db;\n}\n\n- (int)open_v2:(const char *)filename flags:(int)flags zVfs:(const char *)zVfs {\n    return sqlite3_open_v2(filename, &db, flags, zVfs);\n}\n\n- (int)exec:(const char *)zSql xCallback:(callback)xCallback pArg:(void *)pArg pzErrMsg:(char * _Nullable *)pzErrMsg {\n    return sqlite3_exec(db, zSql, xCallback, pArg, pzErrMsg);\n}\n\n- (int)close {\n    return sqlite3_close(db);\n}\n\n- (int)step:(void *)pStmt {\n    return sqlite3_step(pStmt);\n}\n\n- (int)finalize:(void *)pStmt {\n    return sqlite3_finalize(pStmt);\n}\n\n- (int)prepare_v2:(const char *)zSql nBytes:(int)nBytes ppStmt:(void **)ppStmt pzTail:(const char **)pzTail {\n    return sqlite3_prepare_v2(db, zSql, nBytes, (sqlite3_stmt **)(ppStmt), pzTail);\n}\n\n- (int)column_int:(void *)pStmt i:(int)i {\n    return sqlite3_column_int(pStmt, i);\n}\n\n- (const unsigned char *)column_text:(void *)pStmt i:(int)i {\n    return sqlite3_column_text(pStmt, i);\n}\n\n- (int)key:(const void *)pKey nKey:(int)nKey {\n    return sqlite3_key(db, pKey, nKey);\n}\n\n- (int)last_insert_rowid {\n    int64_t lastRowId = sqlite3_last_insert_rowid(db);\n    return (int)lastRowId;\n}\n\n@end\n\n@interface EncryptedDatabaseProvider : NSObject<RSDatabaseProvider>\n\n@end\n\n@implementation EncryptedDatabaseProvider\n\n- (id<RSDatabase>)getDatabase {\n    return [RSEncryptedDatabase new];\n}\n\n@end\n```\n\n```\nclass EncryptedDatabase: RSDatabase {\n    \n    private var db: OpaquePointer?\n    \n    func open_v2(_ filename: UnsafePointer<CChar>?, flags: Int32, zVfs: UnsafePointer<CChar>?) -> Int32 {\n        return sqlite3_open_v2(filename, &db, flags, zVfs)\n    }\n    \n    func exec(_ zSql: UnsafePointer<CChar>?, xCallback: callback?, pArg: UnsafeMutableRawPointer?, pzErrMsg: UnsafeMutablePointer<UnsafeMutablePointer<CChar>?>?) -> Int32 {\n        return sqlite3_exec(db, zSql, xCallback, pArg, pzErrMsg)\n    }\n        \n    func prepare_v2(_ zSql: UnsafePointer<CChar>?, nBytes: Int32, ppStmt: UnsafeMutablePointer<UnsafeMutableRawPointer?>?, pzTail: UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Int32 {\n        return sqlite3_prepare_v2(db, zSql, nBytes, UnsafeMutablePointer(OpaquePointer(ppStmt)), pzTail)\n    }\n    \n    func close() -> Int32 {\n        return sqlite3_close(db)\n    }\n    \n    func step(_ pStmt: UnsafeMutableRawPointer?) -> Int32 {\n        return sqlite3_step(OpaquePointer(pStmt))\n    }\n    \n    func finalize(_ pStmt: UnsafeMutableRawPointer?) -> Int32 {\n        return sqlite3_finalize(OpaquePointer(pStmt))\n    }\n    \n    func column_int(_ pStmt: UnsafeMutableRawPointer?, i: Int32) -> Int32 {\n        return sqlite3_column_int(OpaquePointer(pStmt), i)\n    }\n    \n    func column_text(_ pStmt: UnsafeMutableRawPointer?, i: Int32) -> UnsafePointer<UInt8> {\n        return sqlite3_column_text(OpaquePointer(pStmt), i)\n    }\n    \n    func key(_ pKey: UnsafeRawPointer?, nKey: Int32) -> Int32 {\n        return sqlite3_key(db, pKey, nKey)\n    }\n\n    func last_insert_rowid() -> Int32 {\n        return Int32(sqlite3_last_insert_rowid(db))\n    }\n}\n\nclass EncryptedDatabaseProvider: RSDatabaseProvider {\n    func getDatabase() -> RSDatabase {\n        return EncryptedDatabase()\n    }\n}\n```\n\n2.  Register your database provider with the RudderStack iOS SDK. The following setup code is recommended:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withDBEncryption:[[RSDBEncryption alloc] initWithKey:@\"<password>\" enable:YES databaseProvider:[EncryptedDatabaseProvider new]]];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n    .withDataPlaneUrl(DATA_PLANE_URL)\n    .withDBEncryption(RSDBEncryption(key: \"<password>\", enable: true, databaseProvider: EncryptedDatabaseProvider()))\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\nThe iOS SDK is now configured to support database encryption.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> After you encrypt the database:\n> \n> *   If **no key** is provided, then the SDK deletes the current database with unsent events and creates a new unencrypted database instead.\n> *   If a **wrong key** is provided, then the SDK deletes the current database with unsent events and creates a new encrypted database with the given key.\n> \n> The SDK does not store the key, so it cannot determine whether the entered key is right or wrong. Hence, if the key cannot decrypt the database, the SDK assumes it to be incorrect and deletes the old events and database.\n\n#### **Instructions for linking issues**\n\nThe Cocoapod `RudderDatabaseEncryption` uses the [SQLCipher](https://github.com/sqlcipher/sqlcipher) Cocoapod under the hood to perform encryption. This Cocoapod requires the removal of any references to the standard SQLite system library for it to function as expected.\n\nIf you set up a project to inadvertently include a linking reference against the standard SQLite library before SQLCipher, it is possible that the application builds and runs correctly but does not use SQLCipher for encryption. This is not a problem for most projects but there are certain cases where unintentional SQLite linking can occur.\n\nOne such example is when using CocoaPods or some other sub-project that declares a dependency on the SQLite3 library. In this case, adding a pod to a project can **silently** modify the project settings in such a way that SQLCipher is not properly linked.\n\nYou can identify and fix the above linking issue during the development stage by looking for the below error log from the SDK:\n\n```\nRSDBPersistentManager: createDB: Cannot encrypt the Database as SQLCipher wasn't linked correctly.\n```\n\nTo fix the linking issue, add a linker flag to your project settings to ensure that the Xcode links SQLCipher before SQLite. Follow these steps:\n\n1.  Open the project-level build settings. These are the global project settings, not for the individual application target.\n2.  Locate the **Other Linker Flags** setting and add one of the following commands depending on how you are integrating SQLCipher into the app.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you are not adding `SQLCipher` into the app on your own and only using `RudderDatabaseEncryption`, then see only the points 3 and 4 in the below table - depending on whether you are using `use_frameworks!` in your app’s `ios/Podfile`.\n\nScenario\n\nCommand\n\nNotes\n\nWhen using SQLCipher commercial edition static libraries\n\n`$(PROJECT_DIR)/sqlcipher-static-ios/ios-libs/libsqlcipher-ios.a`\n\nAdjust according to the path to the `libsqlcipher-ios.a` you received as a part of the package.\n\nWhen using the `sqlcipher.xcodeproj` included in the SQLCipher Git repository\n\n`$(BUILT_PRODUCTS_DIR)/libsqlcipher.a`\n\n\\-\n\nWhen using the SQLCipher CocoaPod with the `use_frameworks` Podfile setting enabled\n\n`-framework SQLCipher`\n\n\\-\n\nWhen using the SQLCipher CocoaPod without the `use_frameworks` Podfile setting enabled\n\n`-lSQLCipher`\n\n\\-\n\nOnce the linker flag is added to the project-level build settings, you should see something like the below image:\n\n[![Project-level build settings](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-project-build-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-project-build-settings.webp)\n\nAfter adding the linker flag to your project-level build settings, check the target-level build settings to ensure SQLCipher is shown first, as seen below:\n\n[![Target-level build settings](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-target-build-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-target-build-settings.webp)\n\n## Enabling/disabling user tracking via the optOut API (GDPR)\n\nRudderStack gives users (e.g., an EU user) the ability to opt out of tracking any user activity until the user gives their consent. You can do this by leveraging RudderStack’s `optOut` API.\n\nThe `optOut` API takes `YES` or `NO` as a Boolean value to enable or disable tracking user activities. This flag persists across device reboots.\n\nThe following snippet highlights the use of the `optOut` API to disable user tracking:\n\n```\n[[RSClient sharedInstance] optOut:YES];\n```\n\n```\nRSClient.sharedInstance()?.optOut(true)\n```\n\nthe user grants their consent, you can enable user tracking once again by using the `optOut` API with `NO` or `false` as a parameter sent to it:\n\n```\n[[RSClient sharedInstance] optOut:NO];\n```\n\n```\nRSClient.sharedInstance()?.optOut(false)\n```\n\nThe `optOut` API is available in the RudderStack iOS SDK starting from version `1.0.24`.\n\n## Setting custom context\n\nYou can set custom contextual information in the iOS SDK by using either of the following ways:\n\n### During SDK initialization\n\nYou can set custom context during SDK initialization as follows:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is available in the iOS SDK v1.26.0 and later.\n\n```\nRSOption* option = [[RSOption alloc] init];\n[option putCustomContext:@{\n        @\"category\": @\"premium\",\n        @\"type\": @\"gold\"\n } withKey:@\"tier\"];\n\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[RSClient getInstance:WRITE_KEY config:[builder build] options: option];\n```\n\n```\nlet option = RSOption()\noption.putCustomContext([\"category\": \"premium\", \"type\": \"gold\"], withKey: \"tier\")\n\nlet builder: RSConfigBuilder = RSConfigBuilder()\n    .withDataPlaneUrl(DATA_PLANE_URL)\nRSClient.getInstance(WRITE_KEY, config: builder.build(), options: option)\n```\n\nNote that:\n\n*   The iOS SDK persists the contextual information set during SDK initialization for subsequent events but **not** across sessions.\n*   Calling the `reset` method clears all the contextual information set during SDK initialization.\n*   The contextual information passed at the event level gets precedence over the context set during SDK initialization.\n\n### Using `putCustomContext` method\n\nYou can use the `putCustomContext` method on an instance of `RSOption` to set custom contextual information as a nested object within `context` while sending the events.\n\nAn example of setting custom context using an instance of `RSOption` and passing it in a `track` call:\n\n```\nRSOption* option = [[RSOption alloc] init];\n[option putCustomContext:@{\n        @\"category\": @\"premium\",\n        @\"type\": @\"gold\"\n } withKey:@\"tier\"];\n[[RSClient sharedInstance] track:@\"Subscription Purchased\" properties:@{\n        @\"paymentMethod\": @\"credit card\"\n} options:option];\n```\n\n```\nlet option = RSOption()\noption.putCustomContext([\"category\": \"premium\", \"type\": \"gold\"], withKey: \"tier\")\nRSClient.getInstance().track(\n  \"Subscription Purchased\", properties: [\"paymentMethod\": \"credit card\"], options: option)\n```\n\nThe `context` object in the created event payload looks like below:\n\n```\n{\n  \"context\": {\n    \"tier\": {\n      \"category\": \"premium\",\n      \"type\": \"gold\",\n    }\n  }\n}\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The SDK does not persist the contextual information set using `putCustomContext` for subsequent events. Hence, you must use this method every time you want to set custom context for an event.\n\n## Setting the device token\n\nYou can pass your `device-token` for Push Notifications to be passed to the destinations which support Push Notification. We set the `token` under `context.device.token`.\n\nFollow the instructions below:\n\n```\n[RSClient putDeviceToken:@\"your_device_token\"];\n```\n\n```\nRSClient.putDeviceToken(\"your_device_token\")\n```\n\n## Setting the advertisement ID\n\nTo set the advertisement ID, you can use the static method `putAdvertisingId` and call it before or after the SDK initialization:\n\n```\n[RSClient putAdvertisingId:@\"sampleAdvertId\"];\n```\n\n```\nRSClient.putAdvertisingId(\"advertId\")\n```\n\nOnce set, the advertisement ID persists and gets attached to all the events until it is cleared using the `clearAdvertisingId` method.\n\nTo clear the advertisement ID, use the `clearAdvertisingId` method:\n\n```\n[[RSClient sharedInstance] clearAdvertisingId];\n```\n\n```\nRSClient.sharedInstance()?.clearAdvertisingId()\n```\n\nThe `clearAdvertisingId` method is not static and hence can be called only after the SDK initialization.\n\nYou can pass the [ATTrackingManager.trackingAuthorizationStatus](https://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/3547038-trackingauthorizationstatus) to RudderStack. RudderStack then sends it to the relevant destinations as required. For example, AppsFlyer accepts this parameter for the attribution to work in their [server-to-server mode](https://support.appsflyer.com/hc/en-us/articles/207034486-Server-to-server-events-API-for-mobile-S2S-mobile-#att-3).\n\n```\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n    // Override point for customization after application launch.\n    RSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n    [builder withDataPlaneUrl:DATA_PLANE_URL];\n    [RSClient getInstance:WRITE_KEY config:[builder build]];\n\n    [[[RSClient sharedInstance] context] putAppTrackingConsent:RSATTAuthorize];\n\n    return YES;\n}\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n    .withDataPlaneUrl(DATA_PLANE_URL)\nRSClient.getInstance(WRITE_KEY, config: builder.build())\nRSClient.sharedInstance()?.context.putAppTrackingConsent(RSATTAuthorize)\n```\n\nYou can pass the following options to the `putAppTrackingConsent` method:\n\n*   `RSATTNotDetermined`\n*   `RSATTRestricted`\n*   `RSATTDenied`\n*   `RSATTAuthorize`\n\n## Filtering events\n\nWhen sending events to a destination via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode), you can explicitly specify which events should be discarded or allowed to flow through - by allowlisting or denylisting them.\n\nRefer to the [Client-side Event Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) guide for more information on this feature.\n\n## Enabling/disabling events for specific destinations\n\nThe RudderStack iOS SDK allows you to enable or disable event flow to a specific destination or all destinations to which the source is connected. You can specify these destinations by creating a `RSOption` object as shown:\n\n```\nRSOption *option = [[RSOption alloc]init];\n//default value for `All` is true\n[option putIntegration:@\"All\" isEnabled:YES];\n// specifying destination by its display name\n[option putIntegration:@\"Amplitude\" isEnabled:YES];\n[option putIntegration:@\"<destination display name>\" isEnabled:<BOOL>];\n// specifying destination by its Factory instance\n[option putIntegrationWithFactory:[RudderMoengageFactory instance] isEnabled:NO];\n[option putIntegrationWithFactory:[<RudderIntegrationFactory> instance] isEnabled:<BOOL>];\n```\n\n```\nlet option:RSOption = RSOption();\n//default value for `All` is true\noption.putIntegration(\"All\", isEnabled:true)\n// specifying destination by its display name\noption.putIntegration(\"Amplitude\", isEnabled:true)\noption.putIntegration(<DESTINATION DISPLAY NAME>, isEnabled:<BOOL>)\n// specifying destination by its Factory instance\noption.putIntegration(with: RudderMoengageFactory.instance(), isEnabled: true);\noption.putIntegration(with: <RudderIntegrationFactory>.instance(), isEnabled:<BOOL>);\n```\n\nThe keyword `All` in the above snippet represents all destinations the source is connected to. Its value is set to `true` by default.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Make sure the `destination display name` you pass while specifying the custom destinations should exactly match the destination name as shown [here](https://app.rudderstack.com/directory).\n\nYou can pass the destination(s) specified in the above snippet to the SDK in two ways:\n\n#### **1\\. Passing destinations while initializing the SDK**\n\nThis is helpful when you want to enable/disable sending the events across all event calls made using the SDK to the specified destinations.\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withLoglevel:RSLogLevelDebug];\n[builder withTrackLifecycleEvens:YES];\n[builder withRecordScreenViews:YES;\n[RSClient getInstance:WRITE_KEY config:[builder build] options:option]; // passing the rudderoption object containing the list of destinations you specified\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n            .withLoglevel(RSLogLevelDebug)\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withTrackLifecycleEvens(true)\n            .withRecordScreenViews(true)\nRSClient.getInstance(WRITE_KEY, config: builder.build(),options: option)// passing the rudderoption object containing the list of destination(s) you specified\n```\n\n#### **2\\. Passing destinations while making event calls**\n\nThis approach is helpful when you want to enable/disable sending only a particular event to the specified destination(s) or if you want to override the specified destinations passed with the SDK initialization for a particular event.\n\n```\n[[RSClient sharedInstance] track:@\"simple_track_with_props\" properties:@{\n        @\"key_1\" : @\"value_1\",\n        @\"key_2\" : @\"value_2\"\n    } options:option]; // passing the rudderoption object containing the list of destination(s) you specified\n```\n\n```\nlet rudder: RSClient? = RSClient.sharedInstance()\nrudder?.track(\"track_with_props\", properties: [\n            \"key_1\": \"value_1\",\n            \"key_2\": \"value_2\",\n        ],options:option) // passing the rudderoption object containing the list of destination(s) you specified\n```\n\nIf you specify the destinations both while initializing the SDK as well as making an event call, then the destinations specified at the event level only will be considered.\n\n## Tracking user sessions\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The iOS SDK supports session tracking starting v1.7.0.\n\nBy default, the iOS SDK automatically tracks the user sessions. This means that RudderStack automatically determines the start and end of a user session depending on the inactivity time configured in the SDK (default time is 5 minutes).\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withAutoSessionTracking:YES];  // Set to No to disable automatic session tracking\n[builder withSessionTimeoutMillis:(5*60*1000)];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withAutoSessionTracking(true)  // Set to false to disable automatic session tracking\n            .withSessionTimeoutMillis(5*60*1000)\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\nTo disable automatic session tracking, set `withAutoSessionTracking` to `false`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the user sessions and how to track them using the iOS SDK, refer to the [Session Tracking](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/) guide.\n\n## Tracking deep links\n\nStarting from version 1.27.0, the iOS SDK supports tracking deep links. Deep links provide direct access to specific content and features within your app. See the [Apple documentation](https://developer.apple.com/documentation/xcode/defining-a-custom-url-scheme-for-your-app#) for more information on configuring deep links in your iOS app.\n\nAfter completing the setup, call the SDK’s deep link API from either your `AppDelegate` or `SceneDelegate` depending on the below scenarios:\n\n*   When you only have a URL to pass:\n\n```\n[[RSClient sharedInstance] openURL:url];\n```\n\n```\nRSClient.sharedInstance()?.open(url)\n```\n\n*   When you have URL and custom properties to pass along with the deep link event:\n\n```\n[[RSClient sharedInstance] openURL:url options:options];\n```\n\n```\nRSClient.sharedInstance()?.open(url, options: options)\n```\n\nThe deep link method accepts the below parameters:\n\nName\n\nData type\n\nDescription\n\n`url`  \nRequired\n\n`NSURL`\n\nRepresents a Uniform Resource Locator used to identify a location on the network and a mechanism for retrieving it. URLs are used to open web pages, access APIs, and deep link into specific parts of the app.\n\nFor example, `com.ruddertestappswift://`.\n\n`options`\n\n`NSDictionary`\n\nAdditional data properties to send along with the deep link event.\n\nThe `Deep Link Opened` event schema is shown below:\n\nProperty name\n\nData type\n\nDescription\n\n`url`\n\nString\n\nThe `url` parameter described above. It is a string of characters used to identify a location on the network and a mechanism for retrieving it.\n\nFor example, `com.ruddertestappswift://`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The iOS SDK also adds the query parameters as the deep link event properties.\n\n## Adding callback support for mobile device mode integrations\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note the following:\n> \n> *   This feature is supported in the iOS SDK v1.24.0 and later.\n> *   Currently, the callback support is only available for the [Braze mobile device mode integration](https://github.com/rudderlabs/rudder-integration-braze-ios). It will be implemented for other integrations over time.\n\nThe iOS SDK supports a `onIntegrationReady` callback functionality that returns the instance of the mobile device mode integration after the destination SDK is initialized.\n\nYou can use this feature to obtain the Braze SDK instance and use it for registering to Braze’s in-app messaging feature.\n\n```\nid<RSIntegrationFactory> brazeFactoryInstance = [RudderBrazeFactory instance];\n[[RSClient getInstance] onIntegrationReady:brazeFactoryInstance withCallback:^(NSObject *brazeInstance) {\n    if (brazeInstance && [brazeInstance isKindOfClass:[Braze class]]) {\n        braze = (Braze *)brazeInstance;\n    } else {\n        NSLog(@\"Error getting Braze instance.\");\n    }\n}];\n```\n\n```\nlet brazeFactoryInstance = RudderBrazeFactory()\nRSClient.getInstance().onIntegrationReady(brazeFactoryInstance) { brazeInstance in\n    if let brazeInstance = brazeInstance as? Braze {\n        AppDelegate.braze = brazeInstance\n    } else {\n        print(\"Error getting Braze instance.\")\n    }\n}\n```\n\n## Sending granular device model information\n\nStarting from iOS SDK v1.25.0, you can send the `context.device.model` in a more detailed format to your downstream destinations. The SDK sends the device model information in the standard Apple format like `iPhone 13,1` instead of the earlier format `iPhone`. Here, `iPhone 13,1` corresponds to the human-readable format `iPhone 12 Mini`.\n\nWhile most destinations are able to recognize the standard Apple format, there might some cases where the destination is unable to comprehend it. For such cases, you can use the **Localize Apple Device Model** transformation to convert the standard Apple device model into a human-readable format.\n\n[![Apple device model enrichment](https://www.rudderstack.com/docs/images/event-stream-sources/apple-device-model-enrichment.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/apple-device-model-enrichment.webp)\n\nThe transformation code is as follows:\n\n```\nimport { getLocalizedDeviceModel } from \"@rs/localizeAppleDeviceModel/v1\";\n\n export function transformEvent(event, metadata) {\n const localizedDeviceModel = getLocalizedDeviceModel(event);\n  if(localizedDeviceModel && event?.context?.device?.model) {\n    event.context.device.model = localizedDeviceModel;\n  }\n  return event;\n}\n```\n\nSee the [Localize Apple Device Model](https://www.rudderstack.com/docs/transformations/templates/#localize-apple-device-model) transformation template for more information.\n\n## Developing a device mode destination\n\nYou can easily develop a [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode) destination if RudderStack doesn’t support it already. Follow these steps:\n\n1.  Create a `CustomIntegration` class by extending [`RSIntegration`](https://github.com/rudderlabs/rudder-sdk-ios/blob/master/Sources/Classes/Headers/Public/RSIntegration.h).\n\n```\n#import <Rudder/Rudder.h>\n@interface CustomIntegration : NSObject<RSIntegration>\n\n@property (nonatomic, strong) NSDictionary *config;\n@property (nonatomic, strong) RSClient *client;\n\n- (instancetype)initWithConfig:(NSDictionary *)config withAnalytics:(RSClient *)client;\n\n@end\n\n@implementation CustomIntegration\n\n- (instancetype) initWithConfig:(NSDictionary *)config withAnalytics:(RSClient *)client {\n    if (self == [super init]) {\n    }\n    return self;\n}\n\n- (void) processRuderEvent:(nonnull RSMessage *)message {\n    NSString *type = message.type;\n    if ([type isEqualToString:@\"identify\"]) {\n//        Do something\n    } else if ([type isEqualToString:@\"track\"]) {\n//        Do something\n    } else if ([type isEqualToString:@\"screen\"]) {\n//        Do something\n    } else {\n        [RSLogger logWarn:@\"MessageType is not supported\"];\n    }\n}\n\n- (void) dump:(nonnull RSMessage *)message {\n    [self processRuderEvent:message];\n}\n\n- (void) reset {\n}\n\n- (void) flush {\n}\n\n@end\n```\n\n```\nclass CustomIntegration: NSObject, RSIntegration {\n    \n    let config: [AnyHashable: Any]\n    let analytics: RSClient\n    \n    init(config: [AnyHashable: Any], analytics: RSClient) {\n        self.config = config\n        self.analytics = analytics\n    }\n    \n    func dump(_ message: RSMessage) {\n        processRudderEvent(message)\n    }\n    \n    func processRudderEvent(_ message: RSMessage) {\n        let type = message.type\n        switch type {\n        case \"identify\":\n            //Do something\n            break\n        case \"track\":\n            //Do something\n            break\n        case \"screen\":\n            //Do something\n            break\n        default:\n                RSLogger.logWarn(\"MessageType is not supported\")\n        }\n    }\n    \n    func reset() {\n        \n    }\n    \n    func flush() {\n        \n    }\n}\n```\n\n2.  Create a `CustomFactory` class by extending [`RSIntegrationFactory`](https://github.com/rudderlabs/rudder-sdk-ios/blob/master/Sources/Classes/Headers/Public/RSIntegrationFactory.h):\n\n```\n#import <Rudder/Rudder.h>\n\n@interface CustomFactory : NSObject<RSIntegrationFactory>\n\n+ (instancetype) instance;\n\n@end\n\n@implementation CustomFactory\n\n+ (instancetype)instance {\n    static CustomFactory *sharedInstance;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        sharedInstance = [[self alloc] init];\n    });\n    return sharedInstance;\n}\n\n- (instancetype)init\n{\n    self = [super init];\n    return self;\n}\n\n- (nonnull NSString *)key {\n    return @\"Custom Factory\";\n}\n\n- (nonnull id<RSIntegration>)initiate:(NSDictionary *)config client:(nonnull RSClient *)client rudderConfig:(nonnull RSConfig *)rudderConfig {\n    return [[CustomIntegration alloc] initWithConfig:config withAnalytics:client];\n}\n@end\n```\n\n```\nclass CustomFactory: RSIntegrationFactory {\n    static func instance() -> CustomFactory {\n        return CustomFactory()\n    }\n    \n    func key() -> String {\n        return \"Custom Factory\"\n    }\n    \n    func initiate(_ config: [AnyHashable: Any], client: RSClient, rudderConfig: RSConfig) -> RSIntegration {\n        return CustomIntegration(config: config, analytics: client)\n    }\n}\n```\n\n3.  Register `CustomFactory` with the iOS SDK during its initialization:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withCustomFactory:[CustomFactory instance]];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n    .withDataPlaneUrl(DATA_PLANE_URL)\n    .withCustomFactory(CustomFactory.instance())\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\nSome pointers to keep in mind:\n\n*   RudderStack’s iOS SDK dumps every event it receives to the `dump()` method of the `CustomFIntegration` class. From here, you can process the event and hand it over to the native SDK of the device mode destination.\n*   The SDK also triggers the `reset()` method of the `CustomFactory` class on every `reset()` call made via the SDK. You can use this to handle the destination-specific reset logic.\n*   Make sure you do not duplicate the value of `KEY` present inside `CustomFactory`, across multiple `CustomFactory` that you develop.\n\n## Flushing events using `flush` API\n\nThe iOS SDK supports the `flush()` API. RudderStack retrieves all messages present in the database, divides them into individual batches based on the specified queue size, and flushes them to the RudderStack server/backend.\n\nFor example, if the `flushQueueSize` is 30 and there are 180 events in the database when the `flush()` API is called, the SDK will retrieve all those events and divide them into batches of 30 messages each, that is, into 6 batches.\n\nIf a batch fails for some reason, RudderStack drops the remaining batches to maintain the sequence of the messages. A batch is considered as failed if it isn’t sent to the RudderStack server after 3 retries.\n\nIn device mode, the `flush()` API also calls the destination SDK’s `flush()` API (if applicable).\n\nFor every `flush()` call made via the iOS SDK, the `flush()` method of the `CustomFactory` class is also triggered, which can be used to handle the destination-specific reset logic. You can make a `flush` call using the SDK as shown:\n\n```\n[[RSClient sharedInstance] flush];\n```\n\n```\nRSClient.sharedInstance()?.flush()\n```\n\n## Debugging\n\nIf you run into any issues regarding the RudderStack iOS SDK, you can turn on the `VERBOSE` or `DEBUG` logging to find out what the issue is. To turn on the logging, change your `RudderClient` initialization to the following:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withLoglevel:RudderLogLevelDebug];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\nbuilder.withDataPlaneUrl(<DATA_PLANE_URL>)\nbuilder.withLoglevel(RudderLogLevelDebug)\nRSClient.getInstance(<WRITE_KEY>, config: builder.build())\n```\n\n## Chromecast integration\n\n[Google Chromecast](https://store.google.com/in/product/chromecast?hl=en-GB) is a device that plugs into your TV or monitor with an HDMI port, and can be used to stream content from your phone or computer.\n\nRudderStack supports integrating the iOS SDK with your Cast app. Follow [these instructions](https://developers.google.com/cast/docs/ios_sender) to build your iOS sender app. Then, add the iOS SDK to it. Follow the [Google Cast developer guide](https://developers.google.com/cast/docs/developers) for more details.\n\n## Privacy manifest\n\nYour apps and third-party SDKs (usually distributed as Swift packages, XCFrameworks, or framework bundles) contain a privacy manifest file named `PrivacyInfo.xcprivacy`. It records the data collected by your app/third-party SDK and the associated [required reason API](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_use_of_required_reason_api).\n\nYou need to record the reasons in your privacy manifest for each data type your app/SDK collects along with the category of required reasons API that it uses.\n\nSee the [Apple developer documentation](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files#4284009) for more information on creating a privacy manifest.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Starting Spring 2024, you are required to include an approved reason in your app’s privacy manifest that accurately reflects how your app uses the API.\n> \n> This is a mandatory requirement to upload a new app/app update to the App Store Connect. For more information, see this [Apple update](https://developer.apple.com/news/?id=z6fu1dcu).\n\n#### **Privacy Accessed API Types**\n\n`NSPrivacyAccessedAPITypes` is an array of dictionaries describing the API types your app/third-party SDK accesses that have been designated as APIs that require reasons to access.\n\nThe RudderStack iOS SDK only uses the `userDefaults` API to store user and context information and it is declared in the privacy manifest in the [iOS SDK repository](https://github.com/rudderlabs/rudder-sdk-ios/tree/develop/Sources/Resources).\n\n#### **Privacy tracking domains**\n\n`NSPrivacyTrackingDomains` is an array of strings listing the internet domains that your app/third-party SDK connects to for tracking purposes. If the user has not granted the tracking permissions through the App Tracking Transparency framework, the network requests to these domains fail and you get an error on your app.\n\nIf your application utilizes data for tracking users as [outlined by Apple](https://developer.apple.com/app-store/user-privacy-and-data-use/), it is important to seek the user’s consent first. Also, make sure to include the following domain in your app’s privacy manifest under the purpose `NSPrivacyTrackingDomains`:\n\n*   `rudderstack.com/`\n\n#### **Privacy Nutrition Label Types**\n\n`NSPrivacyCollectedDataTypes` is an array of dictionaries that describe the data types your app/third-party SDK collects.\n\nThe RudderStack iOS SDK includes an array of [Privacy Nutrition Label Types](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_data_use_in_privacy_manifests#4250555) for the following automatically-collected fields:\n\nData\n\nLinked to user\n\nUsed for tracking\n\nCollection purpose\n\nApp version\n\nNo\n\nNo\n\n*   **Developer advertising or marketing**\n*   **Analytics**\n\nApp name\n\nNo\n\nNo\n\n*   **Developer advertising or marketing**\n*   **Analytics**\n\nCrash data\n\nNo\n\nNo\n\n**App functionality**\n\nDevice ID\n\nNo\n\nNo\n\n*   **Developer advertising or marketing**\n*   **Analytics**\n*   **Third-party advertising**\n\nProduct interaction\n\nNo\n\nNo\n\n**App functionality**\n\nOther data types\n\nNo\n\nNo\n\n**App functionality**\n\nSee the [Apple developer documentation](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_data_use_in_privacy_manifests#4250556) for more information on the above collection purposes.\n\n## FAQ\n\n#### I’m facing issues building with Carthage on XCode 12. What should I do?\n\nIf you’re facing an issue with Carthage and XCode 12, you can follow [this workaround](https://github.com/Carthage/Carthage/blob/master/Documentation/Xcode12Workaround.md) suggested by the Carthage team.\n\n#### Does the SDK support tvOS ?\n\nAs of version `1.1.0`, the iOS SDK supports the [tvOS](https://developer.apple.com/tvos/) platform.\n\n#### Does the SDK support watchOS ?\n\nAs of version `1.3.0`, the iOS SDK supports the [watchOS](https://developer.apple.com/watchos/) platform.\n\n#### How do I migrate from v1.0.2?\n\nUpdate the usage of the following classes as per the table below:\n\nPrevious Name\n\nUpdated Name\n\n`RudderClient`\n\n`RSClient`\n\n`RudderConfig`\n\n`RSConfig`\n\n`RudderConfigBuilder`\n\n`RSConfigBuilder`\n\n`RudderLogLevelDebug`\n\n`RSLogLevelDebug`  \nOther `LogLevel`s follow the same nomenclature.\n\n#### How do I ensure the events tracked just before closing/backgrounding the app are sent immediately and not on the next app launch?\n\nTo ensure that the events tracked just before closing/backgrounding the app are sent to RudderStack immediately, you can set `withEnableBackgroundMode` to `YES` while creating the `RSConfigBuilder` object as shown below:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Currently, this feature is available only for `iOS` & `tvOS` platforms.\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withEnableBackgroundMode:YES];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n    .withDataPlaneUrl(DATA_PLANE_URL)\n    .withEnableBackgroundMode(true)\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\nBy doing so, your app requests iOS for some additional background run time to run the app, which in turn allows the SDK to immediately send the events tracked just before the app is closed/backgrounded, instead of waiting till the next app launch.\n\nThis SDK feature relies on the background mode capability offered by the iOS. There is no set number on the background run time the apps get, as it is completely abstracted by iOS. For more information, refer to [this guide](https://www.raywenderlich.com/5817-background-modes-tutorial-getting-started#toc-anchor-008).\n\n#### How can I get the user `traits` after making the `identify` call?\n\nYou can get the user traits after making an `identify` call in the following way:\n\n```\nNSDictionary *traits = [[[RSClient sharedInstance] context] traits];\n```\n\n```\nlet traits = RSClient.sharedInstance()?.context.traits\n```\n\n#### How does the SDK handle different client/server errors?\n\nIn case of client-side errors, e.g. if the source write key passed to the SDK is incorrect, RudderStack gives you a **400 Bad Request** response and aborts the operation immediately. For other types of network errors (e.g. Invalid Data Plane URL), the SDK tries to flush the events to RudderStack in an incremental manner (every 1 second, 2 seconds, 3 seconds, and so on).\n\n#### Why is there a larger difference between `timestamp` and `received_at` for iOS events vs. Android events?\n\nThis scenario is most likely caused by the default behavior of iOS apps staying open in the background for a shorter period of time after a user closes them.\n\nWhen a user closes an iOS or Android app, events will still continue to be sent from the queue until the app closes in the background as well. Any events still in the queue will remain there until the user reopens the app. Due to this lag, there are some scenarios where there can be significant differences between `timestamp` (when the event was created) and `received_at` (when RudderStack actually receives the events).\n\nFor Android apps, events can be sent from the background after apps close for a longer period of time than iOS apps, therefore, more of the events coming from the Android SDK have closer `timestamp` and `received_at` times.\n\n#### Does RudderStack integrate with SKAdNetwork?\n\nRudderStack does not integrate with SKAdNetwork. However, SKAdNetwork can be directly integrated into an iOS application alongside RudderStack.\n\n#### Can I disable event tracking until the user gives their consent?\n\nYes, you can.\n\nRudderStack gives you the ability to disable tracking any user activity until the user gives their consent, by leveraging the `optOut` API. This is required in cases where your app is audience-dependent (e.g. minors) or where you’re using the app to track the user events (e.g. EU users) to meet the data protection and privacy regulations.\n\nThe `optOut` API takes `true` / `false` (in case of Swift) or `YES` / `NO` (in case of Objective-C) as a value to enable or disable tracking user activities. So, to disable user tracking, you can use the `optOut` API as shown:\n\n```\n[[RSClient sharedInstance] optOut:YES];\n```\n\n```\nRSClient.sharedInstance()?.optOut(true)\n```\n\nthe user gives their consent, you can enable user tracking again:\n\n```\n[[RSClient sharedInstance] optOut:NO];\n```\n\n```\nRSClient.sharedInstance()?.optOut(false)\n```\n\nFor more information on the `optOut` API, refer to the [Enabling/Disabling User Tracking via optOut API (GDPR Support)](#enabling-tracking-via-optout) section.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> You only need to call the `optOut` API with the required parameter only once, as the information persists within the device even if you reboot it.\n\n#### Can I apply encryption only on new databases?\n\nDatabase encryption works on new or existing databases. You can pass the [RSDBEncryption](#rsdbencryption) object in `RSConfigBuilder` while initializing the iOS SDK.\n\nSee [Configuring the RudderStack client](#configuring-the-rudderstack-client) for more information on the configuration options.\n\n#### Can I remove encryption from an encrypted database?\n\nYes, you can. When passing the `RSDBEncryption` object, configure the object with the encryption key and set `enable` to false. It will remove the encryption from the encrypted database.\n\nSee [Creating an encryption object](#creating-an-encryption-object) for more information.\n\n#### How does the iOS SDK handle events larger than 32KB?\n\nThe iOS SDK drops any events greater than 32KB.\n\n#### How long does the iOS SDK retain the events in the database? Do the events expire and get removed after a certain period?\n\nThe iOS SDK stores all the events in the database before flushing them to the RudderStack backend. The SDK never deletes events based on the time period, that is, how long the events are in the database.\n\nHowever, note that the SDK removes the older events once the [database threshold](#configuring-the-rudderstack-client) (`dbThresholdCount`, 10000 events by default) is reached.\n\n#### Why am I getting a warning in `Points of Interest` instruments?\n\nYou may get a warning in your `Points of Interest` instrument if `rudderstack.com/` is not listed in your app’s `NSPrivacyTrackingDomain` key in any privacy manifest. It may be following users across multiple apps and websites to create user profiles for apps that contact this domain.\n\nTo resolve this issue, make sure to:\n\n*   Seek user consent, especially if your app utilizes data for tracking users as [outlined by Apple](https://developer.apple.com/app-store/user-privacy-and-data-use/).\n*   Include the `rudderstack.com/` domain in your app’s privacy manifest under the purpose `NSPrivacyTrackingDomains`.\n\nSee [Privacy tracking domains](#privacy-tracking-domains) for more information.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "iOS SDK | RudderStack Docs",
  "description": "Use the RudderStack iOS SDK to send events from your iOS apps to various destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/reverse-etl/snowflake/",
  "markdown": "# Snowflake Reverse ETL Source | RudderStack Docs\n\nSend data from Snowflake to your entire stack.\n\n* * *\n\n*     10 minute read  \n    \n\n[Snowflake](https://www.snowflake.com/) is a cloud-based data warehouse provided as Software-as-a-Service (SaaS). It offers all features of a modern data warehouse, including scalability, ease of use, secure data access, and much more.\n\nRudderStack supports Snowflake as a data source from which you can ingest data and route it to your desired downstream destinations.\n\n## Grant permissions\n\nBefore you set up Snowflake as a source, you must grant certain permissions on your Snowflake warehouse for RudderStack to access data from it.\n\nRun the queries listed in the following sections in the **exact order** to grant the required permissions:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You must have the **ACCOUNTADMIN** role to grant these permissions.\n\n![Snowflake account admin role](https://www.rudderstack.com/docs/images/warehouse-actions-sources/snowflake-accountadmin.webp)\n\n### Step 1: Create a new role and user in Snowflake\n\n1.  In your Snowflake console, run the following command to create a role `RUDDER_ROLE` in Snowflake. After creating the role, you can [grant object privileges](https://docs.snowflake.com/en/sql-reference/sql/grant-privilege.html) to it.\n\n2.  Verify if the role `RUDDER_ROLE` is successfully created.\n\n3.  Create a new user `RUDDER` with a password `<strong_unique_password>`.\n\n```\nCREATE USER RUDDER PASSWORD = '<strong_unique_password>' DEFAULT_ROLE = 'RUDDER_ROLE';\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can assign some other role to this user in the RudderStack dashboard settings later. See [Configuring the connection credentials](#configuring-the-connection-credentials) section for more information.\n\n4.  Verify if the user `RUDDER` is successfully created.\n\n### Step 2: Create RudderStack schema and grant permissions to the role\n\n1.  Create a dedicated schema `_RUDDERSTACK` in your database `<YOUR_DATABASE>`.\n\n```\nCREATE SCHEMA \"<YOUR_DATABASE>\".\"_RUDDERSTACK\";\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The `_RUDDERSTACK` schema is used by RudderStack for storing the state of each data sync. **Do not change this name**.\n\n2.  Grant full access to the schema `_RUDDERSTACK` for the previously created role `RUDDER_ROLE` .\n\n```\nGRANT ALL PRIVILEGES ON SCHEMA \"<YOUR_DATABASE>\".\"_RUDDERSTACK\" TO ROLE RUDDER_ROLE;\n```\n\nReplace `<YOUR_DATABASE>` with the exact name of your Snowflake database\n\n### Step 3: Grant permissions on warehouse, database, schema, and table\n\n1.  Enable the user `RUDDER` to perform all operations allowed for the role `RUDDER_ROLE`(via the privileges granted to it).\n\n```\nGRANT ROLE RUDDER_ROLE TO USER RUDDER;\n```\n\n2.  Run the following commands to allow the role `RUDDER_ROLE` to look up the objects within your warehouse, database, schema, and the specific table or view:\n\n```\nGRANT USAGE ON WAREHOUSE \"<YOUR_WAREHOUSE>\" TO ROLE RUDDER_ROLE;\nGRANT USAGE ON DATABASE \"<YOUR_DATABASE>\" TO ROLE RUDDER_ROLE;\nGRANT USAGE ON SCHEMA \"<YOUR_DATABASE>\".\"<YOUR_SCHEMA>\" TO ROLE RUDDER_ROLE;\nGRANT SELECT ON TABLE \"<YOUR_DATABASE>\".\"<YOUR_SCHEMA>\".\"<YOUR_TABLE>\" TO ROLE  RUDDER_ROLE;\nGRANT SELECT ON VIEW \"<YOUR_DATABASE>\".\"<YOUR_SCHEMA>\".\"<YOUR_VIEW>\" TO ROLE  RUDDER_ROLE;\n```\n\nReplace `<YOUR_WAREHOUSE>`, `<YOUR_DATABASE>`, `<YOUR_SCHEMA>`, `<YOUR_TABLE>`, and `<YOUR_VIEW>` with the exact names of your Snowflake warehouse, database, schema, table, and view respectively.\n\n#### **Optional commands**\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Run the following commands **only** if you’re okay with RudderStack being able to access all current or future tables/views within your specified schema.\n\n*   To allow the role `RUDDER_ROLE` to read data from **all** the tables in the schema `<YOUR_SCHEMA>`.\n\n```\nGRANT SELECT ON ALL TABLES IN SCHEMA \"<YOUR_DATABASE>\".\"<YOUR_SCHEMA>\" TO ROLE RUDDER_ROLE;\n```\n\n*   To allow the role `<RUDDER_ROLE>` to read data from all **future tables** in the schema `<YOUR_SCHEMA>`.\n\n```\nGRANT SELECT ON FUTURE TABLES IN SCHEMA \"<YOUR_DATABASE>\".\"<YOUR_SCHEMA>\" TO ROLE RUDDER_ROLE;\n```\n\n*   To allow the role `RUDDER_ROLE` to read data from **all** the views in the schema `<YOUR_SCHEMA>`.\n\n```\nGRANT SELECT ON ALL VIEWS IN SCHEMA \"<YOUR_DATABASE>\".\"<YOUR_SCHEMA>\" TO ROLE RUDDER_ROLE;\n```\n\n*   To allow the role `<RUDDER_ROLE>` to read data from all **future views** in the schema `<YOUR_SCHEMA>`.\n\n```\nGRANT SELECT ON FUTURE VIEWS IN SCHEMA \"<YOUR_DATABASE>\".\"<YOUR_SCHEMA>\" TO ROLE RUDDER_ROLE;\n```\n\nReplace `<YOUR_DATABASE>` and `<YOUR_SCHEMA>` with the exact Snowflake database and the schema names.\n\n## Set up Snowflake source in RudderStack\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  On the **Connections** page, click **Add source**.\n3.  Under **Sources**, click **Reverse ETL** and select **Snowflake**.\n\n### Configure warehouse credentials\n\nYou can choose to proceed with your existing warehouse credentials if you have configured them in the RudderStack dashboard previously. Otherwise, click **Add new credentials** to add new credentials for your warehouse.\n\n*   **Authentication Type**: Select the user authentication mechanism from the dropdown. RudderStack supports the following methods:\n    *   **Username Password Authentication**\n    *   **Key Pair Authentication**\n\n*   **Account**: Your warehouse account ID is part of your Snowflake URL. The following examples illustrate the slight differences in the account ID for various cloud providers:\n    \n    | Account ID sample | Snowflake URL | Snowflake cloud provider |\n    | --- | --- | --- |\n    | **qya56091.us-east-1** | `https://`**`qya56091.us-east-1`**`.snowflakecomputing.com` | AWS |\n    | **rx18795.east-us-2.azure** | `https://`**`rx18795.east-us-2.azure`**`.snowflakecomputing.com` | Microsoft Azure |\n    | **ah76025.us-central1.gcp** | `https://`**`ah76025.us-central1.gcp`**`.snowflakecomputing.com` | Google Cloud Platform |\n    \n*   **Database**: Enter the name of the database in which your data resides.\n    \n*   **Warehouse**: Specify the name of your data warehouse.\n    \n*   **User**: Enter the name of the user that has the required read/write access to the above database.\n    \n*   **Role**: Enter a role you want to assign to the above user. For syncing the data, you can use this role apart from the default role (`RUDDER_ROLE`) assigned in the [Create a new role and user](#step-1-creating-a-new-role-and-user-in-snowflake) section.\n    \n\nIf you have set **Authentication Type** to **Username Password Authentication**, then enter the following setting:\n\n*   **Password**: Enter the password for the user specified in the **User** field.\n\nIf you have set **Authentication Type** to **Key Pair Authentication**, then enter the following settings:\n\n*   **Private Key**: Specify the private key generated above. Make sure to include the delimiters.\n*   **Private Key Passphrase**: Specify the password you set while encrypting the private key. Leave this field blank if your private key is not encrypted.\n\n> ![danger](https://www.rudderstack.com/docs/images/danger.svg)\n> \n> The user authentication will fail if your private key is encrypted and you do not specify the passphrase.\n\nClick the **Verify** button on the top right. RudderStack will then [verify and validate your credentials](#faq). Once verified, click **Continue** to proceed.\n\n### Specify name and source type\n\nSpecify the source name and type in this step.\n\n*   **Source name**: Assign a name to uniquely identify the source in the RudderStack dashboard.\n*   **Select your source type**: RudderStack lets you set up a Reverse ETL source from a warehouse **Table**, **Model**, or **Audience**.\n\n| Source type | Description |\n| --- | --- |\n| Table | Use an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | Use custom SQL queries to fetch specific warehouse data and send them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | Filter data in your warehouse tables to create target customer lists and send them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\n#### **Use warehouse table as source**\n\nUnder **Select your source type**, choose **Table** and specify the below fields:\n\n*   **Schema**: Select the warehouse schema from the dropdown.\n*   **Table**: Choose the required table from which RudderStack syncs the data.\n*   **Primary key**: Select the column from the above table that uniquely identifies your records in the warehouse.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n[![Use table as source](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use model as source**\n\nUnder **Select your source type**, choose **Model** and click **Continue**.\n\nTo configure a model as source:\n\n1.  Enter an optional description and specify the custom SQL query in **Query** section.\n2.  Click **Run Query** to fetch the data preview.\n3.  Select the **Primary key** to use a column that uniquely identifies your warehouse records.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can set a primary key only after you run the SQL query successfully using the **Run Query** option.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` in SQL query of the model.\n\n[![Model configuration](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use audience as source**\n\nUnder **Select your source type**, choose **Audience** and follow these steps:\n\n1.  Configure your audience source by specifying the below fields:\n    \n    *   **Schema**: Select the warehouse schema from the dropdown.\n    *   **Table**: Choose the required table from which RudderStack syncs the data.\n    *   **Primary key**: Select the column from the above table that uniquely identify your records in the warehouse.\n\n[![Use audience as source](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n2.  Set your [audience conditions](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/#set-your-conditions).\n3.  Click **Preview** to see the resulting data. Then, click **Continue** to proceed.\n\n[![Audience configuration](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n### Review and complete setup\n\nTo make any changes to the warehouse credentials or source configuration, click the edit icon present next to those sections.\n\n[![Edit source configuration](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)\n\nReview your configuration and click **Create source** to complete the setup.\n\n## Connect destination\n\nYou can connect this source to an existing or new [destination](https://www.rudderstack.com/docs/destinations/overview/) to start using it. To connect to a destination later, click **Done** on the top right.\n\n[![Next steps](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)\n\nYou will then be redirected to the **Overview** page of the source where you get the option of connecting it to an existing or new destination.\n\n[![Add destination](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)\n\nSee [Set up Reverse ETL Connection](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/) section for more information.\n\n## Update source configuration and settings\n\nGo to the **Configuration** tab of your Reverse ETL source to update the configuration depending on your source type:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot change the source type on this page.\n\n[![Update source configuration](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)\n\nThe below table lists the options you can update:\n\n| Source type | Configurable options |\n| --- | --- |\n| Table | [Schema, Table, Primary key](#use-warehouse-table-as-source) |\n| Model | *   [Model settings](#use-model-as-source)<br>*   [Primary key](#use-model-as-source)<br><br>**Note**: You can set the primary key only after the SQL query runs successfully. |\n| Audience | *   [Schema, Table, Primary key](#use-audience-as-source)<br>*   [Audience conditions](#use-audience-as-source) |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> After updating the configuration, the next sync will be a full sync.\n\nGo to the **Settings** tab to:\n\n*   Get your source ID.\n*   Change your warehouse credentials.\n*   [Set up custom alerts](https://www.rudderstack.com/docs/data-governance/alerts/) for your Reverse ETL source.\n*   Delete the source permanently.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot delete a source that is connected to any destination.\n\n[![Edit source settings](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)\n\n## FAQ\n\n#### **What do the three validations under Verifying Credentials imply?**\n\nWhen setting up a Reverse ETL source, you will see the following three validations under the **Verifying Credentials** option once you proceed after entering the warehouse credentials:\n\n[![Validating credentials](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)\n\nThese options are explained below:\n\n*   **Verifying Connection**: This option indicates that RudderStack is trying to connect to the warehouse with the provided warehouse credentials.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, it means that one or more fields specified in the warehouse credentials are incorrect. Verify your credentials in this case.\n\n*   **Able to List Schema**: This option checks if RudderStack is able to fetch all schema details by using the provided credentials.\n*   **Able to Access RudderStack Schema**: This option implies that RudderStack is able to access the `_rudderstack` schema you have created by running all commands in the [User Permissions](#creating-the-rudderstack-schema-and-granting-permissions) section.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, verify if you have successfully created the `_rudderstack` schema and given RudderStack the required permissions to access it.\n\n#### **What is the difference between the Table, Model, and Audience options when creating a Reverse ETL source?**\n\nWhen creating a new Reverse ETL source, you are presented with the following options from which RudderStack syncs the data:\n\n| Source type | Description |\n| --- | --- |\n| Table | RudderStack uses an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | RudderStack uses custom SQL queries to fetch specific warehouse data and sends them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | RudderStack filters data in your warehouse tables to create target customer lists and sends them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Snowflake Reverse ETL Source | RudderStack Docs",
  "description": "Send data from Snowflake to your entire stack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/posthog/",
  "markdown": "# PostHog source | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "PostHog source | RudderStack Docs",
  "description": "Ingest your event data from PostHog into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/get-started/rudderstack-open-source/data-plane-setup/",
  "markdown": "# Data plane setup | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Data plane setup | RudderStack Docs",
  "description": "Install and set up the RudderStack data plane (backend) in your preferred environment.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/ios-v2/",
  "markdown": "# iOS SDK v2 | RudderStack Docs\n\n## iOS SDK v2 Beta\n\nUse the RudderStack iOS SDK v2 to send events from your iOS/macOS/tvOS/watchOS apps to various destinations.\n\n* * *\n\n*     20 minute read  \n    \n\nThe **RudderStack iOS SDK** lets you track the customer event data from your iOS, macOS, tvOS, and watchOS applications and send it to the specified destinations via RudderStack.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> *   tvOS is supported in version **1.1.0 and above**\n> *   watchOS is supported in version **v1.3.1 and above**\n> *   macOS is supported in version **2.0.0 and above**\n\nRefer to the [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-ios/tree/master-v2) to get a more hands-on understanding of the SDK.\n\n[![](https://img.shields.io/badge/dynamic/json?color=blue&label=pod&query=%24.version&url=https%3A%2F%2Fraw.githubusercontent.com%2Frudderlabs%2Frudder-sdk-ios%2Fmaster-v2%2Fpackage.json)](https://github.com/rudderlabs/rudder-sdk-ios/tree/master-v2)  \n\n## SDK setup requirements\n\nTo set up the RudderStack iOS SDK, the following prerequisites must be met:\n\n*   You need to set up a [RudderStack account](https://app.rudderstack.com/signup).\n*   Once signed up, [set up an iOS source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the dashboard. You should be able to see a **Write Key** for this source, as shown below:\n\n[![iOS source write key](https://www.rudderstack.com/docs/images/event-stream-sources/ios-write-key.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/ios-write-key.webp)\n\n*   You also need a data plane URL. Refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has an SDK installation snippet containing both the write key and the data plane URL. You can use it to integrate the iOS SDK into your project.\n\n*   Finally, you need a Mac with the latest version of [Xcode](https://developer.apple.com/xcode/).\n\n## Installing the RudderStack iOS SDK\n\nThe RudderStack iOS SDK is distributed through [Cocoapods](https://cocoapods.org/pods/Rudder) and [Carthage](https://github.com/Carthage/Carthage).\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The recommended and easiest way to add the SDK to your project is through `Podfile`.\n\nFollow these steps to install the SDK depending on your preferred method:\n\n1.  Add the SDK to your `Podfile`:\n\n2.  Run the following command:\n\nAdd the SDK to your `Cartfile`:\n\n```\ngithub \"rudderlabs/rudder-sdk-ios\"\n```\n\nThen, run the following command:\n\nRemember to include the following code in all the `.m` and `.h` files (Objective-C) or the `.swift` files where you want to refer to or use the RudderStack SDK classes:\n\nRudderStack uses [SQLite](https://sqlite.org/index.html) to temporarily store the events before sending them to the data plane. Making calls which are not thread-safe, like `SQLite.shutdown()`, might lead to unexpected crashes.\n\n### Swift Package Manager\n\nYou can also install the iOS SDK through Swift Package Manager (SPM) via one of the following methods:\n\nTo add the RudderStack package in Xcode, follow these steps:\n\n1.  Go to **File**\\> **Add Package**.\n2.  In the search bar, enter the package repository `git@github.com:rudderlabs/rudder-sdk-ios.git`.\n3.  In **Dependency Rule**, select **Up to Next Major Version** and enter the value as **2.2.5**:\n\n![SPM dependency rule](https://www.rudderstack.com/docs/images/event-stream-sources/spm-dependency-rule-v2.webp)\n\n4.  Select the project to which you want to add the package and click **Add Package**.\n\nTo use the RudderStack Swift package, include the following snippet in your project:  \n\n```\n// swift-tools-version:5.5\n// The swift-tools-version declares the minimum version of Swift required to build this package.\n\nimport PackageDescription\n\nlet package = Package(\n    name: \"RudderStack\",\n    products: [\n        // Products define the executables and libraries a package produces, and make them visible to other packages.\n        .library(\n            name: \"RudderStack\",\n            targets: [\"RudderStack\"]),\n    ],\n    dependencies: [\n        // Dependencies declare other packages that this package depends on.\n        .package(url: \"git@github.com:rudderlabs/rudder-sdk-ios.git\", from: \"1.8.0\")\n    ],\n    targets: [\n        // Targets are the basic building blocks of a package. A target can define a module or a test suite.\n        // Targets can depend on other targets in this package, and on products in packages this package depends on.\n        .target(\n            name: \"RudderStack\",\n            dependencies: [\n                .product(name: \"Rudder\", package: \"rudder-sdk-ios\")\n            ]),\n        .testTarget(\n            name: \"RudderStackTests\",\n            dependencies: [\"RudderStack\"]),\n    ]\n)\n```\n\n## Initializing the RudderStack client\n\nTo initialize the RudderStack client, place the following code in your `AppDelegate` file under the `didFinishLaunchingWithOptions` method:\n\n```\nRSConfig *config = [[RSConfig alloc] initWithWriteKey:WRITE_KEY];\n[config dataPlaneURL:DATA_PLANE_URL];\n[config trackLifecycleEvents:YES];\n[config recordScreenViews:YES];\n\n[[RSClient sharedInstance] configureWith:config];\n```\n\nA shared instance of `RSClient` is accessible after the initialization via `[RSClient sharedInstance]`.\n\n```\nlet config: RSConfig = RSConfig(writeKey: WRITE_KEY)\n                  .dataPlaneURL(DATA_PLANE_URL)\n                  .trackLifecycleEvents(true)\n                  .recordScreenViews(true)\n        \nRSClient.sharedInstance().configure(with: config)\n```\n\nA shared instance of `RSClient` is accesible after the initialization via `RSClient.sharedInstance()`\n\nRudderStack automatically tracks the following [application lifecycle events](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/):\n\n*   [`Application Installed`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-installed)\n*   [`Application Updated`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-updated)\n*   [`Application Opened`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-opened)\n*   [`Application Backgrounded`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-backgrounded)\n\nYou can disable these events using the `trackLifecycleEvents` method of `RSConfig` by passing `false`. However, it is highly recommended to keep them enabled.\n\n## Configuring the RudderStack client\n\nYou can configure your client based on the following parameters using `RSConfig`:\n\n| Parameter | Type | Description | Default value |\n| --- | --- | --- | --- |\n| `logLevel` | `RSLogLevel` | Controls how much of the log you want to see from the SDK. | `RSLogLevel.none` |\n| `dataPlaneUrl` | String | Your data plane URL. | `https://hosted.rudderlabs.com` |\n| `flushQueueSize` | Integer | Number of events in a batch request sent to the server. | `30` |\n| `dbCountThreshold` | Integer | Number of events to be saved in the SQLite database. Once the limit is reached, older events are deleted from the database. | `10000` |\n| `sleepTimeout` | Integer | Minimum waiting time to flush the events to the server. | `10 seconds` |\n| `trackLifecycleEvents` | Boolean | Determines if the SDK will capture application life cycle events automatically. | `true` |\n| `autoSessionTracking` | Boolean | Determines if the SDK automatically tracks user sessions. See [Tracking user sessions](#tracking-user-sessions) for more information. | `true` |\n| `sessionTimeout` | Integer | Maximum inactivity period before the session expires. | `300000 ms` (5 minutes) |\n| `recordScreenViews` | Boolean | Determines if the SDK will capture will capture screen view events automatically. | `false` |\n| `controlPlaneUrl` | String | This parameter should be changed **only if** you are self-hosting the control plane. Refer to the [Self-hosted control plane](#self-hosted-control-plane) section below for more information. The SDK will add `/sourceConfig` along with this URL to fetch the required configuration. | `https://api.rudderlabs.com` |\n\n### Self-hosted control plane\n\nIf you are using a device mode destination like Adjust, Firebase, etc., the SDK needs to fetch the required configuration from the control plane. If you are using the [Control Plane Lite](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/) utility to host your own control plane, then follow the steps in [this section](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/#using-sdk-sources-set-up-in-self-hosted-control-plane) and specify `controlPlaneUrl` in `RSConfig` that points to your hosted source configuration file.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Do not pass the `controlPlaneUrl` parameter during the SDK initialization if you are using [RudderStack Cloud](https://app.rudderstack.com/). This parameter is supported only if you are self-hosting the control plane using the [Control Plane Lite](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/) utility.\n\n## OneTrust consent\n\nThe iOS SDK integrates with the OneTrust consent manager and lets you specify the user’s consent during initialization. For more information, refer to the [OneTrust Consent Management for iOS](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/ios/) guide.\n\n## Tracking user sessions\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The iOS SDK v2 supports session tracking starting v2.3.0.\n\nBy default, the iOS SDK automatically tracks user sessions. RudderStack automatically determines the start and end of a user session depending on the inactivity time configured in the SDK (default time is 5 minutes).\n\n```\nRSConfig *config = [[RSConfig alloc] initWithWriteKey:WRITE_KEY];\n[config dataPlaneURL:DATA_PLANE_URL];\n[config autoSessionTracking:YES];\n[config sessionTimeout:5*60*1000L];\nRSClient *client = [RSClient sharedInstance];\n[client configureWith:config];\n```\n\n```\nlet config: RSConfig = RSConfig(writeKey: WRITE_KEY)\n            .dataPlaneURL(DATA_PLANE_URL)\n            .autoSessionTracking(true)\n            .sessionTimeout(5*60*1000)\nRSClient.sharedInstance().configure(with: config)\n```\n\nTo disable automatic session tracking, set `autoSessionTracking` to `false`.\n\nFor more information on user sessions and tracking them using the iOS SDK, see [Session Tracking](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/).\n\n## Supported API calls\n\nThe iOS SDK supports all the API calls specified in the [RudderStack Events Spec](https://www.rudderstack.com/docs/event-spec/standard-events/) guide. These include `identify`, `track`, `screen`, `group`, `alias`, and `reset` calls.\n\n## Identify\n\nThe [](https://www.rudderstack.com/docs/event-spec/standard-events/identify/)call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc. Once you identify the user, the SDK persists all the user information and passes it on to the subsequent `track` or `screen` calls. To reset the user identification, you can use the `reset` method.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack captures `deviceId` and uses that as `anonymousId` for identifying unknown users. This helps in tracking the users across the application installation.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> According to the [Apple documentation](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor), if a device has multiple apps from the same vendor, all the apps will be assigned the same `deviceId`. If all the applications from the vendor are uninstalled, then a new `deviceId` will be assigned to the apps on the next install.\n\nAn sample `identify` call is shown below:\n\n```\n[[RSClient sharedInstance] identify:@\"user_id\" traits:@{@\"email\": @\"alex@example.com\"}];\n```\n\n```\nRSClient.sharedInstance().identify(\"user_id\", traits: [\"email\": \"alex@example.com\"])\n```\n\nThe `identify` method accepts the following parameters:\n\n| Name | Data type | Presence | Description |\n| --- | --- | --- | --- |\n| `userId` | `NSString` | Required | Uniquely identifies the visiting user. |\n| `traits` | `NSDictionary` | Optional | Information on the user traits. Use the `dict` method of `RudderTraits` to convert to `NSDictionary` easily. |\n| `option` | `RSOption` | Optional | Extra options for the `identify` event. |\n\n### Setting your own anonymous ID\n\nBy default, RudderStack uses the `deviceId` as `anonymousId`. To set your own `anonymousId`, you can use the `setAnonymousId` method as shown:\n\n```\n[client setAnonymousId:@\"new_anonymous_id\"];\n```\n\n```\nRSClient.sharedInstance().setAnonymousId(\"new_anonymous_id\")\n```\n\n## Track\n\nThe [](https://www.rudderstack.com/docs/event-spec/standard-events/track/)call lets you record the user events along with any properties associated with them.\n\nA sample `track` event is shown below:\n\n```\n[[RSClient sharedInstance] track:@\"sample_track_event\" properties:@{\n    @\"key_1\": @\"value_1\",\n    @\"key_2\": @\"value_2\"\n}];\n```\n\n```\nRSClient.sharedInstance().track(\"sample_track_event\", properties: [\n    \"key_1\": \"value_1\",\n    \"key_2\": \"value_2\"\n])\n```\n\n`track` method accepts the following parameters:\n\n| Name | Data type | Presence | Description |\n| --- | --- | --- | --- |\n| `eventName` | `NSString` | Required | Name of the tracked event. |\n| `properties` | `NSDictionary` | Optional | Extra data properties to be sent along with the event. |\n| `option` | `RSOption` | Optional | Extra event options. |\n\n## Screen\n\nThe [screen](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call lets you record whenever a user views their mobile screen, with any additional relevant information about the screen.\n\nA sample `screen` event is as shown:\n\n```\n[[RSClient sharedInstance] screen:@\"ViewController\" properties:@{\n  @\"key_1\": @\"value_1\",\n  @\"key_2\": @\"value_2\"\n} ];\n```\n\n```\nRSClient.sharedInstance().screen(\"ViewController\", properties: [\n    \"key_1\": \"value_1\",\n    \"key_2\": \"value_2\"\n])\n```\n\nThe `screen` method accepts the following parameters:\n\n| Name | Data type | Presence | Description |\n| --- | --- | --- | --- |\n| `screenName` | `NSString` | Required | Name of the screen viewed by the user. |\n| `properties` | `NSDictionary` | Optional | Extra property object to be passed along with the `screen` call. |\n| `option` | `RSOption` | Optional | Extra options to be passed along with the `screen` call. |\n\n## Group\n\nThe [](https://www.rudderstack.com/docs/event-spec/standard-events/group/)call lets you link an identified user with a group like a company, organization, or an account. It also lets you record any traits associated with that group, like the name of the company, number of employees, etc.\n\nA sample `group` call is shown below:\n\n```\n[[RSClient sharedInstance] group:@\"sample_group_id\" traits:@{\n  @\"key_1\": @\"value_1\",\n  @\"key_2\": @\"value_2\"\n} ];\n```\n\n```\nRSClient.sharedInstance().group(\"sample_group_id\", traits: [\n  \"key_1\": \"value_1\",\n  \"key_2\": \"value_2\"\n])\n```\n\nThe `group` method accepts the following parameters:\n\n| Name | Data type | Presence | Description |\n| --- | --- | --- | --- |\n| `groupId` | `String` | Required | The unique identifier of the group with which you want to associate your user. |\n| `traits` | `NSDictionary` | Optional | Any other property of the organization you want to pass along with the call. |\n| `option` | `RSOption` | Optional | Extra event-level options to be passed along with the `group` call. |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The iOS SDK does not persist the group traits across the sessions.\n\n## Alias\n\nThe [alias](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call associates the user with a new identification. A sample `alias` call is shown below:\n\n```\n[[RSClient sharedInstance] alias:@\"new_user_id\"];\n```\n\n```\nRSClient.sharedInstance().alias(\"new_user_id\")\n```\n\nAlternatively, you can use the following method signature:\n\n| Name | Data type | Presence | Description |\n| --- | --- | --- | --- |\n| `newId` | `String` | Required | The new `userId` you want to assign to the user. |\n| `option` | `RSOption` | Optional | Event-level options. |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack replaces the old `userId` with the `newUserId` and persists that identification across the sessions.\n\n## Reset\n\nYou can use the `reset` method to clear the persisted user traits from the `identify` call. This is required for the user logout operation.\n\nIn [session tracking](https://rudderstack.com/docs/sources/event-streams/sdks/session-tracking/#:~:text=tracking%20is%20enabled%3A-,sessionId,-%28Number%29%3A%20The%20session), calling the `reset` method clears the current `sessionId` and generates a new one.\n\n```\n[[RSClient sharedInstance] reset];\n```\n\n```\nRSClient.sharedInstance().reset()\n```\n\n## Setting a custom ID\n\nYou can pass a custom ID along with the standard `userId` in all your API calls. RudderStack adds this value under `context.externalId`.\n\nThe SDK does not **not** persist the `externalId` information across other API calls. To use it, you will need to pass `externalId` in every event.\n\nThe following snippet shows how to add an `externalId` to your `identify` event:\n\n```\nRSOption *eventOption = [[RSOption alloc] init];\n[eventOption putExternalId:@\"brazeExternalId\" withId:@\"some_external_id_1\"];\n    \n[[RSClient sharedInstance] identify:@\"1hKOmRA4GRlm\" traits:@{@\"email\": @\"alex@example.com\"} option:eventOption];\n```\n\n```\nlet messageOption = RSOption()\nmessageOption.putExternalId(\"brazeExternalId\", withId: \"some_external_id_1\")\n\nRSClient.sharedInstance().identify(\"1hKOmRA4GRlm\", traits: [\"email\": \"alex@example.com\"], option: messageOption)\n```\n\nRudderStack gives the users (for example, an EU user) the ability to opt out of tracking any user activity until they give their consent. You can do this by leveraging RudderStack’s `setOptOutStatus` API.\n\nThe `setOptOutStatus` API takes `YES`/`NO` (Objective-C) or `true`/`false` (Swift) as a Boolean value to enable or disable the user tracking activities. This flag persists across device reboots.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You need to call the `setoptOutStatus` API with the relevant parameter only once, as the information persists within the device even if you reboot it.\n\nThe following snippet highlights the use of the `setoptOutStatus` API to disable user tracking:\n\n```\n[[RSClient sharedInstance] setOptOutStatus:YES];\n```\n\n```\nRSClient.sharedInstance().setOptOutStatus(true)\n```\n\nOnce the user grants their consent, you can enable user tracking once again using the `setOptOutStatus` API by passing `NO` or `false`:\n\n```\n[[RSClient sharedInstance] setOptOutStatus:NO];\n```\n\n```\nRSClient.sharedInstance().setOptOutStatus(false)\n```\n\n## Supporting push notifications for device mode destinations\n\nWith the iOS SDK, you need not call the individual destination’s API in your app to implement the push notifications support; calling the SDK’s push notification API is sufficient.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This feature is specific to RudderStack iOS SDK v2 and is **not available** in the earlier SDK versions. Also, it is only applicable for the [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode) integrations.\n\nTo enable push notifications for your device mode destinations, the SDK provides the following functions:\n\n```\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken;\n\n- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error;\n\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler;\n\n- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler;\n```\n\n```\n- func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data)\n\n- func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error)\n\n- func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void)\n\n- func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void)\n```\n\nTo implement these functions, go to your `AppDelegate` file and add the following lines:\n\n```\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n    [[RSClient sharedInstance] application:application didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\n}\n\n- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n    [[RSClient sharedInstance] application:application didFailToRegisterForRemoteNotificationsWithError:error];\n}\n\n- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler {\n    [[RSClient sharedInstance] userNotificationCenter:center didReceive:response withCompletionHandler:completionHandler];\n}\n\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {\n    [[RSClient sharedInstance] application:application didReceiveRemoteNotification:userInfo fetchCompletionHandler:completionHandler];\n}\n```\n\n```\n- func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    RSClient.sharedInstance().application(application, didRegisterForRemoteNotificationsWithDeviceToken: deviceToken)\n}\n\n- func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n    RSClient.sharedInstance().application(application, didFailToRegisterForRemoteNotificationsWithError: error)\n}\n\n- func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n    RSClient.sharedInstance().userNotificationCenter(center, didReceive: response, withCompletionHandler: completionHandler)\n}\n\n- func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n    RSClient.sharedInstance().application(application, didReceiveRemoteNotification: userInfo, fetchCompletionHandler: completionHandler)\n}\n```\n\n## Setting the device token for push notifications\n\nTo pass push notifications to the destinations that support it, you can pass your device token using the `setDeviceToken` method:\n\n```\n[[RSClient sharedInstance] setDeviceToken:@\"example_device_token\"];\n```\n\n```\nRSClient.sharedInstance().setDeviceToken(\"example_device_token\")\n```\n\nRudderStack sets the device token under `context.device.token`.\n\n## Setting the advertisement ID\n\nRudderStack separates the IDFA collection from the core library so that you have better control over it.\n\nYou can pass the IDFA to the `setAdvertisementId` method to set it under `context.device.advertisingId`:\n\n```\n[[RSClient sharedInstance] setAdvertisingId:[self getIDFA]];\n\n- (NSString*)getIDFA {\n    return [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];\n}\n```\n\n```\nRSClient.sharedInstance().setAdvertisingId(getIDFA())\n\nfunc getIDFA() -> String {\n\t\treturn ASIdentifierManager.shared().advertisingIdentifier.uuidString\n}\n```\n\nYou can pass [`ATTrackingManager.trackingAuthorizationStatus`](https://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/3547038-trackingauthorizationstatus) to RudderStack and it is passed along to the relevant destinations as configured.\n\nFor example, AppsFlyer accepts this parameter for the attribution to work in their [server-to-server events flow](https://support.appsflyer.com/hc/en-us/articles/207034486-Server-to-server-events-API-for-mobile-S2S-mobile-#att-3).\n\n```\n[[RSClient sharedInstance] setAppTrackingConsent:RSAppTrackingConsentAuthorize];\n```\n\n```\nRSClient.sharedInstance().setAppTrackingConsent(.authorize)\n```\n\nYou can pass the following options to the `setAppTrackingConsent` method to set the relevant authorization consent:\n\n*   `RSATTNotDetermined`\n*   `RSATTRestricted`\n*   `RSATTDenied`\n*   `RSATTAuthorize`\n\n## Filtering device mode events\n\nWhen sending events to a destination via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode), you can explicitly specify which events should be discarded or allowed to flow through - by allowlisting or denylisting them.\n\n## Enabling/disabling events for specific destinations\n\nThe RudderStack iOS SDK lets you enable or disable event flow to a specific destination or all the destinations to which the source is connected. You can specify these destinations by creating a `RSOption` object as shown:\n\n```\nRSOption *option = [[RSOption alloc]init];\n//default value for `All` is true\n[option putIntegration:@\"All\" isEnabled:YES];\n// specifying destination by its display name\n[option putIntegration:@\"Amplitude\" isEnabled:YES];\n[option putIntegration:@\"<DESTINATION_DISPLAY_NAME>\" isEnabled:<BOOLEAN>];\n```\n\n```\nlet option:RSOption = RSOption();\n//default value for `All` is true\noption.putIntegration(\"All\", isEnabled:true)\n// specifying destination by its display name\noption.putIntegration(\"Amplitude\", isEnabled:true)\noption.putIntegration(<DESTINATION_DISPLAY_NAME>, isEnabled:<BOOLEAN>)\n```\n\nThe keyword `All` in the above snippet represents all the destinations the source is connected to. The SDK sets its value to `true` by default.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Make sure the `DESTINATION_DISPLAY_NAME` you specify above should exactly match the destination name as shown in the [RudderStack dashboard](https://app.rudderstack.com/directory).\n\nYou can pass the destinations specified to the SDK in the following two ways:\n\n### Method 1: Passing destinations while initializing the SDK\n\nThis approach is helpful when you want to enable/disable sending the events to the destinations **across all the event calls** made using the SDK.\n\n```\nRSOption *defaultOption = [[RSOption alloc] init];\n[defaultOption putIntegration:@\"Amplitude\" isEnabled:YES];\n\n[[RSClient sharedInstance] setOption:defaultOption];\n```\n\n```\nlet defaultOption = RSOption()\ndefaultOption.putIntegration(\"Amplitude\", isEnabled: true)\n\nRSClient.sharedInstance().setOption(defaultOption)\n```\n\n### Method 1: Passing destinations while initializing the SDK\n\nThis approach is helpful when you want to enable/disable sending only specific events to the destinations.\n\n```\nRSOption *eventOption = [[RSOption alloc] init];\n[eventOption putIntegration:@\"Amplitude\" isEnabled:YES];\n\n[[RSClient sharedInstance] track:@\"sample_track\" properties:@{@\"key_1\": @\"value_1\", @\"key_2\": @\"value_2\"} option:eventOption];\n```\n\n```\nlet eventOption = RSOption()\neventOption.putIntegration(\"MoEngage\", isEnabled: true)\n\nRSClient.sharedInstance().track(\"sample_track\", option: eventOption)\n```\n\nIf you use the `RSOption` object to specify the destinations both while initializing the SDK as well as making an event call, then RudderStack will consider only the destinations specified at the event level.\n\n## Debugging\n\nIf you run into any issues regarding the RudderStack iOS SDK, you can enable `VERBOSE` or `DEBUG` logging to determine the issue.\n\nTo enable the logging, change your `RSClient` initialization as shown:\n\n```\nRSConfig *config = [[RSConfig alloc] initWithWriteKey:WRITE_KEY];\n[config dataPlaneURL:DATA_PLANE_URL];\n[config loglevel:RSLogLevelDebug];\n\n[[RSClient sharedInstance] configureWith:config];\n```\n\n```\nlet config: RSConfig = RSConfig(writeKey: WRITE_KEY)\n            .dataPlaneURL(DATA_PLANE_URL)\n            .loglevel(.debug)\n        \nRSClient.sharedInstance().configure(with: config)\n```\n\n## Adding Chromecast support\n\n[Google Chromecast](https://store.google.com/in/product/chromecast?hl=en-GB) is a device that plugs into your TV or monitor with an HDMI port, and can be used to stream content from your phone or computer.\n\nRudderStack supports integrating the iOS SDK with your Cast app. Follow [these instructions](https://developers.google.com/cast/docs/ios_sender) to build your iOS sender app. Then, add the iOS SDK to it. Follow the [Google Cast developer guide](https://developers.google.com/cast/docs/developers) for more details.\n\n## Developing a device mode destination\n\nThis section details the steps required to develop a device mode destination in case RudderStack doesn’t support it already.\n\nMore information on the RudderStack device mode can be found in the [Connection Modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/) guide.\n\n1.  Create a `RSCustomDestination.swift` file by extending `RSDestinationPlugin`:\n\n```\nclass RSCustomDestination: RSDestinationPlugin {\n    var key: String = \"Custom\"\n    var controller = RSController()\n    var type: PluginType = .destination\n    var RSClient.sharedInstance(): RSClient?\n    \n    func update(serverConfig: RSServerConfig, type: UpdateType) {\n        guard type == .initial else { return }\n        // Some code\n    }\n    \n    func track(message: TrackMessage) -> TrackMessage? {\n        // Some code\n        return message\n    }\n    \n    func identify(message: IdentifyMessage) -> IdentifyMessage? {\n        // Some code\n        return message\n    }\n    \n    func screen(message: ScreenMessage) -> ScreenMessage? {\n        // Some code\n        return message\n    }\n    \n    func group(message: GroupMessage) -> GroupMessage? {\n        // Some code\n        return message\n    }\n    \n    func alias(message: AliasMessage) -> AliasMessage? {\n        // Some code\n        return message\n    }\n    \n    func flush() {\n        // Some code\n    }\n    \n    func reset() {\n        // Some code\n    }\n}\n```\n\n2.  Then, create a `CustomDestination` class file by extending `RudderDestination` and initialize `RSCustomDestination` inside `init()`:\n\n```\n@objc\nclass CustomDestination: RudderDestination {\n    override init() {\n        super.init()\n        plugin = RSCustomDestination()\n    }\n}\n```\n\n3.  For Objective-C projects, a dialog box will appear while creating the Swift file - asking you to create a bridging header if it does not exist already. In this case, choose **Create Bridging Header**. This creates a `<PROJECT_MODULE_NAME>-Bridging-Header.h` file.\n    \n4.  After creating the Bridging Header, search **Objective-C Generated Interface Header Name** in **Build Settings** and keep the header name handy. This should be something like `<PROJECT_MODULE_NAME>-Swift.h`.\n    \n5.  Finally, add the `CustomDestination` with the RudderStack iOS SDK after its initialization:\n    \n\n```\nRSClient.sharedInstance().addDestination(CustomDestination())\n```\n\n```\n#import \"<project_module_name>-Swift.h\"\n\n[[RSClient sharedInstance] addDestination:[[CustomDestination alloc] init]];\n```\n\n## Privacy manifest\n\nYour apps and third-party SDKs (usually distributed as Swift packages, XCFrameworks, or framework bundles) contain a privacy manifest file named `PrivacyInfo.xcprivacy`. It records the data collected by your app/third-party SDK and the associated [required reason API](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_use_of_required_reason_api).\n\nYou need to record the reasons in your privacy manifest for each data type your app/SDK collects along with the category of required reasons API that it uses.\n\nSee the [Apple developer documentation](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files#4284009) for more information on creating a privacy manifest.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Starting Spring 2024, you are required to include an approved reason in your app’s privacy manifest that accurately reflects how your app uses the API.\n> \n> This is a mandatory requirement to upload a new app/app update to the App Store Connect. For more information, see this [Apple update](https://developer.apple.com/news/?id=z6fu1dcu).\n\n#### **Privacy Accessed API Types**\n\n`NSPrivacyAccessedAPITypes` is an array of dictionaries describing the API types your app/third-party SDK accesses that have been designated as APIs that require reasons to access.\n\nThe RudderStack iOS SDK only uses the `userDefaults` API to store user and context information and it is declared in the privacy manifest in the [iOS SDK repository](https://github.com/rudderlabs/rudder-sdk-ios/tree/develop-v2/Sources/Resources).\n\n#### **Privacy tracking domains**\n\n`NSPrivacyTrackingDomains` is an array of strings listing the internet domains that your app/third-party SDK connects to for tracking purposes. If the user has not granted the tracking permissions through the App Tracking Transparency framework, the network requests to these domains fail and you get an error on your app.\n\nIf your application utilizes data for tracking users as [outlined by Apple](https://developer.apple.com/app-store/user-privacy-and-data-use/), it is important to seek the user’s consent first. Also, make sure to include the following domain in your app’s privacy manifest under the purpose `NSPrivacyTrackingDomains`:\n\n*   `rudderstack.com/`\n\n#### **Privacy Nutrition Label Types**\n\n`NSPrivacyCollectedDataTypes` is an array of dictionaries that describe the data types your app/third-party SDK collects.\n\nThe RudderStack iOS SDK includes an array of [Privacy Nutrition Label Types](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_data_use_in_privacy_manifests#4250555) for the following automatically-collected fields:\n\n| Data | Linked to user | Used for tracking | Collection purpose |\n| --- | --- | --- | --- |\n| App version | No  | No  | *   **Developer advertising or marketing**<br>*   **Analytics** |\n| App name | No  | No  | *   **Developer advertising or marketing**<br>*   **Analytics** |\n| Device ID | No  | No  | *   **Developer advertising or marketing**<br>*   **Analytics**<br>*   **Third-party advertising** |\n\nSee the [Apple developer documentation](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_data_use_in_privacy_manifests#4250556) for more information on the above collection purposes.\n\n## FAQ\n\n#### I’m facing issues building with Carthage on XCode 12. What should I do?\n\nIf you’re facing an issue with Carthage and XCode 12, you can follow [this workaround](https://github.com/Carthage/Carthage/blob/master/Documentation/Xcode12Workaround.md) suggested by the Carthage team.\n\n#### Does the iOS SDK support the tvOS, macOS, and watchOS platforms?\n\nYes, the iOS SDK supports tvOS and watchOS platforms. Refer to the table below for the version details:\n\n| Platform | Supported SDK version |\n| --- | --- |\n| [tvOS](https://developer.apple.com/tvos/) | 1.1.0 and above |\n| [watchOS](https://developer.apple.com/watchos/) | 1.3.0 and above |\n| [macOS](https://developer.apple.com/macos/) | 2.0.0 and above |\n\n#### How do I migrate from an older SDK version (v1.x) to the current version?\n\nTo migrate from the older SDK versions, update the usage of the following classes:\n\n| Previous Name | Updated Name |\n| --- | --- |\n| `RudderClient` | `RSClient` |\n| `RudderConfig` | `RSConfig` |\n| `RudderLogLevelDebug` | `RSLogLevelDebug` |\n\n#### How can I get the user `traits` after making the `identify` call?\n\nYou can get the user traits after making an `identify` call in the following way:\n\n```\nlet traits = RSClient.sharedInstance().traits\n```\n\n```\nNSDictionary *traits = [RSClient sharedInstance].traits;\n// or\nNSDictionary *traits = [[RSClient sharedInstance] traits];\n```\n\n#### How does the SDK handle different client/server errors?\n\nIn case of client-side errors, for example, if the source write key passed to the SDK is incorrect, RudderStack gives a **400 Bad Request** response and aborts the operation immediately. For other types of network errors, for example, invalid data plane URL, the SDK tries to flush the events to RudderStack in an incremental manner (every 1 second, 2 seconds, 3 seconds, and so on).\n\n#### Why is there a difference between `timestamp` and `received_at` for iOS events vs. Android events sent at the same time?\n\nThis scenario is most likely caused by the default behavior of iOS apps staying open in the background for a short period of time after a user closes them.\n\nWhen a user closes an iOS or Android app, the events will still continue to be sent from the queue until the app closes in the background. Any events still in the queue will be retained until the user reopens the app. Due to this lag, there are some scenarios where there can be significant differences between `timestamp` (when the event was created) and `received_at` (when RudderStack actually receives the event).\n\nFor Android apps, events can be sent from the background after apps close for a longer period of time than iOS apps, therefore, more of the events coming from the Android SDK have closer `timestamp` and `received_at` times.\n\n#### Does RudderStack integrate with SKAdNetwork?\n\nRudderStack does not integrate with SKAdNetwork. However, SKAdNetwork can be directly integrated into an iOS application alongside RudderStack.\n\n#### Can I disable event tracking until the user gives their consent?\n\nYes, you can. Refer to the [Enabling/disabling user tracking via the `setOptOutStatus` API](#enablingdisabling-user-tracking-via-the-setoptoutstatus-api-gdpr-support) section for more information.\n\n#### How does the iOS SDK handle events larger than 32KB?\n\nThe iOS SDK drops any events greater than 32KB.\n\n#### Why am I getting a warning in `Points of Interest` instruments?\n\nYou may get a warning in your `Points of Interest` instrument if `rudderstack.com/` is not listed in your app’s `NSPrivacyTrackingDomain` key in any privacy manifest. It may be following users across multiple apps and websites to create user profiles for apps that contact this domain.\n\nTo resolve this issue, make sure to:\n\n*   Seek user consent, especially if your app utilizes data for tracking users as [outlined by Apple](https://developer.apple.com/app-store/user-privacy-and-data-use/).\n*   Include the `rudderstack.com/` domain in your app’s privacy manifest under the purpose `NSPrivacyTrackingDomains`. See [Privacy tracking domains](#privacy-tracking-domains) for more information.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "iOS SDK v2 | RudderStack Docs",
  "description": "Use the RudderStack iOS SDK v2 to send events from your iOS/macOS/tvOS/watchOS apps to various destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/refiner/",
  "markdown": "# Refiner source | RudderStack Docs\n\nIngest your event data from Refiner into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[Refiner](https://refiner.io/) is a customer feedback and survey platform. It lets you create tailored microsurveys to get a better understanding of your customers, how they interact with your product, and identify new growth opportunities.\n\nThis guide will help you set up Refiner as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Refiner source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Refiner**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Refiner source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![Refiner source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/refiner-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/refiner-webhook-url.webp)\n\n4.  Log into your [Refiner account](https://app.refiner.io/auth/login).\n5.  Go to **Integrations** and select **Create Webhook**.\n6.  Name your webhook and enter the webhook in the **Destination URL** field as shown:\n\n[![Refiner source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/refiner-dashboard-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/refiner-dashboard-webhook.webp)\n\n7.  Finally, click **Save Webhook**.\n\n## Event transformation\n\nRudderStack ingests the Refiner events after converting them into the RudderStack event format. It also maps the following properties from the Refiner event payload to the RudderStack properties:\n\n| Refiner property | RudderStack property |\n| --- | --- |\n| `email` | `email` |\n| `triggered_event` | `event` |\n| `attributes.user_id` | `userId` |\n| `attributes`  <br>`segments` | `context.traits` |\n| `account` | `traits` |\n| `response`  <br>`form` | `properties` |\n| `last_form_submission_at` | `originaltimestamp` |\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from Refiner source and creates the resulting payload.\n\nA sample payload sent by Refiner is shown below:\n\n```\n{\n  \"uuid\": \"69b83e20-4ea2-11ed-941c-e1cb6c7a3870\",\n  \"cookie_uuid\": \"2f9b7e6a-9ba8-1c68-d474-48d719d92a60\",\n  \"project_uuid\": \"0d8759d0-401c-11ed-8ded-9757c4929b55\",\n  \"remote_id\": \"sdk@30\",\n  \"email\": \"sdk30@gmail.com\",\n  \"display_name\": \"\",\n  \"first_seen_at\": \"2022-10-18T05:04:58.000000Z\",\n  \"last_seen_at\": \"2022-10-18T05:04:58.000000Z\",\n  \"attributes\": {\n    \"address\": null,\n    \"address_city\": null,\n    \"address_state\": null,\n    \"age\": null,\n    \"another_attribute\": null,\n    \"city\": null,\n    \"country\": null,\n    \"created_at\": null,\n    \"email\": \"sdk30@gmail.com\",\n    \"event\": null,\n    \"first_name\": null,\n    \"first_seen_at\": \"2022-10-18T05:04:58.000000Z\",\n    \"form_submissions_count\": \"1\",\n    \"form_views_count\": \"1\",\n    \"gender\": null,\n    \"last_form_submission_at\": \"2022-10-18T05:05:45.000000Z\",\n    \"last_form_view_at\": \"2022-10-18T05:05:29.000000Z\",\n    \"last_name\": null,\n    \"last_seen_at\": \"2022-10-18T05:04:58.000000Z\",\n    \"name\": null,\n    \"phone\": null,\n    \"some_attribute\": null,\n    \"status\": null,\n    \"student\": null,\n    \"tag\": null,\n    \"trait1\": null,\n    \"trait2\": null,\n    \"trait3\": null,\n    \"url\": null,\n    \"user_address_city\": null,\n    \"user_address_state\": null,\n    \"user_country\": null,\n    \"user_id\": null,\n    \"username\": null,\n    \"useroccupation\": null,\n    \"why_did_you_cancel_your_subscription\": \"Missing features\"\n  },\n  \"segments\": [{\n      \"uuid\": \"0d91d7a0-401c-11ed-8898-bb1ee0c23ae5\",\n      \"name\": \"All Users\",\n      \"created_at\": \"2022-10-18T05:04:58.000000Z\",\n      \"updated_at\": \"2022-10-18T05:04:58.000000Z\"\n    },\n    {\n      \"uuid\": \"f71ad940-455c-11ed-85e0-bf25f168b224\",\n      \"name\": \"test-segment\",\n      \"created_at\": \"2022-10-18T05:04:58.000000Z\",\n      \"updated_at\": \"2022-10-18T05:04:58.000000Z\"\n    }\n  ],\n  \"account\": {\n    \"uuid\": \"69ba2030-4ea2-11ed-adfc-595e70c7ab07\",\n    \"remote_id\": null,\n    \"domain\": null,\n    \"display_name\": \"\",\n    \"first_seen_at\": \"2022-10-18T05:04:58.000000Z\",\n    \"last_seen_at\": \"2022-10-18T05:04:58.000000Z\",\n    \"attributes\": {\n      \"1\": null,\n      \"2\": null,\n      \"3\": null,\n      \"4\": null,\n      \"a_date_at\": null,\n      \"business_email\": null,\n      \"company\": null,\n      \"email\": null,\n      \"isfunded\": null,\n      \"location\": null,\n      \"name\": null,\n      \"revenue\": null,\n      \"some_account_data\": null,\n      \"trait1\": null,\n      \"trait2\": null,\n      \"trait3\": null,\n      \"user_id\": null\n    }\n  },\n  \"triggered_event\": \"Completed Survey\",\n  \"form\": {\n    \"uuid\": \"0d94c790-401c-11ed-bb27-e31f6832c5ae\",\n    \"name\": \"Customer Churn Survey\"\n  },\n  \"response\": {\n    \"uuid\": \"7c508c60-4ea2-11ed-9302-57708fe11d26\",\n    \"first_shown_at\": \"2022-10-18T05:05:29.000000Z\",\n    \"last_shown_at\": \"2022-10-18T05:05:29.000000Z\",\n    \"show_counter\": null,\n    \"first_data_reception_at\": \"2022-10-18T05:05:45.000000Z\",\n    \"last_data_reception_at\": \"2022-10-18T05:05:45.000000Z\",\n    \"completed_at\": \"2022-10-18T05:05:45.000000Z\",\n    \"dismissed_at\": null,\n    \"received_at\": \"2022-10-18T05:05:45.000000Z\",\n    \"data\": {\n      \"why_did_you_cancel_your_subscription\": \"Missing features\"\n    },\n    \"tags\": []\n  }\n}\n```\n\nRudderStack transforms the above payload into the following payload:\n\n```\n{\n  \"type\": \"identify\",\n  \"traits\": {\n    \"why_did_you_cancel_your_subscription\": \"Missing features\"\n  },\n  \"userId\": \"sdk@30\",\n  \"context\": {\n    \"traits\": {\n      \"email\": \"sdk30@gmail.com\",\n      \"segments\": [{\n          \"name\": \"All Users\",\n          \"uuid\": \"0d91d7a0-401c-11ed-8898-bb1ee0c23ae5\",\n          \"created_at\": \"2022-10-18T05:04:58.000000Z\",\n          \"updated_at\": \"2022-10-18T05:04:58.000000Z\"\n        },\n        {\n          \"name\": \"test-segment\",\n          \"uuid\": \"f71ad940-455c-11ed-85e0-bf25f168b224\",\n          \"created_at\": \"2022-10-18T05:04:58.000000Z\",\n          \"updated_at\": \"2022-10-18T05:04:58.000000Z\"\n        }\n      ]\n    },\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"formName\": \"Customer Churn Survey\",\n    \"formUuid\": \"0d94c790-401c-11ed-bb27-e31f6832c5ae\",\n    \"integration\": {\n      \"name\": \"Refiner\"\n    }\n  },\n  \"rudderId\": \"0b10eeb2-0949-4cc9-9d38-3fd1348392e2\",\n  \"messageId\": \"579f213b-5f7d-4dd4-9fa4-d3dca8a0a661\",\n  \"integrations\": {\n    \"Refiner\": false\n  },\n  \"originalTimestamp\": \"2022-10-18T05:05:45.000000Z\"\n} {\n  \"type\": \"track\",\n  \"event\": \"Completed Survey\",\n  \"userId\": \"sdk@30\",\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"formName\": \"Customer Churn Survey\",\n    \"formUuid\": \"0d94c790-401c-11ed-bb27-e31f6832c5ae\",\n    \"integration\": {\n      \"name\": \"Refiner\"\n    }\n  },\n  \"rudderId\": \"0b10eeb2-0949-4cc9-9d38-3fd1348392e2\",\n  \"messageId\": \"94e5747f-4324-4d32-8a1d-33d0a3b718e1\",\n  \"properties\": {\n    \"response\": {\n      \"data\": {\n        \"why_did_you_cancel_your_subscription\": \"Missing features\"\n      },\n      \"tags\": [],\n      \"uuid\": \"7c508c60-4ea2-11ed-9302-57708fe11d26\",\n      \"received_at\": \"2022-10-18T05:05:45.000000Z\",\n      \"completed_at\": \"2022-10-18T05:05:45.000000Z\",\n      \"last_shown_at\": \"2022-10-18T05:05:29.000000Z\",\n      \"first_shown_at\": \"2022-10-18T05:05:29.000000Z\",\n      \"last_data_reception_at\": \"2022-10-18T05:05:45.000000Z\",\n      \"first_data_reception_at\": \"2022-10-18T05:05:45.000000Z\"\n    },\n    \"refiner_form_name\": \"Customer Churn Survey\",\n    \"refiner_form_uuid\": \"0d94c790-401c-11ed-bb27-e31f6832c5ae\"\n  },\n  \"integrations\": {\n    \"Refiner\": false\n  },\n  \"originalTimestamp\": \"2022-10-18T05:05:45.000000Z\"\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Refiner source | RudderStack Docs",
  "description": "Ingest your event data from Refiner into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/reverse-etl/trino/",
  "markdown": "# Trino Reverse ETL Source | RudderStack Docs\n\nSend data from Trino to your entire stack.\n\n* * *\n\n*     8 minute read  \n    \n\n[Trino](https://trino.io/) is a distributed SQL query engine for efficient, low-latency big data analytics.\n\nRudderStack supports Trino as a data source from which you can ingest data and route it to your desired downstream destinations.\n\n## Prerequisites: Trino server setup\n\nBefore you set up Trino as a source in RudderStack, make sure your Trino server is configured correctly by following these sections:\n\n*   RudderStack supports only [password file authentication](https://trino.io/docs/current/security/password-file.html) mechanism for this source. Make sure to enable [password file authentication](https://trino.io/docs/current/security/password-file.html#password-authenticator-configuration) for your Trino instance and [create a password file](https://trino.io/docs/current/security/password-file.html#creating-a-password-file).\n*   RudderStack uses the [file-based access control](https://trino.io/docs/current/security/file-system-access-control.html) mechanism for Trino. To use the access control plugin, see [Configuration](https://trino.io/docs/current/security/file-system-access-control.html#configuration) section.\n*   This integration supports only the [Apache Hive connector](https://trino.io/docs/current/connector/hive.html) currently. To use this connector, make sure to add the following [configuration](https://trino.io/docs/current/connector/hive.html#general-configuration) in the catalog properties file using the Hive connector:\n\n```\nhive.allow-drop-table=true\nhive.metastore.thrift.delete-files-on-drop=true\n```\n\n## Grant permissions\n\nBefore you set up Trino as a source, you must grant certain permissions on your Trino instance for RudderStack to access data from it.\n\nRun the SQL queries listed in the following sections in the **exact order** to grant these permissions:\n\n### Step 1: Assign read access to tables\n\nThis step gives RudderStack the necessary permissions to read the relevant table records in Trino.\n\nTo sync a table `sample_table` in `user_schema` for a user `test`, copy the below JSON in to your [access control config](https://trino.io/docs/current/security/file-system-access-control.html#configuration) JSON file:\n\n```\n{\n  \"tables\": [{\n    \"user\": \"test\",  // Replace with your RudderStack user name\n    \"catalog\": \"catalog_name \", // Replace with the catalog you wish to sync\n    \"schema\": \"user_schema \", \n    \"table\": \"sample_table \",\n    \"privileges\": [\"SELECT\"]\n  }]\n}\n```\n\n### Step 2: Create RudderStack schema and grant permissions\n\n```\nCREATE SCHEMA \"_rudderstack\"\n```\n\nTo add this schema to a particular location, run the following query:\n\n```\nCREATE SCHEMA \"_rudderstack\" WITH (location = \"s3://<your_location>/\")\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure to create the `_rudderstack` schema before syncing your data.\n\n### Step 3: Grant ownership to `_rudderstack` schema\n\nThe following grants RudderStack the necessary permissions to perform relevant actions on the tables in the `_rudderstack` schema:\n\n```\n{\n  \"catalogs\": [{\n    \"user\": \"test\",\n    \"catalog\": \"catalog_name \",\n    \"allow\": \"all\"\n  }],\n  \"schemas\": [{\n    \"user\": \"test\",\n    \"catalog\": \"catalog_name \",\n    \"schema\": \"_rudderstack \",\n    \"owner\": true\n  }],\n  \"tables\": [{\n    \"user\": \"test\",\n    \"catalog\": \"catalog_name \",\n    \"schema\": \"_rudderstack \",\n    \"privileges\": [\"SELECT\",\n      \"INSERT\",\n      \"DELETE\",\n      \"UPDATE\",\n      \"OWNERSHIP\"\n    ]\n  }]\n}\n```\n\n## Set up Trino source in RudderStack\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  On the **Connections** page, click **Add source**.\n3.  Under **Sources**, click **Reverse ETL** and select **Trino**.\n\n### Configure warehouse credentials\n\nYou can choose to proceed with your existing warehouse credentials if you have configured them in the RudderStack dashboard previously. Otherwise, click **Add new credentials** to add new credentials for your warehouse.\n\n*   **Host**: Enter the host name or IP address of your Trino coordinator server.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure to enter only the host name and not the complete URL. Otherwise, you will encounter an error.\n> \n> For example, if the URL is `https://trino-server.example.com`, host name should be `trino-server.example.com`.\n\n*   **Catalog Name**: Specify the catalog to use when RudderStack executes queries in Trino.\n*   **User**: Enter the user with relevant access to the above settings.\n*   **Password**: Enter the password for the above user.\n*   **Port**: Enter the port number of your Trino coordinator server. This is an optional setting.\n\nClick the **Verify** button on the top right. RudderStack will then [verify and validate your credentials](#faq). Once verified, click **Continue** to proceed.\n\n### Specify name and source type\n\nSpecify the source name and type in this step.\n\n*   **Source name**: Assign a name to uniquely identify the source in the RudderStack dashboard.\n*   **Select your source type**: RudderStack lets you set up a Reverse ETL source from a warehouse **Table**, **Model**, or **Audience**.\n\n| Source type | Description |\n| --- | --- |\n| Table | Use an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | Use custom SQL queries to fetch specific warehouse data and send them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | Filter data in your warehouse tables to create target customer lists and send them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\n#### **Use warehouse table as source**\n\nUnder **Select your source type**, choose **Table** and specify the below fields:\n\n*   **Schema**: Select the warehouse schema from the dropdown.\n*   **Table**: Choose the required table from which RudderStack syncs the data.\n*   **Primary key**: Select the column from the above table that uniquely identifies your records in the warehouse.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n[![Use table as source](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/wh-table-source.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use model as source**\n\nUnder **Select your source type**, choose **Model** and click **Continue**.\n\nTo configure a model as source:\n\n1.  Enter an optional description and specify the custom SQL query in **Query** section.\n2.  Click **Run Query** to fetch the data preview.\n3.  Select the **Primary key** to use a column that uniquely identifies your warehouse records.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can set a primary key only after you run the SQL query successfully using the **Run Query** option.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` in SQL query of the model.\n\n[![Model configuration](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n#### **Use audience as source**\n\nUnder **Select your source type**, choose **Audience** and follow these steps:\n\n1.  Configure your audience source by specifying the below fields:\n    \n    *   **Schema**: Select the warehouse schema from the dropdown.\n    *   **Table**: Choose the required table from which RudderStack syncs the data.\n    *   **Primary key**: Select the column from the above table that uniquely identify your records in the warehouse.\n\n[![Use audience as source](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses the primary key column for diffing in case of incremental syncs. You can generate it by:\n> \n> *   Generating your table with a primary key, OR\n> *   Creating a table view\n> \n> You can use a composite key in cases where one column cannot be considered as a primary key. For example, you can a declare a composite key of `user_id` and `timestamp` by creating a view on your warehouse table.\n\n2.  Set your [audience conditions](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/#set-your-conditions).\n3.  Click **Preview** to see the resulting data. Then, click **Continue** to proceed.\n\n[![Audience configuration](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/audience-source-configuration.webp)\n\nFinally, [review and complete](#review-and-complete-setup) your source setup.\n\n### Review and complete setup\n\nTo make any changes to the warehouse credentials or source configuration, click the edit icon present next to those sections.\n\n[![Edit source configuration](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/edit-source-configuration.webp)\n\nReview your configuration and click **Create source** to complete the setup.\n\n## Connect destination\n\nYou can connect this source to an existing or new [destination](https://www.rudderstack.com/docs/destinations/overview/) to start using it. To connect to a destination later, click **Done** on the top right.\n\n[![Next steps](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)\n\nYou will then be redirected to the **Overview** page of the source where you get the option of connecting it to an existing or new destination.\n\n[![Add destination](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)\n\nSee [Set up Reverse ETL Connection](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/) section for more information.\n\n## Update source configuration and settings\n\nGo to the **Configuration** tab of your Reverse ETL source to update the configuration depending on your source type:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot change the source type on this page.\n\n[![Update source configuration](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-source-configuration.webp)\n\nThe below table lists the options you can update:\n\n| Source type | Configurable options |\n| --- | --- |\n| Table | [Schema, Table, Primary key](#use-warehouse-table-as-source) |\n| Model | *   [Model settings](#use-model-as-source)<br>*   [Primary key](#use-model-as-source)<br><br>**Note**: You can set the primary key only after the SQL query runs successfully. |\n| Audience | *   [Schema, Table, Primary key](#use-audience-as-source)<br>*   [Audience conditions](#use-audience-as-source) |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> After updating the configuration, the next sync will be a full sync.\n\nGo to the **Settings** tab to:\n\n*   Get your source ID.\n*   Change your warehouse credentials.\n*   [Set up custom alerts](https://www.rudderstack.com/docs/data-governance/alerts/) for your Reverse ETL source.\n*   Delete the source permanently.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot delete a source that is connected to any destination.\n\n[![Edit source settings](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)\n\n## FAQ\n\n#### **Which Trino connectors are supported for the Trino source integration?**\n\nThe Trino source supports only the [Apache Hive connector](https://trino.io/docs/current/connector/hive.html) currently.\n\nTo use this connector, make sure to add the following [configuration](https://trino.io/docs/current/connector/hive.html#general-configuration) in your object store:\n\n```\nhive.allow-drop-table=true\nhive.metastore.thrift.delete-files-on-drop=true\n```\n\n#### **Which data types are supported for this integration?**\n\nThe Trino source supports all data types listed in the [Trino documentation](https://trino.io/docs/current/language/types.html) except the [Row data type](https://trino.io/docs/current/language/types.html#row).\n\n#### **What do the three validations under Verifying Credentials imply?**\n\nWhen setting up a Reverse ETL source, you will see the following three validations under the **Verifying Credentials** option once you proceed after entering the warehouse credentials:\n\n[![Validating credentials](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)\n\nThese options are explained below:\n\n*   **Verifying Connection**: This option indicates that RudderStack is trying to connect to the warehouse with the provided warehouse credentials.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, it means that one or more fields specified in the warehouse credentials are incorrect. Verify your credentials in this case.\n\n*   **Able to List Schema**: This option checks if RudderStack is able to fetch all schema details by using the provided credentials.\n*   **Able to Access RudderStack Schema**: This option implies that RudderStack is able to access the `_rudderstack` schema you have created by running all commands in the [User Permissions](#creating-the-rudderstack-schema-and-granting-permissions) section.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, verify if you have successfully created the `_rudderstack` schema and given RudderStack the required permissions to access it.\n\n#### **What is the difference between the Table, Model, and Audience options when creating a Reverse ETL source?**\n\nWhen creating a new Reverse ETL source, you are presented with the following options from which RudderStack syncs the data:\n\n| Source type | Description |\n| --- | --- |\n| Table | RudderStack uses an existing warehouse table as a data source.<br><br>See [Use warehouse table as source](#use-warehouse-table-as-source) for detailed setup. |\n| Model | RudderStack uses custom SQL queries to fetch specific warehouse data and sends them to your destinations.<br><br>See [Use model as source](#use-model-as-source) for detailed setup. |\n| Audience | RudderStack filters data in your warehouse tables to create target customer lists and sends them to downstream destinations.<br><br>See [Use audience as source](#use-audience-as-source) for detailed setup. |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Trino Reverse ETL Source | RudderStack Docs",
  "description": "Send data from Trino to your entire stack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/",
  "markdown": "# Set Up Reverse ETL Connection\n\nConnect your Reverse ETL sources to destinations in RudderStack.\n\n* * *\n\n*     6 minute read  \n    \n\nSetting up a Reverse ETL connection involves the following steps:\n\n1.  [Creating a Reverse ETL source](#add-source)\n2.  [Connecting it to a destination](#connect-destination)\n3.  [Specifying the data mappings](#specify-data-mappings)\n4.  [Defining a sync schedule](#schedule-syncs)\n5.  [Activating the connection](#activate-connection)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack supports 1:many Reverse ETL connections, meaning you can connect your Reverse ETL source to multiple destinations.\n> \n> Note the following:\n> \n> *   You can set up to 10 connections in the RudderStack Cloud [Free and Starter](https://rudderstack.com/pricing/) plans and unlimited connections in the [Growth and Enterprise](https://rudderstack.com/pricing/) plans.\n> *   Reverse ETL connections are source-driven. You must create a source first and then connect it to a destination.\n> *   You **cannot** connect multiple Reverse ETL sources to the same destination.\n\n## Add source\n\n1.  Sign in to your [RudderStack dashboard](https://app.rudderstack.com/) and click **\\+ Add source** in the default **Connections** view.\n\n[![Add source](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)\n\n2.  Under **Sources**, click **Reverse ETL** and select your warehouse source.\n\n[![Select source](https://www.rudderstack.com/docs/images/data-pipelines/select-source.webp)](https://www.rudderstack.com/docs/images/data-pipelines/select-source.webp)\n\n3.  Configure your source. See the [source-specific documentation](https://www.rudderstack.com/docs/sources/reverse-etl/#supported-reverse-etl-sources) for configuration details.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack requires some warehouse-specific permissions to sync data from it. These permissions are listed in the source documentation, for example, see [BigQuery permissions](https://www.rudderstack.com/docs/sources/reverse-etl/google-bigquery/#granting-permissions).\n> \n> Make sure to grant these permissions **before** you set up the source.\n\n## Connect destination\n\nOnce you have created a [Reverse ETL source](https://www.rudderstack.com/docs/sources/reverse-etl/), connect it to an existing or new RudderStack destination.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> RudderStack supports connecting a Reverse ETL source to multiple destinations.\n\nTo connect a destination:\n\n1.  Click **Use existing destination** or **Set up a new destination** depending on your requirement.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n\n[![Connect destination options](https://www.rudderstack.com/docs/images/retl-sources/connect-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/connect-destination.webp)\n\n2.  Enter the connection settings for the destination. See the [destination-specific documentation](https://www.rudderstack.com/docs/destinations/streaming-destinations/) for more details on these settings.\n\n## Specify data mappings\n\nRudderStack provides two options to map your warehouse columns to specific destination fields before syncing your data:\n\n*   [Map with Visualizer](https://www.rudderstack.com/docs/sources/reverse-etl/visual-data-mapper/)\n*   [Map with JSON](https://www.rudderstack.com/docs/sources/reverse-etl/json-data-mapping/)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack supports the **Map with Visualizer** option only for [selected destinations](https://www.rudderstack.com/docs/sources/reverse-etl/visual-data-mapper/#supported-destinations).\n> \n> Other destinations that do not support Visual Data Mapper have the **Map with JSON** option by default, with the **Map with Visualizer** option greyed out.\n\nThe steps to set the data mappings (using JSON) are listed below:\n\n1.  Select the **Sync mode** to specify how RudderStack syncs each record to the destination. RudderStack supports two [sync modes](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/):\n\n| Sync mode | Description |\n| --- | --- |\n| Upsert | In this mode, RudderStack inserts new records and updates the existing records in the destination while syncing the data. |\n| Mirror | In this mode, RudderStack ‘mirrors’ the source by keeping the destination data the same as the source data. It performs insertion, deletion, and updates to the records while syncing the data.<br><br>Note that:<br><br>*   Only [select destinations](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/#mirror-mode) support this mode.<br>*   RudderStack does not support `track` event type for this mode. |\n\n2.  Select the **Event Type** - RudderStack supports sending the synced data to your downstream destinations as `identify` or `track` events.\n\nIf you select `track` as the **Event Type**, you also need to set the event name that is sent to the downstream destination. This is because every `track` event requires a name. You can also set the column name as the event name by turning on the **Lookup event name by column** toggle and selecting the column from the dropdown:\n\n[![Schema tab options in RudderStack](https://www.rudderstack.com/docs/images/warehouse-actions-sources/event-name-table-track.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/event-name-table-track.webp)\n\n3.  Set at least one user identifier from `user_id` or `anonymous_id` in the **Choose user identifier** setting.\n\n[![Map with JSON feature](https://www.rudderstack.com/docs/images/data-pipelines/map-with-json-new.webp)](https://www.rudderstack.com/docs/images/data-pipelines/map-with-json-new.webp)\n\n4.  Preview the resulting data and make the necessary changes before proceeding.\n\n## Schedule syncs\n\nYou can configure the schedule settings and sync frequency at the connection level. This is because a source might be connected to multiple destinations and the sync interval and frequency might need to be configured differently for each connection.\n\nRudderStack determines how and when to run a sync based on the [sync schedule](https://www.rudderstack.com/docs/sources/reverse-etl/sync-schedule-settings/) you set for your Reverse ETL connection.\n\n| Schedule type | Description |\n| --- | --- |\n| Basic | Run syncs at a given time interval and specified time (in UTC). |\n| CRON | Run syncs based on a specified CRON expression (in UTC). |\n| Manual | Run syncs manually. |\n\n[![Sync schedule](https://www.rudderstack.com/docs/images/retl-sources/schedule-syncs.webp)](https://www.rudderstack.com/docs/images/retl-sources/schedule-syncs.webp)\n\n## Configure advanced settings\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This option is available only if you have set up a new destination.\n\nOnce you create a connection successfully, you can configure the optional advanced settings to receive the data correctly in your destination.\n\n[![Advanced destination configuration](https://www.rudderstack.com/docs/images/retl-sources/advanced-config-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/advanced-config-destination.webp)\n\n1.  Click **Configure your destination**.\n2.  Specify the advanced settings and click **Save**.\n\n## Activate connection\n\n1.  Activate the destination by turning on the toggle.\n2.  Turn on the connection to activate the connection.\n\n![Activate destination](https://www.rudderstack.com/docs/images/retl-sources/activate-destination.webp)\n\nYou will be redirected to the connections page.\n\n![Connections page](https://www.rudderstack.com/docs/images/retl-sources/connections-page.webp)\n\nRudderStack will send data to your destination as per the specified [sync frequency](#schedule-syncs). Click **Sync now** to manually trigger a new sync.\n\nClick **Turn on the connection** to activate the connection.\n\n![Activate connection](https://www.rudderstack.com/docs/images/retl-sources/activate-connection.webp)\n\nYou will be redirected to the connections page.\n\n![Connections page](https://www.rudderstack.com/docs/images/retl-sources/connections-page.webp)\n\nRudderStack will send data to your destination as per the specified [sync frequency](#schedule-syncs). Click **Sync now** to manually trigger a new sync.\n\n## Stop data syncs for connection\n\nGo to the connection page and turn off the connection toggle to stop data syncs for the connection.\n\nNote that the **Sync Now** button is greyed out and the connection status is **Paused** until you turn on the connection again.\n\n[![Turn off connection](https://www.rudderstack.com/docs/images/retl-sources/disable-connection.webp)](https://www.rudderstack.com/docs/images/retl-sources/disable-connection.webp)\n\n## Update mapping configuration\n\nGo to the **Schema** tab of your connection and click **Update** to change the mapping configuration and update your column selection.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The **Object** (for VDM mapping), **Sync mode**, **Event type**, and **User identifier** fields are not editable.\n\n[![Update connection configuration](https://www.rudderstack.com/docs/images/retl-sources/update-connection-configuration.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-connection-configuration.webp)\n\nClick **Save** to update and save the configuration.\n\n## Update connection settings\n\nGo to the **Settings** tab of your connection to:\n\n*   Get the **Connection ID**.\n*   Change the sync schedule and frequency.\n*   Delete the connection permanently.\n\n[![Update connection settings](https://www.rudderstack.com/docs/images/retl-sources/connection-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/connection-settings.webp)\n\n## View all connections for Reverse ETL source\n\nGo to the **Overview** tab of your Reverse ETL source. Here, you will see all the destinations connected to that source. Click the required destination or click **View** > **Connection details** to go to the connection’s page.\n\n[![Connection details](https://www.rudderstack.com/docs/images/retl-sources/connection-details.webp)](https://www.rudderstack.com/docs/images/retl-sources/connection-details.webp)\n\nRudderStack automatically redirects you to the **Syncs** tab where you can view the latest sync details or check past syncs.\n\n## View sync details\n\nGo to the **Syncs** tab to see detailed metrics on the latest sync. You can also view details of the past syncs (up to 1 month). These details include:\n\n| Metric | Details |\n| --- | --- |\n| Status | The sync status. It can be one of the following:<br><br>*   Aborted<br>*   Completed, with failures<br>*   Completed, no failures |\n| Sync mode | Defines how RudderStack syncs data to the destination. It can be one of the following:<br><br>*   Upsert<br>*   Mirror |\n| Sync type | Determines the scope of the sync. It can be one of the following:<br><br>*   Incremental: RudderStack syncs only the newly added data in the warehouse since the last sync.<br>*   Full: RudderStack syncs all the data irrespective of whether it was synced to the destination previously. |\n| Trigger | Determines how the sync was triggered. It can be one of the following:<br><br>*   Manual<br>*   Scheduled, as per the [sync schedule](#schedule-syncs) |\n| Sync start time | Determines when the sync was triggered. |\n| Duration | The sync duration. |\n\nYou can also see the following source and destination-specific metrics:\n\n*   Number of synced rows.\n*   Deltas (new records since last sync) with the number of records inserted, deleted, and updated.\n*   [Invalid records](#view-invalid-records) not synced to destination.\n\n*   Successfully synced records with the number of records inserted, deleted, and updated.\n*   Number of dropped records.\n*   Number of records that failed to sync.\n\n[![Sync details](https://www.rudderstack.com/docs/images/retl-sources/sync-details-1.webp)](https://www.rudderstack.com/docs/images/retl-sources/sync-details-1.webp)\n\n### View invalid records\n\nClick **View invalid records** and click a row to see all the invalid records that RudderStack did not sync to the destination.\n\nYou also see the error message and sample erroneous rows in this view.\n\n[![View invalid records](https://www.rudderstack.com/docs/images/retl-sources/invalid-records.webp)](https://www.rudderstack.com/docs/images/retl-sources/invalid-records.webp)\n\n### View sync graph\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This graph is only available for:\n> \n> *   The latest sync.\n> *   Syncs performed using [Upsert mode](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/#upsert-mode).\n\nRudderStack provides an intuitive visual graph detailing the records sent to the destination over time. The X-axis represents the time of the day and the Y-axis represents the number of records classified as:\n\n*   Successfully synced records\n*   Dropped records\n*   Records that failed to sync\n\n[![View sync graph](https://www.rudderstack.com/docs/images/retl-sources/sync-graph.webp)](https://www.rudderstack.com/docs/images/retl-sources/sync-graph.webp)\n\nSwitch to the **Retries** tab to get a graphical view of the retries over time. The X-axis represents the retry time of the day and the Y-axis represents the number of retry attempts.\n\n[![Sync retries graph](https://www.rudderstack.com/docs/images/retl-sources/sync-retries.webp)](https://www.rudderstack.com/docs/images/retl-sources/sync-retries.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Set Up Reverse ETL Connection | RudderStack Docs",
  "description": "Connect your Reverse ETL sources to destinations in RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/appsflyer/",
  "markdown": "# AppsFlyer source | RudderStack Docs\n\nIngest your event data from AppsFlyer into RudderStack.\n\n* * *\n\n*     2 minute read  \n    \n\n[AppsFlyer](https://www.appsflyer.com/) is an industry-leading mobile attribution and marketing analytics platform. It enables you to understand your customers better through intuitive dashboards, real-time data reports, and a unique deep linking technology.\n\nYou can send your AppsFlyer events by adding an endpoint that points to RudderStack and using AppsFlyer’s **Push API** option. This way, you can capture all relevant AppsFlyer events related to re-engagement, reattribution, in-app install events, etc., and send them to RudderStack.\n\nThis guide will help you set up AppsFlyer as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your AppsFlyer source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **AppsFlyer**.\n2.  Assign a name to your source and click **Continue**\\*.\n3.  Your AppsFlyer source is now configured. Note the source **Write key** required to configure the endpoint URL.\n\n[![AppsFlyer source write key](https://www.rudderstack.com/docs/images/event-stream-sources/appsflyer-source-write-key.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/appsflyer-source-write-key.webp)\n\n4.  Go to your AppsFlyer account. From the sidebar, go to **Integrations** > **API Access** > **Push API**:\n\n[![AppsFlyer dashboard](https://www.rudderstack.com/docs/images/event-stream-sources/appsflyer-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/appsflyer-3.webp)\n\n5.  Add the **Endpoint URL** pointing to RudderStack in the following format:\n\n```\n<DATA_PLANE_URL>/v1/webhook?writeKey=<WRITE_KEY>\n```\n\nFor more information on the data plane URL, refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure you add the source write key obtained in **Step 3** as a query parameter to the URL. This is required to prevent the webhook from failing for the lack of a valid write key.\n\nA sample URL is as shown:\n\n```\nhttps://hosted.rudderlabs.com/v1/webhook?writeKey=1bCenS7ynqHh8ETX8s5Crjh22J\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> It is highly recommended to validate the endpoint using the **Send Test** button.\n\n[![Endpoint configuration](https://www.rudderstack.com/docs/images/event-stream-sources/appcenter-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/appcenter-3.webp)\n\n6.  Finally, save the endpoint.\n\n## Event transformation\n\nThe AppsFlyer Push events are ingested into RudderStack after converting them into the RudderStack event format. For example, RudderStack converts the `customer_user_id` property set by AppsFlyer into `userId`.\n\nRudderStack populates the following properties from AppsFlyer event payload into the RudderStack event:\n\n| AppsFlyer Property | RudderStack Property |\n| --- | --- |\n| `customer_user_id` | `userId`, `context.traits.userId` |\n| `event_name` | `event` |\n| `event_time` | `timestamp`, `originalTimestamp` |\n| `ip` | `context.ip` |\n| `selected_timezone` | `context.timezone` |\n| `user_agent` | `context.userAgent` |\n| `bundle_id` | `context.app.namespace` |\n| `app_version` | `context.app.version` |\n| `app_name` | `context.app.name` |\n| `device_type` | `context.device.model` |\n| `wifi` | `context.network.wifi` |\n| `carrier` | `context.network.carrier` |\n| `platform` | `platform`, `context.os.name` |\n| `idfa` | `context.device.advertisingId` (for iOS) |\n| `android_id` | `context.device.advertisingId` (for Android) |\n| `appsflyer_id` | `context.externalId[0].value` |\n| `os_version` | `context.os.version` |\n| `city` | `traits.address.city`, `context.traits.address.city` |\n| `postal_code` | `traits.address.zip`, `context.traits.address.zip` |\n| `country_code` | `traits.address.country`, `context.traits.address.country` |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "AppsFlyer source | RudderStack Docs",
  "description": "Ingest your event data from AppsFlyer into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/get-started/rudderstack-open-source/data-plane-setup/docker/",
  "markdown": "# Docker | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Docker | RudderStack Docs",
  "description": "Set up RudderStack on Docker.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/macos/",
  "markdown": "# macOS | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "macOS | RudderStack Docs",
  "description": "Use the RudderStack iOS SDK for macOS.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/reverse-etl/json-data-mapping/",
  "markdown": "# Data Mapping with JSON | RudderStack Docs\n\nSpecify data mappings for Reverse ETL connections via JSON.\n\n* * *\n\n*     3 minute read  \n    \n\nRudderStack provides the following options to map your warehouse columns to specific destination fields while importing the data:\n\n*   Map with JSON\n*   [Map with Visualizer](https://www.rudderstack.com/docs/sources/reverse-etl/visual-data-mapper/)\n\nThis guide lists the JSON mapping settings required to sync data from your warehouse sources to the specified destinations.\n\n## Mapping configuration\n\n*   **Sync mode**: Select the [sync mode](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/) from **Upsert** or **Mirror** that RudderStack uses to sync your data.\n*   **Event Type**: Select from the `identify` or `track` event type depending on how you want to send the event data to the downstream destinations.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack does not support `track` event type for **Mirror** mode.\n\nIf you select `track`, you also need to provide:\n\n*   **Event Name**: Enter the event name which should be sent for all events to the downstream destinations:\n\n[![Schema tab options in RudderStack](https://www.rudderstack.com/docs/images/warehouse-actions-sources/event-name-track.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/event-name-track.webp)\n\nYou can also send different event names by enabling the **lookup event name by column** setting and specifying the column name which should be used to set the event name in the **Event Name** field:\n\n[![Schema tab options in RudderStack](https://www.rudderstack.com/docs/images/warehouse-actions-sources/event-name-table-track.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/event-name-table-track.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> See [Syncing Events](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/syncing-events/) for more information on sending event data as `identify` or `track` events.\n\n*   **Choose user identifier**: Choose **at least** one user identifier from `user_id` and `anonymous_id` from the dropdown.\n\nYou can preview the data snippet which RudderStack sends to the destination. All the columns from the table are selected by default. However, you can choose to retain specific columns by searching and selecting or deselecting them.\n\nYou can also search the columns by a keyword and edit the **JSON Trait Key** column. RudderStack automatically generates the resulting preview on the right:\n\n[![JSON data preview](https://www.rudderstack.com/docs/images/retl-sources/json-data-preview.webp)](https://www.rudderstack.com/docs/images/retl-sources/json-data-preview.webp)\n\nThe resulting JSON payload carries the `user_id` and `anonymous_id` from the columns selected in the **Choose user identifier** section. Moreover, the traits are used from the columns selected in the **Column** section.\n\n### Add Constant\n\nYou can also use the **Add Constant** option to add a constant key-value pair which is always sent in the JSON payload:\n\n[![Add constant](https://www.rudderstack.com/docs/images/retl-sources/add-constant.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-constant.webp)\n\nThe new constant will appear in the table and also in the JSON preview inside the traits, as shown:\n\n[![Updating table selection](https://www.rudderstack.com/docs/images/warehouse-actions-sources/add-constant-in-json.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/add-constant-in-json.webp)\n\nYou can also use the dot notation to define a constant, as shown:\n\n[![Updating table selection](https://www.rudderstack.com/docs/images/warehouse-actions-sources/dot-notation-constant.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/dot-notation-constant.webp)\n\nOnce you have finalized the configuration, click **Save**.\n\n## Update mapping configuration\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note the following:\n> \n> *   You can update your mapping configuration irrespective of whether the connection is turned on or off.\n> *   While updating the mapping configuration, you **cannot** change the **Sync mode**, **Event type**, and **User identifier** fields. You will have to delete the destination and connect a new destination from scratch to do so.\n\n1.  Go to the **Schema** tab of your Reverse ETL connection page.\n2.  Update the mappings as required by selecting/deselecting the required fields.\n3.  Click **Save** to update the configuration.\n\n[![Update JSON mappings](https://www.rudderstack.com/docs/images/retl-sources/update-json-mapping.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-json-mapping.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Data Mapping with JSON | RudderStack Docs",
  "description": "Specify data mappings for Reverse ETL connections via JSON.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/tvos/",
  "markdown": "# tvOS | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "tvOS | RudderStack Docs",
  "description": "Use the RudderStack iOS SDK for tvOS.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/get-started/rudderstack-open-source/data-plane-setup/kubernetes/",
  "markdown": "# Kubernetes | RudderStack Docs\n\nSet up RudderStack on your Kubernetes cluster.\n\n* * *\n\n*     3 minute read  \n    \n\nUse the [Helm](https://helm.sh/) package manager to deploy the RudderStack data plane on your Kubernetes cluster. You can find the Helm chart in the [RudderStack GitHub repository](https://github.com/rudderlabs/rudderstack-helm).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you plan to use RudderStack in production, using the Kubernetes Helm charts is strongly recommended.\n\n## Prerequisites\n\n*   Install [Kubectl](https://kubernetes.io/docs/tasks/tools/) and connect to your Kubernetes cluster.\n*   Install [Helm](https://helm.sh/).\n\n## RudderStack Open Source\n\nFollow these steps to set up the data plane if you’re using [RudderStack Open Source](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-setup/#rudderstack-open-source):\n\n1.  Run the following command to clone the [RudderStack Helm repository](https://github.com/rudderlabs/rudderstack-helm) containing the RudderStack Helm chart:\n\n```\ngit clone git@github.com:rudderlabs/rudderstack-helm.git\n```\n\n2.  Navigate to the folder containing the Helm chart:\n\n3.  To install the chart with the release name `my-release`, run the following command after replacing `<your_workspace_token>` with your [workspace token](#workspace-token).\n\n```\nhelm install my-release ./ --set rudderWorkspaceToken=\"<your_workspace_token>\"\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The above command deploys RudderStack on your default Kubernetes cluster configured with `kubectl`. See [Configuration](#configuration) for more information on the configurable parameters during the deployment.\n\n#### Workspace token\n\nThe workspace token is a unique identifier of your RudderStack workspace. RudderStack uses this token to automatically read your source-destination configurations when you set up and run the data plane.\n\n1.  Log in to your RudderStack Open Source dashboard.\n2.  Copy your workspace token from **Settings** > **Workspace**:\n\n[![Workspace Token](https://www.rudderstack.com/docs/images/rs-cloud/workspace-token.webp)](https://www.rudderstack.com/docs/images/rs-cloud/workspace-token.webp)\n\nFor more details on RudderStack Open Source, see [Control plane setup](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-setup/#rudderstack-open-source).\n\n## Self-hosted control plane\n\nIf you are self-hosting your control plane using [Control Plane Lite](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/), see [Kubernetes instructions](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/#kubernetes) to set up the data plane.\n\n## Verify installation\n\nTo verify if the setup is successful, follow the steps listed in [Verify installation](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/sending-test-events/).\n\n## Upgrade Helm chart\n\nThe following sections will help you upgrade your Helm chart depending on your RudderStack control plane setup.\n\n#### RudderStack Open Source\n\nUpdate the configuration or version of the images and run the following command:\n\n```\nhelm upgrade my-release ./ --set rudderWorkspaceToken=\"<your_workspace_token>\"\n```\n\nReplace `<your_workspace_token>` with the workspace token copied in [Step 2](#rudderstack-open-source).\n\n#### Self-hosted control plane\n\nUpdate the configuration or version of the images and run the following command:\n\n```\nhelm upgrade my-release ./ --set backend.controlPlaneJSON=true\n```\n\n## Uninstall deployment\n\nTo uninstall or delete the deployment named `my-release`, run the following command:\n\n```\nhelm uninstall my-release\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This command also removes all components created by the chart.\n\n## Configuration\n\nThe following table lists the configurable parameters of the RudderStack Helm chart and their default values:\n\n| Parameter | Description | Default value |\n| --- | --- | --- |\n| `rudderWorkspaceToken` | Your workspace token obtained from the RudderStack Open Source dashboard. | \\-  |\n| `backend.image.repository` | Container image repository for the backend. | `rudderlabs/rudder-server` |\n| `backend.image.version` | Container image tag for the backend. Check the [available versions](https://hub.docker.com/r/rudderlabs/rudder-server/tags) | \\-  |\n| `backend.image.pullPolicy` | Container image pull policy for the backend image. | `Always` |\n| `transformer.image.repository` | Container image repository for the transformer. | `rudderlabs/transformer` |\n| `transformer.image.version` | Container image tag for the transformer. Check the [available versions](https://hub.docker.com/r/rudderlabs/rudder-transformer/tags) | \\-  |\n| `transformer.image.imagePullPolicy` | Container image pull policy for the transformer image. | `Always` |\n| `backend.extraEnvVars` | Extra environments variables to be used by the backend in the deployments | See the `values.yaml` file. |\n| `backend.controlPlaneJSON` | If you have self-hosted the control plane using Control Plane Lite, set this to `true`.<br><br>The data plane then reads the configuration from the exported `workspaceConfig.json` file. | `false` |\n\nYou can change each of these parameters in `values.yaml` and specify each parameter using the `--set key=value[,key=value]` argument while running the `helm install` command:\n\n```\nhelm install --name my-release \\\n  --set backend.image.version=v0.1.6 \\\n  ./\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   You can edit the data plane-specific configuration in the [`config.yaml`](https://github.com/rudderlabs/rudder-server/blob/master/config/config.yaml) file.\n> *   You can configure the PostgreSQL-specific configuration in the `pg_hba.conf` and `postgresql.conf` files.\n\n## Components\n\nInstalling this Helm chart deploy the following pods and containers in the configured cluster:\n\n**POD - {Release name}-rudderstack-0 :**\n\n*   `rudderstack-backend`\n*   `rudderstack-telegraf-sidecar`\n\n**POD - {Release name}-rudderstack-postgresql-0 :**\n\n*   `{Release name}-rudderstack-postgresql`\n\n**POD - {Release name}-rudderstack-transformer-xxxxxxxxxx-xxxxx:**\n\n*   `transformer`\n\n## Setup instructions for GCP\n\nIf you plan to use the following destinations:\n\n*   [Google Cloud Storage](https://www.rudderstack.com/docs/destinations/streaming-destinations/google-cloud-storage/)\n*   [Google BigQuery](https://www.rudderstack.com/docs/destinations/warehouse-destinations/bigquery/)\n\nMake sure to replace the contents of the file [rudder-google-application-credentials.json](https://github.com/rudderlabs/rudderstack-helm/blob/master/rudder-google-application-credentials.json) in the repository with the details of your Google service account.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Kubernetes | RudderStack Docs",
  "description": "Set up RudderStack on your Kubernetes cluster.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/auth0/",
  "markdown": "# Auth0 | RudderStack Docs\n\nIngest your event data from Auth0 into RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Auth0](https://auth0.com/) is a popular solution used by many companies to add authentication and authorization services to their applications.\n\nYou can send your Auth0 authentication and user behavior-related events by adding a custom webhook that points to RudderStack.\n\nThis guide will help you set up Auth0 as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Auth0 source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Auth0**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Auth0 source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![Auth0 source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/auth0-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/auth0-webhook-url.webp)\n\n4.  Next, log in to your [Auth0 dashboard](https://manage.auth0.com/).\n5.  Go to **Monitoring** > **Streams** > **Create Log Stream** > **Custom Webhook**:\n\n[![Auth0 source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/auth0-dashboard-custom-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/auth0-dashboard-custom-webhook.webp)\n\n6.  Name your custom webhook. In the **Payload URL** field, enter the webhook URL obtained in Step 3.\n\n[![Auth0 custom webhook settings](https://www.rudderstack.com/docs/images/event-stream-sources/auth0-webhook-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/auth0-webhook-settings.webp)\n\n7.  Configure the other webhook settings as required.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can also filter the events sent to your custom webhook by category. For more information on these categories, refer to the [Auth0 documentation](https://auth0.com/docs/customize/log-streams/event-filters).\n\n8.  Click **Save** to save the custom webhook.\n\n## Event transformation\n\nRudderStack ingests Auth0 events as [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/), [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/), and [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) calls.\n\nRudderStack converts the Auth0 payload into an `identify` event if the Auth0 payload contains the event `type` as `ss`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack automatically generates an `anonymousId` for all the ingested Auth0 events.\n\nThe sample payload from Auth0 containing the event `type` as `ss`:\n\n```\n{\n  \"log_id\": \"90020221031055712103169676686005480714681762668315934738\",\n  \"data\": {\n    \"date\": \"2022-10-31T05:57:06.859Z\",\n    \"type\": \"ss\",\n    \"description\": \"\",\n    \"connection\": \"Username-Password-Authentication\",\n    \"connection_id\": \"con_djwCjiwyID0vZy1S\",\n    \"client_id\": \"vQcJNDTxsM1W72eHFonRJdzyOvawlwIt\",\n    \"client_name\": \"All Applications\",\n    \"ip\": \"35.166.202.113\",\n    \"user_agent\": \"unknown\",\n    \"user_id\": \"auth0|*****\", \n    \"user_name\": \"alex@example.com\",\n    \"strategy\": \"auth0\",\n    \"strategy_type\": \"database\",\n    \"log_id\": \"90020221031055712103169676686005480714681762668315934738\"\n  }\n}\n```\n\nThe sample payload after RudderStack transforms it into an `identify` event:\n\n```\n{\n  \"context\": {\n    \"integration\": {\n      \"name\": \"Auth0\"\n    },\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"request_ip\": \"35.166.202.113\",\n    \"traits\": {\n      \"userId\": \"auth0|*****\", \n      \"user_name\": \"alex@example.com\"\n    },\n    \"userAgent\": \"unknown\"\n  },\n  \"integrations\": {\n    \"Auth0\": false\n  },\n  \"messageId\": \"782d2e9b-4143-4798-b9dc-8cc55e4deed9\",\n  \"originalTimestamp\": \"2022-10-31T05:57:06.859Z\",\n  \"properties\": {\n    \"client_id\": \"vQcJNDTxsM1W72eHFonRJdzyOvawlwIt\",\n    \"client_name\": \"All Applications\",\n    \"description\": \"\",\n    \"log_id\": \"90020221031055712103169676686005480714681762668315934738\"\n  },\n  \"rudderId\": \"d3cedaf9-dc50-4602-8ff2-85026d348f69\",\n  \"sentAt\": \"2022-10-31T05:57:06.859Z\",\n  \"traits\": {\n    \"connection\": \"Username-Password-Authentication\",\n    \"connection_id\": \"con_djwCjiwyID0vZy1S\"\n  },\n  \"type\": \"identify\",\n  \"userId\": \"auth0|*****\"\n}\n```\n\nRudderStack converts the Auth0 payload into a `group` event if the Auth0 payload contains the `description` as `Add members to an organization`.\n\nThe sample payload from Auth0 containing the event `description` as `Add members to an organization`:\n\n```\n{\n  \"log_id\": \"90020221031061004280169676882609459981150114445973782546\",\n  \"data\": {\n    \"date\": \"2022-10-31T06:09:59.135Z\",\n    \"type\": \"sapi\",\n    \"description\": \"Add members to an organization\",\n    \"client_id\": \"vQcJNDTxsM1W72eHFonRJdzyOvawlwIt\",\n    \"client_name\": \"\",\n    \"ip\": \"35.167.74.121\",\n    \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n    \"details\": {\n      \"request\": {\n        \"path\": \"/api/v2/organizations/org_eoe8p2atZ7furBxg/members\"\n      }\n    },\n    \"user_id\": \"google-oauth2|123456\",\n    \"log_id\": \"90020221031061004280169676882609459981150114445973782546\"\n  }\n}\n```\n\nThe sample payload after RudderStack transforms it into a `group` event:\n\n```\n{\n  \"context\": {\n    \"integration\": {\n      \"name\": \"Auth0\"\n    },\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"request_ip\": \"35.167.74.121\",\n    \"traits\": {\n      \"userId\": \"google-oauth2|123456\" \n    },\n    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\"\n  },\n  \"groupId\": \"org_eoe8p2atZ7furBxg\",\n  \"integrations\": {\n    \"Auth0\": false\n  },\n  \"messageId\": \"1bc7876a-7c9d-4c0a-a1a9-179b804135f5\",\n  \"originalTimestamp\": \"2022-10-31T06:09:59.135Z\",\n  \"properties\": {\n    \"client_id\": \"vQcJNDTxsM1W72eHFonRJdzyOvawlwIt\",\n    \"client_name\": \"\",\n    \"description\": \"Add members to an organization\",\n    \"details\": {\n      \"request\": {\n        \"path\": \"/api/v2/organizations/org_eoe8p2atZ7furBxg/members\"\n      }\n    },\n    \"log_id\": \"90020221031061004280169676882609459981150114445973782546\"\n  },\n  \"rudderId\": \"414ca53a-7f7e-4ec8-8d62-3c5cfcf15f91\",\n  \"sentAt\": \"2022-10-31T06:09:59.135Z\",\n  \"type\": \"group\",\n  \"userId\": \"google-oauth2|123456\"\n}\n```\n\nRudderStack converts the rest of the events as `track` events.\n\nThe sample payload from Auth0:\n\n```\n{\n  \"log_id\": \"90020221031061530247169676961198100736838335677367058450\",\n  \"data\": {\n    \"date\": \"2022-10-31T06:15:25.196Z\",\n    \"type\": \"gd_tenant_update\",\n    \"description\": \"Guardian - Updates tenant settings\",\n    \"ip\": \"35.160.3.103\",\n    \"user_id\": \"google-oauth2|123456\",\n    \"log_id\": \"90020221031061530247169676961198100736838335677367058450\"\n  }\n}\n```\n\nThe sample payload after RudderStack transforms it into a `track` event:\n\n```\n{\n  \"context\": {\n    \"integration\": {\n      \"name\": \"Auth0\"\n    },\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"request_ip\": \"35.160.3.103\",\n    \"traits\": {\n      \"userId\": \"google-oauth2|123456\" \n    }\n  },\n  \"event\": \"Guardian tenant update\",\n  \"integrations\": {\n    \"Auth0\": false\n  },\n  \"messageId\": \"b7e0134b-3cc9-418d-803c-1fb72139f572\",\n  \"originalTimestamp\": \"2022-10-31T06:15:25.196Z\",\n  \"properties\": {\n    \"description\": \"Guardian - Updates tenant settings\",\n    \"log_id\": \"90020221031061530247169676961198100736838335677367058450\"\n  },\n  \"rudderId\": \"414ca53a-7f7e-4ec8-8d62-3c5cfcf15f91\",\n  \"sentAt\": \"2022-10-31T06:15:25.196Z\",\n  \"type\": \"track\",\n  \"userId\": \"google-oauth2|123456\"\n}\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack ingests the events related to adding members to an organization as `group` calls and the signup-related events as `identify` calls. All the other events are ingested as `track` calls.\n\nRudderStack maps the following properties from the Auth0 event payload to RudderStack properties for all `identify`, `track`, and `group` events:\n\n| **Auth0 Property** | **RudderStack Property** |\n| --- | --- |\n| `auth0_client` | `properties.auth0_client` |\n| `client_id` | `properties.client_id` |\n| `client_name` | `properties.client_name` |\n| `connection` | `traits.connection` |\n| `connection_id` | `traits.connection_id` |\n| `date` | `originalTimestamp`  <br>`sentAt` |\n| `description` | `properties.description` |\n| `details` | `properties.details` |\n| `details.auth.user.email` | `context.traits.email` |\n| `details.auth.user.name` | `context.traits.name` |\n| `log_id` | `properties.log_id` |\n| `isMobile` | `properties.is_mobile` |\n| `ip` | `context.request_ip` |\n| `user_name` | `context.traits.user_name` |\n| `user_agent` | `context.userAgent` |\n| `user_id` | `userId`  <br>`context.traits.userId` |\n| `type` | `source_type` |\n\n## Debugging\n\n### Events not flowing\n\nIf you are unable to see any events flowing from the Auth0 API webhooks to RudderStack, you can troubleshoot the issue by viewing the API webhooks logs. To do so, go to your Auth0 dashboard and navigate to **Monitoring** > **Logs**.\n\nRefer to the [Auth0 documentation](https://auth0.com/docs/customize/log-streams/custom-log-streams#troubleshoot-webhooks) for more information on troubleshooting your webhook.\n\n### Update `userId` format\n\nUse the [Clean Auth0 `userId` transformation template](https://www.rudderstack.com/docs/transformations/templates/#clean-auth0-userid) to update your `userId` format.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Auth0 | RudderStack Docs",
  "description": "Ingest your event data from Auth0 into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/satismeter/",
  "markdown": "# SatisMeter source | RudderStack Docs\n\nIngest your event data from SatisMeter into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[SatisMeter](https://www.satismeter.com/) is a customer feedback collection tool. It helps you derive real-time insights on customer satisfaction and monitor your product’s performance.\n\nThis guide will help you set up SatisMeter as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your SatisMeter source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **SatisMeter**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your SatisMeter source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![SatisMeter source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/satismeter-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/satismeter-webhook.webp)\n\n4.  Log into your [SatisMeter account](https://app.satismeter.com/login).\n5.  From the left sidebar, go to **Settings** > **Integrations** > **Webhooks** and enter the webhook URL:\n\n[![SatisMeter source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/satismeter-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/satismeter-webhook-url.webp)\n\nRefer to the [SatisMeter documentation](https://support.satismeter.com/hc/en-us/articles/6980495785107-Webhooks) for more information on configuring webhooks.\n\n6.  Finally, click **Save Changes**.\n\n## Event transformation\n\nRudderStack ingests the SatisMeter events after converting them into the RudderStack event format. It also maps the following properties from the SatisMeter event payload to the RudderStack properties:\n\n| SatisMeter property | RudderStack property |\n| --- | --- |\n| `traits` | `context.traits` |\n| `response.user.userId` | `userId` |\n| `response.user.id` | `anonymousId` |\n| `response.answers` | `properties.answers` |\n| `response.pending` | `properties.surveyPending` |\n| `response.dismissed` | `properties.surveyDismissed` |\n| `response.created` | `properties.receivedAt` |\n| `campaign` | `context.campaign` |\n| `event` | `survey${event}` |\n| `response.category` | `properties.category` |\n| `response.location` | `context.location` |\n| `response.user.deleted` | `context.traits.userDeleted` |\n| `response.user.groups` | `traits.groups` |\n| `response.device` | `context.device` |\n| `response.language` | `context.locale` |\n| `response.referrer` | `context.page.referrer` |\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from SatisMeter source and creates the resulting payload.\n\nA sample payload sent by SatisMeter is shown below:\n\n```\n{\n  \"response\": {\n    \"id\": \"63767499ca6fb1b7c988d5bb\",\n    \"created\": \"2022-11-17T17:51:21.764Z\",\n    \"rating\": 5,\n    \"feedback\": \"Many things to improve\",\n    \"dismissed\": false,\n    \"pending\": false,\n    \"answers\": [{\n      \"label\": \"How likely are you to recommend us to your friends and colleagues?\",\n      \"id\": \"7ddb22b0-64a8-11ed-a4c7-b3bed73771cd\",\n      \"value\": 5,\n      \"name\": \"SM_rating\",\n      \"type\": \"scale\",\n      \"metric\": \"nps\"\n    }],\n    \"category\": \"detractor\",\n    \"score\": -100,\n    \"user\": {\n      \"id\": \"63766fbb7ac7b72676145338\",\n      \"name\": \"Alex Keener\",\n      \"email\": \"alex@example.com\",\n      \"userId\": \"No response\",\n      \"deleted\": false,\n      \"groups\": {\n        \"group1\": \"groupId\"\n      },\n      \"traits\": {\n        \"createdAt\": \"2022-10-15T05:41:06.016Z\",\n        \"custom\": {\n          \"key1\": \"v1\",\n          \"key2\": \"V2\"\n        },\n        \"email\": \"alex@example.com\",\n        \"name\": \"Alex Keener\"\n      }\n    },\n    \"device\": {\n      \"os\": \"macOS\",\n      \"type\": \"desktop\"\n    },\n    \"location\": {\n      \"country\": \"IN\",\n      \"countryName\": \"India\",\n      \"region\": \"\",\n      \"city\": \"\",\n      \"short\": \"India\",\n      \"long\": \"India\"\n    },\n    \"referrer\": \"http://127.0.0.1:5500/testSm.html\",\n    \"method\": \"In-app\",\n    \"language\": \"en\",\n    \"project\": \"6372247a764986ebee62bf66\",\n    \"campaign\": \"6373271b764986ebee62bfca\"\n  },\n  \"traits\": {\n    \"createdAt\": \"2022-10-15T05:41:06.016Z\",\n    \"custom\": {\n      \"key1\": \"v1\",\n      \"key2\": \"V2\"\n    },\n    \"email\": \"alex@example.com\",\n    \"name\": \"Alex Keener\"\n  },\n  \"campaign\": {\n    \"id\": \"6373271b764986ebee62bfca\",\n    \"name\": \"NPS Survey\"\n  },\n  \"event\": \"completed\"\n}\n```\n\nRudderStack transforms the above payload into the following [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) payload:\n\n```\n{\n  \"event\": \"Survey completed\",\n  \"anonymousId\": \"63766fbb7ac7b72676145338\",\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"traits\": {\n      \"createdAt\": \"2022-10-15T05:41:06.016Z\",\n      \"custom\": {\n        \"key1\": \"v1\",\n        \"key2\": \"V2\"\n      },\n      \"email\": \"alex@example.com\",\n      \"name\": \"Alex Keener\"\n      \"userDeleted\": false\n    },\n    \"locale\": \"en\",\n    \"campaign\": {\n      \"id\": \"6373271b764986ebee62bfca\",\n      \"name\": \"NPS Survey\"\n    },\n    \"integration\": {\n      \"name\": \"SATISMETER\"\n    },\n    \"location\": {\n      \"country\": \"IN\",\n      \"countryName\": \"India\",\n      \"short\": \"India\",\n      \"long\": \"India\"\n    },\n    \"device\": {\n      \"os\": \"macOS\",\n      \"type\": \"desktop\"\n    },\n    \"page\": {\n      \"referrer\": \"http://127.0.0.1:5500/testSm.html\"\n    }\n  },\n  \"integrations\": {\n    \"SATISMETER\": false\n  },\n  \"type\": \"track\",\n  \"traits\": {\n    \"groups\": {\n      \"group1\": \"groupId\"\n    }\n  },\n  \"userId\": \"No response\",\n  \"properties\": {\n    \"category\": \"detractor\",\n    \"answers\": [{\n        \"label\": \"How likely are you to recommend us to your friends and colleagues?\",\n        \"id\": \"7ddb22b0-64a8-11ed-a4c7-b3bed73771cd\",\n        \"value\": 5,\n        \"name\": \"SM_rating\",\n        \"type\": \"scale\",\n        \"metric\": \"nps\"\n      }\n\n    ],\n    \"surveyDismissed\": false,\n    \"surveyPending\": false,\n    \"receivedAt\": \"2022-11-17T17:51:21.764Z\"\n  }\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "SatisMeter source | RudderStack Docs",
  "description": "Ingest your event data from SatisMeter into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/watchos/",
  "markdown": "# watchOS | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "watchOS | RudderStack Docs",
  "description": "Use the RudderStack iOS SDK for watchOS.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/revenuecat/",
  "markdown": "# RevenueCat Source | RudderStack Docs\n\nIngest your event data from RevenueCat into RudderStack.\n\n[RevenueCat](https://www.revenuecat.com/) is an in-app subscription platform that lets you analyze and grow your cross-platform app subscriptions.\n\nThis guide will help you set up RevenueCat as a source in RudderStack.\n\nFollow these steps to set up your RevenueCat source in the RudderStack dashboard:\n\nRudderStack ingests the events from RevenueCat as [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) events after converting them into the appropriate event format.\n\nRudderStack maps the following RevenueCat properties from the event payload to the RudderStack fields:\n\nA sample input payload ingested by RudderStack and the corresponding RudderStack-transformed `track` event is shown below:\n\n```\n{\n  \"api_version\": \"1.0\",\n  \"event\": {\n    \"aliases\": [\n      \"f8e14f51-0c76-49ba-8d67-c229f1875dd9\",\n      \"389ad6dd-bb40-4c03-9471-1353da2d55ec\"\n    ],\n    \"app_user_id\": \"f8e14f51-0c76-49ba-8d67-c229f1875dd9\",\n    \"commission_percentage\": null,\n    \"country_code\": \"US\",\n    \"currency\": null,\n    \"entitlement_id\": null,\n    \"entitlement_ids\": null,\n    \"environment\": \"SANDBOX\",\n    \"event_timestamp_ms\": 1698617217232,\n    \"expiration_at_ms\": 1698624417232,\n    \"id\": \"8CF0CD6C-CAF3-41FB-968A-661938235AF0\",\n    \"is_family_share\": null,\n    \"offer_code\": null,\n    \"original_app_user_id\": \"f8e14f51-0c76-49ba-8d67-c229f1875dd9\",\n    \"original_transaction_id\": null,\n    \"period_type\": \"NORMAL\",\n    \"presented_offering_id\": null,\n    \"price\": null,\n    \"price_in_purchased_currency\": null,\n    \"product_id\": \"test_product\",\n    \"purchased_at_ms\": 1698617217232,\n    \"store\": \"APP_STORE\",\n    \"subscriber_attributes\": {\n      \"$displayName\": {\n        \"updated_at_ms\": 1698617217232,\n        \"value\": \"Alex Keener\"\n      },\n      \"$email\": {\n        \"updated_at_ms\": 1698617217232,\n        \"value\": \"alex@example.com\"\n      },\n      \"$phoneNumber\": {\n        \"updated_at_ms\": 1698617217232,\n        \"value\": \"+19795551234\"\n      },\n      \"my_custom_attribute_1\": {\n        \"updated_at_ms\": 1698617217232,\n        \"value\": \"catnip\"\n      }\n    },\n    \"takehome_percentage\": null,\n    \"tax_percentage\": null,\n    \"transaction_id\": null,\n    \"type\": \"TEST\"\n  }\n}\n```\n\n```\n{\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"integration\": {\n      \"name\": \"RevenueCat\"\n    },\n    \"externalId\": [\n      {\n        \"type\": \"revenuecatAppUserId\",\n        \"id\": \"f8e14f51-0c76-49ba-8d67-c229f1875dd9\"\n      }\n    ]\n  },\n  \"integrations\": {\n    \"RevenueCat\": false\n  },\n  \"properties\": {\n    \"aliases\": [\n      \"f8e14f51-0c76-49ba-8d67-c229f1875dd9\",\n      \"389ad6dd-bb40-4c03-9471-1353da2d55ec\"\n    ],\n    \"appUserId\": \"f8e14f51-0c76-49ba-8d67-c229f1875dd9\",\n    \"commissionPercentage\": null,\n    \"countryCode\": \"US\",\n    \"currency\": null,\n    \"entitlementId\": null,\n    \"entitlementIds\": null,\n    \"environment\": \"SANDBOX\",\n    \"eventTimestampMs\": 1698617217232,\n    \"expirationAtMs\": 1698624417232,\n    \"id\": \"8CF0CD6C-CAF3-41FB-968A-661938235AF0\",\n    \"isFamilyShare\": null,\n    \"offerCode\": null,\n    \"originalAppUserId\": \"f8e14f51-0c76-49ba-8d67-c229f1875dd9\",\n    \"originalTransactionId\": null,\n    \"periodType\": \"NORMAL\",\n    \"presentedOfferingId\": null,\n    \"price\": null,\n    \"priceInPurchasedCurrency\": null,\n    \"productId\": \"test_product\",\n    \"purchasedAtMs\": 1698617217232,\n    \"store\": \"APP_STORE\",\n    \"subscriberAttributes\": {\n      \"$displayName\": {\n        \"updated_at_ms\": 1698617217232,\n        \"value\": \"Alex Keener\"\n      },\n      \"$email\": {\n        \"updated_at_ms\": 1698617217232,\n        \"value\": \"alex@example.com\"\n      },\n      \"$phoneNumber\": {\n        \"updated_at_ms\": 1698617217232,\n        \"value\": \"+19795551234\"\n      },\n      \"my_custom_attribute_1\": {\n        \"updated_at_ms\": 1698617217232,\n        \"value\": \"catnip\"\n      }\n    },\n    \"takehomePercentage\": null,\n    \"taxPercentage\": null,\n    \"transactionId\": null,\n    \"type\": \"TEST\"\n  },\n  \"type\": \"track\",\n  \"event\": \"TEST\",\n  \"messageId\": \"8CF0CD6C-CAF3-41FB-968A-661938235AF0\",\n  \"originalTimestamp\": \"2023-10-29T22:06:57.232Z\",\n  \"sentAt\": \"2023-10-29T22:06:57.232Z\"\n}\n```",
  "title": "RevenueCat Source | RudderStack Docs",
  "description": "Ingest your event data from RevenueCat into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/braze-currents/",
  "markdown": "# Braze source | RudderStack Docs\n\nIngest your event data from Braze into RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Braze](https://www.braze.com/) is a customer engagement platform that helps you better understand your customers’ in-app behavior and use the insights to improve your users’ app experience.\n\nYou can send your Braze events to RudderStack by leveraging [Braze Currents](https://www.braze.com/docs/user_guide/data_and_analytics/braze_currents/).\n\nThis guide will help you set up Braze as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Braze source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Braze**.\n2.  Assign a name to your source and click **Continue**.\n3.  The Braze source is now configured. Copy the webhook URL containing the write key - you can find the URL in the **Settings** tab of your Braze source. You will need this URL in the next step.\n\n[![Braze webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/braze-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/braze-webhook-url.webp)\n\n4.  In your [Braze dashboard](https://dashboard.braze.com/sign_in), go to **Currents** > **\\+ Create Currents** > **RudderStack Export**.\n5.  Enter an integration name, contact email, RudderStack webhook URL (in the **Key** field), and your RudderStack region.\n6.  Select the events you would like to export and click **Launch Current**.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Currents is available as a self-serve product to any user with an entitlement or license. If you do not have a license, reach out to your Braze account team to get one.\n\n## Supported events and properties\n\nBraze uses RudderStack’s [Event Streams](https://www.rudderstack.com/docs/sources/event-streams/) functionality to send events to RudderStack. These events can then be transformed and routed to your preferred destinations, including your data warehouse.\n\nThe following table lists all Braze events supported by RudderStack:\n\n| Event name | Event description |\n| --- | --- |\n| Application Uninstalled | The user uninstalled the application. |\n| Campaign Converted | The user performed the primary conversion events for a Campaign within its conversion window. |\n| Canvas Converted | The user performed the primary conversion event for a Canvas within its conversion window. |\n| Canvas Entered | The user was entered into a Canvas. |\n| Campaign Control Group Entered | The user was enrolled in a Campaign control group. |\n| Email Sent | An email was successfully sent to the user. |\n| Email Delivered | An email was successfully delivered to the user. |\n| Email Opened | The user opened an email. |\n| Email Link Clicked | The user clicked a link within an email. Note that the email click tracking feature must be enabled. |\n| Email Bounced | Triggered when Braze attempts to send an email but the receipient’s email server does not accept it. |\n| Email Soft Bounced | Triggered when Braze attempts to send an email but the recepient’s email server bounces it temporarily because of reasons like full inbox, email server down, etc. |\n| Email Marked As Spam | The user marked an email as spam. |\n| Email Unsubscribed | The user clicked on the unsubscribe link within an email. |\n| Subscription Group State Changed | The user’s subscription group status changed to `Subscribed` or `Unsubscribed`. |\n| Push Notification Sent | A push notification was successfully sent to the user. |\n| Push Notification Tapped | The user tapped on a push notification. |\n| iOS Foreground Push Opened | The user received an iOS push notification while the app was open. |\n| In-App Message Viewed | The user viewed an in-app message. |\n| In-App Message Clicked | The user clicked an in-app message. |\n| News Feed Viewed | The user viewed the Braze News Feed. |\n| News Feed Card Viewed | The user viewed a card within the Braze News Feed. |\n| News Feed Card Clicked | The user tapped or clicked on Braze News Feed card. |\n| Webhook Sent | A webhook message was sent. |\n\nThe following table lists the properties included in the events mentioned above:\n\n| Property name | Property type | Description |\n| --- | --- | --- |\n| `app_id` | String | The API identifier for the app on which the user receives a message/notification or performs some action. |\n| `send_id` | String | The message ID specified for a particular campaign, if applicable. |\n| `campaign_id` | String | The API identifier of the campaign associated with the event, if applicable. |\n| `canvas_id` | String | The API identifier of the Canvas associated with the event, if applicable. |\n| `canvas_variation_id` | String | The API identifier of the Canvas Variation associated with the event, if applicable. |\n| `canvas_step_id` | String | The API identifier of the Canvas Step associated with the event, if applicable. |\n| `context.traits.email` | String | The email address that the email was sent to, in case of the Email events. |\n| `button_id` | String | The ID of the button that the user clicked, in case of the `In-App Message Clicked` event. |\n| `card_api_id` | String | The API identifier of the News Feed Card, in case of the `News Feed Card Viewed` and `News Feed Card Clicked` events. |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Braze source | RudderStack Docs",
  "description": "Ingest your event data from Braze into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/reverse-etl/visual-data-mapper/",
  "markdown": "# Data Mapping with Visual Data Mapper (VDM)\n\nMap your warehouse columns to destination tables with RudderStack’s Visual Data Mapper functionality.\n\n* * *\n\n*     4 minute read  \n    \n\nThe **Visual Data Mapper** (VDM) offers an intuitive UI to map your warehouse columns to specific destination fields. This is useful especially when mapping your warehouse data to custom fields defined in your destination.\n\n## Supported destinations\n\nRudderStack supports the Visual Data Mapper for the following destinations:\n\n*   [Amplitude](https://www.rudderstack.com/docs/destinations/streaming-destinations/amplitude/)\n*   [Bing Ads Audience](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/bing-ads-audience/)\n*   [Bing Ads Offline Conversions](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/bing-ads-offline-conversions/)\n*   [Braze](https://www.rudderstack.com/docs/destinations/streaming-destinations/braze/)\n*   [Criteo Audience](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/criteo-audience/)\n*   [Customer.io](https://www.rudderstack.com/docs/destinations/streaming-destinations/customer.io/)\n*   [Eloqua](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/eloqua/)\n*   [Klaviyo Bulk upload](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/klaviyo-bulk-upload/)\n*   [Facebook Custom Audience](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/fb-custom-audience/)\n*   [Google Ads Remarketing Lists (Customer Match)](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/google-adwords-remarketing-list/)\n*   [HubSpot](https://www.rudderstack.com/docs/destinations/streaming-destinations/hubspot/)\n*   [Intercom](https://www.rudderstack.com/docs/destinations/streaming-destinations/intercom/)\n*   [Iterable](https://www.rudderstack.com/docs/destinations/streaming-destinations/iterable/)\n*   [Klaviyo](https://www.rudderstack.com/docs/destinations/streaming-destinations/klaviyo/)\n*   [LaunchDarkly Segments](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/launchdarkly-segments/)\n*   [Mailchimp](https://www.rudderstack.com/docs/destinations/streaming-destinations/mailchimp/)\n*   [Marketo](https://www.rudderstack.com/docs/destinations/streaming-destinations/marketo/)\n*   [Marketo Static Lists](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/marketo-static-lists/)\n*   [Salesforce](https://www.rudderstack.com/docs/destinations/streaming-destinations/salesforce/)\n*   [SFTP](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/sftp/)\n*   [Snapchat Custom Audience](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/snapchat-custom-audience/)\n*   [The Trade Desk Audience](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/trade-desk-audience/)\n*   [TikTok Audiences](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/tiktok-audiences/)\n*   [Yandex.Metrica Offline Events](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/yandex-metrica-offline-events/)\n\n  \n\n## Use Visual Data Mapper\n\n1.  Select the destination **Object** where you want to sync the data.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   RudderStack automatically loads all the relevant destination objects. If you have added a new destination object during this configuration process, click **Reload objects** to get all the latest objects.\n> *   RudderStack **does not** support objects that do not have any fields or a unique user identifier.\n\n[![Select object](https://www.rudderstack.com/docs/images/data-pipelines/vdm-mapping-1.webp)](https://www.rudderstack.com/docs/images/data-pipelines/vdm-mapping-1.webp)\n\n2.  Select the [sync mode](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/) that RudderStack uses to sync your data.\n\n### Choose identifier\n\nIn the **Choose Identifier** section, choose a warehouse column and destination field to map your records from the source to the destination. You can choose any column from the dropdown that acts as a unique identifier.\n\n[![Choose idenfier](https://www.rudderstack.com/docs/images/data-pipelines/vdm-mapping-2.webp)](https://www.rudderstack.com/docs/images/data-pipelines/vdm-mapping-2.webp)\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The **Choose identifier** field must have unique values in order to successfully sync the data to the destination. The records containing duplicate identifier values will **not** sync.\n> \n> For example, if you have chosen `name` as the identifier and it contains more than one values like `Alex`, the duplicate records will fail to sync.\n\n### Map fields\n\nIn this section, you can configure the specific source-destination field mappings.\n\n1.  Click the **Map another field** option. Select the **Destination field** from the dropdown. Then, select the **Warehouse column** you want to map to this field.\n\n[![Map objects](https://www.rudderstack.com/docs/images/data-pipelines/vdm-mapping-3.webp)](https://www.rudderstack.com/docs/images/data-pipelines/vdm-mapping-3.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> RudderStack gives you full visibility into the name and type of the fields that you are mapping along with a sample preview.\n\n#### **Mandatory mappings**\n\nThere are some required fields you need to map when sending events to some destination objects. These fields cannot be removed from the mappings.\n\nFor example, in the Salesforce **Account** object, **Account Name** is a required field, as seen in the following image:\n\n[![Map another field](https://www.rudderstack.com/docs/images/warehouse-actions-sources/vdm-5.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/vdm-5.webp)\n\n#### **Map fields of different type/format**\n\nIf you are mapping fields with different data types or formats, you can use the [Transformations](https://www.rudderstack.com/docs/transformations/overview/) feature to do the type conversion before sending the data.\n\n[![Map another field](https://www.rudderstack.com/docs/images/warehouse-actions-sources/vdm-6.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/vdm-6.webp)\n\nIn the above example, RudderStack lets you map the warehouse column `PHONE` of string type to a destination field `Associated Company ID` of float data type. You can then add a transformation at the destination end to do this type conversion to ensure there is no data type mismatch.\n\n### Create custom destination fields\n\nRudderStack lets you create a custom destination field and map it to a warehouse column.\n\n1.  Click the **Map another field** option.\n2.  Enter the name of the custom destination field you want to create.\n3.  Click **Create**.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In some cases, you must create or define the custom fields in the destination **before** creating them in the RudderStack dashboard.\n\n[![Create custom fields](https://www.rudderstack.com/docs/images/data-pipelines/vdm-mapping-4.webp)](https://www.rudderstack.com/docs/images/data-pipelines/vdm-mapping-4.webp)\n\n#### **Sync data to custom Salesforce objects**\n\nRudderStack **does not support** creating new custom fields for the [Salesforce](https://www.rudderstack.com/docs/destinations/streaming-destinations/salesforce/) destination using the above steps. However, you can still use the Visual Data Mapper to sync your data to custom Salesforce objects by following these steps:\n\n1.  Log in to your [Salesforce dashboard](https://login.salesforce.com/?locale=in).\n2.  In the top navigation bar, click the **Setup** icon and go to **Object Manager**.\n\n[![Salesforce custom object](https://www.rudderstack.com/docs/images/warehouse-actions-sources/salesforce-custom-object.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/salesforce-custom-object.webp)\n\n3.  Go to **Create** > **Custom Object**.\n4.  Enter the relevant details and click **Save** to finish the configuration.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure to select the **Allow Search** setting under the **Search Status** section, as seen below. Otherwise, the custom object will **not** be visible in the RudderStack dashboard.\n> \n> ![Salesforce custom object](https://www.rudderstack.com/docs/images/warehouse-actions-sources/salesforce-custom-object-1.webp)\n\n5.  In your RudderStack dashboard, click **Reload objects** under the **Object** field. Your newly created custom object should now be visible in this list. Select the object and map the relevant fields to sync your data.\n\n[![Create custom Salesforce fields](https://www.rudderstack.com/docs/images/data-pipelines/salesforce-custom-object.webp)](https://www.rudderstack.com/docs/images/data-pipelines/salesforce-custom-object.webp)\n\n## Update mapping configuration\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note the following:\n> \n> *   You can update your mapping configuration irrespective of whether the connection is turned on or off.\n> *   While updating the mapping configuration, you **cannot** change the **Object**, **Sync mode**, and **Choose identifier** fields. You will have to delete the destination and connect a new destination from scratch to do so.\n\n1.  Go to the **Schema** tab of your Reverse ETL connection page.\n2.  Update the mappings as required.\n3.  Click **Save** to update the configuration.\n\n[![Update JSON mappings](https://www.rudderstack.com/docs/images/retl-sources/update-vdm-mapping.webp)](https://www.rudderstack.com/docs/images/retl-sources/update-vdm-mapping.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Data Mapping with Visual Data Mapper (VDM) | RudderStack Docs",
  "description": "Map your warehouse columns to destination tables with RudderStack's Visual Data Mapper functionality.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-react-native-sdk/",
  "markdown": "# React Native SDK | RudderStack Docs\n\nUse RudderStack’s React Native SDK to send events from your React Native application to various destinations.\n\n* * *\n\n*     21 minute read  \n    \n\nThe **RudderStack React Native SDK** allows you to track event data from your React Native applications and send it to your specified destinations via RudderStack.\n\nYou can check the [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-react-native) to get a more hands-on understanding of the SDK.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The React Native SDK supports the tvOS platform starting from v1.12.0.\n\n[![Github Badge](https://img.shields.io/npm/v/@rudderstack/rudder-sdk-react-native?style=flat)](https://www.npmjs.com/package/@rudderstack/rudder-sdk-react-native)\n\n## SDK setup requirements\n\nTo set up the RudderStack React Native SDK, the following prerequisites must be met:\n\n*   You need to set up a [RudderStack account](https://app.rudderstack.com/signup).\n*   Once signed up, [set up a React Native source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the dashboard. You should be able to see a **Write Key** for this source, as shown below:\n\n[![React Native source write key](https://www.rudderstack.com/docs/images/event-stream-sources/reactnative-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/reactnative-write-key-new.webp)\n\n*   You will also need a data plane URL. Refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has an SDK installation snippet containing both the write key and the data plane URL. You can use it to integrate the React Native SDK into your project.\n\n*   Setting up the [React Native development environment](https://reactnative.dev/docs/environment-setup) on your system is also highly recommended.\n\n## Installing the React Native SDK\n\nThe recommended way to install the React Native SDK is through [`npm`](https://www.npmjs.com/package/@rudderstack/rudder-sdk-react-native).\n\nTo add the SDK as a dependency, perform the following steps:\n\n*   Go to the root of your application and add `@rudderstack/rudder-sdk-react-native` as a dependency as shown:\n\n```\nnpm install @rudderstack/rudder-sdk-react-native --save\n```\n\n```\nyarn add @rudderstack/rudder-sdk-react-native\n```\n\n## Initializing the RudderStack client\n\n1.  Import the React Native SDK:\n\n```\nimport rudderClient from \"@rudderstack/rudder-sdk-react-native\"\n```\n\n2.  Initialize the SDK by adding the following code in your application as an `async` function:\n\n```\nconst rudderInitialise = async () => {\n  await rudderClient.setup(WRITE_KEY, {\n    dataPlaneUrl: DATA_PLANE_URL,\n    trackAppLifecycleEvents: true,\n    recordScreenViews: true,\n  });\n};\nrudderInitialise().catch(console.error);\n```\n\nAlternatively, you can use the `useEffect` hook to invoke the SDK’s initialization method in your root level component:\n\n```\nuseEffect(() => {\n  const rudderInitialise = async () => {\n    await rudderClient.setup(WRITE_KEY, {\n      dataPlaneUrl: DATA_PLANE_URL,\n      trackAppLifecycleEvents: true,\n      recordScreenViews: true,\n    });\n    console.log('SDK is initalised');\n  };\n  rudderInitialise().catch(console.error);\n}, []);\n```\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> It is highly recommended to use the `await` keyword with the `setup` method.\n\nThe `setup` method has the following signature:\n\n| Name | Data Type | Required | Description |\n| --- | --- | --- | --- |\n| `writeKey` | String | Yes | Your React Native source write key |\n| `configuration` | Object | No  | Contains the RudderStack client configuration |\n\nCheck the [Configuring your RudderStack client](#configuring-your-rudderstack-client) section below for a full list of configurable parameters.\n\n## Configuring your RudderStack client\n\nYou can configure your client based on the following parameters by passing them in the `configuration` object of your `setup` call.\n\n| Parameter | Type | Description | Default value |\n| --- | --- | --- | --- |\n| `logLevel` | `int` | Controls how much of the log you want to see from the SDK. Refer to the [Debugging](#debugging) section to get a list of all supported values. | `RUDDER_LOG_LEVEL.ERROR` |\n| `dataPlaneUrl` | `string` | URL of your `data-plane`. Please refer above to see how to fetch the data plane URL. | `https://hosted.rudderlabs.com` |\n| `flushQueueSize` | `int` | Number of events in a batch request to the server. | `30` |\n| `dbCountThreshold` | `int` | The number of events to be saved in the `SQLite` database. Once the limit is reached, the older events are deleted from the database. | `10000` |\n| `sleepTimeOut` | `int` | Minimum waiting time to flush the events to the server. | `10 seconds` |\n| `configRefreshInterval` | `int` | It will fetch the config from `dashboard` after this many hours. | `2` |\n| `autoSessionTracking` | boolean | Determines if the SDK should automatically [track the user sessions](#tracking-user-sessions). | `true` |\n| `sessionTimeout` | int | Maximum inactivity period before the session expires. | `300000 ms` (5 minutes) |\n| `trackAppLifecycleEvents` | `boolean` | Whether SDK will capture application life cycle events automatically. | `true` |\n| `enableBackgroundMode` | `boolean` | Determines if the SDK should [send the tracked events](#sending-tracked-events-before-closing-or-backgrounding-apps) for some time before the app is closed or backgrounded.<br><br>**Note**: This option is currently available only for iOS and tvOS. | `false` |\n| `autoCollectAdvertId` | `boolean` | Determines if the SDK will collect the advertisement ID. | `false` |\n| `recordScreenViews` | `boolean` | Determines if the SDK should capture screen view events automatically. | `false` |\n| `dbEncryption` | `DBEncryption` | Determines whether to encrypt/decrypt the database using the specified key. See Encrypting RudderStack databases for more information. | \\-  |\n| `controlPlaneUrl` | `string` | If you are using our open-source [Control plane lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) utility, use this option to point to your hosted `sourceConfig`. SDK will add `/sourceConfig` along with this URL | `https://api.rudderlabs.com` |\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` event is as shown:\n\n```\nrudderClient.identify(\n  \"test_userId\",\n  {\n    email: \"testuser@example.com\",\n    location: \"UK\",\n  },\n  null\n)\n```\n\nThe `identify` method has the following signature:\n\n| Name | Data Type | Required | Description |\n| --- | --- | --- | --- |\n| `userId` | String | Yes | The user’s unique identifier |\n| `traits` | Object | No  | Traits information for the user |\n| `option` | Object | No  | Extra options for the `identify` event |\n\nOnce a user is identified, the SDK persists all user information and passes it to the successive `track` or `screen` calls. To reset the user identification, you can use the [`reset`](#reset) method.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   For older SDK versions (< v1.9.0), the React Native SDK captures the device ID and uses that as `anonymousId` for identifying the user. This helps the SDK to track the users across the application installation.\n> *   Starting from v1.9.0 the SDK uses a UUID as `anonymousId` instead of the device ID. If you are upgrading from a previous SDK version, see [How RudderStack sets anonymous ID](#how-sdk-sets-anonymous-id) for more information on how the SDK collects and sets `anonymousId`.\n\n## How SDK sets device ID for Android and iOS\n\n*   On Android devices, the `deviceId` is assigned during the first boot. It remains consistent across the applications and installs and changes only after factory reset.\n*   According to [Apple documentation](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor), multiple apps from the same vendor are assigned the same `deviceId`. If all applications from the vendor are uninstalled and then reinstalled, then they are assigned a new `deviceId`.\n\n### Disabling device ID collection\n\nStarting from v1.9.0, you can disable the collection of device ID by setting `collectDeviceId` in the `Configuration` object to `false`.\n\nYou will observe the following changes when this property is set to false:\n\n*   The SDK does not send `context.device.id` as a part of the event payload.\n*   The SDK replaces the existing `anonymousId` (if it is equal to the device ID) with a UUID.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> These changes are introduced to make the SDK more compliant with all policies around the device ID collection.\n\n```\nconst config = {\n    dataPlaneUrl: 'DATA_PLANE_URL',\n    collectDeviceId: false,\n  };\n\nawait rudderClient.setup('WRITE_KEY', config);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you are upgrading to the latest SDK from a previous version (< v1.9.0) **and** disabling device ID collection using `collectDeviceId:false`:\n> \n> *   Make sure your user transformations are not dependent on `context.device.id` as the SDK will not send this value in the event payload.\n> *   The `context.device.id` column in your warehouse destination will not be populated henceforth (it will still contain data populated by the previous SDK version).\n\n## How SDK sets anonymous ID\n\n### For fresh installation\n\nRudderStack uses UUID as `anonymousId` regardless of whether [`collectDeviceId`](#collectdeviceid) is set to `true` or `false`.\n\n### For SDK updated from older version\n\nIf you have updated your React Native SDK from an older version (< v1.9.0), then:\n\n*   RudderStack will continue to use the device ID as `anonymousId` - it will not break the existing SDK behavior **until** you set `collectDeviceId` to `false`.\n*   If you set `collectDeviceId` to `false`, the SDK checks if the existing `anonymousId` is a device ID. If yes, it sets a new UUID as the `anonymousId`.\n*   If you have used the [`putAnonymousId`](#overriding-anonymous-id) method to set your own `anonymousId`, then the SDK will **not** modify it even if you set `collectDeviceId` to `false`.\n\n## Overriding anonymous ID\n\nYou can use the `putAnonymousId` method to override and set your own `anonymousId`:\n\n```\nrudderClient.putAnonymousId(ANONYMOUS_ID)\n```\n\n## Retrieving anonymous ID\n\nYou can retrieve the anonymous ID (either [set by the SDK](#how-sdk-sets-anonymous-id) or the user via [`putAnonymousId`](#overriding-anonymous-id)) using the following snippet:\n\n```\nconst getAnonymousId = async () => {\n    const context: IRudderContext | null = await rudderClient.getRudderContext();\n    const anonymousId = context.traits.anonymousId;\n    console.log(`Anonymous ID: ${anonymousId}`);\n};\n```\n\n## Setting custom ID\n\nYou can pass a custom ID along with the standard `userId` in your `identify` calls. RudderStack adds this value under `context.externalId`.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack supports passing `externalId` only in the `identify` events. You must not pass this ID in other API calls like `track`, `page`, etc.\n\nThe following code snippet shows how to add `externalId` to your `identify` event:\n\n```\nconst options = {\n  externalIds: [\n    {\n      id: \"some_external_id_1\",\n      type: \"brazeExternalId\",\n    },\n  ],\n}\nrudderClient.identify(\n  \"1hKOmRA4GRlm\",\n  {\n    email: \"alex@example.com\",\n    location: \"UK\",\n  },\n  options\n)\n```\n\n## Track\n\nYou can record the user activity through the `track` method. Every user action is called an **event**.\n\nA sample `track` event is shown below:\n\n```\nrudderClient.track(\"test_track_event\", {\n  test_key_1: \"test_value_1\",\n  test_key_2: {\n    test_child_key_1: \"test_child_value_1\",\n  },\n})\n```\n\nThe `track` method has the following signature:\n\n| Name | Data Type | Required | Description |\n| --- | --- | --- | --- |\n| `name` | String | Yes | Name of the tracked event |\n| `property` | Object | No  | Extra data properties to send along with the event |\n| `options` | Object | No  | Extra event options |\n\n## Screen\n\nYou can use the `screen` call to record whenever the user sees a screen on the mobile device. You can also send some extra properties along with this event.\n\nAn example of the `screen` event is as shown:\n\n```\nrudderClient.screen(\"Main Activity\", {\n  foo: \"bar\",\n})\n```\n\nAlternatively, you can use the following method signature:\n\n| Name | Data Type | Required | Description |\n| --- | --- | --- | --- |\n| `screenName` | String | Yes | Name of the screen viewed by the user. |\n| `property` | Object | No  | Extra property object to pass along with the `screen` call. |\n| `option` | Object | No  | Extra options passed along with `screen` event. |\n\n### Automatic screen recording\n\nYou can enable the automatic recording of screen views by passing `recordScreenViews` as `true` while initializing the `rudderClient`. This automatically sends a `screen` call for every screen that a user views. By default, `recordScreenViews` is set to `false`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `recordScreenViews` parameter records the screen views of the native Android [Activities](https://developer.android.com/guide/components/activities/intro-activities) or the iOS [Views](https://developer.apple.com/documentation/uikit/view_controllers) only and **not** by the React Native Views.\n\nTo track the screen views of the React Native Screens, you can use the following code snippet:\n\n```\nimport rudderClient from \"@rudderstack/rudder-sdk-react-native\"\nimport {\n  NavigationContainer\n} from '@react-navigation/native';\n\nconst App = () => {\n  const routeNameRef = React.useRef();\n  const navigationRef = React.useRef();\n  return ( <\n    NavigationContainer ref = {\n      navigationRef\n    }\n    onReady = {\n      () => {\n        routeNameRef.current = navigationRef.current.getCurrentRoute().name;\n      }\n    }\n    onStateChange = {\n      async () => {\n        const previousRouteName = routeNameRef.current;\n        const currentRouteName = navigationRef.current.getCurrentRoute().name;\n\n        if (previousRouteName !== currentRouteName) {\n          rudderClient.screen(currentRouteName);\n        }\n        routeNameRef.current = currentRouteName;\n      }\n    } >\n    ...\n    <\n    /NavigationContainer>\n  );\n};\n\nexport default App;\n```\n\n## Group\n\nRudderStack’s `group` method lets you link an identified user with a group, such as a company, organization, or an account. You can also record any traits associated with the group like the company name, number of employees, etc.\n\nA sample `group` call is shown below:\n\n```\nrudderClient.group(\"company123\", {\n  \"city\": \"New Orleans\",\n  \"state\": \"Louisiana\",\n  \"country\": \"USA\"\n})\n```\n\nThe `group` call has the following method signature:\n\n| Name | Data Type | Required | Description |\n| --- | --- | --- | --- |\n| `groupId` | String | Yes | Your group’s unique identifier |\n| `traits` | Object | No  | The group’s traits |\n| `option` | Object | No  | Extra options passed along with `group` event. |\n\n## Alias\n\nThe `alias` call lets you merge different identities of a known user.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> `alias` is an advanced method that lets you change the tracked user’s ID explicitly. This method is useful when managing identities for some of the downstream destinations.\n\nA sample `alias` call is as shown:\n\n```\nrudderClient.alias(\"newId\")\n```\n\nThe `alias` call has the following method signature:\n\n| Name | Data Type | Required | Description |\n| --- | --- | --- | --- |\n| `newId` | String | Yes | The new identifier you want to assign to the user. |\n| `option` | Object | No  | Extra options passed along with `alias` event. |\n\n## Reset\n\nYou can use the `reset` method to clear the persisted user traits. It also resets the `anonymousId` with a new UUID if you call it with `true` (for SDK v1.19.0 and later).\n\n```\nawait rudderClient.reset(true)\n```\n\nTo clear only user traits, call `reset` with `false`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> It is highly recommended to use the `await` keyword with the reset call.\n\n## Encrypting RudderStack databases\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is available in the React Native SDK from v1.11.0 onwards.\n\nTo enable the database encryption feature in the React Native SDK, follow these steps:\n\n1.  Navigate to the root of your application and add `@rudderstack/rudder-plugin-db-encryption-react-native` as a dependency:\n\n```\nnpm install @rudderstack/rudder-plugin-db-encryption-react-native\n```\n\n2.  Import the DBEncryption plugin:\n\n```\nimport DBEncryption from '@rudderstack/rudder-plugin-db-encryption-react-native';\n```\n\n3.  Create a `DBEncryption` object and pass it while initializing the SDK:\n\n```\nconst dbEncryption = new DBEncryption('<encryption_key>', true);\n\nconst rudderInitialise = async () => {\n  await rudderClient.setup(WRITE_KEY, {\n    dataPlaneUrl: DATA_PLANE_URL,\n    dbEncryption: dbEncryption,\n  });\n};\nrudderInitialise().catch(console.error);\n```\n\nThe `DBEncryption` class accepts the following parameters:\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `key` | string | Key used to encrypt/decrypt the database. |\n| `enable` | boolean | Specifies whether to encrypt/decrypt the database |\n\nTo remove encryption from a database, configure the `DBEncryption` object with your encryption key and set `enable` to `false`.\n\n**Instructions for iOS**\n\nThe `rudder-plugin-db-encryption-react-native` uses the [SQLCipher](https://github.com/sqlcipher/sqlcipher) Cocoapod under the hood to perform encryption. This Cocoapod requires the removal of any references to the standard SQLite system library for it to function as expected.\n\nIf you set up a project to inadvertently include a linking reference against the standard SQLite library before SQLCipher, it is possible that the application builds and runs correctly but does not use SQLCipher for encryption. This is not a problem for most projects but there are certain cases where unintentional SQLite linking can occur.\n\nOne such example is when using CocoaPods or some other sub-project that declares a dependency on the SQLite3 library. In this case, adding a pod to a project can **silently** modify the project settings in such a way that SQLCipher is not properly linked.\n\nYou can identify and fix the above linking issue during the development stage by looking for the below error log from the SDK:\n\n```\nRSDBPersistentManager: createDB: Cannot encrypt the Database as SQLCipher wasn't linked correctly.\n```\n\nTo fix the linking issue, add a linker flag to your project settings to ensure that the Xcode links SQLCipher before SQLite. Follow these steps:\n\n1.  Open the project-level build settings. These are the global project settings, not for the individual application target.\n2.  Locate the **Other Linker Flags** setting and add one of the following commands depending on how you are integrating SQLCipher into the app.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you are not adding `SQLCipher` into the app on your own and only using `rudder-plugin-db-encryption-react-native`, then see only the points 3 and 4 in the below table - depending on whether you are using `use_frameworks!` in your app’s `ios/Podfile`.\n\n| Scenario | Command | Notes |\n| --- | --- | --- |\n| When using SQLCipher commercial edition static libraries | `$(PROJECT_DIR)/sqlcipher-static-ios/ios-libs/libsqlcipher-ios.a` | Adjust according to the path to the `libsqlcipher-ios.a` you received as a part of the package. |\n| When using the `sqlcipher.xcodeproj` included in the SQLCipher Git repository | `$(BUILT_PRODUCTS_DIR)/libsqlcipher.a` | \\-  |\n| When using the SQLCipher CocoaPod with the `use_frameworks` Podfile setting enabled | `-framework SQLCipher` | \\-  |\n| When using the SQLCipher CocoaPod without the `use_frameworks` Podfile setting enabled | `-lSQLCipher` | \\-  |\n\nOnce the linker flag is added to the project-level build settings, you should see something like the below image:\n\n[![Project-level build settings](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-project-build-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-project-build-settings.webp)\n\nAfter adding the linker flag to your project-level build settings, check the target-level build settings to ensure SQLCipher is shown first, as seen below:\n\n[![Target-level build settings](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-target-build-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/flutter-sdk-target-build-settings.webp)\n\nRudderStack gives the users (e.g., an EU user) the ability to opt out of tracking any user activity until the user gives their consent. You can do this by leveraging RudderStack’s `optOut` API.\n\nThe `optOut` API takes `true` or `false` as a Boolean value to enable or disable tracking user activities. This flag persists across device reboots.\n\nThe following snippet highlights the use of the `optOut` API to disable user tracking:\n\n```\nawait rudderClient.optOut(true)\n```\n\nOnce the user grants their consent, you can enable user tracking once again by using the `optOut` API with `false` as a parameter sent to it:\n\n```\nawait rudderClient.optOut(false)\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `optOut` API is available in the React Native SDK starting from version `1.0.14`.\n\n## Sending tracked events before closing or backgrounding apps\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is available only for the iOS and tvOS platforms as it relies on their background mode capabilities.\n\nTo ensure that the events tracked using the React Native SDK just before closing or backgrounding your app are sent to RudderStack immediately and not upon the next app launch, set [`enableBackgroundMode`](#configuring-your-rudderstack-client) to `true` while initializing the SDK.\n\n```\nconst rudderInitialise = async () => {\n  await rudderClient.setup(WRITE_KEY, {\n    dataPlaneUrl: DATA_PLANE_URL,\n    enableBackgroundMode: true,\n  });\n};\nrudderInitialise().catch(console.error);\n```\n\nBy doing so, your app requests iOS for an additional background run time which allows the SDK to send all the tracked events before the app is closed or backgrounded.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> There is no fixed background run time for the app as it is completely abstracted by iOS. For more information, see this [iOS background modes tutorial](https://www.kodeco.com/34269507-background-modes-tutorial-getting-started#toc-anchor-008).\n\n## Tracking user sessions\n\nBy default, the React Native SDK automatically tracks user sessions. RudderStack automatically determines the start and end of a user session depending on the inactivity time configured in the SDK (default time is 5 minutes).\n\n```\nconst rudderInitialise = async () => {\n  await rudderClient.setup(WRITE_KEY, {\n    dataPlaneUrl: DATA_PLANE_URL,\n    trackAppLifecycleEvents: true,\n    autoSessionTracking: true, // Set to false to disable automatic session tracking\n    sessionTimeout: 5 * 60 * 1000,\n  });\n};\nrudderInitialise().catch(console.error);\n```\n\nTo disable automatic session tracking, set `autoSessionTracking` to `false`.\n\nFor more information on user sessions and how to track them using the React Native SDK, see [Session Tracking](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/).\n\n### Getting the session ID\n\nTo fetch the session ID of the current session, you can use the `getSessionId` method of the SDK. If the session ID is unavailable, this method returns a `null` value.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> `getSessionId()` is available in the React Native SDK from v1.10.0 onwards.\n\n```\nconst sessionId = await rudderClient.getSessionId();\n```\n\n## Setting custom context\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is available in the React Native SDK v1.14.0 and later.\n\nTo set custom contextual information in the React Native SDK, pass the `options` object as shown:\n\n```\nconst options = {\n  tier: {\n    category: 'premium',\n    type: 'gold',\n  },\n};\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The SDK treats any other fields in the `options` object except `externalId`, `externalIds`, or `integrations` as custom context and includes them in the `context` object.\n\n### While initializing SDK\n\nYou can set custom context while initializing the SDK as follows:\n\n```\nconst config = {\n  dataPlaneUrl: TEST_DATAPLANE_URL,\n};\n\nawait rc.setup(TEST_WRITE_KEY, config, options);\n```\n\nNote that:\n\n*   The React Native SDK persists the contextual information set during SDK initialization for subsequent events but **not** across sessions.\n*   Calling the [`reset`](#reset) API clears all the contextual information set during SDK initialization.\n\n### While sending events\n\nYou can set custom context while sending events as shown:\n\n```\nrudderClient.track(\n  'Custom Track Event',\n  {\n    property1: 'value1',\n    property2: 'value2',\n  },\n  options,\n);\n```\n\nNote that:\n\n*   You must send the `options` object every time you want to set custom context for a particular event. The SDK does not persist the contextual information sent in an event for the subsequent events.\n*   The contextual information passed while sending events gets precedence over the context set during SDK initialization.\n\n## Setting the device token\n\nYou can use your device token to pass push notifications to the destinations that support them. RudderStack sets this token under `context.device.token`. To set a custom device token, the SDK supports the `putDeviceToken` method.\n\nAn example of setting a custom device token is shown below:\n\n```\nrudderClient.putDeviceToken(<device_token>);\n```\n\n## Capturing advertisement ID automatically\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The React Native SDK supports auto-collecting the advertisement ID only in Android and **not** iOS.\n\nRudderStack automatically collects the advertisement ID from your Android apps **only** if `autoCollectAdvertId` is set to `true` during the [SDK initialization](#initializing-the-rudderstack-client).\n\nTo use this feature, make sure that:\n\n*   `com.google.android.gms.ads.identifier.AdvertisingIdClient` is present in your Android app’s classpath.\n*   `limitAdTracking` is not enabled for your Android device.\n\nAn example of auto-collecting your advertisement ID is shown:\n\n```\nawait rudderClient.setup(WRITE_KEY, {\n  dataPlaneUrl: DATA_PLANE_URL,\n  autoCollectAdvertId: true,\n})\n```\n\n#### **Setting advertisement ID manually**\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The React Native SDK supports this feature for both the Android and iOS platforms.\n\nUse the SDK’s `putAdvertisingId` method to manually set your Android ([AAID](https://support.google.com/googleplay/android-developer/answer/6048248?hl=en)) and iOS ([IDFA](https://developer.apple.com/documentation/adsupport/asidentifiermanager/advertisingidentifier)) as the advertisement ID.\n\nYou can call the `putAdvertisingId` method before or after initializing the SDK; the SDK persists the advertisement ID values throughout the session.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Support for calling `putAdvertisingId` before SDK initialization is available for iOS in the React Native SDK v1.13.0 and above. In the previous versions, you can set the advertisement ID in iOS only **after** the SDK is initialized.\n\nFollow these steps to set a custom advertisement ID using the `putAdvertisingId` method:\n\n1.  Import `Platform`:\n\n```\nimport { Platform } from 'react-native';\n```\n\n2.  Use `putAdvertisingId` to set your advertisement ID:\n\n```\nswitch (Platform.OS) {\n      case 'ios':\n        await rudderClient.putAdvertisingId('iOS-ADVERTISING-ID');\n        break;\n      case 'android':\n        await rudderClient.putAdvertisingId('ANDROID-ADVERTISING-ID');\n        break;\n}\n```\n\nNote that:\n\n*   The `putAdvertisingId` method accepts a single argument `advertisingId` of the string data type.\n*   In case of Android, if you set `autoCollectAdvertId` to `true` and use `putAdvertisingId` to set the advertisement ID, the SDK uses the provided advertisement ID instead of collecting it automatically.\n\n#### **Clearing advertisement ID**\n\nUse the `clearAdvertisingId` method to clear the existing advertisement ID:\n\n```\nawait rudderClient.clearAdvertisingId();\n```\n\nNote the following:\n\n*   Make sure to call `clearAdvertisingId` only after initializing the SDK.\n*   In case of Android, using `clearAdvertisingId` to reset the advertisement ID causes the SDK to starts auto-collecting the advertisement ID again if `autoCollectAdvertId` is set to `true`. To stop auto-collecting the advertisement ID, you must set `autoCollectAdvertId` to `false`.\n\n## Registering callbacks\n\nThe React Native SDK lets you trigger a callback once any device-mode integration is successful. You can use this callback to perform any operation that you wanted to do once a device-integration is successful.\n\nAn example of registering a callback for `App Center` is as shown:\n\n```\nawait rudderClient.registerCallback(\"App Center\", () => {\n  console.log(\"App Center is ready\")\n})\n```\n\nThe `registerCallback` method has the following signatures:\n\n| Name | Data Type | Required | Description |\n| --- | --- | --- | --- |\n| `destinationName` | `string` | Yes | Display name of the device-mode destination. |\n| `callback` | `Function` | Yes | Callback function to be triggered once device-mode integration is successful. |\n\n## Filtering events\n\nWhen sending events to a destination via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode), you can explicitly specify which events should be discarded or allowed to flow through - by allowlisting or denylisting them.\n\n## Enabling/disabling events for specific destinations\n\nThe React Native SDK lets you enable or disable sending events to a specific destination or all destinations to which the source is connected. You can specify these destinations by creating an object as shown:\n\n```\nconst options = {\n  integrations: {\n    // default value for `All` is true\n    All: false,\n    // specifying destination by its display name\n    Amplitude: true,\n    Mixpanel: false,\n  },\n}\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The keyword `All` in the above snippet represents all destinations the source is connected to. Its value is set to `true` by default.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Make sure the destination names that you pass while specifying the destinations should exactly match the names listed [here](https://app.rudderstack.com/directory).\n\nThere are two methods in which you can pass the destinations specified in the above snippet to the SDK:\n\n### 1\\. Passing destinations while initializing the SDK\n\nThis is helpful when you want to enable or disable sending the events across all event calls made using the SDK to the specified destinations.\n\n```\nrudderClient.setup(WRITE_KEY, config, options)\n```\n\n### 2\\. Passing destinations while making event calls\n\nThis approach is helpful when you want to enable or disable sending only a particular event to the specified destinations, or if you want to override the specified destinations passed with the SDK initialization (as described in the method above) for a particular event.\n\n```\nrudderClient.track(\n  \"test_track_event\",\n  {\n    test_key_1: \"test_value_1\",\n  },\n  options\n)\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you specify the destinations both while initializing the SDK as well as while making an event call, then the destinations specified at the event level only will be considered.\n\n## `flush` API\n\nThe React Native SDK supports the `flush()` API. It retrieves all messages present in the database, divides them into individual batches based on the specified queue size, and flushes them to the RudderStack server/backend.\n\nFor example, if the `flushQueueSize` is 30 and there are 180 events in the database when the `flush()` API is called, the SDK will retrieve all events and divide them into batches of 30 messages each, that is, into 6 batches.\n\nIf a batch fails for some reason, the SDK drops the remaining batches to maintain the sequence of the messages. A batch is considered as failed if it isn’t sent to the RudderStack server after 3 retries.\n\nIn device mode, the `flush()` API also calls the destination SDK’s `flush()` API (if applicable).\n\n## Debugging\n\nIf you run into any issues regarding the RudderStack React Native SDK, you can turn on the `VERBOSE` or `DEBUG` logging to find out what the issue is.\n\nFirst, make sure you modify your import statement to include `RUDDER_LOG_LEVEL` with:\n\n```\nimport rudderClient, {\n  RUDDER_LOG_LEVEL,\n} from \"@rudderstack/rudder-sdk-react-native\"\n```\n\nThen to turn on the logging, change your `RudderClient` initialization to the following:\n\n```\nawait rudderClient.setup(WRITE_KEY, {\n  dataPlaneUrl: DATA_PLANE_URL,\n  logLevel: RUDDER_LOG_LEVEL.DEBUG, // or VERBOSE\n})\n```\n\nYou can set the log level to one of the following values:\n\n*   `NONE`\n*   `ERROR`\n*   `WARN`\n*   `INFO`\n*   `DEBUG`\n*   `VERBOSE`\n\n## FAQ\n\n#### Do I need to link the SDK using the React Native link?\n\nNo, you don’t need to link the SDK as it is auto-linked. If you have linked it using `react-native link` and are facing any issues, use `react-native unlink rudder-sdk-react-native` to unlink it.\n\n#### What is the need to use the await keyword?\n\nThe functions exposed by the SDK are asynchronous in nature. If you want a synchronous behavior, you must use the `await` keyword. We highly recommend using the `await` keyword with the setup call to make sure that the SDK has been properly set up, before any further calls are made.\n\n#### Do I need to add anything to my ProGuard rules?\n\nAdd the following lines to your Android ProGuard rules if you are using Proguard full mode to optimize your app:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Add the below rules if you are using the Android SDK older than v1.20.0.\n> \n> Note that the rules are bundled in the SDK itself from v1.20.0 onwards.\n\n```\n// Reporter Module\n\n-keep class com.rudderstack.android.ruddermetricsreporterandroid.models.LabelEntity { *; }\n-keep class com.rudderstack.android.ruddermetricsreporterandroid.models.MetricEntity { *; }\n-keep class com.rudderstack.android.ruddermetricsreporterandroid.models.ErrorEntity { *; }\n\n// Required for the usage off TypeToken class in Utils.converToMap, Utils.convertToList\n\n-keep class com.google.gson.reflect.TypeToken { *; }\n-keep class * extends com.google.gson.reflect.TypeToken\n\n// Required for the serialization of SourceConfig once it is downloaded.\n\n-keep class com.google.gson.internal.LinkedTreeMap { *; }\n-keep class * implements java.io.Serializable { *; }\n-keep class com.rudderstack.rudderjsonadapter.RudderTypeAdapter { *; }\n-keep class * extends com.rudderstack.rudderjsonadapter.RudderTypeAdapter\n\n// Required to ensure the DefaultPersistenceProviderFactory is not removed by Proguard\n// and works as expected even when the customer is not using encryption feature.\n\n-dontwarn net.sqlcipher.Cursor\n-dontwarn net.sqlcipher.database.SQLiteDatabase$CursorFactory\n-dontwarn net.sqlcipher.database.SQLiteDatabase\n-dontwarn net.sqlcipher.database.SQLiteOpenHelper\n-keep class com.rudderstack.android.sdk.core.persistence.DefaultPersistenceProviderFactory { *; }\n\n// Required for the usage of annotations across reporter and web modules\n\n-dontwarn com.fasterxml.jackson.annotation.JsonIgnore\n-dontwarn com.squareup.moshi.Json\n-dontwarn com.fasterxml.jackson.annotation.JsonProperty\n\n// Required for Device Mode Transformations\n\n-keep class com.rudderstack.android.sdk.core.TransformationResponse { *; }\n-keep class com.rudderstack.android.sdk.core.TransformationResponseDeserializer { *; }\n-keep class com.rudderstack.android.sdk.core.TransformationRequest { *; }\n```\n\n#### How do I get the user `traits` after making an `identify` call?\n\nYou can get the user traits after making an `identify` call as shown:\n\n```\nconst rudderContext = await rudderClient.getRudderContext();\nconsole.log('Traits are : ' + JSON.stringify(rudderContext.traits));\n```\n\n#### How does the React Native SDK handle events larger than 32KB?\n\nThe React Native SDK drops any events greater than 32KB.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "React Native SDK | RudderStack Docs",
  "description": "Use RudderStack’s React Native SDK to send events from your React Native application to various destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/get-started/rudderstack-open-source/data-plane-setup/developer-machine-setup/",
  "markdown": "# Developer machine setup | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Developer machine setup | RudderStack Docs",
  "description": "Set up RudderStack in your development environment.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/segment/",
  "markdown": "# Segment source | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Segment source | RudderStack Docs",
  "description": "Ingest event data from Segment into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/canny/",
  "markdown": "# Canny source | RudderStack Docs\n\nIngest your event data from Canny into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[Canny](https://canny.io/) is a customer feedback management tool which captures, organizes, and analyzes product feedback in one place to help you make informed product decisions.\n\nThis guide will help you set up Canny as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Canny source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Canny**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Canny source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![Canny source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/canny-2.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/canny-2.webp)\n\n4.  Log into your [Canny account](https://canny.io/login). In the top-right side, select the **Settings** option under your profile followed by **API & Webhooks**.\n5.  Enter the **Webhook URL** under **Webhooks** section:\n\n[![Canny source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/webhook-url-canny.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/webhook-url-canny.webp)\n\n6.  Finally, click **Add**.\n\n## Event transformation\n\nRudderStack ingests the Canny events after converting them into the RudderStack event format. It also maps the following properties from the Canny event payload to the RudderStack properties:\n\n| Canny property | RudderStack property | Notes |\n| --- | --- | --- |\n| `created` | `timestamp`,`originalTimestamp` | \\-  |\n| `object` | `properties` | RudderStack excludes `author`/`voter` from the properties. |\n| `objectType` | `properties.objectType` | \\-  |\n| `type` | `event` | \\-  |\n| `object.author` | `context.traits` | RudderStack excludes `userId` and `id`. |\n| `object.author.userId` | `userId` | \\-  |\n| SHA-256 hash of `object.author.email` | `anonymousId` | Only if `userId` is not present |\n| SHA-256 hash of `object.voter.email` | `anonymousId` | Only if `userId` is not present **and** `type` is `vote.created`/`vote.deleted` |\n| `object.voter.userId` | `userId` | Only if `type` is `vote.created`/`vote.deleted` |\n| `object.voter.id` | `context.externalId[0].value` | Only if `type` is `vote.created`/`vote.deleted` |\n| `cannyUserId` | `context.externalId[0].type` | \\-  |\n| `object.author.id` | `context.externalId[0].id` | \\-  |\n\nCanny supports ingesting the following events:\n\n| Canny events | Description |\n| --- | --- |\n| `post.created` | Occurs when a new post is created. |\n| `post.deleted` | Occurs when a post is deleted. |\n| `post.jira_issue_linked` | Occurs when a Jira issue is linked to a post. |\n| `post.jira_issue_unlinked` | Occurs when a Jira issue is unlinked from a post. |\n| `post.status_changed` | Occurs when a post’s status is changed. |\n| `comment.created` | Occurs when a new comment is created. |\n| `comment.deleted` | Occurs when a comment is deleted. |\n| `vote.created` | Occurs when a user votes on a post. |\n| `vote.deleted` | Occurs when a user unvotes on a post. |\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from Canny source and creates the resulting payload.\n\nA sample payload sent by Canny is shown below:\n\n```\n{\n    \"created\": \"2022-07-28T10:52:46.294Z\",\n    \"object\": {\n        \"author\": {\n            \"created\": \"2022-07-15T11:16:32.648Z\",\n            \"email\": \"alex@example.com\",\n            \"id\": \"1hKOmRA4el9Zt1WSfVJIVo4GRlm\",\n            \"isAdmin\": true,\n            \"name\": \"Alex Keener\",\n            \"url\": \"https://rudder.canny.io/admin/users/alex-keener\",\n            \"userID\": null\n        },\n        \"board\": {\n            \"created\": \"2022-07-25T12:11:19.895Z\",\n            \"id\": \"VJIVo4GRlm\",\n            \"name\": \"features\",\n            \"postCount\": 13,\n            \"url\": \"https://rudder.canny.io/admin/board/features\"\n        },\n        \"by\": null,\n        \"category\": null,\n        \"commentCount\": 0,\n        \"created\": \"2022-07-28T10:52:46.172Z\",\n        \"customFields\": [{\n            \"id\": \"62e1382\",\n            \"name\": \"John\",\n            \"value\": \"123\"\n        }],\n        \"details\": \"Array of images\",\n        \"eta\": null,\n        \"id\": \"62e26a\",\n        \"imageURLs\": [\n            \"https://canny.io/images/6371453a825c79351c52a6063c3af476.jpg\",\n            \"https://canny.io/images/47db6ee5035bfb45ea87a74f2eb17928.jpg\"\n        ],\n        \"owner\": null,\n        \"score\": 1,\n        \"status\": \"open\",\n        \"tags\": [],\n        \"title\": \"Custom Fields Testing\",\n        \"url\": \"https://rudder.canny.io/admin/board/features/p/custom-fields-testing\"\n    },\n    \"objectType\": \"post\",\n    \"type\": \"post.created\"\n}\n```\n\nRudderStack transforms the above payload into the following payload:\n\n```\n{\n    \"anonymousId\": \"d6a9d06e8a464324d448003ff0467d971a55ca2950e11fc51faaec4e2850ecc6\",\n    \"event\": \"post.created\",\n    \"integrations\": {\n        \"Canny\": false\n    },\n    \"context\": {\n        \"library\": {\n            \"name\": \"unknown\",\n            \"version\": \"unknown\"\n        },\n        \"integration\": {\n            \"name\": \"Canny\",\n            \"version\": \"1.0.0\"\n        },\n        \"traits\": {\n        \"created\": \"2022-07-15T11:16:32.648Z\",\n        \"email\": \"alex@example.com\",\n        \"isAdmin\": true,\n        \"name\": \"Alexx Keener\",\n        \"url\": \"https://rudder.canny.io/admin/users/alex-keener\"\n      },\n        \"externalId\": [{\n            \"type\": \"cannyUserId\",\n            \"id\": \"1hKOmRA4el9Zt1WSfVJIVo4GRlm\"\n        }]\n    },\n    \"timestamp\": \"2022-07-28T10:52:46.294Z\",\n    \"originalTimestamp\": \"2022-07-28T10:52:46.294Z\",\n    \"type\": \"track\",\n    \"properties\": {\n        \"board\": {\n            \"created\": \"2022-07-25T12:11:19.895Z\",\n            \"id\": \"VJIVo4GRlm\",\n            \"name\": \"features\",\n            \"postCount\": 13,\n            \"url\": \"https://rudder.canny.io/admin/board/features\"\n        },\n        \"by\": null,\n        \"category\": null,\n        \"commentCount\": 0,\n        \"created\": \"2022-07-28T10:52:46.172Z\",\n        \"customFields\": [{\n            \"id\": \"62e1382\",\n            \"name\": \"abc\",\n            \"value\": \"123\"\n        }],\n        \"details\": \"Array of images\",\n        \"eta\": null,\n        \"id\": \"62e26a\",\n        \"imageURLs\": [\n            \"https://canny.io/images/6371453a825c79351c52a6063c3af476.jpg\",\n            \"https://canny.io/images/47db6ee5035bfb45ea87a74f2eb17928.jpg\"\n        ],\n        \"objectType\": \"post\",\n        \"owner\": null,\n        \"score\": 1,\n        \"status\": \"open\",\n        \"tags\": [],\n        \"title\": \"Custom Fields Testing\",\n        \"url\": \"https://rudder.canny.io/admin/board/features/p/custom-fields-testing\"\n    }\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Canny source | RudderStack Docs",
  "description": "Ingest your event data from Canny into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/reverse-etl/start-stop-syncs/",
  "markdown": "# Start and Stop Reverse ETL Syncs\n\nStart, stop, and trigger a Reverse ETL sync manually.\n\n* * *\n\n*     3 minute read  \n    \n\nWhen you [set up a Reverse ETL connection](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/), RudderStack performs a full sync the first time, that is, it syncs all the data from the source. Subsequently, it incrementally syncs any new data since the last sync according to the [sync schedule](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/#schedule-syncs), or whenever you press the **Sync Now** button.\n\nRudderStack also lets you force a full data resync or stop an ongoing sync.\n\n## Start and stop syncs\n\nGo to the **Syncs** tab of your Reverse ETL connection and click **Sync Now** to start a new sync. As mentioned above, this new sync will be incremental in nature, that is, it syncs only the new data available in the warehouse since the last sync.\n\n[![Sync now option](https://www.rudderstack.com/docs/images/retl-sources/sync-now.webp)](https://www.rudderstack.com/docs/images/retl-sources/sync-now.webp)\n\nTo force a **full** data sync, choose the **Force Full Resync** option.\n\n[![Force full resync option](https://www.rudderstack.com/docs/images/retl-sources/force-full-sync.webp)](https://www.rudderstack.com/docs/images/retl-sources/force-full-sync.webp)\n\nTo stop a running sync, click the **Stop Now** button.\n\n[![Stop sync option](https://www.rudderstack.com/docs/images/retl-sources/stop-sync.webp)](https://www.rudderstack.com/docs/images/retl-sources/stop-sync.webp)\n\nIn the confirmation pop up, click **Stop Sync** to cancel and stop the sync.\n\n[![Stop sync confirmation](https://www.rudderstack.com/docs/images/retl-sources/stop-sync-confirmation.webp)](https://www.rudderstack.com/docs/images/retl-sources/stop-sync-confirmation.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note the following:\n> \n> *   Once you stop a sync, any data that RudderStack reads from the warehouse and is on the fly may not be stopped or dropped from being delivered to the destination. RudderStack only stops reading and sending any new data from the warehouse to the destination and prevents the sync from progressing.\n> *   For a very low number of deltas (new data since the last attempted sync), you may sometimes see a “0 deltas succeeded” after you stop the sync.\n> *   Once you cancel a sync, the behavior of the next sync depends on the [type](https://www.rudderstack.com/docs/sources/reverse-etl/faq/#what-is-the-difference-between-the-full-and-incremental-sync-types) of the cancelled sync. For example, if a cancelled sync is an incremental sync, then the next sync will be incremental too. Similarly, if the cancelled is a full sync, then the next sync will be a full sync.\n> *   RudderStack makes sure there is no data loss in the next sync as a result of the previous cancelled sync irrespective of the sync type (full/incremental) or [sync mode](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/)(upsert/mirror).\n\n## Drain behavior on sync cancellation\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This process is also applicable for scenarios where a Reverse ETL source is disabled or disconnected from a destination.\n\nWhenever you stop a Reverse ETL sync, there might be some events that are in the process of being delivered and need to be drained from the pipeline.\n\nThis is important to make sure the next sync is not affected and you don’t have to wait for the events already in pipeline to be delivered or failed.\n\nAfter you stop a sync, RudderStack automatically triggers this draining process in the background. The time taken for this process to complete depends on the amount of data. Hence, waiting for some time before triggering next sync is recommended.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Start and Stop Reverse ETL Syncs | RudderStack Docs",
  "description": "Start, stop, and trigger a Reverse ETL sync manually.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/shopify/",
  "markdown": "# Shopify Source | RudderStack Docs\n\nIngest your event data from Shopify into RudderStack.\n\n* * *\n\n*     10 minute read  \n    \n\n[Shopify](https://www.shopify.in/) is a popular ecommerce platform that gives you all tools to start, run, and grow your business effectively. It offers online retailers a variety of services around digital payments, marketing, product shipping, customer engagement and retention, and more.\n\nThis guide will help you set up Shopify as a source in RudderStack.\n\n## Setup overview\n\nSetting up the Shopify source involves two steps:\n\n*   [Configuring the Shopify source in RudderStack](#configuring-the-shopify-source-in-rudderstack)\n*   [Configuring the RudderStack app in your Shopify store](#configuring-the-rudderstack-app-in-your-shopify-store)\n\n## Configuring the Shopify source in RudderStack\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**.\n2.  From the list of **Event Streams** sources, select **Shopify**.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\n*   **Disable client-side identifier**: If enabled, RudderStack does not automatically track the client-side `identify` events by itself.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Enable this setting to set your own `userId` in the client-side events using RudderStack’s [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call.\n> \n> For example, when you enable this flag and call `rudderanalytics.identify('custom_userId')`, RudderStack sets `custom_userId` as the client-side user ID instead of the `userId` set by the RudderStack Shopify tracker.\n\nYour Shopify source is now configured. Go to the **Setup** tab and note the source **Write key**. This will be required later while configuring the RudderStack app on your Shopify store.\n\n[![Shopify source write key](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-source-write-key.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-source-write-key.webp)\n\n## Configuring the RudderStack app in your Shopify store\n\nTo complete the configuration, you need to add and configure the RudderStack app in your Shopify store. Follow these steps:\n\n1.  Go to your Shopify store’s [admin dashboard](https://accounts.shopify.com/store-login).\n2.  In the left sidebar, go to **Apps** > **Customize your store**:\n\n[![Customizing Shopify store](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-3.webp)\n\n3.  Then, search for RudderStack.\n\n[![RudderStack app search](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-4.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-4.webp)\n\n4.  In the search results, select the RudderStack app and click **Add app**. Alternatively, you can install the RudderStack app directly using this [link](https://apps.shopify.com/rudderstack).\n\n[![Add RudderStack app](https://www.rudderstack.com/docs/images/event-stream-sources/RS-Shopify-app.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/RS-Shopify-app.webp)\n\n5.  After installation, you should be able to see the app in the **Installed apps** section:\n\n[![Installed RudderStack app](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-5.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-5.webp)\n\n6.  Select the installed RudderStack app.\n7.  Enter the **Source Write Key** that you copied [above](#connection-settings) and your [RudderStack data plane URL](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url):\n\n[![Data plane URL and source write key](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-6.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-6.webp)\n\n8.  Finally, click **Submit**.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> You can update these fields later with a different write key and data plane URL.\n\n## Event tracking and transformation\n\nYou can track user events using [server-side](#tracking-server-side-events) and [client-side tracking](#tracking-client-side-events) supported by Shopify.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> **Identity stitching enhancement for client-side and server-side tracking**\n> \n> RudderStack internally performs identity stitching and sets the same `anonymousId` and [`sessionId`](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/) (generated automatically) for the same user in client-side and server-side events. You don’t need to take any action (like updating or reinstalling your RudderStack Shopify app) to use this feature.\n\n### Tracking server-side events\n\nRudderStack uses the Shopify-provided webhooks for tracking events on the server-side.\n\nThe following table details the supported Shopify events and their corresponding [topic](https://shopify.dev/api/admin-rest/2022-01/resources/webhook#:~:text=a%20custom%20storefront.-,Mandatory%20webhooks,-You%20don%27t%20create) mapping for `identify` calls:\n\n| Identify event name | Description | Subscribed Shopify topic |\n| --- | --- | --- |\n| `customers_create` | Customer was created. | `customers/create` |\n| `customers_update` | Customer was updated. | `customers/update` |\n| `customers_disabled` | Customer was disabled. | `customers/disable` |\n| `customers_enable` | Customer was enabled. | `customers/enable` |\n\nThe following table details the supported Shopify events and their corresponding [topic](https://shopify.dev/api/admin-rest/2022-01/resources/webhook#:~:text=a%20custom%20storefront.-,Mandatory%20webhooks,-You%20don%27t%20create) mapping for `track` calls:\n\n| Track event name | Description | Subscribed Shopify topic |\n| --- | --- | --- |\n| `checkout_delete` | Checkout was deleted. | `checkouts/delete` |\n| `checkout_update` | Checkout was updated. | `checkouts/update` |\n| `carts_update` | Cart was updated. | `cart/update` |\n| `fulfillments_create` | Fulfillment was created. | `fulfillments/create` |\n| `fulfillments_update` | Fulfillment was updated. | `fulfillments/update` |\n| `orders_create` | Order was created. | `orders/create` |\n| `orders_delete` | Order was deleted. | `orders/delete` |\n| `orders_cancelled` | Order was cancelled. | `orders/cancelled` |\n| `orders_fulfilled` | Order was fulfilled. | `orders/fulfilled` |\n| `orders_paid` | Order was paid. | `orders/paid` |\n| `orders_partially_fullfilled` | Order was partly fulfilled. | `orders/partially_fulfilled` |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> As of May 23, 2023, the `carts_create` event is deprecated. Instead, you can use the `carts_update` event that is fired whenever an update is made to a cart.\n\nRudderStack also supports the following [ecommerce events](https://www.rudderstack.com/docs/event-spec/ecommerce-events-spec/):\n\n| Ecommerce event name | Description | Subscribed Shopify topic |\n| --- | --- | --- |\n| `Checkout Started` | A new checkout was created. | `checkouts/create` |\n| `Order Updated` | Order was updated. | `orders/updated` |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Any other events flowing through RudderStack except the `track`, `identify`, and the above-mentioned ecommerce events are **discarded**.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack captures user-related information from the `traits` object of the event payload. The product-specific information present in the above resources in `line_items` is mapped to the `products` array in the payload. For more information on the RudderStack event payload nomenclature, see [Event Specification](https://www.rudderstack.com/docs/event-spec/standard-events/) and [Common Fields](https://www.rudderstack.com/docs/event-spec/standard-events/common-fields/).\n\n#### Required scopes\n\nThe RudderStack app requires the following [scopes](https://shopify.dev/api/usage/access-scopes) for tracking user events in the Shopify store:\n\n```\nread_checkouts, read_orders, read_customers, read_fulfillments, write_script_tags\n```\n\nThe below is an example of server-side event transformed by RudderStack:\n\n```\n{\n  \"anonymousId\": \"bb35ad42-d59b-405c-b311-2daf98671c9c\",\n  \"type\": \"identify\",\n  \"context\": {\n    \"integration\": {\n      \"name\": \"SHOPIFY\"\n    },\n    \"ip\": \"[::1]\",\n    \"sessionId\": \"57470820\",\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    }\n  },\n  \"integrations\": {\n    \"SHOPIFY\": true\n  },\n  \"messageId\": \"7cbc1a8c-597d-42f7-8a1e-a659700da011\",\n  \"originalTimestamp\": \"2022-01-03T12:34:08.876+05:30\",\n  \"receivedAt\": \"2022-01-03T12:34:04.763+05:30\",\n  \"request_ip\": \"[::1]\",\n  \"rudderId\": \"f31e31dd-00c2-4f77-96b5-0dd46839bc9c\",\n  \"sentAt\": \"2022-01-03T12:34:08.876+05:30\",\n  \"timestamp\": \"2021-12-29T09:45:20.000Z\",\n  \"traits\": {\n    \"acceptsMarketing\": false,\n    \"acceptsMarketingUpdatedAt\": \"2021-12-29T15:15:20+05:30\",\n    \"address\": {\n      \"address1\": \"6649 N\",\n      \"address2\": \"Blue Gum Street\",\n      \"city\": \"New Orleans\",\n      \"company\": \"Example Organization\",\n      \"country\": \"USA\",\n      \"country_code\": \"US\",\n      \"country_name\": \"USA\",\n      \"customer_id\": 5747017285820,\n      \"default\": true,\n      \"first_name\": \"Alex\",\n      \"id\": 6947581821116,\n      \"last_name\": \"Keener\",\n      \"name\": \"Alex Keener\",\n      \"phone\": \"8005550100\",\n      \"province\": \"Louisiana\",\n      \"province_code\": \"LA\",\n      \"zip\": \"00000\"\n    },\n    \"addressList\": [{\n      \"address1\": \"6649 N\",\n      \"address2\": \"Blue Gum Street\",\n      \"city\": \"New Orleans\",\n      \"company\": \"Example Organization\",\n      \"country\": \"USA\",\n      \"country_code\": \"US\",\n      \"country_name\": \"USA\",\n      \"customer_id\": 5747017285820,\n      \"default\": true,\n      \"first_name\": \"Alex\",\n      \"id\": 6947581821116,\n      \"last_name\": \"Keener\",\n      \"name\": \"Alex Keener\",\n      \"phone\": \"8005550100\",\n      \"province\": \"Louisiana\",\n      \"province_code\": \"LA\",\n      \"zip\": \"00000\"\n    }],\n    \"adminGraphqlApiId\": \"gid://shopify/Customer/5747017285820\",\n    \"currency\": \"USD\",\n    \"email\": \"alex@example.com\",\n    \"firstName\": \"Alex\",\n    \"lastName\": \"Keener\",\n    \"note\": \"\",\n    \"orderCount\": 0,\n    \"phone\": \"8005550100\",\n    \"smsMarketingConsent\": {\n      \"consent_collected_from\": \"SHOPIFY\",\n      \"consent_updated_at\": null,\n      \"opt_in_level\": \"single_opt_in\",\n      \"state\": \"not_subscribed\"\n    },\n    \"state\": \"disabled\",\n    \"tags\": \"\",\n    \"taxExempt\": false,\n    \"taxExemptions\": [],\n    \"totalSpent\": \"0.00\",\n    \"verifiedEmail\": true\n  },\n  \"userId\": \"5747017285820\"\n}\n```\n\n### Tracking client-side events\n\nFor tracking the client-side events, RudderStack inserts a JavaScript tracking code into every page of the respective Shopify store.\n\nNote that:\n\n*   RudderStack supports the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) event for every page visited on the Shopify store.\n*   It also supports `Registration Viewed` as a generic [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) event whenever the user views their account or registration page.\n*   RudderStack tracks the `Login Viewed` event **only** on the `account/login` page. It triggers the event if only if the user accesses this path.\n*   The following [ecommerce events](https://www.rudderstack.com/docs/event-spec/ecommerce-events-spec/) are also supported on client-side:\n\n| Event name | Description |\n| --- | --- |\n| `Cart Viewed` | User viewed the cart page. |\n| `Checkout Started` | User clicked on the buy button. |\n| `Product Added` | User added the product to the cart. |\n| `Product Clicked` | User clicked on a product. |\n| `Product List Viewed` | User viewed the product collections page. |\n| `Product Viewed` | User viewed a product page. |\n\nA sample client-side event transformed by RudderStack:\n\n```\n{\n  \"channel\": \"web\",\n  \"context\": {\n    \"app\": {\n      \"build\": \"1.0.0\",\n      \"name\": \"RudderLabs JavaScript SDK\",\n      \"namespace\": \"com.rudderlabs.javascript\",\n      \"version\": \"2.2.4\"\n    },\n    \"traits\": {},\n    \"sessionId\": \"23342112\",\n    \"library\": {\n      \"name\": \"RudderLabs JavaScript SDK\",\n      \"version\": \"2.2.4\"\n    },\n    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.80 Safari/537.36\",\n    \"os\": {\n      \"name\": \"\",\n      \"version\": \"\"\n    },\n    \"locale\": \"en-GB\",\n    \"screen\": {\n      \"density\": 2,\n      \"width\": 1440,\n      \"height\": 900,\n      \"innerWidth\": 1440,\n      \"innerHeight\": 185\n    },\n    \"campaign\": {},\n    \"page\": {\n      \"path\": \"/\",\n      \"referrer\": \"$direct\",\n      \"referring_domain\": \"\",\n      \"search\": \"\",\n      \"title\": \"rudderstack-store-final\",\n      \"url\": \"https://rudderstack-store-final.myshopify.com/\",\n      \"tab_url\": \"https://rudderstack-store-final.myshopify.com/\",\n      \"initial_referrer\": \"$direct\",\n      \"initial_referring_domain\": \"\"\n    }\n  },\n  \"type\": \"page\",\n  \"messageId\": \"0cd68548-8e0a-42d0-9745-c2a0b38092f2\",\n  \"originalTimestamp\": \"2022-02-22T05:08:51.357Z\",\n  \"anonymousId\": \"f4a8e9c1-b757-4565-a12c-0dd80619316d\",\n  \"userId\": \"\",\n  \"properties\": {\n    \"path\": \"/\",\n    \"referrer\": \"\",\n    \"search\": \"\",\n    \"title\": \"rudderstack-store-final\",\n    \"url\": \"https://rudderstack-store-final.myshopify.com/\",\n    \"category\": \"t\",\n    \"referring_domain\": \"\",\n    \"tab_url\": \"https://rudderstack-store-final.myshopify.com/\",\n    \"initial_referrer\": \"$direct\",\n    \"initial_referring_domain\": \"\"\n  },\n  \"integrations\": {\n    \"All\": true\n  },\n  \"category\": \"t\",\n  \"sentAt\": \"2022-02-22T05:08:51.357Z\"\n}\n```\n\n## Best practices\n\n### Provide login functionality\n\nShopify provides the store owners the capability to either make user login compulsory or allow guest checkout in their stores. However, it is a best practice to prompt users to log in onto your platform. That way, RudderStack can fetch the user details and provide you with meaningful event data corresponding to the user’s journey on your platform.\n\n### Support for client-side calls\n\nIt is highly recommended **not** to make any drastic changes to your store structure to preserve data integrity. If you do so, RudderStack may track incorrect calls or miss them entirely, owing to the disparity between URL and triggered event.\n\nNote the following additional details for ecommerce events tracked by RudderStack:\n\n*   **Cart Viewed**: It is recommended to keep the URL in `[store-url]/cart` format.\n*   **Checkout Started**: This event can be triggered in any of the following ways:\n    *   When **Checkout** button is clicked on the `[store-url]/cart` page.\n    *   When **Buy it Now** button is clicked on the product description page.\n    *   Using the pop-ups when adding a product.\n*   **Product Added**: This event is triggered when the **Add to Cart** button is clicked on a product description page with `[store-url]/products/product_name` format.\n*   **Product Clicked**: This event is triggered when you click a product entry on any page in the store.\n*   **Product List Viewed**: This event is triggered when user sees a product on a page.\n*   **Product Viewed**: This event is triggered when a product’s description page in `[store-url]/products/product_name` format is opened. It is an indicative of the product listing page being viewed.\n\n### Event listener conditions for Shopify tracker\n\n| Event | Code | Example |\n| --- | --- | --- |\n| Product Added | `form[action=\"/cart/add\"] [type=\"submit\"]`<br><br>`form` element with `action=\"/cart/add\"` and `type = \"submit\"` | `<form action= \"/cart/add\" class=”shopify-form”>`  <br>`<button type = \"submit\" class = “shopify-addToCart”>Add To Cart </button>`  <br>`</form>` |\n| Product Clicked | `$(\"a\").filter((a, b) => b.href.indexOf(\"/products\") > -1)`<br><br>Above code runs through the whole HTML looking for anchor tags with `href` having `/products`. | `<a href=\"/products/product1\">Product 1</a>` |\n| Product List Viewed | [Code](https://github.com/rudderlabs/rudder-shopify-tracker/blob/6d6dafc9c6bf255613cc9697f7ab645e83315937/deviceModeInit.js#L202)<br><br>Above code checks the whole HTML for anchor tags with `href` having `/products` and an `img` tag either at the parent or their sibling level. | \\-  |\n| Checkout Started | `form[action=\"/cart/add\"] [type=\"button\"]` and check for `checkout` or `buy` keywords in the button.<br><br>`form` element with `action=\"/cart/add\"` and `type = \"button\"` | `<form action= \"/cart/add\" class=”shopify-form”>`  <br>`<button type = \"button\" class = “shopify-addToCart”>Buy Now</button>`  <br>`</form>` |\n\n## FAQ\n\n#### I’m getting a Registration Failed/Updated Failed error when I enter the data plane URL and the write key. What should I do?\n\nWhen [configuring the RudderStack app in your Shopify store](#configuring-the-rudderstack-app-in-your-shopify-store), you need to enter your RudderStack data plane URL and the source write key obtained while [setting up the Shopify source in RudderStack](#configuring-the-shopify-source-in-rudderstack).\n\n[![Data plane URL and source write key](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-6.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-6.webp)\n\nIf you get a **Registrated Failed** or **Update Failed** error after entering the credentials, uninstall and reinstall the RudderStack app in your Shopify store and try again.\n\n#### Where can I find the RudderStack data plane URL?\n\nYou can find the data plane URL in the home page of your [RudderStack dashboard](https://app.rudderstack.com/):\n\n[![RudderStack data plane URL](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-data-plane-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/shopify-data-plane-url.webp)\n\n#### My app is behaving unexpectedly and no event is flowing. What should I do?\n\nYou can try deleting and reinstalling the app. If that does not work, you can [contact us](mailto:docs@rudderstack.com).\n\n#### How to track events from multiple stores?\n\nYou need to have the app installed and configured properly in each of the stores.\n\n#### Why does RudderStack not load the client-side SDK on all the Shopify store pages?\n\nIf you customize the page paths for a standard Shopify store, RudderStack will not be able to track user activity on them. This is a limitation of RudderStack’s client-side tracking capabilities. Hence, it is highly recommended **not** to make any drastic changes to your store structure.\n\n#### What is the difference between `browser_ip` and `requestIP`?\n\nThe `requestIP` is the IP address of the Shopify backend server which pushes data to RudderStack, while `browser_ip` is the user’s IP address.\n\n#### Is it possible to collect additional/custom fields from Shopify?\n\nYes, it is possible to collect additional/custom fields from Shopify by using `identify` and `track` calls.\n\nNote that the `rudderanalytics` object of JS SDK (for example, `rudderanalytics.track()` or `rudderanalytics.identify()`) is already loaded on the `window` object of the store where the app is installed. Hence, the `rudderanalytics` object should not be loaded separately to collect additional/custom fields from Shopify.\n\n#### How does RudderStack set the `userId`?\n\nRudderStack fetches Shopify’s `customerId` and uses it as `userId`.\n\n#### Does RudderStack persist `anonymousId` for future calls?\n\nRudderStack persists `anonymousId` throughout a user’s journey (from visiting the store to placing an order). After the user places the order, a new journey starts; RudderStack then sets a new `anonymousId` and persists it throughout that journey.\n\nAfter placing an order, the user/admin may sometimes need to update it. Hence, RudderStack persists the `anonymousId` for any post-order updates for up to 1 hour (tracked as server-side events).\n\n#### How can I differentiate between the data collected from Shopify Cloud (Webhooks) and Shopify Device (web device mode)?\n\nYou can differentiate between the data collected in cloud and device mode by looking at the signature in payload:\n\n*   In the [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode), RudderStack subscribes to the Shopify webhooks to consume data from Shopify. The data collected from Shopify cloud has the following signature in the payload:\n\n```\ncontext \": {....\n\"library\": {\n  \"name\": \"RudderStack Shopify Cloud\",\n  \"version\": \"1.0.0\"\n  }\n}\n```\n\n*   In [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode), RudderStack loads its JavaScript SDK on every Shopify store page for web tracking. The data collected from the Shopify device mode has the following signature in the payload:\n\n```\n\"context\": {\n  ....\n  \"library\": {\n    \"name\": \"RudderLabs JavaScript SDK\",\n    \"version\": \"2.4.2\"\n  }\n}\n```\n\n#### Do I need to update or reinstall the RudderStack app in Shopify to use the identity stitching feature?\n\nNo, you do not need to take any action to use the [identity stitching](#event-tracking-and-transformation) or [Skip `identify` call](#connection-settings) enhancements.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Shopify Source | RudderStack Docs",
  "description": "Ingest your event data from Shopify into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/clickup/",
  "markdown": "# ClickUp source | RudderStack Docs\n\nIngest your event data from ClickUp into RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[ClickUp](https://clickup.com/) is a productivity tool that lets you set up project workflows and tasks, and enable smooth cross-team collaboration.\n\nYou can use RudderStack’s [Webhook](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/webhook-source/) source to capture real-time updates from your ClickUp workspace and send that data to your preferred downstream destinations.\n\n## Getting started\n\nFollow these steps to set up a ClickUp webhook source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Webhook**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![ClickUp source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/clickup-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/clickup-webhook-url.webp)\n\n4.  Next, go to your [ClickUp dashboard](https://app.clickup.com/) and open the ClickUp [space](https://help.clickup.com/hc/en-us/articles/6309466958103-Spaces-overview) of your choice.\n5.  From the top-right side of the dashboard, click the **Automate** option and select **Add Automation**.\n\n[![ClickUp add automation](https://www.rudderstack.com/docs/images/event-stream-sources/clickup-add-automation.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/clickup-add-automation.webp)\n\n6.  Select the relevant ClickUp trigger from the dropdown under **When** for the automation to happen.\n7.  In the **Then** section, select **Call webhook** from the dropdown.\n8.  Enter the webhook URL copied in step 3, as shown below. You can also add specific fields in the event sent to the webhook.\n\n[![ClickUp source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/clickup-configure-automation.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/clickup-configure-automation.webp)\n\n9.  Finally, click **Create**.\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from ClickUp source and creates the resulting payload.\n\nA sample payload ingested by RudderStack when you create a new task in ClickUp is shown below:\n\n```\n{\n  \"event\": \"taskCreated\",\n  \"history_items\": [{\n      \"id\": \"2800763136717140857\",\n      \"type\": 1,\n      \"date\": \"1642734631523\",\n      \"field\": \"status\",\n      \"parent_id\": \"162641062\",\n      \"data\": {\n        \"status_type\": \"open\"\n      },\n      \"source\": null,\n      \"user\": {\n        \"id\": 183,\n        \"username\": \"Alex\",\n        \"email\": \"alex@example.com\",\n        \"color\": \"#7b68ee\",\n        \"initials\": \"A\",\n        \"profilePicture\": null\n      },\n      \"before\": {\n        \"status\": null,\n        \"color\": \"#000000\",\n        \"type\": \"removed\",\n        \"orderindex\": -1\n      },\n      \"after\": {\n        \"status\": \"to do\",\n        \"color\": \"#f9d900\",\n        \"orderindex\": 0,\n        \"type\": \"open\"\n      }\n    },\n    {\n      \"id\": \"2800763136700363640\",\n      \"type\": 1,\n      \"date\": \"1642734631523\",\n      \"field\": \"task_creation\",\n      \"parent_id\": \"162641062\",\n      \"data\": {},\n      \"source\": null,\n      \"user\": {\n        \"id\": 183,\n        \"username\": \"Alex\",\n        \"email\": \"alex@example.com\",\n        \"color\": \"#7b68ee\",\n        \"initials\": \"A\",\n        \"profilePicture\": null\n      },\n      \"before\": null,\n      \"after\": null\n    }\n  ],\n  \"task_id\": \"1vj37mc\",\n  \"webhook_id\": \"7fa3ec74-69a8-4530-a251-8a13730bd204\"\n}\n```\n\nRudderStack transforms the above payload into the following [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) payload:\n\n```\n{\n  \"type\": \"track\",\n  \"event\": \"webhook_source_event\",\n  \"properties\": {\n    \"event\": \"taskCreated\",\n    \"history_items\": [{\n        \"id\": \"2800763136717140857\",\n        \"type\": 1,\n        \"date\": \"1642734631523\",\n        \"field\": \"status\",\n        \"parent_id\": \"162641062\",\n        \"data\": {\n          \"status_type\": \"open\"\n        },\n        \"source\": null,\n        \"user\": {\n          \"id\": 183,\n          \"username\": \"Alex\",\n          \"email\": \"alex@example.com\",\n          \"color\": \"#7b68ee\",\n          \"initials\": \"A\",\n          \"profilePicture\": null\n        },\n        \"before\": {\n          \"status\": null,\n          \"color\": \"#000000\",\n          \"type\": \"removed\",\n          \"orderindex\": -1\n        },\n        \"after\": {\n          \"status\": \"to do\",\n          \"color\": \"#f9d900\",\n          \"orderindex\": 0,\n          \"type\": \"open\"\n        }\n      },\n      {\n        \"id\": \"2800763136700363640\",\n        \"type\": 1,\n        \"date\": \"1642734631523\",\n        \"field\": \"task_creation\",\n        \"parent_id\": \"162641062\",\n        \"data\": {},\n        \"source\": null,\n        \"user\": {\n          \"id\": 183,\n          \"username\": \"Alex\",\n          \"email\": \"alex@example.com\",\n          \"color\": \"#7b68ee\",\n          \"initials\": \"A\",\n          \"profilePicture\": null\n        },\n        \"before\": null,\n        \"after\": null\n      }\n    ],\n    \"task_id\": \"1vj37mc\",\n    \"webhook_id\": \"7fa3ec74-69a8-4530-a251-8a13730bd204\"\n  },\n  \"anonymousId\": \"12e90bef-e7c6-44c7-a09a-b9b5478630f7\"\n}\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To send this data to the downstream destinations, you need to transform it into a destination-specific format using RudderStack’s [Transformations](https://www.rudderstack.com/docs/transformations/overview/) feature. Refer to the below [use case](#use-case) for more information.\n\n## Use case\n\nConsider a scenario where a new contact is automatically created in HubSpot whenever a new assignee is added to a ClickUp task.\n\nTo do this, set up a ClickUp source by following the steps in the [Getting started](#getting-started) section above. Then, connect this source to the [HubSpot destination](https://www.rudderstack.com/docs/destinations/streaming-destinations/hubspot/).\n\nOnce the connection is set up, RudderStack automatically receives a payload from ClickUp whenever a new assignee is added to a ClickUp task. It then transforms the payload in the following format:\n\n```\n{\n  \"anonymousId\": \"38c5a078-c1ea-4024-9628-7f8971aeb915\",\n  \"event\": \"webhook_source_event\",\n  \"messageId\": \"cbd5e04a-8e0b-4bf9-959d-26c4d8e455b0\",\n  \"properties\": {\n    \"event\": \"taskAssigneeUpdated\",\n    \"history_items\": [{\n      \"after\": {\n        \"color\": \"#02579b\",\n        \"email\": \"alex@example.com\",\n        \"id\": 61217234,\n        \"initials\": \"A\",\n        \"profilePicture\": null,\n        \"username\": \"Alex\"\n      },\n      \"data\": {},\n      \"date\": \"1663044688239\",\n      \"field\": \"assignee_rem\",\n      \"id\": \"3141509348132974740\",\n      \"parent_id\": \"175476135\",\n      \"source\": null,\n      \"type\": 1,\n      \"user\": {\n        \"color\": \"#536cfe\",\n        \"email\": \"jane@doe.com\",\n        \"id\": 55300044,\n        \"initials\": \"JD\",\n        \"profilePicture\": null,\n        \"username\": \"Jane Doe\"\n      }\n    }],\n    \"task_id\": \"2rc0nvx\",\n    \"webhook_id\": \"3425a884-4f24-4d81-a373-1991c2d20743\"\n  },\n  \"rudderId\": \"0240a617-9492-47f8-ac5c-c842ab2cd9f4\",\n  \"type\": \"track\"\n}\n```\n\nTo automatically add a new contact in HubSpot for this event, you need to add the following user transformation and [connect it to your HubSpot destination](https://www.rudderstack.com/docs/transformations/overview/#connecting-transformation-to-a-destination):\n\n```\nexport function transformEvent(event, metadata) {\n  let indetifyEvent;\n\n  if (event.properties.event === \"taskAssigneeUpdated\") {\n    indetifyEvent = {\n      type: \"identify\",\n      userId: event.properties?.history_items[0]?.after?.id,\n      traits: {\n        email: event.properties?.history_items[0]?.after?.email\n      }\n    }\n  }\n  return indetifyEvent;\n}\n```\n\nRudderStack sends the following transformed event payload to HubSpot:\n\n```\n{\n  \"version\": \"1\",\n  \"type\": \"REST\",\n  \"method\": \"POST\",\n  \"endpoint\": \"https://api.hubapi.com/contacts/v1/contact/batch/\",\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer ******2b27\"\n  },\n  \"params\": {},\n  \"body\": {\n    \"JSON\": {},\n    \"JSON_ARRAY\": {\n      \"batch\": \"[{\\\"email\\\":\\\"alex@example.com\\\",\\\"properties\\\":[]}]\"\n    },\n    \"XML\": {},\n    \"FORM\": {}\n  },\n  \"files\": {}\n}\n```\n\nThe above payload then creates the contact in HubSpot.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "ClickUp source | RudderStack Docs",
  "description": "Ingest your event data from ClickUp into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-setup/",
  "markdown": "# Control plane setup | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Control plane setup | RudderStack Docs",
  "description": "Set up your RudderStack Open Source control plane to manage your connections.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/",
  "markdown": "# Reverse ETL Sync Modes | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Reverse ETL Sync Modes | RudderStack Docs",
  "description": "Learn about different sync modes to send data from reverse ETL sources to your destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/get-started/rudderstack-open-source/sending-test-events/",
  "markdown": "# Verify installation | RudderStack Docs\n\nVerify your RudderStack installation by sending test events.\n\n* * *\n\n*     3 minute read  \n    \n\nBefore using RudderStack, it is highly recommended to verify that your installation works as expected by sending some test events. You can use any of the following approaches:\n\n*   [Use the bundled shell script](#bundled-shell-script)\n*   [Use RudderStack’s HTTP API](#rudderstack-http-api)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This guide assumes that you have already installed and set up RudderStack in your preferred environment.\n\n## Bundled shell script\n\nThe [`rudder-server` GitHub repository](https://github.com/rudderlabs/rudder-server) contains a bundled shell script that generates test events. Clone the repository by running the following command:\n\n```\ngit clone https://github.com/rudderlabs/rudder-server.git\n```\n\nThen, follow the steps below to send test events.\n\n### Step 1: Get source write key\n\n#### RudderStack Open Source dashboard\n\nIf you have signed up for [RudderStack open source](https://app.rudderstack.com/signup?type=opensource), follow these steps:\n\n1.  Log in to your RudderStack Open Source dashboard.\n2.  Set up a source and connect it to a destination.\n3.  You can find the write key in the **Setup** tab of your source.\n\n[![RudderStack source write key](https://www.rudderstack.com/docs/images/rudderstack-open-source/write-key.webp)](https://www.rudderstack.com/docs/images/rudderstack-open-source/write-key.webp)\n\n#### Self-hosted control plane\n\nIf you are self-hosting the control plane using [Control Plane Lite](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/), follow these steps:\n\n1.  Set up a source and connect it to a destination.\n2.  Note the write key for the source:\n\n[![Control plane lite source write Key](https://www.rudderstack.com/docs/images/rudderstack-open-source/control-plane-lite-source-writekey.webp)](https://www.rudderstack.com/docs/images/rudderstack-open-source/control-plane-lite-source-writekey.webp)\n\n### Step 2: Send test events\n\nTo send test events, follow the steps in the sections below depending on your preferred setup:\n\n#### Local setup\n\n1.  Navigate to the folder where RudderStack is installed.\n2.  Run the following command:\n\n```\n./scripts/generate-event <WRITE_KEY> <DATA_PLANE_URL>/v1/batch\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Replace `<WRITE_KEY>` and `<DATA_PLANE_URL>` with your source write key and [data plane URL](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/faq/#data-plane-url).\n\n3.  Go to your source in the RudderStack Open Source dashboard and check the **Live Events** tab to verify if the events are delivered.\n\n[![Source live events](https://www.rudderstack.com/docs/images/rudderstack-open-source/source-live-events.webp)](https://www.rudderstack.com/docs/images/rudderstack-open-source/source-live-events.webp)\n\nAn example is shown below:\n\n[![Test Event](https://www.rudderstack.com/docs/images/rudderstack-open-source/test-event.webp)](https://www.rudderstack.com/docs/images/rudderstack-open-source/test-event.webp)\n\n#### Docker setup\n\n1.  Run the following command:\n\n```\ndocker exec -ti \\\n    <rudder-server-running-container-id> \\\n    ./scripts/generate-event <WRITE_KEY> <DATA_PLANE_URL>/v1/batch\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Replace `<WRITE_KEY>` and `<DATA_PLANE_URL>` with your source write key and [data plane URL](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/faq/#data-plane-url).\n\n2.  Go to your source in the RudderStack Open Source dashboard and check the **Live Events** tab to verify if the events are delivered.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Unlike RudderStack Open Source, the control plane set up using [Control Plane Lite](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/) does not support the **Live Events** feature.\n\nIf you supply an invalid source write key or data plane URL, you will get the following error:\n\n[![Test Event error](https://www.rudderstack.com/docs/images/rudderstack-open-source/test-event-error.webp)](https://www.rudderstack.com/docs/images/rudderstack-open-source/test-event-error.webp)\n\n## RudderStack HTTP API\n\nTo send test events using the [RudderStack HTTP API](https://www.rudderstack.com/docs/api/http-api/), follow these steps:\n\n1.  Import this [Postman collection](https://www.getpostman.com/collections/480307c55ad2b9dd4e27).\n2.  Edit the variables `source_write_key` and `data_plane_url` in this collection with your source write key and [data plane URL](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/faq/#data-plane-url).\n\nRudderStack uses **Basic Authentication** for authenticating all HTTP requests. The HTTP Basic Authentication requires a user name and password, where:\n\n*   Username is the `source_write_key`.\n*   Password is an empty string (`\"\"`).\n\n3.  Send the test API requests.\n4.  Go to your source in the RudderStack Open Source dashboard and check the **Live Events** tab to verify if the events are delivered.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Verify installation | RudderStack Docs",
  "description": "Verify your RudderStack installation by sending test events.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-unity-sdk/",
  "markdown": "# Unity SDK | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Unity SDK | RudderStack Docs",
  "description": "Use the RudderStack Unity SDK to send event data from your games to various destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/signl4/",
  "markdown": "# SIGNL4 source | RudderStack Docs\n\nIngest your event data from SIGNL4 into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[SIGNL4](https://www.signl4.com/) is a tool for instant mobile alerting. It generates real-time alerts to inform teams about any incidents and automatically delivers critical information to the right people at the right time.\n\n## Getting started\n\nFollow these steps to set up your SIGNL4 source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **SIGNL4**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your SIGNL4 source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![SIGNL4 source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/signl4-source.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/signl4-source.webp)\n\n4.  Log into your [SIGNL4 account](https://connect.signl4.com/).\n5.  Go to **Teams** > **Developer**. Add a name and the **Webhook URL** under **Outbound Webhooks**:\n\n[![SIGNL4 source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/signl4-source-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/signl4-source-webhook.webp)\n\n6.  Finally, click **Add**.\n\n## Event transformation\n\nSIGNL4 acts as a webhook source and ingests all events mentioned in [SIGNL4 documentation](https://www.signl4.com/outbound-webhooks/#N10).\n\nEach event has a unique code present in the `eventType` property. The event name is mapped on the basis of this code, as explained below:\n\n| `eventType` code | Event name | SIGNL4 action |\n| --- | --- | --- |\n| 200 | New Alert Created | New alert created in SIGNL4. |\n| 201 | Alert Confirmed/Alert Resolved | Alert confirmed by the user. Alert resolved if the statusCode is 4. |\n| 202 | Alert Escalated | Alert escalated when not confirmed in specified time. |\n| 203 | Alert Annotated | Message/Annotation sent by the receiver for an alert. |\n| 300 | Duty Period Started | Duty period started for a team. |\n| 301 | Duty Period Ended | Duty period ended for a team. |\n| 302 | Somebody Punched-In | When a team member comes on duty. |\n| 303 | Somebody Punched-Out | When a team member goes off duty. |\n| Any other | Alert Updated | Default behavior. |\n\nRudderStack ingests the SIGNL4 events after converting them into the RudderStack event format. It also maps the following properties from the SIGNL4 event payload to the RudderStack properties:\n\n| SIGNL4 property | RudderStack property |\n| --- | --- |\n| `eventType` | `event` |\n| `eventRaisedUtc` | `originalTimestamp` |\n| `user.id` | `context.externalId` |\n| `id` | `messageId` |\n| `team.id` | `properties.team.id` |\n| `annotation.message` | `properties.annotation.message` |\n| `annotation.id` | `properties.annotation.id` |\n| `alert.eventId` | `properties.alert.eventId` |\n| `alert.id` | `properties.alert.id` |\n| `alert.externalEventId` | `properties.alert.externalEventId` |\n| `alert.statusCode` | `properties.alert.statusCode` |\n| `user.username` | `context.traits.name` |\n| `user.mailaddress` | `context.traits.email` |\n| `subscription.id` | `properties.subscription.id` |\n| `alert.acknowledgedUserIds` | `properties.alert.acknowledgedUserIds` |\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from SIGNL4 source and creates the resulting payload.\n\nA sample payload sent by SIGNL4 is shown below:\n\n```\n{\n  \"eventType\": 203,\n  \"eventRaisedUtc\": \"2018-04-17T15:00:32Z\",\n  \"subscription\": {\n    \"id\": \"1578ebd9-0a27-44ab-bc8e-52cd7d32e81d\"\n  },\n  \"user\": {\n    \"username\": \"Alex\",\n    \"mailaddress\": \"alex@signl4.com\",\n    \"id\": \"f0bd5063-9588-51cf-b3d9-94e5647dedc5\"\n  },\n  \"alert\": {\n    \"statusCode\": 0,\n    \"eventId\": \"2518783235949759942_fbc7b4a4-badd-47b8-9e1d-702fb6a1a0b2\",\n    \"externalEventId\": \"INC091210\",\n    \"id\": \"2518783235958846071_4e2dfab2-4717-42bc-8d37-8682402309c2\"\n  },\n  \"annotation\": {\n    \"message\": \"OK, I'll take care about it.\",\n    \"id\": \"2518783235661483318_99ebffe0-1b90-40ef-990a-fbd842484761\"\n  },\n  \"id\": \"141c0f88-7831-4d5e-b055-f6e83c269770\"\n}\n```\n\nRudderStack transforms the above payload into the following [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) payload:\n\n```\n{\n  \"type\": \"track\",\n  \"event\": \"Alert Annotated\",\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"traits\": {\n      \"name\": \"Alex\",\n      \"email\": \"alex@signl4.com\"\n    },\n    \"externalId\": [{\n      \"type\": \"signl4UserId\",\n      \"id\": \"f0bd5063-9588-51cf-b3d9-94e5647dedc5\",\n    }],\n    \"integration\": {\n      \"name\": \"SIGNL4\"\n    }\n  },\n  \"messageId\": \"141c0f88-7831-4d5e-b055-f6e83c269770\",\n  \"originalTimestamp\": \"2017-09-01T08:11:37.000Z\",\n  \"properties\": {\n    \"alert.statusCode\": 0,\n    \"alert.eventId\": \"2518783235949759942_fbc7b4a4-badd-47b8-9e1d-702fb6a1a0b2\",\n    \"alert.externalEventId\": \"INC091210\",\n    \"alert.id\": \"2518783235958846071_4e2dfab2-4717-42bc-8d37-8682402309c2\",\n    \"subscription.id\": \"183f8d00-3bb8-4636-9a8f-89d6af26374a\",\n    \"annotation.id\": \"2518783235661483318_99ebffe0-1b90-40ef-990a-fbd842484761\",\n    \"message\": \"OK, I'll take care of it.\"\n  },\n  \"anonymousId\": \"6f0a3dc76a335860e17fa1d8ab779742e2ca\",\n  \"integrations\": {\n    \"SIGNL4\": false\n  }\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "SIGNL4 source | RudderStack Docs",
  "description": "Ingest your event data from SIGNL4 into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/get-started/rudderstack-open-source/faq/",
  "markdown": "# RudderStack Open Source FAQ | RudderStack Docs\n\nTroubleshoot problems encountered while setting up and using RudderStack Open Source.\n\n* * *\n\n*     4 minute read  \n    \n\nFor questions and issues not listed in this guide, you can start a conversation in the [RudderStack Slack Community](https://rudderstack.com/join-rudderstack-slack-community).\n\n## General\n\n#### Why do I need to sign up to use RudderStack Open Source?\n\nSigning up for [RudderStack Open Source](https://app.rudderstack.com/signup?type=opensource) is the easiest way to set up and manage your data pipelines. RudderStack Open Source offers an intuitive dashboard that is only used for source-destination configuration. It also provides features like [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) for observability and debugging purposes and [Transformations](https://www.rudderstack.com/docs/transformations/overview/) to enhance your in-transit event data.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack does not persist any of your data.\n\nIf you do not wish to sign up for RudderStack Open Source and want to self-host your configurations, you can use the [Control Plane Lite](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/) utility.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   Control Plane Lite is now deprecated and does not work with the latest `rudder-server` versions (after v1.2).\n> *   Control Plane Lite does not support features like [Transformations](https://www.rudderstack.com/docs/transformations/overview/) and [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/).\n\n#### What is a workspace token? Where do I get it?\n\nThe workspace token is a unique identifier of your RudderStack workspace.\n\nTo get your workspace token, go to **Settings** > **Workspace**. The workspace token is present in the **General** tab.\n\n[![Workspace Token](https://www.rudderstack.com/docs/images/rs-cloud/workspace-token.webp)](https://www.rudderstack.com/docs/images/rs-cloud/workspace-token.webp)\n\nTo view the workspace token, click the show icon and enter the password associated with your RudderStack account.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> By default, the workspace token is hidden for security purposes. You must have [administrative privileges](https://www.rudderstack.com/docs/dashboard-guides/user-management/#organization-roles) to access the workspace token.\n\n## Data plane setup\n\n#### What is a data plane URL? Where do I get it?\n\nFor processing and routing your events, RudderStack requires a **data plane URL**. See [Data plane architecture](https://www.rudderstack.com/docs/resources/rudderstack-architecture/#data-plane-architecture) for more information.\n\nFor RudderStack Open Source, you are required to [set up your own data plane](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/data-plane-setup/). A data plane URL typically looks like `http:localhost:8080`, where `8080` is the port where your RudderStack data plane is hosted.\n\n#### How do I check the status of the data plane?\n\nThe format of the command to check your data plane status is:\n\n```\ncurl <DATA_PLANE_URL>/health\n```\n\nA sample command that checks the status of the data plane hosted at port `8080`:\n\n```\ncurl http://localhost:8080/health\n```\n\nYou will get the following output:\n\n```\n{\"server\":\"UP\", \"db\":\"UP\",\"acceptingEvents\":\"TRUE\",\"routingEvents\":\"TRUE\",\"mode\":\"NORMAL\",\"goroutines\":\"15364\", \"backendConfigMode\": \"API\", \"lastSync\":\"2020-12-01T04:20:33Z\", \"lastRegulationSync\":\"2020-11-30T21:40:27Z\"}\n```\n\n#### What are the Normal and Degraded modes when running the RudderStack server?\n\nThe RudderStack server (backend) supports two running modes:\n\n*   **Normal** (`\"mode\": \"NORMAL\"`): In this mode, the RudderStack server runs as expected and there are no issues.\n*   **Degraded** (`\"mode\": \"DEGRADED\"`): RudderStack enters the degraded mode if it keeps crashing while processing the events after a threshold restart number is reached. RudderStack still receives and stores the events in degraded mode but does not process them and route them to your specified destinations.\n\nFor more information on these modes, see [RudderStack High Availability](https://www.rudderstack.com/docs/user-guides/administrators-guide/high-availability/).\n\n#### Can I set up multiple instances of RudderStack data plane?\n\nSetting up multiple instances of RudderStack is not recommended. It can cause concurrent requests to your warehouse, leading to event failures and retries. It can also increase your costs in the case of data warehouses like Snowflake, BigQuery, etc.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> When sending events to your warehouse destinations using RudderStack Open Source, every node (data plane instance) runs the warehouse sync operations individually.\n\n#### While running `git submodule update`, I get this error:\n\n```\nPlease make sure you have the correct access rights and the repository exists.\nfatal: clone of 'git@github.com:rudderlabs/rudder-transformer.git' into submodule path '/home/ubuntu/rudder-server/rudder-transformer' failed\nFailed to clone 'rudder-transformer'. Retry scheduled.\nCloning into '/home/ubuntu/rudder-server/rudder-transformer'...\ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\n```\n\nVerify if you have correctly set the SSH keys in your GitHub account as they are used when cloning using the git protocol.\n\nFor more information, see this [Stack Overflow thread](https://stackoverflow.com/questions/25957125/git-submodule-permission-denied).\n\n#### How do I verify my RudderStack installation?\n\nYou can verify your RudderStack installation by sending test events and checking if they are delivered correctly. For more information, see [Verifying installation](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/sending-test-events/).\n\n#### My RudderStack setup keeps creating a new database automatically. What could be the reason?\n\nThis can happen if you have changed your [workspace token](https://www.rudderstack.com/docs/dashboard-guides/overview/#workspace-token). Also, ensure that the RudderStack server is running on the latest version.\n\n#### For Docker setup, is there a recommended size for the EC2 instance?\n\nA **c4.xlarge** or **c4.2xlarge** machine should work just fine for your Docker setup.\n\n#### I’m running RudderStack on Docker in a GCP VM instance. I upgraded the instance to have more CPU and now the RudderStack container is stuck on this message:\n\n```\nsh -c '/wait-for db:5432 -- /rudder-server'\n```\n\nThis message indicates that the RudderStack server is waiting on the PostgreSQL database dependency to be up and running. Verify if your PostgreSQL container is up.\n\n## Control plane setup\n\n#### I am using the Control Plane Lite to generate the `workspaceConfig.json` file. But when I import this file, I get the error:\n\n```\nTypeError: Cannot read property 'name' of undefined\"\n```\n\nThis issue can occur when you have some old data left in your browser’s local storage. Clear your browser cache and local storage and retry.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "RudderStack Open Source FAQ | RudderStack Docs",
  "description": "Troubleshoot problems encountered while setting up and using RudderStack Open Source.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-unity-sdk/v1/",
  "markdown": "# Unity SDK v1 | RudderStack Docs\n\nUse the RudderStack Unity SDK to send event data from your games to various destinations.\n\n* * *\n\n*     6 minute read  \n    \n\nSee the [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-unity) to get a more hands-on understanding of the SDK.\n\n## SDK setup requirements\n\nTo set up the RudderStack Unity SDK, the following prerequisites must be met:\n\n*   You need to set up a [RudderStack account](https://app.rudderstack.com/signup).\n*   Once signed up, [set up a Unity source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the dashboard. You should be able to see a **Write Key** for this source, as shown below:\n\n[![Unity source write key](https://www.rudderstack.com/docs/images/event-stream-sources/unity-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/unity-write-key-new.webp)\n\n*   You will also need a data plane URL. Refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) for more information on the data plane URL and where to find it.\n*   Finally, download and install the [Unity development kit](https://store.unity.com/download).\n\n## Installing the Unity SDK\n\nFollow these steps to integrate the RudderStack Unity SDK with your project:\n\n*   Download `rudder-sdk-unity.unitypackage` from our [GitHub repository](https://github.com/rudderlabs/rudder-sdk-unity/raw/master/SDK/rudder-sdk-unity.unitypackage).\n*   Import the downloaded package to your project. From the **Assets** menu, go to **Import Package** - **Custom Package…** as shown:\n\n[![Importing the downloaded package](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-2.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-2.webp)\n\n*   Select `rudder-sdk-unity.unitypackage` from the downloaded location and click **Open**:\n\n[![Selecting the Unity package for integration](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-3.webp)\n\n*   Click `Import` in the import popup as shown:\n\n[![Importing the Unity package](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-4.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-4.webp)\n\n## Initializing the RudderStack client\n\nTo initialize the RudderStack client, follow these steps:\n\n*   Add the `import` to all files where you wish to use `RudderClient` .\n\n*   Then, add the following code in the `Awake` method of your main `GameObject` Script:\n\n```\n// Critical for iOS Applications where multiple components are using SQLite\n// This has no effect for Android, but can be added as a safety check\nRudderClient.SerializeSqlite();\n\n// Build your config\nRudderConfigBuilder configBuilder = new RudderConfigBuilder()\n    .WithDataPlaneUrl(DATA_PLANE_URL);\n    .WithLogLevel(RudderLogLevel.VERBOSE)\n\n// get instance for RudderClient\nRudderClient rudderClient = RudderClient.GetInstance(\n    WRITE_KEY,\n    configBuilder.Build()\n);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you are building an iOS project, `RudderClient.SerializeSqlite()` is important to handle races with SQLite.\n\n## Configuring your RudderStack client\n\nYou can configure your client based on the following parameters using `RudderConfigBuilder`:\n\n| Parameter | Type | Description | Default value |\n| --- | --- | --- | --- |\n| `logLevel` | Integer | Controls how much of the log you want to see from the SDK. | `RudderLogLevel.INFO` |\n| `dataPlaneUrl` | String | Your data plane URL. | `https://hosted.rudderlabs.com` |\n| `flushQueueSize` | Integer | Number of events in a batch request to the RudderStack server. | `30` |\n| `dbThresholdCount` | Integer | Number of events to be saved in the `SQLite` database. Once the limit is reached, older events are deleted from the database. | `10000` |\n| `sleepcount` | Integer | Minimum waiting time to flush the events to the RudderStack server. The minimum value can be set to `1 second`. | `10 seconds` |\n| `configRefreshInterval` | Integer | The SDK will fetch the config from `dashboard` after the specified time. | `2 hours` |\n| `trackLifecycleEvents` | Boolean | Determines if the SDK will automatically capture the application lifecycle events. | `true` |\n| `recordScreenViews` | Boolean | Determines if the SDK will automatically capture the screen view events. | `false` |\n| `autoCollectAdvertId` | Boolean | Determines if the SDK will collect the advertisement ID. | `false` |\n| `controlPlaneUrl` | String | Change this parameter **only if** you are self-hosting the control plane. Check the [Self-hosted control plane](#self-hosted-control-plane) section below for more information. The SDK will add `/sourceConfig` along with this URL to fetch the source configuration. | [https://api.rudderlabs.com](https://api.rudderlabs.com/) |\n\n### Self-hosted control plane\n\nIf you are using a device mode destination like Adjust, Firebase, etc., the Unity SDK needs to fetch the required configuration from the control plane. If you are using the [Control plane lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) utility to host your own Control Plane, then follow the steps in [this section](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/#using-sdk-sources-set-up-in-self-hosted-control-plane) and specify `controlPlaneUrl` in your `RudderConfigBuilder` that points to your hosted source configuration file.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You should not pass the `controlPlaneUrl` parameter during the SDK initialization if you are using the [RudderStack Cloud dashboard](https://app.rudderstack.com/). This parameter is supported only if you are using the open source [Control Plane Lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) utility to self-host your control plane.\n\n## Identify\n\nThe Unity SDK captures the `deviceId` and uses that as the `anonymousId` for identifying the user. This helps in tracking the users across the application installation. To attach more information to the user, you can use the `identify` method. Once the SDK identifies the user, it persists and passes the user information to the subsequent calls.\n\nTo reset the user identification, you can use the `reset` method.\n\nRudderStack provides some pre-defined APIs for building the `RudderTraits` object like `PutEmail()`, `PutAge()`, etc. These APIs can be used to set the values of the standard traits by directly passing them as parameters.\n\nFor the custom traits which do not have any pre-defined API, you can use the `Put()` method and pass a key-value pair of the trait, as shown in the sample `identify` event below:\n\n```\nRudderMessage identifyMessage = new RudderMessageBuilder().Build();\nRudderTraits traits = new RudderTraits();\n//pre-defined API's for inserting standard traits\ntraits.PutEmail(\"alex@example.com\");\ntraits.PutAge(\"40\");\n//Put API to insert custom traits\ntraits.Put(\"location\", \"New Orleans\");\ntraits.Put(\"gender\", \"Male\");\ntraits.Put(\"consent\", \"Granted\");\nrudderClient.Identify(\"some_user_id\", traits, identifyMessage);\n```\n\n### Overriding `anonymousId` using `setAnonymousId`\n\nYou can explicitly set the `anonymousId` for all future events using the `setAnonymousId()` method:\n\n```\nrudderClient.setAnonymousId(\"anonymousID1\");\n```\n\n## Track\n\nYou can record the users’ in-game activity through the `track` method. Every user action is called an **event**.\n\nA sample `track` event is as shown:\n\n```\n// create event properties\nDictionary<string, object> eventProperties = new Dictionary<string, object>();\neventProperties.Add(\"test_key_1\", \"test_value_1\");\neventProperties.Add(\"test_key_2\", \"test_value_2\");\n\n// create user properties\nDictionary<string, object> userProperties = new Dictionary<string, object>();\nuserProperties.Add(\"test_u_key_1\", \"test_u_value_1\");\nuserProperties.Add(\"test_u_key_2\", \"test_u_value_2\");\n\n// create message to track\nRudderMessageBuilder builder = new RudderMessageBuilder();\nbuilder.WithEventName(\"test_event_name\");\nbuilder.WithUserId(\"test_user_id\");\nbuilder.WithEventProperties(eventProperties);\nbuilder.WithUserProperties(userProperties);\n\nrudderClient.Track(builder.Build());\n```\n\n```\n// create message to track\nRudderMessageBuilder builder = new RudderMessageBuilder();\nbuilder.WithEventName(\"test_event_name\");\nbuilder.WithUserId(\"test_user_id\");\nbuilder.WithEventProperty(\"foo\", \"bar\");\nbuilder.WithUserProperty(\"foo1\", \"bar1\");\n\nrudderClient.Track(builder.Build());\n```\n\n## Screen\n\nThe `screen` call lets you record the user activities on their mobile screen with any additional relevant information about the viewed screen.\n\nA sample `screen` event is as shown:\n\n```\n// create screen properties\nDictionary < string, object > screenProperties = new Dictionary < string, object > ();\nscreenProperties.Add(\"key_1\", \"value_1\");\nscreenProperties.Add(\"key_2\", \"value_2\");\n\nRudderMessageBuilder screenBuilder = new RudderMessageBuilder();\nscreenBuilder.WithEventName(\"Home Screen\");\nscreenBuilder.WithEventProperties(screenProperties);\nrudderClient.Screen(screenBuilder.Build());\n```\n\n## Reset\n\nThe `reset` method clears all persisted traits of the previously identified user.\n\n## Upgrading the SDK\n\nTo upgrade the SDK, remove all files related to the SDK from the `Plugins` folder. Also, remove the `Rudder` folder completely before importing a newer version of the SDK.\n\nYou can find the following files in the **Plugins** folder for the SDK:\n\n*   `Plugins/Android/unity-plugin-release.aar`\n*   `Plugins/iOS/RudderSDKUnity`\n\n## Advertisement ID\n\nRudderStack collects the advertisement ID **only** if `withAutoCollectAdvertId` is explicitly set to `true` during the [SDK initialization](#initializing-the-rudderstack-client):\n\n```\nRudderConfigBuilder configBuilder = new RudderConfigBuilder()\n    .WithDataPlaneUrl(DATA_PLANE_URL);\n    .WithLogLevel(RudderLogLevel.VERBOSE)\n    .withAutoCollectAdvertId(true);\n```\n\n## Tracking application lifecycle events on the Android platform\n\nThe Unity SDK automatically tracks the [Application Lifecycle Events](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/) to get insights into the app metrics like installs, opens, updates, etc. However, you can disable the automatic tracking by setting the `withTrackLifecycleEvents` parameter to `false`:\n\n```\nRudderConfig config = new RudderConfigBuilder()\n  .WithTrackLifecycleEvents(false)\n```\n\nTo track the application life cycle events on the Android platform, you need to add the `RudderPreferbs.prefab` file from the path `Assets/Rudder/RudderPreferbs.prefab` to every scene in your Unity app. Also, ensure that the `RudderPreferbs.prefab` is linked to the `RudderClient.cs` script.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The Unity SDK depends on the lifecycle method `onApplicationFocus` of the [`MonoBehaviour` class](https://docs.unity3d.com/ScriptReference/MonoBehaviour.html) to determine the **Application Opened** and **Application Backgrounded** events on the Android platform.\n> \n> Hence, when an application is brought to focus, an `Application Opened` event is sent, and when the application is moved out of focus, an `Application Backgrounded` event is sent. So, these events might be triggered even before the RudderStack SDK gets initialized to create the actions and execute them once the SDK is initialized.\n\n## Triggering Application Updated lifecycle event\n\nThe following requirements must be met to ensure that the **Application Updated** lifecycle event is triggered:\n\n*   **For iOS**: Make sure the `Bundle version` in the `Info.plist` file of your application is incremented. If the `Bundle version` of your `target` points to the `Bundle version` of your `project`, then increment it.\n*   **For Android**: Make sure the `versionCode` in the `defaultConfig` object nested in the `android` object of your app’s `build.gradle` is incremented.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n\n## FAQ\n\n#### Do I need to add anything to my Android ProGuard rules?\n\nIf you are facing any event delivery issues in your production environment, verify if you have added the following line in your ProGuard rules:\n\n```\n-keep class com.rudderstack.android.** { *; }\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Unity SDK v1 | RudderStack Docs",
  "description": "Use the RudderStack Unity SDK to send event data from your games to various destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/reverse-etl/sync-schedule-settings/",
  "markdown": "# Sync Schedule Settings | RudderStack Docs\n\nSynchronize reverse ETL sources on a schedule.\n\n* * *\n\n*     3 minute read  \n    \n\nRudderStack lets you set a schedule for importing data from your Reverse ETL sources while setting them up in your dashboard. It lets you specify the schedule type that defines how and when the syncs will run.\n\nRudderStack supports the following three schedule types:\n\n| Schedule type | Description |\n| --- | --- |\n| Basic | Run syncs at a given time interval and specified time. |\n| CRON | Run syncs based on a CRON expression defined by the user. |\n| Manual | Run syncs manually. |\n\n## Basic\n\nThis schedule type lets you run the data syncs at a set interval. You can specify the sync frequency as well as the time(in UTC) when you want the sync to start.\n\n[![Basic sync schedule](https://www.rudderstack.com/docs/images/warehouse-actions-sources/sync-schedule-basic.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/sync-schedule-basic.webp)\n\n*   **Frequency** - You can choose the data sync frequency from the following options:\n    \n    *   5 minutes\n    *   10 minutes\n    *   15 minutes\n    *   30 minutes\n    *   1 hour\n    *   3 hours\n    *   6 hours\n    *   12 hours\n    *   24 hours\n*   **Sync Starting At** - Specify the time at which the data sync should start.\n    \n\n## CRON\n\nThis schedule type lets you define a custom CRON expression and runs the data syncs based on this setting.\n\n[![CRON schedule](https://www.rudderstack.com/docs/images/warehouse-actions-sources/sync-schedule-cron.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/sync-schedule-cron.webp)\n\nNote that the sync frequency specified under **Run Settings** needs to be greater than or equal to 5 minutes. Otherwise, you will encounter an error as shown below:\n\n[![CRON schedule error](https://www.rudderstack.com/docs/images/retl-sources/cron-error.webp)](https://www.rudderstack.com/docs/images/retl-sources/cron-error.webp)\n\n## Manual\n\nThis schedule type lets you run your data syncs manually. RudderStack won’t sync the data until you explicitly trigger it.\n\nTo trigger a sync manually, go to the **Syncs** tab in your Reverse ETL connections page and click **Sync Now**:\n\n[![Trigger manual syncs](https://www.rudderstack.com/docs/images/retl-sources/trigger-manual-sync.webp)](https://www.rudderstack.com/docs/images/retl-sources/trigger-manual-sync.webp)\n\n## Sync modes behavior\n\nThe following sections explain the behavior of the two sync modes(Upsert and Mirror) when a sync schedule is set in RudderStack.\n\n### Upsert mode\n\nFor [upsert mode](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/#upsert), you can trigger a new sync anytime by pressing the **Sync Now** button. Multiple syncs can run simultaneously.\n\n### Mirror mode\n\nFor [mirror mode](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/#mirror-mode), you can run only one sync at any given point of time. A new sync starts only after the previous one is completed.\n\nSuppose you have a sync scheduled for every 30 minutes. If there is a sync running for more than 30 minutes, then the next scheduled sync will be skipped when using the mirror mode.\n\n## FAQ\n\n#### **Can I change my sync schedule type?**\n\nYes, you can.\n\n1.  Go to the **Settings** tab of your Reverse ETL connection details page and click the edit icon next to **Schedule**:\n\n[![Change sync schedule](https://www.rudderstack.com/docs/images/retl-sources/schedule-type.webp)](https://www.rudderstack.com/docs/images/retl-sources/schedule-type.webp)\n\n2.  Then, select your new sync schedule type.\n\n#### **What happens if I don’t set the Sync Starting At time?**\n\nRudderStack considers strict time windows to schedule syncs if you do not explicitly set the time under **Sync Starting At**.\n\nSuppose you create a source at 12:30 hrs UTC, specify the **Frequency** as 3 hours, and do not specify any time under **Sync Starting At**. In this case, as the time falls in the 12:00-13:00 time window, RudderStack will run the next sync at 15:00 hrs UTC (12:00 + 03:00 = 15:00 hrs).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Sync Schedule Settings | RudderStack Docs",
  "description": "Synchronize reverse ETL sources on a schedule.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/data-pipelines/overview/",
  "markdown": "# Data Pipelines Overview | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Data Pipelines Overview | RudderStack Docs",
  "description": "Collect, unify, and activate your data using RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/reverse-etl/airflow-provider/",
  "markdown": "# Schedule and Trigger Reverse ETL Syncs with Airflow Provider\n\nSchedule and trigger Reverse ETL syncs programmatically with RudderStack’s Airflow provider.\n\n* * *\n\n*     4 minute read  \n    \n\nRudderStack’s Airflow Provider lets you programmatically schedule and trigger your [Reverse ETL](https://www.rudderstack.com/docs/sources/reverse-etl/) syncs from outside RudderStack and integrate them with your existing Airflow workflows.\n\nFor more information on the codebase and sample implementation, see the [GitHub Repository](https://github.com/rudderlabs/rudder-airflow-provider).\n\n## Prerequisites\n\nTo use the Airflow Provider, you must have a working Apache Airflow installation. For more information, see the [Airflow documentation](https://airflow.apache.org/docs/apache-airflow/stable/installation/index.html).\n\nFollow the steps in the below sections to use the RudderStack Airflow Provider:\n\n## Run Airflow\n\nInitialize all dependencies by running Apache Airflow via the following command:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The Airflow standalone server is not meant for use in production. It is highly recommended using alternate methods to install and run Airflow in a production environment.\n\n## Install Airflow Provider\n\nInstall the RudderStack Airflow Provider by running the following command:\n\n```\npip install rudderstack-airflow-provider\n```\n\n## Create Airflow connection\n\nTo create a new Airflow connection, follow these steps:\n\n1.  In your Airflow dashboard, go to **Admin** > **Connections**:\n\n[![Airflow dashboard Connections option](https://www.rudderstack.com/docs/images/warehouse-actions-sources/airflow-provider-1.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/airflow-provider-1.webp)\n\n2.  Add a new connection by configuring the following details:\n\n[![Airflow dashboard edit connection](https://www.rudderstack.com/docs/images/warehouse-actions-sources/airflow-provider-2.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/airflow-provider-2.webp)\n\n*   **Connection ID**: Specify a unique connection name. `RudderstackRETLOperator` will pick the connection with the name `rudderstack_default` by default. If you have created a connection with a different name, make sure that name is passed as a parameter to `RudderstackRETLOperator`.\n*   **Connection Type**: For this field, select **HTTP** from the list.\n*   **Host**: Set the value for this field depending on your region:\n\n```\nhttps://api.rudderstack.com\n```\n\n```\nhttps://api.eu.rudderstack.com\n```\n\n*   **Password**: Enter your [Personal Access Token](https://www.rudderstack.com/docs/dashboard-guides/personal-access-token/).\n\n## Define a DAG\n\nNext, define a DAG with the tasks as per your requirement.\n\nThe following code snippet highlights an Airflow DAG with one task named `rs_trigger_sync` for the Reverse ETL connection ID `20dQV6yuUDUw31peWA8f7xxgHdN`:\n\nFor more information on obtaining the connection ID, see the [FAQ](#faq) section below:\n\n```\nfrom datetime import datetime, timedelta\n\nfrom airflow import DAG\nfrom rudder_airflow_provider.operators.rudderstack import RudderstackRETLOperator\n\ndefault_args = {\n    'owner': 'airflow',\n    'depends_on_past': False,\n    'email': ['airflow@example.com'],\n    'email_on_failure': False,\n    'email_on_retry': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=5)\n}\n\nwith DAG(\n    'rudderstack-sample',\n    default_args=default_args,\n    description='A simple tutorial DAG',\n    schedule_interval=timedelta(days=1),\n    start_date=datetime(2021, 1, 1),\n    catchup=False,\n    tags=['rs']\n) as dag:\n    rs_operator = RudderstackRETLOperator(\n        retl_connection_id='2aiDQzMqP6LNuUokWstmaubcZOP',\n        task_id='rs_trigger_sync',\n        connection_id='rudderstack_default',\n        sync_type='incremental',\n        wait_for_completion=True\n    )\n```\n\nThe `RudderstackRETLOperator` parameters are described below:\n\n| Parameter | Description | Type | Default value |\n| --- | --- | --- | --- |\n| `retl_connection_id` | Valid RudderStack Reverse ETL connection ID. | String (templatable) | \\-  |\n| `task_id` | Unique task ID within a DAG | String | \\-  |\n| `connection_id` | Airflow connection ID used for connecting to the RudderStack API | String | `rudderstack_default` |\n| `sync_type` | Type of sync to trigger | String (templatable)<br><br>**Note**: Acceptable values are `full` and `incremental`. | `incremental` |\n| `wait_for_completion` | Determines whether to wait for the sync to complete. | Boolean | `False` |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> `RudderStackOperator` is deprecated. Use `RudderstackRETLOperator` for Reverse ETL connections.\n\n```\nfrom datetime import datetime, timedelta\n\nfrom airflow import DAG\nfrom rudder_airflow_provider.operators.rudderstack import RudderstackOperator\n\ndefault_args = {\n    'owner': 'airflow',\n    'depends_on_past': False,\n    'email': ['airflow@example.com'],\n    'email_on_failure': False\n}\n\nwith DAG(\n    'rudderstack-sample',\n    default_args=default_args,\n    description='A simple tutorial DAG',\n    schedule_interval=timedelta(days=1),\n    start_date=datetime(2021, 1, 1),\n    catchup=False,\n    tags=['rs']\n) as dag:\n    rs_operator = RudderstackOperator(\n        source_id='20dQV6yuUDUw31peWA8f7xxgHdN',\n        connection_id='rudderstack_sync_conn',\n        task_id='rs_trigger_sync',\n        wait_for_completion='False'\n    )\n```\n\nThe `RudderstackOperator` parameters are described below:\n\n| Parameter | Description | Type | Default value |\n| --- | --- | --- | --- |\n| `source_id` | Valid RudderStack source ID. | String | \\-  |\n| `task_id` | Unique task ID within a DAG | String | \\-  |\n| `connection_id` | Airflow connection ID used for connecting to the RudderStack API | String | `rudderstack_default` |\n| `wait_for_completion` | Determines whether to wait for the sync to complete. | Boolean | `False` |\n\n### Run a DAG\n\nOnce you have defined a DAG and configured an Airflow connection, run the following commands to allow Airflow to pick up and run the DAG:\n\n```\nexport AIRFLOW_HOME=</path/to/airflow_home>\nmkdir $AIRFLOW_HOME/dags\ncp rudderstack_dag.py $AIRFLOW_HOME/dags\n```\n\n**Make sure the Airflow scheduler is running in the background**. Also, you must enable the DAG in the Airflow dashboard:\n\n[![enabling Airflow DAG in dashboard](https://www.rudderstack.com/docs/images/warehouse-actions-sources/airflow-provider-3.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/airflow-provider-3.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can trigger a DAG by clicking on the play button on the right as seen above, and selecting **Trigger DAG**. Note that **stopping the DAG will not cancel the ongoing sync**.\n\n## FAQ\n\n#### **Where can I find the connection ID for my Reverse ETL connection?**\n\nThe connection ID is a unique identifier for any Reverse ETL connection set up in RudderStack.\n\nTo obtain the connection ID, click the destination connected to your Reverse ETL source and go to the **Settings** tab.\n\n[![connection ID for Reverse ETL](https://www.rudderstack.com/docs/images/retl-sources/connection-id.webp)](https://www.rudderstack.com/docs/images/retl-sources/connection-id.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Schedule and Trigger Reverse ETL Syncs with Airflow Provider | RudderStack Docs",
  "description": "Schedule and trigger Reverse ETL syncs programmatically with RudderStack's Airflow provider.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/customerio/",
  "markdown": "# Customer.io Source | RudderStack Docs\n\nIngest your event data from Customer.io into RudderStack.\n\n* * *\n\n*     5 minute read  \n    \n\n[Customer.io](https://customer.io/) is a popular marketing platform for sending targeted emails and push and SMS notifications to improve customer engagement and thereby the overall conversion rate.\n\nYou can send your Customer.io events by adding a webhook that points to RudderStack. These events include email-related actions such as email delivered, opened, bounced, and more.\n\nThis guide will help you set up Customer.io as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Customer.io source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Customer.io**.\n2.  Assign a name to your source and click **Continue**.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> To connect this source to a RudderStack warehouse destination, the source name should match the name of your warehouse schema.\n\n3.  Your Customer.io source is now configured. Go to the **Settings** tab and note the **Webhook URL**.\n\n[![Customer.io webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/customerio-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/customerio-webhook-url.webp)\n\n4.  Go to your Customer.io dashboard. From the sidebar, go to the **Integrations** page and look for **Reporting Webhooks**:\n\n[![Customer.io reporting webhooks](https://www.rudderstack.com/docs/images/event-stream-sources/customerio-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/customerio-3.webp)\n\n5.  Click **Add Webhook** and add the webhook URL obtained in **Step 3**. The URL should be of the following format:\n\n```\n<DATA_PLANE_URL>/v1/webhook?writeKey=<WRITE_KEY>\n```\n\nFor more information on the data plane URL, refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url).\n\n6.  Finally, save the webhook.\n\n## Supported events\n\nThe following sections list the Customer.io event types supported by RudderStack.\n\n### Common data mappings\n\nThe common data mappings for each of the supported event types is listed in the following table:\n\n| Customer.io property | RudderStack property |\n| --- | --- |\n| `data.customer_id` | `userId` |\n| `data.event_id` | `properties.eventId` |\n| `data.identifiers.id` | `userId` |\n\n### Email events\n\nRudderStack supports the following Customer.io email events:\n\n| **Email Event** | **Description** |\n| --- | --- |\n| `Delivered` | The delivery provider’s report that the email was delivered to the inbox of the recipient. |\n| `Opened` | An email was opened by the recipient. |\n| `Clicked` | A tracked link in an email was clicked by the recipient/customer. |\n| `Bounced` | The delivery provider’s report that it was unable to deliver the email to the recipient. |\n| `Spammed` | An email was marked as spam by the recipient. |\n| `Unsubscribed` | The customer unsubscribed via a particular email. |\n| `Failed` | The email was not successfully delivered to the recipient. |\n| `Dropped` | The email was not sent as the recipient was suppressed. |\n| `Attempted` | Customer.io retried sending the email to the email provider. |\n| `Converted` | The conversion goal attributed to the email was matched. |\n| `Sent` | The email was successfully sent to the recipient. |\n| `Drafted` | The sender created an email draft. |\n\nThe supported property mappings in addition to the [common mappings](#common-data-mappings) listed above are as follows:\n\n| Customer.io property | RudderStack property |\n| --- | --- |\n| `data.action_id` | `properties.actionId` |\n| `data.broadcast_id` | `properties.broadcastId` |\n| `data.delivery_id` | `properties.deliveryId` |\n| `data.href` | `properties.link.url` |\n| `data.link_id` | `properties.link.id` |\n| `data.recipient` | `context.traits.email` |\n| `data.subject` | `properties.emailSubject` |\n| `data.failure_message` | `properties.reason` |\n| `data.campaign_id` | `properties.campaignId` |\n| `data.content_id` | `properties.contentId` |\n| `data.newsletter_id` | `properties.newsletterId` |\n\n### Customer events\n\nRudderStack supports the following Customer.io customer events:\n\n| **Customer Event** | **Description** |\n| --- | --- |\n| `Subscribed` | The customer was subscribed to a campaign. |\n| `Unsubscribed` | The customer was unsubscribed from a campaign. |\n\nThe supported property mappings in addition to the [common mappings](#common-data-mappings) listed above is shown:\n\n| Customer.io property | RudderStack property |\n| --- | --- |\n| `data.email_address` | `context.traits.email` |\n\n### SMS events\n\nRudderStack supports the following Customer.io SMS events:\n\n| **SMS Event** | **Description** |\n| --- | --- |\n| `Failed` | The SMS could not be sent to the delivery provider. |\n| `Click` | The recipient tapped the link present in the SMS notification. |\n| `Sent` | The SMS notification was sent successfully. |\n| `Attempted` | The SMS was attempted for delivery. |\n| `Drafted` | The SMS notification was drafted. |\n| `Delivered` | The SMS notification was delivered to the recipient. |\n| `Converted` | The conversion goal attributed to the SMS was matched. |\n| `Bounced` | The delivery provider’s report that it was unable to deliver the SMS to the recipient. |\n\nThe supported property mappings in addition to the [common mappings](#common-data-mappings) listed above are as follows:\n\n| Customer.io property | RudderStack property |\n| --- | --- |\n| `data.action_id` | `properties.actionId` |\n| `data.broadcast_id` | `properties.broadcastId` |\n| `data.delivery_id` | `properties.deliveryId` |\n| `data.href` | `properties.link.url` |\n| `data.recipient` | `context.traits.email` |\n| `data.failure_message` | `properties.reason` |\n| `data.campaign_id` | `properties.campaignId` |\n| `data.link_id` | `properties.link.id` |\n\n### Push notification events\n\nRudderStack supports the following Customer.io push notification events:\n\n| **Push Event** | **Description** |\n| --- | --- |\n| `Failed` | The push notification could not be sent to the delivery provider. |\n| `Click` | The recipient tapped the link present in the push notification. |\n| `Sent` | A push notification was sent. |\n| `Attempted` | A push notification was attempted unsuccessfully. |\n| `Drafted` | A push notification was drafted. |\n| `Opened` | A push notification was opened by the recipient. |\n| `Converted` | The conversion goal attributed to the push notification was matched. |\n| `Bounced` | An invalid device token was reported by the delivery provider. |\n| `Dropped` | The push notification was not sent to the recipient as the device token bounced. |\n\nThe supported property mappings in addition to the [common mappings](#common-data-mappings) listed above are as follows:\n\n| Customer.io property | RudderStack property |\n| --- | --- |\n| `data.action_id` | `properties.actionId` |\n| `data.broadcast_id` | `properties.broadcastId` |\n| `data.delivery_id` | `properties.deliveryId` |\n| `data.href` | `properties.link.url` |\n| `data.link_id` | `properties.link.id` |\n| `data.recipient` | `context.traits.email` |\n| `data.device_id` | `properties.deviceId` |\n| `data.failure_message` | `properties.reason` |\n| `data.recipients` | `properties.recipients` |\n| `data.campaign_id` | `properties.campaignId` |\n| `data.device_platform` | `properties.devicePlatform` |\n\n### Webhook events\n\nRudderStack supports the following Customer.io webhook events:\n\n| **Webhook Event** | **Description** |\n| --- | --- |\n| `Failed` | The webhook payload failed and was not sent to the recipient. |\n| `Click` | The link in the webhook payload was clicked by the recipient. |\n| `Sent` | A webhook payload was sent from Customer.io. |\n| `Attempted` | A webhook event was attempted unsuccessfully and would be retried. |\n| `Drafted` | A webhook draft was created by the sender. |\n\nThe supported property mappings in addition to the [common mappings](#common-data-mappings) listed above are as follows:\n\n| Customer.io property | RudderStack property |\n| --- | --- |\n| `data.action_id` | `properties.actionId` |\n| `data.broadcast_id` | `properties.broadcastId` |\n| `data.delivery_id` | `properties.deliveryId` |\n| `data.href` | `properties.link.url` |\n| `data.link_id` | `properties.link.id` |\n| `data.recipient` | `context.traits.email` |\n| `data.failure_message` | `properties.reason` |\n\n### Slack events\n\nRudderStack supports the following Customer.io Slack events:\n\n| **Slack Event** | **Description** |\n| --- | --- |\n| `Failed` | The Slack message failed and was not delivered to the recipient. |\n| `Click` | The recipient clicked the link in the Slack message. |\n| `Sent` | A Slack message was successfully sent to the recipient. |\n| `Attempted` | A Slack message was attempted unsuccessfully and would be retried. |\n| `Drafted` | A Slack message was drafted by the sender. |\n\nThe supported property mappings in addition to the [common mappings](#common-data-mappings) listed above are as follows:\n\n| Customer.io property | RudderStack property |\n| --- | --- |\n| `data.action_id` | `properties.actionId` |\n| `data.broadcast_id` | `properties.broadcastId` |\n| `data.delivery_id` | `properties.deliveryId` |\n| `data.href` | `properties.link.url` |\n| `data.link_id` | `properties.link.id` |\n| `data.recipient` | `context.traits.email` |\n| `data.failure_message` | `properties.reason` |\n| `data.campaign_id` | `properties.campaignId` |\n\nThe following image highlights the setup in the Customer.io dashboard:\n\n[![Customer.io event settings](https://www.rudderstack.com/docs/images/event-stream-sources/customerio-5.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/customerio-5.webp)\n\n## Event transformation\n\nThe Customer.io webhook events are ingested into RudderStack after converting them into the RudderStack event format. The `customer_id` set by Customer.io is set as `userId`. In cases where Customer.io does not send the `customer_id`, the email address of the user is set as `anonymousId`.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Customer.io Source | RudderStack Docs",
  "description": "Ingest your event data from Customer.io into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/slack/",
  "markdown": "# Slack source | RudderStack Docs\n\nIngest your event data from Slack into RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Slack](https://slack.com/intl/en-in/) is a popular business communication platform that lets you organize all your business-related chats by specific topics, groups, or direct messaging.\n\nThis guide will help you set up Slack as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Slack source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Slack**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Slack source is now configured. Note the **Webhook URL** by going to the **Settings** tab.\n\n[![Slack webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/slack-src.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/slack-src.webp)\n\n4.  In your Slack app, click your workspace and select **Tools and Settings** > **Manage Apps** to open the Slack app directory.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You must have an admin role in your Slack workspace to see these options.\n\n[![Add webhook source in Slack](https://www.rudderstack.com/docs/images/event-stream-sources/slack-tools.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/slack-tools.webp)\n\n5.  Click **Build** from the top right navigation bar.\n6.  Select an existing app or [create a new one](https://api.slack.com/quickstart#creating) by clicking **Create New App**.\n\n[![Add webhook name and URL](https://www.rudderstack.com/docs/images/event-stream-sources/slack-src-1.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/slack-src-1.webp)\n\n7.  Click **Event Subscriptions** from the left navigation bar.\n8.  Turn on the **Enable events** setting and enter the webhook URL in the **Request URL** field obtained in Step 3.\n\n[![Add webhook name and URL](https://www.rudderstack.com/docs/images/event-stream-sources/slack-src-2.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/slack-src-2.webp)\n\n9.  In **Subscribe to bot events** section, [add the events you want to track](https://api.slack.com/quickstart#listening) and click **Save Changes**.\n\n[![Add webhook name and URL](https://www.rudderstack.com/docs/images/event-stream-sources/slack-src-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/slack-src-3.webp)\n\n## Event transformation\n\nRudderStack supports ingesting all the [Slack events](https://api.slack.com/events) related to user’s activities. It converts:\n\n*   Slack’s `team_join` and `user_change` events as [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) events, and\n*   Rest of the Slack events as [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) events.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The [`url_verification`](https://api.slack.com/events/url_verification) event verifies the webhook URL. It has a different object structure than the rest of the events and is triggered only once during the first time webhook setup.\n\nRudderStack maps the following Slack properties from the event payload to the RudderStack fields:\n\n| Slack Property | RudderStack Property |\n| --- | --- |\n| `event.type` | `event` |\n| `event.ts` | `originalTimestamp` |\n| `event.user`  <br>`event.user.id` | `context.externalId` |\n| `event.profile.first_name` | `context.traits.firstName` |\n| `event.profile.last_name` | `context.traits.lastName` |\n| `event.user.profile.real_name` | `context.traits.name` |\n| `event.user.profile.email` | `context.traits.email` |\n| `event.user.tz` | `timezone` |\n| `event.user.profile.image_original` | `context.traits.avatar` |\n| `event.user.profile.title` | `context.traits.title` |\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from Slack source and creates the resulting payload.\n\n### Identify event\n\nA sample input payload received from Slack webhook (`team_join` event):\n\n```\n{\n  \"event\": {\n    \"type\": \"team_join\",\n    \"user\": {\n      \"id\": \"W012CDE\"',\n      \"name\": \"johnd\",\n      \"real_name\": \"John Doe\",\n    },\n  },\n  \"type\": \"event_callback\",\n  \"event_id\": \"Ev06TJ0NG5\",\n  \"event_time\": \"1709441309\",\n  \"token\": \"REm276ggfh72Lq\",\n  \"team_id\": \"T0GFJL5J7\",\n  \"context_team_id\": \"T0GFJL5J7\",\n  \"context_enterprise_id\": \"null\",\n  \"api_app_id\": \"B02SJMHRR\",\n  \"authorizations\": [{\n    \"enterprise_id\": \"null\",\n    \"team_id\": \"T0GFJL5J7\",\n    \"user_id\": \"U04G7H550\",\n    \"is_bot\": true,\n    \"is_enterprise_install\": false,\n  }, ],\n  \"is_ext_shared_channel\": false,\n  \"event_context\": \"eJldCI65436EUEpMSFhgfhg76joiQzAxRTRQTEIxMzUifQ\"\n}\n```\n\nThe corresponding RudderStack-transformed (`identify`) event payload is shown below:\n\n```\n{\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\",\n    },\n    \"integration\": {\n      \"name\": \"SLACK\",\n    },\n    \"externalId\": [{\n      \"type\": \"slackUserId\",\n      \"id\": \"W012CDE\",\n    }, ],\n  },\n  \"integrations\": {\n    \"SLACK\": false,\n  },\n  \"type\": \"identify\",\n  \"event\": \"Team Join\",\n  \"anonymousId\": \"2bc5ae2825a712d3d154cbdacb86ac16c278\",\n  \"originalTimestamp\": \"2024-03-03T04:48:29.000Z\",\n  \"sentAt\": \"2024-03-03T04:48:29.000Z\",\n  \"properties\": {\n    \"type\": \"team_join\",\n    \"user\": {\n      \"id\": \"W012CDE\",\n      \"name\": \"johnd\",\n      \"real_name\": \"John Doe\",\n    },\n  },\n}\n```\n\n### Track event\n\nA sample input payload received from Slack webhook (`message` event):\n\n```\n{\n  \"event\": {\n    \"user\": \"U04G7H550\",\n    \"type\": \"message\",\n    \"ts\": \"1709441309.308399\",\n    \"client_msg_id\": \"834r664e-ec75-445d-t5c6-b873a07y9c81\",\n    \"text\": \"What is the pricing of product X\",\n    \"team\": \"T0GFJL5J7\",\n    \"thread_ts\": \"1709407304.839329\",\n    \"parent_user_id\": \"U06P6LQTPV\",\n    \"blocks\": [{\n      \"type\": \"rich_text\",\n      \"block_id\": \"xGKJl\",\n      \"elements\": [{\n        \"type\": \"rich_text_section\",\n        \"elements\": {\n            \"type\": \"text\",\n            \"text\": \"What is the pricing of product X\",\n          },\n          {\n            \"type\": \"channel\",\n            \"channel_id\": \"C03CDQTPI65\",\n          },\n          {\n            \"type\": \"text\",\n            \"text\": \"to do this\",\n          },\n        ],\n      }, ],\n    }, ],\n    \"channel\": \"C03CDQTPI65\",\n    \"event_ts\": \"1709441309.308399\",\n    \"channel_type\": \"channel\",\n  }, {\n  \"type\": \"event_callback\",\n  \"event_id\": \"EvY5JTJ0NG5\",\n  \"event_time\": \"1709441309\",\n  \"token\": \"REm2987dqtpi72Lq\",\n  \"team_id\": \"T0GFJL5J7\",\n  \"context_team_id\": \"T01gqtPIL5J7\",\n  \"context_enterprise_id\": \"null\",\n  \"api_app_id\": \"A04QTPIHRR\",\n  \"authorizations\": [{\n    \"enterprise_id\": \"null\",\n    \"team_id\": \"T0GFJL5J7\",\n    \"user_id\": \"W012CDE\",\n    \"is_bot\": true,\n    \"is_enterprise_install\": false,\n  }, ],\n  \"is_ext_shared_channel\": false,\n  \"event_context\": \"4-wd6joiQfdgTRQTpIzdfifQ\"\n},\n```\n\nThe corresponding RudderStack-transformed (`track`) event payload is shown below:\n\n```\n{\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\",\n    },\n    \"integration\": {\n      \"name\": \"SLACK\",\n    },\n    \"externalId\": [{\n      \"type\": \"slackUserId\",\n      \"id\": \"U04G7H550\",\n    }, ],\n  },\n  \"integrations\": {\n    \"SLACK\": false,\n  },\n  \"type\": \"track\",\n  \"event\": \"Message\",\n  \"anonymousId\": \"7509c04f547b05afb6838aa742f4910263d6\",\n  \"originalTimestamp\": \"2024-03-03T04:48:29.308Z\",\n  \"sentAt\": \"2024-03-03T04:48:29.000Z\",\n  \"properties\": {\n    \"user\": \"U04G7H550\",\n    \"type\": \"message\",\n    \"ts\": \"1709441309.308399\",\n    \"client_msg_id\": \"834r664e-ec75-445d-t5c6-b873a07y9c81\",\n    \"text\": \"What is the pricing of product X\",\n    \"team\": \"T0GFJL5J7\",\n    \"thread_ts\": \"1709407304.839329\",\n    \"parent_user_id\": \"U06P6LQTPV\",\n    \"blocks\": [{\n      \"type\": \"rich_text\",\n      \"block_id\": \"xGKJl\",\n      \"elements\": [{\n        \"type\": \"rich_text_section\",\n        \"elements\": [{\n            \"type\": \"text\",\n            \"text\": \"What is the pricing of product X\",\n          },\n          {\n            \"type\": \"channel\",\n            \"channel_id\": \"C03CDQTPI65\",\n          },\n          {\n            \"type\": \"text\",\n            \"text\": \"to do this\",\n          },\n        ],\n      }, ],\n    }, ],\n    \"channel\": \"C03CDQTPI65\",\n    \"event_ts\": \"1709441309.308399\",\n    \"channel_type\": \"channel\",\n  },\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Slack source | RudderStack Docs",
  "description": "Ingest your event data from Slack into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/close-crm/",
  "markdown": "# Close Source | RudderStack Docs\n\nIngest your event data from Close into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[Close](https://www.close.com/) is a sales-focused customer relationship management software. It helps businesses manage leads, track communication, and automate sales processes to boost productivity and close more deals.\n\nThis guide will help you set up Close as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Close source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Close CRM**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Close source is now configured. Note the **Webhook URL** by going to the **Settings** tab.\n\n[![Close CRM webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/close-crm-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/close-crm-webhook.webp)\n\n## Subscribe to the webhook\n\nTo receive events data successfully in RudderStack through Close, you must [subscribe to the webhook](https://developer.close.com/resources/webhook-subscriptions/#create-new-webhook-subscription) (noted in the above section).\n\nA sample snippet to subscribe the webhook URL:\n\n```\ncurl --location 'https://api.close.com/api/v1/webhook/' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: Basic YXBpXzZraUJxZ1BmR3U4SVZEMWk5OTZnUjIuNWFac0tvTm5iVlZkWEV3eEkyTW5vVzo=' \\\n--data '{\n    \"url\": \"https://webhook.site/44541847-0141-4647-be05-4ff6b31d8d93\",\n    \"events\": [\n        {\n            \"object_type\": \"lead\",\n            \"action\": \"created\"\n        },\n        {\n            \"object_type\": \"lead\",\n            \"action\": \"updated\"\n        },\n        {\n            \"object_type\": \"activity.call\",\n            \"action\": \"created\"\n        },\n        {\n            \"object_type\": \"activity.note\",\n            \"action\": \"created\"\n        },\n        {\n            \"object_type\": \"activity.note\",\n            \"action\": \"updated\"\n        }\n    ]\n}'\n```\n\nSee [Close webhooks documentation](https://developer.close.com/topics/webhooks/) for more information.\n\n## Event transformation\n\nRudderStack ingests all the [Close events](https://developer.close.com/resources/event-log/list-of-events/) as [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) events, after converting them into the appropriate event format.\n\n### Property mappings\n\nRudderStack maps the following Close properties from the event payload to the RudderStack fields:\n\n| Close Property | RudderStack Property | Note |\n| --- | --- | --- |\n| `event.object_type` + `event.action` | `event` | \\-  |\n| `event.lead_id` | `userId` | RudderStack does not use `user_id` as it is assigned to the user who creates the lead. |\n| `event.date_updated` | `originalTimestamp` | RudderStack converts it to the ISO 8601 date format yyyy-MM-ddTHH:mm:ss.SSSZ |\n| `event` | `properties` | Contains all the event data (even mapped to other fields). |\n| `subscriptionId` | `properties.subscription_id` | \\-  |\n| `event.id` | `messageId` | \\-  |\n\nA sample input payload ingested by RudderStack:\n\n```\n{\n  \"event\": {\n    \"date_created\": \"2019-01-15T12:48:23.395000\",\n    \"meta\": {\n      \"request_method\": \"PUT\",\n      \"request_path\": \"/api/v1/opportunity/oppo_7H4sjNso7FyBFaeR3RXi5PMJbilfo0c6UPCxsJtEhCO/\"\n    },\n    \"id\": \"ev_2sYKRjcrA79yKxi3S4Crd7\",\n    \"action\": \"updated\",\n    \"date_updated\": \"2019-01-15T12:48:23.395000\",\n    \"changed_fields\": [\n      \"confidence\",\n      \"date_updated\",\n      \"status_id\",\n      \"status_label\",\n      \"status_type\"\n    ],\n    \"previous_data\": {\n      \"status_type\": \"active\",\n      \"confidence\": 70,\n      \"date_updated\": \"2019-01-15T12:47:39.873000+00:00\",\n      \"status_id\": \"stat_3FD9DnGUCJzccBKTh8LiiKoyVPpMJsOkJdcGoA5AYKH\",\n      \"status_label\": \"Active\"\n    },\n    \"organization_id\": \"orga_XbVPx5fFbKlYTz9PW5Ih1XDhViV10YihIaEgMEb6fVW\",\n    \"data\": {\n      \"contact_name\": \"Mr. Jones\",\n      \"user_name\": \"Joe Kemp\",\n      \"value_period\": \"one_time\",\n      \"updated_by_name\": \"Joe Kemp\",\n      \"date_created\": \"2019-01-15T12:41:24.496000+00:00\",\n      \"user_id\": \"user_lAm7YqrzZj00t1GLK5eTOaRgdkNChswxydbhUhGRbcM\",\n      \"updated_by\": \"user_lAm7YqrzZj00t1GLK5eTOaRgdkNChswxydbhUhGRbcM\",\n      \"value_currency\": \"USD\",\n      \"organization_id\": \"orga_XbVPx5fFbKlYTz9PW5Ih1XDhViV10YihIaEgMEb6fVW\",\n      \"status_label\": \"Won\",\n      \"contact_id\": \"cont_BwlwYQkIP6AooiXP1CMvc6Zbb5gGh2gPu4dqIDlDrII\",\n      \"status_type\": \"won\",\n      \"created_by_name\": \"Joe Kemp\",\n      \"id\": \"oppo_8H4sjNso7FyBFaeR3RXi5PMJbilfo0c6UPCxsJtEhCO\",\n      \"lead_name\": \"KLine\",\n      \"date_lost\": null,\n      \"note\": \"\",\n      \"date_updated\": \"2019-01-15T12:48:23.392000+00:00\",\n      \"status_id\": \"stat_wMS9M6HC2O3CSEOzF5g2vEGt6RM5R3RfhIQixdnmjf2\",\n      \"value\": 100000,\n      \"created_by\": \"user_lAm7YqrzZj00t1GLK5eTOaRgdkNChswxydbhUhGRbcM\",\n      \"value_formatted\": \"$1,000\",\n      \"date_won\": \"2019-01-15\",\n      \"lead_id\": \"lead_zwqYhEFwzPyfCErS8uQ77is2wFLvr9BgVi6cTfbFM68\",\n      \"confidence\": 100\n    },\n    \"request_id\": \"req_4S2L8JTBAA1OUS74SVmfbN\",\n    \"object_id\": \"oppo_7H4sjNso7FyBFaeR3RXi5PMJbilfo0c6UPCxsJtEhCO\",\n    \"user_id\": \"user_lAm7YqrzZj00t1GLK5eTOaRgdkNChswxydbhUhGRbcM\",\n    \"object_type\": \"opportunity\",\n    \"lead_id\": \"lead_zwqYhEFwzPyfCErS8uQ77is2wFLvr9BgVi6cTfbFM68\"\n  },\n  \"subscription_id\": \"whsub_8AmjKCZYT3zI8eZoi4HhFC\"\n}\n```\n\nThe RudderStack-transformed event payload is shown below:\n\n```\n{\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"integration\": {\n      \"name\": \"CloseCRM\"\n    }\n  },\n  \"integrations\": {\n    \"CloseCRM\": false\n  },\n  \"type\": \"track\",\n  \"event\": \"opportunity updated\",\n  \"userId\": \"lead_zwqYhEFwzPyfCErS8uQ77is2wFLvr9BgVi6cTfbFM68\",\n  \"messageId\": \"ev_2sYKRjcrA79yKxi3S4Crd7\",\n  \"originalTimestamp\": \"2019-01-TuT12:48:23.395+00:00\",\n  \"properties\": {\n    \"date_created\": \"2019-01-15T12:48:23.395000\",\n    \"meta\": {\n      \"request_method\": \"PUT\",\n      \"request_path\": \"/api/v1/opportunity/oppo_7H4sjNso7FyBFaeR3RXi5PMJbilfo0c6UPCxsJtEhCO/\"\n    },\n    \"id\": \"ev_2sYKRjcrA79yKxi3S4Crd7\",\n    \"action\": \"updated\",\n    \"date_updated\": \"2019-01-15T12:48:23.395000\",\n    \"organization_id\": \"orga_XbVPx5fFbKlYTz9PW5Ih1XDhViV10YihIaEgMEb6fVW\",\n    \"data\": {\n      \"contact_name\": \"Mr. Jones\",\n      \"user_name\": \"Joe Kemp\",\n      \"value_period\": \"one_time\",\n      \"updated_by_name\": \"Joe Kemp\",\n      \"date_created\": \"2019-01-15T12:41:24.496000+00:00\",\n      \"user_id\": \"user_lAm7YqrzZj00t1GLK5eTOaRgdkNChswxydbhUhGRbcM\",\n      \"updated_by\": \"user_lAm7YqrzZj00t1GLK5eTOaRgdkNChswxydbhUhGRbcM\",\n      \"value_currency\": \"USD\",\n      \"organization_id\": \"orga_XbVPx5fFbKlYTz9PW5Ih1XDhViV10YihIaEgMEb6fVW\",\n      \"status_label\": \"Won\",\n      \"contact_id\": \"cont_BwlwYQkIP6AooiXP1CMvc6Zbb5gGh2gPu4dqIDlDrII\",\n      \"status_type\": \"won\",\n      \"created_by_name\": \"Joe Kemp\",\n      \"id\": \"oppo_8H4sjNso7FyBFaeR3RXi5PMJbilfo0c6UPCxsJtEhCO\",\n      \"lead_name\": \"KLine\",\n      \"note\": \"\",\n      \"date_updated\": \"2019-01-15T12:48:23.392000+00:00\",\n      \"status_id\": \"stat_wMS9M6HC2O3CSEOzF5g2vEGt6RM5R3RfhIQixdnmjf2\",\n      \"value\": 100000,\n      \"created_by\": \"user_lAm7YqrzZj00t1GLK5eTOaRgdkNChswxydbhUhGRbcM\",\n      \"value_formatted\": \"$1,000\",\n      \"date_won\": \"2019-01-15\",\n      \"lead_id\": \"lead_zwqYhEFwzPyfCErS8uQ77is2wFLvr9BgVi6cTfbFM68\",\n      \"confidence\": 100\n    },\n    \"request_id\": \"req_4S2L8JTBAA1OUS74SVmfbN\",\n    \"object_id\": \"oppo_7H4sjNso7FyBFaeR3RXi5PMJbilfo0c6UPCxsJtEhCO\",\n    \"user_id\": \"user_lAm7YqrzZj00t1GLK5eTOaRgdkNChswxydbhUhGRbcM\",\n    \"object_type\": \"opportunity\",\n    \"lead_id\": \"lead_zwqYhEFwzPyfCErS8uQ77is2wFLvr9BgVi6cTfbFM68\",\n    \"subscription_id\": \"whsub_8AmjKCZYT3zI8eZoi4HhFC\"\n  }\n}\n```\n\n## FAQ\n\n#### Does Close retry event delivery in case of a failure?\n\nYes, Close retries failed event deliveries with a retry interval that exponentially backs off up to every 20 minutes. Further, Close retries sending events up to 72 hours before dropping them.\n\n#### Does the Close support event ordering?\n\nNo, Close does not ensure event ordering due to [event consolidation](https://developer.close.com/resources/event-log/#event-consolidation), delivery parallelism/retries and other factors.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Close Source | RudderStack Docs",
  "description": "Ingest your event data from Close into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-unity-sdk/v2/",
  "markdown": "# Unity SDK v2 | RudderStack Docs\n\nUse the RudderStack Unity SDK to send event data from your games to various destinations.\n\n* * *\n\n*     6 minute read  \n    \n\nSee the [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-unity-v2) to get a more hands-on understanding of the SDK.\n\n## SDK setup requirements\n\n*   Download and install the [Unity development kit](https://store.unity.com/download).\n*   Sign up for [RudderStack Cloud](https://app.rudderstack.com/signup).\n*   [Set up a Unity source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in your [RudderStack Cloud dashboard](https://app.rudderstack.com/). Note the **Write Key** for this source:\n\n[![Unity source write key](https://www.rudderstack.com/docs/images/event-stream-sources/unity-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/unity-write-key-new.webp)\n\n*   Note the [data plane URL](https://www.rudderstack.com/docs/dashboard-guides/overview/#data-plane-url) present in your RudderStack dashboard.\n\n## Installing the Unity SDK\n\n1.  [Download](https://github.com/rudderlabs/rudder-sdk-unity-v2/releases) `rudder-sdk-unity.unitypackage`.\n2.  Import the downloaded package to your project. From the **Assets** menu, go to **Import Package** > **Custom Package…** :\n\n[![Import custom package](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-installation-1.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-installation-1.webp)\n\n3.  Select `rudder-sdk-unity.unitypackage` from the downloaded location and click **Open**:\n\n[![Select RudderStack Unity package](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-installation-2.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-installation-2.webp)\n\n4.  Click **Import** in the import popup:\n\n[![Import popup](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-installation-3-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-installation-3-new.webp)\n\n5.  Add the **RudderStack.prefab** file from the path `Assets/RudderStack/Unity/Prefabs/RudderStack.prefab` to every scene in your Unity app. Also, make sure that `RudderStack.prefab` is linked to the `RSMaster`, `RSScreenView`, and `RSLogger` scripts.\n\n[![Add prefab file](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-installation-4-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/unity-sdk-installation-4-new.webp)\n\n## Initializing the RudderStack client\n\n1.  Import the SDK:\n\n2.  Initialize the SDK as shown. Replace `WRITE_KEY` and `DATA_PLANE_URL` with the actual values obtained in the [SDK setup requirements](#sdk-setup-requirements) section.\n\n```\nRSAnalytics.Initialize(\"WRITE_KEY\",\n\t\tnew RSConfig(dataPlaneUrl: \"DATA_PLANE_URL\"));\n\n// for coroutine\nStartCoroutine(RSAnalytics.InitializeRoutine(\"WRITE_KEY\",\n\t\tnew RSConfig(dataPlaneUrl: \"DATA_PLANE_URL\")));\n```\n\n## SDK initialization options\n\nYou can configure your client based on the following parameters using `RudderConfigBuilder`:\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `logLevel` | Enum | Controls how much of the log you want to see from the SDK.<br><br>**Default value**: `Logger.Level.INFO` |\n| `dataPlaneUrl` | String | Your data plane URL. |\n| `dbThresholdCount` | Integer | Number of events to be saved in the `SQLite` database. Once the limit is reached, older events are deleted from the database.<br><br>**Default value**: `10000` |\n| `sleepcount` | Integer | Minimum waiting time to flush the events to the RudderStack server. The minimum value can be set to `1 second`.<br><br>**Default value**:`10 seconds` |\n| `trackLifecycleEvents` | Boolean | Determines if the SDK will automatically capture the application lifecycle events.<br><br>**Default value**: `true` |\n| `recordScreenViews` | Boolean | Determines if the SDK will automatically capture the screen view events.<br><br>**Default value**: `false` |\n| `controlPlaneUrl` | String | Change this parameter **only if** you are self-hosting the control plane. Check the [Self-hosted control plane](#self-hosted-control-plane) section below for more information. The SDK will add `/sourceConfig` along with this URL to fetch the source configuration.<br><br>**Default value**: `https://api.rudderlabs.com` |\n| `gzip` | Boolean | Gzips the event requests.<br><br>**Default value**: `true` |\n\n### Self-hosted control plane\n\nDo not pass the `controlPlaneUrl` parameter during the SDK initialization if you are using the [RudderStack Cloud dashboard](https://app.rudderstack.com/) to set up your connections. The SDK supports this parameter only if you are using the open source [Control Plane Lite](https://github.com/rudderlabs/config-generator#rudderstack-control-plane-lite) utility to self-host your control plane.\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nThe Unity SDK captures `deviceId` and uses that as `anonymousId` for identifying the user. This helps in tracking the users across the application installation. To attach more information to the user, use the `identify` method.\n\nOnce the SDK identifies the user, the SDK persists and passes the user information to the subsequent calls. To reset the user identification, use the [`reset`](#reset) method.\n\nThe following snippet highlights a sample `identify` call:\n\n```\nRSAnalytics.Client.Identify(\"unity_user_id\",\n                new Dictionary<string, object> { { \"email\", \"abc@example.com\" }, { \"age\", 24 }, { \"name\", \"First Last\" }, { \"gender\", \"Male\" } });\n```\n\n### Override `anonymousId` using `setAnonymousId`\n\nYou can explicitly set the `anonymousId` for all future events using the `PutAnonymousId()` method.\n\n```\nRSClient.PutAnonymousId(\"anonymous_id\");\n```\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the users’ in-game activity. Each user action is called an **event**.\n\nThe following snippet highlights a sample `track` call:\n\n```\nRSAnalytics.Client.Track(\"sample_track\",\n                new Dictionary<string, object> { { \"key_1\", \"value_1\" }, { \"key_2\", 4 }, { \"key_3\", 4.2 }, { \"key_4\", true } });\n```\n\n### Track application lifecycle events\n\nThe Unity SDK lets you track the [Application Lifecycle Events](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/) to get insights into the app metrics like installs, opens, updates, etc.\n\nTo enable automatic tracking, set `trackLifeCycleEvents` method to `true` while initializing the SDK:\n\n```\nRSAnalytics.Initialize(\"WRITE_KEY\",\n                new RSConfig(dataPlaneUrl: \"DATA_PLANE_URL\")\n                    .SetTrackLifeCycleEvents(true));\n```\n\n### Trigger Application Updated lifecycle event\n\nTo ensure that the **Application Updated** lifecycle event is triggered successfully:\n\n*   **For iOS**: Make sure the `Bundle version` in the `Info.plist` file of your application is incremented. If the `Bundle version` of your `target` points to the `Bundle version` of your `project`, then increment it.\n*   **For Android**: Make sure the `versionCode` in the `defaultConfig` object nested in the `android` object of your app’s `build.gradle` is incremented.\n\nRefer to the [Application Lifecycle Events Specification](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-updated) guide for more information.\n\n## Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It lets you record the screen views on your mobile app along with other relevant information about the screen.\n\nThe following snippet highlights a sample `screen` call:\n\n```\nRSAnalytics.Client.Screen(\"sample_screen\",\n                new Dictionary<string, object> { { \"key_1\", \"value_1\" }, { \"key_2\", 4 }, { \"key_3\", 4.2 }, { \"key_4\", true } });\n```\n\n### Automatic screen recording\n\nYou can enable the automatic recording of screen views by setting `recordScreenViews` to `true` while initializing the SDK. This automatically sends a `screen` call for every screen that a user views. By default, `recordScreenViews` is set to `false`.\n\n```\nRSAnalytics.Initialize(\"WRITE_KEY\",\n                new RSConfig(dataPlaneUrl: \"DATA_PLANE_URL\")\n                    .SetRecordScreenViews(true));\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `recordScreenViews` parameter records the screen views of the native Android [Activities](https://developer.android.com/guide/components/activities/intro-activities) or the iOS [Views](https://developer.apple.com/documentation/uikit/view_controllers) only and **not** by the React Native Views.\n\n## Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record the page views on your application along with the other relevant information about the page.\n\nA sample `page` call is shown below:\n\n```\nRSAnalytics.Client.Page(\"sample_page\",\n                new Dictionary<string, object> { { \"key_1\", \"value_1\" }, { \"key_2\", 4 }, { \"key_3\", 4.2 }, { \"key_4\", true } });\n```\n\n## Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group.\n\nThe following snippet highlights a sample `group` call made using the Unity SDK:\n\n```\nRSAnalytics.Client.Group(\"group_id\",\n                new Dictionary<string, object> { { \"key_1\", \"value_1\" }, { \"key_2\", 4 }, { \"key_3\", 4.2 }, { \"key_4\", true } });\n```\n\n## Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly. You can use `alias` for managing the user’s identity in some of the downstream destinations.\n\nA sample `alias` call is shown below:\n\n```\nRSAnalytics.Client.Alias(\"new_unity_user_id\");\n```\n\n## Reset\n\nThe `reset` method clears all persisted traits of the previously identified user.\n\n```\nRSAnalytics.Client.Reset();\n```\n\n## Set the advertisement ID\n\nUse the `PutAdvertisingId()` method to explicitly set an advertising ID.\n\n```\nRSClient.PutAdvertisingId(\"advertisement_id\");\n```\n\n## Set the device token\n\nYou can pass your device token for push notifications for the destinations which support the feature using the `PutDeviceToken()` method. RudderStack sets the token under `context.device.token`.\n\n```\nRSClient.PutDeviceToken(\"device_token\");\n```\n\n## FAQ\n\n#### Which platforms are does Unity SDK support?\n\nThe Unity SDK v2 supports the following platforms:\n\n*   Android\n*   iOS\n*   Windows\n*   macOS\n*   Xbox\n*   PlayStation\n\n#### Do I need to add anything to my Android ProGuard rules?\n\nIf you are facing any event delivery issues in your production environment, verify if you have added the following line in your ProGuard rules:\n\n```\n-keep class com.rudderstack.android.** { *; }\n```\n\n#### How do I gzip event requests in Unity SDK?\n\nThe Unity SDK automatically gzips requests. To disable this feature, set the `Gzip` parameter to `false` while initializing the SDK:\n\n```\nRSAnalytics.Initialize(\"WRITE_KEY\",\n                new RSConfig(dataPlaneUrl: \"DATA_PLANE_URL\")\n                    .SetGzip(false));\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Gzip requires [rudder-server](https://github.com/rudderlabs/rudder-server) **v1.4 or higher**. Otherwise, your events might fail.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Unity SDK v2 | RudderStack Docs",
  "description": "Use the RudderStack Unity SDK to send event data from your games to various destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-dotnet-sdk/",
  "markdown": "# .NET SDK | RudderStack Docs\n\nUse RudderStack’s .NET SDK to send server-side events to various destinations.\n\n* * *\n\n*     7 minute read  \n    \n\nRudderStack’s .NET SDK lets you track your customer event data from your .NET applications and send it to your specified destinations via RudderStack.\n\nRefer to the SDK’s [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-.net) for the implementation-specific details.\n\n[![Github Badge](https://img.shields.io/nuget/v/RudderAnalytics?style=flat)](https://www.nuget.org/packages/RudderAnalytics/)\n\n## SDK setup requirements\n\n1.  Sign up to [RudderStack Cloud](https://app.rudderstack.com/signup).\n2.  [Set up a .NET source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in your dashboard. You should be able to see a **write key** for this source:\n\n[![.NET source write key](https://www.rudderstack.com/docs/images/event-stream-sources/dotnet-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/dotnet-write-key-new.webp)\n\n*   You will also need a data plane URL. Refer to the [Dashboard Overview](https://www.rudderstack.com/docs/dashboard-guides/overview/#data-plane-url) for more information on the data plane URL and where to find it.\n\n## Installing the .NET SDK\n\nYou can use [NuGet](https://docs.microsoft.com/en-us/nuget/consume-packages/install-use-packages-powershell) to install the .NET SDK into your project.\n\n```\nInstall-Package RudderAnalytics -Version 2.0.0\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The SDK uses the [Newton.JSON](https://www.newtonsoft.com/json) library for JSON processing.\n\n## Initializing the SDK\n\nTo initialize the SDK **asynchronously** (default behavior), run the following code snippet:\n\n```\nusing RudderStack;\n\nRudderAnalytics.Initialize(\n    WRITE_KEY,\n    new RudderConfig(dataPlaneUrl: DATA_PLANE_URL)\n);\n```\n\nTo send events synchronously, initialize the SDK as shown:\n\n```\nusing RudderStack;\n\nRudderAnalytics.Initialize(\n    WRITE_KEY,\n    new RudderConfig(dataPlaneUrl: DATA_PLANE_URL, async: false)\n);\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> When initialized in synchronous mode, the .NET SDK sends each event as a single batch. In asynchronous mode, it groups events together and sends them to the backend as a single batch.\n\n## Gzipping requests\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The Gzip feature is enabled by default in the .NET SDK from version `2.0.0`\n\nThe .NET SDK automatically gzips requests. However, you can disable this by setting the `gzip` parameter of `RudderConfig` to `false` while initializing the SDK:\n\n```\nusing RudderStack;\nRudderAnalytics.Initialize(\n    WRITE_KEY,\n    new RudderConfig(dataPlaneUrl: DATA_PLANE_URL, gzip: false)\n);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Gzip requires [rudder-server](https://github.com/rudderlabs/rudder-server) **v1.4 or higher**. Otherwise, your events might fail.\n\n## Sending events\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not store or persist the user state in any of the server-side SDKs**.\n> \n> Unlike the client-side SDKs that deal with only a single user at a given time, the server-side SDKs deal with multiple users simultaneously. Therefore, you must specify either `userId` or `anonymousId` every time while making any API calls supported by the .NET SDK.\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` call made using the .NET SDK is shown below:\n\n```\nRudderAnalytics.Client.Identify(\n    \"1hKOmRA4GRlm\",\n    new Dictionary<string, object> { {\"subscription\", \"inactive\"}, }\n);\n```\n\nThe `identify` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `traits` | Object | An optional dictionary of the user’s traits like `name` or `email`. |\n| `options` | Object | Object containing `anonymousId`, `integrations`, `timestamp`, and `context`. |\n\nSee the [options parameter](#options-parameter) section for more information on the `options` object and its fields.\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the user actions along with their associated properties. Each user action is called an **event**.\n\nA sample `track` call is shown below:\n\n```\nRudderAnalytics.Client.Track(\n    \"1hKOmRA4GRlm\",\n    \"CTA Clicked\",\n    new Dictionary<string, object> {  {\"plan\", \"premium\"}, }\n);\n```\n\nThe `track` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `event`  <br>Required | String | Name of the event. |\n| `properties` | Object | An optional dictionary of the properties associated with the event. |\n| `options` | Object | Object containing `anonymousId`, `integrations`, `timestamp`, and `context`. |\n\nSee the [options parameter](#options-parameter) section for more information on the `options` object and its fields.\n\n## Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record the page views on your application along with the other relevant information about the page.\n\nA sample `page` call is as shown:\n\n```\nRudderAnalytics.Client.Page(\n    \"1hKOmRA4GRlm\",\n    \"Sign Up\",\n    new Dictionary<string, object> { {\"url\", \"https://wwww.example.com/sign-up\"}, }\n);\n```\n\nThe `page` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `name`  <br>Required | String | Name of the viewed page. |\n| `category` | String | Category of the viewed page. |\n| `properties` | Object | An optional dictionary of the properties associated with the viewed page, like `url` or `referrer`. |\n| `options` | Object | Object containing `anonymousId`, `integrations`, `timestamp`, and `context`. |\n\nSee the [options parameter](#options-parameter) section for more information on the `options` object and its fields.\n\n## Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It allows you to record the screen views on your mobile app along with the other relevant information about the app screen.\n\nA sample `screen` call is as shown:\n\n```\nRudderAnalytics.Client.Screen(\n    \"1hKOmRA4GRlm\",\n    \"Dashboard\",\n    new Dictionary<string, object> { {\"name\", \"Paid Dashboard\"}, }\n);\n```\n\nThe `screen` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `name`  <br>Required | String | Name of the viewed screen. |\n| `category` | String | Category of the viewed screen. |\n| `properties` | Object | An optional dictionary of the properties associated with the viewed screen, like `url` or `referrer`. |\n| `options` | Object | Object containing `anonymousId`, `integrations`, `timestamp`, and `context`. |\n\nSee the [options parameter](#options-parameter) section for more information on the `options` object and its fields.\n\n## Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group.\n\nA sample `group` call made using the .NET SDK is shown below:\n\n```\nRudderAnalytics.Client.Group(\n    \"1hKOmRA4GRlm\",\n    \"12\",\n    new Dictionary<string, object> { {\"role\", \"Owner\"}, }\n);\n```\n\nThe `group` method parameters are as follows:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `groupId`  <br>Required | String | Unique identifier of the group in your database. |\n| `traits` | Object | An optional dictionary of the group’s traits like `name`or `email`. |\n| `options` | Object | Object containing `anonymousId`, `integrations`, `timestamp`, and `context`. |\n\nSee the [options parameter](#options-parameter) section for more information on the `options` object and its fields.\n\n## Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly. You can use `alias` for managing the user’s identity in some of the downstream destinations.\n\nA sample `alias` call is as shown:\n\n```\nRudderAnalytics.Client.Alias(\"1hKOmRA4GRlm\", \"12345\");\n```\n\nThe `alias` method parameters are as mentioned below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `previousId`  <br>Required | String | The previous unique identifier of the user. |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `options` | Object | Object containing `anonymousId`, `integrations`, `timestamp`, and `context`. |\n\nSee the [options parameter](#options-parameter) section for more information on the `options` object and its fields.\n\n## Options parameter\n\nThe `options` object contains the following fields:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n\n## Flushing events\n\nTo make sure no events are left in the queue, you can flush the events explicitly by using the SDK’s `flush()` method.\n\n```\n\nRudderAnalytics.Client.Flush();\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot call the `flush()` method again until all messages are flushed from the queue.\n\n## Logging\n\nThe .NET SDK supports detailed logging. You can enable this feature as shown:\n\n```\nusing RudderStack;\n\nLogger.Handlers += LoggingHandler;\n\nstatic void LoggingHandler(Logger.Level level, string message, IDictionary<string, object> args)\n{\n    if (args != null)\n    {\n        foreach (string key in args.Keys)\n        {\n            message += String.Format(\" {0}: {1},\", \"\" + key, \"\" + args[key]);\n        }\n    }\n    Console.WriteLine(String.Format(\"[RudderAnalytics] [{0}] {1}\", level, message));\n}\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The logger must be on a minimum version of .NET Core 2.1.\n\n## FAQ\n\n#### How does the .NET SDK handle events larger than 32KB?\n\nIf you are running the .NET SDK [asynchronously](#initializing-the-sdk), RudderStack drops any events greater than 32KB.\n\nFor synchronous initialization, the SDK accepts and sends each event greater than 32KB as a single batch and sends them to the RudderStack data plane (backend).\n\n#### Does the .NET SDK support event ordering?\n\nThe .NET SDK does not support event ordering by default.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": ".NET SDK | RudderStack Docs",
  "description": "Use RudderStack’s .NET SDK to send server-side events to various destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/reverse-etl/faq/",
  "markdown": "# FAQ | RudderStack Docs\n\nAnswers to some of the commonly asked questions on the Reverse ETL feature.\n\n* * *\n\n*     4 minute read  \n    \n\n## Reverse ETL feature\n\n#### **How do I use the Reverse ETL feature?**\n\nRudderStack’s Reverse ETL feature lets you set up your data warehouse as a source in RudderStack and route the data residing in it to your preferred destination.\n\nTo use this feature, follow these steps:\n\n1.  Set up a Reverse ETL source in RudderStack.\n2.  Connect it to a new or existing destination.\n3.  Specify the warehouse data you want to sync to that destination.\n\n#### **What is the difference between the Table, Model, and Audience options when creating a Reverse ETL source?**\n\nWhen creating a new Reverse ETL source, you are presented with the following three options from which RudderStack syncs the source data:\n\n[![](https://www.rudderstack.com/docs/images/warehouse-actions-sources/table-model-audience-options.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/table-model-audience-options.webp)\n\n*   When you choose **Table**, RudderStack imports all data associated with the specified warehouse table during the sync.\n*   When you choose **Model**, RudderStack imports the data by running the query specified in the connected [model](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/models/) during the sync.\n*   When you choose **Audience**, RudderStack syncs the [audience](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/) you created in the RudderStack dashboard.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   [MySQL](https://www.rudderstack.com/docs/sources/reverse-etl/mysql/) and [PostgreSQL](https://www.rudderstack.com/docs/sources/reverse-etl/postgresql/) sources support syncing data only from a warehouse table and model. Hence, you will not see the **Audience** option while setting up this source.\n> *   [S3](https://www.rudderstack.com/docs/sources/reverse-etl/amazon-s3/) supports syncing data only from your S3 bucket.\n\n#### **Can I use Reverse ETL to ingest streaming data from the warehouse?**\n\nReverse ETL does not support ingesting streaming data. It is not built to handle the rapidly changing data in the warehouse.\n\n#### **Can I connect a Reverse ETL source to multiple destinations?**\n\nYes - RudderStack supports connecting a Reverse ETL source to multiple destinations. However, you cannot connect multiple Reverse ETL sources to a single destination.\n\n#### **Can I connect a warehouse source to a warehouse destination in RudderStack?**\n\nNo - RudderStack does not support connecting a Reverse ETL (warehouse) source to a warehouse destination.\n\n#### **Why can’t I add a Reverse ETL source to an already configured destination?**\n\nThe Reverse ETL feature supports only source-driven configuration of your pipeline. So, you need to configure a new or existing Reverse ETL source in RudderStack and then connect it to a new or existing destination.\n\n## Data syncs\n\n#### **How much time does it take for the synced data to appear in the destination?**\n\nRudderStack sends the records to the destination pretty quickly. It takes around a couple of minutes in most cases but it may take longer depending on the destination type. However, the sync metrics may take some more time (around 10 minutes) to reflect in the RudderStack dashboard.\n\nIf you see a prompt on the sync stating “Records sent to destination, finalizing sync stats”, it indicates that the records have successfully reached the destination.\n\n## Event replay\n\n#### **Can I replay data from a Reverse ETL source in case of failure?**\n\nRudderStack does not support [replaying data](https://www.rudderstack.com/docs/user-guides/administrators-guide/event-replay/) from Reverse ETL sources.\n\n## Sync modes and schedule settings\n\n#### **What is the difference between Basic, CRON, and Manual schedule settings?**\n\nWhen creating a new Reverse ETL source, RudderStack lets you [schedule](https://www.rudderstack.com/docs/sources/reverse-etl/sync-schedule-settings/) your data imports and define how and when the data syncs will run.\n\nRudderStack defines the following three sync schedule types:\n\n| Schedule type | Description |\n| --- | --- |\n| Basic | Runs syncs at a user-specified time and interval. |\n| CRON | Runs syncs based on a user-defined CRON expression. |\n| Manual | User triggers the data syncs manually. |\n\n#### **What is the difference between Upsert and Mirror mode when syncing data?**\n\nRudderStack supports two [sync modes](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/) (available based on the source and the chosen destination) that let you define how you want to sync your data. These are **Upsert** and **Mirror** mode.\n\n*   In the **Upsert** mode, RudderStack supports insertion of new records and updates to the existing records, while syncing data to the destination.\n*   In the **Mirror** mode, RudderStack ‘mirrors’ the source by keeping the destination data the same as the source data. It performs insertion, updates, and deletion of records while syncing data to the destination.\n\n#### **What is the difference between the Full and Incremental sync types?**\n\nThe sync type determines the scope of the sync. It can be one of the following:\n\n*   **Incremental**: RudderStack syncs only the newly added data in the warehouse since the last sync.\n*   **Full**: RudderStack syncs all the data present in the warehouse, irrespective of whether it was synced to the destination previously.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "FAQ | RudderStack Docs",
  "description": "Answers to some of the commonly asked questions on the Reverse ETL feature.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/webhook-source/",
  "markdown": "# Webhook Source | RudderStack Docs\n\nAdd a Webhook source in RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\nRudderStack lets you add any source that supports a webhook and use it to send events to your preferred destinations.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can configure webhooks as sources only for the platforms that support them.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack recommends using the webhook source only if your input data is not in the standard RudderStack event format. In such cases, you can write a [transformation](https://www.rudderstack.com/docs/transformations/overview/) to convert the data into the standard event format. To ingest events with the standard RudderStack event format, it is recommended to use an [HTTP source](https://www.rudderstack.com/docs/api/http-api/) instead.\n\n## Getting started\n\nFollow these steps to set up your webhook source in the RudderStack dashboard:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In this example, events are ingested from [Mailchimp](https://mailchimp.com/) into RudderStack by configuring a webhook.\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Webhook**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your webhook source is now created. Note the **Webhook URL** containing the **Write key** as a query parameter:\n\n[![Webhook endpoint](https://www.rudderstack.com/docs/images/event-stream-sources/webhook-endpoint-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/webhook-endpoint-url.webp)\n\n4.  Then, [add a destination in RudderStack](https://www.rudderstack.com/docs/dashboard-guides/destinations/#adding-a-destination) and connect it to this webhook source.\n\n5.  Next, add the webhook URL to your source platform - in this case, **Mailchimp**.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can configure webhooks as sources only for the platforms that support them.\n\nThe following image shows the webhook URL added in Mailchimp:\n\n[![Adding the webhook to an event source](https://www.rudderstack.com/docs/images/event-stream-sources/webhook-5.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/webhook-5.webp)\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Add and test your webhook URL. You can use the [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/#source-live-events) functionality to view the events tracked in real time.\n\nWhen the users perform any action configured in the source, the source platform will automatically send the generated events to the webhook URL.\n\nIn this example, Mailchimp sends the updates under **Trigger on Events** (seen in the above image) as the user events to the webhook URL with the content type `application/x-www-form-urlencoded`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The content type can vary in case of the other webhook sources.\n\nRudderStack then takes the data, creates the payload, and sends it to the destinations connected to the webhook source (Google Analytics, in this case).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You must also add the appropriate [Transformation](https://www.rudderstack.com/docs/transformations/overview/) to transform the payload into a destination-specific format before sending it to the destination. Refer to the [Payload creation and transformation](#payload-creation-and-transformation) section for more details.\n\n## Payload creation and transformation\n\nThis section details how RudderStack receives the data from the webhook source platform and creates the resulting payload.\n\n1.  Continuing with our Mailchimp example, suppose a customer subscribes to Mailchimp. Mailchimp then sends the following data to RudderStack:\n\n```\ntype=subscribe&fired_at=2021-07-28+08%3A06%3A59&data%5Bid%5D=e2ff089583&data%5Bemail%5D=ruchira%40rudderlabs.com&data%5Bemail_type%5D=html&data%5Bip_opt%5D=115.187.35.152&data%5Bweb_id%5D=161912900&data%5Bmerges%5D%5BEMAIL%5D=name%40rudderlabs.com&data%5Bmerges%5D%5BFNAME%5D=Name&data%5Bmerges%5D%5BLNAME%5D=Surname&data%5Bmerges%5D%5BADDRESS%5D=&data%5Bmerges%5D%5BPHONE%5D=&data%5Bmerges%5D%5BBIRTHDAY%5D=&data%5Blist_id%5D=ec4689c266\n```\n\n2.  RudderStack receives this data and creates the following payload:\n\n```\n  {\n  type: \"track\",\n  event: \"webhook_source_event\",\n  rudderId: \"044448e2-a674-426c-ba61-8341262babcc\",\n  messageId: \"4379907d-689a-4e3a-a2f7-477e29a02299\",\n  properties: {\n    type: [\"subscribe\"],\n    \"data[id]\": [\"e2ff089583\"],\n    fired_at: [\"2021-07-28 08:06:59\"],\n    \"data[email]\": [\"[name@rudderlabs.com](mailto:name@rudderlabs.com)\"],\n    \"data[ip_opt]\": [\"115.187.35.152\"],\n    \"data[web_id]\": [\"161912900\"],\n    \"data[list_id]\": [\"ec4689c266\"],\n    \"data[email_type]\": [\"html\"],\n    \"data[merges][EMAIL]\": [\n      \"[name@rudderlabs.com](mailto:name@rudderlabs.com)\",\n    ],\n    \"data[merges][FNAME]\": [\"Name\"],\n    \"data[merges][LNAME]\": [\"Surname\"],\n    \"data[merges][PHONE]\": [\"\"],\n    \"data[merges][ADDRESS]\": [\"\"],\n    \"data[merges][BIRTHDAY]\": [\"\"],\n  },\n  anonymousId: \"d6597ba2-54db-4bd7-8769-86ac067b4178\",\n}\n```\n\n3.  Transform this payload as per the event format accepted by destination. To do this, use RudderStack’s [Transformation](https://www.rudderstack.com/docs/transformations/overview/) feature. A sample transformation is as shown below:\n\n```\nexport function transformEvent(event) {\n  const updatedEvent = event\n  const { properties } = event\n\n  if (properties) {\n    updatedEvent.event = properties.type\n    updatedEvent.userId = properties[\"data[email]\"]\n    updatedEvent.properties.name = `${properties[\"data[merges][FNAME]\"]} ${properties[\"data[merges][LNAME]\"]}`\n    updatedEvent.properties.phone = properties[\"data[merges][PHONE]\"]\n\n    delete updatedEvent.properties[\"data[merges][PHONE]\"]\n    delete updatedEvent.properties[\"data[merges][FNAME]\"]\n    delete updatedEvent.properties[\"data[merges][LNAME]\"]\n  }\n\n  return updatedEvent\n}\n```\n\nThe transformed payload is shown below:\n\n```\n{\n  type: 'track',\n  event: [\n    'subscribe'\n  ],\n  rudderId: '044448e2-a674-426c-ba61-8341262babcc',\n  messageId: '4379907d-689a-4e3a-a2f7-477e29a02299',\n  properties: {\n    type: [\n      'subscribe'\n    ],\n    'data[id]': [\n      'e2ff089583'\n    ],\n    fired_at: [\n      '2021-07-28 08:06:59'\n    ],\n    'data[email]': [\n      'name@rudderlabs.com'\n    ],\n    'data[ip_opt]': [\n      '115.187.35.152'\n    ],\n    'data[web_id]': [\n      '161912900'\n    ],\n    'data[list_id]': [\n      'ec4689c266'\n    ],\n    'data[email_type]': [\n      'html'\n    ],\n    'data[merges][EMAIL]': [\n      'name@rudderlabs.com'\n    ],\n    'data[merges][ADDRESS]': [\n      ''\n    ],\n    'data[merges][BIRTHDAY]': [\n      ''\n    ],\n    name: 'Name Surname',\n    phone: [\n      ''\n    ]\n  },\n  anonymousId: 'd6597ba2-54db-4bd7-8769-86ac067b4178',\n  userId: [\n    'name@rudderlabs.com'\n  ]\n}\n```\n\n4.  RudderStack then sends this payload to the destinations connected to your source - Google Analytics, in this case.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Webhook Source | RudderStack Docs",
  "description": "Add a Webhook source in RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/extole/",
  "markdown": "# Extole | RudderStack Docs\n\nIngest your event data from Extole into RudderStack.\n\n* * *\n\n*     2 minute read  \n    \n\n[Extole](https://www.extole.com/) is a popular referral marketing tool. It enables you to offer an integrated, optimized, and effective customer experience for your audience.\n\nYou can now send your Extole events to RudderStack by adding a webhook that points to RudderStack. These events include the reward-specific events such as `reward_earned`,`reward_fulfilled`,`reward_sent`, etc. along with other Extole custom events.\n\nThis guide will help you in setting up Extole as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Extole source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Extole**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Extole source is now configured. Go to the **Settings** tab and note the **Webhook URL**:\n\n[![Extole webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/extole-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/extole-webhook-url.webp)\n\n4.  Next, head over to your Extole account and select the **program** you want to use for RudderStack to ingest your data.\n5.  Then, navigate to the **Tech Center** section from the sidebar and then select [Rewards WebHooks](https://my.extole.com/tech-center/rewards-webhooks).\n6.  Then, click the **New Reward Webhook** option as seen in the following image:\n\n[![Extole new webhook](https://www.rudderstack.com/docs/images/event-stream-sources/extole-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/extole-3.webp)\n\n7.  In the **URL** text box, add the webhook URL obtained in **Step 3**. The URL should be of the following format:\n\n```\n<DATA_PLANE_URL>/v1/webhook?writeKey=<WRITE_KEY>\n```\n\nFor more information on the data plane URL, refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url).\n\n8.  Finally, save the endpoint.\n\n## Event transformation\n\nRudderStack ingests the Extole events and converts them to the RudderStack’s `track` call with the designated event name and associated properties. For example, Extole’s `event_id` is converted and set to `properties.eventId`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack retains the Extole event name during the mapping.\n\nRudderStack populates the following properties from the Extole event payload to the RudderStack event:\n\n| **Extole Property** | **RudderStack Property** |\n| --- | --- |\n| `event_id`, | `properties.eventId` |\n| `event_time` | `originalTimestamp` |\n| `reward_id` | `properties.rewardId` |\n| `reward_supplier_name` | `properties.rewardSupplierName` |\n| `reward_supplier_id` | `properties.rewardSupplierId` |\n| `partner_reward_supplier_id` | `properties.partnerRewardSupplierId` |\n| `reward_supplier_type` | `properties.partnerRewardSupplierType` |\n| `person_id` | `properties.personId` |\n| `partner_user_id` | `properties.partnerUserId`, `userId`, `context.traits.userId` |\n| `face_value` | `properties.faceValue` |\n| `face_value_type` | `properties.faceValueType` |\n| `message` | `properties.message` |\n| `partner_reward_id` | `properties.partnerRewardId` |\n| `email` | `properties.email` |\n| `data` | `properties.data` |\n| `schema_version` | `properties.schemaVersion` |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> All the Extole event properties (except `reward_earned`, `reward_fulfilled`, and `reward_sent`) sent to RudderStack are directly mapped to the RudderStack event properties.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Extole | RudderStack Docs",
  "description": "Ingest your event data from Extole into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/data-pipelines/event-stream/",
  "markdown": "# Event Stream | RudderStack Docs\n\nIngest your event data into RudderStack using cloud apps and SDKs.\n\n* * *\n\n*     3 minute read  \n    \n\nRudderStack’s **Event Stream** pipeline offers a comprehensive solution for collecting real-time user event data and sending it to integrations across your stack, including cloud tools, data warehouses, and data processing tools.\n\nTop Event Stream use cases include:\n\n*   Simplifying event collection through a single SDK\n*   Syncing raw event data to data warehouses and data lakes\n*   Cleaning, enriching, and transforming events in real-time\n*   Identifying anonymous and known users\n*   Implementing cookieless tracking\n*   Building and managing custom integrations\n*   Automating integration management in a centralized platform\n\nYou can see how Event Stream pipelines work in this self-paced product tour:\n\n## Event Stream sources\n\nOur Event Stream pipeline can ingest events from from:\n\n*   16 open-source SDKs for web, mobile, and server-side platforms\n*   Cloud apps that support event emission\n*   Any custom source that can send data to a RudderStack Webhook source\n\nRudderStack offers a suite of versatile open-source SDKs designed to integrate seamlessly with your web, mobile, and server-side applications. These SDKs enable developers to reliably track and manage event data across various platforms, ensuring a secure and reliable data platform that scales with your technology stack.\n\n### Web SDKs\n\nRudderStack provides open-source SDKs for robust and reliable web data collection. Our Web SDKs allow you to capture and send high-fidelity customer event data from your websites and web apps without compromising on site performance.\n\n*   [AMP](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-amp-analytics/)\n*   [JavaScript](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/)\n\n### Mobile SDKs\n\nUse the native RudderStack SDKs for the iOS, Android, and cross-platform development frameworks allowing you to harness device-specific functionalities and optimize mobile user engagement.\n\n*   [Android](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/)\n*   [Cordova](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-cordova-sdk/)\n*   [Flutter](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/)\n*   [iOS](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/)\n*   [React Native](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-react-native-sdk/)\n*   [Unity](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-unity-sdk/)\n\n### Server SDKs\n\nUse the server-side SDKs to track event data from your backend applications and ensure secure, comprehensive event tracking for your server-side transactions with the ability to monitor system health at every step.\n\n*   [.NET](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-dotnet-sdk/)\n*   [Go](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-go-sdk/)\n*   [Java](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-java-sdk/)\n*   [Node.js](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/)\n*   [PHP](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-php-sdk/)\n*   [Python](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-python-sdk/)\n*   [Ruby](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ruby-sdk/)\n*   [Rust](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-rust-sdk/)\n\n### Cloud App sources\n\nIngest event data from your cloud apps and route it to the specified destinations with ease. RudderStack’s intelligent data pipelines can handle high volumes of data inflow, ensuring that your event data is collected seamlessly from various cloud applications and services.\n\n*   [Adjust](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/adjust/)\n*   [AppsFlyer](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/appsflyer/)\n*   [App Center](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/appcenter/)\n*   [Auth0](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/auth0/)\n*   [Braze](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/braze-currents/)\n*   [Canny](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/canny/)\n*   [ClickUp](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/clickup/)\n*   [Customer.io](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/customerio/)\n*   [Extole](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/extole/)\n*   [Formsort](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/formsort/)\n*   [Gainsight PX](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/gainsight-px/)\n*   [Iterable](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/iterable/)\n*   [Looker](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/looker/)\n*   [Mailjet](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/mailjet/)\n*   [Mailmodo](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/mailmodo/)\n*   [Monday](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/monday/)\n*   [MoEngage](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/moengage/)\n*   [Olark](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/olark/)\n*   [Ortto](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/ortto/)\n*   [PagerDuty](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/pagerduty/)\n*   [Pipedream](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/pipedream/)\n*   [PostHog](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/posthog/)\n*   [Refiner](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/refiner/)\n*   [RevenueCat](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/revenuecat/)\n*   [SatisMeter](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/satismeter/)\n*   [Segment](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/segment/)\n*   [Shopify](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/shopify/)\n*   [Signl4](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/signl4/)\n*   [Slack](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/slack/)\n\n## Event Stream destinations\n\nOnce events are ingested, you can forward them to the 200+ destinations in our integrations library, or to your own custom destinations (using our Webhook destination).\n\nBrowse the [destination integration library](https://www.rudderstack.com/docs/destinations/overview/).\n\n## Advanced features and use cases\n\nThis section covers two important advanced use cases you can implement on your Event Stream data - **Transformations** and **Identity Resolution**.\n\n### Transformations\n\nRudderStack can [transform](https://www.rudderstack.com/docs/transformations/overview/) events in real-time using Python or JavaScript to customize your data flows. It can also ensure data integrity and consistency across your pipelines with centralized tracking plans that provide full visibility into your customer data’s journey.\n\n### User identification and identity resolution\n\nYou can also assign unique IDs for anonymous users via [Identity Stitching](https://www.rudderstack.com/docs/profiles/core-concepts/identity-stitching/) and reconcile unified customer [Profiles](https://www.rudderstack.com/docs/profiles/overview/) in your data warehouse.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Event Stream | RudderStack Docs",
  "description": "Ingest your event data into RudderStack using cloud apps and SDKs.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/data-pipelines/event-stream/quickstart/",
  "markdown": "# Event Stream Quickstart | RudderStack Docs\n\nGet event data flowing from your website or app in less than 15 minutes.\n\n* * *\n\n*     10 minute read  \n    \n\nRudderStack’s Event Stream pipelines help you collect behavioral events and automatically send them to other tools in your stack.\n\nFor simple use cases, you can get data flowing in less than 15 minutes by following these three steps:\n\n1.  **Install a RudderStack SDK** in your website or app.\n2.  **Instrument API calls** to identify users and capture user actions (like page views and button clicks).\n3.  **Connect destination integrations** to stream events to business tools and your warehouse automatically.\n\n[![RudderStack Event Stream Quickstart - 3 steps to collecting and integrating events](https://www.rudderstack.com/docs/images/get-started/event-stream-quick-start-3-steps.png)](https://www.rudderstack.com/docs/images/get-started/event-stream-quick-start-3-steps.png)\n\nData teams often need to collaborate with front-end and back-end engineers to get RudderStack SDKs installed and event API calls instrumented.\n\n[Step 1](#how-data-engineers-can-get-the-javascript-sdk-code) and [Step 2](#step-3-instrument-api-calls) of this guide include helpful information for data engineers and software engineers who are collaborating on initial installation and instrumentation.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> You can use the [Event Playground app](#step-2-verify-data-flow) if you want to test events flowing through RudderStack **without** any instrumentation.\n\n## Step 1: Install the JavaScript SDK\n\nIn most cases, installing one of RudderStack’s SDKs in a dev environment takes a front-end or back-end developer less than 10 minutes.\n\nStarting with the JavaScript SDK is recommended for the following reasons:\n\n*   The JavaScript SDK captures rich, client-side context in the payloads that help data engineers understand the full event schema.\n*   Front-end updates are often faster to implement and deploy than back-end updates.\n\nYou can also see our Quickstart guides for [mobile](https://www.rudderstack.com/docs/data-pipelines/event-stream/quickstart/mobile-quickstart/) and [server-side](https://www.rudderstack.com/docs/data-pipelines/event-stream/quickstart/server-side-quickstart/) SDKs.\n\n### How data engineers can get the JavaScript SDK code\n\n1.  Sign in to your RudderStack account and click **\\+ Add source** in the default **Connections** view.\n\n[![Add source](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)\n\n2.  Select **JavaScript**.\n\n[![JavaScript source](https://www.rudderstack.com/docs/images/get-started/quickstart/js-sdk.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/js-sdk.webp)\n\n3.  Copy the installation snippet under the **Setup** tab (this snippet contains the [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) and [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) , which ensure events are sent to the correct source).\n\n[![JavaScript SDK snippet](https://www.rudderstack.com/docs/images/get-started/quickstart/js-sdk-snippet.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/js-sdk-snippet.webp)\n\n4.  Send the snippet to your front-end development team.\n\n### How front-end engineers can install the JavaScript SDK\n\nYour data engineer should have provided you a code snippet per the above steps. To install, paste the code into your website’s `<head>` section.\n\nThe snippet you received already contains the [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) and [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) needed to route the event to the correct RudderStack source.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The implicit `page` call at the end of the snippet (in case of the previous JavaScript SDK versions) is removed in [JavaScript SDK v3](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/). You will have to [instrument it separately](#instrumenting-page-calls).\n\n## Step 2: Verify data flow\n\nOnce you have installed the JavaScript SDK, you can use RudderStack’s Event Playground app to verify data flow **without** any instrumentation.\n\nTo send test events to your account:\n\n1.  Sign in to the [RudderStack dashboard](https://app.rudderstack.com/). Note the [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) at the top of the default **Connections** page.\n\n[![Data plane URL](https://www.rudderstack.com/docs/images/general/data-plane-url.webp)](https://www.rudderstack.com/docs/images/general/data-plane-url.webp)\n\n2.  Set up a [source](https://www.rudderstack.com/docs/dashboard-guides/sources/#add-a-source) and note its [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) .\n\n[![JavaScript SDK source write key](https://www.rudderstack.com/docs/images/get-started/quickstart/js-write-key.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/js-write-key.webp)\n\n3.  Click **Use My Account** in the Event Playground app and specify the write key and data plane URL.\n4.  Click **Save**.\n5.  Select the required **API Method** from the dropdown, edit the relevant fields or traits/properties, and click **Send to my account**.\n6.  To verify the data flow, go to the [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/#view-source-live-events) viewer of your source.\n\nSee [Step 4: Check live events](#step-4-check-live-events) for more information.\n\n## Step 3: Instrument API calls\n\nThe RudderStack JavaScript SDK follows a [standard event spec](https://www.rudderstack.com/docs/event-spec/standard-events/). It helps you plan your event data and supports various API calls for tracking your website events - these include `identify`, `track`, `screen`, `group`, `alias`, and `reset` calls.\n\nThe best place to start instrumentation is with `page` calls, which help you track pages your unique users visit.\n\n### Instrumenting `page` calls\n\n[`page`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#page) events help you in analyzing customer journeys in your warehouse or data lake. You can also forward them directly to downstream tools like Google Analytics or Amplitude for real-time marketing and product analytics.\n\nA sample `page` call is shown below:\n\nFor other frameworks and single page apps, run the `page` call whenever the URL changes. Here’s an example of how to do this in Next.js:\n\n```\n'use client'\n\nimport { useEffect } from 'react'\nimport { usePathname } from 'next/navigation'\n\nexport const RudderAnalytics = () => {\n  const pathname = usePathname()\n\n  useEffect(() => {\n     window.rudderanalytics.page()\n  }, [pathname])\n\n}\n```\n\nIf you’re running a Jamstack setup, see the [Jamstack setup guides](https://www.rudderstack.com/docs/user-guides/how-to-guides/rudderstack-jamstack-integration/) for framework-specific instructions.\n\n### Instrumenting additional API calls\n\nApart from `page` calls, [`track`](#track-events) and [`identify`](#identify-events) are the most commonly used API calls.\n\n*   `track` events represent user actions, like button clicks.\n*   `identify` calls let you identify users, assign them traits (like name and email), and associate the user to their actions.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To see an example of instrumentation in the context of a full HTML page, see the [full HTML page example](#full-html-page-example) where the SDK is installed and `track` and `identify` calls are instrumented.\n\n#### **Track events**\n\nTo implement [`track`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#track) calls, you need to listen for the desired user action, then fire a `track` call when it happens. You can describe these events by adding [propertiesProperties are additional contextual information you can add to a `track` call to further describe the action a user takes.](https://www.rudderstack.com/docs/resources/glossary/#properties) to the payload.\n\nHere is an example of basic, inline front-end code that fires a `track` call named `click` when a user clicks on an element. The properties are `target_url` and `link_text`.\n\n```\n<a\n  href=\"/foo\"\n  onclick=\"window.rudderanalytics.track('click', {\n  target_url: '/foo',\n  link_text: 'Bar'\n  })\n  \">\nBar\n</a>\n```\n\n#### **Identify events**\n\n[`identify`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#identify) calls are typically fired when a user performs an identifying action like making a purchase or submitting a form. `identify` calls also associate a known user with their actions (even if previously anonymous). You can describe users with attributes by adding [traitsTraits are attributes that describe a user. They can be added to an identify call in the `traits` object. Some examples of traits include age, gender, or some specific details - for example, a user’s product plan (free, basic, premium).](https://www.rudderstack.com/docs/resources/glossary/#traits) to the payload.\n\nHere is an example of basic, inline front-end code that fires an `identify` call on form submit. The `traits` are `company`, `name`, and `email`.\n\n```\n<form>\n  <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"name\" />\n  <input type=\"text\" name=\"company\" id=\"company\" placeholder=\"company\" />\n  <input type=\"text\" name=\"email\" id=\"email\" placeholder=\"email\" />\n  <input\n    type=\"submit\"\n    onclick=\"\n    window.rudderanalytics.identify(\n    document.getElementById('email').value, \n    { company: document.getElementById('company').value, \n    name: document.getElementById('name').value,\n    email: document.getElementById('email').value \n    }); return false;\" />\n</form>\n```\n\n## Step 4: Check live events\n\nOnce software engineers have installed the SDK and instrumented events, the data team can verify the event flow into RudderStack. Then, they can connect destination integrations to forward events to the tools in their stack automatically.\n\nTo see the live events, go to your JavaScript source from the **Connections** view and click the **Live Events** button in the top right of your screen.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> There will be a delay before you see events in the **Live Events** view. RudderStack does not store any data; it temporarily opens a gateway between the control plane and data plane to show you the live events. The delays usually last only a few seconds but on the [RudderStack Cloud Free](https://rudderstack.com/pricing/) plan, they can last up to one minute.\n\n[![Live Events](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events.webp)](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events.webp)\n\nAfter a few seconds, you will see events populating the feed.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you do not see events in the **Live Events** view, then there is likely a problem with your instrumentation.\n\n## Step 5: Connect destination integrations\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> RudderStack supports 200+ integrations including data warehouses and data lakes, marketing platforms, CRMs, analytics tools, streaming platforms, and more. You can see the full list of supported destination integrations [here](https://www.rudderstack.com/docs/destinations/overview/).\n\nTo add a destination in RudderStack:\n\n1.  Click **\\+ Add destination** in the default **Connections** view.\n\n[![Add destination](https://www.rudderstack.com/docs/images/get-started/quickstart/add-destination.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-destination.webp)\n\n2.  From the list, select a destination where you want to route your event data. Here are some popular destinations to help you get started:\n\n| Category | Destination |\n| --- | --- |\n| Analytics | [Amplitude](https://www.rudderstack.com/docs/destinations/streaming-destinations/amplitude/), [Mixpanel](https://www.rudderstack.com/docs/destinations/streaming-destinations/mixpanel/), [GA4](https://www.rudderstack.com/docs/destinations/streaming-destinations/google-analytics-4/) |\n| CRM | [HubSpot](https://www.rudderstack.com/docs/destinations/streaming-destinations/hubspot/), [Salesforce](https://www.rudderstack.com/docs/destinations/streaming-destinations/salesforce/) |\n| Marketing | [Braze](https://www.rudderstack.com/docs/destinations/streaming-destinations/braze/), [Mailchimp](https://www.rudderstack.com/docs/destinations/streaming-destinations/mailchimp/) |\n| Object storage | [Amazon S3](https://www.rudderstack.com/docs/destinations/streaming-destinations/amazon-s3/), [Redis](https://www.rudderstack.com/docs/destinations/streaming-destinations/redis/) |\n| Streaming platforms | [Apache Kafka](https://www.rudderstack.com/docs/destinations/streaming-destinations/kafka/), [Amazon Kinesis](https://www.rudderstack.com/docs/destinations/streaming-destinations/amazon-kinesis/) |\n| Warehouses | [Snowflake](https://www.rudderstack.com/docs/destinations/warehouse-destinations/snowflake/), [BigQuery](https://www.rudderstack.com/docs/destinations/warehouse-destinations/bigquery/), [Redshift](https://www.rudderstack.com/docs/destinations/warehouse-destinations/redshift/) |\n| Data lakes & lakehouses | [Databricks](https://www.rudderstack.com/docs/destinations/warehouse-destinations/delta-lake/), [Google Cloud Storage](https://www.rudderstack.com/docs/destinations/warehouse-destinations/gcs-datalake/) |\n\n3.  Set up the destination by configuring the connection settings. For details, see the [destination-specific documentation](https://www.rudderstack.com/docs/destinations/overview/).\n\n## Next steps\n\nThis section contains some optional but helpful steps that leverage RudderStack’s most popular features for transforming events and debugging problems.\n\n### Add event transformations\n\nOne of RudderStack’s most-used features is [Event Transformations](https://www.rudderstack.com/docs/transformations/overview/), which you can use to operate on the payloads flowing through RudderStack. You can use it for:\n\n*   Sampling or filtering events.\n*   Removing sensitive user PII from your events.\n*   Enriching events using static logic, an external API, and more.\n\nTo use a transformation:\n\n1.  In the left sidebar, go to **Collect** > **Transformations**. Then, click **Create Transformation**.\n\n[![Create transformation](https://www.rudderstack.com/docs/images/get-started/quickstart/create-transformation.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/create-transformation.webp)\n\n2.  Select a [transformation template](https://www.rudderstack.com/docs/transformations/templates/) from the list depending on your use case. To create a transformation from scratch, click **Custom transformation**.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Transformation templates contain prepopulated, ready-to-use transformation logic, which you can apply to your events before sending them to the destination. You can also modify the code as per your needs.\n\n[![Choose a template](https://www.rudderstack.com/docs/images/features/transformation-templates-2.webp)](https://www.rudderstack.com/docs/images/features/transformation-templates-2.webp)\n\n3.  Verify if your transformation works as expected by clicking the **Run Test** button.\n\n[![Testing a transformation](https://www.rudderstack.com/docs/images/features/run-test-transformations.webp)](https://www.rudderstack.com/docs/images/features/run-test-transformations.webp)\n\n4.  Click **Save** to save your transformation.\n5.  Go to the **Connections** tab of your transformation and connect it to the destination you set up above. See [Connect transformation to destination](https://www.rudderstack.com/docs/transformations/manage/#connect-transformation-to-destination) for more information.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> When you add a transformation and connect it to a destination, RudderStack does the following:\n> \n> 1.  Tracks events at the source.\n> 2.  Applies the transformation logic to your events.\n> 3.  Converts the events in a format the destination expects - RudderStack does this internally and requires no user intervention.\n> 4.  Sends the transformed events to your destination.\n\n### Debugging\n\nRudderStack gives you complete observability into your events and the ability to debug errors that might occur in case of event failures. It provides the [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) feature, where you can:\n\n*   Verify your instrumentation.\n*   Get a real-time view of the events flowing from your sources to the connected destinations.\n*   Identify and debug any errors at the source, destination, or transformation level and narrow down the root cause of the issue.\n\n#### **Source Live Events viewer**\n\nThis is helpful to verify if RudderStack is receiving the source events at all. The payload you see in this viewer is the raw event payload collected from your website.\n\n[![Live Events](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events.webp)](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events.webp)\n\n[![Source live events details](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events-details.webp)](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events-details.webp)\n\n#### **Transformation Live Events viewer**\n\nThis viewer will give you a before and after snapshot of the event going into your user transformation and what it looks like afterward. It also notifies you about any dropped events or errors during the transformation, along with the details.\n\n[![Transformation live events](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events.webp)](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events.webp)\n\n[![Transformation live events error message](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events-errors.webp)](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events-errors.webp)\n\n#### **Destination Live Events viewer**\n\nThis viewer shows you what the payload looks like when RudderStack sends it to the destination. You can also see the detailed error message if the destination returns an error.\n\n[![Payload to the destination](https://www.rudderstack.com/docs/images/rs-cloud/destination-live-events-details.webp)](https://www.rudderstack.com/docs/images/rs-cloud/destination-live-events-details.webp)\n\nSee the [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) documentation for more details.\n\n## Full HTML page example\n\nHere’s an example of the RudderStack JavaScript SDK installed on an HTML page with `track` and `identify` calls instrumented inline.\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <script type=\"text/javascript\">\n  // Replace the <script> tag with your JavaScript SDK snippet.\n  </script>\n  <title>RudderStack Example</title>\n</head>\n\n<body>\n    <form>\n        <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"name\" />\n        <input type=\"text\" name=\"company\" id=\"company\" placeholder=\"company\" />\n        <input type=\"text\" name=\"email\" id=\"email\" placeholder=\"email\" />\n        <input\n          type=\"submit\"\n          onclick=\"\n          window.rudderanalytics.identify(\n          document.getElementById('email').value, \n          { \n            company: document.getElementById('company').value, \n            name: document.getElementById('name').value,\n            email: document.getElementById('email').value \n          }); return false;\" />\n    </form>\n    <a\n        href=\"/foo\"\n        onclick=\"window.rudderanalytics.track('click', {\n        target_url: '/foo',\n        link_text: 'Bar'\n        })\n        \">\n        Bar\n    </a>\n</body>\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Event Stream Quickstart | RudderStack Docs",
  "description": "Get event data flowing from your website or app in less than 15 minutes.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/formsort/",
  "markdown": "# Formsort | RudderStack Docs\n\nIngest your event data from Formsort into RudderStack.\n\n* * *\n\n*     2 minute read  \n    \n\n[Formsort](https://formsort.com/) platform provides tools for businesses and organizations to create user-friendly forms and surveys. You can use these forms for lead generation, customer feedback, event registration, job applications, etc.\n\n## Getting started\n\nFollow these steps to set up your Formsort source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Formsort**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Formsort source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![Formsort source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/formsort-source-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/formsort-source-webhook.webp)\n\n4.  Log in to your [Formsort account](https://studio.formsort.com/auth/login).\n5.  [Set up your webhook integration](https://docs.formsort.com/handling-data/integration-reference/webhooks#setting-up-the-webhook-integration), add the **Webhook URL** obtained in step 3, and save the configuration:\n\n[![Formsort source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/formsort-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/formsort-webhook.webp)\n\n## Event transformation\n\nBased on the [webhook posting frequency](https://docs.formsort.com/handling-data/integration-reference/webhooks#posting-frequency) you choose while setting up the webhook integration in Formsort, RudderStack sets the event name as `FlowFinalized` when the flow is finalized. Otherwise, it sets the event name as `FlowLoaded`.\n\nRudderStack ingests the Formsort events after converting them into the RudderStack event format. It also maps the following properties from the Formsort event payload to the RudderStack properties:\n\n| Formsort property | RudderStack property |\n| --- | --- |\n| `created_at` | `originalTimestamp` |\n| `responder_uuid` | `userId` |\n| `answers` | `properties` |\n| `flow_label` | `context.page.title` |\n| `variant_label` | `context.variantLabel` |\n| `variant_uuid` | `context.variantUuid` |\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from Formsort source and creates the resulting payload.\n\n### FlowFinalized event\n\nA sample payload sent by Formsort when `finalized` is `true` is shown below:\n\n```\n{\n  \"answers\": {\n    \"yes\": true,\n    \"enter_email\": \"testUser@rudderstack.com\",\n    \"enter_name\": \"2000-11-25\",\n    \"yes_or_no\": false\n  },\n  \"responder_uuid\": \"be2f3a8d-8aa4-4a01-8855-8e464a752b52\",\n  \"flow_label\": \"new-flow-2022-11-25\",\n  \"variant_label\": \"main\",\n  \"variant_uuid\": \"0828efa7-7215-4e7d-a7ab-6c1079010cea\",\n  \"finalized\": true,\n  \"created_at\": \"2022-11-25T14:36:58+00:00\"\n}\n```\n\nRudderStack transforms the above payload into the following [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) payload with event name as `FlowFinalized`:\n\n```\n{\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"integration\": {\n      \"name\": \"Formsort\"\n    },\n    \"page\": {\n      \"title\": \"new-flow-2022-11-25\"\n    },\n    \"variantLabel\": \"main\",\n    \"variantUuid\": \"0828efa7-7215-4e7d-a7ab-6c1079010cea\"\n  },\n  \"integrations\": {\n    \"Formsort\": false\n  },\n  \"type\": \"track\",\n  \"anonymousId\": \"7bd86cd0-df65-4e3e-bddd-3ba4da17fbb3\",\n  \"userId\": \"be2f3a8d-8aa4-4a01-8855-8e464a752b52\",\n  \"originalTimestamp\": \"2022-11-25T14:36:58+00:00\",\n  \"properties\": {\n    \"yes\": true,\n    \"enter_email\": \"testUser@rudderstack.com\",\n    \"enter_name\": \"2000-11-25\",\n    \"yes_or_no\": false\n  },\n  \"event\": \"FlowFinalized\"\n}\n```\n\n### FlowLoaded event\n\nA sample payload sent by Formsort when `finalized` is `false` is shown below:\n\n```\n{\n  \"answers\": {\n    \"yes\": true,\n    \"enter_email\": \"test@user.com\",\n    \"enter_name\": \"2022-11-17\",\n    \"yes_or_no\": false\n  },\n  \"responder_uuid\": \"66a8e5bb-67e1-47ec-b55f-a26fd4be2dc7\",\n  \"flow_label\": \"new-flow-2022-11-25\",\n  \"variant_label\": \"main\",\n  \"variant_uuid\": \"0828efa7-7215-4e7d-a7ab-6c1079010cea\",\n  \"finalized\": false,\n  \"created_at\": \"2022-11-25T14:41:22+00:00\"\n}\n```\n\nRudderStack transforms the above payload into the following [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) payload with event name as `FlowLoaded`:\n\n```\n{\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"integration\": {\n      \"name\": \"Formsort\"\n    },\n    \"page\": {\n      \"title\": \"new-flow-2022-11-25\"\n    },\n    \"variantLabel\": \"main\",\n    \"variantUuid\": \"0828efa7-7215-4e7d-a7ab-6c1079010cea\"\n  },\n  \"integrations\": {\n    \"Formsort\": false\n  },\n  \"type\": \"track\",\n  \"anonymousId\": \"448a42fd-18e5-4cdf-859b-5b99aceaf474\",\n  \"userId\": \"be2f3a8d-8aa4-4a01-8855-8e464a752b52\",\n  \"originalTimestamp\": \"2022-11-25T14:36:58+00:00\",\n  \"properties\": {\n    \"yes\": true,\n    \"enter_email\": \"testUser@rudderstack.com\",\n    \"enter_name\": \"2000-11-25\",\n    \"yes_or_no\": false\n  },\n  \"event\": \"FlowLoaded\"\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Formsort | RudderStack Docs",
  "description": "Ingest your event data from Formsort into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/",
  "markdown": "# Cloud Extract (ETL) Sources | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Cloud Extract (ETL) Sources | RudderStack Docs",
  "description": "Build efficient ETL pipelines by sending data from various cloud apps to your warehouse.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/data-pipelines/event-stream/quickstart/mobile-quickstart/",
  "markdown": "# Mobile Quickstart | RudderStack Docs\n\nGet event data flowing from your mobile app in less than 15 minutes.\n\n* * *\n\n*     8 minute read  \n    \n\nThis quickstart guide walks through code examples using the [iOS SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/). It will help you get started with using [RudderStack mobile SDKs](https://www.rudderstack.com/docs/sources/event-streams/sdks/#mobile) to stream events from your mobile app to other tools in your stack.\n\nFor simple use cases, you can get data flowing in less than 15 minutes by following these three steps:\n\n1.  **Install a RudderStack SDK** in your mobile app.\n2.  **Instrument API calls** to identify users and capture user actions (like page views and button clicks).\n3.  **Connect destination integrations** to stream events to business tools and your warehouse automatically.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> [Sign up](https://app.rudderstack.com/signup) for a free RudderStack Cloud account before you get started.\n\n## Step 1: Install the iOS SDK\n\nIn most cases, installing one of RudderStack’s [mobile SDKs](https://www.rudderstack.com/docs/sources/event-streams/sdks/#mobile) takes a developer less than 10 minutes.\n\n### How data engineers can get the iOS SDK code\n\n1.  Sign in to your RudderStack account and click **\\+ Add source** in the default **Connections** view.\n\n[![Add source](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)\n\n2.  Select **iOS**.\n\n[![Add source](https://www.rudderstack.com/docs/images/get-started/quickstart/add-mobile-source.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-mobile-source.webp)\n\n3.  Copy the installation snippet under the **Setup** tab (this snippet contains the [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) and [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) , which ensure events are sent to the correct source).\n\n[![iOS SDK snippet](https://www.rudderstack.com/docs/images/get-started/quickstart/ios-snippet.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/ios-snippet.webp)\n\n4.  Send the snippet to your mobile development team.\n\n### How mobile developers can install the iOS SDK\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Before installing the iOS SDK, make sure to first initialize the `Podfile` within your app by running `pod init`.\n> \n> If you are using Swift Package Manager (SPM) to install the iOS SDK, see these [instructions](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/#swift-package-manager).\n\n1.  Install the iOS SDK using [Cocoapods](https://cocoapods.org/pods/Rudder) by adding the iOS SDK to your application’s `Podfile`:\n\n2.  Run the following command to install the SDK and the required dependencies:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Include the following code in all `.m` and `.h` files where you want to reference or use the RudderStack SDK classes.\n> \n> ```\n> #import <Rudder/Rudder.h>\n> ```\n\n#### **Initialize the SDK**\n\nYour data engineer should have provided you the [iOS SDK snippet](#how-data-engineers-can-get-the-ios-sdk-code). Follow these steps to initialize the SDK:\n\n1.  Open your app’s `AppDelegate.m` file - the entry point of the app.\n2.  Place the initialization snippet under the `didFinishLaunchingWithOptions` method.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can choose to place the snippet under any method in any other file based on your requirement.\n\nA sample initialization snippet is shown below:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n```\nlet builder: RSConfigBuilder = RSConfigBuilder()\n    .withDataPlaneUrl(DATA_PLANE_URL)\nRSClient.getInstance(WRITE_KEY, config: builder.build())\n```\n\nFor more information, see the full [iOS SDK documentation](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/).\n\n## Step 2: Instrument API calls\n\nAll RudderStack mobile SDKs follow a [standard event spec](https://www.rudderstack.com/docs/event-spec/standard-events/). It helps you plan your event data and supports various API calls for tracking your mobile app events - these include `identify`, `track`, `screen`, `group`, `alias`, and `reset` calls.\n\nIn addition, the mobile SDKs track the following [application lifecycle events](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/) automatically:\n\n*   [`Application Installed`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-installed)\n*   [`Application Updated`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-updated)\n*   [`Application Opened`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-opened)\n*   [`Application Backgrounded`](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/#application-backgrounded)\n\nMost users start by implementing `track` and `identify` calls.\n\nYou can use **`track` calls** to record user activities like adding a product to a cart or wishlist, tapping a button on the app, selecting an option, etc. You can describe the `track` events with [propertiesProperties are additional contextual information you can add to a `track` call to further describe the action a user takes.](https://www.rudderstack.com/docs/resources/glossary/#properties) .\n\nHere is an example of a `track` call named `Product Added`. The properties are `price` and `quantity`:\n\n```\n[[RSClient sharedInstance] track:@\"Product Added\" properties:@{\n    @\"price\" : @\"23.99\",\n    @\"quantity\" : @\"2\"\n}];\n```\n\n**`identify` calls** are typically fired when a user performs an identifying action like creating an account or making a purchase. `identify` calls also associate a known user with their actions (even if previously anonymous). You can describe users with attributes by adding [traitsTraits are attributes that describe a user. They can be added to an identify call in the `traits` object. Some examples of traits include age, gender, or some specific details - for example, a user’s product plan (free, basic, premium).](https://www.rudderstack.com/docs/resources/glossary/#traits) to the payload.\n\nHere is an example of an `identify` call. The `traits` are `firstName`, `lastName`, `email`, and `country`:\n\n```\n[[RSClient sharedInstance] identify:@\"user_id\"\ntraits:@{@\"firstName\": @\"Alex\",\n        @\"lastName\": @\"Keener\",\n        @\"email\": @\"alex@example.com\",\n        @\"country\" : @\"US\",\n}\n];\n```\n\nSee the [RudderStack iOS SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/) documentation for more information on the other supported API calls.\n\n## Step 3: Verify data flow and connect destination integrations\n\nOnce software engineers have installed the SDK and instrumented events, the data team can verify the event flow into RudderStack. Then, they can connect destination integrations to forward events to the tools in their stack automatically.\n\n### 1\\. Verify data flow for your iOS source\n\nBefore connecting destinations, verify that events are flowing into RudderStack by checking the **Live Events** viewer in your iOS source.\n\nTo see live events, go to your iOS source from the **Connections** view and click the **Live Events** button in the top right of your screen.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> There will be a delay before you see events in the **Live Events** view. RudderStack doesn’t store any data; it temporarily opens a gateway between the control plane and data plane to show you the live events. The delays usually last only a few seconds but on the [RudderStack Cloud Free](https://rudderstack.com/pricing/) plan, they can last up to one minute.\n\n[![Live Events](https://www.rudderstack.com/docs/images/get-started/quickstart/source-live-events-ios.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/source-live-events-ios.webp)\n\nAfter a few seconds, you will see events populating the feed.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you do not see events in the **Live Events** view, then there is likely a problem with your instrumentation.\n\n### 2\\. Connect destination integrations\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> RudderStack supports 200+ integrations including data warehouses and data lakes, marketing platforms, CRMs, analytics tools, streaming platforms, and more. You can see the full list of supported destination integrations [here](https://www.rudderstack.com/docs/destinations/overview/).\n\nTo add a destination in RudderStack:\n\n1.  Click **\\+ Add destination** in the default **Connections** view.\n\n[![Add destination](https://www.rudderstack.com/docs/images/get-started/quickstart/add-destination.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-destination.webp)\n\n2.  From the list, select your preferred destination where you want to route the event data. Here are some popular destinations to help you get started:\n\n| Category | Destination |\n| --- | --- |\n| Analytics | [Amplitude](https://www.rudderstack.com/docs/destinations/streaming-destinations/amplitude/), [Mixpanel](https://www.rudderstack.com/docs/destinations/streaming-destinations/mixpanel/), [GA4](https://www.rudderstack.com/docs/destinations/streaming-destinations/google-analytics-4/) |\n| CRM | [HubSpot](https://www.rudderstack.com/docs/destinations/streaming-destinations/hubspot/), [Salesforce](https://www.rudderstack.com/docs/destinations/streaming-destinations/salesforce/) |\n| Marketing | [Braze](https://www.rudderstack.com/docs/destinations/streaming-destinations/braze/), [Mailchimp](https://www.rudderstack.com/docs/destinations/streaming-destinations/mailchimp/) |\n| Object storage | [Amazon S3](https://www.rudderstack.com/docs/destinations/streaming-destinations/amazon-s3/), [Redis](https://www.rudderstack.com/docs/destinations/streaming-destinations/redis/) |\n| Streaming platforms | [Apache Kafka](https://www.rudderstack.com/docs/destinations/streaming-destinations/kafka/), [Amazon Kinesis](https://www.rudderstack.com/docs/destinations/streaming-destinations/amazon-kinesis/) |\n| Warehouses | [Snowflake](https://www.rudderstack.com/docs/destinations/warehouse-destinations/snowflake/), [BigQuery](https://www.rudderstack.com/docs/destinations/warehouse-destinations/bigquery/), [Redshift](https://www.rudderstack.com/docs/destinations/warehouse-destinations/redshift/) |\n| Data lakes & lakehouses | [Databricks](https://www.rudderstack.com/docs/destinations/warehouse-destinations/delta-lake/), [Google Cloud Storage](https://www.rudderstack.com/docs/destinations/warehouse-destinations/gcs-datalake/) |\n\n3.  Set up the destination by configuring the connection settings. For details, see the destination-specific documentation.\n\n## Next steps\n\nThis section contains some optional, but helpful steps that leverage RudderStack’s most popular features for transforming events and debugging problems.\n\n### Add event transformations\n\nOne of RudderStack’s most-loved features is [Event Transformations](https://www.rudderstack.com/docs/transformations/overview/), which you can use to operate on the payloads flowing through RudderStack. You can use it for:\n\n*   Sampling or filtering events.\n*   Removing sensitive user PII from your events.\n*   Enriching events using static logic, an external API, and more.\n\nTo use a transformation:\n\n1.  In the left sidebar, go to **Collect** > **Transformations**. Then, click **Create Transformation**.\n\n[![Create transformation](https://www.rudderstack.com/docs/images/get-started/quickstart/create-transformation.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/create-transformation.webp)\n\n2.  Select a [transformation template](https://www.rudderstack.com/docs/transformations/templates/) from the list depending on your use case. To create a transformation from scratch, click **Custom transformation**.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Transformation templates contain prepopulated, ready-to-use transformation logic, which you can apply to your events before sending them to the destination. You can also modify the code as per your needs.\n\n[![Choose a template](https://www.rudderstack.com/docs/images/features/transformation-templates-2.webp)](https://www.rudderstack.com/docs/images/features/transformation-templates-2.webp)\n\n3.  Verify if your transformation works as expected by clicking the **Run Test** button.\n\n[![Testing a transformation](https://www.rudderstack.com/docs/images/features/run-test-transformations.webp)](https://www.rudderstack.com/docs/images/features/run-test-transformations.webp)\n\n4.  Click **Save** to save your transformation.\n5.  Go to the **Connections** tab of your transformation and connect it to the destination you set up above. See [Connect transformation to destination](https://www.rudderstack.com/docs/transformations/manage/#connect-transformation-to-destination) for more information.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> When you add a transformation and connect it to a destination, RudderStack does the following:\n> \n> 1.  Tracks events at the source.\n> 2.  Applies the transformation logic to your events.\n> 3.  Converts the events in a format the destination expects - RudderStack does this internally and requires no user intervention.\n> 4.  Sends the transformed events to your destination.\n\n### Debugging\n\nRudderStack gives you complete observability into your events and the ability to debug errors that might occur in case of event failures. It provides the [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) feature, where you can:\n\n*   Verify your instrumentation.\n*   Get a real-time view of the events flowing from your sources to the connected destinations.\n*   Identify and debug any errors at the source, destination, or transformation level and narrow down the root cause of the issue.\n\n#### **Source Live Events viewer**\n\nThis is helpful to verify if RudderStack is receiving the source events at all. The payload you see in this viewer is the raw event payload collected from your website.\n\n[![Live Events](https://www.rudderstack.com/docs/images/get-started/quickstart/source-live-events-ios.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/source-live-events-ios.webp)\n\n[![Source live events details](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events-details.webp)](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events-details.webp)\n\n#### **Transformation Live Events viewer**\n\nThis viewer will give you a before and after snapshot of the event going into your user transformation and what it looks like afterward. It also notifies you about any dropped events or errors during the transformation, along with the details.\n\n[![Transformation live events](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events.webp)](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events.webp)\n\n[![Transformation live events error message](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events-errors.webp)](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events-errors.webp)\n\n#### **Destination Live Events viewer**\n\nThis viewer shows you what the payload looks like when RudderStack sends it to the destination. You can also see the detailed error message if the destination returns an error.\n\n[![Payload to the destination](https://www.rudderstack.com/docs/images/rs-cloud/destination-live-events-details.webp)](https://www.rudderstack.com/docs/images/rs-cloud/destination-live-events-details.webp)\n\nSee the [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) documentation for more details.\n\n## Support\n\nFor any questions on using RudderStack, you can:\n\n*   Start a conversation in our [Community Slack](https://rudderstack.com/join-rudderstack-slack-community).\n*   Drop an email to [RudderStack support](mailto:support@rudderstack.com).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Mobile Quickstart | RudderStack Docs",
  "description": "Get event data flowing from your mobile app in less than 15 minutes.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/",
  "markdown": "# SDKs | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "SDKs | RudderStack Docs",
  "description": "Setup guides for integrating RudderStack SDKs with your web, mobile, and server-side platforms.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-go-sdk/",
  "markdown": "# Go SDK | RudderStack Docs\n\nUse RudderStack’s Go SDK to send server-side events to various destinations.\n\n* * *\n\n*     8 minute read  \n    \n\nRudderStack’s Go SDK lets you track and send the events from your Go applications to the specified destinations.\n\nRefer to the SDK’s [GitHub codebase](https://github.com/rudderlabs/analytics-go) for the implementation-specific details.\n\n[![Github Badge](https://img.shields.io/github/v/release/rudderlabs/analytics-go.svg?label=GitHub)](https://github.com/rudderlabs/analytics-go)\n\n## SDK setup requirements\n\n1.  Sign up to [RudderStack Cloud](https://app.rudderstack.com/signup).\n2.  [Set up a Go source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in your dashboard. You should be able to see a **write key** for this source:\n\n[![Go source write key](https://www.rudderstack.com/docs/images/event-stream-sources/go-sdk-write-key.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/go-sdk-write-key.webp)\n\nYou will also need a data plane URL. Refer to the [Dashboard Overview](https://www.rudderstack.com/docs/dashboard-guides/overview/#data-plane-url) guide for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has the SDK installation snippet containing both the write key and the data plane URL. Copy it to integrate the Go SDK into your application.\n\n## Installing the Go SDK\n\nTo install the Go SDK in the `GOPATH`, run the following command:\n\n```\ngo get github.com/rudderlabs/analytics-go\n```\n\n## Initializing the SDK\n\nRun the following code snippet to initialize the Go SDK:\n\n```\npackage main\n\nimport (\n    \"github.com/rudderlabs/analytics-go/v4\"\n)\n\nfunc main() {\n    // Instantiates a client to use send messages to the RudderStack API.\n    \n    // Use your write key in the below placeholder:\n    \n    client := analytics.New(<WRITE_KEY>, <DATA_PLANE_URL>)\n\n    // Enqueues a track event that will be sent asynchronously.\n    client.Enqueue(analytics.Track{\n        UserId: \"1hKOmRA4GRlm\",\n        Event:  \"Test Event\",\n    })\n\n    // Flushes any queued messages and closes the client.\n    client.Close()\n}\n```\n\nAlternatively, you can run the following snippet:\n\n```\npackage main\n\nimport (\n    \"github.com/rudderlabs/analytics-go/v4\"\n)\n\nfunc main() {\n    // Instantiates a client to use send messages to the RudderStack API.\n    \n    // Enter your write key in the below placeholder:\n    \n    client, _ := analytics.NewWithConfig(WRITE_KEY,\n\t\tanalytics.Config{\n\t\t\tDataPlaneUrl: DATA_PLANE_URL,\n\t\t\tInterval:     30 * time.Second,\n\t\t\tBatchSize:    100,\n\t\t\tVerbose:      true,\n\t\t\tDisableGzip:  false,  // Set to true to disable Gzip compression.\n\t\t})\n\n    // Enqueues a track event that will be sent asynchronously.\n    \n    client.Enqueue(analytics.Track{\n        UserId: \"1hKOmRA4GRlm\",\n        Event:  \"Test Event\",\n    })\n\n    // Flushes any queued messages and closes the client.\n    \n    client.Close()\n}\n```\n\n### Migrating to SDK v4\n\nTo migrate to the Go SDK v4.1.0, set the data plane URL in `Config` (as seen in the above section) instead of passing it as an argument.\n\n### SDK initialization options\n\nThe RudderStack Go SDK provides the following initialization options:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `Interval` | Time (in sec) | The SDK sends the messages when this flushing interval time has elapsed. |\n| `BatchSize` | Integer | Total number of messages to be sent in a single batch. Default value is 100. |\n| `Verbose` | Boolean | When set to `true`, the client sends more frequent and detailed messages to the logger. |\n| `RetryAfter` | Time (in sec) | Determines how long the SDK should wait to retry sending the failed messages. |\n| `DisableGzip` | Boolean | Disables gzip compression of the requests. By default, this is set to `false`. To disable gzip, set this parameter to `true`. |\n| `NoProxySupport` | Boolean | Set this variable to `true` if you do not use a proxy to send the events. |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Setting `NoProxySupport` to `true` will avoid RudderStack making calls to the proxy for fetching the total number of nodes in case of a multi-node setup.\n\n## Gzipping requests\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The gzip compression feature is enabled in the Go SDK version 4.1.0 by default.\n\nThe Go SDK automatically gzips requests. However, you can disable this by setting the `DisableGzip` parameter to `true` while initializing the SDK:\n\n```\nclient, _ := analytics.NewWithConfig(WRITE_KEY,\n\t\tanalytics.Config{\n\t\t\tDataPlaneUrl: DATA_PLANE_URL,\n\t\t\tInterval:     30 * time.Second,\n\t\t\tBatchSize:    100,\n\t\t\tVerbose:      true,\n\t\t\tDisableGzip: true\n\t\t})\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The `DisableGzip` parameter requires [rudder-server](https://github.com/rudderlabs/rudder-server) **version 1.4 or higher**. Otherwise, your events might fail.\n\n## Sending events\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not store or persist the user state in any of the server-side SDKs**.\n> \n> Unlike the client-side SDKs that deal with only a single user at a given time, the server-side SDKs deal with multiple users simultaneously. Therefore, you must specify either the `userId` or `anonymousId` **every time** while making any API calls supported by the Go SDK.\n\n### Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` call made using the Go SDK is shown below:\n\n```\nclient.Enqueue(analytics.Identify{\n  UserId: \"1hKOmRA4GRlm\",\n  Traits: analytics.NewTraits().\n    SetName(\"Alex Keener\").\n    SetEmail(\"alex@example.com\").\n    Set(\"plan\", \"Free\").\n    Set(\"manager\", 12),\n})\n```\n\nThe `identify` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | The SDK automatically sets this identifier in cases where there is no unique identifier for the user. |\n| `traits` | Object | An optional dictionary of the user’s traits like `name` or `email`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the user actions along with their associated properties. Each user action is called an **event**.\n\nA sample `track` call is shown below:\n\n```\nclient.Enqueue(analytics.Track{\n  UserId: \"1hKOmRA4GRlm\",\n  Event:  \"Signed Up\",\n  Properties: analytics.NewProperties().\n    Set(\"plan\", \"Free\"),\n})\n```\n\nThe `track` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | The SDK automatically sets this identifier in cases where there is no unique identifier for the user. |\n| `event`  <br>Required | String | Name of the event. |\n| `properties` | Object | An optional dictionary of the properties associated with the event. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record the page views on your application along with the other relevant information about the page.\n\nA sample `page` call is as shown:\n\n```\nclient.Enqueue(analytics.Page{\n  UserId: \"12345\",\n  Name:   \"Pizza\",\n  Properties: analytics.NewProperties().\n    SetURL(\"https://dominos.com\"),\n})\n```\n\nThe `page` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | The SDK automatically sets this identifier in cases where there is no unique identifier for the user. |\n| `name`  <br>Required | String | Name of the viewed page. |\n| `properties` | Object | An optional dictionary of the properties associated with the viewed page, like `url` or `referrer`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It lets you record the screen views on your mobile app along with other relevant information about the screen.\n\nA sample `screen` call is as shown:\n\n```\nclient.Enqueue(analytics.Screen{\n  UserId: \"1hKOmRA4GRlm\",\n  Name:   \"Pizza\",\n  Properties: analytics.NewProperties().\n    SetURL(\"https://dominos.com\"),\n})\n```\n\nThe `screen` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | The SDK automatically sets this identifier in cases where there is no unique identifier for the user. |\n| `name`  <br>Required | String | Name of the viewed screen. |\n| `properties` | Object | An optional dictionary of the properties associated with the viewed screen, like `url` or `referrer`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group.\n\nA sample `group` call made using the Go SDK is shown below:\n\n```\nclient.Enqueue(analytics.Group{\n  UserId:  \"1hKOmRA4GRlm\",\n  GroupId: \"1\",\n  Traits: map[string]interface{}{\n    \"name\": \"Company\",\n    \"description\": \"Facebook\",\n  },\n})\n```\n\nThe `group` method parameters are as follows:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | The SDK automatically sets this identifier in cases where there is no unique identifier for the user. |\n| `groupId`  <br>Required | String | Unique identifier of the group in your database. |\n| `traits` | Object | An optional dictionary of the group’s traits like `name`or `email`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly. You can use `alias` for managing the user’s identity in some of the downstream destinations.\n\nA sample `alias` call is as shown:\n\n```\nclient.Enqueue(analytics.Alias{\n  PreviousId: \"12345\",\n  UserId:     \"1hKOmRA4GRlm\",\n})\n```\n\nThe `alias` method parameters are as mentioned below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | The SDK automatically sets this identifier in cases where there is no unique identifier for the user. |\n| `previousId`  <br>Required | String | The previous unique identifier of the user. |\n| `traits` | Object | An optional dictionary of the user’s traits like `name` or `email`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n## FAQ\n\n#### How does the Go SDK handle events larger than 32KB?\n\nThe Go SDK drops any events greater than 32KB.\n\n#### Does the Go SDK support event ordering?\n\nThe Go SDK does not support event ordering by default.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Go SDK | RudderStack Docs",
  "description": "Use RudderStack’s Go SDK to send server-side events to various destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/faq/",
  "markdown": "# RudderStack SDK FAQ | RudderStack Docs\n\nAnswers to the generally asked questions related to the RudderStack SDKs.\n\n* * *\n\n*     7 minute read  \n    \n\n### What is the event size limit for various RudderStack SDKs?\n\nThe following RudderStack SDKs drop any events greater than 32KB:\n\n*   iOS\n*   Android\n*   React Native\n*   Flutter\n*   Unity\n*   Go\n*   Ruby\n*   Python\n*   .NET ([async initialization](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-dotnet-sdk/#initializing-the-sdk))\n\nThe following SDKs accept events greater than 32KB:\n\n*   Java\n*   Node\n*   [.NET (synchronous initialization)](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-dotnet-sdk/#initializing-the-sdk)\n\nThe [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) exhibits the following behavior:\n\n*   If the event size exceeds 32KB, the SDK logs an error message (warning, in the case of JavaScript SDK) but forwards it to the RudderStack data plane (backend).\n*   If you send the event using [`sendBeacon`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#send-events-using-beacon), the SDK batches the events with a size limit of 64KB on the **entire** batch payload. If a single event’s size exceeds 64KB, the browser might drop the event. Note that this is applicable for the legacy SDK (v1.1) and the SDK v3.\n\n### How does RudderStack handle `anonymousId` ?\n\nThe following are the different ways in which RudderStack handles `anonymousId` across different SDKs:\n\n#### JavaScript SDK\n\nThe RudderStack JavaScript SDK automatically generates one unique `anonymousId` to identify a user uniquely. It then stores it in a cookie named `rl_anonymous_id` and attaches it to every subsequent event. This helps in identifying the users from other sites that are hosted under a sub-domain.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If `anonymousId` is explicitly provided by the user using the `setAnonymousId` method, the user-specified `anonymousId` overrides the SDK-generated one.\n\nFor more information on how RudderStack handles overriding `anonymousId`, refer to the [Overriding anonymous ID](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#overriding-anonymous-id) section.\n\n#### Android SDK\n\nRudderStack captures your `deviceId` and uses that as `anonymousId` for identifying the user. It is used to track the users across the application installation. To attach more information to the user, you can use the `identify` method.\n\nYou can use the `setAnonymousId` method to override and use your own `anonymousId` with the SDK.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> On the Android devices, the `deviceId` is assigned during the first boot. It remains consistent across the applications and installs. It changes only after a factory reset.\n\nFor more information on how RudderStack handles `anonymousId` in the iOS SDK, please refer to the [Anonymous ID](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/#anonymous-id) section.\n\n#### iOS SDK\n\nRudderStack captures `deviceId` and uses that as `anonymousId` for identifying the user. To attach more information to the user, you can use the `identify` method.\n\nYou can use the `setAnonymousId` method to override and use your own `anonymousId` with the SDK.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> According to the Apple [documentation](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor), if the device has multiple apps from the same vendor, all those apps will be assigned the same `deviceId`. If allse apps are uninstalled, then on the next install, the apps will be assigned a new `deviceId`.\n\nFor more information on how RudderStack handles`anonymousId` in the iOS SDK, please refer to the [Anonymous ID](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/#anonymous-id) section.\n\n### How do I identify anonymous users across client-side and server-side?\n\nTo identify anonymous users across both client-side and server-side, **it is advisable to use a separate, new cookie at your end**.\n\nDuring the user’s first visit, your server generates a new `anonymousId` to make the event calls using the server-side SDKs and sends the `set_cookie` response to the browser to set the `visitor_id` cookie.\n\n*   If the RudderStack JavaScript SDK is **not blocked**, you can use the `setAnonymousId` method to set the same value as the `visitor_id`.\n*   In case the RudderStack JavaScript SDK **is blocked**, still the next requests to the server will have the `visitor_id` cookie which can be used by the server-side events for `anonymousId`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The RudderStack JavaScript SDK generates a unique `anonymousId` for every unique user visit. It then stores this value in a cookie named `rl_anonymous_id` and attaches it to every subsequent event.\n> \n> Users sometimes try to directly use the browser APIs to get or set the value for this cookie. However, this is not advisable since the RudderStack cookies are encrypted, and the cookie may not be present altogether (if the SDK is blocked).\n> \n> It is, therefore, always advisable to use RudderStack’s `getAnonymousId` and `setAnonymousId` methods to update the cookie value.\n\nTo set `anonymousId`, use the `setAnonymousId` call after the SDK snippet as below:\n\n```\nrudderanalytics.setAnonymousId(\"my-anon-id\");\n```\n\nTo get the `anonymousId` stored in a RudderStack cookie, use the `getAnonymousId` call inside the `ready` callback - this ensures that the method is available and returns the previously set `anonymousId` value.\n\n```\nrudderanalytics.ready(\n\t() => {\n\t  var anonId = window.rudderanalytics.getAnonymousId();\n\t\tconsole.log(anonId);\n\t}\n);\n```\n\n### What is RudderStack’s retry and backoff logic after the connection fails?\n\nWhen the dataplane gets disconnected from the SDK and events are no longer able to be sent to Rudder Server, then some of the SDK’s will store events and retry sending them to Rudder Server with a certain backoff logic.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Not all SDKs support retry of failed events. Refer to the below table for more information.\n\n#### General support and logic\n\n| SDK | Supported | Event Storage | Retry limit |\n| --- | --- | --- | --- |\n| [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) | Yes | 100 events in local storage | 10 times |\n| [Android SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/) | Yes | 10000 events in SQLite database | Infinity |\n| [iOS SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/) | Yes | 10000 events in SQLite database | Infinity |\n| [React Native SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-react-native-sdk/) | Yes | 10000 events in SQLite database | Infinity |\n| [Flutter SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-flutter-sdk/) | Yes | 10000 events in SQLite database | Infinity |\n| [Node SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/) | Yes | 20000 events in-memory | 10 times |\n| Other SDKs | No  | N/A | N/A |\n\n#### JavaScript SDK\n\nThis SDK can be configured to match your requirements for retry and backoff logic. By default, if the dataplane goes down and the JS SDK cannot send events to the Rudder Server, up to 100 events will be stored. While still disconnected from the dataplane, the JS SDK will try to resend the stored events to the Rudder Server. However, for each retry, the delay duration will grow. The equation to get the duration of delay is as follows:\n\ndt = md \\* (F^n)\n\nWhere, `dt` is the delay time in ms, `md` is the `minRetryDelay` (configurable; default is 1000 ms), `F` is the `backoffFactor` (configurable; default is 2), and `n` is the current retry attempt. The SDK will retry until the attempts surpass the `maxAttempts` value. This is by default set to 10 attempts but is configurable. Each retry attempt, the delay time grows exponentially. However, it will max out at whatever the `maxRetryDelay` is. By default, this value is set at 360000 ms, but it is configurable.\n\n#### iOS and Android SDK\n\nBoth the iOS and Android SDKs share similar retry and backoff logic for when the dataplane connection fails. If the dataplane goes down, up to 10,000 events will be stored. There is no limit to how many times the SDK will try to send failed events. However, the delay duration in between the attempts will grow by 1 second after each retry. For example, after the first failed attempt, there will be a delay of 1 second. After the second failed attempt, the SDK will wait 2 seconds before it retries. The third failed attempt will cause a delay of 3 seconds, and this behavior will repeat until the connection is re-established.\n\n#### Node SDK\n\nCurrently the Node SDK is the only server-side SDK that supports event retry and backoff logic. The logic is quite similar to the JavaScript SDK. If the connection fails, up to 20,000 events will be stored. However, this is in-memory storage and can result in data loss. The SDK will retry a maximum of 10 times, by default. For each retry the delay duration between retries will grow and can be calculated using the following equation.\n\ndt = 1000 \\* (2^n)\n\nWhere, dt is the delay time in ms and n is the current retry attempt. The SDK will retry until the attempts surpass the `maxAttempts` value which is set to 10 attempts. With each retry attempt, the delay time will grow exponentially. However, it will never be greater than the maximum delay duration which is 30 seconds.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The Node SDK does have a feature to persist the event data in Redis for more event storage and better guarantees of failed event delivery. Instructions on how to configure the Redis solution can be found [here](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/#data-persistence).\n\n### Can I filter and selectively send event data to certain destinations?\n\nYes, you can use RudderStack’s [Client-side Event Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) feature to specify which events should be discarded or allowed to flow through - by allowlisting or denylisting them in the RudderStack dashboard while setting up your destination. This method is useful if you are sending the events via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "RudderStack SDK FAQ | RudderStack Docs",
  "description": "Answers to the generally asked questions related to the RudderStack SDKs.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/gainsight-px/",
  "markdown": "# Gainsight PX source | RudderStack Docs\n\nIngest your event data from Gainsight PX into RudderStack.\n\n* * *\n\n*     5 minute read  \n    \n\n[Gainsight PX](https://www.gainsight.com/product-experience/) is a popular product experience platform. It offers cutting-edge product analytics, product engagement features, and powers the product teams to optimize their customer adoption and onboarding flows.\n\nThis guide will help you set up Gainsight PX as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Gainsight PX source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Gainsight PX**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Gainsight PX source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![Gainsight PX source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/gainsight-px-src-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/gainsight-px-src-settings.webp)\n\n4.  Follow this [Gainsight PX user guide](https://support.gainsight.com/PX/Integrations/01Technology_Partner_Integrations/Integrate_with_Gainsight_PX_Using_Webhooks#Configure_Webhook_in_Gainsight_PX) to configure a custom webhook in Gainsight PX.\n5.  In the **Callback URL** field, paste the RudderStack webhook URL copied in Step 3 above.\n\n[![Gainsight PX source webhook URL configuration](https://www.rudderstack.com/docs/images/event-stream-sources/gainsight-webhook-config.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/gainsight-webhook-config.webp)\n\n## Event transformation\n\nIn case of a signup event (`event.eventType == SIGN_UP`), RudderStack maps the event to an [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call as the signup event indicates that a new user is created in Gainsight PX. Otherwise, RudderStack maps the ingested event to a `track` event.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Gainsight PX allows sending a maximum of 10000 webhook events per day.\n\n### Identify\n\nAs mentioned above, RudderStack maps a Gainsight PX event to the `identify` event in case of a user signup.\n\nA sample input payload is shown below:\n\n```\n{\n  \"user\": {\n    \"aptrinsicId\": \"XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX\",\n    \"identifyId\": \"New!\",\n    \"type\": \"USER\",\n    \"gender\": \"EMPTY_GENDER\",\n    \"email\": \"userEmail@address.com\",\n    \"firstName\": \"XXXXXX\",\n    \"lastName\": \"XXXXX\",\n    \"lastSeenDate\": 1665582808669,\n    \"signUpDate\": 1665582791753,\n    \"firstVisitDate\": 1665582791753,\n    \"title\": \"Mr.\",\n    \"score\": 0,\n    \"accountId\": \"IBM\",\n    \"numberOfVisits\": 1,\n    \"location\": {\n      \"countryName\": \"India\",\n    },\n    \"propertyKeys\": [\n      \"AP-XXXXXXXXXXX-2-1\"\n    ],\n    \"createDate\": 1685582808376,\n    \"lastModifiedDate\": 1685582808717,\n    \"customAttributes\": null,\n    \"globalUnsubscribe\": false,\n    \"lastVisitedUserAgentData\": null,\n    \"id\": \"New!\",\n    \"lastInferredLocation\": null\n  },\n  \"account\": {\n    \"id\": \"IBM\",\n    \"name\": \"International Business Machine\",\n    \"lastSeenDate\": 1685582808669,\n    \"propertyKeys\": [\n      \"AP-EOXPSEZGC5LA-2-1\"\n    ],\n    \"createDate\": 1685578567565,\n    \"lastModifiedDate\": 1685582808669\n  },\n  \"event\": {\n    \"eventType\": \"SIGN_UP\",\n    \"eventId\": \"XXXXXXX-XXXX-XXX-XXX-XXXXXXXXX\",\n    \"propertyKey\": \"AP-XXXXXXXXX-2-1\",\n    \"date\": 1665582808376,\n    \"sessionId\": \"XX-XXXXXXXXX-2-XXXXxXXXXXX-XXXXXXXX\",\n    \"globalContext\": {},\n    \"userType\": \"USER\"\n  },\n  \"configId\": \"XXXXXX-XXXXX-XXXX-XXXX-XXXXXX\"\n}\n```\n\nRudderStack transforms this payload into the following event:\n\n```\n\"context\": {\n  \"library\": {\n    \"name\": \"unknown\",\n    \"version\": \"unknown\"\n  },\n  \"integration\": {\n    \"name\": \"GAINSIGHTPX\"\n  },\n  \"externalId\": [{\n    \"type\": \"gainsightpxAptrinsicId\",\n    \"id\": \"XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX\"\n  }]\n},\n\"integrations\": {\n  \"GAINSIGHTPX\": false\n},\n\"type\": \"identify\",\n\"traits\": {\n  \"type\": \"USER\",\n  \"gender\": \"EMPTY_GENDER\",\n  \"email\": \"userEmail@address.com\",\n  \"firstName\": \"XXXXXX\",\n  \"lastName\": \"XXXXX\",\n  \"title\": \"Mr.\",\n  \"score\": 0,\n  \"globalUnsubscribe\": false,\n  \"accountId\": \"IBM\",\n  \"numberOfVisits\": 1,\n  \"propertyKeys\": [\n    \"AP-XXXXXXXXXXX-2-1\"\n  ],\n  \"id\": \"New!\",\n  \"country\": \"India\",\n  \"account\": {\n    \"id\": \"IBM\",\n    \"name\": \"International Business Machine\",\n    \"numberOfEmployees\": 0,\n    \"numberOfUsers\": 0\n  }\n},\n\"userId\": \"New!\",\n\"createdAt\": \"20XX-XX-XXT13:53:11.753Z\",\n\"originalTimestamp\": \"20XX-XX-XXT13:53:11.753Z\"\n```\n\nRudderStack also maps the following properties from the Gainsight PX event payload to the RudderStack properties:\n\n| Gainsight PX property | RudderStack property |\n| --- | --- |\n| `user` | `traits` |\n| `user.identifyId` | `userId` |\n| `user.aptrinsicId` | `context.externalId[]` |\n| `user.signUpDate` | `createdAt` |\n| `user.location.countryName` | `traits.country` |\n| `user.location.stateName` | `traits.state` |\n| `user.location` | `traits` |\n| `account` | `traits.account` |\n| `account.name` | `traits.companyName` |\n| `event.remoteHost` | `context.ip` |\n| `user.lastVisitedUserAgentData` | `context.userAgent` |\n\n### Track\n\nRudderStack ingests different event payloads depending on the Gainsight PX event type. It currently supports the following event types before mapping them to the `track` call:\n\n*   Feature match\n*   Engagement\n*   Survey\n*   Segment match\n*   Custom event\n\nA sample input payload is shown below:\n\n```\n{\n  \"user\": {\n    \"aptrinsicId\": \"XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX\",\n    \"identifyId\": \"New!\",\n    \"type\": \"USER\",\n    \"gender\": \"EMPTY_GENDER\",\n    \"email\": \"userEmail@address.com\",\n    \"firstName\": \"XXXXXX\",\n    \"lastName\": \"XXXXX\",\n    \"lastSeenDate\": 1665582808669,\n    \"signUpDate\": 1665582791753,\n    \"firstVisitDate\": 1665582791753,\n    \"title\": \"Mr.\",\n    \"score\": 0,\n    \"accountId\": \"IBM\",\n    \"numberOfVisits\": 1,\n    \"location\": {\n      \"countryName\": \"India\",\n    },\n    \"propertyKeys\": [\n      \"AP-XXXXXXXXXXX-2-1\"\n    ],\n    \"createDate\": 1685582808376,\n    \"lastModifiedDate\": 1685582808717,\n    \"customAttributes\": null,\n    \"globalUnsubscribe\": false,\n    \"lastVisitedUserAgentData\": null,\n    \"id\": \"New!\",\n    \"lastInferredLocation\": null\n  },\n  \"account\": {\n    \"id\": \"IBM\",\n    \"name\": \"International Business Machine\",\n    \"lastSeenDate\": 1685582808669,\n    \"propertyKeys\": [\n      \"AP-EOXPSEZGC5LA-2-1\"\n    ],\n    \"createDate\": 1685578567565,\n    \"lastModifiedDate\": 1685582808669\n  },\n  \"event\": {\n    \"eventType\": \"CUSTOM\",\n    \"eventId\": \"XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX\",\n    \"propertyKey\": \"AP-XXXXXXXXXXX-2-1\",\n    \"date\": 1665656881448,\n    \"sessionId\": \"AP-XXXXXXXXXXX-2-1XXXXXXXXXXXX-XXXXXXXXX\",\n    \"globalContext\": {},\n    \"userType\": \"USER\",\n    \"eventName\": \"Product Clicked\",\n    \"attributes\": {\n      \"Audience Size\": 5000,\n      \"name\": \"TESTing TRACK CALL FIRST\",\n      \"Launched date\": 1520532660000,\n      \"Launched\": true\n    },\n    \"url\": \"http://127.0.0.1:5501/GPXTEST2.html\",\n    \"referrer\": \"\"\n  },\n  \"configId\": \"XXXXXX-XXXXX-XXXX-XXXX-XXXXXX\"\n}\n```\n\nRudderStack transforms this payload into the following `track` payload:\n\n```\n{\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"integration\": {\n      \"name\": \"GAINSIGHTPX\"\n    },\n    \"traits\": {\n      \"type\": \"USER\",\n      \"gender\": \"EMPTY_GENDER\",\n      \"email\": \"userEmail@address.com\",\n      \"firstName\": \"XXXXXX\",\n      \"lastName\": \"XXXXX\",\n      \"title\": \"Mr.\",\n      \"score\": 0,\n      \"globalUnsubscribe\": false,\n      \"accountId\": \"IBM\",\n      \"numberOfVisits\": 1,\n      \"propertyKeys\": [\n        \"AP-XXXXXXXXXXX-2-1\"\n      ],\n      \"id\": \"New!\",\n      \"country\": \"India\",\n      \"account\": {\n        \"id\": \"IBM\",\n        \"name\": \"International Business Machine\",\n        \"numberOfEmployees\": 0,\n        \"numberOfUsers\": 0\n      }\n    },\n    \"externalId\": [{\n      \"type\": \"gainsightpxAptrinsicId\",\n      \"id\": \"XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXv\"\n    }]\n  },\n  \"integrations\": {\n    \"GAINSIGHTPX\": false\n  },\n  \"type\": \"track\",\n  \"properties\": {\n    \"propertyKey\": \"AP-XXXXXXXXXXX-2-1\",\n    \"Audience Size\": 5000,\n    \"name\": \"TESTing TRACK CALL FIRST\",\n    \"Launched date\": 1520532660000,\n    \"Launched\": true,\n    \"url\": \"http://127.0.0.1:5501/GPXTEST2.html\"\n  },\n  \"userId\": \"New!\",\n  \"category\": \"CUSTOM\",\n  \"event\": \"Product Clicked\",\n  \"sentAt\": \"20XX-XX-XXTXX:XX:XX.XXXZ\",\n  \"originalTimestamp\": \"20XX-XX-XXTXX:XX:XX.XXXZ\"\n}\n```\n\nThe general property mappings for these events are listed in the below table:\n\n| Gainsight PX property | RudderStack property |\n| --- | --- |\n| `event.eventType` | `category` |\n| `event.attributes` | `properties` |\n| `event.date` | `sentAt` |\n| `user` | `context.traits` |\n| `event.url` | `properties.url` |\n| `event.remoteHost` | `properties.ip` |\n| `user.identifyId` | `userId` |\n| `user.aptrinsicId` | `context.externalId[]` |\n| `user.lastVisitedUserAgentData` | `userAgent` |\n| `event.globalContext` | `properties.globalContext` |\n\nThe specific property mappings based on the different Gainsight PX event types are listed as follows:\n\n#### Feature match\n\n| Gainsight PX property | RudderStack property |\n| --- | --- |\n| `event.featureName` | `name` |\n| `event.featureId` | `properties.featureId` |\n\n#### Engagement\n\n| Gainsight PX property | RudderStack property |\n| --- | --- |\n| `event.engagementName` | `name` |\n| `event.engagementId` | `properties.engagementId` |\n| `event.contentType` | `properties.contentType` |\n| `event.engagementType` | `properties.engagementType` |\n| `event.interaction` | `properties.interaction` |\n| `event.stepNumber` | `properties.engagement.stepNumber` |\n| `event.activation` | `properties.engagement.activation` |\n\n#### Survey\n\n| Gainsight PX property | RudderStack property |\n| --- | --- |\n| `event.engagementName` | `name` |\n| `event.engagementId` | `properties.engagementId` |\n| `event.contentType` | `properties.contentType` |\n| `event.score` | `properties.survey.score` |\n| `event.stepNumber` | `properties.survey.stepNumber` |\n| `event.userInput` | `properties.survey.userInput` |\n| `event.questionType` | `properties.survey.questionType` |\n| `event.scoreType` | `properties.survey.scoreType` |\n| `event.surveyType` | `properties.survey.surveyType` |\n| `event.contactMeAllowed` | `properties.survey.contactMeAllowed` |\n| `event.questionText` | `properties.survey.questionText` |\n| `event.questionHtml` | `properties.survey.questionHtml` |\n| `event.answers` | `properties.survey.answers` |\n| `event.questionId` | `properties.survey.questionId` |\n| `event.activation` | `properties.engagement.activation` |\n\n#### Segment\n\n| Gainsight PX property | RudderStack property |\n| --- | --- |\n| `event.segmentName` | `name` |\n| `event.segmentId` | `properties.segmentId` |\n\n#### Custom event\n\n| Gainsight PX property | RudderStack property |\n| --- | --- |\n| `event.eventName` | `name` |\n\n## FAQ\n\n#### Why am I unable to view a new user event even after adding it in Gainsight PX?\n\nGainsight PX lets you track new user signups in your application, add them to your webhook queue, and send this data to your destination. However, this occurs only when Gainsight PX receives an `identify` event for the new user signed up in the last hour. For more information, refer to this [Gainsight PX webhook integration guide](https://support.gainsight.com/PX/Integrations/01Technology_Partner_Integrations/Integrate_with_Gainsight_PX_Using_Webhooks).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Gainsight PX source | RudderStack Docs",
  "description": "Ingest your event data from Gainsight PX into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-java-sdk/",
  "markdown": "# Java SDK | RudderStack Docs\n\nUse RudderStack’s Java SDK to send server-side events to various destinations.\n\n* * *\n\n*     13 minute read  \n    \n\nRudderStack’s Java SDK lets you track and send the events from your Java applications to the specified destinations.\n\nRefer to the SDK’s [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-java) for the implementation-specific details.\n\n[![Github Badge](https://img.shields.io/maven-metadata/v.svg?label=Maven%20Central&metadataUrl=https://repo1.maven.org/maven2/com/rudderstack/sdk/java/analytics/analytics-parent/maven-metadata.xml?style=flat)](https://search.maven.org/search?q=g:com.rudderstack.sdk.java.analytics)\n\n## SDK setup requirements\n\n1.  Sign up to [RudderStack Cloud](https://app.rudderstack.com/signup).\n2.  [Set up a Java source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in your dashboard. You should be able to see a **write key** for this source:\n\n[![Java source write key](https://www.rudderstack.com/docs/images/event-stream-sources/java-sdk-write-key.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/java-sdk-write-key.webp)\n\nYou will also need a data plane URL. Refer to the [Dashboard Overview](https://www.rudderstack.com/docs/dashboard-guides/overview/#data-plane-url) guide for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has the SDK installation snippet containing both the write key and the data plane URL. Copy it to integrate the Java SDK into your application.\n\n## Installing the Java SDK\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> As Bintray has sunset from 1st May, 2021, the Java SDK is now moved to [Maven Central](https://search.maven.org/). All the versions from 1.0.1 will now be available in Maven Central only.\n\nIt is highly recommended to use the Maven build system to add the SDK to your project.\n\nTo install the RudderStack Java SDK, add the following lines of code to `pom.xml`:\n\n```\n<dependency>\n   <groupId>com.rudderstack.sdk.java.analytics</groupId>\n     <artifactId>analytics</artifactId>\n   <version>3.0.0</version>\n</dependency>\n```\n\nIf you’re using **Gradle**, add the following line to your dependencies:\n\n```\nimplementation 'com.rudderstack.sdk.java.analytics:analytics:3.0.0'\n```\n\n## Initializing the RudderStack client\n\nAfter installing the SDK, run the following code snippet to initialize the RudderStack client:\n\n```\nRudderAnalytics analytics = RudderAnalytics\n         .builder(\"<WRITE_KEY>\")\n         .setDataPlaneUrl(\"<DATA_PLANE_URL>\")\n         .build();\n```\n\n## Migrating from v2 to v3\n\nTo migrate to the Java SDK v3.0.0, set the data plane URL using `setDataPlaneUrl(\"<DATA_PLANE_URL>\")` (as seen in the above section) instead of passing it as an argument.\n\n## Configuring the RudderStack client\n\nYou can configure your client based on the following methods in `RudderClient.Builder`:\n\n| Method | Type | Description |\n| --- | --- | --- |\n| `client` | `OkHttpClient` | Sets a custom `OkHttpClient`. It is created by default. |\n| `setGZIP` | Boolean | Gzips the event request.<br><br>**Default value**: `true` |\n| `log` | Log | Sets the logging level for debugging. Available options are `VERBOSE`, `DEBUG`, `ERROR`, and `NONE`.<br><br>**Default value**: `NONE` |\n| `setDataPlaneUrl` | String | Sets the data plane URL.<br><br>**Default value**: `https://hosted.rudderlabs.com` |\n| `setUploadURL` | String | Sets the data plane URL - used for Segment compatibility.<br><br>**Default value**: `https://hosted.rudderlabs.com` |\n| `userAgent` | String | Sets a user agent for the HTTP requests.<br><br>**Default value**: `analytics-java/`{analytics-sdk-version} |\n| `queueCapacity` | Integer | Sets the queue capacity.<br><br>**Default value**: `Integer.MAX_VALUE` |\n| `retries` | Integer | Defines the maximum number of event retries.<br><br>**Default value**: `3` |\n| `networkExecutor` | `ExecutorService` | Sets the executor service on which all HTTP requests are made.<br><br>**Default value**: `SingleThreadExecutor` |\n| `callback` | Callback | Gets invoked when the client library processes an event.<br><br>**Default value**: Empty list. |\n| `forceTlsVersion1` | \\-  | Enforces TLS v1.<br><br>**Default value**: `false` |\n\nThe following initialization methods are currently in **beta**:\n\n| Available method | Type | Description |\n| --- | --- | --- |\n| `messageTransformer` | `MessageTransformer` | Adds a transformer for the message before uploading it.<br><br>**Default value**: `null` |\n| `messageInterceptor` | `MessageInterceptor` | Add a `MessageInterceptor` for intercepting messages before sending to RudderStack.<br><br>**Default value**: `null` |\n| `flushQueueSize` | Integer | Sets the queue size at which the SDK triggers the flush requests.<br><br>**Default value**: `250` |\n| `maximumQueueSizeInBytes` | Integer | Sets the maximum queue size at which the flush requests are triggered.<br><br>**Default value**: `1024*500 Bytes` |\n| `flushInterval` | Long, TimeUnit | Sets the time interval which the SDK flushes the queue.<br><br>**Default value**: `10 seconds` |\n| `threadFactory` | `ThreadFactory` | Sets the thread factory used to create the threads.<br><br>**Default value**: `null` |\n| `plugin` | `Plugin` | Used to configure the builder.<br><br>**Default value**: `null` |\n\n## Sending events\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not store or persist the user state in any of the server-side SDKs**.\n> \n> Unlike the client-side SDKs that deal with only a single user at a given time, the server-side SDKs deal with multiple users simultaneously. Therefore, you must specify either the `userId` or `anonymousId` **every time** while making any API calls supported by the Java SDK.\n\n### Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` call made using the Java SDK is shown below:\n\n```\nanalytics.enqueue(IdentifyMessage.builder()\n    .userId(\"1hKOmRA4GRlm\")\n    .traits(ImmutableMap.builder()\n        .put(\"name\", \"Alex Keener\")\n        .put(\"email\", \"alex@example.com\")\n        .build()\n    )\n);\n```\n\nThe `identify` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n| `traits` | Object | An optional dictionary of the user’s traits like `name` or `email`. |\n\n### Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the user actions along with their associated properties. Each user action is called an **event**.\n\nA sample `track` call is shown below:\n\n```\nMap<String, Object> properties = new LinkedHashMap<>();\n    properties.put(\"key1\", \"value1\");\n    properties.put(\"key2\", \"value2\");\n    analytics.enqueue(\n       TrackMessage.builder(\"Java Test\")\n           .properties(properties)\n           .anonymousId(anonymousId)\n           .userId(userId)\n);\n```\n\nThe `track` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `event`  <br>Required | String | Name of the event. |\n| `properties` | Object | An optional dictionary of the properties associated with the event. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record the page views on your application along with the other relevant information about the page.\n\nA sample `page` call is as shown:\n\n```\nanalytics.enqueue(PageMessage.builder(\"Schedule\")\n    .userId(\"1hKOmRA4GRlm\")\n    .properties(ImmutableMap.builder()\n        .put(\"category\", \"Cultural\")\n        .put(\"path\", \"/a/b\")\n        .build()\n    )\n);\n```\n\nThe `page` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed page. |\n| `properties` | Object | An optional dictionary of the properties associated with the viewed page, like `url` or `referrer`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It lets you record the screen views on your mobile app along with other relevant information about the screen.\n\nA sample `screen` call is as shown:\n\n```\nanalytics.enqueue(ScreenMessage.builder(\"Schedule\")\n    .userId(\"1hKOmRA4GRlm\")\n    .properties(ImmutableMap.builder()\n        .put(\"category\", \"Sports\")\n        .put(\"path\", \"/sports/schedule\")\n        .build()\n    )\n);\n```\n\nThe `screen` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed screen. |\n| `properties` | Object | An optional dictionary of the properties associated with the screen, like `url` or `referrer`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group.\n\nA sample `group` call made using the Java SDK is shown below:\n\n```\nanalytics.enqueue(GroupMessage.builder(\"group123\")\n    .userId(\"1hKOmRA4GRlm\")\n    .traits(ImmutableMap.builder()\n        .put(\"name\", \"Rudder\")\n        .put(\"size\", 19)\n        .build()\n    )\n);\n```\n\nThe `group` method parameters are as follows:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `groupId`  <br>Required | String | Unique identifier of the group in your database. |\n| `traits` | Object | An optional dictionary of the group’s traits like `name`or `email`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly. You can use `alias` for managing the user’s identity in some of the downstream destinations.\n\nA sample `alias` call is as shown:\n\n```\nanalytics.enqueue(AliasMessage.builder(\"previousId\")\n    .userId(\"newId\")\n);\n```\n\nThe `alias` method parameters are as mentioned below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `previousId`  <br>Required | String | The previous unique identifier of the user. |\n| `traits` | Object | An optional dictionary of the user’s traits like `name` or `email`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n## Filtering destinations\n\nThe Java SDK lets you enable or disable sending events to specifc destinations connected to the source. You can do so by passing the `integrations` object in your API calls:\n\n```\nanalytics.enqueue(TrackMessage.builder(\"Button Clicked\")\n    .userId(\"1hKOmRA4GRlm\")\n    .enableIntegration(\"All\", false)\n    .enableIntegration(\"Amplitude\", true)\n);\n```\n\nThe above snippet disables sending the event `Button Clicked` to any destination except Amplitude.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **The destination flags are case sensitive.** They should match the destination’s name as specified in the [RudderStack dashboard](https://app.rudderstack.com/directory).\n\n## Context\n\nWith the Java SDK, you can send contextual information about the event using the `context` object:\n\n```\nanalytics.enqueue(TrackMessage.builder(\"Button Clicked\")\n    .userId(\"1hKOmRA4GRlm\")\n    .context(ImmutableMap.builder()\n        .put(\"ip\", \"1.23.45.67\")\n        .put(\"language\", \"en-uk\")\n        .build()\n    )\n);\n```\n\nThe Java SDK also adds the information present in `context.library` with every message like `name`, `version`, etc.\n\nA sample `context` object containing the `library` information is shown below:\n\n```\n\"context\": {\n\t\"library\": {\n\t\t\"name\": \"analytics-java\",\n\t\t\"version\": \"x.x.x\"\n\t}\n}\n```\n\nIf you pass any custom information in the `context` object, the SDK automatically merges it with the existing context, except the information contained in `library`.\n\n## Batching events\n\nThe RudderStack SDKs are built to support high performance environments. It is safe to use the Java SDK on a web server serving hundreds of requests per second.\n\nEvery SDK API you call **does not** result in a HTTP request but it is queued in the memory instead. RudderStack flushes the events in batches in the background, allowing faster operations.\n\n**The Java SDK has a maximum size limit of 500KB per batch request and 32KB per call.**\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The [RudderStack HTTP Tracking API](https://www.rudderstack.com/docs/api/http-api/) accepts batch requests upto 500KB. To avoid any errors while sending the event requests, make sure the single event payload size is **below** 32KB.\n\n## Flushing events\n\nTo flush your events, the Java SDK supports the `flush` method. It notifies the RudderStack client to upload the events and make sure no events are left in the queue at any given point.\n\nA sample snippet highlighting the use of the `flush` method is shown below:\n\n### Blocking flush\n\nBy default, the Java SDK does not support blocking flush implicitly. You need to create a `BlockingFlush` class (handles a maximum of 65535 parallel calls to flush) or a `TierBlockingFlush` class (no limit on parallel calls) depending on your requirement.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Both `BlockingFlush` and `TierBlockingFlush` classes are **not** a part of the core Java SDK.\n\nA sample snippet highlighting the use of `BlockingFlush` is shown below:\n\n```\nfinal BlockingFlush blockingFlush = BlockingFlush.create();\n\nRudderAnalytics analytics = RudderAnalytics\n         .builder(\"<WRITE_KEY>\")\n\t\t .plugin(blockingFlush.plugin())\n         .setDataPlaneUrl(\"<DATA_PLANE_URL>\")\n         .build();\n\n// ...YOUR CODE...\n\nanalytics.flush(); // Triggers a flush.\nblockingFlush.block();\nanalytics.shutdown(); // Shuts down after the flush is complete.\n```\n\nA detailed implementation of the `BlockingFlush` class is shown below. Note that this is just a sample code snippet and you can modify it as per your use case.\n\n```\npackage sample;\n\nimport com.rudderstack.sdk.java.analytics.RudderAnalytics;\nimport com.rudderstack.sdk.java.analytics.Callback;\nimport com.rudderstack.sdk.java.analytics.MessageTransformer;\nimport com.rudderstack.sdk.java.analytics.Plugin;\nimport com.rudderstack.sdk.java.analytics.messages.Message;\nimport com.rudderstack.sdk.java.analytics.messages.MessageBuilder;\nimport java.util.concurrent.Phaser;\n\n/*\n * The {@link RudderAnalytics} class doesn't come with a blocking {@link RudderAnalytics#flush()} implementation\n * out of the box. It's trivial to build one using a {@link Phaser} that monitors requests and is\n * able to block until they're uploaded.\n */\npublic class BlockingFlush {\n\n  public static BlockingFlush create() {\n    return new BlockingFlush();\n  }\n\n  BlockingFlush() {\n    this.phaser = new Phaser(1);\n  }\n\n  final Phaser phaser;\n\n  public Plugin plugin() {\n    return builder -> {\n      builder.messageTransformer(\n              builder1 -> {\n                phaser.register();\n                return true;\n              });\n\n      builder.callback(\n          new Callback() {\n            @Override\n            public void success(Message message) {\n              phaser.arrive();\n            }\n\n            @Override\n            public void failure(Message message, Throwable throwable) {\n              phaser.arrive();\n            }\n          });\n    };\n  }\n\n  public void block() {\n    phaser.arriveAndAwaitAdvance();\n  }\n}\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The above implementation restricts the maximum number of parties to 65535. If you try to create and use more parties, **this class throws an error**. To remove this limitation and use more parties, refer to the [TierBlockingFlush](#tierblockingflush) section below.\n\n### `TierBlockingFlush`\n\nTo remove the limitations on the maximum number of supported parties, you can use the `TierBlockingFlush` class.\n\nThe following snippet highlights its use:\n\n```\nfinal TierBlockingFlush blockingFlush = TierBlockingFlush.create();\n\nRudderAnalytics analytics = RudderAnalytics\n         .builder(\"<WRITE_KEY>\")\n\t\t .plugin(blockingFlush.plugin())\n         .setDataPlaneUrl(\"<DATA_PLANE_URL>\")\n         .build();\n\n// ...YOUR CODE...\n\nanalytics.flush(); // Trigger a flush.\nblockingFlush.block();\nanalytics.shutdown(); // Shut down after the flush is complete.\n```\n\nThe following snippet highlights a detailed implementation of the `TierBlockingFlush` class with support for more than 65535 parties. Note that this is just a sample code snippet and you can modify it as per your use case.\n\n```\npackage sample;\n\nimport com.rudderstack.sdk.java.analytics.Callback;\nimport com.rudderstack.sdk.java.analytics.Plugin;\nimport com.rudderstack.sdk.java.analytics.messages.Message;\n\nimport java.util.concurrent.Phaser;\n\n/**\n * Blocking flush implementor for cases where parties exceed 65535\n */\npublic class TierBlockingFlush {\n\n    private static final int MAX_PARTIES_PER_PHASER = (1 << 16) - 2; // max a phaser can accommodate\n\n    public static TierBlockingFlush create() {\n        return new TierBlockingFlush(MAX_PARTIES_PER_PHASER);\n    }\n\n    private TierBlockingFlush(int maxPartiesPerPhaser) {\n        this.currentPhaser = new Phaser(1);\n        this.maxPartiesPerPhaser = maxPartiesPerPhaser;\n    }\n\n    private Phaser currentPhaser;\n    private final int maxPartiesPerPhaser;\n\n    public Plugin plugin() {\n        return builder -> {\n            builder.messageTransformer(\n                    messageTransformationBuilder -> {\n                        currentPhaser = currentPhaser.getRegisteredParties() == maxPartiesPerPhaser ? new Phaser(currentPhaser) : currentPhaser;\n                        currentPhaser.register();\n                        return true;\n                    });\n\n            builder.callback(\n                    new Callback() {\n                        @Override\n                        public void success(Message message) {\n                            onResult();\n                        }\n\n                        @Override\n                        public void failure(Message message, Throwable throwable) {\n                            onResult();\n                        }\n\n                        private void onResult() {\n                            if (currentPhaser.getUnarrivedParties() == 0) {\n                                currentPhaser = currentPhaser.getParent();\n                            }\n                            currentPhaser.arrive();\n                        }\n                    });\n        };\n    }\n\n    public void block() {\n        currentPhaser.arriveAndAwaitAdvance();\n    }\n}\n```\n\n## Logging\n\nTo see the data that is sent over HTTP when debugging any issues, enable the SDK’s verbose logging feature.\n\n*   Refer to the [sample snippet](https://github.com/rudderlabs/rudder-sdk-java/blob/master/analytics-sample/src/main/java/sample/LoggingPlugin.java) for more information on setting the logs using the Java SDK.\n*   Refer to the [sample app](https://github.com/rudderlabs/rudder-sdk-java/blob/master/analytics-sample/src/main/java/sample/Main.java) for more information on using the logging plugin during the SDK initialization.\n\n## Gzipping requests\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The Gzip feature is enabled by default in the Java SDK version 3.0.0.\n\nThe Java SDK automatically gzips requests. It also lets you do so using interceptors in [OkHttp](https://github.com/square/okhttp#rewriting-requests).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Refer to the [sample app](https://github.com/rudderlabs/rudder-sdk-java/blob/master/analytics-sample/src/main/java/sample/Main.java) in the Java SDK repository for a working example.\n\nTo disable the Gzip feature using the `setGZIP` API while initializing the SDK, run the following snippet:\n\n```\nRudderAnalytics analytics = RudderAnalytics\n         .builder(\"<WRITE_KEY>\")\n         .setDataPlaneUrl(\"<DATA_PLANE_URL>\")\n\t\t .setGZIP(false)\n         .build();\n```\n\nNote that if you [pass the OkHttp client](https://github.com/rudderlabs/rudder-sdk-java/blob/c0de9e6de6d8fdde43df418edd33a7e6cc720680/analytics-sample/src/main/java/sample/Main.java#L95) using the `client` API while initializing your SDK, then it is preferred over the default Gzip behavior. It means that even if you use the `setGZIP` API to enable/disable Gzip requests, the behavior will be determined based on the interceptor passed in the OkHttp client.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> To gzip requests on a self-hosted data plane, make sure your [rudder-server](https://github.com/rudderlabs/rudder-server) version is **1.4 or higher**. Otherwise, your events might fail.\n\n## FAQ\n\n#### Can I use the `ImmutableMap` class?\n\nYes, you can use the `ImmutableMap` class via the [Guava library](https://guava.dev/) or use the Java maps.\n\n### How do I flush events on demand?\n\nTo flush your events on demand, call the `flush` method as shown:\n\n#### How does the Java SDK handle events larger than 32KB?\n\nThe Java SDK accepts and sends each event greater than 32KB as a single batch and sends them to the backend.\n\n#### Does the Java SDK support event ordering?\n\nThe Java SDK does not support event ordering by default.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Java SDK | RudderStack Docs",
  "description": "Use RudderStack’s Java SDK to send server-side events to various destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/activecampaign/",
  "markdown": "# ActiveCampaign source | RudderStack Docs\n\nSync data from ActiveCampaign to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[ActiveCampaign](https://www.activecampaign.com/) is a popular marketing automation and CRM platform that lets you drive effective customer engagement and retention.\n\nThis document guides you in setting up ActiveCampaign as a source in RudderStack. Once configured, RudderStack automatically ingests your specified ActiveCampaign data, which can then be routed to your RudderStack-supported data warehouse destination.\n\n## Getting started\n\nTo set up ActiveCampaign as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **ActiveCampaign** from the list of sources.\n3.  Assign a name to your source and click **Next**.\n\n### Connection settings\n\n1.  Click **Create Credentials from Scratch**. You will then see the following screen:\n\n[![ActiveCampaign credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/activecampaign-connection-settings.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/activecampaign-connection-settings.webp)\n\n2.  Enter the following connection credentials to authenticate your ActiveCampaign account with RudderStack:\n\n*   **Account Name**: Enter your ActiveCampaign account name. You can find it in your ActiveCampaign dashboard by going to the **Settings** > **Account** section.\n*   **URL**: Enter your ActiveCampaign API access URL. You can find it in your ActiveCampaign dashboard by going to the **Settings** > **Developer** section.\n*   **API Key**: Enter your ActiveCampaign API key. You can find it in your ActiveCampaign dashboard by going to the **Settings** > **Developer** section.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on obtaining the ActiveCampaign account name, URL, and API key, refer to the [FAQ](#faq) section below.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from ActiveCampaign to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your ActiveCampaign data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from ActiveCampaign:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nChoose the ActiveCampaign data that you wish to ingest via RudderStack. You can either select all data or choose specific ActiveCampaign data attributes as per your requirement.\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/activecampaign-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/activecampaign-connection-settings-2.webp)\n\nActiveCampaign is now configured as a source. RudderStack will start ingesting data from ActiveCampaign as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\n#### How do I obtain the ActiveCampaign account name?\n\nGo to your ActiveCampaign dashboard and locate it under **Settings** > **Account** > **Account Information**:\n\n[![ActiveCampaign account name](https://www.rudderstack.com/docs/images/cloud-extract-sources/activecampaign-connection-settings-4.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/activecampaign-connection-settings-4.webp)\n\n#### How do I obtain the ActiveCampaign API key and URL?\n\nGo to your ActiveCampaign dashboard and locate these under **Settings** > **Developer** > **API Access**:\n\n[![ActiveCampaign API key and URL](https://www.rudderstack.com/docs/images/cloud-extract-sources/activecampaign-connection-settings-3.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/activecampaign-connection-settings-3.webp)\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "ActiveCampaign source | RudderStack Docs",
  "description": "Sync data from ActiveCampaign to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/amplitude/",
  "markdown": "# Amplitude source | RudderStack Docs\n\nSync data from Amplitude to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Amplitude](https://amplitude.com/) is a comprehensive product analytics platform for the web as well as mobile platforms. It helps you get useful marketing insights that drive product strategy, customer conversion, and retention.\n\nThis document guides you in setting up Amplitude as a source in RudderStack. Once configured, RudderStack automatically ingests your Amplitude data and routes it to your specified data warehouse destination.\n\n## Getting started\n\nTo set up Amplitude as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Amplitude** from the list of sources.\n3.  Assign a name to your source and click **Next**.\n\n### Connection settings\n\nEnter the following connection settings to set up the Amplitude source:\n\n[![Amplitude connection settings](https://www.rudderstack.com/docs/images/cloud-extract-sources/amplitude-connection-settings.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/amplitude-connection-settings.webp)\n\nThe settings are described below:\n\n*   **API Key** : Enter your Amplitude project’s API key. You can find it in your Amplitude dashboard by going to **Settings** > **Projects** > Your project name > **General**.\n*   **Secret Key**: Enter your project’s secret key.\n\n*   **Replication Start Date**: Select the date from when RudderStack ingests your Amplitude data.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack will **not replicate** any data before this date.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Amplitude to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Amplitude data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Amplitude:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the Amplitude data you want to ingest by selecting the required resources:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/amplitude-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/amplitude-connection-settings-2.webp)\n\nThe below table mentions the syncs and [API endpoints](https://www.docs.developers.amplitude.com/analytics/#api-references) supported by these resources from Amplitude to your warehouse destination:\n\n| Resource | Full Refresh sync | Incremental sync | Primary key | Amplitude API endpoint |\n| --- | --- | --- | --- | --- |\n| `events` | Yes | Yes | `uuid` | `/export` |\n| `cohorts` | Yes | No  | `id` | `/cohorts` |\n| `average_session_length` | No  | Yes | `date` | `/dashboard` |\n| `annotations` | Yes | No  | `id` | `/annotations` |\n| `active_users` | No  | Yes | `date` | `/dashboard` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh** and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\nAmplitude is now configured as a source. RudderStack will start ingesting data from Amplitude as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\n#### Can I connect my Amplitude source to multiple data warehouse destinations?\n\nYou can connect **only one data warehouse destination** per Cloud Extract source. If you wish to send data to multiple warehouses, you can configure multiple Cloud Extract sources with the same settings and connect them to each data warehouse.\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Amplitude source | RudderStack Docs",
  "description": "Sync data from Amplitude to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-amp-analytics/",
  "markdown": "# AMP Analytics | RudderStack Docs\n\nSend event data from your AMP page to RudderStack.\n\n* * *\n\n*     6 minute read  \n    \n\nThe RudderStack AMP component makes it easy to send the event data from your AMP page to your specified destinations via RudderStack. Now you don’t need to implement or test multiple components for different destinations for your event data. This component collects the default properties and sends a `page` event to RudderStack.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Since the AMP source sends the data directly to the RudderStack backend, it supports only cloud mode destinations. For more information on cloud mode, see [RudderStack Connection Modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/).\n\n## Setup requirements\n\nTo use the RudderStack AMP component, the following prerequisites must be met:\n\n*   You need to set up a [RudderStack account](https://app.rudderstack.com/signup).\n*   Once signed up, [set up an AMP source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the dashboard. You should be able to see a **Write Key** for this source, as shown below:\n\n[![AMP source write key](https://www.rudderstack.com/docs/images/event-stream-sources/amp-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/amp-write-key-new.webp)\n\n*   You will also need a data plane URL. Refer to the [Glossary](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has an SDK installation snippet containing both the write key and the data plane URL. You can use it to integrate the AMP component into your project.\n\n## Getting started\n\nAfter completing the initial setup of your AMP project, follow these steps to start sending your event data to RudderStack:\n\n*   Add an AMP source in your RudderStack [dashboard](https://app.rudderstack.com/).\n*   Note the **Write Key**. This will be required later when using the AMP Analytics component.\n\n[![](https://www.rudderstack.com/docs/images/event-stream-sources/amp-analytics-1.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/amp-analytics-1.webp)\n\n*   Include the RudderStack AMP component before the closing `</head>` tag:\n\n```\n<script async custom-element=\"amp-analytics\"\nsrc=\"https://cdn.ampproject.org/v0/amp-analytics-0.1.js\"></script>\n```\n\n*   Start sending the event data to RudderStack by adding the following script inside of your `<body>` tag.\n*   You can fetch the AMP config JSON from our [CDN](https://cdn.rudderlabs.com/amp/rudderstack.json). The following snippet shows you how to do this:\n\n```\n<amp-analytics config=\"https://cdn.rudderlabs.com/amp/rudderstack.json\">\n  <script type=\"application/json\">\n    {\n      \"vars\": {\n        \"writeKey\": WRITE_KEY,\n        \"dataPlaneUrl\": DATA_PLANE_URL,\n        \"pageName\": \"Your Page Name\"\n      }\n    }\n  </script>\n</amp-analytics>\n```\n\n## Page\n\nYou can record the page views on your website using the `page` request. To add custom properties to your page request, you can use the `extraUrlParams` object.\n\nRefer to the [custom properties](#custom-properties) section for details.\n\nRudderStack’s AMP analytics component includes an automatic page view. You can set the name of the automatic page view through `pageName`, as shown in the following snippet:\n\n```\n<amp-analytics config=\"https://cdn.rudderlabs.com/amp/rudderstack.json\">\n<script type=\"application/json\">\n  {\n    \"vars\": {\n      \"writeKey\": WRITE_KEY,\n      \"dataPlaneUrl\": DATA_PLANE_URL,\n      \"pageName\": \"Your Page Name\"\n    }\n  }\n</script>\n</amp-analytics>\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you fail to provide the value for the `pageName` variable, RudderStack automatically sets the page name to `Unknown Page`.\n\n## Track\n\nYou can record any user event on your website using the `track` request, or create a [trigger](https://amp.dev/documentation/components/amp-analytics/#triggers) to do so. You need to set the event’s name in the trigger’s variables, as shown in the code snippet below:\n\n```\n<body>\n<amp-analytics config=\"https://cdn.rudderlabs.com/amp/rudderstack.json\">\n  <script type=\"application/json\">\n  {\n    \"vars\": {\n      \"writeKey\": WRITE_KEY,\n      \"dataPlaneUrl\": DATA_PLANE_URL,\n      \"pageName\": \"My AMP Page\"\n    },\n    \"triggers\": {\n      \"clickEvent\": {\n        \"on\": \"click\",\n        \"selector\":\"#clickTrigger\",\n        \"request\": \"track\",\n        \"vars\": {\n          \"eventName\": \"new click event\"\n        },\n        \"extraUrlParams\": {\n          \"properties.clickType\": \"href\"\n        }\n      }\n    }\n  }\n  </script>\n</amp-analytics>\nTrack - Click <a href=\"#\" id=\"clickTrigger\">here</a> to send\n</body>\n```\n\n## Properties\n\nYou can send extra properties for your `page` or `track` events to add more information along with the event request. Once you mention the properties as `extraUrlParams` in the `amp-analytics` tag of your implementation, they will be passed to RudderStack for further processing.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Prepend `properties.` to the property name within the `extraUrlParams` object so that it can be parsed as the property value in RudderStack. For more information, refer to the [Custom properties](#custom-properties) section below.\n\n### Default properties\n\nRudderStack collects the following properties with each `track` and `page` view:\n\n```\n{\n  \"anonymousId\": \"amp-<unique-id>\",\n  \"context.locale\": \"en-US\",\n  \"context.page.path\": \"/article\",\n  \"context.page.url\": \"http://example.com/article\",\n  \"context.page.referrer\": \"referrer\",\n  \"context.page.title\": \"My Article\",\n  \"context.screen.width\": 600,\n  \"context.screen.height\": 800\n}\n```\n\n### Custom properties\n\nYou can choose to send custom properties by adding the `extraUrlParams` object. Every property name should be prefixed with `properties.`.\n\nA sample call with the custom properties is shown below:\n\n```\n<amp-analytics config=\"https://cdn.rudderlabs.com/amp/rudderstack.json\">\n<script type=\"application/json\">\n  {\n    \"vars\": {\n      \"writeKey\": WRITE_KEY,\n      \"dataPlaneUrl\": DATA_PLANE_URL,\n      \"pageName\": \"Your Page Name\"\n    },\n    \"extraUrlParams\": {\n      \"properties.type\": \"article\",\n      \"properties.published_at\": \"2016-06-28\",\n      \"properties.author\": \"John Doe\",\n      \"properties.button_type\": \"read-more\",\n      \"properties.article_id\": \"my-article-id\"\n    }\n  }\n</script>\n</amp-analytics>\n```\n\nAny property set at the top-level `extraUrlParams` object will be sent with each request. For example, the property `article_id` will be sent for all requests triggered by this snippet.\n\nIf you want to add custom properties to a specific event or a `page` call, you need to add an `extraUrlParams` object within your trigger configuration. The following code snippet shows how to do so:\n\n```\n<body>\n  <amp-analytics config=\"https://cdn.rudderlabs.com/amp/rudderstack.json\">\n    <script type=\"application/json\">\n    {\n      \"vars\": {\n        \"writeKey\": WRITE_KEY,\n        \"dataPlaneUrl\": DATA_PLANE_URL,\n        \"pageName\": \"My AMP Page\"\n      },\n      \"triggers\": {\n        \"clickEvent\": {\n          \"on\": \"click\",\n          \"selector\":\"#clickTrigger\",\n          \"request\": \"track\",\n          \"vars\": {\n            \"eventName\": \"new click event\"\n          },\n          \"extraUrlParams\": {\n            \"properties.clickType\":\"href\"\n          }\n        }\n      },\n      \"extraUrlParams\": {\n        \"properties.type\": \"article\",\n        \"properties.published_at\": \"2016-06-28\",\n        \"properties.author\": \"John Doe\",\n        \"properties.button_type\": \"read-more\",\n        \"properties.article_id\": \"my-article-id\"\n      }\n    }\n    </script>\n  </amp-analytics>\n  Track - Click <a href=\"#\" id=\"clickTrigger\">here</a> to send\n</body>\n```\n\nThe property `clickType` will be sent only for the `track` request, whereas the property `article_id` will be sent for both the requests (the automatic `page` and `track` call).\n\n### UTM parameters\n\nRudderStack does not collect the UTM information from the SDK. Instead, we encourage you to send the properties as `extraUrlParams`.\n\nAn example of using `extraUrlParams` is as shown:\n\n```\n<amp-analytics config=\"https://cdn.rudderlabs.com/amp/rudderstack.json\">\n  <script type=\"application/json\">\n    {\n    \"vars\": {\n      \"writeKey\": WRITE_KEY,\n      \"dataPlaneUrl\": DATA_PLANE_URL,\n      \"pageName\": \"Your Page Name\"\n    },\n    \"extraUrlParams\": {\n      \"properties.utm_source\": \"google\",\n      \"properties.utm_campaign\": \"2016-06-28\",\n      \"properties.utm_medium\": \"email\"\n    }\n  }\n  </script>\n</amp-analytics>\n```\n\n## AMP Linker\n\nYou can use the [AMP Linker](https://amp.dev/documentation/examples/advertising-analytics/joining_analytics_sessions/) feature to ensure a merged session for users navigating from cached AMP pages (on an AMP cache) to AMP pages on your domain. When a user navigates from a cached AMP page to an AMP page on your domain, the linker sends the current `AMP ClientID` by adding a URL parameter to the outgoing link. The AMP page on your domain receives this parameter and uses it to set a first-party cookie.\n\nOnce this cookie is set, both AMP and Non-AMP pages on your domain use this cookie to identify the user uniquely. This way, the same AMP Client ID (set by the cached AMP page) can be used to identify the user in all contexts.\n\nThe following code snippet demonstrates how to enable this feature:\n\n```\n<body>\n  <amp-analytics config=\"https://cdn.rudderlabs.com/amp/rudderstack.json\">\n    <script type=\"application/json\">\n      {\n        \"vars\": {\n          \"writeKey\": WRITE_KEY,\n          \"dataPlaneUrl\": DATA_PLANE_URL,\n          \"pageName\": \"Your Page Name\"\n        },\n        \"linkers\": {\n          \"enabled\": true\n        }\n      }\n    </script>\n  </amp-analytics>\n</body>\n```\n\nYou can also use the query parameter from the decorated outgoing link from an AMP cache page to a non-AMP page on your domain by using the [RudderStack JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#overriding-anonymous-id).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "AMP Analytics | RudderStack Docs",
  "description": "Send event data from your AMP page to RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/data-pipelines/event-stream/quickstart/server-side-quickstart/",
  "markdown": "# Server-side Quickstart | RudderStack Docs\n\nGet event data flowing from your server-side app in less than 15 minutes.\n\n* * *\n\n*     8 minute read  \n    \n\nThis quickstart guide walks through code examples using the [Node.js SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/). It will help you get started with our server-side SDKs.\n\nFor simple use cases, you can get data flowing in less than 15 minutes by following these three steps:\n\n1.  **Install a RudderStack SDK** in your back-end/server-side app.\n2.  **Instrument API calls** to identify users and capture user actions (like page views and button clicks).\n3.  **Connect destination integrations** to stream events to business tools and your warehouse automatically.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> [Sign up](https://app.rudderstack.com/signup) for a free RudderStack Cloud account before you get started.\n\n## Step 1: Installing the Node SDK\n\nIn most cases, installing one of RudderStack’s [server-side](https://www.rudderstack.com/docs/sources/event-streams/sdks/#server) SDKs in a dev environment takes a back-end developer less than 10 minutes.\n\n### How data engineers can get the Node SDK code\n\n1.  Sign in to your RudderStack account and click **\\+ Add source** in the default **Connections** view.\n\n[![Add source](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)\n\n2.  Select **Node**.\n\n[![Add Node source](https://www.rudderstack.com/docs/images/get-started/quickstart/add-node-source.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-node-source.webp)\n\n3.  Copy the installation snippet under the **Setup** tab (this snippet contains the [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) and [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) , which ensure events are sent to the correct source).\n\n[![Node SDK snippet](https://www.rudderstack.com/docs/images/get-started/quickstart/node-snippet.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/node-snippet.webp)\n\n4.  Send the snippet to your back-end development team.\n\n### How back-end engineers can install the Node SDK\n\nInstall the Node SDK in your back-end app using npm by running the following command:\n\n```\nnpm install @rudderstack/rudder-sdk-node\n```\n\n#### **Initialize the SDK**\n\nYour data engineer should have provided you the [Node SDK snippet](#how-data-engineers-can-get-the-node-sdk-code). Follow these steps to initialize the SDK:\n\nThe snippet you recieved should already contain the [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) and [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) values, which are needed in order to route the event to the correct source in RudderStack.\n\nFor reference, here’s what the Node SDK installation snippet looks like:\n\n```\nconst RudderAnalytics = require('@rudderstack/rudder-sdk-node');\n\nconst client = new RudderAnalytics(WRITE_KEY, {\n  dataPlaneUrl: DATA_PLANE_URL\n});\n```\n\nFor more information, see the full [Node SDK documentation](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Import the initialization snippet in `app.js` or any other file in your project, depending on your requirement.\n\n## Step 2: Instrument API calls\n\nAll RudderStack server-side SDKs follow a [standard event spec](https://www.rudderstack.com/docs/event-spec/standard-events/). It helps you plan your event data and supports various API calls for tracking events in your app - these include `identify`, `track`, `screen`, `group`, `alias`, and `reset` calls.\n\nMost users start by implementing `track` and `identify` calls.\n\nYou can use **`track` calls** to record user activities like clicking a button, creating a post, or making a purchase. You can describe `track` events with [propertiesProperties are additional contextual information you can add to a `track` call to further describe the action a user takes.](https://www.rudderstack.com/docs/resources/glossary/#properties) .\n\nHere is an example of a `track` call named `Item Viewed`. The properties are `price` and `item_id`:\n\n```\nclient.track({\n  userId: \"1hKOmRA4GRlm\",\n  event: \"Item Viewed\",\n  properties: {\n    price: 19.95,\n    item_id: \"1234abcd\",\n  },\n})\n```\n\n**[`identify`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/#identify) calls** are typically fired when a user performs an identifying action like creating an account or making a purchase. `identify` calls also associate a known user with their actions (even if previously anonymous). You can describe users with attributes by adding [traitsTraits are attributes that describe a user. They can be added to an identify call in the `traits` object. Some examples of traits include age, gender, or some specific details - for example, a user’s product plan (free, basic, premium).](https://www.rudderstack.com/docs/resources/glossary/#traits) to the payload.\n\nHere is an example of an `identify` call. The `traits` are `name`, `email`, `plan`, and `friends`.\n\n```\nclient.identify({\n  userId: \"1hKOmRA4GRlm\",\n  traits: {\n    name: \"Alex Keener\",\n    email: \"alex@example.com\",\n    plan: \"Free\",\n    friends: 21,\n  },\n})\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not store or persist user state in any of the server-side SDKs.**\n> \n> Unlike the client-side SDKs that automatically store state information for individual users, the server-side SDKs don’t persist state. Hence, you must specify either `userId` or `anonymousId` every time you make any API calls using a server-side SDK to associate events with individual users.\n\nSee the [RudderStack Node SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/#sending-events) documentation for more information on the other supported API calls.\n\n## Step 3: Verify data flow and connect destination integrations\n\nOnce software engineers have installed the SDK and instrumented events, the data team can verify the event flow into RudderStack. Then, they can connect destination integrations to forward events to the tools in their stack automatically.\n\n### 1\\. Verify data flow for your Node source\n\nBefore connecting destinations, verify that events are flowing into RudderStack by checking the **Live Events** viewer in your Node source.\n\nTo see live events, go to your Node source from the **Connections** view and click the **Live Events** button in the top right of your screen.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> There will be a delay before you see events in the **Live Events** view. RudderStack doesn’t store any data; it temporarily opens a gateway between the control plane and data plane to show you the live events. The delays usually last only a few seconds but on the [RudderStack Cloud Free](https://rudderstack.com/pricing/) plan, they can last up to one minute.\n\n[![Live Events](https://www.rudderstack.com/docs/images/get-started/quickstart/source-live-events-node.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/source-live-events-node.webp)\n\nAfter a few seconds, you will see events populating the feed.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you do not see events in the **Live Events** view, then there is likely a problem with your instrumentation.\n\n### 2\\. Connect destination integrations\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> RudderStack supports 200+ integrations including data warehouses and data lakes, marketing platforms, CRMs, analytics tools, streaming platforms, and more. You can see the full list of supported destination integrations [here](https://www.rudderstack.com/docs/destinations/overview/).\n\nTo add a destination in RudderStack:\n\n1.  Click **\\+ Add destination** in the default **Connections** view.\n\n[![Add destination](https://www.rudderstack.com/docs/images/get-started/quickstart/add-destination-node.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-destination-node.webp)\n\n2.  From the list, select your preferred destination where you want to route the event data. Here are some popular destinations to help you get started:\n\n| Category | Destination |\n| --- | --- |\n| Analytics | [Amplitude](https://www.rudderstack.com/docs/destinations/streaming-destinations/amplitude/), [Mixpanel](https://www.rudderstack.com/docs/destinations/streaming-destinations/mixpanel/), [GA4](https://www.rudderstack.com/docs/destinations/streaming-destinations/google-analytics-4/) |\n| CRM | [HubSpot](https://www.rudderstack.com/docs/destinations/streaming-destinations/hubspot/), [Salesforce](https://www.rudderstack.com/docs/destinations/streaming-destinations/salesforce/) |\n| Marketing | [Braze](https://www.rudderstack.com/docs/destinations/streaming-destinations/braze/), [Mailchimp](https://www.rudderstack.com/docs/destinations/streaming-destinations/mailchimp/) |\n| Object storage | [Amazon S3](https://www.rudderstack.com/docs/destinations/streaming-destinations/amazon-s3/), [Redis](https://www.rudderstack.com/docs/destinations/streaming-destinations/redis/) |\n| Streaming platforms | [Apache Kafka](https://www.rudderstack.com/docs/destinations/streaming-destinations/kafka/), [Amazon Kinesis](https://www.rudderstack.com/docs/destinations/streaming-destinations/amazon-kinesis/) |\n| Warehouses | [Snowflake](https://www.rudderstack.com/docs/destinations/warehouse-destinations/snowflake/), [BigQuery](https://www.rudderstack.com/docs/destinations/warehouse-destinations/bigquery/), [Redshift](https://www.rudderstack.com/docs/destinations/warehouse-destinations/redshift/) |\n| Data lakes & lakehouses | [Databricks](https://www.rudderstack.com/docs/destinations/warehouse-destinations/delta-lake/), [Google Cloud Storage](https://www.rudderstack.com/docs/destinations/warehouse-destinations/gcs-datalake/) |\n\n3.  Set up the destination by configuring the connection settings. For details, see the destination-specific documentation.\n\n## Next steps\n\nThis section contains some optional, but helpful steps that leverage RudderStack’s most popular features for transforming events and debugging problems.\n\n### Add event transformations\n\nOne of RudderStack’s most-loved features is [Event Transformations](https://www.rudderstack.com/docs/transformations/overview/), which you can use to operate on the payloads flowing through RudderStack. You can use it for:\n\n*   Sampling or filtering events.\n*   Removing sensitive user PII from your events.\n*   Enriching events using static logic, an external API, and more.\n\nTo use a transformation:\n\n1.  In the left sidebar, go to **Collect** > **Transformations**. Then, click **Create Transformation**.\n\n[![Create transformation](https://www.rudderstack.com/docs/images/get-started/quickstart/create-transformation.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/create-transformation.webp)\n\n2.  Select a [transformation template](https://www.rudderstack.com/docs/transformations/templates/) from the list depending on your use case. To create a transformation from scratch, click **Custom transformation**.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Transformation templates contain prepopulated, ready-to-use transformation logic, which you can apply to your events before sending them to the destination. You can also modify the code as per your needs.\n\n[![Choose a template](https://www.rudderstack.com/docs/images/features/transformation-templates-2.webp)](https://www.rudderstack.com/docs/images/features/transformation-templates-2.webp)\n\n3.  Verify if your transformation works as expected by clicking the **Run Test** button.\n\n[![Testing a transformation](https://www.rudderstack.com/docs/images/features/run-test-transformations.webp)](https://www.rudderstack.com/docs/images/features/run-test-transformations.webp)\n\n4.  Click **Save** to save your transformation.\n5.  Go to the **Connections** tab of your transformation and connect it to the destination you set up above. See [Connect transformation to destination](https://www.rudderstack.com/docs/transformations/manage/#connect-transformation-to-destination) for more information.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> When you add a transformation and connect it to a destination, RudderStack does the following:\n> \n> 1.  Tracks events at the source.\n> 2.  Applies the transformation logic to your events.\n> 3.  Converts the events in a format the destination expects - RudderStack does this internally and requires no user intervention.\n> 4.  Sends the transformed events to your destination.\n\n### Debugging\n\nRudderStack gives you complete observability into your events and the ability to debug errors that might occur in case of event failures. It provides the [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) feature, where you can:\n\n*   Verify your instrumentation.\n*   Get a real-time view of the events flowing from your sources to the connected destinations.\n*   Identify and debug any errors at the source, destination, or transformation level and narrow down the root cause of the issue.\n\n#### **Source Live Events viewer**\n\nThis is helpful to verify if RudderStack is receiving the source events at all. The payload you see in this viewer is the raw event payload collected from your website.\n\n[![Live Events](https://www.rudderstack.com/docs/images/get-started/quickstart/source-live-events-node.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/source-live-events-node.webp)\n\n[![Source live events details](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events-details.webp)](https://www.rudderstack.com/docs/images/rs-cloud/source-live-events-details.webp)\n\n#### **Transformation Live Events viewer**\n\nThis viewer will give you a before and after snapshot of the event going into your user transformation and what it looks like afterward. It also notifies you about any dropped events or errors during the transformation, along with the details.\n\n[![Transformation live events](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events.webp)](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events.webp)\n\n[![Transformation live events error message](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events-errors.webp)](https://www.rudderstack.com/docs/images/rs-cloud/transformation-live-events-errors.webp)\n\n#### **Destination Live Events viewer**\n\nThis viewer shows you what the payload looks like when RudderStack sends it to the destination. You can also see the detailed error message if the destination returns an error.\n\n[![Payload to the destination](https://www.rudderstack.com/docs/images/rs-cloud/destination-live-events-details.webp)](https://www.rudderstack.com/docs/images/rs-cloud/destination-live-events-details.webp)\n\nSee the [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) documentation for more details.\n\n## Support\n\nFor any questions on using RudderStack, you can:\n\n*   Start a conversation in our [Community Slack](https://rudderstack.com/join-rudderstack-slack-community).\n*   Drop an email to [RudderStack support](mailto:support@rudderstack.com).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Server-side Quickstart | RudderStack Docs",
  "description": "Get event data flowing from your server-side app in less than 15 minutes.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/iterable/",
  "markdown": "# Iterable Webhook | RudderStack Docs\n\nIngest your event data from Iterable into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For ingesting your Iterable records and sending them to your warehouse destinations via RudderStack, refer to the [Iterable Cloud Extract](https://www.rudderstack.com/docs/sources/extract/iterable/) documentation.\n\n[Iterable](https://iterable.com/) is a popular growth marketing platform that lets you maximize customer interaction and improve your customers’ overall LTV (Life Time Value).\n\nThis guide will help you set up Iterable Webhook as a source in RudderStack. You can then ingest real-time user events in Iterable and send them to your specified destinations.\n\n## Getting started\n\nFollow these steps to set up Iterable as a source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Iterable Webhook**.\n2.  Assign a name to your source and click **Continue**.\n3.  The Iterable source is now configured. Go to the **Settings** tab and note the **Webhook URL**:\n\n[![Iterable webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/iterable-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/iterable-webhook-url.webp)\n\n4.  Go to your Iterable account and navigate to **Integrations** > **System Webhooks**.\n5.  Click **Create Webhook** and enter the webhook URL obtained in **Step 3** in the **Endpoint URL** field:\n\n[![Iterable source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/webhook-url-iterable.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/webhook-url-iterable.webp)\n\n6.  Finally, click **Create**.\n\n## Event transformation\n\nRudderStack ingests the events from Iterable after converting them into the RudderStack event format. It also populates the following properties from the Iterable event payload into the RudderStack event:\n\n| Iterable property | RudderStack property |\n| --- | --- |\n| `email` | `context.traits.email` |\n| `userId` | `userId` |\n| `dataFields` | `properties` |\n| `eventName` | `event` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `userId` is a unique identifier in the output payload. If not provided, RudderStack creates a unique `userId` using `email`.\n\nIterable supports the following events list:\n\n*   Blast Send\n*   Email Bounce\n*   Email Click\n*   Email Complaint\n*   Email Open\n*   Email Send Skip\n*   Email Subscribe\n*   Email Unsubscribe\n*   Hosted Unsubscribe Click\n*   In-App Click\n*   In-App Open\n*   In-App Send\n*   In-App Send Skip\n*   Push Bounce\n*   Push Open\n*   Push Send\n*   Push Send Skip\n*   Push Uninstall\n*   SMS Bounce\n*   SMS Click\n*   SMS Send\n*   SMS Received\n*   SMS Send Skip\n*   Triggered Send\n*   Web Push Send\n*   Web Push Send Skip\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from the Iterable source platform and creates the resulting payload.\n\nA sample payload sent by Iterable is shown below:\n\n```\n{\n  \"email\": \"docs@iterable.com\",\n  \"userId\": \"1\",\n  \"eventName\": \"hostedUnsubscribeClick\",\n  \"dataFields\": {\n    \"country\": \"United States\",\n    \"city\": \"San Jose\",\n    \"campaignId\": 1074721,\n    \"ip\": \"192.168.0.1\",\n    \"userAgentDevice\": \"Mac\",\n    \"messageId\": \"ceb3d4d929fc406ca93b28a0ef1efff1\",\n    \"emailId\": \"c1074721:t1506266:docs@iterable.com\",\n    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36\",\n    \"workflowName\": \"My workflow\",\n    \"locale\": null,\n    \"templateId\": 1506266,\n    \"emailSubject\": \"My email subject\",\n    \"url\": \"https://iterable.com\",\n    \"labels\": [],\n    \"createdAt\": \"2020-03-21 00:24:08 +00:00\",\n    \"templateName\": \"My email template\",\n    \"messageTypeId\": 13406,\n    \"experimentId\": null,\n    \"region\": \"CA\",\n    \"campaignName\": \"My email campaign\",\n    \"workflowId\": 60102,\n    \"email\": \"docs@iterable.com\",\n    \"channelId\": 12466\n  }\n}\n```\n\nRudderStack transforms the above payload into the following payload:\n\n```\n{\n  \"userId\": \"1\",\n  \"context\": {\n    \"integration\": {\n      \"name\": \"Iterable\",\n      \"version\": \"1.0.0\"\n    },\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"traits\": {\n      \"email\": \"docs@iterable.com\"\n    }\n  },\n  \"event\": \"hostedUnsubscribeClick\",\n  \"integrations\": {\n    \"Iterable\": false\n  },\n  \"properties\": {\n    \"country\": \"United States\",\n    \"city\": \"San Jose\",\n    \"campaignId\": 1074721,\n    \"ip\": \"192.168.0.1\",\n    \"userAgentDevice\": \"Mac\",\n    \"messageId\": \"ceb3d4d929fc406ca93b28a0ef1efff1\",\n    \"emailId\": \"c1074721:t1506266:docs@iterable.com\",\n    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36\",\n    \"workflowName\": \"My workflow\",\n    \"locale\": null,\n    \"templateId\": 1506266,\n    \"emailSubject\": \"My email subject\",\n    \"url\": \"https://iterable.com\",\n    \"labels\": [],\n    \"createdAt\": \"2020-03-21 00:24:08 +00:00\",\n    \"templateName\": \"My email template\",\n    \"messageTypeId\": 13406,\n    \"experimentId\": null,\n    \"region\": \"CA\",\n    \"campaignName\": \"My email campaign\",\n    \"workflowId\": 60102,\n    \"channelId\": 12466\n  },\n  \"receivedAt\": \"2020-03-21T00:24:08.000Z\",\n  \"timestamp\": \"2020-03-21T00:24:08.000Z\",\n  \"type\": \"track\"\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Iterable Webhook | RudderStack Docs",
  "description": "Ingest your event data from Iterable into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-php-sdk/",
  "markdown": "# PHP SDK | RudderStack Docs\n\nUse RudderStack’s PHP SDK to send your server-side events to various destinations.\n\n* * *\n\n*     11 minute read  \n    \n\nRudderStack’s PHP SDK lets you track and send the events from your PHP applications to the specified destinations.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack’s PHP SDK supports PHP version 7.4 and above. Refer to the PHP SDK’s [GitHub codebase](https://github.com/rudderlabs/rudder-php-sdk) for the implementation-specific details.\n\n[![Github Badge](https://img.shields.io/packagist/v/rudderstack/rudder-php-sdk?style=flat)](https://packagist.org/packages/rudderstack/rudder-php-sdk)\n\n## SDK setup requirements\n\n1.  Sign up to [RudderStack Cloud](https://app.rudderstack.com/signup).\n2.  [Set up a PHP source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in your dashboard. You should be able to see the **write key** for this source:\n\n[![PHP source write key](https://www.rudderstack.com/docs/images/event-stream-sources/php-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/php-write-key-new.webp)\n\nYou will also need the data plane URL. Refer to the [Dashboard Overview](https://www.rudderstack.com/docs/dashboard-guides/overview/#data-plane-url) guide for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has the SDK installation snippet containing both the write key and the data plane URL. Copy it to integrate the PHP SDK into your application.\n\n## Installing the PHP SDK\n\nInstall the RudderStack PHP SDK using the [composer](https://packagist.org/packages/rudderstack/rudder-php-sdk). You can also do so by running the following command:\n\n```\ngit clone https://github.com/rudderlabs/rudder-php-sdk /my/app/folders/\n```\n\nThen, use the composer to install the PHP SDK by running the following command:\n\n```\ncomposer require rudderstack/rudder-php-sdk\n```\n\n## Initializing the RudderStack client\n\nTo initialize the RudderStack client, run the following code snippet:\n\n```\nuse Rudder\\Rudder;\n\nrequire_once realpath(__DIR__ . '/vendor/autoload.php');\n\nRudder::init(WRITE_KEY, array(\n  \"data_plane_url\" => DATA_PLANE_URL,\n  \"consumer\"       => \"lib_curl\",\n  \"debug\"          => false,\n  \"max_queue_size\" => 10000,\n  \"flush_at\"       => 100,\n  \"ssl\"            => true\n));\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack accepts the `DATA_PLANE_URL` with or without the protocol. If the protocol is missing, RudderStack automatically prepends it to the URL based on whether the `ssl` option is set to `true` or `false`.\n\nRudderStack accepts the following data plane URL formats:\n\n| **SSL** | **Data Plane URL** |\n| --- | --- |\n| `true` | `https://example.dataplane.com` |\n| `true` | `example.dataplane.com` |\n| `false` | `http://example.dataplane.com` |\n| `false` | `example.dataplane.com` |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> While initializing the RudderStack client, the `ssl` field is optional if you are using the HTTPS protocol. If included, its value must be set to `true`. In case of the HTTP protocol, `ssl` is a required field and must always be set to `false`.\n\n### SDK initialization options\n\nThe RudderStack PHP SDK provides the following initialization options:\n\n| Option | Data type | Description |\n| --- | --- | --- |\n| `consumer` | String | Explicitly marks which consumer to use. The default value is `lib_curl`. Refer to the [Consumers](#consumers) section for more information. |\n| `data_plane_url` | String | Explicitly sets the data plane URL. The default value is `hosted.rudderlabs.com`. |\n| `debug` | Boolean | Determines whether to log messages and wait for a response. The default value is `false`. It makes the queuing consumers non-async and blocks the library until a response is received from the API. Hence it is **not recommended** for production use. |\n| `ssl` | Boolean | Determines whether to use TLS instead of SSL for the socket connection. The default value is `false`. |\n| `error_handler` | Function | Function to handle errors and is particularly useful for debugging. Note that if the debug mode is not specified, then the `error_handler` is only called on connection level errors and timeouts. For example, `function ($code, $message) {}`. |\n| `max_queue_size` | Integer | Max size of the queue. The default value is 10000. |\n| `batch_size` | Integer | Items to be sent in a single curl request. The default value is 100. It is recommended to use `flush_at` instead of `batch_size` as this option is deprecated. |\n| `flush_at` | Integer | Items to be sent in a single curl request. The default value is 100. |\n| `timeout` | Integer | Number of seconds to wait for the socket request to time out. The default value is 0.5. |\n| `filename` | String | Location to write the log file. The default value is `/tmp/analytics.log` when the file consumer is selected. |\n| `compress_request` | Boolean | Determines whether to use gzipped request payloads. The default value is `true`. It is supported for [RudderStack server](https://github.com/rudderlabs/rudder-server) v1.4.0 and above. |\n| `flush_interval` | Integer | Frequency in milliseconds to send data using flush method execution. The default value is 10000 miliseconds. |\n| `curl_timeout` | Integer | Timeout for the curl connections. The default value is 0, that is, infinite. |\n| `curl_connecttimeout` | Integer | Connect timeout for the curl connections. The default value is 300. |\n| `max_item_size_bytes` | Integer | Maximum message item size. The default value is 32000 bytes (32KB). |\n| `max_queue_size_bytes` | Integer | Maximum batch size. The default value is 512000 bytes (512KB). |\n| `filepermissions` | String | File permissions for file consumer. The default value is 0644. |\n\n## Migrating from v1 to v2\n\nTo migrate to PHP SDK v2, make sure the following conditions are met:\n\n*   Your PHP version should be v7.4 or above.\n*   If you are using self-hosted [rudder-server](https://github.com/rudderlabs/rudder-server), either upgrade it to v1.4.0 or above, or disable the gzipped request payloads (by setting `compress_request` to `false`).\n\n## Sending events\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not store or persist the user state in any of the server-side SDKs**.\n> \n> Unlike the client-side SDKs that deal with a single user at a given time, the server-side SDKs deal with multiple users simultaneously. Therefore, you must specify either the `userId` or `anonymousId` **every time** while making any API calls supported by the PHP SDK.\n\nRudderStack’s PHP SDK sends 100 events per batch by default. To emulate synchronous events, set the batch value to 1 using the [`flush_at`](#sdk-initialization-options) option.\n\n### Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` call made using the PHP SDK is shown below:\n\n```\nRudder::identify(array(\n  \"userId\" => \"1hKOmRA4GRlm\",\n  \"traits\" => array(\n    \"email\" => \"alex@example.com\",\n    \"name\" => \"Alex Keener\",\n    \"friends\" => 25\n  )\n));\n```\n\nThe `identify` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `context` | Object | An optional dictionary of information that provides context about a message. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n| `traits` | Object | Dictionary of the user’s traits like `name` or `email`. |\n\n### Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the user actions along with their associated properties. Each user action is called an **event**.\n\nA sample `track` call is shown below:\n\n```\nRudder::track(array(\n  \"userId\" => \"f4ca124298\",\n  \"event\" => \"Article Bookmarked\",\n  \"properties\" => array(\n    \"title\" => \"Snow Fall\",\n    \"subtitle\" => \"The Avalanche at Tunnel Creek\",\n    \"author\" => \"John Branch\"\n  )\n));\n```\n\nThe `track` method parameters are as described below:\n\n| Name | Type | Description |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `event`  <br>Required | String | Name of the event. |\n| `properties` | Object | An optional dictionary of the properties associated with the event. |\n| `context` | Object | An optional dictionary of information that provides context about a message. It is not directly related to the API call. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n\n### Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call allows you to record the page views on your application, along with the other relevant information about the page.\n\nA sample `page` call is as shown:\n\n```\nRudder::page(array(\n  \"userId\" => \"f4ca124298\",\n  \"category\" => \"Docs\",\n  \"name\" => \"PHP library\",\n  \"properties\" => array(\n    \"url\" => \"https://rudderstack.com/libraries/php/\"\n  )\n));\n```\n\nThe `page` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed page. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `properties` | Object | An optional dictionary of the properties associated with the viewed page, like `url` and `referrer`. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n\n### Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It lets you record the screen views on your mobile app along with other relevant information about the screen.\n\nA sample `screen` call is as shown:\n\n```\nRudder::screen(array(\n  \"userId\" => \"f4ca124298\",\n  \"category\" => \"Docs\",\n  \"name\" => \"PHP library\",\n  \"properties\" => array(\n    \"name\" => \"HomeScreen\"\n  )\n));\n```\n\nThe `screen` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed screen. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `properties` | Object | An optional dictionary of the properties associated with the screen, like `url` and `referrer`. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n\n### Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group. A sample `group` call is as shown:\n\n```\nRudder::group(array(\n  \"userId\" => \"2sfjej334\",\n  \"groupId\" => \"2sfjej334erresd\",\n  \"traits\" => array(\n    \"email\" => \"alex@example.com\",\n    \"name\" => \"Alex Keener\",\n    \"friends\" => 25\n  )\n));\n```\n\nThe `group` method parameters are as follows:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `groupId`  <br>Required | String | Unique identifier of the group, as present in your database. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `traits` | Object | Dictionary of the user’s traits like `name` or `email`. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n\n### Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly. You can use `alias` for managing the user’s identity in some of the downstream destinations.\n\nA sample `alias` call is as shown:\n\n```\nRudder::alias(array(\n  \"previousId\" => \"previousId\",\n  \"userId\" => \"2sfjej334\",\n));\n```\n\nThe `alias` method parameters are as mentioned below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `previousId`  <br>Required | String | The previous unique identifier of the user. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be enabled or disabled. |\n| `traits` | Object | Dictionary of the properties or traits associated with the group, such as `email` or `name`. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n\n## Consumers\n\nYou can specify the following consumers to make requests to RudderStack:\n\n### Lib-Curl Consumer\n\nThe [lib-curl consumer](https://github.com/rudderlabs/rudder-php-sdk/blob/develop/lib/Consumer/LibCurl.php) is RudderStack’s default PHP library. You can use it for faster response during lighter loads. The library runs synchronously, queuing and sending calls in batches to RudderStack.\n\nRudderStack ignores the HTTP responses by default to optimize the library’s speed. However, you can choose to wait for these responses by [enabling the debug mode](#sdk-initialization-options).\n\n### Fork-Curl Consumer\n\nThe [fork-curl consumer](https://github.com/rudderlabs/rudder-php-sdk/blob/develop/lib/Consumer/ForkCurl.php) can be used when you can’t use persistent sockets or want to ensure quick response for lighter loads. It creates an in-memory queue which buffers the `identify` and `track` calls. The queue is flushed by forking an async `curl` process that sends a batch request. The flushing happens after every 100 calls or at the end of serving the page, by default. You can use the `flush_at` property to configure this value.\n\nThe key difference between lib-curl and fork-curl consumer is in the underlying mechanism of creating the request. All events are added into a batch that, when flushed, initiates a request either using the PHP `exec` method executing a curl command (fork-curl consumer) or via PHP’s `curl_exec` method (lib-curl consumer).\n\n### Socket Consumer\n\nYou can use the [socket consumer](https://github.com/rudderlabs/rudder-php-sdk/blob/develop/lib/Consumer/Socket.php) which lets you make requests to RudderStack when you can’t spawn other processes from your PHP scripts. It initiates a socket request to RudderStack servers each time an `identify` or `track` call is made. The socket request writes the event data and closes the connection before waiting for a response. It is recommended to use some other consumer if your servers are dealing with hundreds of requests per second or cannot use a persistent connection.\n\n### File Consumer\n\nYou can also use the [file consumer](https://github.com/rudderlabs/rudder-php-sdk/blob/develop/lib/Consumer/File.php) for making requests to RudderStack. It records each `identify` or `track` call you make to a log file. Further, it uploads the log file by running the `file.php` file in RudderStack’s [github repository](https://github.com/rudderlabs/rudder-php-sdk/blob/develop/lib/Consumer/File.php).\n\nYou can run the `examples/SendBatchFromFile.php` file to upload your log file to RudderStack:\n\n```\nphp examples/SendBatchFromFile.php --secret YOUR_WRITE_KEY --file /tmp/analytics.log\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> It is recommended to run this command as a cron job after every few minutes so that your log files are created in manageable sizes. Every time you run the command, it removes the old log files once they are processed successfully.\n\nYou can create a new cron job to upload your log files, as shown in the following snippet:\n\n```\n$ # create a cron job that runs as www-data every minute\n$ echo '*/1 * * * * www-data php /my/path/to/analytics-php/SendBatchFromFile.php > /dev/null' | sudo tee /etc/cron.d/analytics\n$ sudo service cron reload    # reload the cron daemon\n```\n\n## FAQ\n\n#### Does the PHP SDK support event ordering?\n\nThe PHP SDK does not support event ordering by default.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "PHP SDK | RudderStack Docs",
  "description": "Use RudderStack's PHP SDK to send your server-side events to various destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/",
  "markdown": "# JavaScript SDK | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "JavaScript SDK | RudderStack Docs",
  "description": "Track event data and send it your specified destinations using the RudderStack JavaScript SDK.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/",
  "markdown": "# Node SDK | RudderStack Docs\n\nUse RudderStack’s Node SDK to send server-side events to various destinations.\n\n* * *\n\n*     12 minute read  \n    \n\nRudderStack’s Node SDK lets you track and send the events from your Node applications to the specified destinations.\n\nSee the Node SDK [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-node) for implementation-specific details.\n\n[![Github Badge](https://img.shields.io/npm/v/@rudderstack/rudder-sdk-node?style=flat)](https://www.npmjs.com/package/@rudderstack/rudder-sdk-node/)\n\n## SDK setup requirements\n\n1.  Sign up for [RudderStack Cloud](https://app.rudderstack.com/signup).\n2.  [Set up a Node source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the dashboard. You should be able to see the **write key** for this source:\n\n[![Node source write key](https://www.rudderstack.com/docs/images/event-stream-sources/node-write-key-new.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/node-write-key-new.webp)\n\nYou will also need the data plane URL. Refer to the [Dashboard Overview](https://www.rudderstack.com/docs/dashboard-guides/overview/#data-plane-url) guide for more information on the data plane URL and where to find it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure to enclose the write key and data plane URL parameters within double quotes (`\" \"`).\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard (seen above) has the SDK installation snippet containing both the write key and the data plane URL. Copy it to integrate the Node SDK into your application.\n\n## Installing the Node SDK\n\nTo install the RudderStack Node SDK using [npm](https://www.npmjs.com/), run the following command:\n\n```\nnpm install @rudderstack/rudder-sdk-node\n```\n\n## Initializing the SDK\n\nRun the following snippet to initialize the Node SDK. It creates a global RudderStack client object that can be used for all subsequent event requests.\n\n```\nconst RudderAnalytics = require(\"@rudderstack/rudder-sdk-node\")\n\n// RudderStack requires the batch endpoint of the server you are running\nconst client = new RudderAnalytics(WRITE_KEY, <DATA_PLANE_URL>/v1/batch)\n```\n\n```\nconst RudderAnalytics = require('@rudderstack/rudder-sdk-node');\n\nconst client = new RudderAnalytics(WRITE_KEY, {\n  dataPlaneUrl: DATA_PLANE_URL, // default: https://hosted.rudderlabs.com\n\n  // More initialization options\n});\n```\n\n## SDK initialization options\n\nThe RudderStack Node SDK provides the following parameters which you can pass during the SDK initialization:\n\n| Parameter | Data type | Description |\n| --- | --- | --- |\n| `flushAt` | Integer | Number of events flushed by the SDK when reached this limit.<br><br>**Default value**: 20 |\n| `flushInterval` | Integer | Maximum timespan (in milliseconds) after which the events from the in-memory queue are flushed.<br><br>**Default value**: 10000 |\n| `maxInternalQueueSize` | Integer | Maximum length of the in-memory queue.<br><br>**Default value**: 20000 |\n| `logLevel` | String | Sets the logging level. The acceptable values are `info`, `debug`, `error`, etc.<br><br>**Default value**: `info` |\n\nThe following initialization parameters are only available for RudderStack Node SDK **v2.x.x and above**:\n\n| Parameter | Data type | Description |\n| --- | --- | --- |\n| `dataPlaneUrl` | String | Data plane URL.<br><br>**Default value**: `https://hosted.rudderlabs.com` |\n| `path` | String | Path to the `batch` endpoint.<br><br>**Default value**: `/v1/batch` |\n| `maxQueueSize` | Integer | Maximum payload size of a `batch` request.<br><br>**Default value**: 460800 (500KB) |\n| `axiosConfig` | Object | Axios configuration. |\n| `axiosInstance` | Object | Axios instance. |\n| `axiosRetryConfig` | Object | Axios retry configuration. |\n| `retryCount` | Integer | Number of times a request is retried by Axios in case of failure.<br><br>**Default value**: `3` |\n| `errorHandler` | Function | Function that is called if the request to server fails. |\n| `gzip` | Boolean | Gzip compresses the event request.<br><br>**Default value**: `true` |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> For gzipping requests, your [rudder-server](https://github.com/rudderlabs/rudder-server) must be on v1.4.0 or above. Otherwise, your requests will fail.\n\n## Sending events\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not store or persist the user state in any of the server-side SDKs**.\n> \n> Unlike the client-side SDKs that deal with a single user at a given time, the server-side SDKs deal with multiple users simultaneously. Therefore, you must specify either the `userId` or `anonymousId` **every time** while making any API calls supported by the Node SDK.\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` call is as shown:\n\n```\nclient.identify({\n  userId: \"1hKOmRA4GRlm\",\n  traits: {\n    name: \"Alex Keener\",\n    email: \"alex@example.com\",\n    plan: \"Free\",\n    friends: 21,\n  },\n})\n```\n\nThe `identify` parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `context` | Object | An optional dictionary of information that provides context about a message. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n| [`traits`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/#identify-traits) | Object | Dictionary of the user’s traits like `name` or `email`. |\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you track the user actions along with any properties associated with them.\n\nA sample `track` call is shown below:\n\n```\nclient.track({\n  userId: \"1hKOmRA4GRlm\",\n  event: \"Item Viewed\",\n  properties: {\n    revenue: 19.95,\n    shippingMethod: \"Premium\",\n  },\n})\n```\n\nThe `track` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `event`  <br>Required | String | Name of the event. |\n| `properties` | Object | An optional dictionary of the properties associated with the event. |\n| `context` | Object | An optional dictionary of information that provides context about a message. It is not directly related to the API call. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n\n## Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call allows you to record the page views on your application, along with the other relevant information about the page.\n\nA sample `page` call is as shown:\n\n```\nclient.page({\n  userId: \"1hKOmRA4GRlm\",\n  category: \"Food\",\n  name: \"Pizza\",\n  properties: {\n    url: \"https://example.com\",\n    title: \"Pizza\",\n    referrer: \"https://google.com\",\n  },\n})\n```\n\nThe `page` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed page. |\n| `context` | Object | An optional dictionary of information that provides context about a message. It is not directly related to the API call. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `properties` | Object | An optional dictionary of the properties associated with the viewed page, like `url` and `referrer`. |\n\n## Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It lets you record the screen views on your mobile app along with other relevant information about the screen.\n\nA sample `screen` call is as shown:\n\n```\nclient.screen({\n  userId: \"12345\",\n  category: \"Food\",\n  name: \"Pizza\",\n  properties: {\n    screenSize: 10,\n    title: \"Pizza\",\n    referrer: \"https://google.com\",\n  },\n})\n```\n\nThe `screen` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed page. |\n| `context` | Object | An optional dictionary of information that provides context about a message. It is not directly related to the API call. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `properties` | Object | An optional dictionary of the properties associated with the screen, like `url` or `referrer`. |\n\n## Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group.\n\nA sample `group` call is as shown:\n\n```\nclient.group({\n  userId: \"12345\",\n  groupId: \"1\",\n  traits: {\n    name: \"Company\",\n    description: \"Google\",\n  },\n})\n```\n\nThe `group` method parameters are as follows:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required, if **anonymousId** is absent. | String | Unique identifier for a user in your database. |\n| `anonymousId`  <br>Required, if **userId** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `groupId`  <br>Required | String | Unique identifier for the group present in your database. |\n| `context` | Object | An optional dictionary of information that provides context about a message. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `traits` | Object | An optional dictionary of the group’s traits like `name`or `email`. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n\n## Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly. You can use `alias` for managing the user’s identity in some of the downstream destinations.\n\nA sample `alias` call is as shown:\n\n```\nclient.alias({\n  previousId: \"old_id\",\n  userId: \"new_id\",\n})\n```\n\nThe `alias` method parameters are as mentioned below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `userId`  <br>Required | String | Unique identifier for a user in your database. |\n| `anonymousId` | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `previousId`  <br>Required | String | The previous unique identifier of the user. |\n| `context` | Object | An optional dictionary of information that provides context about a message. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `traits` | Object | An optional dictionary of the user’s traits like `name` or `email`. |\n| `timestamp` | Date | The timestamp of the message’s arrival. |\n\n## Data persistence\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This is a beta feature. Contact the RudderStack team on [Slack](https://rudderstack.com/join-rudderstack-slack-community) if you face any issues.\n\nIf the Node SDK fails to deliver the events to RudderStack in the first attempt, it retries the event delivery. However, if RudderStack is unavailable for a longer duration, there is a possibility of data loss. To prevent this scenario, the SDK has the data persistence feature where the event data is persisted in **Redis**, guaranteeing event delivery. Simultaneously, the SDK can retry multiple times as the queue is maintained in a different process space (Redis).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To use this feature, you will need to host a Redis server to use it as the intermediary data storage queue. RudderStack uses [Bull](https://github.com/OptimalBits/bull) as the interface layer between the Node SDK and Redis.\n\nTo achieve data persistence, you need to call the `createPersistenceQueue` method which takes two parameters - `queueOpts` and `callback`. It initializes the persistent queue. A sample SDK initialization is shown below:\n\n```\nconst client = new Analytics(\"write_key\", \"DATA_PLANE_URL/v1/batch\", {\n  flushAt: <number> = 20,\n  flushInterval: <ms> = 20000\n  // the max number of elements that the SDK can hold in memory,\n  // this is different than the Redis list created when persistence is enabled.\n  // This restricts the data in-memory when Redis is down, unreachable etc.\n  maxInternalQueueSize: < number > = 20000\n});\n\nclient.createPersistenceQueue({\n  redisOpts: {\n    host: \"localhost\"\n  }\n}, err => {})\n```\n\n```\nconst client = new Analytics(\"WRITE_KEY\", {\n  dataPlaneUrl: DATA_PLANE_URL // default: https://hosted.rudderlabs.com with default path set to /v1/batch\n  flushAt: <number> = 20,\n  flushInterval: <ms> = 20000\n  // the max number of elements that the SDK can hold in memory,\n  // this is different than the Redis list created when persistence is enabled.\n  // This restricts the data in-memory when Redis is down, unreachable etc.\n  maxInternalQueueSize: < number > = 20000\n});\n\nclient.createPersistenceQueue({\n  redisOpts: {\n    host: \"localhost\"\n  }\n}, err => {})\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If the `createPersistenceQueue` method is not called after initializing the SDK, the SDK will work without any persistence.\n\n### `queueOpts`\n\nThe syntax for `createPersistenceQueue` method is as follows:\n\n`client.createPersistenceQueue(QueueOpts, callback)`\n\nA sample `queueOpts` initialization is shown below:\n\n```\nqueueOpts {\n  queueName ?: string = rudderEventsQueue,\n  isMultiProcessor ?: boolean = false\n  // pass a value without the {}, this will used as prefix to Redis keys,\n  // needed to support Redis cluster slots.\n  prefix?: string = {rudder},\n  redisOpts : RedisOpts,\n  jobOpts?: JobOpts\n}\n```\n\nThe specification of the different `queueOpts` parameters is listed in the following table:\n\n| **Parameter** | **Description** | **Default Value** |\n| --- | --- | --- |\n| `queueName` | Name of the queue. | `20` |\n| `isMultiProcessor` | Determines whether to handle previously active jobs. If set to `false`, the previously active job will be picked up first by the processor. Otherwise, Bull moves this job to the back of the Redis queue to be picked up after the already pushed event. | `false` |\n| `prefix` | Used as the prefix to the Redis keys needed to support the Redis cluster slots. | `20000` |\n| `redisOpts` | Refer to the [`RedisOpts`](#redisopts) section below. | `RedisOpts` |\n| `jobOpts` | Refer to the [`JobOpts`](#jobopts) section below. | `JobOpts` |\n\nFor more information on these parameters, refer to the [Bull docs](https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#queue).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If the same queue (RudderStack SDK initialized with the same queue name) is used in case of multiple servers (server-side SDKs), set the value of `isMultiProcessor` to `true` as event ordering is not applicable in this case.\n\n#### `RedisOpts`\n\n```\nRedisOpts {\n  port?: number = 6379;\n  host?: string = localhost;\n  db?: number = 0;\n  password?: string;\n}\n```\n\n#### `JobOpts`\n\n```\nJobOpts {\n  maxAttempts?: number = 10\n}\n```\n\n### `callback`\n\nIn case of an error, the `createPersistenceQueue` method returns a callback. You should retry sending the events in this scenario.\n\n```\n// createPersistenceQueue calls this with error or nothing(in case of success), // user should retry in case of error\ncallback: function(error) || function()\n```\n\nCalling the `createPersistenceQueue` method initializes a Redis list by calling the [Bull’s](https://github.com/OptimalBits/bull) utility methods. It also adds a **single** job processor for the processing (making requests to RudderStack) jobs that are pushed into the list. Any error encountered while doing this leads to a callback with the error.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If the callback returns with an error, RudderStack recommends retry calling `createPersistenceQueue` with a backoff.\n\n### Event flow\n\n*   Calling the SDK methods like `track`, `page`, `identify`, etc. pushes the events to an in-memory array.\n*   The events from the array are flushed as a `batch` to the Redis persistence based on the `flushAt` and `flushInterval` settings. The in-memory array has a maximum size of `maxInternalQueueSize`. **Once this size limit is reached,** \\_\\_**the events won’t be accepted if not drained to the other side (cases where Redis connection is slow or the Redis server is not reachable).**\n*   The processor will take the batch from the Redis list and make a request to RudderStack. In case of an error, the processor will retry sending the data again if the error can be retried (errors with status code `5xx and 429`). **The retry will go up to `JobOpts.maxAttempts` with an** **exponential backoff of power 2 with max backoff of 30 seconds**.\n*   If the job fails even after `JobOpts.maxAttempts`, it will not be retried again and pushed to a `failed queue`. **You can retry them later manually using Bull’s utility methods** [listed here](https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#queuegetfailed) **or get them from Redis directly**.\n*   There might be a scenario where the node process dies with the jobs still in active state (not completed nor failed but in the process of sending/retrying). Since the RudderStack SDK has only **1 processor for sending events** (this count should always be **1**), the next time the SDK is initialized and `createPersistenceQueue` is called, **the jobs will be picked up first by the processor to get processed to maintain event ordering based on the value of `QueueOpts.isMultiProcessor`**.\n*   For multiple servers (SDK) connecting to the same queue (`QueueOpts.queueName`), there will be multiple processors fetching events from the same queue and event ordering won’t be implemented. Hence, `QueueOpts.isMultiProcessor` should be set to **`true`.**\n\n## FAQ\n\n##### How to ensure that all my events in the queue are processed?\n\nYou can use the `flush()` method to ensure that all events in the queue are processed. The following example highlights the use of `flush()` with a callback:\n\n```\nclient.flush(function(err, batch){\n  console.log('Flushing done');\n})\n```\n\n#### How does the Node SDK handle events larger than 32KB?\n\nThe Node SDK accepts and sends each event greater than 32KB as a single batch and sends them to the backend.\n\n#### Does the Node SDK support event ordering?\n\nThe Node SDK does not support event ordering by default.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Node SDK | RudderStack Docs",
  "description": "Use RudderStack’s Node SDK to send server-side events to various destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/data-pipelines/reverse-etl/",
  "markdown": "# Reverse ETL | RudderStack Docs\n\nEnable seamless activation of data from cloud data warehouses to downstream destinations.\n\n* * *\n\n*     4 minute read  \n    \n\nRudderStack’s **Reverse ETL** feature empowers you to route the enriched customer data residing in your data warehouse to all your operational systems, including analytics, sales, and marketing tools. With this feature, you can set up your data warehouse as a source in the [RudderStack dashboard](https://app.rudderstack.com/), choose the data to import, and then seamlessly synchronize it to your preferred destinations.\n\nSee how Reverse ETL pipelines work in this self-paced product tour:\n\n## Why use Reverse ETL\n\nCloud data warehouses have revolutionized data management, centralizing information, and transforming it for powerful analytics. Yet, the true power of data lies in activation, turning those insights into real-world decisions and experiences. This requires getting clean data out of the warehouse into operational systems.\n\nHowever, the common issues with this are:\n\n*   Data warehouses are only accessible to technical, SQL users.\n*   Moving data from the warehouse to operational systems often involves manual processes, scripting, and maintenance, which can be time-consuming and error-prone.\n*   Important metrics and features from data warehouses might only make it outside in the form of reports or dashboards.\n\nThis is where the Reverse ETL functionality comes into picture.\n\n## What is Reverse ETL\n\nReverse ETL is the process of delivering data from a company’s data warehouse to operational systems and SaaS tools. This empowers businesses to act upon the data, personalizing customer experiences effectively.\n\nA data warehouse contains business critical data from where important metrics and features like LTV, revenue, CAC, ROI, conversion rate, churn, etc. can be derived. Hence, it becomes important to ensure that the warehouse data is activated. Reverse ETL unlocks this data activation by putting the right data in the right operational tools.\n\n### ETL vs Reverse ETL\n\nTraditional ETL primarily focuses on integrating data, often in a unidirectional manner, from various disparate sources into a centralized data warehouse. This data is then transformed and combined for analytical purposes, such as customer profiling.\n\nReverse ETL is a specific type of ETL that flows in the opposite direction from a warehouse [source](https://www.rudderstack.com/docs/sources/reverse-etl/) towards operational or SaaS tools as a [destination](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/), establishing a bidirectional flow of data in and out of the data warehouse.\n\nAnother key difference is that traditional ETL focuses on ingesting data tables whereas Reverse ETL focuses on syncing specific rows, often updating fields only if data has changed since the last sync. This entails data deduplication and comparison of current warehouse data values with downstream tools.\n\n## How Reverse ETL works\n\nReverse ETL queries your data warehouse and writes the query results to a downstream operational tool or system. RudderStack’s Reverse ETL pipeline includes the following core components:\n\n*   **Sources**: Usually a cloud data warehouse like Snowflake or BigQuery which contains the centralized data you want to sync to the operational system.\n*   **Import Data**: Data to be synced from the source. For RudderStack that can be a warehouse table, a [model (SQL query)](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/models/), or an [audience](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/).\n*   **Sync Type**: Defines how to sync the data to the destination, such as [Upsert](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/#upsert-mode) or [Mirror](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/#mirror-mode) mode.\n*   **Destinations**: Location to write the synced data. This is the operational system where business users consume data (for example, Salesforce, Google Ads, Iterable, Blaze, etc.)\n*   **Schedule**: Determines how often to [sync](https://www.rudderstack.com/docs/sources/reverse-etl/sync-schedule-settings/) the data to the operational system.\n\nThese components collectively overlay on your cloud data warehouse enabling you to activate any data within your data models and warehouse.\n\n## Use Cases\n\nReverse ETL plays a crucial role in unlocking the full potential of your data assets by bridging the gap between analytics and operations, enabling businesses to drive better decision-making and gain competitive advantage.\n\n### Marketing Teams\n\nMarketing teams can employ Reverse ETL to ensure continuous updates of CRM systems with the latest customer data, enriching customer profile information. It can also be used to define segments or audiences and sync them across all marketing platforms for enhanced tracking, personalized marketing, and experimentation.\n\n### Sales Teams\n\nSales teams require access to behavioral and product usage data in the warehouse. Reverse ETL enables pushing this data into sales platforms (e.g. CRM), offering detailed customer insights for proactive real-time responses. Additionally, you can setup Reverse ETL to trigger notifications in communication apps like Slack, ensuring your sales reps are notified of important customer actions in your product/app.\n\n### Product Teams\n\nProduct teams can leverage Reverse ETL to send up-to-date customer data and attributes to production databases, personalizing customers’ in-product experiences. This can be as simple as showing current billing information or updating offerings based on past purchases.\n\n### Customer Success Teams\n\nReverse ETL allows customer success teams to get key metrics and predictive features, like LTV, ARR, and likelihood to churn, into their support tools. This capability enables them to prioritize tickets based on impact and reduce churn among critical customers.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Reverse ETL | RudderStack Docs",
  "description": "Enable seamless activation of data from cloud data warehouses to downstream destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/looker/",
  "markdown": "# Looker | RudderStack Docs\n\nIngest your event data from Looker into RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Looker](https://looker.com/) is a popular Business Intelligence and data analytics platform. It allows you to explore your data for actionable, business-oriented insights.\n\nYou can now use Looker as a data source to send enriched user activities and their associated properties over a period of time to RudderStack. RudderStack then forwards this data to your specified destinations for real-time syncing of the newly created properties and actions.\n\n## Set up Looker actions\n\nAfter creating your views in Looker, you need to set-up the necessary [Looker actions](https://docs.looker.com/admin-options/platform/actions). To do so, go to your Looker actions dashboard.\n\nNote that:\n\n*   While RudderStack supports teams and individual workspaces in its [Enterprise edition](https://rudderstack.com/pricing/), Looker does not allow individual Action Hub configurations for different members of the same organization.\n*   To send the output of different looks to various RudderStack sources, you will need to host custom instances of Looker Action Hub. See the [Looker documentation](https://docs.looker.com/sharing-and-publishing/action-hub#setting_up_a_local_action_hub_server) for more information.\n\n## Configure Looker source in RudderStack\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Looker**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Looker source is now configured. Note the source **Write key**:\n\n[![Looker source write key](https://www.rudderstack.com/docs/images/event-stream-sources/looker-write-key.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/looker-write-key.webp)\n\n## Add RudderStack Action Hub Server\n\nThis section describes the steps required to enable [RudderStack Actions](https://github.com/rudderlabs/actions) in Looker.\n\nRudderStack hosts a Looker [Action Hub Server](https://docs.looker.com/sharing-and-publishing/action-hub#writing_an_action) that communicates with your Looker instance.\n\nTo connect the Action Hub Server to your Looker instance, click the **Add Action Hub** button present at the bottom of Looker Actions dashboard:\n\n[![Add Action Hub](https://www.rudderstack.com/docs/images/event-stream-sources/add-action-hub.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/add-action-hub.webp)\n\nDepending on your region, enter the RudderStack Action Hub Server URL and related authorization token:\n\n*   **RudderStack Action Hub Server URL**: [https://looker-action-hub.rudderstack.com](https://looker-action-hub.rudderstack.com/)\n*   **Authorization Token**:\n\n```\n75805209b45a55494d0c27d4eb91fbf6bc7fb1a63dfcd9260fe65daee584737b/ea4e074e71c1af9c07bf71f69c1addf7b9a30d458bd7aea4b4e60d6a6a122277b59210186edb7cf21a5ff53a29c68fb89ff5aaf5019570c8a5131484a11e2e3e\n```\n\n*   **RudderStack Action Hub Server URL**: [https://looker-action-hub.eu.rudderstack.com](https://looker-action-hub.eu.rudderstack.com/)\n*   **Authorization Token**:\n\n```\n93ceacd6ae64593995163d692888bec22f2b8032eee994cc4d071f0b2392719f/09723f97fb676bd1eeb1efdc3812761d7bdb332af5ad01f4323d30d7e90d9954ecfcb63df2f45094ff9bd1b5dce00111e91c70b8dfdecd731a266468ed0fcadc\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you encounter an error while connecting to the Action Hub after entering the server URL, click **Configure Authorization** and enter the **Authorization Token**. See [FAQ](#faq) for more information.\n\nYou can then start viewing the following three RudderStack actions:\n\n| Actions | Description |\n| --- | --- |\n| Identify | Adds the traits to your RudderStack users via the `identify` event. |\n| Group | Adds the traits or users to your RudderStack groups via the `group` event. |\n| Track | Adds the user properties for your users via the `track` event. |\n\n[![RudderStack-hosted Action Hub](https://www.rudderstack.com/docs/images/event-stream-sources/looker-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/looker-3.webp)\n\n### Configure actions\n\n1.  To enable any of the above actions, click the **Settings** button.\n2.  Enter the **Write key** obtained after [setting up the Looker source](#configure-looker-source-in-rudderstack) in RudderStack.\n3.  Specify the **Rudder Server URL** to which Looker forwards the user looks data. The URL is `https://<data_plane_url>/v1/batch`, where <data\\_plane\\_url> is your [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) .\n\n[![Configuring the Rudder Write Key and Rudder Server URL](https://www.rudderstack.com/docs/images/event-stream-sources/looker-4.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/looker-4.webp)\n\nOnce the connection is successful, you should start seeing the RudderStack Actions.\n\n## RudderStack Actions overview\n\nOnce configured, RudderStack Actions will start sending the query results to RudderStack.\n\nWhen defining the columns for the Looker models attached to the user looks that you want to send to RudderStack, it’s important to tag the user identifier column as `email` or `user_id` or `rudder_anonymous_id`. Additionally, to use the **RudderStack Group** action, you need to tag your group identifier column as `rudder_group_id`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In some specific cases, for example, Redis - the `user_id` must be present even if `email` is already present.\n\nLooker sends the other columns related to the user and their activities as traits or properties along with the event payload.\n\nA sample `track` payload sent by the **RudderStack Track** action:\n\n```\n{\n  \"userId\": \"test@rcomp.es\",\n  \"anonymousId\": null,\n  \"properties\": {\n    \"tracks_flow.event_2\": \"Destination_Clicked\",\n    \"tracks_flow.event_3\": [\n\n    ],\n    \"tracks_flow.event_4\": [\n\n    ],\n    \"tracks_flow.event_5\": [\n\n    ],\n    \"tracks_flow.event\": \"User_Logged_In\"\n  },\n  \"event\": \"single\",\n  \"context\": {\n    \"library\": {\n      \"name\": \"analytics-node\",\n      \"version\": \"0.0.3\"\n    },\n    \"app\": {\n      \"name\": \"looker/actions\",\n      \"version\": \"dev\"\n    }\n  },\n  \"timestamp\": \"2020-06-18T08:21:01.644Z\",\n  \"type\": \"track\",\n  \"_metadata\": {\n    \"nodeVersion\": \"12.13.0\"\n  },\n  \"originalTimestamp\": \"2020-06-18T08:21:03.049Z\",\n  \"messageId\": \"node-c33eb51666f6470bf4aa415c7431aba4-ffd5e198-05a1-477a-9c2c-85be30749b8b\",\n  \"sentAt\": \"2020-06-18T08:21:03.050Z\"\n}\n```\n\nNote that the column names in your looks are transformed as `view name.column name` in the payload sent to RudderStack. If you want to change the names as per your destination, you can do so using the [Transformations](https://www.rudderstack.com/docs/transformations/overview/) feature.\n\n## FAQ\n\n#### I get an error while connecting to the RudderStack Action Hub. What should I do?\n\nWhile connecting to the RudderStack Action Hub, you may sometimes get the following error:\n\n[![RudderStack Action Hub error](https://www.rudderstack.com/docs/images/event-stream-sources/looker-source-error-1.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/looker-source-error-1.webp)\n\nTo resolve this issue, click **Configure Authorization**.\n\n[![RudderStack Action Hub error](https://www.rudderstack.com/docs/images/event-stream-sources/looker-source-error-2.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/looker-source-error-2.webp)\n\nThen, enter the [region-specific authorization token](#add-rudderstack-action-hub-server) and click **Update Token**.\n\n[![RudderStack Action Hub error](https://www.rudderstack.com/docs/images/event-stream-sources/looker-source-error-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/looker-source-error-3.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Looker | RudderStack Docs",
  "description": "Ingest your event data from Looker into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/mailmodo/",
  "markdown": "# Mailmodo source | RudderStack Docs\n\nIngest your event data from Mailmodo into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[Mailmodo](https://www.mailmodo.com/) is an interactive email marketing tool. It provides several features such as transactional campaigns, email automation and drip emails with customer journeys, WYSIWYG email editor, and many other tool integrations.\n\nThis guide will help you set up Mailmodo as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Mailmodo source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Mailmodo**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Mailmodo source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![Mailmodo source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/Mailmodo-2.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/Mailmodo-2.webp)\n\n4.  Log into your [Mailmodo account](https://manage.mailmodo.com/auth/login) and enter the **Webhook URL** based on the required format. Mailmodo can send data to a webhook in any of the following ways:\n\n*   By setting it up as an action in the user journey. Follow the detailed steps from [Mailmodo documentation](https://support.mailmodo.com/support/solutions/articles/84000388667-send-webhook-as-an-action-in-a-journey):\n\n[![Mailmodo source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/webhook_url_1.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/webhook_url_1.webp)\n\n*   By adding Mailmodo’s webhook integration from the template builder and use it to export data. Follow the detailed steps from [Mailmodo documentation](https://support.mailmodo.com/support/solutions/articles/84000351525-exporting-mailmodo-template-submissions-to-your-software-stack-using-webhook):\n\n[![Mailmodo source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/webhook_url_2.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/webhook_url_2.webp)\n\n## Event transformation\n\nRudderStack ingests the Mailmodo events after converting them into the RudderStack event format. It also maps the following properties from the Mailmodo event payload to the RudderStack properties:\n\n| Mailmodo property | RudderStack property | Notes |\n| --- | --- | --- |\n| `mailmodoUserId` | `context.externalId[0].type` | Only when [the webhook is set up as an action in the user journey](https://support.mailmodo.com/support/solutions/articles/84000388667-send-webhook-as-an-action-in-a-journey). |\n| `triggerData.userId` | `context.externalId[0].value` | Only when [the webhook is set up as an action in the user journey](https://support.mailmodo.com/support/solutions/articles/84000388667-send-webhook-as-an-action-in-a-journey). |\n| SHA-256 hash of `triggerData.email`/`recipientData.email`/`recipientEmail` | `anonymousId` | \\-  |\n| `triggerData.email`/`recipientData.email`/`recipientEmail` | `context.traits.email` | \\-  |\n| `triggerData.triggerSource` | `event` | If `triggerData.triggerSource` is not present, the event name is sent as **Form Submitted**. |\n| `recipientData` | `context.traits` | \\-  |\n| `recordedAt.ts` | `originalTimestamp` | \\-  |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Barring `recipientData`, `recordedAt`, `email`, and `userId`, RudderStack assigns the rest of the payload fields to `properties` after flattening them.\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from Mailmodo source for different formats and creates the resulting payload.\n\n*   If you choose to send webhook as an action in the journey, a sample payload sent by Mailmodo is shown below:\n\n```\n{\n  \"triggerData\": {\n    \"data\": {},\n    \"eventProperty\": {\n      \"Name\": \"APPLE iPhone 13 (Blue, 128 GB)\",\n      \"Category\": \"Mobiles\",\n      \"Is Purchased\": \"false\",\n      \"Price\": \"829\",\n      \"Currency\": \"USD\"\n    },\n    \"triggerSource\": \"New Custom Event Trigger - Product Viewed\",\n    \"email\": \"alex@example.com\",\n    \"userId\": \"d3775892-****-4f2f-b9d5-e49810eb2cae\",\n    \"journeyId\": \"3f135bf7-****-4e31-b265-f61cfe1bd423\"\n  }\n}\n```\n\nRudderStack transforms the above payload into the following payload:\n\n```\n{\n  \"anonymousId\": \"26c9ad4b531287858155ffa834be13dddc2c45df6e29af7230408953d732dd92\",\n  \"context\": {\n    \"externalId\": [{\n      \"id\": \"d3775892-****-4f2f-b9d5-e49810eb2cae\",\n      \"type\": \"mailmodoUserId\"\n    }],\n    \"traits\": {\n      \"email\": \"alex@example.com\"\n    },\n    \"integration\": {\n      \"name\": \"Mailmodo\",\n      \"version\": \"1.0.0\"\n    },\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    }\n  },\n  \"event\": \"New Custom Event Trigger - Product Viewed\",\n  \"integrations\": {\n    \"Mailmodo\": false\n  },\n  \"properties\": {\n    \"triggerData.eventProperty.Category\": \"Mobiles\",\n    \"triggerData.eventProperty.Currency\": \"USD\",\n    \"triggerData.eventProperty.Is Purchased\": \"false\",\n    \"triggerData.eventProperty.Name\": \"APPLE iPhone 13 (Blue, 128 GB)\",\n    \"triggerData.eventProperty.Price\": \"829\",\n    \"triggerData.journeyId\": \"3f135bf7-****-4e31-b265-f61cfe1bd423\",\n    \"triggerData.triggerSource\": \"New Custom Event Trigger - Product Viewed\"\n  },\n  \"type\": \"track\"\n}\n```\n\n*   If you choose to export the Mailmodo template submissions to your software stack using a webhook, a sample payload sent by Mailmodo is shown below:\n\n```\n{\n  \"fuuid\": \"27905\",\n  \"next-step-id\": \"success\",\n  \"total-steps\": \"3\",\n  \"responseId\": \"b9a5d224-cc5a-4e64-9800-5a3db9515fdf\",\n  \"recipientEmail\": \"alex@example.com\",\n  \"formId\": \"formosztd5\",\n  \"recordedAt\": {\n    \"ts\": 1662695704,\n    \"date\": \"2022-09-09\",\n    \"hour\": 9,\n    \"minute\": 25\n  },\n  \"submissionSource\": \"amp\",\n  \"elementjbtz42\": \"Everything \",\n  \"element8jzo13\": [\"Reliable\", \"High Quality\", \"Useful\"],\n  \"recipientData\": {\n    \"email\": \"alex@example.com\"\n  },\n  \"recommend\": \"9\",\n  \"liking\": \"upvote\",\n  \"satisfaction\": \"4\",\n  \"campaignId\": \"0b53e1bf-84ae-4198-9184-8a4d6e1fa3dd\",\n  \"campaignName\": \"Campaign-testing\"\n}\n```\n\nRudderStack transforms the above payload into the following payload:\n\n```\n{\n  \"anonymousId\": \"cd5dbd2727742c2957771e61eef4e296f3fb263294e184fcb8af98b7ccd372c7\",\n  \"context\": {\n    \"integration\": {\n      \"name\": \"Mailmodo\",\n      \"version\": \"1.0.0\"\n    },\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"traits\": {\n      \"email\": \"alex@example.com\",\n      \"recipientData\": {\n        \"email\": \"alex@example.com\"\n      }\n    }\n  },\n  \"event\": \"Form Submitted\",\n  \"integrations\": {\n    \"Mailmodo\": false\n  },\n  \"originalTimestamp\": \"2022-09-09T03:55:04.000Z\",\n  \"properties\": {\n    \"campaignId\": \"0b53e1bf-84ae-4198-9184-8a4d6e1fa3dd\",\n    \"campaignName\": \"Campaign-testing\",\n    \"element8jzo13[0]\": \"Reliable\",\n    \"element8jzo13[1]\": \"High Quality\",\n    \"element8jzo13[2]\": \"Useful\",\n    \"elementjbtz42\": \"Everything \",\n    \"formId\": \"formosztd5\",\n    \"fuuid\": \"27905\",\n    \"liking\": \"upvote\",\n    \"next-step-id\": \"success\",\n    \"recommend\": \"9\",\n    \"responseId\": \"b9a5d224-cc5a-4e64-9800-5a3db9515fdf\",\n    \"satisfaction\": \"4\",\n    \"submissionSource\": \"amp\",\n    \"total-steps\": \"3\"\n  },\n  \"type\": \"track\"\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Mailmodo source | RudderStack Docs",
  "description": "Ingest your event data from Mailmodo into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/mailjet/",
  "markdown": "# Mailjet source | RudderStack Docs\n\nIngest your event data from Mailjet into RudderStack.\n\n* * *\n\n*     2 minute read  \n    \n\n[Mailjet](https://www.mailjet.com/) is a popular email marketing and delivery platform. It lets you create and send impactful email marketing campaigns, newsletters, and automated emails to grow your business.\n\nThis guide will help you set up Mailjet as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Mailjet source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Mailjet**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Mailjet source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![Mailjet source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/mailjet-src-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/mailjet-src-settings.webp)\n\n4.  Log into your [Mailjet account](https://app.mailjet.com/).\n5.  Click your profile and select **Account Settings**. Under the **Rest API** section, click **Event notifications (webhooks)**. You can either select all events or the specific ones and add the webhook URL:\n\n[![Mailjet source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/mailjet-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/mailjet-webhook.webp)\n\n## Event transformation\n\nRudderStack ingests all events mentioned in the [Mailjet documentation](https://dev.mailjet.com/email/guides/webhooks/#event-types). The event name is mapped on the basis of the `event` property which is present in each event.\n\nRudderStack ingests the Mailjet events after converting them into the RudderStack event format. It also maps the following properties from the Mailjet event payload to the RudderStack properties:\n\n| Mailjet property | RudderStack property |\n| --- | --- |\n| `event` | `event` |\n| `mj_contact_id` | `context.externalId[]` |\n| `messageId` | `properties.mailJetMessageId` |\n| `email` | `context.traits.email` |\n| `url` | `properties.url`  <br>`context.page.url` |\n| `ip` | `properties.ip`  <br>`context.ip` |\n| `customId`  <br>SHA-256 hash of `email` | `userID` |\n| `customcampaign` | `properties.customcampaign` |\n| `mj_campaign_id` | `cproperties.mj_campaign_id` |\n| `Payload` | `properties.Payload` |\n| `agent` | `context.userAgent` |\n| `source` | `context.campaign.source` |\n| `mj_list_id` | `context.externalId[]` |\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from Mailjet source and creates the resulting payload.\n\nA sample payload sent by Mailjet is shown below:\n\n```\n{\n  \"event\": \"open\",\n  \"time\": 1664443614,\n  \"MessageID\": 94857068804950690,\n  \"Message_GUID\": \"54d6cdec-f659-4547-8926-13d9c4126b82\",\n  \"email\": \"alex@example.com\",\n  \"mj_campaign_id\": 108760,\n  \"mj_contact_id\": 399962859,\n  \"customcampaign\": \"mj.nl=58424\",\n  \"ip\": \"66.249.84.231\",\n  \"geo\": \"US\",\n  \"agent\": \"Mozilla/5.0 (Windows NT 5.1; rv:11.0) Gecko Firefox/11.0 (via ggpht.com GoogleImageProxy)\",\n  \"CustomID\": \"\",\n  \"Payload\": \"\"\n}\n```\n\nRudderStack transforms the above payload into the following [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) payload:\n\n```\n{\n  \"Message\": {\n    \"context\": {\n      \"library\": {\n        \"name\": \"unknown\",\n        \"version\": \"unknown\"\n      },\n      \"integration\": {\n        \"name\": \"MailJet\"\n      },\n      \"traits\": {\n        \"email\": \"alex@example.com\"\n      },\n      \"ip\": \"66.249.84.231\",\n      \"userAgent\": \"Mozilla/5.0 (Windows NT 5.1; rv:11.0) Gecko Firefox/11.0 (via ggpht.com GoogleImageProxy)\",\n      \"externalId\": [{\n        \"type\": \"mailjetContactId\",\n        \"id\": 399962859\n      }]\n    },\n    \"integrations\": {\n      \"MailJet\": false\n    },\n    \"type\": \"track\",\n    \"event\": \"open\",\n    \"properties\": {\n      \"ip\": \"66.249.84.231\",\n      \"customcampaign\": \"mj.nl=58424\",\n      \"mj_campaign_id\": 108760,\n      \"Payload\": \"\"\n    },\n    \"originalTimestamp\": \"2022-09-29T09:26:54.000Z\",\n    \"userId\": \"9c51bf2b379a4c773b1eaa9732405b86\"\n  }\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Mailjet source | RudderStack Docs",
  "description": "Ingest your event data from Mailjet into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-python-sdk/",
  "markdown": "# Python SDK | RudderStack Docs\n\nUse RudderStack’s Python SDK to send server-side events to various destinations.\n\n* * *\n\n*     9 minute read  \n    \n\nRudderStack’s Python SDK lets you track and send the events from your Python applications to the specified destinations.\n\nRefer to the SDK’s [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-python) for the implementation-specific details.\n\n[![Github Badge](https://img.shields.io/pypi/v/rudder-sdk-python?style=flat)](https://pypi.org/project/rudder-sdk-python/)\n\n## SDK setup requirements\n\n1.  Sign up to [RudderStack Cloud](https://app.rudderstack.com/signup).\n2.  [Set up a Python source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in your dashboard. You should be able to see a **write key** for this source.\n\nYou will also need a data plane URL. Refer to the [Dashboard Overview](https://www.rudderstack.com/docs/dashboard-guides/overview/#data-plane-url) guide for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard has the SDK installation snippet containing both the write key and the data plane URL. Use it to integrate the Python SDK into your application.\n\n## Installing the Python SDK\n\nTo install the RudderStack Python SDK using [**pip**](https://pip.pypa.io/en/stable/), run the following command:\n\n```\npip install rudder-sdk-python\n```\n\n## Initializing the SDK\n\nTo initialize the SDK, run the following code snippet:\n\n```\nimport rudderstack.analytics as rudder_analytics\n\nrudder_analytics.write_key = WRITE_KEY\nrudder_analytics.dataPlaneUrl = DATA_PLANE_URL\n```\n\n### Initialization options\n\n| Parameter | Description | Default value |\n| --- | --- | --- |\n| `on_error` | Callback for exception thrown while uploading the messages. | `None` |\n| `debug` | The SDK prints the logs if set to `True`. | `False` |\n| `send` | The SDK does not send the data to the RudderStack backend if set to `False`. | `True` |\n| `sync_mode` | The SDK sends the data immediately instead of queueing it, if set to `True`. | `False` |\n| `max_queue_size` | Maximum queue size the SDK uses to enqueue the events. | `10000` |\n| `gzip` | The SDK disables gzipping the event data if set to `False`. | `True` |\n| `timeout` | The timeout for sending POST requests to the RudderStack backend. | `15` |\n| `max_retries` | Maximum number of retry requests the SDK makes to the RudderStack backend. | `10` |\n| `upload_interval` | Maximum duration between two upload (flush) activities. | `0.5s` |\n| `upload_size` | Number of events in the queue that triggers a flush. | `100` |\n\n## Sending events\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not store or persist the user state in any of the server-side SDKs**.\n> \n> Unlike the client-side SDKs that deal with only a single user at a given time, the server-side SDKs deal with multiple users simultaneously. Therefore, you must specify either the `user_id` or `anonymous_id` **every time** while making any API calls supported by the Python SDK.\n\n### Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` call made using the Python SDK is shown below:\n\n```\nrudder_analytics.identify('1hKOmRA4GRlm', {\n    'email': 'alex@example.com',\n    'name': 'John Doe',\n    'friends': 16\n})\n```\n\nThe `identify` method parameters are as shown:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `traits`  <br>Required | Object | An optional dictionary of the user’s traits like `name` or `email`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n| `message_id` | String | A unique identifier for the event. The SDK generates this field automatically. It is **highly recommended** to not send this field unless there is a specific requirement or use case. |\n\n### Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the user actions along with their associated properties. Each user action is called an **event**.\n\nA sample `track` call is shown below:\n\n```\nrudder_analytics.track('123456', 'Article Read', {\n    'title': 'The Independence',\n    'subtitle': 'Story of the Weak',\n    'author': 'John Doe'\n})\n```\n\nThe `track` method parameters are as shown:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `event`  <br>Required | String | Name of the event. |\n| `properties`  <br>Required | Object | An optional dictionary of the properties associated with the event. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n| `message_id` | String | A unique identifier for the event. The SDK generates this field automatically. It is **highly recommended** to not send this field unless there is a specific requirement or use case. |\n\n### Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record the page views on your application along with the other relevant information about the page.\n\nA sample `page` call is as shown:\n\n```\nrudder_analytics.page('userid', 'Documentation', 'Sample Doc', {\n    'url': 'http://rudderstack.com'\n})\n```\n\nThe `page` method parameters are as shown:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed page. |\n| `category`  <br>Required | String | Category of the viewed page. |\n| `properties`  <br>Required | Object | An optional dictionary of the properties associated with the event. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n| `message_id` | String | A unique identifier for the event. The SDK generates this field automatically. It is **highly recommended** to not send this field unless there is a specific requirement or use case. |\n\n### Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It lets you record the screen views on your mobile app along with other relevant information about the screen.\n\nA sample `screen` call is as shown:\n\n```\nrudder_analytics.screen('userid', 'Settings', 'Brightness', {\n    'from': 'Settings Screen'\n})\n```\n\nThe `screen` method parameters are as shown:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed screen. |\n| `category`  <br>Required | String | Category of the viewed screen. |\n| `properties`  <br>Required | Object | An optional dictionary of the properties associated with the event. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n| `message_id` | String | A unique identifier for the event. The SDK generates this field automatically. It is **highly recommended** to not send this field unless there is a specific requirement or use case. |\n\n### Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group.\n\nA sample `group` call made using the Python SDK is shown below:\n\n```\nrudder_analytics.group('1hKOmRA4GRlm', '12', {\n    'name': 'Company',\n    'domain': 'IT'\n})\n```\n\nThe `group` method parameters are as shown:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `group_id`  <br>Required | String | Unique identifier of the group in your database. |\n| `traits` | Object | An optional dictionary of the group’s traits like `name` or `email`. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n| `message_id` | String | A unique identifier for the event. The SDK generates this field automatically. It is **highly recommended** to not send this field unless there is a specific requirement or use case. |\n\n### Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly. You can use `alias` for managing the user’s identity in some of the downstream destinations.\n\nA sample `alias` call is as shown:\n\n```\nrudder_analytics.alias('previous_id', 'user_id')\n```\n\nThe `alias` method parameters are as shown:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `previous_id`  <br>Required | String | The previous unique identifier of the user. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n| `message_id` | String | A unique identifier for the event. The SDK generates this field automatically. It is **highly recommended** to not send this field unless there is a specific requirement or use case. |\n\n## Gzipping requests\n\nThe Python SDK automatically gzips requests. However, you can disable this feature by setting the `gzip` parameter to `false` while initializing the SDK:\n\n```\nimport rudderstack.analytics as rudder_analytics\n\nrudder_analytics.write_key = WRITE_KEY\nrudder_analytics.dataPlaneUrl = DATA_PLANE_URL\nrudder_analytics.gzip = False\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Gzip requires [rudder-server](https://github.com/rudderlabs/rudder-server) v1.4 or higher. Otherwise, your events might fail.\n\n## Flushing events\n\nThe Python SDK batches the events and flushes them in the background, for faster and more efficient operation. By default, the SDK flushes a batch of 100 events every 0.5 seconds since the last flush.\n\nYou can control the event flushing by tweaking the following parameters:\n\n| Parameter | Description | Default value |\n| --- | --- | --- |\n| `max_queue_size` | Maximum queue size the SDK uses to enqueue the events. | `10000` |\n| `upload_interval` | Maximum duration between two upload (flush) activities. | `0.5s` |\n\nYou can also flush the events explicitly by using the SDK’s `flush()` method to make sure no events are left in the queue.\n\nA sample flush call is shown below:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The SDK blocks the calling thread until all messages are flushed from the queue. Hence, avoid using it as a part of your request lifecycle.\n\n## Error handling\n\nTo handle errors that may occur when sending the events via the Python SDK, you can declare a callback called `on_error`.\n\n```\ndef on_error(error, events):\n    print(\"Error response:\", error)\n\nrudder_analytics.on_error = on_error\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This callback only returns the errors that occur with the HTTP requests to the gateway. It will not return any errors that occur while sending data to your downstream destinations.\n\nSome of the common request responses are listed in the following table:\n\n| Status | Code |\n| --- | --- |\n| OK  | 200 |\n| Request has neither `anonymousId` nor `userId` | 400 |\n| Invalid write key | 401 |\n| Invalid JSON | 400 |\n\n## FAQ\n\n#### How does the Python SDK handle events larger than 32KB?\n\nThe Python SDK drops any events greater than 32KB.\n\n#### Does the Python SDK support event ordering?\n\nThe Python SDK does not support event ordering by default.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Python SDK | RudderStack Docs",
  "description": "Use RudderStack’s Python SDK to send server-side events to various destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/quickstart/",
  "markdown": "# JavaScript SDK Quickstart | RudderStack Docs\n\nInstall and use the RudderStack JavaScript SDK on your website.\n\n* * *\n\n*     4 minute read  \n    \n\nThis guide lists the steps to quickly install the JavaScript SDK on your website and start tracking user activity in no time.\n\n## Prerequisites\n\nTo set up and use the RudderStack JavaScript SDK, the following prerequisites must be met:\n\n*   Sign up for [RudderStack Cloud](https://app.rudderstack.com/signup).\n*   [Set up a JavaScript source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in the RudderStack dashboard.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Except for the [installation steps](#step-1-install-javascript-sdk), all the code snippets in this guide assume that the SDK is installed using CDN.\n\n## Step 1: Install JavaScript SDK\n\nYou can install the JavaScript SDK on your website via [CDN](#using-cdn) or using [NPM](#using-npm).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you are migrating from an older version of the SDK, note that there is no [`page`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#page) call embedded in the loading scripts listed below.\n> \n> See [Breaking Changes](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/breaking-changes/) for more information.\n\n### Using CDN\n\nTo integrate the SDK with your website and load it **asynchronously**:\n\n1.  Go to the **Setup** tab of your JavaScript source in the [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Click the **Minified** or **Original** tab followed by **Copy snippet** and paste the script in your website’s `<head>` section.\n\n[![JavaScript SDK snippet](https://www.rudderstack.com/docs/images/get-started/quickstart/js-sdk-snippet.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/js-sdk-snippet.webp)\n\nThe SDK installation snippet (seen above) contains both the [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) and [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) by default.\n\nSee [Installation](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/installation/) for more information on the advanced loading methods.\n\n### Using NPM\n\nWhile it is recommended to install the JavaScript SDK on your website via [CDN](#using-cdn), you can also use the [NPM module](https://www.npmjs.com/package/@rudderstack/analytics-js) for packaging RudderStack directly into your project.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Use this NPM module only for browser applications. To integrate RudderStack with your Node.js apps, see the [Node.js SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/) documentation.\n\nTo install the JavaScript SDK via NPM, run the following command:\n\n```\nnpm install @rudderstack/analytics-js --save\n```\n\nRun the following code snippet **once** and utilize the exported object consistently across your entire project:\n\n*   **For ECMAScript modules (ESM)**:\n\n```\nimport { RudderAnalytics } from '@rudderstack/analytics-js';\n\nconst rudderAnalytics = new RudderAnalytics();\nrudderAnalytics.load(WRITE_KEY, DATA_PLANE_URL, {});\n  \nexport { rudderAnalytics };\n```\n\n*   **For CJS using the `require` method**:\n\n```\nvar RudderAnalytics = require(\"@rudderstack/analytics-js\");\n\nconst rudderAnalytics = new RudderAnalytics();\nrudderAnalytics.load(WRITE_KEY, DATA_PLANE_URL, {});\n\nexports.rudderAnalytics = rudderAnalytics;\n```\n\n### Sample apps\n\nSee the [RudderStack JavaScript SDK repository](https://github.com/rudderlabs/rudder-sdk-js/tree/develop/examples) for sample applications highlighting the different installation methods.\n\n## Step 2: Check ready state\n\nThe JavaScript SDK provides the [`ready`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/installation/#installation-workflow) API with a callback that triggers when the SDK is done initializing itself and the other third-party destination SDKs.\n\n```\nrudderanalytics.ready(() => {\n    console.log(\"The JavaScript SDK is ready.\");\n});\n```\n\n## Step 3: Track current page\n\nYou can make a [`page`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#page) call to track the current web page and pass any additional information:\n\n```\nrudderanalytics.page(\n  \"Cart\",\n  \"Cart Viewed\", {\n    path: \"/best-seller/1\",\n    referrer: \"https://www.google.com/search?q=estore+bestseller\",\n    search: \"estore bestseller\",\n    title: \"The best sellers offered by EStore\",\n    url: \"https://www.estore.com/best-seller/1\"\n  },\n  () => {\n    console.log(\"Page event successfully submitted to the RudderStack SDK.\");\n  }\n);\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that the above example highlights how to override and set custom values for `path`, `referrer`, `search`, `title`, and `url`. In reality, the SDK automatically captures these fields.\n\n### Single page applications\n\nIn the case of single-page applications (SPA) where a route change does not reload the page, you need to make the `page` call explicitly after the route change on the frontend.\n\nSee [RudderStack-Next.js Integration](https://www.rudderstack.com/docs/user-guides/how-to-guides/rudderstack-jamstack-integration/v3/nextjs/) guide for more information.\n\n## Step 4: Identify users\n\nThe [`identify`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#identify) method lets you identify a user and associate them with their actions. It also enables you to record any traits about them like their name, email, etc.\n\n```\nrudderanalytics.identify(\n  \"1hKOmRA4el9Zt1WSfVJIVo4GRlm\", {\n    firstName: \"Alex\",\n    lastName: \"Keener\",\n    email: \"alex@example.com\",\n    phone: \"+1-202-555-0146\"\n  },\n  () => {\n    console.log(\"Identify event successfully submitted to the RudderStack SDK.\");\n  }\n);\n```\n\nThe JavaScript SDK captures the user ID, first name, last name, email, and phone number from the above snippet.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The anonymous visitors are automatically assigned an `anonymousId`. See the [Anonymous ID](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#anonymous-id) section for more information.\n\n## Step 5: Track user actions\n\nThe [`track`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#track) method lets you capture user events along with the associated properties.\n\n```\nrudderanalytics.track(\n  \"Order Completed\", {\n    revenue: 77.6,\n    currency: \"USD\",\n  },\n  () => {\n    console.log(\"Track event successfully submitted to the RudderStack SDK.\");\n  }\n);\n```\n\nThe JavaScript SDK captures the `Order Completed` event along with `revenue`and `currency`from the above snippet.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> You can use the `track` method to track various success metrics for your website like user signups, item purchases, article bookmarks, and more.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "JavaScript SDK Quickstart | RudderStack Docs",
  "description": "Install and use the RudderStack JavaScript SDK on your website.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ruby-sdk/",
  "markdown": "# Ruby SDK | RudderStack Docs\n\nUse RudderStack’s Ruby SDK to send server-side events to various destinations.\n\n* * *\n\n*     8 minute read  \n    \n\nRudderStack’s Ruby SDK lets you track and send the events from your Ruby applications asynchronously to the specified destinations. You can use the SDK to improve the performance of your application by reducing the time taken to send the data.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To send the data from the Ruby SDK synchronously, refer to this [documentation](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ruby-sdk-sync/). **Note that the synchronous SDK version will be deprecated soon**.\n\nRefer to the SDK’s [GitHub codebase](https://github.com/rudderlabs/rudder-sdk-ruby) for the implementation-specific details.\n\n[![Github Badge](https://img.shields.io/gem/v/rudder-sdk-ruby?style=flat)](https://rubygems.org/gems/rudder-sdk-ruby)\n\n## SDK setup requirements\n\n1.  Sign up to [RudderStack Cloud](https://app.rudderstack.com/signup).\n2.  [Set up a Ruby source](https://www.rudderstack.com/docs/dashboard-guides/sources/#adding-a-source) in your dashboard. You should be able to see a **write key** for this source.\n\nYou will also need a data plane URL. Refer to the [Dashboard Overview](https://www.rudderstack.com/docs/dashboard-guides/overview/#data-plane-url) guide for more information on the data plane URL and where to find it.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The **Setup** tab in the RudderStack dashboard has the SDK installation snippet containing both the write key and the data plane URL. Copy it to integrate the Ruby SDK into your application.\n\n## Installing the Ruby SDK\n\nTo install the RudderStack Ruby SDK:\n\n1.  Add the following line to your application’s Gem file:\n\n2.  Run `bundle install` to install the gem.\n\n## Initializing the SDK\n\nTo initialize the SDK, create a client instance as shown below:\n\n```\nrequire 'rudder-sdk-ruby'\n\nanalytics = Rudder::Analytics.new(\n  write_key: 'WRITE_KEY',\n  data_plane_url: 'DATA_PLANE_URL',\n  gzip: true\n)\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure to replace the `WRITE_KEY` and `DATA_PLANE_URL` in the above snippet with the actual values from your RudderStack dashboard.\n\n## Gzipping requests\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The Gzip feature is enabled by default in the Ruby SDK.\n\nThe Ruby SDK automatically gzips requests. However, you can disable this feature by setting the `Gzip` parameter to `false` while initializing the SDK:\n\n```\nanalytics = Rudder::Analytics.new(\n  write_key: 'WRITE_KEY', # required\n  data_plane_url: 'DATA_PLANE_URL',\n  gzip: false, // Set to true to enable Gzip compression\n  on_error: proc { |error_code, error_body, exception, response|\n    # defaults to an empty proc\n  }\n)\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Gzip requires [rudder-server](https://github.com/rudderlabs/rudder-server) **v1.4 or higher**. Otherwise, your events might fail.\n\n## SDK initialization options\n\nThe RudderStack Ruby SDK provides the following initialization options:\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `write_key`  <br>Required | String | Source [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) . |\n| `data_plane_url`  <br>Required | String | Your [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) . |\n| `stub` | Boolean | Stubs the event requests.<br><br>**Default value**: `false` |\n| `gzip` | Boolean | Gzips the event requests.<br><br>**Default value**: `true` |\n| `max_queue_size` | Integer | Maximum queue size.<br><br>**Default value**: `10000`. |\n| `retries` | Integer | Maximum number of retry attempts to send an event.<br><br>**Default value**: `10` |\n| `ssl` | Boolean | Determines whether to use SSL for the socket connection.<br><br>**Default value**: `true`. |\n\n## Sending events\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not store or persist the user state in any of the server-side SDKs**.\n> \n> Unlike the client-side SDKs that deal with only a single user at a given time, the server-side SDKs deal with multiple users simultaneously. Therefore, you must specify either the `user_id` or `anonymous_id` **every time** while making any API calls supported by the Ruby SDK.\n\n### Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nA sample `identify` call made using the Ruby SDK is shown below:\n\n```\nanalytics.identify(\n  user_id: '1hKOmRA4GRlm',\n  traits: {\n    email: \"alex@example.com\",\n    createdAt: \"2023-07-24T00:00:00Z\",\n    subscribe: true\n  },\n  context: { ip: '10.81.20.10' }\n)\n```\n\nThe `identify` method parameters are as shown:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `traits` | Object | An optional dictionary of the user’s traits like `name` or `email`. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the user actions along with their associated properties. Each user action is called an **event**.\n\nA sample `track` call is shown below:\n\n```\nanalytics.track(\n  user_id: '1hKOmRA4GRlm',\n  event: 'Item Sold',\n  properties: {\n    revenue: 9.95,\n    shipping: 'Free'\n  }\n)\n```\n\nThe `track` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `event`  <br>Required | String | Name of the event. |\n| `properties` | Object | An optional dictionary of the properties associated with the event. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n\n### Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record the page views on your application along with the other relevant information about the page.\n\nA sample `page` call is as shown:\n\n```\nanalytics.page(\n  user_id: `1hKOmRA4GRlm`,\n  category: 'Food',\n  name: 'Pizza',\n  properties: {\n    URL: 'https://website.com'\n  }\n)\n```\n\nThe `page` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed page. |\n| `properties` | Object | An optional dictionary of the properties associated with the viewed page, like `url` or `referrer`. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It lets you record the screen views on your mobile app along with other relevant information about the screen.\n\nA sample `screen` call is as shown:\n\n```\nanalytics.screen(\n  user_id: `1hKOmRA4GRlm`,\n  category: 'Food',\n  name: 'Pizza',\n  properties: {\n    URL: 'https://website.com'\n  }\n)\n```\n\nThe `screen` method parameters are as described below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `name`  <br>Required | String | Name of the viewed screen. |\n| `properties` | Object | An optional dictionary of the properties associated with the viewed screen, like `url` or `referrer`. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group.\n\nA sample `group` call made using the Ruby SDK is shown below:\n\n```\nanalytics.group(\n  user_id: '1hKOmRA4GRlm',\n  group_id: '12',\n  traits: {\n    name: 'Company',\n    description: 'Software'\n  }\n)\n```\n\nThe `group` method parameters are as follows:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `group_id`  <br>Required | String | Unique identifier of the group in your database. |\n| `traits` | Object | An optional dictionary of the group’s traits like `name`or `email`. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n### Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly. You can use `alias` for managing the user’s identity in some of the downstream destinations.\n\nA sample `alias` call is as shown:\n\n```\nanalytics.alias(\n  previous_id: '1hKOmRA4GRlm',\n  user_id: '12345'\n)\n```\n\nThe `alias` method parameters are as mentioned below:\n\n| **Field** | **Type** | **Description** |\n| --- | --- | --- |\n| `user_id`  <br>Required, if **anonymous\\_id** is absent. | String | Unique identifier for a user in your database. |\n| `anonymous_id`  <br>Required, if **user\\_id** is absent. | String | Use this field to set an identifier in cases where there is no unique user identifier. |\n| `previous_id`  <br>Required | String | The previous unique identifier of the user. |\n| `traits` | Object | An optional dictionary of the user’s traits like `name` or `email`. |\n| `integrations` | Object | An optional dictionary containing the destinations to be either enabled or disabled. |\n| `context` | Object | An optional dictionary of information that provides context about the event. It is not directly related to the API call. |\n| `timestamp` | Timestamp in ISO 8601 format | The timestamp of the event’s arrival. |\n\n## FAQ\n\n#### How does the Ruby SDK handle events larger than 32KB?\n\nThe Ruby SDK drops any events greater than 32KB.\n\n#### Does the Ruby SDK support event ordering?\n\nThe Ruby SDK does not support event ordering by default.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Ruby SDK | RudderStack Docs",
  "description": "Use RudderStack’s Ruby SDK to send server-side events to various destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/",
  "markdown": "# Features | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Features | RudderStack Docs",
  "description": "Explore the Reverse ETL features and capabilities.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/data-pipelines/reverse-etl/quickstart/",
  "markdown": "# Reverse ETL Quickstart Guide | RudderStack Docs\n\nSet up a Reverse ETL pipeline and sync your warehouse data to downstream destinations in no time.\n\n* * *\n\n*     5 minute read  \n    \n\nThe easiest way to set up a Reverse ETL pipeline is to configure your warehouse source, connect it to a downstream destination, and specify the data mappings and sync settings.\n\nFor most use cases, you can set up and activate your Reverse ETL pipeline by following these steps:\n\n1.  [Add a source](#step-1-add-source)\n2.  [Add destination](#step-2-connect-destination)\n3.  [Define mappings](#step-3-create-mappings)\n4.  [Schedule syncs](#step-4-schedule-syncs)\n5.  [Activate connection](#step-5-activate-connection)\n\n## Step 1: Add source\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack lets you set up a Reverse ETL source from a warehouse table, [Model](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/models/), or [Audience](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/).\n\n1.  Sign in to your [RudderStack dashboard](https://app.rudderstack.com/) and click **\\+ Add source** in the default **Connections** view.\n\n[![Add source](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/add-source.webp)\n\n2.  Under **Sources**, click **Reverse ETL** and select your warehouse source.\n\n[![Select source](https://www.rudderstack.com/docs/images/data-pipelines/select-source.webp)](https://www.rudderstack.com/docs/images/data-pipelines/select-source.webp)\n\n3.  Configure your source. See the [source-specific documentation](https://www.rudderstack.com/docs/sources/reverse-etl/#supported-reverse-etl-sources) for configuration details.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack requires some warehouse-specific permissions to sync data from it. These permissions are listed in the source documentation, for example, see [BigQuery permissions](https://www.rudderstack.com/docs/sources/reverse-etl/google-bigquery/#granting-permissions).\n> \n> Make sure to grant these permissions **before** you set up the source.\n\n## Step 2: Connect destination\n\nOnce you have set up the Reverse ETL source, the next step is to connect it to a downstream destination.\n\nYou can connect the Reverse ETL source to an existing or new [destination](https://www.rudderstack.com/docs/destinations/overview/) to start using it. To connect to a destination later, click **Done** on the top right.\n\n[![Next steps](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)\n\nYou will then be redirected to the **Overview** page of the source where you get the option of connecting it to an existing or new destination.\n\n[![Add destination](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)\n\nSee Set up Reverse ETL Connections section for more information.\n\n## Step 3: Create mappings\n\nRudderStack provides two options to map your warehouse columns to specific destination fields before syncing your data:\n\n*   [Map with Visualizer](https://www.rudderstack.com/docs/sources/reverse-etl/visual-data-mapper/)\n*   [Map with JSON](https://www.rudderstack.com/docs/sources/reverse-etl/json-data-mapping/)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack supports the **Map with Visualizer** option only for [selected destinations](https://www.rudderstack.com/docs/sources/reverse-etl/visual-data-mapper/#supported-destinations).\n> \n> Other destinations that do not support Visual Data Mapper have the **Map with JSON** option by default, with the **Map with Visualizer** option greyed out.\n\nThe steps to set the data mappings (using JSON) are listed below:\n\n1.  Select the **Sync mode** to specify how RudderStack syncs each record to the destination. RudderStack supports two [sync modes](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/):\n\n| Sync mode | Description |\n| --- | --- |\n| Upsert | In this mode, RudderStack inserts new records and updates the existing records in the destination while syncing the data. |\n| Mirror | In this mode, RudderStack ‘mirrors’ the source by keeping the destination data the same as the source data. It performs insertion, deletion, and updates to the records while syncing the data.<br><br>Note that:<br><br>*   Only [select destinations](https://www.rudderstack.com/docs/sources/reverse-etl/sync-modes/#mirror-mode) support this mode.<br>*   RudderStack does not support `track` event type for this mode. |\n\n2.  Select the **Event Type** - RudderStack supports sending the synced data to your downstream destinations as `identify` or `track` events.\n\nIf you select `track` as the **Event Type**, you also need to set the event name that is sent to the downstream destination. This is because every `track` event requires a name. You can also set the column name as the event name by turning on the **Lookup event name by column** toggle and selecting the column from the dropdown:\n\n[![Schema tab options in RudderStack](https://www.rudderstack.com/docs/images/warehouse-actions-sources/event-name-table-track.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/event-name-table-track.webp)\n\n3.  Set at least one user identifier from `user_id` or `anonymous_id` in the **Choose user identifier** setting.\n\n[![Map with JSON feature](https://www.rudderstack.com/docs/images/data-pipelines/map-with-json-new.webp)](https://www.rudderstack.com/docs/images/data-pipelines/map-with-json-new.webp)\n\n4.  Preview the resulting data and make the necessary changes before proceeding.\n\n## Step 4: Schedule syncs\n\nRudderStack determines how and when to run a sync based on the [sync schedule](https://www.rudderstack.com/docs/sources/reverse-etl/sync-schedule-settings/) you set for your Reverse ETL connection.\n\n| Schedule type | Description |\n| --- | --- |\n| Basic | Run syncs at a given time interval and specified time (in UTC). |\n| CRON | Run syncs based on a specified CRON expression (in UTC). |\n| Manual | Run syncs manually. |\n\n## Step 5: Activate connection\n\nOnce your source and destination are set up, activate the connection by clicking **Turn on the connection**.\n\n[![Turn on Reverse ETL connection](https://www.rudderstack.com/docs/images/data-pipelines/turn-on-connection.webp)](https://www.rudderstack.com/docs/images/data-pipelines/turn-on-connection.webp)\n\nOnce you activate the connection, RudderStack automatically triggers the syncs as per the [sync schedule](#step-4-schedule-syncs).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> When you sync data from the source for the first time, RudderStack performs a full sync by default, irrespective of the sync mode you specified while [setting the mappings](#step-3-create-mappings). It then incrementally syncs any new data since the last sync.\n\n### Trigger syncs\n\nGo to the **Syncs** tab of your Reverse ETL source and click the **Sync Now** button to trigger a new sync. To force a full data sync, choose the **Force Full Resync** option.\n\n[![Trigger new syncs](https://www.rudderstack.com/docs/images/data-pipelines/trigger-sync.webp)](https://www.rudderstack.com/docs/images/data-pipelines/trigger-sync.webp)\n\nTo stop a running sync, click the **Stop Now** button.\n\n[![Stop syncs](https://www.rudderstack.com/docs/images/data-pipelines/stop-sync.webp)](https://www.rudderstack.com/docs/images/data-pipelines/stop-sync.webp)\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note the following before stopping a sync:\n> \n> *   Once you stop a sync, any data that RudderStack reads from the warehouse and is on the fly may not be stopped or dropped from being delivered to the destination. It will only stop reading and sending any new data from the warehouse to the destination and stop the sync from progressing.\n> *   For a very low number of deltas (new data since the last attempted sync), you may sometimes see a “0 deltas succeeded” after you stop the sync.\n> *   Once you cancel a sync, the behavior of the next sync depends on the type of the previously cancelled sync. For example, if a cancelled sync is an incremental sync, then the next sync will be incremental too. Similarly, if the cancelled is a full sync, then the next sync will be a full sync.\n\n### Update your mappings\n\nIn cases where your warehouse schema has changed, RudderStack lets you update the mappings to ensure the data is synced to the destination correctly.\n\nGo to the **Schema** tab of your connection page and click **Update** to update your mappings. Make sure to save the updated mappings.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot update the mappings while a sync is in progress.\n\n[![Update connection mappings](https://www.rudderstack.com/docs/images/data-pipelines/update-mappings.webp)](https://www.rudderstack.com/docs/images/data-pipelines/update-mappings.webp)\n\n## Sync data from SQL models\n\nRudderStack’s [Models](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/models/) feature lets you create models by defining custom SQL queries. You can then run these queries on your warehouse and send the resulting data to specific destinations.\n\nFollow these steps to set up a Reverse ETL pipeline using a model:\n\n1.  [Create a new model](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/models/#create-model)\n2.  [Connect the model to a destination](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/models/#connect-model-to-destination)\n3.  [Set up the data mappings](https://www.rudderstack.com/docs/sources/reverse-etl/json-data-mapping/)\n\n## Sync data from Audiences\n\nRudderStack’s [Audiences](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/) feature lets you create customer lists or a subset of users satisfying specific criteria with easy-to-use filters on your warehouse tables. Once created, you can connect and activate them in your downstream destinations.\n\nFollow these steps to set up a Reverse ETL pipeline using an audience:\n\n1.  [Set up a new audience](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/#create-audience)\n2.  [Connect the audience source to a destination](https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/#connect-audience)\n3.  [Set up the data mappings](https://www.rudderstack.com/docs/sources/reverse-etl/json-data-mapping/)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Reverse ETL Quickstart Guide | RudderStack Docs",
  "description": "Set up a Reverse ETL pipeline and sync your warehouse data to downstream destinations in no time.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/installation/",
  "markdown": "# Install JavaScript SDK | RudderStack Docs\n\nInstall and set up the JavaScript SDK v3 on your website.\n\n* * *\n\n*     4 minute read  \n    \n\nThis guide will help you install the JavaScript SDK on your website via [CDN](#using-cdn) or using [NPM](#using-npm).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you are migrating from an older version, see the [Migration Guide](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/migration-guide/) for details.\n\n## Using CDN\n\nFollow these steps to get the JavaScript SDK installation snippet and integrate it in your website.\n\n1.  Go to the **Setup** tab of your JavaScript source in the [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Click the **Minified** or **Original** tab followed by **Copy snippet**.\n\n[![JavaScript SDK snippet](https://www.rudderstack.com/docs/images/get-started/quickstart/js-sdk-snippet.webp)](https://www.rudderstack.com/docs/images/get-started/quickstart/js-sdk-snippet.webp)\n\nTo integrate the SDK with your website and load it **synchronously**, set `scriptLoadingMode` (highlighted below) to `\"\"`.\n\n```\nvar scriptLoadingMode = \"\";\n```\n\n[![JavaScript SDK synchronous installation](https://www.rudderstack.com/docs/images/event-stream-sources/js-sdk-installation-snippet-unminified.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/js-sdk-installation-snippet-unminified.webp)\n\nTo defer the script loading to the end, set `scriptLoadingMode` to `defer`, as shown:\n\n```\nvar scriptLoadingMode = \"defer\";\n```\n\n4.  Paste the modified script in your website’s `<head>` section.\n\nNote the following:\n\n*   The SDK installation snippet contains both the [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) and [data plane URLThe data plane URL is the location where events are routed and sent to the RudderStack backend for processing. You can find this URL in the home page of your RudderStack dashboard.](https://www.rudderstack.com/docs/resources/glossary/#data-plane-url) by default.\n*   The implicit `page` call at the end of the snippet (present in the previous JavaScript SDK versions) is removed in the [latest SDK v3](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/breaking-changes/#installation). If required, you need to make a `page` call explicitly, as shown:\n\n*   Depending on the browser, the SDK loads either the legacy or modern JavaScript SDK bundle. The legacy bundle is built for ES5 while the modern bundle (with Module Federation) is built for ES6.\n*   You can also pass your `loadOptions` as a third argument in the `rudderanalytics.load` method. See [Load JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/) for more information.\n\n### Installation workflow\n\nThe installation code snippets listed above perform the following actions:\n\n1.  Based on browser capabilities, load either the `legacy` or `modern` bundle.\n2.  Load the necessary polyfills for the SDK to load.\n3.  Create an array to store the events until the SDK is ready.\n4.  Store the method invocations in the below table to replay them when the SDK is ready.\n5.  Load the SDK with the specified write key.\n\n| Method | Description |\n| --- | --- |\n| [`load`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/) | Loads the SDK with the specified [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) . |\n| [`identify`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#identify) | Identifies the users, records their traits, and associates them with their actions. |\n| [`page`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#page) | Records your website’s page views along with any other information about the viewed page. |\n| [`track`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#track) | Tracks user events along with the associated properties. |\n| [`alias`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#alias) | Maps new user ID with an old ID. |\n| [`group`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#group) | Links an identified user with a group like a company, organization, or an account. |\n| [`reset`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#reset) | Resets information related to the previously identified user. |\n| [`ready`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#ready-api) | Fired when the SDK has initialized itself and the other third-party native SDK destinations. |\n| [`setAnonymousId`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#overriding-anonymous-id) | Sets the anonymous user ID. |\n| [`startSession`](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/manual-session-tracking/) | Starts a new session. |\n| [`endSession`](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/manual-session-tracking/) | Resets the current session. |\n\n## Using NPM\n\nWhile using the above snippets to integrate the JavaScript SDK with your website is recommended, you can alternatively use the [NPM module](https://www.npmjs.com/package/@rudderstack/analytics-js) for packaging RudderStack directly into your project.\n\nTo install the JavaScript SDK via NPM, run the following command:\n\n```\nnpm install @rudderstack/analytics-js --save\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **Use this NPM module only for browser installation.**\n> \n> To integrate RudderStack with your Node.js apps, see [Node.js SDK documentation](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/)\n\nSince the NPM module exports the related APIs on an already-defined object combined with the Node.js module caching, run the following code snippet **once** and use the exported object throughout your project:\n\n*   **For ECMAScript modules (ESM)**:\n\n```\nimport { RudderAnalytics } from '@rudderstack/analytics-js';\n\nconst rudderAnalytics = new RudderAnalytics();\nrudderAnalytics.load(WRITE_KEY, DATA_PLANE_URL, {});\n  \nexport { rudderAnalytics };\n```\n\n*   **For CJS using the `require` method**:\n\n```\nvar RudderAnalytics = require(\"@rudderstack/analytics-js\");\n\nconst rudderAnalytics = new RudderAnalytics();\nrudderAnalytics.load(WRITE_KEY, DATA_PLANE_URL, {});\n\nexports.rudderAnalytics = rudderAnalytics;\n```\n\n#### SDK imports for bundling tools that process dynamic imports\n\nIf you are using a tool to bundle your application and it is attempting to process the dynamic runtime imports of the dependencies, update your SDK imports from `@rudderstack/analytics-js` to `@rudderstack/analytics-js/bundled` to avoid any issues with dynamic imports failing to find plugin modules.\n\nMost common toolchains like the ones based on webpack, rollup, and vite should not face any issues. If your particular setup/toolchain is affected, contact [RudderStack Support](mailto:support@rudderstack.com).\n\n##### **Usage in Chrome extension**\n\nTo use the JavaScript SDK within a Chrome extension, import the content-script as shown:\n\n```\nimport { RudderAnalytics } from '@rudderstack/analytics-js/content-script';\n```\n\n## Supported browsers\n\nThe JavaScript SDK supports the following browsers and their corresponding versions:\n\n| Browser | Supported Versions |\n| --- | --- |\n| Safari | v7 and above |\n| IE  | v11 and above |\n| Edge | v80 and above |\n| Mozilla Firefox | v47 and above |\n| Chrome | v54 and above |\n| Opera | v43 and above |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For unsupported browser versions, try adding browser [polyfills](https://developer.mozilla.org/en-US/docs/Glossary/Polyfill) to your application for the SDK to work correctly.\n\n## Integration with Chromecast\n\nRudderStack supports integrating the JavaScript SDK with [Google Chromecast](https://store.google.com/in/product/chromecast?hl=en-GB). You can build the web sender app by following [these instructions](https://developers.google.com/cast/docs/web_sender) and adding the JavaScript SDK.\n\nSee [Google Cast developer guide](https://developers.google.com/cast/docs/developers) for more details.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Install JavaScript SDK | RudderStack Docs",
  "description": "Install and set up the JavaScript SDK v3 on your website.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/syncing-events/",
  "markdown": "# Syncing Events | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Syncing Events | RudderStack Docs",
  "description": "Sync data as Identify or Track events from Reverse ETL sources to your destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/moengage/",
  "markdown": "# MoEngage source | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "MoEngage source | RudderStack Docs",
  "description": "Ingest your event data from MoEngage into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/migration-guide/",
  "markdown": "# JavaScript SDK Migration Guide | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "JavaScript SDK Migration Guide | RudderStack Docs",
  "description": "Migrate your RudderStack JavaScript SDK from older versions to the latest version.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/audiences/",
  "markdown": "# Audiences | RudderStack Docs\n\nBuild audiences on the warehouse sources and activate them in downstream destinations.\n\nAvailable Plans\n\n*   growth\n*   enterprise\n\n* * *\n\n*     5 minute read  \n    \n\nRudderStack’s **Audiences** feature lets you create target customer lists or a subset of users satisfying specific criteria with easy-to-use filters on your warehouse tables. Once created, you can connect and activate them in your RudderStack-supported destinations.\n\nFor example, you can create an audience and send that data to the downstream digital advertising destinations to:\n\n*   Retarget all users from a specific city/state/region to improve repeat sales.\n*   Prompt active customers on your sports website to buy season tickets.\n*   Run campaigns to grow product usage and retain users.\n\n## Key features\n\nRudderStack provides audience-building capabilities in its Reverse ETL pipeline where you can:\n\n*   Create and sync a single audience to multiple downstream systems, which is very time-consuming to do manually.\n*   Analyze the results of multichannel campaigns in a single place at the data warehouse.\n*   Trust the audience data as a single source of truth and have complete control over the ecosystem.\n*   Fast-track the process for marketing teams who would otherwise need to work with SQL and warehouses or rely on data engineers to query and sync audiences.\n*   Avoid updating the audience every time or debugging issues while building audiences using proprietary tools, saving time.\n\n## Create audience\n\nRudderStack provides a visual **Audience builder tool** which you can use to build audiences without any prior knowledge of SQL or how to store the data.\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  From the left navigation bar, go to **Activate** > **Audiences** and click **New audience**.\n3.  Configure the settings explained in the following sections:\n\n### Select source\n\nSelect the warehouse source for which you want to create an audience. RudderStack supports the Audiences feature for the following sources:\n\n*   [BigQuery](https://www.rudderstack.com/docs/sources/reverse-etl/google-bigquery/)\n*   [Databricks](https://www.rudderstack.com/docs/sources/reverse-etl/databricks/)\n*   [Redshift](https://www.rudderstack.com/docs/sources/reverse-etl/amazon-redshift/)\n*   [Snowflake](https://www.rudderstack.com/docs/sources/reverse-etl/snowflake/)\n*   [Trino](https://www.rudderstack.com/docs/sources/reverse-etl/trino/)\n\n### Specify warehouse credentials\n\nSpecify the warehouse credentials to authenticate RudderStack. See the **Configure warehouse credentials** section of the [source-specific documentation](https://www.rudderstack.com/docs/sources/reverse-etl/#supported-reverse-etl-sources) (for example, [Redshift](https://www.rudderstack.com/docs/sources/reverse-etl/amazon-redshift/#configuring-the-connection-credentials)) for more details.\n\n### Specify audience name and source\n\n*   **Source name**: Assign a name to uniquely identify the source in the RudderStack dashboard.\n    \n*   Configure your audience source by specifying the below fields:\n    \n    *   **Schema**: Select the warehouse schema from the dropdown.\n    *   **Table**: Choose the required table from which RudderStack syncs the data.\n    *   **Primary key**: Select the column from the above table that uniquely identify your records in the warehouse.\n\n### Set audience conditions\n\nYou can set the required filtering conditions, view the corresponding SQL query and preview the resultant data from your data filters:\n\n[![Set conditions in audience](https://www.rudderstack.com/docs/images/warehouse-actions-sources/set-condition-audience.gif)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/set-condition-audience.gif)\n\nYou can add multiple filters within a condition by clicking **Add condition** or add multiple group filters by clicking **Add group condition**. Select **All** or **Any** to implement the AND or OR operator respectively between different filtering conditions.\n\n[![AND/OR conditions in audience](https://www.rudderstack.com/docs/images/warehouse-actions-sources/and-or-condition-audience.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/and-or-condition-audience.webp)\n\nClick **Preview** to see the results and verify if the audience conditions are correct. Click **Continue** to proceed.\n\n### Review and complete setup\n\nTo make any changes to the warehouse credentials or audience configuration, click the edit icon present next to those sections.\n\n[![Edit audience configuration](https://www.rudderstack.com/docs/images/data-pipelines/edit-audience-configuration.webp)](https://www.rudderstack.com/docs/images/data-pipelines/edit-audience-configuration.webp)\n\nOnce you have reviewed your configuration, click **Create source** to complete the setup.\n\n### Connect audience to destination\n\nYou can connect this source to an existing or new [destination](https://www.rudderstack.com/docs/destinations/overview/) to start using it. To connect to a destination later, click **Done** on the top right.\n\n[![Next steps](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)\n\nYou will then be redirected to the **Overview** page of the source where you get the option of connecting it to an existing or new destination.\n\n[![Add destination](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)\n\nSee [Set up Reverse ETL Connection](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/) section for more information.\n\n## Update audience\n\n1.  Go to the **Configuration** tab of the audience source.\n2.  Click the edit icon in the **Configuration settings** to update the source configuration and audience description\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   You can update the **Schema** and **Table** fields only if your audience source is **not** connected to any destination. Otherwise, you can only update the **Primary key** and **Description**.\n> *   Your audience conditions will be reset if you change the warehouse schema or table.\n\n[![Update audience](https://www.rudderstack.com/docs/images/data-pipelines/update-audience-1.webp)](https://www.rudderstack.com/docs/images/data-pipelines/update-audience-1.webp)\n\nTo update the audience conditions, click the **Edit conditions** button and update the conditions. Make sure to preview the data before saving the updated conditions.\n\n[![Update audience conditions](https://www.rudderstack.com/docs/images/data-pipelines/update-audience-2.webp)](https://www.rudderstack.com/docs/images/data-pipelines/update-audience-2.webp)\n\n## Audience identifier\n\nRudderStack requires an audience identifier when mapping your audience to destinations that don’t support audiences by default, for example, Salesforce, Customer.io, HubSpot, etc. It picks up this identifier from the **Audience identifier** setting in the dashboard while setting up the data mapping.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   You will see the **Audience identifier** setting while connecting your audience to all the [supported destinations](#supported-destinations) **except** Facebook Custom Audience and Google Adwords Remarketing Lists, which have audience support by default.\n> *   The value of **Audience identifier** is pre-populated in the dashboard. However, you can change it as required.\n\n[![Audience identifier](https://www.rudderstack.com/docs/images/warehouse-actions-sources/audience-identifier.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/audience-identifier.webp)\n\nRudderStack sets the user traits with the provided **Audience identifier** as the key. It sets the value of the trait to either `true` or `false` depending on whether the user is a member of the defined audience.\n\n## Supported destinations\n\nYou can connect an audience to the following destinations:\n\n*   [ActiveCampaign](https://www.rudderstack.com/docs/destinations/streaming-destinations/activecampaign/)\n*   [Bing Ads Audience](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/bing-ads-audience/)\n*   [Braze](https://www.rudderstack.com/docs/destinations/streaming-destinations/braze/)\n*   [Criteo Audience](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/criteo-audience/)\n*   [Customer.io](https://www.rudderstack.com/docs/destinations/streaming-destinations/customer.io/)\n*   [Facebook Custom Audience](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/fb-custom-audience/)\n*   [Google Ads Remarketing Lists (Customer Match)](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/google-adwords-remarketing-list/)\n*   [Heap.io](https://www.rudderstack.com/docs/destinations/streaming-destinations/heap.io/)\n*   [HubSpot](https://www.rudderstack.com/docs/destinations/streaming-destinations/hubspot/)\n*   [Intercom](https://www.rudderstack.com/docs/destinations/streaming-destinations/intercom/)\n*   [Iterable](https://www.rudderstack.com/docs/destinations/streaming-destinations/iterable/)\n*   [Klaviyo](https://www.rudderstack.com/docs/destinations/streaming-destinations/klaviyo/)\n*   [LaunchDarkly Segments](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/launchdarkly-segments/)\n*   [Marketo](https://www.rudderstack.com/docs/destinations/streaming-destinations/marketo/)\n*   [Marketo Static Lists](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/marketo-static-lists/)\n*   [Salesforce](https://www.rudderstack.com/docs/destinations/streaming-destinations/salesforce/)\n*   [SendGrid](https://www.rudderstack.com/docs/destinations/streaming-destinations/sendgrid/)\n*   [The Trade Desk Audience](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/trade-desk-audience/)\n*   [TikTok Audiences](https://www.rudderstack.com/docs/destinations/reverse-etl-destinations/tiktok-audiences/)\n*   [Webhook](https://www.rudderstack.com/docs/destinations/streaming-destinations/webhooks/)\n\n## FAQ\n\n#### Can I create a filter on the JSON columns in my warehouse table?\n\nYes, you can. Select the **Custom SQL filter** option from the dropdown and enter the corresponding SQL query, which includes the relevant filtering condition for the JSON column:\n\n[![Connect audience](https://www.rudderstack.com/docs/images/warehouse-actions-sources/custom-sql-filter.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/custom-sql-filter.webp)\n\n#### **What do the three validations under Verifying Credentials imply?**\n\nOnce you proceed after entering the connection credentials, you will see the following validations under the **Verifying Credentials** option:\n\n[![Validating credentials](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)\n\nThese options are explained below:\n\n*   **Verifying Connection**: Indicates that RudderStack is trying to connect to the warehouse with the information specified in the connection credentials.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, it means that one or more fields specified in the connection credentials are incorrect. Verify your credentials in this case.\n\n*   **Able to List Schema**: Checks if RudderStack is able to fetch all schema details using the provided credentials.\n    \n*   **Able to Access RudderStack Schema**: Checks if RudderStack has the required access to the `_RUDDERSTACK` / `_rudderstack` schema (depending on your warehouse). To create the schema, run all commands listed in the **Permissions** section of the respective Reverse ETL source documentation:\n    \n    *   [BigQuery](https://www.rudderstack.com/docs/sources/reverse-etl/google-bigquery/#granting-permissions)\n    *   [Databricks](https://www.rudderstack.com/docs/sources/reverse-etl/databricks/#granting-permissions)\n    *   [PostgreSQL](https://www.rudderstack.com/docs/sources/reverse-etl/postgresql/#granting-permissions)\n    *   [Redshift](https://www.rudderstack.com/docs/sources/reverse-etl/amazon-redshift/#granting-permissions)\n    *   [Snowflake](https://www.rudderstack.com/docs/sources/reverse-etl/snowflake/#granting-permissions)\n    *   [Trino](https://www.rudderstack.com/docs/sources/reverse-etl/trino/#granting-permissions)\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, verify if you have successfully created the `_RUDDERSTACK` / `_rudderstack` schema and given RudderStack the required permissions to access it.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Audiences | RudderStack Docs",
  "description": "Build audiences on the warehouse sources and activate them in downstream destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/ortto/",
  "markdown": "# Ortto source (formerly Autopilot) | RudderStack Docs\n\nIngest your event data from Ortto into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[Ortto](https://www.autopilothq.com/) (formerly Autopilot) is a popular marketing automation platform that allows you to track and capture new leads, create detailed customer journeys, and boost customer retention.\n\nThis guide will help you set up Ortto as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Ortto source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Ortto**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Ortto source is now configured. Note the **Webhook URL** by going to the **Settings** tab.\n\n[![Ortto webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/ortto-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/ortto-webhook-url.webp)\n\n4.  Log in to your [Ortto dashboard](https://ortto.app/). From the left sidebar, go to **More** > **Data sources** > **New data source**:\n\n[![Add webhook source in Ortto](https://www.rudderstack.com/docs/images/event-stream-sources/ortto-webhook-source-1.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/ortto-webhook-source-1.webp)\n\n5.  Search for **Webhook** and select **Webhook (advanced)**.\n\n[![Add webhook source in Ortto](https://www.rudderstack.com/docs/images/event-stream-sources/ortto-webhook-source-2.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/ortto-webhook-source-2.webp)\n\n6.  Enter the **Webhook name**. Specify the URL obtained in Step 3 in the **Webhook URL** field.\n\n[![Add webhook name and URL](https://www.rudderstack.com/docs/images/event-stream-sources/ortto-webhook-source-3.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/ortto-webhook-source-3.webp)\n\n7.  Complete the rest of the configuration as per your requirements and click **Create**.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> It is recommended to test your webhook using the **Test** button before clicking **Create** to complete the setup.\n\n## Event transformation\n\nRudderStack ingests the events from Ortto as [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) events, after converting them into the appropriate event format.\n\nRudderStack supports ingesting events related to the following [Ortto standard activities](https://help.ortto.com/a-251-configuring-a-webhook#webhook-payload-data):\n\n*   **Email activities**\n*   **SMS activities**\n*   **Push activities**\n*   **Web and user session activities**\n*   **Audience and tag activities**\n*   **Playbook activities**\n*   **Journey activities**\n*   **Capture widget activities**\n*   **Talk conversation activities**\n\n### Property mappings\n\nRudderStack maps the following Ortto properties from the event payload to the RudderStack fields:\n\n| Ortto Property | RudderStack Property |\n| --- | --- |\n| `activity.field_id` | event |\n| `time` | `originalTimestamp` |\n| `id` | `messageId` |\n| `contact.first_name` | `contact.first_name` |\n| `contact.last_name` | `context.traits.lastName` |\n| `contact.email` | `context.traits.email` |\n| `contact.external_id` | `userId` / `anonymousId` |\n| `contact.country.name` | `context.traits.address.country` |\n| `contact.city.name` | `context.traits.address.city` |\n| `contact.postal` | `context.traits.address.postal` |\n| `contact.phone_number` | `context.traits.phone` |\n| `contact.birthday` | `context.traits.birthday` |\n\nA sample input payload ingested by RudderStack:\n\n```\n{\n  \"activity\": {\n    \"id\": \"00651b946bfef7e80478efee\",\n    \"field_id\": \"act::s-all\",\n    \"created\": \"2023-10-03T04:11:23Z\",\n    \"attr\": {\n      \"str::is\": \"API\",\n      \"str::s-ctx\": \"Subscribed via API\"\n    }\n  },\n  \"contact\": {\n    \"contact_id\": \"00651b946baa9be6b2edad00\",\n    \"email\": \"alex@example.com\"\n  },\n  \"id\": \"00651b946cef87c7af64f4f3\",\n  \"time\": \"2023-10-03T04:11:24.25726779Z\",\n  \"webhook_id\": \"651b8aec8002153e16319fd3\"\n}\n```\n\nThe RudderStack-transformed event payload is shown below:\n\n```\n{\n  \"anonymousId\": \"3ce8d38c-ecad-4941-8226-c802a08a7889\",\n  \"context\": {\n    \"externalId\": [{\n      \"id\": \"00651b946baa9be6b2edad00\",\n      \"type\": \"orttoPersonId\"\n    }],\n    \"integration\": {\n      \"name\": \"ortto\"\n    },\n    \"ip\": \"3.139.195.252\",\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"traits\": {\n      \"email\": \"alex@example.com\"\n    }\n  },\n  \"event\": \"Resubscribe globally\",\n  \"integrations\": {\n    \"ortto\": false\n  },\n  \"messageId\": \"00651b946cef87c7af64f4f3\",\n  \"originalTimestamp\": \"2023-10-03T04:11:24.000Z\",\n  \"properties\": {\n    \"activity.attr.str::is\": \"API\",\n    \"activity.attr.str::s-ctx\": \"Subscribed via API\",\n    \"activity.created\": \"2023-10-03T04:11:23Z\",\n    \"activity.id\": \"00651b946bfef7e80478efee\",\n    \"webhook_id\": \"651b8aec8002153e16319fd3\"\n  },\n  \"receivedAt\": \"2023-10-03T13:38:06.762Z\",\n  \"request_ip\": \"3.139.195.252\",\n  \"rudderId\": \"2e69b7d1-1511-4f10-bec9-43652ab8efe0\",\n  \"sentAt\": \"2023-10-17T13:38:10.993Z\",\n  \"timestamp\": \"2023-10-17T13:38:01.768Z\",\n  \"type\": \"track\"\n}\n```\n\n## FAQ\n\n#### Why am I getting a 500 error while testing my webhook data source in Ortto?\n\nIf you’re getting a `Unexpected status code 500 received` while setting up your webhook data source in Ortto, verify if your webhook URL is correctly configured to receive events.\n\n[![Ortto webhook source error](https://www.rudderstack.com/docs/images/event-stream-sources/ortto-source-error.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/ortto-source-error.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Ortto source (formerly Autopilot) | RudderStack Docs",
  "description": "Ingest your event data from Ortto into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/",
  "markdown": "# JavaScript SDK APIs | RudderStack Docs\n\nSend events by leveraging different JavaScript SDK APIs.\n\n* * *\n\n*     10 minute read  \n    \n\nThe JavaScript SDK provides a comprehensive API that lets you track and send your event data to any destination.\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) method lets you identify a user and associate them to their actions. It also lets you record any traits about them like their name, email, etc.\n\nOnce you make the `identify` call, the SDK persists the user information and passes it to the subsequent calls.\n\nThe JavaScript SDK defines the `identify` method as shown:\n\n```\nrudderanalytics.identify(userId, [traits], [apiOptions], [callback]);\n```\n\nThe following table describes the above (optional) parameters in detail:\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `userId` | String | The unique user identifier in the database. When provided, the SDK sends this argument to the destinations instead of `anonymousId`. |\n| `traits` | Dictionary | Contains the user’s traits or the properties associated with `userId` such as email, address, etc. See [Identify traits](https://www.rudderstack.com/docs/event-spec/standard-events/identify/#identify-traits) for more information. |\n| `apiOptions` | Dictionary | Provides information such as `integrations`, `anonymousId`, and `originalTimestamp`. |\n| `callback` | Function | Called after the successful execution of the `identify` method. |\n\n#### `apiOptions` structure\n\nThe structure of the **apiOptions** parameter is as shown:\n\n```\n{\n  integrations: IntegrationOpts,\n  anonymousId: string,\n  originalTimestamp: ISO 8601 date string,\n  <other keys>: <value> // merged with event's contextual information\n}\n```\n\nThe following table describes the above parameters in detail:\n\n| **Parameter** | **Type** | **Description** |\n| --- | --- | --- |\n| `integrations` | [IntegrationOpts](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#integrationopts) | Use to send event data only to the [selective destinations](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/filtering/). |\n| `anonymousId` | String | Overrides the current event’s `anonymousId` at the top level. |\n| `originalTimestamp` | ISO 8601 Date string | Overrides the current event’s `originalTimestamp` at the top level. See [Clock skew considerations](https://www.rudderstack.com/docs/event-spec/standard-events/common-fields/#clock-skew-considerations) for more information. |\n| `<other keys>: <value>` | \\-  | Merged with the event’s contextual information. |\n\nA sample `identify` call is shown below:\n\n```\nrudderanalytics.identify(\n  \"1hKOmRA4el9Zt1WSfVJIVo4GRlm\", {\n    firstName: \"Alex\",\n    lastName: \"Keener\",\n    email: \"alex@example.com\",\n    phone: \"+1-202-555-0146\"\n  }, {\n    page: {\n      path: \"/best-seller/1\",\n      referrer: \"https://www.google.com/search?q=estore+bestseller\",\n      search: \"estore bestseller\",\n      title: \"The best sellers offered by EStore\",\n      url: \"https://www.estore.com/best-seller/1\"\n    }\n  },\n  () => {\n    console.log(\"identify call\");\n  }\n);\n```\n\nIn the above example, the JavaScript SDK captures the `userId`, `email` and the [contextual information](https://www.rudderstack.com/docs/event-spec/standard-events/common-fields/#contextual-fields).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you specify the IP address in the event payload, RudderStack uses that instead of automatically capturing it in the backend. You can use this feature to anonymize your users’ IP addresses.\n\n### Anonymous ID\n\nThe `anonymousId` is an auto-generated **UUID** (Universally Unique Identifier) that gets assigned to each unique and unidentified visitor to your website.\n\n#### **Retrieving anonymous ID**\n\nTo retrieve the anonymous ID of any visitor, run the following:\n\n```\nrudderanalytics.getAnonymousId();\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If the `anonymousId` is `null` in the SDK and you call the above function, RudderStack will automatically set a new `anonymousId`.\n\n#### **How the SDK uses `anonymousId`**\n\nThe JavaScript SDK generates a unique `anonymousId`, stores it in the `rl_anonymous_id` cookie in the top-level domain, and attaches it to every subsequent event. This helps RudderStack to identify the anonymous users from other sites hosted under a sub-domain.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you identify a user with your application’s unique identifier like email, database ID, etc., RudderStack stores this ID in the `rl_user_id` cookie and attaches it to every event.\n\nRefer to the [Data Storage](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/data-storage-cookies/) guide for more information on how the JavaScript SDK stores persistent user data in cookies.\n\n#### **Overriding anonymous ID**\n\nYou can use any of the following three methods to override the `anonymousId` generated by the JavaScript SDK:\n\n*   Provide the `anonymousId` in the **apiOptions** parameter of the `identify` call.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that all other events will have the `anonymousId` persisted from the cookie except the particular event where you override the **apiOptions** parameter.\n\nAn example is shown below:\n\n```\nrudderanalytics.identify(\n  \"1hKOmRA4el9Zt1WSfVJIVo4GRlm\", {\n    email: \"alex@example.com\"\n  }, {\n    anonymousId: \"my-anonymous-id\"\n  },\n  () => {\n    console.log(\"identify call\");\n  }\n);\n```\n\n*   Set the `anonymousId` for all future events using the `setAnonymousId()` method. An example is shown below:\n\n```\nrudderanalytics.setAnonymousId(\"my-anonymous-id\");\n// All event payloads will have the anonymousId key set \"my-anonymous-id\".\nrudderanalytics.identify(\"1hKOmRA4el9Zt1WSfVJIVo4GRlm\", {\n  email1: \"alex@example.com\"\n}, () => {\n  console.log(\"identify call\");\n});\n```\n\n*   Parse the AMP Linker ID and set the `anonymousId` using AMP Analytics:\n\n```\nrudderanalytics.setAnonymousId(\n  null,\n  \"<version>*<checkSum>*<idName1>*<idValue1>*<idName2>*<idValue2>...\"\n);\n```\n\nHere, the second parameter is the AMP Linker ID format in the [specified structure](https://github.com/ampproject/amphtml/blob/master/extensions/amp-analytics/linker-id-receiving.md#format). For websites using the [RudderStack AMP Analytics SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-amp-analytics/#amp-linker), the `<idName1>` value will be `rs_amp_id`.\n\nCalling the above method will parse the Linker ID and set the `rs_amp_id` key value as the `anonymousId`.\n\n### Setting a blank user ID\n\nTo set a blank user ID, you can pass an empty string or `\" \"` to `userId`.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Do not pass an `identify` call with `null` as RudderStack will not allow you to pass a traits object and retain the current `userId`.\n\n#### Use case\n\nSuppose an anonymous user is identified with a `userId` and then logs out of their account. You can then call `identify(\"\", {isLoggedIn: false})` and the user will continue to be identified by their `anonymousId` for the future events.\n\n### Identifying new users\n\nTo identify new users in scenarios like new logins, you can use any one of the following approaches:\n\n*   Call `identify` with a new `userId`  \n    OR\n*   Call `reset` followed by the `identify`\n\nRudderStack resets all cookies related to the user (associated with the `userId` and `traits`) and updates them with the newly provided values.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `anonymousId` will remain unchanged in this case. It will be the auto-generated value set by the SDK or the one explicitly set using the `setAnonymousId` method.\n\n### Updating user traits\n\nFor updating the user traits, you can call `identify` method with the same `userId` multiple times with the new traits. This will append or modify all traits associated with that user. An example is shown below:\n\n```\nrudderanalytics.identify(\"1hKOmRA4el9Zt1WSfVJIVo4GRlm\", {\n    email1: \"alex@example.com\"\n}, () => {\n    console.log(\"identify call\");\n});\n\nrudderanalytics.identify(\"1hKOmRA4el9Zt1WSfVJIVo4GRlm\", {\n    email2: \"john@example.com\"\n}, () => {\n    console.log(\"identify call\");\n});\n```\n\nIn the above example, both `email1` and `email2` will be sent in the payload for the second `identify` call.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Calling `reset()` method resets the existing user traits and calling `identify()` method with new traits updates the new user traits.\n\n### Setting a custom user ID\n\nYou can pass a custom `userId` along with the standard `userId` in your `identify` call. RudderStack adds this value under `context.externalId`.\n\nThe following code snippet highlights how you can add an `externalId` to your `identify` request:\n\n```\nrudderanalytics.identify(\n  \"1hKOmRA4GRlm\", {\n    firstName: \"Alex\",\n    city: \"New Orleans\",\n    country: \"Louisiana\",\n    phone: \"+1-202-555-0146\",\n    email: \"alex@example.com\",\n    custom_flavor: \"chocolate\",\n  } {\n    externalId: [{\n      id: \"some_external_id_1\",\n      type: \"brazeExternalId\",\n    }, ],\n  }\n);\n```\n\n## Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record your website’s page views with any additional relevant information about the viewed page.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Many destinations require the `page` call to be made at least once every page load.\n\nThe JavaScript SDK defines the `page` method as shown:\n\n```\nrudderanalytics.page(category, name, [properties], [apiOptions], [callback]);\n```\n\nThe following table describes the above (optional) parameters in detail:\n\n| **Parameter** | **Type** | **Description** |\n| --- | --- | --- |\n| `category` | String | Category of the page. |\n| `name` | String | Name of the page. |\n| `properties` | Dictionary | Properties of the page auto-captured by the SDK. |\n| `apiOptions` | Dictionary | Provides information such as `integrations`, `anonymousId`, and `originalTimestamp`. [Reference](#apioptions). |\n| `callback` | Function | Called after the successful execution of `page` method. |\n\nA sample `page` call is shown below:\n\n```\nrudderanalytics.page(\n  \"Cart\",\n  \"Cart Viewed\", {\n    path: \"/best-seller/1\",\n    referrer: \"https://www.google.com/search?q=estore+bestseller\",\n    search: \"estore bestseller\",\n    title: \"The best sellers offered by EStore\",\n    url: \"https://www.estore.com/best-seller/1\"\n  },\n  () => {\n    console.log(\"page call\");\n  }\n);\n```\n\nIn the above example, the JavaScript SDK captures the page `category`, `name` and the [contextual information](https://www.rudderstack.com/docs/event-spec/standard-events/common-fields/#contextual-fields).\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you capture user events along with the associated properties.\n\nThe JavaScript SDK defines the `track` method as shown:\n\n```\nrudderanalytics.track(event, [properties], [apiOptions], [callback]);\n```\n\nThe following table describes the above parameters in detail:\n\n| **Parameter** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `event` | String | Required | The name of the tracked event. |\n| `properties` | Dictionary | Optional | The event-related properties. |\n| `apiOptions` | Dictionary | Optional | Provides information such as `integrations`, `anonymousId`, and `originalTimestamp`. [Reference](#apioptions). |\n| `callback` | Function | Optional | Called after the successful execution of the `track` call. |\n\nA sample `track` call is shown below:\n\n```\nrudderanalytics.track(\n  \"Order Completed\", {\n    revenue: 30,\n    currency: \"USD\",\n    user_actual_id: 12345\n  },\n  () => {\n    console.log(\"track call\");\n  }\n);\n```\n\nIn the above example, the `track` method tracks the `Order Completed` event along with other information like `revenue`, `currency`, and the `user_actual_id`.\n\nRefer to the [Ecommerce Events Specification](https://www.rudderstack.com/docs/event-spec/ecommerce-events-spec/) for more information on the ecommerce events captured by RudderStack.\n\n## Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user.\n\nThe JavaScript SDK defines the `alias` method as shown:\n\n```\nrudderanalytics.alias(to, from, [apiOptions], [callback]);\n```\n\nThe following table describes the above parameters in detail:\n\n| **Parameter** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `to` | String | Required | New user identifier. |\n| `from` | String | Optional | Old user identifier which will be an alias for the `to` parameter. If not provided, the SDK populates this as the currently identified `userId`, or `anonymousId` in case of anonymous users. |\n| `apiOptions` | Dictionary | Optional | Provides information such as `integrations`, `anonymousId`, and `originalTimestamp`. [Reference](#apioptions). |\n| `callback` | Function | Optional | Called after the successful execution of the `alias` call. |\n\nA sample `alias` call is shown below:\n\n```\nrudderanalytics.alias(\"new_id\", \"old_id\", () => {\n  console.log(\"alias call\");\n});\n```\n\n## Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you associate an identified user with a group such as a company, organization, or an account.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack does not support associating a user to more than one group per `group` call.\n\nThe JavaScript SDK defines the `group` method as shown:\n\n```\nrudderanalytics.group(groupId, [traits], [apiOptions], [callback]);\n```\n\nThe following table describes the above parameters in detail:\n\n| **Parameter** | **Type** | **Presence** | **Description** |\n| --- | --- | --- | --- |\n| `groupId` | String | Required | The unique group identifier in the database. RudderStack calls the relevant destination APIs to associate the identified user to this group. |\n| `traits` | Dictionary | Optional | The group-related traits. RudderStack passes these traits to the destination to enhance the group properties. |\n| `apiOptions` | Dictionary | Optional | Provides information such as `integrations`, `anonymousId`, and `originalTimestamp`. [Reference](#apioptions). |\n| `callback` | Function | Optional | Called after the successful execution of the `group` call. |\n\nA sample `group` call is shown:\n\n```\nrudderanalytics.group(\"sample_group_id\", {\n  name: \"Apple Inc.\",\n  location: \"USA\",\n});\n```\n\n## Reset\n\nThe `reset` method resets the ID and traits of both the user and the group.\n\nIn [session tracking](https://rudderstack.com/docs/sources/event-streams/sdks/session-tracking/#:~:text=tracking%20is%20enabled%3A-,sessionId,-%28Number%29%3A%20The%20session), calling the `reset` method clears the current `sessionId` and generates a new one.\n\nThe JavaScript SDK defines the `reset` method as shown:\n\nYou can also reset the `anonymousId` along with the above-mentioned details by passing `true` to the `reset()` method:\n\n```\nrudderanalytics.reset(true);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The `reset()` method only clears the [cookies and local storage](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/data-storage-cookies/) set by RudderStack. It does not clear the information stored by the integrated destinations.\n\n## `ready` API\n\nThe JavaScript SDK exposes a `ready` API with a callback parameter that fires when the SDK has initialized itself and the other third-party destination SDKs.\n\n```\nrudderanalytics.ready(() => {\n  console.log('We are all set!!!');\n});\n```\n\nYou can use this API in cases where you want to tap into the features provided by the end-destination SDKs to enhance user tracking and other functionalities.\n\n## Querystring API\n\nRudderStack’s Querystring API lets you trigger the `track` and `identify` calls using the query parameters within the URL. The query parameters are listed in the following table:\n\n| Parameter | Action |\n| --- | --- |\n| `ajs_uid` | Triggers a `rudderanalytics.identify()` call with `userId` having the parameter value. |\n| `ajs_aid` | Triggers a `rudderanalytics.setAnonymousId()` call with `anonymousId` having the parameter value. |\n| `ajs_event` | Triggers a `rudderanalytics.track()` call with `event` name as the parameter value. |\n| `ajs_prop_<property>` | If `ajs_event` is passed as a query string, the value of this parameter populates the `properties` of the corresponding event in the `track` call. |\n| `ajs_trait_<trait>` | If `ajs_uid` is provided as a query string, the value of this parameter populates the `traits` of the `identify` call. |\n\nFor example, consider the following URL containing the query string parameters:\n\n`http://hostname.com/?ajs_uid=12345&ajs_event=test%20event&ajs_aid=abcde&ajs_prop_testProp=prop1&ajs_trait_name=Firstname+Lastname`\n\nIt will trigger the following API calls:\n\n```\n// Sets the user ID/anonymous ID\nrudderanalytics.setAnonymousId(\"abcde\");\n\n// Identify call\nrudderanalytics.identify(\"12345\", {\n  name: \"Firstname Lastname\"\n});\n\n// Track call\nrudderanalytics.track(\"test event\", {\n  testProp: \"prop1\"\n});\n```\n\n## Context and traits\n\nThe JavaScript SDK automatically captures certain event-specific and user-specific data based on the event type.\n\nThe `context` and `traits` dictionaries are provided in the [apiOptions](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#apioptions) parameter of the supported API methods.\n\n### Context\n\nThe `context` object is a dictionary of additional information about a particular event data, such as a user’s locale.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> A context is a complete and specific piece of information. Any other information provided outside this specification is ignored.\n\n### Traits\n\nThe `traits` object is an optional dictionary included within [`context`](#context) specifying the user’s unique traits. This is a very useful field for linking the user’s information from a previously made [`identify`](#identify) call to the subsequent calls, for example, [`track`](#track) or [`page`](#page).\n\n#### Use-case\n\nTo understand the concept of context and traits better, refer to the following `identify` event:\n\n```\nrudderanalytics.identify(\"1hKOmRA4el9Zt1WSfVJIVo4GRlm\", {\n  name: \"Alex Keener\",\n  email: \"alex@example.com\",\n  subscriptionStatus: \"subscribed\",\n  plan: \"Silver\"\n});\n```\n\nThe traits in the above event are `name`, `email`, `subscriptionStatus`, and `plan`. If you wish to add or override any traits in the subsequent `track` or `page` event triggered by the user, you can do so by passing it in `traits` as shown:\n\n```\nrudderanalytics.track(\n  \"Subscription Update\", {\n    campaign: \"Subscribe\"\n  }, {\n    traits: {\n      plan: \"Gold\",\n      addOn: true\n    }\n  }\n);\n```\n\nThe above snippet will add a new trait `addOn` and update the user trait `plan` to `Gold`.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "JavaScript SDK APIs | RudderStack Docs",
  "description": "Send events by leveraging different JavaScript SDK APIs.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/olark/",
  "markdown": "# Olark source | RudderStack Docs\n\nIngest your event data from Olark into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[Olark](https://www.olark.com/) is a cloud-based live chat platform that lets you connect your business with customers in an effective and timely manner. It provides various features like automated messages, team management, real-time reporting, searchable transcripts, and more.\n\n## Getting started\n\nFollow these steps to set up your Olark source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Olark**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Olark source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![Olark source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/olark-webhook-src.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/olark-webhook-src.webp)\n\n4.  Log in to your [Olark account](https://www.olark.com/login).\n5.  Enter the webhook URL (obtained in step 3) in Olark by following the steps mentioned in the [Olark Webhook integrations](https://www.olark.com/help/webhooks/) guide.\n6.  Finally, click **Save**.\n\n## Event transformation\n\nRudderStack ingests the Olark events after converting them into the RudderStack event format. It also maps the following properties from the Olark event payload to the RudderStack properties:\n\n| Olark property | RudderStack property |\n| --- | --- |\n| `visitor.id` | `userId` |\n| `visitor.fullName` | `name` |\n| `visitor.phoneNumber` | `phone` |\n| `visitor.emailAddress` | `email` |\n| `visitor.city` | `city` |\n| `visitor.region` | `region` |\n| `visitor.country` | `country` |\n| `visitor.operatingSystem` | `context.browser.name`  <br>`context.browser.version` |\n| `visitor.referrer` | `context.page.referrer` |\n| `visitor.conversationBeginPage` | `traits.countryCode` |\n| `visitor.ip` | `context.ip` |\n| `visitor.organization` | `traits.organization` |\n| `items` | `properties.items` |\n| `tags` | `properties.tags` |\n| `visitor.chat_feedback` | `traits.chat_feedback` |\n| `operators` | `properties.operators` |\n| `groups.id` | `groupId` |\n| `groups.kind` | `properties.kind` |\n| `groups.name` | `traits.name` |\n| `kind` | `event` |\n| `visitor.kind` | `traits.kind` |\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from Olark source and creates the resulting payload.\n\nA sample payload sent by Olark is shown below:\n\n```\n{\n  \"kind\": \"Conversation\",\n  \"id\": \"NOTAREALTRANSCRIPT5LGcbVTa3hKBRB\",\n  \"manuallySubmitted\": false,\n  \"items\": [{\n      \"kind\": \"MessageToVisitor\",\n      \"nickname\": \"Olark operator\",\n      \"operatorId\": \"6208911878914048\",\n      \"timestamp\": \"1473774819.263083\",\n      \"body\": \"Hi from an operator\"\n    },\n    {\n      \"kind\": \"MessageToOperator\",\n      \"nickname\": \"Returning Visitor | USA (San Francisco, CA) #7617\",\n      \"timestamp\": \"1473774821.411154\",\n      \"body\": \"Hi from a visitor\",\n      \"visitor_nickname\": \"Olark Visitor\"\n    }\n  ],\n  \"tags\": [\n    \"test_example\"\n  ],\n  \"visitor\": {\n    \"kind\": \"Visitor\",\n    \"id\": \"NOTAREALVISITORIDS5LGl6QUrK2OaPP\",\n    \"fullName\": \"Olark\",\n    \"phoneNumber\": \"5555555555\",\n    \"emailAddress\": \"support+integrationtest@olark.com\",\n    \"ip\": \"\",\n    \"city\": \"San Francisco\",\n    \"region\": \"CA\",\n    \"country\": \"United States\",\n    \"countryCode\": \"US\",\n    \"organization\": \"Visitor Organization\",\n    \"browser\": \"Internet Explorer 11\",\n    \"operatingSystem\": \"Windows\",\n    \"referrer\": \"http://www.olark.com\",\n    \"conversationBeginPage\": \"http://www.olark.com\",\n    \"chat_feedback\": {\n      \"overall_chat\": 4,\n      \"responsiveness\": 5,\n      \"knowledge\": 4,\n      \"friendliness\": 5\n    }\n  },\n  \"operators\": {\n    \"6208911878914048\": {\n      \"kind\": \"Operator\",\n      \"id\": \"6208911878914048\",\n      \"nickname\": \"integration\",\n      \"emailAddress\": \"integration-accounts@rudderstack.com\",\n      \"username\": \"integration-accounts-92750bc547\"\n    }\n  }\n}\n```\n\nRudderStack transforms the above payload into the following payload:\n\n```\n{\n  \"type\": \"track\",\n  \"event\": \"Conversation\",\n  \"traits\": {\n    \"organization\": \"Visitor Organization\",\n    \"chat_feedback\": {\n      \"knowledge\": 4,\n      \"friendliness\": 5,\n      \"overall_chat\": 4,\n      \"responsiveness\": 5\n    }\n  },\n  \"userId\": \"NOTAREALVISITORIDS5LGl6QUrK2OaPP\",\n  \"context\": {\n    \"os\": {\n      \"name\": \"Windows\"\n    },\n    \"page\": {\n      \"url\": \"http://www.olark.com\",\n      \"referrer\": \"http://www.olark.com\"\n    },\n    \"traits\": {\n      \"city\": \"San Francisco\",\n      \"name\": \"Olark\",\n      \"email\": \"support+integrationtest@olark.com\",\n      \"phone\": \"5555555555\",\n      \"region\": \"CA\",\n      \"country\": \"United States\"\n    },\n    \"browser\": {\n      \"name\": \"Internet Explorer\",\n      \"version\": \"11\"\n    },\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"integration\": {\n      \"name\": \"Olark\"\n    }\n  },\n  \"rudderId\": \"62b1b505-2826-4e08-a266-dd64ba9f36b7\",\n  \"messageId\": \"a98d637b-7e9b-44c3-a0fe-90a50823c7ba\",\n  \"properties\": {\n    \"tags\": [\n      \"test_example\"\n    ],\n    \"items\": [{\n        \"body\": \"Hi from an operator\",\n        \"kind\": \"MessageToVisitor\",\n        \"nickname\": \"Olark operator\",\n        \"timestamp\": \"1473774819.263083\",\n        \"operatorId\": \"6208911878914048\"\n      },\n      {\n        \"body\": \"Hi from a visitor\",\n        \"kind\": \"MessageToOperator\",\n        \"nickname\": \"Returning Visitor | USA (San Francisco, CA) #7617\",\n        \"timestamp\": \"1473774821.411154\",\n        \"visitor_nickname\": \"Olark Visitor\"\n      }\n    ]\n  },\n  \"integrations\": {\n    \"Olark\": false\n  }\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Olark source | RudderStack Docs",
  "description": "Ingest your event data from Olark into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/monday/",
  "markdown": "# Monday source | RudderStack Docs\n\nIngest your event data from monday.com into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[monday.com](https://monday.com/) is a popular workflow management tool. It lets you create efficient cross-team workflows and automations for better collaboration and maximum productivity.\n\nThis guide will help you set up monday.com as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your monday.com source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Monday**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your monday.com source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![monday.com source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/monday-webhook-url.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/monday-webhook-url.webp)\n\n4.  Next, create a new webhook in your [monday.com dashboard](https://auth.monday.com/auth/login_monday) by clicking the **Integrate** button and searching for the **Webhooks** app in the the **Integrations Center**.\n5.  Choose the relevant monday.com actions to get the instant event payloads.\n6.  Finally, specify the webhook URL obtained in Step 3. All the event payloads will be sent to this URL.\n\nFor more information on creating a new webhook in monday.com, refer to the [monday.com Webhook Integration](https://support.monday.com/hc/en-us/articles/360003540679-Webhook-Integration-#) guide.\n\n## Event transformation\n\nRudderStack ingests the monday.com events after converting them into the RudderStack event format. It also maps the following properties from the monday.com event payload to the RudderStack properties:\n\n| monday.com property | RudderStack property |\n| --- | --- |\n| `userId` | `userId` |\n| `triggerTime` | `originalTimestamp` |\n| `boardId` | `properties.boardId` |\n| `pulseId` | `properties.pulseId` |\n| `pulseName` | `properties.pulseName` |\n| `groupId` | `properties.groupId` |\n| `groupName` | `properties.groupName` |\n| `groupColor` | `properties.groupColor` |\n| `isTopGroup` | `properties.isTopGroup` |\n| `columnValues` | `properties.columnValues` |\n| `app` | `properties.app` |\n| `type` | `properties.type` |\n| `subscriptionId` | `properties.subscriptionId` |\n| `triggerUuid` | `properties.triggerUuid` |\n| `parentItemId` | `properties.parentItemId` |\n| `parentItemBoardId` | `properties.parentItemBoardId` |\n| `itemId` | `properties.itemId` |\n| `previousValue` | `properties.previousValue` |\n| `value` | `properties.value` |\n\nRudderStack supports ingesting the events related to the following monday.com standard actions:\n\n*   A new update is posted.\n*   A status is changed.\n*   A column is changed.\n*   A specific column is changed.\n*   An item is created.\n*   An item is deleted.\n*   An item name is changed.\n*   An item is archived.\n*   A subitem is created.\n*   A subitem is deleted.\n*   A new update is posted on a subitem.\n*   A subitem column is changed.\n*   A subitem name is changed.\n*   A subitem is archived.\n\n## How RudderStack creates the event payload\n\nRudderStack transforms the incoming event payload from monday.com into [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call to create the resulting payload.\n\nA sample payload sent by monday.com when an item is deleted, is shown below:\n\n```\n{\n  event: {\n    userId: 33556506,\n    originalTriggerUuid: null,\n    boardId: 3139815405,\n    itemId: 3160188786,\n    itemName: \"New Sprint Item\",\n    app: \"monday\",\n    type: \"delete_pulse\",\n    triggerTime: \"2022-08-30T09:06:09.176Z\",\n    subscriptionId: 150882006,\n    triggerUuid: \"4e4f87c8255c4ba4ba2f5e9934cb6d40\",\n  },\n}\n```\n\nRudderStack transforms the above payload into the following `track` payload:\n\n```\n{\n  \"type\": \"track\",\n  \"event\": \"Delete Pulse\",\n  \"context\": {\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"externalId\": [{\n      \"id\": 33556506,\n      \"type\": \"mondayUserId\"\n    }],\n    \"integration\": {\n      \"name\": \"MONDAY\"\n    }\n  },\n  \"rudderId\": \"a2073e09-4646-437c-b197-7d2517d202ce\",\n  \"messageId\": \"4e4f0cfa-c7e2-444f-af70-b90292c3775a\",\n  \"timestamp\": \"2022-08-30T09:06:09.176Z\",\n  \"properties\": {\n    \"app\": \"monday\",\n    \"type\": \"delete_pulse\",\n    \"itemId\": 3160188786,\n    \"boardId\": 3139815405,\n    \"itemName\": \"New Sprint Item\",\n    \"triggerUuid\": \"4e4f87c8255c4ba4ba2f5e9934cb6d40\",\n    \"subscriptionId\": 150882006,\n    \"originalTriggerUuid\": null\n  },\n  \"anonymousId\": \"6f0a3dc76a335860e17fa1d8ab779742e2ca\",\n  \"integrations\": {\n    \"MONDAY\": false\n  },\n  \"originalTimestamp\": \"2022-08-30T09:06:09.176Z\"\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Monday source | RudderStack Docs",
  "description": "Ingest your event data from monday.com into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/data-storage-cookies/",
  "markdown": "# Data Persistence in JavaScript SDK\n\nUnderstand how our JavaScript SDK persists user data stored in cookies or local storage.\n\n* * *\n\n*     4 minute read  \n    \n\nThe JavaScript SDK stores persistent user data in the cookies by default. If the cookies are not supported, the SDK uses local storage instead.\n\nBy default, the SDK stores all cookies in the top-level domain. It helps you to identify the users visiting websites hosted under a particular sub-domain. For example, if you include the JavaScript SDK in both `admin.samplewebsite.com` and `app.samplewebsite.com`, the SDK will store the cookie in `samplewebsite.com`. However, you can specify the cookie storage location by using the `setCookieDomain` parameter in the [`load`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/) API options as shown:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  setCookieDomain: \"samplewebsite.com\",\n});\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n\n## Cookies\n\nThe cookie values are encrypted and their length is directly proportional to the values provided to the SDK. Also, all cookie names are prefixed with `rl_` and the values are prefixed with `RudderEncrypt:`. For example, `rl_user_id —> RudderEncrypt:U2FsdGVkX1+UKmiooYoGmKdNws7sgmWgGfHe`.\n\nThe following table lists the cookies used by the JavaScript SDK to store persistent user data:\n\n| Name | Description | Clearing mechanism  <br>using the SDK |\n| --- | --- | --- |\n| `rl_user_id` | Stores the user ID set via the `identify` API. All the subsequent event payloads will contain this data unless cleared from the storage.<br><br>For example: `4578`, `USER_001` | `rudderanalytics.reset()` |\n| `rl_trait` | Stores the user traits object set via the `identify` API. All the subsequent event payloads will contain this data unless cleared from the storage.<br><br>For example:<br><br>{  <br>  email: “[alex@example.com](mailto:alex@example.com)”,  <br>  accountType: “pro”,  <br>  country: “US”,  <br>  someObj: {  <br>    key1: val1,  <br>    key2: val2,  <br>  }  <br>} | `rudderanalytics.reset()` |\n| `rl_anonymous_id` | Stores the anonymous ID. By default, it would be the auto-generated unique ID by SDK for each visitor unless overridden via `setAnonymousId` API. All the subsequent event payloads will contain this data unless cleared from the storage.<br><br>For example: `5bfe258f-bd2f-49cf-bddd-8b844f74ab4b`, `customAnonId` | `rudderanalytics.reset(true)` |\n| `rl_group_id` | Stores the user group ID set via the `group` API. All the subsequent group event payloads will contain this data unless cleared from the storage.<br><br>For example: `GRP_3`, `98` | `rudderanalytics.reset()` |\n| `rl_group_trait` | Stores the user group traits object set via the `group` API. All the subsequent group event payloads will contain this data unless cleared from the storage.<br><br>For example:<br><br>{  <br>  location: “New Orleans”,  <br>  nationality: “US”,  <br>  someObj: {  <br>    key1: val1,  <br>    key2: val2,  <br>  }  <br>} | `rudderanalytics.reset()` |\n| `rl_page_init_referrer` | Stores the initial referrer of the page when a user visits a site for the first time. All the subsequent event payloads will contain this data.<br><br>For example: `https://www.google.com/` | Cannot be cleared using SDK. |\n| `rl_page_init_referring_domain` | Stores the initial referring domain of the page when a user visits a site for the first time. All the subsequent event payloads will contain this data.<br><br>For example: `google.com` | Cannot be cleared using SDK. |\n| `test_rudder_cookie` | Checks whether the cookie storage of a browser is accessible or not. Once checked, the SDK removes the cookie immediately.<br><br>For example: `test_rudder_cookie:true` | Cleared automatically. |\n| `rl_session` | Stores the session-related information including `sessionId` if session tracking is enabled.<br><br>For example: `1678961874` | Manual session tracking: `rudderanalytics.endSession()`<br><br>Automatic session tracking: Automatically cleared by the SDK (if `autoTrack`: `false`). |\n| `rl_auth_token` | Stores the authentication token passed by the user.<br><br>For example: `MOx2ZmMwLNE2A2IdNKL0N2VhN2I3Z` | `rudderanalytics.reset()` |\n\n## Local storage\n\nRudderStack stores the local storage cookie names with `rudder.<uuid>.` prefix where `uuid` is in the standard UUID v4 format. For example, `rudder.2dc2aee6-2836-4273-be69-79c90c04ddec.reclaimEnd`.\n\nThe JavaScript SDK uses local storage to keep track of the events sent to the RudderStack backend, as listed in the below table:\n\n| Name | Description |\n| --- | --- |\n| `ack` | Timer for other browser tabs to claim control of the retry queue.  <br>For example, `1639734070124` |\n| `reclaimStart` and `reclaimEnd` | Determines if a tab takes over the queue from another tab.  <br>For example, `2dc2aee6-2836-4273-be69-79c90c04ddec` |\n| `inProgress` | Keeps track of the events in progress. For example:  <br><br>{  <br>  “d89d7fb5-945e-4378-bda5-492e4b596fb4”: {  <br>   “item”: {  <br>    “url”: “[https://rudderstack-dataplane.rudderstack.com/v1/track\"](https://rudderstack-dataplane.rudderstack.com/v1/track%22),  <br>    “headers”: {  <br>     “Content-Type”: “application/json”,  <br>      …  <br>    },  <br>    “message”: {   <br>     …  <br>    }  <br>    “attemptNumber”: 1,  <br>    “time”: 1639734792773,  <br>    “id”: “a4d89d7f-b594-4eb3-b8bd-a5492e4b596f”  <br>   }  <br>  }  <br>} |\n| `queue` | Keeps track of the events that are in the processing queue. For example:  <br><br>\\[  <br>  {  <br>   “item”: {  <br>    “url”: “https://rudderstack-dataplane.rudderstack.com/v1/track”,  <br>    “headers”: {  <br>     “Content-Type”: “application/json”,  <br>      …  <br>    },  <br>    “message”: {   <br>     …  <br>    }  <br>    “attemptNumber”: 0,  <br>    “time”: 1639734792773,  <br>    “id”: “a4d89d7f-b594-4eb3-b8bd-a5492e4b596f”  <br>   }  <br>  }  <br>\\] |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Data Persistence in JavaScript SDK | RudderStack Docs",
  "description": "Understand how our JavaScript SDK persists user data stored in cookies or local storage.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/",
  "markdown": "# Load JavaScript SDK | RudderStack Docs\n\nUnderstand the different SDK load options.\n\n* * *\n\n*     20 minute read  \n    \n\nYou can load the JavaScript SDK using the `load` API method to track and send events from your website to RudderStack.\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, [loadOptions]);\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n\n## Loading options\n\nYou can use the `loadOptions` object in the above `load` call to define various options while loading the SDK. It includes the following **optional** parameters:\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `logLevel` | String | Values include `LOG`, `INFO`, `DEBUG`, `WARN`, `ERROR`, and `NONE`.<br><br>**Default value**: `ERROR` |\n| `integrations` | [IntegrationOpts](#integrationopts) | Sends event data to the [selective destinations](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/filtering/). |\n| `configUrl` | String | The [control plane](https://www.rudderstack.com/docs/resources/rudderstack-architecture/#control-plane) endpoint serving your destination configurations.<br><br>**Default value**: `https://api.rudderstack.com`.  <br>Note that the SDK automatically appends `/sourceConfig` at the end if it is missing, for example, `<configURL>/sourceConfig`. |\n| [`getSourceConfig`](#getsourceconfig) | Function | Returns custom configuration data to use instead of making a request to the control plane. |\n| `queueOpts` | [QueueOpts](#queueopts) | Contains the options to control the behavior of the persistence queue that buffers the events before sending them to the data plane. |\n| `loadIntegration` | Boolean | Determines whether to load the native destination SDKs. Supported for [Amplitude](https://www.rudderstack.com/docs/destinations/streaming-destinations/amplitude/) and [Google Analytics](https://www.rudderstack.com/docs/destinations/streaming-destinations/google-analytics-ga/) destinations only. If set to `false`, the SDK assumes that the destination SDK is already loaded on your site and proceeds to initialize and forward data to it.<br><br>**Default value**: `true` |\n| `sessions` | [SessionOpts](#sessionopts) | Captures the details specific to session tracking. |\n| `destSDKBaseURL` | String | URL used by the SDK to load its integration SDKs.<br><br>**Default value**: The CDN path or automatically determined based on core SDK URL. |\n| `useBeacon` | Boolean | Determines whether the SDK [sends event payloads via the Beacon transport mechanism](#send-events-using-beacon).<br><br>**Default value**: `false`. |\n| `beaconQueueOptions` | [BeaconQueueOpts](#send-events-using-beacon) | Controls the behavior of the queue that buffers events before sending them through the Beacon utility in batches. The SDK lets you configure these batching options. |\n| `consentManagement` | Object | See [Consent manager integration](#consent-management) for more information. |\n| `anonymousIdOptions` | Object | [Automatically captures the anonymous ID](#anonymousidoptions) from a source and sets it as RudderStack’s `anonymousId`. |\n| `lockIntegrationsVersion` | Boolean | Determines if the SDK should use the same version of the integration SDKs from CDN as the core SDK. This is particularly useful for [NPM installations](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/quickstart/#using-npm) where a specific version of the core SDK is used.<br><br>**Default value**: `false`, meaning the SDK uses the latest versions of the integration SDKs from the CDN. You can override this parameter by using the `destSDKBaseURL` option. |\n| `lockPluginsVersion` | Boolean | Determines if the SDK should use the same version of the plugins from CDN as the core SDK. This is particularly useful for [NPM installations](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/quickstart/#using-npm) where users want to be shielded from any unexpected breaking changes introduced by any latest CDN releases.<br><br>**Default value**: `false`, meaning the SDK uses the latest version of the plugins from the CDN. You can override this parameter by using the `pluginsSDKBaseURL` option. |\n| `polyfillIfRequired` | Boolean | Loads the polyfills for unsupported features in older browsers.<br><br>**Default value**: `true`. |\n| [`onLoaded`](#onloaded) | Function | Callback function that executes after the SDK loads and before the device mode destination SDKs are loaded. |\n| [`uaChTrackLevel`](#uachtracklevel) | String | Configures the level of information captured in the `context` object. The SDK fetches this information using the [user-agent client hints API](https://developer.mozilla.org/en-US/docs/Web/API/User-Agent_Client_Hints_API). |\n| `sendAdblockPage` | Boolean | Enables the SDK to detect if the current page is ad-blocked and send an automatic page event. See [Detect Ad-blocked Pages](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/detecting-adblocked-pages/) for more information.<br><br>**Default value**: `false`. |\n| `sendAdblockPageOptions` | Object | If `sendAdblockPage` is set to true, the SDK makes an implicit `page` call about the ad-blocked pages. You can then use this option to specify destinations to which you want to forward this `page` call. See [Detect Ad-blocked Pages](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/detecting-adblocked-pages/) for more information. |\n| [`useGlobalIntegrationsConfigInEvents`](#useglobalintegrationsconfiginevents) | Boolean | Lets you automatically use the [`integrations`](#integrationopts) object specified in the `load` API at the individual event level.<br><br>**Default value**: `false` |\n| `sameDomainCookiesOnly` | Boolean | Determines whether the SDK should read cookies from the exact domain it is set at.<br><br>**Default value**: `false`<br><br>If this load option is set to `true`, then the cookies set from the site’s top-level domain are not accessible by the sub-domains and vice versa. |\n| `pluginsSDKBaseURL` | String | Base URL path used by SDK to load the plugins.<br><br>**Default value**: Standard CDN path or automatically determined from the core SDK location. |\n| `destinationsQueueOptions` | Object | See [`destinationsQueueOptions`](#destinationsqueueoptions) for more information. |\n| `plugins` | String array | List of plugins you want the SDK to load.<br><br>See [Plugins](#plugins) for more information.<br><br>**Default value**: Array of all the plugins names. |\n| `polyfillURL` | String | URL to load polyfills from, not necessarily from the default polyfills service.<br><br>**Default value**: `https://polyfill-fastly.io/v3/polyfill.min.js` with dynamic calculation of missing features from the browser.<br><br>**Example**: Suppose your browser is missing the following features required by the SDK:<br><br>*   `Array.includes`<br>*   `String.startsWith`<br>*   `Promise`<br><br>Then the polyfill URL will look like this (not exactly):  <br>`https://polyfill-fastly.io/v3/polyfill.min.js?features=Array.prototype.includes%2CString.prototype.startsWith%2CPromise.` |\n| `storage` | Object | Configures different storage-related features like, encryption, migration, etc.<br><br>See [Storage](#storage) for more information. |\n| `consentManagement` | Object | Lets you specify the consent management preferences. |\n| `externalAnonymousIdCookieName` | String | Name of the cookie for the SDK to fetch the anonymous ID and use it as RudderStack’s `anonymousId`.<br><br>See [`externalAnonymousIdCookieName`](#destinationsqueueoptions) for more information. |\n\nThe following snippet highlights some basic and commonly configured `load` options. Note that it **does not** include all the `load` options.\n\n```\n{\n  logLevel: 'DEBUG',\n  integrations: {\n    All: true,\n    \"Google Analytics 4\": false\n  },\n  queueOptions: {\n    maxItems: 200,\n    maxAttempts: 15\n  },\n  useBeacon: true,\n  beaconQueueOptions: {\n    maxItems: 50,\n    flushInterval: 60000 // 1 minute\n  },\n  consentManagement: {\n    enabled: true,\n    provider: 'oneTrust'\n  },\n  onLoaded: () => {\n    console.log('RudderStack JavaScript SDK loaded successfully')\n  },\n  uaChTrackLevel: \"full\",\n  sendAdblockPage: true\n}\n```\n\nThe following sections contain the detailed definitions and usage of some of the above parameters:\n\n#### **Integration options**\n\nYou can use this parameter to [filter your event data](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/filtering/) to selective destinations in the following scenarios:\n\n*   Filter destinations while loading the JavaScript SDK.\n*   Sending events to specific destinations at the event level.\n\nThe structure of the `integrations` object is shown:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  integrations: {\n    All: boolean, // default true\n    <Destination1>: boolean, // specify destination like Google Analytics, Amplitude etc.\n    <Destination2>: boolean, // specify destination like Google Analytics, Amplitude etc.\n    ...\n  }\n});\n```\n\nThe following table describes the above (optional) parameters in detail:\n\n| **Parameter** | **Type** | **Description** |\n| --- | --- | --- |\n| `All` | Boolean | All destinations to which the event data must be sent. The default value is `true`. If set to `false`, RudderStack will not send the event data to any destination. |\n| `<Destination>` | Boolean | Specific destination to which the event data must be sent/not, depending on its Boolean value. |\n\nYou **must** specify the actual destination name (as listed in the [RudderStack dashboard](https://app.rudderstack.com/directory)) in the `<Destination>` parameter and **not** the name you have assigned to the destination. For example, the below sample snippet sends the event data only to **Google Analytics** and **Intercom** destinations:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n    integrations: {\n        All: false,\n        \"Google Analytics\": true,\n        \"Intercom\": true\n    }\n});\n```\n\n#### **Get source configuration**\n\nThe `getSourceConfig` function returns a custom configuration that can be used in place of your [open source control plane’s](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/) dashboard configuration:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  getSourceConfig: function() {\n    return {\n      // custom configuration\n    };\n  },\n  // other load options\n});\n```\n\n#### **Queue options**\n\nThe `queueOpts` object contains the options to control the behavior of the persistence queue that buffers the events before sending them to RudderStack. Its structure is defined as follows:\n\n```\n{\n  maxRetryDelay: 360000,\n  minRetryDelay: 1000,\n  backoffFactor: 2,\n  backoffJitter: 0,\n  maxAttempts: 10,\n  maxItems: 100,\n  batch: {\n    enabled: true,\n    maxItems: 100,\n    maxSize: 512 * 1024, // 512 KB\n    flushInterval: 60000 // In ms\n  },\n}\n```\n\nThe following table describes the above `integer` type (optional) parameters in detail:\n\n| Parameter | Description | Default value |\n| --- | --- | --- |\n| `maxRetryDelay` | Upper limit on the maximum delay (in ms) between each retries of an event. | 360000 |\n| `minRetryDelay` | Minimum wait time (in ms) between each retries of an event. | 1000 |\n| `backoffFactor` | Exponential base. | 2   |\n| `backoffJitter` | Jitter to be applied to the delay. | 0   |\n| `maxAttempts` | Maximum number of attempts to send the event to the RudderStack backend (data plane). | 10  |\n| `maxItems` | Maximum number of events buffered in the persistent storage for processing. | 100 |\n| `batch` | Options for batched requests. | [`BatchOpts`](#batchopts) |\n\n##### **Batch request options**\n\n| Parameter | Description | Default value |\n| --- | --- | --- |\n| `enabled` | Determines whether to enable batching. | `false` |\n| `maxItems` | Maximum number of events in a batch. | 100 |\n| `maxSize` | Maximum batch payload size (in bytes). | 512 KB (Also the maximum configurable value) |\n| `flushInterval` | Minimum interval (in ms) between two batch requests. | 60000 |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   `queueOptions.batch` is an optional object, meaning batching is disabled by default.\n> *   The SDK makes a batch request when either of the following criteria is met:\n>     *   `maxItems` in a batch is reached.\n>     *   `maxSize` of the batch is reached.\n>     *   Time period of `flushInterval` ms has elapsed since the last batch request.\n\n#### **Session options**\n\nThe `SessionOpts` object contains the options related to the SDK’s automatic session tracking behavior. Refer to the [Session Tracking](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/#automatic-session-tracking) guide for more information. Its structure is defined as follows:\n\n| **Parameter** | **Description** | **Default value** |\n| --- | --- | --- |\n| `autoTrack` | Determines if the SDK should automatically track the user sessions. | `true` |\n| `timeout` | The maximum inactivity period (in ms) before the session expires. | 1800000 (30 minutes) |\n\n#### **Consent management options**\n\nOnce a user provides the consent, you can load the JavaScript SDK and enable the [OneTrust integration](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/javascript/) via the `consentManagement` object:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  consentManagement: {\n    enabled: true,\n    provider: \"oneTrust\"\n  },\n  // other options\n});\n```\n\n#### **Anonymous ID options**\n\nYou can use the `anonymousIdOptions` object to automatically capture the anonymous ID from a source and set it as RudderStack’s `anonymousId`.\n\nFor example, if you are migrating from a particular source and want to retain its anonymous ID, you can enable the `anonymousIdOptions` to set the source’s anonymous ID as the `anonymousId` in RudderStack.\n\nThe structure of `anonymousIdOptions` is defined as follows:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  anonymousIdOptions: {\n    autoCapture: {\n      enabled: true,\n      source: \"segment\"\n    }\n  }\n});\n```\n\nThe following table describes the above (required) parameters in detail:\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `enabled` | Boolean | Determines if the anonymous ID should be auto-captured. |\n| `source` | String | Determines the external source of anonymous ID. The only allowed value is `segment`. |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If the RudderStack `anonymousId` is already set in your browser, `anonymousIdOptions` will not take effect.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can call the **reset** API to clear the persisted anonymous ID and force the SDK to generate a new ID when the next tracking API is called (irrespective of whether `anonymousIdOptions` is enabled or disabled). However, if the `anonymousIdOptions` object is enabled and the SDK is loaded again (as a result of webpage reload, navigate to a different webpage, etc.), the `setAnonymousId` call will trigger automatically and the specified source’s anonymous ID will again be set as the RudderStack `anonymousId`.\n\n#### **Configure information present in context**\n\nYou can use the `uaChTrackLevel` option to configure the information a user should get in the `context` object regarding the [client hints](https://developer.mozilla.org/en-US/docs/Web/HTTP/Client_hints). The JavaScript SDK fetches this information using the [user-agent client hints API](https://developer.mozilla.org/en-US/docs/Web/API/User-Agent_Client_Hints_API). It can take the below values:\n\n*   `none`: Specifies that `uaChTrackLevel` field is absent in the `context` object.\n*   `default`: Specifies that `uaChTrackLevel` field is present in the `context` object and contains an object similar to the one below:\n\n```\n{\n  \"brands\": [{\n    \"brand\": \"Chromium\",\n    \"version\": \"110\"\n  }, {\n    \"brand\": \"Not A(Brand\",\n    \"version\": \"24\"\n  }, {\n    \"brand\": \"Google Chrome\",\n    \"version\": \"110\"\n  }],\n  \"mobile\": false,\n  \"platform\": \"macOS\"\n}\n```\n\n*   `full`: Specifies that `uaChTrackLevel` field is present in the `context` object and contains an object similar to the one below:\n\n```\n{\n  \"architecture\": \"arm\",\n  \"bitness\": \"64\",\n  \"brands\": [{\n    \"brand\": \"Chromium\",\n    \"version\": \"110\"\n  }, {\n    \"brand\": \"Not A(Brand\",\n    \"version\": \"24\"\n  }, {\n    \"brand\": \"Google Chrome\",\n    \"version\": \"110\"\n  }],\n  \"fullVersionList\": [{\n    \"brand\": \"Chromium\",\n    \"version\": \"110.0.5481.77\"\n  }, {\n    \"brand\": \"Not A(Brand\",\n    \"version\": \"24.0.0.0\"\n  }, {\n    \"brand\": \"Google Chrome\",\n    \"version\": \"110.0.5481.77\"\n  }],\n  \"mobile\": false,\n  \"model\": \"\",\n  \"platform\": \"macOS\",\n  \"platformVersion\": \"13.1.0\",\n  \"uaFullVersion\": \"110.0.5481.77\",\n  \"wow64\": false\n}\n```\n\n#### **The `onLoaded` callback function**\n\nThe `onLoaded` callback function takes the `rudderanalytics` instance as an argument and executes after the JavaScript SDK loads and before the native device-mode destination SDKs are loaded.\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  onLoaded: function(rudderanalytics) {\n    console.log(\"All set!\");\n  }\n});\n```\n\n#### **Use globally-defined integration options at event level**\n\nYou can use this option to use the `integrations` object of the `load` method at the event level when it is not present at the event level.\n\nFor example, if the `integrations` object is defined in the `load` method and the `useGlobalIntegrationsConfigInEvents` option is set to `true`:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  integrations: {\n    All: true,\n    \"Google Analytics\": false,\n    ...\n  },\n  useGlobalIntegrationsConfigInEvents: true,\n  // other load options\n});\n```\n\n**Case 1**: `integrations` option is present at the event level:\n\n```\nrudderanalytics.track(\n  \"Order Completed\", {\n    revenue: 30,\n    currency: \"USD\",\n    user_actual_id: 12345\n  }, {\n    integrations: {\n      All: true,\n      Amplitude: false\n    },\n  },\n  () => {\n    console.log(\"track call\");\n  }\n);\n```\n\nIn this case, the JavaScript SDK uses the `integrations` option from the `track` event.\n\n**Case 2**: `integrations` option is not present at the event level:\n\n```\nrudderanalytics.track(\n  \"Order Completed\", {\n    revenue: 30,\n    currency: \"USD\",\n    user_actual_id: 12345\n  }, {},\n  () => {\n    console.log(\"track call\");\n  }\n);\n```\n\nIn this case, the SDK uses the `integrations` option from the `load` method.\n\n#### **Destination queue options**\n\nThe `destinationsQueueOptions` object controls the behavior of the in-memory queue that buffers events before sending them to the device mode destinations. Its structure is defined as follows:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  destinationsQueueOptions: {\n    maxItems: 100\n  }\n});\n```\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `maxItems` | Integer | Maximum number of events the device mode destinations (in-memory) queue can store while the destinations are still loading.<br><br>**Default value**: 100 |\n\n#### **Set external anonymous ID cookie name**\n\nYou can use this option to specify the cookie name in cases where the user has set a cookie for the SDK to fetch the external anonymous ID and use it further as the RudderStack’s `anonymousId`.\n\nIf you provide a cookie name that does not exist, the SDK either uses the existing `anonymousId` or generates a new one.\n\nNote that the external `anonymousId` is fetched only once while loading the SDK and any changes to the `anonymousId` cookie mid-session is not reflected in the events. To modify the `anonymousId` stored by RudderStack in such cases, use the [`setAnonymousId`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#overriding-anonymous-id) method.\n\n## Plugins\n\nPlugins are JavaScript SDK features that you can optionally load on demand.\n\n| Name | Description |\n| --- | --- |\n| `BeaconQueue` | Uses the browser’s Beacon utility to send a batch of events to the data plane instead of a single event per request.<br><br>See [Sending events using Beacon](#send-events-using-beacon) for more information. |\n| `DeviceModeDestinations` | Loads the device mode destinations supported by RudderStack. |\n| `ErrorReporting` | Reports SDK errors to RudderStack. |\n| `ExternalAnonymousId` | Lets you migrate the external anonymous user IDs to RudderStack’s `anonymousId`.<br><br>See [`anonymousIdOptions`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#anonymousidoptions) for more information. |\n| `GoogleLinker` | Provides `anonymousId` from Google AMP Linker URL query parameters. |\n| `NativeDestinationQueue` | Stores incoming events in a queue and sends them to the device mode destinations. |\n| `StorageEncryptionLegacy` | Existing (SDK version v1.1 or below) approach to encrypt/decrypt data before storing the data. |\n| `StorageEncryption` | Lightweight alternative to encrypt/decrypt data before storing the data. |\n| `StorageMigrator` | Assists the SDK in migrating the legacy encrypted persisted data. |\n| `XhrQueue` | Stores incoming events in a local storage retry queue and sends them to the data plane via XMLHttpRequest. |\n| `OneTrustConsentManager` | Integrates the OneTrust consent manager.<br><br>See [OneTrust consent management for web](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/javascript/) for more information. |\n| `KetchConsentManager` | Integrates the Ketch consent manager.<br><br>See [Ketch consent management for web](https://www.rudderstack.com/docs/data-governance/consent-management/ketch/) for more information. |\n| `Bugsnag` | Integrates Bugsnag as an error reporting provider. |\n\nIf you wish to use only a subset of the SDK features, you can explicitly specify the plugins in the `plugins` option while loading the SDK.\n\nFor example, if you **do not want** the external anonymous ID, Google Linker and error reporting features, you can provide an array of plugin names excluding those plugins. A sample snippet highlighting how to set the `plugins` load option in this scenario:\n\n```\nplugins: [\"BeaconQueue\", \n          \"DeviceModeDestinations\", \n          \"NativeDestinationQueue\",\n          \"StorageEncryptionLegacy\",\n          \"StorageEncryption\",\n          \"StorageMigrator\",\n          \"XhrQueue\",\n          \"OneTrustConsentManager\",\n          \"KetchConsentManager\"\n         ]\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you set the `plugins` option and exclude certain plugins from the list (for example, `OneTrustConsentManager`), setting the associated options while loading the SDK (for example, `consentManagement.provider` to `oneTrust`) will have no effect.\n\nIf you **do not specify** the `plugins` option while loading the JavaScript SDK, then RudderStack considers **all** plugins mentioned in the above table by default.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> **Once the list of plugins is determined, the SDK automatically loads a subset of them based on your load options, browser capabilities, and source configuration**.\n> \n> For example, if you set `consentManagement.provider` to `ketch`, then the SDK will not load `OneTrustConsentManager` plugin by default.\n\n#### **Lazyloading plugins**\n\nFor older browsers and users intentionally using the legacy Javascript SDK, RudderStack bundles the plugins with the core SDK. However, for modern browsers, the SDK lazy loads the plugins as multiple small chunks. These chunks are very small in size and loaded with the website parallelly.\n\nThe SDK’s bundling tool uses a package that supports Module Federation to bundle each feature into separate code chunks that can have interdependency among themselves. These chunks act as containers and can expose and consume code between them, creating a single, unified application. These chunks or plugins are then uploaded into CDN.\n\nDepending on the load options, browser capabilities, and source configuration, RudderStack fetches these plugins from the remote location at runtime when the SDK loads.\n\n## Storage\n\nYou can use the `storage` load option to configure different storage-specific features like encryption and migration.\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  storage: {\n    encryption: {\n      version: \"v3\" / \"legacy\"\n    },\n    migrate: true / false,\n    cookie: {\n      maxage: 31536000 * 1000, // 1 year\n      path: \"/\",\n      domain: \"example.com\",\n      samesite: \"Lax\",\n      secure: true / false\n    }\n  }\n});\n```\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `encryption` | Object | Configures the encryption type for persisted user data. It consists of a `version` parameter that accepts two values - `v3` and `legacy`.<br><br>The SDK uses Base64 encryption if you set `version` to `v3` and AES encryption for `legacy`.<br><br>**Default value**: `v3` |\n| `migrate` | Boolean | Migrates persisted legacy encrypted data if set to `true`.<br><br>**Default value**: `true` |\n| `cookie` | Object | Contains the configurable options for the cookie.<br><br>See [Cookie settings](#cookie-settings) for more information. |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you set `version` to `legacy`, then you must also load the `StorageEncryptionLegacy` plugin. For `v3`, you must load the `StorageEncryption` plugin.\n> \n> Similarly, if you do not set `migrate` to `false`, then you must also load the `StorageMigrator` plugin.\n\nNote that:\n\n*   If you access the SDK persisted data directly from the cookie or local storage, you must update the custom decryption logic.\n*   All sites under the same top-level domain must use the same encryption version. For example, if `xyz.test.com` uses the latest JavaScript SDK and `abc.test.com` uses a legacy SDK version (v1.1 or below), then you should set the `storage` load option as follows:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  storage: {\n    encryption: {\n      version: \"legacy\"\n    }\n  },\n  // other load options\n});\n```\n\n*   Migrating all your subdomain sites to use SDK v3 is recommended.\n\n### Cookie settings\n\nThe `cookie` object contains the configurable options for your cookie. All parameters in this object are **optional**.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The configuration provided in these cookie options overrides any other cookie settings.\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `maxage` | Number | Maximum duration (in ms) that the cookie lives.<br><br>**Default value**: 1 year |\n| `path` | String | Path of the page where the cookie is accessible.<br><br>**Default value**: `/` |\n| `domain` | String | Sets the cookie domain.<br><br>**Default value**: The SDK captures and uses the current domain as the default value. |\n| `samesite` | String | Sets the `SameSite` attribute of the cookie.<br><br>**Default value**: `Lax` |\n| `secure` | Boolean | Determines if the SDK should send the cookie to the storage backend via HTTPS.<br><br>**Default value**: `false` |\n\n## Configure persistent data storage\n\nWhile loading the JavaScript SDK, you can specify the information to store (`userId`, `anonymousId`, session information, etc.) and whether to store it in your browser’s cookies, local storage, in-memory storage, or not store it at all (fully anonymous tracking).\n\nSee [Configure Persistent Data Storage](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/data-storage-cookies/persistent-data-storage/) guide for more information.\n\n## Consent management\n\nYou can integrate the JavaScript SDK with leading consent management solutions like [OneTrust](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/) and [Ketch](https://www.rudderstack.com/docs/data-governance/consent-management/ketch/) or set up a custom consent management solution.\n\nIn addition, you can also configure the pre-consent behavior - either tracking users as fully anonymous, tracking only their sessions, or tracking with `anonymousId` as their identifier. This minimizes any data loss related to attribution, acquisition, and the overall user journey.\n\nUse the `consentManagement` load option to set your consent management preferences while loading the SDK, as shown:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  consentManagement: {\n    enabled: true,\n    provider: 'oneTrust' // `ketch`\n  }\n});\n```\n\n## Load SDK for self-hosted control plane\n\nIf you are self-hosting the control plane using the [Control Plane Lite](https://www.rudderstack.com/docs/get-started/rudderstack-open-source/control-plane-lite/#using-sdk-sources-set-up-in-self-hosted-control-plane) utility, the `load` call should be made as below:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  configUrl: CONTROL_PLANE_URL,\n});\n```\n\n## Allowlist RudderStack domain\n\nIf you are using RudderStack’s CDN for the SDK content, add the following (minimum) content security policy (CSP) header configuration to load the JavaScript SDK without any errors:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> A content security policy (CSP) adds an extra layer of protection from any type of cross-site scripting, clickjacking, and data injection attacks.\n\n```\n<meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' 'unsafe-inline' https: //cdn.rudderlabs.com/ https://cdn.rudderstack.com/;\">\n```\n\nIf you don’t want to allow unsafe inline and use the CDN package with its loading snippet, use `nonce` attribute to the script tag for the loading snippet:\n\n```\n<meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' 'nonce-rAnd0m' https: //cdn.rudderlabs.com/ https://cdn.rudderstack.com/;\">\n```\n\nIf you use the NPM package, no inline loading snippet is required:\n\n```\n<meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' https: //cdn.rudderlabs.com/ https://cdn.rudderstack.com/;\">\n```\n\n### Device mode destinations\n\nWhile using the JavaScript SDK with destinations that support [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode), you might need to allowlist the domain from where the destination SDK loads in your content security policy (CSP).\n\nSee the specific [destination’s documentation](https://www.rudderstack.com/docs/destinations/streaming-destinations/) to obtain the domain to be allowlisted. For example, [Braze](https://www.rudderstack.com/docs/destinations/streaming-destinations/braze/#connection-mode).\n\n## Tracking user sessions\n\nBy default, the JavaScript SDK automatically tracks the user sessions. This means that RudderStack automatically determines the start and end of a user session depending on the inactivity time configured in the SDK (default time is 30 minutes).\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  sessions: {\n    autoTrack: true,\n    timeout: 10 * 60 * 1000,  // 10 min in milliseconds\n  },\n  ...<otherLoadOptions>\n});\n```\n\nTo disable automatic session tracking, you can set the load option `autoTrack` to `false`.\n\nFor more information on the user sessions and how to track them using the JavaScript SDK, refer to the [Session Tracking](https://www.rudderstack.com/docs/sources/event-streams/sdks/session-tracking/) guide.\n\n## Send events using Beacon\n\nThe JavaScript SDK lets you send the event payloads using the **XHR** (XMLHttpRequest) API (default) or [Beacon](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon) browser utility.\n\nThere are two advantages of using the [Beacon](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon) utility to send your event payload:\n\n*   The events delivery request is executed even when the page unloads, leading to no loss of data.\n*   The Beacon requests are optimized so that the browser waits until the CPU load is lower or until the network is free before making the actual requests, leading to better website performance.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The Beacon queue maintained by the browsers limits the total size of the elements present in the queue at any point and **peaks at 64 KB**.\n\nSee [Event delivery and retry mechanism](#event-delivery-and-retry-mechanism) to help you decide whether to use Beacon to send your events.\n\n#### **Workflow**\n\nThe **Beacon** browser utility asynchronously sends a small amount of data over HTTP to the RudderStack server. To send the SDK events using this utility, set the `useBeacon` field in the [`load()`](#loading-options) call options to `true`.\n\nThe SDK internally uses a queue (`BeaconQueueOpts`) to buffer the events and send it through the Beacon utility in batches. The queue options can be configured as shown below:\n\n```\n{\n  maxItems: 10, \n  flushQueueInterval: 600000 // In ms\n}\n```\n\nThe following table describes the above `integer` type parameters in detail:\n\n| Parameter | Description | Default Value |\n| --- | --- | --- |\n| `maxItems` | The SDK flushes the events queue when the event count meets this limit. | 10  |\n| `flushQueueInterval` | The SDK flushes the events queue periodically at this interval (ms). | 600000 |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The JavaScript SDK flushes the Beacon events queue if the total size of the payload exceeds 64 KB before even reaching the `maxItems` or `flushQueueInterval` criteria.\n\n### Event delivery and retry mechanism\n\nThis section highlights some important points which will help you choose whether to use Beacon for sending your event payloads:\n\n*   The requests sent from the SDK using the Beacon utility only push the events to the browser’s Beacon queue. Further, it depends on the browser’s engine to send these events from the queue. Hence, RudderStack **cannot guarantee** if any events get discarded due to any 5xx or other network-related errors (request timed out, end resource unavailable, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If event delivery and retry is an important requirement for your website, using the XHR API of the JavaScript SDK is highly recommended. RudderStack retries event delivery based on the status codes and other errors.\n\n*   The Beacon queue maintained by the browsers limits the total size of the elements present in the queue at any point and **peaks at 64 KB**. Therefore, you cannot send high-frequency hits from the main thread in one go, as the Beacon queue cannot take up cycles to dequeue itself.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Load JavaScript SDK | RudderStack Docs",
  "description": "Understand the different SDK load options.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/data-pipelines/reverse-etl/features/models/",
  "markdown": "# Models | RudderStack Docs\n\nRun custom SQL queries on your warehouse and send resulting data to the specified destinations.\n\n* * *\n\n*     4 minute read  \n    \n\nRudderStack’s **Models** feature lets you create models by defining custom SQL queries. You can then run these queries on your warehouse and send the resulting data to specific destinations. You can create as many models and reuse them with their corresponding [Reverse ETL sources](https://www.rudderstack.com/docs/sources/reverse-etl/).\n\nWith this feature, you can:\n\n*   Build models with complex SQL queries using an intuitive UI.\n*   Manage views of all models synced to different destinations in one place.\n*   Reuse existing models in multiple connections.\n\n## Create new model\n\n1.  Log in to the [RudderStack dashboard](https://app.rudderstack.com/).\n2.  From the left navigation bar, go to **Activate** > **Models** and click **New model**.\n3.  Configure the settings explained in the following sections:\n\n### Select source\n\nSelect the warehouse source for which you want to create a model. RudderStack supports the Models feature for the following sources:\n\n*   [Amazon Redshift](https://www.rudderstack.com/docs/sources/reverse-etl/amazon-redshift/)\n*   [Google BigQuery](https://www.rudderstack.com/docs/sources/reverse-etl/google-bigquery/)\n*   [PostgreSQL](https://www.rudderstack.com/docs/sources/reverse-etl/postgresql/)\n*   [Snowflake](https://www.rudderstack.com/docs/sources/reverse-etl/snowflake/)\n*   [Databricks](https://www.rudderstack.com/docs/sources/reverse-etl/databricks/)\n*   [Trino](https://www.rudderstack.com/docs/sources/reverse-etl/trino/)\n\n### Specify warehouse credentials\n\nSpecify the warehouse credentials to authenticate RudderStack. See the **Configure warehouse credentials** section of the [source-specific documentation](https://www.rudderstack.com/docs/sources/reverse-etl/#supported-reverse-etl-sources) (for example, [Redshift](https://www.rudderstack.com/docs/sources/reverse-etl/amazon-redshift/#configuring-the-connection-credentials)) for more details.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Once you select or add your warehouse credentials and click **Next**, RudderStack will validate them before you can proceed with the setup. See [FAQ](#faq) for more information on these validations.\n\n### Specify model name\n\n*   Assign a name to uniquely identify the source in the RudderStack dashboard.\n*   Select the source type to **Model** and click **Continue**.\n\n### Configure model\n\n1.  Enter an optional model description.\n2.  Specify the custom SQL query in **Query** section.\n3.  Click **Run Query** to fetch the data preview.\n4.  Select the **Primary key** to use a column that uniquely identifies your warehouse records.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You can set a primary key only after you run the SQL query successfully using the **Run Query** option.\n\n[![Model configuration](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)](https://www.rudderstack.com/docs/images/data-pipelines/model-source-configuration.webp)\n\nNote the following:\n\n*   The **Preview** section displays the preview of the 50 resultant rows in a paginated format.\n*   You can add single-line/multiline comments above the query. However, RudderStack supports only multiline comments at the end of the query. Support for single-line comments is coming soon.\n*   You don’t need to add a semi-colon at the end of a query. RudderStack handles this automatically before running the query on the warehouse data.\n\n### Review and complete setup\n\nTo make any changes to the warehouse credentials or audience configuration, click the edit icon present next to those sections.\n\n[![Edit audience configuration](https://www.rudderstack.com/docs/images/data-pipelines/edit-model-configuration.webp)](https://www.rudderstack.com/docs/images/data-pipelines/edit-model-configuration.webp)\n\nOnce you have reviewed your configuration, click **Create source** to complete the setup.\n\n### Connect model to destination\n\nYou can connect this source to an existing or new [destination](https://www.rudderstack.com/docs/destinations/overview/) to start using it. To connect to a destination later, click **Done** on the top right.\n\n[![Next steps](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)](https://www.rudderstack.com/docs/images/retl-sources/created-source.webp)\n\nYou will then be redirected to the **Overview** page of the source where you get the option of connecting it to an existing or new destination.\n\n[![Add destination](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/retl-sources/add-destination.webp)\n\nSee [Set up Reverse ETL Connection](https://www.rudderstack.com/docs/sources/reverse-etl/retl-connection-setup/) section for more information.\n\n## Update model\n\n1.  Go to the **Configuration** tab of the model source.\n2.  To change the model description, click the edit icon in the **Configuration settings**.\n3.  Click **Edit query** to change or update the model settings and primary key.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   You can set a primary key only after you run the updated SQL query successfully using the **Run Query** option.\n> *   If you update the model’s query, you also need to check and update the relevant destination mappings in the **Schema** tab of the connection page.\n> *   After updating the configuration, the next sync will be a full sync. To validate if the query is running fine, you can manually trigger a full sync.\n\nGo to the **Settings** tab to:\n\n*   Get your source ID.\n*   Change your warehouse credentials.\n*   [Set up custom alerts](https://www.rudderstack.com/docs/data-governance/alerts/) for your Reverse ETL source.\n*   Delete the source permanently.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot delete a source that is connected to any destination.\n\n[![Edit source settings](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)](https://www.rudderstack.com/docs/images/retl-sources/source-settings.webp)\n\n## FAQ\n\n#### **What do the three validations under Verifying Credentials imply?**\n\nOnce you proceed after entering the connection credentials, you will see the following validations under the **Verifying Credentials** option:\n\n[![Validating credentials](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)](https://www.rudderstack.com/docs/images/retl-sources/retl-credentials-validate.webp)\n\nThese options are explained below:\n\n*   **Verifying Connection**: Indicates that RudderStack is trying to connect to the warehouse with the information specified in the connection credentials.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, it means that one or more fields specified in the connection credentials are incorrect. Verify your credentials in this case.\n\n*   **Able to List Schema**: Checks if RudderStack is able to fetch all schema details using the provided credentials.\n    \n*   **Able to Access RudderStack Schema**: Checks if RudderStack has the required access to the `_RUDDERSTACK` / `_rudderstack` schema (depending on your warehouse). To create the schema, run all commands listed in the **Permissions** section of the respective Reverse ETL source documentation:\n    \n    *   [BigQuery](https://www.rudderstack.com/docs/sources/reverse-etl/google-bigquery/#granting-permissions)\n    *   [Databricks](https://www.rudderstack.com/docs/sources/reverse-etl/databricks/#granting-permissions)\n    *   [PostgreSQL](https://www.rudderstack.com/docs/sources/reverse-etl/postgresql/#granting-permissions)\n    *   [Redshift](https://www.rudderstack.com/docs/sources/reverse-etl/amazon-redshift/#granting-permissions)\n    *   [Snowflake](https://www.rudderstack.com/docs/sources/reverse-etl/snowflake/#granting-permissions)\n    *   [Trino](https://www.rudderstack.com/docs/sources/reverse-etl/trino/#granting-permissions)\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this option gives an error, verify if you have successfully created the `_RUDDERSTACK` / `_rudderstack` schema and given RudderStack the required permissions to access it.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Models | RudderStack Docs",
  "description": "Run custom SQL queries on your warehouse and send resulting data to the specified destinations.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/data-pipelines/cloud-extract/",
  "markdown": "# Cloud Extract (ETL) | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Cloud Extract (ETL) | RudderStack Docs",
  "description": "Build efficient ETL pipelines by sending data from various cloud apps to your warehouse.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/pagerduty/",
  "markdown": "# PagerDuty source | RudderStack Docs\n\nIngest your event data from PagerDuty into RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[PagerDuty](https://www.pagerduty.com/) is a SaaS platform that helps you prevent and resolve business-impacting incidents, thereby improving the customer experience.\n\nThis guide will help you set up PagerDuty as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your PagerDuty source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **PagerDuty**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your PagerDuty source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![PagerDuty source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/pagerduty-source.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/pagerduty-source.webp)\n\n4.  Log in to your [PagerDuty account](https://app.pagerduty.com/).\n5.  Go to **Integrations** > **Generic Webhooks (v3)** and click **New Webhook**.\n6.  Enter the webhook URL obtained in **Step 3**, and other required details:\n\n[![PagerDuty source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/pagerduty-source-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/pagerduty-source-webhook.webp)\n\n6.  Finally, click **Add Webhook**.\n\n## Event transformation\n\nRudderStack ingests all events mentioned in the [PagerDuty documentation](https://developer.pagerduty.com/docs/ZG9jOjQ1MTg4ODQ0-overview#event-types) after converting them into the RudderStack event format. It also maps the following properties from the PagerDuty event payload to the RudderStack properties:\n\n| PagerDuty property | RudderStack property |\n| --- | --- |\n| `event_type` | `event` |\n| `id` | `messageId` |\n| `occurred_at` | `OriginalTimeStamp` |\n| `resource_type` | `properties.resourceType` |\n| `data` | `properties.data` |\n| `client` | `properties.client` |\n| `agent` | `context.traits` |\n| `userId` | `agent.id` |\n\n## How RudderStack creates the event payload\n\nThis section details how RudderStack receives the data from PagerDuty source and creates the resulting payload.\n\nA sample payload sent by PagerDuty is shown below:\n\n```\n{\n  \"event\": {\n    \"id\": \"01DEN0V2VIFEN5871PQGX72URP\",\n    \"event_type\": \"incident.triggered\",\n    \"resource_type\": \"incident\",\n    \"occurred_at\": \"2022-12-07T10:56:52.337Z\",\n    \"agent\": {\n      \"html_url\": \"https://rudderlabs-com.pagerduty.com/users/PXZZD2E\",\n      \"id\": \"PXZZD2E\",\n      \"self\": \"https://api.pagerduty.com/users/PXZZD2E\",\n      \"summary\": \"mihir patel\",\n      \"type\": \"user_reference\"\n    },\n    \"client\": {\n      \"name\": \"Monitoring Service\",\n      \"url\": \"https://monitoring.service.com\"\n    },\n    \"data\": {\n      \"id\": \"Q3S7IX2U5KTCOY\",\n      \"type\": \"incident\",\n      \"self\": \"https://api.pagerduty.com/incidents/Q3S7IX2U5KTCOY\",\n      \"html_url\": \"https://rudderlabs-com.pagerduty.com/incidents/Q3S7IX2U5KTCOY\",\n      \"number\": 2,\n      \"status\": \"triggered\",\n      \"incident_key\": \"faaecfc0aca04b6ea07154188b5d3c6c\",\n      \"created_at\": \"2022-12-07T10:56:52Z\",\n      \"title\": \"Server Crashed\",\n      \"service\": {\n        \"html_url\": \"https://rudderlabs-com.pagerduty.com/services/PAJBUTT\",\n        \"id\": \"PAJBUTT\",\n        \"self\": \"https://api.pagerduty.com/services/PAJBUTT\",\n        \"summary\": \"Database\",\n        \"type\": \"service_reference\"\n      },\n      \"assignees\": [{\n        \"html_url\": \"https://rudderlabs-com.pagerduty.com/users/PXZZD2E\",\n        \"id\": \"PXZZD2E\",\n        \"self\": \"https://api.pagerduty.com/users/PXZZD2E\",\n        \"summary\": \"mihir patel\",\n        \"type\": \"user_reference\"\n      }],\n      \"escalation_policy\": {\n        \"html_url\": \"https://rudderlabs-com.pagerduty.com/escalation_policies/PB7HKU4\",\n        \"id\": \"PB7HKU4\",\n        \"self\": \"https://api.pagerduty.com/escalation_policies/PB7HKU4\",\n        \"summary\": \"Default\",\n        \"type\": \"escalation_policy_reference\"\n      },\n      \"teams\": [],\n      \"priority\": {\n        \"html_url\": \"https://rudderlabs-com.pagerduty.com/account/incident_priorities\",\n        \"id\": \"PPMNDVQ\",\n        \"self\": \"https://api.pagerduty.com/priorities/PPMNDVQ\",\n        \"summary\": \"P1\",\n        \"type\": \"priority_reference\"\n      },\n      \"urgency\": \"high\",\n      \"conference_bridge\": null,\n      \"resolve_reason\": null\n    }\n  }\n}\n```\n\nRudderStack transforms the above payload into the following [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) payload:\n\n```\n{\n  \"type\": \"track\",\n  \"event\": \"Incident Triggered\",\n  \"userId\": \"PXZZD2E\",\n  \"context\": {\n    \"traits\": {\n      \"id\": \"PXZZD2E\",\n      \"self\": \"https://api.pagerduty.com/users/PXZZD2E\",\n      \"type\": \"user_reference\",\n      \"summary\": \"mihir patel\",\n      \"html_url\": \"https://rudderlabs-com.pagerduty.com/users/PXZZD2E\"\n    },\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    },\n    \"integration\": {\n      \"name\": \"PagerDuty\"\n    }\n  },\n  \"rudderId\": \"a44e6807-d09c-4613-93f8-83ccd8b55901\",\n  \"messageId\": \"01DEN0V2VIFEN5871PQGX72URP\",\n  \"properties\": {\n    \"data\": {\n      \"id\": \"Q3S7IX2U5KTCOY\",\n      \"self\": \"https://api.pagerduty.com/incidents/Q3S7IX2U5KTCOY\",\n      \"type\": \"incident\",\n      \"teams\": [],\n      \"title\": \"Server Crashed\",\n      \"number\": 2,\n      \"status\": \"triggered\",\n      \"service\": {\n        \"id\": \"PAJBUTT\",\n        \"self\": \"https://api.pagerduty.com/services/PAJBUTT\",\n        \"type\": \"service_reference\",\n        \"summary\": \"Database\",\n        \"html_url\": \"https://rudderlabs-com.pagerduty.com/services/PAJBUTT\"\n      },\n      \"urgency\": \"high\",\n      \"html_url\": \"https://rudderlabs-com.pagerduty.com/incidents/Q3S7IX2U5KTCOY\",\n      \"priority\": {\n        \"id\": \"PPMNDVQ\",\n        \"self\": \"https://api.pagerduty.com/priorities/PPMNDVQ\",\n        \"type\": \"priority_reference\",\n        \"summary\": \"P1\",\n        \"html_url\": \"https://rudderlabs-com.pagerduty.com/account/incident_priorities\"\n      },\n      \"assignees\": [{\n        \"id\": \"PXZZD2E\",\n        \"self\": \"https://api.pagerduty.com/users/PXZZD2E\",\n        \"type\": \"user_reference\",\n        \"summary\": \"mihir patel\",\n        \"html_url\": \"https://rudderlabs-com.pagerduty.com/users/PXZZD2E\"\n      }],\n      \"created_at\": \"2022-12-07T10:56:52Z\",\n      \"incident_key\": \"faaecfc0aca04b6ea07154188b5d3c6c\",\n      \"resolve_reason\": null,\n      \"conference_bridge\": null,\n      \"escalation_policy\": {\n        \"id\": \"PB7HKU4\",\n        \"self\": \"https://api.pagerduty.com/escalation_policies/PB7HKU4\",\n        \"type\": \"escalation_policy_reference\",\n        \"summary\": \"Default\",\n        \"html_url\": \"https://rudderlabs-com.pagerduty.com/escalation_policies/PB7HKU4\"\n      }\n    },\n    \"client\": {\n      \"url\": \"https://monitoring.service.com\",\n      \"name\": \"Monitoring Service\"\n    },\n    \"resourceType\": \"incident\"\n  },\n  \"integrations\": {\n    \"PagerDuty\": false\n  },\n  \"originalTimestamp\": \"2022-12-07T10:56:52.000Z\"\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "PagerDuty source | RudderStack Docs",
  "description": "Ingest your event data from PagerDuty into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/data-storage-cookies/persistent-data-storage/",
  "markdown": "# Configure Persistent Data Storage in JavaScript SDK\n\nSet your information storage preferences while loading the JavaScript SDK.\n\n* * *\n\n*     4 minute read  \n    \n\nWhile loading the JavaScript SDK, you can specify the information to store (`userId`, `anonymousId`, session information, etc.) and whether to store it in your browser or not store it at all (fully anonymous tracking).\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> The fully anonymous tracking feature is a part of RudderStack’s [Data Governance toolkit](https://www.rudderstack.com/docs/data-governance/overview/) that ensures the quality and integrity of your data in a secure and compliant manner.\n\n## Persisted data\n\nYou can use the JavaScript SDK to persist the following data:\n\n*   User (ID and traits)\n*   Group (ID and traits)\n*   Anonymous user ID\n*   Initial referrer and domain\n*   Session\n*   Authentication token\n\n## Set storage type\n\nTo set the storage type for your stored information, provide a `type` field in the [`storage` option](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#storage) while loading the JavaScript SDK:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  storage: {\n    type: \"cookieStorage\" / \"localStorage\" / \"sessionStorage\" / \"memoryStorage\" / \"none\"\n  }\n  // other load options\n});\n```\n\nThe `type` parameter accepts the following values:\n\n| Value | Description |\n| --- | --- |\n| `cookieStorage` | SDK persists the user information in cookies and uses it for subsequent events.<br><br>If cookies are unavailable (for example, incognito mode), then the SDK falls back to local storage, followed by session storage, and then in-memory storage. |\n| `localStorage` | SDK persists user information in local storage and uses it for subsequent events.<br><br>If local storage support is unavailable (for example, incognito mode), then the SDK falls back to in-memory storage. |\n| `sessionStorage` | SDK persists user information in the browser’s session storage and uses it for subsequent events.<br><br>If session storage support is not available, the SDK falls back to in-memory storage. |\n| `memoryStorage` | User information is persisted in-memory.<br><br>SDK uses this information for subsequent events till the browser tab is closed or you reload/refresh the page. |\n| `none` | SDK performs [fully anonymous tracking](https://www.rudderstack.com/docs/data-governance/cookieless-tracking/) without storing any user information.<br><br>Every event payload will have a new `anonymousId` and subsequent events will not carry any user data from the previous event. To identify these truly anonymous events, SDK sets a new flag `trulyAnonymousTracking` in the `context` object. |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If not specified, the SDK sets the default storage `type` to `cookieStorage` and uses it to store all user data.\n\n### Set storage for specific information type\n\nYou can also set a different storage option for a specific information while loading the JavaScript SDK. Use the `entries` object in the `storage` load option and define the storage type for your user data.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   The storage options set in the `entries` object override the global storage `type`.\n> *   The SDK uses the global storage `type` for storing user data that is not explicitly defined in the `entries` object.\n> *   The SDK migrates the existing user data to the newly selected storage option automatically.\n> *   The SDK removes any stored user data if you set `type` to `none`.\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  storage: {\n    entries: {\n      userId: {\n        type: \"cookieStorage\"\n      },\n      userTraits: {\n        type: \"localStorage\"\n      },\n      sessionInfo: {\n        type: \"none\"\n      }\n    }\n  }\n  // other load options\n});\n```\n\nIn the above snippet, the global storage `type` is not defined. Hence, the SDK uses `cookieStorage` as the default storage option. Based on the `entries` object configured above, the SDK stores the user information as follows:\n\n| User information | Storage option |\n| --- | --- |\n| `userId`, `anonymousId`, `groupId`, `groupTraits`, `initialReferrer`, `initialReferringDomain` | `cookieStorage` |\n| `userTraits` | `localStorage` |\n| `sessionInfo` | `none` |\n\n## Use cases\n\nSuppose you define the following storage configurations for `userId` while loading the JavaScript SDK:\n\n**Case 1**\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  storage: {\n    entries: {\n      userId: {\n        type: \"cookieStorage\"\n      },\n    }\n  }\n  // other load options\n});\n```\n\nWhen you trigger an `identify` call with `user123` as the `userId`, the SDK persists `user123` in the cookie storage. If a `track` call is triggered next, the payload will contain `user123` as the `userId`.\n\n**Case 2**\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  storage: {\n    entries: {\n      userId: {\n        type: \"none\"\n      },\n    }\n  }\n  // other load options\n});\n```\n\nWhen you trigger an `identify` call, the SDK will **not** store the `userId` and the next set of events will have `userId` as an empty string (`\"\"`).\n\n**Case 3**\n\nIf you set the global storage `type` to `none` and then define the `type` in the `entries` object, then the SDK will **not** treat it as truly anonymous tracking.\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  storage: {\n    type: \"none\",\n    entries: {\n      userId: {\n        type: \"cookieStorage\"\n      },\n    }\n  }\n  // other load options\n});\n```\n\nIn this case, the SDK replicates the behavior described in **Case 1**.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Configure Persistent Data Storage in JavaScript SDK | RudderStack Docs",
  "description": "Set your information storage preferences while loading the JavaScript SDK.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/filtering/",
  "markdown": "# Events Filtering in JavaScript SDK\n\nFilter events sent to downstream destinations using the JavaScript SDK.\n\n* * *\n\n*     2 minute read  \n    \n\nThis guide covers the following event filtering use cases:\n\n*   Filtering destinations while [loading the JavaScript SDK](#filter-destinations-while-loading-sdk).\n*   Sending events to specific destinations at the [event level](#filter-destinations-at-event-level).\n*   [Filtering client-side events](#client-side-event-filtering) before sending them to the specified destinations in [web device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode).\n\n## Filter destinations while loading SDK\n\nYou can send the event data only to the selective destinations by passing an [integrations](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#integrationopts) object in the [`load` API](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#loading-options) options. RudderStack then loads and sends events only to the specified (and enabled) destinations.\n\nA sample snippet to send event data only to the **Google Analytics** and **Intercom** destinations:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n    integrations: {\n        All: false,\n        \"Google Analytics\": true,\n        \"Intercom\": true\n    }\n});\n```\n\n## Filter destinations at event level\n\nIn this scenario, the SDK sends events only to the specified (and enabled) destinations at the individual API level.\n\nA sample `track` event instrumentation to send event data only to the **Google Analytics** destination:\n\n```\nrudderanalytics.track(\n    \"Order Completed\", {\n        revenue: 30,\n        currency: \"USD\",\n        user_actual_id: 12345\n    }, {\n        integrations: {\n            All: false,\n            \"Google Analytics\": true\n        }\n    }\n);\n```\n\nThe [destination](https://www.rudderstack.com/docs/destinations/streaming-destinations/) name inside the `integrations` object should exactly be the same as displayed in the [RudderStack dashboard](https://app.rudderstack.com/directory).\n\n## Client-side event filtering\n\nWhen you send events to a destination via [web device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode), you can use the [Client-side Events Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) feature to configure the `track` events that should be discarded or allowed to flow through.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Events Filtering in JavaScript SDK | RudderStack Docs",
  "description": "Filter events sent to downstream destinations using the JavaScript SDK.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/breaking-changes/",
  "markdown": "# Breaking Changes in JavaScript SDK v3\n\nUnderstand the breaking changes in JavaScript SDK v3.\n\n* * *\n\n*     3 minute read  \n    \n\nThis guide lists the breaking changes introduced in JavaScript SDK v3.\n\n## Storage and encryption\n\n*   The local storage entries prefix for the data plane events queue has changed from `rudder` to `rudder_<write-key>`, where `<write-key>` is your JavaScript source [write keyThe write key (or source write key) is a unique identifier for your source. RudderStack uses this key to send events from a source to the specified destination.](https://www.rudderstack.com/docs/resources/glossary/#write-key) .\n    \n*   [Storage data encryption](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#storage) is changed to Base64 by default.\n    \n    *   The existing persisted data is migrated to the latest version by default unless otherwise specified by the user.\n    *   New load API options are introduced to set the encryption version and migration choice:\n    \n    ```\n    storage: {\n      migrate: true,\n      encryption: {\n          version: 'v3',\n        }\n    }\n    ```\n    \n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> It is recommended to use the same storage encryption version, preferably v3, across all your sites that share the same top-level domain.\n> \n> If you have any special needs and have implemented different SDK major versions across your sites, you need to set the encryption version to `legacy`. This way the SDK v3 will continue to use the same encryption technique as the older SDK versions so that your subdomain sites using those legacy SDK versions are not impacted at all.\n> \n> ```\n> rudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n>   storage: {\n>     encryption: {\n>       version: \"legacy\"\n>     }\n>   },\n>   // other load options\n> });\n> ```\n> \n> See [Migration considerations](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/migration-guide/#migration-considerations) for more information.\n\n## Installation\n\n*   The [SDK loading snippet](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/installation/) has changed.\n*   The file name is changed from `rudder-analytics.min.js` to `rsa.min.js`.\n*   The NPM package is changed from [`rudder-sdk-js`](https://www.npmjs.com/package/rudder-sdk-js) to [`@rudderstack/analytics-js`](https://www.npmjs.com/package/@rudderstack/analytics-js).\n*   All the `GET` type of methods (`getAnonymousId`, `getGroupTraits`, and so on) have been removed from the loading snippet.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The above `GET` methods will not yield anything before the SDK is loaded. Hence, it does not make sense to buffer those calls and replay them later.\n\n#### **No `page` call in loading snippet**\n\nThe default `page` call embedded at the end of the [loading snippet](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/installation/#using-cdn) has been removed. So, you need to explicitly make a `page` call if required.\n\n#### **Source configuration URL**\n\nThe **default** source configuration host has changed from `rudderlabs.com` to `rudderstack.com`. If you were previously forwarding the source configuration host, you must proxy `https://api.rudderstack.com` instead of `https://api.rudderlabs.com`.\n\nSee [How to Use Custom Domains](https://www.rudderstack.com/docs/user-guides/how-to-guides/custom-domains/#setup-for-fetching-source-configuration) for more information.\n\n## Consent management\n\nIn JavaScript SDK v3, the `load` API option used for configuring consent management has changed.\n\nPreviously, you could specify the consent management options for integrating OneTrust as below:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  cookieConsentManager: {\n    oneTrust: {\n      enabled: true\n    }\n  }\n});\n```\n\nThe above snippet notifies the SDK to retrieve consent data from the OneTrust SDK loaded on your web page.\n\nIn SDK v3, `cookieConsentManager` is replaced with `consentManagement`. Also, the object structure for configuring the consent management options is changed. The new options are shown:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  consentManagement: {\n    enabled: true,\n    provider: 'oneTrust'\n  }\n});\n```\n\n## Client-side events filtering\n\nFor [client-side events filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/):\n\n*   Empty and non-string event names are not allowlisted anymore.\n*   Event name comparison is case-sensitive.\n\n## Ad blocker detection\n\nThis may not exactly be a breaking change - the ad blocker detection logic is updated. The SDK does not use the Google AdSense script anymore.\n\n## Other changes\n\n*   Service worker is now a separate package and will be published [here](https://www.npmjs.com/package/@rudderstack/analytics-js-service-worker).\n*   [Sync pixel callback](https://www.rudderstack.com/docs/archive/javascript-sdk/1.1/supported-api/#callbacks-to-common-methods) feature is removed.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Breaking Changes in JavaScript SDK v3 | RudderStack Docs",
  "description": "Understand the breaking changes in JavaScript SDK v3.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/new-features/",
  "markdown": "# What's New in JavaScript SDK v3\n\nUnderstand the newly introduced features in JavaScript SDK v3.\n\n* * *\n\n*     2 minute read  \n    \n\nThis guide details the new features introduced in JavaScript SDK v3.\n\n## Event dispatching for SDK initialized and ready phases\n\nThe SDK v3 supports dispatching two new events to document - `RSA_Initialised` and `RSA_Ready` - when it is in the initialized and ready phases respectively.\n\nThese events provide a reference to the analytics instance (`analyticsInstance`) whenever you want to use it to invoke any API method, for example, `getUserId`.\n\nYou can listen to the above events as follows:\n\n```\n<script>\n   document.addEventListener('RSA_Initialised', function(e) {\n     console.log('RSA_Initialised', e.detail.analyticsInstance);\n   })\n   \n   document.addEventListener('RSA_Ready', function(e) {\n     console.log('RSA_Ready', e.detail.analyticsInstance);\n   })\n   \n</script>\n```\n\nYou can use this feature as an alternative to the `ready` API method and the [`onLoaded` load option](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#loading-options) for orchestration with JavaScript frameworks and libraries. It is useful in cases where relevant business logic is in functions that cannot be declared alongside the analytics integration or they need to be declared on a decoupled code base for some reason.\n\n## Batching in XHRQueue plugin\n\nThe JavaScript SDK v3 provides the [`XhrQueue`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#plugins) plugin that leverages [`queueOptions`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#queueopts) to control the behavior of the persistence queue that buffers events in local storage before sending them to the data plane.\n\nYou can also send a batch of events to the data plane using the `queueOptions.batch` object while loading the SDK:\n\n```\nrudderanalytics.load(WRITE_KEY, DATA_PLANE_URL, {\n  queueOptions: {\n    minRetryDelay: 1000, // ms\n    batch: {\n      enabled: true,\n      maxItems: 100,\n      maxSize: 1024 * 512 // 512 KB\n      flushInterval: 60000 // ms\n    },\n    ...\n  },\n  ...\n});\n```\n\nThe following table details the `queueOptions.batch` object parameters:\n\n| Parameter | Data type | Description | Default value |\n| --- | --- | --- | --- |\n| `enabled` | Boolean | Determines if the SDK should activate the batching functionality. | false |\n| `maxItems` | Integer | Maximum number of events in a batch. | 100 |\n| `maxSize` | Integer | Maximum batch payload size. | 512 KB (Also, the maximum configurable value) |\n| `flushInterval` | Integer | Minimum interval between two batch requests. | 60000 ms |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   `queueOptions.batch` is an optional object, meaning batching is disabled by default.\n> *   The SDK makes a batch request when either of the following criteria is met:\n>     *   `maxItems` in a batch is reached.\n>     *   `maxSize` of the batch is reached.\n>     *   Time period of `flushInterval` ms has elapsed since the last batch request.\n\n## Debugging\n\nThe SDK v3 exposes the following objects globally that can assist in debugging:\n\n| Name | Description |\n| --- | --- |\n| `window.rudderAnalyticsBuildType` | Denotes the build type to load based on browser capabilities (modern or legacy). |\n| `window.RudderStackGlobals` | Contains some SDK application-level values, preloadBuffer (before it is consumed) and the SDK instance state per write key. You can use it to debug and see values in state at any point in time. |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "What's New in JavaScript SDK v3 | RudderStack Docs",
  "description": "Understand the newly introduced features in JavaScript SDK v3.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/pipedream/",
  "markdown": "# Pipedream source | RudderStack Docs\n\nIngest your event data from Pipedream into RudderStack.\n\n* * *\n\n*     2 minute read  \n    \n\n[Pipedream](https://pipedream.com/) lets you build and automate processes that connect APIs. It supports open source triggers and actions for hundreds of integrations.\n\nThis guide will help you set up Pipedream as a source in RudderStack.\n\n## Getting started\n\nFollow these steps to set up your Pipedream source in the RudderStack dashboard:\n\n1.  Go to your [RudderStack dashboard](https://app.rudderstack.com/) and click **Add Source**. From the list of **Event Streams** sources, select **Pipedream**.\n2.  Assign a name to your source and click **Continue**.\n3.  Your Pipedream source is now configured. Note the **Webhook URL** in the **Settings** tab:\n\n[![Pipedream source webhook URL](https://www.rudderstack.com/docs/images/event-stream-sources/pipedream-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/pipedream-webhook.webp)\n\n4.  Log in to your [Pipedream dashboard](https://pipedream.com/workflows/) and set up your workflow.\n5.  After [adding a trigger](https://pipedream.com/new?tutorial=1), click the **+** icon to add a step. Then, select the **HTTP/Webhook** option and choose **Send any HTTP Request**:\n\n[![Pipedream add a step](https://www.rudderstack.com/docs/images/event-stream-sources/pipedream-http-webhook.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/pipedream-http-webhook.webp)\n\n6.  In the **HTTP Request Configuration** section, choose **POST** as the request type and enter the RudderStack webhook URL obtained in Step 3 above. Also, configure the other request configuration settings as required.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack only accepts the incoming HTTP requests of type **POST**.\n\n[![Pipedream custom HTTP request](https://www.rudderstack.com/docs/images/event-stream-sources/pipedream-custom-http-request.webp)](https://www.rudderstack.com/docs/images/event-stream-sources/pipedream-custom-http-request.webp)\n\n7.  Click **Deploy** to finish setting up the workflow.\n\n## Event transformation\n\nRudderStack ingests the Pipedream events and checks for the `userId`/`anonymousId` field and the event type (`identify`, `track`, etc.). If both are present, it considers the event to be in a RudderStack payload format. Otherwise, it converts it into a RudderStack payload according to the below property-value mapping:\n\n| RudderStack property | Value |\n| --- | --- |\n| `message.event` | `pipedream_source_event` |\n| `message.type` | `track` |\n| `message.properties` | Pipedream input payload |\n\n## How RudderStack creates the event payload\n\nRudderStack supports all [standard events](https://www.rudderstack.com/docs/event-spec/standard-events/) in the specified format. For the other events, it transforms the incoming data to a [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) payload.\n\nA sample incoming payload is as shown:\n\n```\n{\n    \"artist\": \"Artist One\",\n    \"genre\": \"Jazz\",\n    \"song\": \"Take Five\"\n  }\n```\n\nRudderStack transforms the above payload into the following `track` payload:\n\n```\n{\n  \"event\": \"pipedream_soure_event\",\n  \"anonymousId\": \"63767499ca6fb1b7c988d5bb\",\n  \"integration\": {\n    \"name\": \"PIPEDREAM\"\n  },\n  \"integrations\": {\n    \"PIPEDREAM\": false\n  },\n  \"type\": \"track\",\n  \"properties\": {\n    \"artist\": \"Artist One\",\n    \"genre\": \"Jazz\",\n    \"song\": \"Take Five\"\n  }\n}\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Pipedream source | RudderStack Docs",
  "description": "Ingest your event data from Pipedream into RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/detecting-adblocked-pages/",
  "markdown": "# Detect Ad-blocked Pages | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Detect Ad-blocked Pages | RudderStack Docs",
  "description": "Detect ad-blocked pages via the RudderStack JavaScript SDK.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/chargebee/",
  "markdown": "# Chargebee | RudderStack Docs\n\nSync data from Chargebee to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Chargebee](https://www.chargebee.com/) is a subscription billing and revenue management platform. It lets you streamline your revenue operations via features like subscription workflow automation, cutting-edge revenue reporting, and more.\n\nThis document guides you in setting up Chargebee as a source in RudderStack. Once configured, RudderStack automatically ingests your specified Chargebee data, which can then be routed to your RudderStack-supported data warehouse destination.\n\n## Getting started\n\nTo set up Chargebee as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Chargebee** from the list of sources.\n3.  Assign a name to your source and click **Next**.\n\n### Connection settings\n\nEnter the following connection credentials to authenticate your Chargebee account with RudderStack:\n\n[![Chargebee connection settings](https://www.rudderstack.com/docs/images/cloud-extract-sources/chargebee-1.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/chargebee-1.webp)\n\n*   **Site**: Enter your Chargebee site name.\n*   **API Key**: Enter your [Chargebee API key](https://www.chargebee.com/docs/2.0/api_keys.html).\n*   **Start Date**: Enter the date from which RudderStack should import your historical Chargebee data.\n*   **Product Catalog**: Select your [Chargebee Product Catalog version](https://www.chargebee.com/docs/2.0/product-catalog.html) from the dropdown.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack does not support changing the **Product Catalog** version once you have successfully set up the source.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Chargebee to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Chargebee data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Chargebee:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the Chargebee data you want to ingest by selecting the required resources:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/chargebee-2.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/chargebee-2.webp)\n\nThe below table mentions the sync types supported by the Chargebee resources while syncing data to your warehouse destination, with `id` as the primary key for all:\n\n| Resource | Sync type |\n| --- | --- |\n| `coupon` | Incremental |\n| `credit note` | Incremental |\n| `customer` | Incremental |\n| `event` | Incremental |\n| `invoice` | Incremental |\n| `order` | Incremental |\n| `subscription` | Incremental |\n| `transaction` | Incremental |\n| `addon` | Incremental |\n| `plan` | Incremental |\n| `item` | Incremental |\n| `item prices` | Incremental |\n| `attached items` | Semi-incremental |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Semi-Incremental** and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\n## FAQ\n\n#### How do I obtain the Chargebee API key?\n\nThe Chargebee API key is required to authenticate your app and regulate its access to the Chargebee API. To obtain the API key, log into your Chargebee dashboard and go to **Settings** > **Configure Chargebee** > **API Keys and Webhooks**. Then, click the **API Keys** tab. Your API key should be listed here.\n\nFor more information, refer to the [Chargebee documentation](https://www.chargebee.com/docs/2.0/api_keys.html).\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Chargebee | RudderStack Docs",
  "description": "Sync data from Chargebee to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/bing-ads/",
  "markdown": "# Bing Ads source | RudderStack Docs\n\nSync data from Bing Ads to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Bing Ads](https://ads.microsoft.com/) is a pay per click (PPC) advertising platform that works on both Bing and Yahoo search engines. It allows marketers to track and monitor their ad campaigns, resulting clicks, CTRs, and more.\n\n## Getting Started\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Bing Ads** from the list of sources.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\nNext, configure the following dashboard settings:\n\n[![Bing Ads credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/bing-ads-v2-settings.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/bing-ads-v2-settings.webp)\n\n*   **Tenant ID**: Enter the Tenant ID of your Microsoft Advertising developer application. It is recommended to set it as `common` unless you need a different value.\n*   **Connect with Bing Ads V2**: Click this button to give RudderStack the required permissions to access your Bing Ads account.\n*   **Developer Token**: Enter your user developer token. Refer to the [Microsoft documentation](https://learn.microsoft.com/en-us/advertising/guides/get-started?view=bingads-13#get-developer-token) for more information on obtaining the developer token.\n*   **Reports replication start date**: Select the date from when RudderStack should ingest your Bing Ads data. RudderStack will **not replicate** any data before this date.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Bing Ads to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Bing Ads data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Bing Ads:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n### Selecting the data to import\n\nYou can choose the Bing Ads data you want to ingest by selecting the required resources:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/bing-ads-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/bing-ads-connection-settings-2.webp)\n\nThe below table mentions the syncs and primary keys supported by these resources from Bing Ads to your warehouse destination:\n\n| Resource | Sync type | Primary key |\n| --- | --- | --- |\n| `Account Performance Report` | Incremental | `AccountId`, `TimePeriod`, `CurrencyCode`, `AdDistribution`, `DeviceType`, `Network`, `DeliveredMatchType`, `DeviceOS`, `TopVsOther`, `BidMatchType` |\n| `Accounts` | Full Refresh | `Id` |\n| `Ad Group Performance Report` | Incremental | `AccountId`, `CampaignId`, `AdGroupId`, `TimePeriod`, `CurrencyCode`, `AdDistribution`, `DeviceType`, `Network`, `DeliveredMatchType`, `DeviceOS`, `TopVsOther`, `BidMatchType`, `Language` |\n| `Ad Groups` | Full Refresh | `Id` |\n| `Ad Performance Report` | Incremental | `AccountId` , `CampaignId`, `AdGroupId`, `AdId`, `TimePeriod`, `CurrencyCode`, `AdDistribution`, `DeviceType`, `Language`, `Network`, `DeviceOS`, `TopVsOther`, `BidMatchType`, `DeliveredMatchType` |\n| `Ads` | Full Refresh | `Id` |\n| `Budget Summary Report` | Incremental | `Date` |\n| `Campaign Performance Report` | Full Refresh | `AccountId`, `CampaignId`, `TimePeriod`, `CurrencyCode`, `AdDistribution`, `DeviceType`, `Network`, `DeliveredMatchType`, `DeviceOS`, `TopVsOther`, `BidMatchType` |\n| `Campaigns` | Full Refresh | `Id` |\n| `Keyword Performance Report` | Incremental | `AccountId`, `CampaignId`, `AdGroupId`, `KeywordId`, `AdId`, `TimePeriod`, `CurrencyCode`, `DeliveredMatchType`, `AdDistribution`, `DeviceType`, `Language`, `Network`, `DeviceOS`, `TopVsOther`, `BidMatchType` |\n\nBing Ads is now configured as a source. RudderStack will start ingesting data from Bing Ads as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nYes, it is.\n\nWe have implemented a feature wherein RudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Bing Ads source | RudderStack Docs",
  "description": "Sync data from Bing Ads to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/customerio/",
  "markdown": "# Customer.io extract source | RudderStack Docs\n\nSync data from Customer.io to your warehouse destination via RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[Customer.io](https://www.customer.io/) is a popular marketing platform for sending targeted emails and push and SMS notifications to improve conversions and customer engagement.\n\nThis document guides you in setting up Customer.io as a source in RudderStack. Once configured, RudderStack automatically ingests your Customer.io data and routes it to your specified data warehouse destination.\n\n## Getting started\n\nTo set up Customer.io as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Customer.io** from the list of sources.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\nTo set up Customer.io as a Cloud Extract source, you need to configure the following settings:\n\n[![Customer.io credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/customerio-connection-settings.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/customerio-connection-settings.webp)\n\n*   **App API Key**: Enter your Customer.io API key which can be obtained in the [Customer.io dashboard](https://fly.customer.io/login) by navigating to **Settings** > **Account Settings** > **API Credentials**.\n*   **Cutoff Days**: Enter the number of days after which RudderStack fetches the updated data.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Customer.io to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Customer.io data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Customer.io:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the Customer.io data you want to ingest by selecting the required resources:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/customerio-resources.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/customerio-resources.webp)\n\nThe below table lists the syncs supported by the Customer.io resources to your warehouse destination:\n\n| Resource | Full Refresh sync | Incremental sync |\n| --- | --- | --- |\n| `newsletters` | Yes | Yes |\n| `campaigns` | Yes | Yes |\n| `campaign_actions` | Yes | Yes |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh** and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack ingests the Customer.io data using the [Customer.io Beta API](https://customer.io/docs/api/#tag/appOverview) which limits the API requests by 10 requests per second.\n\nCustomer.io is now configured as a source. RudderStack will start ingesting data from Customer.io as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Customer.io extract source | RudderStack Docs",
  "description": "Sync data from Customer.io to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/facebook-ads/",
  "markdown": "# Facebook Ads | RudderStack Docs\n\nSync data from Facebook Ads to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Facebook Ads](https://www.facebook.com/business/ads) is an online advertising platform that lets you create and run cross-device marketing campaigns and track their performance with easy to read reports.\n\nThis document guides you in setting up Facebook Ads as a source in RudderStack. Once configured, RudderStack automatically ingests your specified Facebook Ads data and routes it to your data warehouse.\n\n## Getting started\n\nTo set up Facebook Ads as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Facebook Ads** from the list.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\n1.  Click **Connect with Facebook Ads** and grant RudderStack the necessary permissions to access your Facebook Ads data.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Your Facebook Ads account and the related details will then automatically appear under **Choose an account**.\n\n[![Facebook Ads connection settings](https://www.rudderstack.com/docs/images/cloud-extract-sources/fb-ads-1.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/fb-ads-1.webp)\n\n2.  In the **Source Settings**, configure the following settings:\n\n[![Facebook Ads connection settings](https://www.rudderstack.com/docs/images/cloud-extract-sources/fb-ads-2.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/fb-ads-2.webp)\n\n*   **Page**: Enter the name of the Facebook page from where you want to ingest the Ads data.\n*   **Historical data**: Specify the timeframe for which RudderStack should fetch the historical data during the first sync.\n*   **Attribution window**: Specify the [attribution window](https://www.facebook.com/business/help/2198119873776795?id=768381033531365), that is, the number of days between a person viewing/clicking your ad and subsequently taking an action. Facebook measures the ad actions based on the clicks and views of your ad.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack will not sync the data older than the selected timeframe for the historical data.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the ingested data from Facebook Ads to the warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Facebook Ads data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Facebook Ads:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nChoose the Facebook Ads data that you wish to ingest via RudderStack. You can either select all data or choose specific Facebook Ads data attributes as per your requirement.\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/fb-ads-3.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/fb-ads-3.webp)\n\nFacebook Ads is now configured as a source. RudderStack will start ingesting data from Facebook Ads as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\n#### What Facebook Ads data does RudderStack import?\n\n| Property | Table name | Description |\n| --- | --- | --- |\n| **Account Insights** | **`account_insights`** | This table contains insights, aggregated for the whole account. Insights include total impressions, CPP, CPC, Reach, and CPM. |\n| **Campaigns** | **`campaigns`** | This table holds information about your campaigns. The columns of this table include: `name`, `objective`, `account_id`, and`status`. |\n| **AdSets** | **`adsets`** | This tables has information about your Ad Sets. The columns of this table are: `bid_amount`,`updated_time`,`campaign_id`,`daily_budget`,`lifetime_budget`, and `pacing_type`. |\n| **Ads** | **`ads`** | This table contains information about your Facebook Ads. |\n| **Ad Creatives** | **`ad_creatives`** | This table contains the creative content for your Facebook Ads account that you can use in your ads. |\n\n#### How can I avoid sync errors due to rate limits?\n\nTo avoid sync errors due to rate limits, set the **Page Size of Requests** setting to 500 from the default value of 50. This allows RudderStack to make fewer calls to the Facebook API. Note that the maximum value for this setting is 1000.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Facebook Ads | RudderStack Docs",
  "description": "Sync data from Facebook Ads to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/service-worker/",
  "markdown": "# JavaScript SDK Service Worker | RudderStack Docs\n\nUse the JavaScript SDK service worker in browser extensions and serverless runtime.\n\n* * *\n\n*     4 minute read  \n    \n\nRudderStack’s JavaScript SDK provides a service worker that you can use in browser extensions and serverless runtimes. It exposes the same interface and features as the [RudderStack Node SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/).\n\n[![NPM Badge](https://img.shields.io/npm/v/@rudderstack/analytics-js-service-worker)](https://www.npmjs.com/package/@rudderstack/analytics-js-service-worker)\n\n## Install the package\n\nTo install the package, run the following command:\n\n```\nnpm install @rudderstack/analytics-js-service-worker --save\n```\n\nThen, run the following code snippet and use the exported object throughout your project:\n\n```\nimport { Analytics } from '@rudderstack/analytics-js-service-worker';\n\nconst rudderClient = new Analytics('<WRITE_KEY>', '<DATA_PLANE_URL>/v1/batch');\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This NPM module is meant to be used only for service worker usage. To integrate RudderStack with your Node.js apps, use the [Node SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/) instead.\n\n## Usage in Chrome extensions\n\nYou can use the JavaScript SDK in Chrome extensions with the manifest v3 - both as a [content script](#content-script) (via the JavaScript SDK package) or as [background script](#background-script) (via [service worker package](https://www.npmjs.com/package/@rudderstack/analytics-js-service-worker)).\n\nFor more information on usage in Chrome extensions, see the [JavaScript SDK GitHub repository](https://github.com/rudderlabs/rudder-sdk-js/blob/main/examples/chrome-extension/USAGE.md).\n\n### Background script\n\nYou can use the RudderStack [service worker npm package](https://www.npmjs.com/package/@rudderstack/analytics-js-service-worker) as a background script. To do so, place it in your Chrome extension resources by following either of these approaches:\n\n*   Copy the file from the node modules and place it as a part of the resources.\n*   Use a JS bundler and bundle it as a part of your service worker script.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You need to enable relevant permissions in the manifest file according to the required capabilities and allowed connections.\n> \n> Also, setting the background script `type` as a `module` is recommended, as it allows to import the script as ESM.\n\n```\n\"permissions\": [\"storage\", \"tabs\"],\n\"host_permissions\": [\n    \"https://*.dataplane.rudderstack.com/*\",\n    \"https://*.rudderlabs.com/*\",\n    \"*://*/*\"\n],\n\"externally_connectable\": {\n    \"matches\": [\n        \"https://*.dataplane.rudderstack.com/*\",\n        \"https://*.rudderlabs.com/*\"\n    ]\n},\n\"background\": {\n    \"service_worker\": \"service-worker.js\",\n    \"type\": \"module\"\n},\n```\n\nThen, follow the [Node SDK documentation](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/) for further usage.\n\nYou can also react to events available in the background scripts using the [Chrome API](https://developer.chrome.com/docs/extensions/reference/).\n\nThe following example tracks any URL changes:\n\n```\n// If file is copied from node_modules/@rudderstack/analytics-js-service-worker/npm/esm/index.js in extension resources folder\n\nimport { Analytics } from \"./rudderAnalytics.js\";\n\n// If the package is imported directly as umd and then bundled in the background script\n\nimport { Analytics } from \"@rudderstack/analytics-js-service-worker/umd/index.js\";\n\n// If the package is imported directly as es-module and then bundled in the background script\n\nimport { Analytics } from \"@rudderstack/analytics-js-service-worker\";\n```\n\n```\nconst rudderClient = new Analytics(\"<WRITE_KEY>\",\"<DATA_PLANE_URL>/v1/batch\");\n\nchrome.tabs.onUpdated.addListener((tabId, tab) => {\n    if (tab.url) {\n        rudderClient.track({\n            userId: \"123456\",\n            event: \"Event Name\",\n            properties: {\n                data: { url: tab.url },\n            }\n        });\n    }\n});\n```\n\n### Content script\n\nTo use the RudderStack `Analytics` JavaScript SDK as a content script, place it in your Chrome extension resources by following either of these approaches:\n\n*   Download the file and place it as a part of the resources.\n*   Use a JS bundler and bundle it as part of your content script.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You need to enable relevant permissions in the manifest file according to the required capabilities and allowed connections.\n\n```\n\"permissions\": [\"storage\", \"tabs\"],\n\"host_permissions\": [\n    \"https://*.dataplane.rudderstack.com/*\",\n    \"https://*.rudderlabs.com/*\",\n    \"*://*/*\"\n],\n\"externally_connectable\": {\n    \"matches\": [\n        \"https://*.dataplane.rudderstack.com/*\",\n        \"https://*.rudderlabs.com/*\"\n    ]\n}\n```\n\nThen, follow the [SDK documentation](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) for further usage.\n\nYou can also react to events available in both the content and background scripts by leveraging the [Chrome API](https://developer.chrome.com/docs/extensions/reference/).\n\nThe following sample scripts help you track any URL changes:\n\n```\n# prepend the JS SDK file here\nrudderanalytics.load(\"<WRITE_KEY>\", \"<DATA_PLANE_URL>\");\n\nchrome.runtime.onMessage.addListener((obj, sender, response) => {\n    const { type, value } = obj;\n\n    if (type === \"trackURL\") {\n        rudderanalytics.track(\"URL change\", { url: value });\n    }\n});\n```\n\n```\nchrome.tabs.onUpdated.addListener((tabId, tab) => {\n    if (tab.url) {\n        chrome.tabs.sendMessage(tabId, {\n            type: \"trackURL\",\n            value: {\n                url: tab.url\n            },\n        });\n    }\n});\n```\n\n## Usage in serverless runtimes\n\nYou can use the JavaScript SDK in serverless runtimes like Cloudflare workers or Vercel Edge functions.\n\n### Cloudflare worker\n\nTo use the JavaScript SDK service worker in Cloudflare workers, start with the [sample](https://developers.cloudflare.com/workers/get-started/guide/) and integrate the SDK in the `worker.js` file:\n\n```\nimport { Analytics } from '@rudderstack/analytics-js-service-worker';\n\nconst rudderClient = new Analytics(\n  \"<WRITE_KEY>\",\n  \"<DATA_PLANE_URL>/v1/batch\",\n  {\n    flushAt: 1\n  }\n);\n```\n\nThen, use the JavaScript SDK within the `fetch` methods with promisified flush:\n\n```\nconst flush = () => new Promise((resolve) => rudderClient.flush(resolve));\n\nrudderClient.track({\n  userId: '123456',\n  event: 'test cloudflare worker',\n  properties: {\n    data: {\n      url: 'test cloudflare worker',\n    },\n  },\n});\n\nawait flush();\n```\n\nFor more information, see this [sample implementation](https://github.com/rudderlabs/rudder-sdk-js/tree/main/examples/serverless/cloudflare-worker).\n\n### Vercel Edge\n\nTo use the JavaScript SDK service worker in Vercel Edge functions, start with the [sample](https://vercel.com/docs/functions/edge-functions/quickstart) and integrate the SDK in the `app/api/edge-function-sample/route.ts` file:\n\n```\nimport { Analytics } from '@rudderstack/analytics-js-service-worker';\n\nconst rudderClient = new Analytics(\n  \"<WRITE_KEY>\",\n  \"<DATA_PLANE_URL>/v1/batch\",\n  {\n    flushAt: 1\n  }\n);\n```\n\nThen, use the JavaScript SDK within the `fetch` methods as usual:\n\n```\nrudderClient.track({\n  userId: '123456',\n  event: 'test vercel edge worker',\n  properties: {\n    data: {\n      url: 'test vercel edge worker',\n    },\n  }\n});\n```\n\nFor more information, see this [sample implementation](https://github.com/rudderlabs/rudder-sdk-js/tree/main/examples/serverless/vercel-edge).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "JavaScript SDK Service Worker | RudderStack Docs",
  "description": "Use the JavaScript SDK service worker in browser extensions and serverless runtime.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/freshdesk/",
  "markdown": "# Freshdesk | RudderStack Docs\n\nSync data from Freshdesk to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Freshdesk](https://freshdesk.com/) is a popular customer support software which provides cutting-edge, cross-channel customer support features including bots and various other self-service solutions.\n\nThis document guides you in setting up Freshdesk as a source in RudderStack. Once configured, RudderStack automatically ingests your specified Freshdesk data, which can then be routed to your RudderStack-supported data warehouse destination.\n\n## Getting Started\n\nTo set up Freshdesk as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Freshdesk** from the list of sources.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\nTo set up Freshdesk as a Cloud Extract source, you need to configure the following settings:\n\n[![Freshdesk credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/freshdesk-connection-settings-4.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/freshdesk-connection-settings-4.webp)\n\n*   **Domain**: Enter your Freshdesk domain from the URL (for example, `test.freshdesk.com`).\n*   **API Key**: Enter your Freshdesk API key. Refer to the [FAQ](#faq) section for more information on obtaining the API key.\n*   **Requests per minute**: Enter the number of requests that Freshdesk can use per minute. The rate limit **does not allow** more than 50 requests per minute per app per Freshdesk account.\n*   **Start Date**: Enter the date from which RudderStack should import your historical Freshdesk data.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Freshdesk to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Freshdesk data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Freshdesk:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the Freshdesk data you want to ingest by selecting the required resources:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/freshdesk-resources.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/freshdesk-resources.webp)\n\nThe below table mentions the syncs and API endpoints supported by these resources from Freshdesk to your warehouse destination:\n\n| Resource | Supported sync mode | Primary key | Freshdesk API endpoint |     |\n| --- | --- | --- | --- | --- |\n| `time_entries` | Full Refresh | `id` | `/time_entries` |     |\n| `tickets` | Incremental | `id` | `/tickets` |     |\n| `ticket_fields` | Full Refresh | `id` | `/ticket_fields` |     |\n| `surveys` | Full Refresh | `id` | `/surveys` |     |\n| `solution_folders` | Full Refresh | `id` | `/solutions/categories/[id]/folders` |     |\n| `solution_categories` | Full Refresh | `id` | `/solutions/categories` |     |\n| `solution_articles` | Full Refresh | `id` | `/solutions/folders/[id]/articles` |     |\n| `sla_policies` | Full Refresh | `id` | `/sla_policies` |     |\n| `settings` | Full Refresh | `primary_language` | `/settings/helpdesk` |     |\n| `scenario_automations` | Full Refresh | `id` | `/scenario_automations` |     |\n| `satisfaction_ratings` | Incremental | `id` | `/surveys/satisfaction_ratings` |     |\n| `roles` | Full Refresh | `id` | `/roles` |     |\n| `products` | Full Refresh | `id` | `/products` |     |\n| `groups` | Full Refresh | `id` | `/groups` |     |\n| `email_mailboxes` | Full Refresh | `id` | `/email/mailboxes` |     |\n| `email_configs` | Full Refresh | `id` | `/email_configs` |     |\n| `discussion_topics` | Full Refresh | `id` | `/discussions/forums/[id]/topics` |     |\n| `discussion_forums` | Full Refresh | `id` | `/discussions/categories/[category_id]/forums` |     |\n| `discussion_comments` | Full Refresh | `id` | `/discussions/topics/[id]/comments` |     |\n| `discussion_categories` | Full Refresh | `id` | `/discussions/categories` |     |\n| `conversations` | Semi-Incremental | `id` | `/tickets/[id]/conversations` |     |\n| `contacts` | Incremental | `id` | `/contacts` |     |\n| `companies` | Full Refresh | `id` | `/companies` |     |\n| `canned_responses` | Full Refresh | `id` | `/canned_response_folders/[id]/responses` |     |\n| `canned_response_folders` | Full Refresh | `id` | `/canned_response_folders` |     |\n| `business_hours` | Full Refresh | `id` | `/business_hours` |     |\n| `agents` | Full Refresh | `id` | `/agents` |     |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh**, **Semi-Incremental**, and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\nFreshdesk is now configured as a source. RudderStack will start ingesting data from Freshdesk as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\n#### Where can I find the Freshdesk API Key?\n\nTo get your Freshdesk API key, follow these steps:\n\n1.  Log into your [Freshdesk account](https://freshdesk.com/login).\n2.  Click your profile in the top right section of the dashboard and go to **Profile Settings**.\n3.  You can find the Freshdesk API key in the right sidebar:\n\n[![Freshdesk API key](https://www.rudderstack.com/docs/images/cloud-extract-sources/freshdesk-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/freshdesk-connection-settings-2.webp)\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Freshdesk | RudderStack Docs",
  "description": "Sync data from Freshdesk to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/google-adwords/",
  "markdown": "# Google Ads | RudderStack Docs\n\nSync data from Google Ads to your warehouse destination via RudderStack.\n\n* * *\n\n*     5 minute read  \n    \n\n[Google Ads](https://ads.google.com/intl/en_in/home/) is Google’s premier online advertising platform that lets advertisers display their advertisements, service offerings, and product listings to prospective customers.\n\nThis document guides you in setting up Google Ads as a source in RudderStack. Once configured, RudderStack automatically ingests your specified Google Ads data, which can then be routed to your RudderStack-supported data warehouse destination.\n\n## Getting started\n\nTo set up Google Ads as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Google Ads** from the list of sources.\n3.  Assign a name to your source and click **Next**.\n\n### Connection settings\n\n*   Give RudderStack access to your Google Ads account by clicking on the **Sign in with Google** button under **Google Credentials**.\n\n[![Verifying credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/g-ads-connection-settings-1.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/g-ads-connection-settings-1.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you have already connected RudderStack to your Google Ads account, your credentials will appear automatically under **Choose an account**.\n\nThen, configure the following settings to set up the source:\n\n[![Connection settings](https://www.rudderstack.com/docs/images/cloud-extract-sources/g-ads-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/g-ads-connection-settings-2.webp)\n\n*   **Customer ID**: Enter the 10 digit customer ID associated with your Google Ads account **without the dashes**. For more information on obtaining the customer ID, refer to the [FAQ](#faq) section below.\n*   **Start Date**: RudderStack will import all your historical Google Ads data **from** this date.\n*   **End Date**: RudderStack will import all your Google Ads data **till** this date.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The **Start Date** setting is valid only for the first (historical) sync.\n\n*   **Login Customer ID for Managed Accounts**: This is a required field **if** you are using a Google Ads manager account to set up the source. Enter your 10 digit manager account customer ID **without the dashes**.\n*   **Conversion Window**: Enter the [Google Ads conversion window](https://support.google.com/google-ads/answer/3123169?hl=en) duration.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the conversion windows in Google Ads, refer to the [FAQ](#faq) section below.\n\n### Custom GAQL queries\n\nThe **Custom GAQL Queries** option lets you create a custom GAQL query for building a customized Google Ads report. The dashboard settings are described below:\n\n*   **Select resource**: Select the Google Ads API resource from the dropdown.\n*   **Select**: Select the relevant Attributes, Segments and Metrics from the dropdown.\n*   **Destination Table Name**: Specify the table name in your warehouse destination where the results for the above query will be sent.\n\nAs you select the relevant options from the dropdown, you can observe the custom GAQL query displayed in the query box. You can also use the **Reset** and **Edit query** buttons to reset or change the query respectively.\n\n[![Connection settings](https://www.rudderstack.com/docs/images/cloud-extract-sources/g-ads-connection-settings-4.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/g-ads-connection-settings-4.webp)\n\nThe following image shows a sample custom GAQL query:\n\n[![Connection settings](https://www.rudderstack.com/docs/images/cloud-extract-sources/g-ads-connection-settings-5.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/g-ads-connection-settings-5.webp)\n\nYou can also use the [Google Ads Query Builder tool](https://developers.google.com/google-ads/api/fields/v12/query_validator) to validate your queries.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack does not support creating a custom GAQL query for the `click_view` resource as it requires a [filter limiting the results to one day](https://developers.google.com/google-ads/api/fields/v11/click_view). You can use the `clickView` predefined stream instead.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Google Ads to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Google Ads data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Google Ads:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the Google Ads data you want to ingest by selecting the required resources:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/g-ads-connection-settings-3.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/g-ads-connection-settings-3.webp)\n\nThe below table mentions the sync types supported by the Google Ads resources while syncing data to your warehouse destination:\n\n| Resource | Sync type | Primary key |\n| --- | --- | --- |\n| `acccounts` | Full Refresh | `customer.id`  <br>`segments.date` |\n| `account_performance_report` | Incremental | `customer.id`  <br>`segments.date`  <br>`segments.ad_network`  <br>`segments.device` |\n| `ad_groups` | Full Refresh | `ad_group.id`  <br>`segments.date` |\n| `ad_group_ads` | Full Refresh | `ad_group_ad.ad.id`  <br>`segments.date` |\n| `ad_group_ad_labels` | Full Refresh | `ad_group_ad_label.resource_name` |\n| `ad_group_ad_report` | Incremental | \\-  |\n| `ad_group_labels` | Full Refresh | `ad_group_label.resource_name` |\n| `campaigns` | Full Refresh | `campaign.id`  <br>`segments.date` |\n| `campaign_labels` | Full Refresh | `campaign_label.resource_name` |\n| `click_view` | Incremental | `click_view.gclid`  <br>`segments.date`  <br>`segments.ad_network` |\n| `display_topics_performance_report` | Incremental | \\-  |\n| `display_keyword_performance_report` | Incremental | \\-  |\n| `geographic_report` | Incremental | \\-  |\n| `keyword_report` | Incremental | \\-  |\n| `shopping_performance_report` | Incremental | \\-  |\n| `user_location_report` | Incremental | \\-  |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh** and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\n## FAQ\n\n#### Where can I find my Google Ads customer ID?\n\nYou can find your Google Ads customer ID in the top right section of your dashboard:\n\n[![Customer ID](https://www.rudderstack.com/docs/images/cloud-extract-sources/g-ads-customer-id.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/g-ads-customer-id.webp)\n\n#### What is a conversion window in Google Ads?\n\nA conversion window is defined as the time period after the user interacts with an ad (clicks, video views, etc.) during which a conversion is recorded in Google Ads.\n\nYes, it is. RudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Google Ads | RudderStack Docs",
  "description": "Sync data from Google Ads to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/google-analytics/",
  "markdown": "# Google Analytics source | RudderStack Docs\n\nSync data from Google Analytics to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Google Analytics](https://analytics.google.com/analytics/web/#/) is a popular analytics service that lets you track and report your website traffic across a variety of sources.\n\nThis document guides you in setting up Google Analytics as a source in RudderStack. Once configured, RudderStack automatically ingests your Google Analytics data and routes it to your specified data warehouse destination.\n\n## Getting started\n\nTo set up Google Analytics as a Cloud Extract source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Google Analytics** from the list of sources.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\nNext, configure the following dashboard settings:\n\n*   **Credentials**: Choose from one of the following two authentication types:\n    \n    *   **Authenticate via Google (Oauth)**: Authenticate your Google Analytics account via Google (OAuth) by clicking **Sign in with Google** and granting the required permissions.\n    \n    [![Google Analytics credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/ga-oauth-settings.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/ga-oauth-settings.webp)\n    \n    *   **Service Account Key Authentication**: Enter the service account key in JSON format in the **Service Account JSON Key field**. Refer to the [Google documentation](https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys) for more information on obtaining the service account key.\n    \n    [![Google Analytics credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/ga-oauth-settings-4.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/ga-oauth-settings-4.webp)\n    \n\nThe rest of the settings are as follows:\n\n*   **Replication Start Date**: Choose the start date from which you want RudderStack to ingest the Google Analytics data. RudderStack will not replicate any data before this date.\n    \n*   **View ID**: Enter the ID of the Google Analytics View from where you want to fetch the data.\n    \n*   **Custom Reports (Optional)**: Use this field to sync your [custom reports](https://support.google.com/analytics/answer/1033013?hl=en) from Google Analytics. You can sync multiple reports.\n    \n    To add a custom report, click **Add Report** and enter the **Report Name**, **Metrics**, and **Dimensions** as shown:\n    \n    [![Google Analytics credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/ga-custom-report.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/ga-custom-report.webp)\n    \n    You can also edit/delete an existing report:\n    \n    [![Google Analytics credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/edit-custom-report.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/edit-custom-report.webp)\n    \n    [![Google Analytics credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/delete-custom-report.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/delete-custom-report.webp)\n    \n*   **Data request time increment in days (Optional)**: Enter the number of days after which RudderStack should request data from the Google Analytics API. It is recommended to set this value to 1 to avoid getting the [sampled data](https://support.google.com/analytics/answer/2637192#zippy=%2Cin-this-article). The minimum and maximum allowed values for this field are 1 and 364 respectively.\n    \n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Google Analytics to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Google Analytics data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Google Analytics:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the predefined reports from which you want to ingest the data from Google Analytics by selecting them here:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/ga-resources.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/ga-resources.webp)\n\nThe below table mentions the syncs supported by these resources from Google Analytics to your warehouse destination:\n\n| Resource | Full Refresh sync | Incremental sync |\n| --- | --- | --- |\n| `weekly_active_users` | Yes | Yes |\n| `website_overview` | Yes | Yes |\n| `two_weekly_active_users` | Yes | Yes |\n| `traffic_sources` | Yes | Yes |\n| `pages` | Yes | Yes |\n| `monthly_active_users` | Yes | Yes |\n| `locations` | Yes | Yes |\n| `four_weekly_active_users` | Yes | Yes |\n| `devices` | Yes | Yes |\n| `daily_active_users` | Yes | Yes |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh** and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To sync the data in incremental mode, you must include the `ga:date` dimension in your report. Otherwise, RudderStack will sync the data in full refresh mode.\n\nGoogle Analytics is now configured as a source. RudderStack will start ingesting data from Google Analytics as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Google Analytics source | RudderStack Docs",
  "description": "Sync data from Google Analytics to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/google-analytics-4/",
  "markdown": "# Google Analytics 4 source | RudderStack Docs\n\nSync data from Google Analytics 4 to your warehouse destination via RudderStack.\n\n* * *\n\n*     5 minute read  \n    \n\n[Google Analytics 4](https://analytics.google.com/) is an analytics service that enables you to measure traffic and engagement across your websites and apps.\n\nThis document guides you in setting up Google Analytics 4 as a source in RudderStack. Once configured, RudderStack automatically ingests your Google Analytics 4 data and routes it to your specified data warehouse destination.\n\n## Getting started\n\nTo set up Google Analytics 4 as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Google Analytics 4** from the list of sources.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\nNext, configure the following dashboard settings:\n\n*   **Credentials**: From the dropdown, select the authentication mechanism for RudderStack to connect to the Google Analytics 4 API.\n    *   **Authenticate via Google (OAuth)**: To authenticate via OAuth, click the **Sign in with Google** button, select your Google account, and give RudderStack the required permissions.\n    *   **Service Account Key Authentication**: Enter your [service account](https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating) JSON credentials in the **Service Account Information** field.\n\n[![Google Analytics 4 authentication](https://www.rudderstack.com/docs/images/cloud-extract-sources/google-analytics-4-connection-settings-1.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/google-analytics-4-connection-settings-1.webp)\n\nThe other settings are as follows:\n\n[![Google Analytics 4 dashboard settings](https://www.rudderstack.com/docs/images/cloud-extract-sources/google-analytics-4-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/google-analytics-4-connection-settings-2.webp)\n\n*   **Property ID**: Specify the [Google Analytics 4 property identifier](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id) whose events are tracked.\n*   **Date Range Start Date**: Choose the start date from which you want RudderStack to ingest the Google Analytics 4 data. RudderStack will not replicate any data before this date.\n*   **Custom Reports**: Use this setting to sync your custom [Google Analytics 4 reports](https://support.google.com/analytics/answer/10445879?hl=en). To add a custom report, click **Add Report** and specify the **Report Name**, **Metrics**, and **Dimensions**:\n\n[![Google Analytics 4 custom reports](https://www.rudderstack.com/docs/images/cloud-extract-sources/google-analytics-4-custom-report.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/google-analytics-4-custom-report.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can sync multiple reports, and edit or delete a custom report.\n\n*   **Data request time increment in days**: Enter the number of days after which RudderStack requests data from the Google Analytics 4 API. The minimum and maximum allowed values for this field are 1 and 364 respectively.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> It is highly recommended to set this value to 1. A higher value will lead to faster syncs, but it is more likely to apply sampling on your data, causing potential inaccuracies in the results.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Google Analytics 4 to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Google Analytics 4 data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Google Analytics 4:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the predefined Google Analytics 4 reports from which you want to ingest the data by selecting them in this window:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/google-analytics-4-data-import-settings.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/google-analytics-4-data-import-settings.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Any custom reports configured using the **Custom Reports** dashboard setting will also be shown here.\n\nThe below table mentions the sync types supported by the Google Analytics 4 resources while syncing data to your warehouse destination:\n\n| Resource | Sync type | Primary key |\n| --- | --- | --- |\n| `daily_active_users` | Incremental | `uuid` |\n| `devices` | Incremental | `uuid` |\n| `four_weekly_active_users` | Incremental | `uuid` |\n| `locations` | Incremental | `uuid` |\n| `pages` | Incremental | `uuid` |\n| `traffic_sources` | Incremental | `uuid` |\n| `website_overview` | Incremental | `uuid` |\n| `weekly_active_users` | Incremental | `uuid` |\n\nFor syncing all reports, RudderStack uses the `analyticsdata.googleapis.com/v1beta/{property_id}/runReport` API.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This source only supports **Incremental** reports with **date** as a required dimension.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Incremental** sync mode, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\nGoogle Analytics 4 is now configured as a source. RudderStack will start ingesting data from Google Analytics 4 as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking the **Add Destination** button:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n#### Why am I getting a `403 Client Error` while setting up the Google Analytics 4 source?\n\nYou must assign the following permissions in Google Analytics 4 to set it up as an Extract source successfully:\n\n```\nconst scope_google_analytics = [\n  'https://www.googleapis.com/auth/userinfo.profile',\n  'https://www.googleapis.com/auth/userinfo.email',\n  'https://www.googleapis.com/auth/analytics.readonly',\n];\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Google Analytics 4 source | RudderStack Docs",
  "description": "Sync data from Google Analytics 4 to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/google-search-console/",
  "markdown": "# Google Search Console | RudderStack Docs\n\nSync data from Google Search Console to your warehouse destination via RudderStack.\n\n* * *\n\n*     5 minute read  \n    \n\n[Google Search Console](https://search.google.com/search-console/about) is Google’s web service that allows webmasters to check the indexing status of websites and optimize their visibility. It offers tools and reports to measure and optimize your website’s search traffic, performance, content, and fix issues.\n\nThis document guides you in setting up Google Search Console as a source in RudderStack. Once configured, RudderStack automatically ingests your Google Search Console data and routes it to your specified data warehouse destination.\n\n## Getting started\n\nTo set up Google Search Console as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Google Search Console V2** from the list of sources.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\nNext, configure the following dashboard settings:\n\n*   **Authentication Type**: Choose one of the following authentication types:\n    \n    *   **OAuth**: Authenticate your Google Search Console account via Google (OAuth) by clicking the **Sign in with Google** button and granting the required permissions.\n    \n    [![Google Analytics credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/gsc-oauth-settings.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/gsc-oauth-settings.webp)\n    \n    *   **Service Account Key Authentication**: Authenticate your Google Search Console account by using your Google service account:\n        *   **Service Account JSON Key**: Enter the service account key in JSON format in the field. Refer to the [Google documentation](https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys) for more information on obtaining the service account key.\n        *   **Admin Email**: Enter the email associated with your service account.\n    \n    [![Google Analytics credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/gsc-auth-settings-1.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/gsc-auth-settings-1.webp)\n    \n\nThe rest of the settings are as follows:\n\n[![SendGrid credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/gsc-connection-settings-1.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/gsc-connection-settings-1.webp)\n\n*   **Website URL Property**: Enter the URL of the website for which you want to fetch data. Make sure you use the **exact URL** of the website as specified in the Google Search Console. Refer to the [Google documentation](https://support.google.com/webmasters/answer/34592?hl=en) for more information on adding the website URL property.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you are using a domain property in the Google Search Console, you must prefix the site URL with `sc-domain:`. For example, if the website URL is `http://www.example.com/`, then `http://www.example.com/` is a URL-prefix property and `sc-domain:example.com` is a domain property.\n\n*   **Start Date**: Specify the date from which RudderStack should import your Google Search Console data.\n*   **End Date**: Specify the date till which RudderStack should import your Google Search Console data .\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack will not replicate any data **after** this date. Do not set this field if you want RudderStack to sync the most recent Google Search Console data.\n\n*   **Custom Reports (Optional)**: Use this field to sync your [custom reports](https://support.google.com/analytics/answer/1033013?hl=en) from Google Search Console. You can sync multiple reports.\n    \n    To add a custom report, click **Add Report** and enter the **Report Name** and **Dimensions** as shown:\n    \n    [![Google Analytics credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/gcs-custom-report.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/gcs-custom-report.webp)\n    \n    You can also edit/delete an existing report:\n    \n    [![Google Analytics credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/gcs-edit-custom-report.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/gcs-edit-custom-report.webp)\n    \n    [![Google Analytics credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/gcs-delete-custom-report.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/gcs-delete-custom-report.webp)\n    \n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Google Search Console to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Google Search Console data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Google Search Console:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the Google Search Console data you want to ingest by selecting the required resources:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/gcs-resources.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/gcs-resources.webp)\n\nThe below table mentions the syncs and API endpoints supported by these resources from Google Search Console to your warehouse destination:\n\n| Resource | Full Refresh sync | Incremental sync | Google Search Console API endpoint |\n| --- | --- | --- | --- |\n| `sites` | Yes | No  | `/sites/get` |\n| `sitemaps` | Yes | No  | `/sitemaps/list` |\n| `search_analytics_by_query` | No  | Yes | `/searchAnalytics/query` |\n| `search_analytics_by_page` | No  | Yes | `/searchAnalytics/query` |\n| `search_analytics_by_device` | No  | Yes | `/searchAnalytics/query` |\n| `search_analytics_by_date` | No  | Yes | `/searchAnalytics/query` |\n| `search_analytics_by_country` | No  | Yes | `/searchAnalytics/query` |\n| `search_analytics_all_fields` | No  | Yes | `/searchAnalytics/query` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh** and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\nGoogle Search Console is now configured as a source. RudderStack will start ingesting data from Google Search Console as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Google Search Console | RudderStack Docs",
  "description": "Sync data from Google Search Console to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/google-sheets/",
  "markdown": "# Google Sheets | RudderStack Docs\n\nSync data from Google Sheets to your warehouse destination via RudderStack.\n\n* * *\n\n*     5 minute read  \n    \n\n[Google Sheets](https://www.google.com/sheets/about/) is a popular spreadsheet program that lets you create and manage your spreadsheets.\n\nThis document guides you in setting up Google Sheets as a source in RudderStack. Once configured, RudderStack automatically ingests your Google Sheets data and routes it to your specified data warehouse destination.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   All the Cloud Extract sources support sending data only to a [data warehouse destination](https://www.rudderstack.com/docs/destinations/warehouse-destinations/).\n> *   This source **does not support** shared drives, currently.\n\n## Getting started\n\nTo set up Google Sheets as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Google Sheets** from the list of sources.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\nNext, configure the following dashboard settings:\n\n[![Configuring Google Sheets](https://www.rudderstack.com/docs/images/cloud-extract-sources/googlesheets-beta-connection-settings.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/googlesheets-beta-connection-settings.webp)\n\n*   **Authentication**: From the dropdown, select the authentication mechanism for RudderStack to connect to the Google Sheets API.\n    *   **Authenticate via Google (OAuth)**: To authenticate via OAuth, click the **Sign in with Google** button, select your Google account, and give RudderStack the required permissions.\n    *   **Service Account Key Authentication**: Enter your [service account](https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating) JSON credentials in the **Service Account Information** field.\n*   **Spreadsheet Link**: Enter the spreadsheet’s URL from which RudderStack should ingest and sync the data.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> *   For the **Authenticate via Google (OAuth)** authentication option, RudderStack will automatically populate all spreadsheets associated with the account.\n> *   For the **Service Account Key Authentication** option, you need to first provide access to the required spreadsheet. **Only the spreadsheets for which you provide the access will be listed in the dropdown**. For more information, refer to the [FAQ](#faq) section below.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Google Sheets to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Google Sheets data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Google Sheets:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can specify the Google Sheets data you want to sync by selecting the required sheet. You can also sync data from multiple sheets within the spreadsheet:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/googlesheets-beta-sheet.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/googlesheets-beta-sheet.webp)\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack considers the first row of each sheet as the header. Empty sheets or sheets with an empty header will **not** be reflected in the **Select data to import** window.\n\nYou can also define the sync mode for each data resource you want to send to the destination. Click **Edit resources configuration** and specify the destination sync mode for the selected resource(s):\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/edit-resources-googlesheets.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/edit-resources-googlesheets.webp)\n\n*   **Overwrite**: RudderStack adds new rows in the warehouse destination and deletes the rows from previous syncs. This is the default sync mode.\n*   **Append and deduplicate**: RudderStack adds new rows and updates modified records in the warehouse destination in each sync.\n\nThe following destinations support the above sync modes:\n\n*   Snowflake\n*   Postgres\n*   MySQL\n*   BigQuery\n\nGoogle Sheets is now configured as a source. RudderStack will start ingesting data from Google Sheets as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking the **Add Destination** button:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## How RudderStack syncs data to the warehouse\n\nIf you select multiple sheets in the **Select data to import** window, RudderStack creates multiple tables (corresponding to each sheet) in the warehouse.\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/googlesheets-beta-sheet.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/googlesheets-beta-sheet.webp)\n\nIn the above example, RudderStack creates a table corresponding to each sheet (`List of Tracking Plans`, `Import Template`, and so on) in the warehouse.\n\nWhile syncing data to the warehouse, RudderStack creates columns only for the headers (first rows in the sheet) which also have data present in the second row (mandatory) and beyond (optional).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The mere presence of a header **does not** create a column in the destination.\n\n## FAQ\n\n#### How do I provide service account access to a Google sheet?\n\nIf you’re using a [service account](https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating) to authenticate RudderStack to sync your Google Sheets data, you must also give the required access to the service account to access the required spreadsheet. Follow these steps to provide access to the required spreadsheet:\n\n1.  In your [Google Cloud console](https://console.cloud.google.com/), go to **APIs & Services** > **Credentials**.\n2.  Under **Service Accounts**, copy the email address listed under **Email**.\n\n[![Service account email](https://www.rudderstack.com/docs/images/cloud-extract-sources/googlesheets-beta-service-account-email.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/googlesheets-beta-service-account-email.webp)\n\n3.  Go to the spreadsheet, click the **Share** button and paste the email copied above. Specify the permission you want to assign to this email.\n\n[![Service account permissions](https://www.rudderstack.com/docs/images/cloud-extract-sources/googlesheets-beta-service-account-permissions.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/googlesheets-beta-service-account-permissions.webp)\n\n4.  Finally, click the **Send** button.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you get the **Share outside of organization** popup, click **Share anyway**.\n\nThe Google sheet will now be accessible in the dropdown. RudderStack can now access the sheet and sync the data from it.\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Google Sheets | RudderStack Docs",
  "description": "Sync data from Google Sheets to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/intercom/",
  "markdown": "# Intercom source | RudderStack Docs\n\nSync data from Intercom to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Intercom](https://www.intercom.com/) is an industry-leading, real-time business messaging platform, that allows you to bring together and manage all your customer life cycle activities on a single platform.\n\nThis document guides you in setting up Intercom as a source in RudderStack. Once configured, RudderStack automatically ingests your Intercom data and routes it to your specified data warehouse destination.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This source supports **Intercom API v2.1 and above**.\n\n## Getting started\n\nTo set up Intercom as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Intercom** from the list of sources.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\nNext, configure the following dashboard settings:\n\n[![Configuring Intercom](https://www.rudderstack.com/docs/images/cloud-extract-sources/intercomv2-3.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/intercomv2-3.webp)\n\n*   Authenticate RudderStack with Intercom by clicking the **Connect with Intercom** button.\n*   **Start Date**: Enter the date from which RudderStack should ingest the Intercom data. RudderStack will not replicate any data before this date.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Intercom to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Intercom data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Intercom:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the Intercom data you want to ingest by selecting the required resources:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/intercomv2-5.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/intercomv2-5.webp)\n\nThe below table mentions the sync types supported by the Intercom resources while syncing data to your warehouse destination:\n\n| Resource | Sync type | Primary key | Intercom API endpoint |\n| --- | --- | --- | --- |\n| `admins` | Full Refresh | `id` | `/admins` |\n| `companies` | Incremental | `id` | `/companies/scroll` |\n| `company segments` | Incremental | `id` | `/companies/<id>/segments` |\n| `company attributes` | Full Refresh | `name` | `/data_attributes?model=company` |\n| `conversations` | Incremental | `id` | `/conversations` |\n| `conversation parts` | Incremental | `id` | `/conversations/<id>` |\n| `contacts` | Incremental | `id` | `/contacts` |\n| `contact attributes` | Full Refresh | `name` | `/data_attributes?model=contact` |\n| `segments` | Incremental | `id` | `/segments` |\n| `tags` | Full Refresh | `name` | `/tags` |\n| `teams` | Full Refresh | `name` | `/teams` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh**, **Semi-Incremental**, and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\n## Troubleshooting\n\n### Sync errors for older Intercom API versions\n\nFor Intercom versions less than **2.1**, data syncs to the warehouse destination will fail and throw an error. This is because many Intercom resources are not supported by the older API versions.\n\nIn such a scenario, it is highly recommended to updated your Intercom API.\n\n## FAQ\n\nYes, it is - RudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\n#### My data syncs are failing. What should I do?\n\nIf your data syncs are failing, verify if your Intercom version is **2.1** or above. For versions less than 2.1, data syncs to the warehouse destination will fail. This is because many Intercom resources are not supported by the older API versions. In this scenario, you will need to update your Intercom API.\n\nFor more information on updating your Intercom API version, refer to the [Intercom support page](https://developers.intercom.com/building-apps/docs/update-your-api-version).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you are using Intercom 2.1 or above and are facing this issue, contact us via [email](mailto:%20support@rudderstack.com) or [Slack](https://rudderstack.com/join-rudderstack-slack-community).\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Intercom source | RudderStack Docs",
  "description": "Sync data from Intercom to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/common-settings/",
  "markdown": "# Common settings | RudderStack Docs\n\nTable prefix, schedule settings, and sync modes for configuring Extract sources.\n\n* * *\n\n*     4 minute read  \n    \n\nThis guide covers the common destination-specific settings to be configured while setting up your Cloud Extract sources. Common settings include: table prefix, schedule settings, and sync modes.\n\n[![Sendgrid destination settings](https://www.rudderstack.com/docs/images/cloud-extract-sources/sendgrid-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/sendgrid-connection-settings-2.webp)\n\n## Table prefix\n\nRudderStack uses your specified table prefix to create a table named `prefix_table_name` in your data warehouse and load all imported source data into it.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you do not specify a prefix, RudderStack creates a table in your warehouse as `table_name`, where `table_name` refers to the resource you are importing.\n\nFor example, if you set the prefix to `rs_` and the resource you are importing is named `valid_emails`, then RudderStack creates the table `rs_valid_emails` in the warehouse.\n\n## Schedule settings\n\nRudderStack lets you set a schedule for importing data from your Cloud Extract sources while setting them up in your dashboard. It lets you specify the schedule type that defines how and when the syncs will run.\n\nRudderStack supports the following three schedule types:\n\n| Schedule type | Description |\n| --- | --- |\n| Basic | Run syncs at a given time interval and specified time. |\n| CRON | Run syncs based on a CRON expression defined by the user. |\n| Manual | Run syncs manually. |\n\n### Basic\n\nThis schedule type lets you run the data syncs at a set interval. You can specify the sync frequency as well as the time(in UTC) when you want the sync to start.\n\n[![Basic sync schedule](https://www.rudderstack.com/docs/images/warehouse-actions-sources/sync-schedule-basic.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/sync-schedule-basic.webp)\n\n*   **Frequency**: You can choose the data sync frequency from the following options:\n    \n    *   15 minutes\n    *   30 minutes\n    *   1 hour\n    *   3 hours\n    *   6 hours\n    *   12 hours\n    *   24 hours\n*   **Sync Starting At**: Specify the time at which the data sync should start.\n    \n\n### CRON\n\nThis schedule type lets you define a custom CRON expression and runs the data syncs based on this setting.\n\n[![CRON schedule](https://www.rudderstack.com/docs/images/warehouse-actions-sources/sync-schedule-cron.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/sync-schedule-cron.webp)\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The sync frequency specified under **Run Settings** needs to be greater than or equal to 15 minutes. Otherwise, you will encounter an error as shown below:\n\n[![CRON schedule error](https://www.rudderstack.com/docs/images/warehouse-actions-sources/sync-schedule-cron-error.webp)](https://www.rudderstack.com/docs/images/warehouse-actions-sources/sync-schedule-cron-error.webp)\n\n### Manual\n\nThis schedule type lets you run your data syncs manually. RudderStack won’t sync the data until you explicitly trigger it.\n\nTo trigger a sync manually, go to the **Syncs** tab in your Cloud Extract source details page and click **Sync Now**:\n\n[![Manual sync schedule](https://www.rudderstack.com/docs/images/cloud-extract-sources/sync-schedule-manual.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/sync-schedule-manual.webp)\n\n## Sync modes\n\nA sync mode determines how RudderStack reads the data from a source and writes to a warehouse destination. RudderStack supports the following sync modes:\n\n### Full Refresh\n\nIn this mode, RudderStack retrieves **all** the available information from the source, **regardless** of whether it has been synced previously.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In this mode, RudderStack replaces all existing data with the new data.\n\n### Incremental\n\nIn this mode, RudderStack syncs or replicates only the new or modified data starting from the date specified in the **Start date** RudderStack dashboard setting. It does not replicate the data that has been already synced before.\n\nDuring the incremental syncs, RudderStack only updates the the existing rows that have been modified as opposed to adding a new version of the row with the updated data.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Any resource that supports the **Incremental** sync mode also supports **Full Refresh**, by default.\n> \n> *   If you want to do a Full Refresh sync only for particular Incremental resources, then [contact the RudderStack team](mailto:support@rudderstack.com). This is helpful in cases where your destination’s data gets corrupted or you want to sync your data all over again.\n> *   If you want to do a Full Refresh sync for all the resources associated with an Extract source, then change the **Start date** setting in your existing source configuration. Refer to the [FAQ](#how-do-i-force-a-full-refresh-sync-for-all-the-resources) section for more information.\n\n### Semi-Incremental\n\nThis sync mode is a combination of **Full Refresh** and **Incremental** sync modes. RudderStack reads all data from the source and filters it to sync only the new or modified data starting from the date specified in the **Start Date** RudderStack dashboard setting.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The data synced in the **Semi-Incremental** mode is exactly the same as in the **Incremental mode**. The only difference is that in the **Semi-Incremental** mode, RudderStack internally filters the data to be synced instead of the source API.\n\n## FAQ\n\n#### Can I change my sync schedule type?\n\nYes, you can.\n\n1.  Go to the **Settings** tab in your Cloud Extract source details page and click **Edit sync schedule** option:\n\n[![Syncs schedule settings change](https://www.rudderstack.com/docs/images/cloud-extract-sources/sync-schedule-settings-change.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/sync-schedule-settings-change.webp)\n\n2.  Then, select your new sync schedule type.\n\n#### What happens if I don’t set the Sync Starting At time?\n\nRudderStack considers strict time windows to schedule syncs if you do not explicitly set the time under **Sync Starting At**.\n\nSuppose you create a source at 12:30 hrs UTC, specify the **Frequency** as 3 hours, and do not specify any time under **Sync Starting At**. In this case, as the time falls in the 12:00-13:00 time window, RudderStack will run the next sync at 15:00 hrs UTC (12:00 + 03:00 = 15:00 hrs).\n\n#### How do I force a Full Refresh sync for all the resources?\n\nTo force a [Full Refresh](#full-refresh) sync for **all** the resources supported by the Extract source, change the **Start date** setting in your existing source configuration.\n\n[![Update Extract source configuration](https://www.rudderstack.com/docs/images/cloud-extract-sources/extract-update-configuration.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/extract-update-configuration.webp)\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Disconnecting and reconnecting an Extract source to a warehouse destination does not force a full sync.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Common settings | RudderStack Docs",
  "description": "Table prefix, schedule settings, and sync modes for configuring Extract sources.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/klaviyo/",
  "markdown": "# Klaviyo source | RudderStack Docs\n\nSync data from Klaviyo to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Klaviyo](https://www.klaviyo.com/) is a powerful ecommerce platform that lets you boost your business revenue. It offers features like trend reports, cohort analysis, and various options for boosting customer engagement.\n\nThis document guides you in setting up Klaviyo as a source in RudderStack. Once configured, RudderStack automatically ingests your Klaviyo data and routes it to your specified data warehouse destination.\n\n> ![danger](https://www.rudderstack.com/docs/images/danger.svg)\n> \n> **This source uses the legacy Klaviyo v1 API which is [scheduled to retire](https://developers.klaviyo.com/en/v1-2/reference/api-overview) on June 30, 2024.**\n> \n> Using the [Klaviyo v2](https://www.rudderstack.com/docs/sources/extract/klaviyo-v2/) source that leverages the latest and most stable version of the Klaviyo API is strongly recommended.\n\n## Getting started\n\nTo set up Klaviyo as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Klaviyo** from the list of sources.\n3.  Assign a name to your source and click **Next**.\n\n### Connection settings\n\nEnter the following connection settings to set up the Klaviyo source:\n\n[![Klaviyo connection settings](https://www.rudderstack.com/docs/images/cloud-extract-sources/klaviyo-connection-settings.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/klaviyo-connection-settings.webp)\n\nThe connection settings are described below:\n\n*   **API Key** : Enter your Klaviyo Private API key. You can find it in your Klaviyo dashboard by clicking your organization name and going to **Account & billing** > **Settings** > **API Keys**.\n\n*   **Start Date**: Select the date from when RudderStack ingests your Klaviyo data.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack will **not replicate** any data before this date.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Klaviyo to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Klaviyo data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Klaviyo:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the Klaviyo data you want to ingest by selecting the required resources:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/klaviyo-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/klaviyo-connection-settings-2.webp)\n\nThe below table mentions the syncs and API endpoints supported by these resources from Klaviyo to your warehouse destination:\n\n| Resource | Full Refresh sync | Incremental sync | Primary key | Klaviyo API endpoint |\n| --- | --- | --- | --- | --- |\n| `campaigns` | Yes | No  | `id` | `/campaigns` |\n| `events` | Yes | Yes | `id` | `/metrics/timeline` |\n| `flows` | Yes | Yes | `id` | `/flows` |\n| `global_exclusions` | Yes | No  | `email` | `/people/exclusions` |\n| `lists` | Yes | No  | `id` | `/lists` |\n| `metrics` | Yes | No  | `id` | `/metrics` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh** and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\nKlaviyo is now configured as a source. RudderStack will start ingesting data from Klaviyo as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\n#### Can I connect my Klaviyo source to multiple data warehouse destinations?\n\nYou can connect **only one data warehouse destination** per Cloud Extract source. If you wish to send data to multiple warehouses, you can configure multiple Cloud Extract sources with the same settings and connect them to each data warehouse.\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Klaviyo source | RudderStack Docs",
  "description": "Sync data from Klaviyo to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/zendesk-support/",
  "markdown": "# Zendesk Support | RudderStack Docs\n\nSync data from Zendesk Support to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Zendesk Support](https://support.zendesk.com/hc/en-us) is a popular ticketing system and support platform. It lets you offer customer support through various mediums such as email, mobile, social media, and voice.\n\nThis document guides you in setting up Zendesk Support as a source in RudderStack. Once configured, RudderStack automatically ingests your Zendesk Support data and routes it to your specified data warehouse destination.\n\n## Getting started\n\nTo set up Zendesk Support as a source in RudderStack, follow these steps:\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Collect** > **Sources** > **New Source** > **Cloud Extract**. From the list of sources, select **Zendesk Support**.\n3.  Assign a name to your source and click **Continue**.\n\n## Connection settings\n\n*   **Start Date**: Choose the start date from which you want RudderStack to ingest the Zendesk Support data. RudderStack will not replicate any data before this date.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you do not specify the start date, RudderStack will replicate all your data by default.\n\n*   **Subdomain**: Enter the subdomain from your Zendesk account’s URL. For example, if your Zendesk account URL is `sample.zendesk.com`, the subdomain would be `sample`.\n*   **Authentication**: Select an authentication method from the dropdown:\n    *   **OAuth2.0**: Click **Connect with Zendesk Support** to authenticate your account.\n    *   **API token**: Enter the **Email** used to log in to the Zendesk account and the **API token**. See [Zendesk documentation](https://support.zendesk.com/hc/en-us/articles/4408889192858-Generating-a-new-API-token) for more details on obtaining the API Token.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the ingested data from Zendesk Support to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Zendesk Support data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Zendesk Support:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Select data to import\n\nYou can import specific Marketo data by selecting the required resources:\n\n| Resource | Sync type |\n| --- | --- |\n| `audit_logs` | Semi-Incremental |\n| `automations` | Semi-Incremental |\n| `brands` | Full Refresh |\n| `custom_roles` | Full Refresh |\n| `group_memberships` | Semi-Incremental |\n| `groups` | Full Refresh, Incremental |\n| `macros` | Full Refresh, Incremental |\n| `organizations` | Full Refresh, Incremental |\n| `organization_memberships` | Semi-Incremental |\n| `satisfaction_ratings` | Full Refresh, Incremental |\n| `schedules` | Full Refresh |\n| `sla_policies` | Full Refresh |\n| `tags` | Full Refresh |\n| `ticket_audits` | Semi-Incremental |\n| `ticket_comments` | Full Refresh, Incremental |\n| `ticket_events` | Incremental |\n| `ticket_fields` | Full Refresh, Incremental |\n| `ticket_forms` | Semi-Incremental |\n| `ticket_metric_events` | Full Refresh, Incremental |\n| `ticket_metrics` | Semi-Incremental |\n| `tickets` | Full Refresh, Incremental |\n| `triggers` | Semi-Incremental |\n| `users` | Full Refresh, Incremental |\n| `views` | Semi-Incremental |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh**, **Incremental**, and **Semi-Incremental** sync modes, see [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> There are some rate limits while sending requests to the Zendesk Support API. See [Zendesk documentation](https://developer.zendesk.com/api-reference/introduction/rate-limits/) for more details on these limits.\n\n## FAQ\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Zendesk Support | RudderStack Docs",
  "description": "Sync data from Zendesk Support to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/iterable/",
  "markdown": "# Iterable source | RudderStack Docs\n\nSync data from Iterable to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For sending real-time events from Iterable to RudderStack via webhook, refer to the [Iterable Webhook](https://www.rudderstack.com/docs/sources/event-streams/cloud-apps/iterable/) documentation.\n\n[Iterable](https://www.iterable.com/) is a popular growth marketing platform that lets you maximize customer interaction and improve your customers’ overall LTV (Life Time Value).\n\nThis document guides you in setting up Iterable as a source in RudderStack. Once configured, RudderStack automatically ingests your Iterable data and routes it to your specified data warehouse destination.\n\n## Getting started\n\nTo set up Iterable as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Iterable** from the list of sources.\n3.  Assign a name to your source and click **Next**.\n\n### Connection settings\n\nNext, configure the following dashboard settings:\n\n[![Configuring Iterable](https://www.rudderstack.com/docs/images/cloud-extract-sources/iterable-connection-settings.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/iterable-connection-settings.webp)\n\n*   **Start Date**: Enter the date from which RudderStack should ingest the Iterable data. RudderStack will not replicate any data before this date.\n*   **API Key**: Enter your Iterable project’s API key by going to **Integrations** > **API Keys**.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Iterable to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Iterable data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Iterable:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the Iterable data that you want to ingest by selecting the required resources.\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/iterable-resources.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/iterable-resources.webp)\n\nThe below table mentions the sync types supported by the Iterable resources while syncing data to your warehouse destination:\n\n| Resource | Sync type | Endpoint | Primary key |\n| --- | --- | --- | --- |\n| `campaigns` | Full Refresh | `/campaigns` | `id` |\n| `campaigns_metrics` | Full Refresh | `/campaigns/metrics` | \\-  |\n| `channels` | Full Refresh | `/channels` | `id` |\n| `email_bounce` | Incremental | [`/export/data.json`](https://api.iterable.com/api/docs#export_exportDataJson) | \\-  |\n| `email_click` | Incremental | [`/export/data.json`](https://api.iterable.com/api/docs#export_exportDataJson) | \\-  |\n| `email_complaint` | Incremental | [`/export/data.json`](https://api.iterable.com/api/docs#export_exportDataJson) | \\-  |\n| `email_open` | Incremental | [`/export/data.json`](https://api.iterable.com/api/docs#export_exportDataJson) | \\-  |\n| `email_send` | Incremental | [`/export/data.json`](https://api.iterable.com/api/docs#export_exportDataJson) | \\-  |\n| `email_send_skip` | Incremental | [`/export/data.json`](https://api.iterable.com/api/docs#export_exportDataJson) | \\-  |\n| `email_subscribe` | Incremental | [`/export/data.json`](https://api.iterable.com/api/docs#export_exportDataJson) | \\-  |\n| `email_unsubscribe` | Incremental | [`/export/data.json`](https://api.iterable.com/api/docs#export_exportDataJson) | \\-  |\n| `events` | Full Refresh | `/export/userEvents` | \\-  |\n| `lists` | Full Refresh | `/lists` | `id` |\n| `list_users` | Full Refresh | `/lists/getUsers` | `listId` |\n| `message_types` | Full Refresh | `/messageTypes` | `id` |\n| `metadata` | Full Refresh | `/metadata` | \\-  |\n| `templates` | Incremental | [`/export/data.json`](https://api.iterable.com/api/docs#export_exportDataJson) | \\-  |\n| `users` | Incremental | [`/export/data.json`](https://api.iterable.com/api/docs#export_exportDataJson) | \\-  |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh** and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\nIterable is now configured as a source. RudderStack will start ingesting data from Iterable as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking the **Add Destination** button:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\n#### Where can I find the Iterable API key?\n\nYou can get your Iterable project’s API key by logging into your Iterable dashboard and navigating to **Integrations** > **API Keys**. For more information, refer to the [Iterable documentation](https://support.iterable.com/hc/en-us/articles/360043464871-API-Keys).\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Iterable source | RudderStack Docs",
  "description": "Sync data from Iterable to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/hubspot/",
  "markdown": "# HubSpot source | RudderStack Docs\n\nSync data from HubSpot to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[HubSpot](https://www.hubspot.com/) is a leading marketing and CRM platform that helps you track leads as well as inbound marketing and sales.\n\nThis document guides you in setting up HubSpot as a source in RudderStack. Once configured, RudderStack automatically ingests your HubSpot data and routes it to your specified data warehouse destination.\n\n## Getting started\n\nTo set up HubSpot as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **HubSpot** from the list of sources.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\n*   **HubSpot Credentials**: Click **Connect with HubSpot** and grant RudderStack the necessary permissions to access your HubSpot data.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Your HubSpot account and the related details will then automatically appear under **Choose an account**.\n\n*   **Start Date**: Select the date from when RudderStack ingests your HubSpot data. RudderStack will not replicate any data before this date.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the ingested data from HubSpot to the warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your HubSpot data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from HubSpot:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the HubSpot data you want to ingest by selecting the required resources:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/hubspot-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/hubspot-connection-settings-2.webp)\n\nThe below table mentions the syncs and API endpoints supported by the HubSpot resources to your warehouse destination:\n\n| Resource | Full Refresh sync | Incremental sync | HubSpot API endpoint |\n| --- | --- | --- | --- |\n| `campaigns` | Yes | No  | `/email/public/v1/campaigns/{campaignId}` |\n| `companies` | Yes | Yes | `/crm/v3/objects/company` |\n| `contact_lists` | Yes | Yes | `/contacts/v1/lists` |\n| `contacts` | Yes | Yes | `/crm/v3/objects/contact` |\n| `contacts_list_memberships` | Yes | No  | `/contacts/v1/lists/all/contacts/all` |\n| `deal_pipelines` | Yes | No  | `/crm-pipelines/v1/pipelines/deals` |\n| `deals` | Yes | Yes | `/crm/v3/objects/deals/search` |\n| `email_events` | Yes | Yes | `/email/public/v1/events` |\n| `engagements` | Yes | Yes | `/engagements/v1/engagements/paged` or  <br>[`/engagements/v1/engagements/recent/modified`](https://legacydocs.hubspot.com/docs/methods/engagements/get-recent-engagements) |\n| `feedback_submissions` | Yes | Yes | `/crm/v3/objects/feedback_submissions` |\n| `forms` | Yes | No  | `/marketing/v3/forms/` |\n| `form_submissions` | Yes | No  | `/form-integrations/v1/submissions/forms/:form_guid` |\n| `line_items` | Yes | Yes | `/crm/v3/objects/line_items` |\n| `marketing_emails` | Yes | No  | `/marketing-emails/v1/emails/with-statistics` |\n| `owners` | Yes | No  | `/owners/v2/owners/` |\n| `property_history` | Yes | Yes | `/crm/v3/objects/products` |\n| `subscription_changes` | Yes | Yes | `/email/public/v1/subscriptions/timeline` |\n| `tickets` | Yes | Yes | `/crm/v3/objects/tickets` |\n| `ticket_pipelines` | Yes | No  | `/crm/v3/pipelines/ticket` |\n| `workflows` | Yes | No  | `/automation/v3/workflows` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh** and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\nNote that the objects in the `engagements` stream can be of the following types:\n\n*   `call`\n*   `email`\n*   `meeting`\n*   `note`\n*   `task`\n\nDepending on the engagement type, RudderStack sets different properties for the object in the `engagements_metadata` table in the warehouse destination:\n\n| Engagement type | `engagements_metadata` columns with non-null values |\n| --- | --- |\n| `call` | `toNumber`, `fromNumber`, `status`, `externalId`,  <br>`durationMilliseconds`, `externalAccountId`, `recordingUrl`,  <br>`body`, `disposition` |\n| `email` | `subject`, `html`, `text` |\n| `meeting` | `body`, `startTime`, `endTime`, `title` |\n| `note` | `body` |\n| `task` | `body`, `status`, `forObjectType` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For the `email` engagement type, RudderStack also creates the records in the following four related tables:\n> \n> *   `engagements_metadata_from`\n> *   `engagements_metadata_to`\n> *   `engagements_metadata_cc`\n> *   `engagements_metadata_bcc`\n\nHubSpot is now configured as a source. RudderStack will start ingesting data from HubSpot as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\n#### How does RudderStack sync the HubSpot data?\n\nUpon configuring the source, RudderStack first connects to your HubSpot instance and pulls all historical data from the **Start Date** specified in the dashboard settings. Subsequently, RudderStack syncs the data to your warehouse based on your specified sync schedule and frequency.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "HubSpot source | RudderStack Docs",
  "description": "Sync data from HubSpot to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/klaviyo-v2/",
  "markdown": "# Klaviyo v2 Source | RudderStack Docs\n\nSync data from Klaviyo to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Klaviyo](https://www.klaviyo.com/) is a powerful ecommerce platform that lets you boost your business revenue. It offers features like trend reports, cohort analysis, and various options for boosting customer engagement.\n\nThis document guides you in setting up Klaviyo as a source in RudderStack. Once configured, RudderStack automatically ingests your Klaviyo data and routes it to your specified data warehouse destination.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   This source uses the [Klaviyo API v2024-05-15](https://developers.klaviyo.com/en/reference/api_overview).\n> *   All the Cloud Extract sources support sending data only to a [data warehouse destination](https://www.rudderstack.com/docs/destinations/warehouse-destinations/).\n\n## Getting started\n\nTo set up Klaviyo as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Klaviyo v2** from the list of sources.\n3.  Assign a name to your source and click **Next**.\n\n### Connection settings\n\nEnter the following connection settings to set up the Klaviyo source:\n\n[![Klaviyo connection settings](https://www.rudderstack.com/docs/images/cloud-extract-sources/klaviyo-connection-settings.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/klaviyo-connection-settings.webp)\n\nThe connection settings are described below:\n\n*   **API Key** : Enter your [Klaviyo Private API key](https://help.klaviyo.com/hc/en-us/articles/115005062267-How-to-Manage-Your-Account-s-API-Keys#your-private-api-keys3). You can find it in your Klaviyo dashboard by clicking your organization name and going to **Account & billing** > **Settings** > **API Keys**.\n*   **Start Date**: Select the date from when RudderStack ingests your Klaviyo data.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack will **not replicate** any data before this date.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Klaviyo to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Klaviyo data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Klaviyo:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nChoose the Klaviyo data you want to ingest by selecting the required resources. The below table mentions the syncs and API endpoints supported by these resources from Klaviyo to your warehouse destination:\n\n| Resource | Full Refresh | Incremental | Primary key | Cursor | Klaviyo API endpoint |\n| --- | --- | --- | --- | --- | --- |\n| `campaigns` | Yes | Yes | `id` | `updated_at` | `/campaigns` |\n| `email_templates` | Yes | Yes | `id` | `updated` | `/templates` |\n| `events` | Yes | Yes | `id` | `datetime` | `/events` |\n| `flows` | Yes | Yes | `id` | `updated` | `/flows` |\n| `global_exclusions` | Yes | Yes | `id` | `updated` | `/profiles`  <br>RudderStack filters profiles with suppressions. |\n| `lists` | Yes | Yes | `id` | `updated` | `/lists` |\n| `metrics` | Yes | No  | `id` | \\-  | `/metrics` |\n| `segments` | Yes | Yes | `id` | `updated` | `/segments` |\n| `segments_profiles` | Yes | No  | `id` | \\-  | `/segments/{segment_id}` |\n| `profiles` | Yes | Yes | `id` | `updated` | `profiles` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> See the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide for more information on the **Full Refresh** and **Incremental** sync modes.\n\nKlaviyo is now configured as a source. RudderStack will start ingesting data from Klaviyo as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\n#### Can I connect my Klaviyo source to multiple data warehouse destinations?\n\nYou can connect **only one data warehouse destination** per Cloud Extract source. If you wish to send data to multiple warehouses, you can configure multiple Cloud Extract sources with the same settings and connect them to each data warehouse.\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Klaviyo v2 Source | RudderStack Docs",
  "description": "Sync data from Klaviyo to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/marketo/",
  "markdown": "# Marketo source | RudderStack Docs\n\nSync data from Marketo to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Marketo](https://marketo.com/) is a leading marketing automation platform. It offers effective behavior tracking and personalized marketing solutions to enhance users’ product experience.\n\nThis document guides you in setting up Marketo as a source in RudderStack. Once configured, RudderStack automatically ingests your specified Marketo data and routes it to your specified data warehouse destination.\n\n## Getting started\n\n1.  Log in to your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Collect** > **Sources** > **New Source** > **Cloud Extract**. From the list of sources, select **Marketo**.\n3.  Name your source and click **Continue**.\n\n## Connection settings\n\n*   **Client ID**: Enter your Marketo client ID.\n*   **Client Secret**: Enter the associated client secret.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For steps on obtaining the Marketo client ID and secret, see [FAQ](#faq).\n> \n> See [Marketo API documentation](https://developers.marketo.com/rest-api/authentication/) for more information on these credentials.\n\n*   **Start date**: Select the date from when RudderStack should ingest your Shopify data. RudderStack will **not replicate** any data before this date.\n*   **Domain URL**: Enter your Marketo base URL. See [Marketo API documentation](https://developers.marketo.com/rest-api/base-url/) for more information on obtaining this URL.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Marketo to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Marketo data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Marketo:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n*   **Frequency**: Specify how often RudderStack should run the data syncs.\n*   **Sync Starting At**: Set the time to start the sync (in UTC).\n\n### Select data to import\n\nYou can import specific Marketo data by selecting the required resources:\n\n| Resource | Sync type | Primary key | Cursor field | Bulk extract support |\n| --- | --- | --- | --- | --- |\n| `activity_types` | Full Refresh | `id` | \\-  | No  |\n| `campaigns` | Incremental | \\-  | `createdAt` | No  |\n| `leads` | Incremental | \\-  | `updatedAt` | Yes |\n| `lists` | Incremental | \\-  | \\-  | No  |\n| `programs` | Incremental | \\-  | `updatedAt` | No  |\n| `activities_X` | Incremental | `marketoGUID` | `activityDate` | Yes |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh** and **Incremental** sync modes, see [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes).\n\n## FAQ\n\nYes, it is.\n\nWe have implemented a feature wherein RudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\n#### How do I obtain the Marketo client ID and secret?\n\nTo set up the Marketo API service and obtain the client ID and secret associated with it, follow these steps:\n\n1.  Log into your Marketo instance and click the **Admin** tab.\n2.  Select **LaunchPoint**.\n\n[![](https://www.rudderstack.com/docs/images/event-stream-destinations/marketo-launchpoint.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/marketo-launchpoint.webp)\n\n3.  Here, you will able to see all installed services used for connecting to Marketo.\n4.  Click **View Details** in your API service to see the associated client ID and secret. Use these credentials to configure the Marketo source in RudderStack.\n\n[![](https://www.rudderstack.com/docs/images/event-stream-destinations/marketo-service-details.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/marketo-service-details.webp)\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Marketo source | RudderStack Docs",
  "description": "Sync data from Marketo to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/",
  "markdown": "# Cloud Destinations | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Cloud Destinations | RudderStack Docs",
  "description": "Send event data from RudderStack to your preferred cloud platforms.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/overview/",
  "markdown": "# Destinations Overview | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Destinations Overview | RudderStack Docs",
  "description": "Send event data from RudderStack to your preferred destination platforms.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/activecampaign/",
  "markdown": "# ActiveCampaign destination | RudderStack Docs\n\nSend your event data from RudderStack to ActiveCampaign.\n\n* * *\n\n*     6 minute read  \n    \n\n[ActiveCampaign](https://www.activecampaign.com/) is a popular marketing automation and CRM platform. It offers an all-in-one email marketing and growth platform to monitor your users’ product behavior and use the insights to design personalized customer experiences.\n\nRudderStack supports ActiveCampaign as a destination to which you can seamlessly send your event data.\n\nFind the open source transformer code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/master/src/v0/destinations/active_campaign).\n\n## Setup\n\n1.  In your [RudderStack dashboard](https://app.rudderstack.com/), go to **Directory** > **Destinations** > **Cloud Destinations** and search for **ActiveCampaign**.\n2.  Connect your source and click **Continue**.\n\n### Connection settings\n\nConfigure the following settings to set up ActiveCampaign as a destination in RudderStack:\n\n*   **API URL:** Enter the ActiveCampaign API URL for your account.\n*   **API Key:** Enter the ActiveCampaign API key.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To get the **API URL** and **API key**, log in to your ActiveCampaign account and go to the **Settings** page under the **Developer** tab.\n\n### Connection mode\n\nRudderStack supports the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/) for sending events to ActiveCampaign:\n\n| Connection mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| Device mode | **Supported** | \\-  | \\-  |\n| Cloud mode | **Supported** | **Supported** | **Supported** |\n| Hybrid mode | **Supported** | \\-  | \\-  |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This destination supports hybrid mode for the [JavaScript](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) source. For more information, see [Send events in hybrid mode](#send-events-in-hybrid-mode) section.\n\n### Send events in hybrid mode\n\nYou can use [hybrid mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#hybrid-mode) to send all events to ActiveCampaign from your [JavaScript](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) source.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In hybrid mode, RudderStack sends the `identify`, `track`, and `screen` events to ActiveCampaign via their REST API and `page` calls via the native ActiveCampaign SDK.\n\nTo send events via hybrid mode, use the hybrid mode option(highlighted below) while connecting your source to the ActiveCampaign destination.\n\n[![ActiveCampaign hybrid mode connection setting](https://www.rudderstack.com/docs/images/event-stream-destinations/activecampaign-hybrid-mode.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/activecampaign-hybrid-mode.webp)\n\n### Configuration settings\n\nAfter completing the initial setup, configure the following settings to correctly receive your data in ActiveCampaign:\n\n*   **Event Key:** This value is unique to your ActiveCampaign account. See [ActiveCampaign documentation](https://help.activecampaign.com/hc/en-us/articles/221870128-An-overview-of-Event-Tracking#how-to-turn-on-event-tracking-0-3) for more information on obtaining the event key.\n*   **ActID:** Enter your ActiveCampaign `actid`. Go to **Settings** > **Tracking** > **Event Tracking API** to get your **actid**.\n\n### Other settings\n\n*   **OneTrust Cookie Categories**: This setting lets you associate the [OneTrust](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/javascript/) cookie consent groups to ActiveCampaign.\n\n## Identify\n\nYou can use the [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call to create a new user in ActiveCampaign. If a user already exists, RudderStack updates the user with the latest values.\n\nA sample `identify` call is shown below:\n\n```\nrudderanalytics.identify(\"userId\", {\n  email: \"john@example.com\",\n  firstName: \"John\",\n  lastName: \"Keener\",\n  phone: \"1234567890\"\n});\n```\n\nIn the above snippet, RudderStack captures relevant user information like their `userId` and the associated traits like `email`, `phone`, `firstName`, and `lastName`, before sending this information to ActiveCampaign.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> `email` is a mandatory trait for mapping a user to ActiveCampaign.\n\n### Set custom tags\n\nYou can associate a user with custom tags by passing the `tags` trait in your `identify` call:\n\n```\nrudderanalytics.identify(\"userId\", {\n  email: \"john@example.com\",\n  firstName: \"John\",\n  lastName: \"Keener\",\n  phone: \"1234567890\",\n  tags: [\"Returning User\", \"Coupon Used\"]\n});\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> `tags` should contain an array of tags you want to associate with the user. If any tag is already present in ActiveCampaign, RudderStack will skip creating that tag.\n\n### Send custom fields\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> To send custom fields to ActiveCampaign, you will need to first create the [custom fields](https://www.activecampaign.com/learn/guides/what-are-custom-fields) in ActiveCampaign for each custom value that you want to send.\n> \n> When you call `identify` with the keys matching those traits, RudderStack updates the custom fields for that contact.\n\nYou can update a contact by passing custom fields in your `identify` calls to ActiveCampaign.\n\nYou can use the `fieldInfo` trait to set values for the custom fields, as shown:\n\n```\nrudderanalytics.identify(\"userId\", {\n  email: \"john@example.com\",\n  firstName: \"John\",\n  lastName: \"Keener\",\n  phone: \"1234567890\",\n  tags: [\"Returning User\", \"Coupon Used\"],\n  fieldInfo: {\n    Interest: \"Electronics\",\n    Country: \"USA\",\n    Hobbies: [\"Cricket\", \"Tennis\"]\n  }\n});\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   The `fieldInfo` trait contains the value of the custom field that you want to store for that contact. For using this feature, you need to create the custom fields from your ActiveCampaign dashboard before passing the values in the event.\n> *   To send multi-choice field values for the fields having a checkbox, or list values as an input, you need to send the values as an array. For example: `\"Hobbies\": [\"Cricket\",\"Tennis\"]`.\n> *   For the date field, the format should be YYYY-MM-DD. Also, the values for the datetime field should be in a ISO datetime format, that is, `yyyy-MM-dd'T'HH:mm:ss. SSSXXX`.\n\n### Subscribe contacts to lists\n\nYou can subscribe or unsubscribe a contact from any number of lists by passing a `lists` trait in your `identify` call. This trait should be an array with each element having an `id` and a `status`. The value of `status` must be either `subscribe` or `unsubscribe`.\n\n```\nrudderanalytics.identify(\"userId\", {\n  email: \"john@example.com\",\n  firstName: \"John\",\n  lastName: \"Keener\",\n  phone: \"1234567890\",\n  tags: [\"Returning User\", \"Coupon Used\"],\n  fieldInfo: {\n    Interest: \"Electronics\",\n    Country: \"USA\",\n    Hobbies: [\"Cricket\", \"Tennis\"]\n  },\n  lists: [\n    {\n      id: 2,\n      status: \"subscribe\"\n    },\n    {\n      id: 3,\n      status: \"unsubscribe\"\n    }\n  ]\n});\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For associating a contact to any list, you need to create the list in ActiveCampaign and use the `id` parameter for mapping that contact.\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the user actions along with any properties associated with them.\n\nA sample `track` call looks like the following:\n\n```\nrudderanalytics.track(\"Product Purchased\", {\n  name: \"Rubik's Cube\"\n});\n```\n\nIn the above snippet, RudderStack captures the information related to the `Product Purchased` event along with the product’s `name`.\n\nRudderStack also maps `eventData` present within the `track` event properties to ActiveCampaign’s `eventdata` field:\n\n```\nrudderanalytics.track(\"Product Purchased\", {\n  name: \"Rubik's Cube\",\n  eventData: \"Learn while having fun\"\n});\n```\n\n### Event name considerations\n\nActiveCampaign sets certain restrictions in the way you can set your `track` event names:\n\n*   The event name must contain only alphanumeric characters. ActiveCampaign rejects any event containing special characters in the name.\n*   The event name should not exceed 32 characters. ActiveCampaign automatically truncates event names longer than 32 characters. For example, if you send a `track` event with the name `Product Viewed After Opening The Browser`, ActiveCampaign automatically truncates it to `Product Viewed After Opening The`:\n\n[![ActiveCampaign truncating event names](https://www.rudderstack.com/docs/images/event-stream-destinations/activecampaign-eventname-truncation.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/activecampaign-eventname-truncation.webp)\n\n## Page\n\nYou can use the `page` call to record user’s page views along with the associated properties and send this information to ActiveCampaign. You must call this method at least once per page load.\n\nWhen you call `page`, RudderStack will send that event to ActiveCampaign as a [site tracking event](https://help.activecampaign.com/hc/en-us/articles/221542267-An-overview-of-Site-Tracking) - this allowlists your domain for tracking purposes.\n\nA sample `page` call looks like the following:\n\n```\nrudderanalytics.page(\"home\", {\n  path: \"path\",\n  url: \"url\",\n  title: \"title\",\n  search: \"search\",\n  referrer: \"referrer\"\n});\n```\n\nIn the above sample, RudderStack captures the information related to the viewed page and the `url` property is used to allowlist the website in ActiveCampaign.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `page` calls work only if **Site Tracking** is enabled in ActiveCampaign. You can enable this setting by going to the **Tracking** tab in your ActiveCampaign settings page.\n\n## Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) lets you record whenever your user views their mobile screen with any additional relevant information about the screen.\n\nA sample `screen` call is shown:\n\n```\n[[RSClient sharedInstance] screen:@\"Sample Screen Viewed\" properties:@{@\"prop_key\" : @\"prop_value\"}];\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **The `screen` event name must contain only alphanumeric characters.**\n> \n> ActiveCampaign rejects events with any special characters in the name.\n\n## FAQ\n\n#### Can I use special characters in my `screen` and `track` event names?\n\nNo - your `screen` and `track` event names must contain only alphanumeric characters. ActiveCampaign prescribes that the `screen` and `track` event names must contain only alphabets and numbers and does not allow using any special characters.\n\n#### How does RudderStack send events to ActiveCampaign in hybrid mode?\n\nIn hybrid mode, RudderStack sends the user-generated events (`identify`, `track`, `screen`) events to ActiveCampaign via cloud mode and sends the `page` events via device mode (using the native ActiveCampaign web SDK).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "ActiveCampaign destination | RudderStack Docs",
  "description": "Send your event data from RudderStack to ActiveCampaign.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/pipedrive/",
  "markdown": "# Pipedrive | RudderStack Docs\n\nSync data from Pipedrive to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Pipedrive](https://www.pipedrive.com/) is a popular sales CRM and pipeline management tool. It lets you manage your leads, track all your customer communications, and automate administrative tasks.\n\nThis document guides you in setting up Pipedrive as a source in RudderStack. Once configured, RudderStack automatically ingests your Pipedrive data and routes it to your specified data warehouse destination.\n\n## Getting started\n\nTo set up Pipedrive as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Pipedrive** from the list of sources.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\nTo set up Pipedrive as a Cloud Extract source, configure the following settings:\n\n[![Pipedrive credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/pipedrive-connection-settings.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/pipedrive-connection-settings.webp)\n\n*   **Start Date**: Select the date from when RudderStack ingests your Pipedrive data. RudderStack will **not replicate** any data before this date.\n*   **API Token**: Enter your Pipedrive API token. Refer to the [Pipedrive documentation](https://pipedrive.readme.io/docs/how-to-find-the-api-token) for more information on obtaining the API token.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Pipedrive to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Pipedrive data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Pipedrive:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the Pipedrive data you want to ingest by selecting the required resources:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/pipedive-v2-resources.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/pipedive-v2-resources.webp)\n\nThe below table mentions the syncs supported by these resources from Pipedrive to your warehouse destination where `id` is a common primary key for all:\n\n| Resource | Sync type | Pipedrive API endpoint |\n| --- | --- | --- |\n| `users` | Incremental | `/v1/users` |\n| `stages` | Incremental | `/v1/stages` |\n| `products` | Incremental | `/v1/products` |\n| `product_fields` | Full Refresh | `/v1/productFields` |\n| `pipelines` | Incremental | `/v1/pipelines` |\n| `persons` | Incremental | `/v1/persons` |\n| `person_fields` | Full Refresh | `/v1/personFields` |\n| `organizations` | Incremental | `/v1/organizations` |\n| `organization_fields` | Full Refresh | `/v1/organizationFields` |\n| `notes` | Incremental | `/v1/notes` |\n| `leads` | Full Refresh | `/v1/leads` |\n| `deals` | Incremental | `/v1/deals` |\n| `deal_fields` | Full Refresh | `/v1/dealFields` |\n| `activity_fields` | Full Refresh | `/v1/activityFields` |\n| `activities` | Incremental | `/v1/activities` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh**, **Semi-Incremental**, and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\nPipedrive is now configured as a source. RudderStack will start ingesting data from Pipedrive as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\nYes, it is.\n\nRudderStack implements a feature wherein it associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Pipedrive | RudderStack Docs",
  "description": "Sync data from Pipedrive to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/adjust/",
  "markdown": "# Adjust | RudderStack Docs\n\nSend your event data from RudderStack to Adjust.\n\n* * *\n\n*     8 minute read  \n    \n\n[Adjust](https://adjust.com/) is an industry-leading mobile attribution provider that allows you to bring all your business data together to get powerful insights from it.\n\nRudderStack supports Adjust as a destination to which you can seamlessly send your event data.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Find the open source transformer code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/master/src/v0/destinations/adj). You can also refer to the specific repositories for the [Android](https://github.com/rudderlabs/rudder-integration-adjust-android) and [iOS](https://github.com/rudderlabs/rudder-integration-adjust-ios) implementations.\n\n## Getting started\n\nRudderStack supports sending event data to Adjust via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | **Supported** | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the platform supports sending events to Adjust, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add the source. Then, from the list of destinations, select **Adjust**.\n2.  Assign a name to the destination and click **Continue**.\n\n## Connection settings\n\nTo successfully configure Adjust as a destination, you will need to configure the following settings:\n\n*   **APP Token**: Enter your Adjust app token. For more information on obtaining your Adjust app token, refer to the [FAQ](#faq) section below.\n*   **Send to Production Environment on Adjust**: Enable this setting to send the data to the [production environment](https://help.adjust.com/en/article/server-to-server-events?src=search#:~:text=event%20currency%20code-,environment,-Environment%20to%20post) in Adjust. By default, RudderStack sends the data to the Adjust sandbox environment.\n*   **Client-side Events Filtering**: This setting lets you specify which events should be blocked or allowed to flow through to Adjust. This setting is applicable only when sending events to Adjust via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode). For more information, refer to the [Client-side Events Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) guide.\n*   **Map events to Adjust Event Tokens**: This setting lets you map the RudderStack events to Adjust’s [event tokens](https://help.adjust.com/en/article/add-events#manage-your-events). For more information on creating an event token in Adjust, refer to the [FAQ](#how-can-i-create-a-new-event-token-in-adjust) section below.\n*   **RudderStack Parameters to Partner Parameters**: This setting lets you map your event properties to specific Adjust [partner parameters](https://help.adjust.com/en/article/receive-custom-event-data-with-partner-parameters).\n*   **Delay Time before SDK initialization**: This setting is applicable only for sending events via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode). You can use it to initiate a delay in loading the SDK for the first time. For more information, refer to the [Adjust documentation](https://help.adjust.com/en/article/ios-sdk-adjconfig-class?src=search#delay-launch).\n*   **Use device mode to send events**: Enable this setting for the Android/iOS SDK to send events to Adjust via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Do not add native Adjust SDK to your project as it will prevent you from integrating it successfully.\n\n## Add a device mode integration\n\nFollow these steps to add Adjust to your project depending on your integration platform:\n\nTo add Adjust to your iOS project, follow these steps:\n\n1.  Add the following line to your [CocoaPods](https://cocoapods.org/) `Podfile`:\n\n2.  After adding the dependency, register the `RudderAdjustFactory` with your `RudderClient` initialization as a `factory` of `RudderConfig`. Run the following command to import `RudderAdjustFactory.h` file in your `AppDelegate.m` file:\n\n```\n#import <Rudder-Adjust/RudderAdjustFactory.h>\n```\n\n3.  Then, change the SDK initialization to the following:\n\n```\nRudderConfigBuilder *builder = [[RudderConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withFactory:[RudderAdjustFactory instance]];\n[RudderClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This device mode integration is supported for Adjust v4.29.7 and above.\n\nTo add Adjust to your iOS project, follow these steps:\n\n1.  Install `RudderAdjust` (available through [CocoaPods](https://cocoapods.org/) by adding the following line to your `Podfile`):\n\n```\npod 'RudderAdjust', '~> 1.0.0'\n```\n\n2.  Run the `pod install` command.\n    \n3.  Next, import the SDK depending on your preferred platform:\n    \n\n  \n\n4.  Add the imports to your `AppDelegate` file under the `didFinishLaunchingWithOptions` method:\n\n```\nlet config: RSConfig = RSConfig(writeKey: WRITE_KEY)\n            .dataPlaneURL(DATA_PLANE_URL)\n\nRSClient.sharedInstance().configure(with: config)\nRSClient.sharedInstance().addDestination(RudderAdjustDestination())\n```\n\n  \n\n```\nRSConfig *config = [[RSConfig alloc] initWithWriteKey:WRITE_KEY];\n[config dataPlaneURL:DATA_PLANE_URL];\n\n[[RSClient sharedInstance] configureWith:config];\n[[RSClient sharedInstance] addDestination:[[RudderAdjustDestination alloc] init]];\n```\n\nTo add Adjust to your Android project, follow these steps:\n\n1.  Add `mavenCentral()` to the `repositories` section of your `build.gradle` file:\n\n```\nrepositories {\n  mavenCentral()\n}\n```\n\n2.  Next, add the following permissions to your `AndroidManifest.xml` file:\n\n```\n<uses-permission android:name=\"android.permission.INTERNET\"></uses-permission>\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"></uses-permission>\n// If you are not targeting the Google Play Store, you need to add the following permission:\n<uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\"></uses-permission>\n// If you are targeting Android 13 and above (API level 33), you need to add the com.google.android.gms.AD_ID permission to read the device's advertising ID.\n<uses-permission android:name=\"com.google.android.gms.permission.AD_ID\"></uses-permission>\n```\n\n3.  Finally, add the following lines in your `build.gradle` file under `dependencies`:\n\n```\n// RudderStack Android-SDK\nimplementation 'com.rudderstack.android.sdk:core:[1.0,2.0)'\n// RudderStack Adjust-SDK\nimplementation 'com.rudderstack.android.integration:adjust:1.0.1'\n// Add Google Play Services library to enable the Google Advertising ID for Adjust SDK\nimplementation 'com.google.android.gms:play-services-ads-identifier:17.0.1'\n// To support the Google Play Referrer API, make sure you have the following in your build.gradle file:\nimplementation 'com.android.installreferrer:installreferrer:2.2'\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on implementing `com.google.android.gms:play-services-ads-identifier:17.0.1`, refer to the [Adjust documentation](https://help.adjust.com/en/article/get-started-android-sdk#add-google-play-services).\n\n4.  After adding the dependency, register the `RudderAdjustFactory` with your `RudderClient` initialization as a `factory` of `RudderConfig`. Add the following line in your `Application` class:\n\n```\nimport com.rudderstack.android.integration.adjust.AdjustIntegrationFactory;\n```\n\n5.  Finally, change the SDK initialization to the following:\n\n```\nval rudderClient: RudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withFactory(AdjustIntegrationFactory.FACTORY)\n            .build()\n    )\n```\n\nTo add Adjust to your Unity app, follow these steps:\n\n1.  Add the [RudderStack Unity SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-unity-sdk/) to your project.\n    \n2.  Download the [Adjust SDK extension](https://github.com/rudderlabs/rudder-sdk-unity/tree/master/Integrations/Adjust/RudderAdjust) package and import it in your project.\n    \n\nThe package comes with Adjust Unity SDK embedded in it along with the required `jar` files for Android Install Referrer. **It is strongly recommended to not add the Adjust SDK separately**.\n\n3.  After importing the `rudder-unity-extension-adjust.unitypackage` to your project, attach the `RudderPreferbs.prefab` file from `RudderUnityPlugin` to your main `GameObject`.\n    \n4.  Finally, change the SDK initialization:\n    \n\n```\n// Build your config\nRudderConfigBuilder configBuilder = new RudderConfigBuilder()\n    .WithEndPointUrl(DATA_PLANE_URL)\n    .WithFactory(RudderAdjustIntegrationFactory.GetFactory());\n\n// Get instance for RudderClient\nRudderClient rudderClient = RudderClient.GetInstance(\n    WRITE_KEY,\n    configBuilder.Build()\n);\n```\n\nFollow the below steps to add Adjust to your Flutter Project:\n\n1.  Add the following dependency to the `dependencies` section of your `pubspec.yaml` file.\n\n```\nrudder_integration_adjust_flutter: ^1.0.1\n```\n\n  \n\n2.  Run the below command to install the dependency added in the above step:\n\n  \n\n3.  Import the `RudderIntegrationAdjustFlutter` in your application where you are initializing the SDK.\n\n```\nimport 'package:rudder_integration_adjust_flutter/rudder_integration_adjust_flutter.dart';\n```\n\n  \n\n4.  Finally, change the initialization of your `RudderClient` as shown:\n\n```\nfinal RudderController rudderClient = RudderController.instance;\nRudderConfigBuilder builder = RudderConfigBuilder();\nbuilder.withFactory(RudderIntegrationAdjustFlutter());\nrudderClient.initialize(<write_key>, config: builder.build(), options: null);\n```\n\n## Identify\n\nRudderStack’s [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions.\n\nRudderStack sends the user information in the `identify` call to Adjust’s [`addSessionPartnerParameter`](https://help.adjust.com/en/search?query=addSessionPartnerParameter) method to set the `userId` (or `anonymousId`, in case `userId` is absent), so that the user information is passed to the subsequent calls.\n\nA sample `identify` call is shown below:\n\n```\n[[RudderClient sharedInstance] identify:@\"developer_user_id\"\n                                 traits:@{@\"foo\": @\"bar\", @\"foo1\": @\"bar1\"}];\n```\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the user actions along with any properties associated with them.\n\nWhen you make a `track` call, RudderStack maps the event name with the corresponding Adjust custom event in the dashboard using Adjust’s [`trackEvent` method](https://help.adjust.com/en/article/ios-sdk-adjust-class#track-event).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure you have defined the event mapping in the **Map events to Adjust Event Tokens** dashboard setting. Adjust will reject any events apart from these mappings.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The event token must already be created and present in the Adjust dashboard. For more information on creating a new event token, refer to the [FAQ](#how-can-i-create-a-new-event-token-in-adjust) section below.\n\n### Sending callback parameters\n\nRudderStack sends all custom properties in your `track` calls as [callback parameters](https://help.adjust.com/en/article/record-events-ios-sdk#add-callback-parameters).\n\nA sample `track` call is shown below:\n\n```\n[[RudderClient sharedInstance] track:@\"test_event\"\n                          properties:@{@\"key\":@\"value\", @\"foo\": @\"bar\"}];\n```\n\n### Sending partner parameters\n\nYou can also send custom properties in your `track` calls as [partner parameters](https://help.adjust.com/en/article/record-events-ios-sdk#add-partner-parameters) to Adjust. Adjust then sends those parameters to the external partners you have set up in your Adjust dashboard.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on adding a partner in Adjust, refer to the [FAQ](#how-can-i-set-up-new-partners-in-adjust) section below.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure you have defined the property mapping in the **RudderStack Parameters to Partner Parameters** dashboard setting. Adjust will reject any properties apart from these mappings.\n\nRudderStack uses the property mappings specified in the **RudderStack Parameters to Partner Parameters** setting to check if a key is present in the `track` event properties and maps it to the corresponding Adjust partner parameter object.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The partner parameters only accept the String data type.\n\nSuppose a customer sets the following mapping in the RudderStack dashboard:\n\n| RudderStack property | Adjust partner parameter |\n| --- | --- |\n| `revenue` | `price` |\n| `quantity` | `quantity` |\n\nA sample `track` call with the above properties is shown below:\n\n```\n[[RudderClient sharedInstance] track:@\"purchase\"\n                          properties:@{@\"revenue\":@20.99,\n                          @\"currency\": @\"USD\",\n                          @\"quantity\": @10}];\n```\n\nThe corresponding Adjust payload highlighting the parameters is shown below:\n\n```\n\"params\": {\n  \"android_id\": \"3f034872-5e28-45a1-9eda-ce22a3e36d1a\",\n  \"gps_adid\": \"3f034872-5e28-45a1-9eda-ce22a3e36d1a\",\n  \"att_status\": 3,\n  \"tracking_enabled\": true,\n  \"currency\": \"USD\",\n  \"ip_address\": \"[::1]\",\n  \"s2s\": 1,\n  \"app_token\": \"t1yurrb968zk\",\n  \"event_token\": \"tf4gm5\",\n  \"environment\": \"production\",\n  \"partner_params\": {\"price\":\"20.99\",\"quantity\":\"10\"}\n},\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack converts numeric values into strings before sending the data to Adjust.\n\n### Sending revenue tracking events\n\nTo send [revenue tracking](https://help.adjust.com/en/article/record-events-ios-sdk#record-event-revenue) events to Adjust, your can add `total` and `currency` to your event properties:\n\n```\n[[RudderClient sharedInstance] track:@\"purchase\"\n                          properties:@{@\"total\":@2.99, @\"currency\": @\"USD\"}];\n```\n\n## Reset\n\nYou can use RudderStack’s [`reset`](https://www.rudderstack.com/docs/event-spec/standard-events/) method to call [`resetSessionCallbackParameters`](https://help.adjust.com/en/search?query=resetSessionCallbackParameters) of the Adjust SDK to reset the user ID and the associated traits.\n\nA sample `reset` call is shown below:\n\n```\n[[RudderClient sharedInstance] reset];\n```\n\n## App install attribution\n\nAdjust’s native SDK handles app install attribution out of the box with RudderStack.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This feature is not supported when sending events via [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode).\n\n## Adjust environment dependency on log level\n\nRudderStack sends data to the Adjust environment depending on the `RudderLogLevel` set in the SDK, as listed in the below table:\n\n| `RudderLogLevel` | Adjust Environment | Adjust SDK `LogLevel` |\n| --- | --- | --- |\n| `DEBUG` / `VERBOSE` | Sandbox | `VERBOSE` |\n| `NONE`/ `ERROR` / `WARN`/ `INFO` | Production | `ERROR` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on `RudderLogLevel`, refer to the following SDK documentation:\n> \n> *   [Android](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/#configuring-your-rudderstack-client)\n> *   [iOS](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/#configuring-the-rudderstack-client)\n\n## FAQ\n\n#### Where can I find the Adjust app token?\n\nTo get your Adjust app token, follow these steps:\n\n1.  Log into your [Adjust dashboard](https://dash.adjust.com/#/).\n2.  Find your app and select the app options caret (^):\n\n[![Adjust app token](https://www.rudderstack.com/docs/images/event-stream-destinations/adjust-app-token-1.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/adjust-app-token-1.webp)\n\n3.  You will find your app token listed here.\n\n[![Adjust app token](https://www.rudderstack.com/docs/images/event-stream-destinations/adjust-app-token-2.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/adjust-app-token-2.webp)\n\n#### How can I create a new event token in Adjust?\n\nTo create a new event token, follow these steps:\n\n1.  Log into your [Adjust dashboard](https://dash.adjust.com/#/).\n2.  Find your app and select the app options caret (^):\n\n[![Adjust app token](https://www.rudderstack.com/docs/images/event-stream-destinations/adjust-app-token-1.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/adjust-app-token-1.webp)\n\n3.  Go to **All Settings** > **Events**:\n\n[![Adjust event token](https://www.rudderstack.com/docs/images/event-stream-destinations/adjust-event-token.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/adjust-event-token.webp)\n\n4.  Under **CREATE NEW EVENT**, enter the name of the event token and click **CREATE**.\n\n#### How can I set up new partners in Adjust?\n\nAdjust lets you provide additional data to certain [integrated partners](https://help.adjust.com/en/integrated-partners). To set up a new partner in Adjust, follow these steps:\n\n1.  Log into your [Adjust dashboard](https://dash.adjust.com/#/).\n2.  Find your app and select the app options caret (^):\n\n[![Adjust app token](https://www.rudderstack.com/docs/images/event-stream-destinations/adjust-app-token-1.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/adjust-app-token-1.webp)\n\n3.  Go to **All Settings** > **Partner Setup** > **ADD PARTNERS**:\n\n[![Adjust partner setup](https://www.rudderstack.com/docs/images/event-stream-destinations/adjust-partner-setup.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/adjust-partner-setup.webp)\n\n4.  Select the partner from the list and click the **+** option on the right to add.\n5.  Enter the relevant details to complete the configuration and click **SAVE** to complete the setup.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Adjust | RudderStack Docs",
  "description": "Send your event data from RudderStack to Adjust.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/recurly/",
  "markdown": "# Recurly | RudderStack Docs\n\nSync data from Recurly to your warehouse destination via RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[Recurly](https://recurly.com/) is a subscription management platform that maximizes the subscriber lifetime value with expertise, technology, and insights for the global brands.\n\nThis document guides you in setting up Recurly as a source in RudderStack. Once configured, RudderStack automatically ingests your specified Recurly data, which can then be routed to your RudderStack-supported data warehouse destination.\n\n## Getting started\n\nTo set up Recurly as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Recurly** from the list of sources.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\n[![Recurly credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/recurly-connection-settings.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/recurly-connection-settings.webp)\n\n*   **API Key**: Enter your Recurly API key by going to your Recurly dashboard and navigating to **Integrations** > **API Credentials**.\n*   **begin\\_time**: Enter the date when the Recurly API should start the replication.\n*   **end\\_time**: Enter the date at which the Recurly API stops the replication. RudderStack will not import any data records after this timestamp.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on how to obtain the Recurly API key, refer to the [FAQ](#faq) section below.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Recurly to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Recurly data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Recurly:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the Recurly data you want to ingest by selecting the required resources:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/recurly-connection-settings-1.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/recurly-connection-settings-1.webp)\n\nThe below table mentions the sync types supported by the Recurly resources while syncing data to your warehouse destination, with `id` as the primary key for all:\n\n| Resource | Sync type |\n| --- | --- |\n| `export_dates` | Full Refresh |\n| `accounts` | Incremental |\n| `account_coupon_redemptions` | Incremental |\n| `account_notes` | Incremental |\n| `add_ons` | Incremental |\n| `billing_infos` | Incremental |\n| `coupons` | Incremental |\n| `credit_payments` | Incremental |\n| `invoices` | Incremental |\n| `line_items` | Incremental |\n| `measured_units` | Incremental |\n| `plans` | Incremental |\n| `shipping_addresses` | Incremental |\n| `shipping_methods` | Incremental |\n| `subscriptions` | Incremental |\n| `transactions` | Incremental |\n| `unique_coupons` | Incremental |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh** and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\n## FAQ\n\n#### How do I obtain the Recurly API key?\n\nTo obtain the API key for configuring the Recurly Cloud Extract source, follow these steps:\n\n1.  Log into your [Recurly dashboard](https://recurly.com/).\n2.  Go to **Integrations** > **API Credentials** to find the API key as shown:\n\n[![Recurly API key](https://www.rudderstack.com/docs/images/cloud-extract-sources/recurly-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/recurly-connection-settings-2.webp)\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Recurly | RudderStack Docs",
  "description": "Sync data from Recurly to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/mixpanel/",
  "markdown": "# Mixpanel source | RudderStack Docs\n\nSync data from Mixpanel to your warehouse destination via RudderStack.\n\n* * *\n\n*     5 minute read  \n    \n\n[Mixpanel](https://mixpanel.com/) is an analytics platform that provides specific tools for targeted business communication and customer engagement, in-app A/B testing, user survey forms, and custom reports to measure customer retention.\n\nThis document guides you in setting up Mixpanel as a source in RudderStack. Once configured, RudderStack automatically ingests your Mixpanel data and routes it to your specified data warehouse destination.\n\n## Getting started\n\nTo set up Mixpanel as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Mixpanel** from the list of sources.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\nEnter the following connection settings to set up the Mixpanel source:\n\n*   **Authentication**: Select either **Service Account** or **Project Secret** from the dropdown to give RudderStack the required permissions to access your Mixpanel account. Refer to the [Service Accounts](https://developer.mixpanel.com/reference/service-accounts) and [Project Secret](https://developer.mixpanel.com/reference/project-secret) documentation for more information on obtaining these details.\n*   **Project ID** : Enter your Mixpanel project ID by going to **Project Settings** > **Overview** in your Mixpanel dashboard. Refer to the [Mixpanel support guide](https://help.mixpanel.com/hc/en-us/articles/115004490503-Project-Settings#project-id) for more information.\n*   **Attribution Window**: Specify the time period for attributing results to the ads and the lookback period during which the ads results are counted. By default, this value is set to **5 days**.\n*   **Project Timezone**: Specify your Mixpanel project timezone by going to **Project Settings** > **Project Details** in your Mixpanel dashboard. For more information on getting your Mixpanel project timezone, refer to the [Mixpanel support guide](https://help.mixpanel.com/hc/en-us/articles/115004547203-Manage-Timezones-for-Projects-in-Mixpanel).\n*   **Select Properties By Default**: Enable this setting to capture new event properties and engage records. If disabled, these properties will be ignored.\n*   **Start Date**: Select the date from when RudderStack ingests your Mixpanel data.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack will **not replicate** any data before this date. If you do not set this option, RudderStack will replicate the Mixpanel data up to one year from the current date by default.\n\n*   **End Date**: Specify the end date for the replication window.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack will not replicate any data **after** this date. Do not set this field if you want RudderStack to sync the most recent Mixpanel data.\n\n*   **Region**: Specify your Mixpanel domain instance from either **US** or **EU**.\n*   **Date Slicing Window**: Define the window size used to slice through the Mixpanel data. By default, RudderStack sets this field to **30 days**.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Reduce the value of this field if the amount of data in the slicing window is too large for your environment.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Mixpanel to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Mixpanel data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Mixpanel:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you have configured **End Date** in the [connection settings](#connection-settings), setting the schedule setting to **Manual** is highly recommended.\n> \n> For this source, RudderStack allows the end date to be less than or equal to the current date. **Basic**/**CRON** scheduling is useful when you want to keep syncing updates for some time in the future as well. By setting the sync schedule to **Manual**, only one sync is required to sync all your Mixpanel data.\n\nFor more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the Mixpanel data you want to ingest by selecting the required resources:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/mixpanel-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/mixpanel-connection-settings-2.webp)\n\nThe below table mentions the syncs and API endpoints supported by these resources from Mixpanel to your warehouse destination:\n\n| Resource | Sync type | Mixpanel API endpoint |\n| --- | --- | --- |\n| `revenue` | Incremental | `/engage` |\n| `funnels` | Incremental | `/funnels` |\n| `export` | Incremental | `/export` |\n| `engage` | Incremental | `/engage` |\n| `cohorts` | Incremental | `/cohorts/list` |\n| `cohort_members` | Incremental | `/engage` |\n| `annotations` | Full Refresh | `/annotations` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh** and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\nMixpanel is now configured as a source. RudderStack will start ingesting data from Mixpanel as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\n#### Can I connect my Mixpanel source to multiple data warehouse destinations?\n\nYou can connect **only one data warehouse destination** per Cloud Extract source. If you wish to send data to multiple warehouses, you can configure multiple Cloud Extract sources with the same settings and connect them to each data warehouse.\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Mixpanel source | RudderStack Docs",
  "description": "Sync data from Mixpanel to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/adobe-analytics/",
  "markdown": "# Adobe Analytics | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Adobe Analytics | RudderStack Docs",
  "description": "Send your event data from RudderStack to Adobe Analytics.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/adobe-analytics/setting-up-adobe-analytics-in-rudderstack/",
  "markdown": "# Set up Adobe Analytics | RudderStack Docs\n\nSet up Adobe Analytics as a destination in RudderStack.\n\n* * *\n\n*     9 minute read  \n    \n\nRudderStack supports sending event data to Adobe Analytics via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device Mode** | **Supported** | **Supported** | **\\-** |\n| **Cloud Mode** | **Supported** | **Supported** | **Supported** |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In a web device mode integration, that is, using [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) as a source, the Adobe Analytics native SDK is loaded from `https://cdn.rudderlabs.com` domain. Based on your website’s content security policy, you might need to [allowlist this domain](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#allowlist-destination-domain) to load the Adobe Analytics SDK successfully.\n\nOnce you’ve confirmed that the source platform supports sending data to Adobe Analytics, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **Adobe Analytics**.\n2.  Assign a name to the destination and click **Continue**.\n\n## Connection Settings\n\nTo successfully configure Adobe Analytics as a destination, you will need to configure the following settings:\n\n*   **Tracking Server URL**: Enter the `trackingServer` variable to determine the location where an image request is sent. For example, `jimsbrims.sc.omtrdc.net`. Do not include the `http://` or `https://` in the tracking server URL. Refer to the [Adobe Analytics documentation](https://experienceleague.adobe.com/docs/analytics/implementation/vars/config-vars/trackingserver.html?lang=en) for more information.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this variable is defined incorrectly, your implementation may experience data loss.\n\n*   **Tracking Server Secure URL**: Enter the `trackingServerSecure` variable to determine the location where an image request is sent over HTTPS. If this variable is not defined correctly, your implementation may experience data loss. Refer to the [Adobe Analytics documentation](https://experienceleague.adobe.com/docs/analytics/implementation/vars/config-vars/trackingserversecure.html?lang=en) for more information.\n*   **Report Suite ID(s)**: Enter the Report Suite ID(s) (separated by commas) which can be found in your Adobe Analytics Settings page. For example: `ab.cd`,`ef.gh`,`ij.kl`.\n*   **Check for Heartbeat calls to be made over HTTPS**: If this setting is enabled and the Heartbeat Tracking Server URL is present, RudderStack sets the SSL value to `true` so that the calls go over HTTPS.\n*   **Heartbeat Tracking Server URL**: If assigned, RudderStack uses this as the tracking server URL instead of the URL assigned in the **Tracking Server URL** field. It sets all the heartbeat configurations if you specify this URL. Refer to the [Adobe Analytics documentation](https://experienceleague.adobe.com/docs/media-analytics/using/sdk-implement/setup/setup-overview.html?lang=en) for more information.\n*   **Adobe Analytics JavaScript SDK URL/Heartbeat SDK URL**: Enter the proxy URL where you are hosting the `adobe-analytics-js.js` and `adobe-analytics-js-heartbeat.js`. By default, RudderStack hosts them at [https://cdn.rudderlabs.com/adobe-analytics-js/adobe-analytics-js.js](https://cdn.rudderlabs.com/adobe-analytics-js/adobe-analytics-js.js) and [https://cdn.rudderlabs.com/adobe-analytics-js/adobe-analytics-js-heartbeat.js](https://cdn.rudderlabs.com/adobe-analytics-js/adobe-analytics-js-heartbeat.js) respectively.\n*   **Adobe Heartbeat Settings**: This setting is used to map your RudderStack video events to Adobe Heartbeat Events. Refer to the [Adobe Analytics Heartbeat Measurement](https://www.rudderstack.com/docs/destinations/streaming-destinations/adobe-analytics/adobe-analytics-heartbeat/) documentation to find more information.\n\n### Identity Resolution\n\n*   **Marketing Cloud Organization ID**: Enter a value in this field if you want to use `visitorAPI.js`. For example: `99887766ABC@AdobeOrg`.\n*   **Drop Visitor ID**: If enabled, RudderStack does not assign the `userId` to `visitorID`. Refer to the [Adobe Analytics documentation](https://experienceleague.adobe.com/docs/id-service/using/implementation/setup-analytics.html?lang=en#section-6053a6b7c16c466a9f9fdbf9cb9db3df) for more information.\n\n### Timestamps\n\n*   **Timestamp Option**: Adobe Analytics has Report Suites that accept timestamped, non-timestamped or hybrid data. Note that `window.s.timestamp` will be affected. Also, RudderStack sets `visitorID` depending on this value if the **Drop Visitor ID** setting is disabled.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   If the timestamp option is disabled, then `visitorID` will be set.\n> *   If timestamp option is set to hybrid and the Prefer Visitor ID setting is on, then `visitorID` will be set.\n> *   For all other cases, RudderStack does not set a `visitorID`.\n> \n> Also note the following regarding timestamps:\n> \n> *   If the timestamp option is enabled, then timestamp will be set.\n> *   If the timestamp option is hybrid and Prefer Visitor ID is off, then timestamp will be set.\n\n*   **Send Both Timestamp and VisitorID for Timestamp Optional Reporting Suites**: This setting lets you choose whether to send both the timestamp and the visitor ID when sending server-side events, in case you are using the [Timestamps Optional Reporting Suite](https://experienceleague.adobe.com/docs/analytics/admin/admin-tools/timestamp-optional.html?lang=en).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Enabling this setting might lead the data to be out of order. Hence, it is not recommended by Adobe. In order to make it work, you need to enable the **Optional Timestamp** setting in **Reporting Suites**.\n\n*   **No Fallbacks for Visitor ID**: Enable this setting to remove the fallbacks. However, it is applicable only for the server-side events when the **Drop Visitor ID** setting is disabled and **marketingCloudId** is sent in the Adobe Analytics `integrations` object. The priority order of setting the Adobe Analytics visitor ID is the destination-specific setting for `visitorId` > `userId` > `anonymousId`.\n*   **Prefer Visitor ID**: Adobe does not allow sending both `visitorID` and timestamp. Hence, this option is used when the timestamp option is set as hybrid. Also, note that if this option is enabled, RudderStack sets the `visitorID` field. If disabled, RudderStack sets the timestamp value. Refer to the [Adobe Analytics documentation](https://experienceleague.adobe.com/docs/analytics/implementation/vars/page-vars/timestamp.html?lang=en) for more information.\n*   **Enable pageName for Track Events**: When enabled, RudderStack only tracks events by sending a `pageName`.\n\n### Mappings\n\n*   **Map Rudder Events to Adobe Custom Events**: This setting allows you to add one or multiple custom Adobe events separated by comma.\n*   **Map Rudder Context data to Adobe Context Data**: Context data variables allow you to you define custom variables on each page that the processing rules apply and can read. Instead of explicitly assigning values to the analytics variables, you can send your data in via these context data variables. The processing rules take the values from the context data variables and pass them into the respective analytics variables.\n\nThis setting allows you to map the key present under the context/properties of the RudderStack message to the property name you want to send to the Adobe context data. An example is as shown below:\n\n```\n\"context\": {\n  \"contextProperties\": {\n    \"prop1\": \"val1\",\n    \"prop2\": \"val2\"\n  }\n}\n```\n\nIf you want to set `prop1` to Adobe’s context data `property1`, then map with `contextProperties.prop1` –> `property1`.\n\nIf you want to send top level properties `anonymousId`, `messageId`, `event` then simply enter the key.\n\nRefer to the [Adobe Analytics documentation](https://experienceleague.adobe.com/docs/analytics/implementation/vars/page-vars/contextdata.html?lang=en) for more information.\n\n*   **Prefix to add before all contextData property**: Specify a prefix to automatically append to your RudderStack properties before sending them as `contextData`.\n*   **Map Rudder Properties to Adobe eVars**: Enter the RudderStack property and the corresponding [eVar’s](https://experienceleague.adobe.com/docs/analytics/implementation/vars/page-vars/evar.html?lang=en) index number you want to map before sending to Adobe Analytics. Refer to the [mapping](#mapping-for-evars-and-hierarchy-variables) section for more information on the different values you can specify in the RudderStack property field.\n*   **Map Rudder Properties to Adobe Hierarchy properties**: Enter the RudderStack property and the corresponding [hierarchy variable’s](https://experienceleague.adobe.com/docs/analytics/implementation/vars/page-vars/hier.html?lang=en) index number you want to map before sending to Adobe Analytics. Refer to the [mapping](#mapping-for-evars-and-hierarchy-variables) section for more information on different values you can specify in the Rudder property field.\n*   **Map Rudder Properties to Adobe list properties**: Enter the RudderStack property and the corresponding [list’s](https://experienceleague.adobe.com/docs/analytics/implementation/vars/page-vars/list.html?lang=en) index number you want to map before sending to Adobe Analytics. You can specify the list properties as an array/string separated by commas. Otherwise, they are dropped.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For all the list properties you mention in this field, it is mandatory to specify their delimiter in the below setting. The delimiter is used to create the list string for the XML payload.\n\n*   **Map Rudder Property with Delimiters for list properties**: Set any of the delimiters from `, ; / : |`. RudderStack sends the list variables as a string. Any list of properties is delimited using these delimiters.\n*   **Map Rudder Properties to Adobe Custom properties**: Enter the RudderStack property and the corresponding [prop’s](https://experienceleague.adobe.com/docs/analytics/implementation/vars/page-vars/prop.html?lang=en) index number you want to map before sending to Adobe Analytics.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For all the custom properties you mention in this field, it is mandatory to specify their delimiter in the below setting. The delimiter is used to create the props string for the XML payload.\n\n*   **Map Rudder Property with Delimiters for Adobe Custom properties**: Set any of the delimiters from `, ; / : |`. RudderStack sends the list variables as a string. Any list of properties is delimited using these delimiters.\n\n### Merchandise Event Level Settings\n\n*   **Map Rudder Events to Adobe Merchandise events**: This setting lets you map the RudderStack event with an Adobe event of the currency/purchase type. For example: `event5`.\n*   **Currency/Incremental properties to add to merchandise events at event level**: Enter the RudderStack property that has a currency/counter value. RudderStack uses this to create the event string like `purchase,event5=19.9`. It also automatically sets the `currencyCode` value where the default is USD. Refer to the [Adobe Analytics documentation](https://experienceleague.adobe.com/docs/analytics/implementation/vars/page-vars/events/events-overview.html?lang=en) for more information.\n\n### Merchandise Product Level Settings\n\n*   **Map Rudder Events to Adobe Merchandise events**: This setting lets you map a RudderStack event with an Adobe event of the currency/purchase type.\n*   **Currency/Incremental properties to add to merchandise events at product level**: Enter the RudderStack property that has a currency/counter value. This will be used to create a product string like `[category][item][quantity][total][incrementor][merchString]`.\n*   **Map Rudder Properties to eVars at product level**: Enter the RudderStack property and the corresponding [eVars](https://experienceleague.adobe.com/docs/analytics/implementation/vars/page-vars/evar-merchandising.html?lang=en) index you want to map before sending to Adobe Analytics. RudderStack appends the eVars with `|` and sends it along with the product string. Refer to the [mapping](#mapping-for-evars-and-hierarchy-variables) section for more information on different values you can specify in the Rudder property field.\n*   **Product Identifier**: Choose either of the SKU, ID, or Name of the product as a product identifier.\n\n### Client-side Event Filtering\n\nThis setting is applicable **only if** you are sending events to Adobe Analytics via device mode. It lets you specify which events should be blocked or allowed to flow through to Adobe Analytics. Refer to the [Client-side Event Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) guide for more information.\n\n### Consent Settings\n\n*   **OneTrust Cookie Categories**: This setting lets you associate [OneTrust](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/javascript/) cookie consent groups to Adobe Analytics.\n\n## Mapping for evars and hierarchy variables\n\nThis section is applicable **only** for the following connection settings:\n\n*   Map Rudder Properties to Adobe eVars\n*   Map Rudder Properties to eVars at product level\n*   Map Rudder Properties to Adobe Hierarchy properties\n\nYou can specify any of the following values in the **Rudder property** field of the above settings:\n\n*   **Key name**: Specify a key name as the RudderStack property present in the event payload. RudderStack uses the following priority order to find the key name in the event payload: `properties` > `traits` > `context.traits` > `context`\n*   **Absolute path of the key in the event payload**: Specify the exact path of the key in the RudderStack property present in the event payload (in dot notation). For example, `context.library.name`.\n*   **Dynamic destination configuration**: Specify the RudderStack property as:  \n    {{ `path of the property` || “default-value” }}. For example,  \n    {{ `message.properties.configUrl` || “config.sc.omtrdc.net” }}.\n\nRudderStack sets the default values for the below-mentioned XML tags. However, you can override them by passing the required values in the `integrations` object.\n\n| XML tag | Default value |\n| --- | --- |\n| `linktype` | `o` |\n| `linkName` | `event name` |\n| `linkURL` | `context.page.url` |\n\nRefer to the [Adobe documentation](https://developer.adobe.com/analytics-apis/docs/1.4/guides/data-insertion/variable-reference/) for more information on these tags.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Set up Adobe Analytics | RudderStack Docs",
  "description": "Set up Adobe Analytics as a destination in RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/mailchimp/",
  "markdown": "# Mailchimp source | RudderStack Docs\n\nSync data from Mailchimp to your warehouse destination via RudderStack.\n\n* * *\n\n*     3 minute read  \n    \n\n[Mailchimp](https://mailchimp.com/) is a popular email marketing automation platform used worldwide by thousands of businesses. Built specially for eCommerce and retail, Mailchimp allows you to build your audience and send them personalized campaign and marketing messages through web or mobile.\n\nThis document guides you in setting up Mailchimp as a source in RudderStack. Once configured, RudderStack automatically ingests your specified Mailchimp data, which can then be routed to your data warehouse destination supported by RudderStack.\n\n## Getting Started\n\nTo set up Mailchimp as a source on the RudderStack dashboard, follow these steps:\n\n*   Log into your [RudderStack dashboard](https://app.rudderlabs.com/signup?type=freetrial).\n\n[![RudderStack Dashboard](https://www.rudderstack.com/docs/images/1%20%2815%29%20%281%29.webp)](https://www.rudderstack.com/docs/images/1%20%2815%29%20%281%29.webp)\n\n*   Then, click the **Directory** option on the left navigation bar and go to **Cloud Extract** under **Sources**.\n\n[![Directory](https://www.rudderstack.com/docs/images/2%20%2820%29.webp)](https://www.rudderstack.com/docs/images/2%20%2820%29.webp)\n\n*   From the list of sources, click **Mailchimp**.\n*   Assign a name to your source, and click **Next**.\n\n[![Mailchimp](https://www.rudderstack.com/docs/images/3%20%2818%29.webp)](https://www.rudderstack.com/docs/images/3%20%2818%29.webp)\n\n### Specifying Connection Credentials\n\n*   Next, click the **Connect with Mailchimp** option:\n\n[![Connect with Mailchimp](https://www.rudderstack.com/docs/images/4%20%2817%29.webp)](https://www.rudderstack.com/docs/images/4%20%2817%29.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you’ve already configured Mailchimp as a source before, you can choose the account visible under the **Use existing credentials** tab.\n\n*   Authorize RudderStack to access your Mailchimp account:\n\n[![Authorize RudderStack](https://www.rudderstack.com/docs/images/5%20%2818%29.webp)](https://www.rudderstack.com/docs/images/5%20%2818%29.webp)\n\n### Configuring the Mailchimp Source\n\n*   Select the **Earliest campaign year** and the **Campaign fetch period** in the settings. The details are as follows:\n    *   **Earliest campaign year**: The first import will fetch all campaign data since the start of the specified year.\n    *   **Campaign fetch period**: All the subsequent imports will fetch the campaign data up to this specified period.\n\n[![Earliest Campaign Year](https://www.rudderstack.com/docs/images/6%20%2816%29.webp)](https://www.rudderstack.com/docs/images/6%20%2816%29.webp)\n\n### Setting the Table Prefix, Run Frequency and Data Update Schedule\n\n*   Next, you will be required to set the **Table Prefix**. RudderStack will create a table with this prefix name in your database and load all your Mailchimp data into it.\n*   Also, set the **Run Frequency** to schedule the data import from your Mailchimp account to RudderStack. Optionally, you can also specify the time when you want this synchronization to start, by choosing the time under the **Sync Starting At** option.\n\n[![Google Analytics](https://www.rudderstack.com/docs/images/7%20%2811%29.webp)](https://www.rudderstack.com/docs/images/7%20%2811%29.webp)\n\n### Selecting the Data to Import\n\n*   Finally, choose the Mailchimp data that you wish to ingest via RudderStack. You can either select all data, or choose specific Mailchimp attributes, as per your requirement.\n\n[![Ingest via RudderStack](https://www.rudderstack.com/docs/images/8%20%285%29.webp)](https://www.rudderstack.com/docs/images/8%20%285%29.webp)\n\nThat’s it! Mailchimp is now successfully configured as a source on your RudderStack dashboard.\n\nRudderStack will start ingesting data from Mailchimp as per the specified frequency. You can further connect this source to your data warehouse by clicking on **Connect Destinations** or **Add Destinations**:\n\n[![Add Destinations](https://www.rudderstack.com/docs/images/9%20%283%29.webp)](https://www.rudderstack.com/docs/images/9%20%283%29.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Connect Destinations** option if you have already configured a data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, click the **Add Destination** button.\n\n## FAQ\n\nYes, it is.\n\nWe have implemented a feature wherein RudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Mailchimp source | RudderStack Docs",
  "description": "Sync data from Mailchimp to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/sendgrid/",
  "markdown": "# SendGrid source | RudderStack Docs\n\nSync data from SendGrid to your warehouse destination via RudderStack.\n\n* * *\n\n*     5 minute read  \n    \n\n[SendGrid](https://www.sendgrid.com/) is an email delivery and marketing tool that lets you build and deliver personalized experiences through their API and marketing automation flows.\n\nThis document guides you in setting up SendGrid as a source in RudderStack. Once configured, RudderStack automatically ingests your SendGrid data and routes it to your specified data warehouse destination.\n\n## Getting started\n\nTo set up SendGrid as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **SendGrid** from the list of sources.\n3.  Assign a name to your source and click **Next**.\n\n### Connection settings\n\n1.  Enter the following connection credentials to authenticate your SendGrid account with RudderStack:\n\n[![SendGrid credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/sendgridv2-connection-settings.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/sendgridv2-connection-settings.webp)\n\n*   **SendGrid API key**: Enter your SendGrid API key by going to your SendGrid dashboard and navigating to **Settings** > **API Keys**.\n*   **Start time**: Choose the start date from which you want RudderStack to ingest the SendGrid data. RudderStack will not replicate any data before this date.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the required permissions for the API key, refer to the [FAQ](#faq) section below.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from SendGrid to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your SendGrid data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from SendGrid:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the SendGrid data you want to ingest by selecting the required resources:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/sendgridv2-connection-settings-3.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/sendgridv2-connection-settings-3.webp)\n\nThe below table mentions the syncs and API endpoints supported by these resources from SendGrid to your warehouse destination:\n\n| Resource | Full Refresh sync | Incremental sync | SendGrid API endpoint |\n| --- | --- | --- | --- |\n| `blocks` | Yes | Yes | `/suppression/blocks` |\n| `bounces` | Yes | Yes | `/suppression/bounces` |\n| `campaigns` | Yes | No  | `/marketing/campaigns` |\n| `contacts` | Yes | No  | `/marketing/contacts` |\n| `global_suppressions` | Yes | Yes | `/suppression/unsubscribes` |\n| `invalid_emails` | Yes | Yes | `/suppression/invalid_emails` |\n| `lists` | Yes | No  | `/marketing/lists` |\n| `messages` | Yes | Yes | `/messages` |\n| `segments` | Yes | No  | `/marketing/segments` |\n| `single_sends` | Yes | No  | `/marketing/stats/singlesends` |\n| `spam_reports` | Yes | Yes | `/suppression/spam_reports` |\n| `stats_automations` | Yes | No  | `/marketing/stats/automations` |\n| `suppression_group_members` | Yes | No  | `/asm/suppressions` |\n| `suppression_groups` | Yes | No  | `/asm/groups` |\n| `templates` | Yes | No  | `/templates` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh** and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\nNote the following restrictions for the `campaigns`, `messages`, and `single_sends` resources:\n\n*   `campaigns`: SendGrid currently supports two kinds of marketing campaigns - **legacy** and **new** marketing campaigns. However, RudderStack only supports the new marketing campaigns.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If your SendGrid account uses legacy marketing campaigns, you might get a **403 Forbidden** error while ingesting data from this resource.\n\n*   `messages`: To ingest data from this resource, you must have purchased access to the [Email Activity Feed](https://docs.sendgrid.com/ui/analytics-and-reporting/email-activity-feed) API.\n*   `single_sends`: RudderStack uses the [`stats`](https://docs.sendgrid.com/api-reference/marketing-campaign-stats/get-all-single-sends-stats) API instead of the `marketing` API to ingest the data from this resource.\n\nSendGrid is now configured as a source. RudderStack will start ingesting data from SendGrid as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\n#### How do I obtain the SendGrid API key?\n\nTo obtain the API key for configuring the SendGrid Cloud Extract source, follow these steps:\n\n1.  Log into your SendGrid dashboard.\n2.  Go to **Settings** > **API keys**.\n3.  Click the **Create API key** option:\n\n[![SendGrid API key](https://www.rudderstack.com/docs/images/cloud-extract-sources/sendgrid-api-key.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/sendgrid-api-key.webp)\n\n4.  Enter the name of the API key under the **API Key Name** field. In **API Key Permissions**, select **Restricted Access**.\n\n[![SendGrid API key permissions](https://www.rudderstack.com/docs/images/cloud-extract-sources/sendgrid-api-key-permissions.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/sendgrid-api-key-permissions.webp)\n\n5.  Set the permissions as shown below:\n\n[![SendGrid required permissions](https://www.rudderstack.com/docs/images/cloud-extract-sources/sendgrid-api-permissions.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/sendgrid-api-permissions.webp)\n\n6.  Finally, click **Create & View**. Use these credentials to configure the source.\n\n[![SendGrid API details](https://www.rudderstack.com/docs/images/cloud-extract-sources/sendgrid-api-key-details.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/sendgrid-api-key-details.webp)\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Copy the API key and store it securely. SendGrid will not display the API key again once you click **Done**.\n\n#### How does RudderStack sync the SendGrid data?\n\nUpon configuring the source, RudderStack first connects to your SendGrid instance and pulls all historical data. Subsequently, RudderStack syncs the SendGrid data based on your specified sync schedule and frequency.\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "SendGrid source | RudderStack Docs",
  "description": "Sync data from SendGrid to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/adobe-analytics/cloud-mode/",
  "markdown": "# Adobe Analytics cloud mode | RudderStack Docs\n\nSend events to Adobe Analytics using RudderStack cloud mode.\n\n* * *\n\n*     2 minute read  \n    \n\nRudderStack lets you send your event data to Adobe Analytics via [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode).\n\nFind the open source transformer code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/develop/src/v0/destinations/adobe_analytics).\n\n## Track\n\nRudderStack categorizes the [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) events sent to Adobe into the following three types:\n\n1.  User tracking events\n2.  [Ecommerce events](https://www.rudderstack.com/docs/destinations/streaming-destinations/adobe-analytics/ecommerce-events/)\n3.  [Heartbeat (video) events](https://www.rudderstack.com/docs/destinations/streaming-destinations/adobe-analytics/adobe-analytics-heartbeat/)\n\nA sample `track` call is as shown:\n\n```\nrudderanalytics.track(\"User clicked link\", {\n  category: \"click\",\n  label: \"URL click\"\n})\n```\n\nNote that:\n\n*   Before sending the user tracking and heartbeat `track` events, you must [map them in the RudderStack dashboard](https://www.rudderstack.com/docs/destinations/streaming-destinations/adobe-analytics/setting-up-adobe-analytics-in-rudderstack/#connection-settings).\n*   RudderStack sends the ecommerce events to Adobe if they conform to the following mapping:\n\n| RudderStack ecommerce event | Adobe event |\n| --- | --- |\n| `Product Viewed` | `prodView` |\n| `Product List Viewed` | `prodView` |\n| `Product Added` | `scAdd` |\n| `Product Removed` | `scRemove` |\n| `Order Completed` | `purchase` |\n| `Cart Viewed` | `scView` |\n| `Checkout Started` | `scCheckout` |\n| `Cart Opened` | `scOpen` |\n| `Opened Cart` | `scOpen` |\n\n## Page\n\nRudderStack sends a page view event to Adobe Analytics whenever you make a [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call.\n\nA sample `page` call is as shown:\n\n```\n// Passing page category, name and properties\nrudderanalytics.page(\"category\", \"name\", {\n  path: \"path\",\n  url: \"url\",\n  title: \"title\",\n  search: \"search\",\n  referrer: \"referrer\",\n})\n```\n\nIf this call is made, the `pageName` of the `window.s` variable will be set as **Viewed Page name**. RudderStack also sends other information like `referrer`,`url`, etc.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For every `page` call, RudderStack sets the mappings done in the dashboard as contextual data, eVars, hiers, lists and props. It calls the `t()` method to compile all the set variables and sends them to Adobe Analytics.\n\n## Overriding Adobe parameters\n\nWhen sending data to Adobe Analytics via cloud mode, RudderStack lets you override the values of certain Adobe parameters in the final XML payload by passing the following event properties:\n\n| Property name | Data type | Description |\n| --- | --- | --- |\n| `overrideEvars` | Object | Sets the value of the `eVar` tag.<br><br>**Example**:<br><br>{  <br>  “evar1”: “value1”,  <br>  “evar2”: “value2”,  <br>} |\n| `overrideHiers` | Object | Sets the value of the `hier` tag.<br><br>**Example**:<br><br>{  <br>  “hier1”: “oh1”,  <br>  “hier2”: “oh2”,  <br>} |\n| `overrideLists` | Object | Sets the value of the `list` tag.<br><br>**Example**:<br><br>{  <br>  “list1”: “bike, fazer90”  <br>} |\n| `overrideCustomProperties` | Object | Sets the value of the `prop` tag.<br><br>**Example**:<br><br>{  <br>  “property1”: “somevalue”  <br>} |\n| `overrideEventString` | String | Sets the value of the event string.<br><br>**Example**: `scAdd` |\n| `overrideProductString` | String | Sets the value of the product string.<br><br>**Example**:<br><br>\";product1;Games;event1=1\" |\n| `overrideEventName` | String | Fallback for events that are neither mapped or ecommerce events.<br><br>**Example**: `tracking event` |\n| `overridePageView` | Boolean | Send link and page values exclusively. If set to `true`, RudderStack sends page-related tags to Adobe, otherwise it sends link-related tags. |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Adobe Analytics cloud mode | RudderStack Docs",
  "description": "Send events to Adobe Analytics using RudderStack cloud mode.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/salesforce/",
  "markdown": "# Salesforce source | RudderStack Docs\n\nSync data from Salesforce to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Salesforce](https://salesforce.com/) is an industry leader in enterprise CRM. It offers a suite of enterprise applications revolving around marketing automation, customer support, application development, and analytics.\n\nThis document guides you in setting up Salesforce as a source in RudderStack. Once configured, RudderStack automatically ingests your specified Salesforce data, which can then be routed to your RudderStack-supported data warehouse destination.\n\n## Getting started\n\nTo set up Salesforce as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Salesforce** from the list of sources.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\nTo set up Salesforce as a Cloud Extract source, you need to configure the following settings:\n\n[![Salesforce credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/salesforce-connection-settings-1.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/salesforce-connection-settings-1.webp)\n\n*   Enable the **Sandbox** checkbox if your app is in the Salesforce [sandbox](https://help.salesforce.com/s/articleView?id=sf.create_test_instance.htm&type=5) mode.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> It is highly recommended to keep the checkbox unchecked if you’re unsure whether your app is in a Salesforce sandbox.\n\n*   Click **Connect with Salesforce V2** and connect your Salesforce account with RudderStack.\n*   **Start Date**: Choose the start date from which you want RudderStack to ingest the Salesforce data. RudderStack will not replicate any data before this date.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you do not specify the start date, RudderStack will replicate all your data by default.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack replicates all Salesforce data associated with the `updated` field. If not present, it picks the data associated with the `created` field.\n> \n> **RudderStack only reads your Salesforce data and does not write to it**.\n\n*   **Salesforce Object filtering criteria**: This optional setting lets you add the filtering criteria to read and ingest only the Salesforce objects relevant to you.\n\n[![Salesforce credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/salesforce-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/salesforce-connection-settings-2.webp)\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Salesforce to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Salesforce data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Salesforce:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nChoose the Salesforce data that you wish to ingest via RudderStack. You can either select all data or choose specific Salesforce data attributes as per your requirement.\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/salesforce-connection-settings-3.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/salesforce-connection-settings-3.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on how RudderStack syncs your Salesforce data, refer to the [FAQ](#faq) section below.\n\nSalesforce is now configured as a source. RudderStack will start ingesting data from Salesforce as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\n#### Can I connect my Salesforce source to multiple data warehouse destinations?\n\nYou can connect **only one data warehouse destination** per Cloud Extract source. If you wish to send data to multiple warehouses, you can configure multiple Cloud Extract sources with the same settings and connect them to each data warehouse.\n\n#### How does RudderStack handle the Salesforce rate limits?\n\nRudderStack automatically stops the sync process if the Salesforce [rate limits](https://developer.salesforce.com/docs/atlas.en-us.salesforce_app_limits_cheatsheet.meta/salesforce_app_limits_cheatsheet/salesforce_app_limits_platform_api.htm) are hit. Once the limits are lifted, RudderStack starts the next data sync from the point it last stopped.\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on setting a table prefix, refer to the [Destination settings](#destination-settings) section above.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Salesforce source | RudderStack Docs",
  "description": "Sync data from Salesforce to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/adobe-analytics/adobe-analytics-web-device-mode/",
  "markdown": "# Adobe Analytics web device mode\n\nConfigure web device mode settings for an Adobe Analytics destination.\n\n* * *\n\n*     2 minute read  \n    \n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Find the open source JavaScript SDK code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-sdk-js/tree/production/src/integrations/AdobeAnalytics).\n\n## Initialization\n\nWe initialize [`appmeasurement.js`](https://cdn.rudderlabs.com/adobe-analytics-js/adobe-analytics-js.js) or [`mediaSDK.js`](https://cdn.rudderlabs.com/adobe-analytics-js/adobe-analytics-js-heartbeat.js) according to the settings in the RudderStack dashboard.\n\nRudderStack first checks if any global properties are set in `window.s_account` or `window.s objects`. If already present, they will be used. Otherwise, RudderStack uses the Report Suite IDs, Tracking Server URL, and Tracking Server Secure URL (optional) as set in the RudderStack dashboard.\n\nIf Marketing Cloud Organization ID is set in the dashboard, RudderStack initializes `visitorApi.js` and sets the ID in `window.Visitor.getInstance(<Your Marketing Cloud Org Id>)`.\n\n## Page\n\nRudderStack sends a page view event to Adobe Analytics whenever you make a **`page()`** call.\n\nA sample `page` call is as shown:\n\n```\n// Passing page category, name and properties\nrudderanalytics.page(\"category\", \"name\", {\n  path: \"path\",\n  url: \"url\",\n  title: \"title\",\n  search: \"search\",\n  referrer: \"referrer\",\n})\n```\n\nIf this call is made the `pageName` of the `window.s` variable will be set as **Viewed Page name**. RudderStack also sends other information like `referrer`,`url`, etc.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The mappings done in the RudderStack dashboard will be set as context data, eVars, hiers, lists and props for every `page` call. The `t()` method is called to compile all variables set and send them to Adobe Analytics.\n\n## Track\n\nAccording to the mapping done in RudderStack, the events can be sent as particular Adobe Events.\n\nThe `track` events for Adobe can be broadly categorized in 3 types:\n\n1.  Normal track events\n2.  Ecommerce track events\n3.  Video type (Heartbeat) track events\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For the regular and video type (Heartbeat) `track` events, it is necessary to map the events in the RudderStack dashboard.\n\nFor ecommerce track events, if the events fall under the following mapping they will be sent accordingly. Otherwise, the mapping should be done in the dashboard.\n\nThe mapping is as shown:\n\n| Rudder ecommerce event | Adobe event |\n| --- | --- |\n| `product viewed` | `prodView` |\n| `product list viewed` | `prodView` |\n| `product added` | `scAdd` |\n| `product removed` | `scRemove` |\n| `order completed` | `purchase` |\n| `cart viewed` | `scView` |\n| `checkout started` | `scCheckout` |\n| `cart opened` | `scOpen` |\n| `opened cart` | `scOpen` |\n\nA sample `track` call is as shown:\n\n```\nrudderanalytics.track(\"Track me\", {\n  category: \"category\",\n  label: \"label\",\n  value: \"value\",\n})\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Adobe Analytics web device mode | RudderStack Docs",
  "description": "Configure web device mode settings for an Adobe Analytics destination.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/stripe/",
  "markdown": "# Stripe | RudderStack Docs\n\nSync data from Stripe to your warehouse destination via RudderStack.\n\n* * *\n\n*     5 minute read  \n    \n\n[Stripe](https://www.stripe.com/) is an online payment processing system for businesses. It offers cutting-edge software and APIs, allowing thousands of businesses to manage online payments.\n\nThis document guides you in setting up Stripe as a source in RudderStack. Once configured, RudderStack automatically ingests your Stripe data and routes it to your specified data warehouse destination.\n\n## Getting started\n\nTo set up Stripe as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Stripe** from the list of sources.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\nTo set up Stripe as a Cloud Extract source, configure the following settings:\n\n*   **Account ID**: Enter your Stripe account ID (usually starts with `acct_`). You can get it by logging in to your [Stripe dashboard](https://dashboard.stripe.com/) and going to your **Account** settings. For more information on finding your account ID, refer to the [Stripe documentation](https://stripe.com/docs/dashboard/basics#find-account-id).\n*   **Secret Key**: Enter your Stripe API key (usually starts with `sk_live_`). You can get it by going to the [API keys](https://dashboard.stripe.com/apikeys) page. For more information on the secret keys, refer to the [Stripe documentation](https://stripe.com/docs/keys).\n*   **Replication start date**: Select the date from when RudderStack should ingest your Stripe data.\n*   **Lookback window in days**: This setting corresponds to the number of days from when RudderStack starts fetching the data. For example, if you set **Lookback window in days** to `1`, RudderStack fetches data from **Replication start date** - 1.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Use this setting if your data is frequently updated.\n\n*   **Data request time increment in days**: Specify the time window used by RudderStack when requesting the data from Stripe. For example, if you set **Replication start date** to `Jan 01, 2022` and **Data request time increment in days** is set to 365 days, RudderStack fetches data from `Jan 01, 2022` to `Jan 01, 2023`. By default, RudderStack sets this field to `365` days, which is ideal for most use cases.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that a higher value for the **Data request time increment in days** setting corresponds to lesser API requests and faster syncs.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Stripe to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Stripe data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Stripe:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the Stripe data you want to ingest by selecting the required resources. The below table mentions the syncs supported by these resources from Stripe to your warehouse destination where `id` is a common primary key for all:\n\n| Resource | Sync type | Stripe API endpoint |\n| --- | --- | --- |\n| Balance Transactions | Incremental | [`/balance_transactions`](https://stripe.com/docs/api/balance_transactions) |\n| Bank Accounts | Full Refresh | [`/customers`](https://stripe.com/docs/api/customer_bank_accounts) |\n| Charges | Incremental | [`/charges`](https://stripe.com/docs/api/charges) |\n| Checkout Sessions | Incremental | [`/checkout`](https://stripe.com/docs/api/checkout/sessions) |\n| Checkout Sessions Line Items | Incremental | [`/checkout`](https://stripe.com/docs/api/checkout/sessions/object#checkout_session_object-line_items) |\n| Coupons | Incremental | [`/coupons`](https://stripe.com/docs/api/coupons) |\n| Customer Balance Transactions | Full Refresh | [`/customers`](https://stripe.com/docs/api/customer_balance_transactions) |\n| Customers | Incremental | [`/customers`](https://stripe.com/docs/api/customers) |\n| Disputes | Incremental | [`/disputes`](https://stripe.com/docs/api/disputes) |\n| Events | Incremental | [`/events`](https://stripe.com/docs/api/events) |\n| Invoice Items | Incremental | [`/invoiceitems`](https://stripe.com/docs/api/invoiceitems) |\n| Invoice Line Items | Full Refresh | [`/invoices`](https://stripe.com/docs/api/invoices/line_item) |\n| Invoices | Incremental | [`/invoices`](https://stripe.com/docs/api/invoices) |\n| Payment Intents | Incremental | [`/payment_intents`](https://stripe.com/docs/api/payment_intents) |\n| Payouts | Incremental | [`/payouts`](https://stripe.com/docs/api/payouts) |\n| Promotion Code | Incremental | [`/promotion_codes`](https://stripe.com/docs/api/promotion_codes) |\n| Plans | Incremental | [`/plans`](https://stripe.com/docs/api/plans) |\n| Products | Incremental | [`/products`](https://stripe.com/docs/api/products) |\n| Subscription Items | Full Refresh | [`/subscription_items`](https://stripe.com/docs/api/subscription_items) |\n| Subscriptions | Incremental | [`/subscriptions`](https://stripe.com/docs/api/subscriptions) |\n| Transfers | Incremental | [`/transfers`](https://stripe.com/docs/api/transfers) |\n\nRudderStack captures the updates for the following resources using the [Events API](https://stripe.com/docs/api/events):\n\n*   Charges\n*   Customers\n*   Disputes\n*   Invoices\n*   Invoice Items\n*   Plans\n*   Products\n*   Subscriptions\n*   Transfers\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh** and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\nStripe is now configured as a source. RudderStack will start ingesting data from Stripe as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\nYes, it is.\n\nRudderStack implements a feature wherein it associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Stripe | RudderStack Docs",
  "description": "Sync data from Stripe to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/adobe-analytics/adobe-analytics-mobile-device-mode/",
  "markdown": "# Adobe Analytics mobile device mode\n\nSend events to Adobe Analytics via the RudderStack mobile device mode.\n\n* * *\n\n*     4 minute read  \n    \n\nThis document covers the necessary settings and configurations to send events to Adobe Analytics via your mobile device mode.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Mobile [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode) refers to using the Android or iOS SDK to send your events directly to Adobe Analytics.\n\nTo configure Adobe Analytics via the mobile device mode, follow these steps:\n\n1.  Click the **Manage Apps** option on the left nav bar on your Adobe Mobile Services dashboard.\n2.  **Add** your app or click an existing app and configure the required settings under the **Manage App Settings** tab:\n\n[![](https://www.rudderstack.com/docs/images/event-stream-destinations/adobe-mobile-services-add-app.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/adobe-mobile-services-add-app.webp)\n\n3.  Click the **Config File** option present at the bottom of the same page:\n\n[![](https://www.rudderstack.com/docs/images/event-stream-destinations/adobe-mobile-services-config-file.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/adobe-mobile-services-config-file.webp)\n\n### Android\n\nFor Android, place the `ADBMobileConfig.json` file inside your app under `src/main/assets/`.\n\nThen, follow the instructions in the [Adobe documentation](https://experienceleague.adobe.com/docs/mobile-services/android/getting-started-android/dev-qs.html?lang=en) to create the report suite.\n\n### iOS\n\nFor iOS, drag and drop the `ADBMobileConfig.json` under the `Pods` section in the `Project Navigator`and verify the following:\n\n*   The `Copy items if needed` checkbox is selected.\n*   `Create groups` is selected.\n*   None of the checkboxes in the `Add to targets` section is selected.\n\nIn **File Inspector**, add the JSON file to the `AdobeMobileSDK` target. Then, follow the instructions in the [Adobe documentation](https://experienceleague.adobe.com/docs/media-analytics/using/sdk-implement/setup/set-up-ios.html?lang=en#) to create the report suite.\n\n## Adding device mode integration\n\nFollow these steps to add Adobe Analytics to your iOS project:\n\n1.  In your `Podfile`, add the `Rudder-Adobe` extension:\n\n2.  After adding the dependency followed by `pod install` , add the imports to your `AppDelegate.m` file as shown:\n\n```\n#import <rudder>\n#import <rudderadobefactory.h>\n```\n\n3.  Then, add the initialization of your `RSClient` as shown:\n\n```\nRSConfigBuilder *configBuilder = [[RSConfigBuilder alloc] init];\n[configBuilder withDataPlaneUrl:DATA_PLANE_URL];\n[configBuilder withFactory:[RudderAdobeFactory instance]];\n[RSClient getInstance:<your_write_key> config:[configBuilder build]];\n```\n\nTo add Adobe Analytics to your Android project, follow these steps :\n\n1.  Open your `app/build.gradle` file and add the following under the `dependencies` section :\n\n```\nimplementation 'com.rudderstack.android.sdk:core:1.+'\nimplementation 'com.google.code.gson:gson:2.8.6'\nimplementation 'com.rudderstack.android.integration:adobe:1.0.0'\n\n// Adobe Analytics\nimplementation 'com.adobe.mobile:adobeMobileLibrary:4.18.2'\n```\n\n2.  Initialize the RudderStack SDK in the `Application` class’ `onCreate()` method as shown:\n\n```\n// initializing Rudder SDK\nval rudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withFactory(AdobeIntegrationFactory.FACTORY)\n            .build()\n    )\n```\n\n3.  For Android, make sure you add these permissions to your `AndroidManifest.xml`:\n\n```\n<uses-permission android:name=\"android.permission.INTERNET\"></uses-permission>\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"></uses-permission>\n```\n\n## Dashboard settings to send events via mobile device mode:\n\nConfigure the following settings in the RudderStack dashboard to use the mobile device mode:\n\n*   Set the **Heartbeat Tracking Server URL** and it should be in the format of `[your_namespace].hb.omtrdc.net`.\n*   Toggle **Check for Heartbeat calls to be made over HTTPS** to enable or disable the SSL mode.\n*   Enter **Prefix to add before all contextData property** to append a prefix before a custom property.\n*   Select **Product Identifier** to look for `Product Id`. By default, it is set to `Product Name`.\n\n## Sending events\n\nMap all events defined in the [Adobe Mobile Services](https://mobilemarketing.adobe.com/) dashboard in the **Map Rudder Events to Adobe Custom Events** dashboard setting.\n\n## Sending custom properties\n\nMap all properties defined at the [Adobe Mobile Services](https://mobilemarketing.adobe.com/) dashboard in the **Map Rudder Context data to Adobe Context Data** dashboard setting.\n\n## Identify\n\nWhen you make an `identify` call, RudderStack sets the Adobe `visitorId` to the value of the user’s RudderStack `userId`.\n\nA sample `identify` call looks like the following:\n\n```\n[[RSClient sharedInstance] identify:@\"Adobe_iOS_user\"];\n```\n\n```\nMainApplication.rudderClient.identify(\"AdobeUser\");\n```\n\n## Track\n\nWhen you make a `track` call, RudderStack sends an Adobe `trackAction` event and passes your event name and any associated properties mapped to Adobe as context data values.\n\nA sample `track` call is as shown:\n\n```\n[[RSClient sharedInstance] track:@\"Order Completed\" properties:@{\n    @\"orderId\" : @2002,\n    @\"category\" : @\"Cloths\",\n    @\"productId\" : @\"2200013\",\n    @\"name\": @\"Shirt\",\n    @\"price\" : @10001,\n    @\"quantity\" : @12\n}];\n```\n\n```\nMainApplication.rudderClient.track(\"Order Completed\",\n  RudderProperty()\n    .putValue(\"orderId\", \"12345\")\n    .putValue(\"category\", \"category\")\n    .putValue(\"revenue\", 99.9)\n    .putValue(\"shipping\", 13.99)\n    .putValue(\"tax\", 20.99)\n    .putValue(\"promotion_id\", \"PROMO_1234\")\n  );\n```\n\n## Screen\n\nWhen you make a `screen` call, RudderStack sends an Adobe `trackState` event and passes the screen name along with any associated properties mapped to Adobe as context data values.\n\nA sample `screen` call looks like the following:\n\n```\n[[RSClient sharedInstance] track:@\"Home Screen\"\n  properties:@{\n      @\"Width\" : @\"13\"\n  }];\n```\n\n```\nMainApplication.rudderClient.screen(\"Home Screen\",\n      RudderProperty()\n          .putValue(\"Width\",12)\n  )\n```\n\n## Reset\n\nCalling the `reset` API sets the user’s Adobe `visitorId` to `null`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The default value of Adobe’s `visitorId` is `null` until you explicitly set it (by calling `identify`).\n\nA sample `reset` call is as shown:\n\n```\n[[RSClient sharedInstance] reset];\n```\n\n```\nMainApplication.rudderClient.reset()\n```\n\n## Flush\n\nCalling the `flush` method immediately sends all locally queued events to Adobe.\n\nA sample `flush` call is as follows:\n\n```\nMainApplication.rudderClient.flush()\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack supports the `flush` call only in Android.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Adobe Analytics mobile device mode | RudderStack Docs",
  "description": "Send events to Adobe Analytics via the RudderStack mobile device mode.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/shopify/",
  "markdown": "# Shopify extract source | RudderStack Docs\n\nSync data from Shopify to your warehouse destination via RudderStack.\n\n* * *\n\n*     5 minute read  \n    \n\n[Shopify](https://www.shopify.com/in) is a popular ecommerce platform that gives you all tools to start, run, and grow your business effectively. It offers online retailers a variety of services around digital payments, marketing, product shipping, customer engagement and retention, and more.\n\nThis document guides you in setting up Shopify as a source in RudderStack. Once configured, RudderStack automatically ingests your Shopify data and routes it to your specified data warehouse destination.\n\n## Getting started\n\nTo set up Shopify as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Shopify** from the list of sources.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\nEnter the following connection credentials to set up the Shopify source\n\n[![Shopify credentials](https://www.rudderstack.com/docs/images/cloud-extract-sources/shopify-creds.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/shopify-creds.webp)\n\n*   **Shopify Store**: Enter the name of your Shopify store from the URL. For example, if your URL is `https://NAME.myshopify.com`, then the store name would be `NAME`.\n*   **Replication Start Date**: Select the date from when RudderStack should ingest your Shopify data. RudderStack will **not replicate** any data before this date.\n*   **API Password**: Enter the Admin API access token which you can obtain by following the below steps:\n\n1.  Log in to your [Shopify account](https://accounts.shopify.com/store-login).\n2.  In the left sidebar, go to **Apps** > **App and sales channel settings**.\n    \n    [![Shopify settings](https://www.rudderstack.com/docs/images/cloud-extract-sources/shopify-settings.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/shopify-settings.webp)\n    \n3.  Click **Develop apps** > **Create an app**.\n4.  Enter a name for the app.\n5.  Select the relevant developer in the App developer dropdown menu.\n6.  Click **Create app** > **Create Custom App**.\n7.  From the app configuration screen, select the event version as `2022-10`.\n8.  Configure the following [Admin API scopes](https://shopify.dev/docs/api/usage/access-scopes#authenticated-access-scopes):\n    *   `read_customers`\n    *   `read_draft_orders`\n    *   `read_inventory`\n    *   `read_locations`\n    *   `read_orders`\n    *   `read_price_rules`\n    *   `read_products`\n    *   `read_shopify_payments_payouts`\n    *   `read_content`\n    *   `read_fulfillments`\n    *   `read_assigned_fulfillment_orders`\n    *   `read_merchant_managed_fulfillment_orders`\n    *   `read_third_party_fulfillment_orders`\n    *   `read_discounts`\n    *   `read_script_tags`\n    *   `read_themes`\n    *   `read_files`\n    *   `read_publications`\n    *   `read_online_store_pages`\n    *   `read_product_feeds`\n9.  Click **Install App**.\n10.  You can see the Admin API access token in the **API credentials** tab.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the data ingested from Shopify to the connected warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Shopify data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Shopify:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the Shopify data you want to ingest by selecting the required resources. The below table mentions the sync type, API endpoints and the required scopes for these resources where `id` is a common primary key for all:\n\n| Resource | Sync type | Shopify API endpoint |\n| --- | --- | --- |\n| `Articles` | Incremental | `/articles.json` |\n| `MetafieldArticles` | Incremental | `/articles/[object_id]/metafields.json` |\n| `Blogs` | Incremental | `/blogs.json` |\n| `MetafieldBlogs` | Incremental | `/blogs/[object_id]/metafields.json` |\n| `Customers` | Incremental | `/customers.json` |\n| `MetafieldCustomers` | Incremental | `/customers/[object_id]/metafields.json` |\n| `Orders` | Incremental | `/orders.json` |\n| `MetafieldOrders` | Incremental | `/orders/[object_id]/metafields.json` |\n| `DraftOrders` | Incremental | `/draft_orders.json` |\n| `MetafieldDraftOrders` | Incremental | `/draft_orders/[object_id]/metafields.json` |\n| `Products` | Incremental | `/products.json` |\n| `MetafieldProducts` | Incremental | `/products/[object_id]/metafields.json` |\n| `ProductImages` | Incremental | `/products/{product_id}/images.json` |\n| `MetafieldProductImages` | Incremental | `/product_images/{image_id}/metafields.json` |\n| `ProductVariants` | Incremental | `products/{product_id}/variants.json` |\n| `MetafieldProductVariants` | Incremental | `variants/{variant_id}/metafields.json` |\n| `AbandonedCheckouts` | Incremental | `checkouts.json` |\n| `CustomCollections` | Incremental | `custom_collections.json` |\n| `SmartCollections` | Incremental | `smart_collections` |\n| `MetafieldSmartCollections` | Incremental | `/smart_collections/[object_id]/metafields.json` |\n| `Collects` | Incremental | `collects.json` |\n| `Collections` | Incremental | `collections/{collection_id}.json` |\n| `MetafieldCollections` | Incremental | `collections/{object_id}/metafields.json` |\n| `BalanceTransactions` | Incremental | `shopify_payments/balance/transactions.json` |\n| `OrderRefunds(Sub resource)` | Incremental | `orders/{order_id}/refunds.json` |\n| `OrderRisks` | Incremental | `orders/{order_id}/risks.json` |\n| `Transactions` | Incremental | `orders/{order_id}/transactions.json` |\n| `TenderTransactions` | Incremental | `tender_transactions.json` |\n| `Pages` | Incremental | `pages.json` |\n| `MetafieldPages` | Incremental | `/pages/[object_id]/metafields.json` |\n| `PriceRules` | Incremental | `price_rules.json` |\n| `DiscountCodes` | Incremental | `price_rules/{price_rule_id}/discount_codes.json` |\n| `Locations` | Full Refresh | `locations.json` |\n| `MetafieldLocations` | Incremental | `/locations/[object_id]/metafields.json` |\n| `InventoryLevels` | Incremental | `locations/{location_id}/inventory_levels.json` |\n| `InventoryItems` | Incremental | `inventory_items.json?ids={ids}` |\n| `FulfillmentOrders` | Incremental | `orders/{order_id}/fulfillment_orders.json` |\n| `Fulfillments` | Incremental | `orders/{order_id}/fulfillments.json` |\n| `Shop` | Full Refresh | `shop.json` |\n| `MetafieldShops` | Incremental | `metafields.json` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh** and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\nShopify is now configured as a source. RudderStack will start ingesting data from Shopify as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**, as shown:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\nYes, it is.\n\nRudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Shopify extract source | RudderStack Docs",
  "description": "Sync data from Shopify to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/autopilot/",
  "markdown": "# Autopilot | RudderStack Docs\n\nSend your event data from RudderStack to Autopilot.\n\n* * *\n\n*     2 minute read  \n    \n\n[Autopilot](https://www.autopilothq.com/) is a popular marketing automation platform that allows you to track and capture new leads, create detailed customer journeys, and boost customer retention.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Autopilot is now [Ortto](https://ortto.com/autopilot/). Refer to this documentation only if:\n> \n> *   You set up the Autopilot destination in RudderStack before the rebranding.\n> *   You are leveraging the [Autopilot REST API](https://autopilot.docs.apiary.io/#) to send the data.\n> \n> If you’re sending data from RudderStack to Ortto, see the [Ortto](https://www.rudderstack.com/docs/destinations/streaming-destinations/ortto/) documentation.\n\nFind the open source transformer code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/master/src/v0/destinations/autopilot).\n\n## Getting started\n\nRudderStack supports sending event data to Autopilot via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| Connection Mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | \\-  | \\-  |\n| **Cloud mode** | \\-  | **Supported** | **Supported** |\n\nOnce you have confirmed that the source platform supports sending events to Autopilot, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **Autopilot**.\n2.  Assign a name to the destination and click **Continue**.\n\n## Connection settings\n\n*   **API Key**: Enter your Autopilot API key. See [FAQ](#faq) for steps on obtaining the API key.\n*   **Trigger ID**: Enter your Autopilot trigger ID associated with your API trigger. RudderStack uses this ID to add a contact to a journey. For more information, see [Autopilot REST API documentation](https://autopilot.docs.apiary.io/#reference/api-methods/trigger-journey/add-a-contact-to-a-journey).\n*   **OneTrust cookie consent settings**: This setting lets you associate [OneTrust](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/javascript/) cookie consent groups to Autopilot.\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call captures relevant details about the visiting user.\n\nA sample `identify` event is shown:\n\n```\n[[RSClient sharedInstance] identify:@\"developer_user_id\"\n                                 traits:@{@\"foo\": @\"bar\", @\"foo1\": @\"bar1\"}];\n```\n\n## Track\n\nYou can use the [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) to record user actions along with any associated properties.\n\nA sample `track` payload is as shown in the snippet below:\n\n```\n[[RudderClient sharedInstance] track:@\"test_event\"\n                          properties:@{@\"key\":@\"value\", @\"foo\": @\"bar\"}]\n```\n\n## FAQ\n\n#### Where can I get the Autopilot API key?\n\nTo obtain your Autopilot API key, follow these steps:\n\n1.  Log into your [Autopilot](https://login.autopilothq.com/login?redirect=%2Fselect) dashboard.\n2.  Go to **Settings** > **Autopilot API**.\n3.  Click **Generate** and copy the API key.\n\nFor more information, refer to the [Autopilot documentation](https://autopilot.docs.apiary.io/#reference/authentication).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Autopilot | RudderStack Docs",
  "description": "Send your event data from RudderStack to Autopilot.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/sources/extract/zendesk-chat/",
  "markdown": "# Zendesk Chat | RudderStack Docs\n\nSync data from Zendesk Chat to your warehouse destination via RudderStack.\n\n* * *\n\n*     4 minute read  \n    \n\n[Zendesk Chat](https://www.zendesk.com/in/service/messaging/live-chat/) is a cross-platform live chat software. It lets you reach out to your customers in real-time via live chats and instant messaging.\n\nThis document guides you in setting up Zendesk Chat as a source in RudderStack. Once configured, RudderStack automatically ingests your Zendesk Chat data and routes it to your specified data warehouse destination.\n\n## Getting started\n\nTo set up Zendesk Chat as a source in RudderStack, follow these steps:\n\n1.  Log into your [RudderStack dashboard](https://app.rudderstack.com/).\n2.  Go to **Sources** > **New source** > **Cloud Extract** and select **Zendesk Chat** from the list of sources.\n3.  Assign a name to your source and click **Continue**.\n\n### Connection settings\n\nTo set up Zendesk Chat as a Cloud Extract source, you need to configure the following settings:\n\n[![Zendesk Chat connection settings](https://www.rudderstack.com/docs/images/cloud-extract-sources/zendesk-chat-connection-settings.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/zendesk-chat-connection-settings.webp)\n\n*   **Start Date**: Choose the start date from which you want RudderStack to ingest the Zendesk Chat data. RudderStack will not replicate any data before this date.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You will not be able to proceed if you do not specify the start date.\n\n*   **Subdomain**: Enter the subdomain from your Zendesk account’s URL. For example, if your Zendesk account URL is `sample.zendesk.com`, the subdomain would be `sample`.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> It is **mandatory** to provide a subdomain if your Zendesk account URL is of the format `sample.zendesk.com`. However, if you only have a Zendesk Chat account and the URL does not follow this format, you can skip this field and set up your source without specifying a subdomain.\n\n*   **Authentication**: Select an authentication method from the dropdown:\n    *   **OAuth2.0**: Click **Connect with Zendesk Chat** to authenticate your account.\n    *   **Access token**: Enter your Zendesk Chat access token. Refer to the [Zendesk Chat documentation](https://support.zendesk.com/hc/en-us/articles/4408882184986-Getting-an-OAuth-access-token-for-testing-purposes) for more details on obtaining this token.\n\n### Destination settings\n\nThe following settings specify how RudderStack sends the ingested data from Zendesk Chat to the warehouse destination:\n\n*   **Table prefix**: RudderStack uses this prefix to create a table in your data warehouse and loads all your Zendesk Chat data into it.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add special characters like `-` or `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\n*   **Schedule Settings**: RudderStack gives you three options to ingest the data from Zendesk Chat:\n    *   **Basic**: Runs the syncs at the specified time interval.\n    *   **CRON**: Runs the syncs based on the user-defined CRON expression.\n    *   **Manual**: You are required to run the syncs manually.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the schedule types, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/) guide.\n\n### Selecting the data to import\n\nYou can choose the Zendesk Chat data you want to ingest by selecting the required resources:\n\n[![Selecting the data to import](https://www.rudderstack.com/docs/images/cloud-extract-sources/zendesk-chat-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/zendesk-chat-connection-settings-2.webp)\n\nThe below table lists the syncs supported by the Zendesk Chat resources to your warehouse destination:\n\n| Resource | Full Refresh sync | Incremental sync | API endpoint |\n| --- | --- | --- | --- |\n| `accounts` | Yes | No  | `/account` |\n| `agent_timeline` | Yes | Yes | `/incremental/agent_timeline` |\n| `agents` | Yes | Yes | `/agents` |\n| `bans` | Yes | Yes | `/bans` |\n| `chats` | Yes | Yes | `/incremental/chats` |\n| `conversions` | Yes | Yes | `/incremental/conversions` |\n| `department_events` | Yes | Yes | `/incremental/department_events` |\n| `departments` | Yes | No  | `/departments` |\n| `goals` | Yes | No  | `/goals` |\n| `roles` | Yes | No  | `/roles` |\n| `routing_settings` | Yes | No  | `/routing_settings/account` |\n| `shortcuts` | Yes | No  | `/shortcuts` |\n| `skills` | Yes | No  | `/skills` |\n| `triggers` | Yes | No  | `/triggers` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on the **Full Refresh** and **Incremental** sync modes, refer to the [Common Settings](https://www.rudderstack.com/docs/sources/extract/common-settings/#sync-modes) guide.\n\nZendesk Chat is now configured as a source. RudderStack will start ingesting data from Zendesk Chat as per your specified schedule and frequency.\n\nYou can further connect this source to your data warehouse by clicking on **Add Destination**:\n\n[![Adding a destination](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/add-destination.webp)\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> Use the **Use Existing Destination** option if you have an already-configured data warehouse destination in RudderStack. To configure a data warehouse destination from scratch, select the **Create New Destination** button.\n\n## FAQ\n\n#### Where can I find my Zendesk Chat subdomain?\n\nYou can easily identify the Zendesk Chat subdomain from your account URL. It is in the format `https://[YOUR_ZENDESK_SUBDOMAIN].zendesk.com`.\n\nYes, it is.\n\nWe have implemented a feature wherein RudderStack associates a table prefix for every Cloud Extract source writing to a warehouse schema. This way, multiple Cloud Extract sources can write to the same schema with different table prefixes.\n\nRudderStack counts the number of records returned by the source APIs when queried during each sync. It considers each record as an event.\n\nRudderStack sets the table name for the resource you are syncing to the warehouse by adding `rudder_` to the **Table prefix** you set while configuring your Cloud Extract source in the dashboard.\n\n[![Cloud Extract table prefix](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)](https://www.rudderstack.com/docs/images/cloud-extract-sources/etl-table-prefix.webp)\n\nFor example, if you set `test_` as the **Table prefix** in the dashboard, RudderStack sets the table name as `test_rudder_<resource_name>`, where `<resource_name>` is the name of the resource you are syncing (for example, `contacts`, `messages`, etc.).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that RudderStack does not add the character `_` to the prefix by default. Hence, you need to specify it while setting the prefix.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Zendesk Chat | RudderStack Docs",
  "description": "Sync data from Zendesk Chat to your warehouse destination via RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/adobe-analytics/adobe-analytics-heartbeat/",
  "markdown": "# Adobe Analytics heartbeat measurement | RudderStack Docs\n\nUse Adobe Analytics heartbeat events with RudderStack for measuring streaming media.\n\n* * *\n\n*     10 minute read  \n    \n\n[Adobe Analytics for Streaming Media](https://experienceleague.adobe.com/docs/media-analytics/using/media-overview.html) is an add-on that offers measurement tools for different types of media such as audio, video, and advertisements.\n\nAdobe Analytics uses “heartbeats” to collect different metrics related to the video during playback. These heartbeats are sent to the Adobe heartbeat tracking server every ten seconds to measure the time the video is played.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For sending the heartbeat events to Adobe Analytics, you will need the Heartbeat Tracking Server URL. To get this URL, contact your Adobe representative. Also, you will need to map your RudderStack events with the type of Adobe heartbeat event you want to send.\n\n## Playback Head\n\nFor sending video heartbeat events to Adobe Analytics through RudderStack’s Web (JavaScript) SDK, Adobe’s Media Heartbeat SDK needs a playhead update at least once every second for the main content. The video/ad start and heartbeat update playhead type of events update this playhead using the `position` property.\n\nTo stop triggering this event for every second, the playhead to the window needs to be set. This can be done by setting `window.rudderHBPlayheads` to the key-value pair of the current content’s `session_id` and `position` as shown:\n\n```\nwindow.rudderHBPlayheads = {\n  \"session_id\": position value\n}\n```\n\nRudderStack sends the Adobe heartbeat events as per the following categories:\n\n## Initialize Heartbeat\n\n*   Adobe Analytics Method Triggered: `trackSessionStart`\n*   Description: This is used for initializing all heartbeat calls. The Context Data is set as mapped in the settings.\n*   Properties used:\n\n| RudderStack property | Description | Default Value |\n| --- | --- | --- |\n| `channel` | Needs to be set for media heartbeat property channel or an empty string will be sent. | \\-  |\n| `video_player` | Needs to be set for media heartbeat property playerName or “unknown” will be sent. | \\-  |\n| `session_id` | To check if present in `window.rudderHBPlayheads` | “default” |\n| `bitrate` | Sent for creating `QoSObject`. | 0   |\n| `startupTime` | Sent for creating `QoSObject`. | 0   |\n| `fps` | Sent for creating `QoSObject` . | 0   |\n| `droppedFrames` | Sent for creating `QoSObject`. | 0   |\n| `livestream` | Sent for creating `MediaObject` | \\-  |\n| `title` | Sent for creating `MediaObject`. | “no title” |\n| `asset_id` | Sent for creating `MediaObject`. | “default ad” |\n| `total_length` | Sent for creating `MediaObject`. | 0   |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The properties mapped in the [Standard Video Metadata](#standard-video-metadata) section below will also be set.\n\n## Heartbeat Video Start\n\n*   Adobe Analytics Method Triggered: `trackSessionStart`, `trackPlay`, `trackEvent(ChapterStart)`\n*   Description: This is used when a video is started. The Context Data is set as mapped in settings.\n*   Properties used:\n\n| RudderStack property | Description | Default Value |\n| --- | --- | --- |\n| `channel` | Needs to be set for media heartbeat property channel or an empty string will be sent. | \\-  |\n| `video_player` | Needs to be set for media heartbeat property playerName or “unknown” will be sent. | \\-  |\n| `session_id` | To check if present in `window.rudderHBPlayheads` | “default” |\n| `bitrate` | Sent for creating `QoSObject`. | 0   |\n| `startupTime` | Sent for creating `QoSObject`. | 0   |\n| `fps` | Sent for creating `QoSObject` . | 0   |\n| `droppedFrames` | Sent for creating `QoSObject`. | 0   |\n| `livestream` | Sent for creating `MediaObject` | \\-  |\n| `title` | Sent for creating `MediaObject`. | “no title” |\n| `asset_id` | Sent for creating `MediaObject`. | “default ad” |\n| `total_length` | Sent for creating `MediaObject`. | 0   |\n| `chapter_name` | Sent for creating `createChapterObject`. | “no chapter name” |\n| `position` | Sent for creating `createChapterObject`. | 1   |\n| `length` | Sent for creating `createChapterObject`. | 6000 |\n| `start_time` | Sent for creating `createChapterObject`. | 0   |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The properties mapped in the [Standard Video Metadata](#standard-video-metadata) section below will also be set.\n\n## Heartbeat Video Paused\n\n*   Adobe Analytics Method Triggered: `trackSessionStart`, `trackPause`\n*   Description: This is used when a video is paused. The Context Data is set as mapped in the settings.\n*   Properties used:\n\n| RudderStack property | Description | Default Value |\n| --- | --- | --- |\n| `channel` | Needs to be set for media heartbeat property channel or an empty string will be sent. | \\-  |\n| `video_player` | Needs to be set for media heartbeat property playerName or “unknown” will be sent. | \\-  |\n| `session_id` | To check if present in `window.rudderHBPlayheads` | “default” |\n| `bitrate` | Sent for creating `QoSObject`. | 0   |\n| `startupTime` | Sent for creating `QoSObject`. | 0   |\n| `fps` | Sent for creating `QoSObject` . | 0   |\n| `droppedFrames` | Sent for creating `QoSObject`. | 0   |\n| `livestream` | Sent for creating `MediaObject` | \\-  |\n| `title` | Sent for creating `MediaObject`. | “no title” |\n| `asset_id` | Sent for creating `MediaObject`. | “default ad” |\n| `total_length` | Sent for creating `MediaObject`. | 0   |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The properties mapped in the [Standard Video Metadata](#standard-video-metadata) section below will also be set.\n\n## Heartbeat Video Complete\n\n*   Adobe Analytics Method Triggered: `trackSessionStart`, `trackEvent(ChapterComplete)`\n*   Description: This is used when a video is completed. The Context Data is set as mapped in the settings.\n*   Properties used:\n\n| RudderStack property | Description | Default Value |\n| --- | --- | --- |\n| `channel` | Needs to be set for media heartbeat property channel or an empty string will be sent. | \\-  |\n| `video_player` | Needs to be set for media heartbeat property playerName or “unknown” will be sent. | \\-  |\n| `session_id` | To check if present in `window.rudderHBPlayheads` | “default” |\n| `bitrate` | Sent for creating `QoSObject`. | 0   |\n| `startupTime` | Sent for creating `QoSObject`. | 0   |\n| `fps` | Sent for creating `QoSObject` . | 0   |\n| `droppedFrames` | Sent for creating `QoSObject`. | 0   |\n| `livestream` | Sent for creating `MediaObject` | \\-  |\n| `title` | Sent for creating `MediaObject`. | “no title” |\n| `asset_id` | Sent for creating `MediaObject`. | “default ad” |\n| `total_length` | Sent for creating `MediaObject`. | 0   |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The properties mapped in the [Standard Video Metadata](#standard-video-metadata) section below will also be set.\n\n## Heartbeat Session End\n\n*   Adobe Analytics Method Triggered: `trackSessionStart`, `trackComplete`, `trackSessionEnd`\n*   Description: This is used when a session ends. The Context Data is set as mapped in the settings.\n*   Properties used:\n\n| RudderStack property | Description | Default Value |\n| --- | --- | --- |\n| `channel` | Needs to be set for media heartbeat property channel or an empty string will be sent. | \\-  |\n| `video_player` | Needs to be set for media heartbeat property playerName or “unknown” will be sent. | \\-  |\n| `session_id` | To check if present in `window.rudderHBPlayheads` | “default” |\n| `bitrate` | Sent for creating `QoSObject`. | 0   |\n| `startupTime` | Sent for creating `QoSObject`. | 0   |\n| `fps` | Sent for creating `QoSObject` . | 0   |\n| `droppedFrames` | Sent for creating `QoSObject`. | 0   |\n| `livestream` | Sent for creating `MediaObject` | \\-  |\n| `title` | Sent for creating `MediaObject`. | “no title” |\n| `asset_id` | Sent for creating `MediaObject`. | “default ad” |\n| `total_length` | Sent for creating `MediaObject`. | 0   |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The properties mapped in the [Standard Video Metadata](#standard-video-metadata) section below will also be set.\n\n*   Adobe Analytics Method Triggered: `trackEvent(AdBreakStart)`, `trackEvent(AdStart)`.\n*   Description: This is used when an ad is started. The Context Data is set as mapped in the settings.\n*   Properties used:\n\n| RudderStack property | Description | Default Value |\n| --- | --- | --- |\n| `session_id` | To check if present in `window.rudderHBPlayheads`. | “default” |\n| `title` | Sent for creating `AdObject` and `AdBreakObject`. | “no title” |\n| `asset_id` | Sent for creating `AdObject`. | “default ad” |\n| `position` | Sent for creating `AdObject` and `AdBreakObject`. | 1   |\n| `total_length` | Sent for creating `AdObject`. | 0   |\n| `type` | Sent for creating `AdBreakObject`. | “unknown” |\n| `start_time` | Sent for creating `AdBreakObject`. | 0   |\n| `content` | Sent for `trackEvent`. | empty JSON |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The properties mapped in the [Standard Video Metadata](#standard-video-metadata) section below will also be set.\n\n*   Adobe Analytics Method Triggered: `trackEvent(AdComplete)`, `trackEvent(AdBreakComplete)`. If an ad break is in progress, then `trackEvent(AdBreakStart)` and `trackEvent(AdStart)` are also triggered.\n*   Description: This is used when an ad is completed. The Context Data is set as mapped in the settings.\n*   Properties used:\n\n| RudderStack property | Description | Default Value |\n| --- | --- | --- |\n| `session_id` | To check if present in `window.rudderHBPlayheads`. | “default” |\n| `title` | Sent for creating `AdObject`. | “no title” |\n| `asset_id` | Sent for creating `AdObject`. | “default ad” |\n| `position` | Sent for creating `AdObject` and `AdBreakObject`. | 1   |\n| `total_length` | Sent for creating `MediaObject`. | 0   |\n| `type` | Sent for creating `AdBreakObject`. | “unknown” |\n| `content` | Sent for `trackEvent`. | empty JSON |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The properties mapped in the [Standard Video Metadata](#standard-video-metadata) section below will also be set.\n\n*   Adobe Analytics Method Triggered: `trackEvent(AdSkip)`, `trackEvent(AdBreakComplete)`. If an ad break is in progress, then `trackEvent(AdBreakStart)` and `trackEvent(AdStart)` are also triggered.\n*   Description: This is used when an ad is skipped. The Context Data is set as mapped in the settings.\n*   Properties used:\n\n| RudderStack property | Description | Default Value |\n| --- | --- | --- |\n| `session_id` | To check if present in `window.rudderHBPlayheads`. | “default” |\n| `title` | Sent for creating `AdObject`. | “no title” |\n| `asset_id` | Sent for creating `AdObject`. | “default ad” |\n| `position` | Sent for creating `AdObject` and `AdBreakObject`. | 1   |\n| `total_length` | Sent for creating `MediaObject`. | 0   |\n| `type` | Sent for creating `AdBreakObject`. | “unknown” |\n| `content` | Sent for `trackEvent`. | empty JSON |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The properties mapped in the [Standard Video Metadata](#standard-video-metadata) section below will also be set.\n\n## Heartbeat Seek Started\n\n*   Adobe Analytics Method Triggered: `trackSessionStart`, `trackEvent(SeekStart)`\n*   Description: This is used when a video seek is started. The Context Data is set as mapped in settings.\n*   Properties used:\n\n| RudderStack property | Description | Default Value |\n| --- | --- | --- |\n| `channel` | Needs to be set for media heartbeat property channel or an empty string will be sent. | \\-  |\n| `video_player` | Needs to be set for media heartbeat property playerName or “unknown” will be sent. | \\-  |\n| `session_id` | To check if present in `window.rudderHBPlayheads` | “default” |\n| `bitrate` | Sent for creating `QoSObject`. | 0   |\n| `startupTime` | Sent for creating `QoSObject`. | 0   |\n| `fps` | Sent for creating `QoSObject` . | 0   |\n| `droppedFrames` | Sent for creating `QoSObject`. | 0   |\n| `livestream` | Sent for creating `MediaObject` | \\-  |\n| `title` | Sent for creating `MediaObject`. | “no title” |\n| `asset_id` | Sent for creating `MediaObject`. | “default ad” |\n| `total_length` | Sent for creating `MediaObject`. | 0   |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The properties mapped in the [Standard Video Metadata](#standard-video-metadata) section below will also be set.\n\n## Heartbeat Seek Completed\n\n*   Adobe Analytics Method Triggered: `trackSessionStart`, `trackEvent(SeekComplete)`\n*   Description: This is used when a video seek is completed. The Context Data is set as mapped in settings.\n*   Properties used:\n\n| RudderStack property | Description | Default Value |\n| --- | --- | --- |\n| `channel` | Needs to be set for media heartbeat property channel or an empty string will be sent. | \\-  |\n| `video_player` | Needs to be set for media heartbeat property playerName or “unknown” will be sent. | \\-  |\n| `session_id` | To check if present in `window.rudderHBPlayheads` | “default” |\n| `bitrate` | Sent for creating `QoSObject`. | 0   |\n| `startupTime` | Sent for creating `QoSObject`. | 0   |\n| `fps` | Sent for creating `QoSObject` . | 0   |\n| `droppedFrames` | Sent for creating `QoSObject`. | 0   |\n| `livestream` | Sent for creating `MediaObject` | \\-  |\n| `title` | Sent for creating `MediaObject`. | “no title” |\n| `asset_id` | Sent for creating `MediaObject`. | “default ad” |\n| `total_length` | Sent for creating `MediaObject`. | 0   |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The properties mapped in the [Standard Video Metadata](#standard-video-metadata) section below will also be set.\n\n## Heartbeat Buffer Started\n\n*   Adobe Analytics Method Triggered: `trackSessionStart`, `trackEvent(BufferStart)`\n*   Description: This is used when a video buffer has started. The Context Data is set as mapped in settings.\n*   Properties used:\n\n| RudderStack property | Description | Default Value |\n| --- | --- | --- |\n| `channel` | Needs to be set for media heartbeat property channel or an empty string will be sent. | \\-  |\n| `video_player` | Needs to be set for media heartbeat property playerName or “unknown” will be sent. | \\-  |\n| `session_id` | To check if present in `window.rudderHBPlayheads` | “default” |\n| `bitrate` | Sent for creating `QoSObject`. | 0   |\n| `startupTime` | Sent for creating `QoSObject`. | 0   |\n| `fps` | Sent for creating `QoSObject` . | 0   |\n| `droppedFrames` | Sent for creating `QoSObject`. | 0   |\n| `livestream` | Sent for creating `MediaObject` | \\-  |\n| `title` | Sent for creating `MediaObject`. | “no title” |\n| `asset_id` | Sent for creating `MediaObject`. | “default ad” |\n| `total_length` | Sent for creating `MediaObject`. | 0   |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The properties mapped in the [Standard Video Metadata](#standard-video-metadata) section below will also be set.\n\n## Heartbeat Buffer Completed\n\n*   Adobe Analytics Method Triggered: `trackSessionStart`, `trackEvent(BufferComplete)`\n*   Description: This is used when a video buffer has completed. The Context Data is set as mapped in settings.\n*   Properties used:\n\n| RudderStack property | Description | Default Value |\n| --- | --- | --- |\n| `channel` | Needs to be set for media heartbeat property channel or an empty string will be sent. | \\-  |\n| `video_player` | Needs to be set for media heartbeat property playerName or “unknown” will be sent. | \\-  |\n| `session_id` | To check if present in `window.rudderHBPlayheads` | “default” |\n| `bitrate` | Sent for creating `QoSObject`. | 0   |\n| `startupTime` | Sent for creating `QoSObject`. | 0   |\n| `fps` | Sent for creating `QoSObject` . | 0   |\n| `droppedFrames` | Sent for creating `QoSObject`. | 0   |\n| `livestream` | Sent for creating `MediaObject` | \\-  |\n| `title` | Sent for creating `MediaObject`. | “no title” |\n| `asset_id` | Sent for creating `MediaObject`. | “default ad” |\n| `total_length` | Sent for creating `MediaObject`. | 0   |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The properties mapped in the [Standard Video Metadata](#standard-video-metadata) section below will also be set.\n\n## Heartbeat Quality Updated\n\n*   Description: The quality of experience tracking includes both quality of service (QoS) and error tracking. These are optional elements and are not required for the core media tracking implementations. You can use the media player’s API to identify the variables related to QoS and error tracking.\n*   Properties used:\n\n| RudderStack property | Description | Default Value |\n| --- | --- | --- |\n| `bitrate` | Sent for creating `QoSObject`. | 0   |\n| `startupTime` | `Sent for creating QoSObject`. | 0   |\n| `fps` | Sent for creating `QoSObject` . | 0   |\n| `droppedFrames` | Sent for creating `QoSObject`. | 0   |\n\n## Heartbeat Playhead Update\n\n*   Description: This changes the playhead position. Initially, the playhead is set to 0. While initializing the heartbeat, it is set to the `position` value of that `session_id` in `window.rudderHBPlayheads`.\n\nThe following RudderStack properties must also be sent for mapping to the standard video metadata:\n\n| RudderStack property | Adobe Standard Video Metadata |\n| --- | --- |\n| `program` | `MediaHeartbeat.VideoMetadataKeys.SHOW` |\n| `season` | `MediaHeartbeat.VideoMetadataKeys.SEASON` |\n| `episode` | `MediaHeartbeat.VideoMetadataKeys.EPISODE` |\n| `assetId` | `MediaHeartbeat.VideoMetadataKeys.ASSET_ID` |\n| `contentAssetId` | `MediaHeartbeat.VideoMetadataKeys.ASSET_ID` |\n| `genre` | `MediaHeartbeat.VideoMetadataKeys.GENRE` |\n| `airdate` | `MediaHeartbeat.VideoMetadataKeys.FIRST_AIR_DATE` |\n| `publisher` | `MediaHeartbeat.VideoMetadataKeys.ORIGINATOR` |\n| `channel` | `MediaHeartbeat.VideoMetadataKeys.NETWORK` |\n| `rating` | `MediaHeartbeat.VideoMetadataKeys.RATING` |\n\nThe following RudderStack properties must also be sent for mapping to the standard ad metadata:\n\n| RudderStack property | Adobe Standard Ad Metadata |\n| --- | --- |\n| `publisher` | `MediaHeartbeat.AdMetadataKeys.ADVERTISER` |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Adobe Analytics heartbeat measurement | RudderStack Docs",
  "description": "Use Adobe Analytics heartbeat events with RudderStack for measuring streaming media.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/attribution/",
  "markdown": "# Attribution | RudderStack Docs\n\nSend your event data from RudderStack to Attribution.\n\n* * *\n\n*     3 minute read  \n    \n\n[Attribution](https://attributionapp.com/) is a marketing analytics platform that provides single and multi-touch attribution. It offers the ability to view your true marketing ROI, understand your marketing funnel and view your full customer paths. Additionally, Attribution offers a [Data Export](https://www.attributionapp.com/dataexporttool/) feature to let you export all raw data related to campaigns and visitors for your Data Science team to analyze and unlock trends.\n\nRudderStack supports Attribution as a destination to which you can seamlessly send your customer data.\n\n## Getting started\n\nBefore configuring Attribution as a destination in RudderStack, verify if the source platform is supported by Attribution by referring to the table below:\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device Mode** | \\-  | \\-  | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the source platform supports sending events to Attribution, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **Attribution**.\n2.  Assign a name to the destination and click **Continue**.\n3.  Select the data source and click **Next**.\n4.  Enter your Attribution Project key to configure the destination.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on getting your Attribution project key, refer to the [FAQ](#faq) section below.\n\nYour Attribution destination is now configured and enabled in RudderStack.\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you associate a visiting user to their actions. It also lets you record the traits about them like their name, email address, etc.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> As a best practice, make sure that the `identify` call is made at the start of every session or page load for logged-in users. This will ensure all latest user traits are captured.\n\nA sample `identify` call is as shown:\n\n```\nrudderanalytics.identify(\"userid\", {\n  name: \"Alex Keener\",\n  email: \"alex@example.com\",\n  phone: \"+1-202-555-0146\",\n  birthday: \"01/24/1982\",\n  gender: \"Male\",\n  avatar: \"https://www.gravatar.com/avatar/alex\",\n  title: \"Mr\",\n})\n```\n\n## Track\n\nThe <[`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you capture user events along with the properties associated with them.\n\nA sample `track` call is as shown:\n\n```\nrudderanalytics.track(\"Order Completed\", {\n  revenue: 77.6,\n})\n```\n\n## Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record your website’s page views with any additional relevant information about the viewed page.\n\nA sample `page` call is as shown:\n\n```\nrudderanalytics.page(\"Cart\", \"Cart Viewed\", {\n  path: \"/cart\",\n  referrer: \"test.com\",\n  search: \"term\",\n  title: \"test_item\",\n  url: \"http://test.in\",\n})\n```\n\n## Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group such as a company, organization, or an account. It also lets you record any custom traits associated with that group like the name of the company, number of employees, etc.\n\nA sample `group` call is as shown:\n\n```\nrudderanalytics.group(\"sample-group-id\", {\n  name: \"Example Company\",\n  employees: 1000,\n  industry: \"Software\",\n});\n```\n\n## Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user.\n\nA sample `alias` call is as shown:\n\n```\nrudderanalytics.alias(\"to\", \"from\", options, callback)\n```\n\nThe above `alias` call has the following parameters:\n\n| **Parameter** | **Presence** | **Description** |\n| --- | --- | --- |\n| **`to`** | Required | Denotes the new identifier |\n| **`from`** | Optional | Denotes the old identifier which will be an alias for the `to` parameter. If not provided, the SDK will populate this as the currently identified `userId`, or `anonymousId` in case of anonymous users. |\n| **`options`** | Optional | This dictionary provides additional context to the event payload. |\n| **`callback`** | Optional | This function gets executed after successful execution of the **`alias()`** method. |\n\n## FAQ\n\n#### How do I get the Attribution Project Key?\n\nTo get the Attribution Project Key, follow these steps:\n\n1.  Go to your [Attribution dashboard](https://dashboard.attributionapp.com/).\n2.  Navigate to **Settings** and copy the **Attribution Project ID** associated with your project.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Attribution | RudderStack Docs",
  "description": "Send your event data from RudderStack to Attribution.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/adobe-analytics/ecommerce-events/",
  "markdown": "# Adobe Analytics ecommerce events | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Adobe Analytics ecommerce events | RudderStack Docs",
  "description": "Map supported ecommerce events for your Adobe Analytics destination.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/awin/",
  "markdown": "# Awin | RudderStack Docs\n\nSend your event data from RudderStack to Awin.\n\n* * *\n\n*     2 minute read  \n    \n\n[Awin](https://www.awin.com/) is an affiliate marketing program that connects advertisers and affiliates of all sizes. It provides a network of affiliate partners, click tracing and tracking, advertiser directory, reports and analytics, and more.\n\nFind the open source code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/master/src/v0/destinations/awin).\n\n## Getting started\n\nRudderStack supports sending event data to Awin via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| Connection Mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| Device mode | \\-  | \\-  | \\-  |\n| Cloud mode | Supported | Supported | Supported |\n\nOnce you have confirmed that the source platform supports sending events to Awin, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **Awin**.\n2.  Assign a name to the destination and click **Continue**.\n\n## Connection settings\n\nTo successfully set up Awin as a destination, you will need to configure the following settings:\n\n*   **Advertiser ID**: Enter your [Awin advertiser ID](#faq).\n*   **Events to Track**: Enter the event names for which you want to track the conversions.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You must enter all event names for which you want to make a `track` call.\n\n*   **Map Rudder payload property to custom Awin field**: Enter the RudderStack property and the corresponding Awin custom field you want to map together. These custom properties get associated to a specific transaction and sent to Awin for `track` calls. The Awin field names must follow the `p<int>` format (like `p1`, `p2`, etc.). RudderStack picks the field values from `message.properties` and sends them as query parameters.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Duplicate mapping can cause errors.\n\n## Track\n\nYou can use the [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call to [send the conversion data directly to Awin’s servers](https://wiki.awin.com/index.php/Advertiser_Tracking_Guide/Conversion_Pixel_Only_Tracking#Server_To_Server_.28S2S.29).\n\nA sample `track` call is shown below:\n\n```\nrudderanalytics.track(\"Product Purchased New\", {\n  revenue: 4.99,\n  currency: \"USD\",\n  commissionGroup: \"CD\",\n  name: \"Shirt\",\n  voucherCode: \"FIRSTSALE\",\n  order_id: \"ORD123\",\n});\n```\n\n### Supported mappings\n\nThe following table lists the mappings between the RudderStack and Awin properties:\n\n#### **Product-level tracking**\n\n| RudderStack property | Awin property |\n| --- | --- |\n| `properties.order_id`  <br>`properties.orderId`  <br>`properties.orderReference`  <br>`properties.order_reference`  <br>Required | `orderReference` |\n| `product[i].product_id`  <br>`product[i].productId`  <br>Required | `productId` |\n| `properties.products[i].name`  <br>Required | `productName` |\n| `properties.products[i].price`  <br>Required | `productItemPrice` |\n| `properties.products[i].quantity`  <br>Required | `productQuantity` |\n| `properties.commissionGroup`  <br>`properties.commission_group`  <br>Required. Default value is `DEFAULT` | `commissionGroupCode` |\n| `properties.products[i].sku`  <br>Optional. If not present, RudderStack sends an empty value instead. | `productSku` |\n| `properties.products[i].category`  <br>Optional. If not present, RudderStack sends an empty value instead. | `productCategory` |\n\n#### **Other mappings**\n\n| RudderStack property | Awin property |\n| --- | --- |\n| `properties.revenue`  <br>`properties.totalAmount`  <br>`properties.amount`  <br>`properties.total_amount` | `totalAmount` |\n| `properties.voucherCode`  <br>`properties.voucher_code` | `voucher_code` |\n| `properties.currency`  <br>`properties.currencyCode`  <br>`properties.currency_code` | `currencyCode` |\n| `properties.cks`  <br>`properties.awc` | `awc` |\n| `properties.testMode`  <br>`properties.test_mode`  <br>`properties.isTest`  <br>`properties.is_test`  <br>Default value is `0`. | `isTest` |\n\n## FAQ\n\n#### Where can I find the Awin advertiser ID?\n\nTo obtain your Awin advertiser ID, log in to your [Awin dashboard](https://ui.awin.com/idp/en/awin/login) to see the advertiser ID in the top right corner as well as in the URL:\n\n[![Awin advertiser ID](https://www.rudderstack.com/docs/images/event-stream-destinations/advertiser-id-awin.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/advertiser-id-awin.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Awin | RudderStack Docs",
  "description": "Send your event data from RudderStack to Awin.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/aws-personalize/",
  "markdown": "# AWS Personalize | RudderStack Docs\n\nSend your event data from RudderStack to AWS Personalize.\n\n* * *\n\n*     5 minute read  \n    \n\n[Amazon Personalize](https://aws.amazon.com/personalize/) is a machine learning service by AWS. It enables you to create high-quality content recommendations, personalized product and marketing promotions, and much more.\n\nRudderStack supports AWS Personalize as a destination where you can send your event data seamlessly.\n\n## Getting started\n\nRudderStack supports sending event data to Personalize via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | \\-  | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the source platform supports sending events to Personalize, follow these steps:\n\n1.  Generate a Tracking ID by following these [instructions](https://github.com/rudderlabs/rudder-transformer/tree/master/src/v0/destinations/personalize/scripts).\n2.  From your RudderStack dashboard, add the source. Then, from the list of destinations, select **Amazon Personalize**.\n3.  Assign a name to your destination and click **Continue**.\n\n### Connection settings\n\nTo successfully set up Personalize as a destination, you need to configure the following settings:\n\n*   **Role-based Authentication**: Enable this setting to use the RudderStack IAM role for authentication. For more information on creating a AWS IAM role for RudderStack, refer to [this guide](https://www.rudderstack.com/docs/destinations/aws-iam-role-for-rudderstack/#creating-a-rudderstack-iam-role).\n    *   **IAM Role ARN**: Enter the ARN of the IAM role.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> It is highly recommended to enable this setting as the access keys-based authentication method is now deprecated.\n\n*   If **Role-based Authentication** is disabled, you need to enter the **AWS Access Key ID** and **AWS Secret Access Key** to authorize RudderStack to send data to Personalize.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In both the role-based and access key-based authentication methods, you need to set a policy specifying the required permissions for RudderStack to send data to Personalize. Refer to the [Policy permissions](#policy-permissions) section below for more information.\n\n*   **Region**: Enter the region associated with your AWS account in this field.\n*   **TrackingId**: Enter the Tracking ID generated in the [Getting started](#getting-started) section above.\n*   **Dataset ARN**: Enter the dataset ARN of the dataset from the chosen dataset group.\n\n*   **Personalize Events**: Choose the type of Personalize event you want to avail.\n*   **Map all fields**: Enter the **Schema Field** used to create the schema in AWS Personalize (for example, `USER_ID`, `TIMESTAMP`, `ITEM_ID`, etc.). Also, enter the corresponding **Mapped Field** - RudderStack takes the value from this field present in the event payload and maps it to the **Schema Field**.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> When using the `PutItems` operation, you need to provide the path to the **Mapped Field** corresponding to the `ITEM_ID` present in your Personalize database schema.\n\n*   **Disable Stringifying Additional Properties**: This setting disables the conversion of additional properties to string data type in Personalize.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This is an exclusive setting only applicable for the `putEvents` operation. If it is disabled, RudderStack converts any mapped fields other than `ITEM_ID`, `EVENT_VALUE`, `IMPRESSION`, `RECOMMENDATION_ID`, `TIMESTAMP`, `EVENT_TYPE`, and `USER_ID` to a string before forwarding to Personalize.\n\n## Policy permissions\n\nTo use the Personalize destination with RudderStack correctly, you must have a Personalize service set up in AWS. Refer to the [AWS documentation](https://docs.aws.amazon.com/personalize/latest/dg/setup.html) for more information on setting up your Amazon Personalize account.\n\nYou also need to create an IAM role and grant the necessary permissions for RudderStack to send data to Personalize. The following actions need to be attached to the role while setting up the AWS policy:\n\n```\n\"Action\": [\n    \"personalize:PutEvents\",\n    \"personalize:PutUsers\",\n    \"personalize:PutItems\"\n]\n```\n\nYou can use these actions based on the type of Personalize events you want to send. For example, to send only `putEvents` type of events, you can attach only `personalize:PutEvents`.\n\nA sample permissions policy that allows a user to send event data into Personalize is shown below:\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"CloudWatchEventsInvocationAccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"personalize:PutEvents\"\n        \"personalize:PutUsers\",\n        \"personalize:PutItems\"\n        ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you use the `PutUsers` operation of Personalize.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For the `PutUsers` operation, the value of the `userId` or `anonymousId` field in the payload will be sent as `userId`.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> For `PutUsers`, you must specify the **Dataset ARN** field in the RudderStack dashboard.\n\nThe following snippet highlights a sample `identify` event with the **Mapped Field** setting specified in the dashboard:\n\n```\nrudderanalytics.identify(\"1hKOmRA4GRlm\", {\n  name: \"Alex\",\n  email: \"alex@example.com\"\n  });\n```\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you use [`PutEvents`](https://docs.aws.amazon.com/personalize/latest/dg/API_UBS_PutEvents.html) and [`PutItems`](https://docs.aws.amazon.com/personalize/latest/dg/API_UBS_PutItems.html) operations of Personalize.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For `PutEvents`, RudderStack sends the value of the `event` field in the payload as `EVENT_TYPE`. Also, the value of the `timestamp` or `originalTimestamp` fields in the payload will be sent as `sentAt`.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> For the `PutItems` and `PutEvents` operations, it is mandatory to specify the **Dataset ARN** and **Tracking ID** settings in the RudderStack dashboard.\n\nThe following snippet shows a sample `track` event with the mapped field specified in the dashboard settings:\n\n```\nrudderanalytics.track(\"Product Added\", {\n  typeOfSdk: \"javascript\",\n  numberOfRatings: \"12\",\n  X: \"item 1\",\n});\n```\n\nWhen using the `PutItems`, the **Schema Field** `ITEM_ID` must be mapped to a specific key inside the payload. You also need to mention the path to the chosen key as the corresponding **Mapped Field**.\n\nIn the above example, if you map `ITEM_ID` to the payload field `X`, the corresponding **Mapped Field** will be `properties.X`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For any other **Schema Field** in your `ITEMS` dataset, it is **not** recommended to specify the path - only the field name is sufficient.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> When using `PutEvents`, the **Mapped Field** for `ITEM_ID` should **not** contain the path to the field. Only the name of the field will be sufficient. The same rule is applicable for any other **Schema Field** mapping.\n\nThe following image shows an example of the dashboard configuration for `PutItems`:\n\n[![PutItems](https://www.rudderstack.com/docs/images/putItems.webp)](https://www.rudderstack.com/docs/images/putItems.webp)\n\nThe following image shows an example of the dashboard configuration for `PutEvents`:\n\n[![Dashboard Configuration Based On The Above Example](https://www.rudderstack.com/docs/images/putEvents.webp)](https://www.rudderstack.com/docs/images/putEvents.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "AWS Personalize | RudderStack Docs",
  "description": "Send your event data from RudderStack to AWS Personalize.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/aws-lambda/",
  "markdown": "# AWS Lambda | RudderStack Docs\n\nSend your event data from RudderStack to AWS Lambda.\n\n* * *\n\n*     4 minute read  \n    \n\n[AWS Lambda](https://aws.amazon.com/lambda/) is a serverless compute service that lets you seamlessly run any application code or service without managing or provisioning servers.\n\nRudderStack supports AWS Lambda as a destination where you can send your event data seamlessly.\n\n## Getting started\n\nBefore configuring AWS Lambda as a destination in RudderStack, verify if the source platform is supported by AWS Lambda by referring to the table below:\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | \\-  | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the source platform supports sending events to AWS Lambda, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add the source. Then, from the list of destinations, select **AWS Lambda**.\n2.  Assign a name to the destination and click **Continue**.\n\n## Connection settings\n\nTo successfully configure AWS Lambda as a destination, you need to configure the following settings:\n\n[![AWS Lambda connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/aws-lambda-connection-settings-1.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/aws-lambda-connection-settings-1.webp)\n\n*   **Region**: Enter the region associated with your AWS Lambda service.\n\n*   **Role-based Authentication**: Enable this setting to use the RudderStack IAM role for authentication. For more information on creating an AWS IAM role for RudderStack, refer to [this guide](https://www.rudderstack.com/docs/destinations/aws-iam-role-for-rudderstack/#creating-a-rudderstack-iam-role).\n    *   **IAM Role ARN**: Enter the ARN of the IAM role.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> It is highly recommended to enable this setting as the access keys-based authentication method is now deprecated.\n\n*   If **Role-based Authentication** is disabled, you need to enter the **AWS Access Key ID** and **AWS Secret Access Key** to authorize RudderStack.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In both the role-based and access key-based authentication methods, you need to set a policy specifying the required permissions for RudderStack to send data to your Lambda function. Refer to the [Policy permissions](#policy-permissions) section below for more information.\n\n*   **Lambda**: Enter the name of the Lambda function to be invoked. RudderStack supports the following formats:\n\n| Name format | Example |\n| --- | --- |\n| Function name | *   `lambda-function` (Name only)<br>*   `lambda-function:v1` (Name with alias) |\n| Function ARN | `arn:aws:lambda:us-west-2:123456789012:function:my-function` |\n| Partial ARN | `123456789012:function:lambda-function` |\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> You can also append a version number or alias to any of the above formats.\n\n*   **Enable Batch Input**: Enable this setting if your lambda function expects a batch input (array of events) in the event object.\n    *   **Max Batch Size**: If **Enable Batch Input** setting is enabled, use this field to set the maximum size of the event batch.\n*   **Client Context**: Use this field to pass up to **3583 bytes** of Base64-encoded data about the invoking client to the function in the context object.\n\n## Policy permissions\n\nTo use the Lambda destination with RudderStack correctly, you must have a Lambda function set up in AWS. Refer to the [AWS documentation](https://docs.aws.amazon.com/lambda/latest/dg/getting-started.html) for more information on setting up your Lambda function.\n\nYou also need to create an IAM role and grant the necessary permissions for RudderStack to send data to your lambda function. For more information, refer to this [AWS documentation](https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html).\n\nThe following permission need to be attached to the role while setting up the policy:\n\n```\n\"Action\": [\"lambda:InvokeFunction\"]\n```\n\nA sample permissions policy that allows a user to send event data into AWS Lambda is shown below:\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"CloudWatchEventsInvocationAccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"lambda:InvokeFunction\"],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\n## Supported events\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This destination accepts raw event data similar to a webhook. RudderStack sends the entire event payload to AWS Lambda as is, without any transformation or modification.\n\nYou can send your [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/), [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/), [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/), [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/), and [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) events to your lambda function via RudderStack.\n\nRudderStack leverages the [AWS SDK for Go](https://docs.aws.amazon.com/sdk-for-go/api/service/lambda/) to send the events to the lambda function. It uses the SDK’s [`Invoke`](https://docs.aws.amazon.com/sdk-for-go/api/service/lambda/#Lambda.Invoke) method to **asynchronously** invoke the lambda function.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> As RudderStack supports only asynchronous invocation, it only guarantees the order in which the events are triggered. Also, the execution time is completely dependent on the complexity of your lambda function.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> It is highly recommended to configure a [dead-letter queue](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-dlq) to save the discarded events for further processing.\n\n## Viewing error logs\n\nRudderStack does not get any information related to the runtime errors for your lambda function. As a result, you will not be able to view these errors in the [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/) tab of your dashboard.\n\nTo view these errors, you can configure the [AWS CloudWatch logs](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-cloudwatchlogs.html) for your lambda function.\n\n## FAQ\n\n#### Why am I getting a `UnrecognizedClientException`/`InvalidSignatureException` error?\n\nIf you’re getting a `UnrecognizedClientException` error with a 403 status code, verify if your AWS credentials (both **AWS Access Key ID** and **Secret Access Key**) are valid.\n\nFor the `InvalidSignatureException` error, verify if the provided secret access key is valid.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "AWS Lambda | RudderStack Docs",
  "description": "Send your event data from RudderStack to AWS Lambda.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/airship/",
  "markdown": "# Airship | RudderStack Docs\n\nSend your event data from RudderStack to Airship.\n\n* * *\n\n*     6 minute read  \n    \n\n[Airship](https://www.airship.com/) is an app experience platform that lets you create and deliver powerful in-app experiences with the help of engaging, personalized content and actionable customer insights.\n\nRudderStack supports Airship as a destination to which you can seamlessly send your event data.\n\n## Getting started\n\nBefore configuring Airship as a destination in RudderStack, verify if the source platform is supported by referring to the table below:\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | \\-  | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the source platform supports sending events to Airship, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add the source. Then, from the list of destinations, select **Airship**.\n2.  Assign a name to your destination and click **Next**.\n\n### Connection settings\n\nTo successfully configure Airship as a destination, you will need to configure the following settings:\n\n[![Airship connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/airship-connection-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/airship-connection-settings.webp)\n\n*   **API Key**: Enter your Airship token which is required by RudderStack to communicate with your Airship project and authenticate all supported event calls, that is, [`identify`](#identify), [`track`](#track), and [`group`](#group).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For detailed steps on obtaining the API key, refer to the [FAQ](#faq) section below.\n\n*   **App Key**: Enter your Airship project’s app key which is required for the [`track`](#track) calls. You can obtain the app key by going to **Settings** > **Project Details** in your Airship dashboard.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For detailed steps on obtaining the Airship app key, refer to the [FAQ](#faq) section below.\n\n*   **EU data center**: Enable this setting if you’ve implemented your app in Airship’s European data center.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you’re unsure which data center you are on, reach out to [Airship support](mailto:%20docs@rudderstack.com).\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you uniquely identify a user and record any associated traits about them like their name, email, etc.\n\nA sample `identify` call is shown below:\n\n```\nrudderanalytics.identify(\"1hKOmRA4el9Zt1WSfVJIVo4GRlm\", {\n  likes_movies: true,\n  favorite_color: \"purple\",\n  age: 13\n});\n```\n\nIn the above code snippet, RudderStack sends the Boolean values to Airship as [tags](https://docs.airship.com/api/ua/#operation-api-named_users-tags-post), whereas the non-Boolean values are sent as [attributes](https://docs.airship.com/api/ua/#operation-api-named_users-named_user_id-attributes-post).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack maps some reserved traits to the predefined Airship attributes. Refer to the [Traits mapping](#traits-mapping) section below for more information.\n\n### Tags\n\nTo successfully assign tags to Airship using the RudderStack `identify` events, you must create a tag group with the group key set to `rudderstack_integration` in Airship.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on creating a tag group in Airship, refer to the [FAQ](#faq) section below.\n\nThis integration supports `identify` traits of type Boolean only. Airship adds tags for the traits that are set to `true` and removes tags for the traits set to `false`.\n\n### Attributes\n\nFor `identify` traits that are not mapped to any predefined or custom-defined Airship attributes, you must create and enable those attributes in the Airship dashboard.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Refer to the [FAQ](#faq) section below for more information on creating and enabling attributes in Airship.\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you capture user events along with the properties associated with them.\n\nRudderStack sends the `track` events to Airship via their [Custom Events API](https://docs.airship.com/api/ua/#operation-api-custom-events-post). You can use the event properties to personalize and trigger specific messages for your audience.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You need the Airship project’s **App Key** for authenticating the `track` calls.\n\nA sample `track` call is shown below:\n\n```\nrudderanalytics.track(\"Product Clicked\", {\n  description: \"Shoes viewed\",\n  brand: \"Sneakers\",\n  colors: [\"red\", \"blue\"],\n  items: [\n    {\n      text: \"New Balance Sneakers\",\n      price: \"$69.95\"\n    },\n    {\n      text: \"G.I. Joe Sneakers\",\n      price: \"$99.95\"\n    }\n  ]\n});\n```\n\nThe event name sent to Airship must not contain any upper case characters. Otherwise, it is rejected with a `400` status code. RudderStack handles this by converting any upper case characters to lower case and replacing any spaces with an underscore(`_`).\n\nIn the snippet above, the event name `Product Clicked` is automatically converted to `product_clicked` before sending to Airship.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack also maps some event properties to the Airship properties before sending them over to Airship. For more information, refer to the [Supported mappings](#supported-mapping) section below.\n\n## Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group such as a company, organization, or an account, and record any traits associated with that group, e.g., company name, number of employees, etc.\n\nA sample `group` call is shown below:\n\n```\nrudderanalytics.group({\n  userId: \"1hKOmRA4el9Zt1WSfVJIVo4GRlm\",\n  likes_movies: true,\n  age: 13\n});\n```\n\nIn the above code snippet, RudderStack sends the Boolean values to Airship as [tags](https://docs.airship.com/api/ua/#operation-api-named_users-tags-post), whereas the non-Boolean values are sent as [attributes](https://docs.airship.com/api/ua/#operation-api-named_users-named_user_id-attributes-post).\n\nThis integration supports `group` traits of type Boolean only. Airship adds tags for the traits that are set to `true` and removes tags for the traits set to `false`.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> To successfully assign tags to Airship using the RudderStack `group` events, you must create a tag group with the group key set to `rudderstack_integration_group` in Airship. Similarly, you need to create the relevant attribute identifiers in Airship to set the attributes on the named users.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on creating a tag group or attributes in Airship, refer to the [FAQ](#faq) section below.\n\n## Supported mappings\n\nRudderStack maps the following event properties to the Airship properties before sending them over to Airship.\n\n| RudderStack property | Airship property | Presence |\n| --- | --- | --- |\n| `userId` | `named_user_id` | Required |\n| `event` | `name` | Required |\n| `properties` | `properties` | Optional |\n| `value` | `value` | Optional |\n| `interactionId` | `interaction_id` | Optional |\n| `interactionType` | `interaction_type` | Optional |\n| `sessionId` | `session_id` | Optional |\n| `transaction` | `transaction` | Optional |\n| `timestamp` | `occurred` | Optional |\n\n### Traits mapping\n\n| RudderStack trait | Airship attribute |\n| --- | --- |\n| `address.city` | `city` |\n| `address.country` | `country` |\n| `address.postalcode` | `zipcode` |\n| `address.state` | `region` |\n| `createdAt` | `account_creation` |\n| `firstName` | `first_name` |\n| `lastName` | `last_name` |\n| `name` | `full_name` |\n| `phone` | `mobile_phone` |\n\n## FAQ\n\n#### Where can I obtain the Airship API key?\n\nThe Airship API key is required so that RudderStack can communicate with your Airship project. This is a mandatory field to set up the integration.\n\nTo obtain your Airship project’s API key, follow these steps:\n\n1.  In your Airship dashboard, go to **Settings**.\n2.  In the **Project configuration** window, go to **Tokens** and click **Manage**.\n3.  Then, click **Create token**.\n4.  Assign a name for your token. Under **Role**, select **All access** from the dropdown:\n\n[![Airship project token](https://www.rudderstack.com/docs/images/event-stream-destinations/airship-create-new-token.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/airship-create-new-token.webp)\n\n5.  Once the token is created, copy and secure the credentials and click **Got it**.\n\n#### Where can I obtain the Airship App Key?\n\nTo obtain your Airship project’s app key, follow these steps:\n\n1.  In your Airship dashboard, go to **Settings**.\n2.  In the **Project configuration** window, look for the **Project Details** pane on the right side.\n\nYou will find your project’s app key listed here.\n\n#### How do I create a custom tag group in Airship?\n\nTo create a tag group in Airship, follow these steps:\n\n1.  Go to **Settings** > **Project configuration** > **Tag Groups** and click **Manage**.\n2.  Click **Create Tag Group** and enter the following settings:\n    *   **Name**: Enter the name for the tag group.\n    *   **Description**: Set additional information about the tag group in this field.\n    *   **Group Key**: Assign a unique ID for the tag group in this field. For example, to assign tags using the RudderStack `identify` events, you can set this to `rudderstack-integration`. For assigning tags using the `group` events, set this to `rudderstack-integration-group`.\n\nFor more information, refer to the [Airship documentation](https://docs.airship.com/guides/messaging/user-guide/audience/segmentation/tags/#creating-custom-tag-groups).\n\n#### How do I create and enable attributes in Airship?\n\nFor `identify` traits that are not mapped to any predefined or custom-defined Airship attributes, you must create and enable those attributes in the Airship dashboard. To do so, follow these steps:\n\n1.  Go to your Airship dashboard.\n2.  Navigate to **Audience** > **Attributes**.\n3.  Click **Create Attribute**.\n4.  Enter the **Attribute ID**, **Name**, and select the attribute **Type**.\n5.  Finally, click **Add**.\n\n[![Airship new attributes](https://www.rudderstack.com/docs/images/event-stream-destinations/new-attribute-airship.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/new-attribute-airship.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Airship | RudderStack Docs",
  "description": "Send your event data from RudderStack to Airship.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/axeptio/",
  "markdown": "# Axeptio | RudderStack Docs\n\nStep-by-step guide on sending your event data from RudderStack to Axeptio.\n\n* * *\n\n*     2 minute read  \n    \n\n[Axeptio](https://www.axeptio.eu/) is a cookie and consent management platform. It enables you to use interesting widgets and compelling UI to enhance users’ cookie/consent experience while keeping your web performance intact.\n\n## Getting started\n\nRudderStack supports sending event data to Axeptio via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| Connection Mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| Device mode | Supported | \\-  | \\-  |\n| Cloud mode | \\-  | \\-  | \\-  |\n\nOnce you have confirmed that the source platform supports sending events to Axeptio, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **Axeptio**.\n2.  Assign a name to the destination and click **Continue**.\n\n## Connection settings\n\nTo successfully configure Axeptio as a destination, you will need to configure the following settings:\n\n*   **Client ID**: Enter your Axeptio client ID. For more information on obtaining the client ID, refer to the [FAQ](#faq) section below.\n*   **Toggle it on to send data through callback**: Enable this setting to allow RudderStack to track and record the callback events from the Axeptio SDK as `track` events.\n*   **Client-side Events Filtering**: This setting lets you specify which events should be blocked or allowed to flow through to Axeptio. For more information on this setting, refer to the [Client-side Events Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) guide.\n*   **Use device mode to send events**: Enable this setting to send your events to Axeptio via [web device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can keep it disabled if you only want to load the Axeptio SDK natively and not send any events.\n\n*   **OneTrust Cookie Categories**: This setting lets you associate [OneTrust](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/javascript/) cookie consent groups to Axeptio.\n\n## Tracking callback events\n\nThe Axeptio SDK triggers events whenever a user interacts with the cookie/consent widgets integrated with your website.\n\nBy enabling the **Toggle it on to send data through callback** setting in the RudderStack dashboard, RudderStack tracks and records the interaction events as [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) events. You can then view and analyze these events in the other tools (connected to the same source in RudderStack).\n\nRudderStack maps the name and the payload of the triggered interaction event to the `track` event name and properties respectively.\n\n## FAQ\n\n#### Where can I find the Axeptio client ID?\n\nTo get the client ID associated with your Axeptio project, follow these steps:\n\n1.  Log into your [Axeptio dashboard](https://admin.axeptio.eu/).\n2.  Click the settings icon on your project. You should be able to see the **Project ID** listed here:\n\n[![Axeptio client ID](https://www.rudderstack.com/docs/images/event-stream-destinations/axeptio-client-id.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/axeptio-client-id.webp)\n\nYou can also find the client ID in the code snippet to integrate into your website. Click the settings icon on your project and go to **Integration** to find the client ID:\n\n[![Axeptio client ID](https://www.rudderstack.com/docs/images/event-stream-destinations/axeptio-client-id-2.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/axeptio-client-id-2.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Axeptio client ID is the same as the project ID.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Axeptio | RudderStack Docs",
  "description": "Step-by-step guide on sending your event data from RudderStack to Axeptio.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/algolia-insights/",
  "markdown": "# Algolia Insights | RudderStack Docs\n\nSend your event data from RudderStack to Algolia Insights.\n\n* * *\n\n*     5 minute read  \n    \n\n[Algolia](https://www.algolia.com/) is a popular site search and discovery platform. It helps businesses build and optimize their users’ product search and discovery experience, resulting in enhanced online engagement, increased conversion rates, and better user lifetime value.\n\nRudderStack supports Algolia Insights as a destination to which you can seamlessly send your customer data.\n\n## Getting started\n\nBefore configuring Algolia Insights as a destination in RudderStack, verify if the source platform is supported by Algolia by referring to the table below:\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | \\-  | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that your source platform supports sending events to Algolia, follow these steps:\n\n*   From your [RudderStack dashboard](https://app.rudderstack.com/), add the source. From the list of destinations, select **Algolia**.\n*   Assign a name to the destination and click **Next**. You should then see the following screen:\n\n[![](https://www.rudderstack.com/docs/images/Algolia.webp)](https://www.rudderstack.com/docs/images/Algolia.webp)\n\n### Connection settings\n\nThis section details the connection settings required to configure Algolia as a destination in RudderStack.\n\n*   Enter your Algolia **API Key** and **Application ID**.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To get the Algolia API key and Application ID, go to your [Algolia dashboard](https://www.algolia.com/apps/). Under the **API Keys** menu, copy the values under **Application ID** and **Search-Only API Key**.\n\n*   Under **Event Settings**, you can add the **Event Name** and its corresponding **Event Type**. These are optional fields and can also be passed via the `track` call.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `event`\\-`eventType` mapping passed via the `track` call **will get a higher precedence** over the mapping specified in the dashboard.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If the `event`\\-`eventType` mapping is not specified in the dashboard and these fields are not passed in the `track` call as well, then the event will be discarded.\n\n*   Finally, click **Next**. Algolia will now be enabled as a destination in RudderStack.\n\n## Track\n\nThe `track` call lets you send events related to your customers’ product usage. The required fields are `event`, `eventType`, `index`, and either `objectIds` or `filters`.\n\nNote that the **Event Name** (`event`) and **Event Type** (`eventType`) can be mapped in the dashboard while configuring the destination. Note that the `eventType` value set in `properties` in the `track` call will have a higher precedence over the dashboard mapping.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In case you have already specified the mapping in the dashboard, you don’t need to send the same `eventType` in the `track` call.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> To send a new `event` via `track` which is not specified in the dashboard, make sure you include the `eventType` inside the `properties` of the call. Otherwise, the event will be **discarded**.\n\nThe following table includes all `track` fields with their relative mapping to the Algolia fields:\n\n| **RudderStack Field** | **Algolia Field** | **Criteria** |\n| --- | --- | --- |\n| `index` | `index` |     |\n| `eventType` | `eventType` |     |\n| `timestamp` | `timestamp` |     |\n| `queryId` | `queryID` |     |\n| `filters` | `filters` |     |\n| `objectIds` | `objectIDs` |     |\n| `positions` | `positions` |     |\n| `message.properties.eventSubtype` | `eventSubtype` | Applicable if `eventType` is `conversion`. Allowed values for `eventSubtype` are `addToCart`, and `purchase`. |\n| `message.properties.value` | `value` |     |\n| `properties.currency` | `currency` | Required field if you send `value` and `products` array where any product’s information contains `price`/`quantity`/`discount`. |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack looks for these fields within the `properties` field of the event payload. `userId` or `anonymousId` is mapped to `userToken` in Algolia.\n\nA sample `track` call is as shown:\n\n```\nrudderanalytics.track(\"event name\", {\n  eventType: \"click\",\n  index: \"index1\",\n  timestamp: 1630649198801,\n  objectIds: [\"objId1\", \"objId2\"],\n  positions: [1, 2],\n  queryId: \"e28d338dbfbbdcb4678d9d30a5e286ee\"\n});\n```\n\nTo successfully send events to Algolia, the following criteria must be met:\n\n| **Field** | **Criteria** |\n| --- | --- |\n| `eventType` | Values can only be either of `click`, `view` or `conversion`. Otherwise, the event will be discarded. |\n| `timestamp` | Must be in milliseconds UNIX epoch and must be maximum 4 days old. |\n| `queryId` | Must be a 32-character Hexadecimal string. |\n| `filters` | Must be an array of strings. **If it has more than 10 strings, only the first 10 values will be passed**. |\n| `objectIds` | Must be an array of strings. **If it has more than 20 strings, only the first 20 values will be passed**. |\n| `positions` | Must be an array of integers. **It must be passed for only `click` type events. Only the first 20 values will be passed**. |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For all event types (`eventType`), either `filters` or `objectIds` must be passed and **not both**. If both or none of the fields are passed, the event will be discarded.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For the `click` event type, if you pass `objectIds`, then you must pass either **both** or **none** of the `positions` and `queryId` fields. If only either of the fields are present, the event will be discarded.\n> \n> Also, the length of `objectIds` and `positions` arrays should be equal. Otherwise, the event will be discarded.\n\n### Ecommerce events\n\nFor Algolia Insights, RudderStack supports the `products` array for two ecommerce events - [Product List Viewed](https://www.rudderstack.com/docs/event-spec/ecommerce-events-spec/browsing/#product-list-viewed) and [Order Completed](https://www.rudderstack.com/docs/event-spec/ecommerce-events-spec/ordering/#order-completed).\n\nAn example is shown below:\n\n```\nrudderanalytics.track(\"product list viewed\", {\n  index: \"index1\",\n  products: [\n    {\n      objectId: \"objectId\",\n      position: 1\n    }\n  ]\n});\n```\n\nRudderstack also supports sending DataObjects, if you send the `products` array for `conversion` event type:\n\n| **RudderStack Product Property** | **Algolia Data Object Property** | **Criteria** |\n| --- | --- | --- |\n| `message.properties.products[#i].queryID` | `queryID` | \\-  |\n| `message.properties.products[#i].price` | `price` | `message.properties.currency` must be present. |\n| `message.properties.products[#i].quantity` | `quantity` | `message.properties.currency` must be present. |\n| `message.properties.products[#i].discount` | `discount` | `message.properties.currency` must be present. |\n\n## FAQ\n\n#### What happens if the Event Name - Event Type mapping is not specified in the dashboard as well as in the `track` call?\n\nIf the **Event** - **Event Type** mapping is not specified in the dashboard and these fields are not passed in the `track` call as well, then the event will be discarded.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Algolia Insights | RudderStack Docs",
  "description": "Send your event data from RudderStack to Algolia Insights.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/microsoft-azure-blob-storage/",
  "markdown": "# Azure Blob Storage | RudderStack Docs\n\nSend your event data from RudderStack to Microsoft Azure Blob Storage.\n\n* * *\n\n*     4 minute read  \n    \n\n[Azure Blob Storage](https://azure.microsoft.com/en-in/services/storage/blobs/) is Microsoft’s cloud-based object storage solution. It provides scalable and secure storage for high-performance workloads, cloud native apps, machine learning, and more.\n\nRudderStack supports sending your event data from a variety of sources to your Azure Blob Storage container.\n\n## Setting up Azure Blob Storage\n\nFollow these steps to set up Azure Blob Storage before adding it as a destination in RudderStack:\n\n1.  Login to your [Azure portal](https://portal.azure.com/).\n2.  Click **Create a resource** and click **Create** under **Storage account**.\n3.  [Create a storage account](https://docs.microsoft.com/en-us/azure/storage/common/storage-account-create?tabs=azure-portal) of type [Standard general-purpose v2](https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview#types-of-storage-accounts).\n4.  Next, choose your storage account and click **Containers** under **Data storage** .\n5.  Create a new container. This is where RudderStack will store all your event data.\n6.  You also need to provide an access key to authorize RudderStack to write to your container. Under **Security + networking**, click **Access keys**. You can find your access keys here.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note the storage account name, container as well as access key. This information is required to set up Azure Blob Storage as a destination in RudderStack.\n\n7.  If you wish to grant limited access to your Azure Storage resources, you can use the Shared Access Signatures (SAS) instead of your access key. To generate a SAS token, go to **Security + networking** > **Shared Access Signature**.\n\n### SAS token permissions\n\nYou can use the shared access signatures (SAS) to delegate specific permissions to your storage account resources. This gives you granular control over how users can access your data.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on shared access signatures (SAS) and how to use them, refer to this [Azure documentation](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview).\n\nFor your Blob Storage destination, RudderStack requires the **Write** permission to write to your container. Make sure it is checked in the **Allowed permissions** setting. An example is shown below:\n\n[![Setting SAS token permissions](https://www.rudderstack.com/docs/images/event-stream-destinations/sas-token-permissions.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/sas-token-permissions.webp)\n\nIf you’re using Blob Storage as an intermediate object storage for your data warehouse destinations, you need to assign the following permissions for your SAS token:\n\n| Warehouse destination | Minimum required permissions |\n| --- | --- |\n| Azure Data Lake | Read, Write |\n| Azure Synapse | Read, Write |\n| Clickhouse | Read, Write |\n| Databricks Delta Lake | Read, Write |\n| Microsoft SQL Server | Read, Write |\n| PostgreSQL | Read, Write |\n| Snowflake | Read, Write |\n\n## Configuring Azure Blob Storage in RudderStack\n\nTo enable dumping data to Microsoft Azure Blob Storage, you will first need to add it as a destination in RudderStack. Once the destination is configured and enabled, events from RudderStack will start flowing to your Azure Blob Storage container.\n\nFollow these steps to add Blob Storage as a destination in RudderStack:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **Azure Blob Storage**.\n2.  Assign a name to the destination and click **Continue**.\n\n### Connection settings\n\nTo successfully configure Azure Blob Storage as a destination, you will need to configure the following settings:\n\n[![Azure Blob Storage connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/azure-blob-storage-connection-1.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/azure-blob-storage-connection-1.webp)\n\n*   **Azure Blob Storage Container Name**: Enter the name of your Blob Storage container used to store the data.\n*   **Prefix**: If specified, RudderStack will create a folder in the bucket with this prefix and push all data within that folder. For example, `https://<account_name>.blob.core.windows.net/<container_name>/<prefix>/`\n*   **Azure Blob Storage Account Name**: Enter your Azure Blob Storage account name that you copied in the [Setting up Azure Blob Storage](#setting-up-azure-blob-storage) section above.\n*   **Azure Blob Storage Account Key**: This option is only applicable if **Use shared access signature (SAS) Tokens** is **disabled**. In that case, enter the access key associated with your Blob Storage account.\n*   **Use shared access signature (SAS) Tokens**: Enable this setting to use a shared access signature (SAS) token to grant limited access to your Azure storage resources.\n\n[![Azure Blob Storage connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/azure-blob-storage-connection-2.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/azure-blob-storage-connection-2.webp)\n\n*   **Azure Blob Storage SAS Token**: If **Use shared access signature (SAS) Tokens** is enabled, enter your Blob Storage SAS token generated in the **Step 7** of the [Setting up Azure Blob Storage](#setting-up-azure-blob-storage) section above.\n\nMicrosoft Azure Blob Storage is successfully added as a destination in RudderStack. Once you send an event from your source, RudderStack will send it to your specified Blob Storage container.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Azure Blob Storage | RudderStack Docs",
  "description": "Send your event data from RudderStack to Microsoft Azure Blob Storage.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/azure-event-hubs/",
  "markdown": "# Azure Event Hubs | RudderStack Docs\n\nSend your event data from RudderStack to Azure Event Hubs.\n\n* * *\n\n*     3 minute read  \n    \n\n[Azure Event Hubs](https://docs.microsoft.com/en-us/azure/event-hubs/) is a data streaming platform and an event ingestion service. It provides a Kafka endpoint which can be used by your existing Kafka-based applications as an alternative to running your own Kafka clusters.\n\nRudderStack supports Azure Event Hubs as a destination to which you can seamlessly send your event data.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> **RudderStack does not support the Basic tier of Azure Event Hubs**. For this integration to work, you need to have a standard tier (or higher) of Event Hubs which includes an Apache Kafka endpoint.\n> \n> For more information, refer to the Event Hubs’ [pricing page](https://azure.microsoft.com/en-us/pricing/details/event-hubs/#pricing).\n\n## Getting started\n\nTo enable sending data to Azure Event Hubs, you need to add it as a destination in RudderStack. Once the destination is enabled, events from RudderStack will start to flow to Azure Event Hubs.\n\nBefore configuring your source and destination in [RudderStack](https://app.rudderstack.com/), check whether the source platform is supported by Azure Event Hubs by referring to the table below:\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device Mode** | \\-  | \\-  | \\-  |\n| **Cloud Mode** | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the platform supports sending events to Azure Event Hubs, perform the steps as mentioned below:\n\n*   Choose a source to which you would like to add Azure Event Hubs as a destination.\n*   Select the destination as **Azure Event Hubs**. Give your destination a name, and then click **Next**.\n*   In the **Connection Settings**, fill the required fields with the relevant information and click **Next**.\n\n[![Azure Event Hubs Connection Settings](https://www.rudderstack.com/docs/images/image%20%28100%29%20%281%29%20%281%29%20%281%29%20%281%29%20%281%29%20%281%29%20%281%29%20%281%29.webp)](https://www.rudderstack.com/docs/images/image%20%28100%29%20%281%29%20%281%29%20%281%29%20%281%29%20%281%29%20%281%29%20%281%29%20%281%29.webp)\n\nAzure Event Hubs Connection Settings\n\n### Connection Settings\n\nThis section lists the required connection settings to configure Event Hubs as a destination in RudderStack.\n\n*   **Bootstrap server**: The bootstrap server information goes here. This is in the format`hostname of your event hub namespace`:`port`\n*   **Topic Name**: The topic name, or the name of the Event Hub that you have created in your [Azure portal](https://portal.azure.com/).\n*   **Event Hubs Connection String**: Your Event Hubs’ primary connection string. For more information, refer to Microsoft’s [How to get Event hubs connection string](https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string) guide.\n\n## Partition Key\n\nRudderStack uses `userId` as the partition key of a given message.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If the `userId` is not present in the payload, then `anonymousId` is used.\n\nIf you have a multi-partitioned topic, then the records of the same `userId` (or `anonymousId` in absence of `userId`) will always go to the same partition.\n\n## FAQ\n\n#### What is my Bootstrap server address?\n\nThe Bootstrap server address is in the following format:\n\n`hostname of Event Hub namespace`: `port`\n\nFor example: `NAMESPACENAME.servicebus.windows.net:9093`\n\nHere `NAMESPACENAME` is your event hubs namespace, while `9093` is the port number.\n\n#### Where can I get the Topic name?\n\nThe Topic name is the name of the **Event Hub** that you have created in your [Azure portal](https://portal.azure.com/).\n\n#### Where can I get the Event Hubs connection string?\n\nEvent Hubs connection string is the primary connection string of your shared access policy. For more information, refer to Microsoft’s [How to get Event hubs connection string](https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string) guide.\n\nCheck whether you are using the proper Event Hubs connection string for the policy that you have created.\n\nYou need to create a policy to write to the Event Hub with a `Send` permission, and put the corresponding primary connection string in the destination settings, as described in the [Getting Started](#getting-started) section of this guide.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Azure Event Hubs | RudderStack Docs",
  "description": "Send your event data from RudderStack to Azure Event Hubs.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/amazon-eventbridge/",
  "markdown": "# Amazon EventBridge | RudderStack Docs\n\nSend your event data from RudderStack to Amazon EventBridge.\n\n* * *\n\n*     3 minute read  \n    \n\n[Amazon EventBridge](https://aws.amazon.com/eventbridge/) is a serverless event bus that allows you to connect applications using data from your own apps, integrated SaaS applications, or AWS services.\n\nRudderStack supports Amazon EventBridge as a destination where you can seamlessly send your event data.\n\n## Getting started\n\nRudderStack supports sending event data to EventBridge via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | \\-  | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the source platform supports sending events to EventBridge, follow these steps:\n\n1.  From your RudderStack dashboard, add the source. Then, from the list of destinations, select **AWS EventBridge**.\n2.  Assign a name to your destination and click **Continue**.\n\n### Connection settings\n\nTo successfully set up EventBridge as a destination, you need to configure the following settings:\n\n*   **AWS Region**: Enter the AWS region in which you have created the EventBridge bus. This is a required field.\n*   **Role-based Authentication**: Enable this setting to use the RudderStack IAM role for authentication. For more information on creating an AWS IAM role for RudderStack, refer to [this guide](https://www.rudderstack.com/docs/destinations/aws-iam-role-for-rudderstack/#creating-a-rudderstack-iam-role).\n    *   **IAM Role ARN**: Enter the ARN of the IAM role.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> It is highly recommended to enable this setting as the access keys-based authentication method is now deprecated.\n\n*   If **Role-based Authentication** is disabled, you need to enter the **AWS Access Key ID** and **AWS Secret Access Key** to authorize RudderStack in order to write to the configured event bus.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In both the role-based and access key-based authentication methods, you need to set a policy specifying the required permissions for RudderStack to write to your event bus. Refer to the [Policy permissions](#policy-permissions) section below for more information.\n\n*   **Event Bus Name**: Specify the name of the event bus where you want to send the events. RudderStack sends the event to the default bus if no event bus name is specified.\n*   **Detail Type**: Specify the event’s detail type to send to EventBridge. This is a **required** field.\n*   **Amazon Resource Name:** This field contains an ARN (Amazon Resource Name) that identifies a resource involved in your EventBridge setup. To add multiple ARNs (for multiple targets involved in your setup), click **\\+ ADD MORE**.\n\n## Policy permissions\n\nTo authorize RudderStack, you need to create an IAM policy that provides the required permission to write to your event bus. Refer to the [Using Identity-Based Policies (IAM Policies) for EventBridge](https://docs.aws.amazon.com/eventbridge/latest/userguide/iam-identity-based-access-control-eventbridge.html) guide to know the applicable policies.\n\nA sample permissions policy that allows a user to put event data into EventBridge is shown below:\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"CloudWatchEventsInvocationAccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"events:PutEvents\"],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\n## Sending events to EventBridge\n\nYou can map a RudderStack event to an EventBridge event in the following manner:\n\n| RudderStack | EventBridge |\n| --- | --- |\n| Event payload | `Detail` |\n| Amazon Resource Name | `Resources` |\n| Detail Type | `DetailType` |\n| Event Bus Name | `EventBusName` |\n| `\"rudderstack\"` | `Source` |\n\n*   **Event Payload**: This is the generated event payload\n*   **Amazon Resource Name, Detail Type, Event Bus Name**: These are the values you configured while setting up the destination with RudderStack.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Amazon EventBridge | RudderStack Docs",
  "description": "Send your event data from RudderStack to Amazon EventBridge.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/adroll/",
  "markdown": "# AdRoll | RudderStack Docs\n\nSend your event data from RudderStack to AdRoll.\n\n* * *\n\n*     5 minute read  \n    \n\n[AdRoll](https://www.adroll.com/) is a digital and growth marketing platform that lets you display relevant ads, engage with your customers, and grow your revenue.\n\nRudderStack supports AdRoll as a destination to which you can seamlessly send your event data.\n\n## Getting started\n\nRudderStack supports sending event data to AdRoll via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | **Supported** | \\-  | \\-  |\n| **Cloud mode** | \\-  | \\-  | \\-  |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In a web device mode integration, that is, using [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) as a source, the AdRoll native SDK is loaded from `https://s.adroll.com/` domain. Based on your website’s content security policy, you might need to [allowlist this domain](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#allowlist-destination-domain) to load the AdRoll SDK successfully.\n\nOnce you have confirmed that the source platform supports sending events to AdRoll, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **AdRoll**.\n2.  Assign a name to the destination and click **Next**.\n\n### Connection settings\n\nTo successfully configure AdRoll as a destination, you will need to configure the following settings:\n\n[![AdRoll connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/adroll-connection-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/adroll-connection-settings.webp)\n\n*   **Advertiser ID**: Enter your AdRoll advertiser ID here.\n*   **Pixel ID**: Enter your AdRoll pixel ID here.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on getting your AdRoll advertiser ID and pixel ID, refer to the [FAQ](#faq) section below.\n\n*   **Mapping to trigger the AdRoll Segment ID for the resepective event name**: Enter the event names which you want to map to specific AdRoll audience segments.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on creating new audiences in AdRoll and getting the audience segment ID, refer to the [FAQ](#faq) section below.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> When sending events via device mode, RudderStack lets you specify which events should be discarded or allowed to flow through. For more information, refer to the [Client-side Event Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) guide.\n\n*   **Use device mode to send events**: As this is a web device mode-only destination, this setting is enabled by default and cannot be disabled.\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) method lets you identify a user and associate them to their actions. It also lets you record any traits about them like their name, email, etc.\n\nA sample `identify` call is shown below:\n\n```\nrudderanalytics.identify(\"1hKOmRA4GRlm\", {\n  email: \"alex@example.com\"\n});\n```\n\nRudderStack uses the `identify` call to set a `userId` which is passed to AdRoll every time a subsequent `track` call is made.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> `email` is a required attribute for successfully making an `identify` call. RudderStack maps `email` to AdRoll’s `window._adroll_email` property.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> It is not mandatory to make an `identify` call every time before making a `track` call.\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) method lets you capture user events along with the properties associated with them.\n\nRudderStack uses `track` events to segment your users in AdRoll.\n\nA sample `track` call is shown below:\n\n```\nrudderanalytics.track(\"Order Completed\", {\n  order_id: \"123454387\",\n  products: [\n    {\n      product_id: \"345676543\",\n      sku: \"G214\",\n      name: \"Cards\",\n      price: 14.99,\n      position: 1,\n      category: \"Games\",\n      url: \"https://www.estore.com/best-seller/1\"\n    }\n  ]\n});\n```\n\nTo use the RudderStack `track` calls to segment users in AdRoll, you must first create an audience segment in AdRoll. Then, you need to map the audience ID to your corresponding event in the RudderStack dashboard:\n\n[![AdRoll event mapping to audience](https://www.rudderstack.com/docs/images/event-stream-destinations/adroll-event-mapping.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/adroll-event-mapping.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on creating an audience in AdRoll and mapping it to your events, refer to the [FAQ](#faq) section below.\n\nWhen the mapped event is triggered, the appropiate pixel is fired in AdRoll and the user is segmented in the audience.\n\n### Property mapping\n\nRudderStack maps the following event properties to the corresponding AdRoll attributes:\n\n| RudderStack property | AdRoll attribute | Comments |\n| --- | --- | --- |\n| `revenue` | `adroll_conversion_value` | \\-  |\n| `userId` | `user_id` | \\-  |\n| `price` | `adroll_conversion_value` | Mapped only for the product type events, for example, `Product Clicked`, `Product Viewed`, `Product Added`. |\n| `orderId` | `order_id` | \\-  |\n| `currency` | `adroll_currency` | \\-  |\n\n## Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) method lets you record your website’s page views with any additional relevant information about the viewed page.\n\nRudderStack internally uses the `page` and `track` calls to segment your users.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> For RudderStack to successfully send both `page` and `track` calls to AdRoll, the events must be mapped to the AdRoll audience segment ID in the RudderStack dashboard.\n\nA sample `page` call is shown below:\n\n```\nrudderanalytics.page(\"Best Seller\", {\n  path: \"/best-seller/1\",\n  referrer: \"https://www.google.com/search?q=estore+bestseller\",\n  search: \"estore bestseller\",\n  title: \"The best sellers offered by EStore\",\n  url: \"https://www.estore.com/best-seller/1\"\n});\n```\n\n## FAQ\n\n#### Where can I find the AdRoll advertiser ID and pixel ID?\n\nTo find the AdRoll advertiser ID and pixel ID, follow these steps:\n\n1.  Log into your [AdRoll dashboard](https://app.adroll.com/).\n2.  In the left sidebar, go to **Website** under **Audiences**.\n3.  Under the **AdRoll Pixel** section, click **View Pixel**:\n\n[![AdRoll view Pixel](https://www.rudderstack.com/docs/images/event-stream-destinations/adroll-pixel.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/adroll-pixel.webp)\n\n4.  In the resulting pop-up, you can find your AdRoll advertiser ID associated with the `adroll_adv_id` parameter. You can also find the AdRoll pixel ID associated with the `adroll_pix_id` parameter:\n\n[![AdRoll advertiser ID and Pixel ID](https://www.rudderstack.com/docs/images/event-stream-destinations/adroll-details.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/adroll-details.webp)\n\n#### How do I create a new audience segment in AdRoll?\n\nTo create a new audience segment in AdRoll, follow these steps:\n\n1.  Log into your [AdRoll dashboard](https://app.adroll.com/).\n2.  In the left sidebar, go to **Website** under **Audiences**.\n3.  Click **New Audience**:\n\n[![AdRoll new audience](https://www.rudderstack.com/docs/images/event-stream-destinations/adroll-new-audience.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/adroll-new-audience.webp)\n\n4.  Enter the name of the audience segment in the **Audience Name** field.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Make sure you copy the ID before creating the audience by clicking the **Copy ID to clipboard** link.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack supports only the **conversion audience** type, so make sure you check the **This is a conversion audience** option.\n\n[![AdRoll new audience](https://www.rudderstack.com/docs/images/event-stream-destinations/adroll-new-audience-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/adroll-new-audience-settings.webp)\n\n5.  Specify the **Conversion Value** and the duration for which the user should be a part of this audience segment.\n6.  Finally, click **Create Audience**.\n\nYou can then specify the ID you copied above in the RudderStack dashboard to map specific events to your audience segment:\n\n[![AdRoll event mapping to audience](https://www.rudderstack.com/docs/images/event-stream-destinations/adroll-event-mapping.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/adroll-event-mapping.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "AdRoll | RudderStack Docs",
  "description": "Send your event data from RudderStack to AdRoll.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/bigquery-stream/",
  "markdown": "# BigQuery Stream | RudderStack Docs\n\nSend your event data from RudderStack to BigQuery via Google’s streaming API.\n\n* * *\n\n*     5 minute read  \n    \n\n[Google BigQuery](https://cloud.google.com/bigquery) offers a [streaming API](https://cloud.google.com/bigquery/docs/samples/bigquery-table-insert-rows) which lets you insert data into BigQuery in near real-time and have it ready for analysis in no time.\n\nFind the open source transformer code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/master/src/v0/destinations/bqstream).\n\n## Getting started\n\nRudderStack supports sending event data to BigQuery Stream via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| Connection Mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | \\-  | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the source platform supports sending events to BigQuery Stream, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add the source. Then, from the list of destinations, select **BigQuery Stream**.\n2.  Assign a name to the destination and click **Continue**.\n\n[![BigQuery Stream connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-2.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-2.webp)\n\n## Connection settings\n\nTo successfully configure BigQuery Stream as a destination, you will need to configure the following settings:\n\n*   **Project ID**: Enter your BigQuery project ID.\n*   **Dataset ID**: This is the ID of the project dataset for which you specified the **Project ID** above.\n*   **Table ID**: Provide the ID of the table into which you want to stream the event data.\n\n[![BigQuery Stream connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-3.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-3.webp)\n\n*   **Insert ID**: This is an **optional** field. Enter the `insertId` used by Google to deduplicate the data sent to BigQuery. For more information on this setting, refer to the [Deduplicating data](#deduplicating-data) section.\n*   **Credentials**: Enter the contents of the credentials JSON you downloaded after [creating your service account](#creating-a-service-account).\n\n## Sending events to BigQuery Stream\n\nRudderStack supports sending only [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) events to BigQuery Stream. Make sure your `track` event payload format matches the table schema corresponding to **Table ID** specified in the dashboard settings.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack currently does not support the `templateSupportSuffix` feature which creates a table schema during a streaming insert action.\n\nSuppose you want to stream the events from your web source to BigQuery and the table schema in your BigQuery dataset is as shown:\n\n[![BigQuery table schema](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-5.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-5.webp)\n\nTo successfully stream the events, the event tracked from your JavaScript SDK should look like the following:\n\n```\nrudderanalytics.track(\"event\", {\n  productId: 10,\n  productName: `Product-10`,\n  count: 12\n});\n```\n\nNote that the `track` properties in the above payload match with the fields specified in your table schema. Once streamed, you can view this event in your BigQuery console by running the following SQL command :\n\n[![BigQuery result](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-6.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-6.webp)\n\n## Deduplicating data\n\nGoogle leverages the `insertId` to deduplicate the data sent to BigQuery. `insertId` is essentially an event property that uniquely identifies an event.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack currently supports only **numeric** or **string** values as `insertId`.\n\nFor more information on the deduplication process in BigQuery, refer to the [BigQuery documentation](https://cloud.google.com/bigquery/streaming-data-into-bigquery#dataconsistency).\n\n### Use case\n\nConsider the following table schema:\n\n[![BigQuery table schema](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-5.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-5.webp)\n\nWhen sending an `Insert Product` event to BigQuery, you can use the `productId` field to uniquely identify the product. Upon setting `productId` as the `insertId`, BigQuery uses it to deduplicate the data.\n\n## Dynamically configuring `insertId`\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n\nTo dynamically configure `insertId` via the event payload, make sure that `insertId` is the column name present in your schema (or in the `properties` object in the event payload) used to uniquely identify an event.\n\nConsider the following schema:\n\n[![BigQuery table schema](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-5.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-5.webp)\n\nSuppose you have a dynamic configuration like `{{ message.uniqueId || \"productId\" }}` for the above schema. There are three cases to consider here:\n\n### Case 1: Unique ID is sent as a value which is not a key in the event properties\n\nConsider the following payload:\n\n```\n{\n  \"properties\": {\n    \"productId\": 212,\n    \"productName\": \"my product\",\n    \"count\": 24\n  },\n  ...,\n  \"uniqueId\": <some_value> ,\n  ...\n}\n```\n\nIn the above case, deduplication **is not applicable** as the event properties do not contain `<some_value>` present in the payload.\n\n### Case 2: Unique ID is sent as a value which is a key in the event properties\n\nConsider the following payload:\n\n```\n{\n  \"properties\": {\n    \"productId\": 212,\n    \"productName\": \"my product\",\n    \"count\": 24\n  },\n  ...,\n  \"uniqueId\": \"productId\",\n  ...\n}\n```\n\nIn this case, deduplication **is applicable** as RudderStack sends the `productId` value (`212`) as the `insertId` to Google.\n\n### Case 3: Unique ID is not sent in the event payload\n\nConsider the following payload:\n\n```\n{\n  \"properties\": {\n    \"productId\": 212,\n    \"productName\": \"my product\",\n    \"count\": 24\n  },\n  ...\n}\n```\n\nIn this case, deduplication **is applicable** as RudderStack sends the `productId` value (`212`) as the `insertId` to Google.\n\nIf you use the dynamic destination configuration for `insertId` by passing a random value (e.g. `1234`) in the above payload, deduplication will **not be applicable** as the `properties` object does not contain the value `1234`.\n\n## Creating a service account\n\nTo create a service account in your [Google Cloud Console](https://console.cloud.google.com/), follow these steps:\n\n1.  In the left sidebar, go to **APIs & Services** > **Credentials**.\n2.  Then, click **CREATE CREDENTIALS** > **Service account**:\n\n[![Service account under Create Credentials](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-service-account-1.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-service-account-1.webp)\n\n3.  Enter the service account details and click **CREATE AND CONTINUE**.\n4.  In the **Select a role** field, search and select the **BigQuery Data Editor** role and click **CONTINUE**.\n\n[![BigQuery User role](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-service-account-4.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-service-account-4.webp)\n\n5.  Click **DONE** to finish the setup.\n6.  Next, you need the service account credentials JSON required for RudderStack to send the data to BigQuery. To obtain this JSON, go to your service account.\n\n[![Service account](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-service-account-2.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-service-account-2.webp)\n\n7.  Then, go to **KEYS** > **ADD KEY** > **Create new key**.\n8.  Select the **Key type** as **JSON** and click **CREATE**.\n\n[![Service account type](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-service-account-3.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/bqstream-service-account-3.webp)\n\nYour JSON key will be automatically downloaded. Copy and paste the contents of this JSON key in the **Credentials** field while [configuring BigQuery Stream as a destination](#connection-settings) in RudderStack.\n\n## Troubleshooting\n\nFor the different error messages you might get when sending your event data to BigQuery Stream and their troubleshooting steps, refer to the [BigQuery documentation](https://cloud.google.com/bigquery/docs/error-messages).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "BigQuery Stream | RudderStack Docs",
  "description": "Send your event data from RudderStack to BigQuery via Google's streaming API.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/amazon-kinesis/",
  "markdown": "# Amazon Kinesis | RudderStack Docs\n\nSend your event data from RudderStack to Amazon Kinesis.\n\n* * *\n\n*     3 minute read  \n    \n\n[Amazon Kinesis](https://aws.amazon.com/kinesis/) enables you to ingest, buffer and process streaming data in real-time. It can handle any amount of streaming data and process data from hundreds of thousands of sources with very low latencies along with the flexibility to choose the tools that best suit the requirements of your application.\n\nRudderStack supports Amazon Kinesis as a destination where you can seamlessly send your event data.\n\n## Getting started\n\nRudderStack supports sending event data to Kinesis via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | \\-  | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the source platform supports sending events to Kinesis, follow these steps:\n\n1.  From your RudderStack dashboard, add the source. Then, from the list of destinations, select **AWS Kinesis**.\n2.  Assign a name to your destination and click **Continue**.\n\n### Connection settings\n\nTo successfully set up Kinesis as a destination, you need to configure the following settings:\n\n*   **Region**: Enter the AWS Region in which you have created the Kinesis stream.\n*   **Stream name**: Specify the name of your Kinesis stream.\n*   **Role-based Authentication**: Enable this setting to use the RudderStack IAM role for authentication. For more information on creating an AWS IAM role for RudderStack, refer to [this guide](https://www.rudderstack.com/docs/destinations/aws-iam-role-for-rudderstack/#creating-a-rudderstack-iam-role).\n    *   **IAM Role ARN**: Enter the ARN of the IAM role.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> It is highly recommended to enable this setting as the access keys-based authentication method is now deprecated.\n\n*   If **Role-based Authentication** is disabled, you need to enter the **AWS Access Key ID** and **AWS Secret Access Key** to authorize RudderStack to write to your Kinesis stream.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In both the role-based and access key-based authentication methods, you need to set a policy specifying the required permissions for RudderStack to write to your Kinesis stream. Refer to the [Policy permissions](#policy-permissions) section below for more information.\n\n*   **Use MessageId as Partition Key**: By default, RudderStack uses `userId` ( or `anonymousId`, if `userId` is not present in the payload) as the partition key. You can enable this setting to set your event’s `messageId` as the partition key for your Kinesis stream. This enables your data to be more evenly distributed across the shards in the stream.\n\n## Policy permissions\n\nTo authorize RudderStack to write to your stream, you must create an IAM policy that provides the necessary permissions to write to your data stream. Refer to [Controlling Access to Amazon Kinesis Data Streams Resources Using IAM](https://docs.aws.amazon.com/streams/latest/dev/controlling-access.html) for the applicable policies.\n\nA sample permissions policy is shown below:\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\"kinesis:PutRecord\"],\n      \"Resource\": [\"arn:aws:kinesis:{region}:{account-id}:stream/{stream-name}\"]\n    }\n  ]\n}\n```\n\n## FAQ\n\n#### How do I verify if the events are published to my Kinesis stream?\n\nTo verify that RudderStack has successfully sent the events to your configured Kinesis stream, you can check the **Live Events** tab of your source.\n\nTo verify if the events are successfully delivered or check for any delivery failures, go to the **Live Events** tab of your configured destination.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Amazon Kinesis | RudderStack Docs",
  "description": "Send your event data from RudderStack to Amazon Kinesis.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/amazon-kinesis-firehose/",
  "markdown": "# Amazon Kinesis Firehose | RudderStack Docs\n\nSend your event data from RudderStack to Kinesis Firehose.\n\n* * *\n\n*     4 minute read  \n    \n\n[Amazon Kinesis Firehose](https://aws.amazon.com/kinesis/data-firehose/) gives you an easy and reliable way to load your streaming data into data lakes, data stores, and a host of other analytics tools. It is a fully-managed service that can be scaled automatically to match the load and throughput of your data, without requiring any additional administration.\n\nRudderStack supports Amazon Kinesis Firehose as a destination where you can seamlessly send your event data.\n\n## Getting started\n\nRudderStack supports sending event data to Kinesis Firehose via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | \\-  | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the source platform supports sending events to Kinesis Firehose, follow these steps:\n\n1.  From your RudderStack dashboard, add the source. Then, from the list of destinations, select **Amazon Kinesis Firehose**.\n2.  Assign a name to your destination and click **Continue**.\n\n### Connection settings\n\nTo successfully set up Kinesis Firehose as a destination, you need to configure the following settings:\n\n*   **AWS Region**: Enter the AWS region in which you have created the Kinesis Firehose stream. This is a required field.\n*   **Role-based Authentication**: Enable this setting to use the RudderStack IAM role for authentication. For more information on creating an AWS IAM role for RudderStack, refer to [this guide](https://www.rudderstack.com/docs/destinations/aws-iam-role-for-rudderstack/#creating-a-rudderstack-iam-role).\n    *   **IAM Role ARN**: Enter the ARN of the IAM role.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> It is highly recommended to enable this setting as the access keys-based authentication method is now deprecated.\n\n*   If **Role-based Authentication** is disabled, you need to enter the **AWS Access Key ID** and **AWS Secret Access Key** to authorize RudderStack in order to write to the configured stream.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In both the role-based and access key-based authentication methods, you need to set a policy specifying the required permissions for RudderStack to write to your Kinesis Firehose stream. Refer to the [Policy permissions](#policy-permissions) section below for more information.\n\n*   **Mapping event to delivery streams**: Use this setting to map the RudderStack **Event Name** to a Kinesis Firehose **Delivery Stream**.\n\n## Sending events to Kinesis Firehose\n\nRudderStack supports sending the `identify`, `page`, and `track` events to specific Kinesis Firehose streams by configuring them in the dashboard.\n\nYou can also send an event `type` as `page`, `identify`, or `track`. For the `track` events, you can specify the event name based on the event name in the payload. For example:\n\n*   If the event name is `page`, RudderStack sends all events with the `type` set to `page`.\n*   If event name is `Product Added` , RudderStack sends all track events with the `event` as `Product Added`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To send all events to a particular stream irrespective of the type or name, you can use `*` as the event name in the dashboard settings.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that the field **Delivery Stream Name** is case sensitive and has to be specified exactly as named in AWS. On the other hand, the **Event Name** field is not case sensitive, and thus RudderStack does not differentiate between `Page` or `page` before sending it to the Firehose stream.\n\n## Policy permissions\n\nTo use the Firehose destination with RudderStack correctly, you must have a Firehose stream created in AWS. For more information on creating a Kinesis Firehose data delivery stream, refer to this [AWS documentation](http://docs.aws.amazon.com/firehose/latest/dev/basic-create.html).\n\nYou also need to create an IAM role and attach the policy containing the necessary permissions (`PutRecord`) for RudderStack to write to the stream.\n\n*   To create an IAM role, follow the instructions on [Creating an IAM role](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user.html#roles-creatingrole-user-console).\n*   For more information on creating an IAM policy, refer to this [AWS documentation](http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_create.html).\n\nA sample permissions policy that allows a user to send event data into Kinesis Firehose is shown below:\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"firehose:PutRecord\"\n      ],\n      \"Resource\": [\n        \"arn:aws:firehose:{region}:{account-id}:stream/{stream-name}\"\n      ]\n    }\n  ]\n}\n```\n\n## FAQ\n\n#### How does event mapping work with the delivery stream?\n\n*   If there is no delivery stream set for an event in the dashboard settings, RudderStack will not send the event to the Firehose stream.\n*   If an event is set with a delivery stream, RudderStack sends the payload to the configured delivery stream.\n*   If you have set the event `type`, **Event Name**, and `*` for mapping purposes, RudderStack gives the topmost priority to the event name, followed by `type`, and then `*`. For example, if the type of event is `track` and **Event Name** is `Product Added`, RudderStack does the mapping as shown:\n\n[![](https://www.rudderstack.com/docs/images/screenshot-2020-07-14-at-10.37.02-pm.webp)](https://www.rudderstack.com/docs/images/screenshot-2020-07-14-at-10.37.02-pm.webp)\n\nThen all events go to the stream mapped with `Product Added`.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Amazon Kinesis Firehose | RudderStack Docs",
  "description": "Send your event data from RudderStack to Kinesis Firehose.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/clicksend/setup-guide/",
  "markdown": "# Setup Guide | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Setup Guide | RudderStack Docs",
  "description": "Set up and configure ClickSend as a destination in RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/clicksend/cloud-mode/",
  "markdown": "# ClickSend Cloud Mode Integration | RudderStack Docs\n\nSend events to ClickSend using RudderStack cloud mode.\n\n* * *\n\n*     3 minute read  \n    \n\nAfter you have successfully instrumented ClickSend as a destination in RudderStack, follow this guide to correctly send your events to ClickSend in [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode).\n\nFind the open source transformer code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/main/src/cdk/v2/destinations/clicksend).\n\n## Identify\n\nYou can use the [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call to [create a new contact or update an existing one](https://developers.clicksend.com/docs/rest/v3/#create-new-contact) in ClickSend.\n\nA sample `identify` call is shown:\n\n```\nrudderstack.identify(\"userId123\", {\n  \"email\": \"alex@example.com\",\n  \"firstName\": \"Alex\",\n  \"lastName\": \"Keener\",\n  \"phone\": \"1234567890\",\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"USA\",\n    \"pinCode\": \"123456\"\n  },\n  \"integrations\": {\n    \"All\": true\n  },\n  \"externalId\": [{\n    \"type\": \"CLICKSEND_CONTACT_LIST_ID\",\n    \"id\": \"<dummy-id>\"\n  }]\n}\n});\n```\n\n### Supported mappings\n\nRudderStack maps the following `identify` fields to the corresponding ClickSend properties:\n\n| RudderStack event/property | ClickSend event/property | Note |\n| --- | --- | --- |\n| `message.traits.phone`  <br>`context.traits.phone`  <br>Required, if `fax_number` and `email` are absent. | `phone_number` | Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. |\n| `traits.email`  <br>`context.traits.email`  <br>Required, if `fax_number` and `phone_number` are absent. | `email` | \\-  |\n| `traits.fax_number`  <br>`context.traits.fax_number`  <br>Required, if `email` and `phone_number` are absent. | `fax_number` | \\-  |\n| `CLICKSEND_CONTACT_LIST_ID` from `externalId` Required | Sent as a part of the API URL. | Rudderstack uses this `list_id` to create contacts in it. |\n| `traits.firstName`  <br>`context.traits.firstName` | `first_name` | \\-  |\n| `traits.address`  <br>`traits.address_line_1`  <br>`context.traits.address`  <br>`context.traits.address_line_1` | `address_line_1` | \\-  |\n| `traits.address_line_2`  <br>`context.traits.address_line_2` | `address_line_2` | \\-  |\n| `traits.address.city`  <br>`context.traits.address.city` | `address_city` | \\-  |\n| `traits.address.state`  <br>`context.traits.address.state` | `address_state` | \\-  |\n| `traits.address.address_postal_code`  <br>`context.traits.address.address_postal_code` | `address_postal_code` | \\-  |\n| `traits.country`  <br>`context.traits.country` | `address_country` | \\-  |\n| `traits.organization_name`  <br>`context.traits.organization_name` | `organization_name` | \\-  |\n| `traits.lastName`  <br>`context.traits.lastName` | `last_name` | \\-  |\n| `CLICKSEND_CONTACT_ID` from `externalId` | `contact_id` | Use this property to send the `contact_id` if you want to update an existing contact.  <br>If absent, Rudderstack creates a new contact which can lead to the duplication. |\n\n## Track\n\nYou can use the [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call to send text messages to ClickSend.\n\nA sample `track` call to trigger an SMS campaign for the entire list:\n\n```\nrudderanalytics.track(\n  \"event1\", {\n    \"name\": \"new campaign\",\n    \"body\": \"message\",\n    \"from\": \"alex@example.com\",\n    \"from_email\": \"keener@sample.com\"\n  }, {\n    externalId: [{\n      type: 'CLICKSEND_CONTACT_LIST_ID',\n      id: '12345',\n    }, ],\n  }\n  () => {\n    console.log(\"track call\");\n  }\n);\n```\n\nA sample `track` call to send SMS to a single contact:\n\n```\nrudderanalytics.track(\"event1\", {\n    \"name\": \"new campaign\",\n    \"body\": \"message\",\n    \"from\": \"alex@example.com\",\n    \"from_email\": \"keener@sample.com\",\n    \"custom_string\": \"test string\"\n  },\n  () => {\n    console.log(\"track call\");\n  }\n);\n```\n\n### Supported mappings\n\nRudderStack maps the following `track` fields to the corresponding ClickSend properties:\n\n| RudderStack property | ClickSend property | Note |\n| --- | --- | --- |\n| `externalId.clicksend.From`  <br>`config.defaultSenderEmail`  <br>Required | `from` | Sender ID. |\n| `context.traits.phone`  <br>Required | `to` | Recipient’s phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. |\n| `properties.body`  <br>Required | `body` | Your message. |\n| `properties.channel`  <br>`config.channel` | `channel` | Method of sending the text message. For example, wordpress, php, c#, etc. |\n| `properties.schedule`  <br>`config.schedule` | `schedule` | Schedule time in [UNIX format](http://help.clicksend.com/what-is-a-unix-timestamp). Set it as `0` for immediate delivery. |\n| `properties.custom_string` | `custom_string` | Your reference which is passed back with all the replies and delivery reports. |\n| `externalId.clicksend.list_id` | `list_id` | List ID if sending to a whole list. You can use this instead of `context.traits.phone`.<br><br>**If using this, ensure that a particular list does not exceed 20000 contacts.** |\n| `context.traits.country` | `country` | ISO alpha-2 character country code. For example, `US` - It is used to format the recipient number if it’s not in international format. |\n| `properties.from_email` | `from_email` | Email address to send the reply. If omitted, the reply is emailed back to the user who sent the outgoing SMS. |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "ClickSend Cloud Mode Integration | RudderStack Docs",
  "description": "Send events to ClickSend using RudderStack cloud mode.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/bingads/",
  "markdown": "# Bing Ads destination | RudderStack Docs\n\nSend your event data from RudderStack to Bing Ads.\n\n* * *\n\n*     3 minute read  \n    \n\n[Bing Ads](https://ads.microsoft.com/) is an advertising platform that lets you track and monitor ad campaigns, clicks, CTRs, etc. You can also implement efficient ad retargeting for your customers.\n\nFind the open source JavaScript SDK code for this destination in our [Github repository](https://github.com/rudderlabs/rudder-sdk-js/tree/production/src/integrations/BingAds).\n\n## Getting started\n\nRudderStack supports sending event data to Bing Ads via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| Connection Mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| Device mode | **Supported** | \\-  | \\-  |\n| Cloud mode | \\-  | \\-  | \\-  |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack loads the Bing Ads native SDK from the `https://bat.bing.com/` domain in the web device mode integration. Based on your website’s content security policy, you might need to [allowlist this domain](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#allowlist-destination-domain) to load the Bing Ads SDK successfully.\n\nOnce you have confirmed that the platform supports sending events to Bing Ads, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **Bing Ads**.\n2.  Assign a name to the destination and click **Continue**.\n\n## Connection settings\n\nTo successfully configure Bing Ads as a destination, you will need to configure the following settings:\n\n*   **Tag ID**: Enter the UET tag ID associated with your Bing Ads account. You can create a UET tag by logging in to your [Bing Ads account](https://ads.microsoft.com/) and navigating to **Tools** > **Conversion Tracking** > **UET tag** > **Create UET tag**. For detailed instructions, see [Bing Ads documentation](https://about.ads.microsoft.com/en-us/resources/training/universal-event-tracking).\n*   **Client-side Events Filtering**: This setting lets you specify which events should be blocked or allowed to flow through to Bing Ads. For more information on this setting, see [Client-side Events Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/).\n*   **OneTrust Cookie Categories**: This setting lets you associate [OneTrust](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/javascript/) cookie consent groups to Bing Ads.\n*   **Use device mode to send events**: As Bing Ads is a [web device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode)\\-only destination, this setting is enabled by default.\n\n## Page\n\nYou can make a [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call to Bing Ads to record a page view. The web SDK will send this data to Bing Ads with the event type as `pageLoad`.\n\nThe following snippet highlights a sample `page` call:\n\n```\nrudderanalytics.page(\"Cart\", \"Cart Viewed\", {\n  path: \"/cart\",\n  referrer: \"test.com\",\n  search: \"term\",\n  title: \"test_item\",\n  url: \"http://test.in\",\n})\n```\n\n## Track\n\nYou can use the [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call to capture user events and their associated properties.\n\n### Supported mappings\n\nThe following table details the mappings between RudderStack and Bing Ads properties:\n\n| RudderStack property | Bing Ads property | Description |\n| --- | --- | --- |\n| `properties.event_action`  <br>`message.type` | `event` | Event action. |\n| `properties.ecomm_pagetype`  <br>`properties.pagetype` | `ecomm_pagetype` | Viewed page type. |\n| `properties.products.$.product_id`  <br>`properties.products.$.sku`<br><br>If `products` array is absent, then:<br><br>`properties.product_id`  <br>`properties.sku` | `ecomm_prodid` | Product identifier. |\n| `properties.query` | `search_term`  <br>`ecomm_query` | Search query. |\n| `properties.ecomm_category`  <br>`properties.category_id` | `ecomm_category` | Category ID for the category browse page. |\n| `properties.total`  <br>`properties.value` | `ecomm_totalvalue` | Total value of all items in the transaction. |\n| `properties.transaction_id`  <br>`properties.order_id`  <br>`properties.checkout_id` | `transaction_id` | Unique ID for the transaction. |\n| `properties.products.$.product_id`  <br>`properties.products.$.sku`  <br>`properties.products.$.quantity`  <br>`properties.products.$.price`<br><br>If `products` array is absent, then:<br><br>`properties.product_id`  <br>`properties.sku`  <br>`properties.quantity`  <br>`properties.price` | `items`<br><br>(id, quantity, price) | Product details like product ID, quantity, price. |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   RudderStack prioritizes `properties.total` over `properties.revenue` followed by `properties.value`, before mapping it to the Bing Ads’ `revenue` property.\n> *   Bing Ads accepts the following values for `properties.ecomm_pagetype`/`properties.pagetype` (mapped to `ecomm_pagetype`).\n>     *   `other` (default value)\n>     *   `home`\n>     *   `category`\n>     *   `searchresults`\n>     *   `product`\n>     *   `cart`\n>     *   `purchase`\n> *   Bing Ads allows a maximum of 50 characters for the `product_id`/`sku` properties (mapped to `ecomm_prodid`).\n> *   You can override the default RudderStack mappings with the Bing Ads UET parameters by passing them directly in the event payload. For example, passing `ecomm_totalvalue` in the payload overrides the RudderStack properties `properties.total`/`properties.value` (mapped to `ecomm_totalvalue`). However, note that this functionality is **not applicable** for the `items` parameter.\n> \n> For more information on the UET parameters, see the [Bing Ads documentation](https://help.ads.microsoft.com/#apex/ads/en/60123/-1).\n\nA sample `track` call looks like the following:\n\n```\nrudderanalytics.track(\"Item Purchased\", {\n  category: \"MyCategory\",\n  currency: \"INR\",\n  total: 5,\n  revenue: 125,\n  value: 100,\n})\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Bing Ads destination | RudderStack Docs",
  "description": "Send your event data from RudderStack to Bing Ads.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/bloomreach/",
  "markdown": "# Bloomreach Destination | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Bloomreach Destination | RudderStack Docs",
  "description": "Send your event data from RudderStack to Bloomreach.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/amazon-s3/",
  "markdown": "# Amazon S3 destination | RudderStack Docs\n\nSend your event data from RudderStack to Amazon S3.\n\n* * *\n\n*     8 minute read  \n    \n\n[Amazon S3](https://aws.amazon.com/s3/) (Simple Storage Service) is a cloud-based object storage service that lets customers and businesses store their data securely and at scale.\n\nFind the open source transformer code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/master/src/v0/destinations/s3).\n\n## Prerequisites\n\nBefore you set up S3 as a destination in RudderStack, make sure to [set up your S3 bucket](#s3-bucket-setup) with the required [permissions](#permissions).\n\n## Setup\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **Amazon S3**.\n2.  Assign a name to the destination and click **Continue**.\n\n### Connection settings\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> If you have already configured the AWS credentials in your RudderStack setup via the [environment credentials](https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials) or by following these [steps](#option-3-allow-rudderstack-to-write-into-bucket), specifying only **S3 Bucket Name** and **Prefix** (optional but recommended) is sufficient to set up your S3 destination.\n\n*   **S3 Bucket Name**: Enter your S3 bucket name.\n*   **Prefix**: If specified, RudderStack creates a folder in the S3 bucket with this name and pushes all data within that folder. For example, `s3://<bucket_name>/<prefix>/`.\n*   **Role-based Authentication**: This setting is enabled by default and lets you use the [RudderStack IAM role](https://www.rudderstack.com/docs/destinations/aws-iam-role-for-rudderstack/) for authentication.\n    *   **IAM Role ARN**: Enter the ARN of the IAM role.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Using **Role-based Authentication** is highly recommended as the access keys-based authentication method is now deprecated and will be discontinued soon.\n\nIf **Role-based Authentication** is disabled, enter the **AWS Access Key ID** and **AWS Secret Access Key** to authorize RudderStack to write to your S3 bucket. For more information on obtaining these credentials, see the [Permissions](#option-2-create-iam-user-and-provide-credentials) section.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> *   In both the role-based and access key-based authentication methods, you need to set a policy specifying the required [permissions](#permissions) for RudderStack to write to your S3 bucket.\n> *   If you’re using your S3 bucket as an intermediary object storage for sending events to a [warehouse destination](https://www.rudderstack.com/docs/destinations/warehouse-destinations/), then see the [S3 permissions for warehouse destinations](#s3-permissions-for-warehouse-destinations).\n\n*   **Enable Server Side Encryption**: When you enable this setting, RudderStack adds a header `x-amz-server-side-encryption` with the value `AES256` to the `PutObject` request when sending the data to the S3 bucket. See [Encryption with S3 managed keys](#s3-managed-keys) for more information.\n\n## S3 bucket setup\n\n1.  Go to your [S3 Management console](https://s3.console.aws.amazon.com/s3/).\n2.  [Create a new bucket](https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-bucket.html). Alternatively, you can choose an existing bucket.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> It is recommended to create a new bucket for storing events coming from RudderStack.\n\n### Permissions\n\nTo send events to S3 successfully, you need to give RudderStack the necessary permissions to write to your bucket. You can choose any of the following approaches based on your company’s security policies and setup preferences:\n\n#### Option 1: Use RudderStack IAM role\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> It is highly recommended to use this option for setting up the required S3 bucket permissions.\n\nUse this approach if you are going to set up the S3 destination in RudderStack using **Role Based Authentication**.\n\n[![Role based authentication](https://www.rudderstack.com/docs/images/event-stream-destinations/role-based-authentication.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/role-based-authentication.webp)\n\n1.  [Create a RudderStack IAM role](https://www.rudderstack.com/docs/destinations/aws-iam-role-for-rudderstack/).\n2.  Use the following S3 permissions policy for creating the role:\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:PutObject\",\n      \"Resource\": \"arn:aws:s3:::<S3_BUCKET_NAME>/*\"\n    }\n  ]\n}\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Replace `<S3_BUCKET_NAME>` with the actual bucket name.\n\n3.  After creating the role, note and specify the **IAM Role ARN** to set up your S3 destination.\n\n#### Option 2: Create IAM user and provide credentials\n\n> ![danger](https://www.rudderstack.com/docs/images/danger.svg)\n> \n> Note that:\n> \n> *   Using [**Role-based Authentication (Option 1)**](#option-1-use-rudderstack-iam-role) is highly recommended as this method is now deprecated and will be discontinued soon.\n> *   AWS **does not** recommend access key credentials-based authentication.\n\nUse this approach to set up the S3 destination in RudderStack using **Access Key Based Authentication**.\n\n[![Access key based authentication](https://www.rudderstack.com/docs/images/event-stream-destinations/access-key-based-authentication.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/access-key-based-authentication.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If the AWS credentials are already configured on your instance (see [Option 4](#option-4-self-hosted-rudderstack)) where the RudderStack server is set up, you do not need to specify these credentials.\n\n1.  Log in to your [Amazon AWS IAM Console](https://console.aws.amazon.com/iam/).\n2.  [Create an IAM user](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html). Choose a policy that has **write** access to your bucket. Alternatively, you can [create a new policy](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_create-console.html#access_policies_create-start) with the following permissions and attach it to the IAM user:\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:PutObject\",\n      \"Resource\": \"arn:aws:s3:::<S3_BUCKET_NAME>/*\"\n    }\n  ]\n}\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Replace `<S3_BUCKET_NAME>` with the actual bucket name.\n\n3.  Return to the IAM dashboard and go to **Users** under **Access management**. Then, click on the newly-created user.\n4.  Go to the **Security credentials** tab and scroll down to **Access keys**.\n5.  Click **Create access key**, select the use case as per your requirement, and click **Next**.\n6.  If required, set the **Description tag value**, and click **Create access key**.\n7.  Note and secure the **Access key** and **Secret access key**. Use these credentials to set up your S3 destination in RudderStack.\n\n#### Option 3: Allow RudderStack to write into bucket\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> *   This option is applicable only if you are using [RudderStack Cloud](https://app.rudderstack.com/) to set up your connection.\n> *   Use this approach **only if** you wish to allow RudderStack to write into your S3 bucket directly.\n> *   In this case, leave the role based authentication (**IAM Role ARN**) or access key based authentication (**AWS Access Key ID** and **AWS Secret Access Key**) fields blank while setting up your S3 destination in RudderStack.\n\nTo allow the RudderStack to write into your S3 bucket directly, add the following JSON in your bucket policy:\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::422074288268:user/s3-copy\"\n      },\n      \"Action\": [\"s3:PutObject\", \"s3:PutObjectAcl\"],\n      \"Resource\": [\"arn:aws:s3:::<S3_BUCKET_NAME>/*\"]\n    }\n  ]\n}\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Replace `<S3_BUCKET_NAME>` with the actual bucket name.\n\nBy adding the above policy, the RudderStack user `arn:aws:iam::422074288268:user/s3-copy` will get the necessary permission to write into your bucket.\n\n#### Option 4: Self-hosted RudderStack\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Use this approach **only if** you are hosting RudderStack in your own instance and don’t want to follow the above options.\n\n1.  [Create a new IAM user](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html) and attach the below policy:\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"*\",\n      \"Resource\": \"arn:aws:s3:::*\"\n    }\n  ]\n}\n```\n\n2.  Add the following policy to your bucket. Replace `ACCOUNT_ID`, `USER_ARN`, and `<S3_BUCKET_NAME>` with the AWS account ID, user ARN, and the S3 bucket name.\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::ACCOUNT_ID:user/USER_ARN\"\n      },\n      \"Action\": [\"s3:PutObject\", \"s3:PutObjectAcl\"],\n      \"Resource\": [\"arn:aws:s3:::<S3_BUCKET_NAME>/*\"]\n    }\n  ]\n}\n```\n\n3.  Return to the IAM dashboard and go to **Users** under **Access management**. Then, click on the newly-created user.\n4.  Go to the **Security credentials** tab and scroll down to **Access keys**.\n5.  Click **Create access key**, select the use case as per your requirement, and click **Next**.\n6.  If required, set the **Description tag value**, and click **Create access key**.\n7.  Note and secure the **Access key** and **Secret access key**.\n8.  Add the above credentials to your RudderStack setup environment:\n\n```\nRUDDER_AWS_S3_COPY_USER_ACCESS_KEY_ID=<access_key_id>\nRUDDER_AWS_S3_COPY_USER_ACCESS_KEY=<secret_access_key>\n```\n\n### S3 permissions for warehouse destinations\n\nIf you’re using your S3 bucket as an **intermediary object storage** for a [warehouse destination](https://www.rudderstack.com/docs/destinations/warehouse-destinations/), then you need to attach the following permissions policy to it:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that this policy is applicable **only** for [Option 1](#option-1-use-rudderstack-iam-role) and [Option 2](#option-2-create-iam-user-and-provide-credentials) in the [Permissions](#permissions) section.\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n    \"Effect\": \"Allow\",\n    \"Action\": [\n      \"s3:GetObject\",\n      \"s3:PutObject\",\n      \"s3:PutObjectAcl\",\n      \"s3:ListBucket\"\n    ],\n    \"Resource\": \"arn:aws:s3:::<S3_BUCKET_NAME>/*\"\n  }]\n}\n```\n\nTo allow RudderStack to write into your bucket directly ([Option 3](#option-3-allow-rudderstack-to-write-into-bucket)), use the following policy:\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n    \"Effect\": \"Allow\",\n    \"Principal\": {\n      \"AWS\": \"arn:aws:iam::422074288268:user/s3-copy\"\n    },\n    \"Action\": [\n      \"s3:GetObject\",\n      \"s3:PutObject\",\n      \"s3:PutObjectAcl\",\n      \"s3:ListBucket\"\n    ],\n    \"Resource\": [\"arn:aws:s3:::<S3_BUCKET_NAME>/*\"]\n  }]\n}\n```\n\nFor self-hosted RudderStack [(Option 4)](#option-4-self-hosted-rudderstack), use the following bucket policy in Step 2:\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n    \"Effect\": \"Allow\",\n    \"Principal\": {\n      \"AWS\": \"arn:aws:iam::ACCOUNT_ID:user/USER_ARN\"\n    },\n    \"Action\": [\n      \"s3:GetObject\",\n      \"s3:PutObject\",\n      \"s3:PutObjectAcl\",\n      \"s3:ListBucket\"\n    ],\n    \"Resource\": [\"arn:aws:s3:::<S3_BUCKET_NAME>/*\"]\n  }]\n}\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Replace `<S3_BUCKET_NAME>` with the actual bucket name.\n\n## Encryption\n\nAmazon S3 provides encryption at rest. The objects get encrypted while saving them to the bucket and are decrypted before downloading from S3.\n\nS3 lets you [set the default encryption behavior for a bucket](#set-default-encryption). It encrypts the objects using server-side encryption with either **Amazon S3 managed keys (SSE-S3)** or **AWS KMS-managed keys (SSE-KMS)**.\n\n#### Set default encryption\n\n1.  Log in to your [S3 Management console](https://s3.console.aws.amazon.com/s3/) and select your bucket.\n2.  Go to the **Properties** tab and scroll down to **Default encryption**. Then, click **Edit**.\n3.  Under **Encryption key type**, choose from **Amazon S3 managed keys (SSE-S3)** or **AWS KMS-managed keys (SSE-KMS)**:\n\n[![S3 default encryption](https://www.rudderstack.com/docs/images/event-stream-destinations/s3-default-encryption-new.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/s3-default-encryption-new.webp)\n\nThe following settings are applicable if you choose **AWS KMS-managed keys (SSE-KMS)** as the encryption key type:\n\n[![KMS encryption configuration](https://www.rudderstack.com/docs/images/event-stream-destinations/s3-default-encryption-kms.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/s3-default-encryption-kms.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can choose an existing AWS KMS key, enter the ARN of an AWS KMS key, or [create a new KMS key](#create-a-new-customer-managed-key).\n\n4.  Under **Bucket Key**, choose **Enable** and click **Save changes**.\n\nFor more information on setting the default encryption behavior for a bucket, see the [S3 documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/default-bucket-encryption.html).\n\n### AWS KMS keys\n\nWhen the [default encryption](#set-default-encryption) is set to **AWS KMS-managed keys (SSE-KMS)**, S3 encrypts the objects using the customer managed keys (CMK) when they are uploaded to the bucket.\n\n#### Create a new customer managed key\n\n1.  Log in to the [AWS Key Management Service (KMS) console](https://aws.amazon.com/kms/).\n\n[![KMS console login](https://www.rudderstack.com/docs/images/event-stream-destinations/aws-kms-1.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/aws-kms-1.webp)\n\n2.  From the left sidebar, go to **Customer managed keys** and click **Create key**.\n\n[![Create new CMK](https://www.rudderstack.com/docs/images/event-stream-destinations/aws-kms-2.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/aws-kms-2.webp)\n\n3.  Under **Key type**, choose **Symmetric**. Under **Key usage**, select **Encrypt and decrypt**.\n\n[![Key type and usage](https://www.rudderstack.com/docs/images/event-stream-destinations/aws-kms-3.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/aws-kms-3.webp)\n\n4.  Set an **Alias** for the key. You can also add a description or tags for the key as required.\n\n[![Key alias and description](https://www.rudderstack.com/docs/images/event-stream-destinations/aws-kms-4.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/aws-kms-4.webp)\n\n5.  Choose the IAM user or role who can administer and use this key.\n\n[![Key adminstration and usage](https://www.rudderstack.com/docs/images/event-stream-destinations/aws-kms-5.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/aws-kms-5.webp)\n\n6.  Review the configuration and click **Finish** to create the customer managed key.\n7.  Finally, [set the default encryption](#set-default-encryption) for your S3 bucket as **AWS KMS-managed keys (SSE-KMS)** and select this customer managed key.\n\n### S3 managed keys\n\nWhen you enable the **Enable Server Side Encryption** dashboard setting while configuring your S3 destination, RudderStack adds a `x-amz-server-side-encryption` header with the value `AES256` to all the `PutObject` requests. S3 then encrypts the object with the AES256 encryption algorithm. For more information, see [S3 encryption with S3 managed keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/SSEUsingRESTAPI.html).\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you [set the default encryption](#set-default-encryption) key type to **Amazon S3 managed keys (SSE-S3)**, then S3 encrypts the objects that are uploaded in the bucket with AES256 encryption - irrespective of whether the **Enable Server Side Encryption** is enabled in the RudderStack dashboard or the presence of the `x-amz-server-side-encryption` header in the `PutObject` requests.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Amazon S3 destination | RudderStack Docs",
  "description": "Send your event data from RudderStack to Amazon S3.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/amplitude/",
  "markdown": "# Amplitude Destination | RudderStack Docs\n\nSend data from RudderStack to Amplitude.\n\n* * *\n\n*     26 minute read  \n    \n\n[Amplitude](https://amplitude.com/) is a comprehensive product analytics service for web and mobile platforms. 12,000+ companies use Amplitude to get marketing insights that drive product strategy, conversion, and customer retention.\n\nRudderStack provides native libraries for Amplitude integrations for the following languages:\n\n*   [Android](https://github.com/rudderlabs/rudder-integration-amplitude-android)\n*   [iOS: Obj-C](https://github.com/rudderlabs/rudder-integration-amplitude-ios)\n*   [iOS: Swift](https://github.com/rudderlabs/rudder-integration-amplitude-swift)\n\n## Getting started\n\nThe Amplitude destination supports `alias`, `group`, `identify`, `page`, `screen`, and `track` calls.\n\nBefore configuring Amplitude as a destination in RudderStack, confirm that your source is supported by Amplitude by referring to the table below. See [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/) for details.\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | **Supported** | **Supported** | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\n## Connection settings\n\n1.  If you haven’t already, first create a source in your [RudderStack dashboard](https://app.rudderstack.com/). Your source will be where you intend on sending data from. See [Sources](https://www.rudderstack.com/docs/dashboard-guides/sources/) to learn more.\n2.  Connect your source to Amplitude. You can do this directly from your source by navigating to **Overview** > **Add Destination** > **Create a New Destination**. Or, you can create the Amplitude destination first by navigating to **Destinations** > **New Destination** in your dashboard.\n3.  Verify that your desired source is supported by Amplitude by referencing the **Connection Modes** table above.\n4.  In the **Connection Settings** modal, provide the following information:\n\n*   **Name**: Choose a name for your destination that will be easily identifiable later. Often, users like to include suffixes such as `-prod`, `-dev`, `-testing` to differentiate connection environments.\n*   **API key**: To find your API key, go to your project in Amplitude and look in the general tab.\n*   **Residency server**: Choose whether you want to connect to Amplitude’s Standard Server (US) or EU-based residency server.\n\n5.  Choose the connection mode for each of your sources. This determines how your data will be routed from your source to your destination. Learn more about cloud mode vs. device mode [here](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/). We recommend using cloud mode as you will have access to Transformations and more reliable performance (compared to device mode).\n6.  Press **Continue** to create your connection.\n7.  Review the [Configuration settings](#configuration-settings) to ensure that you are OK with all of the default settings and/or to customize your settings further.\n8.  Once you are happy with your settings, toggle the **Enable** switch at the top of your Configurations page to begin sending events to Amplitude.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> See [RudderStack SDK settings](#rudderstack-sdk-settings) for more information on the SDK-specific settings you can configure while sending events to Amplitude.\n\n## Adding device mode integration\n\nOnce you add Amplitude as a destination in the [RudderStack dashboard](https://app.rudderstack.com/), follow these steps to add it to your project depending on your integration platform:\n\nFollow these steps to add Amplitude to your iOS project:\n\n1.  In your `Podfile`, add the `Rudder-Amplitude` extension:\n\n```\npod 'Rudder-Amplitude'\npod 'Amplitude', '~> 7.2.0'\n```\n\n2.  After adding the dependency followed by `pod install` , you can add the imports to your `AppDelegate.m` file as shown:\n\n```\n#import <rudder>\n#import \"RudderAmplitudeFactory.h\"\n// for using IDFA as device id, location listening only\n#import <amplitude>\n```\n\n3.  Also add the initialization of your `RSClient` as shown:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withFactory:[RudderAmplitudeFactory instance]];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n4.  Add the below logic just after initializing `RudderClient` in `AppDelegate.m` if you would like to send `IDFA` of iOS device as `device id` to Amplitude\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure that you enable `use IDFA as device id` under `iOS SDK settings` on dashboard.\n\n```\n// for using IDFA as device id only\n[Amplitude instance].adSupportBlock = ^{\n    return [[ASIdentifierManager sharedManager] advertisingIdentifier];\n};\n```\n\n5.  Add the below logic to track location (latitude, longitude):\n\n```\n[Amplitude instance].locationInfoBlock = ^{\n        return @{\n                @\"lat\" : @37.7,\n                @\"lng\" : @122.4\n              };\n};\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This device mode integration is supported for Amplitude v8.8.0 and above.\n\nFollow these steps to add Amplitude to your iOS project:\n\n1.  Install `RudderAmplitude` (available through [CocoaPods](https://cocoapods.org/)) by adding the following line to your `Podfile`:\n\n```\npod 'RudderAmplitude', '~> 1.0.0'\n```\n\n2.  Run the `pod install` command.\n3.  Then, import the SDK depending on your preferred platform:\n\n  \n\n4.  Next, add the imports to your `AppDelegate` file under the `didFinishLaunchingWithOptions` method:\n\n```\nlet config: RSConfig = RSConfig(writeKey: WRITE_KEY)\n            .dataPlaneURL(DATA_PLANE_URL)\n\nRSClient.sharedInstance().configure(with: config)\nRSClient.sharedInstance().addDestination(RudderAmplitudeDestination())\n```\n\n  \n\n```\nRSConfig *config = [[RSConfig alloc] initWithWriteKey:WRITE_KEY];\n[config dataPlaneURL:DATA_PLANE_URL];\n\n[[RSClient sharedInstance] configureWith:config];\n[[RSClient sharedInstance] addDestination:[[RudderAmplitudeDestination alloc] init]];\n```\n\nTo add Amplitude to your Android Project please follow these steps :\n\n1.  Open your `app/build.gradle` (Module: app) file, and add the following under the `dependencies` section :\n\n```\nimplementation 'com.rudderstack.android.sdk:core:1.+'\nimplementation 'com.rudderstack.android.integration:amplitude:1.+'\nimplementation 'com.google.code.gson:gson:2.8.6'\n\n// Amplitude\nimplementation 'com.amplitude:android-sdk:2.25.2'\nimplementation 'com.squareup.okhttp3:okhttp:4.2.2'\n\n// For using Google Advertising Id as device id\nimplementation 'com.google.android.gms:play-services-ads:18.3.0'\n```\n\n2.  Initialize the RudderStack SDK in the `onCreate()` method of the `Application` class as following:\n\n```\n// initializing Rudder SDK\nval rudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withFactory(AmplitudeIntegrationFactory.FACTORY)\n            .build()\n    )\n```\n\n3.  To send `Google Advertising Id` of the device as `device id` to the Amplitude, add the below code in the `AndroidManifest.xml` of your app under `<application>` tag:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Make sure that you enable `Use Advertising ID for Device ID` under `Android SDK settings` on the [dashboard](https://app.rudderstack.com/)\n\n```\n<meta-data android:name=\"com.google.android.gms.ads.AD_MANAGER_APP\" android:value=\"true\"></meta-data>\n```\n\nTo add Amplitude to your React Native project:\n\n1.  Add the RudderStack-Amplitude module to your app using either of the following ways:\n\n```\nnpm install @rudderstack/rudder-integration-amplitude-react-native\n```\n\nOR  \n\n```\nyarn add @rudderstack/rudder-integration-amplitude-react-native\n```\n\n2.  Import the module added above and add it to your SDK initialization code as shown:\n\n```\nimport rudderClient from \"@rudderstack/rudder-sdk-react-native\"\nimport amplitude from \"@rudderstack/rudder-integration-amplitude-react-native\"\nconst config = {\n  dataPlaneUrl: DATA_PLANE_URL,\n  trackAppLifecycleEvents: true,\n  withFactories: [amplitude],\n}\nrudderClient.setup(WRITE_KEY, config)\n```\n\nFollow the below steps to add Amplitude to your Flutter Project:\n\n1.  Add the following dependency to the `dependencies` section of your `pubspec.yaml` file.\n\n```\nrudder_integration_amplitude_flutter: ^1.0.1\n```\n\n2.  Run the below command to install the dependency added in the above step:\n\n3.  Import the `RudderIntegrationAmplitudeFlutter` in your application where you are initializing the SDK.\n\n```\nimport 'package:rudder_integration_amplitude_flutter/rudder_integration_amplitude_flutter.dart';\n```\n\n4.  Finally, change the initialization of your `RudderClient` as shown:\n\n```\nfinal RudderController rudderClient = RudderController.instance;\nRudderConfigBuilder builder = RudderConfigBuilder();\nbuilder.withFactory(RudderIntegrationAmplitudeFlutter());\nrudderClient.initialize(<write_key>, config: builder.build(), options: null);\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For iOS platform, make sure that the minimum deployment target for your application’s target is at least 10.\n\n## Configuration settings\n\nConfigure how you want your events to be sent to Amplitude directly in your RudderStack dashboard without touching any code.\n\n### Page settings\n\nThis section allows you to set how you want your [`page`](#page) calls to be sent to Amplitude.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Checking your event volume setup with Amplitude prior to configuring this section is recommended.\n\nThe following settings are only applicable when you’ve connected a source in [web device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode).\n\n| Field | Description |\n| --- | --- |\n| Track all pages | Toggling this on will send all `page` events to Amplitude as `Loaded a page`. |\n| Track categorized pages | When this setting is turned on:<br><br>*   If `useNewPageEventNameFormat` is set to true in the integration options, RudderStack sends events to Amplitude as `Viewed {category} Page`.<br>*   Otherwise, it sends the events to Amplitude as `Viewed page {category}`. |\n| Track named pages | When this setting is turned on:<br><br>*   If `useNewPageEventNameFormat` is set to true in the integration options, RudderStack sends events to Amplitude as `Viewed {name} Page`.<br>*   Otherwise, it sends the events to Amplitude as `Viewed page {name}`. |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you enable more than one of the above settings, RudderStack may send multiple events to Amplitude for a single `page` event.\n\nThe following settings are only applicable when you’ve connected a source in [mobile device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode):\n\n| Field | Description |\n| --- | --- |\n| Track all pages | If you toggle on this setting and `name` is present in your `screen` event properties, RudderStack sends the event to Amplitude as `Viewed {name} Screen`. Otherwise, it sends the event as `Loaded a Screen`. |\n| Track categorized pages | When this setting is turned on, RudderStack sends the `screen` events to Amplitude as `Viewed {category} Screen`. |\n| Track named pages | If you toggle on this setting and `name` is present in your `screen` event properties, RudderStack sends the event to Amplitude as `Viewed {name} Screen`. If `name` is absent, RudderStack will not send the event. |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you enable more than one of the above settings, RudderStack may send multiple events to Amplitude for a single `screen` event.\n\nThe following settings are only applicable when you’ve connected a source in [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode).\n\n| Field | Description |\n| --- | --- |\n| Use Custom Page Event Name | Enable this setting to set a specific event name format for your `page` calls. See [Set custom page event names](#set-custom-page-event-names) for more information. |\n| Page Event Name Format | If **Use Custom Page Event Name** is enabled, specify the event name format for your `page` calls. For example, `Viewed a {{ name }}`. |\n\n### Screen settings\n\nThis section allows you to set how you want to send your [`screen`](#screen) calls to Amplitude.\n\nThe following settings are only applicable when you’ve connected a source in [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode):\n\n| Field | Description |\n| --- | --- |\n| Use Custom Screen Event Name | Enable this setting to set a specific event name format for your `screen` calls. See [Set custom screen event names](#set-custom-screen-event-names) for more information. |\n| Screen Event Name Format | If **Use Custom Screen Event Name** is enabled, specify the event name format for your `screen` calls. For example, `Viewed a {{ name }}`. |\n\n### Identify & Group settings\n\nThis section allows you to set how you want your Group or Identify call user properties to be sent to Amplitude:\n\n| Field | Description | Note |\n| --- | --- | --- |\n| Group type trait | Specify the group type to send as `groupType` in your group calls to Amplitude. Examples of a group type could be: Org ID, Org Name, or Industry. | \\-  |\n| Group value trait | Specify the group value to send as `groupValue` in your group calls to Amplitude. This would be a specific value of the group type. For example, if you set group\\_type: “industry”, group\\_value might be “retail”. | \\-  |\n| Identify: traits to increment | Set the traits to increment on an `identify` call. These traits will then be incremented by the numerical value associated with the trait in your `identify` call. | \\-  |\n| Identify: traits to set once | Specify the traits where you want to set values only once, which prevents overriding the property value. | \\-  |\n| Identify: traits to append | Append a value or multiple values to a user property array. If the corresponding trait does not have a value set yet, it will be initialized to an empty list before the new values are appended. If the corresponding trait has an existing value and it is not a list, it will be converted into a list with the new value appended. | Supported for all connection modes except for web device mode |\n| Identify: traits to prepend | Prepend a value or multiple values to a user property array. If the corresponding trait does not have a value set yet, it will be initialized to an empty list before the new values are prepended. If the corresponding trait has an existing value and it is not a list, it will be converted into a list with the new value prepended. | Supported for all connection modes except for web device mode |\n\n### Destination settings\n\nThe following sections detail the advanced destination-specific settings you can configure in the dashboard.\n\n#### Amplitude IT\n\n| Field | Description | Note |\n| --- | --- | --- |\n| Secret key | See [Amplitude docs](https://help.amplitude.com/hc/en-us/articles/360058073772-Create-and-manage-organizations-and-projects#01HDMGTSM098DFDDRD93RHPKFS) for more information on obtaining this key. | Secure your secret key if you plan on deleting users for GDPR purposes. |\n| Version name | Assign a version name for your page, and we’ll send it to Amplitude for more detailed events. | Only supported for web device mode |\n| Map device brand | Capture brand, manufacturer, and model information for mobile devices. Amplitude computes `device_family` as `device_family: {device_brand} {device_manufacturer} {device_model}`. | Only supported for mobile sources in device mode. |\n\n#### Ecommerce settings\n\nThese settings allow you to define how you want your `Order Completed` events to be passed to Amplitude.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> These settings are applicable for the events sent in cloud mode and web device mode.\n\n| Field | Description |\n| --- | --- |\n| Track products as single event | Turn this on to track an array of products as a single event. The event will be passed as the original event name, and all products as properties. Otherwise, each product is tracked as a separate event with the name `Product purchased`. |\n| Track revenue per product | Turn this on to track the revenue of each product in an event individually. Otherwise, the event will be sent as an aggregate revenue of all products. |\n\n### Other settings\n\n#### Client-side events filtering\n\nRudderStack’s [client-side event filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) feature lets you specify which events should be discarded or allowed to flow through by allowlisting or denylisting them.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This is only applicable for destinations that are connecting in device mode and implementing track calls. For mobile SDKs, it also applies to the following application lifecycle events: installed, opened, backgrounded, updated.\n\n1.  Select whether you would like to turn on events filtering.\n    *   The default setting is **No events filtering**, meaning that no filters are applied and RudderStack will allow all events to flow through.\n    *   Select **Allowlist** if you would like to be able to specify the names of the events that you want RudderStack to allow to flow through to the destination. Any events you do not list in the subsequent modals will be blocked.\n    *   Select **Denylist** if you would like to be able to specify the names of the events that you want RudderStack to block from flowing to the destination. Any events you do not list in the subsequent modals will be allowed to flow through to the destination.\n2.  Input event names to **Allowlist** (only possible if Allowlist was selected above): provide the event name(s) you would like to allow to flow through to the destination. Input one event name per line, and click **add more** for each additional event name you would like to add to the list. Note that any event names that you do not add to this list will be blocked.\n3.  Input event names to **Denylist** (only possible if Denylist was selected above): provide the event name(s) you would like to block from flowing to the destination. Input one event name per line, and click **add more** for each additional event name you would like to add to the list. Note that any event names that you do not add to this list will be allowed to flow through to the destination.\n\n#### OneTrust cookie categories\n\nOneTrust is a popular consent management platform that provides data governance, privacy management, and security solutions to thousands of businesses worldwide.\n\nRudderStack’s JavaScript SDK integrates seamlessly with the OneTrust SDK. It lets you map the OneTrust cookie/consent groups to RudderStack’s consent purposes. RudderStack, in turn, uses this consent information to enable/disable tracking and sending the data.\n\nTo use this feature, ensure that you have activated the integration by following the steps outlined in the [OneTrust Consent Manager](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/javascript/) integration for the JavaScript SDK.\n\n| Field | Description | Note |\n| --- | --- | --- |\n| Category name | Input the consent category name(s) defined when you set up OneTrust for your JavaScript source. | Insert one category name per line. |\n\nSee [OneTrust Consent Manager](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/javascript/) in our JavaScript SDK docs to learn more.\n\n## RudderStack SDK settings\n\nYou can also define the following settings in your RudderStack SDK while sending events to Amplitude:\n\n| Field | Description | Note |\n| --- | --- | --- |\n| `residencyServer` | Sets the Amplitude server zone.<br><br>**Default value**: `AMPServerZone.US` | Configurable values are `AMPServerZone.US` and `AMPServerZone.EU`. |\n| `useBatch`  <br>Applicable only for the [Android SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/). | Determines whether to use the `batch` API.<br><br>**Default value**: `True` | The value for **Batch event upload threshold** dashboard setting should be greater than `0`. |\n\n## Amplitude SDK settings\n\nThe following settings let you customize the Amplitude SDK when sending events via the device mode. Make sure to add the Amplitude SDK to your project before configuring these settings.\n\n### Web\n\nIf you are connecting to Amplitude in web device mode, these settings allow you to configure Amplitude’s native web SDK.\n\n| Field | Description | Note |\n| --- | --- | --- |\n| Proxy server URL | Use this setting to send data to Amplitude using a [domain proxy](https://www.docs.developers.amplitude.com/analytics/domain-proxy/) to relay event requests. | Make sure that the proxy server URL is of a secure protocol type (HTTPS). Otherwise, RudderStack drops the proxy domain information and sends the data to Amplitude directly, without using the proxy domain. |\n| Replace Device ID with Anonymous ID | When turned on, RudderStack uses `anonymousId` instead of the device ID. | RudderStack’s JavaScript SDK generates the `anonymousId`. To set your own `anonymousId`, use the [`setAnonymousId()`](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#overriding-anonymous-id) method. |\n| Disable Attribution | When turned on, RudderStack does not track attribution using the GCLID, UTM parameters, and referrer information. | \\-  |\n| Save Referrer, URL params, GCLID only once per session | When turned on, RudderStack tracks referrer, UTM parameters, and GCLID only once per session and ignores any new values that may enter a user’s session. | \\-  |\n| Batch event upload period (ms) | Set the time limit (in ms) between batch uploads. | \\-  |\n| Batch event upload threshold | Set the minimum number of events to be sent in a batch. | \\-  |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> With the latest Amplitude SDK updates, the following configuration settings are now removed from the RudderStack dashboard:\n> \n> *   **Force HTTPS**\n> *   **Track GCLID**\n> *   **Track referrer information**\n> *   **Track UTM properties**\n> *   **Reset referrer or UTM params for new sessions**\n> *   **Batch events prior to upload**\n> \n> For older Amplitude web device mode configurations, the above settings will still be applicable. However, you will **not** be able to modify/update them. To do so, [contact RudderStack support](mailto:support@rudderstack.com).\n> \n> RudderStack will continue to support the above settings for the next two months, after which they will be set to the following default values:\n> \n> *   **Force HTTPS**: false\n> *   **Track GCLID**: false\n> *   **Track referrer information**: false\n> *   **Track UTM properties**: false\n> *   **Reset referrer or UTM params for new sessions**: false\n> *   **Batch events prior to upload**: false\n\n### iOS\n\nIf you are connecting to Amplitude in mobile device mode, these settings allow you to configure Amplitude’s native iOS SDK.\n\n| Field | Description | Note |\n| --- | --- | --- |\n| Track session events | Turning this on will send start and end session events. | Mobile device mode only |\n| Use IDFA for device ID | Turning this on will send the IDFA instead of device ID to Amplitude. | Mobile device mode only |\n| Batch event upload period (ms) | Set the time limit (in ms) between batch uploads. | Mobile device mode only |\n| Batch event upload threshold | Set the minimum number of events to be sent in a batch. | Mobile device mode only |\n\n### Android\n\nIf you are connecting to Amplitude in mobile device mode, these settings allow you to configure Amplitude’s native Android SDK.\n\n| Field | Description | Note |\n| --- | --- | --- |\n| Enable location listening | When on, capture user location information for anyone who has granted app location permission. | Mobile device mode only |\n| Track session events | Turning this on will send start and end session events. | Mobile device mode only |\n| Use advertising ID for device ID | Turning this on will send Advertising ID instead of Device ID to Amplitude. | Mobile device mode only |\n| Batch event upload period (ms) | Set the time limit (in ms) between batch uploads. | Mobile device mode only |\n| Batch event upload threshold | Set the minimum number of events to be sent in a batch. | Mobile device mode only |\n\n### React Native\n\nIf you are connecting to Amplitude in [mobile device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode), these settings allow you to configure Amplitude’s native Android and iOS SDKs:\n\n| Field | Description | Applicable platform |\n| --- | --- | --- |\n| Track session events | Turning this on causes RudderStack to send the session start and end events. | iOS and Android |\n| Use IDFA for device ID | Turning this on causes RudderStack to send the IDFA to Amplitude instead of device ID. | iOS |\n| Batch event upload period (ms) | Set the time limit (in ms) between batch uploads. | iOS and Android |\n| Batch event upload threshold | Set the minimum number of events to send in a batch. | iOS and Android |\n| Enable location listening | Turning this on causes RudderStack to capture user location information for anyone who has granted the app location permission. | Android |\n| Use advertising ID for device ID | Turning this on causes RudderStack to send the advertising ID to Amplitude instead of device ID. | Android |\n\n## Identify\n\nThe `identify` call lets you associate a user with their actions and capture all relevant traits about them. This information includes unique `userId` as well as any optional information such as name, email address, etc.\n\nA sample `identify` call looks like the following:\n\n```\nrudderanalytics.identify(\n  \"userId\", {\n    email: \"name@surname.com\",\n    name: \"John Doe\",\n    profession: \"Student\",\n  })\n```\n\nA sample dashboard after making the above `identify`, `page`, and `track` calls is as follows:\n\n[![Adjust connection settings](https://www.rudderstack.com/docs/images/screenshot-2020-02-17-at-5.41.41-pm.webp)](https://www.rudderstack.com/docs/images/screenshot-2020-02-17-at-5.41.41-pm.webp)\n\n[![Adjust connection settings](https://www.rudderstack.com/docs/images/screenshot-2020-02-17-at-5.49.05-pm.webp)](https://www.rudderstack.com/docs/images/screenshot-2020-02-17-at-5.49.05-pm.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> **Applicable for mobile only**: If a trait has a name `optOutOfSession` with a value of `true`, then this `identify` call will be opted out of the current session if it exists or won’t start a new session if there isn’t any active session.\n> \n> **Opting out of sessions**: You can opt out of an identify call (of a current session) by passing a trait named `optOutOfSession` as `true`. When there is no active session, passing `optOutOfSession` does not start a new session.\n\n### Unset user properties\n\nTo unset the user traits set in the `traits`/`context.traits` object or `userProperties` in Amplitude, specify them in the `integrations.Amplitude.fieldsToUnset` object.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> When you unset fields using `fieldsToUnset`, RudderStack notifies Amplitude to delete the fields along with their schema (if they exist). For more information, see the following Amplitude documentation:\n> \n> *   [Cloud mode](https://www.docs.developers.amplitude.com/analytics/apis/http-v2-api/#keys-for-the-event-argument:~:text=exceed%2040%20layers.-,user_properties,-Optional.%20Object.%20A)\n> *   [Device mode](https://amplitude.github.io/Amplitude-JavaScript/Identify#identifyunset)\n\nFor the following sample payload:\n\n```\nmessage: {\n  \"channel\": \"web\",\n  \"type\": \"identify\",\n  \"context\": {\n    \"traits\": {\n      \"firstName\": \"Alex\",\n      \"lastName\": \"Keener\",\n    },\n  },\n},\n```\n\nTo unset `firstName` and `lastName` fields in Amplitude, you can set the following `integrations` object of your `identify` event payload:\n\n```\nmessage: {\n  \"integrations\": {\n    \"Amplitude\": {\n      \"fieldsToUnset\": [\"firstName\", \"lastName\"]\n    },\n    \"All\": true,\n  }\n}\n```\n\nIf the fields are within some object:\n\n```\nmessage: {\n  \"channel\": \"web\",\n  \"type\": \"identify\",\n  \"context\": {\n    \"traits\": {\n      \"someField\": {\n        \"firstName\": \"Alex\",\n        \"lastName\": \"Keener\"\n      }\n    },\n  },\n},\n```\n\nTo unset `firstName` and `lastName` in this case, set the `integrations` object as follows:\n\n```\nmessage: {\n  \"integrations\": {\n    \"Amplitude\": {\n      \"fieldsToUnset\": [\"someField.firstName\", \"someField.lastName\"]\n    },\n    \"All\": true,\n  }\n}\n```\n\nFor the following sample `identify` event:\n\n```\nrudderanalytics.identify(\"userId\", {\n  \"firstName\": \"Alex\",\n  \"outerObject\": {\n    \"innerObject\": {\n      \"lastName\": \"Keener\"\n    }\n  }\n});\n```\n\nTo unset `firstName` and `lastName`, set the `integrations` object in your `identify` event as follows:\n\n```\nrudderanalytics.identify(\"userId\", {}, {\n  integrations: {\n    Amplitude: {\n      \"fieldsToUnset\": [\"firstName\", \"outerObject.innerObject.lastName\"]\n    }\n  }\n})\n```\n\n## Page\n\nThe `page` call allows you to record information whenever a user sees a web page, along with the associated optional properties of that page. This method must be called at least once per page load.\n\nA sample `page` call looks like the following:\n\n```\nrudderanalytics.page({\n  userId: \"user_id\",\n  category: \"Category\",\n  name: \"Sample\",\n})\n```\n\nIn the above sample, we capture information related to the page being viewed such as the category of the page (`Category`), as well as the name of the page (`Sample`) along with the unique user ID.\n\n#### Set custom page event names\n\nYou can set custom event names for your `page` calls.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This feature is available only in cloud mode.\n\nTo use this feature, enable the **Use Custom Page Event Name** dashboard setting and specify the event name format in the **Page Event Name Format** field.\n\n[![Set custom page event names](https://www.rudderstack.com/docs/images/event-stream-destinations/custom-page-event-name.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/custom-page-event-name.webp)\n\nFor example, if you set the event name format as `Viewed a {{ name }}` and pass the following event:\n\n```\nrudderanalytics.page(\"Home\")\n```\n\nIn this case, RudderStack sets the event name as `Viewed a Home` before sending it to Amplitude.\n\n## Screen\n\nThe `screen` method allows you to record whenever a user sees the mobile screen, along with any associated optional properties. This call is similar to the `page` call, but is exclusive to your mobile device.\n\nA sample `screen` call looks like the following code snippet:\n\n```\nrudderanalytics.screen({\n  userId: \"user_id\",\n  category: \"Category\",\n  name: \"Sample\",\n})\n```\n\nIn the above snippet, we capture information related to the screen being viewed, such as screen’s name and category.\n\n#### Set custom screen event names\n\nYou can set custom event names for your `screen` calls.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This feature is available only in cloud mode.\n\nTo use this feature, enable the **Use Custom Screen Event Name** dashboard setting and specify the event name format in the **Screen Event Name Format** field.\n\n[![Set custom screen event names](https://www.rudderstack.com/docs/images/event-stream-destinations/amplitude-screen-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/amplitude-screen-settings.webp)\n\nFor example, if you set the event name format as `Viewed a {{ name }}` and pass the following event:\n\n```\n[[RSClient sharedInstance] screen:@\"Main\"\n                properties:@{\n                  @\"title\" : \"Home | RudderStack\",\n                  @\"url\" : @\"http://www.rudderstack.com\"}\n                ];\n```\n\nIn this case, RudderStack sets the event name as `Viewed a Main` before sending it to Amplitude.\n\n## Group\n\nThe `group` call lets you associate a particular identified user with a group, such as a company, organization, or an account.\n\nRudderStack supports sending `group` calls in cloud mode. When sending events via device mode, `group` is supported only by the web (JavaScript) SDK.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> [Groups](https://developers.amplitude.com/docs/group-identify-api) are an enterprise-only feature in Amplitude and you need to purchase the [Accounts](https://help.amplitude.com/hc/en-us/articles/115001765532) addon to use them.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is only available for cloud and web (JavaScript) device mode.\n\nTo use the Amplitude Groups feature with RudderStack, you need to define the `Group name trait` and `Group value trait` in the dashboard settings. To send the events, see below:\n\n*   **Cloud mode**: Pass the above fields as traits while making a `group` call.\n*   **Device mode**: RudderStack triggers a `group` call even for a `groupId` by mentioning `groupType` as `'[RudderStack] Group'` and `value` as `groupId`.\n\nEven if you don’t have an enterprise account or the Groups add-on, RudderStack adds `groups` as a user property in the user’s profile with **Group Name Trait** as its type and **Group Value Trait** as its value.\n\nSuppose you have defined the **Group Name Trait** as `RS` and **Group Value Trait** as `RudderStack` and made the `group` call. The user would then be associated with the Group name: `RS` and the Group Value: `RudderStack`.\n\nRudderStack does not support associating a user to more than one group per `group` call sent to Amplitude. To send more than one group per user, you must call the `group` API multiple times with the relevant group information specified in the [group settings](#identify--group-settings).\n\n## Track\n\nThe `track` call lets you record the user’s actions along with any properties associated with them.\n\nA sample `track` call looks like the following:\n\n```\nrudderanalytics.track(\"Track me\")\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> **Applicable for mobile only**: If you set a property with the name `optOutOfSession` and value `true` then this `track` call will be opted out of the current session if it exists or does not start a new session if there isn’t any active session.\n\n#### Revenue events\n\nRevenue events are available in **web device mode only**. To track revenue events, we use Amplitude’s `logRevenueV2()` API which expects `revenue` as a top level attribute.\n\nTo track a revenue event, you must include a `revenue` key in the event, like so:\n\n```\nrudderanalytics.track(\"Item Purchased\", {\n  revenue: 30,\n  revenue_type: \"add-on purchase\",\n})\n```\n\nIf you send a `price` and `quantity` with the revenue key, the revenue will be calculated in Amplitude as `price * quantity`\n\nYou may also set a `product_id`, but only if `revenue` has been set.\n\nIf a `products` array is present in the event payload, then to track products individually at each product level, `price` or `revenue` must be present or revenue will not be tracked, as `logRevenueV2` uses both `price` and `quantity` to calculate `revenue`.\n\nIf no `quantity` is present, we will assume a quantity of `1` as default as `1`.\n\n#### Order Completed\n\nA sample `Order Completed` ecommerce event looks like this:\n\n```\nrudderanalytics.track(\"Order Completed\", {\n  checkoutId: \"ABCD1234\",\n  orderId: \"order1234\",\n  revenue: 50,\n  products: [\n    {\n      productId: \"product1\",\n      sku: \"45790-32\",\n      name: \"Monopoly: 3rd Edition\",\n      price: 20,\n      quantity: 1,\n      category: \"Games\",\n    },\n    {\n      productId: \"product2\",\n      sku: \"46493-32\",\n      name: \"Uno Card Game\",\n      price: 15,\n      quantity: 2,\n      category: \"Games\",\n    },\n  ],\n})\n```\n\nThe above call will generate one `Order Completed` event, 2 individual `Product purchased` events and 2 revenue events (one with `$price` as `15` and `$quantity` as `2` and the other one with `$price` as `20` and `$quantity` as `1` ) at Amplitude, provided that in the destination settings dashboard: `Track revenue per product settings` is enabled. The two separate revenue events are generated for device mode. For cloud mode, revenue will be tracked along with the 2 `Product purchased` events.\n\n#### Multi-product purchases\n\nAmplitude allows you to define how you want to track multi-product purchases. This feature is available in **web device mode only**.\n\nIf you enable “Track revenue per product” in your ecommerce settings, you will then be able to track each product’s revenue as a separate event. Otherwise, the event will be sent as an aggregate revenue of all products.\n\nIf you enable “Track products once”, then an array of products will be tracked as a single event. The event would be passed as the original event name, with all products as properties.\n\n## Alias\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is currently only available when sending events through the JavaScript SDK in cloud mode.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> To use Alias, you must enable the Amplitude Portfolio add-on.\n\nRefer to the [JavaScript SDK documentation](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/supported-api/#alias) for information and examples on how to call the `alias` event.\n\n#### Mapping\n\nAmplitude’s `alias` call simply creates a mapping or link between the `user_id` specified in the `from` parameter to the `global_user_id` specified in the `to` parameter of the `alias` call.\n\n```\nrudderanalytics.alias(\"user_id\", \"global_user_id\", options, callback)\n```\n\n#### Unmapping\n\nWith Amplitude, it is possible to **unmap** an already established link, or `alias`. In order to trigger Amplitude to unmap a connection, follow the code snippet template below.\n\n```\nrudderanalytics.alias(\"user_id_to_unmapped\", {\n  integrations: {\n    Amplitude: {\n      unmap: true,\n    },\n  },\n})\n```\n\nIn the snippet above, `user_to_be_unmapped`, will be unmapped or unlinked from the `global_user_id` it is currently linked to.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For the unmapping call, it is not necessary to provide `global_user_id` in the `to` parameter of the `alias` call. If it is included, RudderStack will dismiss this field.\n\nFor more information on how the `alias` call works for Amplitude, refer to this [Amplitude support page](https://help.amplitude.com/hc/en-us/articles/360002750712-Portfolio-Cross-Project-Analysis#h_76557c8b-54cd-4e28-8c82-2f6778f65cd4).\n\n## Advanced Features\n\n#### Reset\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This feature is currently available as a part of RudderStack Mobile SDKs only.\n\nThe `reset` method resets the previously identified user and related information.\n\n```\n[[RSClient sharedInstance] reset];\n```\n\n#### Sending `event_id`\n\nRudderStack supports sending `event_id` to Amplitude in device mode. You can include it under the `integrations` object and it is supported for all above-mentioned API calls, namely, `identify`, `track`, `page`, `screen`, and `group`.\n\nA sample `identify` call with `event_id` is as follows:\n\n```\nrudderanalytics.identify(\n  \"1hKOmRA4el9Zt1WSfVJIVo4GRlm\", {\n    name: \"Alex Keener\"\n  }, {\n    integrations: {\n      Amplitude: {\n        event_id: 1234\n      }\n    }\n  }\n);\n```\n\n#### Skip user properties sync\n\nWhen you send an event to Amplitude via RudderStack, Amplitude updates the existing user properties and appends any new ones. However, you can change this behavior by sending the `skip_user_properties_sync` property as `true` in the `integrations` object:\n\n```\n\"integrations\": {\n        ...\n        ...\n        \"Amplitude\": {\n            \"skipUserPropertiesSync\": true\n        }\n        ...\n        ...\n    }\n```\n\nThis ensures that the event in Amplitude includes only the user properties sent with it, does not modify the user properties table, and does not include any pre-existing user properties. See [Amplitude documentation](https://www.docs.developers.amplitude.com/analytics/data-backfill-guide/#skip-user-properties-sync) for more information.\n\n#### Deleting a user\n\nYou can delete a user in Amplitude using [Suppression with Delete regulation](https://www.rudderstack.com/docs/api/user-suppression-api/#adding-a-suppression-with-delete-regulation) in the RudderStack [User Suppression API](https://www.rudderstack.com/docs/api/user-suppression-api/).\n\nTo delete a user, you must specify their `userId` in the event. Optionally, you can specify a custom identifier.\n\nA sample regulation request body for deleting a user in Amplitude is shown below:\n\n```\n{\n  \"regulationType\": \"suppress_with_delete\",\n  \"destinationIds\": [\n    \"2FIKkByqn37FhzczP23eZmURciA\"\n  ],\n  \"users\": [{\n    \"userId\": \"1hKOmRA4GRlm\",\n    \"<customKey>\": \"<customValue>\"\n  }]\n}\n```\n\n## FAQ\n\n#### Why are all my session IDs `-1` in Amplitude?\n\nYou will see the session IDs as `-1` in Amplitude if you are sending events in [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode) and:\n\n*   You are not including the session ID in your event’s `context.sessionId`.\n*   If the `sessionId` is not an integer (ideally, a Unix timestamp)\n\nSee [Amplitude’s documentation](https://help.amplitude.com/hc/en-us/articles/115002323627-Track-sessions#h_a832c1ce-717a-4ab3-b205-9d7ed418ef1a) for more information on how Amplitude tracks user sessions.\n\n#### Can I send more than one group per user to Amplitude?\n\nRudderStack does not support associating a user to more than one group per `group` API call sent to Amplitude. To send more than one group per user, you need to call the `group` API multiple times with the relevant group information specified in the [group settings](#identify--group-settings).\n\n#### How does RudderStack send the operating system information to Amplitude?\n\nRudderStack sends the following [contextual fields](https://www.rudderstack.com/docs/event-spec/standard-events/common-fields/#contextual-fields) that capture the operating system details:\n\n| RudderStack field | Amplitude property | Data type | Description |\n| --- | --- | --- | --- |\n| `os.name` | [`os_name`](https://www.docs.developers.amplitude.com/analytics/apis/http-v2-api/#keys-for-the-event-argument:~:text=of%20the%20device.-,os_name,-Optional.%20String.%20The) | String | *   **Web SDK**: Browser name (Example: `Chrome`)<br>*   **Mobile SDKs**: Mobile operating system (Example: `iOS`) |\n| `os.version` | [`os_version`](https://www.docs.developers.amplitude.com/analytics/apis/http-v2-api/#keys-for-the-event-argument:~:text=user%20is%20using.-,os_version,-Optional.%20String.%20The) | String | *   **Web SDK**: Browser version<br>*   **Mobile SDKs**: OS version |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> *   To send the OS-related information differently, you can write a [transformation](https://www.rudderstack.com/docs/transformations/create/#adding-a-transformation) according to your requirements.\n>     \n> *   Amplitude combines the above fields to set the [`OS` property](https://help.amplitude.com/hc/en-us/articles/215562387-User-property-definitions#:~:text=Android%22%2C%20or%20%22Web%22-,OS,-character%20varying%20) as:\n>     \n>     `OS` = `os_name` + `os_version`\n>     \n>     For example, `iOS 9.1`, `Chrome 45`.\n>     \n\n#### Why am I getting 429 errors in Amplitude?\n\nYou might be sending too many requests at a time for a given user. Amplitude has a limit of 10 events per second per user. It is recommended to stop sending events for some time (at least 30 seconds) before retrying.\n\nFor more information on the common API error codes, see this [Amplitude support page](https://community.amplitude.com/data-instrumentation-57/common-api-error-codes-215).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Amplitude Destination | RudderStack Docs",
  "description": "Send data from RudderStack to Amplitude.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/clickup/",
  "markdown": "# ClickUp destination | RudderStack Docs\n\nSend your event data from RudderStack to ClickUp.\n\n* * *\n\n*     6 minute read  \n    \n\n[ClickUp](https://clickup.com/) is a productivity tool that lets you set up project workflows and tasks, and enable smooth cross-team collaboration.\n\nRudderStack supports ClickUp as a destination where you can seamlessly send your event data.\n\n## Getting started\n\nBefore configuring ClickUp as a destination in RudderStack, verify if the source platform is supported by ClickUp by referring to the table below:\n\n| Connection Mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| Device mode | \\-  | \\-  | \\-  |\n| Cloud mode | Supported | Supported | Supported |\n\nOnce you have confirmed that the source platform supports sending events to ClickUp, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **ClickUp**.\n2.  Assign a name to the destination and click **Continue**.\n\n## Connection settings\n\nTo successfully configure ClickUp as a destination, you will need to configure the following settings:\n\n[![ClickUp connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/clickup-connection-settings-1.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/clickup-connection-settings-1.webp)\n\n*   **API Token**: Enter your ClickUp API token.\n*   **List ID**: Enter your ClickUp list ID.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on obtaining your ClickUp API token and list ID, refer to the [FAQ](#faq) section below.\n\n*   **Mapping to add custom fields while creating a task**: Use this setting to map a specific RudderStack event property to a ClickUp Custom Field.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on using this setting, refer to the [Adding custom fields](#adding-custom-fields) section below.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can provide multiple ClickUp custom fields associated with different lists. However, note that the custom field name **must be unique** within a list to successfully create a task.\n\n*   **Client-side Events Filtering**: This setting lets you specify which events should be allowed to flow through to ClickUp.\n\n[![ClickUp connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/clickup-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/clickup-connection-settings-2.webp)\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack will discard the events **not included** in the allowlist.\n\n## Track\n\nYou can use the [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) calls to create a task in ClickUp.\n\nA sample `track` call is shown below:\n\n```\nrudderanalytics.track(\n  \"Product Viewed\", {\n    \"taskName\": \"Whole Foods Market\",\n    \"tags\": [\"plan\", \"proposal\", \"marketing\"],\n    \"timeEstimate\": 10800000,\n    \"status\": \"Proposal\",\n    \"dueDate\": \"2023-02-25T13:39:21.032Z\",\n    \"startDate\": \"2022-01-20T13:39:21.032Z\",\n    \"industryKey\": \"Retail\",\n    \"paymentStatus\": \"Reject\",\n    \"label\": [\"Transformer\", \"QA\", \"Testing\"],\n    \"location\": {\n      \"lat\": -28.016667,\n      \"lng\": 124,\n      \"formattedAddress\": \"New Orleans, Louisiana\",\n    },\n    \"phone\": \"+12025550146\",\n  }, {\n    \"externalId\": [{\n        \"type\": \"clickUpListId\",\n        \"id\": \"199314977\",\n      },\n      {\n        \"type\": \"clickUpAssigneeId\",\n        \"id\": 61205104,\n      },\n      {\n        \"type\": \"clickUpAssigneeId\",\n        \"id\": 61229682,\n      },\n    ],\n  }\n);\n```\n\nRudderStack uses the ClickUp [`task`](https://clickup.com/api/clickupreference/operation/CreateTask/) endpoint to create a task within a list.\n\nTo successfully create a task, you need to specify the [List ID](#where-can-i-find-the-clickup-list-id) in the dashboard settings. You can also pass the list ID through `externalId`, as seen in the above sample snippet.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack gives preference to the list ID passed via `externalId` over the list ID specified in the dashboard.\n\n### Adding assignees to a task\n\nWhile creating a task, you can assign it to a Team(Workspace) member by specifying a `userId`. You can also pass multiple `userId` in an `externalId` array:\n\n```\n{\n  \"context\": {\n    \"externalId\": [{\n        \"type\": \"clickUpAssigneeId\",\n        \"id\": 1232\n      },\n      {\n        \"type\": \"clickUpAssigneeId\",\n        \"id\": 88765\n      }\n    ]\n  }\n}\n```\n\n### Adding custom fields\n\nYou can pass the custom fields to ClickUp by specifying the mapping in the **Mapping to add custom fields while creating a task** dashboard setting:\n\n[![ClickUp custom field dashboard setting](https://www.rudderstack.com/docs/images/event-stream-destinations/clickup-custom-field.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/clickup-custom-field.webp)\n\nYou can specify the **ClickUp Custom Field Name** corresponding to the [custom field you created in the ClickUp dashboard](#how-can-i-create-custom-fields-in-clickup) and the **RudderStack Payload Property** corresponding to the event property present in the payload.\n\nRudderStack uses the custom field name to retrieve the `id` using the [`field`](https://clickup.com/api/clickupreference/operation/GetAccessibleCustomFields/) endpoint.\n\n### Supported custom fields\n\nRudderStack supports specifying the following ClickUp custom fields in the dashboard settings:\n\n| Custom Field | Notes |\n| --- | --- |\n| URL | Must be in a valid URL format. |\n| Email | Must be in a valid email format. |\n| Phone | Must be a valid phone number with a country code, for example, `+1 123 456 7890`. |\n| Date | Must be a valid date in a datetime format, for example, `2022-02-25T13:39:21.032Z`. |\n| Text | Must be a string. |\n| Checkbox | Must be in a Boolean format. |\n| Number | \\-  |\n| Currency | Must be a number. |\n| Emoji (integer) | Used for rating. The value must be in a range defined in the ClickUp dashboard. |\n| Location | Latitude/longitude and the formatted address must be passed as the [Google Geocoding API](https://developers.google.com/maps/documentation/geocoding/overview?hl=en). |\n| Dropdown | RudderStack uses the dropdown option name to find the UUID using the `field` endpoint. |\n| Label | RudderStack will use the label name to find the UUID using the `field` endpoint. |\n\nRudderStack currently **does not support** specifying the following custom fields:\n\n*   Tasks\n*   Users\n*   Automatic Progress\n*   Manual Progress\n\nNote that when sending the custom fields to ClickUp:\n\n*   You can provide multiple custom fields of different ClickUp lists in the dashboard.\n*   To successfully create a task, you need to provide a **unique** custom field name within a list in the custom field mapping.\n\n### Supported mapping\n\nThe following table lists the mappings between the **optional** RudderStack properties and the ClickUp properties:\n\n| RudderStack property | ClickUp property | Data type |\n| --- | --- | --- |\n| `context.externalId.id`  <br>when `context.externalId.type` = `clickUpListId` | `list_id` | String |\n| `properties.taskName` / `message.event` | `name` | String |\n| `properties.description` | `description` | String |\n| `context.externalId.id`  <br>when `context.externalId.type` = `clickUpAssigneeId` | `assignees` | Array |\n| `properties.tags` | `tags` | Array |\n| `properties.priority` | `priority` | Integer |\n| `properties.timeEstimate` | `time_estimate` | Integer (in ms) |\n| `properties.status` | `status` | String |\n| `properties.dueDate` | `due_date` | Datetime |\n| `properties.includeDueDateTime` | `due_date_time` | Boolean |\n| `properties.startDate` | `start_date` | Datetime |\n| `properties.includeStartDateTime` | `start_date_time` | Boolean |\n| `properties.notifyAll` | `notify_all` | Boolean |\n| `properties`  <br>(Only fields mentioned in the dashboard mapping) | `custom_fields` | Array |\n\n## Rate limits\n\nNote that the ClickUp enforces rate limits per OAuth and personal token. This rate limit depends on your ClickUp plan and is summarized in the following table:\n\n| ClickUp plan | Requests allowed per minute |\n| --- | --- |\n| Free Forever, Unlimited, Business | 100 |\n| Business Plus | 1000 |\n| Enterprise | 10000 |\n\n## FAQ\n\n#### Where can I find the ClickUp API Token?\n\nTo obtain your ClickUp API token, follow these steps:\n\n1.  Log into your [ClickUp dashboard](https://app.clickup.com/).\n2.  From the left sidebar, click the **Settings** button at the bottom and go to **MY APPS** > **Apps**.\n3.  You can find the API token listed here:\n\n[![ClickUp API token](https://www.rudderstack.com/docs/images/event-stream-destinations/clickup-api-token.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/clickup-api-token.webp)\n\n#### Where can I find the ClickUp List ID?\n\nTo get your ClickUp list ID, follow these steps:\n\n1.  In your [ClickUp dashboard](https://app.clickup.com/), click the ellipsis button next to your list and select **Copy Link**.\n\n[![ClickUp List ID](https://www.rudderstack.com/docs/images/event-stream-destinations/clickup-listid-1.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/clickup-listid-1.webp)\n\n2.  Paste the URL in your browser’s URL bar. You can find the list ID in the URL as highlighted in the below image:\n\n[![ClickUp List ID](https://www.rudderstack.com/docs/images/event-stream-destinations/clickup-listid-2.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/clickup-listid-2.webp)\n\n#### How can I create custom fields in ClickUp?\n\nTo create custom fields in your ClickUp list, follow these steps:\n\n1.  In your [ClickUp dashboard](https://app.clickup.com/), click the ellipsis button next to your list and go to **List settings** > **Custom Fields**.\n\n[![ClickUp List ID](https://www.rudderstack.com/docs/images/event-stream-destinations/clickup-custom-fields-1.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/clickup-custom-fields-1.webp)\n\n2.  Choose the type of custom field you want to create and configure the **Field Name** and **Field Type** accordingly.\n\n[![ClickUp List ID](https://www.rudderstack.com/docs/images/event-stream-destinations/clickup-custom-fields-2.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/clickup-custom-fields-2.webp)\n\n3.  Finally, click **Create**.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "ClickUp destination | RudderStack Docs",
  "description": "Send your event data from RudderStack to ClickUp.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/kafka/",
  "markdown": "# Apache Kafka | RudderStack Docs\n\nSend your event data from RudderStack to Apache Kafka.\n\n* * *\n\n*     7 minute read  \n    \n\n[Apache Kafka](https://kafka.apache.org/) is a popular distributed streaming platform used for building realtime data pipelines and streaming apps.\n\n## Getting started\n\nRudderStack supports sending events to Apache Kafka via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| Connection Mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | \\-  | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the source platform supports sending events to Apache Kafka, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add the source. Then, from the list of destinations, select **Apache Kafka**.\n2.  Assign a name to your destination and click **Continue**.\n\n### Connection settings\n\nTo successfully set up Apache Kafka as a destination, you need to configure the following settings:\n\n*   **Host Name(s)**: Enter your Kafka server broker’s host name. You can specify multiple host names in a comma-separated format.\n*   **Port**: Enter the port number to connect to the Kafka broker.\n*   **Topic Name**: Specify the default Kafka topic where you want to send the event data.\n*   **SSL Enabled**: Enable this option if you have enabled SSL to connect to your broker.\n    *   **CA Certificate**: If SSL is enabled, enter the CA certificate.\n*   **Enable SASL with SSL**: Enable this setting to use SASL for client authentication.\n    *   **SASL Type**: Choose the SASL authentication type from **Plain**, **SCRAM SHA-512**, and **SCRAM SHA-256**.\n    *   **Username**: Enter the username configured in Kafka for authenticating clients with SASL.\n    *   **Password**: Enter the password for the above username.\n\n*   **Convert Data to AVRO format**: Enable this setting to serialize your data using Avro and send it to the specified Kafka topic.\n    *   **Schema ID**: Enter the schema ID for the schema list.\n    *   **Schema**: Enter the schema corresponding to the above-mentioned ID.\n*   **Enable multiple topic support for event types and event names**: Enable this setting to deliver your events to multiple Kafka topics.\n    *   **Map event type to topic**: You can use this setting to send a particular event type ([`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/), [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/), [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/), [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/), [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/)) to a specific Kafka topic.\n    *   **Map Track events to topic**: You can use this setting to map a particular [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) event to a specific Kafka topic.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this setting is disabled, RudderStack sends all events to the Kafka topic specified in the **Topic Name** setting. Also, if you configure only a few event types or specific `track` events with the above setting, RudderStack sends the rest of the events to the topic defined in the **Topic Name** setting.\n\n## Sending events to Kafka topics\n\nYou can send your events to a specific Kafka topic by configuring the [Topic Name](#connection-settings) dashboard setting.\n\nAlternatively, you can send your events to a Kafka topic by specifying the topic name in the `integrations` object:\n\n```\nrudderanalytics.track(\n  \"Feedback Submitted\", {\n    feedbackScore: 9,\n    feedbackText: \"Great Product!\",\n    ip: \"127.0.0.0\",\n    url: \"https://www.google.com/\",\n    createdAt: \"2022-01-20T13:39:21.032Z\"\n  }, {\n    integrations: {\n      \"All\": true,\n      \"Kafka\": {\n        \"topic\": \"myTopic\",\n      },\n    },\n  }\n);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The mappings specified in the `integrations` object take precedence over the dashboard settings.\n\nRudderStack also supports sending events to multiple Kafka topics. To do so, enable the **Enable multiple topic support for event types and event names** dashboard setting and configure the mappings:\n\n[![Kafka connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/kafka-event-mapping-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/kafka-event-mapping-settings.webp)\n\n## Serializing data using Avro\n\nRudderStack lets you serialize your data using [Avro](https://www.ibm.com/in-en/topics/avro) and send it to a specific Kafka topic by leveraging the [goavro](https://pkg.go.dev/github.com/linkedin/goavro/v2) package.\n\nTo use this feature, you need to pass the `schemaId` in your event’s `integrations` object, as shown in the below event payload:\n\n```\n{\n  \"event\": \"Product Added\",\n  \"messageId\": \"4bb69e26-b5a6-446a-a140-dbb6263369c9\",\n  \"type\": \"track\",\n  \"anonymousId\": \"\",\n  \"context\": {\n    \"traits\": {\n      \"email\": \"alex@example.com\"\n    },\n  },\n  \"integrations\": {\n    \"KAFKA\": {\n      \"schemaId\": \"schema001\"\n    }\n  },\n  \"originalTimestamp\": \"2022-06-22T12:31:19.002+05:30\",\n  \"receivedAt\": \"2022-06-22T12:31:15.656+05:30\",\n  \"request_ip\": \"[::1]\",\n  \"sentAt\": \"2022-06-22T12:31:19.002+05:30\",\n  \"timestamp\": \"2022-06-22T12:31:15.655+05:30\"\n}\n```\n\nThe corresponding schema is shown below:\n\n```\n{\n  \"name\": \"RudderStackEvent\",\n  \"type\": \"record\",\n  \"namespace\": \"com.acme.avro\",\n  \"fields\": [{\n    \"name\": \"anonymousId\",\n    \"type\": \"string\"\n  }, {\n    \"name\": \"event\",\n    \"type\": \"string\"\n  }, {\n    \"name\": \"messageId\",\n    \"type\": \"string\"\n  }, {\n    \"name\": \"originalTimestamp\",\n    \"type\": \"string\"\n  }, {\n    \"name\": \"receivedAt\",\n    \"type\": \"string\"\n  }, {\n    \"name\": \"request_ip\",\n    \"type\": \"string\"\n  }, {\n    \"name\": \"rudderId\",\n    \"type\": \"string\"\n  }, {\n    \"name\": \"sentAt\",\n    \"type\": \"string\"\n  }, {\n    \"name\": \"timestamp\",\n    \"type\": \"string\"\n  }, {\n    \"name\": \"type\",\n    \"type\": \"string\"\n  }, {\n    \"name\": \"context\",\n    \"type\": \"record\",\n    \"fields\": [{\n      \"name\": \"traits\",\n      \"type\": \"record\",\n      \"fields\": [{\n        \"name\": \"email\",\n        \"type\": \"string\"\n      }]\n    }, {\n      \"name\": \"ip\",\n      \"type\": \"string\"\n    }]\n  }, {\n    \"name\": \"integrations\",\n    \"type\": \"record\",\n    \"fields\": [{\n      \"name\": \"KAFKA\",\n      \"type\": \"record\",\n      \"fields\": [{\n        \"name\": \"schemaId\",\n        \"type\": \"string\"\n      }]\n    }]\n  }]\n}\n```\n\n## Partition key\n\nRudderStack uses the `userId` in the event as the partition key of the message.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If `userId` is not present in payload, then RudderStack uses `anonymousId` instead.\n\nSo, if you have a multi-partitioned topic, then the records of the same `userId` (or `anonymousId` in absence of `userId`) will always go to the same partition.\n\n## FAQ\n\n#### Does my Kafka server require client authentication?\n\nIf you have enabled 2-way SSL, that is, your server requires client authentication, then you need to have the CA certificate and put that in the truststore of your server.\n\n#### How can I enable the 2-way SSL in Kafka and connect to RudderStack?\n\nFollow the below steps to make use of Java’s **keytool** utility to enable two-way SSL in Kafka and connect to RudderStack:\n\n**Step 1: Generate the key and certificate**\n\nRun the following command:\n\n```\nkeytool -keystore kafka.server.keystore.jks -alias localhost -keyalg RSA -genkey\n```\n\n**Step 2: Create your own CA**\n\nFollow these steps to create your own CA:\n\n1.  Generate a CA that is a public-private key pair and a certificate by running the command below. **Enter the contents of this certificate in the RudderStack dashboard under the CA certificate setting**.\n\n```\nopenssl req -new -x509 -keyout ca-key -out ca-cert -days {validity}\n```\n\n2.  Add the generated CA to the **broker’s truststore** so that the brokers can trust this CA.\n    \n    ```\n    keytool -keystore kafka.server.truststore.jks -alias CARoot -importcert -file ca-cert\n    ```\n    \n\n**Step 3: Sign the certificate**\n\nFollow the steps below:\n\n1.  Export the certificate from the keystore:\n\n```\nkeytool -keystore kafka.server.keystore.jks -alias localhost -certreq -file cert-file\n```\n\n2.  Sign it with the CA:\n\n```\nopenssl x509 -req -CA ca-cert -CAkey ca-key -in cert-file -out cert-signed -days {validity} -CAcreateserial -passin pass:{ca-password}\n```\n\n3.  Import both the certificate of the CA and the signed certificate into the broker keystore:\n\n```\nkeytool -keystore kafka.server.keystore.jks -alias CARoot -import -file ca-cert \n```\n\n```\nkeytool -keystore kafka.server.keystore.jks -alias localhost -import -file cert-signed\n```\n\nAll the above commands to generate the key and certificate, create the CA, and sign the certificate are summarized below:\n\n```\n// Step 1: Generate the key and the certificate\nkeytool -keystore kafka.server.keystore.jks -alias localhost -keyalg RSA -validity {validity} -genkey\n// Step 2: Create your own CA\nopenssl req -new -x509 -keyout ca-key -out ca-cert -days {validity}\nkeytool -keystore kafka.server.truststore.jks -alias CARoot -importcert -file ca-cert\n// Step 3: Sign the certificate\nkeytool -keystore kafka.server.keystore.jks -alias localhost -certreq -file cert-file\nopenssl x509 -req -CA ca-cert -CAkey ca-key -in cert-file -out cert-signed -days {validity} -CAcreateserial -passin pass:{ca-password}\nkeytool -keystore kafka.server.keystore.jks -alias CARoot -import -file ca-cert\nkeytool -keystore kafka.server.keystore.jks -alias localhost -import -file cert-signed\n```\n\n**Step 4: Update `server.properties`**\n\nEnter the below parameters in your `server.properties`:\n\n```\nssl.keystore.location=<keystore location>\nssl.keystore.password=<keystore password>\nssl.key.password=<ca key password>\nssl.truststore.location=<truststore location>\nssl.truststore.password=<truststore password>\nssl.client.auth=required\nssl.enabled.protocols=TLSv1.2,TLSv1.1,TLSv1\nssl.truststore.type=JKS\nssl.keystore.type=JKS\n```\n\n**Step 5: Save the RudderStack certificate**\n\nSave the below RudderStack certificate as `ca-cert-rudder` (or any other name of your choice) on your system:\n\n```\n-----BEGIN CERTIFICATE-----\nMIIEDzCCAvegAwIBAgIUByH8aYuRqjCyz5yZZ91fcJOsW+0wDQYJKoZIhvcNAQEL\nBQAwgZYxCzAJBgNVBAYTAklOMRQwEgYDVQQIDAtXZXN0IEJlbmdhbDEQMA4GA1UE\nBwwHS29sa2F0YTEUMBIGA1UECgwLUnVkZGVyc3RhY2sxCzAJBgNVBAsMAklUMRQw\nEgYDVQQDDAtSdWRkZXJzdGFjazEmMCQGCSqGSIb3DQEJARYXY29udGFjdEBydWRk\nZXJzdGFjay5jb20wHhcNMjAwNTE5MTA1OTEwWhcNMjEwNTE5MTA1OTEwWjCBljEL\nMAkGA1UEBhMCSU4xFDASBgNVBAgMC1dlc3QgQmVuZ2FsMRAwDgYDVQQHDAdLb2xr\nYXRhMRQwEgYDVQQKDAtSdWRkZXJzdGFjazELMAkGA1UECwwCSVQxFDASBgNVBAMM\nC1J1ZGRlcnN0YWNrMSYwJAYJKoZIhvcNAQkBFhdjb250YWN0QHJ1ZGRlcnN0YWNr\nLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMkLBYbfhvhm2wpJ\nFZSr9AGyrJUEh2e6YaY83xLRDuOYC1cvqlmCNxltc4W+ACyyi9zqSvhrrNb2C/Yh\nIg4gvvplImAAmv5Ua4ZiB2XSrn9ZvR+baRyezPgKI1+iU5ovDciUkeZP3p7hEmLw\nktayyFrWV5IEuGnfGBN4O077tgUiCm8zq3cHC0e5JBTUtelnwj6u1Ye6zZfIx/rC\nIkf0l1LGZqV1DHZefCqPl3l9awVnA4rbllL9a+mLNe44BT2H4UG6OaZxnAEqVQ9x\nlMvvDAYSzaSI334qGw/AAeBUE3mHyEbE9PtS0p+qOdRiq4b5m+usW5VbZBFSvT4A\nFR2Xa2cCAwEAAaNTMFEwHQYDVR0OBBYEFF71gmg4bAdft9PF3Sj9QMrxwoFMMB8G\nA1UdIwQYMBaAFF71gmg4bAdft9PF3Sj9QMrxwoFMMA8GA1UdEwEB/wQFMAMBAf8w\nDQYJKoZIhvcNAQELBQADggEBAFvXp77ZQXwqB0vQZXAr4JfiNZueNP4OlpxltiLd\nqt0UwLJzCZ/ik65jmGGcoxZeFQc3dF8InheH+zvanPWBq385TDSyF9/vomKbu7+R\nb7ndgDtWGpJm6vCUgC6m15KRKzjlHmiWu227hed4ZNrl5EJwqqFhKzSQ62wv66uM\nxHaTVaC1ThV5MmecsC7kS3mNCkhO1IVxy5KAJCftYzjni+O0U0wkcmUnZjJyN0l9\nhAegB6VLwodW3FqFJ7hMlSZOxE9hYjl9/FlqDdS3KPtn8qh9uliq9V8NELK2jROh\nvWJxTpadFmHwCTtKNrfnm2PgokxX3pVtkFu7xQhl26+87RQ=\n-----END CERTIFICATE-----\n```\n\n**Step 6: Add the RudderStack CA certificate to your truststore**\n\nAdd the above RudderStack CA certificate to your truststore by using the certificate’s location in the following command:\n\n```\nkeytool -keystore kafka.server.truststore.jks -alias CARootRudder -import -file ca-cert-rudder\n// here ca-cert-rudder is the RudderStack CA certificate\n```\n\n#### How can I connect to RudderStack if my Kafka server is running in a Kubernetes cluster?\n\nYou will need to expose one public address to which RudderStack can connect. It is recommended to use SSL for that.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You should allow **only the authenticated clients** to this exposed address.\n\nIf you use `PLAINTEXT` for your internal services within your cluster, you might already have the address. Open this address with SSL. You need to update `advertised.listeners` in your `server.properties`, as shown in the below example:\n\n```\n# Hostname and port the broker will advertise to producers and consumers.\n# here the INTERNAL listener is your cluster kafka service host for kafka server\n# and the EXTERNAL listener is the public loadbalancer for kafka server\nadvertised.listeners=INTERNAL://kafka-0.kafka-headless.kafka-test-1.svc.cluster.local:9092,EXTERNAL://ab7e36e84991c11ea8a930ebf847c1ef-555780507.us-east-1.elb.amazonaws.com:19092\nlistener.security.protocol.map=INTERNAL:PLAINTEXT,EXTERNAL:SSL\n```\n\n#### Does RudderStack support `SASL_PLAINTEXT` authentication?\n\nRudderStack does not support `SASL_PLAINTEXT` authentication. You can use `SASL_SSL` instead. The [official Kafka documentation](https://kafka.apache.org/documentation/#security_sasl) recommends using SASL with SSL in production.\n\n#### Why is the connection between Kafka and Zookeeper is failing for `SASL`?\n\nYou can try configuring your Zookeeper with `SASL_SSL` to resolve this issue.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Apache Kafka | RudderStack Docs",
  "description": "Send your event data from RudderStack to Apache Kafka.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/commandbar/",
  "markdown": "# CommandBar | RudderStack Docs\n\n## CommandBar Beta\n\nSend your event data from RudderStack to CommandBar.\n\n* * *\n\n*     2 minute read  \n    \n\n[CommandBar](https://www.commandbar.com/) is an AI-powered user assistance platform. It allows product, marketing, and customer success teams achieve their user engagement, activation, conversion, and retention goals.\n\nFind the open source code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-sdk-js/tree/develop/packages/analytics-js-integrations/src/integrations/CommandBar).\n\n## Setup\n\n1.  In your [RudderStack dashboard](https://app.rudderstack.com/), go to **Directory** > **Destinations** > **Cloud Destinations** and search for **CommandBar**.\n2.  Connect your source and click **Continue**.\n\n### Connection settings\n\nConfigure the following settings to set up CommandBar as a destination in RudderStack:\n\n*   **Name**: Assign a name to uniquely identify the destination.\n*   **Organization ID**: Enter your [CommandBar organization ID](#faq). You can find it in the left navigation bar of your CommandBar dashboard by clicking your organization name.\n\n### Connection mode\n\nSpecify how you want to route events from your source to CommandBar.\n\nRudderStack supports sending events to CommandBar via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | **Supported** | \\-  | \\-  |\n| **Cloud mode** | \\-  | \\-  | \\-  |\n\n### Configuration settings\n\n*   **Client-side Events Filtering**: This setting lets you specify which events should be blocked or allowed to flow through to CommandBar. For more information on this setting, see [Client-side Events Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/).\n*   **OneTrust Cookie Categories**: This setting lets you associate the [OneTrust](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/javascript/) cookie consent groups to CommandBar.\n\n## Identify\n\nYou can use the [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call to identify users in CommandBar. RudderStack maps this event to CommandBar SDK’s [`boot`](https://www.commandbar.com/docs/sdk/lifecycle/boot/) method.\n\nA sample `identify` call is shown:\n\n```\nrudderanalytics.identify(\"1hKOmRA4GRlm\", {\n  name: \"Alex Keener\",\n  address: \"1800 Blue Gum Street\",\n  hmac: \"hmacUserId\",\n  createdAt: \"Mon May 19 2019 18:34:24 GMT+0000 (UTC)\",\n})\n```\n\n### Traits mapping\n\nRudderStack maps the following `identify` traits to the CommandBar attributes:\n\n| RudderStack property | CommandBar property | Data type |\n| --- | --- | --- |\n| `userId`  <br>Required | `userId` | String |\n| `context.traits` + `traits`  <br>Default: `{}` | `traits` | Object |\n| `context.traits.hmacId`  <br>`traits.hmacId` | `Commandbar.hmac` | String |\n\n`hmacId` is used to identify users with an HMAC of their user ID, helping secure user-related features like customizable shortcuts. See [CommandBar identity verification](https://app.commandbar.com/identity-verification) for more information.\n\n## Track\n\nYou can use the event names in your [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) calls to trigger surveys in CommandBar. RudderStack maps this event to CommandBar SDK’s [`trackEvent`](https://www.commandbar.com/docs/sdk/events/trackevent/) method.\n\nA sample `track` call is shown:\n\n```\nrudderanalytics.track(\"User Signed Up\", {});\n```\n\n## FAQ\n\n#### **Where can I find the CommandBar organization ID?**\n\n1.  Log in to your [CommandBar dashboard](https://app.commandbar.com/login).\n2.  In the left navigation bar, click your organization name at the bottom and copy the **Org ID**.\n\n[![CommandBar organization ID](https://www.rudderstack.com/docs/images/event-stream-destinations/commandbar-org-id.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/commandbar-org-id.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "CommandBar | RudderStack Docs",
  "description": "Send your event data from RudderStack to CommandBar.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/appcues/",
  "markdown": "# Appcues | RudderStack Docs\n\nSend your event data from RudderStack to Appcues.\n\n* * *\n\n*     4 minute read  \n    \n\n[Appcues](https://www.appcues.com/) is a popular product marketing platform that helps you deliver scalable user experiences and accelerate business growth.\n\nRudderStack supports Appcues as a destination to which you can send your event data.\n\nFind the open source transformer code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/master/src/v0/destinations/appcues).\n\n## Getting started\n\nRudderStack supports sending event data to Appcues via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| Connection Mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| Device mode | **Supported** | \\-  | \\-  |\n| Cloud mode | **Supported** | **Supported** | **Supported** |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In a web device mode integration, that is, using [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) as a source, RudderStack loads the Appcues native SDK from the `https://fast.appcues.com/` domain.\n> \n> Based on your website’s content security policy, you might need to [allowlist this domain](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#allowlist-destination-domain) to load the Appcues SDK successfully.\n\nOnce you have confirmed that the platform supports sending events to Appcues, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add the source. Then, from the list of destinations, select **Appcues**.\n2.  Assign a name to the destination and click **Continue**.\n\n## Connection settings\n\nTo successfully set up Appcues as a destination, you will need to configure the following settings:\n\n*   **Account ID**: Enter your Appcues account ID. To get the ID, log in to your Appcues account and navigate to **Settings** > **Account**.\n*   **Client-side Events Filtering**: This setting lets you specify which events should be blocked or allowed to flow through to Appcues. See [Client-side Events Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) for more information.\n*   **OneTrust Cookie Categories**: This setting lets you associate the [OneTrust](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/) cookie consent groups to Appcues.\n\n### Web SDK settings\n\n*   **Appcues JavaScript Native SDK URL**: Enter the URL for hosting the native Appcues JavaScript SDK. If not specified, RudderStack sets it to `https://fast.appcues.com/${<your_account_id>}.js` by default.\n*   **Use device mode to send events**: Turn on this setting to enable sending events to Appcues in [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode).\n\n## Identify\n\nYou can use the [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call to uniquely identify a user in Appcues.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   You must make an `identify` call before making any other call to Appcues.\n> *   RudderStack flattens any objects/array properties in the `identify` call before sending it to Appcues by leveraging their `Appcues.identify(userId,[properties])` call.\n\nA sample `identify` call looks like the following snippet:\n\n```\nrudderanalytics.identify(\"userId\", {\n  name: \"John Doe\",\n  title: \"CEO\",\n  email: \"name.surname@domain.com\",\n  company: \"Company123\",\n  country: \"US\",\n  state: \"TX\",\n})\n```\n\n## Track\n\nUse the [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call to track custom events as they occur in your application.\n\nA sample `track` call looks like the following:\n\n```\nrudderanalytics.track(\"Clicked button\", {\n  color: \"red\",\n  buttonText: \"Get started\",\n})\n```\n\nRudderStack sends the `track` call information to Appcues using its `Appcues.track(eventName, [eventProperties])` call.\n\n## Page\n\nA [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call contains information such as the URL or the name of the web page visited by the user.\n\nA sample `page` call looks like the following:\n\n```\nrudderanalytics.page(\"homepage\")\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   In device mode, RudderStack passes the `page` call information to Appcues using its `Appcues.page()` call along with any additional properties passed to it. Appcues checks to see if a user qualifies for an experience every time the page changes. When you first make the `page` call, Appcues checks if there are any current flows associated with the given user and loads them, if necessary.\n> *   In cloud mode, RudderStack sends the above `page` call as a `track` event with the name as `Visited a Page` along with any associated properties. It also updates the properties associated with the user profile like user ID, user agent, current page URL, browser langugage, current page title, etc.\n\n## Screen\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `screen` call is available only in the cloud mode.\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) method allows you to record whenever a user sees the mobile screen along with any associated optional properties.\n\nA sample `screen` call looks like the following code snippet:\n\n```\n[[RSClient sharedInstance] screen:@\"Main\" properties:@{@\"prop_key\" : @\"prop_value\"}];\n```\n\nIn the above snippet, RudderStack captures screen-related like the screen name and category.\n\nRudderStack sends the above call is sent as a `track` event with the name `Viewed a Screen`, along with any additional properties passed to it.\n\n## FAQ\n\n#### How do I get the Appcues Account ID?\n\nYou can find the Appcues Account ID in the [Appcues Settings Page](https://login.appcues.com/).\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Appcues | RudderStack Docs",
  "description": "Send your event data from RudderStack to Appcues.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/bluecore/",
  "markdown": "# Bluecore | RudderStack Docs\n\nSend your event data from RudderStack to Bluecore.\n\n* * *\n\n*     4 minute read  \n    \n\n[Bluecore](https://www.bluecore.com/) is an AI-powered retail marketing platform that helps brands personalize their campaigns by analyzing customer data. It enables targeted email and messaging campaigns, aiming to enhance engagement, boost sales, and improve marketing efficiency.\n\nFind the open source code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/main/src/cdk/v2/destinations/bluecore).\n\n## Setup\n\n1.  In your [RudderStack dashboard](https://app.rudderstack.com/), go to **Directory** > **Destinations** > **Cloud Destinations** and search for **Bluecore**.\n2.  Connect your source and click **Continue**.\n\n### Connection settings\n\nConfigure the following settings to set up Bluecore as a destination in RudderStack:\n\n*   **Name**: Assign a name to uniquely identify the destination.\n*   **Bluecore namespace**: Enter your [Bluecore token](#faq) from the Bluecore dashboard.\n\n### Connection mode\n\nThis integration supports sending events to Bluecore via [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode):\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | \\-  | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\n### Configuration settings\n\nAfter completing the initial setup, configure the following settings to receive your data in Bluecore correctly:\n\n*   **OneTrust cookie consent settings**: Enter your OneTrust category names to associate the [OneTrust](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/) cookie consent groups to Bluecore.\n\n### Mappings\n\n**Event mappings**: Click **Set-up mapping** to map the RudderStack events to [Bluecore standard ecommerce events](https://help.bluecore.com/en/articles/6786828-events-service#h_ead2fa8c16). RudderStack also provides the JSON mapper to set these mappings.\n\n[![Bluecore event mapping](https://www.rudderstack.com/docs/images/event-stream-destinations/bluecore-event-mapping.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/bluecore-event-mapping.webp)\n\nRudderStack maps the following events to the Bluecore standard ecommerce events by default:\n\n| RudderStack event | Bluecore event |\n| --- | --- |\n| Product Viewed | `viewed_product` |\n| Products Searched | `search` |\n| Product Added | `add_to_cart` |\n| Product Removed | `remove_from_cart` |\n| Product Added to WIshlist | `wishlist` |\n| Order Completed | `purchase` |\n\n## Identify\n\nYou can use the [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call to create a new customer or link an email ID to an existing customer in Bluecore.\n\nRudderStack sends this information to Bluecore by leveraging their [REST API endpoint](https://help.bluecore.com/en/articles/6786828-events-service#h_188a59bb5b).\n\nA sample `identify` call to create a new customer in Bluecore:\n\n```\nrudderanalytics.identify(\"27340af5c8819\", {\n  firstName: \"Alex Keener\",\n  logins: 2\n})\n```\n\nYou can [link an email ID with an existing customer](https://help.bluecore.com/en/articles/6786828-events-service#h_b4ed19062c) by sending the following attributes for the customer’s `distinct_id` (unique identifier for the customer):\n\n*   `email`\n*   custom field `message.traits.action` with `identify` value\n\n```\nrudderanalytics.identify(\"27340af5c8819\", {\n  firstName: \"Alex Keener\",\n  logins: 2,\n  action: 'identify',\n  email: 'alex@example.com'\n})\n```\n\nYou can also send the `distinct_id` for a customer in the `externalId` object as shown:\n\n```\ncontext: {\n  externalId: [{\n    type: 'bluecoreExternalId',\n    id: '54321'\n  }],\n}\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that any customer attributes or product properties you send in the RudderStack `identify` or `track` calls (for example, `first_name`) are permanently created in Bluecore if they do not exist already. To avoid excess or redundant attributes, only send the attributes critical to your campaigns and ensure their syntax remains the same throughout.\n\n### Property mappings\n\nRudderStack maps the following properties to the Bluecore properties:\n\n| RudderStack property | Bluecore property |\n| --- | --- |\n| `externalId`  <br>`email`  <br>`userId`  <br>`anonymousId`  <br>Required | `distinct_id` |\n| `name` | `customer.name` |\n| `age` | `customer.age` |\n| `sex` | `customer.sex` |\n| `address` | `customer.address` |\n| `email` | `customer.email` |\n| `context.app.version` | `client` |\n| `context.device.model` | `device` |\n| `destination.Config.token` | `token` |\n\n## Track\n\nYou can use the RudderStack [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call to track the user behavior along with any associated properties.\n\nA sample `track` call is shown below:\n\n```\nrudderanalytics.track(\"Product Viewed\", {\n  product_id: \"622c6f5d5cf86a4c77358033\",\n  sku: \"8472-998-0112\",\n  category: \"Games\",\n  name: \"Cones of Dunshire\",\n  brand: \"Wyatt Games\",\n  variant: \"exapansion pack\",\n  price: 49.99,\n  quantity: 5,\n  coupon: \"PREORDER15\",\n  currency: \"USD\",\n  position: 1,\n  url: \"https://www.website.com/product/path\",\n  image_url: \"https://www.website.com/product/path.webp\",\n})\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that any customer attributes or product properties you send in the RudderStack `identify` or `track` calls (for example, `first_name`) are permanently created in Bluecore if they do not exist already. To avoid excess or redundant attributes, only send the attributes critical to your campaigns and ensure their syntax remains the same throughout.\n\n### Custom events\n\nIf you have created any custom events in the Bluecore dashboard, you can send them as `track` calls via RudderStack without mapping them in the RudderStack dashboard. RudderStack sends the custom event names as is.\n\nYou can also make calls to [opt-in or unsubscribe an email address](https://help.bluecore.com/en/articles/6786828-events-service#h_66485dc4cd):\n\n*   For opting-in a customer email, send a `track` call with a custom `optin` event and `email` field.\n*   For unsubscribing a customer email, send a `track` call with a custom `unsubscribe` event and `email` field.\n\n### Property mappings\n\nRudderStack maps the following properties to the Bluecore fields:\n\n| RudderStack property | Bluecore property |\n| --- | --- |\n| `userId`  <br>`anonymousId`  <br>`email` | `distinct_id` |\n| `name` | `customer.name` |\n| `age` | `customer.age` |\n| `sex` | `customer.sex` |\n| `address` | `customer.address` |\n| `email` | `customer.email` |\n| `properties.query`  <br>Required for Search events. | `search_term` |\n| `properties.order_id`  <br>Required for Purchase events. | `order_id` |\n| `properties.total`  <br>Required for Purchase events. | `total` |\n| `context.app.version` | `client` |\n| `context.device.model` | `device` |\n| `properties.products[#idx].id`/`product_id`/`sku` | `products[#idx].id` |\n| `properties.products[#idx].name` | `products[#idx].name` |\n| `properties.products[#idx].price` | `products[#idx].price` |\n\n*   All the standard [RudderStack ecommerce events](https://www.rudderstack.com/docs/event-spec/ecommerce-events-spec/) **require** `products` array except the [Products Searched](https://www.rudderstack.com/docs/event-spec/ecommerce-events-spec/browsing/#products-searched) event or any custom event mapped to Bluecore’s standard `search` ecommerce event.\n*   Any custom event mapped to Bluecore’s standard `purchase` ecommerce event also **requires** `products` array, along with the `order_id`, `total`, and customer information (which RudderStack maps from the `traits` or `context.traits` object).\n*   RudderStack maps the `id` for the `products` array either from the `product_id`, `sku`, or `id`. Further, RudderStack eliminates the `product_id`, `sku`, or `id` fields after computing the `id` of the `products` object before sending it to Bluecore.\n\n## FAQ\n\n#### Where can I find the Bluecore namespace?\n\n1.  Log in to the [Bluecore dashboard](https://app.bluecore.com/login).\n2.  From the left sidebar, go to **Account** > **Integration Guide**.\n\n[![Bluecore namespace](https://www.rudderstack.com/docs/images/event-stream-destinations/account-bluecore.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/account-bluecore.webp)\n\nYou can find the Bluecore namespace in the JavaScript code snippet:\n\n[![Bluecore namespace](https://www.rudderstack.com/docs/images/event-stream-destinations/bluecore-namespace.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/bluecore-namespace.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Bluecore | RudderStack Docs",
  "description": "Send your event data from RudderStack to Bluecore.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/bloomreach/setup-guide/",
  "markdown": "# Setup Guide | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Setup Guide | RudderStack Docs",
  "description": "Set up and configure Bloomreach as a destination in RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/confluent-cloud/",
  "markdown": "# Confluent Cloud | RudderStack Docs\n\nSend your event data from RudderStack to Confluent Cloud.\n\n* * *\n\n*     2 minute read  \n    \n\n[Confluent Cloud](https://www.confluent.io/confluent-cloud/) is a cloud-native, fully-managed event streaming platform. Powered by Apache Kafka, it is simple, secure, and simplifies data ingestion and processing on all major clouds. With Confluent Cloud, you can easily handle large-scale data workloads without compromising on performance.\n\nRudderStack allows you to seamlessly configure Confluent Cloud as a destination to send your event data.\n\n## Configuring Confluent Cloud in RudderStack\n\nTo enable sending data to Confluent Cloud, you will first need to add it as a destination to the source you are sending your event data. Once the destination is enabled, events from RudderStack will start flowing to Confluent Cloud.\n\nBefore configuring your source and destination on [RudderStack](https://app.rudderstack.com/), check whether Confluent Cloud supports the platform you are working on by referring to the table below:\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device Mode** | \\-  | \\-  | \\-  |\n| **Cloud Mode** | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the platform supports sending events to Confluent Cloud, perform the steps mentioned below:\n\n*   Choose a source to which you would like to add Confluent Cloud as a destination.\n*   Select the destination as **Confluent Cloud**. Give your destination a name, and then click **Next**.\n*   In the **Connection Settings**, **fill the required fields with the relevant information and click Next.**\n\n[![](https://www.rudderstack.com/docs/images/screenshot-2020-11-27-at-1.28.49-pm.webp)](https://www.rudderstack.com/docs/images/screenshot-2020-11-27-at-1.28.49-pm.webp)\n\nConfluent Cloud connection settings\n\nThe required fields are as follows:\n\n*   **Bootstrap server**: Enter your bootstrap server information here. This is in the format `hostname:`:`port` . You will get this information in your cluster settings.\n*   **Topic Name**: Enter the name of the Kafka topic in this field.\n*   **API Key**: This is the key you need to generate in the Confluent Cloud UI to give RudderStack the required API access. Enter the key in this field.\n*   **API Secret**: Enter the API Secret in this field - you can generate this in the Confluent Cloud UI.\n\n## Partition Key\n\nRudderStack uses `userId` as the partition key of a given message.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If `userId` is not present in the payload, then `anonymousId` is used.\n\nIf you have a multi-partitioned topic, then the records of the same `userId` (or `anonymousId` in the absence of `userId`) will always go to the same partition.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Confluent Cloud | RudderStack Docs",
  "description": "Send your event data from RudderStack to Confluent Cloud.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/convertflow/",
  "markdown": "# ConvertFlow | RudderStack Docs\n\nSend your event data from RudderStack to ConvertFlow.\n\n* * *\n\n*     4 minute read  \n    \n\n[ConvertFlow](https://www.convertflow.com/) is an all-in-one platform that enables you to drive your conversions. It lets you create and deliver personalized user experiences via forms, quizzes, surveys, landing pages, and more.\n\nRudderStack supports ConvertFlow as a destination where you can seamlessly send your event data.\n\n## Getting started\n\nRudderStack supports sending event data to ConvertFlow via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| Connection Mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| Device mode | Supported | \\-  | \\-  |\n| Cloud mode | \\-  | \\-  | \\-  |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In a web device mode integration, that is, using [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) as a source, the ConvertFlow native SDK is loaded from `https://js.convertflow.co/` domain. Based on your website’s content security policy, you might need to [allowlist this domain](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#allowlist-destination-domain) to load the ConvertFlow SDK successfully.\n\nOnce you have confirmed that the source platform supports sending events to ConvertFlow, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **ConvertFlow**.\n2.  Assign a name to the destination and click **Continue**.\n\n## Connection settings\n\nTo successfully configure ConvertFlow as a destination, you will need to configure the following settings:\n\n[![ConvertFlow connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/convertflow-connection-settings-1.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/convertflow-connection-settings-1.webp)\n\n[![ConvertFlow connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/convertflow-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/convertflow-connection-settings-2.webp)\n\n[![ConvertFlow connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/convertflow-connection-settings-3.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/convertflow-connection-settings-3.webp)\n\n*   **Website ID**: Enter your ConvertFlow website ID.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on obtaining your ConvertFlow website ID, refer to the [FAQ](#faq) section below.\n\n*   **Toggle on to send data through callback**: Enable this setting to allow RudderStack to automatically record your ConvertFlow CTA interactions as `track` events.\n    *   **List of Events**: If **Toggle on to send data through callback** setting is enabled, enter the list of CTA interactions for RudderStack to track.\n    *   **Map your events with ConvertFlow Standard Events**: Use this setting to map the standard ConvertFlow events with custom event names.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on this setting, refer to the [Mapping events](#mapping-events) section below.\n\n*   **Client-side Events Filtering**: This setting lets you specify which events should be blocked or allowed to flow through to ConvertFlow.\n\n*   **Use device mode to send events**: As this is a [web device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode)\\-only destination, this setting is enabled by default and cannot be disabled.\n*   **OneTrust Cookie Categories**: This setting lets you map [OneTrust](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/javascript/) cookie consent groups to RudderStack’s consent purposes.\n\n## Identify\n\nYou can use the [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call to identify your user in ConvertFlow using their [`identify`](https://help.convertflow.com/article/112-convertflow-javascript-api-examples#convertflow-identify) function.\n\nA sample `identify` call is shown below:\n\n```\nrudderanalytics.identify(\n  \"1hKOmRA4GRlm\", {\n    email: \"alex@example.com\",\n    name: \"Alex Keener\"\n  }\n);\n```\n\n### Supported mappings\n\nThe following table lists the mappings between the RudderStack and ConvertFlow properties:\n\n| RudderStack property | ConvertFlow property | Data type | Presence |\n| --- | --- | --- | --- |\n| `traits.email` / `context.traits.email` | `email` | String | Required |\n\n## Track\n\nIf you enable the **Toggle on to send data through callback** dashboard setting, RudderStack records the ConvertFlow CTA interactions and sends them as [track](https://www.rudderstack.com/docs/event-spec/standard-events/track/) events. You can then view and analyze these events in the other tools (connected to the same source in RudderStack).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack only tracks the CTA interactions specified in the **List of Events** field in the dashboard settings. If this setting is not specified, RudderStack tracks all below CTA interactions.\n\n### Supported events\n\nRudderStack automatically records and sends the following [ConvertFlow CTA interactions](https://help.convertflow.com/article/112-convertflow-javascript-api-examples):\n\n| Interaction event | `track` event name | Description |\n| --- | --- | --- |\n| `cfReady` | `CTA Ready` | Fired when the ConvertFlow script is fully initialized and their JavaScript API is ready for use. |\n| `cfView` | `CTA Viewed` | Fired when the user views a CTA and upon each additional step. |\n| `cfConversion` | `CTA Converted` | Fired when the user engages with a CTA, for example, clicking a button, submitting a form, selecting a survey, etc. |\n| `cfCompletion` | `CTA Completed` | Fired when the ‘Track completion of CTA’ automation marks a CTA as complete. |\n| `cfSubmit` | `CTA Form Submitted` | Fired when the CTA form and the associated survey elements have been submitted. |\n| `cfAddToCart` | `Product Addded to Cart` | Fired when the user adds a product to their cart using the ConvertFlow products elements. |\n| `cfClose` | `CTA Closed` | Fired when the user closes a CTA. |\n\nA sample CTA conversion event is shown below:\n\n```\nwindow.addEventListener(\"cfConversion\", function(event) {\n  rudderanalytics.track(\"CTA Converted\", {\n    cta_name: \"CTA123\",\n    cta_type: \"inline\",\n    cta_id: 124573221,\n    cta_variant: \"a\",\n    cta_step: 1,\n  });\n});\n```\n\n### Mapping events\n\nYou can also update the standard ConvertFlow CTA events with custom event names by enabling the **Map your events with ConvertFlow Standard Events** setting in the RudderStack dashboard and specifying the required mapping:\n\n[![ConvertFlow event name mapping](https://www.rudderstack.com/docs/images/event-stream-destinations/convertflow-event-mapping.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/convertflow-event-mapping.webp)\n\nBased on the mappings set in the above image, RudderStack replaces the standard event names `\"CTA Viewed\"` and `\"CTA Converted\"`with `\"Viewing CTA\"` and `\"Converting CTA\"` respectively.\n\n## FAQ\n\n#### Where can I find the ConvertFlow website ID?\n\nTo get your ConvertFlow website ID, follow these steps:\n\n1.  Log into your [ConvertFlow account](https://app.convertflow.com/login).\n2.  Select your website under **Active websites**:\n\n[![ConvertFlow websites](https://www.rudderstack.com/docs/images/event-stream-destinations/convertflow-websites.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/convertflow-websites.webp)\n\n3.  You can find the website ID present in your URL:\n\n[![ConvertFlow website ID](https://www.rudderstack.com/docs/images/event-stream-destinations/convertflow-website-id.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/convertflow-website-id.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "ConvertFlow | RudderStack Docs",
  "description": "Send your event data from RudderStack to ConvertFlow.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/comscore/",
  "markdown": "# comScore | RudderStack Docs\n\nSend your event data from RudderStack to comScore.\n\n* * *\n\n*     4 minute read  \n    \n\n[comScore](https://direct.comscore.com/) is a self-service portal that helps you tag all your digital assets and ensure the right exposure of your online content like web pages, videos, mobile apps, ad networks, and more.\n\n## Getting started\n\nRudderStack supports sending events to comScore only in [mobile device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode).\n\n| Connection Mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| Device mode | \\-  | **Supported** | \\-  |\n| Cloud mode | \\-  | \\-  | \\-  |\n\nOnce you have confirmed that the source platform supports sending events to comScore, follow these steps:\n\n1.  In your [RudderStack dashboard](https://app.rudderstack.com/), go to **Directory** > **Destinations** > **Cloud Destinations** and search for **Comscore**.\n2.  Connect your source and click **Continue**.\n\n### Connection settings\n\nConfigure the following settings to set up comScore as a destination in RudderStack:\n\n*   **Publisher ID**: Enter the client ID/C2 value associated with your mobile app. See [FAQ](#faq) for more information on obtaining this value.\n*   **App Name**: Enter your source app name. RudderStack includes this parameter in the events to specify the source app for getting the tags and data.\n*   **Only auto update when app is in foreground**: This setting is turned on by default and updates your app usage data only when the application runs in the foreground.\n*   **Auto update when app is in foreground and background**: Turn on this setting to update your app usage data when the application is running in the foreground **and** background.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that if turned on, this setting will override the **Only auto update when app is in foreground** setting.\n\n*   **Auto Update Interval**: Use this setting to specify the time interval between the updates.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   This setting is applicable only if the auto updates are turned on.\n> *   The default value of this field is 60 seconds.\n\n*   **Client-side Event Filtering**: This setting lets you specify which events should be blocked or allowed to flow through to comScore. See [Client-side Event Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) for more information.\n*   **OneTrust Cookie Categories**: This setting lets you associate the [OneTrust](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/) cookie consent groups to comScore.\n*   **iOS/Android SDK Settings**: As this is a device mode-only integration, the **Use device mode to send events** setting is toggled on by default.\n\n## Adding device mode integration\n\nOnce you add comScore as a destination in the [RudderStack dashboard](https://app.rudderstack.com/), follow these steps to add the native mobile SDK to your project depending on your integration platform:\n\nTo add comScore to your Android project:\n\n1.  Open your `app/build.gradle` (Module: app) file and add the following under `dependencies`:\n\n```\nimplementation 'com.rudderstack.android.sdk:core:[1.17.0, 2.0.0)'\nimplementation 'com.rudderstack.android.integration:comscore:[1.1.0,)'\n\n// It enables Comscore to collect a privacy-friendly publisher-specific device identifier, App Set ID, for estimating the number of unique users for audience research purposes.\nimplementation 'com.google.android.gms:play-services-appset:16.+'\n```\n\n2.  Change the SDK initialization in your `Application` class:\n\n```\nval rudderClient = RudderClient.getInstance(\n            this,\n            WRITE_KEY,\n            RudderConfig.Builder()\n                .withDataPlaneUrl(DATA_PLANE_URL)\n                .withFactories(ComscoreIntegrationFactory.FACTORY)\n                .build()\n        )\n```\n\nTo add comScore to your iOS project:\n\n1.  Add the following line to your CocoaPods `Podfile`:\n\n2.  After adding the dependency, register `RudderComscoreFactory` with your SDK initialization as a `factory` or `RudderConfig`. To do so, import the `RudderComScoreFactory.h` in your `AppDelegate.m` file:\n\n```\n#import \"RudderComscoreFactory.h\"\n```\n\n3.  Change the SDK initialization to:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[configBuilder withFactory:[RudderComscoreFactory instance]];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n## Identify\n\nYou can use the [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call to set the user ID and traits as persistent labels in comScore.\n\nRudderStack maps the `identify` events to comScore’s `addPersistentLabels` API, followed by making a call to comScore’s `notifyHiddenEvent` API.\n\nA sample `identify` call is shown:\n\n```\nRudderClient.getInstance()?.identify(\n            \"1hKOmRA4GRlm\",\n            RudderTraits()\n                .putEmail(\"alex@example.com\")\n                .put(\"trait_key_1\", \"trait_value_1\")\n                .put(\"trait_key_2\", 4567),\n            null\n        )\n```\n\n## Track\n\nYou can use the [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call to record user actions. RudderStack also sends any associated properties as labels to comScore.\n\nRudderStack maps the `track` events to comScore’s `notifyHiddenEvent` API.\n\nA sample `track` call is shown:\n\n```\nRudderClient.getInstance()?.track(\n            \"Event name\",\n            RudderProperty()\n                .putValue(\"property_track_key_1\", \"property_value_1\")\n                .putValue(\"property_track_key_2\", 987654)\n                .putValue(\"prop3\", \"value3\")\n        )\n```\n\n## Screen\n\nYou can use the [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call to record whenever a user views their mobile screen and capture any properties about the viewed screen.\n\nRudderStack maps the `screen` events to comScore’s `notifyViewEvent` API.\n\nA sample `screen` call is shown:\n\n```\nRudderClient.getInstance()?.screen(\n            \"Screen event name\",\n            RudderProperty()\n                .putValue(\"property_screen_key_1\", \"property_value_2\")\n                .putValue(\"property_screen_key_2\", 9876542)\n        )\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For both `track` and `screen` events, RudderStack maps the event name with comScore’s `name` field. It sends all the other properties to comScore as is, without any modifications.\n\n## Reset\n\nUse the `reset` call to reset `userId` and the associated traits.\n\nA sample `reset` call is shown:\n\n```\nRudderClient.getInstance()?.reset(true)\n```\n\n## FAQ\n\n#### Where can I find the comScore Publisher ID?\n\n1.  Log in to your [comScore Direct account](https://direct.comscore.com/).\n2.  Go to the **Mobile app** tab.\n3.  Click **Get Tag** and copy the C2 value.\n\n[![comScore Publisher ID](https://www.rudderstack.com/docs/images/event-stream-destinations/comscore-c2-value.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/comscore-c2-value.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "comScore | RudderStack Docs",
  "description": "Send your event data from RudderStack to comScore.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/attentive-tag/",
  "markdown": "# Attentive Tag | RudderStack Docs\n\nSend your event data from RudderStack to Attentive.\n\n* * *\n\n*     5 minute read  \n    \n\n[Attentive](https://www.attentivemobile.com/) is a text message marketing platform. It provides personalized text messaging solutions to help you create customer-first connections. It also provides [Attentive Tag](https://help.attentivemobile.com/hc/en-us/articles/10905920909460-The-Attentive-tag) which you can add to your website to capture events and behavioral data, track revenue, and more.\n\nFind the open source transformer code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/master/src/v0/destinations/attentive_tag).\n\n## Getting started\n\nRudderStack supports sending event data to Attentive via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| Connection Mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| Device mode | \\-  | \\-  | \\-  |\n| Cloud mode | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the source platform supports sending events to Attentive, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **Attentive Tag**.\n2.  Assign a name to the destination and click **Continue**.\n\n## Connection settings\n\nTo successfully configure Attentive as a destination, you will need to configure the following settings:\n\n*   **API Key**: Enter the Attentive API key for the app you have created in your Attentive dashboard.\n*   **Sign Up Source Id**: Enter the signup method’s ID present in the **Sign-up Units** option in the Attentive dashboard.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on getting the **API Key** and **Sign Up Source ID**, see [FAQ](#faq).\n\n## Identify\n\nYou can subscribe or unsubscribe a user from an Attentive list using the [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The default behavior of `identify` call is to subscribe a user. To unsubscribe, you can pass `identifyOperation` as `unsubscribe` in the `integrations` object.\n\n### Subscribing users\n\nRudderStack maps the following traits to the Attentive properties while subscribing a user:\n\n| RudderStack trait | Attentive property |\n| --- | --- |\n| `traits.email`/`context.traits.email`/`properties.email`  <br>Required, if `phone` is not provided. | `user.email` |\n| `traits.phone`/`context.traits.phone`/`properties.phone`  <br>Required, if `email` is not provided. | `user.phone` |\n| `integrations.attentive_tag.signUpsourceId`  <br>Required, if not specified in the RudderStack dashboard. | `signUpSourceId` |\n| `externalId` | `externalIdentifiers` |\n| `context.traits.customIdentifiers`/`traits.customIdentifiers` | `externalIdentifiers.customIdentifiers` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   The `externalIdentifiers` property can be an array of objects containing identifiers like `clientUserId`, `shopifyId`, `klaviyoId`.\n> *   RudderStack prioritizes the `signUpSourceId` property in the `integrations` object over the value specified in the **Sign Up Source Id** dashboard setting.\n\nA sample `identify` call to subscribe a user is as follows:\n\n```\nrudderanalytics.identify(\"jbu3471\", {\n  \"email\": \"alex@example.com\",\n  \"phone\": \"+1-202-555-0146\",\n  \"customIdentifiers\": [{\n    \"name\": \"string\",\n    \"value\": \"string\"\n  }]\n}, {\n  \"externalId\": [{\n      \"type\": \"clientUserId\",\n      \"id\": \"144\"\n    },\n    {\n      \"type\": \"shopifyId\",\n      \"id\": \"224\"\n    },\n    {\n      \"type\": \"klaviyoId\",\n      \"id\": \"132\"\n    }\n  ],\n  \"integrations\": {\n    \"signUpSourceId\": \"347393\"\n  }\n});\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The `externalId` fields are case-sensitive. Also, RudderStack expects them to be in the above format for mapping them correctly.\n\n### Unsubscribing users\n\nYou can set `identifyOperation` to `unsubscribe` in the `integrations` object to unsubscribe a user:\n\n```\nrudderanalytics.identify(\"jbu3471\", {\n  \"email\": \"alex@example.com\",\n  \"phone\": \"+1-202-555-0146\",\n}, {\n  \"integrations\": {\n    \"attentive_tag\": {\n      \"identifyOperation\": \"unsubscribe\",\n    },\n    \"subscriptions\": [{\n      \"type\": \"MARKETING\",\n      \"channel\": \"TEXT\"\n    }],\n    \"notification\": {\n      \"language\": \"en-US\"\n    }\n  }\n});\n```\n\nRudderStack maps the following traits to the Attentive properties while unsubscribing a user:\n\n| RudderStack trait | Attentive property |\n| --- | --- |\n| `traits.email`/`context.traits.email`/`properties.email`  <br>Required, if `phone` is not provided. | `email` |\n| `traits.phone`/`context.traits.phone`/`properties.phone`  <br>Required, if `email` is not provided. | `phone` |\n| `integrations.attentive_tag.subscriptions` | `subscriptions` |\n| `integrations.attentive_tag.notification` | `notification` |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Passing an `email` attribute does not locate or unsubscribe a user from SMS subscription. Similarly, passing the `phone` attribute does not locate or unsubscribe a user from email subscription.\n\nYou can also unsubscribe a user from a channel by specifying it in `subscriptions` within the `integrations` object. The supported values for `subscriptions` are:\n\n```\n\"subscriptions\": [{\n    \"type\": \"MARKETING\" || \"TRANSACTIONAL\" || \"CHECKOUT_ABANDONED\"\n    \"channel\": \"TEXT\" || \"EMAIL\"\n  }]\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can also provide the `language` in the `notification` inside the `integrations` object to change the notification language. Currently, RudderStack supports only `en-US` and `fr-CA` as the notification languages, which are case-sensitive.\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you capture the user actions along with the associated properties.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack does not trigger an event if the timestamp is older than 12 hours.\n\n### Property mapping\n\nRudderStack maps the following `track` call properties to the Attentive properties:\n\n| RudderStack property | Attentive property |\n| --- | --- |\n| `event`  <br>Required | `type` |\n| `traits.email`/`context.traits.email`/`properties.email` | `user.email` |\n| `traits.phone`/`context.traits.phone`/`properties.phone` | `user.phone` |\n| `externalId` | `user.externalIdentifiers` |\n| `properties` | `properties` |\n| `originalTimestamp`/`timestamp` | `occuredAt` |\n| `properties.eventId` | `externalEventId` |\n| `context.traits.customIdentifiers`/`traits.customIdentifiers` | `user.externalIdentifiers.customIdentifiers` |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   You must specify the timestamp in the ISO 8601 format.\n> *   The event type is case-sensitive. For example, Attentive considers `Order shipped` and `Order Shipped` as different events.\n> *   The keys of the `properties` object should not contain characters, like \\[`'`, `\"`, `{`, `}`, `[`, `]`, \\\\ , `,`\\]\n\n### Ecommerce events\n\nRudderStack converts the following ecommerce events to the corresponding Attentive events:\n\n| RudderStack event | Attentive event |\n| --- | --- |\n| Product List Viewed  <br>Product Viewed | `product-view` |\n| Product Added | `add-to-cart` |\n| Order Completed | `purchase` |\n\n#### Product List Viewed\n\nRudderStack maps the `Product List Viewed` event properties to the following Attentive properties:\n\n| RudderStack property | Attentive Tag property |\n| --- | --- |\n| `properties.products.$.product_id`  <br>Required | `items.productId` |\n| `properties.products.$.price`  <br>Required | `items.price.$.value` |\n| `properties.products.$.variant`  <br>Required | `items.productVariantId` |\n| `traits.email`/`context.traits.email`/`properties.email` | `user.email` |\n| `traits.phone`/`context.traits.phone`/`properties.phone` | `user.phone` |\n| `externalId` | `user.externalIdentifiers` |\n| `properties.products.$.currency` | `items.price.$.currency` |\n| `properties.products.$.name` | `items.name` |\n| `properties.products.$.url` | `items.productUrl` |\n| `properties.products.$.image_url` | `items.productImage` |\n| `context.traits.customIdentifiers`/`traits.customIdentifiers` | `user.externalIdentifiers.customIdentifiers` |\n\n#### Product Viewed/Product Added\n\nRudderStack maps the `Product Viewed` and `Product Added` event properties to the following Attentive properties:\n\n| RudderStack property | Attentive property |\n| --- | --- |\n| `properties.product_id`  <br>Required | `items.productId` |\n| `properties.price`  <br>Required | `items.price.$.value` |\n| `properties.variant`  <br>Required | `items.productVariant.Id` |\n| `properties.currency` | `items.price.$.currency` |\n| `properties.name` | `items.name` |\n| `properties.url` | `items.productUrl` |\n| `properties.image_url` | `items.productImage` |\n| `traits.email`/`context.traits.email`/`properties.email` | `user.email` |\n| `traits.phone`/`context.traits.phone`/`properties.phone` | `user.phone` |\n| `externalId` | `user.externalIdentifiers` |\n| `context.traits.customIdentifiers`/`traits.customIdentifiers` | `user.externalIdentifiers.customIdentifiers` |\n\n#### Order Completed\n\nRudderStack maps the `Order Completed` event properties to the following Attentive properties:\n\n| RudderStack property | Attentive property |\n| --- | --- |\n| `properties.products.$.variant`  <br>Required | `items.productVariantId` |\n| `properties.products.$.product_id`  <br>Required | `items.productId` |\n| `properties.products.$.price`  <br>Required | `items.price.$.value` |\n| `properties.products.$.currency` | `items.price.$.currency` |\n| `properties.products.$.name` | `items.name` |\n| `properties.products.$.url` | `items.productUrl` |\n| `properties.products.$.image_url` | `items.productImage` |\n| `traits.email`/`context.traits.email`/`properties.email` | `user.email` |\n| `traits.phone`/`context.traits.phone`/`properties.phone` | `user.phone` |\n| `externalId` | `user.externalIdentifiers` |\n| `context.traits.customIdentifiers`/`traits.customIdentifiers` | `user.externalIdentifiers.customIdentifiers` |\n\nThe following snippet highlights a sample `track` call for the above ecommerce event parameters:\n\n```\nrudderanalytics.track(\"Order Completed\", {\n  \"products\": [{\n    \"product_id\": \"507f1f77bcf86cd799439011\",\n    \"name\": \"MOBILE\",\n    \"variant\": \"green\",\n    \"price\": \"19\",\n    \"image_url\": \"image.com\",\n    \"url\": \"url.com\",\n    \"quantity\": \"2\",\n    \"currency\": \"USD\"\n  }]\n}, {\n  \"traits\": {\n    \"email\": \"alex@example.com\",\n    \"phone\": \"+1-202-555-0146\"\n  },\n  \"externalId\": [{\n      \"type\": \"clientUserId\",\n      \"id\": \"144\"\n    },\n    {\n      \"type\": \"shopifyId\",\n      \"id\": \"224\"\n    },\n    {\n      \"type\": \"klaviyoId\",\n      \"id\": \"132\"\n    }\n  ]\n});\n```\n\n## FAQ\n\n#### Where can I find the Attentive Tag API Key?\n\n1.  In your [Attentive dashboard](https://ui.attentivemobile.com/), go to **Marketplace**.\n2.  Create an app by clicking **Create App**.\n3.  Then, click **Create** and you will be able to see the API key for the app:\n\n[![Attentive Tag Connection Settings](https://www.rudderstack.com/docs/images/event-stream-destinations/attentive-tag-connection-settings-1.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/attentive-tag-connection-settings-1.webp)\n\n#### Where can I find the Attentive Tag Sign Up Source Id?\n\nGo to the **Sign-up Units** option in your [Attentive dashboard](https://ui.attentivemobile.com/). Locate the ID next to **Sign-up method**:\n\n[![Attentive Tag Connection Settings](https://www.rudderstack.com/docs/images/event-stream-destinations/attentive-tag-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/attentive-tag-connection-settings-2.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Attentive Tag | RudderStack Docs",
  "description": "Send your event data from RudderStack to Attentive.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/bloomreach/cloud-mode/",
  "markdown": "# Bloomreach Cloud Mode Integration | RudderStack Docs\n\nSend events to Bloomreach using RudderStack cloud mode.\n\n* * *\n\n*     3 minute read  \n    \n\nAfter you have successfully instrumented Bloomreach as a destination in RudderStack, follow this guide to correctly send your events to Bloomreach in [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode). RudderStack uses Bloomreach’s [batch commands API](https://documentation.bloomreach.com/engagement/reference/batch-commands-2) which supports up to 50 commands/calls in a batch.\n\nFind the open source transformer code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/master/src/cdk/v2/destinations/bloomreach).\n\n## Identify\n\nYou can use the [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call to create or update customer properties in Bloomreach.\n\nA sample `identify` call is shown:\n\n```\nrudderanalytics.identify(\"27340af5c8819\", {\n  name: \"Alex Keener\",\n  email: \"alex@example.com\",\n  logins: 2\n})\n```\n\n### Supported mappings\n\nRudderStack maps the following properties to the corresponding Bloomreach properties:\n\n| RudderStack property | Bloomreach property |\n| --- | --- |\n| `userId`  <br>Required, if anonymousId is absent. | Hard ID (mentioned in the RudderStack dashboard setting) |\n| `anonymousId`  <br>Required, if userId is absent. | Soft ID (mentioned in the RudderStack dashboard setting) |\n| `traits` | `properties` |\n| `timestamp`  <br>`originalTimestamp` | `update_timestamp` |\n\n## Track\n\nYou can use the [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call to capture user events along with the associated properties.\n\nA sample `track` call is shown:\n\n```\nrudderanalytics.track(\"Product Reviewed\", {\n  review_id: \"86ac1cd43\",\n  product_id: \"9578257311\",\n  rating: 3.0,\n  review_body: \"OK for the price. It works but the material feels flimsy.\"\n})\n```\n\n### Supported mappings\n\nRudderStack maps the following properties to the corresponding Bloomreach properties:\n\n| RudderStack property | Bloomreach property |\n| --- | --- |\n| `userId`  <br>Required, if anonymousId is absent. | Hard ID (mentioned in the RudderStack dashboard setting) |\n| `anonymousId`  <br>Required, if userId is absent. | Soft ID (mentioned in the RudderStack dashboard setting) |\n| `event`  <br>Required | `event_type` |\n| `properties` | `properties` |\n| `timestamp`  <br>`originalTimestamp` | `timestamp` |\n\n## Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record your website’s page views with any additional relevant information about the viewed page.\n\nA sample `page` call is shown:\n\n```\nrudderanalytics.page(\"Home\")\n```\n\n### Supported mappings\n\nRudderStack maps the following properties to the corresponding Bloomreach properties:\n\n| RudderStack property | Bloomreach property |\n| --- | --- |\n| `userId`  <br>Required, if anonymousId is absent. | Hard ID (mentioned in the RudderStack dashboard setting) |\n| `anonymousId`  <br>Required, if userId is absent. | Soft ID (mentioned in the RudderStack dashboard setting) |\n| `Viewed {{ category }} {{ name }} Page`  <br>Required | `event_type` |\n| `properties` | `properties` |\n| `timestamp`  <br>`originalTimestamp` | `timestamp` |\n\n## Screen\n\nYou can use the [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call to record whenever a user views their mobile screen and capture any properties about the viewed screen.\n\nA sample `screen` call is shown:\n\n```\n[\n  [RSClient sharedInstance] screen: @ \"Main\"\n  properties: @ {\n    @ \"title\": \"Home | RudderStack\",\n      @ \"url\": @ \"http://www.rudderstack.com\"\n  }\n];\n```\n\n### Supported mappings\n\nRudderStack maps the following properties to the corresponding Bloomreach properties:\n\n| RudderStack property | Bloomreach property |\n| --- | --- |\n| `userId`  <br>Required, if anonymousId is absent. | Hard ID (mentioned in the RudderStack dashboard setting) |\n| `anonymousId`  <br>Required, if userId is absent. | Soft ID (mentioned in the RudderStack dashboard setting) |\n| `Viewed {{ category }} {{ name }} Screen`  <br>Required | `event_type` |\n| `properties` | `properties` |\n| `timestamp`  <br>`originalTimestamp` | `timestamp` |\n\n## Send multiple hard and soft IDs\n\nBloomreach supports multiple hard and soft IDs which you can use for customer identification and profile merging.\n\nIf you want to send multiple hard and soft IDs, apart from setting one in the RudderStack dashboard, you can send them in the `integrations` object as shown:\n\n```\n{\n  All: true,\n  BLOOMREACH: {\n    hardID: {\"test_key\": \"value\"}\n    softID: {google_analytics: \"test_id1\", \"other_id\": \"test_id2\"}\n  },\n};\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Bloomreach Cloud Mode Integration | RudderStack Docs",
  "description": "Send events to Bloomreach using RudderStack cloud mode.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/blueshift/",
  "markdown": "# Blueshift | RudderStack Docs\n\nSend your event data from RudderStack to Blueshift.\n\n* * *\n\n*     5 minute read  \n    \n\n[Blueshift’s](https://blueshift.com/) SmartHub customer data platform helps consumer brands scale customer engagement intelligently on every channel. It enables marketers to unify their siloed data and use real-time customer insights and interactions to shape customer experiences.\n\nRudderStack supports Blueshift as a destination to which you can seamlessly send your event data.\n\n## Getting started\n\nBefore configuring Blueshift as a destination in RudderStack, verify if the source platform is supported by Blueshift by referring to the table below:\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | \\-  | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the source platform supports sending events to Blueshift, follow these steps:\n\n*   From your [RudderStack dashboard](https://app.rudderstack.com/), add the source. Then, from the list of destinations, select **Blueshift**.\n\n## Connection settings\n\nTo successfully configure Blueshift as a destination, you will need to configure the following settings:\n\n[![Blueshift connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/blueshift-connection-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/blueshift-connection-settings.webp)\n\n*   **Event API Key**: Enter the Event API Key generated for your Blueshift account. You can find it in your Blueshift dashboard by going to **Account Settings** > **API Keys**.\n*   **Users API Key**: Enter the Users API Key generated for your Blueshift account. You can find it in your Blueshift dashboard by going to **Account Settings** > **API Keys**.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on obtaining the Event and Users API Key, refer to the [FAQ](#faq) section below.\n\n*   **Data Center**: Select the data center where you want to send the data:\n    *   **Standard** (default): The base URL is `https://api.getblueshift.com`.\n    *   **EU**: The base URL is `https://api.eu.getblueshift.com`.\n\n## Identify\n\nThe `identify` call lets you create new or update existing customers and record the traits about them like their name, email address, etc. A sample `identify` call is shown below:\n\n```\nrudderanalytics.identify(\"1hKOmRA4el9Zt1WSfVJIVo4GRlm\", {\n  email: \"alex@example.com\",\n  phone: \"+1-202-555-0146\",\n  firstName: \"Alex\",\n  lastName: \"Keener\",\n});\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> It is recommended to limit the `identify` calls to 50 per second.\n\n### Supported mappings\n\nThe following table details the mapping between RudderStack and Blueshift fields:\n\n| RudderStack field | Blueshift field | Presence |\n| --- | --- | --- |\n| `email` | `email` | Required |\n| `userId` | `customer_id` | Required |\n| `event` | `event` | Optional |\n| `phone` | `phone_number` | Optional |\n| `firstName` | `firstname` | Optional |\n| `lastName` | `lastname` | Optional |\n| `gender` | `gender` | Optional |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Blueshift supports custom attributes from your site’s customers. For more information on these attributes, refer to [Blueshift Custom Attributes](https://developer.blueshift.com/docs/customer-related-data#attributes).\n\n## Track\n\nThe `track` call lets you capture user events along with the associated properties.\n\nA sample `track` call is shown below:\n\n```\nrudderanalytics.track(\n  \"Product Viewed\", {\n    cookie: \"1234abcd-efghijkj-1234kfjadslk-34iu123\",\n    checkout_id: \"C324532\",\n    order_id: \"T1230\",\n    value: 15.98,\n    revenue: 16.98,\n    shipping: 3.0,\n    coupon: \"FY21\",\n    currency: \"USD\",\n    products: [{\n      product_id: \"product-mixedfruit-jam\",\n      sku: \"sku-1\",\n      category: \"Food\",\n      name: \"Food/Drink\",\n      brand: \"Sample\",\n      variant: \"None\",\n      price: 10.0,\n      quantity: 2,\n      currency: \"USD\",\n      position: 1,\n      value: 6.0,\n      typeOfProduct: \"Food\",\n      url: \"https://www.example.com/product/mixedfruit-jam\",\n      image_url: \"https://www.example.com/product/mixedfruit-jam.jpg\",\n    }, ],\n  },\n);\n```\n\n### Supported mappings\n\nRudderStack maps the following [ecommerce events](https://www.rudderstack.com/docs/event-spec/ecommerce-events-spec/) to the Blueshift events in the `track` call before sending them over Blueshift’s HTTP API.\n\n| RudderStack event | Blueshift event |\n| --- | --- |\n| `Product Viewed` | `view` |\n| `Product Added` | `add_to_cart` |\n| `Order Completed` | `purchase` |\n| `Products Searched` | `search` |\n| `Checkout Step Viewed` | `checkout` |\n| `Product Removed` | `remove_from_cart` |\n\nThe other generic event mappings are listed below:\n\n| RudderStack event | Blueshift event |\n| --- | --- |\n| `Subscribe Interest` | `subscribe_interest` |\n| `Unsubscribe Interest` | `unsubscribe_interest` |\n| `Identify` | `identify` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Blueshift supports custom events to track any custom user action on your site or app. For more information, refer to the [Blueshift Custom Event](https://developer.blueshift.com/docs/your-sites-event-data#custom-event) guide.\n\nThe following table details the mapping between RudderStack and Blueshift fields:\n\n| RudderStack field | Blueshift field | Presence |\n| --- | --- | --- |\n| `event` | `event` | Required |\n| `userId` | `customer_id` | Optional |\n| `email` | `email` | Optional |\n| `context.device.type` | `device_type` | Optional |\n| `context.device.token` | `device_token` | Optional |\n| `context.device.id` | `device_id` | Optional |\n| `context.idfa`/`context.device.advertisingId` | `device_idfa` | Optional |\n| `context.idfv`/`context.device.id` | `device_idfv` | Optional |\n| `context.device.manufacturer` | `device_manufacturer` | Optional |\n| `context.os.name` | `os_name` | Optional |\n| `context.network.carrier` | `network_carrier` | Optional |\n| `context.ip`/`request_ip` | `ip` | Optional |\n| `context.address.latitude`/`context.location.latitude` | `latitude` | Optional |\n| `context.address.longitude`/`context.location.longitude` | `longitude` | Optional |\n| `messageId` | `event_uuid` | Optional |\n| `properties.cookie` | `cookie` | Optional |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `event` name is a required field and should **not** contain a period (.), a numeric value, or be more than 64 characters. Otherwise, RudderStack will reject the event and throw an error.\n> \n> Also, RudderStack automatically converts a space in the event name to an underscore (\\_). So, an event name like `custom events` will be converted to `custom_events` before sending it to Blueshift.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Blueshift supports receiving custom attributes about your site’s customers. For more information on these attributes, refer to the [Blueshift Custom Attributes](https://developer.blueshift.com/docs/customer-related-data#attributes).\n\n## Group\n\nThe `group` call lets you associate a user with a group. For each `group` call, RudderStack triggers Blueshift’s [`event`](https://developer.blueshift.com/reference/post_api-v1-event) API and sends an `identify` event along with the `groupId`. Blueshift then creates a group and adds the user to it.\n\nA sample `group` call is shown below:\n\n```\nrudderanalytics.group(\"ruddersample\", {\n  name: \"Alex Keener\",\n  email: \"alex@example.com\",\n  userId: \"1hKOmRA4el9Zt1WSfVJIVo4GRlm\",\n  phone: \"+1-202-555-0146\",\n});\n```\n\n### Supported mappings\n\nThe following table details the mapping between RudderStack and Blueshift fields:\n\n| RudderStack field | Blueshift field | Presence |\n| --- | --- | --- |\n| `groupId` | `group_id` | Required |\n| `userId` | `customer_id` | Required |\n| `email` | `email` | Optional |\n| `context.device.type` | `device_type` | Optional |\n| `context.device.token` | `device_token` | Optional |\n| `context.device.id` | `device_id` | Optional |\n| `context.idfa`/`context.device.advertisingId` | `device_idfa` | Optional |\n| `context.idfv`/`context.device.id` | `device_idfv` | Optional |\n| `context.device.manufacturer` | `device_manufacturer` | Optional |\n| `context.os.name` | `os_name` | Optional |\n| `context.network.carrier` | `network_carrier` | Optional |\n| `context.ip`, `request_ip` | `ip` | Optional |\n| `context.address.latitude`, `context.location.latitude` | `latitude` | Optional |\n| `context.address.longitude`, `context.location.longitude` | `longitude` | Optional |\n| `messageId` | `event_uuid` | Optional |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Blueshift supports receiving custom attributes about your site’s customers. For more information on these attributes, refer to the [Blueshift Custom Attributes](https://developer.blueshift.com/docs/customer-related-data#attributes).\n\n## FAQ\n\n#### How do I obtain the Blueshift API keys?\n\nTo obtain the API keys, log into the Blueshift app, go to **Account Settings** and then to the **API keys** tab. You can obtain the following API keys, based on your role:\n\n*   Event API key (EVENT\\_API\\_KEY)\n*   Users API key (USER\\_API\\_KEY) (visible only to admin users)\n\n[![Blueshift API key](https://www.rudderstack.com/docs/images/event-stream-destinations/blueshift-api-keys.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/blueshift-api-keys.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Blueshift | RudderStack Docs",
  "description": "Send your event data from RudderStack to Blueshift.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/courier/",
  "markdown": "# Courier | RudderStack Docs\n\n## Courier Beta\n\nSend data from RudderStack to Courier.\n\n* * *\n\n*     2 minute read  \n    \n\n[Courier](https://www.courier.com/) is an API and web studio for development teams to manage product-triggered notifications (email, chat, in-app, SMS, push, etc.) in one place.\n\n## Getting started\n\nRudderStack supports sending event data to Courier via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| Connection Mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| Device mode | \\-  | \\-  | \\-  |\n| Cloud mode | Supported | Supported | Supported |\n\nOnce you have confirmed that the source platform supports sending events to Courier, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **Courier**.\n2.  Assign a name to the destination and click **Continue**.\n\n## Connection settings\n\nTo successfully configure Courier as a destination, you will need to configure the following settings:\n\n*   **API Key**: Enter your Courier API key. For more information on obtaining the API key, refer to the [FAQ](#faq) section.\n\n## Identify\n\nYou can use the [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call to sync users from RudderStack to Courier. If a user already exists in Courier, RudderStack updates the user profile with the latest values.\n\nA sample `identify` event is shown below:\n\n```\nrudderanalytics.identify('1hKOmRA4GRlm', {\n  name: 'Alex Keener',\n  email: 'alex@example.com',\n  avatar: 'https://example.com/avatars/alexkeener.webp',\n  role: 'CEO'\n});\n```\n\nYou can view the synced users in Courier’s [Users](https://app.courier.com/users) page or access them via Courier API’s.\n\n## Track\n\nYou can use the [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call to ingest events into Courier, which can further be mapped to [Courier Automations](https://www.courier.com/features/automations/).\n\nA sample `track` call is shown below:\n\n```\nrudderanalytics.track('Cart checkout', {\n  product: 'shoe-123',\n  // additional properties\n})\n```\n\nThe `track` events appear on Courier Studio on the [Rudderstack integration](https://app.courier.com/channels/rudderstack) page. For example, the `Cart checkout` event is mapped to `Send shipping details` automation:\n\n[![Courier API Key](https://www.rudderstack.com/docs/images/event-stream-destinations/courier-rudderstack-event.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/courier-rudderstack-event.webp)\n\n## FAQ\n\n#### Where can I find the Courier API key?\n\n1.  Log in to your [Courier dashboard](https://app.courier.com/).\n2.  Go to your app’s **Settings** > **API Keys**. You will find the Courier API key listed here:\n\n[![Courier API Key](https://www.rudderstack.com/docs/images/event-stream-destinations/courier-api-key.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/courier-api-key.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Copy the key based on the environment or scope you want to configure.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Courier | RudderStack Docs",
  "description": "Send data from RudderStack to Courier.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/appsflyer/",
  "markdown": "# AppsFlyer Destination | RudderStack Docs\n\nSend your event data from RudderStack to AppsFlyer.\n\n* * *\n\n*     16 minute read  \n    \n\n[AppsFlyer](https://www.appsflyer.com/) is a mobile attribution and marketing analytics platform. It offers intuitive dashboards, real-time data reports, and a unique deep linking technology to understand your customers better.\n\nFind the open source code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/master/src/v0/destinations/af).\n\n## Getting started\n\nRudderStack supports sending events to AppsFlyer via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | **Supported** | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> It is highly recommended to use cloud mode to send events to AppsFlyer in the following scenarios:\n> \n> *   If you want to use RudderStack’s [Transformations](https://www.rudderstack.com/docs/transformations/overview/) feature.\n> *   If you want to send server-side events.\n\nOnce you have confirmed that the source platform supports sending events to AppsFlyer, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **AppsFlyer**.\n2.  Assign a name to the destination and click **Continue**.\n\n### Connection settings\n\nThe following connection settings are required to configure AppsFlyer as a destination in RudderStack:\n\n*   **Authorization Type**: Select the authorization type from the dropdown:\n    \n    *   **Authorization with dev key**: In the **AppsFlyer Dev Key** field, enter the [AppsFlyer dev key](#faq).\n    *   **Authorization with server to server key**: In the **AppsFlyer server to server Key** field, enter the [server to server token](https://support.appsflyer.com/hc/en-us/articles/360004562377-Managing-API-and-Server-to-server-S2S-tokens#manage-your-tokens).\n*   **App ID**: Enter your Apple or Android app ID.\n    \n    *   **Android App ID**: This the application ID used in your `app/build.gradle` file.\n    *   **Apple App ID**: This is the iTunes Application ID and it is mandatory for the iOS applications.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To connect a source other than Android or Apple (iOS, watchOS, iPadOS, tvOS), you need to add a user transformation that adds the OS information required in the events. Refer to the [Connecting AppsFlyer to non-Android/iOS sources](#connecting-appsflyer-to-non-androidios-sources) section below for more information.\n\n*   **Use Rich Event Names**: Enable this setting to include your app’s screen or page name in the [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) or [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) event names.\n    \n*   **Add properties at root in eventValue**: Enable this setting to include the custom properties at the root level of `eventValue` field. Otherwise, RudderStack sends them in the `properties` field inside `eventValue`.\n    \n*   **Sharing Filter**: By default, the value for this setting is set to `all`. You can use this setting to meet any regulatory requirements like GDPR and CCPA, complying with user opt-out mechanisms, and for any other business use-case. For more information, refer to the [AppsFlyer Help Center](https://support.appsflyer.com/hc/en-us/articles/207034486-Server-to-server-events-API-for-mobile-S2S-mobile-#sharing_filter-16).\n    \n*   **Client-side Event Filtering**: This setting is applicable **only if** you are sending events to AppsFlyer via device mode. It lets you specify which events should be blocked or allowed to flow through to AppsFlyer. Refer to the [Client-side Event Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) guide for more information on this setting.\n    \n*   **Status Callback URLs**: Specify the callback URLs to be used for user deletion requests. You can provide multiple callback URLs by separating them by a comma.\n    \n*   **API Token**: Enter your AppsFlyer API token. For more information on obtaining your API token, refer to this [AppsFlyer guide](https://support.appsflyer.com/hc/en-us/articles/360004562377-Managing-API-tokens).\n    \n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> For user deletion, you must specify both **Status Callback URLs** and **API Token**.\n\n*   **Use device-mode to send events**: Enable this setting to send events from the Android/iOS SDK to Appsflyer via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Starting from version 2.3.0 of AppsFlyer Android and iOS device mode, RudderStack supports sending all the custom properties of `track` events, along with the standard properties.\n\n## Adding device mode integration\n\nOnce you add AppsFlyer as a destination in the [RudderStack dashboard](https://app.rudderstack.com/), follow these steps to add it to your project depending on your integration platform:\n\nTo add AppsFlyer to your iOS project:\n\n1.  Add the following line to your [CocoaPods](https://cocoapods.org/) `Podfile`:\n\n  \n\n2.  After adding the dependency, you need to register `RudderAppsflyerFactory` with your `RudderClient` initialization as a `factory` of `RudderConfig`. To do so, import the `RudderAppsflyerFactory.h` file in your `AppDelegate.m` file:\n\n```\n#import \"RudderAppsflyerFactory.h\"\n```\n\n  \n\n3.  Starting from AppsFlyer iOS device mode version `2.0.0` and above, the RudderStack SDK **does not** automatically initialize the AppsFlyer SDK. You need to initialize the AppsFlyer SDK as shown:\n\n```\n#import <AppsFlyerLib/AppsFlyerLib.h>\n\n[[AppsFlyerLib shared] setAppsFlyerDevKey:<devkey>];\n[[AppsFlyerLib shared] setAppleAppID:<appleappid>];\n[AppsFlyerLib shared].isDebug = YES;\n[[AppsFlyerLib shared] start];\n```\n\n  \n\n4.  Change the iOS SDK initialization to the following:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withTrackLifecycleEvens:YES];\n[builder withRecordScreenViews:YES];\n[builder withFactory:[RudderAppsflyerFactory instance]];\n[builder withLoglevel:RSLogLevelDebug];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This device mode integration is supported for AppsFlyer v6.5.4 and above.\n\nFollow these steps to add AppsFlyer to your iOS project:\n\n1.  Install `RudderAppsFlyer` (available through [CocoaPods](https://cocoapods.org/)) by adding the following line to your `Podfile`:\n\n```\npod 'RudderAppsFlyer', '~> 1.0.0'\n```\n\n  \n\n2.  Run the `pod install` command.\n    \n3.  Import the SDK depending on your preferred platform:\n    \n\n  \n\n4.  Add the imports to your `AppDelegate` file under the `didFinishLaunchingWithOptions` method.\n\n```\nlet config: RSConfig = RSConfig(writeKey: WRITE_KEY)\n            .dataPlaneURL(DATA_PLANE_URL)\n\nRSClient.sharedInstance().configure(with: config)\nclient?.addDestination(RudderAppsFlyerDestination())\n```\n\n  \n\n```\nRSConfig *config = [[RSConfig alloc] initWithWriteKey:WRITE_KEY];\n[config dataPlaneURL:DATA_PLANE_URL];\n\n[[RSClient sharedInstance] configureWith:config];\n[[RSClient sharedInstance] addDestination:[[RudderAppsFlyerDestination alloc] init]];\n```\n\nTo add AppsFlyer to your Android project:\n\n1.  Add the `mavenCentral()` repository:\n\n```\nrepositories {\n    mavenCentral()\n}\n```\n\n2.  Add the following lines to your `app/build.gradle` file under `dependencies`:\n\n```\nimplementation 'com.rudderstack.android.sdk:core:1.+'\nimplementation 'com.rudderstack.android.integration:appsflyer:1.+'\n\nimplementation 'com.appsflyer:af-android-sdk:6.+'\nimplementation 'com.android.installreferrer:installreferrer:2.+'\n```\n\n3.  Starting from AppsFlyer Android device mode version `2.0.0` and above, the RudderStack SDK **does not** automatically initialize the AppsFlyer SDK. Initialize the AppsFlyer SDK as shown:\n\n```\nimport com.appsflyer.AppsFlyerLib;\nimport com.appsflyer.AFLogger;\n\nAppsFlyerLib.getInstance().init(DEV_KEY, null, this);\nAppsFlyerLib.getInstance().setLogLevel(AFLogger.LogLevel.DEBUG);\nAppsFlyerLib.getInstance().start(this);\n```\n\n4.  Change the SDK initialization in your `Application` class:\n\n```\n// initialize Rudder SDK\nval rudderClient: RudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withFactory(AppsFlyerIntegrationFactory.FACTORY)\n            .build()\n    )\n```\n\nTo add AppsFlyer to your React Native project:\n\n1.  Add the RudderStack-AppsFlyer module to your app using the following command:\n\n```\nnpm install @rudderstack/rudder-integration-appsflyer-react-native\n```\n\nOR\n\n```\nyarn add @rudderstack/rudder-integration-appsflyer-react-native\n```\n\n**For AppsFlyer React Native device mode version less than 1.1.0, follow the below step:**\n\n2.  (a) Import the module and add it to your SDK initialization code:\n\n```\nimport rudderClient from \"@rudderstack/rudder-sdk-react-native\"\nimport appsflyer from \"@rudderstack/rudder-integration-appsflyer-react-native\"\nconst config = {\n  dataPlaneUrl: DATA_PLANE_URL,\n  trackAppLifecycleEvents: true,\n  withFactories: [appsflyer],\n}\nrudderClient.setup(WRITE_KEY, config)\n```\n\n**For AppsFlyer React Native device mode version 1.1.0 or above, follow these steps:**\n\n2.  (b) Initialize the AppsFlyer SDK:\n\n```\nimport rudderClient from \"@rudderstack/rudder-sdk-react-native\";\nimport appsflyer from '@rudderstack/rudder-integration-appsflyer-react-native';\nimport {\n    setOptions\n} from '@rudderstack/rudder-integration-appsflyer-react-native';\n\n// Setting options for initializing the appsflyer sdk\nsetOptions({\n    // dev key from the appsflyer dashboard\n    \"devKey\": \"<dev_key>\",\n    // whether we want to run the appsflyer SDK in the debug mode\n    \"isDebug\": true,\n    // whether we want to register for the listeners which would return the conversion data\n    \"onInstallConversionDataListener\": true,\n    // ID assigned by the Apple app store for any app which is either published or in the process of getting published\n    \"appleAppId\": \"<apple_app_id>\",\n    // whether we want to register for the listeners which would return the deeplink data\n    \"onDeepLinkListener\": true,\n    // the number of seconds for which the appsflyer iOS SDK should wait to allow the app to retrieve the user consent.\n    \"timeToWaitForATTUserAuthorization\": 60\n})\n\n// Configuration object to be passed while initializing the Rudder React Native // SDK\nconst config = {\n    dataPlaneUrl: DATA_PLANE_URL,\n    // Passing appsflyer factory here, since we want to run appsflyer as a device mode destination.\n    withFactories: [appsflyer]\n};\n\n// Finally, initializing the RudderStack React Native SDK\nawait rudderClient.setup( WRITE_KEY , config);\n```\n\nAs seen above, the properties `onInstallConversionDataListener` and `onDeepLinkListener` are set to `true` in the `setOptions` API to get access to the conversion as well as the attribution data.\n\n3.  Register the callbacks with the listeners:\n\n```\nimport {\n    onAppOpenAttribution,\n    onAttributionFailure,\n    onDeepLink,\n    onInstallConversionData,\n    onInstallConversionFailure\n} from '@rudderstack/rudder-integration-appsflyer-react-native';\n\nvar onInstallConversionDataCanceller = onInstallConversionData((data) => {\n    console.log(\"On Install Conversion Success data is \", data);\n    if (JSON.parse(res.data.is_first_launch) == true) {\n        if (res.data.af_status === 'Non-organic') {\n            var media_source = res.data.media_source;\n            var campaign = res.data.campaign;\n            console.log('This is first launch and a Non-Organic install. Media source: ' + media_source + ' Campaign: ' + campaign);\n        } else if (res.data.af_status === 'Organic') {\n            console.log('This is first launch and a Organic Install');\n        }\n    } else {\n        console.log('This is not first launch');\n    }\n\n})\n\nvar onAppOpenAttributionCanceller = onAppOpenAttribution((data) => {\n    console.log(\"On App Open Attribution Success and the data is \", data);\n    // write your own custom logic here\n})\n\nvar onAttributionFailureCanceller = onAttributionFailure((data) => {\n    console.log(\"On App Attribution Failure and the data is \", data);\n    // write your own custom logic here\n})\n\nvar onInstallConversionFailureCanceller = onInstallConversionFailure((data) => {\n    console.log(\"On Install Conversion Failure data is \", data);\n    // write your own custom logic here\n})\n\nvar onDeepLinkCanceller = onDeepLink((data) => {\n    console.log(\"On Deeplink data is \", data);\n    // write your own custom logic here\n})\n```\n\n  \n\n4.  Depending on the React Native components you are using, you can trigger an appropriate method, for example:\n\nIf it’s a class-based component, trigger the `remove()` method in `componentWillUnMount()`:\n\n```\nimport React, {\n    Component\n} from 'react';\nimport {\n    AppState,\n    Platform,\n    StyleSheet,\n    Text,\n    View,\n    Button\n} from 'react-native';\nimport appsFlyer from 'react-native-appsflyer';\n\nconst options = {\n    devKey: \"********\",\n    isDebug: true,\n    onInstallConversionData: true\n};\n\nif (Platform.OS === 'ios') {\n    options.appId = \"123456789\";\n}\nthis.onInstallConversionDataCanceller = appsFlyer.onInstallConversionData(\n    data => {\n        console.log(\"GCD\");\n        console.log(data);\n\n    }\n);\n\nthis.onAppOpenAttributionCanceller = appsFlyer.onAppOpenAttribution(\n    data => {\n        console.log(\"OAOA\");\n        console.log(data);\n    }\n);\nappsFlyer.initSdk(options, (result) => {\n    console.log(result);\n}, (error) => {\n    console.error(error);\n});\ntype Props = {};\nexport default class App extends Component  {\n\n        componentWillUnmount() {\n            if (onInstallConversionDataCanceller) {\n                onInstallConversionDataCanceller();\n                console.log('unregister onInstallConversionDataCanceller');\n                onInstallConversionDataCanceller = null;\n            }\n            if (onAppOpenAttributionCanceller) {\n                onAppOpenAttributionCanceller();\n                console.log('unregister onAppOpenAttributionCanceller');\n                onAppOpenAttributionCanceller = null;\n            }\n```\n\nIf it's a functional component, trigger the \\`useEffect()\\` hook:\n\n```\nimport React, {useEffect, useState} from 'react';\nimport {AppState, SafeAreaView, Text, View} from 'react-native';\nimport appsFlyer from 'react-native-appsflyer';\n\nvar onInstallConversionDataCanceller = appsFlyer.onInstallConversionData(\n    (res) => {\n        if (JSON.parse(res.data.is_first_launch) == true) {\n            if (res.data.af_status === 'Non-organic') {\n                var media_source = res.data.media_source;\n                var campaign = res.data.campaign;\n                console.log('This is first launch and a Non-Organic install. Media source: ' + media_source + ' Campaign: ' + campaign);\n            } else if (res.data.af_status === 'Organic') {\n                console.log('This is first launch and a Organic Install');\n            }\n        } else {\n            console.log('This is not first launch');\n        }\n    },\n);\n\nvar onAppOpenAttributionCanceller = appsFlyer.onAppOpenAttribution((res) => {\n    console.log(res);\n});\n\n\nappsFlyer.initSdk(\n    {\n        devKey: 'K2a*********99',\n        isDebug: false,\n        appId: '41******5',\n    },\n    (result) => {\n        console.log(result);\n    },\n    (error) => {\n        console.error(error);\n    },\n);\n\nconst Home = (props) => {\n\n    useEffect(() => {\n        return () => {\n            // Optionaly remove listeners for deep link data if you no longer need them after componentWillUnmount\n            if (onInstallConversionDataCanceller) {\n              onInstallConversionDataCanceller();\n              console.log('unregister onInstallConversionDataCanceller');\n              onInstallConversionDataCanceller = null;\n            }\n            if (onAppOpenAttributionCanceller) {\n              onAppOpenAttributionCanceller();\n              console.log('unregister onAppOpenAttributionCanceller');\n              onAppOpenAttributionCanceller = null;\n            }\n        };\n    });\n\n    return (\n                {'App'}\n    );\n};\n```\n\n  \n\n5.  Open `AppDelegate.m` in the `ios` folder of your app and include the following snippet:\n\n```\n#import \"RudderIntegrationAppsflyerReactNative.h\"\n\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url options:(NSDictionary *) options {\n  [[AppsFlyerAttribution shared] handleOpenUrl:url options:options];\n    return YES;\n}\n\n// Open URI-scheme for iOS 8 and below\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString*)sourceApplication annotation:(id)annotation {\n  [[AppsFlyerAttribution shared] handleOpenUrl:url sourceApplication:sourceApplication annotation:annotation];\n  return YES;\n}\n\n// Open Universal Links\n- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray * _Nullable))restorationHandler {\n    [[AppsFlyerAttribution shared] continueUserActivity:userActivity restorationHandler:restorationHandler];\n    return YES;\n}\n```\n\n  \n\nTo add AppsFlyer to your Cordova project:\n\n1.  Navigate to the root folder of your application and run the following command:\n\n```\ncordova plugin add rudder-integration-appsflyer-cordova\n```\n\n2.  Add the platforms that you want to target for your app:\n\n```\ncordova platform add ios\ncordova platform add android\n```\n\n3.  Run the following command to build the project for all platforms:\n\n  \n\n4.  Add the following code in the `onDeviceReady()` function of your home page to initialize the SDK:\n\n```\nRudderClient.initialize(WRITE_KEY , {\n  dataPlaneUrl: DATA_PLANE_URL,\n  factories: [RudderAppsflyerFactory]\n})\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Make sure to use the `await` keyword with the `initialize` call.\n\nTo add AppsFlyer to your Flutter project:\n\n1.  Open `pubspec.yaml` and add `rudder_integration_appsflyer_flutter` under the `dependencies` section:\n\n```\ndependencies:\n  rudder_integration_appsflyer_flutter: ^1.1.0\n```\n\n2.  Navigate to your application’s root folder and install all the required dependencies:\n\n3.  Import the module installed above and add it to your SDK initialization code:\n\n```\nimport 'package:rudder_sdk_flutter/RudderController.dart';\nimport 'package:rudder_sdk_flutter_platform_interface/platform.dart';\nimport 'package:rudder_integration_appsflyer_flutter/rudder_integration_appsflyer_flutter.dart';\n\nRudderConfigBuilder builder = RudderConfigBuilder();\nbuilder.withDataPlaneUrl(DATA_PLANE_URL);\nbuilder.withFactory(RudderIntegrationAppsflyerFlutter());\nfinal RudderController rudderClient = RudderController.instance;\nrudderClient.initialize(WRITE_KEY,\n  config: builder.build(), options: null);\n```\n\n4.  Add the following dependency to the `android/app/build.gradle` file of your app:\n\n```\ndependencies {\n  implementation 'com.appsflyer:af-android-sdk:6.+'\n}\n```\n\n5.  Initialize the AppsFlyer Android SDK by overriding the `onCreate` method in `MainActivity.java` file (located in your app’s `android/app/src/main/java/com/your_org/your_app_name/` folder). This ensures that AppsFlyer’s Android SDK is initialized beforehand and is available for the Rudderstack Flutter SDK.\n\n```\nimport com.appsflyer.AppsFlyerLib;\nimport com.appsflyer.AFLogger;\n\n@Override\nprotected void onCreate(@Nullable Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  AppsFlyerLib.getInstance().init(\"AF_DEV_KEY\", null, this);\n  AppsFlyerLib.getInstance().setLogLevel(AFLogger.LogLevel.DEBUG);\n  AppsFlyerLib.getInstance().start(this);\n}\n```\n\n6.  Initialize the AppsFlyer iOS SDK by adding the following code at the top of the `didFinishLaunchingWithOptions` method in the `AppDelegate.swift` file (located in your app’s `ios/Runner/` folder):\n\n```\nimport AppsFlyerLib\n\nAppsFlyerLib.shared().appsFlyerDevKey = \"AF_DEV_KEY\"\nAppsFlyerLib.shared().appleAppID = \"APPLE_APP_ID\"\nAppsFlyerLib.shared().isDebug = true\nAppsFlyerLib.shared().start()\n```\n\n## Connecting AppsFlyer to non-Android/iOS sources\n\nAppsFlyer supports all RudderStack sources in addition to Android and iOS. However, you need to [add a transformation](https://www.rudderstack.com/docs/transformations/create/#adding-a-transformation) to the destination as shown:\n\n```\nexport function transformEvent(event, metadata) {\n  event.context.os = {\n    name: \"android\",\n    version: \"8.1.0\"\n  };\n  return event;\n}\n```\n\nSave the transformation and [connect it to your AppsFlyer destination](https://www.rudderstack.com/docs/transformations/manage/#connect-transformation-to-destination) in the RudderStack dashboard.\n\n## Sending events via RudderStack cloud mode\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> It is highly recommended to send events to AppsFlyer via [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode) only in the following scenarios:\n> \n> *   To use RudderStack’s [Transformations](https://www.rudderstack.com/docs/transformations/overview/) feature to transform your events\n> *   To send server-side events\n\nTo send events to AppsFlyer via cloud mode, you need the AppsFlyer ID generated by the Appsflyer SDK that is integrated with your app. See [Obtaining the AppsFlyer ID](#obtaining-the-appsflyer-id) for reference.\n\nOnce you obtain the AppsFlyer ID, you can send events to AppsFlyer via cloud mode by including the `externalId` key within your events’ `context`. The format of `externalId` is as shown:\n\n```\n\"externalId\": [\n  {\n    \"id\": \"AppsFlyer_ID\",\n    \"type\": \"appsflyerExternalId\"\n  }\n]\n```\n\nThe following table lists the `externalId` fields:\n\n| Field | Description |\n| --- | --- |\n| `id` | Your AppsFlyer ID. |\n| `type` | The type of `externalId`. This must always be set to `appsFlyerExternalId`. |\n\n### Obtaining the AppsFlyer ID\n\nAs mentioned above, the AppsFlyer ID is generated by the Appsflyer SDK integrated with your app.\n\n*   If the AppsFlyer SDK is directly loaded on your app, refer to this [AppsFlyer documentation](https://support.appsflyer.com/hc/en-us/articles/207034486-Server-to-server-events-API-for-mobile-S2S-mobile-#fetching-the-appsflyer-id) to obtain the AppsFlyer ID.\n*   If your AppsFlyer SDK is loaded through RudderStack (device mode integration), then you can obtain the AppsFlyer ID by including the code snippet in your app, depending on your platform of integration:\n\n```\n#import <appsflyerlib>\nNSString *appsflyerId = [AppsFlyerLib shared].getAppsFlyerUID;\n```\n\n```\nimport com.appsflyer.AppsFlyerLib;\nString appsFlyerId = AppsFlyerLib.getInstance().getAppsFlyerUID(this);\n```\n\n```\nimport { getAppsFlyerId } from \"@rudderstack/rudder-integration-appsflyer-react-native\"\nconst appsFlyerId = await getAppsFlyerId();\n```\n\n## Identify\n\nThe `identify` call sets `userId` through the `setCustomerUserId` method of `AppsFlyerLib`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack supports the `identify` calls only in the [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode).\n\nRudderStack sets `email` from the event traits to AppsFlyer using the native SDK’s `setUserEmails` method:\n\n```\n[[RSClient sharedInstance] identify:@\"developer_user_id\"\n                                 traits:@{@\"email\": @\"bar@foo.com\"}];\n```\n\n### Deleting a user\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> To delete a user in AppsFlyer, you must configure the **Status Callback URLs** and **API Token** settings in the RudderStack dashboard.\n\nYou can delete a user in AppsFlyer using the [Suppression with Delete regulation](https://www.rudderstack.com/docs/api/user-suppression-api/#adding-a-suppression-with-delete-regulation) of the RudderStack [User Suppression API](https://www.rudderstack.com/docs/api/user-suppression-api/).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To delete a user, you must specify their `userId` in the event. Additionally, you can specify any of the following in the event:\n> \n> *   AppsFlyer ID\n> *   [iOS advertising ID/Android advertising ID](#advertising-id) (depending on your platform)\n> *   Any custom identifier like `email`, `phone`, etc.\n\nA sample regulation request body for deleting a user in AppsFlyer is shown below:\n\nSpecify the **App ID** in your [connection settings](#connection-settings).\n\n```\n{\n  \"regulationType\": \"suppress_with_delete\",\n  \"destinationIds\": [\n    \"2FIKkByqn37FhzczP23eZmURciA\"\n  ],\n  \"users\": [{\n    \"userId\": \"1hKOmRA4GRlm\",\n    \"phone\": \"+1-202-555-0146\",\n    \"email\": \"alex@example.com\"\n    \"appsflyerId\": \"asdhw126\"\n  }]\n}\n```\n\nSpecify the **App ID** in your [connection settings](#connection-settings).\n\n```\n{\n  \"regulationType\": \"suppress_with_delete\",\n  \"destinationIds\": [\n    \"2FIKkByqn37FhzczP23eZmURciA\"\n  ],\n  \"users\": [{\n    \"userId\": \"1hKOmRA4GRlm\",\n    \"phone\": \"+1-202-555-0146\",\n    \"email\": \"alex@example.com\"\n    \"ios_advertising_id\": \"asdhw126\"\n  }]\n}\n```\n\nSpecify the **App ID** in your [connection settings](#connection-settings).\n\n```\n{\n  \"regulationType\": \"suppress_with_delete\",\n  \"destinationIds\": [\n    \"2FIKkByqn37FhzczP23eZmURciA\"\n  ],\n  \"users\": [{\n    \"userId\": \"1hKOmRA4GRlm\",\n    \"phone\": \"+1-202-555-0146\",\n    \"email\": \"alex@example.com\"\n    \"android_advertising_id\": \"asdhw126\"\n  }]\n}\n```\n\n## Track\n\nRudderStack’s `track` call is mapped to the standard AppsFlyer events wherever possible.\n\nThe following table lists the event mapping from RudderStack to AppsFlyer:\n\n| **RudderStack event** | **AppsFlyer event** |\n| --- | --- |\n| `Products Searched` | `af_search` |\n| `Product Viewed` | `af_content_view` |\n| `Product List Viewed` | `af_list_view` |\n| `Product Added to Wishlist` | `af_add_to_wishlist` |\n| `Product Added` | `af_add_to_cart` |\n| `Checkout Started` | `af_initiated_checkout` |\n| `Order Completed` | `af_purchase` |\n| `Product Removed` | `remove_from_cart` |\n| `first_purchase` | `first_purchase` |\n| `Promotion Viewed` | `af_ad_view` |\n| `Promotion Clicked` | `af_ad_click` |\n| `Payment Info Entered` | `af_add_payment_info` |\n| `Product Shared` | `af_share` |\n| `Cart Shared` | `af_share` |\n| `Product Reviewed` | `af_rate` |\n\nFor any event not present in the above table, RudderStack makes the following changes to the event name before sending it to AppsFlyer via the native SDK:\n\n*   Converting the entire event name to lower case\n*   Replacing any space with an underscore\n\nAlong with the above event mapping, RudderStack also maps the event properties to the corresponding AppsFlyer event properties, as shown below:\n\n| RudderStack property | AppsFlyer property |\n| --- | --- |\n| `query` | `af_search_string` |\n| `price` | `af_price` |\n| `product_id` | `af_content_id` |\n| `category` | `af_content_type` |\n| `currency` | `eventCurrency` |\n| `products` | RudderStack formulates this list as per the [List View specification](https://support.appsflyer.com/hc/en-us/articles/115005544169#event-structure) and passes it to the property `af_content_list`. |\n| `quantity` | `af_quantity` |\n| `order_id` | `af_receipt_id` |\n| `revenue` | `af_revenue` |\n\nA sample `track` call for an iOS app is shown below:\n\n```\n[[RSClient sharedInstance] track:@\"Accepted Terms of Service\"\n                          properties:@{\n                                  @\"foo\": @\"bar\",\n                              @\"foo_int\": @134\n}];\n```\n\n## Screen\n\nFor all `screen` calls sent from the SDK, RudderStack calls AppsFlyer’s `trackEvent` method with `screen` as the event name. All the event properties are passed to AppsFlyer without any modification.\n\nFor the automatically recorded `screen` calls, RudderStack obtains a Boolean property called `automatic`.\n\n## Advertising ID\n\nRudderStack utilizes the advertising ID for the AppsFlyer destination if it is set as per the following specifications:\n\n*   For iOS: [Advertising ID documentation](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/#advertisement-id)\n    \n*   For Android: [Advertising ID documentation](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/#advertisement-id)\n    \n\nYou can find the advertising ID in your event’s `context.device.advertisingId`.\n\n## ATTrackingManager\n\nIf the `ATTrackingManager.trackingAuthorizationStatus` is passed according to [ATTrackingManager authorization consent](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/#attrackingmanager-authorization-consent), RudderStack will utilize it for the AppsFlyer destination.\n\nYou can find `trackingAuthorizationStatus` in your event’s `context.device.attTrackingStatus`.\n\n## Error messages\n\nThis section covers some of the possible error messages you may encounter while using this integration.\n\n### Invalid platform / required androidAppId / appleAppId missing\n\nThis error occurs when either the `OS Name` or your respective App ID is not set.\n\nYou can set the **App ID** in your [settings](#getting-started).\n\nThe SDK automatically sets the `OS Name` and it can be found in `context.os.name`.\n\n### Appsflyer ID is not set. Rejecting the event.\n\nThis error occurs when the `appsflyerExternalId` is not set. Refer to the [Sending events via the RudderStack cloud mode](#sending-events-via-the-rudderstack-cloud-mode) section for more information on setting the `appsflyerExternalId`.\n\n## Debugging\n\nRudderStack sets the `logLevel` in AppsFlyer based on the `logLevel` set for the `RudderClient`. If it is set to `DEBUG` or more, RudderStack sets the `logLevel` to `VERBOSE` for AppsFlyer.\n\nFor anything below that, RudderStack sets the `logLevel` to `NONE` for AppsFlyer.\n\n## FAQ\n\n#### Where do I get the AppsFlyer dev key?\n\nYou can find the **AppsFlyer Dev Key** by logging into your AppsFlyer account and navigating to the **Apps Settings** page in your dashboard. For more information, refer to this [AppsFlyer Help Center](https://support.appsflyer.com/hc/en-us/articles/211719806-App-settings-) page.\n\n#### I get an error saying “Build input file cannot be found” for iOS device mode. What should I do?\n\nThe latest AppsFlyer SDK requires XCode 12. Make sure you meet this requirement. You may have to downgrade your AppsFlyer SDK to build with a lower version of XCode.\n\nYou can declare the `pod` version in your `Podfile` as shown:\n\n```\npod 'Rudder-Appsflyer',' 1.0.0'\n```\n\n#### How do I get the AppsFlyer ID to send events from my mobile sources via the RudderStack cloud mode?\n\nTo send events to AppsFlyer via cloud mode, you first need to obtain the AppsFlyer ID generated by the Appsflyer SDK.\n\nYou can get this ID by either directly loading the native AppsFlyer SDK on your app, or loading it via RudderStack (device mode integration).\n\nIn case of a device mode integration, include the following code snippet (depending on your platform of integration) in your app to get the AppsFlyer ID:\n\n```\n#import <appsflyerlib>\nNSString *appsflyerId = [AppsFlyerLib shared].getAppsFlyerUID;\n```\n\n```\nimport com.appsflyer.AppsFlyerLib;\nString appsFlyerId = AppsFlyerLib.getInstance().getAppsFlyerUID(this);\n```\n\n```\nimport AppsFlyerIntegrationFactory from \"@rudderstack/rudder-integration-appsflyer-react-native/src/bridge\"\nconst appsFlyerId = await AppsFlyerIntegrationFactory.getAppsFlyerId()\n```\n\nyou obtain the AppsFlyer ID, you can send events via cloud mode by by including the `externalId` key within your events’ `context`. For more information, refer to the [Sending events via the RudderStack cloud mode](#sending-events-via-the-rudderstack-cloud-mode) section above.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "AppsFlyer Destination | RudderStack Docs",
  "description": "Send your event data from RudderStack to AppsFlyer.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/braze/deduplication/",
  "markdown": "# Braze Deduplication | RudderStack Docs\n\nAvailable Plans\n\n*   growth\n*   enterprise\n\n* * *\n\n*     6 minute read  \n    \n\nThis guide explains RudderStack’s Braze deduplication feature in detail and how you can use it to save data points and avoid billing overages in Braze.\n\n## Deduplication in Braze\n\nBraze charges its consumption based on [data points](https://www.braze.com/docs/user_guide/data_and_analytics/data_points/#consumption-count) it ingests for every user property and events like session starts and ends, purchases, etc. These data points are accumulated whenever you update a user profile or when the users perform specific actions.\n\nBraze counts all data points irrespective of whether you send any duplicates. It considers every property (except the standard ones) as a data point and counts it against your billing.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> With the deduplication feature, RudderStack prevents duplicate user traits in the `identify` and `track` calls from being sent to Braze, thus saving data points and ultimately avoiding billing overages in Braze.\n> \n> **This feature is particularly useful in Reverse ETL scenarios where a large number of rows are sent with duplicate columns.**\n\n## Get started\n\nTo use the Braze deduplication feature, follow these steps:\n\n1.  Log in to your [Braze dashboard](https://dashboard.braze.com/auth) and go to **Settings** > **Developer Console**.\n2.  Generate a new REST API key with the `users.export.ids` permission. You can find it in the **User Data** section of permissions.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You also need to include the permissions listed in the Braze destination’s [connection settings](https://www.rudderstack.com/docs/destinations/streaming-destinations/braze/#connection-settings).\n\n[![Setting Braze REST API key for dedup](https://www.rudderstack.com/docs/images/event-stream-destinations/braze-dedup-permissions.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/braze-dedup-permissions.webp)\n\n3.  Use this REST API key to set up your Braze destination.\n4.  Toggle on the **Deduplicate Traits (Beta)** option in the Braze [destination configuration settings](https://www.rudderstack.com/docs/destinations/streaming-destinations/braze/#deduplication-settings):\n\n[![Enable Braze deduplication setting](https://www.rudderstack.com/docs/images/event-stream-destinations/braze-dedup-enable.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/braze-dedup-enable.webp)\n\n5.  Enable the connection and start sending your events to Braze.\n\n[![Enable Braze deduplication setting](https://www.rudderstack.com/docs/images/event-stream-destinations/braze-enable-connection.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/braze-enable-connection.webp)\n\nTo verify if you are receiving deduplicated traits in Braze, see [FAQ](#verify-deduplication).\n\n## How deduplication works\n\n#### **Device mode**\n\nRudderStack stores the previous `identify` object and uses it for comparison - this check occurs directly in the Braze SDK.\n\n#### **Cloud mode**\n\nRudderStack uses the [`/users/export/ids`](https://www.braze.com/docs/api/endpoints/export/user_data/post_users_identifier/) endpoint (leveraging the **users.export.ids** scope in the [REST API key](https://www.rudderstack.com/docs/destinations/streaming-destinations/braze/#connection-settings) used for setting up the Braze destination) to export data from a user profile by specifying a user identifier. It then compares the user profile against the incoming user traits to determine any deltas.\n\nIf a delta is found, RudderStack sends only the updated user traits to Braze and drops the others.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack implements the deduplication logic such that it will not surpass Braze’s API limits in most cases. However, in scenarios where this limit is surpassed, RudderStack defaults to sending **all** events without deduplication until the volume returns below the permissible rate limits.\n\nThe following example highlights how RudderStack sends deduplicated data to Braze:\n\n```\nuser_attributes: {\n  name: \"Alex Keener\",\n  age: 30,\n  location: {\n    city: \"New York\",\n    area: \"Manhattan\",\n    country: \"US\"\n  },\n  interests: [\"hiking\", \"soccer\"]\n}\n```\n\n```\nuser_attributes: {\n  name: \"Alex Keener\",\n  age: 30,\n  location: {\n    city: \"San Francisco\", // delta\n    area: \"California\", // delta\n    country: \"US\" // delta\n  },\n  interests: [\"hiking\", \"soccer\", \"cycling\"] // delta\n}\n```\n\n```\nuser_attributes: {\n  location: {\n    city: \"San Francisco\",\n    area: \"California\",\n    country: \"US\"\n  },\n  interests: [\"hiking\", \"soccer\", \"cycling\"]\n}\n```\n\nNote that RudderStack deduplicates only the billable Braze attributes. It does not deduplicate the following non-billable attributes:\n\n| RudderStack property | Braze data point | Braze data type |\n| --- | --- | --- |\n| `userId` | User ID | Profile data |\n| `user_alias` | User alias | Profile data |\n| `country` | Country | Profile data |\n| `language` | Language | Profile data |\n| `email_subscribe` | Email subscribed | Contact settings |\n| `push_subscribe` | Push subscribed | Contact settings |\n| `subscription_groups` | Subscription group | Contact settings |\n\nSee [Braze documentation](https://www.braze.com/docs/user_guide/data_and_analytics/data_points/?tab=non-billable#data-points-1) for more information on the billable and non-billable data points.\n\n## FAQ\n\n#### **Which RudderStack Cloud plans support the Braze deduplication feature?**\n\nThe Braze deduplication feature is available in RudderStack Cloud [Growth and Enterprise](https://rudderstack.com/pricing) plans.\n\n#### **How do I verify if deduplicated traits are being sent to Braze?**\n\n1.  Set up your Braze destination in RudderStack by following [these steps](#get-started).\n2.  Create a test `identify` or `track` payload with a new test `userId` in Postman that includes several user traits.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> **You can use the RudderStack HTTP API to send the payloads.**\n> \n> 1.  Import the Postman collection using this [URL](https://www.getpostman.com/collections/480307c55ad2b9dd4e27).\n> 2.  Edit the variable `source_write_key` with the write key of the source connected to your Braze destination.\n> 3.  Edit the variable `data_plane_url` with your [data plane URL](https://www.rudderstack.com/docs/dashboard-guides/overview/#connections).\n> 4.  Use **Basic Authentication** for authenticating all HTTP requests.\n> \n> See the [RudderStack HTTP API](https://www.rudderstack.com/docs/api/http-api/) documentation for more details.\n\n3.  If you don’t have a test payload, you can use the following snippet:\n\n```\n{\n  \"type\": \"identify\",\n  \"sentAt\": \"2023-04-15T12:07:41.050Z\",\n  \"traits\": {\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"email\": \"johndoe@example.com\",\n    \"attribute_a\": \"value_a\",\n    \"attribute_b\": \"value_b\",\n    \"myObj\": {\n      \"test\": \"value\"\n    },\n    \"myArr\": [\n      \"value1\",\n      \"value3\"\n    ]\n  },\n  \"userId\": \"john@doe\",\n  \"context\": {\n    \"library\": {\n      \"name\": \"rudder-analytics-php\",\n      \"version\": \"1.0.1\",\n      \"consumer\": \"LibCurl\"\n    }\n  },\n  \"rudderId\": \"86a09397-07e3-4cc4-9bd3-1fa262a5b521\",\n  \"messageId\": \"fb203095-df9d-40bd-bcf3-97eb8084fea4\",\n  \"timestamp\": \"2023-04-15T13:07:39.000+01:00\",\n  \"receivedAt\": \"2023-04-15T12:07:40.222Z\",\n  \"request_ip\": \"212.129.29.104\",\n  \"originalTimestamp\": \"2023-04-15T12:07:41.050Z\"\n}\n```\n\n4.  Go to the Braze destination in your RudderStack dashboard and click the [Live Events](https://www.rudderstack.com/docs/dashboard-guides/live-events/#destination-live-events) button. Also, log in to your Braze dashboard.\n\n[![Braze live events button](https://www.rudderstack.com/docs/images/event-stream-destinations/braze-live-events.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/braze-live-events.webp)\n\n5.  Send the test payloads - you should be able to see them in your Live Events viewer. Also, confirm that the attributes show up as expected in your Braze dashboard by going to the **User Search** tab.\n6.  Add or update a few attributes while retaining the rest of the event payload. If you used the event payload in **Step 3**, you can use the following modified payload to test the impact of the attribute changes:\n\n```\n{\n\"type\": \"identify\",\n\"sentAt\": \"2023-04-15T12:07:41.050Z\",\n\"traits\": {\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"email\": \"johndoe@example.com\",\n  \"attribute_a\": \"value_a.1\",\n  \"attribute_b\": \"value_b\",\n  \"myObj\": {\n    \"test\": \"value_changed\"\n  },\n  \"myArr\": [\n    \"value1\",\n    \"value3\"\n  ]\n},\n\"userId\": \"john@doe\",\n\"context\": {\n  \"library\": {\n    \"name\": \"rudder-analytics-php\",\n    \"version\": \"1.0.1\",\n    \"consumer\": \"LibCurl\"\n  }\n},\n\"rudderId\": \"86a09397-07e3-4cc4-9bd3-1fa262a5b521\",\n\"messageId\": \"fb203095-df9d-40bd-bcf3-97eb8084fea4\",\n\"timestamp\": \"2023-04-15T13:07:39.000+01:00\",\n\"receivedAt\": \"2023-04-15T12:07:40.222Z\",\n\"request_ip\": \"212.129.29.104\",\n\"originalTimestamp\": \"2023-04-15T12:07:41.050Z\"\n}\n```\n\n7.  Resend your event payload. You should see the new event with only the added/updated attributes. You can also confirm in the Braze dashboard that the attributes were added/updated (by going to the **User Search** tab for the same test user ID).\n\n#### **How do I observe the difference in data point billing due to deduplication?**\n\nIn your Braze dashboard, go to [Subscriptions and usage](https://www.braze.com/docs/user_guide/administrative/app_settings/subscription_and_usage/?redirected=true) and check the metrics by the appropriate date filters (before and after enabling deduplication) to observe the data point differences over that period.\n\n  \n\n#### Does RudderStack support deduplication in case of nested arrays?\n\nRudderStack supports deduplication of simple arrays stored as properties. However, it does not support deduplication of nested arrays/objects, that is, data in the following format:\n\n```\n{\n  \"attributes\": [{\n    \"external_id\": \"userId\",\n    \"pets\": [{\n        \"id\": 1,\n        \"type\": \"dog\",\n        \"breed\": \"beagle\",\n        \"name\": \"Tommy\"\n      },\n      {\n        \"id\": 2,\n        \"type\": \"cat\",\n        \"breed\": \"calico\",\n        \"name\": \"Garfield\"\n      }\n    ]\n  }]\n}\n```\n\nNote that you can still avoid data points consumption by sending your data to Braze using RudderStack. For more information, see [Send user traits as nested custom attributes](https://www.rudderstack.com/docs/destinations/streaming-destinations/braze/#send-user-traits-as-nested-custom-attributes) section of the Braze documentation.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Braze Deduplication | RudderStack Docs",
  "description": "This guide explains RudderStack’s Braze deduplication feature in detail and how you can use it to save data points and avoid billing overages in Braze.\nDeduplication in BrazeBraze charges its consumption based on data points it ingests for every user property and events like session starts and ends, purchases, etc. These data points are accumulated whenever you update a user profile or when the users perform specific actions.\nBraze counts all data points irrespective of whether you send any duplicates.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/custify/",
  "markdown": "# Custify | RudderStack Docs\n\nSend your event data from RudderStack to Custify.\n\n* * *\n\n*     5 minute read  \n    \n\n[Custify](https://www.custify.com/) is a next-generation Customer Success software for B2B SaaS companies. It helps you meet your customers’ needs by reducing user churn and increasing their lifetime value. With Custify, you can get insights on product usage and all data from your CRM, support, billing, and other systems in one place.\n\nRudderStack supports Custify as a destination where you can seamlessly send your customer data.\n\n## Getting started\n\nBefore configuring Custify as a destination in RudderStack, verify if the source platform is supported by Custify by referring to the table below:\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | \\-  | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the source platform supports sending events to Custify, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add the source. Then, from the list of destinations, select **Custify**.\n2.  Assign a name to the destination and click **Continue**.\n\n### Connection settings\n\nTo successfully configure Custify as a destination, you need to configure the following settings:\n\n[![Custify connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/custify-connection-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/custify-connection-settings.webp)\n\n*   **API Key**: This is a mandatory field. Enter the Custify API key used to authenticate the request.\n\n*   **Fall back to anonymousId if userId is not present**: If this setting is enabled, RudderStack will use `anonymousId` to identify the user if `userId` is not present in the event.\n\n## Identify\n\nYou can use the [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call to create or update a user in Custify. RudderStack uses the `userId` or `email` field in the event’s `traits` to do so. Hence, it is highly recommended to include the `userId` or at least the user’s `email` in the `identify` call.\n\nYou can also identify your users with `anonymousId` in case `userId` is not present in the event via the **Fall back to anonymousId if userId is not present** dashboard setting.\n\nA sample `identify` call is shown below:\n\n```\nrudderanalytics.identify(\"1hKOmRA4GRlm\", {\n  name: \"Alex Keener\",\n  email: \"alex@example.com\",\n  country: \"USA\"\n});\n```\n\n### Supported mapping\n\nRudderStack maps the following event properties to a subset of the standard Custify user attributes. It also creates a new custom field for the unmapped attributes.\n\n| RudderStack property | Custify property | Presence |\n| --- | --- | --- |\n| `userId` (or `anonymousId` if `userId` is absent) | `user_id` | Required |\n| `traits.email` / `context.traits.email` | `email` | Required, if `userId` or `anonymousId` is absent. |\n| `traits.phone` / `context.traits.phone` | `phone` | Optional |\n| `traits.sessionCount` / `context.traits.sessionCount` | `session_count` | Optional |\n| `traits.unsubscribedFromEmails` / `context.traits.unsubscribedFromEmails` | `unsubscribed_from_emails` | Optional |\n| `traits.unsubscribedFromCalls` / `context.traits.unsubscribedFromCalls` | `unsubscribed_from_calls` | Optional |\n| `traits.name` / `context.traits.name` | `name` | Optional |\n| `traits.signedUpAt` / `context.traits.signedUpAt` / `timestamp` / `originalTimestamp` | `signed_up_at` | Optional |\n| `traits` / `context.traits` | `custom_attributes` | Optional |\n\n### Removing users from an organization\n\nTo remove a given user from an organization, the following fields must be present in the event’s `context.traits`:\n\n*   `company.id`\n*   `company.remove` (set to `true`)\n\nRudderStack assumes a valid Custify `company_id` in the `company.id` field. Then, it finds the organization corresponding to that ID and dissociates the user from the organization.\n\nA sample `identify` call is shown below:\n\n```\nrudderanalytics.identify(\"1hKOmRA4GRlm\", {\n  name: \"Alex Keener\",\n  email: \"alex@example.com\",\n  country: \"USA\",\n  company: {\n    id: \"company_123\",\n    remove: true\n  }\n});\n```\n\nThe above `identify` call updates the user as well as removes them from the company having the `id` as `company_123`.\n\n## Track\n\nRudderStack uses the [Custify Events API](https://docs.custify.com/#tag/Event) to send the [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) events generated by the users’ actions.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Custify expects a `userId` for every `track` call. You can set the `userId` by making an `identify` call before sending any `track` events.\n\nA sample `track` call is shown below:\n\n```\nrudderanalytics.track(\"Order Completed\", {\n  category: \"category\",\n  label: \"label\",\n  value: 120\n});\n```\n\n### Supported mapping\n\nThe following table lists the supported property mappings between RudderStack and Custify for the `track` events:\n\n| RudderStack property | Custify property |\n| --- | --- |\n| `userId` / `anonymousId` | `user_id` |\n| `email` | `email` |\n| `event` | `name` |\n| `timestamp` / `originalTimestamp` | `created_at` |\n\n## Group\n\nYou can use the [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call to create or update a company in Custify and associate a user to it.\n\nRudderStack assumes that an `identify` call (containing the `userId`) is made before any `group` call. It uses the `groupId` to uniquely identify a group.\n\nA sample `group` call is shown below:\n\n```\nrudderanalytics.group(\"group01\", {\n  traits: {\n    \"name\": \"Tech Group\",\n    \"size\": 150,\n    \"plan\": \"Pro\"\n  },\n  context: {\n    \"traits\": {\n      \"name\": \"Alex Keener\",\n      \"email\": \"alex@example.com\"\n    }\n  },\n});\n```\n\n### Supported mapping\n\nRudderStack maps the following **optional** `group` traits to a subset of the standard Custify company attributes. It also creates a new custom field for any unmapped attributes.\n\n| RudderStack property | Custify property |\n| --- | --- |\n| `groupId` | `company_id` |\n| `traits.name` | `name` |\n| `traits.industry` | `industry` |\n| `traits.size` | `size` |\n| `traits.website` / `traits.url` | `website` |\n| `traits.plan` | `plan` |\n| `traits.monthlyRevenue` / `traits.mrr` | `monthly_revenue` |\n| `traits.churned` | `churned` |\n| `traits` | `custom_attributes` |\n\n### How RudderStack does the user-organization association\n\nTo do the user-company association, RudderStack first finds the Custify user by looking for the `userId` present in the [`context.traits`](https://www.rudderstack.com/docs/event-spec/standard-events/common-fields/#contextual-fields) object.\n\n*   If `userId` and `groupId` are present in the event, RudderStack associates the Custify user with the organization and sends all user-specific information.\n*   If `userId` and `groupId` are not present, RudderStack first creates the user and the organization in Custify and then does the association.\n\nThe above discussion can be summarized as follows:\n\n| `userId` present? | `groupId` present? | Description | Expected behavior |\n| --- | --- | --- | --- |\n| No  | No  | User and the organization do not exist in Custify. | RudderStack creates a new user and organization in Custify and associates both. |\n| No  | Yes | Organization exists in Custify but not the user. | RudderStack creates a new user and associates them with the organization. |\n| Yes | No  | User exists in Custify but not the organization. | RudderStack creates a new organization and associates the user with it. |\n| Yes | Yes | Both the user and the organization exist in Custify | RudderStack does the user-organization association. |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Custify | RudderStack Docs",
  "description": "Send your event data from RudderStack to Custify.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/bugsnag/",
  "markdown": "# Bugsnag | RudderStack Docs\n\nSend your app event data from RudderStack to Bugsnag.\n\n* * *\n\n*     4 minute read  \n    \n\n[Bugsnag](https://www.bugsnag.com/) provides error reporting libraries for [major software platforms](https://docs.bugsnag.com/platforms/) which automatically detect and report errors in your applications, and capture diagnostic data required to help you reproduce and fix each error.\n\n## Getting started\n\nRudderStack supports sending event data to Bugsnag via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | **Supported** | **Supported** | \\-  |\n| **Cloud mode** | \\-  | \\-  | \\-  |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In a web device mode integration, that is, using [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) as a source, RudderStack loads the Bugsnag native SDK from the `https://d2wy8f7a9ursnm.cloudfront.net/` domain.\n> \n> Based on your website’s content security policy, you might need to [allowlist this domain](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#allowlist-destination-domain) to load the Bugsnag SDK successfully.\n\nOnce you have confirmed that the platform supports sending events to Bugsnag, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **Bugsnag**.\n2.  Assign a name to the destination and click **Next**.\n\n### Connection settings\n\nTo successfully set up Bugsnag as a destination, you will need to configure the following settings:\n\n*   **Bugsnag API Key**: Enter your [BugSnag API key](#faq). You can find the API key in your Bugsnag dashboard under **Settings** > **Project Settings**.\n*   **Use device-mode to send events**: As this is a device mode-only destination, this setting is turned on by default and cannot be toggled off.\n*   **Release Stage**: Use this setting to specify the release stage of your app:\n    *   Toggle it on for `Development` stage.\n    *   Keep it toggled off for `Production` stage.\n*   **SSL**: This option is turned on by default and causes RudderStack to use SSL while sending data to Bugsnag.\n\n## Adding Bugsnag to mobile project\n\nOnce you add Bugsnag as a destination in the [RudderStack dashboard](https://app.rudderstack.com/), follow these steps to add it to your mobile project depending on your integration platform:\n\nFollow these steps to add Bugsnag to your Android Project:\n\n1.  Add the following `repository` to your `app/build.gradle` file.\n\n```\nrepositories {\n    mavenCentral()\n}\n```\n\n2.  Add the following `dependencies` in the same file:\n\n```\nimplementation 'com.rudderstack.android.sdk:core:1.0.1-beta.1'\nimplementation 'com.rudderstack.android.integration:bugsnag:0.1.0-beta.1'\n```\n\n3.  Change the initialization of your `RudderClient` in your `Application` class:\n\n```\n// initialize Rudder SDK\nval rudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withFactory(BugsnagIntegrationFactory.FACTORY)\n            .build()\n    )\n```\n\nFollow these steps to add Bugsnag to your iOS project:\n\n1.  Go to `Podfile` and add the `Rudder-Bugsnag` extension:\n\n```\npod 'Rudder-Bugsnag', '0.1.0-beta.1'\n```\n\n2.  After adding the dependency followed by `pod install` , you can add the imports to your `AppDelegate.m` file as shown:\n\n```\n#import \"RudderBugsnagFactory.h\"\n```\n\n3.  Change the initialization of your `RudderClient` as shown:\n\n```\nRudderConfigBuilder *builder = [[RudderConfigBuilder alloc] init];\n[builder withDataPlaneUrl:<your_data_plane_url>];\n[builder withFactory:[RudderBugsnagFactory instance]];\n[RudderClient getInstance:<your_write_key> config:[builder build]];\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This device mode integration is supported for Bugsnag v6.16.4 and above.\n\nFollow these steps to add Bugsnag to your iOS project:\n\n1.  Install `RudderBugsnag` (available through [CocoaPods](https://cocoapods.org/)) by adding the following line to your `Podfile`:\n\n```\npod 'RudderBugsnag', '~> 1.0.0'\n```\n\n2.  Run the `pod install` command.\n3.  Import the SDK depending on your preferred platform:\n\n4.  Add the imports to your `AppDelegate` file under the `didFinishLaunchingWithOptions` method:\n\n```\nlet config: RSConfig = RSConfig(writeKey: WRITE_KEY)\n            .dataPlaneURL(DATA_PLANE_URL)\n\nRSClient.sharedInstance().configure(with: config)\nRSClient.sharedInstance().addDestination(RudderBugsnagDestination())\n```\n\n```\nRSConfig *config = [[RSConfig alloc] initWithWriteKey:WRITE_KEY];\n[config dataPlaneURL:DATA_PLANE_URL];\n\n[[RSClient sharedInstance] configureWith:config];\n[[RSClient sharedInstance] addDestination:[[RudderBugsnagDestination alloc] init]];\n```\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) method lets you identify a user and associate them to their actions. It also lets you record any traits about them like their name, email, etc.\n\nA sample `identify` call is shown below:\n\n```\nrudderanalytics.identify(\"1hKOmRA4el9Zt1WSfVJIVo4GRlm\", {\n  name: \"Alex Keener\",\n  email: \"alex@example.com\",\n});\n```\n\nBugsnag will show the `userId` and `traits` in the **Users** tab of each error.\n\n## Error reporting\n\nAlong with user-specific information, you can also use Bugsnag to track handled exceptions data to your dashboard using Bugsnag’s native methods. See the [Bugsnag documentation](https://docs.bugsnag.com/platforms/browsers/#reporting-handled-exceptions) for more information on these functions.\n\n## FAQ\n\n#### **Where can I find the Bugsnag API Key?**\n\n1.  Log in to your [Bugsnag dashboard](https://app.bugsnag.com/).\n2.  Click **Settings** at the top right corner.\n3.  Click **Project Settings** to find the API key as shown:\n\n[![](https://www.rudderstack.com/docs/images/event-stream-destinations/bugsnag-api-key.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/bugsnag-api-key.webp)\n\n#### **What is meant by release stage?**\n\nYou can distinguish errors that happen in different stages of your app’s release process, for example, `production`, `development`, etc.\n\n#### **Do I need to use SSL to send the event data to Bugsnag?**\n\nRudderStack recommends using SSL to send data to Bugsnag in web device mode.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Bugsnag | RudderStack Docs",
  "description": "Send your app event data from RudderStack to Bugsnag.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/criteo/",
  "markdown": "# Criteo | RudderStack Docs\n\nSend your event data from RudderStack to Criteo.\n\n* * *\n\n*     5 minute read  \n    \n\n[Criteo](https://www.criteo.com/) is a online display advertising platform. It offers various solutions to increase your website traffic, generate brand awareness, and boost sales.\n\nFind the open source code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-sdk-js/tree/production-staging/src/integrations/Criteo).\n\n## Get started\n\nRudderStack supports sending event data to Criteo via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| Connection Mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| **Device mode** | **Supported** | \\-  | \\-  |\n| **Cloud mode** | \\-  | \\-  | \\-  |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In a web device mode integration, that is, using [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) as a source, the Criteo native SDK is loaded from `https://dynamic.criteo.com` domain. Based on your website’s content security policy, you might need to [allowlist this domain](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#allowlist-destination-domain) to load the Criteo SDK successfully.\n\nOnce you have confirmed that the source platform supports sending events to Criteo, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add the source. Then, from the list of destinations, select **Criteo**.\n2.  Assign a name to the destination and click **Continue**.\n\n## Connection settings\n\nTo successfully set up Criteo as a destination in RudderStack, you need to configure the following settings:\n\n*   **Criteo Account ID**: Enter your Criteo Account/Partner ID. See [FAQ](#faq) section below for more information on getting your Account/Partner ID.\n*   **Home Page URL**: Enter the complete URL of your website’s homepage.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This field is required when you need to fire the homepage tag to add visitors to your target audience in cases where the event name of the `page` call is anything other than `home`.\n\n*   **Email Hashing Method**: Criteo lets you use the email addresses in both hashed and non-hashed formats. If you choose **MD5**, RudderStack will hash-encode the email address before sending it to Criteo.\n*   **Map Specific Fields to Criteo Fields:** Enter the payload fields and the corresponding mapped fields that RudderStack uses to send the event data to Criteo.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Criteo lets you send additional user or page-related data to add more context to the events. You can set this feature in Criteo with the assistance of your Criteo Account Manager. You can then use the **Map Specific Fields to Criteo Fields** field mapping feature to send the additional data through RudderStack.\n\n*   **Client-side Events Filtering**: This setting lets you specify which events should be blocked or allowed to flow through to Criteo. For more information on this setting, see [Client-side Events Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/).\n*   **OneTrust Cookie Categories**: This setting lets you map [OneTrust cookie](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/javascript/) /consent groups to RudderStack’s consent purposes.\n*   **Mapping RudderStack events to the Criteo standard events**: This setting triggers the Criteo [Standard Event](https://www.criteo.com/wp-content/uploads/2018/09/CSPOneTag_v1.1.pdf) when you send the mapped RudderStack event. You can specify multiple **Standard Events** for one **Event Name** and vice versa.\n*   **Use device mode to send events**: As this is a [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode)\\-only destination, this setting is enabled by default and cannot be disabled .\n\n## Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you track user’s home page along with its associated properties and send this information to Criteo.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Use this call only to track the home page and add the users to your target audience.\n\nThe home page tag is fired **only** in the following scenarios:\n\n*   When the name of the `page` call is `home`.\n*   When the current URL of the web page is same as the **Home Page URL** specified in the RudderStack dashboard.\n*   When the URL mentioned in the `properties` of the `page` call is same as the **Home Page URL** specified in the RudderStack dashboard.\n\nA sample `page` call is as shown below:\n\n```\nrudderanalytics.page(\"category\", \"home\", {\n  path: \"path\",\n  url: \"url\",\n  title: \"title\",\n  search: \"search\",\n  referrer: \"referrer\",\n  testDimension: \"true\",\n})\n```\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you capture user events and the properties associated with them.\n\nA sample `track` call is as shown:\n\n```\nrudderanalytics.track(\"Product Viewed\", {\n  product_id: \"Prod12345\",\n  quantity: 1,\n  price: 19.99,\n  name: \"my product\",\n  category: \"categ 1\",\n  sku: \"p-666\",\n  list: \"Gallery\",\n  testDimension: true,\n  testMetric: true,\n})\n```\n\nIn the above example, RudderStack captures the information related to the `Product Viewed` event and the associated details such as quantity, price, category, etc.\n\n### Supported mappings\n\nThe following table details the mapping of the [RudderStack ecommerce events](https://www.rudderstack.com/docs/event-spec/ecommerce-events-spec/) and the [Criteo OneTag events](https://help.criteo.com/kb/guide/en/all-criteo-onetag-events-and-parameters-vZbzbEeY86/Steps/775825):\n\n| RudderStack event | Required fields | Criteo OneTag event | OneTag Event Name used by Criteo |\n| --- | --- | --- | --- |\n| `Cart Viewed` | `properties.products.$.price`  <br>`properties.products.$.product_id`  <br>`properties.products.$.quantity` | `Basket/cart tag` | `viewBasket` |\n| `Order Completed` | `properties.products.$.price`  <br>`properties.products.$.product_id`  <br>`properties.products.$.quantity`  <br>`properties.order_id` | `Sales Tag` | `trackTransaction` |\n| `Product List Viewed` | `properties.products.$.product_id` | `Category/keyword search/listing tag` | `viewList` |\n| `Product Viewed` | `properties.product_id` | `Product tag` | `viewItem` |\n| `Product Added` | `properties.product_id`  <br>`properties.price`  <br>`properties.quantity`  <br>`properties.currency` | `Criteo Add to Cart Tag` | `addToCart` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   For `Product List Viewed` event, Rudderstack sends the `viewList` tag. However, it can also send the `viewSearchResult` or `viewCategory` tag depending upon the availability of the `keywords`, `category` fields and the configuration settings.\n> *   If you need to fire the `Category/keyword search/listing tag` with the appropriate filters, enter the filter categories within the `filters` field in the `Product List Viewed` event properties. See [Send filter category to Criteo](#send-filter-category-to-criteo) for more information.\n\n#### **Send filter category to Criteo**\n\nThe `filters` field is an array of objects that consists of each filter category in every single object. Criteo expects `name`, `operator,` and `value` fields for every filter that needs to be passed to Criteo.\n\nFor example, a simple `Product List Viewed` event that fires a `Category/keyword search/listing Tag` is as shown:\n\n```\nrudderanalytics.track(\"Product List Viewed\", {\n  email: \"name@domain.com\",\n  zipCode: \"12345\",\n  category: \"abc\",\n  keywords: \"key\",\n  page_number: 1,\n  filters: [\n    {\n      name: \"processor\",\n      operator: \"eq\",\n      value: \"snapdragon\",\n    },\n  ],\n  products: [\n    {\n      product_id: \"223344ffdds3ff3\",\n    },\n    {\n      product_id: \"343344ff5567ff3\",\n    },\n  ],\n})\n```\n\n## FAQ\n\n#### Where can I find the Criteo account/partner ID?\n\n1.  Log in to your [Criteo account](https://www.criteo.com/login/).\n2.  From the left sidebar, go to **Events Tracking** under **Assets**:\n\n[![Criteo event tracking option](https://www.rudderstack.com/docs/images/event-stream-destinations/criteo-event-tracking.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/criteo-event-tracking.webp)\n\n3.  Click **Setup** followed by **Direct Implementation**.\n4.  In the resulting loader file, find your 5-digit partner ID in the `src` key:\n\n[![Criteo partner ID](https://www.rudderstack.com/docs/images/event-stream-destinations/criteo-partner-id.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/criteo-partner-id.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Criteo | RudderStack Docs",
  "description": "Send your event data from RudderStack to Criteo.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/braze/",
  "markdown": "# Braze destination | RudderStack Docs\n\nSend your event data from RudderStack to Braze.\n\n* * *\n\n*     14 minute read  \n    \n\n[Braze](https://www.braze.com/) is a customer engagement platform that helps you better understand your customers’ in-app behavior and use the insights to improve your users’ app experience.\n\nFind the open source transformer code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/master/src/v0/destinations/braze).\n\n## Setup\n\n1.  In your [RudderStack dashboard](https://app.rudderstack.com/), go to **Directory** > **Destinations** > **Cloud Destinations** and search for **Braze**.\n2.  Connect your source and click **Continue**.\n\n### Connection settings\n\nConfigure the following settings to set up Braze as a destination in RudderStack:\n\n*   **Name**: Assign a name to uniquely identify the destination.\n*   **App Key**: Enter your Braze app key. For more information on obtaining your Braze app key, see [FAQ](#faq).\n*   **REST API Key**: Enter the REST API key associated with your project. For more information on obtaining this key, see [FAQ](#faq).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> When creating a new Braze Rest API Key for your app, select the following permissions in the **User Data** section:\n> \n> *   **users.track**: For creating/updating users and registering events.\n> *   **users.identify**: For identity resolution of identified and anonymous users.\n> *   **users.alias.new** and **users.merge**: For aliasing users.\n> *   **users.export.ids**: For [deduplication](https://www.rudderstack.com/docs/destinations/streaming-destinations/braze/deduplication/).\n\n*   **Data Center**: Specify the data center associated with your Braze account. To get your data center details, log in to your Braze account and note your URL. Some examples of identifying the [Braze instance](https://www.braze.com/docs/user_guide/administrative/access_braze/sdk_endpoints) from the URL are shown:\n\n| URL | Data center instance |\n| --- | --- |\n| [https://dashboard-01.braze.com](https://dashboard-01.braze.com/) | US-01 |\n| [https://dashboard-03.braze.com](https://dashboard-03.braze.com/) | US-03 |\n| [https://dashboard-01.braze.eu](https://dashboard-01.braze.eu/) | EU-01 |\n\n### Connection mode\n\nSpecify how you want to route events from your source to Braze.\n\nRudderStack supports sending events to Braze via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| Connection mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| Device mode | **Supported** | **Supported** | \\-  |\n| Cloud mode | **Supported** | **Supported** | **Supported** |\n| Hybrid mode | **Supported** | **Supported** | \\-  |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   This destination supports hybrid mode for the [web](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/), [iOS](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/) and [Android](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/) sources. For more information, see [Send events in hybrid mode](#send-events-in-hybrid-mode) section.\n> *   In the web device mode integration, that is, when using [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) as a source, the Braze native SDK is loaded from the `https://js.appboycdn.com/` domain. Based on your website’s content security policy, you might need to [allowlist this domain](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#allowlist-destination-domain) to load the Braze SDK successfully.\n\n### Send events in hybrid mode\n\nYou can use [hybrid mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#hybrid-mode) to send all events to Braze from your [web](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/), [iOS](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/) and [Android](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/) sources.\n\n#### Mobile sources\n\nTo send events via hybrid mode, use the hybrid mode option (highlighted below) while connecting your mobile source to the Braze destination. Then, [add the Braze integration to your project](#add-braze-integration-to-your-project).\n\n[![Braze hybrid mode connection setting](https://www.rudderstack.com/docs/images/event-stream-destinations/braze-hybrid-mode.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/braze-hybrid-mode.webp)\n\n#### Web (JavaScript) source\n\nTo send events via hybrid mode, use the hybrid mode option (highlighted below) while connecting your web source to the Braze destination.\n\n[![Braze hybrid mode connection setting for web](https://www.rudderstack.com/docs/images/event-stream-destinations/braze-hybrid-mode-web.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/braze-hybrid-mode-web.webp)\n\nThen, configure the [Web SDK settings](#web-sdk-settings) to correctly receive data in Braze.\n\n#### Why use hybrid mode\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Certain Braze functionalities like push notifications and in-app messaging require you to load the Braze SDK.\n\nWhen you choose hybrid mode to send events to Braze, RudderStack:\n\n*   Initializes the Braze SDK.\n*   Sends all the user-generated events (`identify`, `track`, `page`, `screen`, and `group`) to Braze only through [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode) and blocks them from being sent via device mode.\n*   Sends the auto-generated events (in-app messages, push notifications that require the Braze SDK) via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode).\n\nWith hybrid mode, you can send the auto-generated and user-generated events to Braze using a single connection.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> *   In hybrid mode, RudderStack sends all the user-generated events to Braze through their REST API and **does not process** them on the client-side - making your app lean and improving load time.\n> *   You can leverage all the cloud mode benefits like [data governance](https://www.rudderstack.com/docs/data-governance/) and [tracking plans](https://www.rudderstack.com/docs/data-governance/tracking-plans/).\n\n### Configuration settings\n\nAfter completing the initial setup, configure the following settings to correctly receive your data in Braze:\n\n*   **Enable subscription groups in group call**: Turn on this setting to send the subscription group status in your `group` events. For more information, see [Group](#group).\n*   **Use Custom Attributes Operation**: Turn on this setting if you want to use Braze’s [nested custom attributes](https://www.braze.com/docs/user_guide/data_and_analytics/custom_data/custom_attributes/array_of_objects/) functionality to create segments and personalize your messages using a custom attribute object. For more information, see [Send user traits as nested custom attributes](#send-user-traits-as-nested-custom-attributes).\n*   **Track events for anonymous users**: Turn on this setting to track anonymous user activity and send this information to Braze.\n\n### Deduplication settings\n\n*   **Deduplicate Traits**: Turn on this setting to enable traits deduplication for `identify` and `track` calls. See [Braze Deduplication](https://www.rudderstack.com/docs/destinations/streaming-destinations/braze/deduplication/) guide for more information on this feature.\n\n### Web SDK settings\n\n*   **Show Braze logs**: Turn on this setting to show Braze logs to the customers.\n*   **Use web push notifications**: Turn on this setting to use [push notifications for web](https://www.braze.com/docs/developer_guide/platform_integration_guides/web/push_notifications/integration#step-1-configure-your-sites-service-worker).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that this feature requires you to set up a service worker on your site.\n> \n> *   If your site already registers a service worker, add the following snippet to the service worker file:\n> \n> ```\n> self.importScripts(\"https://js.appboycdn.com/web-sdk/5.0/service-worker.js\");\n> ```\n> \n> *   If you do not have a service worker, create a new file named `service-worker.js` with the above snippet and place it in the root directory of your website.\n\n*   **Enable HTML in-app messages**: Turn on this setting to enable HTML in-app messages.\n\n### Device mode settings\n\nThe following settings are applicable only if you’re sending events to Braze via the [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode):\n\n*   **Client-side Events Filtering**: This setting lets you specify which events should be blocked or allowed to flow through to Braze. For more information on this setting, see [Client-side Events Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/).\n*   **Show Braze logs**: This setting is applicable only while using the [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) as a source. Turn it on to show the Braze logs to your users.\n*   **OneTrust Cookie Categories**: This setting lets you associate the [OneTrust](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/javascript/) cookie consent groups to Braze.\n\n### Add Braze integration to your project\n\nDepending on your integration platform, follow these steps to add the Braze integration to your project:\n\n1.  Open the `Podfile` of your project and add the following:\n\n2.  Run the `pod install` command.\n3.  Change the SDK initialization to the following snippet:\n\n```\nRudderConfigBuilder *builder = [[RudderConfigBuilder alloc] init];\n[builder withDataPlaneUrl:<data_plane_url>];\n[builder withFactory:[RudderBrazeFactory instance]];\n[RudderClient getInstance:<write_key>; config:[builder build]];\n```\n\n**This device mode integration is supported for Braze v4.4.4 and above**.\n\n1.  Install `RudderBraze` (available through [CocoaPods](https://cocoapods.org/)) by adding the following to your `Podfile`:\n\n```\npod 'RudderBraze', '~> 1.0.0'\n```\n\n2.  Run the `pod install` command.\n3.  Import the SDK depending on your preferred platform:\n\n4.  Add the imports to your `AppDelegate` file under the `didFinishLaunchingWithOptions` method:\n\n```\nlet config: RSConfig = RSConfig(writeKey: WRITE_KEY)\n            .dataPlaneURL(DATA_PLANE_URL)\nRSClient.sharedInstance().configure(with: config)\nRSClient.sharedInstance().addDestination(RudderBrazeDestination())\n```\n\n```\nRSConfig *config = [[RSConfig alloc] initWithWriteKey:WRITE_KEY];\n[config dataPlaneURL:DATA_PLANE_URL];\n[[RSClient sharedInstance] configureWith:config];\n[[RSClient sharedInstance] addDestination:[[RudderBrazeDestination alloc] init]];\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To send push notification events, see [Send push notifications](#send-push-notification-events).\n\n1.  Add the following under `dependencies` section:\n\n```\nimplementation 'com.rudderstack.android.sdk:core:[1.0,2.0)'\nimplementation 'com.rudderstack.android.integration:braze:[1.3.0,)'\n```\n\n2.  Add the following permissions to the `AndroidManifest.xml` file:\n\n```\n<uses-permission android:name=\"android.permission.INTERNET\"></uses-permission>\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"></uses-permission>\n```\n\n3.  Change the SDK initialization to the following:\n\n```\n// initialize Rudder SDK\nval rudderClient: RudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withLogLevel(RudderLogger.RudderLogLevel.DEBUG)\n            .withFactory(BrazeIntegrationFactory.FACTORY)\n            .build()\n    )\n```\n\n1.  Add the RudderStack-Braze module to your app by running the following command:\n\n```\nnpm install @rudderstack/rudder-integration-braze-react-native\n```\n\n```\nyarn add @rudderstack/rudder-integration-braze-react-native\n```\n\n2.  Import the module you added above and add it to your SDK initialization code:\n\n```\nimport rudderClient from \"@rudderstack/rudder-sdk-react-native\";\nimport braze from \"@rudderstack/rudder-integration-braze-react-native\";\nconst config = {\n  dataPlaneUrl: DATA_PLANE_URL,\n  trackAppLifecycleEvents: true,\n  withFactories: [braze]\n};\nrudderClient.setup(WRITE_KEY, config);\n```\n\n1.  Add the following dependency to the `dependencies` section of your `pubspec.yaml` file:\n\n```\nrudder_integration_braze_flutter: ^1.0.1\n```\n\n2.  Run the below command to install the dependency added in the above step:\n\n3.  Import the `RudderIntegrationBrazeFlutter` in your application where you are initializing the SDK:\n\n```\nimport 'package:rudder_integration_braze_flutter/rudder_integration_braze_flutter.dart';\n```\n\n4.  Change the initialization of your `RudderClient` as shown:\n\n```\nfinal RudderController rudderClient = RudderController.instance;\nRudderConfigBuilder builder = RudderConfigBuilder();\nbuilder.withFactory(RudderIntegrationBrazeFlutter());\nrudderClient.initialize(<write_key>, config: builder.build(), options: null);\n```\n\n## Identify\n\nYou can use the [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call to identify a user in Braze in any of the following cases:\n\n*   When the user registers to the app for the first time.\n*   When they log into their app.\n*   When they update their information.\n\nA sample `identify` call is shown below:\n\n```\nrudderanalytics.identify(\"1hKOmRA4GRlm\", {\n  email: \"alex@example.com\",\n  name: \"Alex Keener\"\n});\n```\n\n### Deleting a user\n\nYou can delete a user in Braze using the [Suppression with Delete regulation](https://www.rudderstack.com/docs/api/user-suppression-api/#adding-a-suppression-with-delete-regulation) of the RudderStack [User Suppression API](https://www.rudderstack.com/docs/api/user-suppression-api/).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To delete a user, you must specify their `userId` in the event. Additionally, you can specify a custom identifier (optional) in the event.\n\nA sample regulation request body for deleting a user in Braze is shown below:\n\n```\n{\n  \"regulationType\": \"suppress_with_delete\",\n  \"destinationIds\": [\"2FIKkByqn37FhzczP23eZmURciA\"],\n  \"users\": [\n    {\n      \"userId\": \"1hKOmRA4GRlm\",\n      \"<customKey>\": \"<customValue>\"\n    }\n  ]\n}\n```\n\n### Delta management for `identify` calls\n\nIf you are sending events to Braze via device mode, you can save costs by deduplicating your `identify` calls. To do so, enable the **Deduplicate Traits** dashboard setting. RudderStack then sends only the changed or modified attributes (traits) to Braze.\n\nIt is highly recommended to review Braze’s [data points policy](https://www.braze.com/docs/user_guide/onboarding_with_braze/data_points/) to fully understand how this functionality can help you avoid data overages.\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the customer events, that is, the actions that they perform, along with any properties associated with them.\n\nA sample `track` call is shown below:\n\n```\nrudderanalytics.track(\"Product Added\", {\n  numberOfRatings: \"12\",\n  name: \"item 1\"\n});\n```\n\n### Order Completed\n\nWhen you call the `track` method for an `Order Completed` event, RudderStack sends the product information present in the event to Braze as **purchases**.\n\nA sample `Order Completed` event is shown below:\n\n```\nrudderanalytics.track(\"Order Completed\", {\n  userId: \"1hKOmRA4GRlm\",\n  currency: \"USD\",\n  products: [\n    {\n      product_id: \"123454387\",\n      name: \"Game\",\n      price: 15.99\n    }\n  ]\n});\n```\n\n## Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call allows you to record your website’s page views, with the additional relevant information about the viewed page.\n\nA sample `page` call is as shown below:\n\n```\nrudderanalytics.page(\"Cart\", \"Cart Viewed\", {\n  path: \"/cart\",\n  referrer: \"test.com\",\n  search: \"term\",\n  title: \"test_item\",\n  url: \"http://test.in\"\n});\n```\n\n## Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call lets you record your users’ mobile screen views with any additional information about the viewed scren.\n\nA sample `screen` call is shown below:\n\n```\n[[RSClient sharedInstance] screen:@\"Main\"\n                properties:@{@\"prop_key\" : @\"prop_value\"}];\n```\n\n## Group\n\nYou can use the [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call to link an identified user with a group, such as a company, organization, or an account.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack does not support sending `group` events to Braze in the device mode.\n\n```\nrudderanalytics.group(\"12345\", {\n  name: \"MyGroup\",\n  industry: \"IT\",\n  employees: 450,\n  plan: \"basic\"\n});\n```\n\nOnce you send a `group` event, RudderStack sends a custom attribute to Braze with the name as `ab_rudder_group_<groupId>` and the value as `true`. For example, if the `groupId` is `123456`, then RudderStack creates a custom attribute with the name `ab_rudder_group_123456` and sends it to Braze with its value to `true`.\n\n### Subscription group status\n\nTo update the subscription group status, enable the **Enable subscription groups in group call** setting in the RudderStack dashboard and send the [subscription group](https://www.braze.com/docs/api/endpoints/subscription_groups) status in the `group` call:\n\n```\nrudderanalytics.group(\"12345\", {\n  subscriptionState: \"subscribed\",\n  email: \"alex@example.com\"\n});\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Either the `email` or `phone` is **mandatory** to send the subscription group in a `group` call.\n\n## Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack supports the `alias` call for Braze only in [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode).\n\nA sample `alias` call is shown below:\n\n```\nrudderanalytics.alias(\"user123\", \"previous123\");\n```\n\nWhen you make the above call, RudderStack removes the user having `previousId` as `previous123` from Braze and merges all the associated fields with the user having `userId` as `user123`.\n\n## Advanced features\n\nThis section covers some advanced Braze operations that you can perform using RudderStack.\n\n### Send user traits as nested custom attributes\n\nYou can send the user traits to Braze as [nested custom attributes](https://www.braze.com/docs/user_guide/data_and_analytics/custom_data/custom_attributes/nested_custom_attribute_support/) and perform add, update, and remove operations on them. To do so, enable the **Use Custom Attributes Operation** dashboard setting in RudderStack while configuring the Braze destination.\n\nYou can send the user traits as nested custom attributes in your `identify` events in the following format:\n\n```\nrudderanalytics.identify(\"1hKOmRA4GRlm\", {\n  cars: {\n    add: [\n      {\n        age: 27,\n        id: 1,\n        name: \"Alex Keener\"\n      }\n    ],\n    update: [\n      {\n        age: 30,\n        id: 2,\n        identifier: \"id\",\n        name: \"Rowan\"\n      },\n      {\n        age: 27,\n        id: 1,\n        identifier: \"id\",\n        name: \"Mike\"\n      }\n    ]\n  },\n  country: \"USA\",\n  email: \"alex@example.com\",\n  firstName: \"Alex\",\n  gender: \"M\",\n  pets: [\n    {\n      breed: \"beagle\",\n      id: 1,\n      name: \"Scooby\",\n      type: \"dog\"\n    },\n    {\n      breed: \"calico\",\n      id: 2,\n      name: \"Garfield\",\n      type: \"cat\"\n    }\n  ]\n});\n```\n\nTo send the user traits as custom user attributes via the `track`, `page`, or `screen` calls, pass `traits` as a contextual field in the event.\n\n```\nrudderanalytics.track(\n  \"Product Viewed\",\n  {\n    revenue: 8.99,\n    currency: \"USD\"\n  },\n  {\n    traits: {\n      cars: {\n        add: [\n          {\n            age: 27,\n            id: 1,\n            name: \"Alex Keener\"\n          }\n        ],\n        update: [\n          {\n            age: 30,\n            id: 2,\n            identifier: \"id\",\n            name: \"Mike\"\n          },\n          {\n            age: 27,\n            id: 1,\n            identifier: \"id\",\n            name: \"Rowan\"\n          }\n        ]\n      },\n      city: \"Disney\",\n      country: \"USA\",\n      email: \"alexa@example.com\",\n      firstName: \"Alexa\",\n      gender: \"woman\",\n      pets: [\n        {\n          breed: \"beagle\",\n          id: 1,\n          name: \"Scooby\",\n          type: \"dog\"\n        },\n        {\n          breed: \"calico\",\n          id: 2,\n          name: \"Garfield\",\n          type: \"cat\"\n        }\n      ]\n    }\n  }\n);\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   For the `update` and `remove` operations, `identifier` is a required key.\n> *   If `add`, `update`, or `remove` operations are not present in the nested array, RudderStack uses the `create` operation to create the properties, by default.\n\nFor more information on sending nested custom attributes to Braze, see the [Braze documentation](https://www.braze.com/docs/user_guide/data_and_analytics/custom_data/custom_attributes/nested_custom_attribute_support/).\n\n### Send push notification events\n\nDepending on your iOS SDK version, follow these steps to send push notification events to Braze:\n\n1.  Follow the [Braze documentation](https://www.braze.com/docs/developer_guide/platform_integration_guides/swift/push_notifications/integration#push-notification-certificate) to generate a push notification certificate.\n2.  Add the following code to your `AppDelegate` file under the `didFinishLaunchingWithOptions` method:\n\n```\n[[UIApplication sharedApplication] registerForRemoteNotifications];\n\nUNUserNotificationCenter *center = UNUserNotificationCenter.currentNotificationCenter;\n[center setNotificationCategories:BRZNotifications.categories];\ncenter.delegate = self;\nUNAuthorizationOptions options = UNAuthorizationOptionAlert | UNAuthorizationOptionSound | UNAuthorizationOptionBadge;\nif (@available(iOS 12.0, *)) {\n    options = options | UNAuthorizationOptionProvisional;\n}\n[center requestAuthorizationWithOptions:options\n                      completionHandler:^(BOOL granted, NSError *_Nullable error) {\n    NSLog(@\"Notification authorization, granted: %d, \"\n          @\"error: %@)\",\n          granted, error);\n}];\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You must assign the delegate object using `center.delegate = self` synchronously before your app finishes launching - preferably in `application:didFinishLaunchingWithOptions`. Otherwise, your app may miss any incoming push notificaitons. See [Apple’s `UNUserNotificationCenterDelegate` documentation](https://developer.apple.com/documentation/usernotifications/unusernotificationcenterdelegate) for more information.\n\n3.  Register push tokens with Braze:\n\n```\n// - Register the device token with Braze\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n    if ([RudderBrazeFactory instance].integration) {\n        [[RudderBrazeFactory instance].integration didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\n    }\n}\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Make sure that `RudderBrazeFactory` is initialized before making calls to this push API.\n> \n> Since the Braze push API is designed as an instance method, it relies on the SDK that is correctly initialized beforehand. To do this, you can utilize the [`dispatch_after`](https://developer.apple.com/documentation/dispatch/1452876-dispatch_after) API.\n\n4.  Enable push handling:\n\n```\n// - Add support for silent notification\n\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler: (void (^)(UIBackgroundFetchResult))completionHandler {\n    if ([RudderBrazeFactory instance].integration) {\n        [[RudderBrazeFactory instance].integration didReceiveRemoteNotification:userInfo fetchCompletionHandler:completionHandler];\n    }\n}\n\n// - Add support for push notifications\n\n- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)(void))completionHandler {\n    if ([RudderBrazeFactory instance].integration) {\n        [[RudderBrazeFactory instance].integration didReceiveNotificationResponse:response withCompletionHandler:completionHandler];\n    }\n}\n\n// - Add support for displaying push notification when the app is currently running in the foreground\n\n- (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler: (void (^)(UNNotificationPresentationOptions))completionHandler {\n    if (@available(iOS 14, *)) {\n        completionHandler(UNNotificationPresentationOptionList |\n                          UNNotificationPresentationOptionBanner);\n    } else {\n        completionHandler(UNNotificationPresentationOptionAlert);\n    }\n}\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> According to [Braze documentation](https://www.braze.com/docs/developer_guide/platform_integration_guides/swift/push_notifications/integration#step-3-enable-push-handling), invoking the push integration code within the application’s main thread is recommended.\n\nAdd the following code to your `AppDelegate` file under the `didFinishLaunchingWithOptions` method:\n\n```\nif #available(iOS 10, *) {\n    let center = UNUserNotificationCenter.current()\n    center.delegate = self\n    var options: UNAuthorizationOptions = [.alert, .sound, .badge]\n    if #available(iOS 12.0, *) {\n        options = UNAuthorizationOptions(rawValue: options.rawValue | UNAuthorizationOptions.provisional.rawValue)\n        }\n        center.requestAuthorization(options: options) { (granted, error) in\n            RSClient.sharedInstance().pushAuthorizationFromUserNotificationCenter(granted)\n    }\n    UIApplication.shared.registerForRemoteNotifications()\n} else {\n    let types: UIUserNotificationType = [.alert, .badge, .sound]\n    let setting: UIUserNotificationSettings = UIUserNotificationSettings(types: types, categories: nil)\n    UIApplication.shared.registerUserNotificationSettings(setting)\n    UIApplication.shared.registerForRemoteNotifications()\n}\n```\n\n```\nif (floor(NSFoundationVersionNumber) > NSFoundationVersionNumber_iOS_9_x_Max) {\n  UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];\n  center.delegate = self;\n  UNAuthorizationOptions options = UNAuthorizationOptionAlert | UNAuthorizationOptionSound | UNAuthorizationOptionBadge;\n  if (@available(iOS 12.0, *)) {\n  options = options | UNAuthorizationOptionProvisional;\n  }\n  [center requestAuthorizationWithOptions:options\n                        completionHandler:^(BOOL granted, NSError * _Nullable error) {\n      [[RSClient sharedInstance] pushAuthorizationFromUserNotificationCenter:granted];\n  }];\n  [[UIApplication sharedApplication] registerForRemoteNotifications];\n} else {\n  UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:(UIUserNotificationTypeBadge | UIUserNotificationTypeAlert | UIUserNotificationTypeSound) categories:nil];\n  [[UIApplication sharedApplication] registerForRemoteNotifications];\n  [[UIApplication sharedApplication] registerUserNotificationSettings:settings];\n}\n```\n\n### Send in-app message events\n\nTo send in-app message events to Braze:\n\n1.  Add the following line to your `Podfile` for Braze IAM support:\n\n2.  Navigate to your Xcode app project directory and run `pod install`.\n3.  Import the BrazeUI SDK in your `AppDelegate.m` file:\n\n4.  Add a static variable to your `AppDelegate.m` file to keep a reference to the Braze instance throughout your app’s lifetime:\n\n5.  Add the following code in your `AppDelegate.m` file just after the RudderStack iOS SDK initialization snippet:\n\n```\nid<RSIntegrationFactory> brazeFactoryInstance = [RudderBrazeFactory instance];\n// RudderStack SDK initialization\n[[RSClient getInstance] onIntegrationReady:brazeFactoryInstance withCallback:^(NSObject *brazeInstance) {\n    if (brazeInstance && [brazeInstance isKindOfClass:[Braze class]]) {\n        braze = (Braze *)brazeInstance;\n        [self configureIAM];\n    } else {\n        NSLog(@\"Error getting Braze instance.\");\n    }\n}];\n```\n\n```\nlet brazeFactoryInstance = RudderBrazeFactory()\n// RudderStack SDK initialization\nRSClient.getInstance().onIntegrationReady(brazeFactoryInstance) { brazeInstance in\n    if let brazeInstance = brazeInstance as? Braze {\n        AppDelegate.braze = brazeInstance\n        self.configureIAM()\n    } else {\n        print(\"Error getting Braze instance.\")\n    }\n}\n```\n\n6.  Add the `configureIAM` method in the `AppDelegate.m` file:\n\n```\n-(void) configureIAM {\n    // Refer here: https://www.braze.com/docs/developer_guide/platform_integration_guides/swift/in-app_messaging/customization/setting_delegates/#setting-the-in-app-message-delegate\n    BrazeInAppMessageUI *inAppMessageUI = [[BrazeInAppMessageUI alloc] init];\n    braze.inAppMessagePresenter = inAppMessageUI;\n}\n```\n\n```\nfunc configureIAM() {\n    // Refer here: https://www.braze.com/docs/developer_guide/platform_integration_guides/swift/in-app_messaging/customization/setting_delegates/#setting-the-in-app-message-delegate\n    let inAppMessageUI: BrazeInAppMessageUI = BrazeInAppMessageUI()\n    AppDelegate.braze?.inAppMessagePresenter = inAppMessageUI\n}\n```\n\n## FAQ\n\n#### Where can I find the Braze App Key and REST API Key?\n\n1.  Log in to your [Braze dashboard](https://dashboard.braze.com/auth).\n2.  Go to **Settings** > **API Keys**.\n\nYou can find the REST API key for your workspace under the **REST API Keys** section:\n\n[![Braze REST API Key](https://www.rudderstack.com/docs/images/event-stream-destinations/braze-api-key.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/braze-api-key.webp)\n\nYou can find your Braze App Key in the **Identification** section:\n\n[![Braze App Key](https://www.rudderstack.com/docs/images/event-stream-destinations/braze-app-key.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/braze-app-key.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Braze destination | RudderStack Docs",
  "description": "Send your event data from RudderStack to Braze.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/branchio/",
  "markdown": "# Branch | RudderStack Docs\n\nSend your event data from RudderStack to Branch.\n\n* * *\n\n*     5 minute read  \n    \n\n[Branch.io](https://branch.io/) is an industry leader in cross-platform attribution, mobile app measurement, and deep linking. Many top-ranking apps use Branch to increase their performance and revenue through better performance and engagement.\n\nFind the open source transformer code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/master/src/v0/destinations/branch).\n\n## Getting started\n\nRudderStack supports sending events to Branch via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | **Supported** | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | \\-  |\n\nOnce you have confirmed that the source platform supports sending events to Branch, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **Branch Metrics**.\n2.  Assign a name to the destination and click **Continue**.\n\n## Connection settings\n\nTo successfully set up Branch as a destination, you will need to configure the following settings:\n\n*   **Branch key**: Enter your Branch key from the **Settings** section in the [Branch dashboard](https://dashboard.branch.io/#/settings). For more information on obtaining this key, see [FAQ](#faq).\n*   **Map Your Events To Branch Events**: Use this setting to map your RudderStack events to specific Branch events from the dropdown.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   This setting is currently available in cloud mode only.\n> *   The mappings specified using this setting override the [default event mappings](#ecommerce-event-mapping) configured by RudderStack internally.\n\n[![Branch event mapping setting](https://www.rudderstack.com/docs/images/event-stream-destinations/branch-event-mapping-ui.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/branch-event-mapping-ui.webp)\n\n*   **Client-side Events Filtering**: This setting lets you specify which events should be blocked or allowed to flow through to Branch. For more information on this setting, see the [Client-side Events Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) guide.\n*   **OneTrust cookie consent settings**: This setting lets you associate [OneTrust](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/javascript/) cookie consent groups to Branch.\n\n## Adding device mode integration\n\nDepending on your platform of integration, follow the below steps below to integrate Branch with your app.\n\n1.  Open the `Podfile` of your project and add the following line:\n\n```\npod 'Rudder-Branch', '2.0.0'\n```\n\n2.  Run the `pod install` command.\n3.  Change the SDK initialization to the following:\n\n```\nRudderConfigBuilder *builder = [[RudderConfigBuilder alloc] init];\n[builder withDataPlaneUrl:<data_plane_url>];\n[builder withFactory:[RudderBranchFactory instance]];\n[builder withLoglevel:RudderLogLevelDebug];\n[RudderClient getInstance:<write_key> config:[builder build]];\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This device mode integration is supported for Branch v1.41.0 and above.\n\nFollow these steps to add Branch to your iOS project:\n\n1.  Install `RudderBranch` (available through [CocoaPods](https://cocoapods.org/)) by adding the following line to your `Podfile`:\n\n```\npod 'RudderBranch', '~> 1.0.0'\n```\n\n2.  Run the `pod install` command.\n3.  Then, import the SDK depending on your preferred platform:\n\n4.  Next, add the imports to your `AppDelegate` file under the `didFinishLaunchingWithOptions` method:\n\n```\nlet config: RSConfig = RSConfig(writeKey: WRITE_KEY)\n            .dataPlaneURL(DATA_PLANE_URL)\n\nRSClient.sharedInstance().configure(with: config)\nRSClient.sharedInstance().addDestination(RudderBranchDestination())\n```\n\n```\nRSConfig *config = [[RSConfig alloc] initWithWriteKey:WRITE_KEY];\n[config dataPlaneURL:DATA_PLANE_URL];\n\n[[RSClient sharedInstance] configureWith:config];\n[[RSClient sharedInstance] addDestination:[[RudderBranchDestination alloc] init]];\n```\n\nYour Android project must be on **version 5.0 (API level 21) or higher** for RudderStack to be able to send events to Branch.\n\nOnce confirmed, follow these steps to add Branch to your Android project:\n\n1.  Open your `app/build.gradle` (Module: app) file, add the following\n\n```\nrepositories {\n    mavenCentral()\n}\n```\n\n2.  Add the following under `dependencies` section:\n\n```\nimplementation 'com.rudderstack.android.sdk:core:[1.20.1, 2.0.0)'\nimplementation 'com.rudderstack.android.integration:branch:2.0.0'\n```\n\n3.  If needed, add the following **optional** dependencies required by Branch in the `dependencies` section:\n\n```\n// required if your app is in the Google Play Store (tip: avoid using bundled play services libs)\nimplementation 'com.google.android.gms:play-services-ads-identifier:17.1.0+'\n// alternatively, use the following lib for getting the AAID\n// implementation 'com.google.android.gms:play-services-ads:17.2.0'\n// optional\n// Chrome Tab matching (enables 100% guaranteed matching based on cookies)\nimplementation 'androidx.browser:browser:1.0.0'\n// Replace above with the line below if you do not support androidx\n// implementation 'com.android.support:customtabs:28.0.0'\n```\n\n4.  Change the initialization of the SDK with the following:\n\n```\n// initialize Rudder SDK\nval rudderClient: RudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withLogLevel(RudderLogger.RudderLogLevel.DEBUG)\n            .withFactory(BranchIntegrationFactory.FACTORY)\n            .build()\n    )\n```\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call associates a user to their actions and also captures the traits associated with that user.\n\nA sample `identify` call captured from the RudderStack iOS SDK is as shown:\n\n```\n[[RudderClient sharedInstance] identify:@\"developer_user_id\"];\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can call `identify` when the user registers to the app for the first time, logs into the app, or updates their information.\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the customer events along with any properties associated with them.\n\nA sample `track` call is shown below:\n\n```\n[[RudderClient sharedInstance] track:@\"test_event\"\n                          properties:@{@\"key\":@\"value\", @\"foo\": @\"bar\"}]\n```\n\nAll the events tracked by RudderStack are divided into three major Branch event categories:\n\n*   [Commerce events](https://help.branch.io/developers-hub/docs/tracking-commerce-content-lifecycle-and-custom-events#track-commerce-events)\n*   [Content events](https://help.branch.io/developers-hub/docs/tracking-commerce-content-lifecycle-and-custom-events#track-content-events)\n*   [Lifecycle events](https://help.branch.io/developers-hub/docs/tracking-commerce-content-lifecycle-and-custom-events#track-lifecycle-events)\n\n### Ecommerce event mapping\n\nThe following table lists the mapping between the [RudderStack ecommerce events](https://www.rudderstack.com/docs/event-spec/ecommerce-events-spec/) and the Branch [commerce events](https://help.branch.io/developers-hub/docs/tracking-commerce-content-lifecycle-and-custom-events#available-events):\n\n| RudderStack event | Branch event |\n| --- | --- |\n| `Product Added` | `ADD_TO_CART` |\n| `Product Added to Wishlist` | `ADD_TO_WISHLIST` |\n| `Cart Viewed` | `VIEW_CART` |\n| `Checkout Started` | `INITIATE_PURCHASE` |\n| `Payment Info Entered` | `ADD_PAYMENT_INFO` |\n| `Order Completed` | `ADD_PAYMENT_INFO` |\n| `Spend Credits` | `SPEND_CREDITS` |\n| `Promotion Viewed` | `VIEW_AD` |\n| `Promotion Clicked` | `CLICK_AD` |\n| `Checkout Started` | `PURCHASE` |\n| `Order Completed` | `PURCHASE` |\n| `Reserve` | `RESERVE` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack also maps the `Spend Credits` event to Branch’s `SPEND_CREDITS`, although it is not directly a part of the ecommerce events.\n> \n> However, note that the Android device mode integration **does not** support this mapping.\n\n### Content event mapping\n\nThe following table lists the mapping between the RudderStack events and the Branch Content events:\n\n| RudderStack event | Branch event |\n| --- | --- |\n| `Products Searched` | `SEARCH` |\n| `Product Viewed` | `VIEW_ITEM` |\n| `Product List Viewed` | `VIEW_ITEMS` |\n| `Product Reviewed` | `RATE` |\n| `Product Shared` | `SHARE` |\n| `Initiate Stream` | `INITIATE_STREAM` |\n| `Complete Stream` | `COMPLETE_STREAM` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The above mentioned events are a part of the RudderStack ecommerce events but are mapped to Branch’s Content events.\n\n### Lifecycle event mapping\n\nRudderStack supports mapping the following Branch lifecycle events:\n\n| RudderStack event | Branch event |\n| --- | --- |\n| `Complete Registration` | `COMPLETE_REGISTRATION` |\n| `Complete Tutorial` | `COMPLETE_TUTORIAL` |\n| `Achieve Level` | `ACHIEVE_LEVEL` |\n| `Unlock Achievement` | `UNLOCK_ACHIEVEMENT` |\n| `Invite` | `INVITE` |\n| `Login` | `LOGIN` |\n| `Start Trial` | `START_TRIAL` |\n| `Subscribe` | `SUBSCRIBE` |\n\n## Reset\n\nThe `reset` method resets the previously identified user and related information.\n\nA sample `reset` call is shown:\n\n```\n[[RSClient getInstance] reset];\n```\n\n## Property mappings\n\nThe following table lists the mapping of the accepted RudderStack properties common to all events:\n\n| RudderStack property | Branch property |\n| --- | --- |\n| `title` | `$og_title` |\n| `description` | `$og_description` |\n| `image_url` | `$og_image_url` |\n| `canonical_identifier` | `$canonical_identifier` |\n| `publicly_indexable` | `$publicly_indexable` |\n| `price` | `$price` |\n| `locally_indexable` | `$locally_indexable` |\n| `quantity` | `$quantity` |\n| `sku` | `$sku` |\n| `name` | `$product_name` |\n| `brand` | `$product_brand` |\n| `category` | `$product_category` |\n| `variant` | `$product_variant` |\n| `rating_average` | `$rating_average` |\n| `rating_count` | `$rating_count` |\n| `rating_max` | `$rating_max` |\n| `creating_timestamp` | `$creation_timestamp` |\n| `exp_date` | `$exp_date` |\n| `keywords` | `$keywords` |\n| `address_street` | `$address_street` |\n| `address_city` | `$address_city` |\n| `address_region` | `$address_region` |\n| `address_country` | `$address_country` |\n| `address_postal_code` | `$address_postal_code` |\n| `latitude` | `$latitude` |\n| `longitude` | `$longitude` |\n| `image_captions` | `$image_captions` |\n| `condition` | `$condition` |\n\n## FAQ\n\n#### Where can I find the Branch key?\n\nTo retrieve your Branch key, follow these steps:\n\n1.  Log into your [Branch dashboard](https://dashboard.branch.io/).\n2.  Go to **Account Settings** > **Profile**.\n3.  You can find the Branch Key under **Branch Key and Secret** section:\n\n[![Branch key](https://www.rudderstack.com/docs/images/event-stream-destinations/branchio-key.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/branchio-key.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Branch | RudderStack Docs",
  "description": "Send your event data from RudderStack to Branch.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/campaign-manager-360/",
  "markdown": "# Campaign Manager 360 | RudderStack Docs\n\nSend your event data from RudderStack to Campaign Manager 360.\n\n* * *\n\n*     5 minute read  \n    \n\n[Campaign Manager 360](https://developers.google.com/doubleclick-advertisers/guides/conversions_overview) is an ad management platform which optimizes your digital campaigns across websites and mobile. It provides many useful features for ad serving, targeting, verification, and reporting.\n\nRudderStack supports sending the offline conversion events to Campaign Manager 360 by leveraging their [Conversions API](https://developers.google.com/doubleclick-advertisers/rest/v4/conversions).\n\nFind the open source code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/master/src/v0/destinations/campaign_manager).\n\n## Getting started\n\nRudderStack supports sending event data to Campaign Manager 360 via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| Device mode | \\-  | \\-  | \\-  |\n| Cloud mode | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the source platform supports sending events to Campaign Manager 360, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add the source. Then, from the list of destinations, select **Campaign Manager 360**.\n2.  Assign a name to your destination and click **Continue**.\n\n## Connection settings\n\nTo successfully configure Campaign Manager 360 as a destination, first authenticate your account by following the below steps:\n\n1.  Click **Create Account** in the **Account Settings** section.\n2.  From the modal, click the **Sign in with Google** button.\n3.  Choose the required account and grant RudderStack the required permissions.\n4.  Click **Save** to use the specified account:\n\n[![Google Account authentication](https://www.rudderstack.com/docs/images/event-stream-destinations/cm-360-account-connect-normal.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/cm-360-account-connect-normal.webp)\n\nIf you have authenticated multiple accounts, you can click **Edit Credentials** to select or delete any other authenticated account:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> RudderStack throws an error if you try to delete an account used by any other connection set up for the same destination.\n\n[![Google Account authentication](https://www.rudderstack.com/docs/images/event-stream-destinations/cm-360-edit-account-creds.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/cm-360-edit-account-creds.webp)\n\nNext, configure the following settings:\n\n*   **Profile ID**: Enter the user profile ID associated with the request. See the [`batchinsert`](https://developers.google.com/doubleclick-advertisers/rest/v4/conversions/batchinsert) and [`batchupdate`](https://developers.google.com/doubleclick-advertisers/rest/v4/conversions/batchupdate) methods of the Campaign Manager 360 Conversions API for more information.\n    \n*   **Limit ad tracking**: Toggle on this setting to report a conversion but not target it, thus preventing remarketing.\n    \n*   **Child directed treatment**: Toggle on this setting to allow requests from users under the age of 13 **(required for COPPA compliance)**.\n    \n*   **Non personalized ad**: Toggle on this setting if the conversion is intended for a non-personalized ad.\n    \n*   **Treatment for underage**: Toggle on this setting to allow requests from users under the age of 16 **(required for European Union’s GDPR compliance)**.\n    \n*   **Enhanced conversions**: Toggle on this setting to [send enhanced conversions](#send-enhanced-conversions) to Campaign Manager 360. If toggled on, you will see the following setting:\n    \n    *   **Hash user identifiers**: Hashes user identifiers in your events before sending the data to Campaign Manager 360. RudderStack recommends turning it off if you are already sending hashed data in your events.\n*   **Consent management settings**: This setting lets you associate the cookie consent groups to Campaign Manager 360. Specify the consent management provider from the dropdown and enter the category IDs.\n    \n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can also pass values for these dashboard settings in the [track](#track) events. Note that these values will take precedence over the dashboard settings. See the [Campaign Manager 360 documentation](https://developers.google.com/doubleclick-advertisers/rest/v3.5/Conversion) for more information on these settings.\n\n## Track\n\nYou can use the [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call to capture user events along with the associated properties and send them to Campaign Manager 360.\n\nA sample `track` call is shown below:\n\n```\nrudderanalytics.track(\"Product Reviewed\", {\n  \"profileId\": 437689,\n  \"floodlightConfigurationId\": \"213123123\",\n  \"ordinal\": \"3\",\n  \"floodlightActivityId\": \"456543345245\",\n  \"mobileDeviceId\": \"mobileDeviceId\",\n  \"value\": 7,\n  \"encryptedUserId\": \"encrepyteduserId\"\n  \"impressionId\": \"string\",\n  \"limitAdTracking\": false,\n  \"childDirectedTreatment\": true,\n  \"encryptionInfo\": {\n    \"kind\": \"dfareporting#encryptionInfo\",\n    \"encryptionSource\": \"AD_SERVING\",\n    \"encryptionEntityId\": \"3564523\",\n    \"encryptionEntityType\": \"DCM_ACCOUNT\"\n  },\n  \"requestType\": \"batchinsert\"\n})\n```\n\n### Send enhanced conversions\n\nThe Campaign Manager 360 Conversions API supports [sending enhanced website tag-based conversions](https://developers.google.com/doubleclick-advertisers/guides/conversions_ec) with user identifiers.\n\nTo use this feature, you must first accept the [Enhanced Conversions Terms of Service](https://support.google.com/sa360/answer/12863936) for your Floodlight configuration in Campaign Manager 360 by following these steps:\n\n1.  Log in to your Campaign Manager 360 account.\n2.  Select the advertiser for which you want to set up the enhanced conversions.\n3.  Go to **Floodlight** > **Configuration** in the left sidebar and select the checkbox under the **Enhanced Conversion** section.\n\nTo send enhanced conversions to Campaign Manager 360, toggle on the **Enhanced conversions** setting in the [dashboard](#connection-settings) and set `properties.requestType` to `batchupdate` in your `track` events, as shown:\n\n```\nrudderanalytics.track(\n  \"Product Reviewed\", {\n    \"profileId\": \"34245\",\n    \"floodlightConfigurationId\": \"213123123\",\n    \"ordinal\": \"string\",\n    \"floodlightActivityId\": \"456543345245\",\n    \"value\": \"756\",\n    \"quantity\": \"455678\",\n    \"gclid\": \"string\",\n    \"encryptionSource\": \"AD_SERVING\",\n    \"encryptionEntityId\": \"3564523\",\n    \"encryptionEntityType\": \"DCM_ACCOUNT\",\n    \"requestType\": \"batchupdate\"\n  }, {\n    email: \"alex@example.com\",\n    firstName: \"Alex\",\n    lastName: \"Keener\",\n    address: {\n      street: \"350 Blue Gum Street\",\n      city: \"New Orleans\",\n      state: \"Louisiana\",\n      country: \"US\",\n      postalCode: \"90009\",\n    },\n  },\n);\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   You must enhance the conversions with user identifiers within 24 hours after they are captured by the online tags.\n> *   A conversion can have a maximum of five user identifiers.\n\nFor security purposes, RudderStack automatically hash-encrypts the user identifiers before sending them to Campaign Manager 360. Make sure to turn off the **Hash user identifiers** dashboard setting if you are already tracking hashed user data via RudderStack.\n\n### Property mappings\n\nThe following table lists the event property mappings between RudderStack and Campaign Manager 360:\n\n| RudderStack property | Campaign Manager 360 property | Data type |\n| --- | --- | --- |\n| `properties.floodlightActivityId`  <br>Required | `floodlightActivityId` | String |\n| `properties.floodlightConfigurationId`  <br>Required | `floodlightConfigurationId` | String |\n| `properties.ordinal`  <br>Required | `ordinal` | String |\n| `properties.quantity`  <br>Required | `quantity` | String |\n| `timestamp`  <br>Required | `timestampMicros` | Timestamp in ISO 8601 format |\n| `properties.profileId`  <br>`config.profileId` | `profileId` | Number |\n| `properties.encryptedUserId` | `encryptedUserId` | String |\n| `properties.encryptedUserIdCandidates[]` | `encryptedUserIdCandidates[]` | Array |\n| `properties.dclid` | `dclid` | String |\n| `properties.gclid` | `gclid` | String |\n| `properties.matchId` | `matchId` | String |\n| `properties.mobileDeviceId` | `mobileDeviceId` | String |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Apart from the above-mentioned properties marked as required, you must also send the following:\n> \n> *   `properties.requestType` in the conversion event with the value as [`batchinsert`](https://developers.google.com/doubleclick-advertisers/rest/v4/conversions/batchinsert) or [`batchupdate`](https://developers.google.com/doubleclick-advertisers/rest/v4/conversions/batchupdate).\n> *   **At least one** of the optional fields.\n\n#### User identifier mappings for enhanced conversions\n\nThe following table lists the user identifier mappings between RudderStack and Campaign Manager 360:\n\n| RudderStack property | Campaign Manager 360 property |\n| --- | --- |\n| `traits.email`  <br>`context.traits.email` | `hashedEmail` |\n| `traits.phone`  <br>`context.traits.phone` | `hashedPhoneNumber` |\n| `traits.firstName`  <br>`context.traits.firstName` | `addressInfo.hashedFirstName` |\n| `traits.lastName`  <br>`context.traits.lastName` | `addressInfo.hashedLastName` |\n| `traits.street`  <br>`traits.address.street`  <br>`context.traits.street`  <br>`context.traits.address.street` | `addressInfo.hashedStreetAddress` |\n| `traits.city`  <br>`traits.address.city`  <br>`context.traits.city`  <br>`context.traits.address.city` | `addressInfo.city` |\n| `traits.country`  <br>`traits.address.country`  <br>`context.traits.country`  <br>`context.traits.address.country` | `addressInfo.countryCode` |\n| `traits.state`  <br>`traits.address.state`  <br>`context.traits.state`  <br>`context.traits.address.state` | `addressInfo.state` |\n| `traits.postalCode`  <br>`traits.address.postalCode`  <br>`context.traits.postalCode`  <br>`context.traits.address.postalCode` | `addressInfo.postalCode` |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Campaign Manager 360 | RudderStack Docs",
  "description": "Send your event data from RudderStack to Campaign Manager 360.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/customer.io/",
  "markdown": "# Customer.io destination | RudderStack Docs\n\nSend your event data from RudderStack to Customer.io.\n\n* * *\n\n*     7 minute read  \n    \n\n[Customer.io](https://customer.io/) is a popular marketing platform for sending targeted emails and push and SMS notifications to improve customer engagement and overall conversion rate.\n\nFind the open source transformer code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/master/src/v0/destinations/customerio).\n\n## Getting started\n\nRudderStack supports sending event data to Customer.io via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| Connection Mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| **Device mode** | **Supported** | \\-  | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In a web device mode integration, that is, using [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) as a source, RudderStack loads the Customer.io native SDK from the `https://assets.customer.io/` domain. Based on your website’s content security policy, you might need to [allowlist this domain](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#allowlist-destination-domain) to load the Customer.io SDK successfully.\n\nOnce you have confirmed that the platform supports sending events to Customer.io, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add the source. From the list of destinations, select **Customer.io**.\n2.  Assign a name to the destination and click **Continue**.\n\n### Connection settings\n\nThe connection settings required to configure Customer.io as a destination in RudderStack are listed below:\n\n*   **Site ID**: Enter your Customer.io site ID.\n*   **API Key**: Enter your Customer.io API key.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on obtaining your Customer.io site ID and API key, see [FAQ](#faq).\n\n*   **Event sent after setting device token**: Enter the name of the event that is fired immediately after setting the device token.\n*   **Data center**: Choose your Customer.io data center from **US** or **EU**.\n\n*   **Client-side Events Filtering**: This setting lets you specify which events should be blocked or allowed to flow through to Customer.io. For more information on this setting, see the [Client-side Events Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) guide.\n\n#### Consent settings\n\n*   **OneTrust Cookie Categories**: This setting lets you associate OneTrust cookie consent groups to Customer.io. For more information on this setting, see the [OneTrust Consent Manager](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/javascript/) guide.\n*   **Ketch Consent Purposes**: This setting lets you associate Ketch consent purposes to Customer.io. For more information on this setting, see the [Ketch Consent Manager](https://www.rudderstack.com/docs/data-governance/consent-management/ketch/) guide.\n\n#### Web SDK settings\n\n*   **Use native SDK to send events**: Turn on this setting to send the events through Customer.io’s native JavaScript SDK.\n*   **Send page name in SDK mode**: When sending events in web device mode using the native web SDK, RudderStack sends the page name to Customer.io if this setting is toggled on. Otherwise, Customer.io fetches the page name in the form of a URL.\n*   **Enable in-app message support**: Turn on this setting to send in-app messages to your website using the native web SDK. For more information on setting up in-app messages for your website, see the [Customer.io documentation](https://customer.io/docs/journeys/in-app-getting-started/#javascript-snippet).\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> **`userId` is a mandatory field for Customer.io**.\n> \n> If it is not present, RudderStack:\n> \n> *   Uses `email` in [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode). If `email` is absent too, it drops the event.\n> *   Drops the event in [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode).\n\nRudderStack also sends the `createdAt` field as `created_at` to Customer.io to register the user signup time. If it is not present in the event, RudderStack automatically assigns the event’s timestamp to `created_at` before sending it to Customer.io.\n\nA sample `identify` call is shown below:\n\n```\nrudderanalytics.identify(\"userId\", {\n  name: \"Tintin\",\n  city: \"Brussels\",\n  country: \"Belgium\",\n  email: \"tintin@herge.com\"\n});\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> You cannot use the same `email` to make consecutive `identify` calls with different `userId`.\n\nTo update user information, you can use [`cio_id`](https://customer.io/docs/journeys/identifying-people/#cio_id) - the Customer.io canonical identifier:\n\n```\nrudderanalytics.identify('<cio_id>', {\n  email: '<updated_email>@example.com',\n  id: '<updated_id>'\n});\n```\n\n### Unsubscribing users\n\nYou can pass `unsubscribed: true` in the `identify` call to unsubscribe a user in Customer.io:\n\n```\nrudderanalytics.identify(\"userId\", {\n  email: \"tintin@herge.com\",\n  unsubscribed: true\n});\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Make sure the user ID and the email values match the Customer.io attributes. You can verify this by selecting that user in the [People](https://customer.io/docs/getting-started-people/) page in your Customer.io dashboard and clicking on **Attributes**.\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you record the user actions along with their associated properties and send them to Customer.io.\n\nA sample `track` call is shown below:\n\n```\nrudderanalytics.track(\"Track me\", {\n  category: \"category\",\n  label: \"label\",\n  value: \"value\",\n});\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> For anonymous users, Customer.io does not permit an event name of size more than 100 Bytes. RudderStack automatically trims the event names in such a scenario.\n> \n> For more information on the Track API event limits, see the [Customer.io documentation](https://www.customer.io/docs/api/track/#section/Track-API-Event-limits).\n\n## Page\n\nIf you are using a native web SDK, RudderStack loads the Customer.io JavaScript snippet and captures the page views automatically. You can also send the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) event to record the page views along with the other page-related information.\n\nA sample `page` call is as shown below:\n\n```\n// \"home\" is the name of the page.\nrudderanalytics.page(\"home\", {\n  path: \"path\",\n  url: \"url\",\n  title: \"title\",\n  search: \"search\",\n  referrer: \"referrer\",\n});\n```\n\n## Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call is the mobile equivalent of the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call. It lets you record the screen views on your mobile app along with other relevant information about the screen.\n\nIf you have enabled screen views in your app implementation in the [iOS](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/) or [Android](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-android-sdk/) SDK, RudderStack registers the screen views as `Viewed <screen_name> Screen` under the user’s **Activities** tab.\n\nRudderStack also forwards the event properties to Customer.io as received.\n\nA sample `screen` call using RudderStack’s iOS SDK is shown below:\n\n```\n[[RudderClient sharedInstance] screen:@\"Main\"\n            properties:@{@\"prop_key\" : @\"prop_value\"}];\n```\n\nRudderStack transforms the above event as `Viewed Main Screen` before sending it to Customer.io.\n\n## Group\n\nThe [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call lets you link an identified user with a group, such as a company, organization, or an account. It also lets you record any custom traits or properties associated with that group and send this information to Customer.io.\n\nA sample `group` call is shown below:\n\n```\nrudderanalytics.group(\"group@49\", {\n  email: \"help@rudderstack.com\",\n  action: \"identify\"\n})\n```\n\nRudderStack automatically maps the following properties to the corresponding Customer.io properties:\n\n| RudderStack property | Customer.io property | Default value |\n| --- | --- | --- |\n| `groupId`  <br>Required | `identifiers_object_id` | \\-  |\n| `traits.action`  <br>`properties.action`  <br>Required - if not present, RudderStack sets it to `identify` by default. | `action`  <br>Accepted values are `identify`, `delete`, `delete_relationships`, `add_relationships` | `identify` |\n| `traits` | `attributes` | \\-  |\n| `userId` | `identifiers.id` | \\-  |\n| `context.traits.email`  <br>`properties.email`  <br>`context.externalId.0.id` | `identifiers.email` | \\-  |\n| `traits.objectTypeId` | `identifiers.object_type_id` | `1` |\n\n## Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user. It is an advanced method that lets you change the tracked user’s ID explicitly.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The `alias` call is applicable only when both the user identities are present in Customer.io. The mapping can be ID to ID, email to email, email to ID, and ID to email.\n\nA sample `alias` call is as shown below:\n\n```\nrudderanalytics.alias(\"userId\", \"previousId\");\n```\n\nYou can merge two accounts using `email` as well. RudderStack sets the primary email as `userId` and secondary email as `previousId`.\n\nA sample `alias` call merging two accounts is shown:\n\n```\nrudderanalytics.alias(\"<primary.email>\", \"<secondary.email>\");\n```\n\n## Device token registration\n\nRudderStack registers the device token to Customer.io for the following [Application Lifecycle Events](https://www.rudderstack.com/docs/event-spec/standard-events/application-lifecycle-events-spec/):\n\n*   `Application Installed`\n*   `Application Opened`\n\nTo use this feature, enable the `trackApplicationLifecycleEvents` feature in your mobile SDK implementation code. Also, you need to register your device token after initializing the SDK.\n\nThe following snippets demonstrate registering the device token for iOS and Android:\n\n```\n[[[RudderClient sharedInstance] getContext] putDeviceToken:[self getDeviceToken]];\n```\n\n```\nRudderClient.putDeviceToken(getDeviceToken())\n```\n\nYou can also specify the event name to be fired after setting the device token using the **Event sent after setting device token** dashboard setting.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure you fire the event just after setting the device token in your app, so RudderStack can immediately register the device token on that event and not delay until the next lifecycle event.\n\nThe following snippets demonstrate how you can send a `device_token_registered` event after setting the device token in your app:\n\n```\n[[RSClient sharedInstance] track:@\"device_token_registered\"];\n```\n\n```\nrudderClient!!.track(\"device_token_registered\")\n```\n\nRudderStack also supports removing the device (identified by `device_id`) whenever you send a custom `Application Uninstalled` event.\n\n## FAQ\n\n#### Where do I find the Customer.io API key and site ID?\n\nTo obtain the Customer.io API key and site ID, follow these steps:\n\n1.  Sign in to your [Customer.io dashboard](https://fly.customer.io/).\n2.  In the left panel, click **Settings** and select **Account Settings**.\n3.  Then, click **API Credentials**. You should find the site ID and API key for your project listed here.\n\n[![Customer.io site ID and API key](https://www.rudderstack.com/docs/images/event-stream-destinations/customerio-siteid-apikey.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/customerio-siteid-apikey.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Customer.io destination | RudderStack Docs",
  "description": "Send your event data from RudderStack to Customer.io.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/dcm-floodlight/setting-up-dcm-floodlight-in-rudderstack/",
  "markdown": "# Set up DCM Floodlight | RudderStack Docs\n\nSet up DCM Floodlight as a destination in RudderStack.\n\n* * *\n\n*     5 minute read  \n    \n\nRudderStack supports sending event data to DCM Floodlight via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | **Supported** | \\-  | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In a web device mode integration, that is, using [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) as a source, the DCM Floodlight native SDK is loaded from `https://www.googletagmanager.com/` domain. Based on your website’s content security policy, you might need to [allowlist this domain](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#allowlist-destination-domain) to load the DCM Floodlight SDK successfully.\n\nOnce you have confirmed that the source platform supports sending events to DCM Floodlight, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **DCM Floodlight**.\n2.  Assign a name to the destination and click **Next**.\n\n## Connection settings\n\nTo successfully configure DCM Floodlight as a destination, you will need to configure the following settings:\n\n[![DCM Floodlight connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/dcm-floodlight-connection-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/dcm-floodlight-connection-settings.webp)\n\n*   **DoubleClick Advertiser ID:** Enter your Advertiser ID visible in the **Campaigns** or **Activities** tab in your dashboard.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Refer to the [FAQ](#faq) section for more information on obtaining the Advertiser ID.\n\n*   **Activity Tag:** Enter the Floodlight Activity Tag (`cat`) to define the same parameter value across all conversion events. Alternatively, you can define this value for each conversion event mapping in the **Floodlight Activity Tag** field below.\n*   **Group Tag:** Enter the Floodlight Group Tag (`type`) to define the same parameter value across all group conversion events. Alternatively, you can define this value for each conversion event in the **Floodlight Group Tag** field below.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on finding `cat` and `type` in your Campaign Manager dashboard, refer to the [FAQ](#faq) section below.\n\n### Conversion events\n\n[![DCM Floodlight connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/dcm-floodlight-connection-settings-2.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/dcm-floodlight-connection-settings-2.webp)\n\n*   **RudderStack Event Name:** Enter your RudderStack event name which will be mapped to the Floodlight tag.\n*   **Floodlight Activity Tag:** Enter the `cat` of your tag string. If left blank, RudderStack will pick the value from the **Activity Tag** field mentioned above.\n*   **Floodlight Group Tag:** Enter the `type` of your tag string. If left blank, RudderStack will pick the value from the **Group Tag** field mentioned above.\n*   **Floodlight Counting Method**: Specify the counting method for the conversion event. RudderStack uses this as a fallback value if `properties.countingMethod` is not present in the event.\n*   **Fire as Sales Tag:** Enable the toggle button for Sales tag. Keep it disabled if it is a Counter tag.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> *   **Counter tag**: Used to count the number of conversions. It is supposed to be placed on the confirmation page after a sale with information about the `ord` property passed to the tag.\n> *   **Sales tag**: Used to count the number of conversions, the total number of sales that take place, and the total associated revenue. It is supposed to be placed on the confirmation page after a sale with information about the sales, like `cost`, `qty`, or `ord` properties passed to the tag.\n\n*   **Custom Floodlight variables:** Enter the custom Floodlight variables to capture additional reporting data beyond the usual metrics (like visits and revenue).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on finding the custom Floodlight variables, refer to the [FAQ](#faq) section below.\n\n### Client-side events filtering\n\n[![DCM Floodlight connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/dcm-floodlight-connection-settings3.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/dcm-floodlight-connection-settings3.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This option is applicable only if you’re sending events to DCM Floodloght via web device mode. Refer to the [Client-side Event Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) guide for more information on this feature.\n\n### Web device mode settings\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> All the settings mentioned in this section are applicable only for the [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode).\n\n[![DCM Floodlight connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/dcm-floodlight-connection-settings4-new.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/dcm-floodlight-connection-settings4-new.webp)\n\n*   **Use device mode to send events**: Enable this setting to send events via the [RudderStack device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can change the setting to enable or disable device mode to send events at any point. However, it takes some time for the new changes to be reflected.\n\n*   **Tag Format**: Select the tag format from the dropdown. RudderStack supports both the **Global site tag** and the **Iframe** tag. Note that your [conversion events](#conversion-events) configured in the RudderStack dashboard must be of the same tag format.\n\n*   **Conversion Linker**: Enabled by default, it sets the first-party cookies on your site’s domain.\n*   **Allow ad personalization signals**: Enabled by default, it lets the global site tag to collect remarketing data.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The **Conversion Linker** and **Allow ad personalization signals** settings are only applicable for the global site tag.\n\n*   **DoubleClick Id**: Enable this setting if you want to use the Google’s cookie matching functionality. Also, provide the below:\n*   **Google Network Id**: Enter the Google Network ID (NID) for the bidder account.\n\nFinally, click **Next** to enable DCM Floodlight as a destination in RudderStack.\n\n## FAQ\n\n#### Where can I find the activity tag string (cat) and group tag string (type)?\n\nIn your Campaign Manager dashboard, go to **Floodlight** > **Activities**. Here you can see all activity names along with their **Activity tag string** (`cat`) and Group tag string (`type`):\n\n[![DCM Floodlight cat and type strings](https://www.rudderstack.com/docs/images/event-stream-destinations/dcm-floodlight-cat-vs-type.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/dcm-floodlight-cat-vs-type.webp)\n\n#### Where can I find the Advertiser ID?\n\nTo get the Advertiser ID, go to your [Campaign Manager 360](https://campaignmanager.google.com/) account and navigate to the **Campaigns** or **Activities** tab in your dashboard to obtain the `Advertiser ID`:\n\n[![DCM Floodlight advertiser ID](https://www.rudderstack.com/docs/images/event-stream-destinations/dcm-floodlight-advertiser-id.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/dcm-floodlight-advertiser-id.webp)\n\n#### Where can I find the custom Floodlight variables?\n\nTo create custom Floodlight variables, refer to this [Campaign Manager guide](https://support.google.com/campaignmanager/answer/2823222?hl=en).\n\nYou can find the custom Floodlight variables for your activities by going to **Floodlight** > **Activities**. Then, click any activity to view the custom variables associated with it:\n\n[![DCM Floodlight custom variables](https://www.rudderstack.com/docs/images/event-stream-destinations/dcm-floodlight-custom-variables.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/dcm-floodlight-custom-variables.webp)\n\n#### How can I get the reports of the events in DCM Floodlight?\n\nIn your Campaign Manager dashboard, you get two reporting options under **Report Builder** - **Instant Reporting** and **Offline Reporting**:\n\n[![DCM Floodlight report builder](https://www.rudderstack.com/docs/images/event-stream-destinations/dcm-floodlight-report-builder.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/dcm-floodlight-report-builder.webp)\n\nTo generate an offline report of the events, follow these steps:\n\n1.  Go to **New** > **Floodlight**.\n2.  Select the **Floodlight Configuration** and other fields like **Activities**, **Dimensions**, and **Metrics** as per your requirement.\n\n[![DCM Floodlight report settings](https://www.rudderstack.com/docs/images/event-stream-destinations/dcm-floodlight-report-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/dcm-floodlight-report-settings.webp)\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> It may take up to 24 hours for your events to reflect in the reports.\n\n#### What are unattributed cookie conversions?\n\nA conversion is said to be unattributed if the user has a DoubleClick cookie but it is converted without any exposure. This means that the user did not click or view any ad from the advertiser within Floodlight, or the interaction happened outside the lookback window.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Set up DCM Floodlight | RudderStack Docs",
  "description": "Set up DCM Floodlight as a destination in RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/dcm-floodlight/",
  "markdown": "# DCM Floodlight | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "DCM Floodlight | RudderStack Docs",
  "description": "Send your event data from RudderStack to DCM Floodlight.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/candu/",
  "markdown": "# Candu | RudderStack Docs\n\nSend your event data from RudderStack to Candu.\n\n* * *\n\n*     2 minute read  \n    \n\n[Candu](https://www.candu.ai/) is a product experience platform that provides no-code web tools for SaaS applications. It lets software teams to design, refine, and personalize their application’s user interface to create intuitive product experiences.\n\nRudderStack supports Candu as a destination platform where you can send your event data seamlessly.\n\n## Getting started\n\nBefore configuring Candu as a destination in RudderStack, verify if the source platform is supported by Candu by referring to the table below:\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | \\-  | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the source platform supports sending events to Candu, follow these steps:\n\n*   From your [RudderStack dashboard](https://app.rudderstack.com/), add the source. Then, from the list of destinations, select **Candu**.\n\n[![Candu connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/candu-connection-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/candu-connection-settings.webp)\n\n## Connection settings\n\nTo successfully configure Candu as a destination, you will need to configure the following settings:\n\n*   **API Key**: Your API Key is the unique key generated against your Candu account. You can find it under the **Settings** > **Workspaces** > **Access Keys** section of your Candu account. Refer to the [FAQ section](#faq) for more details.\n\n## Identify\n\nThe `identify` call lets you capture the details of a visiting user along with any associated traits such as their name, email address, etc.\n\nA sample `identify` call is shown below:\n\n```\nrudderanalytics.identify(\"webUser01\", {\n  email: \"abc@mail.com\",\n  firstName: \"Name\",\n  lastName: \"LastName\",\n  phoneNumber: \"22222222\",\n  dateOfBirth: \"xxxx-xx-xx\",\n  custom_fields: {\n    key1: \"value1\",\n    key2: \"value2\",\n  },\n});\n}\n```\n\n## Track\n\nThe `track` call lets you capture user events along with the properties associated with them.\n\nA sample `track` call is shown below:\n\n```\nrudderanalytics.track('Promotion Clicked', {\n  promotion_id: 'promo1',\n  creative: 'banner1',\n  name: 'sale',\n  position: 'home_top'\n});\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> When sending events to Candu, make an `identify` call before the `track` call. This ensures that no duplicate user identities are created in the Candu platform.\n\n## FAQ\n\n#### Where can I get the API key in Candu?\n\n1.  Login to your Candu account.\n2.  Go to the **Settings** option.\n3.  Look for the API key under **Access Keys** section in the **Workspaces** tab.\n    \n    [![API Key Candu Account](https://www.rudderstack.com/docs/images/event-stream-destinations/candu-api-key.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/candu-api-key.webp)\n    \n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Candu | RudderStack Docs",
  "description": "Send your event data from RudderStack to Candu.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/digitalocean-spaces/",
  "markdown": "# DigitalOcean Spaces | RudderStack Docs\n\nSend your event data from RudderStack to DigitalOcean Spaces.\n\n* * *\n\n*     2 minute read  \n    \n\nDigitalOcean Spaces is an S3-compatible object storage service that lets you store and serve large amounts of data. Each Space is a bucket for you to store and serve files. The free, built-in Spaces CDN minimizes page load times, improves performance, and reduces bandwidth and infrastructure costs.\n\nRudderStack allows you to configure Spaces as a destination to which you can dump your event data seamlessly.\n\n## Setting up Spaces\n\nPlease follow these steps to set up Spaces before adding it as a destination in RudderStack:\n\n*   Login to your DigitalOcean Spaces service\n*   Create a new bucket. Alternatively, you can also use an already existing bucket.\n*   You will need to provide `access key ID` and `secret access key` to authorize RudderStack to write to your bucket.\n*   Make a note of both the `access key ID` and `secret access key` as these will be required while configuring Spaces as a destination.\n\n## Configuring Spaces in RudderStack\n\nIn order to enable dumping data to Spaces bucket, you will first need to add it as a destination to the source from which you are sending event data. Once the destination is enabled, events from RudderStack will start to flow to Spaces bucket. You will start seeing the files created in your Spaces bucket.\n\nTo do so, please follow these steps:\n\n*   Choose a source to which you would like to add DigitalOcean Spaces as a destination. You can also simply create a destination and connect it to a source later.\n*   Select the destination as **Spaces** to your source. Give your destination a name and then click **Next**.\n*   Next, in the **Connection Settings**, fill all fields with the relevant information and click **Next**.\n\n[![](https://www.rudderstack.com/docs/images/screenshot-2020-08-10-at-6.38.46-pm.webp)](https://www.rudderstack.com/docs/images/screenshot-2020-08-10-at-6.38.46-pm.webp)\n\n*   If you need any transformation, choose one from the list. Else, click **Next**.\n\nThat’s it! You have successfully added Spaces as a destination in RudderStack. Once you send an event from your source, you can find it dumped to your Spaces bucket.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "DigitalOcean Spaces | RudderStack Docs",
  "description": "Send your event data from RudderStack to DigitalOcean Spaces.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/chartbeat/",
  "markdown": "# Chartbeat | RudderStack Docs\n\nSend your event data from RudderStack to Chartbeat.\n\n* * *\n\n*     3 minute read  \n    \n\n[Chartbeat](https://chartbeat.com/) is the industry leader for real-time content and web analytics, based on JavaScript.\n\nRudderStack supports sending your events to Chartbeat from the web native SDK by calling RudderStack’s APIs.\n\n## Getting started\n\nTo enable sending events to Chartbeat, you will first need to add it as a destination to the source from which you are sending event data. Please check if the platform is supported by Chartbeat by referring to the table below:\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | **Supported** | \\-  | \\-  |\n| **Cloud mode** | \\-  | \\-  | \\-  |\n\nOnce you have ascertained that the platform is supported by Chartbeat, please follow these steps:\n\n*   From your [RudderStack dashboard](https://app.rudderlabs.com/), add the source and Chartbeat as a destination.\n*   In the Connection Settings page, please enter the relevant information in the fields shown in the following screen:\n\n[![](https://www.rudderstack.com/docs/images/image%20%2818%29.webp)](https://www.rudderstack.com/docs/images/image%20%2818%29.webp)\n\nConnection Settings for Chartbeat\n\nEach field is as explained below:\n\n*   **Domain** - Enter the domain name with which your Chartbeat account was configured. Don’t append any extra url parameters to it. For example: `rudderstack-test.com`\n*   **UID -** Enter your Chartbeat UID here. You can find the UID on the Chartbeat [Adding The Code](https://chartbeat.com/docs/adding_the_code/) page.\n*   **Send Name and Category as Title** - Enable this setting if you want the RudderStack `page` API to send the page title as visible in Chartbeat dashboard as `page category` + `page name` .\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If this setting is enabled and the category is not set, RudderStack only sends the name as the page title.\n\n*   **Use Chartbeat video script** - Enable this setting if you want the RudderStack SDK to download `chartbeat_video.js` . This file is provided by Chartbeat to track and capture video interactions. Once the setting is enabled, the script will start capturing the play and pause events of mainly the HTML5 videos from the `<video ... </video>` tag.\n\n## Page\n\nMaking a call to the `page` API will send out an object to Chartbeat containing the information of your page and its related properties.\n\nA sample `page` call is shown below:\n\n```\nrudderanalytics.page(\"section-name\", \"home\", {\n  path: \"path\",\n  url: \"url\",\n  title: \"title\",\n  search: \"search\",\n  referrer: \"referrer\",\n  author: \"author-name\",\n});\n```\n\nThe above code snippet populates the following properties along with the associated values:\n\n| Property | Value |\n| --- | --- |\n| `category` | section-name |\n| `name` | home |\n| `author` | author-name |\n| `path` | path |\n| `url` | url |\n| `title` | title |\n| `search` | search |\n| `referrer` | referrer |\n\n### Single Page Applications\n\nFor Single Page Applications (SPAs), the first `page` call asynchronously loads `chartbeat.js` (or `chartbeat_video.js`) with the properties specified in the `page` call. All further `page` calls are sent to Chartbeat by calling Chartbeat’s virtual `page` API with the same properties that were passed to the initial `page` call.\n\n## FAQ\n\n#### Where do I find the Chartbeat UID?\n\nYou can find your Chartbeat UID on Chartbeat’s [Adding The Code](https://chartbeat.com/docs/adding_the_code/) page.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Chartbeat | RudderStack Docs",
  "description": "Send your event data from RudderStack to Chartbeat.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/delighted/",
  "markdown": "# Delighted | RudderStack Docs\n\nSend your event data from RudderStack to Delighted.\n\n* * *\n\n*     5 minute read  \n    \n\n[Delighted](https://delighted.com/) is a popular customer feedback platform. It allows your teams to gather instant, invaluable, and actionable customer feedback to improve your processes and product.\n\nRudderStack supports Delighted as a destination to which you can seamlessly send your customer data.\n\n## Getting started\n\nBefore configuring your source and destination in RudderStack, verify if the source platform is supported by Delighted by referring to the table below:\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | \\-  | \\-  |\n| **Cloud** **mode** | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the source supports sending events to Delighted, follow these steps:\n\n*   From your [RudderStack dashboard](https://app.rudderstack.com/), add the source. From the list of destinations, select **Delighted**.\n*   Give a name to the destination and click **Next**. You should then see the following screen:\n\n[![](https://www.rudderstack.com/docs/images/Delighted.webp)](https://www.rudderstack.com/docs/images/Delighted.webp)\n\nDelighted Connection Settings\n\n*   Enter your Delighted **API Key**.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For more information on how to get your Delighted API key, refer to the Delighted [docs](https://app.delighted.com/docs/api).\n\n*   By default, the channel is set to **Email**. You can also select **SMS** from the dropdown.\n*   Set the **Delay** value (in seconds) here. By default it is set to **0**.\n*   To make a `track` call, enter the **Event Names** for which `track` call will be triggered.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If the RudderStack dashboard does not contain the **Event** for which the `track` call is triggered, RudderStack will throw an error.\n\n*   Finally, click **Next**. Delighted will now be enabled as a destination in RudderStack.\n\n## Identify\n\nThe `identify` call lets you to add a user to your **People** [List](https://app.delighted.com/people). If the user already exists, RudderStack will update the user with the latest information. This includes `userId` as well as other additional properties related to user like name,phone number/email, channel, and the ‘Last sent at’ timestamp.\n\n*   The `userId` provided during the call must match the **Channel** type. The channel type can be either set from RudderStack dashboard or you can send it via the `identify` call with the parameter `DelightedChannelType`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The channel type set via the `identify` call will get a higher precedence.\n\n*   You can provide the user email or phone number. Both are not required at the same time, since one of the values will be set from the `userId`.\n*   You can also send the `last_sent_at` value with the call. Refer to the example below for more details.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> `Last sent at` (in UNIX timestamp) is used to manually set the time a person was most recently sent a survey. This value will be used in the Delighted **Survey throttling** system, which ensures that same person won’t be surveyed more than once per month.\n> \n> To change its value manually, go the Delighted [dashboard](https://app.delighted.com/dashboard), select your **Project** from top left corner and click the settings icon beside **Project Name**.\n\nA sample `identify` call is as shown below:\n\n```\nrudderanalytics.identify(\"name@surname.com\", {\n  name: \"User\",\n  last_sent_at: \"1624293839\",\n  phone_number: \"+1234567890\"},\n  { externalId: [\n    {\n        type: \"delightedChannelType\",\n        id: \"sms\"\n    }\n  ]}\n});\n```\n\nIn this example, since the `userId` is already an email, you can provide the user’s `phone_number` as well. Also, the `delightedChannelType` will override the **Channel Type** set in the RudderStack dashboard.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Except `userId`, all other fields in the call are optional.\n\n## Track\n\nThe `track` call lets you send the survey to the user added to the **People** [List](https://app.delighted.com/people) in your account. In addition to name, phone number/email,channel, and the ‘Last sent at’ timestamp, you can also add as many custom properties as you need.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If the user does not exist, you cannot make a `track` call. You need to first add the user in the People list via the `identify` call.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The **Delay** value from the dashboard will override the value sent via the `track` call.\n\nA sample `track` call is as shown below:\n\n```\nrudderanalytics.track(\"Test\", {\n  delighted_email_subject: \"Custom Email Subject.\",\n  customProperty: \"Custom Value\",\n  customProperty2: \"Custom Value2\"},\n  { externalId: [\n    {\n        type: \"delightedChannelType\",\n        id: \"sms\"\n    }\n  ]}\n});\n```\n\nIn the above example, `Test` is the event name. Except the event name, all other fields are optional.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If you do not enter the **Event** name in the dashboard for which the `track` call is triggered, RudderStack will throw an error.\n\nDelighted also provides some custom properties by itself. In the above example, `delighted_email_subject` sets the email subject of the survey to `Custom Email Subject`. Note that this change can be done from the [Delighted website](https://app.delighted.com/platforms) too.\n\nSome other default properties provided by Delighted are mentioned in the table below:\n\n| **Delighted Property** | **Description** |\n| --- | --- |\n| `question_product_name` | Delighted shows this question in the survey. |\n| `delighted_intro_message` | Delighted displays this message in the email subject. |\n| `locale` | This property determines the localization (including language) of the survey experience. |\n\nFor more default properties, check out this Delighted [support page](https://help.delighted.com/article/577-special-properties).\n\nIn the example shown above, `customProperty` is the custom property field that you can set. Note that you must provide values for these custom fields, or else they will be dropped by Delighted.\n\n## Alias\n\nThe `alias` call allows you to update the user’s email or phone number. You need to set `previousId` as the current value and `userId` as the updated value.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `previousId` and `userId` must be of the same type, i.e., either email or phone number.\n\nA sample `alias` call is as shown below:\n\n```\nrudderanalytics.alias(\"new@email.com\", \"old@email.com\")\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Both `previousId` and `userId` are required.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Delighted | RudderStack Docs",
  "description": "Send your event data from RudderStack to Delighted.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/clevertap/",
  "markdown": "# CleverTap | RudderStack Docs\n\nSend your event data from RudderStack to CleverTap.\n\n* * *\n\n*     12 minute read  \n    \n\n[CleverTap](https://clevertap.com/) is a popular customer engagement and retention platform. Its in-app analytics and marketing capabilities allow you to get real-time insights into your customers and build valuable, long-term relationships with them.\n\nFind the open source transformer code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/master/src/v0/destinations/clevertap).\n\n## Getting started\n\nRudderStack supports sending event data to CleverTap via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | **Supported** | **Supported** | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> In a web device mode integration, that is, using the [JavaScript SDK](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/) as a source, RudderStack loads the CleverTap native SDK from the`https://d2r1yp2w7bby2u.cloudfront.net` domain.\n> \n> Based on your website’s content security policy, you may need to [allowlist this domain](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/load-js-sdk/#allowlist-destination-domain) to load the CleverTap SDK.\n\nOnce you have confirmed that the source platform supports sending events to CleverTap, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **CleverTap**.\n2.  Assign a name to the destination and click **Continue**.\n\n### Connection settings\n\nTo successfully set up CleverTap as a destination, you will need to configure the following settings:\n\n*   **Account ID**: Your account ID is a unique ID generated for your account. It can be found in your account **Settings** as your **Project ID**.\n*   **Passcode**: Your account passcode is a unique code generated for your account. It can be found in your CleverTap dashboard by going to **Settings** > **Passcode**.\n*   **Enable track for anonymous user**: Enable this option to track anonymous users in CleverTap.\n*   **Use CleverTap ObjectId for Mapping**: Enable this option to use both CleverTap `objectId` along with `identity` for mapping events from RudderStack to CleverTap.\n*   **Region**: Select your CleverTap region.\n*   **Client-side Events Filtering**: Specify which events should be blocked or allowed to flow through to CleverTap. For more information on this setting, see the [Client-side Events Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) guide.\n*   **OneTrust Cookie Categories**: This setting lets you associate [OneTrust](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/javascript/) cookie consent groups to CleverTap.\n*   **Use device mode to send events**: Enable this option to send events in [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> All server-side destination requests require either an `anonymousId` or a `userId` in the payload.\n\n## Adding device mode integration\n\nTo add CleverTap to your Android project and enable functionalities like push notifications, follow these steps:\n\n1.  Open your project level `build.gradle` file, and add the following:\n\n```\nbuildscript {\n  repositories {\n    mavenCentral()\n  }\n}\n\nallprojects {\n  repositories {\n    mavenCentral()\n  }\n}\n```\n\n2.  Ensure that `android.useAndroidX` is set to `true` in your `gradle.properties` file. Add the following under the `dependencies` section:\n\n```\n// ruddder core sdk\nimplementation 'com.rudderstack.android.sdk:core:1.+'\n// rudder-clevertap integration\nimplementation 'com.rudderstack.android.integration:clevertap:1.+'\n// clevertap native sdk\nimplementation 'com.clevertap.android:clevertap-android-sdk:4.+'\n// if you don't have Gson included already\nimplementation 'com.google.code.gson:gson:2.8.6'\n```\n\n3.  Initialize the RudderStack SDK in the `Application` class’s `onCreate()` method as shown:\n\n```\n// initialize Rudder SDK\nval rudderClient =\n    RudderClient.getInstance(\n        this,\n        WRITE_KEY,\n        RudderConfig.Builder()\n            .withDataPlaneUrl(DATA_PLANE_URL)\n            .withFactory(CleverTapIntegrationFactory.FACTORY)\n            .build()\n    )\n```\n\nFollow these steps to add CleverTap to your iOS project:\n\n1.  Go your `Podfile` and add the `Rudder-CleverTap` extension as shown below:\n\n2.  After adding the dependency followed by `pod install` , you can add the imports to your `AppDelegate.m` file:\n\n```\n#import \"RudderCleverTapFactory.h\"\n```\n\n3.  Change the initialization of your `RudderClient` as shown:\n\n```\nRudderConfigBuilder *builder = [[RudderConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withFactory:[RudderCleverTapFactory instance]];\n[RudderClient getInstance:WRITE_KEY config:[builder build]];\n```\n\nTo add CleverTap to your React Native project:\n\n1.  Add the RudderStack-CleverTap module to your app using:\n\n```\nnpm install @rudderstack/rudder-integration-clevertap-react-native\n## OR ##\nyarn add @rudderstack/rudder-integration-clevertap-react-native\n```\n\n2.  Run `pod install` inside the `ios` directory of your project adding `@rudderstack/rudder-integration-clevertap-react-native` to your project.\n    \n3.  Import the module you added above and add it to your SDK initialization code as shown below:\n    \n\n```\nimport rudderClient from \"@rudderstack/rudder-sdk-react-native\"\nimport clevertap from \"@rudderstack/rudder-integration-clevertap-react-native\"\n\nconst config = {\n  dataPlaneUrl: DATA_PLANE_URL,\n  trackAppLifecycleEvents: true,\n  withFactories: [clevertap],\n}\nrudderClient.setup(WRITE_KEY, config)\n```\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you associate a user with their actions and capture relevant traits about them. This information includes `userId` and other user information like `name`, `email`, etc.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack requires either `userId` or `email` to send `identify` events to CleverTap.\n\nRudderStack maps the following user traits to the CleverTap attributes:\n\n| **RudderStack** | **CleverTap** |\n| --- | --- |\n| `name` | `Name` |\n| `birthday` | `DOB` |\n| `avatar` | `Photo` |\n| `gender` | `Gender` |\n| `phone` | `Phone` |\n| `email` | `Email` |\n| `employed` | `Employed` |\n| `education` | `Education` |\n| `married` | `Married` |\n| `customerType` | `Customer Type` |\n\nRudderStack sends all other traits to CleverTap as custom attributes.\n\nA sample `identify` call looks like the following:\n\n```\nrudderanalytics.identify(\"userid\", {\n  name: \"Name Surname\",\n  email: \"name@website.com\",\n  phone: \"phone\",\n  birthday: \"birthday\",\n  gender: \"M\",\n  avatar: \"link to image\",\n  title: \"Owner\",\n  organization: \"Company\",\n  city: \"Tokyo\",\n  region: \"ABC\",\n  country: \"JP\",\n  zip: \"100-0001\",\n  Flagged: false,\n  Residence: \"Shibuya\",\n  MSG-email: false\n});\n```\n\nIn the above snippet, RudderStack captures relevant information about the user such as the `email` and `phone`, along with the associated user traits.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   If a user already exists, the new values will be updated for that user. RudderStack automatically maps the `userId` (or `anoymousId`) to CleverTap’s `identity` attribute.\n> *   The profile properties `MSG-email`, `MSG-push`, `MSG-sms` and `MSG-whatsapp` are used to set the Do Not Disturb (DND) status for the user. They are always `true` by default, unless you explicitly set them to `false`. For example, to disable push notifications for a user, set `MSG-push` to `false`.\n\n### Privacy options\n\nWhen loading the RudderStack SDK, you can set the following options in the `CLEVERTAP` integrations object:\n\n| Option | Data type | Notes |\n| --- | --- | --- |\n| `optOut` | Boolean | Defaults to `false`. Set to `true` if the user opts out of sharing their data. |\n| `useIP` | Boolean | Defaults to `false`. Set to `true` if the user agrees to share their IP data. |\n\n```\nrudderanalytics.load(\n  \"WRITE_KEY\",\n  \"DATAPLANE_URL\", {\n    configUrl: \"https://api.rudderlabs.com\",\n    logLevel: \"DEBUG\",\n    integrations: {\n      CLEVERTAP: {\n        optOut: true,\n        useIP: true,\n      }\n    }\n  }\n);\n```\n\nCleverTap does a reverse lookup on the IP of the incoming request in the back end to map the user’s location. Under GDPR laws, user consent is required to initiate this lookup. Use the `useIP` flag in the web SDK to provide that consent.\n\nIf `useIP` is set to `true`, the city/country information will populate on the Profile page of the CleverTap dashboard. If set to `false`, then this data won’t be populated, and the city/country information will be shown as `Unknown, Unknown`.\n\nSee the [CleverTap documentation](https://developer.clevertap.com/docs/sdk-changes-for-gdpr-compliance) for more information.\n\n### Deleting a user\n\nYou can delete a user in CleverTap using the [Suppression with Delete regulation](https://www.rudderstack.com/docs/api/user-suppression-api/#adding-a-suppression-with-delete-regulation) of the RudderStack [User Suppression API](https://www.rudderstack.com/docs/api/user-suppression-api/).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To delete a user, you must specify their `userId` in the event. Additionally, you can specify a custom identifier (optional) in the event.\n\nA sample regulation request body for deleting a user in CleverTap is shown below:\n\n```\n{\n  \"regulationType\": \"suppress_with_delete\",\n  \"destinationIds\": [\n    \"2FIKkByqn37FhzczP23eZmURciA\"\n  ],\n  \"users\": [{\n    \"userId\": \"1hKOmRA4GRlm\",\n    \"<customKey>\": \"<customValue>\"\n  }]\n}\n```\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you capture user events along with the properties associated with them. The user is associated with `userId` or `anonymousId` by default.\n\nA sample `track` call looks like the following:\n\n```\nrudderanalytics.track(\"Checked Out\", {\n  Clicked_Rush_delivery_Button: true,\n  total_value: 2000,\n  revenue: 2000,\n})\n```\n\nIn the above snippet, RudderStack captures the information related to the `Checked Out` event, along with any additional info about that event.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> CleverTap does not support nested objects or arrays for custom attributes in the `track` events. Hence, RudderStack converts the nested objects or arrays into strings before sending them to CleverTap.\n\n### Order Completed\n\nWhen you track an event with the name `Order Completed` using the using the RudderStack [Ecommerce Events](https://www.rudderstack.com/docs/event-spec/ecommerce-events-spec/) tracking, RudderStack maps it to CleverTap’s [Charged](https://developer.clevertap.com/docs/events#recording-customer-purchases) event.\n\nA number of RudderStack’s specific fields map to CleverTap’s standard `Charged` event fields\n\n| **RudderStack** | **CleverTap** |\n| --- | --- |\n| `checkout_id` | `Charged ID` |\n| `revenue` | `Amount` |\n| `products` | `Items` |\n\nA sample `Order Completed` event looks like the following:\n\n```\nrudderanalytics.track(\"Order Completed\", {\n  checkout_id: \"12345\",\n  order_id: \"1234\",\n  affiliation: \"Apple Store\",\n  \"Payment mode\": \"Credit Card\",\n  total: 20,\n  revenue: 15.0,\n  shipping: 22,\n  tax: 1,\n  discount: 1.5,\n  coupon: \"Games\",\n  currency: \"USD\",\n  products: [\n    {\n      product_id: \"123\",\n      sku: \"G-32\",\n      name: \"Monopoly\",\n      price: 14,\n      quantity: 1,\n      category: \"Games\",\n      url: \"https://www.website.com/product/path\",\n      image_url: \"https://www.website.com/product/path.jpg\",\n    },\n    {\n      product_id: \"345\",\n      sku: \"F-32\",\n      name: \"UNO\",\n      price: 3.45,\n      quantity: 2,\n      category: \"Games\",\n    },\n    {\n      product_id: \"125\",\n      sku: \"S-32\",\n      name: \"Ludo\",\n      price: 14,\n      quantity: 7,\n      category: \"Games\",\n      brand: \"Ludo King\",\n    },\n  ],\n})\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> `Order Completed` is a free-flowing event. If you set extra fields like `discount`, `coupon`, `currency`, etc., RudderStack automatically maps them to the `Charged` event properties.\n\n## Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record your website’s page views with any additional relevant information about the viewed page.\n\nRudderStack sends a `page` event to CleverTap as a `Web Page Viewed <Page_Name>` event.\n\nAn example of a `page` call is shown below:\n\n```\nrudderanalytics.page(\"Cart\", \"Cart Viewed\", {\n  path: \"/cart\",\n  referrer: \"test.com\",\n  search: \"term\",\n  title: \"test_item\",\n  url: \"http://test.in\",\n})\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> CleverTap does not support nested objects or arrays for custom attributes in the `page` events. Hence, RudderStack converts the nested objects or arrays into strings before sending them to CleverTap.\n\n## Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) method lets you record whenever your user views their mobile screen, with any additional relevant information about the screen.\n\nA sample `screen` call is shown:\n\n```\n[[RSClient sharedInstance] screen:@\"Sample Screen Name\"\n        properties:@{@\"prop_key\" : @\"prop_value\"}];\n```\n\nIn the above snippet, RudderStack captures all information related to the screen being viewed, along with any additional info associated with that screen view event. In CleverTap, the above `screen` call will be shown as - `Screen Viewed: <screen_name>` along with the properties.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> CleverTap does not support nested objects or arrays for custom attributes in the `screen` events. Hence, RudderStack converts the nested objects or arrays into strings before sending them to CleverTap.\n\n## Alias\n\nThe [`alias`](https://www.rudderstack.com/docs/event-spec/standard-events/alias/) call lets you merge different identities of a known user.\n\nA sample `alias` call is shown below:\n\n```\nrudderanalytics.alias(\"newUserId\",\"userId\");\n```\n\n## Configuring push notifications and in-app messages\n\nFollow these steps to configure CleverTap push notifications for your desired platform.\n\n1.  Register push notifications for Android devices on your CleverTap dashboard either by uploading your [FCM credentials](https://developer.clevertap.com/docs/android-push#find-fcm-credentials) or any other supported credentials by navigating to **Settings** > **Channels** > **Mobile Push** > **Android**. Add the following dependency in your project level `build.gradle` file inside the `buildscript`:\n\n```\ndependencies {\n  classpath 'com.google.gms:google-services:4.3.5'\n}\n```\n\n2.  Add the following dependencies and plugin to your app level `build.gradle` file:\n\n```\ndependencies {\n  // for push notifications\n  implementation 'com.clevertap.android:clevertap-android-sdk:4.0.0'\n  implementation 'com.google.firebase:firebase-messaging:20.2.4'\n}\napply plugin: 'com.google.gms.google-services'\n```\n\n3.  Place the `google-services.json` downloaded from the `Firebase console` into the root folder of your `app`. Add your `CLEVERTAP_ACCOUNT_ID` , `CLEVERTAP_TOKEN` & `FcmMessageListenerService` to the `application` tag of your app’s `AndroidManifest.xml`:\n\n```\n<meta-data android:name=\"CLEVERTAP_ACCOUNT_ID\" android:value=\"XXX-XXX-XXXX\"></meta-data>\n<meta-data android:name=\"CLEVERTAP_TOKEN\" android:value=\"XXX-XXX\"></meta-data>\n<service android:name=\"com.clevertap.android.sdk.pushnotification.fcm.FcmMessageListenerService\">\n<intent-filter>\n<action android:name=\"com.google.firebase.MESSAGING_EVENT\"></action>\n</intent-filter>\n</service>\n```\n\n4.  Create a notification channel anywhere in your application using the following block of code. You can then use this `channel Id` while creating any campaign in your CleverTap dashboard.\n\n```\nCleverTapAPI.createNotificationChannel(\n    getApplicationContext(),\n    \"yourChannelId\",\n    \"Your Channel Name\",\n    \"Your Channel Description\",\n    NotificationManager.IMPORTANCE_MAX,\n    true\n)\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For push notifications and In-app messages to function correctly, CleverTap needs to know the `Application` status as early as possible. You can either set `android:name` in your `AndroidManifest.xml` tag to `com.clevertap.android.sdk.Application`. If you have a custom `Application` class, call `ActivityLifecycleCallback.register(this);` before `super.onCreate()`.\n> \n> To learn more about push notifications in CleverTap, see the [CleverTap documentation](https://github.com/CleverTap/clevertap-android-sdk#setup-the-lifecycle-callback---important).\n\n1.  Navigate to **Target** > **Signing & Capabilities** in Xcode.\n2.  Enable **Background Modes/Remote notifications** by navigating to **Targets** > **Your App** > **Capabilities** > **Background Modes** and checking **Remote notifications**.\n3.  Navigate to **Settings** > **Channels** > **Mobile Push** > **iOS**.\n4.  Register push notifications for the iOS devices on your CleverTap dashboard either by uploading your Auth Key or APNS push certificate.\n5.  Add the following code in your app just after initializing RudderStack’s iOS SDK to register push notifications.\n\n```\n#import <usernotifications>\n\n// register for push notifications\nUNUserNotificationCenter* center = [UNUserNotificationCenter currentNotificationCenter];\ncenter.delegate = self;\n[center requestAuthorizationWithOptions:(UNAuthorizationOptionAlert | UNAuthorizationOptionSound | UNAuthorizationOptionBadge)\ncompletionHandler:^(BOOL granted, NSError * _Nullable error) {\n  if (granted) {\n    dispatch_async(dispatch_get_main_queue(), ^(void) {\n        [[UIApplication sharedApplication] registerForRemoteNotifications];\n        });\n  }\n}];\n```\n\n6.  Add these handlers for the tokens and push notifications:\n\n```\n#import \"RudderCleverTapIntegration.h\"\n\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n  [[RudderCleverTapIntegration alloc] registeredForRemoteNotificationsWithDeviceToken:deviceToken];\n}\n\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {\n  [[RudderCleverTapIntegration alloc] receivedRemoteNotification:userInfo];\n  completionHandler(UIBackgroundFetchResultNoData);\n}\n\n- (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions))completionHandler {\n  completionHandler(UNAuthorizationOptionSound | UNAuthorizationOptionAlert | UNAuthorizationOptionBadge);\n}\n\n- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)(void))completionHandler {\n  [[RudderCleverTapIntegration alloc] receivedRemoteNotification:response.notification.request.content.userInfo];\n}\n```\n\n1.  Open the `android` folder of your React Native app and follow the steps listed in the **Android** tab of this section.\n2.  Open the `ios` folder of your React Native app and follow the steps listed in the **iOS** tab of this section.\n\n## Using CleverTap objectId and identity for mapping\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This section is applicable when sending events in [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode).\n\nCleverTap uniquely identifies each user with two main identifiers, namely `objectId` and `identity`. When you enable the **Use CleverTap ObjectId for Mapping** option in the dashboard, RudderStack uses both `objectId` and `identity` and expects the following mapping:\n\n*   For `identify` events:\n\n| **RudderStack** | **RudderStack** | **CleverTap** | **CleverTap** |\n| --- | --- | --- | --- |\n| **`anonymousId` present?** | **`userId` present?** | **`objectId`** | **`identity`** |\n| Yes | Yes | `anonymousId` | `userId` |\n| Yes | No  | `anonymousId` | \\-  |\n| No  | Yes | CleverTap-generated UUID | `userId` |\n\n*   For `track` events:\n\n| **RudderStack** | **RudderStack** | **CleverTap** | **CleverTap** |\n| --- | --- | --- | --- |\n| **`anonymousId` present?** | **`userId` present?** | **Tracking with** | **Value** |\n| Yes | Yes | `objectId` | `anonymousId` |\n| Yes | No  | `objectId` | `anonymousId` |\n| No  | Yes | `identity` | `userId` |\n\nIf **Use CleverTap ObjectId for Mapping** setting is disabled in the dashboard, RudderStack expects the following mapping for identifying users and tracking events (`track`/`page`/`screen`):\n\n| **RudderStack** | **CleverTap** |\n| --- | --- |\n| `userId` or `anonymousId` | `identity` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> **Why use CleverTap `objectId` for mapping?**\n> \n> When you track an unidentified user in CleverTap, a user profile is created with minimal details along with the user activity details. When the same user is then identified with a `userId` without the **Use CleverTap ObjectId for Mapping** option enabled, RudderStack creates another profile for the user with the `userId` identifier (in case of RudderStack) which maps to CleverTap’s `identity` attribute.\n> \n> One way to solve this problem is to track users only in cases where a `userId` is present. To do so, disable the **Enable tracking for anonymous users** option in the RudderStack dashboard. Alternatively, you can turn on the **Use CleverTap ObjectId for Mapping** option in the dashboard which allows you to track the anonymous users and when they are later identified, merge their `anonymousId` with their `userId`.\n\n## Device token upload using cloud mode\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> This section is applicable for the Android and iOS sources when sending events via cloud mode.\n\nWhen the device token is present in `context.device.token` in `identify` calls, RudderStack will use the [CleverTap Device Token Upload API](https://developer.clevertap.com/docs/upload-device-tokens-api) to upload the device token for the identified user. For Android, RudderStack sets the token type as `fcm`. For iOS, it is set as `apns`.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> To use this feature you should have enabled the **Use CleverTap ObjectId for Mapping** option in the dashboard, as RudderStack needs the `objectId` to upload the device token.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "CleverTap | RudderStack Docs",
  "description": "Send your event data from RudderStack to CleverTap.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/dcm-floodlight/dcm-floodlight-device-mode/",
  "markdown": "# DCM Floodlight device mode | RudderStack Docs\n\nSend events to DCM Floodlight using RudderStack device mode.\n\n* * *\n\n*     4 minute read  \n    \n\nRudderStack lets you send your event data to DCM Floodlight destination via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode) using the native web SDK. RudderStack uses global site tagging in device mode.\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you capture user events along with the properties associated with them.\n\nA sample `track` call is as shown below:\n\n```\nrudderanalytics.track('tshirt', {\n  countingMethod: \"transactions\",\n  revenue: \"2605846\",\n  orderId: \"2605847\"\n});\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> `countingMethod` is a required property that specifies how to count the conversions for a Floodlight activity. The methods to count conversions depend on whether you are creating or editing a [counter](https://support.google.com/campaignmanager/answer/7554821#zippy=%2Cfields-in-event-snippets-for-counter-tags) or [sales](https://support.google.com/campaignmanager/answer/7554821#zippy=%2Cfields-in-event-snippets-for-sales-tags) tag activity.\n> \n> Refer to the [FAQ](#faq) section for more information on counting methods for these tags.\n\nNote that if `countingMethod` is absent in your event properties, RudderStack uses the method specified in the **Floodlight Counting Method** [dashboard setting](https://www.rudderstack.com/docs/destinations/streaming-destinations/dcm-floodlight/setting-up-dcm-floodlight-in-rudderstack/#conversion-events) as a fallback value. If you do not specify both these fields, RudderStack gives a “not found” error for the counting method.\n\nThe following table details the `integrations` object mapping for DCM Floodlight:\n\n| **RudderStack property** | **DCM Floodlight property** | **Description** |\n| --- | --- | --- |\n| `COPPA` | `tag_for_child_directed_treatment` | Imposes requirements on the websites/online services operators directed to children under 13 years of age. [Reference](https://www.ftc.gov/tips-advice/business-center/privacy-and-security/children%27s-privacy). |\n| `GDPR` | `tfua` | The EU law on general data protection and privacy. [Reference](http://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX%3A32016R0679). |\n| `npa` | `npa` | The law catering to users who wish to opt out of remarketing. |\n\nThe following table details the mapping between the optional RudderStack and DCM Floodlight properties:\n\n| RudderStack property | DCM Floodlight property | Tag |\n| --- | --- | --- |\n| `properties.ord` | `ord` | Counter |\n| `properties.sessionId` | `ord` | Counter - per\\_session |\n| `properties.sessionId` | `session_id` | Counter - per\\_session |\n| `properties.num` | `num` | Counter - unique |\n| `context.device.adTrackingEnabled` | `dc_lat` | Counter/Sales |\n| `properties.matchId` | `match_id` | Counter/Sales |\n| `properties.orderId` | `ord` | Sales |\n| `properties.orderId` | `transaction_id` | Sales |\n| `properties.revenue` | `value` | Sales |\n| `properties.quantity` | `quantity` | Sales - items\\_sold |\n\nThere are some slight variations in terms of the mapped DCM Floodlight parameters when you use the Iframe tag, as opposed to the global site tag. However, RudderStack handles this variation internally.\n\nThe following table details the mapping between the optional RudderStack and DCM Floodlight properties when using the Iframe tag:\n\n| RudderStack property | DCM Floodlight property | Tag |\n| --- | --- | --- |\n| `properties.ord` | `ord` | Counter - standard |\n| `properties.sessionId` | `ord` | Counter - per\\_session |\n| `properties.num` | `num` | Counter - unique |\n| `context.device.adTrackingEnabled` | `dc_lat` | Counter/Sales |\n| `properties.matchId` | `match_id` | Counter/Sales |\n| `properties.orderId` | `ord` | Sales |\n| `properties.orderId` | `transaction_id` | Sales |\n| `properties.revenue` | `cost` | Sales |\n| `properties.quantity` | `qty` | Sales - items\\_sold |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> When using the Iframe tag, RudderStack sends `ord=1` for the Counter - unique tag and `qty=1` for the Sales - transactions tag.\n\nThe following table provides a brief description of the above DCM Floodlight properties:\n\n| DCM Floodlight property | Description |\n| --- | --- |\n| `dc_lat` | Indicates if the user has enabled the **Limited Ad Tracking** option for IDFA/Android Advertising ID. |\n| `ord` | Makes the Floodlight tag unique and prevents browser caching. |\n| `quantity` | RudderStack adds the quantity of all products in the `products` array or refers to the top-level `quantity` property. |\n| `value` | RudderStack sends the `revenue` parameter to DCM Floodlight. |\n| `matchId` | Identifier created by the advertiser to attribute offline conversions. |\n| `num` | Controls cache busting manually. |\n| `session_id` | Inserts a unique session ID while using counter tags with a per session counting methodology. |\n| `transaction_id` | Sets a unique identifier for a transaction. |\n\n## Custom parameters\n\nYou can also send data to DCM Floodlight using the below-mentioned custom fields:\n\n| RudderStack custom field | DCM Floodlight property | [Counting method](https://support.google.com/campaignmanager/answer/2823400?hl=en) |\n| --- | --- | --- |\n| `properties.ord`/`properties.orderId`/`properties.sessionId`/ | `ord` | All |\n| `context.device.adTrackingEnabled` | `dc_lat` | All |\n| `COPPA` | `tag_for_child_directed_treatment` | All |\n| `GDPR` | `tfua` | All |\n| `npa` | `npa` | All |\n| `properties.matchId` | `match_id` | All |\n| `properties.num` | `num` | Counter - unique |\n\n## Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record your website’s page views with any additional relevant information about the viewed page.\n\nBased on the presence of `name` and `category` fields in the `page` call, RudderStack transforms the event in the following format:\n\n| `name` field | `category` field | Transformed event |\n| --- | --- | --- |\n|     |     | Viewed Page |\n|     |     | Viewed `PAGE NAME` Page |\n|     |     | Viewed `CATEGORY NAME` `PAGE NAME` Page |\n\nA sample `page` call is as shown below:\n\n```\nrudderanalytics.page('landing', {\n  countingMethod: \"standard\"\n});\n```\n\n## FAQ\n\n#### What are the counting methods for sales and counter tag?\n\nFor the Sales tag, the counting methods are as shown:\n\n[![DCM Floodlight report builder](https://www.rudderstack.com/docs/images/event-stream-destinations/sales-tag.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/sales-tag.webp)\n\nFor the Counter tag, the counting methods are shown below:\n\n[![DCM Floodlight report builder](https://www.rudderstack.com/docs/images/event-stream-destinations/counter-tag.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/counter-tag.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "DCM Floodlight device mode | RudderStack Docs",
  "description": "Send events to DCM Floodlight using RudderStack device mode.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/dcm-floodlight/dcm-floodlight-cloud-mode/",
  "markdown": "# DCM Floodlight cloud mode | RudderStack Docs\n\nSend events to DCM Floodlight using RudderStack cloud mode.\n\n* * *\n\n*     2 minute read  \n    \n\nRudderStack lets you send your event data to DCM Floodlight via [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode).\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you capture user events along with the properties associated with them.\n\nA sample `track` call is as shown below:\n\n```\nrudderanalytics.track(\"Checkout Started\", {\n    countingMethod: \"standard\",\n    orderId: 1234,\n    quantity: 45,\n    revenue: 800,\n}, {\n    device: {\n        advertisingId: \"2a3e36d172-5e28-45a1-9eda-ce22a3e36d1a\",\n    },\n    userAgent: \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36\",\n    integrations: {\n        All: true,\n        \"DCM_Floodlight\": {\n            COPPA: \"false\",\n            GDPR: \"1\",\n            npa: true\n        }\n    }\n});\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The `userAgent` is a required field.\n\nThe following table details the mapping of `integrations` object for DCM Floodlight:\n\n| **RudderStack property** | **DCM Floodlight property** | **Description** |\n| --- | --- | --- |\n| `COPPA` | `tag_for_child_directed_treatment` | Imposes requirements on the websites/online services operators directed to children under 13 years of age. [Reference](https://www.ftc.gov/tips-advice/business-center/privacy-and-security/children%27s-privacy). |\n| `GDPR` | `tfua` | The EU law on general data protection and privacy. [Reference](http://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX%3A32016R0679). |\n| `npa` | `npa` | The law catering to users who wish to opt out of remarketing. |\n\nThe following table details the mapping between RudderStack and DCM Floodlight properties:\n\n| **RudderStack property** | **DCM Floodlight property** | **Presence** | **Tag** |\n| --- | --- | --- | --- |\n| `context.device.advertisingId` | `dc_rdid` | Required | Counter/Sales |\n| `context.device.adTrackingEnabled` | `dc_lat` | Optional | Counter/Sales |\n| `messageId` | `ord` | Optional | Counter |\n| `properties.orderId` | `ord` | Optional | Sales |\n| `properties.quantity` | `qty` | Optional | Sales |\n| `properties.revenue` | `cost` | Optional | Sales |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You must send the device-specific information for DCM Floodlight like `IDFA` or `advertisingId` which are mapped to `context.device.advertisingId`. You can do so using RudderStack’s mobile SDKs as they collect this information automatically.\n> \n> However, in case you are using a RudderStack server-side SDK, the `advertisingId` needs to be included manually.\n\nThe following table gives some more context on the above DCM Floodlight properties:\n\n| DCM Floodlight property | Description |\n| --- | --- |\n| `dc_rdid` | The IDFA or Android Advertising ID to be passed over SSL. |\n| `dc_lat` | Indicates if the user has enabled the **Limited Ad Tracking** option for IDFA/Android Advertising ID. |\n| `ord` | Used to make the Floodlight tag unique and prevent browser caching. |\n| `qty` | Applicable for **Sales** tags only - RudderStack adds the quantity of all products in the `products` array or refers to the top-level `quantity` property. |\n| `cost` | Applicable for **Sales** tags only - RudderStack sends the `revenue` parameter to DCM Floodlight. |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "DCM Floodlight cloud mode | RudderStack Docs",
  "description": "Send events to DCM Floodlight using RudderStack cloud mode.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/clicksend/",
  "markdown": "# ClickSend Destination | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "ClickSend Destination | RudderStack Docs",
  "description": "Send your event data from RudderStack to ClickSend.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/discord/",
  "markdown": "# Discord | RudderStack Docs\n\nSend your event data from RudderStack to Discord.\n\n* * *\n\n*     4 minute read  \n    \n\n[Discord](https://discord.com/) is a popular communications app used by gamers to communicate online. It lets you share voice, video, and text chat with friends, game communities, and developers.\n\nFind the open source transformer code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/master/src/v0/destinations/discord).\n\n## Getting started\n\nRudderStack supports sending event data to Discord via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | \\-  | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | **Supported** |\n\nOnce you have confirmed that the source platform supports sending events to Discord, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add the source. Then, from the list of destinations, select **Discord**.\n2.  Assign a name to the destination and click **Continue**.\n\n### Connection settings\n\nTo successfully configure Discord as a destination, you need to configure the following settings:\n\n*   **Identify Template**: Enter a template for building a text message while sending an `identify` call to Discord. If not provided, RudderStack uses `User {{name}} with {{traits}} is identified` as the default template.\n*   **Event Name**: Enter the event name for which RudderStack should trigger the `track` call’s event template.\n*   **Event Template**: Enter a template for building a text message while sending a `track` call to Discord. If not provided, RudderStack uses `User {{name}} did {{event}} with {{properties}}` as the default template.\n*   **Regex Matching**: Enable this setting if you want to match multiple event names in the `track` call using a regex. It helps in setting the same event template for the event names matching the regex.\n*   **Embed Flag**: Enable this setting to set an embed message for Discord. If enabled, also specify the following:\n    *   **Title Template**: Enter the template for building the title of the embed message. If not provided, RudderStack uses `Identify/Track call made` as the default title.\n    *   **Description Template**: Enter the template for building the description of the embed message. If not provided, RudderStack uses `Message from RudderStack` as the default description.\n*   **Webhook Url**: Enter the webhook URL of the Discord channel where you want to send the data. You can create it by logging in to [Discord](https://discord.com/login), selecting the channel, and going to the **Channel settings** > **Integrations** > **Create Webhook**.\n*   **Trait**: Enter all traits you want to send to Discord in the text message.\n\n## Identify\n\nYou can use the [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call to create or update a user in Discord.\n\nA sample `identify` call is shown below:\n\n```\nrudderanalytics.identify(\"1hKOmRA4GRlm\", {\n  name: \"Alex Keener\",\n  email: \"alex@example.com\",\n  country: \"USA\"\n});\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Either one of the `userId` or `anonymousId` is required to make an `identify` call successfully.\n\nRudderStack sends the above `identify` call to Discord in the following text message format (using the default `identify` template):\n\n*   `User Alex Keener with email: alex@example.com, country: USA is identified`\n*   When the **Embed Flag** setting is enabled and the default values for **Title Template** and **Description Template** are used:\n\n```\n\"content\": \"User Alex Keener with email: alex@example.com, country: USA is identified\",\n\"embeds\": [{\n  \"description\": \"Identify call made\",\n  \"title\": \"Message from Rudderstack \"\n}]\n```\n\nRudderStack sends the text message in the `content` property after converting it into the `identify` template specified in the dashboard. Also, if the **Embed Flag** setting is enabled, it sends the embed message details in the `embeds` property. Refer to the [Discord documentation](https://discord.com/developers/docs/resources/webhook) for more information.\n\n## Track\n\nYou can use the [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call to capture user events along with the properties associated with them.\n\nA sample `track` call is shown below:\n\n```\nrudderanalytics.track(\"Order Completed\", {\n  category: \"category\",\n  label: \"label\",\n  value: 120\n});\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> `event name` is a required property to make a `track` call successfully.\n\nRudderStack sends the above `track` call to Discord in the following text message format (using the default `track` template):\n\n*   `Anonymous user anon_id did Order Completed with category: category, label: label, value: 120`\n*   When the **Embed Flag** setting is enabled and the default values for **Title Template** and **Description Template** are used:\n\n```\n\"content\": \"Anonymous user anon_id did Order Completed with category: category, label: label, value: 120\",\n\"embeds\": [{\n  \"description\": \"Track call made\",\n  \"title\": \"Message from Rudderstack \"\n}]\n```\n\nRudderStack sends the text message in `content` property after converting it into the `track` template specified in the **Event Template** dashboard setting. Also, if the **Embed Flag** setting is enabled, it sends the embed message details in the `embeds` property. Refer to the [Discord documentation](https://discord.com/developers/docs/resources/webhook) for more information.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Discord | RudderStack Docs",
  "description": "Send your event data from RudderStack to Discord.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/drip/setting-up-drip-in-rudderstack/",
  "markdown": "# Set up Drip | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Set up Drip | RudderStack Docs",
  "description": "Send your event data from RudderStack to Drip.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/dynamic-yield/",
  "markdown": "# Dynamic Yield | RudderStack Docs\n\nSend your event data from RudderStack to Dynamic Yield.\n\n* * *\n\n*     3 minute read  \n    \n\n[Dynamic Yield](https://www.dynamicyield.com/) is a personalization platform that lets you deliver personalized digital customer experiences. It lets you tailor content, products, and offers based on customer preferences.\n\nFind the open source transformer code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/develop/src/cdk/v2/destinations/dynamic_yield).\n\n## Setup\n\n1.  In your [RudderStack dashboard](https://app.rudderstack.com/), go to **Directory** > **Destinations** > **Cloud Destinations** and search for **Dynamic Yield**.\n2.  Connect your source and click **Continue**.\n\n### Connection settings\n\nConfigure the following settings to set up Dynamic Yield as a destination in RudderStack:\n\n*   **Name**: Assign a name to uniquely identify the destination.\n*   **API Key**: Enter your Dynamic Yield API key by logging in to your [Dynamic Yield dashboard](https://adm.dynamicyield.com/users/sign_in) and going to **Settings** > **API Keys**.\n\n### Connection mode\n\nSpecify how you want to send events from your source to Dynamic Yield.\n\nRudderStack supports sending events to Dynamic Yield via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| Connection mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| Device mode | \\-  | \\-  | \\-  |\n| Cloud mode | **Supported** | **Supported** | **Supported** |\n\n### Configuration settings\n\nAfter completing the initial setup, configure the following settings to receive your data in Dynamic Yield correctly:\n\n*   **Hash Email**: If turned on, RudderStack hashes the email present in the `identify` call before sending it to Dynamic Yield.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If your emails are already hash-encrypted, turning off this setting is recommended.\n\n*   **OneTrust Cookie Categories**: This setting lets you associate the [OneTrust](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/) cookie consent groups to Dynamic Yield.\n\n## Identify\n\nYou can use the [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call to identify known/unknown users in Dynamic Yield.\n\nA sample `identify` call is shown below:\n\n```\nrudderanalytics.identify(\"user112\", {\n  email: \"alex@example.com\"\n}, {\n  context: {\n    sessionId: \"16733896350494\",\n    ip: \"54.100.200.255\"\n  }\n})\n```\n\n### Traits mapping\n\nRudderStack maps the following event traits to the Dynamic Yield properties:\n\n| RudderStack trait | Dynamic Yield property |\n| --- | --- |\n| `userId`  <br>`anonymousId`  <br>Required | `user.id`  <br>`events[].properties.cuid` |\n| `session_id`  <br>`context.sessionId`  <br>Required | `session.custom` |\n| `traits.email`  <br>`context.traits.email` | `hashedEmail` |\n\n## Track\n\nYou can use the [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call for recording ecommerce and custom events in Dynamic Yield.\n\nSee the [Dynamic Yield documentation](https://support.dynamicyield.com/hc/en-us/articles/4414379007633-Reporting-Events#h_01H05PX76HZDAW3W5Y6SB51NR9) for a list of predefined events.\n\nA sample `track` call is shown below:\n\n```\nrudderanalytics.track(\"Order Completed\", {\n  order_id: \"1234\",\n  currency: \"USD\",\n  products: [{\n    product_id: \"345676543\",\n    price: 17.99,\n    quantity: 20\n  }, ],\n}, {\n  context: {\n    traits: {\n      userId: \"user123\"\n    },\n    sessionId: \"16733896350494\",\n  }\n})\n```\n\n## Supported mappings\n\nRudderStack maps the following [ecommerce events](https://www.rudderstack.com/docs/event-spec/ecommerce-events-spec/) from RudderStack to Dynamic Yield:\n\n| RudderStack event | Dynamic Yield event |\n| --- | --- |\n| `Product Added` | `Add to Cart` |\n| `Product Removed` | `Remove from Cart` |\n| `Product Added to Wishlist` | `Add to Wishlist` |\n| `Order Completed` | `Purchase` |\n\nFor the above events, RudderStack maps the following properties to the Dynamic Yield properties:\n\n| RudderStack property | Dynamic Yield property |\n| --- | --- |\n| `properties.value`  <br>`properties.revenue`  <br>`properties.price`  <br>`properties.products[].value`  <br>`properties.products[].revenue`  <br>`properties.products[].price`  <br>Required | `events[i].properties.value` |\n| `properties.sku`  <br>`properties.products[].sku`  <br>`properties.product_id`  <br>`properties.products[].product_id`  <br>Required | `events[].properties.productId`  <br>`events[].properties.cart[].productId` |\n| `properties.quantity`  <br>`properties.products[i].quantity`  <br>Required | `events[].properties.quantity`  <br>`events[].properties.cart[].quantity` |\n| `properties.products[].price`  <br>Required | `events[].properties.cart[].itemPrice` |\n| `context.traits.userId`  <br>Required | `user.id` |\n| `context.sessionId`  <br>Required | `session.custom` |\n| `properties.order_id` | `events[].properties.uniqueTransactionId` |\n| `properties.currency` | `events[i].properties.currency` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack considers any other event apart from the ones mentioned above as a custom event and sends it to Dynamic Yield, along with **all** the associated properties.\n\nTo capture the experiments/campaigns-related data rendered by Dynamic Yield and send it to other tools via RudderStack, use any of the following ways depending on your Dynamic Yield implementation:\n\n*   For client-side rendered experiments (loaded via the Dynamic Yield tags), use one of the Dynamic Yield API methods:\n    *   `DYO.getRenderedObjectsOnPage()`: Gets a list of campaigns rendered on the page.\n    *   `DYO.getUserObjectsAndVariations()`: Gets a list of campaigns executed on the page.\n\n[![ActiveCampaign hybrid mode connection setting](https://www.rudderstack.com/docs/images/event-stream-destinations/dy-experiment.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/dy-experiment.webp)\n\n*   For server-side rendered experiments (rendered via the Dynamic Yield [choose variations API](https://dy.dev/reference/choosing-variations)), the chosen variation’s information is available in the API response. See [choose code examples](https://dy.dev/reference/choose-code-examples).\n\nOnce done, you can send the returned experiment/variation data via RudderStack to other tools using a `track` call.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Dynamic Yield | RudderStack Docs",
  "description": "Send your event data from RudderStack to Dynamic Yield.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/canny/",
  "markdown": "# Canny destination | RudderStack Docs\n\nSend your event data from RudderStack to Canny.\n\n* * *\n\n*     4 minute read  \n    \n\n[Canny](https://canny.io/) is a customer feedback management tool which captures, organizes, and analyzes product feedback in one place to help you make informed product decisions.\n\nRudderStack supports Canny as a destination to which you can seamlessly send your event data.\n\n## Getting started\n\nBefore configuring Canny as a destination in RudderStack, verify if the source platform is supported by Canny by referring to the table below:\n\n| Connection Mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| Device mode | \\-  | \\-  | \\-  |\n| Cloud mode | Supported | Supported | Supported |\n\nOnce you have confirmed that the source platform supports sending events to Canny, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **Canny**.\n2.  Assign a name to the destination and click **Continue**.\n\n## Connection settings\n\nTo successfully configure Canny as a destination, you will need to configure the following settings:\n\n[![Canny connection settings](https://www.rudderstack.com/docs/images/event-stream-destinations/canny-connection-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/canny-connection-settings.webp)\n\n*   **API Key**: Enter your API key from the Canny dashboard.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Refer to the [FAQ](#faq) section below for more information on getting the API Key.\n\n### Event settings\n\n*   **Mapping to trigger Canny Events for the respective Event**: Enter the event name and choose the Canny event from the dropdown to be triggered when that event is called.\n\n> ![success](https://www.rudderstack.com/docs/images/tick.svg)\n> \n> You can specify multiple **Canny Events** for one **Event Name** and vice versa.\n\n## Identify\n\nYou can use the [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call to [create or update a user](https://developers.canny.io/api-reference#create_or_update_user) in Canny.\n\nA sample `identify` call is shown below:\n\n```\nrudderanalytics.identify(\"1hKOmRA4el9Zt1WSfVJIVo4GRlm\", {\n    \"name\": \"Alex Keener\",\n    \"email\": \"alex@example.com\",\n    \"gender\": \"Male\",\n    \"profession\": \"singer-songwriter\",\n    \"companies\": [{\n        \"created\": \"2020-01-23T04:56:07.890Z\",\n        \"customFields\": {\n            \"field1\": \"value1\",\n        },\n        \"id\": \"company123\",\n        \"monthlySpend\": 500.00,\n        \"name\": \"company name\"\n    }]\n});\n```\n\n### Property mappings\n\nThe following table lists the mappings between RudderStack and Canny properties:\n\n| RudderStack property | Canny property | Presence | Data type |\n| --- | --- | --- | --- |\n| `userId`/`traits.userId`/`traits.id`/`context.traits.userId`/`context.traits.id` | `userId` | Required | String |\n| `context.traits.name`/`traits.name` | `name` | Required | String |\n| `context.traits.email`/`traits.email`/`properties.email` | `email` | Optional | String |\n| `context.traits`/`traits` (after removing `email` and `name`) | `customFields` | Optional | Object |\n| `originalTimestamp`/`timestamp` | `created` | Optional | ISO 8601 Timestamp |\n| `context.traits.avatarURL`/`traits.avatarURL` | `avatarURL` | Optional | String |\n| `context.traits.companies`/`traits.companies` | `companies` | Optional | Array of object (in company objects `id` and `name` are the only required fields) |\n\n## Track\n\nYou can create the following events using the [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call:\n\n*   [Create post](https://developers.canny.io/api-reference#create_post)\n*   [Create vote](https://developers.canny.io/api-reference#create_vote)\n\nRudderStack [retrieves the user](https://developers.canny.io/api-reference#retrieve_user) data using `userId` or `email` and uses that information to create post or vote.\n\nA sample `track` call is shown below:\n\n```\nrudderanalytics.track(\"Submit\", {\n    boardId: \"62de88676bc28b44eeef25dd\",\n    details: \"Require new feature\",\n    title: \"New Feature\",\n    eta: \"10.08.2022\",\n    priority: \"High\"\n})\n```\n\n### Property mappings for Create post event\n\nThe following table lists the mappings between RudderStack and Canny properties for the **Create post** event:\n\n| RudderStack property | Canny property | Presence | Data type | Notes |\n| --- | --- | --- | --- | --- |\n| `properties.boardID`/`properties.boardId`/`properties.board.id` | `boardID` | Required | String | \\-  |\n| Collect from `externalId` or [retrieve user](https://developers.canny.io/api-reference#retrieve_user) API call | `authorID` | Required | String | \\-  |\n| `properties.details` | `details` | Required | String | \\-  |\n| `properties.title` | `title` | Required | String | \\-  |\n| `properties.byID`/`properties.byId`/`properties.by.id` | `byID` | Optional | String | \\-  |\n| `properties.categoryID`/`properties.categoryId`/`properties.category.id` | `categoryID` | Optional | String | \\-  |\n| `properties.customFields` | `customFields` | Optional | Object | Ensure that you [create the custom fields in Canny dashboard](#how-to-create-custom-fields-in-canny-dashboard) to send the event successfully. |\n| `properties.eta` | `eta` | Required if `etaPublic` is present. | String | Should be in the MM/YYYY format. |\n| `properties.etaPublic` | `etaPublic` | Required if `eta` is present. | Boolean | \\-  |\n| `properties.imageURLs` | `imageURLs` | Optional | Array of strings | \\-  |\n\n### Property mappings for Create vote event\n\nThe following table lists the mappings between RudderStack and Canny properties for the **Create vote** event:\n\n| RudderStack property | Canny property | Presence | Data type |\n| --- | --- | --- | --- |\n| `properties.postId`/`properties.postID`/`properties.post.id` | `postID` | Required | String |\n| Collect from `externalId` or [retrieve user](https://developers.canny.io/api-reference#retrieve_user) API call | `voterID` | Required | String |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The key name for `externalId` is `cannyUserId`.\n\n## FAQ\n\n#### Where can I find the Canny API Key?\n\nTo find the Canny API Key:\n\n1.  Log into your [Canny account](https://canny.io/login).\n2.  Go to **Settings** > **API & Webhooks** under your profile:\n\n[![Canny dashboard](https://www.rudderstack.com/docs/images/event-stream-destinations/canny-api-key.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/canny-api-key.webp)\n\n#### How to create custom fields in the Canny dashboard?\n\nTo create custom fields in Canny Dashboard:\n\n1.  Log into your [Canny account](https://canny.io/login).\n2.  Under your profile, navigate to **Settings** > **Post Fields** > **Create New Field**.\n3.  Enter the field name and click **Create**.\n4.  Navigate to **Boards** and select the desired **Board** from the dropdown.\n5.  Select **Create Post Form** > **Add Fields** in the **Fields** section.\n6.  Select the relevant **Post Field** from the dropdown.\n7.  Enter details and click **Save**.\n\n[![Canny dashboard](https://www.rudderstack.com/docs/images/event-stream-destinations/canny-new-field.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/canny-new-field.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Canny destination | RudderStack Docs",
  "description": "Send your event data from RudderStack to Canny.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/drip/",
  "markdown": "# Drip | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Drip | RudderStack Docs",
  "description": "Send your event data from RudderStack to Drip.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/drip/drip-web-device-mode/",
  "markdown": "# Drip device mode | RudderStack Docs\n\nSend events to Drip using RudderStack web device mode.\n\n* * *\n\n*     2 minute read  \n    \n\nRudderStack lets you send your event data to Drip via device mode, i.e. using the native web SDK.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Find the open source JavaScript SDK code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-sdk-js/tree/production/src/integrations/Drip).\n\n## Identify\n\nThe `identify` method pushes the subscriber data to Drip. If the subscriber is not present in your account, RudderStack will create a new record for them. Otherwise, RudderStack updates the user records with the latest information.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To update a subscriber’s email address, use the `new_email` property.\n\nA sample `identify` call is as shown:\n\n```\nrudderanalytics.identify(\n  \"6781206\",\n  {\n    email: \"sampleUser@testmail.com\",\n    tags: [\"Customer\"],\n  },\n  {\n    externalId: [\n      {\n        type: \"dripCampaignId\",\n        id: \"846616660\",\n      },\n    ],\n  }\n)\n```\n\nThe following table lists the properties that RudderStack transforms and maps to Drip’s standard properties:\n\n| **RudderStack Property Name** | **Drip Standard Property** |\n| --- | --- |\n| `email` | `email` |\n| `newEmail` | `new_email` |\n| `userId or anonymousId` | `user_id` |\n| `tags` | `tags` |\n| `removeTags` | `remove_tags` |\n| `prospect` | `prospect` |\n| `euConsent` | `eu_consent` |\n| `euConsentMessage` | `eu_consent_message` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> All other fields in `context.traits` will be passed as custom fields.\n\nYou can subscribe a user to a [Email Series Campaign](https://www.drip.com/learn/docs/guides/overview-of-drip) by providing the associated **Campaign ID**. Doing so will add the subscriber directly to that email series campaign.\n\nIf you want to add a subscriber to your account without subscribing them to an email series campaign, use the `identify` call instead. You can also send some additional properties with the `identify` call. These are listed in the following table:\n\n| **RudderStack Property Name** | **Drip Standard Property** |\n| --- | --- |\n| `doubleOptin` | `double_optin` |\n\n## Track\n\nWhen you call the `track` API, RudderStack sends the event to Drip along with its name and all of the specified properties. If you include `revenue` as a property, it will get passed to Drip as the conversion value of the event.\n\nA sample `track` call is as shown:\n\n```\nrudderanalytics.track(\"randomProduct\", {\n  email: \"sampleUser@rudderstackdrip.com\",\n  revenue: 100,\n})\n```\n\nThe following table lists the properties that RudderStack transforms and maps to Drip’s standard properties:\n\n| **RudderStack Property Name** | **Drip Standard Property** |\n| --- | --- |\n| `email` | `email` |\n| `revenue` | `value` |\n| `occurred_at or originalTimestamp` | `occurred_at` |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Drip device mode | RudderStack Docs",
  "description": "Send events to Drip using RudderStack web device mode.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/drip/drip-cloud-mode/",
  "markdown": "# Drip cloud mode | RudderStack Docs\n\nSend events to Drip using RudderStack cloud mode.\n\n* * *\n\n*     4 minute read  \n    \n\n## Identify\n\nThe `identify` call lets you add a new user or update an existing user with the latest information like the user’s `dripId`,`email`,`name`, etc.\n\nIf you provide the **Campaign ID** in the dashboard while setting up the destination, RudderStack will subscribe every user to this `campaign ID` by default. Alternatively, you can also send the information via the `identify` call using `externalId` as shown in the code snippet below. Note that this takes a higher precedence than the campaign ID provided in the RudderStack dashboard.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Either the `dripId` or `email` is required for the `identify` call. If you are creating a user, then you must provide the `email`. In case of updating a user, you can provide either the assigned `dripId` or `email`.\n\nA sample `identify` call is as shown below:\n\n```\nrudderanalytics.identify(\n  \"user123\",\n  {\n    email: \"sampleuser@testmail.com\",\n    firstName: \"Demo\",\n    lastName: \"Example\",\n    tags: [\"tag1\", \"tag2\"],\n    customFields: {\n      filter1: \"filterval1\",\n    },\n  },\n  {\n    externalId: [\n      {\n        type: \"dripCampaignId\",\n        id: \"<your campaign id>\",\n      },\n      {\n        type: \"dripId\",\n        id: \"<user's drip id>\",\n      },\n    ],\n  }\n)\n```\n\n### Identify Mapping\n\nThe following table includes all fields in `identify` call with their relative mapping to the Drip fields:\n\n| **RudderStack Field** | **Drip Field** |\n| --- | --- |\n| `newEmail` | `new_email` |\n| `phone` | `phone` |\n| `firstName`/`first_name`/`firstname` | `first_name` |\n| `lastName`/`last_name`/`lastname` | `last_name` |\n| `tags` | `tags` |\n| `removeTags` | `remove_tags` |\n| `status` | `status` |\n| `initialStatus` | `initial_status` |\n| `timeZone` | `time_zone` |\n| `country` | `country` |\n| `city` | `city` |\n| `zip` | `zip` |\n| `euConsent` | `eu_consent` |\n| `euConsentMessage` | `eu_consent_message` |\n| `ip` | `ip_address` |\n| `address` | `address1` |\n| `address2` | `address2` |\n| `lifetimeValue` | `lifetime_value` |\n| `prospect` | `prospect` |\n| `baseLeadScore` | `base_lead_score` |\n| `customFields` | `custom_fields` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   If `customFields` is not present, RudderStack extracts all fields apart from the ones mentioned in the table above and constructs a `customFields` object.\n> *   If `customFields` is present and there are other fields apart from the ones mentioned in the table, RudderStack ignores them.\n> *   The `customFields` object’s value must not exceed 1000 characters and must contain only letters, numbers, and underscores. Otherwise, RudderStack drops its value.\n> *   The `address` field should be an object.\n\nWhen you provide the **Campaign ID**, you can also send some extra fields with the call.\n\nThe following table lists all supported fields for the `campaign` call:\n\n| **RudderStack Field** | **Drip Field** |\n| --- | --- |\n| `doubleOptin` | `double_optin` |\n| `startingEmailIndex` | `starting_email_index` |\n| `reactivateIfRemoved` | `reactivate_if_removed` |\n\n## Track\n\nThe `track` call lets you record the user events and the information associated with them, like `action`, `occurred_at`, and `customFields`. Either `id` or `email` must be provided in this call.\n\nThe **User Creation Mode** option in the RudderStack dashboard lets you create a user with their `email` if they don’t already exist. If you don’t want new users to be created, disable this option.\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If the `dripId` is provided in the call, then new users will not be created even if the **User Creation Mode** option is enabled in the RudderStack dashboard.\n\nA sample `track` call is as shown below:\n\n```\nrudderanalytics.track(\n  \"Event Name\",\n  {\n    email: \"sampleuser@testmail.com\",\n    affiliation: \"custom_store\",\n    order_id: \"123456\",\n    products: [\n      {\n        name: \"product_name\",\n        price: 10.0,\n      },\n    ],\n  },\n  {\n    externalId: [\n      {\n        type: \"dripId\",\n        id: \"<user's drip id>\",\n      },\n    ],\n  }\n)\n```\n\n### Special Events\n\nYou can create or update a user order if the event name belongs to either of the following special events:\n\n*   `order updated`\n*   `order completed`\n*   `order refunded`\n*   `order cancelled`\n*   `checkout started`\n*   `fulfilled` / `order fulfilled`\n\n### Track Fields\n\nA `track` call can contain the following fields:\n\n| **RudderStack Field** | **Drip Field** |\n| --- | --- |\n| `prospect` | `prospect` |\n| `customFields` | `properties` |\n| `occurred_at` | `occurred_at` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Note that:\n> \n> *   If `customFields` is not present, RudderStack extracts all fields apart from the ones mentioned in the table above and constructs a `customFields` object.\n> *   If `customFields` is present and there are other fields apart from the ones mentioned in the table, RudderStack ignores them.\n> *   The `customFields` object’s value must not exceed 1000 characters and must contain only letters, numbers, and underscores. Otherwise, RudderStack drops its value.\n\nFor the special events mentioned above, the following fields are also supported:\n\n| **RudderStack Field** | **Drip Field** |\n| --- | --- |\n| `affiliation` | `provider` |\n| `initial_status` | `initial_status` |\n| `order_id` | `order_id` |\n| `order_public_id` | `order_public_id` |\n| `total` | `grand_total` |\n| `discount` | `discounts` |\n| `tax` | `total_taxes` |\n| `total_fees` | `total_fees` |\n| `shipping` | `total_shipping` |\n| `refund_amount` | `refund_amount` |\n| `currency` | `currency` |\n| `order_url` | `order_url` |\n| `billing_address` | `billing_address` |\n| `shipping_address` | `shipping_address` |\n| `occurred_at` | `occurred_at` |\n| **`products`** | `items` |\n\nNote that **`products`** is an array of objects. Every object in this array can contain the following fields:\n\n| **RudderStack Field** | **Drip Field** |\n| --- | --- |\n| `product_id` | `product_id` |\n| `sku` | `sku` |\n| `name` | `name` |\n| `product_variant_id` | `product_variant_id` |\n| `brand` | `brand` |\n| `price` | `price` |\n| `quantity` | `quantity` |\n| `categories` | `categories` |\n| `discounts` | `discounts` |\n| `taxes` | `taxes` |\n| `fees` | `fees` |\n| `shipping` | `shipping` |\n| `total` | `total` |\n| `url` | `product_url` |\n| `image_url` | `image_url` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The `products` field is not mandatory. However, if provided, each object must contain the `name` and `price` field, otherwise it will be dropped.\n> \n> **Note that the `track` call will still not be aborted in such a scenario.**\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Drip cloud mode | RudderStack Docs",
  "description": "Send events to Drip using RudderStack cloud mode.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/emarsys/",
  "markdown": "# Emarsys | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Emarsys | RudderStack Docs",
  "description": "Send your event data from RudderStack to Emarsys.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/emarsys/cloud-mode/",
  "markdown": "# Emarsys Cloud Mode Integration | RudderStack Docs\n\nSend events to Emarsys using RudderStack cloud mode.\n\n* * *\n\n*     2 minute read  \n    \n\nAfter you have successfully instrumented Emarsys as a destination in RudderStack, follow this guide to correctly send your events to Emarsys in [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack gives higher precedence to the contact list ID or custom identifier field ID specified in the `identify`/`track`/`group` events over the same fields configured in the RudderStack dashboard [configuration settings](https://www.rudderstack.com/docs/destinations/streaming-destinations/emarsys/setup-guide/#configuration-settings).\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) method lets you identify a user and associate them to their actions. It also lets you record any traits about them like their name, email, etc.\n\nYou can also send an ad hoc contact list ID or a custom identifier field ID via the `integrations` object in an `identify` call:\n\n```\nrudderanalytics.identify(\"1hKOmRA4el9Z\", {\n  firstName: \"Alex\",\n  lastName: \"Keener\",\n  email: \"alex@example.com\"\n  optin: 1,\n}, {\n  integrations: {\n    EMARSYS: {\n      customIdentifierId: 1,\n      contactListId: 'objectListId',\n    },\n  },\n})\n```\n\n## Track\n\nYou can use the [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call to trigger an external event created in Emarsys. You must configure the external event mapping in the RudderStack dashboard first.\n\nRudderStack currently supports single section variable type payload to trigger an external event. Follow [Emarsys documentation](https://dev.emarsys.com/docs/core-api-reference/fl0xx6rwfbwqb-trigger-an-external-event) for more information.\n\nYou can send the custom identifier and `trigger_id` in the `integrations` object in a `track` call:\n\n```\nrudderanalytics.track('Order Completed', {\n  company: 'testComp',\n  data: {\n    section_group1: [{\n        section_variable1: 'some_value',\n        section_variable2: 'another_value',\n      },\n      {\n        section_variable1: 'yet_another_value',\n        section_variable2: 'one_more_value',\n      },\n    ],\n    global: {\n      global_variable1: 'global_value',\n      global_variable2: 'another_global_value',\n    },\n  },\n  attachment: [{\n    filename: 'example.pdf',\n    data: 'ZXhhbXBsZQo=',\n  }, ],\n}, {\n  'EMARSYS': {\n    trigger_id: 'EVENT_TRIGGER_ID',\n    customIdentifierId: 'custom_id',\n  }\n});\n```\n\n### Property mappings\n\nThe following table lists the property mappings between RudderStack and Emarsys:\n\n| RudderStack property | Emarsys property |\n| --- | --- |\n| `message.properties.data` | `data` |\n| `message.properties.attachment` | `attachment` |\n| `message.timestamp`  <br>`message.originalTimestamp` | `event_time` |\n\n## Group\n\nYou can use the [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call to insert an already created contact in a contact list.\n\nRudderStack maps the contact list ID from `groupId` and if `groupId` is absent, it maps it from the default contact list configured in the RudderStack dashboard.\n\nYou can send an adhoc custom identifier field ID in the `integrations` object in a `group` call:\n\n```\nrudderanalytics.group(\"group123\", {\n  company: 'Sample Company',\n}, {\n  integrations: {\n    All: true,\n    EMARSYS: {\n      customIdentifierId: 'custom_id',\n    },\n  },\n});\n```\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Emarsys Cloud Mode Integration | RudderStack Docs",
  "description": "Send events to Emarsys using RudderStack cloud mode.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/emarsys/setup-guide/",
  "markdown": "# Setup Guide | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Setup Guide | RudderStack Docs",
  "description": "Set up and configure Emarsys as a destination in RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/engage/",
  "markdown": "# Engage | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Engage | RudderStack Docs",
  "description": "Send your event data from RudderStack to Engage.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/engage/engage-cloud-mode/",
  "markdown": "# Engage cloud mode | RudderStack Docs\n\nSend events to Engage using RudderStack cloud mode.\n\n* * *\n\n*     4 minute read  \n    \n\nRudderStack lets you send your event data to Engage via [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode).\n\n## Identify\n\nYou can use the [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call to create or update a user in Engage. To update a user’s email, you need to provide the [Engage Private Key](https://www.rudderstack.com/docs/destinations/streaming-destinations/engage/setting-up-engage/#connection-settings) in the dashboard settings.\n\nRudderStack uses the [Create or update a User](https://engage.so/docs/api/users) API to add a new user to your Engage account.\n\nThe following table lists the RudderStack attributes and their mappings with the Engage properties:\n\n| RudderStack property | Engage property | Data type |\n| --- | --- | --- |\n| `externalId.engageId`, `userId`, `traits.userid`, `traits.id`, `context.traits.userId`, `context.traits.id`  <br>Required | `uid` | Alphanumeric |\n| `traits.firstName`, `traits.firstname`, `traits.first_name`, `context.traits.firstName`, `context.traits.firstname`, `context.traits.first_name` | `first_name` | String |\n| `traits.lastName`, `traits.lastname`, `traits.last_name`, `context.traits.lastName`, `context.traits.lastname`, `context.traits.last_name` | `last_name` | String |\n| `traits.email`, `context.traits.email`, `properties.email` | `email` | String |\n| `traits.phone`, `context.traits.phone`, `properties.phone` | `number` | Number _(In `^[0-9]{7,15}$` format)_ |\n| Other user traits | `meta` | String/Integer/Boolean |\n| `timestamp`, `originalTimestamp` | `createdAt` | Timestamp _(ISO 8601 format)_ |\n| `externalId.engageListId`, `config.listIds` | `lists` | Array of List ID |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack uses `externalId.engageListId` or `config.listIds` as a fallback value in case `userId`, `externalId.engageId`, `traits.userId`, `traits.id`, or `context.traits.id` is absent in the event.\n\n### Deleting a user\n\nYou can delete a user in Engage using the [Suppression with Delete regulation](https://www.rudderstack.com/docs/api/user-suppression-api/#adding-a-suppression-with-delete-regulation) of the RudderStack [User Suppression API](https://www.rudderstack.com/docs/api/user-suppression-api/).\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To delete a user in Engage, you need to specify the [Engage Private Key](https://www.rudderstack.com/docs/destinations/streaming-destinations/engage/setting-up-engage/#connection-settings) in the dashboard settings.\n\nA sample regulation request body for deleting a user in Engage is shown below:\n\n```\n{\n  \"regulationType\": \"suppress_with_delete\",\n  \"destinationIds\": [\n    \"2FIKkByqn37FhzczP23eZmURciA\"\n  ],\n  \"users\": [{\n    \"userId\": \"1hKOmRA4GRlm\",\n    \"phone\": \"+1-202-555-0146\",\n    \"email\": \"alex@example.com\"\n  }]\n}\n```\n\nRudderStack deletes the user account in Engage using the [Delete User API](https://engage.so/docs/api/users#delete-user).\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you capture user events along with the associated properties and send them to Engage.\n\nRudderStack uses the [Add User events API](https://engage.so/docs/api/users#add-user-events) to send the user events to Engage.\n\nA sample `track` call is shown below:\n\n```\nrudderanalytics.track(\n  \"Order Completed\", {\n    revenue: 30,\n    currency: \"USD\",\n    userId: \"1hKOmRA4el9Z\" \n  })\n```\n\nThe following table lists the RudderStack attributes and their mappings with the Engage properties:\n\n| RudderStack property | Engage property | Data type |\n| --- | --- | --- |\n| `externalId.engageId`, `userId`, `traits.userid`, `traits.id`, `context.traits.userId`, `context.traits.id`  <br>Required | `uid` | Alphanumeric |\n| `event`  <br>Required | `event` | String |\n| `originalTimestamp` | `timestamp` | Timestamp _(ISO 8601 format)_ |\n| `properties` | `properties` | Object |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The event name must be less than 32 characters. Otherwise, Engage will reject the event.\n\n## Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record your website’s page views with any additional relevant information about the viewed page.\n\nRudderStack sends the page-related information to Engage using their [Add User events API](https://engage.so/docs/api/users#add-user-events).\n\nThe following table lists the RudderStack event properties and their mappings with the Engage properties:\n\n| RudderStack property | Engage property | Data type |\n| --- | --- | --- |\n| `externalId.engageId`, `userId`, `traits.userid`, `traits.id`, `context.traits.userId`, `context.traits.id`  <br>Required | `uid` | Alphanumeric |\n| `Visited {Category} {Name} Page`  <br>Required | `event` | String |\n| `originalTimestamp` | `timestamp` | Timestamp _(ISO 8601 format)_ |\n| `properties` | `properties` | Object |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> The event name must be less than 32 characters. Otherwise, Engage will reject the event.\n\n## Group\n\nYou can use the [`group`](https://www.rudderstack.com/docs/event-spec/standard-events/group/) call to link an identified user to a specific Engage list.\n\nRudderStack subscribes the user to the Engage list using their [Subscribe to a List API](https://engage.so/docs/api/lists#subscribe-to-a-list).\n\nA sample `group` call is shown below:\n\n```\nrudderanalytics.group(\"group01\", {\n\"userId\": \"1\",\n\"name\": \"Capsule Corp.\",\n\"subscriber_status\": \"false\",\n\"operation\": \"add\"\n});\n```\n\nYou can pass the following parameters in the `group` event along with the `userId` (if known):\n\n| RudderStack property | Engage property | Data type |\n| --- | --- | --- |\n| `groupId`  <br>Required | `id` | String |\n| `externalId.engageId`, `userId` | `uid` | Alphanumeric |\n| `subscriber_status`  <br>_(Default: `true`)_ | `subscribed` | Boolean |\n| `traits.operation`  <br>_(Acceptable values: `add`/`remove`)_ | \\-  | String |\n\nThe following table lists the additional property mappings with the Engage properties:\n\n| RudderStack property | Engage property | Data type |\n| --- | --- | --- |\n| `traits.email`, `context.traits.email`, `properties.email`, `context.externalId.0.id`  <br>Required, if `phone` is not present | `email` | String |\n| `traits.phone`, `context.traits.phone`, `properties.phone`  <br>Required, if `email` is not present | `number` | Number _(In `^[0-9]{7,15}$` format)_ |\n| `traits.firstName`, `traits.firstname`, `traits.first_name`, `context.traits.firstName`, `context.traits.firstname`, `context.traits.first_name` | `first_name` | String |\n| `traits.lastName`, `traits.lastname`, `traits.last_name`, `context.traits.lastName`, `context.traits.lastname`, `context.traits.last_name` | `last_name` | String |\n| Other user traits | `meta` | String / Integer / Boolean |\n| `timestamp`, `originalTimestamp` | `createdAt` | Timestamp _(ISO 8601 format)_ |\n\nWhen sending `group` events to Engage, it is important to note the following:\n\n*   To remove a user from a group (`\"operation\": \"remove\"`), you need to provide the `userId` or `externalId` in the event.\n*   If the user’s ID is not known, then either `email` or `phone` is required for looking up the user in Engage.\n*   If a user is found with an associated `email` or `phone` (in that priority), then Engage links the user to the provided Engage List ID. Otherwise, it creates a new user with the provided details and then links them to the List ID.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Engage cloud mode | RudderStack Docs",
  "description": "Send events to Engage using RudderStack cloud mode.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/facebook-app-events/",
  "markdown": "# Facebook App Events | RudderStack Docs\n\nSend your event data from RudderStack to Facebook App Events.\n\n* * *\n\n*     9 minute read  \n    \n\n[Facebook App Events](https://developers.facebook.com/docs/app-events/) is Facebook’s event tracking functionality which lets you track events via your app or web page, including user activities such as app installation, purchases, etc.\n\nFind the open source transformer code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-transformer/tree/master/src/v0/destinations/fb).\n\n## Get started\n\nRudderStack supports sending event data to Facebook App Events via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| Connection Mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | **Supported** | \\-  |\n| **Cloud mode** | **Supported** | **Supported** | \\-  |\n\nOnce you have confirmed that the source platform supports sending events to Facebook App Events, follow these steps:\n\n1.  From your [RudderStack dashboard](https://app.rudderstack.com/), add a source. Then, from the list of destinations, select **Facebook App Events**.\n2.  Assign a name to the destination and click **Continue**.\n\n## Connection settings\n\nTo successfully configure Facebook App Events as a destination, you will need to configure the following settings:\n\n**APP ID**: Enter your Facebook App ID. See [FAQ](#faq) for more information on getting your Facebook App ID.\n\nThe following settings are applicable **only if** you are sending events to Facebook using [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode):\n\n**Limited Data Use**: Enable this setting to send the end user’s country and state information. Facebook processes the user data according to the data regulations set for that region. See [Limited Data Use](#limited-data-use) for more information on this setting.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> You can allow Facebook to detect your country and state automatically by choosing the **Use Facebook to detect Automatically** option.\n\n*   **Client-side Events Filtering**: This setting lets you specify which events should be blocked or allowed to flow through to Facebook App Events. See [Client-side Events Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/) for more information.\n*   **OneTrust Cookie Categories**: This setting lets you associate the [OneTrust](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/) cookie consent groups to Facebook App Events.\n\n## Add device mode integration\n\nDepending on your platform of integration, follow the below steps to integrate App Events with your app.\n\n1.  Add the following line to your [CocoaPods](https://cocoapods.org/)`Podfile`:\n\n  \n\n2.  Initialize the Facebook App Events iOS SDK just before intializing the RudderStack iOS SDK:\n\n```\n[[FBSDKApplicationDelegate sharedInstance] application:application\n                             didFinishLaunchingWithOptions:launchOptions];\n```\n\n  \n\n3.  Send the user’s consent to App Events as shown below:\n\nFor **Objective-C**:\n\n```\n// Set AdvertiserTrackingEnabled to YES if a user provides consent\n[FBSDKSettings setAdvertiserTrackingEnabled:YES];\n// Set AdvertiserTrackingEnabled to NO if a user does not provide consent\n[FBSDKSettings setAdvertiserTrackingEnabled:NO];\n```\n\nFor **Swift**:\n\n```\n// Set AdvertiserTrackingEnabled to true if a user provides consent\nSettings.setAdvertiserTrackingEnabled(true)\n// Set AdvertiserTrackingEnabled to false if a user does not provide consent\nSettings.setAdvertiserTrackingEnabled(false)\n```\n\n  \n\n4.  Configure your project by adding the following lines to`(<dict>...</dict>)` in your`Info.plist` :\n\n```\n<key>CFBundleURLTypes</key>\n<array>\n<dict>\n<key>CFBundleURLSchemes</key>\n<array>\n<string>fbAPP-ID</string>\n</array>\n</dict>\n</array>\n<key>FacebookAppID</key>\n<string>APP-ID</string>\n<key>FacebookClientToken</key>\n<string>CLIENT-TOKEN</string>\n<key>FacebookDisplayName</key>\n<string>APP-NAME</string>\n```\n\n  \n\n5.  After adding the dependency, register the`RudderFacebookFactory` with your`RudderClient` initialization as a`factory` of`RudderConfig`. To do this, run the following command to import the`RudderFacebookFactory.h` file in your`AppDelegate.m` file:\n\n```\n#import <rudder-facebook>\n```\n\n  \n\n6.  Add the RudderStack iOS SDK initialization:\n\n```\nRSConfigBuilder *builder = [[RSConfigBuilder alloc] init];\n[builder withDataPlaneUrl:DATA_PLANE_URL];\n[builder withFactory:[RudderFacebookFactory instance]];\n[RSClient getInstance:WRITE_KEY config:[builder build]];\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This device mode integration is supported for Facebook App Events 13.0.0 and above.\n\n1.  Install`RudderFacebookAppEvents` (available through [CocoaPods](https://cocoapods.org/)) by adding the following line to your`Podfile`:\n\n```\npod 'RudderFacebookAppEvents', '~>; 1.0.0'\n```\n\n  \n\n2.  Run the`pod install` command.\n3.  Import the SDK depending on your preferred platform:\n\n```\nimport RudderFacebookAppEvents\n```\n\n  \n\n```\n@import RudderFacebookAppEvents;\n```\n\n  \n\n4.  Add the imports to your`AppDelegate` file under the`didFinishLaunchingWithOptions` method:\n\n```\nlet config: RSConfig = RSConfig(writeKey: WRITE_KEY)\n            .dataPlaneURL(DATA_PLANE_URL)\n        \nRSClient.sharedInstance().configure(with: config)\nRSClient.sharedInstance().addDestination(RudderFacebookAppEventsDestination())\n```\n\n  \n\n```\nRSConfig *config = [[RSConfig alloc] initWithWriteKey:WRITE_KEY];\n[config dataPlaneURL:DATA_PLANE_URL];\n\n[[RSClient sharedInstance] configureWith:config];\n[[RSClient sharedInstance] addDestination:[[RudderFacebookAppEventsDestination alloc] init]];\n```\n\n1.  Add the repository:\n\n```\nrepositories {\n    mavenCentral()\n}\n```\n\n2.  Add the following lines to your`app/build.gradle` file under the`dependencies` section:\n\n```\nimplementation 'com.rudderstack.android.sdk:core:1.+'\nimplementation 'com.rudderstack.android.integration:facebook:1.0.0'\nimplementation 'com.facebook.android:facebook-android-sdk:11.1.0'\n```\n\n  \n\n3.  Open your`/app/res/values/strings.xml` file and add the following lines. **Replace`[APP_ID` with your actual app ID**.\n\n```\n<string name=\"facebook_app_id\">[APP_ID]</string>\n<string name=\"fb_login_protocol_scheme\">fb[APP_ID]</string>\n```\n\n  \n\n4.  In the`app/manifests/AndroidManifest.xml`file, add a`meta-data` element to the`application` element:\n\n```\n<application ...=\"\" android:label=\"@string/app_name\">\n  ...\n  <meta-data android:name=\"com.facebook.sdk.ApplicationId\" android:value=\"@string/facebook_app_id\"></meta-data>\n  ...\n</application>\n```\n\n5.  Change the initialization of your`RudderClient` in your`Application` class:\n\n```\nval rudderClient = RudderClient.getInstance(\n    this,\n    WRITE_KEY,\n    RudderConfig.Builder()\n        .withDataPlaneUrl(DATA_PLANE_URL)\n        .withFactory(FacebookIntegrationFactory.FACTORY)\n        .build()\n)\n```\n\n## Identify\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> For Facebook App Events, RudderStack supports the`identify` calls only in mobile device mode.\n\nYou can use the [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call to set the `userId` through the `setUserID` method from `AppEventsLogger`.\n\nRudderStack sets the following properties (if available) using the `setUserData` method.\n\n| RudderStack property | Data type | App Events property |\n| --- | --- | --- |\n| `traits.email`  <br>`context.traits.email` | String | `em` |\n| `traits.firstName`  <br>`context.traits.firstName` | String | `fn` |\n| `traits.lastName`  <br>`context.traits.lastName` | String | `ln` |\n| `traits.phone`  <br>`context.traits.phone` | String | `ph` |\n| `traits.gender`  <br>`context.traits.gender` | String | `ge` |\n| `traits.birthday`  <br>`context.traits.birthday` | String | `db` |\n| `traits.city`  <br>`context.traits.city` | String | `ct` |\n| `traits.state`  <br>`context.traits.state` | String | `st` |\n| `traits.zip`  <br>`context.traits.zip` | String | `zp` |\n| `traits.country`  <br>`context.traits.country` | String | `cn` |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Make sure you pass the above properties in their specific format. Otherwise, RudderStack will ignore them and not map to any Facebook properties.\n\nA sample `identify` call for an iOS application is shown below:\n\n```\n[[RSClient sharedInstance] identify:@\"developer_user_id\"\n                                 traits:@{@\"email\": @\"bar@foo.com\"}];\n```\n\n## Track\n\nRudderStack logs the [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call to Facebook using the `logEvent` method of the `AppEventsLogger` class. It uses the same `eventName` as you have passed in the `track` call along with all `properties`, after converting them into the accepted format.\n\nA sample `track` call for an iOS application is as shown:.\n\n```\n[[RSClient sharedInstance] track:@\"Accepted Terms of Service\"\n                      properties:@{\n                          @\"foo\": @\"bar\",\n                          @\"foo_int\": @134\n                      }];\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> When`revenue` and`currency` are present in the event properties of any`track` call, RudderStack makes a`Purchase` call to Facebook using its`logPurchase` API along with the normal`track` call using the`logEvent` API.\n> \n> If`currency` is absent in the event properties, RudderStack sets the default value to`USD`.\n\n#### **Supported mappings for iOS v2**\n\nThis section lists some `track` event and property mappings which are **applicable only** when sending events via the [iOS v2](https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-ios-sdk/ios-v2/) device mode.\n\nThe following table lists the `track` event properties mappings between RudderStack and Facebook App Events:\n\n| RudderStack property | Facebook App Events property |\n| --- | --- |\n| `product_id` | ContentID |\n| `rating` | MaxRatingValue |\n| `name` | AdType |\n| `order_id` | OrderID |\n| `currency` | Currency |\n| `query` | Query |\n| `description` | Description |\n\nThe following table lists the ecommerce events mappings between RudderStack and Facebook App Events:\n\n| RudderStack event | Facebook App Events event |\n| --- | --- |\n| Products Searched | Search |\n| Products Viewed | View Content |\n| Product Added | Add to Cart |\n| Product Added To Wishlist | Add to Wishlist |\n| Payment Info Entered | Add Payment Info |\n| Checkout Started | Initiate Checkout |\n| Order Completed | Purchase |\n| Promotion Clicked | In-App Ad Click |\n| Promotion Viewed | In-App Ad Impression |\n| Product Reviewed | Rate |\n| Spend Credits | Spent Credits |\n\nRudderStack also supports the following Lifecycle events and maps them as it is before sending them to Facebook App Events:\n\n*   Complete Registration\n*   Achieve Level\n*   Complete Tutorial\n*   Unlock Achievement\n*   Subscribe\n*   Start Trial\n\n## Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) method lets you record your website’s page views with any additional relevant information about the viewed page. You need not pass the event name as RudderStack automatically sets it to `Viewed Page`.\n\nA sample `page` call using the RudderStack Android SDK is as shown:\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The`page` call is directly passed on to Facebook as a`track` event via its`logEvent` API, with the event name as`Viewed Page` along with the the associated properties.\n\n## Screen\n\nThe [`screen`](https://www.rudderstack.com/docs/event-spec/standard-events/screen/) call lets you record whenever your user views their mobile screen, with any additional relevant information about the screen.\n\nA sample `screen` call using the RudderStack Android SDK is as shown:\n\n```\n[[RSClient sharedInstance] screen:@\"Home\" properties:@{\n    @\"category\" : @\"launcher\"\n}];\n```\n\nIn the above snippet, RudderStack captures the information related to the viewed screen, such as screen `name` and `category`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> The above`screen` call is directly passed on to Facebook as a`track` event via its`logEvent` API, with the event name as`Viewed {screen name} screen` along with the the associated properties. The above example will be sent as a`track` event with name`Viewed Home screen` along with its properties.\n\n## Limited Data Use\n\nIn July 2020, Facebook released a [Limited Data Use](https://developers.facebook.com/docs/marketing-apis/data-processing-options) feature to give businesses better control over how their data is used in their **California Consumer Privacy Act (CCPA)** compliance efforts.\n\nUsing this, you can send the **Limited Data Use** data processing parameters to Facebook for each event via RudderStack, so that Facebook can appropriately apply the user’s data choice.\n\nTo use this feature, enable the **Limited Data Use** setting in the RudderStack dashboard and control its behavior via the following data processing parameters:\n\n| **Parameter** | **Default Value** | **Description** |\n| --- | --- | --- |\n| Data Processing Options State | `0` | Use Facebook’s geolocation to determine the end-user’s state. |\n| Data Processing Options Country | `0` | Use Facebook’s geolocation to determine the end-user’s country. |\n\n## Configure App Events SDK based on user consent\n\nThis section highlights the different consent-based options for configuring the App Events SDK.\n\n### Disable automatically logged events\n\nTo disable automatic event logging, open the application’s`.plist` as code in Xcode and add the following XML to the property dictionary:\n\n```\n<key>FacebookAutoLogAppEventsEnabled</key>\n<false></false>\n```\n\nIn some cases, you can delay the collection of automatically logged events to obtain user consent or fulfill legal obligations instead of disabling it entirely. To do so, call the`setAutoLogAppEventsEnabled` method of the`FBSDKSettings` class to re-enable auto-logging after the end-user provides the required consent.\n\nIn **Objective-C**:\n\n```\n[FBSDKSettings setAutoLogAppEventsEnabled:YES];\n```\n\nIn **Swift**:\n\n```\nFBSDKSettings.setAutoLogAppEventsEnabled(true)\n```\n\nTo suspend event collection for any reason, set the`setAutoLogAppEventsEnabled` method to`NO` for iOS or`false` for Swift:\n\nIn **Objective-C**:\n\n```\n[FBSDKSettings setAutoLogAppEventsEnabled:NO];\n```\n\nIn **Swift**:\n\n```\nFBSDKSettings.setAutoLogAppEventsEnabled(false)\n```\n\n  \n\nTo disable automatically logged events, add the following to your`AndroidManifest.xml` file:\n\n```\n<application>\n  ...\n  <meta-data android:name=\"com.facebook.sdk.AutoLogAppEventsEnabled\" android:value=\"false\"></meta-data>\n  ...\n</application>\n```\n\nIn some cases, you can delay the collection of automatically logged events to obtain user consent or fulfill legal obligations instead of disabling it entirely. To do so, call the`setAutoLogAppEventsEnabled()` method of the`FacebookSDK` class and set it to`true` . This re-enables event logging after the end-user has provided the required consent.\n\n```\nsetAutoLogAppEventsEnabled(true);\n```\n\nTo suspend event logging again for any reason, set the`setAutoLogAppEventsEnabled()` method to`false`:\n\n```\nsetAutoLogAppEventsEnabled(false);\n```\n\n### Disable collection of advertiser IDs\n\nTo disable the collection of advertiser ID, open the application’s`.plist` as code in Xcode and add the following XML to the property dictionary:\n\n```\n<key>FacebookAdvertiserIDCollectionEnabled</key>\n<false></false>\n```\n\nIn some cases, you can delay the collection of`advertiser_id` to obtain the user consent or fulfill any legal obligations instead of disabling it entirely. To do so, call the`setAdvertiserIDCollectionEnabled` method of the`FBSDKSettings` class and set it to`YES` for iOS, or`true` for Swift after the end-user provides consent:\n\nIn **Objective-C**:\n\n```\n[FBSDKSettings setAdvertiserIDCollectionEnabled:@YES];\n```\n\nIn **Swift**:\n\n```\nFBSDKSettings.setAdvertiserIDCollectionEnabled(true);\n```\n\nTo suspend collection for any reason, set the`setAdvertiserIDCollectionEnabled` method to`NO` for iOS or`false` for Swift.\n\nIn **Objective-C**:\n\n```\n[FBSDKSettings setAdvertiserIDCollectionEnabled:@NO];\n```\n\nIn **Swift**:\n\n```\nFBSDKSettings.setAdvertiserIDCollectionEnabled(false)\n```\n\n  \n\nTo disable collection of`advertiser-id`, add the following code to your`AndroidManifest.xml` file:\n\n```\n<application>\n  ...\n  <meta-data android:name=\"com.facebook.sdk.AdvertiserIDCollectionEnabled\" android:value=\"false\"></meta-data>\n  ...\n</application>\n```\n\nIn some cases, you can delay the collection of`advertiser_id` to obtain user consent or fulfill any legal obligations instead of disabling it entirely. To do so, call the`setAdvertiserIDCollectionEnabled()` method of the`FacebookSDK` class and set it to`true` . This re-enables the collection of`advertiser_id` after the end-user provides the required consent:\n\n```\nsetAdvertiserIDCollectionEnabled(true);\n```\n\nTo suspend collection for any reason, set the`setAdvertiserIDCollectionEnabled()` method to`false`:\n\n```\nsetAdvertiserIDCollectionEnabled(false)\n```\n\n### Disable automatic SDK initialization\n\nTo disable automatic SDK initialization in case of the Android SDK, add the following to your`AndroidManifest.xml` file:\n\n```\n<application>\n  ...\n  <meta-data androidname=\"com.facebook.sdk.AutoInitEnabled\" androidvalue=\"false\"></meta-data>\n  ...\n</application>\n```\n\nIn some cases, you can delay the SDK initialization to obtain user consent or fulfill any legal obligations instead of disabling it entirely. To do so, call the class method`setAutoInitEnabled` and set it to`true` to manually initialize the SDK after the end-user provides the required consent.\n\n```\nFacebookSdk.setAutoInitEnabled(true)\nFacebookSdk.fullyInitialize()\n```\n\nStarting from iOS version 14.5, you need to get the device consent to share data with Facebook by setting the `isAdvertiserTrackingEnabled` property. Refer to Facebook’s [Get device consent](https://developers.facebook.com/docs/app-events/getting-started-app-events-ios#get-device-consent) documentation for more information.\n\n## FAQ\n\n#### Where do I get the Facebook App ID?\n\nYou can find the **Facebook App ID** by logging into your [Facebook Developer account](https://developers.facebook.com/), and navigating to the **Home** page of your application’s dashboard:\n\n[![](https://www.rudderstack.com/docs/images/event-stream-destinations/fb-app-events-app-id.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/fb-app-events-app-id.webp)\n\n#### Where do I get the Facebook Client Token?\n\nYou can find the **Facebook Client Token** by logging into your [Facebook Developer account](https://developers.facebook.com/) and navigating to **Settings** > **Advanced** > **Security** section in the application’s dashboard:\n\n[![](https://www.rudderstack.com/docs/images/event-stream-destinations/fb-app-events-client-token.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/fb-app-events-client-token.webp)\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Facebook App Events | RudderStack Docs",
  "description": "Send your event data from RudderStack to Facebook App Events.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/engage/engage-device-mode/",
  "markdown": "# Engage device mode | RudderStack Docs\n\nSend events to Engage using RudderStack web device mode.\n\n* * *\n\n*     2 minute read  \n    \n\nRudderStack lets you send your event data to Engage via [device mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#device-mode) using the native web SDK.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> Find the open source JavaScript SDK code for this destination in the [GitHub repository](https://github.com/rudderlabs/rudder-sdk-js/tree/production/src/integrations/).\n\n## Identify\n\nThe [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) call lets you identify a visiting user and associate them to their actions. It also lets you record the traits about them like their name, email address, etc.\n\nRudderStack sends the attributes to Engage as is, using their `identify()` API.\n\nA sample `identify` call is as shown:\n\n```\nrudderanalytics.identify(\"1hKOmRA4el9Z\", {\n    \"email\": \"alex@example.com\"\n})\n```\n\nThe following table lists the RudderStack event properties and their mappings with the Engage properties/attributes:\n\n| RudderStack property | Engage property | Data type |\n| --- | --- | --- |\n| `externalId.engageId`, `userId`  <br>(Required) | `id` | String |\n| `context.traits`  <br>(Optional) | `payload` | Object |\n\n## Track\n\nThe [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call lets you capture user events along with the properties associated with them.\n\nRudderStack sends the event properties to Engage as is, using their `track()` API.\n\nA sample `track` call is as shown:\n\n```\nrudderanalytics.track(\n  \"Product Added\", {\n    product_id: \"12345\",\n    product_name: \"Pink flowers\",\n    product_url: \"http://www.yourdomain.com/products/pink-flowers\",\n  })\n```\n\nThe following table lists the RudderStack event properties and their mappings with the Engage properties/attributes:\n\n| RudderStack property | Engage property | Data type |\n| --- | --- | --- |\n| `externalId.engageId`, `userId`  <br>(Required) | `id` | String |\n| `event`  <br>(Required) | `event` | String |\n| `propertes`  <br>(Optional) | `properties` | Object |\n\n## Page\n\nThe [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call lets you record your website’s page views with any additional relevant information about the viewed page.\n\nRudderStack sends the page-related information to Engage as is, using their `track()` API.\n\nA sample `page` call is as shown:\n\n```\nrudderanalytics.page(\n  \"Cart\",\n  \"Cart Viewed\", {\n    title: \"new blank page\",\n    url: \"/pages/new\"\n  }\n);\n```\n\nThe following table lists the RudderStack event properties and their mappings with the Engage properties/attributes:\n\n| RudderStack property | Engage property | Data type |\n| --- | --- | --- |\n| `externalId.engageId`, `userId`  <br>(Required) | `id` | String |\n| `Visited {Category} {Name} Page`  <br>(Optional) | `event` | String |\n| `propertes`  <br>(Optional) | `properties` | Object |\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Engage device mode | RudderStack Docs",
  "description": "Send events to Engage using RudderStack web device mode.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/engage/setting-up-engage/",
  "markdown": "# Set up Engage | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Set up Engage | RudderStack Docs",
  "description": "Set up Engage as a destination in RudderStack.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/fb-conversions/setup-guide/",
  "markdown": "# Set up Facebook Conversions | RudderStack Docs\n\nSend your event data from RudderStack to Facebook Pixel.\n\n* * *\n\n*     5 minute read  \n    \n\nThis guide will help you set up Facebook Conversions as a destination in RudderStack.\n\n## Setup\n\n1.  In your [RudderStack dashboard](https://app.rudderstack.com/), go to **Directory** > **Destinations** > **Cloud Destinations** and search for **Facebook Conversions**.\n2.  Connect your source and click **Continue**.\n\n### Connection settings\n\nConfigure the following settings to set up Facebook Conversions as a destination in RudderStack:\n\n*   **Name**: Assign a name to uniquely identify the destination.\n*   **Dataset ID**: Enter the dataset ID. If an existing pixel is linked to your dataset, your dataset ID will be the same as your [Pixel ID](https://www.rudderstack.com/docs/destinations/streaming-destinations/fb-pixel/setting-up-fb-pixel/#where-can-i-find-the-pixel-id).\n*   **Business Access Token**: Enter the business access token from your Facebook business account. This is required to send events in cloud mode. For more information on obtaining the business access token, see the [FAQ](#where-can-i-find-the-business-access-token).\n\n### Connection mode\n\nRudderStack supports sending event data to Facebook Conversions only via [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode).\n\n| Connection Mode | Web | Mobile | Server |\n| --- | --- | --- | --- |\n| **Device mode** | \\-  | \\-  | \\-  |\n| **Cloud mode** | **Supported** | \\-  | **Supported** |\n\n### Configuration settings\n\nAfter completing the initial setup, configure the following settings to correctly receive your data in Facebook:\n\n#### **Event settings**\n\n*   **Action Source**: From the dropdown, select the fallback `action_source` value you want to set **if** `action_source` is not present in your event properties. RudderStack provides the following options:\n\n[![Action source setting](https://www.rudderstack.com/docs/images/event-stream-destinations/fb-conversions-action-source.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/fb-conversions-action-source.webp)\n\n#### **Destination settings**\n\n*   **Limited Data Usage**: If turned on, RudderStack takes the data processing information from the payload and sends it to Facebook. The data in the RudderStack payload should be in the following format:\n\n```\n\"context\": {\n  \"dataProcessingOptions\": [\n    [\n      \"LDU\"\n    ],\n    1,\n    1000\n  ],\n  \"fbc\": \"fb.1.1554763741205.AbCdEfGhIjKlMnOpQrStUvWxYz1234567890\",\n  \"fbp\": \"fb.1.1554763741205.234567890\",\n  \"fb_login_id\": \"fb_id\",\n  \"lead_id\": \"lead_id\",\n  \"device\": {\n    \"id\": \"df16bffa-5c3d-4fbb-9bce-3bab098129a7R\",\n    \"manufacturer\": \"Xiaomi\",\n    \"model\": \"Redmi 6\",\n    \"name\": \"xiaomi\"\n  },\n  \"network\": {\n    \"carrier\": \"AirCarrier\"\n  },\n  \"os\": {\n    \"name\": \"android\",\n    \"version\": \"8.1.0\"\n  },\n  \"screen\": {\n    \"height\": \"100\",\n    \"density\": 50\n  },\n  \"traits\": {\n    \"email\": \"john@example.com\",\n    \"anonymousId\": \"c82cbdff-e5be-4009-ac78-cdeea09ab4b1\"\n  }\n}\n```\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> If this setting is turned on, RudderStack maps the values in the `context.dataProcessingOptions` array to `commonData.data_processing_options`, `commonData.data_processing_options_country`, and `commonData.data_processing_options_state` fields.\n\nYou can set the value of the [`fbc`](https://developers.facebook.com/docs/marketing-api/conversions-api/parameters/fbp-and-fbc/#fbc) parameter using the `context.fbc` field as shown in the above payload.\n\nIf not set explicitly, RudderStack autogenerates it using the following values:\n\n*   Fetches `fbclid` from `context.page.url`.\n    \n*   Uses `originalTimestamp` as the creation time.\n    \n*   Sets `subdomainIndex` to `1`.\n    \n\n*   **Use as Test Destination**: Turn on this setting if you are using this destination for testing purposes and enter the **Test Event Code**. You can find this code in your Facebook dashboard. When turned on, you can check your events in the Facebook dashboard in realtime.\n    \n\n*   **Don’t send external\\_id for user**: If turned on, RudderStack does not send either `userId` or `anonymousId` as the `external_id` to Facebook.\n\n#### **Other settings**\n\n*   **Client-side event filtering**: Specify the events to be discarded or allowed to flow through. For more information, see [Client-side Event Filtering](https://www.rudderstack.com/docs/sources/event-streams/sdks/event-filtering/).\n*   **OneTrust cookie consent settings**: This setting lets you associate the [OneTrust](https://www.rudderstack.com/docs/data-governance/consent-management/onetrust/javascript/) cookie consent groups to Facebook Conversions.\n*   **Ketch consent settings**: This setting lets you associate the [Ketch](https://www.rudderstack.com/docs/data-governance/consent-management/ketch/) cookie consent groups to Facebook Conversions.\n\n#### **Event mapping**\n\nClick the **Set up mapping** button to map your RudderStack events and properties to specific Facebook custom events. You can also use the JSON mapper to set these mappings.\n\n##### **PII properties**\n\nRudderStack provides two options in this setting:\n\n[![PII settings](https://www.rudderstack.com/docs/images/event-stream-destinations/fb-conversions-pii-settings.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/fb-conversions-pii-settings.webp)\n\n*   **Denylist PII Properties**: RudderStack drops the PII properties specified in this field. However, if you toggle on the **Denylist PII Hash Property** setting, RudderStack encrypts the properties in SHA256 format before sending them to Facebook. The following properties are the **default denylisted properties**:\n    \n    *   `email`\n    *   `firstName`\n    *   `lastName`\n    *   `firstname`\n    *   `lastname`\n    *   `first_name`\n    *   `last_name`\n    *   `gender`\n    *   `city`\n    *   `country`\n    *   `phone`\n    *   `state`\n    *   `zip`\n    *   `postalCode`\n    *   `birthday`\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> To hash and send any of the above properties, enter the property name in the **Denylist PII Properties** field and toggle on the **Denylist PII Hash Property** toggle.\n\n*   **Allowlist PII Properties**: The PII properties mentioned in this field are sent to Facebook if they are present in the event’s properties.\n\n## FAQ\n\n#### Where can I find the dataset ID?\n\nTo get your dataset ID, go to your Facebook Ads Manager account. From the left navigation bar, select **Business Tools**, and click **Events Manager** under **Manage Business**.\n\n[![Dataset ID](https://www.rudderstack.com/docs/images/event-stream-destinations/fb-conversions-dataset-id-1.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/fb-conversions-dataset-id-1.webp)\n\nYou should be able to see the ID underneath your site name under **Data Sources**:\n\n[![Dataset ID](https://www.rudderstack.com/docs/images/event-stream-destinations/fb-conversions-dataset-id-2.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/fb-conversions-dataset-id-2.webp)\n\n#### Where can I find the Business Access Token?\n\nIn order to use the Facebook Conversions API, you need to generate an access token using the Facebook Events Manager:\n\n1.  Choose the relevant Facebook Pixel and click the **Settings** tab.\n2.  In the Conversions API section, click **Generate access token** under the **Set up manually** section:\n\n[![FB Conversions generate access token](https://www.rudderstack.com/docs/images/event-stream-destinations/fb-conversions-generate-access-token.webp)](https://www.rudderstack.com/docs/images/event-stream-destinations/fb-conversions-generate-access-token.webp)\n\n#### Can I hash my event data before sending it to RudderStack?\n\nYes. Facebook requires all user data, including data coming from `context.traits`, to be hashed. This includes `email`, `phone`, `birthday`, `address`, etc. By default, RudderStack automatically hashes all of the necessary properties for you. However, to hash these traits before sending to RudderStack, you need to send your event as follows:\n\n```\nrudderanalytics.track(\n  \"event_name\", {\n    properties\n  }, {\n    integrations: {\n      \"Facebook Conversions\": {\n        hashed: true,\n      },\n    },\n  }\n)\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack accepts any of the following names for Facebook Conversions in the `integrations` object:\n> \n> *   `fb_conversions`\n> *   `fb conversions`\n> *   `FacebookConversions`\n> *   `Facebook Conversions`\n> *   `FB Conversions`\n> *   `Facebook_Conversions`\n\nThe `integrations` object with these key-values notifies RudderStack to not hash the traits in `context.traits` as they are already hashed. Otherwise, RudderStack will hash your data again and Facebook will not be able to match the traits. Keep in mind that Facebook rejects any un-hashed data.\n\n#### Why can’t I can see my events in the RudderStack dashboard but not in the Facebook dashboard?\n\nIt may take up to 24 hours for your events to reflect in the Facebook dashboard.  \nYou can also verify if your events are flowing correctly by enabling the **Use as Test Destination** setting in the RudderStack dashboard. It reflects the events in the Facebook dashboard in real time.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Set up Facebook Conversions | RudderStack Docs",
  "description": "Send your event data from RudderStack to Facebook Pixel.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/fb-conversions/",
  "markdown": "# Facebook Conversions | RudderStack Docs\n\nPrivacy Overview\n\nThis site uses cookies to improve your experience while you navigate through the website. Out of these cookies, the cookies that are categorized as necessary are stored on your browser as they are as essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may have an effect on your browsing experience.\n\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.",
  "title": "Facebook Conversions | RudderStack Docs",
  "description": "Send your event data from RudderStack to Facebook using the Conversions API.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/fb-conversions/cloud-mode/",
  "markdown": "# Facebook Conversions Cloud mode | RudderStack Docs\n\nSend events to Facebook Conversions using RudderStack cloud mode.\n\n* * *\n\n*     6 minute read  \n    \n\nRudderStack supports sending event data to Facebook Conversions only in [cloud mode](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/#cloud-mode).\n\n## Page\n\nRudderStack sends the [`page`](https://www.rudderstack.com/docs/event-spec/standard-events/page/) call to Facebook Pixel with the event type as `pageView`.\n\nYou can also pass properties in your `page` call - RudderStack automatically sends them along with the event ID to Facebook.\n\nA sample `page` call is shown:\n\n## Track\n\nYou can use the [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/) call to custom events as they occur in your web application.\n\nA sample `track` call is shown:\n\n```\nrudderanalytics.track(\"Product Added\", {\n  order_ID: \"123\",\n  category: \"boots\",\n  product_name: \"pink_boots\",\n  price: 49.99,\n  currency: \"EUR\",\n  checkinDate: \"Thu Mar 24 2018 17:46:45 GMT+0000 (UTC)\",\n})\n```\n\n## `data` object format\n\nWhenever you make a `track` call, RudderStack sends a request to Facebook’s `/events` endpoint with a `data` object.\n\nA sample `data` object is shown:\n\n```\ndata = [{\n  \"event_name\": \"Product Purchased\",\n  \"event_time\": 1697553987,\n  \"user_data\": {\n    \"em\": [\n      \"309a0a5c3e211326ae75ca18196d301a9bdbd1a882a4d2569511033da23f0abd\"\n    ],\n    \"ph\": [\n      \"254aa248acb47dd654ca3ea53f48c2c26d641d23d7e2e93a1ec56258df7674c4\",\n      \"6f4fcb9deaeadc8f9746ae76d97ce1239e98b404efe5da3ee0b7149740f89ad6\"\n    ],\n    \"client_ip_address\": \"<ip>\",\n    \"client_user_agent\": \"$CLIENT_USER_AGENT\",\n    \"fbc\": \"fb.1.1554763741205.AbCdEfGhIjKlMnOpQrStUvWxYz1234567890\",\n    \"fbp\": \"fb.1.1558571054389.1098115397\"\n  },\n  \"custom_data\": {\n    \"currency\": \"USD\",\n    \"value\": 123.45,\n    \"contents\": [{\n      \"id\": \"product123\",\n      \"quantity\": 1,\n      \"delivery_category\": \"home_delivery\"\n    }]\n  },\n  \"event_source_url\": \"http://example.com/product/123\",\n  \"action_source\": \"website\"\n}]\n```\n\nThe `data` object has the following parts:\n\n### Common data\n\nThe common data parameters are set at the root level of the `data` object sent as a part of the event payload.\n\nThe following table lists the mappings between the RudderStack properties and the Facebook properties included in `common_data`:\n\n| RudderStack property | Facebook property |\n| --- | --- |\n| `event`  <br>Required | `event_name` |\n| `timestamp`  <br>`originalTimestamp`  <br>Required | `event_time` |\n| `context.page.url`  <br>`properties.url` | `event_source_url` |\n| `traits.opt_out`  <br>`context.traits.opt_out`  <br>`properties.opt_out` | `opt_out` |\n| `traits.event_id`  <br>`context.traits.event_id`  <br>`properties.event_id`  <br>`messageId` | `event_id` |\n| `traits.action_source`  <br>`context.traits.action_source`  <br>`properties.action_source` | `action_source` |\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Note that:\n> \n> *   If your event does not contain any of `traits.action_source`, `context.traits.action_source`, or `properties.action_source`, then RudderStack falls back to the value specified in the **Action Source** dashboard setting.\n> *   Do not set `action_source` to any value other than the following - otherwise you will get a **Invalid Action Source type** error:\n>     *   `email`\n>     *   `website`\n>     *   `phone_call`\n>     *   `chat`\n>     *   `physical_store`\n>     *   `system_generated`\n>     *   `app`, and\n>     *   `other`\n\n### User data\n\nThe following table lists the mappings between the RudderStack properties and the Facebook properties included in `user_data`:\n\n| RudderStack property | Facebook property | Hashing needed? |\n| --- | --- | --- |\n| `userId`  <br>`traits.userId`  <br>`context.traits.userId`  <br>`traits.id`  <br>`context.traits.id`  <br>`anonymousId`  <br>Required | `externalId` | Yes |\n| `traits.email`  <br>`context.traits.email` | `em` | Yes |\n| `traits.phone`  <br>`context.traits.phone` | `ph` | Yes |\n| `traits.gender`  <br>`context.traits.gender` | `ge` | Yes |\n| `traits.birthday`  <br>`context.traits.birthday` | `db` | Yes |\n| `traits.lastname`  <br>`traits.lastName`  <br>`traits.last_name`  <br>`context.traits.lastname`  <br>`context.traits.lastName`  <br>`context.traits.last_name` | `ln` | Yes |\n| `traits.firstname`  <br>`traits.firstName`  <br>`traits.first_name`  <br>`context.traits.firstname`  <br>`context.traits.firstName`  <br>`context.traits.first_name` | `fn` | Yes |\n| `traits.name`  <br>`context.traits.name` | `name` | \\-  |\n| `traits.address.city`  <br>`context.traits.address.city` | `ct` | Yes |\n| `traits.address.state`  <br>`context.traits.address.state` | `st` | Yes |\n| `traits.address.zip`  <br>`context.traits.address.zip` | `zp` | Yes |\n| `traits.address.country`  <br>`context.traits.address.country` | `country` | Yes |\n| `context.ip`  <br>`request_up` | `client_ip_address` | \\-  |\n| `context.userAgent` | `client_user_agent` | \\-  |\n| `context.fbc` | `fbc` | \\-  |\n| `context.fbp` | `fbp` | \\-  |\n| `context.subscription_id` | `subscription_id` | \\-  |\n| `context.lead_id` | `lead_id` | \\-  |\n| `context.fb_login_id` | `fb_login_id` | \\-  |\n| `context.device.advertisingId` | `madId` | \\-  |\n| `properties.anon_id`  <br>`context.device.advertisingId` | `anon_id` | \\-  |\n\nAfter the payload is formed, Facebook checks if `name` field exists. If yes, it is split into `fn` and `ln` fields. Facebook does not hash the values of `user_data` parameters if you send an `integrations` object in your event as below:\n\n```\n\"integrations\": {\n  \"fb_conversions\": {\n    \"hashed\": true\n  }\n}\n```\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack accepts any of the following names for Facebook Conversions in the `integrations` object:\n> \n> *   `fb_conversions`\n> *   `fb conversions`\n> *   `FacebookConversions`\n> *   `Facebook Conversions`\n> *   `FB Conversions`\n> *   `Facebook_Conversions`\n\n### Custom data\n\nRudderStack flattens the `custom_data` object before sending it Facebook along with the `user_data` and `common_data` fields in the `data` object.\n\nNote that:\n\n*   RudderStack sends the properties present in `custom_data` as is, without any change.\n*   It also excludes `opt_out`, `event_id`, and `action_source` from the event properties.\n\nThe following table explains how RudderStack maps and sets the properties in the specific Facebook fields:\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> Each of the below parameters are applicable/valid only for certain events.\n> \n> See [Standard events mapping](#standard-events-mapping) for more information on the properties mapped for each Facebook property according to the event.\n\n| RudderStack property | Facebook property |\n| --- | --- |\n| Array of product IDs from `properties.products` like `product.product_id`, `product.sku`, `product.id`. | `content_ids` |\n| Array of object containing `id`, `quantity`, and `item_price` formed for each product in `properties.products`. | `contents` |\n| `properties.content_type` | `content_type` |\n| `properties.category` | `content_category` |\n| *   `properties.content_name` or `properties.contentName` if `properties.products` array is **not** present.<br>*   `properties.name` or `properties.product_name` if `properties.products` array is present. | `content_name` |\n| `properties.currency` - defaulted to `USD` if no value is present. | `currency` |\n| `properties.revenue`  <br>`properties.value`  <br>`properties.price`  <br>`properties.total` | `value` |\n| `content_ids.length` | `num_items` |\n| `properties.query` | `search_string` |\n\nNote that `content_category` must be of type String. For more information on this field, see [Facebook developer documentation](https://developers.facebook.com/docs/marketing-api/conversions-api/parameters/custom-data).\n\n*   If `content_category` is passed as an array, RudderStack merges the array elements as a comma-separated string.\n*   If `content_category` is passed as an object, RudderStack throws an error: `\"Category must be must be a string.\"`\n\n#### **PII properties**\n\nFacebook identifies the following event properties as PII properties:\n\n*   `email`\n*   `firstName`\n*   `lastName`\n*   `first_name`\n*   `last_name`\n*   `gender`\n*   `city`\n*   `country`\n*   `phone`\n*   `state`\n*   `zip`\n*   `birthday`\n\nIf any mapped `custom_data` property is among the above properties, RudderStack checks if the property is allowlisted. If no, it is dropped.\n\nIf the property is denylisted, RudderStack checks if the [Denylist PII Hash Property](https://www.rudderstack.com/docs/destinations/streaming-destinations/fb-conversions/setup-guide/#pii-properties) toggle is turned on in the dashboard. If no, it is dropped. Otherwise, RudderStack hash-encrypts it before sending to Facebook.\n\nAs mentioned [above](#userdata), if you send an `integrations` object within your event with `hashed` set to `true`, RudderStack does not hash the property again.\n\n```\n\"integrations\": {\n  \"fb_conversions\": {\n    \"hashed\": true\n  }\n}\n```\n\n### App data\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> RudderStack includes this data only if `action_source` in the `data object` is set to `app`.\n\nThe following table lists the mappings between the RudderStack properties and the Facebook properties:\n\n| RudderStack property | Facebook property |\n| --- | --- |\n| `a2` if `context.device.type` = `android`  <br>`i2` if `context.device.type` = `ios`  <br>Required | `extinfo.0` |\n| `context.device.adTrackingEnabled`  <br>Required | `advertiser_tracking_enabled` |\n| `context.os.version`  <br>Required | `extinfo.4` |\n| `properties.application_tracking_enabled`  <br>Required | `application_tracking_enabled` |\n| `anonymousId` | `user_data.anon_id` |\n| `context.app.namespace` | `extinfo.1` |\n| `context.app.build` | `extinfo.2` |\n| `context.app.version` | `extinfo.3` |\n| `context.device.model` | `extinfo.5` |\n| `context.device.advertisingId` | `user_data.madid` |\n| `context.locale` | `extinfo.6` |\n| `context.abv_timezone` | `extinfo.7` |\n| `context.network_carrier` | `extinfo.8` |\n| `context.screen_width` | `extinfo.9` |\n| `context.screen_height` | `extinfo.10` |\n| `context.screen_density` | `extinfo.11` |\n| `context.cpu_cores` | `extinfo.12` |\n| `context.ext_storage_size` | `extinfo.13` |\n| `context.avl_storage_size` | `extinfo.14` |\n| `context.timezone` | `extinfo.15` |\n| `properties.campaignId`  <br>`context.traits.campaignId`  <br>`context.campaign.name` | `campaign_ids` |\n| `properties.install_referrer` | `install_referrer` |\n| `properties.installer_package` | `installer_package` |\n| `properties.url_schemes` | `url_schemes` |\n| `properties.windows_attribution_id` | `windows_attribution_id` |\n\n## Standard events mapping\n\nRudderStack maps the following events to the Facebook standard events by default:\n\n| RudderStack Event | Facebook Standard Event |\n| --- | --- |\n| `Checkout Started` | `InitiateCheckout` |\n| `Order Completed` | `Purchase` |\n| `Product Added` | `AddToCart` |\n| `Product Added to Wishlist` | `AddToWishlist` |\n| `Payment Info Entered` | `AddPaymentInfo` |\n| `Product List Viewed` | `ViewContent` |\n| `Products Searched` | `Search` |\n| `Product Viewed` | `ViewContent` |\n\nSee the [Ecommerce Events Specification](https://www.rudderstack.com/docs/event-spec/ecommerce-events-spec/) for more information on the above events.\n\nNote that:\n\n*   For the `Purchase` standard event (mapped to `Order Completed` event), `properties.revenue` is a required field. Also, RudderStack sends the `delivery_category` field along with `id`, `item_price` and `quantity` as a part of the [`custom_data.contents`](#data-object-format) object.\n    \n*   For the `Products Searched` event, the `query` property must be a string.\n    \n*   If you map an event with the `ViewContent` standard event using the RudderStack dashboard setting and don’t send the `products` array in the `message.properties` object:\n    \n    ```\n    \"properties\": {\n      \"phone\": 1-202-555-0146,\n      \"email\": \"alex@example.com\",\n      \"category\": \"clothing\",\n      \"list_id\": \"1234\",\n      \"testDimension\": true,\n      \"testMetric\": true\n    }\n    ```\n    \n    Then, `content_ids` is mapped to `properties.category` value (`clothing` in this case) and `quantity` is set to `1` inside the `contents` object.\n    \n\nThe below table elaborates the property mappings between RudderStack and Facebook corresponding to the RudderStack event:\n\n| RudderStack event | RudderStack property | Facebook property |\n| --- | --- | --- |\n| Checkout Started |\n| `products.$.product_id/products.$.sku/products.$.id` | `content_ids` |\n| `category`  <br>`currency`  <br>`revenue` | `content_category`  <br>`currency`  <br>`value` |\n| `products.$.product_id/products.$.sku/products.$.id`  <br>`products.$.quantity/quantity`  <br>`product.$.price/price` | `contents.id`  <br>`contents.quantity`  <br>`contents.item_price` |\n| Product List Viewed |\n| `products.$.product_id/products.$.sku/products.$.id` | `content_ids` |\n| `category`  <br>`contentName`  <br>`currency`  <br>`value` | `content_category`  <br>`content_name`  <br>`currency`  <br>`value` |\n| `products.$.product_id/products.$.sku/products.$.id`  <br>`products.$.quantity/quantity`  <br>`product.$.price` | `contents.id`  <br>`contents.quantity`  <br>`contents.item_price` |\n| Product Viewed |\n| `product_id/sku/id`  <br>`product_name/name`  <br>`category`  <br>`currency` | `content_ids`  <br>`content_name`  <br>`content_category`  <br>`currency` |\n| `product_id/sku/id`  <br>`quantity`  <br>`price` | `contents.id`  <br>`contents.quantity`  <br>`contents.item_price` |\n| Product Added |\n| `product_id/sku/id`  <br>`product_name/name`  <br>`currency` | `content_ids`  <br>`content_name`  <br>`currency` |\n| `product_id/sku/id`  <br>`quantity`  <br>`price` | `contents.id`  <br>`contents.quantity`  <br>`contents.item_price` |\n| Order Completed |\n| `products.$.product_id/products.$.sku/products.$.id` | `content_ids` |\n| `contentName`  <br>`currency`  <br>`revenue` | `content_name`  <br>`currency`  <br>`value` |\n| `products.$.delivery_category`/`properties.delivery_category`  <br>`products.$.product_id/products.$.sku/products.$.id`  <br>`products.$.quantity/quantity`  <br>`product.$.price/price` | `contents.delivery_category`  <br>`contents.id`  <br>`contents.quantity`  <br>`contents.item_price` |\n| Products Searched | `query`  <br>`product_id/sku/id`  <br>`category`  <br>`currency`  <br>`value` | `search_string`  <br>`content_ids`  <br>`content_category`  <br>`currency`  <br>`value` |\n| `product_id/sku/id`  <br>`quantity`  <br>`price` | `contents.id`  <br>`contents.quantity`  <br>`contents.item_price` |\n| Product Added to Wishlist |\n| `products.$.product_id/products.$.sku/products.$.id` | `content_ids` |\n| `category`  <br>`contentName`  <br>`currency`  <br>`value` | `content_category`  <br>`content_name`  <br>`currency`  <br>`value` |\n| `products.$.product_id/products.$.sku/products.$.id`  <br>`products.$.quantity/quantity`  <br>`product.$.price/price` | `contents.id`  <br>`contents.quantity`  <br>`contents.item_price` |\n| Payment Info Entered |\n| `products.$.product_id/products.$.sku/products.$.id` | `content_ids` |\n| `category`  <br>`currency`  <br>`value` | `content_category`  <br>`currency`  <br>`value` |\n| `products.$.product_id/products.$.sku/products.$.id`  <br>`products.$.quantity/quantity`  <br>`product.$.price/price` | `contents.id`  <br>`contents.quantity`  <br>`contents.item_price` |\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For all the standard events mentioned above:\n> \n> *   Default values for the `currency` and `quantity` properties are `USD` and `1` respectively.\n> *   `content_ids` field is populated from the `products` array. If the `products` array is not present in the `properties`, `content_ids` is set to an empty array resulting in `num_items` being set to `0`.\n\n### Other standard events\n\nIf you map your event to any of the following Facebook standard events, then RudderStack treats it as a standard event as well:\n\n*   `Lead`\n*   `CompleteRegistration`\n*   `Contact`\n*   `CustomizeProduct`\n*   `Donate`\n*   `FindLocation`\n*   `Schedule`\n*   `StartTrial`\n*   `SubmitApplication`\n*   `Subscribe`\n\nFor any properties you want to send with these events, you must specify them in the [Event Mapping](https://www.rudderstack.com/docs/destinations/streaming-destinations/fb-conversions/setup-guide/#event-mapping) settings.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> For the above-mentioned events and [custom events](https://www.rudderstack.com/docs/destinations/streaming-destinations/fb-conversions/setup-guide/#custom-event), Rudderstack sends `content_ids` and `num_items` to Facebook as a part of `properties` in the appropriate format.\n\n## Deduplication\n\nFacebook allows you to send events via your web browser and your server via the Conversion API. Depending on how you send your events with this duel setup, there is a possibility of Facebook receiving redundant/duplicate events. Hence, to get an accurate representation of your data, Facebook [deduplicates the incoming events](https://www.facebook.com/business/help/823677331451951?id=1205376682832142).\n\n### Using `event_id`\n\nFacebook’s (and RudderStack’s) **recommended** deduplication strategy is to leverage the `event_name` and `event_id` properties. When two events coming into Facebook meet the following criteria, they are deduplicated.\n\n*   They are sent within 48 hours of each other.\n*   They are received by the same Facebook Pixel ID.\n*   They have the same `event_name`, for example, `Purchase`.\n*   They have the same `event_id`.\n    *   The `event_id` must be unique to that specific event and same for both of the events. For example, the `event_id` could be a purchase order number.\n\nYou can set the `event_id` as a unique identifier in the event’s `traits`, `context.traits`, or the `properties` object. RudderStack automatically picks up the `event_name` from the event.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> If you don’t set the `event_id`, RudderStack uses `messageId` and maps it to Facebook’s `eventId`.\n\nFor more information on the `event_id` deduplication logic, see the [Facebook developer documentation](https://developers.facebook.com/docs/marketing-api/conversions-api/deduplicate-pixel-and-server-events/#event-id-and-event-name---recommended).\n\n### Using `fbp` and `external_id`\n\n> ![warning](https://www.rudderstack.com/docs/images/warning.svg)\n> \n> This deduplication strategy is not recommended as it has a few drawbacks:\n> \n> *   It will always discard the server event if Facebook identifies a redundant event.\n> *   It only works for deduplicating events sent first from the browser and then the server.\n> *   There is no deduplication if two consecutive browser events with the same information are sent to Facebook. The same is true if two server events with the same information are sent to Facebook.\n\nFor this approach, it is necessary to send an event, first from the browser and then from the server. Note that both events must have the same `event_name`, the same `fbp` parameter, and the same `external_id`.\n\nIf the browser event is received before the server event and both events have the same `event_name` and the same `fbp` and `external_id`, then the server event is discarded.\n\nRudderStack maps the `event_name` from the event sent to Facebook. The `fbp` parameter is taken from the `context.fbp` key-value pair. Finally, the `external_id` will be the `userId` or `anonymousId` (if `userId` is not present).\n\nFor more information on the `fbp` and `external_id` deduplication logic, see the [Facebook developer documentation](https://developers.facebook.com/docs/marketing-api/conversions-api/deduplicate-pixel-and-server-events/#fbp-or-external-id).\n\n## Sending custom `content_type`\n\nYou can send a custom [`content_type`](https://developers.facebook.com/docs/meta-pixel/get-started/advantage-catalog-ads#content-type) field by specifying it in the `properties.content_type` field of your event.\n\nRudderStack sets the value of `content_type` in the following priority order:\n\n1.  It gives the highest priority to `properties.content_type` in your event.\n2.  If `properties.content_type` is absent, RudderStack sets the `content_type` to `product` by default, except in the following cases:\n\n*   If **Product List Viewed** event is sent:\n    *   with `products` array, then the `content_type` is set to `product`.\n    *   without the `products` array, then the `content_type` is set to `product_group`.\n*   If **Product Viewed** event is not mapped in RudderStack dashboard (default mapping is set to **View Content** event) but is sent:\n    *   with `products` array, then the `content_type` is set to `product`.\n    *   without the `products` array, then the `content_type` is set to `product_group`.\n*   If any other event is mapped to the Facebook standard event **View Content** in the RudderStack dashboard and is sent:\n    *   with `products` array, then the `content_type` is set to `product`.\n    *   without the `products` array, then the `content_type` is set to `product_group`.\n\n> ![info](https://www.rudderstack.com/docs/images/info.svg)\n> \n> `product` and `product_group` are the only two acceptable values for `content_type`.\n\nQuestions? Contact us by [email](mailto:docs@rudderstack.com) or on [Slack](https://rudderstack.com/join-rudderstack-slack-community)",
  "title": "Facebook Conversions Cloud mode | RudderStack Docs",
  "description": "Send events to Facebook Conversions using RudderStack cloud mode.",
  "languageCode": "en"
},
{
  "url": "https://www.rudderstack.com/docs/destinations/streaming-destinations/fb-pixel/setting-up-fb-pixel/",
  "markdown": "# Set up Facebook Pixel | RudderStack Docs\n\nSend your event data from RudderStack to Facebook Pixel.\n\n* * *\n\n*     7 minute read  \n    \n\nRudderStack supports sending event data to Facebook Pixel via the following [connection modes](https://www.rudderstack.com/docs/destinations/rudderstack-connection-modes/):\n\n| **Connection Mode** | **Web** | **Mobile** | **Server** |\n| --- | --- | --- | --- |\n| **Device mode** | **Supp